<h1>HTML</h1>

<pre class="metadata">
Shortname: html
Level: 5.1
Group: html
Status: WD
TR: http://www.w3.org/TR/html/
ED: https://github.com/w3c/html/
Previous Version: http://www.w3.org/TR/2014/WD-html51-20140204/

Editor: WHATWG
Editor: Simon Pieters, Opera Software, simonp@opera.com
Editor: Anne van Kesteren, Mozilla, annevk@annevk.nl
Editor: Philip JÃ¤genstedt, Opera Software, philipj@opera.com
Editor: Domenic Denicola, Google Inc., d@domenic.me
Editor: Ian Hickson, Google Inc., ian@hixie.ch
Editor: W3C
Editor: Steve Faulkner, The Paciello Group, sfaulkner@paciellogroup.com
Editor: Travis Leithead, Microsoft, travil@microsoft.com
Editor: Erika Doyle Navara, Microsoft, Erika.Doyle@microsoft.com
Editor: Edward O'Connor, Apple Inc., eoconnor@apple.com
Editor: Robin Berjon, W3C (Until August 2015), http://berjon.com/
Abstract: This specification defines the 5th major version, first minor revision of the core
          language of the World Wide Web: the Hypertext Markup Language (HTML). In this version,
          new features continue to be introduced to help Web application authors, new elements
          continue to be introduced based on research into prevailing authoring practices, and
          special attention continues to be given to defining clear conformance criteria for user
          agents in an effort to improve interoperability.
Ignored Vars: this, object, variable, optionalArgument, name, value, e, oldParent, removedNode, Document, Feature, owner
</pre>

<pre class="anchors">
urlPrefix: http://www.w3.org/TR/workers/; type: dfn; spec: WORKERS; text: worker;
urlPrefix: http://www.whatwg.org/specs/web-apps/current-work/; type: dfn; spec: WHATWG; text: WHATWG HTML specification;
urlPrefix: http://html5.org/r/8424/; type: dfn; text: 8424
</pre>

<pre class="link-defaults">
spec:dom-ls; type:dfn; for:Attr; text:name
spec:url; type:dfn; for:url; text:url
</pre>

<pre class="biblio">
{
  "NPAPI": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "COMPUTABLE": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "EDITING": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "UNDO": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "GREGORIAN": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "ISO8601": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "WHATWGWIKI": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "IANAPERMHEADERS": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "CP50220": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "CESU8": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "BOCU1": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "SCSU": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "TZDATABASE": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "PDF": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "APNG": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "MNG": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "INBAND": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "MPEG4": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "DASH": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "GRAPHICS": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "OPENSEARCH": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "MAILTO": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "MFREL": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "UCA": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "X690": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "ISO3166": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "ISO4217": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "CLDR": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "DOT": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "TOR": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "PAGEVIS": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "PSL": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "UNIVCHARDET": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "PPUTF8": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  },
  "UTF8DET": {
    "authors": [ "" ],
    "href": "",
    "title": "",
    "status": "",
    "publisher": "",
    "deliveredBy": [ "" ]
  }
}
</pre>

<!-- Big Text: Introduction -->

<h2 id="introduction">Introduction</h2>

<h3 id="background">Background</h3>

  <em>This section is non-normative.</em>

  The World Wide Web's markup language has always been HTML. HTML was primarily designed as a
  language for semantically describing scientific documents, although its general design and
  adaptations over the years have enabled it to be used to describe a number of other types of
  documents.

  The main area that has not been adequately addressed by HTML is a vague subject referred to as Web
  Applications. This standard attempts to rectify this, while at the same time updating the HTML
  language to address issues raised in the past few years.

<h3 id="audience">Audience</h3>

  <em>This section is non-normative.</em>

  This specification is intended for authors of documents and scripts that use the features defined
  in this specification<span class="impl">, implementors of tools that operate on pages that use the
  features defined in this specification, and individuals wishing to establish the correctness of
  documents or implementations with respect to the requirements of this specification</span>.

  This document is probably not suited to readers who do not already have at least a passing
  familiarity with Web technologies, as in places it sacrifices clarity for precision, and brevity
  for completeness. More approachable tutorials and authoring guides can provide a gentler
  introduction to the topic.

  In particular, familiarity with the basics of DOM is necessary for a complete understanding of
  some of the more technical parts of this specification. An understanding of Web IDL, HTTP, XML,
  Unicode, character encodings, JavaScript, and CSS will also be helpful in places but is not
  essential.

<h3 id="scope">Scope</h3>

  <em>This section is non-normative.</em>

  This specification is limited to providing a semantic-level markup language and associated
  semantic-level scripting APIs for authoring accessible pages on the Web ranging from static
  documents to dynamic applications.

  The scope of this specification does not include providing mechanisms for media-specific
  customization of presentation (although default rendering rules for Web browsers are included at
  the end of this specification, and several mechanisms for hooking into CSS are provided as part
  of the language).

  The scope of this specification is not to describe an entire operating system. In particular,
  hardware configuration software, image manipulation tools, and applications that users would be
  expected to use with high-end workstations on a daily basis are out of scope. In terms of
  applications, this specification is targeted specifically at applications that would be expected
  to be used by users on an occasional basis, or regularly but from disparate locations, with low
  CPU requirements. Examples of such applications include online purchasing systems, searching
  systems, games (especially multiplayer online games), public telephone books or address books,
  communications software (e-mail clients, instant messaging clients, discussion software),
  document editing software, etc.

<h3 id="history">History</h3>

  <em>This section is non-normative.</em>

  For its first five years (1990-1995), HTML went through a number of revisions and experienced a
  number of extensions, primarily hosted first at CERN, and then at the IETF.

  With the creation of the W3C, HTML's development changed venue again. A first abortive attempt at
  extending HTML in 1995 known as HTML 3.0 then made way to a more pragmatic approach known as
  HTML3.2, which was completed in 1997. HTML4 quickly followed later that same year.

  The following year, the W3C membership decided to stop evolving HTML and instead begin work on
  an XML-based equivalent, called XHTML. This effort started with a reformulation of HTML4 in XML,
  known as XHTML 1.0, which added no new features except the new serialization, and which was
  completed in 2000. After XHTML 1.0, the W3C's focus turned to making it easier for other working
  groups to extend XHTML, under the banner of XHTML Modularization. In parallel with this, the W3C
  also worked on a new language that was not compatible with the earlier HTML and XHTML languages,
  calling it XHTML2.

  Around the time that HTML's evolution was stopped in 1998, parts of the API for HTML developed
  by browser vendors were specified and published under the name DOM Level 1 (in 1998) and DOM
  Level 2 Core and DOM Level 2 HTML (starting in 2000 and culminating in 2003). These efforts then
  petered out, with some DOM Level 3 specifications published in 2004 but the working group being
  closed before all the Level 3 drafts were completed.

  In 2003, the publication of XForms, a technology which was positioned as the next generation of
  Web forms, sparked a renewed interest in evolving HTML itself, rather than finding replacements
  for it. This interest was borne from the realization that XML's deployment as a Web technology was
  limited to entirely new technologies (like RSS and later Atom), rather than as a replacement for
  existing deployed technologies (like HTML).

  A proof of concept to show that it was possible to extend HTML4's forms to provide many of the
  features that XForms 1.0 introduced, without requiring browsers to implement rendering engines
  that were incompatible with existing HTML Web pages, was the first result of this renewed
  interest. At this early stage, while the draft was already publicly available, and input was
  already being solicited from all sources, the specification was only under Opera Software's
  copyright.

  The idea that HTML's evolution should be reopened was tested at a W3C workshop in 2004, where
  some of the principles that underlie the HTML5 work (described below), as well as the
  aforementioned early draft proposal covering just forms-related features, were presented to the
  W3C jointly by Mozilla and Opera. The proposal was rejected on the grounds that the proposal
  conflicted with the previously chosen direction for the Web's evolution; the W3C staff and
  membership voted to continue developing XML-based replacements instead.

  Shortly thereafter, Apple, Mozilla, and Opera jointly announced their intent to continue working
  on the effort under the umbrella of a new venue called the WHATWG. A public mailing list was
  created, and the draft was moved to the WHATWG site. The copyright was subsequently amended to be
  jointly owned by all three vendors, and to allow reuse of the specification.

  The WHATWG was based on several core principles, in particular that technologies need to be
  backwards compatible, that specifications and implementations need to match even if this means
  changing the specification rather than the implementations, and that specifications need to be
  detailed enough that implementations can achieve complete interoperability without
  reverse-engineering each other.

  The latter requirement in particular required that the scope of the HTML5 specification include
  what had previously been specified in three separate documents: HTML4, XHTML1, and DOM2 HTML. It
  also meant including significantly more detail than had previously been considered the norm.

  In 2006, the W3C indicated an interest to participate in the development of HTML5 after all, and
  in 2007 formed a working group chartered to work with the WHATWG on the development of the HTML5
  specification. Apple, Mozilla, and Opera allowed the W3C to publish the specification under the
  W3C copyright, while keeping a version with the less restrictive license on the WHATWG site.

  For a number of years, both groups then worked together under the same editor: Ian Hickson. In
  2011, the groups came to the conclusion that they had different goals: the W3C wanted to draw a
  line in the sand for features for a HTML5 Recommendation, while the WHATWG wanted to continue
  working on a Living Standard for HTML, continuously maintaining the specification and adding new
  features. In mid 2012, a new editing team was introduced at the W3C to take care of creating a
  HTML5 Recommendation and prepare a Working Draft for the next HTML version.

  Since then, the W3C HTML WG has been cherry picking patches from the WHATWG that resolved bugs
  registered on the W3C HTML specification or more accurately represented implemented reality in
  UAs. At time of publication of this document, patches from the <a>WHATWG HTML specification</a>
  have been merged until revision <a>8424</a> inclusive. The W3C HTML editors have also added
  patches that resulted from discussions and decisions made by the W3C HTML WG as well a bug fixes
  from bugs not shared by the WHATWG.

  A separate document is published to document the differences between the HTML specified in this
  document and the language described in the HTML4 specification. [[HTML5-DIFF]]

<h3 id="design-notes">Design notes</h3>

  <em>This section is non-normative.</em>

  It must be admitted that many aspects of HTML appear at first glance to be nonsensical and
  inconsistent.

  HTML, its supporting DOM APIs, as well as many of its supporting technologies, have been
  developed over a period of several decades by a wide array of people with different priorities
  who, in many cases, did not know of each other's existence.

  Features have thus arisen from many sources, and have not always been designed in especially
  consistent ways. Furthermore, because of the unique characteristics of the Web, implementation
  bugs have often become de-facto, and now de-jure, standards, as content is often unintentionally
  written in ways that rely on them before they can be fixed.

  Despite all this, efforts have been made to adhere to certain design goals. These are described
  in the next few subsections.

<h4 id="serializability-of-script-execution">Serializability of script execution</h4>

  <em>This section is non-normative.</em>

  To avoid exposing Web authors to the complexities of multithreading, the HTML and DOM APIs are
  designed such that no script can ever detect the simultaneous execution of other scripts. Even
  with <a>workers</a>, the intent is that the behavior of implementations
  can be thought of as completely serializing the execution of all scripts in all
  <a>browsing contexts</a>.

  <p class="note">
    The <code>navigator.{{yieldForStorageUpdates()}}</code> method, in this model, is equivalent to
    allowing other scripts to run while the calling script is blocked.
  </p>

<h4 id="compliance-with-other-specifications">Compliance with other specifications</h4>

  <em>This section is non-normative.</em>

  This specification interacts with and relies on a wide variety of other specifications. In certain
  circumstances, unfortunately, conflicting needs have led to this specification violating the
  requirements of these other specifications. Whenever this has occurred, the transgressions have
  each been noted as a "<dfn>willful violation</dfn>", and the reason for the violation has been
  noted.

<h4 id="extensibility">Extensibility</h4>

  <em>This section is non-normative.</em>

  HTML has a wide array of extensibility mechanisms that can be used for adding semantics in a safe
  manner:

  * Authors can use the <code>class</code> attribute to extend elements, effectively creating their
    own elements, while using the most applicable existing "real" HTML element, so that browsers and
    other tools that don't know of the extension can still support it somewhat well. This is the
    tack used by microformats, for example.
  * Authors can include data for inline client-side scripts or server-side site-wide scripts to
    process using the <code>data-*=""</code> attributes. These are guaranteed to never be touched by
    browsers, and allow scripts to include data on HTML elements that scripts can then look for and
    process.
  * Authors can use the <code>&lt;meta name="" content=""></code> mechanism to
    include page-wide metadata by registering
    <a>extensions to the predefined set of metadata names</a>.
  * Authors can use the <code>rel=""</code> mechanism to annotate links with specific meanings by
    registering <a>extensions to the predefined set of link types</a>. This is also used by
    microformats. Additionally, absolute URLs that do not contain any non-ASCII characters, nor
    characters in the range U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z)
    (inclusive), may be used as link types.
  * Authors can embed raw data using the <code>&lt;script type=""></code> mechanism with a custom
    type, for further handling by inline or server-side scripts.
  * Authors can create <a>plugins</a> and invoke them using the <{embed}> element. This is how Flash
    works.
  * Authors can extend APIs using the JavaScript prototyping mechanism. This is widely used by
    script libraries, for instance.

<h3 id="html-vs-xhtml">HTML vs XHTML</h3>

  <em>This section is non-normative.</em>

  This specification defines an abstract language for describing documents and applications, and
  some APIs for interacting with in-memory representations of resources that use this language.


  The in-memory representation is known as "DOM HTML", or "the DOM" for short.

  There are various concrete syntaxes that can be used to transmit resources that use this abstract
  language, two of which are defined in this specification.

  The first such concrete syntax is the HTML syntax. This is the format suggested for most authors.
  It is compatible with most legacy Web browsers. If a document is transmitted with the
  <code>text/html</code> <a>MIME type</a>, then it will be processed as an HTML document by Web
  browsers. This specification defines version [LEVEL] of the HTML syntax, known as "HTML[LEVEL]".

  The second concrete syntax is the XHTML syntax, which is an application of XML. When a document
  is transmitted with an <a>XML MIME type</a>, such as <code>application/xhtml+xml</code>,
  then it is treated as an XML document by Web browsers, to be parsed by an XML processor. Authors
  are reminded that the processing for XML and HTML differs; in particular, even minor syntax
  errors will prevent a document labeled as XML from being rendered fully, whereas they would be
  ignored in the HTML syntax. This specification defines version [LEVEL] of the XHTML syntax,
  known as "XHTML[LEVEL]".

  The DOM, the HTML syntax, and the XHTML syntax cannot all represent the same content. For
  example, namespaces cannot be represented using the HTML syntax, but they are supported in the
  DOM and in the XHTML syntax. Similarly, documents that use the <code>noscript</code> feature can
  be represented using the HTML syntax, but cannot be represented with the DOM or in the XHTML
  syntax. Comments that contain the string "<code>--&gt;</code>" can only be represented in the
  DOM, not in the HTML and XHTML syntaxes.

<h3 id="structure-of-this-specification">Structure of this specification</h3>

  <em>This section is non-normative.</em>

  This specification is divided into the following major sections:

  <div dfn-for="spec">
    : [[#introduction]]
    :: Non-normative materials providing a context for the HTML standard.
    : [[#infrastructure]]
    :: The conformance classes, algorithms, definitions, and the common underpinnings of the rest of
        the specification.
    : [[#dom]]
    :: Documents are built from elements. These elements form a tree using the DOM. This section
        defines the features of this DOM, as well as introducing the features common to all
        elements, and the concepts used in defining elements.
    : [[#semantics]]
    :: Each element has a predefined meaning, which is explained in this section. Rules for authors
        on how to use the element<span class="impl">, along with user agent requirements for how to
        handle each element,</span> are also given. This includes large signature features of HTML
        such as video playback and subtitles, form controls and form submission, and a 2D graphics
        API known as the HTML canvas.
    : [[#editing]]
    :: HTML documents can provide a number of mechanisms for users to interact with and modify
        content, which are described in this section, such as how focus works, and drag-and-drop.
    : [[#browsers]]
    :: HTML documents do not exist in a vacuum &mdash; this section defines many of the features
        that affect environments that deal with multiple pages, such as Web browsers and offline
        caching of Web applications.
    : [[#webappapis]]
    :: This section introduces basic features for scripting of applications in HTML.
    : [[#syntax]]
    : [[#xhtml]]
    :: All of these features would be for naught if they couldn't be represented in a serialized
        form and sent to other people, and so these sections define the syntaxes of HTML and
        XHTML<span class="impl">, along with rules for how to parse content using those
        syntaxes</span>.
    : [[#rendering]]
    :: This section defines the default rendering rules for Web browsers.

    There are also some appendices, listing <a>obsolete features</a> and <a>IANA considerations</a>,
    and several indices.
  </div>

<h4 id="how-to-read-this-specification">How to read this specification</h4>

  This specification should be read like all other specifications. First, it should be read
  cover-to-cover, multiple times. Then, it should be read backwards at least once. Then it should be
  read by picking random sections from the contents list and following all the cross-references.

  As described in the conformance requirements section below, this specification describes
  conformance criteria for a variety of conformance classes. In particular, there are conformance
  requirements that apply to <em>producers</em>, for example authors and the documents they create,
  and there are conformance requirements that apply to <em>consumers</em>, for example Web browsers.
  They can be distinguished by what they are requiring: a requirement on a producer states what is
  allowed, while a requirement on a consumer states how software is to act.

  <div class="example">
    For example, "the <code>foo</code> attribute's value must be a <a>valid integer</a>" is a
    requirement on producers, as it lays out the allowed values; in contrast, the requirement "the
    <code>foo</code> attribute's value must be parsed using the <a>rules for parsing integers</a>"
    is a requirement on consumers, as it describes how to process the content.
  </div>

  <strong>Requirements on producers have no bearing whatsoever on consumers.</strong>

  <div class="example">
    Continuing the above example, a requirement stating that a particular attribute's value is
    constrained to being a <a>valid integer</a> emphatically does <em>not</em> imply anything about
    the requirements on consumers. It might be that the consumers are in fact required to treat the
    attribute as an opaque string, completely unaffected by whether the value conforms to the
    requirements or not. It might be (as in the previous example) that the consumers are required to
    parse the value using specific rules that define how invalid (non-numeric in this case) values
    are to be processed.
  </div>

<h4 id="typographic-conventions">Typographic conventions</h4>

  <div dfn-for="conventions">
    This is a definition, requirement, or explanation.

    <p class="note">This is a note.</p>

    <p class="example">This is an example.</p>

    <p class="&#x0058;&#x0058;&#x0058;">This is an open issue.</p>

    <p class="warning">This is a warning.</p>

    <pre class="idl" data-no-idl data-highlight="webidl">
      interface <dfn>Example</dfn> {
          // this is an IDL definition
      };
    </pre>

    <dl class="domintro">
      <dt><var>variable</var> = <var>object</var> . <code>method</code>( [ <var>optionalArgument</var> ] )</dt>
      <dd>This is a note to authors describing the usage of an interface.</dd>
    </dl>

    <pre class="css" highlight="css">/* this is a CSS fragment */</pre>

    The defining instance of a term is marked up like <dfn>this</dfn>. Uses of that
    term are marked up like <a>this</a> or like <i>this</i>.

    The defining instance of an element, attribute, or API is marked up like
    <dfn><code>this</code></dfn>. References to that element, attribute, or API are marked up like
    <code>this</code>.

    Other code fragments are marked up <code>like this</code>.

    Variables are marked up like <var>this</var>.

    In an algorithm, steps in <a>synchronous sections</a> are marked with &#x231B;.

    In some cases, requirements are given in the form of lists with conditions and corresponding
    requirements. In such cases, the requirements that apply to a condition are always the first set
    of requirements that follow the condition, even in the case of there being multiple sets of
    conditions for those requirements. Such cases are presented as follows:

    <dl class="switch">
      <dt>This is a condition</dt>
      <dt>This is another condition</dt>
      <dd>This is the requirement that applies to the conditions above.</dd>
      <dt>This is a third condition</dt>
      <dd>This is the requirement that applies to the third condition.</dd>
    </dl>
  </div>

<h3 id="fingerprint">Privacy concerns</h3>

  <em>This section is non-normative.</em>

  Some features of HTML trade user convenience for a measure of user privacy.

  In general, due to the Internet's architecture, a user can be distinguished from another by the
  user's IP address. IP addresses do not perfectly match to a user; as a user moves from device to
  device, or from network to network, their IP address will change; similarly, NAT routing, proxy
  servers, and shared computers enable packets that appear to all come from a single IP address to
  actually map to multiple users. Technologies such as onion routing can be used to further
  anonymize requests so that requests from a single user at one node on the Internet appear to come
  from many disparate parts of the network.

  However, the IP address used for a user's requests is not the only mechanism by which a user's
  requests could be related to each other. Cookies, for example, are designed specifically to enable
  this, and are the basis of most of the Web's session features that enable you to log into a site
  with which you have an account.

  There are other mechanisms that are more subtle. Certain characteristics of a user's system can be
  used to distinguish groups of users from each other; by collecting enough such information, an
  individual user's browser's "digital fingerprint" can be computed, which can be as good, if not
  better, as an IP address in ascertaining which requests are from the same user.

  Grouping requests in this manner, especially across multiple sites, can be used for both benign
  (and even arguably positive) purposes, as well as for malevolent purposes. An example of a
  reasonably benign purpose would be determining whether a particular person seems to prefer sites
  with dog illustrations as opposed to sites with cat illustrations (based on how often they visit
  the sites in question) and then automatically using the preferred illustrations on subsequent
  visits to participating sites. Malevolent purposes, however, could include governments combining
  information such as the person's home address (determined from the addresses they use when getting
  driving directions on one site) with their apparent political affiliations (determined by
  examining the forum sites that they participate in) to determine whether the person should be
  prevented from voting in an election.

  Since the malevolent purposes can be remarkably evil, user agent implementors are encouraged to
  consider how to provide their users with tools to minimize leaking information that could be used
  to fingerprint a user.

  Unfortunately, as the first paragraph in this section implies, sometimes there is great benefit
  to be derived from exposing the very information that can also be used for fingerprinting
  purposes, so it's not as easy as simply blocking all possible leaks. For instance, the ability to
  log into a site to post under a specific identity requires that the user's requests be
  identifiable as all being from the same user, more or less by definition. More subtly, though,
  information such as how wide text is, which is necessary for many effects that involve drawing
  text onto a canvas (e.g. any effect that involves drawing a border around the text) also leaks
  information that can be used to group a user's requests. (In this case, by potentially exposing,
  via a brute force search, which fonts a user has installed, information which can vary
  considerably from user to user.)

  Features in this specification which can be <dfn id="fingerprinting-vector">used to fingerprint
  the user</dfn> are marked as this paragraph is.
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

  Other features in the platform can be used for the same purpose, though, including, though not
  limited to:

  * The exact list of which features a user agents supports.
  * The maximum allowed stack depth for recursion in script.
  * Features that describe the user's environment, like Media Queries and the <code>Screen</code>
    object. [[!MEDIAQ]] [[!CSSOM-VIEW]]
  * The user's time zone.

<h3 id="a-quick-introduction-to-html">A quick introduction to HTML</h3>

  <em>This section is non-normative.</em>

  A basic HTML document looks like this:

  <pre id="intro-early-example" highlight="html">
    &lt;!DOCTYPE html>
    &lt;html>
      &lt;head>
        &lt;title>Sample page&lt;/title>
      &lt;/head>
      &lt;body>
        &lt;h1>Sample page&lt;/h1>
        &lt;p>This is a &lt;a href="demo.html">simple&lt;/a> sample.&lt;/p>
        &lt;!-- this is a comment -->
      &lt;/body>
    &lt;/html>
  </pre>

  HTML documents consist of a tree of elements and text. Each element is denoted in the source by
  a <a>start tag</a>, such as "<code>&lt;body></code>", and an <a>end tag</a>, such as
  "<code>&lt;/body></code>". (Certain start tags and end tags can in certain cases be <a>omitted</a>
  and are implied by other tags.)

  Tags have to be nested such that elements are all completely within each other, without
  overlapping:

  <pre class="bad" highlight="html">&lt;p>This is &lt;em>very &lt;strong>wrong&lt;/em>!&lt;/strong>&lt;/p></pre>
  <pre highlight="html">&lt;p>This &lt;em>is &lt;strong>correct&lt;/strong>.&lt;/em>&lt;/p></pre>

  This specification defines a set of elements that can be used in HTML, along with rules about the
  ways in which the elements can be nested.

  Elements can have attributes, which control how the elements work. In the example below, there
  is a <a>hyperlink</a>, formed using the <code>a</code> element and its <code>href</code>
  attribute:

  <pre highlight="html">&lt;a href="demo.html">simple&lt;/a></pre>

  <a>Attributes</a> are placed inside the start tag, and consist of a <a>name</a> and a
  <a>value</a>, separated by an "<code>=</code>" character. The attribute value can remain
  <a>unquoted</a> if it doesn't contain <a>space characters</a> or any of <code>"</code>
  <code>'</code> <code>`</code> <code>=</code> <code>&lt;</code> or <code>&gt;</code>. Otherwise,
  it has to be quoted using either single or double quotes. The value, along with the
  "<code>=</code>" character, can be omitted altogether if the value is the empty string.

  <pre highlight="html">
    &lt;!-- empty attributes -->
    &lt;input name=address disabled>
    &lt;input name=address disabled="">

    &lt;!-- attributes with a value -->
    &lt;input name=address maxlength=200>
    &lt;input name=address maxlength='200'>
    &lt;input name=address maxlength="200">
  </pre>

  HTML user agents (e.g. Web browsers) then <i>parse</i> this markup, turning it into a DOM
  (Document Object Model) tree. A DOM tree is an in-memory representation of a document.

  DOM trees contain several kinds of nodes, in particular a <code>DocumentType</code> node,
  <code>Element</code> nodes, <code>Text</code> nodes, <code>Comment</code> nodes, and in some
  cases <code>ProcessingInstruction</code> nodes.

  The <a>markup snippet at the top of this section</a> would be turned into the following DOM tree:

  <ul class="domTree">
    <li class="t10">DOCTYPE: <code>html</code></li>
    <li class="t1">
      <code>html</code>
      <ul>
        <li class="t1">
          <code>head</code>
          <ul>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x2423;</span></li>
            <li class="t1">
              <code>title</code>
              <ul>
                <li class="t3"><code>#text</code>: <span>Sample page</span></li>
              </ul>
            </li>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;</span></li>
          </ul>
        </li>
        <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;</span></li>
        <li class="t1">
          <code>body</code>
          <ul>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x2423;</span></li>
            <li class="t1">
              <code>h1</code>
              <ul>
                <li class="t3"><code>#text</code>: <span>Sample page</span></li>
              </ul>
            </li>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x2423;</span></li>
            <li class="t1">
              <code>p</code>
              <ul>
                <li class="t3"><code>#text</code>: <span>This is a</span></li>
                <li class="t1">
                  <code>a</code> <span class="t2"><code>href</code>="<code>demo.html</code>"</span>
                  <ul>
                    <li class="t3"><code>#text</code>: <span>simple</span></li>
                  </ul>
                </li>
                <li class="t3"><code>#text</code>: <span> sample.</span></li>
              </ul>
            </li>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x2423;</span></li>
            <li class="t8"><code>#comment</code>: <span> this is a comment </span></li>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x23CE;</span></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>

  The <a>root element</a> of this tree is the <{html}> element, which is the element always found at
  the root of HTML documents. It contains two elements, <{head}> and <{body}>, as well as a
  <code>Text</code> node between them.

  There are many more <code>Text</code> nodes in the DOM tree than one would initially expect,
  because the source contains a number of spaces (represented here by "&#x2423;") and line breaks
  ("&#x23CE;") that all end up as <code>Text</code> nodes in the DOM. However, for historical
  reasons not all of the spaces and line breaks in the original markup appear in the DOM. In
  particular, all the whitespace before <{head}> start tag ends up being dropped silently, and all
  the whitespace after the <{body}> end tag ends up placed at the end of the <{body}>.

  The <{head}> element contains a <{title}> element, which itself contains a <code>Text</code> node
  with the text "Sample page". Similarly, the <{body}> element contains an {{h1}} element, a <{p}>
  element, and a comment.

  <hr />

  This DOM tree can be manipulated from scripts in the page. Scripts (typically in JavaScript)
  are small programs that can be embedded using the <{script}> element or using
  <a>event handler content attributes</a>. For example, here is a form with a script that sets the
  value of the form's <{output}> element to say "Hello World"

  <pre highlight="html">
    &lt;form name="main">
      Result: &lt;output name="result">&lt;/output>
      &lt;script>
        document.forms.main.elements.result.value = 'Hello World';
      &lt;/script>
    &lt;/form>
  </pre>

  Each element in the DOM tree is represented by an object, and these objects have APIs so that
  they can be manipulated. For instance, a link (e.g. the <{a}> element in the tree above) can have
  its "<{a/href}>" attribute changed in several ways:

  <pre highlight="javascript">
    var a = document.links[0]; // obtain the first link in the document
    a.href = 'sample.html'; // change the destination URL of the link
    a.protocol = 'https'; // change just the scheme part of the URL
    a.setAttribute('href', 'http://example.com/'); // change the content attribute directly
  </pre>

  Since DOM trees are used as the way to represent HTML documents when they are processed and
  presented by implementations (especially interactive implementations like Web browsers), this
  specification is mostly phrased in terms of DOM trees, instead of the markup described above.

  <hr />

  HTML documents represent a media-independent description of interactive content. HTML documents
  might be rendered to a screen, or through a speech synthesizer, or on a braille display. To
  influence exactly how such rendering takes place, authors can use a styling language such as CSS.

  In the following example, the page has been made yellow-on-blue using CSS.

  <pre highlight="html">
    &lt;!DOCTYPE html>
    &lt;html>
      &lt;head>
        &lt;title>Sample styled page&lt;/title>
        &lt;style>
          body { background: navy; color: yellow; }
        &lt;/style>
      &lt;/head>
      &lt;body>
        &lt;h1>Sample styled page&lt;/h1>
        &lt;p>This page is just a demo.&lt;/p>
      &lt;/body>
    &lt;/html>
  </pre>

  For more details on how to use HTML, authors are encouraged to consult tutorials and guides. Some
  of the examples included in this specification might also be of use, but the novice author is
  cautioned that this specification, by necessity, defines the language with a level of detail that
  might be difficult to understand at first.

<h4 id="writing-secure-applications-with-html">Writing secure applications with HTML</h4>

  <em>This section is non-normative.</em>

  When HTML is used to create interactive sites, care needs to be taken to avoid introducing
  vulnerabilities through which attackers can compromise the integrity of the site itself or of
  the site's users.

  A comprehensive study of this matter is beyond the scope of this document, and authors are
  strongly encouraged to study the matter in more detail. However, this section attempts to provide
  a quick introduction to some common pitfalls in HTML application development.

  The security model of the Web is based on the concept of "origins", and correspondingly many of
  the potential attacks on the Web involve cross-origin actions. [[!ORIGIN]]

  : Not validating user input
  : Cross-site scripting (XSS)
  : SQL injection
  :: When accepting untrusted input, e.g. user-generated content such as text comments, values
      in URL parameters, messages from third-party sites, etc, it is imperative that the data
      be validated before use, and properly escaped when displayed. Failing to do this can
      allow a hostile user to perform a variety of attacks, ranging from the potentially
      benign, such as providing bogus user information like a negative age, to the serious,
      such as running scripts every time a user looks at a page that includes the information,
      potentially propagating the attack in the process, to the catastrophic, such as deleting
      all data in the server.

      When writing filters to validate user input, it is imperative that filters always be
      safelist-based, allowing known-safe constructs and disallowing all other input.
      Blocklist-based filters that disallow known-bad inputs and allow everything else are not
      secure, as not everything that is bad is yet known (for example, because it might be invented
      in the future).

      <div class="example">
        For example, suppose a page looked at its URL's query string to determine what to display,
        and the site then redirected the user to that page to display a message, as in:

        <pre highlight="html">
          &lt;ul>
            &lt;li>&lt;a href="message.cgi?say=Hello">Say Hello&lt;/a>
            &lt;li>&lt;a href="message.cgi?say=Welcome">Say Welcome&lt;/a>
            &lt;li>&lt;a href="message.cgi?say=Kittens">Say Kittens&lt;/a>
          &lt;/ul>
        </pre>

        If the message was just displayed to the user without escaping, a hostile attacker could
        then craft a URL that contained a script element:

        <pre>http://example.com/message.cgi?say=%3Cscript%3Ealert%28%27Oh%20no%21%27%29%3C/script%3E</pre>

        If the attacker then convinced a victim user to visit this page, a script of the
        attacker's choosing would run on the page. Such a script could do any number of hostile
        actions, limited only by what the site offers: if the site is an e-commerce shop, for
        instance, such a script could cause the user to unknowingly make arbitrarily many
        unwanted purchases.

        This is called a cross-site scripting attack.
      </div>

      There are many constructs that can be used to try to trick a site into executing code. Here
      are some that authors are encouraged to consider when writing safelist filters:

      * When allowing harmless-seeming elements like <{img}>, it is important to safelist any
        provided attributes as well. If one allowed all attributes then an attacker could, for
        instance, use the <{img/onload}> attribute to run arbitrary script.

      * When allowing URLs to be provided (e.g. for links), the scheme of each URL also needs to be
        explicitly safelisted, as there are many schemes that can be abused. The most prominent
        example is "<code>javascript:</code>", but user agents can implement (and indeed, have
        historically implemented) others.

      * Allowing a <{base}> element to be inserted means any <{script}> elements in the page with
        relative links can be hijacked, and similarly that any form submissions can get redirected
        to a hostile site.

    : Cross-site request forgery (CSRF)
    :: If a site allows a user to make form submissions with user-specific side-effects, for example
        posting messages on a forum under the user's name, making purchases, or applying for a
        passport, it is important to verify that the request was made by the user intentionally,
        rather than by another site tricking the user into making the request unknowingly.

        This problem exists because HTML forms can be submitted to other origins.

        Sites can prevent such attacks by populating forms with user-specific hidden tokens, or by
        checking <code>Origin</code> headers on all requests.

    : Clickjacking
    :: A page that provides users with an interface to perform actions that the user might not
        wish to perform needs to be designed so as to avoid the possibility that users can be
        tricked into activating the interface.

        One way that a user could be so tricked is if a hostile site places the victim site in a
        small <{iframe}> and then convinces the user to click, for instance by having the user play
        a reaction game. Once the user is playing the game, the hostile site can quickly position
        the <{iframe}> under the mouse cursor just as the user is about to click, thus tricking the
        user into clicking the victim site's interface.

        To avoid this, sites that do not expect to be used in frames are encouraged to only enable
        their interface if they detect that they are not in a frame (e.g. by comparing the
        <code>window</code> object to the value of the <code>top</code> attribute).

<h4 id="common-pitfalls-to-avoid-when-using-the-scripting-apis">
  Common pitfalls to avoid when using the scripting APIs
</h4>

  <em>This section is non-normative.</em>

  Scripts in HTML have "run-to-completion" semantics, meaning that the browser will generally run
  the script uninterrupted before doing anything else, such as firing further events or continuing
  to parse the document.

  On the other hand, parsing of HTML files happens <a>in parallel</a> and incrementally, meaning
  that the parser can pause at any point to let scripts run. This is generally a good thing, but it
  does mean that authors need to be careful to avoid hooking event handlers after the events could
  have possibly fired.

  There are two techniques for doing this reliably: use <a>event handler content attributes</a>, or
  create the element and add the event handlers in the same script. The latter is safe because, as
  mentioned earlier, scripts are run to completion before further events can fire.

  <div class="example">
    One way this could manifest itself is with <{img}> elements and the <code>load</code> event.
    The event could fire as soon as the element has been parsed, especially if the image has already
    been cached (which is common).

    Here, the author uses the <{img/onload}> handler on an <{img}> element to catch the
    <code>load</code> event:

    <pre highlight="html">&lt;img src="games.png" alt="Games" onload="gamesLogoHasLoaded(event)"></pre>

    If the element is being added by script, then so long as the event handlers are added in the
    same script, the event will still not be missed:

    <pre highlight="html">
      &lt;script>
      var img = new Image();
      img.src = 'games.png';
      img.alt = 'Games';
      img.onload = gamesLogoHasLoaded;
      // img.addEventListener('load', gamesLogoHasLoaded, false); // would work also
      &lt;/script>
    </pre>

    However, if the author first created the <code>img</code> element and then in a separate
    script added the event listeners, there's a chance that the <code>load</code> event would be
    fired in between, leading it to be missed:

    <pre class="bad" highlight="html">
      &lt;!-- Do not use this style, it has a race condition! -->
      &lt;img id="games" src="games.png" alt="Games">
      &lt;!-- the 'load' event might fire here while the parser is taking a
          break, in which case you will not see it! -->
      &lt;script>
      var img = document.getElementById('games');
      img.onload = gamesLogoHasLoaded; // might never fire!
      &lt;/script>
    </pre>
  </div>

<h4 id="how-to-catch-mistakes-when-writing-html-validators-and-conformance-checkers">
  How to catch mistakes when writing HTML: validators and conformance checkers
</h4>

  <em>This section is non-normative.</em>

  Authors are encouraged to make use of conformance checkers (also known as <i>validators</i>) to
  catch common mistakes. The W3C provides a number of online validation services, including the
  <a>Nu Markup Validation Service</a>.

<h3 id="conformance-requirements-for-authors">Conformance requirements for authors</h3>

  <em>This section is non-normative.</em>

  Unlike previous versions of the HTML specification, this specification defines in some detail the
  required processing for invalid documents as well as valid documents.

  However, even though the processing of invalid content is in most cases well-defined, conformance
  requirements for documents are still important: in practice, interoperability (the situation in
  which all implementations process particular content in a reliable and identical or equivalent
  way) is not the only goal of document conformance requirements. This section details some of the
  more common reasons for still distinguishing between a conforming document and one with errors.

<h4 id="presentational-markup">Presentational markup</h4>

  <em>This section is non-normative.</em>

  The majority of presentational features from previous versions of HTML are no longer allowed.
  Presentational markup in general has been found to have a number of problems:

  : The use of presentational elements leads to poorer accessibility
  :: While it is possible to use presentational markup in a way that provides users of assistive
      technologies (ATs) with an acceptable experience (e.g. using ARIA), doing so is significantly
      more difficult than doing so when using semantically-appropriate markup. Furthermore, even
      using such techniques doesn't help make pages accessible for non-AT non-graphical users, such
      as users of text-mode browsers.

      Using media-independent markup, on the other hand, provides an easy way for documents to be
      authored in such a way that they work for more users (e.g. text browsers).

  : Higher cost of maintenance
  :: It is significantly easier to maintain a site written in such a way that the markup is
      style-independent. For example, changing the color of a site that uses
      <code>&lt;font&nbsp;color=""></code> throughout requires changes across the entire site,
      whereas a similar change to a site based on CSS can be done by changing a single file.

  : Larger document sizes
  :: Presentational markup tends to be much more redundant, and thus results in larger document
      sizes.

      For those reasons, presentational markup has been removed from HTML in this version. This
      change should not come as a surprise; HTML4 deprecated presentational markup many years ago
      and provided a mode (HTML4 Transitional) to help authors move away from presentational markup;
      later, XHTML 1.1 went further and obsoleted those features altogether.

      The only remaining presentational markup features in HTML are the <code>style</code> attribute
      and the <{style}> element. Use of the <code>style</code> attribute is somewhat discouraged in
      production environments, but it can be useful for rapid prototyping (where its rules can be
      directly moved into a separate style sheet later) and for providing specific styles in unusual
      cases where a separate style sheet would be inconvenient. Similarly, the <{style}> element can
      be useful in syndication or for page-specific styles, but in general an external style sheet
      is likely to be more convenient when the styles apply to multiple pages.

      It is also worth noting that some elements that were previously presentational have been
      redefined in this specification to be media-independent: <{b}>, <{i}>, <{hr}>, <{s}>,
      <{small}>, and <{u}>.

<h4 id="syntax-errors">Syntax errors</h4>

  <em>This section is non-normative.</em>

  The syntax of HTML is constrained to avoid a wide variety of problems.

  : Unintuitive error-handling behavior
  :: Certain invalid syntax constructs, when parsed, result in DOM trees that are highly
      unintuitive.

      <div class="example">
        For example, the following markup fragment results in a DOM with an <{hr}> element that is
        an <em>earlier</em> sibling of the corresponding <{table}> element:

        <pre class="bad" highlight="html">&lt;table>&lt;hr>...</pre>
      </div>

  : Errors with optional error recovery
  :: To allow user agents to be used in controlled environments without having to implement the more
      bizarre and convoluted error handling rules, user agents are permitted to fail whenever
      encountering a <a>parse error</a>.

  : Errors where the error-handling behavior is not compatible with streaming user agents
  :: Some error-handling behavior, such as the behavior for the <code>&lt;table>&lt;hr>...</code>
      example mentioned above, are incompatible with streaming user agents (user agents that process
      HTML files in one pass, without storing state). To avoid interoperability problems with such
      user agents, any syntax resulting in such behavior is considered invalid.

  : Errors that can result in infoset coercion
  :: When a user agent based on XML is connected to an HTML parser, it is possible that certain
      invariants that XML enforces, such as comments never containing two consecutive hyphens, will
      be violated by an HTML file. Handling this can require that the parser coerce the HTML DOM
      into an XML-compatible infoset. Most syntax constructs that require such handling are
      considered invalid.

  : Errors that result in disproportionally poor performance
  :: Certain syntax constructs can result in disproportionally poor performance. To discourage the
      use of such constructs, they are typically made non-conforming.

      <div class="example">
        For example, the following markup results in poor performance, since all the unclosed <{i}>
        elements have to be reconstructed in each paragraph, resulting in progressively more
        elements in each paragraph:

        <pre class="bad" highlight="html">
          &lt;p>&lt;i>He dreamt.
          &lt;p>&lt;i>He dreamt that he ate breakfast.
          &lt;p>&lt;i>Then lunch.
          &lt;p>&lt;i>And finally dinner.
        </pre>

        The resulting DOM for this fragment would be:

        <ul class="domTree">
          <li class="t1">
            <code>p</code>
            <ul>
              <li class="t1">
                <code>i</code>
                <ul>
                  <li class="t3"><code>#text</code>: <span>He dreamt.</span></li>
                </ul>
              </li>
            </ul>
          </li>
          <li class="t1">
            <code>p</code>
            <ul>
              <li class="t1">
                <code>i</code>
                <ul>
                  <li class="t1">
                    <code>i</code>
                    <ul>
                      <li class="t3"><code>#text</code>: <span>He dreamt that he ate breakfast.</span></li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li class="t1">
            <code>p</code>
            <ul>
              <li class="t1">
                <code>i</code>
                <ul>
                  <li class="t1">
                    <code>i</code>
                    <ul>
                      <li class="t1">
                        <code>i</code>
                        <ul>
                          <li class="t3"><code>#text</code>: <span>Then lunch.</span></li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li class="t1">
            <code>p</code>
            <ul>
              <li class="t1">
                <code>i</code>
                <ul>
                  <li class="t1">
                    <code>i</code>
                    <ul>
                      <li class="t1">
                        <code>i</code>
                        <ul>
                          <li class="t1">
                            <code>i</code>
                            <ul>
                              <li class="t3"><code>#text</code>: <span>And finally dinner.</span></li>
                            </ul>
                          </li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </div>

  : Errors involving fragile syntax constructs
  :: There are syntax constructs that, for historical reasons, are relatively fragile. To help
      reduce the number of users who accidentally run into such problems, they are made
      non-conforming.

      <div class="example">
        For example, the parsing of certain named character references in attributes happens even
        with the closing semicolon being omitted. It is safe to include an ampersand followed by
        letters that do not form a named character reference, but if the letters are changed to a
        string that <em>does</em> form a named character reference, they will be interpreted as that
        character instead.

        In this fragment, the attribute's value is "<code>?bill&amp;ted</code>":

        <pre class="bad" highlight="html">&lt;a href="?bill&amp;ted">Bill and Ted&lt;/a></pre>

          In the following fragment, however, the attribute's value is actually
          "<code>?art&copy;</code>", <em>not</em> the intended "<code>?art&amp;copy</code>",
          because even without the final semicolon, "<code>&amp;copy</code>" is handled the same
          as "<code>&amp;copy;</code>" and thus gets interpreted as "<code>&copy;</code>":

          <pre class="bad" highlight="html">&lt;a href="?art&amp;copy">Art and Copy&lt;/a></pre>

          To avoid this problem, all named character references are required to end with a
          semicolon, and uses of named character references without a semicolon are flagged as
          errors.

          Thus, the correct way to express the above cases is as follows:

          <pre highlight="html">&lt;a href="?bill&amp;ted">Bill and Ted&lt;/a> &lt;!-- &amp;ted is ok, since it's not a named character reference --></pre>

          <pre highlight="html">&lt;a href="?art&amp;amp;copy">Art and Copy&lt;/a> &lt;!-- the &amp; has to be escaped, since &amp;copy is a named character reference --></pre>
      </div>

  : Errors involving known interoperability problems in legacy user agents
  :: Certain syntax constructs are known to cause especially subtle or serious problems in legacy
      user agents, and are therefore marked as non-conforming to help authors avoid them.

      <p class="example">
        For example, this is why the U+0060 GRAVE ACCENT character (`) is not allowed in unquoted
        attributes. In certain legacy user agents, it is sometimes treated as a quote character.
      </p>

      <p class="example">
        Another example of this is the DOCTYPE, which is required to trigger <a>no-quirks mode</a>,
        because the behavior of legacy user agents in <a>quirks mode</a> is often largely
        undocumented.
      </p>

  : Errors that risk exposing authors to security attacks
  :: Certain restrictions exist purely to avoid known security problems.

      <p class="example">
        For example, the restriction on using UTF-7 exists purely to avoid authors falling prey to a
        known cross-site-scripting attack using UTF-7. [[RFC2152]]
      </p>

  : Cases where the author's intent is unclear
  :: Markup where the author's intent is very unclear is often made non-conforming. Correcting these
      errors early makes later maintenance easier.

      <div class="example">
        For example, it is unclear whether the author intended the following to be an {{h1}} heading
        or an {{h2}} heading:

        <pre class="bad" highlight="html">&lt;h2>Contact details&lt;/h2></pre>
      </div>

  : Cases that are likely to be typos
  :: When a user makes a simple typo, it is helpful if the error can be caught early, as this can
      save the author a lot of debugging time. This specification therefore usually considers it
      an error to use element names, attribute names, and so forth, that do not match the names
      defined in this specification.

      <p class="example">
        For example, if the author typed <code>&lt;capton></code> instead of
        <code>&lt;caption></code>, this would be flagged as an error and the author could correct
        the typo immediately.
      </p>

  : Errors that could interfere with new syntax in the future
  :: In order to allow the language syntax to be extended in the future, certain otherwise
      harmless features are disallowed.

      <p class="example">
        For example, "attributes" in end tags are ignored currently, but they are invalid, in case a
        future change to the language makes use of that syntax feature without conflicting with
        already-deployed (and valid!) content.
      </p>

  Some authors find it helpful to be in the practice of always quoting all attributes and always
  including all optional tags, preferring the consistency derived from such custom over the minor
  benefits of terseness afforded by making use of the flexibility of the HTML syntax. To aid such
  authors, conformance checkers can provide modes of operation wherein such conventions are
  enforced.

<h4 id="restrictions-on-content-models-and-on-attribute-values">
  Restrictions on content models and on attribute values
</h4>

  <em>This section is non-normative.</em>

  Beyond the syntax of the language, this specification also places restrictions on how elements
  and attributes can be specified. These restrictions are present for similar reasons:

  : Errors involving content with dubious semantics
  :: To avoid misuse of elements with defined meanings, content models are defined that restrict
      how elements can be nested when such nestings would be of dubious value.

      <p class="example">
        For example, this specification disallows nesting a <{section}> element inside
        a <{kbd}> element, since it is highly unlikely for an author to indicate that
        an entire section should be keyed in.
      </p>

  : Errors that involve a conflict in expressed semantics
  :: Similarly, to draw the author's attention to mistakes in the use of elements, clear
      contradictions in the semantics expressed are also considered conformance errors.

      <div class="example">
        In the fragments below, for example, the semantics are nonsensical: a separator cannot
        simultaneously be a cell, nor can a radio button be a progress bar.

        <pre class="bad" highlight="html">&lt;hr role="cell"></pre>
        <pre class="bad" highlight="html">&lt;input type=radio role=progressbar></pre>
      </div>

      <p class="example">
        Another example is the restrictions on the content models of the <{ul}> element, which only
        allows <{li}> element children. Lists by definition consist just of zero or more list items,
        so if a <{ul}> element contains something other than an <{li}> element, it's not clear what
        was meant.
      </p>

  : Cases where the default styles are likely to lead to confusion
  :: Certain elements have default styles or behaviors that make certain combinations likely to
      lead to confusion. Where these have equivalent alternatives without this problem, the
      confusing combinations are disallowed.

      <p class="example">
        For example, <{div}> elements are rendered as block boxes, and <{span}> elements as inline
        boxes. Putting a block box in an inline box is unnecessarily confusing; since either nesting
        just <{div}> elements, or nesting just <{span}> elements, or nesting <{span}> elements
        inside <{div}> elements all serve the same purpose as nesting a <{div}> element in a
        <{span}> element, but only the latter involves a block box in an inline box, the latter
        combination is disallowed.
      </p>

      <p class="example">
        Another example would be the way <a>interactive content</a> cannot be nested. For example, a
        <{button}> element cannot contain a <{textarea}> element. This is because the default
        behavior of such nesting interactive elements would be highly confusing to users. Instead of
        nesting these elements, they can be placed side by side.
      </p>

  : Errors that indicate a likely misunderstanding of the specification
  :: Sometimes, something is disallowed because allowing it would likely cause author confusion.

      <p class="example">
        For example, setting the <code>disabled</code> attribute to the value "<code>false</code>"
        is disallowed, because despite the appearance of meaning that the element is enabled, it in
        fact means that the element is <em>disabled</em> (what matters for implementations is the
        presence of the attribute, not its value).
      </p>

  : Errors involving limits that have been imposed merely to simplify the language
  :: Some conformance errors simplify the language that authors need to learn.

      <p class="example">
        For example, the <{area}> element's <{area/shape}> attribute, despite accepting both
        <code>circ</code> and <code>circle</code> values in practice as synonyms, disallows the use
        of the <code>circ</code> value, so as to simplify tutorials and other learning aids. There
        would be no benefit to allowing both, but it would cause extra confusion when teaching the
        language.
      </p>

  : Errors that involve peculiarities of the parser
  :: Certain elements are parsed in somewhat eccentric ways (typically for historical reasons),
      and their content model restrictions are intended to avoid exposing the author to these
      issues.

      <div class="example">
        For example, a <{form}> element isn't allowed inside <a>phrasing content</a>, because when
        parsed as HTML, a <{form}> element's start tag will imply a <{p}> element's end tag. Thus,
        the following markup results in two paragraphs, not one:

        <pre highlight="html">&lt;p>Welcome. &lt;form>&lt;label>Name:&lt;/label> &lt;input>&lt;/form></pre>

        It is parsed exactly like the following:

        <pre highlight="html">&lt;p>Welcome. &lt;/p>&lt;form>&lt;label>Name:&lt;/label> &lt;input>&lt;/form></pre>
      </div>

  : Errors that would likely result in scripts failing in hard-to-debug ways
  :: Some errors are intended to help prevent script problems that would be hard to debug.

      <p class="example">
        This is why, for instance, it is non-conforming to have two <code>id</code> attributes with
        the same value. Duplicate IDs lead to the wrong element being selected, with sometimes
        disastrous effects whose cause is hard to determine.
      </p>

  : Errors that waste authoring time
  :: Some constructs are disallowed because historically they have been the cause of a lot of
      wasted authoring time, and by encouraging authors to avoid making them, authors can save time
      in future efforts.

      <p class="example">
        For example, a <{script> element's <{script/src}> attribute causes the element's contents to
        be ignored. However, this isn't obvious, especially if the element's contents appear to be
        executable script &mdash; which can lead to authors spending a lot of time trying to debug
        the inline script without realizing that it is not executing. To reduce this problem, this
        specification makes it non-conforming to have executable script in a <{script}> element when
        the <{script/src}> attribute is present. This means that authors who are validating their
        documents are less likely to waste time with this kind of mistake.
      </p>

  : Errors that involve areas that affect authors migrating to and from XHTML
  :: Some authors like to write files that can be interpreted as both XML and HTML with similar
      results. Though this practice is discouraged in general due to the myriad of subtle
      complications involved (especially when involving scripting, styling, or any kind of automated
      serialization), this specification has a few restrictions intended to at least somewhat
      mitigate the difficulties. This makes it easier for authors to use this as a transitionary
      step when migrating between HTML and XHTML.

      <p class="example">
        For example, there are somewhat complicated rules surrounding the <code>lang</code> and
        <code>xml:lang</code> attributes intended to keep the two synchronized.
      </p>

      <p class="example">
        Another example would be the restrictions on the values of <code>xmlns</code> attributes
        in the HTML serialization, which are intended to ensure that elements in conforming
        documents end up in the same namespaces whether processed as HTML or XML.
      </p>

  : Errors that involve areas reserved for future expansion
  :: As with the restrictions on the syntax intended to allow for new syntax in future revisions
      of the language, some restrictions on the content models of elements and values of attributes
      are intended to allow for future expansion of the HTML vocabulary.

      <p class="example">
        For example, limiting the values of the <code>target</code> attribute that start with an
        U+005F LOW LINE character (_) to only specific predefined values allows new predefined
        values to be introduced at a future time without conflicting with author-defined values.
      </p>

  : Errors that indicate a mis-use of other specifications
  :: Certain restrictions are intended to support the restrictions made by other specifications.

      <p class="example">
        For example, requiring that attributes that take media query lists use only <em>valid</em>
        media query lists reinforces the importance of following the conformance rules of that
        specification.
      </p>

<h3 id="suggested-reading">Suggested reading</h3>

  <em>This section is non-normative.</em>

  The following documents might be of interest to readers of this specification.

  : <cite>Character Model for the World Wide Web 1.0: Fundamentals</cite> [[!CHARMOD]]
  :: <blockquote>
        This Architectural Specification provides authors of specifications, software developers,
        and content developers with a common reference for interoperable text manipulation on the
        World Wide Web, building on the Universal Character Set, defined jointly by the Unicode
        Standard and ISO/IEC 10646. Topics addressed include use of the terms '''character''',
        '''encoding''' and '''string''', a reference processing model, choice and identification of
        character encodings, character escaping, and string indexing.
      </blockquote>

  : <cite>Unicode Security Considerations</cite> [[!UNICODE-SECURITY]]
  :: <blockquote>
        Because Unicode contains such a large number of characters and incorporates the varied
        writing systems of the world, incorrect usage can expose programs or systems to possible
        security attacks. This is especially important as more and more products are
        internationalized. This document describes some of the security considerations that
        programmers, system analysts, standards developers, and users should take into account, and
        provides specific recommendations to reduce the risk of problems.
      </blockquote>

  : <cite>Web Content Accessibility Guidelines (WCAG) 2.0</cite> [[!WCAG]]
  :: <blockquote>
        Web Content Accessibility Guidelines (WCAG) 2.0 covers a wide range of recommendations for
        making Web content more accessible. Following these guidelines will make content accessible
        to a wider range of people with disabilities, including blindness and low vision, deafness
        and hearing loss, learning disabilities, cognitive limitations, limited movement, speech
        disabilities, photosensitivity and combinations of these. Following these guidelines will
        also often make your Web content more usable to users in general.
      </blockquote>

  : <cite>Authoring Tool Accessibility Guidelines (ATAG) 2.0</cite> [[!ATAG20]]
  :: <blockquote>
        This specification provides guidelines for designing Web content authoring tools that are
        more accessible for people with disabilities. An authoring tool that conforms to these
        guidelines will promote accessibility by providing an accessible user interface to authors
        with disabilities as well as by enabling, supporting, and promoting the production of
        accessible Web content by all authors.
      </blockquote>

  : <cite>User Agent Accessibility Guidelines (UAAG) 2.0</cite> [[!UAAG20]]
  :: <blockquote>
        This document provides guidelines for designing user agents that lower barriers to Web
        accessibility for people with disabilities. User agents include browsers and other types of
        software that retrieve and render Web content. A user agent that conforms to these
        guidelines will promote accessibility through its own user interface and through other
        internal facilities, including its ability to communicate with other technologies
        (especially assistive technologies). Furthermore, all users, not just users with
        disabilities, should find conforming user agents to be more usable.
      </blockquote>

  : <cite>Polyglot Markup: HTML-Compatible XHTML Documents</cite> [[!HTML-POLYGLOT]]
  :: <blockquote>
        A document that uses polyglot markup is a document that is a stream of bytes that parses
        into identical document trees (with the exception of the xmlns attribute on the root
        element) when processed as HTML and when processed as XML. Polyglot markup that meets a
        well defined set of constraints is interpreted as compatible, regardless of whether they are
        processed as HTML or as XHTML, per the HTML5 specification. Polyglot markup uses a specific
        DOCTYPE, namespace declarations, and a specific case &mdash; normally lower case but
        occasionally camel case &mdash; for element and attribute names. Polyglot markup uses lower
        case for certain attribute values. Further constraints include those on empty elements,
        named entity references, and the use of scripts and style.
      </blockquote>

  : <cite>HTML to Platform Accessibility APIs Implementation Guide</cite> [[!HTML-AAPI]]
  :: <blockquote>
        This is draft documentation mapping HTML elements and attributes to accessibility API Roles,
        States and Properties on a variety of platforms. It provides recommendations on deriving the
        accessible names and descriptions for HTML elements. It also provides accessible feature
        implementation examples.
      </blockquote>

<!-- Big Text: Infrastructure -->

<h2 id="infrastructure">Common infrastructure</h2>

  <h3 id="terminology">Terminology</h3>

  This specification refers to both HTML and XML attributes and IDL attributes, often in the same
  context. When it is not clear which is being referred to, they are referred to as
  <dfn>content attributes</dfn> for HTML and XML attributes, and <dfn>IDL attributes</dfn> for those
  defined on IDL interfaces. Similarly, the term "properties" is used for both JavaScript object
  properties and CSS properties. When these are ambiguous they are qualified as
  <dfn>object properties</dfn> and <dfn>CSS properties</dfn> respectively.

  Generally, when the specification states that a feature applies to <a>the HTML syntax</a> or
  <a>the XHTML syntax</a>, it also includes the other. When a feature specifically only applies to
  one of the two languages, it is called out by explicitly stating that it does not apply to the
  other format, as in "for HTML, ... (this does not apply to XHTML)".

  This specification uses the term <dfn>document</dfn> to refer to any use of HTML, ranging from
  short static documents to long essays or reports with rich multimedia, as well as to fully-fledged
  interactive applications. The term is used to refer both to <{Document}> objects and
  their descendant DOM trees, and to serialized byte streams using the <a>HTML syntax</a> or
  <a>XHTML syntax</a>, depending on context.

  In the context of the DOM structures, the terms <a>HTML document</a> and <a>XML document</a> are
  used as defined in the DOM specification, and refer specifically to two different modes that
  <{Document}> objects can find themselves in. [[!DOM]] (Such uses are always hyperlinked
  to their definition.)

  In the context of byte streams, the term HTML document refers to resources labeled as
  <code>text/html</code>, and the term XML document refers to resources labeled with an
  <a>XML MIME type</a>.

  The term <dfn>XHTML document</dfn> is used to refer to both <{Document}>s in the
  <a>XML document</a> mode that contains element nodes in the <a>HTML namespace</a>, and byte
  streams labeled with an <a>XML MIME type</a> that contain elements from the <a>HTML namespace</a>,
  depending on context.

  <hr />

  For simplicity, terms such as <dfn>shown</dfn>, <dfn>displayed</dfn>, and <dfn>visible</dfn> might
  sometimes be used when referring to the way a document is rendered to the user. These terms are
  not meant to imply a visual medium; they must be considered to apply to other media in equivalent
  ways.

  <div class="impl">
    When an algorithm B says to return to another algorithm A, it implies that A called B. Upon
    returning to A, the implementation must continue from where it left off in calling B. Some
    algorithms run <dfn>in parallel</dfn>; this means that the algorithm's subsequent steps are to
    be run, one after another, at the same time as other logic in the specification (e.g. at the
    same time as the <a>event loop</a>). This specification does not define the precise mechanism by
    which this is achieved, be it time-sharing cooperative multitasking, fibers, threads, processes,
    using different hyperthreads, cores, CPUs, machines, etc. By contrast, an operation that is to
    run <dfn>immediately</dfn> must interrupt the currently running task, run itself, and then
    resume the previously running task.
  </div>

  The term "transparent black" refers to the color with red, green, blue, and alpha channels all set
  to zero.

<h4 id="resources">Resources</h4>

  The specification uses the term <dfn>supported</dfn> when referring to whether a user agent has an
  implementation capable of decoding the semantics of an external resource. A format or type is said
  to be <i>supported</i> if the implementation can process an external resource of that format or
  type without critical aspects of the resource being ignored. Whether a specific resource is
  <i>supported</i> can depend on what features of the resource's format are in use.

  <p class="example">
    For example, a PNG image would be considered to be in a supported format if its pixel data could
    be decoded and rendered, even if, unbeknownst to the implementation, the image also contained
    animation data.
  </p>

  <p class="example">
    An MPEG-4 video file would not be considered to be in a supported format if the compression
    format used was not supported, even if the implementation could determine the dimensions of the
    movie from the file's metadata.
  </p>

  What some specifications, in particular the HTTP specification, refer to as a
  <i>representation</i> is referred to in this specification as a <dfn>resource</dfn>. [[!HTTP11]]

  The term <dfn>MIME type</dfn> is used to refer to what is sometimes called an <i>Internet media
  type</i> in protocol literature. The term <i>media type</i> in this specification is used to refer
  to the type of media intended for presentation, as used by the CSS specifications. [[!RFC2046]]
  [[!MEDIAQ]]

  A string is a <dfn>valid MIME type</dfn> if it matches the <code>media-type</code> rule defined in
  section 3.7 "Media Types" of RFC 2616. In particular, a <a>valid MIME type</a> may include
  MIME type parameters. [[!HTTP11]]

  A string is a <dfn>valid MIME type with no parameters</dfn> if it matches the
  <code>media-type</code> rule defined in section 3.7 "Media Types" of RFC 2616, but does not
  contain any U+003B SEMICOLON characters (;). In other words, if it consists only of a type and
  subtype, with no MIME Type parameters. [[!HTTP11]]

  The term <dfn>HTML MIME type</dfn> is used to refer to the <a>MIME type</a>
  <code>text/html</code>.

  A resource's <dfn>critical subresources</dfn> are those that the resource needs to have available
  to be correctly processed. Which resources are considered critical or not is defined by the
  specification that defines the resource's format.

  The term <dfn><code>data:</code> URL</dfn> refers to <a>URLs</a> that use the <code>data:</code>
  scheme. [[!RFC2397]]

<h4 id="xml">XML</h4>

  To ease migration from HTML to XHTML, UAs conforming to this specification will place elements in
  HTML in the <code>http://www.w3.org/1999/xhtml</code> namespace, at least for the purposes of the
  DOM and CSS. The term "<dfn>HTML elements</dfn>", when used in this specification, refers to any
  element in that namespace, and thus refers to both HTML and XHTML elements.

  Except where otherwise stated, all elements defined or mentioned in this specification are in the
  <a>HTML namespace</a> ("<code>http://www.w3.org/1999/xhtml</code>"), and all attributes defined or
  mentioned in this specification have no namespace.

  The term <dfn>element type</dfn> is used to refer to the set of elements that have a given local
  name and namespace. For example, <code>button</code> elements are elements with the element type
  <code>button</code>, meaning they have the local name "<code>button</code>" and (implicitly as
  defined above) the <a>HTML namespace</a>.

  Attribute names are said to be <dfn>XML-compatible</dfn> if they match the
  <a><code>Name</code></a> production defined in XML and they contain no U+003A COLON characters
  (:). [[!XML]]

  The term <dfn>XML MIME type</dfn> is used to refer to the <a>MIME types</a> <code>text/xml</code>,
  <code>application/xml</code>, and any <a>MIME type</a> whose subtype ends with the four characters
  "<code>+xml</code>". [[!RFC7303]]

<h4 id="dom-trees">DOM trees</h4>

  The <dfn>root element of a <{Document}> object</dfn> is that <{Document}>'s
  first element child, if any. If it does not have one then the <{Document}> has no root
  element.

  The term <dfn>root element</dfn>, when not referring to a <{Document}> object's root
  element, means the furthest ancestor element node of whatever node is being discussed, or the node
  itself if it has no ancestors. When the node is a part of the document, then the node's
  <a>root element</a> is indeed the document's root element; however, if the node is not currently
  part of the document tree, the root element will be an orphaned node.

  When an element's <a>root element</a> is the <a>root element of a <code>Document</code> object</a>,
  it is said to be <dfn>in a <{Document}></dfn>. An element is said to have been
  <dfn>inserted into a document</dfn> when its <a>root element</a> changes and is now the document's
  <a>root element</a>. Analogously, an element is said to have been
  <dfn>removed from a document</dfn> when its <a>root element</a> changes from being the document's
  <a>root element</a> to being another element.

  A node's <dfn>home subtree</dfn> is the subtree rooted at that node's <a>root element</a>. When a
  node is <a>in a <{Document}></a>, its <a>home subtree</a> is that <{Document}>'s tree.

  The <{Document}> of a <code>Node</code> (such as an element) is the <{Document}>
  that the <code>Node</code>'s <code>ownerDocument</code> IDL attribute returns. When a
  <code>Node</code> is <a>in a <{Document}></a> then that <{Document}> is
  always the <code>Node</code>'s <{Document}>, and the <code>Node</code>'s
  <code>ownerDocument</code> IDL attribute thus always returns that <{Document}>.

  The <{Document}> of a content attribute is the <{Document}> of the attribute's
  element.

  The term <dfn>tree order</dfn> means a pre-order, depth-first traversal of DOM nodes involved
  (through the <code>parentNode</code>/<code>childNodes</code> relationship).

  When it is stated that some element or attribute is <dfn>ignored</dfn>, or treated as some other
  value, or handled as if it was something else, this refers only to the processing of the node
  after it is in the DOM. <span class="impl">A user agent must not mutate the DOM in such
  situations.</span>

  A content attribute is said to <dfn>change</dfn> value only if its new value is different than its
  previous value; setting an attribute to a value it already has does not change it.

  The term <dfn>empty</dfn>, when used of an attribute value, <code>Text</code> node, or string,
  means that the length of the text is zero (i.e. not even containing spaces or
  <a>control characters</a>).

  A <dfn>node <var>A</var> is inserted</dfn> into a node <var>B</var> when the
  <a>insertion steps</a> are invoked with <var>A</var> as the argument and <var>A</var>'s new parent
  is <var>B</var>. Similarly, a <dfn>node <var>A</var> is removed</dfn> from a node <var>B</var>
  when the <a>removing steps</a> are invoked with <var>A</var> as the <var>removedNode</var>
  argument and <var>B</var> as the <var>oldParent</var> argument.

<h4 id="scripting">Scripting</h4>

  The construction "a <code>Foo</code> object", where <code>Foo</code> is actually an interface,
  is sometimes used instead of the more accurate "an object implementing the interface
  <code>Foo</code>".

  An IDL attribute is said to be <dfn>getting</dfn> when its value is being retrieved
  (e.g. by author script), and is said to be <dfn>setting</dfn> when a new value is
  assigned to it.

  If a DOM object is said to be <dfn>live</dfn>, then the attributes and methods on that object
  <span class="impl">must</span> operate on the actual underlying data, not a snapshot of the
  data.

  In the contexts of events, the terms <i>fire</i> and <i>dispatch</i> are used as defined in the
  DOM specification: <dfn>firing</dfn> an event means to create and <a>dispatch</a> it, and
  <dfn>dispatching</dfn> an event means to follow the steps that propagate the event through the
  tree. The term <dfn>trusted event</dfn> is used to refer to events whose <code>isTrusted</code>
  attribute is initialized to true. [[!DOM]]

<h4 id="plugin-content-handlers"><code>Plugin</code> Content Handlers</h4>

  The term <dfn>plugin</dfn> refers to a user-agent defined set of content handlers used by the user
  agent that can take part in the user agent's rendering of a <{Document}> object, but that
  neither act as <a>child browsing contexts</a> of the <{Document}> nor introduce any
  <code>Node</code> objects to the <{Document}>'s DOM.

  Typically such content handlers are provided by third parties, though a user agent can also
  designate built-in content handlers as plugins.

  <div class="impl">
    A user agent must not consider the types <code>text/plain</code> and
    <code>application/octet-stream</code> as having a registered <a>plugin</a>.
  </div>

  <p class="example">
    One example of a plugin would be a PDF viewer that is instantiated in a
    <a>browsing context</a> when the user navigates to a PDF file. This would count as a
    plugin regardless of whether the party that implemented the PDF viewer component was the same as
    that which implemented the user agent itself. However, a PDF viewer application that launches
    separate from the user agent (as opposed to using the same interface) is not a plugin by this
    definition.
  </p>

  <p class="note">
    This specification does not define a mechanism for interacting with plugins, as it is expected
    to be user-agent- and platform-specific. Some UAs might opt to support a plugin mechanism such
    as the Netscape Plugin API; others might use remote content converters or have built-in support
    for certain types. Indeed, this specification doesn't require user agents to support plugins at
    all. [[!NPAPI]]
  </p>

  A plugin can be <dfn>secured</dfn> if it honors the semantics of the <code>sandbox</code>
  attribute.

  <p class="example">
    For example, a secured plugin would prevent its contents from creating pop-up windows when the
    plugin is instantiated inside a sandboxed <code>iframe</code>.
  </p>

  <div class="impl">
    <p class="warning">
      Browsers should take extreme care when interacting with external content intended for
      <a>plugins</a>. When third-party software is run with the same privileges as the user agent
      itself, vulnerabilities in the third-party software become as dangerous as those in the user
      agent.
    </p>

    Since different users having differents sets of <a>plugins</a> provides a fingerprinting vector
    that increases the chances of users being uniquely identified, user agents are encouraged to
    support the exact same set of <a>plugins</a> for each user.
    <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>
  </div>

<h4 id="encoding-terminology">Character encodings</h4>

  A <dfn>character encoding</dfn>, or just <i>encoding</i> where that is not ambiguous, is a defined
  way to convert between byte streams and Unicode strings, as defined in the Encoding standard. An
  <a>encoding</a> has an <dfn>encoding name</dfn> and one or more <dfn>encoding labels</dfn>,
  referred to as the encoding's <i>name</i> and <i>labels</i> in the Encoding standard.
  [[!ENCODING]]

  An <dfn>ASCII-compatible character encoding</dfn> is a single-byte or variable-length
  <a>encoding</a> in which the bytes 0x09, 0x0A, 0x0C, 0x0D, 0x20 - 0x22, 0x26, 0x27, 0x2C - 0x3F,
  0x41 - 0x5A, and 0x61 - 0x7A, ignoring bytes that are the second and later bytes of multibyte
  sequences, all correspond to single-byte sequences that map to the same Unicode characters as
  those bytes in Windows-1252. [[!ENCODING]]

  <p class="note">
    This includes such encodings as Shift_JIS, HZ-GB-2312, and variants of ISO-2022, even though it
    is possible in these encodings for bytes like 0x70 to be part of longer sequences that are
    unrelated to their interpretation as ASCII. It excludes UTF-16 variants, as well as obsolete
    legacy encodings such as UTF-7, GSM03.38, and EBCDIC variants.
  </p>

  The term <dfn>a UTF-16 encoding</dfn> refers to any variant of UTF-16: UTF-16LE or UTF-16BE,
  regardless of the presence or absence of a BOM. [[!ENCODING]]

  The term <dfn>code unit</dfn> is used as defined in the Web IDL specification: a 16 bit
  unsigned integer, the smallest atomic component of a <code>DOMString</code>. (This is a narrower
  definition than the one used in Unicode, and is not the same as a <i>code point</i>.) [[!WEBIDL]]

  The term <dfn>Unicode code point</dfn> means a <i>Unicode scalar value</i> where possible, and an
  isolated surrogate code point when not. When a conformance requirement is defined in terms of
  characters or Unicode code points, a pair of <a>code units</a> consisting of a high surrogate
  followed by a low surrogate must be treated as the single code point represented by the surrogate
  pair, but isolated surrogates must each be treated as the single code point with the value of the
  surrogate. [[!UNICODE]

  In this specification, the term <dfn>character</dfn>, when not qualified as <em>Unicode</em>
  character, is synonymous with the term <a>Unicode code point</a>.

  The term <dfn>Unicode character</dfn> is used to mean a <i>Unicode scalar value</i> (i.e. any
  Unicode code point that is not a surrogate code point). [[!UNICODE]]

  The <dfn>code-unit length</dfn> of a string is the number of <a>code units</a> in that string.

  <p class="note">
    This complexity results from the historical decision to define the DOM API in terms of 16 bit
    (UTF-16) <a>code units</a>, rather than in terms of <a>Unicode characters</a>.
  </p>

<h3 id="conformance-requirements">Conformance requirements</h3>

  All diagrams, examples, and notes in this specification are non-normative, as are all sections
  explicitly marked non-normative. Everything else in this specification is normative.

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
  "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this document
  are to be interpreted as described in RFC2119. The key word "OPTIONALLY" in the normative parts of
  this document is to be interpreted with the same normative meaning as "MAY" and "OPTIONAL". For
  readability, these words do not appear in all uppercase letters in this specification.
  [[!RFC2119]]

  <div class="impl">
    Requirements phrased in the imperative as part of algorithms (such as "strip any leading space
    characters" or "return false and abort these steps") are to be interpreted with the meaning of
    the key word ("must", "should", "may", etc) used in introducing the algorithm.

    <div class="example">
      For example, were the spec to say:

      <pre>
        To eat an orange, the user must:
        1. Peel the orange.
        2. Separate each slice of the orange.
        3. Eat the orange slices.
      </pre>

      ...it would be equivalent to the following:

      <pre>
        To eat an orange:
        1. The user must peel the orange.
        2. The user must separate each slice of the orange.
        3. The user must eat the orange slices.
      </pre>

      Here the key word is "must".

      The former (imperative) style is generally preferred in this specification for stylistic
      reasons.
    </div>

    Conformance requirements phrased as algorithms or specific steps may be implemented in any
    manner, so long as the end result is equivalent. (In particular, the algorithms defined in this
    specification are intended to be easy to follow, and not intended to be performant.)
  </div>

<div class="impl">
  <h4 id="conformance-classes">Conformance classes</h4>

  This specification describes the conformance criteria for <span class="impl">user agents (relevant
  to implementors) and</span> documents<span class="impl"> (relevant to authors and authoring tool
  implementors)</span>.

  <dfn>Conforming documents</dfn> are those that comply with all the conformance criteria for
  documents. For readability, some of these conformance requirements are phrased as conformance
  requirements on authors; such requirements are implicitly requirements on documents: by
  definition, all documents are assumed to have had an author. (In some cases, that author may
  itself be a user agent &mdash; such user agents are subject to additional rules, as explained
  below.)

  <p class="example">
    For example, if a requirement states that "authors must not use the <code>foobar</code>
    element", it would imply that documents are not allowed to contain elements named
    <code>foobar</code>.
  </p>

  <p class="note impl">
    There is no implied relationship between document conformance requirements and implementation
    conformance requirements. User agents are not free to handle non-conformant documents as they
    please; the processing model described in this specification applies to implementations
    regardless of the conformity of the input documents.
  </p>

  User agents fall into several (overlapping) categories with different conformance requirements.

  : Web browsers and other interactive user agents
  :: Web browsers that support <a>the XHTML syntax</a> must process elements and attributes from the
      <a>HTML namespace</a> found in XML documents as described in this specification, so that users
      can interact with them, unless the semantics of those elements have been overridden by other
      specifications.

      <p class="example">
        A conforming XHTML processor would, upon finding an XHTML <code>script</code> element in an
        XML document, execute the script contained in that element. However, if the element is found
        within a transformation expressed in XSLT (assuming the user agent also supports XSLT), then
        the processor would instead treat the <code>script</code> element as an opaque element that
        forms part of the transform.
      </p>

      Web browsers that support <a>the HTML syntax</a> must process documents labeled with an
      <a>HTML MIME type</a> as described in this specification, so that users can interact with
      them.

      User agents that support scripting must also be conforming implementations of the IDL
      fragments in this specification, as described in the Web IDL specification. [[!WEBIDL]]

      <p class="note">
        Unless explicitly stated, specifications that override the semantics of HTML elements do not
        override the requirements on DOM objects representing those elements. For example, the
        <code>script</code> element in the example above would still implement the
        <code>HTMLScriptElement</code> interface.
      </p>

  : Non-interactive presentation user agents
  :: User agents that process HTML and XHTML documents purely to render non-interactive versions
      of them must comply to the same conformance criteria as Web browsers, except that they are
      exempt from requirements regarding user interaction.

      <p class="note">
        Typical examples of non-interactive presentation user agents are printers (static UAs) and
        overhead displays (dynamic UAs). It is expected that most static non-interactive
        presentation user agents will also opt to <a>lack scripting support</a>.
      </p>

      <p class="example">
        A non-interactive but dynamic presentation UA would still execute scripts, allowing forms
        to be dynamically submitted, and so forth. However, since the concept of "focus" is
        irrelevant when the user cannot interact with the document, the UA would not need to support
        any of the focus-related DOM APIs.
      </p>

  : Visual user agents that support the suggested default rendering
  :: User agents, whether interactive or not, may be designated (possibly as a user option) as
      supporting the suggested default rendering defined by this specification.

      This is not required. In particular, even user agents that do implement the suggested default
      rendering are encouraged to offer settings that override this default to improve the
      experience for the user, e.g. changing the color contrast, using different focus styles, or
      otherwise making the experience more accessible and usable to the user.

      User agents that are designated as supporting the suggested default rendering must, while so
      designated, implement the rules in <aa>the rendering section</a> that that section defines as
      the behavior that user agents are <em>expected</em> to implement.

    : User agents with no scripting support

    :: Implementations that do not support scripting (or which have their scripting features
        disabled entirely) are exempt from supporting the events and DOM interfaces mentioned in
        this specification. For the parts of this specification that are defined in terms of an
        events model or in terms of the DOM, such user agents must still act as if events and the
        DOM were supported.

        <p class="note">
          Scripting can form an integral part of an application. Web browsers that do not support
          scripting, or that have scripting disabled, might be unable to fully convey the author's
          intent.
        </p>

  : Conformance checkers
  :: Conformance checkers must verify that a document conforms to the applicable conformance
      criteria described in this specification. Automated conformance checkers are exempt from
      detecting errors that require interpretation of the author's intent (for example, while a
      document is non-conforming if the content of a <code>blockquote</code> element is not a quote,
      conformance checkers running without the input of human judgement do not have to check that
      <code>blockquote</code> elements only contain quoted material).

      Conformance checkers must check that the input document conforms when parsed without a
      <a>browsing context</a> (meaning that no scripts are run, and that the parser's
      <a>scripting flag</a> is disabled), and should also check that the input document conforms
      when parsed with a <a>browsing context</a> in which scripts execute, and that the scripts
      never cause non-conforming states to occur other than transiently during script execution
      itself. (This is only a "SHOULD" and not a "MUST" requirement because it has been proven to be
      impossible. [[COMPUTABLE]])

      The term "HTML validator" can be used to refer to a conformance checker that itself conforms
      to the applicable requirements of this specification.

      <div class="note">
        XML DTDs cannot express all the conformance requirements of this specification. Therefore, a
        validating XML processor and a DTD cannot constitute a conformance checker. Also, since
        neither of the two authoring formats defined in this specification are applications of SGML,
        a validating SGML system cannot constitute a conformance checker either.

        To put it another way, there are three types of conformance criteria:

        1. Criteria that can be expressed in a DTD.
        2. Criteria that cannot be expressed by a DTD, but can still be checked by a machine.
        3. Criteria that can only be checked by a human.

        A conformance checker must check for the first two. A simple DTD-based validator only checks
        for the first class of errors and is therefore not a conforming conformance checker
        according to this specification.
      </div>

  : Data mining tools
  :: Applications and tools that process HTML and XHTML documents for reasons other than to either
      render the documents or check them for conformance should act in accordance with the semantics
      of the documents that they process.

      <p class="example">
        A tool that generates <a>document outlines</a> but increases the nesting level for each
        paragraph and does not increase the nesting level for each section would not be conforming.
      </p>

  : Authoring tools and markup generators
  :: Authoring tools and markup generators must generate <a>conforming documents</a>. Conformance
      criteria that apply to authors also apply to authoring tools, where appropriate.

      Authoring tools are exempt from the strict requirements of using elements only for their
      specified purpose, but only to the extent that authoring tools are not yet able to determine
      author intent. However, authoring tools must not automatically misuse elements or encourage
      their users to do so.

      <p class="example">
        For example, it is not conforming to use an <code>address</code> element for arbitrary
        contact information; that element can only be used for marking up contact information for
        the author of the document or section. However, since an authoring tool is likely unable to
        determine the difference, an authoring tool is exempt from that requirement. This does not
        mean, though, that authoring tools can use <code>address</code> elements for any block of
        italics text (for instance); it just means that the authoring tool doesn't have to verify
        that when the user uses a tool for inserting contact information for a section, that the
        user really is doing that and not inserting something else instead.
      </p>

      <p class="note">
        In terms of conformance checking, an editor has to output documents that conform to the same
        extent that a conformance checker will verify.
      </p>

      When an authoring tool is used to edit a non-conforming document, it may preserve the
      conformance errors in sections of the document that were not edited during the editing session
      (i.e. an editing tool is allowed to round-trip erroneous content). However, an authoring tool
      must not claim that the output is conformant if errors have been so preserved.

      Authoring tools are expected to come in two broad varieties: tools that work from structure
      or semantic data, and tools that work on a What-You-See-Is-What-You-Get media-specific editing
      basis (WYSIWYG).

      The former is the preferred mechanism for tools that author HTML, since the structure in the
      source information can be used to make informed choices regarding which HTML elements and
      attributes are most appropriate.

      However, WYSIWYG tools are legitimate. WYSIWYG tools should use elements they know are
      appropriate, and should not use elements that they do not know to be appropriate. This might
      in certain extreme cases mean limiting the use of flow elements to just a few elements, like
      <{div}>, <{b}>, <{i}>, and <{span}> and making liberal use of the <code>style</code>
      attribute.

      All authoring tools, whether WYSIWYG or not, should make a best effort attempt at enabling
      users to create well-structured, semantically rich, media-independent content.

  User agents may impose implementation-specific limits on otherwise unconstrained inputs, e.g. to
  prevent denial of service attacks, to guard against running out of memory, or to work around
  platform-specific limitations.
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

  For compatibility with existing content and prior specifications, this specification describes
  two authoring formats: one based on XML (referred to as <a>the XHTML syntax</a>), and one using a
  <a>custom format</a> inspired by SGML (referred to as <a>the HTML syntax</a>). Implementations
  must support at least one of these two formats, although supporting both is encouraged.

  Some conformance requirements are phrased as requirements on elements, attributes, methods or
  objects. Such requirements fall into two categories: those describing content model restrictions,
  and those describing implementation behavior. Those in the former category are requirements on
  documents and authoring tools. Those in the second category are requirements on user agents.
  Similarly, some conformance requirements are phrased as requirements on authors; such requirements
  are to be interpreted as conformance requirements on the documents that authors produce. (In other
  words, this specification does not distinguish between conformance criteria on authors and
  conformance criteria on documents.)
</div>

<div class="impl">
  <h4 id="dependencies">Dependencies</h4>

  This specification relies on several other underlying specifications.

  : Unicode and Encoding
  :: The Unicode character set is used to represent textual data, and the Encoding standard defines
      requirements around <a>character encodings</a>. [[!UNICODE]]

      <p class="note">
        This specification <a>introduces terminology</a> based on the terms defined in those
        specifications, as described earlier.
      </p>

      The following terms are used as defined in the Encoding standard: [[!ENCODING]]

      * <dfn>Getting an encoding</dfn>

      * The <dfn>encoder</dfn> and <dfn>decoder</dfn> algorithms for various encodings, including
        the <dfn>UTF-8 encoder</dfn> and <dfn>UTF-8 decoder</dfn>

      * The generic <dfn>decode</dfn> algorithm which takes a byte stream and an encoding and
        returns a character stream

      * The <dfn>UTF-8 decode</dfn> algorithm which takes a byte stream and returns a character
        stream, additionally stripping one leading UTF-8 Byte Order Mark (BOM), if any

      <p class="note">
        The <a>UTF-8 decoder</a> is distinct from the <i>UTF-8 decode algorithm</i>. The latter
        first strips a Byte Order Mark (BOM), if any, and then invokes the former.
      </p>

      For readability, character encodings are sometimes referenced in this specification with a
      case that differs from the canonical case given in the Encoding standard. (For example,
      "UTF-16LE" instead of "utf-16le".)</p>

  : XML and related specifications
  :: Implementations that support <a>the XHTML syntax</a> must support some version of XML, as
      well as its corresponding namespaces specification, because that syntax uses an XML
      serialization with namespaces. [[!XML]] [[!XML-NAMES]]

      The attribute with the tag name <dfn><code>xml:space</code></dfn> in the <a>XML namespace</a>
      is defined by the XML specification. [[!XML]]

      This specification also references the <dfn><code>&lt;?xml-stylesheet?></code></dfn>
      processing instruction, defined in the
      <cite>Associating Style Sheets with XML documents</cite> specification. [[!XML-STYLESHEET]]

      This specification also non-normatively mentions the <dfn><code>XSLTProcessor</code></dfn>
      interface and its <dfn><code>transformToFragment()</code></dfn> and
      <dfn><code>transformToDocument()</code></dfn> methods.

  : URLs
  :: The following terms are defined in the WHATWG URL standard: [[!URL]]

      * <dfn>domain</dfn>
      * <dfn>URL</dfn>
      * <dfn>Origin</dfn> of URLs
      * <dfn>Absolute URL</dfn>
      * <dfn>Relative URL</dfn>
      * <dfn>Relative schemes</dfn>
      * The <dfn>URL parser</dfn> and <dfn>basic URL parser</dfn> as well as these parser states:
        * <dfn>scheme start state</dfn>
        * <dfn>host state</dfn>
        * <dfn>hostname state</dfn>
        * <dfn>port state</dfn>
        * <dfn>path start state</dfn>
        * <dfn>query state</dfn>
        * <dfn>fragment state</dfn>
      * <dfn>Parsed URL</dfn>
      * The <dfn>scheme</dfn> component of a <a>parsed URL</a>
      * The <dfn>scheme data</dfn> component of a <a>parsed URL</a>
      * The <dfn>username</dfn> component of a <a>parsed URL</a>
      * The <dfn>password</dfn> component of a <a>parsed URL</a>
      * The <dfn>host</dfn> component of a <a>parsed URL</a>
      * The <dfn>port</dfn> component of a <a>parsed URL</a>
      * The <dfn>path</dfn> component of a <a>parsed URL</a>
      * The <dfn>query</dfn> component of a <a>parsed URL</a>
      * The <dfn>fragment</dfn> component of a <a>parsed URL</a>
      * <dfn>non-relative flag</dfn>
      * <dfn>Parse errors</dfn> from the <a>URL parser</a>
      * The <dfn>URL serializer</dfn>
      * The <dfn>host serializer</dfn>
      * The <dfn>serialize an integer</dfn>
      * <dfn>Default encode set</dfn>
      * <dfn>Percent encode</dfn>
      * <dfn>UTF-8 percent encode</dfn>
      * <dfn>Percent decode</dfn>
      * <dfn>Decoder error</dfn>
      * <dfn>set the username</dfn>
      * <dfn>set the password</dfn>
      * The <dfn>domain to ASCII</dfn> algorithm
      * The <dfn>domain to Unicode</dfn> algorithm

      A number of schemes and protocols are referenced by this specification also:

      * The <dfn><code>about:</code></dfn> scheme [[!RFC6694]]
      * The <dfn><code>blob:</code></dfn> scheme [[!FILEAPI]]
      * The <dfn><code>data:</code></dfn> scheme [[!RFC2397]]
      * The <dfn><code>http:</code></dfn> scheme [[!HTTP11]]
      * The <dfn><code>https:</code></dfn> scheme [[!HTTP11]]
      * The <dfn><code>mailto:</code></dfn> scheme [[!RFC6068]]
      * The <dfn><code>sms:</code></dfn> scheme [[!RFC5724]]
      * The <dfn><code>urn:</code></dfn> scheme [[!URN]]

  : HTTP and related specifications
  :: The following terms are defined in the HTTP specifications: [[!HTTP11]]

      * <dfn><code>Accept</code></dfn> header
      * <dfn><code>Accept-Language</code></dfn> header
      * <dfn><code>Cache-Control</code></dfn> header
      * <dfn><code>Content-Disposition</code></dfn> header
      * <dfn><code>Content-Language</code></dfn> header
      * <dfn><code>Content-Length</code></dfn> header
      * <dfn><code>Host</code></dfn> header
      * <dfn><code>Last-Modified</code></dfn> header
      * <dfn><code>Referer</code></dfn> header

      The following terms are defined in the Cookie specification: [[!COOKIES]]

      * <dfn>cookie-string</dfn>
      * <dfn>receives a set-cookie-string</dfn>
      * <dfn><code>Cookie</code></dfn> header

      The following term is defined in the Web Linking specification: [[!RFC5988]]

      * <dfn><code>Link</code></dfn> header

  : Fetch
  :: The following terms are defined in the WHATWG Fetch specification: [[!FETCH]]

      * <dfn><code>about:blank</code></dfn>
      * <dfn>fetch</dfn>
      * <dfn>ok status</dfn>
      * <dfn><code>Origin</code></dfn> header
      * <dfn>set</dfn>
      * <dfn>response</dfn> and its associated:
        * <dfn>type</dfn>
        * <dfn>url</dfn>
        * <dfn>url list</dfn>
        * <dfn>status</dfn>
        * <dfn>header list</dfn>
        * <dfn>body</dfn>
        * <dfn>internal response</dfn>
        * <dfn>HTTPS state</dfn>
      * <dfn>request</dfn> and its associated:
        * <dfn>url</dfn>
        * <dfn>method</dfn>
        * <dfn>header list</dfn>
        * <dfn>body</dfn>
        * <dfn>client</dfn>
        * <dfn>target browsing context</dfn>
        * <dfn>initiator</dfn>
        * <dfn>type</dfn>
        * <dfn>destination</dfn>
        * <dfn>origin</dfn>
        * <dfn>omit-<code>Origin</code>-header flag</dfn>
        * <dfn>referrer</dfn>
        * <dfn>synchronous flag</dfn>
        * <dfn>mode</dfn>
        * <dfn>credentials mode</dfn>
        * <dfn>use-URL-credentials flag</dfn>
        * <dfn>cache mode</dfn>
        * <dfn>redirect mode</dfn>

  : Web IDL
  :: The IDL fragments in this specification must be interpreted as required for conforming IDL
      fragments, as described in the Web IDL specification. [[!WEBIDL]]

      The following terms are defined in the Web IDL specification:

      * <dfn>Supported property indices</dfn>
      * <dfn>Determine the value of an indexed property</dfn>
      * <dfn>Support named properties</dfn>
      * <dfn>Supported property names</dfn>
      * <dfn>Unenumerable</dfn>
      * <dfn>Determine the value of a named property</dfn>
      * <dfn>Platform array objects</dfn>
      * <dfn>Read only</dfn> (when applied to arrays)
      * <dfn>Callback this value</dfn>
      * <dfn>Converting</dfn> between WebIDL types and JS types
      * <dfn>invoke the Web IDL callback function</dfn>

      The Web IDL specification also defines the following types that are used in Web IDL fragments
      in this specification:

      * <dfn><code>Array</code></dfn>
      * <dfn><code>boolean</code></dfn>
      * <dfn><code>Boolean</code></dfn>
      * <dfn><code>DOMString</code></dfn>
      * <dfn><code>USVString</code></dfn>
      * <dfn><code>double</code></dfn>
      * <dfn><code>Error</code></dfn>
      * <dfn><code>Function</code></dfn>
      * <dfn><code>long</code></dfn>
      * <dfn><code>Map</code></dfn>
      * <dfn><code>Number</code></dfn>
      * <dfn><code>Object</code></dfn>
      * <dfn><code>RegExp</code></dfn>
      * <dfn><code>Set</code></dfn>
      * <dfn><code>String</code></dfn>
      * <dfn><code>unrestricted double</code></dfn>
      * <dfn><code>unsigned long</code></dfn>

      The term <dfn>throw</dfn> in this specification is used as defined in the WebIDL
      specification. The following exception names are defined by WebIDL and used by this
      specification:

      * <dfn><code>IndexSizeError</code></dfn>
      * <dfn><code>HierarchyRequestError</code></dfn>
      * <dfn><code>InvalidCharacterError</code></dfn>
      * <dfn><code>NotFoundError</code></dfn>
      * <dfn><code>NotSupportedError</code></dfn>
      * <dfn><code>InvalidStateError</code></dfn>
      * <dfn><code>SyntaxError</code></dfn>
      * <dfn><code>InvalidAccessError</code></dfn>
      * <dfn><code>SecurityError</code></dfn>
      * <dfn><code>NetworkError</code></dfn>
      * <dfn><code>QuotaExceededError</code></dfn>
      * <dfn><code>TimeoutError</code></dfn>
      * <dfn><code>DataCloneError</code></dfn>
      * <dfn><code>TypeError</code></dfn>

      When this specification requires a user agent to <dfn>create a <code>Date</code> object</dfn>
      representing a particular time (which could be the special value Not-a-Number), the
      milliseconds component of that time, if any, must be truncated to an integer, and the time
      value of the newly created <code>Date</code> object must represent the resulting truncated
      time.

      <p class="example">
        For instance, given the time 23045 millionths of a second after 01:00 UTC on January 1st
        2000, i.e. the time 2000-01-01T00:00:00.023045Z, then the <code>Date</code> object created
        representing that time would represent the same time as that created representing the time
        2000-01-01T00:00:00.023Z, 45 millionths earlier. If the given time is NaN, then the result
        is a <code>Date</code> object that represents a time value NaN (indicating that the object
        does not represent a specific instant of time).
      </p>

  : JavaScript
  :: Some parts of the language described by this specification only support JavaScript as the
      underlying scripting language. [[!ECMA-262]]

      <p class="note">
        The term "JavaScript" is used to refer to ECMA262, rather than the official term ECMAScript,
        since the term JavaScript is more widely known. Similarly, the <a>MIME type</a> used to
        refer to JavaScript in this specification is <code>text/javascript</code>, since that is the
        most commonly used type, <a>despite it being an officially obsoleted type</a> according to
        RFC 4329. [[!RFC4329]]
      </p>

      The term <dfn>JavaScript global environment</dfn> refers to the <i>global environment</i>
      concept defined in the ECMAScript specification.

      The ECMAScript <dfn><code>SyntaxError</code></dfn> exception is also defined in the ECMAScript
      specification. [[!ECMA-262]]

      The <dfn>ArrayBuffer</dfn> and related object types and underlying concepts from the
      ECMAScript Specification are used for several features in this specification. [[!ECMA-262]]

      The <dfn><code>Date</code></dfn> object type from the ECMAScript Specification is used for
      several features of this specification. [[!ECMA-262]]

      The following helper IDL is used for referring to <code>ArrayBuffer</code>-related types:

      <pre class="idl-ignore" data-highlight="webidl">
        typedef (Int8Array or Uint8Array or Uint8ClampedArray or Int16Array or Uint16Array or Int32Array or Uint32Array or Float32Array or Float64Array or DataView) ArrayBufferView;
      </pre>

      <p class="note">
        In particular, the <code>Uint8ClampedArray</code> type is used by some
        <a>2D canvas APIs</a>, and the <a><code>WebSocket</code> API</a> uses
        <code>ArrayBuffer</code> objects for handling binary frames.
      </p>

  : DOM
  :: The Document Object Model (DOM) is a representation &mdash; a model &mdash; of a document and
      its content. The DOM is not just an API; the conformance criteria of HTML implementations are
      defined, in this specification, in terms of operations on the DOM. [[!DOM]]

      Implementations must support DOM and the events defined in UI Events, because this
      specification is defined in terms of the DOM, and some of the features are defined as
      extensions to the DOM interfaces. [[!DOM]] [[!UIEVENTS]]

      In particular, the following features are defined in the DOM specification: [[!DOM]]

      * {{Attr}} interface
      * {{Comment}} interface
      * {{DOMImplementation}} interface
      * {{Document}} interface
      * {{XMLDocument}} interface
      * {{DocumentFragment}} interface
      * {{DocumentType}} interface
      * {{DOMException}} interface
      * {{ChildNode}} interface
      * {{Element}} interface
      * {{Node}} interface
      * {{NodeList}} interface
      * {{ProcessingInstruction}} interface
      * {{Text}} interface
      * {{HTMLCollection}} interface
      * <dfn><code>item()</code></dfn> method
      * The terms <dfn>collections</dfn> and <dfn>represented by the collection</dfn>
      * {{DOMTokenList}} interface
      * {{DOMSettableTokenList}} interface
      * {{DOMTokenList}} interface
      * {{DOMSettableTokenList}} interface
      * <dfn><code>DOMSettableTokenList.value</code></dfn> attribute
      * <dfn><code>createDocument()</code></dfn> method
      * <dfn><code>createHTMLDocument()</code></dfn> method
      * <dfn><code>createElement()</code></dfn> method
      * <dfn><code>createElementNS()</code></dfn> method
      * <dfn><code>getElementById()</code></dfn> method
      * <dfn><code>getElementsByClassName()</code></dfn> method
      * <dfn><code>insertBefore()</code></dfn> method
      * <dfn><code>appendChild()</code></dfn> method
      * <dfn><code>cloneNode()</code></dfn> method
      * <dfn><code>importNode()</code></dfn> method
      * {{childNodes}} attribute
      * {{localName}} attribute
      * {{parentNode}} attribute
      * {{namespaceURI}} attribute
      * {{tagName}} attribute
      * {{id}} attribute
      * {{textContent}} attribute
      * The <dfn>insert</dfn>, <dfn>append</dfn>, <dfn>remove</dfn>, <dfn>replace</dfn>, and
        <dfn>adopt</dfn> algorithms for nodes
      * The <dfn>insertion steps</dfn>, <dfn>removing steps</dfn>, and <dfn>adopting steps</dfn>
        hooks
      * The <dfn>attribute list</dfn> concept.
      * The <dfn>data</dfn> of a text node.
      * {{Event}} interface
      * {{EventTarget}} interface
      * {{EventInit}} dictionary type
      * {{target}} attribute
      * {{currentTarget}} attribute
      * {{isTrusted}} attribute
      * <dfn><code>initEvent()</code></dfn> method
      * <dfn><code>addEventListener()</code></dfn> method
      * The <dfn>type</dfn> of an event
      * The concept of an <dfn>event listener</dfn> and the <a>event listeners</a> associated with
        an <code>EventTarget</code>
      * The concept of a <dfn>target override</dfn>
      * The concept of a regular <dfn>event parent</dfn> and a
        <dfn>cross-boundary event parent</dfn>
      * The <dfn>encoding</dfn> (herein the <i>character encoding</i>) and <dfn>content type</dfn>
        of a <{Document}>
      * The distinction between <dfn>XML documents</dfn> and <dfn>HTML documents</dfn>
      * The terms <dfn>quirks mode</dfn>, <dfn>limited-quirks mode</dfn>, and
        <dfn>no-quirks mode</dfn>
      * The algorithm to <dfn>clone</dfn> a <code>Node</code>, and the concept of
        <dfn>cloning steps</dfn> used by that algorithm
      * The concept of <dfn>base URL change steps</dfn> and the definition of what happens when an
        element is <dfn>affected by a base URL change</dfn>
      * The concept of an element's <dfn>unique identifier (ID)</dfn>
      * The concept of a DOM <dfn>range</dfn>, and the terms <dfn>start</dfn>, <dfn>end</dfn>, and
        <dfn>boundary point</dfn> as applied to ranges.
      * {{MutationObserver}} interface and <dfn>mutation observers</dfn> in
        general

      The term <dfn>throw</dfn> in this specification is used as defined in the DOM specification.
      The following <code>DOMException</code> types are defined in the DOM specification: [[!DOM]]

      * <dfn><code>IndexSizeError</code></dfn>
      * <dfn><code>HierarchyRequestError</code></dfn>
      * <dfn><code>WrongDocumentError</code></dfn>
      * <dfn><code>InvalidCharacterError</code></dfn>
      * <dfn><code>NoModificationAllowedError</code></dfn>
      * <dfn><code>NotFoundError</code></dfn>
      * <dfn><code>NotSupportedError</code></dfn>
      * <dfn><code>InvalidStateError</code></dfn>
      * <dfn><code>SyntaxError</code></dfn>
      * <dfn><code>InvalidModificationError</code></dfn>
      * <dfn><code>NamespaceError</code></dfn>
      * <dfn><code>InvalidAccessError</code></dfn>
      * <dfn><code>SecurityError</code></dfn>
      * <dfn><code>NetworkError</code></dfn>
      * <dfn><code>AbortError</code></dfn>
      * <dfn><code>URLMismatchError</code></dfn>
      * <dfn><code>QuotaExceededError</code></dfn>
      * <dfn><code>TimeoutError</code></dfn>
      * <dfn><code>InvalidNodeTypeError</code></dfn>
      * <dfn><code>DataCloneError</code></dfn>

      <p class="example">
        For example, to <i>throw a <code>TimeoutError</code> exception</i>, a user agent would
        construct a <code>DOMException</code> object whose type was the string
        "<code>TimeoutError</code>" (and whose code was the number 23, for legacy reasons) and
        actually throw that object as an exception.
      </p>

      The following features are defined in the UI Events specification: [[!UIEVENTS]]

      * <dfn><code>MouseEvent</code></dfn> interface
      * <dfn><code>MouseEventInit</code></dfn> dictionary type
      * The <dfn><code>FocusEvent</code></dfn> interface and its
        <dfn><code>relatedTarget</code></dfn> attribute
      * The <dfn><code>UIEvent</code></dfn> interface's <dfn><code>detail</code></dfn> attribute
      * <dfn><code>click</code></dfn> event
      * <dfn><code>dblclick</code></dfn> event
      * <dfn><code>mousedown</code></dfn> event
      * <dfn><code>mouseenter</code></dfn> event
      * <dfn><code>mouseleave</code></dfn> event
      * <dfn><code>mousemove</code></dfn> event
      * <dfn><code>mouseout</code></dfn> event
      * <dfn><code>mouseover</code></dfn> event
      * <dfn><code>mouseup</code></dfn> event
      * <dfn><code>mousewheel</code></dfn> event
      * <dfn><code>keydown</code></dfn> event
      * <dfn><code>keyup</code></dfn> event
      * <dfn><code>keypress</code></dfn> event

      The following features are defined in the Touch Events specification: [[!TOUCH-EVENTS]]

      * <dfn><code>Touch</code></dfn> interface
      * <dfn>Touch point</dfn> concept

      This specification sometimes uses the term <dfn>name</dfn> to refer to the event's
      <code>type</code>; as in, "an event named <code>click</code>" or "if the event name is
      <code>keypress</code>". The terms "name" and "type" for events are synonymous.

      The following features are defined in the DOM Parsing and Serialization specification:
      [[!DOMPARSING]]

      * <dfn><code>innerHTML</code></dfn>
      * <dfn><code>outerHTML</code></dfn>

      <p class="note">
        User agents are also encouraged to implement the features described in the
        <cite>HTML Editing APIs</cite> and <cite><code>UndoManager</code> and DOM Transaction</cite>
        specifications. [[!EDITING]] [[!UNDO]]
      </p>

      The following parts of the Fullscreen specification are referenced from this specification, in
      part to define the rendering of <code>dialog</code> elements, and also to define how the
      Fullscreen API interacts with the sandboxing features in HTML: [[!FULLSCREEN]]

      * The <dfn>top layer</dfn> concept
      * <dfn><code>requestFullscreen()</code></dfn>
      * The <dfn>fullscreen enabled flag</dfn>
      * The <dfn>fully exit fullscreen</dfn> algorithm

      The <cite>High Resolution Time</cite> specification provides the
      <dfn><code>DOMHighResTimeStamp</code></dfn> typedef and the
      <dfn><code>Performance</code></dfn> object's <dfn><code>now()</code></dfn> method.
      [[!HR-TIME-2]]

  : File API
  :: This specification uses the following features defined in the File API specification:
      [[!FILEAPI]]

      * <dfn><code>Blob</code></dfn> interface
      * <dfn><code>File</code></dfn> interface
      * <dfn><code>FileList</code></dfn> interface
      * <dfn><code>Blob.close()</code></dfn>
      * <dfn><code>Blob.type</code></dfn>
      * The concept of <dfn>read errors</dfn>

  : Media Providers
  :: This specification references the following interfaces:

      * <dfn><code>MediaStream</code></dfn> [[!MEDIASTREAM-RECORDING]]
      * <dfn><code>MediaSource</code></dfn> [[!MEDIA-SOURCE]]

  : XMLHttpRequest
  :: This specification references the XMLHttpRequest specification to describe how the two
      specifications interact and to use its <code>ProgressEvent</code> features. The following
      features and terms are defined in the XMLHttpRequest specification: [[!XHR]]

      * <dfn><code>XMLHttpRequest</code></dfn> interface
      * <dfn><code>XMLHttpRequest.responseXML</code></dfn> attribute
      * <dfn><code>ProgressEvent</code></dfn> interface
      * <dfn><code>ProgressEvent.lengthComputable</code></dfn> attribute
      * <dfn><code>ProgressEvent.loaded</code></dfn> attribute
      * <dfn><code>ProgressEvent.total</code></dfn> attribute
      * <dfn>Fire a progress event named <var>e</var></dfn>

  : Server-Sent Events
  :: This specification references <dfn><code>EventSource</code></dfn> which is specified in the
      Server-Sent Events specification [[!EVENTSOURCE]]

  : Media Queries
  :: Implementations must support the Media Queries language. [[!MEDIAQ]]

  : CSS modules
  :: While support for CSS as a whole is not required of implementations of this specification
      (though it is encouraged, at least for Web browsers), some features are defined in terms of
      specific CSS requirements.

      In particular, some features require that a string be
      <dfn>parsed as a CSS &lt;color&gt; value</dfn>. When parsing a CSS value, user agents are
      required by the CSS specifications to apply some error handling rules. These apply to this
      specification also. [[!CSS3COLOR]] [[!CSS-2015]]

      <p class="example">
        For example, user agents are required to close all open constructs upon finding the end of a
        style sheet unexpectedly. Thus, when parsing the string "<code>rgb(0,0,0</code>" (with a
        missing close-parenthesis) for a color value, the close parenthesis is implied by this error
        handling rule, and a value is obtained (the color 'black'). However, the similar construct
        "<code>rgb(0,0,</code>" (with both a missing parenthesis and a missing "blue" value) cannot
        be parsed, as closing the open construct does not result in a viable value.
      </p>

      The term <dfn>named color</dfn> is defined in the CSS Color specification. [[!CSS3COLOR]]

      The terms <dfn>replaced element</dfn> and <dfn>intrinsic dimensions</dfn> are defined in the
      CSS specification. [[!CSS-2015]]

      The terms <dfn>intrinsic width</dfn> and <dfn>intrinsic height</dfn> refer to the width
      dimension and the height dimension, respectively, of <a>intrinsic dimensions</a>.

      The term <dfn>provides a paint source</dfn> is used as defined in the
      <cite>CSS Image Values and Replaced Content</cite> specification to define the interaction of
      certain HTML elements with the CSS 'element()' function. [[!CSS3-IMAGES]]

      The term <dfn>default object size</dfn> is also defined in the
      <cite>CSS Image Values and Replaced Content</cite> specification. [[!CSS3-IMAGES]]

      Implementations that support scripting must support the CSS Object Model. The following
      features and terms are defined in the CSSOM specifications: [[!CSSOM]] [[!CSSOM-VIEW]]

      * <dfn><code>Screen</code></dfn>
      * <dfn><code>LinkStyle</code></dfn>
      * <dfn><code>CSSStyleDeclaration</code></dfn>
      * <dfn><code>cssText</code></dfn> attribute of <code>CSSStyleDeclaration</code>
      * <dfn><code>StyleSheet</code></dfn>
      * The terms <dfn>create a CSS style sheet</dfn>, <dfn>remove a CSS style sheet</dfn>, and
        <dfn>associated CSS style sheet</dfn>
      * <dfn>CSS style sheets</dfn> and their properties: <dfn>type</dfn>, <dfn>location</dfn>,
        <dfn>parent CSS style sheet</dfn>, <dfn>owner node</dfn>, <dfn>owner CSS rule</dfn>,
        <dfn>media</dfn>, <dfn>title</dfn>, <dfn>alternate flag</dfn>, <dfn>disabled flag</dfn>,
        <dfn>CSS rules</dfn>, <dfn>origin-clean flag</dfn>
      * <dfn>Alternative style sheet sets</dfn> and the <dfn>preferred style sheet set</dfn>
      * <dfn>Serializing a CSS value</dfn>
      * <dfn>Scroll an element into view</dfn>
      * <dfn>Scroll to the beginning of the document</dfn>
      * The <dfn><code>resize</code></dfn> event
      * The <dfn><code>scroll</code></dfn> event

      The following features and terms are defined in the <cite>CSS Syntax</cite> specifications:
      [[!CSS3-SYNTAX]]

      * <dfn>Parse a comma-separated list of component values</dfn>
      * <dfn>component value</dfn>
      * <dfn>environment encoding</dfn>
      * <dfn>&lt;whitespace-token></dfn>

      The feature <dfn>&lt;length></dfn> is defined in the <cite>CSS Values and Units</cite>
      specification. [[!CSS-VALUES]]

      The term <dfn>CSS styling attribute</dfn> is defined in the <cite>CSS Style Attributes</cite>
      specification. [[!CSS-STYLE-ATTR]]

      The <code>CanvasRenderingContext2D</code> object's use of fonts depends on the features
      described in the CSS <cite>Fonts</cite> and <cite>Font Loading</cite> specifications,
      including in particular <dfn><code>FontFace</code></dfn> objects and the
      <dfn>font source</dfn> concept. [[!CSS3-FONTS]] [[!CSS-FONT-LOADING-3]]

      The following interface is defined in the Geometry Interfaces Module specification:
      [[!GEOMETRY-1]]

      * <dfn><code>DOMMatrix</code></dfn> interface

  : SVG
  :: The <code>CanvasRenderingContext2D</code> object's use of fonts depends on the features
      described in the CSS <cite>Fonts</cite> and <cite>Font Loading</cite> specifications,
      including in particular <dfn><code>FontFace</code></dfn> objects and the
      <dfn>font source</dfn> concept. [[!CSS3-FONTS]] [[!CSS-FONT-LOADING-3]]

      The following interface is defined in the SVG specification: [[!SVG]]

      * <dfn><code>SVGMatrix</code></dfn>

  : WebGL
  :: The following interface is defined in the WebGL specification: [[!WEBGL]]

      * <dfn><code>WebGLRenderingContext</code></dfn>

  : WebVTT
  :: Implementations may support <dfn>WebVTT</dfn> as a text track format for subtitles, captions,
      chapter titles, metadata, etc, for media resources. [[!WEBVTT]]

      The following terms, used in this specification, are defined in the WebVTT specification:

      * <dfn>WebVTT file</dfn>
      * <dfn>WebVTT file using cue text</dfn>
      * <dfn>WebVTT file using chapter title text</dfn>
      * <dfn>WebVTT file using only nested cues</dfn>
      * <dfn>WebVTT parser</dfn>
      * The <dfn>rules for updating the display of WebVTT text tracks</dfn>
      * The <dfn>rules for interpreting WebVTT cue text</dfn>
      * The WebVTT <dfn>text track cue writing direction</dfn>

  : The WebSocket protocol
  :: The following terms are defined in the WebSocket protocol specification: [[!RFC6455]]

      * <dfn>establish a WebSocket connection</dfn>
      * <dfn>the WebSocket connection is established</dfn>
      * <dfn>validate the server's response</dfn>
      * <dfn>extensions in use</dfn>
      * <dfn>subprotocol in use</dfn>
      * <dfn>headers to send appropriate cookies</dfn>
      * <dfn>cookies set during the server's opening handshake</dfn>
      * <dfn>a WebSocket message has been received</dfn>
      * <dfn>send a WebSocket Message</dfn>
      * <dfn>fail the WebSocket connection</dfn>
      * <dfn>close the WebSocket connection</dfn>
      * <dfn>start the WebSocket closing handshake</dfn>
      * <dfn>the WebSocket closing handshake is started</dfn>
      * <dfn>the WebSocket connection is closed</dfn> (possibly <i>cleanly</i>)
      * <dfn>the WebSocket connection close code</dfn>
      * <dfn>the WebSocket connection close reason</dfn>
      * <dfn><code>Sec-WebSocket-Protocol</code></dfn> field

  : ARIA
  :: The <dfn><code>role</code></dfn> attribute is defined in the ARIA specification, as are the
      following roles: [[!WAI-ARIA]]

      * <dfn><code>alert</code></dfn>
      * <dfn><code>alertdialog</code></dfn>
      * <dfn><code>application</code></dfn>
      * <dfn><code>article</code></dfn>
      * <dfn><code>banner</code></dfn>
      * <dfn><code>button</code></dfn>
      * <dfn><code>checkbox</code></dfn>
      * <dfn><code>columnheader</code></dfn>
      * <dfn><code>combobox</code></dfn>
      * <dfn><code>complementary</code></dfn>
      * <dfn><code>contentinfo</code></dfn>
      * <dfn><code>dialog</code></dfn>
      * <dfn><code>directory</code></dfn>
      * <dfn><code>document</code></dfn>
      * <dfn><code>grid</code></dfn>
      * <dfn><code>gridcell</code></dfn>
      * <dfn><code>group</code></dfn>
      * <dfn><code>heading</code></dfn>
      * <dfn><code>img</code></dfn>
      * <dfn><code>link</code></dfn>
      * <dfn><code>list</code></dfn>
      * <dfn><code>listbox</code></dfn>
      * <dfn><code>listitem</code></dfn>
      * <dfn><code>log</code></dfn>
      * <dfn><code>main</code></dfn>
      * <dfn><code>marquee</code></dfn>
      * <dfn><code>menu</code></dfn>
      * <dfn><code>menubar</code></dfn>
      * <dfn><code>menuitem</code></dfn>
      * <dfn><code>menuitemcheckbox</code></dfn>
      * <dfn><code>menuitemradio</code></dfn>
      * <dfn><code>navigation</code></dfn>
      * <dfn><code>note</code></dfn>
      * <dfn><code>option</code></dfn>
      * <dfn><code>presentation</code></dfn>
      * <dfn><code>progressbar</code></dfn>
      * <dfn><code>radio</code></dfn>
      * <dfn><code>region</code></dfn>
      * <dfn><code>row</code></dfn>
      * <dfn><code>rowgroup</code></dfn>
      * <dfn><code>rowheader</code></dfn>
      * <dfn><code>search</code></dfn>
      * <dfn><code>separator</code></dfn>
      * <dfn><code>slider</code></dfn>
      * <dfn><code>spinbutton</code></dfn>
      * <dfn><code>status</code></dfn>
      * <dfn><code>tab</code></dfn>
      * <dfn><code>tablist</code></dfn>
      * <dfn><code>textbox</code></dfn>
      * <dfn><code>toolbar</code></dfn>
      * <dfn><code>tree</code></dfn>
      * <dfn><code>treeitem</code></dfn>

      In addition, the following <dfn><code>aria-*</code></dfn> content attributes are defined in
      the ARIA specification: [[!WAI-ARIA]]

      * <dfn><code>aria-checked</code></dfn>
      * <dfn><code>aria-describedby</code></dfn>
      * <dfn><code>aria-disabled</code></dfn>
      * <dfn><code>aria-expanded</code></dfn>
      * <dfn><code>aria-hidden</code></dfn>
      * <dfn><code>aria-invalid</code></dfn>
      * <dfn><code>aria-label</code></dfn>
      * <dfn><code>aria-level</code></dfn>
      * <dfn><code>aria-multiline</code></dfn>
      * <dfn><code>aria-multiselectable</code></dfn>
      * <dfn><code>aria-owns</code></dfn>
      * <dfn><code>aria-readonly</code></dfn>
      * <dfn><code>aria-required</code></dfn>
      * <dfn><code>aria-selected</code></dfn>
      * <dfn><code>aria-sort</code></dfn>
      * <dfn><code>aria-valuemax</code></dfn>
      * <dfn><code>aria-valuemin</code></dfn>
      * <dfn><code>aria-valuenow</code></dfn>

  : Content Security Policy
  :: The following terms are defined in <cite>Content Security Policy</cite>: [[!CSP]]

      * <dfn>Content Security Policy</dfn>
      * <dfn>Content Security Policy directive</dfn>
      * The <dfn>Content Security Policy syntax</dfn>
      * <dfn>enforce the policy</dfn>
      * The <dfn><code>frame-ancestors</code> directive</dfn>
      * The <dfn>parse a serialized Content Security Policy</dfn> algorithm
      * The <dfn><code>report-uri</code> directive</dfn>
      * The <dfn><code>sandbox</code> directive</dfn>

  : Service Workers
  :: The following terms are defined in <cite>Service Workers</cite>: [[!SERVICE-WORKERS]]

      * <dfn>match service worker registration</dfn>

  This specification does not <em>require</em> support of any particular network protocol, style
  sheet language, scripting language, or any of the DOM specifications beyond those required in the
  list above. However, the language described by this specification is biased towards CSS as the
  styling language, JavaScript as the scripting language, and HTTP as the network protocol, and
  several features assume that those languages and protocols are in use.

  A user agent that implements the HTTP protocol must implement the Web Origin Concept
  specification and the HTTP State Management Mechanism specification (Cookies) as well. [[!HTTP11]]
  [[!ORIGIN]] [[!COOKIES]]

  <p class="note">
    This specification might have certain additional requirements on character encodings, image
    formats, audio formats, and video formats in the respective sections.
  </p>
</div>

<h4 id="extensibility">Extensibility</h4>

  Vendor-specific proprietary user agent extensions to this specification are strongly discouraged.
  Documents must not use such extensions, as doing so reduces interoperability and fragments the
  user base, allowing only users of specific user agents to access the content in question.

  <div class="impl">
    If such extensions are nonetheless needed, e.g. for experimental purposes, then vendors are
    strongly urged to use one of the following extension mechanisms:

    * For markup-level features that can be limited to the XML serialization and need not be
        supported in the HTML serialization, vendors should use the namespace mechanism to define
        custom namespaces in which the non-standard elements and attributes are supported.

    * For markup-level features that are intended for use with <a>the HTML syntax</a>,
        extensions should be limited to new attributes of the form
        "<code>x-<var>vendor</var>-<var>feature</var></code>", where <var>vendor</var> is a short
        string that identifies the vendor responsible for the extension, and <var>feature</var> is
        the name of the feature. New element names should not be created. Using attributes for such
        extensions exclusively allows extensions from multiple vendors to co-exist on the same
        element, which would not be possible with elements. Using the
        "<code>x-<var>vendor</var>-<var>feature</var></code>" form allows extensions to be made
        without risk of conflicting with future additions to the specification.

      <div class="example">
        For instance, a browser named "FerretBrowser" could use "ferret" as a vendor prefix, while a
        browser named "Mellblom Browser" could use "mb". If both of these browsers invented
        extensions that turned elements into scratch-and-sniff areas, an author experimenting with
        these features could write:

        <pre highlight="html">
          &lt;p>This smells of lemons!
          &lt;span x-ferret-smellovision x-ferret-smellcode="LEM01"
          x-mb-outputsmell x-mb-smell="lemon juice">&lt;/span>&lt;/p>
        </pre>
      </div>

    Attribute names beginning with the two characters "<code>x-</code>" are reserved for
    user agent use and are guaranteed to never be formally added to the HTML language. For
    flexibility, attributes names containing underscores (the U+005F LOW LINE character) are also
    reserved for experimental purposes and are guaranteed to never be formally added to the HTML
    language.

    <p class="note">Pages that use such attributes are by definition non-conforming.</p>

    For DOM extensions, e.g. new methods and IDL attributes, the new members should be prefixed by
    vendor-specific strings to prevent clashes with future versions of this specification.

    For events, experimental event types should be prefixed with vendor-specific strings.

    <div class="example">
      For example, if a user agent called "Pleasold" were to add an event to indicate when
      the user is going up in an elevator, it could use the prefix "<code>pleasold</code>" and
      thus name the event "<code>pleasoldgoingup</code>", possibly with an event handler attribute
      named "<code>onpleasoldgoingup</code>".</p>
    </div>

    All extensions must be defined so that the use of extensions neither contradicts nor causes the
    non-conformance of functionality defined in the specification.

    <div class="example">
      For example, while strongly discouraged from doing so, an implementation "Foo Browser" could
      add a new IDL attribute "<code>fooTypeTime</code>" to a control's DOM interface that returned
      the time it took the user to select the current value of a control (say). On the other hand,
      defining a new control that appears in a form's <code>elements</code> array would be in
      violation of the above requirement, as it would violate the definition of
      <code>elements</code> given in this specification.</p>
    </div>

    When adding new <a>reflecting</a> IDL attributes corresponding to content attributes of the form
    "<code>x-<var>vendor</var>-<var>feature</var></code>", the IDL attribute should be named
    "<code><var>vendor</var><var>Feature</var></code>" (i.e. the "<code>x</code>" is dropped from
    the IDL attribute's name).</p>
</div>

<hr />

  When vendor-neutral extensions to this specification are needed, either this specification can be
  updated accordingly, or an extension specification can be written that overrides the requirements
  in this specification. When someone applying this specification to their activities decides that
  they will recognize the requirements of such an extension specification, it becomes an
  <dfn>applicable specification</dfn> for the purposes of conformance requirements in this
  specification.

  <p class="note">
    Someone could write a specification that defines any arbitrary byte stream as conforming, and
    then claim that their random junk is conforming. However, that does not mean that their random
    junk actually is conforming for everyone's purposes: if someone else decides that that
    specification does not apply to their work, then they can quite legitimately say that the
    aforementioned random junk is just that, junk, and not conforming at all. As far as conformance
    goes, what matters in a particular community is what that community <em>agrees</em> is
    applicable.
  </p>

  <dfn>applicable specification</dfn>.

  The conformance terminology for documents depends on the nature of the changes introduced by such
  applicable specifications, and on the content and intended interpretation of the document.
  Applicable specifications MAY define new document content (e.g. a foobar element), MAY prohibit
  certain otherwise conforming content (e.g. prohibit use of &lt;table>s), or MAY change the
  semantics, DOM mappings, or other processing rules for content defined in this specification.
  Whether a document is or is not a <a>conforming HTML5 document</a> does not depend on the use of
  applicable specifications: if the syntax and semantics of a given <a>conforming HTML5 document</a>
  is unchanged by the use of applicable specification(s), then that document remains a
  <a>conforming HTML5 document</a>. If the semantics or processing of a given (otherwise conforming)
  document is changed by use of applicable specification(s), then it is not a
  <a>conforming HTML5 document</a>. For such cases, the applicable specifications SHOULD define
  conformance terminology.</p>

  <p class="note">
    As a suggested but not required convention, such specifications might define conformance
    terminology such as: "Conforming HTML5+XXX document", where XXX is a short name
    for the applicable specification. (Example: "Conforming HTML5+AutomotiveExtensions document").
  </p>

  <p class="note">a consequence of the rule given above is that certain syntactically correct HTML5
    documents may not be <a>conforming HTML5 documents</a> in the presence of applicable
    specifications. (Example: the applicable specification defines &lt;table> to be a piece of
    furniture &#8212; a document written to that specification and containing a &lt;table> element
    is NOT a <a>conforming HTML5 document</a>, even if the element happens to be syntactically
    correct HTML5.)
  </p>

<div class="impl">
  <hr />

  User agents must treat elements and attributes that they do not understand as semantically
  neutral; leaving them in the DOM (for DOM processors), and styling them according to CSS (for CSS
  processors), but not inferring any meaning from them.

  When support for a feature is disabled (e.g. as an emergency measure to mitigate a security
  problem, or to aid in development, or for performance reasons), user agents must act as if they
  had no support for the feature whatsoever, and as if the feature was not mentioned in this
  specification. For example, if a particular feature is accessed via an attribute in a Web IDL
  interface, the attribute itself would be omitted from the objects that implement that interface
  &mdash; leaving the attribute on the object but making it return null or throw an exception is
  insufficient.
</div>

<div class="impl">
  <h4 id="interactions-with-xpath-and-xslt">Interactions with XPath and XSLT</h4>

  Implementations of XPath 1.0 that operate on <a>HTML documents</a> parsed or created in the
  manners described in this specification (e.g. as part of the <code>document.evaluate()</code> API)
  must act as if the following edit was applied to the XPath 1.0 specification.

  First, remove this paragraph:

  <blockquote cite="http://www.w3.org/TR/1999/REC-xpath-19991116#node-tests">
    A <a>QName</a> in the node test is expanded into an <a>expanded-name</a> using the namespace
    declarations from the expression context. This is the same way expansion is done for element
    type names in start and end-tags except that the default namespace declared with
    <code>xmlns</code> is not used: if the <a>QName</a> does not have a prefix, then the namespace
    URI is null (this is the same way attribute names are expanded). It is an error if the
    <a>QName</a> has a prefix for which there is no namespace declaration in the expression context.
  </blockquote>

  Then, insert in its place the following:

  <blockquote cite="http://www.w3.org/Bugs/Public/show_bug.cgi?id=7059#c37">
    A QName in the node test is expanded into an expanded-name using the namespace declarations from
    the expression context. If the QName has a prefix, then there must be a namespace declaration
    for this prefix in the expression context, and the corresponding namespace URI is the one that
    is associated with this prefix. It is an error if the QName has a prefix for which there is no
    namespace declaration in the expression context.

    If the QName has no prefix and the principal node type of the axis is element, then the default
    element namespace is used. Otherwise if the QName has no prefix, the namespace URI is null. The
    default element namespace is a member of the context for the XPath expression. The value of the
    default element namespace when executing an XPath expression through the DOM3 XPath API is
    determined in the following way:

    1. If the context node is from an HTML DOM, the default element namespace is
        "http://www.w3.org/1999/xhtml".
    2. Otherwise, the default element namespace URI is null.

    <p class="note">
      This is equivalent to adding the default element namespace feature of XPath 2.0 to XPath 1.0,
      and using the HTML namespace as the default element namespace for HTML documents. It is
      motivated by the desire to have implementations be compatible with legacy HTML content while
      still supporting the changes that this specification introduces to HTML regarding the
      namespace used for HTML elements, and by the desire to use XPath 1.0 rather than XPath 2.0.
    </p>
  </blockquote>

  <p class="note">
    This change is a <a>willful violation</a> of the XPath 1.0 specification, motivated by
    desire to have implementations be compatible with legacy content while still supporting the
    changes that this specification introduces to HTML regarding which namespace is used for HTML
    elements. [[!XPATH]]
  </p>

  <hr />

  XSLT 1.0 processors outputting to a DOM when the output method is "html" (either explicitly or via
  the defaulting rule in XSLT 1.0) are affected as follows:

  If the transformation program outputs an element in no namespace, the processor must, prior to
  constructing the corresponding DOM element node, change the namespace of the element to the
  <a>HTML namespace</a>, <a>ASCII-lowercase</a> the element's local name, and <a>ASCII-lowercase</a>
  the names of any non-namespaced attributes on the element.

  <p class="note">
    This requirement is a <a>willful violation</a> of the XSLT 1.0 specification, required because
    this specification changes the namespaces and case-sensitivity rules of HTML in a manner that
    would otherwise be incompatible with DOM-based XSLT transformations. (Processors that serialize
    the output are unaffected.) [[!XSLT-19991116]]
  </p>

  <hr />

  This specification does not specify precisely how XSLT processing interacts with the
  <a>HTML parser</a> infrastructure (for example, whether an XSLT processor acts as if it puts any
  elements into a <a>stack of open elements</a>). However, XSLT processors must <a>stop parsing</a>
  if they successfully complete, and must set the <a>current document readiness</a> first to
  "<code>interactive</code>" and then to "<code>complete</code>" if they are aborted.

  <hr />

  This specification does not specify how XSLT interacts with the <a>navigation</a> algorithm, how
  it fits in with the <a>event loop</a>, nor how error pages are to be handled (e.g. whether XSLT
  errors are to replace an incremental XSLT output, or are rendered inline, etc).

  <p class="note">
    There are also additional non-normative comments regarding the interaction of XSLT and HTML
    <a>in the <code>script</code> element section</a>, and of XSLT, XPath, and HTML <a>in the
    <code>template</code> element section</a>.
  </p>
</div>

<h3 id="case-sensitivity-and-string-comparison">Case-sensitivity and string comparison</h3>

  Comparing two strings in a <dfn>case-sensitive</dfn> manner means comparing them exactly, code
  point for code point.

  Comparing two strings in an <dfn>ASCII case-insensitive</dfn> manner means comparing them exactly,
  code point for code point, except that the characters in the range U+0041 to U+005A (i.e. LATIN
  CAPITAL LETTER A to LATIN CAPITAL LETTER Z) and the corresponding characters in the range U+0061
  to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) are considered to also match.

  Comparing two strings in a <dfn>compatibility caseless</dfn> manner means using the Unicode
  <i>compatibility caseless match</i> operation to compare the two strings, with no
  language-specific tailoirings. [[!UNICODE]]

  Except where otherwise stated, string comparisons must be performed in a <a>case-sensitive</A>
  manner.

  <div class="impl">
    <dfn>Converting a string to ASCII uppercase</dfn> means replacing all characters in the range
    U+0061 to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) with the corresponding
    characters in the range U+0041 to U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z).

    <dfn>Converting a string to ASCII lowercase</dfn> means replacing all characters in the range
    U+0041 to U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) with the corresponding
    characters in the range U+0061 to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z).
  </div>

  A string <var>pattern</var> is a <dfn>prefix match</dfn> for a string <var>s</var> when
  <var>pattern</var> is not longer than <var>s</var> and truncating <var>s</var> to
  <var>pattern</var>'s length leaves the two strings as matches of each other.

<h3 id="common-microsyntaxes">Common microsyntaxes</h3>

  There are various places in HTML that accept particular data types, such as dates or numbers. This
  section describes what the conformance criteria for content in those formats is, and how to parse
  them.

  <div class="impl">
    <p class="note">
      Implementors are strongly urged to carefully examine any third-party libraries they might
      consider using to implement the parsing of syntaxes described below. For example, date
      libraries are likely to implement error handling behavior that differs from what is required
      in this specification, since error-handling behavior is often not defined in specifications
      that describe date syntaxes similar to those used in this specification, and thus
      implementations tend to vary greatly in how they handle errors.
    </p>
  </div>

<div class="impl">
  <h4 id="common-parser-idioms">Common parser idioms</h4>

  The <dfn>space characters</dfn>, for the purposes of this specification, are U+0020 SPACE, U+0009
  CHARACTER TABULATION (tab), U+000A LINE FEED (LF), U+000C FORM FEED (FF), and U+000D CARRIAGE
  RETURN (CR).

  The <dfn>White_Space characters</dfn> are those that have the Unicode property "White_Space" in
  the Unicode <code>PropList.txt</code> data file. [[!UNICODE]]

  <p class="note">
    This should not be confused with the "White_Space" value (abbreviated "WS") of the "Bidi_Class"
    property in the <code>Unicode.txt</code> data file.
  </p>

  The <dfn>control characters</dfn> are those whose Unicode "General_Category" property has the
  value "Cc" in the Unicode <code>UnicodeData.txt</code> data file. [[!UNICODE]]

  The <dfn>uppercase ASCII letters</dfn> are the characters in the range U+0041 LATIN CAPITAL LETTER
  A to U+005A LATIN CAPITAL LETTER Z.

  The <dfn>lowercase ASCII letters</dfn> are the characters in the range U+0061 LATIN SMALL LETTER A
  to U+007A LATIN SMALL LETTER Z.

  The <dfn>ASCII digits</dfn> are the characters in the range U+0030 DIGIT ZERO (0) to U+0039 DIGIT
  NINE (9).

  The <dfn>alphanumeric ASCII characters</dfn> are those that are either
  <a>uppercase ASCII letters</a>, <a>lowercase ASCII letters</a>, or <a>ASCII digits</a>.

  The <dfn>ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0) to U+0039
  DIGIT NINE (9), U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL LETTER F, and U+0061 LATIN
  SMALL LETTER A to U+0066 LATIN SMALL LETTER F.

  The <dfn>uppercase ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0)
  to U+0039 DIGIT NINE (9) and U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL LETTER F only.

  The <dfn>lowercase ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0)
  to U+0039 DIGIT NINE (9) and U+0061 LATIN SMALL LETTER A to U+0066 LATIN SMALL LETTER F only.
</div>

<div class="impl">
  Some of the micro-parsers described below follow the pattern of having an <var>input</var>
  variable that holds the string being parsed, and having a <var>position</var> variable pointing at
  the next character to parse in <var>input</var>.

  For parsers based on this pattern, a step that requires the user agent to <dfn>collect a sequence
  of characters</dfn> means that the following algorithm must be run, with <var>characters</var>
  being the set of characters that can be collected:

  1. Let <var>input</var> and <var>position</var> be the same variables as those of the same name in
      the algorithm that invoked these steps.
  2. Let <var>result</var> be the empty string.
  3. While <var>position</var> doesn't point past the end of <var>input</var> and the character at
      <var>position</var> is one of the <var>characters</var>, append that character to the end of
      <var>result</var> and advance <var>position</var> to the next character in <var>input</var>.
  4. Return <var>result</var>.

  The step <dfn>skip whitespace</dfn> means that the user agent must
  <a>collect a sequence of characters</a> that are <a>space characters</a>. The collected characters
  are not used.

  When a user agent is to <dfn>strip line breaks</dfn> from a string, the user agent must remove
  any U+000A LINE FEED (LF) and U+000D CARRIAGE RETURN (CR) characters from that string.

  When a user agent is to <dfn>strip leading and trailing whitespace</dfn> from a string, the
  user agent must remove all <a>space characters</a> that are at the start or end of the string.

  When a user agent is to <dfn>strip and collapse whitespace</dfn> in a string, it must replace any
  sequence of one or more consecutive <a>space characters</a> in that string with a single U+0020
  SPACE character, and then <a>strip leading and trailing whitespace</a> from that string.

  When a user agent has to <dfn>strictly split a string</dfn> on a particular delimiter character
  <var>delimiter</var>, it must use the following algorithm:

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially
      pointing at the start of the string.
  3. Let <var>tokens</var> be an ordered list of tokens, initially empty.
  4. While <var>position</var> is not past the end of <var>input</var>:
      1. <a>Collect a sequence of characters</a> that are not the <var>delimiter</var> character.
      2. Append the string collected in the previous step to <var>tokens</var>.
      3. Advance <var>position</var> to the next character in <var>input</var>.
  5. Return <var>tokens</var>.

  <p class="note">
    For the special cases of splitting a string <a>on spaces</a> and <a>on commas</a>, this
    algorithm does not apply (those algorithms also perform <a>whitespace trimming</a>).
  </p>
</div>

<h4 id="boolean-attributes">Boolean attributes</h4>

  A number of attributes are <dfn>boolean attributes</dfn>. The presence of a boolean attribute on
  an element represents the true value, and the absence of the attribute represents the false value.

  If the attribute is present, its value must either be the empty string or a value that is an
  <a>ASCII case-insensitive</a> match for the attribute's canonical name, with no leading or
  trailing whitespace.

  <p class="note">
    The values "true" and "false" are not allowed on boolean attributes. To represent a false value,
    the attribute has to be omitted altogether.
  </p>

  <div class="example">
    Here is an example of a checkbox that is checked and disabled. The <code>checked</code> and
    <code>disabled</code> attributes are the boolean attributes.

    <pre highlight="html">&lt;label>&lt;input type=checkbox checked name=cheese disabled> Cheese&lt;/label></pre>

    This could be equivalently written as this:

    <pre highlight="html">&lt;label>&lt;input type=checkbox checked=checked name=cheese disabled=disabled> Cheese&lt;/label></pre>

    You can also mix styles; the following is still equivalent:

    <pre highlight="html">&lt;label>&lt;input type='checkbox' checked name=cheese disabled=""> Cheese&lt;/label></pre>
  </div>

<h4 id="keywords-and-enumerated-attributes">Keywords and enumerated attributes</h4>

  Some attributes are defined as taking one of a finite set of keywords. Such attributes are called
  <dfn>enumerated attributes</dfn>. The keywords are each defined to map to a particular
  <em>state</em> (several keywords might map to the same state, in which case some of the keywords
  are synonyms of each other; additionally, some of the keywords can be said to be non-conforming,
  and are only in the specification for historical reasons). In addition, two default states can be
  given. The first is the <dfn><i>invalid value default</i></dfn>, the second is the
  <dfn><i>missing value default</i></dfn>.

  If an enumerated attribute is specified, the attribute's value must be an
  <a>ASCII case-insensitive</a> match for one of the given keywords that are not said to be
  non-conforming, with no leading or trailing whitespace.

  When the attribute is specified, if its value is an <a>ASCII case-insensitive</a> match for one of
  the given keywords then that keyword's state is the state that the attribute represents. If the
  attribute value matches none of the given keywords, but the attribute has an
  <i>invalid value default</i>, then the attribute represents that state. Otherwise, if the
  attribute value matches none of the keywords but there is a <i>missing value default</i> state
  defined, then <em>that</em> is the state represented by the attribute. Otherwise, there is no
  default, and invalid values mean that there is no state represented.

  When the attribute is <em>not</em> specified, if there is a <i>missing value default</i> state
  defined, then that is the state represented by the (missing) attribute. Otherwise, the absence of
  the attribute means that there is no state represented.

  <p class="note">The empty string can be a valid keyword.</p>

<h4 id="numbers">Numbers</h4>

<h5 id="signed-integers">Signed integers</h5>

  A string is a <dfn>valid integer</dfn> if it consists of one or more <a>ASCII digits</a>,
  optionally prefixed with a U+002D HYPHEN-MINUS character (-).

  A <a>valid integer</a> without a U+002D HYPHEN-MINUS (-) prefix represents the number that is
  represented in base ten by that string of digits. A <a>valid integer</a> <em>with</em> a U+002D
  HYPHEN-MINUS (-) prefix represents the number represented in base ten by the string of digits that
  follows the U+002D HYPHEN-MINUS, subtracted from zero.

  <div class="impl">
    The <dfn>rules for parsing integers</dfn> are as given in the following algorithm. When
    invoked, the steps must be followed in the order given, aborting at the first step that returns
    a value. This algorithm will return either an integer or an error.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the
        start of the string.
    3. Let <var>sign</var> have the value "positive".
    4. <a>Skip whitespace</a>.
    5. If <var>position</var> is past the end of <var>input</var>, return an error.
    6. If the character indicated by <var>position</var> (the first character) is a U+002D
        HYPHEN-MINUS character (-):
        1. Let <var>sign</var> be "negative".
        2. Advance <var>position</var> to the next character.
        3. If <var>position</var> is past the end of <var>input</var>, return an error.

        Otherwise, if the character indicated by <var>position</var> (the first character) is a
        U+002B PLUS SIGN character (+):

        1. Advance <var>position</var> to the next character. (The "<code>+</code>" is ignored, but
            it is not conforming.)
        2. If <var>position</var> is past the end of <var>input</var>, return an error.
    7. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then return
        an error.
    8. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
        resulting sequence as a base-ten integer. Let <var>value</var> be that integer.
    9. If <var>sign</var> is "positive", return <var>value</var>, otherwise return the result of
        subtracting <var>value</var> from zero.
  </div>

<h5 id="non-negative-integers">Non-negative integers</h5>

  A string is a <dfn>valid non-negative integer</dfn> if it consists of one or more
  <a>ASCII digits</a>.

  A <a>valid non-negative integer</a> represents the number that is represented in base ten by that
  string of digits.

  <div class="impl">
    The <dfn>rules for parsing non-negative integers</dfn> are as given in the following algorithm.
    When invoked, the steps must be followed in the order given, aborting at the first step that
    returns a value. This algorithm will return either zero, a positive integer, or an error.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>value</var> be the result of parsing <var>input</var> using the
        <a>rules for parsing integers</a>.
    3. If <var>value</var> is an error, return an error.
    4. If <var>value</var> is less than zero, return an error.
    5. Return <var>value</var>.
  </div>

<h5 id="floating-point-numbers">Floating-point numbers</h5>

  A string is a <dfn>valid floating-point number</dfn> if it consists of:

  1. Optionally, a U+002D HYPHEN-MINUS character (-).
  2. One or both of the following, in the given order:
      1. A series of one or more <a>ASCII digits</a>.
      2. Both of the following, in the given order:
          1. A single U+002E FULL STOP character (.).
          2. A series of one or more <a>ASCII digits</a>.
  3. Optionally:
      1. Either a U+0065 LATIN SMALL LETTER E character (e) or a U+0045 LATIN CAPITAL LETTER E
          character (E).
      2. Optionally, a U+002D HYPHEN-MINUS character (-) or U+002B PLUS SIGN character (+).
      3. A series of one or more <a>ASCII digits</a>.

  A <a>valid floating-point number</a> represents the number obtained by multiplying the significand
  by ten raised to the power of the exponent, where the significand is the first number, interpreted
  as base ten (including the decimal point and the number after the decimal point, if any, and
  interpreting the significand as a negative number if the whole string starts with a U+002D
  HYPHEN-MINUS character (-) and the number is not zero), and where the exponent is the number after
  the E, if any (interpreted as a negative number if there is a U+002D HYPHEN-MINUS character (-)
  between the E and the number and the number is not zero, or else ignoring a U+002B PLUS SIGN
  character (+) between the E and the number if there is one). If there is no E, then the exponent
  is treated as zero.

  <p class="note">
    The Infinity and Not-a-Number (NaN) values are not <a>valid floating-point numbers</a>.
  </p>

  <div class="impl">
    The <dfn>best representation of the number <var>n</var> as a floating-point number</dfn> is the
    string obtained from applying the JavaScript operator ToString to <var>n</var>. The JavaScript
    operator ToString is not uniquely determined. When there are multiple possible strings that
    could be obtained from the JavaScript operator ToString for a particular value, the user agent
    must always return the same string for that value (though it may differ from the value used by
    other user agents).

    The <dfn>rules for parsing floating-point number values</dfn> are as given in the following
    algorithm. This algorithm must be aborted at the first step that returns something. This
    algorithm will return either a number or an error.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. Let <var>value</var> have the value 1.
    4. Let <var>divisor</var> have the value 1.
    5. Let <var>exponent</var> have the value 1.
    6. <a>Skip whitespace</a>.
    7. If <var>position</var> is past the end of <var>input</var>, return an error.
    8. If the character indicated by <var>position</var> is a U+002D HYPHEN-MINUS character (-):
        1. Change <var>value</var> and <var>divisor</var> to -1.
        2. Advance <var>position</var> to the next character.
        3. If <var>position</var> is past the end of <var>input</var>, return an error.

        Otherwise, if the character indicated by <var>position</var> (the first character) is a
        U+002B PLUS SIGN character (+):

        1. Advance <var>position</var> to the next character. (The "<code>+</code>" is ignored, but
            it is not conforming.)
        2. If <var>position</var> is past the end of <var>input</var>, return an error.

    9. If the character indicated by <var>position</var> is a U+002E FULL STOP (.), and that is not
        the last character in <var>input</var>, and the character after the character indicated by
        <var>position</var> is an <a>ASCII digit</a>, then set
        <var>value</var> to zero and jump to the step labeled <i>fraction</i>.
    10. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then return
        an error.
    11. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
        resulting sequence as a base-ten integer. Multiply <var>value</var> by that integer.
    12. If <var>position</var> is past the end of <var>input</var>, jump to the step labeled
        <i>conversion</i>.
    13. <i>Fraction</i>: If the character indicated by <var>position</var> is a U+002E FULL STOP
        (.), run these substeps:
        1. Advance <var>position</var> to the next character.
        2. If <var>position</var> is past the end of <var>input</var>, or if the character indicated
            by <var>position</var> is not an <a>ASCII digit</a>, U+0065 LATIN SMALL LETTER E (e), or
            U+0045 LATIN CAPITAL LETTER E (E), then jump to the step labeled <i>conversion</i>.
        3. If the character indicated by <var>position</var> is a U+0065 LATIN SMALL LETTER E
            character (e) or a U+0045 LATIN CAPITAL LETTER E character (E), skip the remainder of
            these substeps.
        4. <i>Fraction loop</i>: Multiply <var>divisor</var> by ten.
        5. Add the value of the character indicated by <var>position</var>, interpreted as a
            base-ten digit (0..9) and divided by <var>divisor</var>, to <var>value</var>.
        6. Advance <var>position</var> to the next character.
        7. If <var>position</var> is past the end of <var>input</var>, then jump to the step labeled
            <i>conversion</i>.
        8. If the character indicated by <var>position</var> is an <a>ASCII digit</a>, jump back to
            the step labeled <i>fraction loop</i> in these substeps.
    14. If the character indicated by <var>position</var> is a U+0065 LATIN SMALL LETTER E character
        (e) or a U+0045 LATIN CAPITAL LETTER E character (E), run these substeps:
        1. Advance <var>position</var> to the next character.
        2. If <var>position</var> is past the end of <var>input</var>, then jump to the step labeled
            <i>conversion</i>.
        3. If the character indicated by <var>position</var> is a U+002D HYPHEN-MINUS character (-):
            1. Change <var>exponent</var> to -1.
            2. Advance <var>position</var> to the next character.
            3. If <var>position</var> is past the end of <var>input</var>, then jump to the step
                labeled <i>conversion</i>.

        Otherwise, if the character indicated by <var>position</var> is a U+002B PLUS SIGN character
        (+):

            1. Advance <var>position</var> to the next character.
            2. If <var>position</var> is past the end of <var>input</var>, then jump to the step
                labeled <i>conversion</i>.
        4. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then jump
            to the step labeled <i>conversion</i>.
        5. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
            resulting sequence as a base-ten integer. Multiply <var>exponent</var> by that integer.
        6. Multiply <var>value</var> by ten raised to the <var>exponent</var>th power.
    15. <i>Conversion</i>: Let <var>S</var> be the set of finite IEEE 754 double-precision
        floating-point values except -0, but with two special values added: 2<sup>1024</sup>
        and -2<sup>1024</sup>.
    16. Let <var>rounded-value</var> be the number in <var>S</var> that is closest to
        <var>value</var>, selecting the number with an even significand if there are two equally
        close values. (The two special values 2<sup>1024</sup> and -2<sup>1024</sup> are
        considered to have even significands for this purpose.)
    17. If <var>rounded-value</var> is 2<sup>1024</sup> or -2<sup>1024</sup>, return an
        error.
    18. Return <var>rounded-value</var>.
  </div>


  <div class="impl">
    <h5 id="percentages-and-dimensions">Percentages and lengths</h5>

    The <dfn>rules for parsing dimension values</dfn> are as given in the following algorithm. When
    invoked, the steps must be followed in the order given, aborting at the first step that returns
    a value. This algorithm will return either a number greater than or equal to 0.0, or an error;
    if a number is returned, then it is further categorized as either a percentage or a length.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Skip whitespace</a>.
    4. If <var>position</var> is past the end of <var>input</var>, return an error.
    5. If the character indicated by <var>position</var> is a U+002B PLUS SIGN character (+),
        advance <var>position</var> to the next character.
    6. If <var>position</var> is past the end of <var>input</var>, return an error.
    7. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then return
        an error.
    8. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
        resulting sequence as a base-ten integer. Let <var>value</var> be that number.
    9. If <var>position</var> is past the end of <var>input</var>, return <var>value</var> as a
        length.
    10. If the character indicated by <var>position</var> is a U+002E FULL STOP character (.):
        1. Advance <var>position</var> to the next character.
        2. If <var>position</var> is past the end of <var>input</var>, or if the character indicated
            by <var>position</var> is not an <a>ASCII digit</a>, then return <var>value</var> as a
            length.
        3. Let <var>divisor</var> have the value 1.
        4. <i>Fraction loop</i>: Multiply <var>divisor</var> by ten.
        5. Add the value of the character indicated by <var>position</var>, interpreted as a
            base-ten digit (0..9) and divided by <var>divisor</var>, to <var>value</var>.
        6. Advance <var>position</var> to the next character.
        7. If <var>position</var> is past the end of <var>input</var>, then return <var>value</var>
            as a length.
        8. If the character indicated by <var>position</var> is an <a>ASCII digit</a>, return to the
            step labeled <i>fraction loop</i> in these substeps.
    11. If <var>position</var> is past the end of <var>input</var>, return <var>value</var> as a
        length.
    12. If the character indicated by <var>position</var> is a U+0025 PERCENT SIGN character (%),
        return <var>value</var> as a percentage.
    13. Return <var>value</var> as a length.

    <h5 id="non-zero-percentages-and-lengths">Non-zero percentages and lengths</h5>

    The <dfn>rules for parsing non-zero dimension values</dfn> are as given in the following
    algorithm. When invoked, the steps must be followed in the order given, aborting at the first
    step that returns a value. This algorithm will return either a number greater than 0.0, or an
    error; if a number is returned, then it is further categorized as either a percentage or a
    length.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>value</var> be the result of parsing <var>input</var> using the
        <a>rules for parsing dimension values</a>.
    3. If <var>value</var> is an error, return an error.
    4. If <var>value</var> is zero, return an error.
    5. If <var>value</var> is a percentage, return <var>value</var> as a percentage.
    6. Return <var>value</var> as a length.
  </div>

<h5 id="lists-of-integers">Lists of integers</h5>

  A <dfn>valid list of integers</dfn> is a number of <a>valid integers</a> separated by U+002C COMMA
  characters, with no other characters (e.g. no <a>space characters</a>). In addition, there might
  be restrictions on the number of integers that can be given, or on the range of values allowed.

  <div class="impl">
    The <dfn>rules for parsing a list of integers</dfn> are as follows:

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. Let <var>numbers</var> be an initially empty list of integers. This list will be the
        result of this algorithm.
    4. If there is a character in the string <var>input</var> at position <var>position</var>, and
        it is either a U+0020 SPACE, U+002C COMMA, or U+003B SEMICOLON character, then advance
        <var>position</var> to the next character in <var>input</var>, or to beyond the end of the
        string if there are no more characters.
    5. If <var>position</var> points to beyond the end of <var>input</var>, return
        <var>numbers</var> and abort.
    6. If the character in the string <var>input</var> at position <var>position</var> is a U+0020
        SPACE, U+002C COMMA, or U+003B SEMICOLON character, then return to step 4.
    7. Let <var>negated</var> be false.
    8. Let <var>value</var> be 0.
    9. Let <var>started</var> be false. This variable is set to true when the parser sees a number
        or a U+002D HYPHEN-MINUS character (-).
    10. Let <var>got number</var> be false. This variable is set to true when the parser sees a
        number.
    11. Let <var>finished</var> be false. This variable is set to true to switch parser into a mode
        where it ignores characters until the next separator.
    12. Let <var>bogus</var> be false.
    13. <i>Parser</i>: If the character in the string <var>input</var> at position
        <var>position</var> is:
        <dl class="switch">
          <dt>A U+002D HYPHEN-MINUS character</dt>
          <dd>
            Follow these substeps:
            1. If <var>got number</var> is true, let <var>finished</var> be true.
            2. If <var>finished</var> is true, skip to the next step in the overall set of steps.
            3. If <var>started</var> is true, let <var>negated</var> be false.
            4. Otherwise, if <var>started</var> is false and if <var>bogus</var> is false, let
                <var>negated</var> be true.
            5. Let <var>started</var> be true.
          </dd>

          <dt>An <a>ASCII digit</a></dt>
          <dd>
            Follow these substeps:
            1. If <var>finished</var> is true, skip to the next step in the overall set of steps.
            2. Multiply <var>value</var> by ten.
            3. Add the value of the digit, interpreted in base ten, to <var>value</var>.
            4. Let <var>started</var> be true.
            5. Let <var>got number</var> be true.
          </dd>

          <dt>A U+0020 SPACE character</dt>
          <dt>A U+002C COMMA character</dt>
          <dt>A U+003B SEMICOLON character</dt>
          <dd>
            Follow these substeps:
            1. If <var>got number</var> is false, return the <var>numbers</var> list and abort. This
                happens if an entry in the list has no digits, as in "<code>1,2,x,4</code>".
            2. If <var>negated</var> is true, then negate <var>value</var>.
            3. Append <var>value</var> to the <var>numbers</var> list.
            4. Jump to step 4 in the overall set of steps.
          </dd>

          <dt>
            A character in the range U+0001 to U+001F, U+0021 to U+002B, U+002D to U+002F, U+003A,
            U+003C to U+0040, U+005B to U+0060, U+007b to U+007F (i.e. any other non-alphabetic
            ASCII character)
          </dt>
          <dd>
            Follow these substeps:
            1. If <var>got number</var> is true, let <var>finished</var> be true.
            2. If <var>finished</var> is true, skip to the next step in the overall set of steps.
            3. Let <var>negated</var> be false.
          </dd>

          <dt>Any other character</dt>
          <dd>
            Follow these substeps:
            1. If <var>finished</var> is true, skip to the next step in the overall set of steps.
            2. Let <var>negated</var> be false.
            3. Let <var>bogus</var> be true.
            4. If <var>started</var> is true, then return the <var>numbers</var> list, and abort.
                (The value in <var>value</var> is not appended to the list first; it is dropped.)
          </dd>
        </dl>
    14. Advance <var>position</var> to the next character in <var>input</var>, or to beyond the end
        of the string if there are no more characters.</p>
    15. If <var>position</var> points to a character (and not to beyond the end of
        <var>input</var>), jump to the big <i>Parser</i> step above.
    16. If <var>negated</var> is true, then negate <var>value</var>.
    17. If <var>got number</var> is true, then append <var>value</var> to the <var>numbers</var>
        list.
    18. Return the <var>numbers</var> list and abort.
  </div>

  <div class="impl">
    <h5 id="lists-of-dimensions">Lists of dimensions</h5>

    The <dfn>rules for parsing a list of dimensions</dfn> are as follows. These rules return a list
    of zero or more pairs consisting of a number and a unit, the unit being one of
    <i>percentage</i>, <i>relative</i>, and <i>absolute</i>.</p>

    1. If the last character in <var>raw input</var> is a U+002C COMMA character (,), then remove
        that character from <var>raw input</var>.
    2. <a>Split the string <var>raw input</var> on commas</a>. Let <var>raw tokens</var> be the
        resulting list of tokens.
    3. Let <var>result</var> be an empty list of number/unit pairs.
    4. For each token in <var>raw tokens</var>, run the following substeps:
        1. Let <var>input</var> be the token.
        2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the
            start of the string.
        3. Let <var>value</var> be the number 0.
        4. Let <var>unit</var> be <i>absolute</i>.
        5. If the character at <var>position</var> is an <a>ASCII digit</a>, <a>collect a sequence
            of characters</a> that are <a>ASCII digits</a>, interpret the resulting sequence as an
            integer in base ten, and increment <var>value</var> by that integer.
        6. If the character at <var>position</var> is a U+002E FULL STOP character (.), run these
            substeps:
            1. <a>Collect a sequence of characters</a> consisting of <a>space characters</a> and
                <a>ASCII digits</a>. Let <var>s</var> be the resulting sequence.
            2. Remove all <a>space characters</a> in <var>s</var>.
            3. If <var>s</var> is not the empty string, run these subsubsteps:
                1. Let <var>length</var> be the number of characters in <var>s</var> (after the
                    spaces were removed).
                2. Let <var>fraction</var> be the result of interpreting <var>s</var> as a base-ten
                    integer, and then dividing that number by <a>10<sup><var>length</var></sup></a>.
                3. Increment <var>value</var> by <var>fraction</var>.
        7. <a>Skip whitespace</a>.
        8. If the character at <var>position</var> is a U+0025 PERCENT SIGN character (%), then set
            <var>unit</var> to <i>percentage</i>.

        Otherwise, if the character at <var>position</var> is a U+002A ASTERISK character
        (*), then set <var>unit</var> to <i>relative</i>.

        9. Add an entry to <var>result</var> consisting of the number given by <var>value</var> and
            the unit given by <var>unit</var>.
    5. Return the list <var>result</var>.
  </div>

<h4 id="dates-and-times">Dates and times</h4>

  In the algorithms below, the
  <dfn>number of days in month <var>month</var> of year <var>year</var></dfn> is: <em>31</em> if
  <var>month</var> is 1, 3, 5, 7, 8, 10, or 12; <em>30</em> if <var>month</var> is 4, 6, 9, or 11;
  <em>29</em> if <var>month</var> is 2 and <var>year</var> is a number divisible by 400, or if
  <var>year</var> is a number divisible by 4 but not by 100; and <em>28</em> otherwise. This takes
  into account leap years in the Gregorian calendar. [[!GREGORIAN]]

  When <a>ASCII digits</a> are used in the date and time syntaxes defined in this section, they
  express numbers in base ten.</p>

  <div class="impl">
    <p class="note">
      While the formats described here are intended to be subsets of the corresponding ISO8601
      formats, this specification defines parsing rules in much more detail than ISO8601.
      Implementors are therefore encouraged to carefully examine any date parsing libraries before
      using them to implement the parsing rules described below; ISO8601 libraries might not parse
      dates and times in exactly the same manner. [[!ISO8601]]
    </p>
  </div>

  Where this specification refers to the <dfn>proleptic Gregorian calendar</dfn>, it means the
  modern Gregorian calendar, extrapolated backwards to year 1. A date in the
  <a>proleptic Gregorian calendar</a>, sometimes explicitly referred to as a
  <dfn>proleptic-Gregorian date</dfn>, is one that is described using that calendar even if that
  calendar was not in use at the time (or place) in question. [[!GREGORIAN]]

  <p class="note">
    The use of the Gregorian calendar as the wire format in this specification is an arbitrary
    choice resulting from the cultural biases of those involved in the decision. See also the
    section discussing <a>date, time, and number formats</a> in forms <span class="impl">(for
    authors), <a>implemention notes regarding localization of form controls</a>,</span> and the
    <code>time</code> element.
  </p>

<h5 id="months">Months</h5>

  A <dfn>month</dfn> consists of a specific <a>proleptic-Gregorian date</a> with no time-zone
  information and no date information beyond a year and a month. [[!GREGORIAN]]

  A string is a <dfn>valid month string</dfn> representing a year <var>year</var> and month
  <var>month</var> if it consists of the following components in the given order:

  1. Four or more <a>ASCII digits</a>, representing <var>year</var>, where
      <var>year</var>&nbsp;&gt;&nbsp;0
  2. A U+002D HYPHEN-MINUS character (-)
  3. Two <a>ASCII digits</a>, representing the month <var>month</var>, in the range
      1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12

  <div class="impl">
    The rules to <dfn>parse a month string</dfn> are as follows. This will return either a year and
    month, or nothing. If at any point the algorithm says that it "fails", this means that it is
    aborted at that point and returns nothing.</p>

    1. Let <var>input</var> be the string being parsed.</p>
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a month component</a> to obtain <var>year</var> and <var>month</var>. If this
        returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Return <var>year</var> and <var>month</var>.

    The rules to <dfn>parse a month component</dfn>, given an <var>input</var> string and a
    <var>position</var>, are as follows. This will return either a year and a month, or nothing. If
    at any point the algorithm says that it "fails", this means that it is aborted at that point and
    returns nothing.

    1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not at least four characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>year</var>.
    2. If <var>year</var> is not a number greater than zero, then fail.
    3. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
        <var>position</var> forwards one character.
    4. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>month</var>.
    5. If <var>month</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12, then fail.
    6. Return <var>year</var> and <var>month</var>.
  </div>

<h5 id="dates">Dates</h5>

  A <dfn>date</dfn> consists of a specific <a>proleptic-Gregorian date</a> with no time-zone
  information, consisting of a year, a month, and a day. [[!GREGORIAN]]

  A string is a <dfn>valid date string</dfn> representing a year <var>year</var>, month
  <var>month</var>, and day <var>day</var> if it consists of the following components in the given
  order:

  1. A <a>valid month string</a>, representing <var>year</var> and <var>month</var>
  2. A U+002D HYPHEN-MINUS character (-)
  3. Two <a>ASCII digits</a>, representing <var>day</var>, in the range
      1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var> where <var>maxday</var> is
      the <a>number of days in the month <var>month</var> and year <var>year</var></a>

  <div class="impl">
    The rules to <dfn>parse a date string</dfn> are as follows. This will return either a date, or
    nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
    that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.</p>
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and
        <var>day</var>. If this returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Let <var>date</var> be the date with year <var>year</var>, month <var>month</var>, and day
        <var>day</var>.
    6. Return <var>date</var>.

    The rules to <dfn>parse a date component</dfn>, given an <var>input</var> string and a
    <var>position</var>, are as follows. This will return either a year, a month, and a day, or
    nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
    that point and returns nothing.

    1. <a>Parse a month component</a> to obtain <var>year</var> and <var>month</var>. If this
        returns nothing, then fail.
    2. Let <var>maxday</var> be the
        <a>number of days in month <var>month</var> of year <var>year</var></a>.
    3. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
        <var>position</var> forwards one character.
    4. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>day</var>.
    5. If <var>day</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var>, then fail.
    6. Return <var>year</var>, <var>month</var>, and <var>day</var>.
  </div>

<h5 id="yearless-dates">Yearless dates</h5>

  A <dfn>yearless date</dfn> consists of a Gregorian month and a
  day within that month, but with no associated year. [[!GREGORIAN]]

  A string is a <dfn>valid yearless date string</dfn> representing a month <var>month</var> and a
  day <var>day</var> if it consists of the following components in the given order:

  1. Optionally, two U+002D HYPHEN-MINUS characters (-)
  2. Two <a>ASCII digits</a>, representing the month <var>month</var>, in the range
      1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12
  3. A U+002D HYPHEN-MINUS character (-)
  4. Two <a>ASCII digits</a>, representing <var>day</var>, in the range
      1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var> where <var>maxday</var> is
      the <a>number of days</a> in the month <var>month</var> and any arbitrary leap year (e.g. 4 or
      2000)

  <p class="note">
    In other words, if the <var>month</var> is "<code>02</code>", meaning February, then the day can
    be 29, as if the year was a leap year.
  </p>

  <div class="impl">
    The rules to <dfn>parse a yearless date string</dfn> are as follows. This will return either a
    month and a day, or nothing. If at any point the algorithm says that it "fails", this means that
    it is aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a yearless date component</a> to obtain <var>month</var> and <var>day</var>. If this
        returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Return <var>month</var> and <var>day</var>.

    The rules to <dfn>parse a yearless date component</dfn>, given an <var>input</var> string and a
    <var>position</var>, are as follows. This will return either a month and a day, or nothing. If
    at any point the algorithm says that it "fails", this means that it is aborted at that point and
    returns nothing.

    1. <a>Collect a sequence of characters</a> that are U+002D HYPHEN-MINUS characters (-). If the
        collected sequence is not exactly zero or two characters long, then fail.
    2. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>month</var>.
    3. If <var>month</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12, then fail.
    4. Let <var>maxday</var> be the <a>number of days</a> in month <var>month</var> of any arbitrary
        leap year (e.g. 4 or 2000).
    5. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
        <var>position</var> forwards one character.
    6. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>day</var>.
    7. If <var>day</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var>, then fail.
    8. Return <var>month</var> and <var>day</var>.
  </div>

<h5 id="times">Times</h5>

  A <dfn>time</dfn> consists of a specific time with no time-zone information, consisting of an
  hour, a minute, a second, and a fraction of a second.

  A string is a <dfn>valid time string</dfn> representing an hour <var>hour</var>, a minute
  <var>minute</var>, and a second <var>second</var> if it consists of the following components in
  the given order:

  1. Two <a>ASCII digits</a>, representing <var>hour</var>, in the range
      0&nbsp;&le;&nbsp;<var>hour</var>&nbsp;&le;&nbsp;23
  2. A U+003A COLON character (:)
  3. Two <a>ASCII digits</a>, representing <var>minute</var>, in the range
      0&nbsp;&le;&nbsp;<var>minute</var>&nbsp;&le;&nbsp;59
  4. If <var>second</var> is non-zero, or optionally if <var>second</var> is zero:
      1. A U+003A COLON character (:)
      2. Two <a>ASCII digits</a>, representing the integer part of <var>second</var>, in the
          range 0&nbsp;&le;&nbsp;<var>s</var>&nbsp;&le;&nbsp;59
      3. If <var>second</var> is not an integer, or optionally if <var>second</var> is an integer:
          1. A 002E FULL STOP character (.)
          2. One, two, or three <a>ASCII digits</a>, representing the fractional part of
              <var>second</var>

  <p class="note">
    The <var>second</var> component cannot be 60 or 61; leap seconds cannot be represented.
  </p>

  <div class="impl">
    The rules to <dfn>parse a time string</dfn> are as follows. This will return either a time, or
    nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
    that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a time component</a> to obtain <var>hour</var>, <var>minute</var>, and
        <var>second</var>. If this returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Let <var>time</var> be the time with hour <var>hour</var>, minute <var>minute</var>, and
        second <var>second</var>.
    6. Return <var>time</var>.

    The rules to <dfn>parse a time component</dfn>, given an <var>input</var> string and a
    <var>position</var>, are as follows. This will return either an hour, a minute, and a second, or
    nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
    that point and returns nothing.

    1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the
        collected sequence is not exactly two characters long, then fail. Otherwise, interpret the
        resulting sequence as a base-ten integer. Let that number be the <var>hour</var>.
    2. If <var>hour</var> is not a number in the range
        0&nbsp;&le;&nbsp;<var>hour</var>&nbsp;&le;&nbsp;23, then fail.
    3. If <var>position</var> is beyond the end of <var>input</var> or if the
        character at <var>position</var> is not a U+003A COLON character, then fail. Otherwise,
        move <var>position</var> forwards one character.
    4. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>minute</var>.
    5. If <var>minute</var> is not a number in the range
        0&nbsp;&le;&nbsp;<var>minute</var>&nbsp;&le;&nbsp;59, then fail.
    6. Let <var>second</var> be a string with the value "0".
    7. If <var>position</var> is not beyond the end of <var>input</var> and the character at
        <var>position</var> is a U+003A COLON, then run these substeps:
        1. Advance <var>position</var> to the next character in <var>input</var>.
        2. If <var>position</var> is beyond the end of <var>input</var>, or at the last character in
            <var>input</var>, or if the next <em>two</em> characters in <var>input</var> starting at
            <var>position</var> are not both <a>ASCII digits</a>, then fail.
        3. <a>Collect a sequence of characters</a> that are either <a>ASCII digits</a> or U+002E
            FULL STOP characters. If the collected sequence is three characters long, or if it is
            longer than three characters long and the third character is not a U+002E FULL STOP
            character, or if it has more than one U+002E FULL STOP character, then fail. Otherwise,
            let the collected string be <var>second</var> instead of its previous value.

    8. Interpret <var>second</var> as a base-ten number (possibly with a fractional part). Let
        <var>second</var> be that number instead of the string version.
    9. If <var>second</var> is not a number in the range
        0&nbsp;&le;&nbsp;<var>second</var>&nbsp;&lt;&nbsp;60, then fail.
    10. Return <var>hour</var>, <var>minute</var>, and <var>second</var>.
  </div>

<h5 id="floating-dates-and-times">Floating dates and times</h5>

  A <dfn>floating date and time</dfn> consists of a specific <a>proleptic-Gregorian date</a>,
  consisting of a year, a month, and a day, and a time, consisting of an hour, a minute, a second,
  and a fraction of a second, but expressed without a time zone. [[!GREGORIAN]]

  A string is a <dfn>valid floating date and time string</dfn> representing a date and time if it
  consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date
  2. A U+0054 LATIN CAPITAL LETTER T character (T) or a U+0020 SPACE character
  3. A <a>valid time string</a> representing the time

  A string is a <dfn>valid normalized floating date and time string</dfn> representing a date and
  time if it consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date
  2. A U+0054 LATIN CAPITAL LETTER T character (T)
  3. A <a>valid time string</a> representing the time, expressed as the shortest possible string for
      the given time (e.g. omitting the seconds component entirely if the given time is zero seconds
      past the minute)

  <div class="impl">
    The rules to <dfn>parse a floating date and time string</dfn> are as follows. This will return
    either a date and time, or nothing. If at any point the algorithm says that it "fails", this
    means that it is aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and
        <var>day</var>. If this returns nothing, then fail.
    4. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is neither a U+0054 LATIN CAPITAL LETTER T character (T) nor a U+0020
        SPACE character, then fail. Otherwise, move <var>position</var> forwards one character.
    5. <a>Parse a time component</a> to obtain <var>hour</var>, <var>minute</var>, and
        <var>second</var>. If this returns nothing, then fail.
    6. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    7. Let <var>date</var> be the date with year <var>year</var>, month <var>month</var>, and day
        <var>day</var>.
    8. Let <var>time</var> be the time with hour <var>hour</var>, minute <var>minute</var>, and
        second <var>second</var>.
    9. Return <var>date</var> and <var>time</var>.
  </div>

<h5 id="time-zones">Time zones</h5>

  A <dfn>time-zone offset</dfn> consists of a signed number of hours and minutes.

  A string is a <dfn>valid time-zone offset string</dfn> representing a time-zone offset if it
  consists of either:

  * A U+005A LATIN CAPITAL LETTER Z character (Z), allowed only if the time zone is UTC
  * Or, the following components, in the given order:
    1. Either a U+002B PLUS SIGN character (+) or, if the time-zone offset is not zero, a U+002D
        HYPHEN-MINUS character (-), representing the sign of the time-zone offset
    2. Two <a>ASCII digits</a>, representing the hours component <var>hour</var> of the
        time-zone offset, in the range 0&nbsp;&le;&nbsp;<var>hour</var>&nbsp;&le;&nbsp;23
    3. Optionally, a U+003A COLON character (:)
    4. Two <a>ASCII digits</a>, representing the minutes component <var>minute</var> of the
        time-zone offset, in the range 0&nbsp;&le;&nbsp;<var>minute</var>&nbsp;&le;&nbsp;59

  <p class="note">
    This format allows for time-zone offsets from -23:59 to +23:59. In practice, however, right now
    the range of offsets of actual time zones is -12:00 to +14:00, and the minutes component of
    offsets of actual time zones is always either 00, 30, or 45. There is no guarantee that this
    will remain so forever, however; time zones are changed by countries at will and do not follow a
    standard.
  </p>

  <p class="note">
    See also the usage notes and examples in the <a>global date and time</a> section below for
    details on using time-zone offsets with historical times that predate the formation of formal
    time zones.
  </p>

  <div class="impl">
    The rules to <dfn>parse a time-zone offset string</dfn> are as follows. This will return either
    a time-zone offset, or nothing. If at any point the algorithm says that it "fails", this means
    that it is aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a time-zone offset component</a> to obtain <var>timezone<sub>hours</sub></var> and
        <var>timezone<sub>minutes</sub></var>. If this returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Return the time-zone offset that is <var>timezone<sub>hours</sub></var> hours and
        <var>timezone<sub>minutes</sub></var> minutes from UTC.

    The rules to <dfn>parse a time-zone offset component</dfn>, given an <var>input</var> string and
    a <var>position</var>, are as follows. This will return either time-zone hours and time-zone
    minutes, or nothing. If at any point the algorithm says that it "fails", this means that it is
    aborted at that point and returns nothing.

    1. If the character at <var>position</var> is a U+005A LATIN CAPITAL LETTER Z character (Z),
        then:
        1. Let <var>timezone<sub>hours</sub></var> be 0.
        2. Let <var>timezone<sub>minutes</sub></var> be 0.
        3. Advance <var>position</var> to the next character in <var>input</var>.

        Otherwise, if the character at <var>position</var> is either a U+002B PLUS SIGN (+) or a
        U+002D HYPHEN-MINUS (-), then:

        1. If the character at <var>position</var> is a U+002B PLUS SIGN (+), let <var>sign</var> be
            "positive". Otherwise, it's a U+002D HYPHEN-MINUS (-); let <var>sign</var> be
            "negative".
        2. Advance <var>position</var> to the next character in <var>input</var>.
        3. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. Let <var>s</var> be
            the collected sequence.
        4. If <var>s</var> is exactly two characters long, then run these substeps:
            1. Interpret <var>s</var> as a base-ten integer. Let that number be the
                <var>timezone<sub>hours</sub></var>.
            2. If <var>position</var> is beyond the end of <var>input</var> or if the character at
                <var>position</var> is not a U+003A COLON character, then fail. Otherwise, move
                <var>position</var> forwards one character.
            3. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the
                collected sequence is not exactly two characters long, then fail. Otherwise,
                interpret the resulting sequence as a base-ten integer. Let that number be the
                <var>timezone<sub>minutes</sub></var>.

            If <var>s</var> is exactly four characters long, then run these substeps:

            1. Interpret the first two characters of <var>s</var> as a base-ten integer. Let that
                number be the <var>timezone<sub>hours</sub></var>.
            2. Interpret the last two characters of <var>s</var> as a base-ten integer. Let that
                number be the <var>timezone<sub>minutes</sub></var>.

            Otherwise, fail.</p>

        5. If <var>timezone<sub>hours</sub></var> is not a number in the range
            0&nbsp;&le;&nbsp;<var>timezone<sub>hours</sub></var>&nbsp;&le;&nbsp;23, then fail.
        6. If <var>sign</var> is "negative", then negate <var>timezone<sub>hours</sub></var>.
        7. If <var>timezone<sub>minutes</sub></var> is not a number in the range
            0&nbsp;&le;&nbsp;<var>timezone<sub>minutes</sub></var>&nbsp;&le;&nbsp;59, then fail.
        8. If <var>sign</var> is "negative", then negate <var>timezone<sub>minutes</sub></var>.

        Otherwise, fail.

    2. Return <var>timezone<sub>hours</sub></var> and <var>timezone<sub>minutes</sub></var>.
  </div>

<h5 id="global-dates-and-times">Global dates and times</h5>

  A <dfn>global date and time</dfn> consists of a specific <a>proleptic-Gregorian date</a>,
  consisting of a year, a month, and a day, and a time, consisting of an hour, a minute, a second,
  and a fraction of a second, expressed with a time-zone offset, consisting of a signed number of
  hours and minutes. [[!GREGORIAN]]

  A string is a <dfn>valid global date and time string</dfn> representing a date, time, and a
  time-zone offset if it consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date
  2. A U+0054 LATIN CAPITAL LETTER T character (T) or a U+0020 SPACE character
  3. A <a>valid time string</a> representing the time
  4. A <a>valid time-zone offset string</a> representing the time-zone offset

  Times in dates before the formation of UTC in the mid twentieth century must be expressed and
  interpreted in terms of UT1 (contemporary Earth solar time at the 0&deg; longitude), not UTC (the
  approximation of UT1 that ticks in SI seconds). Time before the formation of time zones must be
  expressed and interpeted as UT1 times with explicit time zones that approximate the contemporary
  difference between the appropriate local time and the time observed at the location of Greenwich,
  London.

  <div class="example">
    The following are some examples of dates written as <a>valid global date and time strings</a>.

    : "<code>0037-12-13 00:00Z</code>"
    :: Midnight in areas using London time on the birthday of Nero (the Roman Emperor). See below
        for further discussion on which date this actually corresponds to.

    : "<code>1979-10-14T12:00:00.001-04:00</code>"
    :: One millisecond after noon on October 14th 1979, in the time zone in use on the east coast of
        the USA during daylight saving time.

    : "<code>8592-01-01T02:09+02:09</code>"
    :: Midnight UTC on the 1st of January, 8592. The time zone associated with that time is two
        hours and nine minutes ahead of UTC, which is not currently a real time zone, but is
        nonetheless allowed.

    Several things are notable about these dates:

    * Years with fewer than four digits have to be zero-padded. The date "37-12-13" would not be a
        valid date.
    * If the "<code>T</code>" is replaced by a space, it must be a single space character. The
        string "<code>2001-12-21&nbsp;&nbsp;12:00Z</code>" (with two spaces between the components)
        would not be parsed successfully.
    * To unambiguously identify a moment in time prior to the introduction of the Gregorian calendar
        (insofar as moments in time before the formation of UTC can be unambiguously identified),
        the date has to be first converted to the Gregorian calendar from the calendar in use at the
        time (e.g. from the Julian calendar). The date of Nero's birth is the 15th of December 37,
        in the Julian Calendar, which is the 13th of December 37 in the
        <a>proleptic Gregorian calendar</a>.
    * The time and time-zone offset components are not optional.
    * Dates before the year one can't be represented as a datetime in this version of HTML.
    * Times of specific events in ancient times are, at best, approximations, since time was not
        well coordinated or measured until relatively recent decades.
    * Time-zone offsets differ based on daylight savings time.
  </div>

  <p class="note">
    The zone offset is not a complete time zone specification. When working with real date and time
    values, consider using a separate field for time zone, perhaps using IANA time zone IDs.
    [[!TIMEZONE]]
  </p>

  A string is a <dfn>valid normalized forced-UTC global date and time string</dfn> representing a
  date, time, and a time-zone offset if it consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date converted to the UTC time zone
  2. A U+0054 LATIN CAPITAL LETTER T character (T)
  3. A <a>valid time string</a> representing the time converted to the UTC time zone and expressed
      as the shortest possible string for the given time (e.g. omitting the seconds component
      entirely if the given time is zero seconds past the minute)
  4. A U+005A LATIN CAPITAL LETTER Z character (Z)

  <div class="impl">
    The rules to <dfn>parse a global date and time string</dfn> are as follows. This will return
    either a time in UTC, with associated time-zone offset information for round-tripping or display
    purposes, or nothing. If at any point the algorithm says that it "fails", this means that it is
    aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and
        <var>day</var>. If this returns nothing, then fail.
    4. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is neither a U+0054 LATIN CAPITAL LETTER T character (T) nor a U+0020
        SPACE character, then fail. Otherwise, move <var>position</var> forwards one character.
    5. <a>Parse a time component</a> to obtain <var>hour</var>, <var>minute</var>, and
        <var>second</var>. If this returns nothing, then fail.
    6. If <var>position</var> is beyond the end of <var>input</var>, then fail.
    7. <a>Parse a time-zone offset component</a> to obtain <var>timezone<sub>hours</sub></var> and
        <var>timezone<sub>minutes</sub></var>. If this returns nothing, then fail.
    8. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    9. Let <var>time</var> be the moment in time at year <var>year</var>, month <var>month</var>,
        day <var>day</var>, hours <var>hour</var>, minute <var>minute</var>, second
        <var>second</var>, subtracting <var>timezone<sub>hours</sub></var> hours and
        <var>timezone<sub>minutes</sub></var> minutes. That moment in time is a moment in the UTC
        time zone.
    10. Let <var>timezone</var> be <var>timezone<sub>hours</sub></var> hours and
        <var>timezone<sub>minutes</sub></var> minutes from UTC.
    11. Return <var>time</var> and <var>timezone</var>.
  </div>

<h5 id="weeks">Weeks</h5>

  A <dfn>week</dfn> consists of a week-year number and a week number representing a seven-day period
  starting on a Monday. Each week-year in this calendaring system has either 52 or 53 such seven-day
  periods, as defined below. The seven-day period starting on the Gregorian date Monday December
  29th 1969 (1969-12-29) is defined as week number 1 in week-year 1970. Consecutive weeks are
  numbered sequentially. The week before the number 1 week in a week-year is the last week in the
  previous week-year, and vice versa. [[!GREGORIAN]]

  A week-year with a number <var>year</var> has 53 weeks if it corresponds to either a year
  <var>year</var> in the <a>proleptic Gregorian calendar</a> that has a Thursday as its first
  day (January 1st), or a year <var>year</var> in the <a>proleptic Gregorian calendar</a> that has
  a Wednesday as its first day (January 1st) and where <var>year</var> is a number divisible by 400,
  or a number divisible by 4 but not by 100. All other week-years have 52 weeks.

  The <dfn>week number of the last day</dfn> of a week-year with 53 weeks is 53; the week number of
  the last day of a week-year with 52 weeks is 52.

  <p class="note">
    The week-year number of a particular day can be different than the number of the year that
    contains that day in the <a>proleptic Gregorian calendar</a>. The first week in a week-year
    <var>y</var> is the week that contains the first Thursday of the Gregorian year <var>y</var>.

  <p class="note">
    For modern purposes, a <a>week</a> as defined here is equivalent to ISO weeks as defined in ISO
    8601. [[!ISO8601]]

    A string is a <dfn>valid week string</dfn> representing a week-year <var>year</var> and week
    <var>week</var> if it consists of the following components in the given order:
  </p>

  1. Four or more <a>ASCII digits</a>, representing <var>year</var>, where
      <var>year</var>&nbsp;&gt;&nbsp;0
  2. A U+002D HYPHEN-MINUS character (-)
  3. A U+0057 LATIN CAPITAL LETTER W character (W)
  4. Two <a>ASCII digits</a>, representing the week <var>week</var>, in the range
      1&nbsp;&le;&nbsp;<var>week</var>&nbsp;&le;&nbsp;<var>maxweek</var>, where <var>maxweek</var>
      is the <a>week number of the last day</a> of week-year <var>year</var>

  <div class="impl">
    The rules to <dfn>parse a week string</dfn> are as follows. This will return either a week-year
    number and week number, or nothing. If at any point the algorithm says that it "fails", this
    means that it is aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not at least four characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>year</var>.
    4. If <var>year</var> is not a number greater than zero, then fail.
    5. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
        <var>position</var> forwards one character.
    6. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is not a U+0057 LATIN CAPITAL LETTER W character (W), then fail.
        Otherwise, move <var>position</var> forwards one character.
    7. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>week</var>.
    8. Let <var>maxweek</var> be the <a>week number of the last day</a> of year <var>year</var>.
    9. If <var>week</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>week</var>&nbsp;&le;&nbsp;<var>maxweek</var>, then fail.
    10. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    11. Return the week-year number <var>year</var> and the week number <var>week</var>.
  </div>

<h5 id="durations">Durations</h5>

  A <dfn>duration</dfn> consists of a number of seconds.

  <p class="note">
    Since months and seconds are not comparable (a month is not a precise number of seconds, but is
    instead a period whose exact length depends on the precise day from which it is measured) a
    <a>duration</a> as defined in this specification cannot include months (or years, which are
    equivalent to twelve months). Only durations that describe a specific number of seconds can be
    described.
  </p>

  A string is a <dfn>valid duration string</dfn> representing a <a>duration</a> <var>t</var> if it
  consists of either of the following:

  * A literal U+0050 LATIN CAPITAL LETTER P character followed by one or more of the following
    subcomponents, in the order given, where the number of days, hours, minutes, and seconds
    corresponds to the same number of seconds as in <var>t</var>:

    1. One or more <a>ASCII digits</a> followed by a U+0044 LATIN CAPITAL LETTER D character,
        representing a number of days.
    2. A U+0054 LATIN CAPITAL LETTER T character followed by one or more of the following
        subcomponents, in the order given:
        1. One or more <a>ASCII digits</a> followed by a U+0048 LATIN CAPITAL LETTER H
            character, representing a number of hours.
        2. One or more <a>ASCII digits</a> followed by a U+004D LATIN CAPITAL LETTER M
            character, representing a number of minutes.
        3. The following components:
            1. One or more <a>ASCII digits</a>, representing a number of seconds.
            2. Optionally, a U+002E FULL STOP character (.) followed by one, two, or three
                <a>ASCII digits</a>, representing a fraction of a second.
            3. A U+0053 LATIN CAPITAL LETTER S character.

    <p class="note">
      This, as with a number of other date- and time-related microsyntaxes defined in this
      specification, is based on one of the formats defined in ISO 8601. [[!ISO8601]]
    </p>

    * One or more <a>duration time components</a>, each with a different
        <a>duration time component scale</a>, in any order; the sum of the represented seconds being
        equal to the number of seconds in <var>t</var>.

        A <dfn>duration time component</dfn> is a string consisting of the following components:

        1. Zero or more <a>space characters</a>.
        2. One or more <a>ASCII digits</a>, representing a number of time units, scaled by the
            <a>duration time component scale</a> specified (see below) to represent a number of
            seconds.
        3. If the <a>duration time component scale</a> specified is 1 (i.e. the units are seconds),
            then, optionally, a U+002E FULL STOP character (.) followed by one, two, or three
            <a>ASCII digits</a>, representing a fraction of a second.
        4. Zero or more <a>space characters</a>.
        5. One of the following characters, representing the
            <dfn>duration time component scale</dfn> of the time unit used in the numeric part of
            the <a>duration time component</a>:

            : U+0057 LATIN CAPITAL LETTER W character
            : U+0077 LATIN SMALL LETTER W character
            :: Weeks. The scale is 604800.

            : U+0044 LATIN CAPITAL LETTER D character
            : U+0064 LATIN SMALL LETTER D character
            :: Days. The scale is 86400.

            : U+0048 LATIN CAPITAL LETTER H character
            : U+0068 LATIN SMALL LETTER H character
            :: Hours. The scale is 3600.

            : U+004D LATIN CAPITAL LETTER M character
            : U+006D LATIN SMALL LETTER M character
            :: Minutes. The scale is 60.

            : U+0053 LATIN CAPITAL LETTER S character
            : U+0073 LATIN SMALL LETTER S character
            :: Seconds. The scale is 1.

        6. Zero or more <a>space characters</a>.

      <p class="note">
        This is not based on any of the formats in ISO 8601. It is intended to be a more
        human-readable alternative to the ISO 8601 duration format.
      </p>

  <div class="impl">
    The rules to <dfn>parse a duration string</dfn> are as follows. This will return either a
    <a>duration</a> or nothing. If at any point the algorithm says that it "fails", this means that
    it is aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. Let <var>months</var>, <var>seconds</var>, and <var>component count</var> all be zero.
    4. Let <var>M-disambiguator</var> be <i>minutes</i>.
        <p class="note">
          This flag's other value is <i>months</i>. It is used to disambiguate the "M" unit in
          ISO8601 durations, which use the same unit for months and minutes. Months are not allowed,
          but are parsed for future compatibility and to avoid misinterpreting ISO8601 durations
          that would be valid in other contexts.
        </p>
    5. <a>Skip whitespace</a>.
    6. If <var>position</var> is past the end of <var>input</var>, then fail.
    7. If the character in <var>input</var> pointed to by <var>position</var> is a U+0050 LATIN
        CAPITAL LETTER P character, then advance <var>position</var> to the next character, set
        <var>M-disambiguator</var> to <i>months</i>, and <a>skip whitespace</a>.
    8. Run the following substeps in a loop, until a step requiring the loop to be broken or the
        entire algorithm to fail is reached:
        1. Let <var>units</var> be undefined. It will be assigned one of the following values:
            <i>years</i>, <i>months</i>, <i>weeks</i>, <i>days</i>, <i>hours</i>, <i>minutes</i>,
            and <i>seconds</i>.
        2. Let <var>next character</var> be undefined. It is used to process characters from the
            <var>input</var>.
        3. If <var>position</var> is past the end of <var>input</var>, then break the loop.
        4. If the character in <var>input</var> pointed to by <var>position</var> is a U+0054 LATIN
            CAPITAL LETTER T character, then advance <var>position</var> to the next character, set
            <var>M-disambiguator</var> to <i>minutes</i>, <a>skip whitespace</a>, and return to the
            top of the loop.
        5. Set <var>next character</var> to the character in <var>input</var> pointed to by
            <var>position</var>.
        6. If <var>next character</var> is a U+002E FULL STOP character (.), then let <var>N</var>
            equal zero. (Do not advance <var>position</var>. That is taken care of below.)

            Otherwise, if <var>next character</var> is an <a>ASCII digit</a>, then <a>collect a
            sequence of characters</a> that are <a>ASCII digits</a>, interpret the resulting
            sequence as a base-ten integer, and let <var>N</var> be that number.

            Otherwise <var>next character</var> is not part of a number; fail.

        7. If <var>position</var> is past the end of <var>input</var>, then fail.
        8. Set <var>next character</var> to the character in <var>input</var> pointed to by
            <var>position</var>, and this time advance <var>position</var> to the next character.
            (If <var>next character</var> was a U+002E FULL STOP character (.) before, it will still
            be that character this time.)
        9. If <var>next character</var> is a U+002E FULL STOP character (.), then run these
            substeps:
            1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. Let
                <var>s</var> be the resulting sequence.
            2. If <var>s</var> is the empty string, then fail.
            3. Let <var>length</var> be the number of characters in <var>s</var>.
            4. Let <var>fraction</var> be the result of interpreting <var>s</var> as a base-ten
                integer, and then dividing that number by <a>10<sup><var>length</var></sup></a>.
            5. Increment <var>N</var> by <var>fraction</var>.
            6. <a>Skip whitespace</a>.
            7. If <var>position</var> is past the end of <var>input</var>, then fail.
            8. Set <var>next character</var> to the character in <var>input</var> pointed to by
                <var>position</var>, and advance <var>position</var> to the next character.
            9. If <var>next character</var> is neither a U+0053 LATIN CAPITAL LETTER S character nor
                a U+0073 LATIN SMALL LETTER S character, then fail.
            10. Set <var>units</var> to <i>seconds</i>.

            Otherwise, run these substeps:

            1. If <var>next character</var> is a <a>space character</a>, then
                <a>skip whitespace</a>, set <var>next character</var> to the character in
                <var>input</var> pointed to by <var>position</var>, and advance <var>position</var>
                to the next character.
            2. If <var>next character</var> is a U+0059 LATIN CAPITAL LETTER Y character, or a
                U+0079 LATIN SMALL LETTER Y character, set <var>units</var> to <i>years</i> and set
                <var>M-disambiguator</var> to <i>months</i>.

                If <var>next character</var> is a U+004D LATIN CAPITAL LETTER M character or a
                U+006D LATIN SMALL LETTER M character, and <var>M-disambiguator</var> is
                <i>months</i>, then set <var>units</var> to <i>months</i>.

                If <var>next character</var> is a U+0057 LATIN CAPITAL LETTER W character or a
                U+0077 LATIN SMALL LETTER W character, set <var>units</var> to <i>weeks</i> and set
                <var>M-disambiguator</var> to <i>minutes</i>.

                If <var>next character</var> is a U+0044 LATIN CAPITAL LETTER D character or a
                U+0064 LATIN SMALL LETTER D character, set <var>units</var> to <i>days</i> and set
                <var>M-disambiguator</var> to <i>minutes</i>.

                If <var>next character</var> is a U+0048 LATIN CAPITAL LETTER H character or a
                U+0068 LATIN SMALL LETTER H character, set <var>units</var> to <i>hours</i> and set
                <var>M-disambiguator</var> to <i>minutes</i>.

                If <var>next character</var> is a U+004D LATIN CAPITAL LETTER M character or a
                U+006D LATIN SMALL LETTER M character, and <var>M-disambiguator</var> is
                <i>minutes</i>, then set <var>units</var> to <i>minutes</i>.

                If <var>next character</var> is a U+0053 LATIN CAPITAL LETTER S character or a
                U+0073 LATIN SMALL LETTER S character, set <var>units</var> to <i>seconds</i> and
                set <var>M-disambiguator</var> to <i>minutes</i>.

                Otherwise if <var>next character</var> is none of the above characters, then fail.

        10. Increment <var>component count</var>.
        11. Let <var>multiplier</var> be 1.
        12. If <var>units</var> is <i>years</i>, multiply <var>multiplier</var> by 12 and set
            <var>units</var> to <i>months</i>.
        13. If <var>units</var> is <i>months</i>, add the product of <var>N</var> and
            <var>multiplier</var> to <var>months</var>.

            Otherwise, run these substeps:

            1. If <var>units</var> is <i>weeks</i>, multiply <var>multiplier</var> by 7 and set
                <var>units</var> to <i>days</i>.
            2. If <var>units</var> is <i>days</i>, multiply <var>multiplier</var> by 24 and set
                <var>units</var> to <i>hours</i>.
            3. If <var>units</var> is <i>hours</i>, multiply <var>multiplier</var> by 60 and set
                <var>units</var> to <i>minutes</i>.
            4. If <var>units</var> is <i>minutes</i>, multiply <var>multiplier</var> by 60 and set
                <var>units</var> to <i>seconds</i>.
            5. Forcibly, <var>units</var> is now <i>seconds</i>. Add the product of <var>N</var> and
                <var>multiplier</var> to <var>seconds</var>.
        14. <a>Skip whitespace</a>.

    9. If <var>component count</var> is zero, fail.
    10. If <var>months</var> is not zero, fail.
    11. Return the <a>duration</a> consisting of <var>seconds</var> seconds.
  </div>

<h5 id="vaguer-moments-in-time">Vaguer moments in time</h5>

  A string is a <dfn>valid date string with optional time</dfn> if it is also one of the following:

  * A <a>valid date string</a>
  * A <a>valid global date and time string</a>

  <div class="impl">
    <hr />

    The rules to <dfn>parse a date or time string</dfn> are as follows. The algorithm will return
    either a <a>date</a>, a <a>time</a>, a <a>global date and time</a>, or nothing. If at any point
    the algorithm says that it "fails", this means that it is aborted at that point and returns
    nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. Set <var>start position</var> to the same position as <var>position</var>.
    4. Set the <var>date present</var> and <var>time present</var> flags to true.
    5. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and
        <var>day</var>. If this fails, then set the <var>date present</var> flag to false.
    6. If <var>date present</var> is true, and <var>position</var> is not beyond the end of
        <var>input</var>, and the character at <var>position</var> is either a U+0054 LATIN CAPITAL
        LETTER T character (T) or a U+0020 SPACE character, then advance <var>position</var> to the
        next character in <var>input</var>.

        Otherwise, if <var>date present</var> is true, and either <var>position</var> is beyond the
        end of <var>input</var> or the character at <var>position</var> is neither a U+0054 LATIN
        CAPITAL LETTER T character (T) nor a U+0020 SPACE character, then set
        <var>time present</var> to false.

        Otherwise, if <var>date present</var> is false, set <var>position</var> back to the same
        position as <var>start position</var>.

    7. If the <var>time present</var> flag is true, then <a>parse a time component</a> to obtain
        <var>hour</var>, <var>minute</var>, and <var>second</var>. If this returns nothing, then
        fail.
    8. If the <var>date present</var> and <var>time present</var> flags are both true, but
        <var>position</var> is beyond the end of <var>input</var>, then fail.
    9. If the <var>date present</var> and <var>time present</var> flags are both true,
        <a>parse a time-zone offset component</a> to obtain <var>timezone<sub>hours</sub></var> and
        <var>timezone<sub>minutes</sub></var>. If this returns nothing, then fail.
    10. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    11. If the <var>date present</var> flag is true and the <var>time present</var> flag is false,
        then let <var>date</var> be the date with year <var>year</var>, month <var>month</var>, and
        day <var>day</var>, and return <var>date</var>.

        Otherwise, if the <var>time present</var> flag is true and the <var>date present</var> flag
        is false, then let <var>time</var> be the time with hour <var>hour</var>, minute
        <var>minute</var>, and second <var>second</var>, and return <var>time</var>.

        Otherwise, let <var>time</var> be the moment in time at year <var>year</var>, month
        <var>month</var>, day <var>day</var>, hours <var>hour</var>, minute <var>minute</var>,
        second <var>second</var>, subtracting <var>timezone<sub>hours</sub></var> hours and
        <var>timezone<sub>minutes</sub></var> minutes, that moment in time being a moment in the UTC
        time zone; let <var>timezone</var> be <var>timezone<sub>hours</sub></var> hours and
        <var>timezone<sub>minutes</sub></var> minutes from UTC; and return <var>time</var> and
        <var>timezone</var>.
  </div>

<h4 id="colors">Colors</h4>

  A <dfn>simple color</dfn> consists of three 8-bit numbers in the range 0..255, representing the
  red, green, and blue components of the color respectively, in the sRGB color space. [[!SRGB]]

  A string is a <dfn>valid simple color</dfn> if it is exactly seven characters long, and the first
  character is a U+0023 NUMBER SIGN character (#), and the remaining six characters are all
  <a>ASCII hex digits</a>, with the first two digits representing the red component, the middle two
  digits representing the green component, and the last two digits representing the blue component,
  in hexadecimal.

  A string is a <dfn>valid lowercase simple color</dfn> if it is a <a>valid simple color</a> and
  doesn't use any characters in the range U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL
  LETTER F.

  <div class="impl">
    The <dfn>rules for parsing simple color values</dfn> are as given in the following algorithm.
    When invoked, the steps must be followed in the order given, aborting at the first step that
    returns a value. This algorithm will return either a <a>simple color</a> or an error.

    1. Let <var>input</var> be the string being parsed.
    2. If <var>input</var> is not exactly seven characters long, then return an error.
    3. If the first character in <var>input</var> is not a U+0023 NUMBER SIGN character (#), then
        return an error.
    4. If the last six characters of <var>input</var> are not all <a>ASCII hex digits</a>, then
        return an error.
    5. Let <var>result</var> be a <a>simple color</a>.
    6. Interpret the second and third characters as a hexadecimal number and let the result be the
        red component of <var>result</var>.
    7. Interpret the fourth and fifth characters as a hexadecimal number and let the result be the
        green component of <var>result</var>.
    8. Interpret the sixth and seventh characters as a hexadecimal number and let the result be the
        blue component of <var>result</var>.
    9. Return <var>result</var>.

    The <dfn>rules for serializing simple color values</dfn> given a <a>simple color</a> are as
    given in the following algorithm:

    1. Let <var>result</var> be a string consisting of a single U+0023 NUMBER SIGN character (#).
    2. Convert the red, green, and blue components in turn to two-digit hexadecimal numbers using
        <a>lowercase ASCII hex digits</a>, zero-padding if necessary, and append these numbers to
        <var>result</var>, in the order red, green, blue.
    3. Return <var>result</var>, which will be a <a>valid lowercase simple color</a>.

    <hr />

    Some obsolete legacy attributes parse colors in a more complicated manner, using the <dfn>rules
    for parsing a legacy color value</dfn>, which are given in the following algorithm. When
    invoked, the steps must be followed in the order given, aborting at the first step that returns
    a value. This algorithm will return either a <a>simple color</a> or an error.

    1. Let <var>input</var> be the string being parsed.
    2. If <var>input</var> is the empty string, then return an error.
    3. <a>Strip leading and trailing whitespace</a> from <var>input</var>.
    4. If <var>input</var> is an <a>ASCII case-insensitive</a> match for the string
        "<code>transparent</code>", then return an error.
    5. If <var>input</var> is an <a>ASCII case-insensitive</a> match for one of the
        <a>named colors</a>, then return the <a>simple color</a> corresponding to that keyword.
        [[!CSS3COLOR]]

        <p class="note"><a>CSS2 System Colors</a> are not recognized.</p>

    6. If <var>input</var> is four characters long, and the first character in <var>input</var> is a
        U+0023 NUMBER SIGN character (#), and the last three characters of <var>input</var> are all
        <a>ASCII hex digits</a>, then run these substeps:
        1. Let <var>result</var> be a <a>simple color</a>.
        2. Interpret the second character of <var>input</var> as a hexadecimal digit; let the red
            component of <var>result</var> be the resulting number multiplied by 17.
        3. Interpret the third character of <var>input</var> as a hexadecimal digit; let the green
            component of <var>result</var> be the resulting number multiplied by 17.
        4. Interpret the fourth character of <var>input</var> as a hexadecimal digit; let the blue
            component of <var>result</var> be the resulting number multiplied by 17.
        5. Return <var>result</var>.

    7. Replace any characters in <var>input</var> that have a Unicode code point greater than U+FFFF
        (i.e. any characters that are not in the basic multilingual plane) with the two-character
        string "<code>00</code>".
    8. If <var>input</var> is longer than 128 characters, truncate <var>input</var>, leaving only
        the first 128 characters.
    9. If the first character in <var>input</var> is a U+0023 NUMBER SIGN character (#), remove it.
    10. Replace any character in <var>input</var> that is not an <a>ASCII hex digit</a> with the
        character U+0030 DIGIT ZERO (0).
    11. While <var>input</var>'s length is zero or not a multiple of three, append a U+0030 DIGIT
        ZERO (0) character to <var>input</var>.
    12. Split <var>input</var> into three strings of equal length, to obtain three components. Let
        <var>length</var> be the length of those components (one third the length of
        <var>input</var>).
    13. If <var>length</var> is greater than 8, then remove the leading <a><var>length</var>-8</a>
        characters in each component, and let <var>length</var> be 8.
    14. While <var>length</var> is greater than two and the first character in each component is a
        U+0030 DIGIT ZERO (0) character, remove that character and reduce <var>length</var> by one.
    15. If <var>length</var> is <em>still</em> greater than two, truncate each component, leaving
        only the first two characters in each.
    16. Let <var>result</var> be a <a>simple color</a>.
    17. Interpret the first component as a hexadecimal number; let the red component of
        <var>result</var> be the resulting number.
    18. Interpret the second component as a hexadecimal number; let the green component of
        <var>result</var> be the resulting number.
    19. Interpret the third component as a hexadecimal number; let the blue component of
        <var>result</var> be the resulting number.
    20. Return <var>result</var>.
  </div>

<h4 id="space-separated-tokens">Space-separated tokens</h4>

  A <dfn>set of space-separated tokens</dfn> is a string containing zero or more words (known as
  tokens) separated by one or more <a>space characters</a>, where words consist of any string of one
  or more characters, none of which are <a>space characters</a>.

  A string containing a <a>set of space-separated tokens</a> may have leading or trailing
  <a>space characters</a>.

  An <dfn>unordered set of unique space-separated tokens</dfn> is a
  <a>set of space-separated tokens</a> where none of the tokens are duplicated.

  An <dfn>ordered set of unique space-separated tokens</dfn> is a
  <a>set of space-separated tokens</a> where none of the tokens are duplicated but where the order
  of the tokens is meaningful.

  <a>Sets of space-separated tokens</a> sometimes have a defined set of allowed values. When a set
  of allowed values is defined, the tokens must all be from that list of allowed values; other
  values are non-conforming. If no such set of allowed values is provided, then all values are
  conforming.

  <p class="note">
    How tokens in a <a>set of space-separated tokens</a> are to be compared (e.g. case-sensitively
    or not) is defined on a per-set basis.
  </p>

  <div class="impl">
    When a user agent has to <dfn>split a string on spaces</dfn>, it must use the following
    algorithm:

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. Let <var>tokens</var> be an ordered list of tokens, initially empty.
    4. <a>Skip whitespace</a>
    5. While <var>position</var> is not past the end of <var>input</var>:
        1. <a>Collect a sequence of characters</a> that are not <a>space characters</a>.
        2. Append the string collected in the previous step to <var>tokens</var>.
        3. <a>Skip whitespace</a>
    6. Return <var>tokens</var>.
  </div>

<h4 id="comma-separated-tokens">Comma-separated tokens</h4>

  A <dfn>set of comma-separated tokens</dfn> is a string containing zero or more tokens each
  separated from the next by a single U+002C COMMA character (,), where tokens consist of any string
  of zero or more characters, neither beginning nor ending with <a>space characters</a>, nor
  containing any U+002C COMMA characters (,), and optionally surrounded by <a>space characters</a>.

  <p class="example">
    For instance, the string "<code>&nbsp;a&nbsp;,b,,d&nbsp;d&nbsp;</code>" consists of four tokens:
    "a", "b", the empty string, and "d&nbsp;d". Leading and trailing whitespace around each token
    doesn't count as part of the token, and the empty string can be a token.
  </p>

  <a>Sets of comma-separated tokens</a> sometimes have further restrictions on what consists a valid
  token. When such restrictions are defined, the tokens must all fit within those restrictions;
  other values are non-conforming. If no such restrictions are specified, then all values are
  conforming.

  <div class="impl">
    When a user agent has to <dfn>split a string on commas</dfn>, it must use the following
    algorithm:

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. Let <var>tokens</var> be an ordered list of tokens, initially empty.
    4. <i>Token</i>: If <var>position</var> is past the end of <var>input</var>, jump to the last
        step.
    5. <a>Collect a sequence of characters</a> that are not U+002C COMMA characters (,). Let
        <var>s</var> be the resulting sequence (which might be the empty string).
    6. <a>Strip leading and trailing whitespace</a> from <var>s</var>.
    7. Append <var>s</var> to <var>tokens</var>.
    8. If <var>position</var> is not past the end of <var>input</var>, then the character at
        <var>position</var> is a U+002C COMMA character (,); advance <var>position</var> past that
        character.
    9. Jump back to the step labeled <i>token</i>.
    10. Return <var>tokens</var>.<
  </div>

<h4 id="syntax-references">References</h4>

  A <dfn>valid hash-name reference</dfn> to an element of type <var>type</var> is a
  string consisting of a U+0023 NUMBER SIGN character (#) followed by a string which exactly matches
  the value of the <code>name</code> attribute of an element with type <var>type</var> in
  the document.

  <div class="impl">
    The <dfn>rules for parsing a hash-name reference</dfn> to an element of type <var>type</var>,
    given a context node <var>scope</var>, are as follows:

    1. If the string being parsed does not contain a U+0023 NUMBER SIGN character, or if the first
        such character in the string is the last character in the string, then return null and abort
        these steps.
    2. Let <var>s</var> be the string from the character immediately after the first U+0023 NUMBER
        SIGN character in the string being parsed up to the end of that string.
    3. Return the first element of type <var>type</var> in <a>tree order</a> in the subtree rooted
        at <var>scope</var> that has an <code>id</code> attribute whose value is a
        <a>case-sensitive</a> match for <var>s</var> or a <code>name</code> attribute whose value is
        a <a>compatibility caseless</a> match for <var>s</var>.
  </div>

<h4 id="mq">Media queries</h4>

  A string is a <dfn>valid media query list</dfn> if it matches the
  <code>&lt;media-query-list&gt;</code> production of the Media Queries specification. [[!MEDIAQ]]

  A string <dfn>matches the environment</dfn> of the user if it is the empty string, a string
  consisting of only <a>space characters</a>, or is a media query list that matches the user's
  environment according to the definitions given in the Media Queries specification. [[!MEDIAQ]]

<h3 id="urls">URLs</h3>

<h4 id="terminology">Terminology</h4>

  A <a>URL</a> is a <dfn>valid URL</dfn> if it conforms to the authoring conformance
  requirements in the WHATWG URL standard. [[!URL]]

  A string is a <dfn>valid non-empty URL</dfn> if it is a <a>valid URL</a> but it is not
  the empty string.

  A string is a <dfn>valid URL potentially surrounded by spaces</dfn> if, after
  <a>stripping leading and trailing whitespace</a> from it, it is a <a>valid URL</a>.

  A string is a <dfn>valid non-empty URL potentially surrounded by spaces</dfn> if, after
  <a>stripping leading and trailing whitespace</a> from it, it is a <a>valid non-empty URL</a>.

  This specification defines the URL <dfn><code>about:legacy-compat</code></dfn> as a reserved,
  though unresolvable, <code>about:</code> URL, for use in <a>DOCTYPE</a>s in <a>HTML documents</a>
  when needed for compatibility with XML tools. [[!RFC6694]]

  This specification defines the URL <dfn><code>about:srcdoc</code></dfn> as a reserved, though
  unresolvable, <code>about:</code> URL, that is used as <a>the document's address</a> of
  <a><code>iframe</code> <code>srcdoc</code> documents</a>. [[!RFC6694]]

  The <dfn>fallback base URL</dfn> of a <code>Document</code> object is the <a>absolute URL</a>
  obtained by running these substeps:

  1. If the <code>Document</code> is <a>an <code>iframe</code> <code>srcdoc</code> document</a>,
      then return the <a>document base URL</a> of the <code>Document</code>'s
      <a>browsing context</a>'s <a>browsing context container</a>'s <a>node document</a> and abort
      these steps.
  2. If <a>the document's address</a> is <code>about:blank</code>, and the <code>Document</code>'s
      <a>browsing context</a> has a <a>creator browsing context</a>, then return the <a>document
      base URL</a> of the <a>creator <code>Document</code></a>, and abort these steps.
  3. Return <a>the document's address</a>.

  The <dfn>document base URL</dfn> of a <code>Document</code> object is the <a>absolute URL</a>
  obtained by running these substeps:

  1. If there is no <code>base</code> element that has an <code>href</code> attribute in the
      <code>Document</code>, then the <a>document base URL</a> is the <code>Document</code>'s
      <a>fallback base URL</a>; abort these steps.
  2. Otherwise, the <a>document base URL</a> is the <a>frozen base URL</a> of the first
      <code>base</code> element in the <code>Document</code> that has an <code>href</code>
      attribute, in <a>tree order</a>.

  <div class="impl">
    <h4 id="resolving-urls">Resolving URLs</h4>

    Resolving a URL is the process of taking a <a>relative URL</a> and obtaining the
    <a>absolute URL</a> that it implies.

    To <dfn>resolve a URL</dfn> to an <a>absolute URL</a> relative to either another
    <a>absolute URL</a> or an element, the user agent must use the following steps. Resolving a URL
    can result in an error, in which case the URL is not resolvable.

    1. Let <var>url</var> be the <a>URL</a> being resolved.
    2. Let <var>encoding</var> be determined as follows:

        <dl class="switch">
          <dt>
            If the URL had a character encoding defined when the URL was created or defined or when
            this algorithm was invoked
          </dt>
          <dd>The URL character encoding is as defined.</dd>

          <dt>If the URL came from a script (e.g. as an argument to a method)</dt>
          <dd>
            The URL character encoding is the <a>API URL character encoding</a> specified by the
            script's <a>settings object</a>.
          </dd>

          <dt>If the URL came from a DOM node (e.g. from an element)</dt>
          <dd>
            The node has a <code>Document</code>, and the URL character encoding is the
            <a>document's character encoding</a>.
          </dd>
        </dl>

    3. If <var>encoding</var> is a <a>UTF-16 encoding</a>, then change the value of
        <var>encoding</var> to UTF-8.
    4. If the algorithm was invoked with an <a>absolute URL</a> to use as the base URL, let
        <var>base</var> be that <a>absolute URL</a>.

        Otherwise, let <var>base</var> be <a>the element's base URL</a>.

    5. Apply the <a>URL parser</a> to <var>url</var>, with <var>base</var> as the base URL, with
        <var>encoding</var> as the encoding.
    6. If this returns failure, then abort these steps with an error.
    7. Let <var>parsed URL</var> be the result of the <a>URL parser</a>.
    8. Let <var>serialized URL</var> be the result of apply the <a>URL serializer</a> to
        <var>parsed URL</var>.
    9. Return <var>serialized URL</var> as the <dfn>resulting absolute URL</dfn> and
        <var>parsed URL</var> as the <dfn>resulting parsed URL</dfn>.

    Given an element, <dfn>the element's base URL</dfn> is the element's <a>node document</a>'s
    <a>document base URL</a>.
  </div>

  <div class="impl">
    <h4 id="dynamic-changes-to-base-urls">Dynamic changes to base URLs</h4>

    When a document's <a>document base URL</a> changes, all elements in that document are
    <a>affected by a base URL change</a>.

    The following are <a>base URL change steps</a>, which run when an element is
    <a>affected by a base URL change</a> (as defined by the DOM specification):

    <dl class="switch">
      <dt>If the element creates a <a>hyperlink</a></dt>
      <dd>
        If the <a>absolute URL</a> identified by the hyperlink is being shown to the user, or if any
        data derived from that URL is affecting the display, then the <code>href</code> attribute
        should be <a>re-resolved</a> relative to the element and the UI updated appropriately.

        <p class="example">
          For example, the CSS <code>:link</code>/<code>:visited</code> pseudo-classes might have
          been affected.
        </p>
      </dd>

      <dt>
        If the element is a <code>q</code>, <code>blockquote</code>, <code>ins</code>, or
        <code>del</code> element with a <code>cite</code> attribute
      </dt>
      <dd>
        If the <a>absolute URL</a> identified by the <code>cite</code> attribute is being shown to
        the user, or if any data derived from that URL is affecting the display, then the <a>URL</a>
        should be <a>re-resolved</a> relative to the element and the UI updated appropriately.
      </dd>

      <dt>Otherwise</dt>
      <dd>
        The element is not directly affected.

        <p class="example">
          For instance, changing the base URL doesn't affect the image displayed by <code>img</code>
          elements, although subsequent accesses of the <code>src</code> IDL attribute from script
          will return a new <a>absolute URL</a> that might no longer correspond to the image being
          shown.
        </p>
      </dd>
    </dl>
  </div>


  <div class="impl">
    <h3 id="fetching-resources">Fetching resources</h3>

    <h4 id="terminology">Terminology</h4>

    User agents can implement a variety of transfer protocols, but this specification mostly defines
    behavior in terms of HTTP. [[!HTTP11]]

    The <dfn>HTTP GET method</dfn> is equivalent to the default retrieval action of the protocol.
    For example, RETR in FTP. Such actions are idempotent and safe, in HTTP terms.

    The <dfn>HTTP response codes</dfn> are equivalent to statuses in other protocols that have the
    same basic meanings. For example, a "file not found" error is equivalent to a 404 code, a server
    error is equivalent to a 5xx code, and so on.

    The <dfn>HTTP headers</dfn> are equivalent to fields in
    other protocols that have the same basic meaning. For example, the HTTP authentication headers
    are equivalent to the authentication aspects of the FTP protocol.

    A <dfn>referrer source</dfn> is either a <code>Document</code> or a <a>URL</a>.

    <h4 id="processing-model">Processing model</h4>

    When a user agent is to <dfn>fetch</dfn> a resource or <a>URL</a>, optionally
    <strong>from</strong> an origin <i>origin</i>, optionally <strong>using</strong> a specific
    <a>referrer source</a> as an <i>override referrer source</i>, and optionally with any of a
    <i>synchronous flag</i>, a <i>manual redirect flag</i>, a <i>force same-origin flag</i>, and a
    <i>block cookies flag</i>, the following steps must be run. (When a <em>URL</em> is to be
    fetched, the URL identifies a resource to be obtained.)

    1. If there is a specific <i>override referrer source</i>, and it is a <a>URL</a>, then let
        <var>referrer</var> be the <i>override referrer source</i>, and jump to the step labeled
        <i>clean referrer</i>.

    2. Let <var>document</var> be the appropriate <code>Document</code> as given by the following
        list:
        <dl class="switch">
          <dt>If there is a specific <i>override referrer source</i></dt>
          <dd>The <i>override referrer source</i>.</dd>

          <dt>When <a>navigating</a></dt>
          <dd>The <a>active document</a> of the <a>source browsing context</a>.</dd>

          <dt>When fetching resources for an element</dt>
          <dd>The element's <code>Document</code>.</dd>
        </dl>
    3. While <var>document</var> is <a>an <code>iframe</code> <code>srcdoc</code> document</a>, let
        <var>document</var> be <var>document</var>'s <a>browsing context</a>'s
        <a>browsing context container</a>'s <code>Document</code> instead.
    4. If the <a>origin</a> of <var>Document</var> is not a scheme/host/port tuple, then set
        <var>referrer</var> to the empty string and jump to the step labeled <i>clean referrer</i>.
    5. Let <var>referrer</var> be <a>the document's address</a> of <var>document</var>.
    6. <i>Clean referrer</i>: Apply the <a>URL parser</a> to <var>referrer</var> and let
        <var>parsed referrer</var> be the <a>resulting parsed URL</a>.
    7. Let <var>referrer</var> be the result of applying the <a>URL serializer</a> to
        <var>parsed referrer</var>, with the <i>exclude fragment flag</i> set.
    8. If <var>referrer</var> is not the empty string, is not a <a><code>data:</code> URL</a>, and
        is not the <a>URL</a> "<code>about:blank</code>", then generate the <i>address of the
        resource from which Request-URIs are obtained</i> as required by HTTP for the
        <code>Referer</code> (sic) header from <var>referrer</var>. [[!HTTP11]]

        Otherwise, the <code>Referer</code> (sic) header must be omitted, regardless of its value.
    9. If the algorithm was not invoked with the <i>synchronous flag</i>, perform the remaining
        steps <a>in parallel</a>.
    10. If the <code>Document</code> with which any <a>tasks</a> <a>queued</a> by this algorithm
        would be associated doesn't have an associated <a>browsing context</a>, then abort these
        steps.
    11. This is the <i>main step</i>.

        If the resource is to be obtained from an <a>application cache</a>, then use the data from
        that <a>application cache</a>, as if it had been obtained in the manner appropriate given
        its <a>URL</a>.

        If the resource is identified by an <a>absolute URL</a>, and the resource is to be obtained
        using an idempotent action (such as an HTTP GET <a>or equivalent</a>), and it is already
        being downloaded for other reasons (e.g. another invocation of this algorithm), and this
        request would be identical to the previous one (e.g. same <code>Accept</code> and
        <code>Origin</code> headers), and the user agent is configured such that it is to reuse the
        data from the existing download instead of initiating a new one, then use the results of the
        existing download instead of starting a new one.

        Otherwise, if the resource is identified by an <a>absolute URL</a> with a scheme that does
        not define a mechanism to obtain the resource (e.g. it is a <code>mailto:</code> URL) or
        that the user agent does not support, then act as if the resource was an HTTP 204 No Content
        response with no other metadata.

        Otherwise, if the resource is identified by the <a>URL</a>
        <dfn><code>about:blank</code></dfn>, then the resource is immediately available and consists
        of the empty string, with no metadata.

        Otherwise, at a time convenient to the user and the user agent, download (or otherwise
        obtain) the resource, applying the semantics of the relevant specifications (e.g. performing
        an HTTP GET or POST operation, or reading the file from disk, or expanding
        <a><code>data:</code> URLs</a>, etc).

        For the purposes of the <code>Referer</code> (sic) header, use the
        <i>address of the resource from which Request-URIs are obtained</i> generated in the earlier
        step.

        For the purposes of the <code>Origin</code> header, if the <a>fetching algorithm</a> was
        explicitly initiated from an <i>origin</i>, then
        <i>the origin that initiated the HTTP request</i> is <i>origin</i>. Otherwise, this is
        <i>a request from a "privacy-sensitive" context</i>. [[!ORIGIN]]
    12. If the algorithm was not invoked with the <i>block cookies flag</i>, and there are cookies
        to be set, then the user agent must run the following substeps:
        1. Wait until ownership of the <a>storage mutex</a> can be taken by this instance of the
            <a>fetching</a> algorithm.
        2. Take ownership of the <a>storage mutex</a>.
        3. Update the cookies. [[!COOKIES]]
            <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>
        4. Release the <a>storage mutex</a> so that it is once again free.
    13. If the fetched resource is an HTTP redirect <a>or equivalent</a>, then:

        <dl class="switch">
          <dt>
            If the <i>force same-origin flag</i> is set and the <a>URL</a> of the target of the
            redirect does not have the <a>same origin</a> as the <a>URL</a> for which the
            <a>fetch</a> algorithm was invoked
          </dt>
          <dd>
            Abort these steps and return failure from this algorithm, as if the remote host could
            not be contacted.
          </dd>

          <dt>If the <i>manual redirect flag</i> is set</dt>
          <dd>
            Continue, using the fetched resource (the redirect) as the result of the algorithm. If
            the calling algorithm subsequently requires the user agent to
            <dfn>transparently follow the redirect</dfn>, then the user agent must resume this
            algorithm from the <i>main step</i>, but using the target of the redirect as the
            resource to fetch, rather than the original resource.
          </dd>

          <dt>Otherwise</dt>
          <dd>
            First, apply any relevant requirements for redirects (such as showing any appropriate
            prompts). Then, redo <i>main step</i>, but using the target of the redirect as the
            resource to fetch, rather than the original resource. For HTTP requests, the new request
            must include the same headers as the original request, except for headers for which
            other requirements are specified (such as the <code>Host</code> header). [[!HTTP11]]

            <p class="note">
              The HTTP specification requires that 301, 302, and 307 redirects, when applied to
              methods other than the safe methods, not be followed without user confirmation. That
              would be an appropriate prompt for the purposes of the requirement in the paragraph
              above. [[!HTTP11]]
          </dd>
        </dl>
    14. If the algorithm was not invoked with the <i>synchronous flag</i>: When the resource is
        available, or if there is an error of some description, <a>queue a task</a> that uses the
        resource as appropriate. If the resource can be processed incrementally, as, for instance,
        with a progressively interlaced JPEG or an HTML file, additional tasks may be queued to
        process the data as it is downloaded. The <a>task source</a> for these <a>tasks</a> is the
        <a>networking task source</a>.

        Otherwise, return the resource or error information to the calling algorithm.

    If the user agent can determine the actual length of the resource being <a>fetched</a> for an
    instance of this algorithm, and if that length is finite, then that length is the file's
    <dfn>size</dfn>. Otherwise, the subject of the algorithm (that is, the resource being fetched)
    has no known <a>size</a>. (For example, the HTTP <code>Content-Length</code> header might
    provide this information.)

    The user agent must also keep track of the <dfn>number of bytes downloaded</dfn> for each
    instance of this algorithm. This number must exclude any out-of-band metadata, such as HTTP
    headers.

    <p class="note">
      The <a>application cache</a> processing model introduces some
      <a>changes to the networking model</a> to handle the returning of cached resources.

    <p class="note">
      The <a>navigation</a> processing model handles redirects itself, overriding the redirection
      handling that would be done by the fetching algorithm.
    </p>

    <p class="note">
      Whether the <a>type sniffing rules</a> apply to the fetched resource depends on the algorithm
      that invokes the rules &mdash; they are not always applicable.
    </p>

    <h4 id="encrypted-http-and-related-security-concerns">Encrypted HTTP and related security concerns</h4>

    Anything in this specification that refers to HTTP also applies to HTTP-over-TLS, as represented
    by <a>URLs</a> representing the <code>https</code> scheme. [[!HTTP11]]

    <p class="warning">
      User agents should report certificate errors to the user and must either refuse to download
      resources sent with erroneous certificates or must act as if such resources were in fact
      served with no encryption.
    </p>

    User agents should warn the user that there is a potential problem whenever the user visits a
    page that the user has previously visited, if the page uses less secure encryption on the second
    visit.

    Not doing so can result in users not noticing man-in-the-middle attacks.

    <div class="example">
      If a user connects to a server with a self-signed certificate, the user agent could allow the
      connection but just act as if there had been no encryption. If the user agent instead allowed
      the user to override the problem and then displayed the page as if it was fully and safely
      encrypted, the user could be easily tricked into accepting man-in-the-middle connections.

      If a user connects to a server with full encryption, but the page then refers to an external
      resource that has an expired certificate, then the user agent will act as if the resource was
      unavailable, possibly also reporting the problem to the user. If the user agent instead
      allowed the resource to be used, then an attacker could just look for "secure" sites that used
      resources from a different host and only apply man-in-the-middle attacks to that host, for
      example taking over scripts in the page.

      If a user bookmarks a site that uses a CA-signed certificate, and then later revisits that
      site directly but the site has started using a self-signed certificate, the user agent could
      warn the user that a man-in-the-middle attack is likely underway, instead of simply acting as
      if the page was not encrypted.
    </div>

    <h4 id="content-type-sniffing">Determining the type of a resource</h4>

    The <dfn>Content-Type metadata</dfn> of a resource must be obtained and interpreted in a manner
    consistent with the requirements of the MIME Sniffing specification. [[!MIMESNIFF]]

    The <dfn>sniffed type of a resource</dfn> must be found in a manner consistent with the
    requirements given in the MIME Sniffing specification for finding the <i>sniffed media type</i>
    of the relevant sequence of octets. [[!MIMESNIFF]]

    The <dfn>rules for sniffing images specifically</dfn> and the <dfn>rules for distinguishing if a
    resource is text or binary</dfn> are also defined in the MIME Sniffing specification. Both sets
    of rules return a <a>MIME type</a> as their result. [[!MIMESNIFF]]

    <p class="warning">
      It is imperative that the rules in the MIME Sniffing specification be followed exactly. When a
      user agent uses different heuristics for content type detection than the server expects,
      security problems can occur. For more details, see the MIME Sniffing specification.
      [[!MIMESNIFF]]
    </p>

    <h4 id="extracting-character-encodings-from-meta-elements">Extracting character encodings from <code>meta</code> elements</h4>

    The <dfn>algorithm for extracting a character encoding from a <code>meta</code> element</dfn>,
    given a string <var>s</var>, is as follows. It either returns a character encoding or nothing.

    1. Let <var>position</var> be a pointer into <var>s</var>, initially pointing at the start of
        the string.
    2. <i>Loop</i>: Find the first seven characters in <var>s</var> after <var>position</var> that
        are an <a>ASCII case-insensitive</a> match for the word "<code>charset</code>". If no such
        match is found, return nothing and abort these steps.
    3. Skip any <a>space characters</a> that immediately follow the word "<code>charset</code>"
        (there might not be any).
    4. If the next character is not a U+003D EQUALS SIGN (=), then move <var>position</var> to point
        just before that next character, and jump back to the step labeled <i>loop</i>.
    5. Skip any <a>space characters</a> that immediately follow the equals sign (there might not be
        any).
    6. Process the next character as follows:
        <dl class="switch">
          <dt>
            If it is a U+0022 QUOTATION MARK character (") and there is a later U+0022 QUOTATION
            MARK character (") in <var>s</var>
          </dt>
          <dt>
            If it is a U+0027 APOSTROPHE character (') and there is a later U+0027 APOSTROPHE
            character (') in <var>s</var>
          </dt>
          <dd>
            Return the result of <a>getting an encoding</a> from the substring that is between
            this character and the next earliest occurrence of this character.
          </dd>

          <dt>If it is an unmatched U+0022 QUOTATION MARK character (")</dt>
          <dt>If it is an unmatched U+0027 APOSTROPHE character (')</dt>
          <dt>If there is no next character</dt>
          <dd>Return nothing.</dd>

          <dt>Otherwise</dt>
          <dd>
            Return the result of <a>getting an encoding</a> from the substring that consists of this
            character up to but not including the first <a>space character</a> or U+003B SEMICOLON
            character (;), or the end of <var>s</var>, whichever comes first.
          </dd>
        </dl>

    <p class="note">
      This algorithm is distinct from those in the HTTP specification (for example, HTTP doesn't
      allow the use of single quotes and requires supporting a backslash-escape mechanism that is
      not supported by this algorithm). While the algorithm is used in contexts that, historically,
      were related to HTTP, the syntax as supported by implementations diverged some time ago.
      [[!HTTP11]]
    </p>
  </div>


<h4 id="cors-settings-attributes">CORS settings attributes</h4>

  A <dfn>CORS settings attribute</dfn> is an <a>enumerated attribute</a>. The following table lists
  the keywords and states for the attribute &mdash; the keywords in the left column map to the
  states in the cell in the second column on the same row as the keyword.

  <table>
    <thead>
    <tr>
      <th>Keyword</th>
      <th>State</th>
      <th>Brief description</th>
    <tbody>
    <tr>
      <td><dfn><code>anonymous</code></dfn></td>
      <td><dfn>Anonymous</dfn></td>
      <td>
        <a>Requests</a> for the element will have their <a>mode</a> set to "<code>cors</code>" and
        their <a>credentials mode</a> set to "<code>same-origin</code>".
      </td>
    <tr>
      <td><dfn><code>use-credentials</code></dfn></td>
      <td><dfn>Use Credentials</dfn></td>
      <td>
        <a>Requests</a> for the element will have their <a>mode</a> set to "<code>cors</code>" and
        their <a>credentials mode</a> set to "<code>include</code>".
      </td>
  </table>

  The empty string is also a valid keyword, and maps to the <a>Anonymous</a> state. The attribute's
  <i>invalid value default</i> is the <a>Anonymous</a> state. For the purposes of <a>reflection</a>,
  the canonical case for the <a>Anonymous</a> state is the <code>anonymous</code> keyword. The
  <i>missing value default</i>, used when the attribute is omitted, is the <dfn>No CORS</dfn> state.

  <div class="impl">
    <h4 id="cors-enabled-fetch">CORS-enabled fetch</h4>

    When the user agent is required to perform a <dfn>potentially CORS-enabled fetch</dfn> of an
    <a>absolute URL</a> <var>URL</var> with a mode <var>mode</var> that is either "<a>No CORS</a>",
    "<a>Anonymous</a>", or "<a>Use Credentials</a>", optionally using a <a>referrer source</a>
    <var>referrer source</var>, with an <a>origin</a> <var>origin</var>, and with a default origin
    behavior <var>default</var> which is either "<i>taint</i>" or "<i>fail</i>", it must run the
    first applicable set of steps from the following list. The default origin behavior is only used
    if <var>mode</var> is "<a>No CORS</a>". This algorithm wraps the <a>fetch</a> algorithm above,
    and labels the obtained resource as either <dfn>CORS-same-origin</dfn> or
    <dfn>CORS-cross-origin</dfn>, or blocks the resource entirely.

    <dl class="switch">
      <dt>If the <var>URL</var> has the <a>same origin</a> as <var>origin</var></dt>
      <dt>If the <var>URL</var> is a <a><code>data:</code> URL</a></dt>
      <dt>If the <var>URL</var> is <code>about:blank</code></dt>
      <dd>
        Run these substeps:

        1. <a>Fetch</a> <var>URL</var>, using <var>referrer source</var> if one was specified, with
            the <i>manual redirect flag</i> set.</li>
        2. <i>Loop</i>: Wait for the <a>fetch</a> algorithm to know if the result is a redirect or
            not.
        3. Follow the first appropriate steps from the following list:

            <dl class="switch">
              <dt>
                If the result of the <a>fetch</a> is a redirect, and the <a>origin</a> of the target
                URL of the redirect is not the <a>same origin</a> as <var>origin</var>
              </dt>
              <dd>
                Set <var>URL</var> to the target URL of the redirect and return to the top of the
                <a>potentially CORS-enabled fetch</a> algorithm (this time, one of the other
                branches below might be taken, based on the value of <var>mode</var>).
              </dd>

              <dt>If the result of the <a>fetch</a> is a redirect</dt>
              <dd>
                <p class="note">
                  The <a>origin</a> of the target URL of the redirect is the <a>same origin</a>
                  as <var>origin</var>.
                </p>

                <a>Transparently follow the redirect</a> and jump to the step labeled <i>loop</i>
                above.

              <dt>Otherwise</dt>
              <dd>
                <p class="note">
                  The resource is available, it is not a redirect, and its <a>origin</a> is the
                  <a>same origin</a> as <var>origin</var>.
                </p>

                The <a>tasks</a> from the <a>fetch</a> algorithm are <a>queued</a> normally, and for
                the purposes of the calling algorithm, the obtained resource is
                <a>CORS-same-origin</a>.
              </dd>
            </dl>
      </dd>

      <dt>If <var>mode</var> is "<a>No CORS</a>" and <var>default</var> is <i>taint</i></dt>
      <dd>
        <p class="note">
          The <var>URL</var> does not have the <a>same origin</a> as <var>origin</var>.
        </p>

        <a>Fetch</a> <var>URL</var>, using <var>referrer source</var> if one was
        specified.

        The <a>tasks</a> from the <a>fetch</a> algorithm are <a>queued</a> normally, but for the
        purposes of the calling algorithm, the obtained resource is <a>CORS-cross-origin</a>. The
        user agent may report a cross-origin resource access failure to the user (e.g. in a
        debugging console).
      </dd>

      <dt>If <var>mode</var> is "<a>No CORS</a>"</dt>
      <dd>
        <p class="note">
          The <var>URL</var> does not have the <a>same origin</a> as <var>origin</var>, and
          <var>default</var> is <i>fail</i>.
        </p>

        Discard any data fetched as part of this algorithm, and prevent any <a>tasks</a> from such
        invocations of the <a>fetch</a> algorithm from being <a>queued</a>.

        For the purposes of the calling algorithm, the user agent must act as if there was a fatal
        network error and no resource was obtained. The user agent may report a cross-origin
        resource access failure to the user (e.g. in a debugging console).
      </dd>

      <dt>If <var>mode</var> is "<a>Anonymous</a>" or "<a>Use Credentials</a>"</dt>
      <dd>
        <p class="note">
          The <var>URL</var> does not have the <a>same origin</a> as <var>origin</var>.
        </p>

        Run these steps:

        1. Perform a <a>cross-origin request</a> with the <i>request URL</i> set to <var>URL</var>,
            with the CORS <i>referrer source</i> set to <var>referrer source</var> if one was
            specified, the <i>source origin</i> set to <var>origin</var>, and with the
            <i>omit credentials flag</i> set if <var>mode</var> is "<a>Anonymous</a>" and not set
            otherwise. [[!FETCH]]
        2. Wait for the CORS <a>cross-origin request status</a> to have a value.
        3. Jump to the appropriate step from the following list:

            <dl class="switch">
              <dt>If the CORS <a>cross-origin request status</a> is not <i>success</i></dt>
              <dd>
                Discard all fetched data and prevent any <a>tasks</a> from the <a>fetch</a>
                algorithm from being <a>queued</a>. For the purposes of the calling algorithm, the
                user agent must act as if there was a fatal network error and no resource was
                obtained. If a CORS <a>resource sharing check</a> failed, the user agent may report
                a cross-origin resource access failure to the user (e.g. in a debugging console).
              </dd>

              <dt>If the CORS <a>cross-origin request status</a> is <i>success</i></dt>
              <dd>
                The <a>tasks</a> from the <a>fetch</a> algorithm are <a>queued</a> normally, and for
                the purposes of the calling algorithm, the obtained resource is
                <a>CORS-same-origin</a>.
              </dd>
            </dl>
      </dd>
    </dl>
  </div>


<h3 id="common-dom-interfaces">Common DOM interfaces</h3>

<h4 id="reflecting-content-attributes-in-idl-attributes">Reflecting content attributes in IDL attributes</h4>

  Some IDL attributes are defined to <dfn>reflect</dfn> a particular content attribute. This means
  that on getting, the IDL attribute returns the current value of the content attribute, and on
  setting, the IDL attribute changes the value of the content attribute to the given value.

  <div class="impl">
    In general, on getting, if the content attribute is not present, the IDL attribute must act as
    if the content attribute's value is the empty string; and on setting, if the content attribute
    is not present, it must first be added.

    If a reflecting IDL attribute is a <code>DOMString</code> attribute whose content attribute is
    defined to contain a <a>URL</a>, then on getting, the IDL attribute must <a>resolve</a> the
    value of the content attribute relative to the element and return the resulting
    <a>absolute URL</a> if that was successful, or the empty string otherwise; and on setting, must
    set the content attribute to the specified literal value. If the content attribute is absent,
    the IDL attribute must return the default value, if the content attribute has one, or else the
    empty string.

    If a reflecting IDL attribute is a <code>DOMString</code> attribute whose content attribute is
    defined to contain one or more <a>URLs</a>, then on getting, the IDL attribute must <a>split the
    content attribute on spaces</a> and return the concatenation of <a>resolving</a> each token URL
    to an <a>absolute URL</a> relative to the element, with a single U+0020 SPACE character between
    each URL, ignoring any tokens that did not resolve successfully. If the content attribute is
    absent, the IDL attribute must return the default value, if the content attribute has one, or
    else the empty string. On setting, the IDL attribute must set the content attribute to the
    specified literal value.

    If a reflecting IDL attribute is a <code>DOMString</code> attribute whose content attribute is
    an <a>enumerated attribute</a>, and the IDL attribute is <dfn>limited to only known values</dfn>,
    then, on getting, the IDL attribute must return the conforming value associated with the state
    the attribute is in (in its canonical case), if any, or the empty string if the attribute is in
    a state that has no associated keyword value or if the attribute is not in a defined state (e.g.
    the attribute is missing and there is no <i>missing value default</i>); and on setting, the
    content attribute must be set to the specified new value.

    If a reflecting IDL attribute is a nullable <code>DOMString</code> attribute whose content
    attribute is an <a>enumerated attribute</a>, then, on getting, if the corresponding content
    attribute is in its <i>missing value default</i> then the IDL attribute must return null,
    otherwise, the IDL attribute must return the conforming value associated with the state the
    attribute is in (in its canonical case); and on setting, if the new value is null, the content
    attribute must be removed, and otherwise, the content attribute must be set to the specified new
    value.

    If a reflecting IDL attribute is a <code>DOMString</code> attribute but doesn't fall into any
    of the above categories, then the getting and setting must be done in a transparent,
    case-preserving manner.

    If a reflecting IDL attribute is a <code>boolean</code> attribute, then on getting the IDL
    attribute must return true if the content attribute is set, and false if it is absent. On
    setting, the content attribute must be removed if the IDL attribute is set to false, and must be
    set to the empty string if the IDL attribute is set to true. (This corresponds to the rules for
    <a>boolean content attributes</a>.)

    If a reflecting IDL attribute has a signed integer type (<code>long</code>) then, on getting,
    the content attribute must be parsed according to the <a>rules for parsing signed integers</a>,
    and if that is successful, and the value is in the range of the IDL attribute's type, the
    resulting value must be returned. If, on the other hand, it fails or returns an out of range
    value, or if the attribute is absent, then the default value must be returned instead, or 0 if
    there is no default value. On setting, the given value must be converted to the shortest
    possible string representing the number as a <a>valid integer</a> and then that string must be
    used as the new content attribute value.

    If a reflecting IDL attribute has a signed integer type (<code>long</code>)
    that is <dfn>limited to only non-negative numbers</dfn> then, on getting, the content attribute
    must be parsed according to the <a>rules for parsing non-negative integers</a>, and if that
    is successful, and the value is in the range of the IDL attribute's type, the resulting value
    must be returned. If, on the other hand, it fails or returns an out of range value, or if the
    attribute is absent, the default value must be returned instead, or -1 if there is no
    default value. On setting, if the value is negative, the user agent must throw an
    <code>IndexSizeError</code> exception. Otherwise, the given value must be converted to the
    shortest possible string representing the number as a <a>valid non-negative integer</a> and then
    that string must be used as the new content attribute value.

    If a reflecting IDL attribute has an <em>unsigned</em> integer type (<code>unsigned long</code>)
    then, on getting, the content attribute must be parsed according to the <a>rules for parsing
    non-negative integers</a>, and if that is successful, and the value is in the range 0 to
    2147483647 inclusive, the resulting value must be returned. If, on the other hand, it fails or
    returns an out of range value, or if the attribute is absent, the default value must be returned
    instead, or 0 if there is no default value. On setting, first, if the new value is in the range
    0 to 2147483647, then let <var>n</var> be the new value, otherwise let <var>n</var> be the
    default value, or 0 if there is no default value; then, <var>n</var> must be converted to the
    shortest possible string representing the number as a <a>valid non-negative integer</a> and that
    string must be used as the new content attribute value.

    If a reflecting IDL attribute has an unsigned integer type (<code>unsigned long</code>) that is
    <dfn>limited to only non-negative numbers greater than zero</dfn>, then the behavior is similar
    to the previous case, but zero is not allowed. On getting, the content attribute must first be
    parsed according to the <a>rules for parsing non-negative integers</a>, and if that is
    successful, and the value is in the range 1 to 2147483647 inclusive, the resulting value must be
    returned. If, on the other hand, it fails or returns an out of range value, or if the attribute
    is absent, the default value must be returned instead, or 1 if there is no default value. On
    setting, if the value is zero, the user agent must throw an <code>IndexSizeError</code>
    exception. Otherwise, first, if the new value is in the range 1 to 2147483647, then let
    <var>n</var> be the new value, otherwise let <var>n</var> be the default value, or 1 if there is
    no default value; then, <var>n</var> must be converted to the shortest possible string
    representing the number as a <a>valid non-negative integer</a> and that string must be used as
    the new content attribute value.

    If a reflecting IDL attribute has a floating-point number type (<code>double</code> or
    <code>unrestricted double</code>), then, on getting, the content attribute must be parsed
    according to the <a>rules for parsing floating-point number values</a>, and if that is
    successful, the resulting value must be returned. If, on the other hand, it fails, or if the
    attribute is absent, the default value must be returned instead, or 0.0 if there is no default
    value. On setting, the given value must be converted to the <a>best representation of the number
    as a floating-point number</a> and then that string must be used as the new content attribute
    value.

    If a reflecting IDL attribute has a floating-point number type (<code>double</code> or
    <code>unrestricted double</code>) that is <dfn>limited to numbers greater than zero</dfn>, then
    the behavior is similar to the previous case, but zero and negative values are not allowed. On
    getting, the content attribute must be parsed according to the <a>rules for parsing
    floating-point number values</a>, and if that is successful and the value is greater than 0.0,
    the resulting value must be returned. If, on the other hand, it fails or returns an out of range
    value, or if the attribute is absent, the default value must be returned instead, or 0.0 if
    there is no default value. On setting, if the value is less than or equal to zero, then the
    value must be ignored. Otherwise, the given value must be converted to the
    <a>best representation of the number as a floating-point number</a> and then that string must be
    used as the new content attribute value.

    <p class="note">
      The values Infinity and Not-a-Number (NaN) values throw an exception on setting, as defined in
      the Web IDL specification. [[!WEBIDL]]
    </p>

    If a reflecting IDL attribute has the type <code>DOMTokenList</code> or
    <code>DOMSettableTokenList</code>, then on getting it must return a <code>DOMTokenList</code> or
    <code>DOMSettableTokenList</code> object (as appropriate) whose associated element is the
    element in question and whose associated attribute's local name is the name of the attribute in
    question. The same <code>DOMTokenList</code> or <code>DOMSettableTokenList</code> object must be
    returned every time for each attribute.

    If a reflecting IDL attribute has the type <code>HTMLElement</code>, or an interface that
    descends from <code>HTMLElement</code>, then, on getting, it must run the following algorithm
    (stopping at the first point where a value is returned):

    1. If the corresponding content attribute is absent, then the IDL attribute must return null.
    2. Let <var>candidate</var> be the element that the <code>document.getElementById()</code>
        method would find when called on the content attribute's element's <a>node document</a> if
        it were passed as its argument the current value of the corresponding content attribute.
    3. If <var>candidate</var> is null, or if it is not type-compatible with the IDL attribute, then
        the IDL attribute must return null.
    4. Otherwise, it must return <var>candidate</var>.

    On setting, if the given element has an <code>id</code> attribute, and has the same
    <a>home subtree</a> as the element of the attribute being set, and the given element is the
    first element in that <a>home subtree</a> whose <a>ID</a> is the value of that <code>id</code>
    attribute, then the content attribute must be set to the value of that <code>id</code>
    attribute. Otherwise, the content attribute must be set to the empty string.
  </div>

<h4 id="collections">Collections</h4>

  The <code>HTMLAllCollection</code>, <code>HTMLFormControlsCollection</code>,
  <code>HTMLOptionsCollection</code>, interfaces are <a>collections</a> derived from the
  <code>HTMLCollection</code> interface.

<h5 id="the-htmlallcollection-interface">The <code>HTMLAllCollection</code> interface</h5>

  The <code>HTMLAllCollection</code> interface is used for the legacy <code>document.all</code>
  attribute. It operates similarly to <code>HTMLCollection</code>; the main differences are that its
  <code>namedItem()</code> method returns an <code>HTMLCollection</code> object when there are
  multiple matching elements, and that its <code>item()</code> method can be used as a synonym for
  its <code>namedItem()</code> method.

  <p class="note">
    All <code>HTMLAllCollection</code> objects are rooted at a <code>Document</code> and have a
    filter that matches all elements, so the elements <a>represented by the collection</a> of an
    <code>HTMLAllCollection</code> object consist of all the descendant elements of the root
    <code>Document</code>.
  </p>

  <pre class="idl" data-highlight="webidl">
    interface HTMLAllCollection {
      readonly attribute unsigned long length;
      getter Element? item(unsigned long index);
      (HTMLCollection or Element)? item(DOMString name);
      legacycaller getter (HTMLCollection or Element)? namedItem(DOMString name);
    };
  </pre>

  <dl class="domintro">
    <dt><var>collection</var> . <code>length</code></dt>
    <dd>Returns the number of elements in the collection.</dd>

    <dt><var>element</var> = <var>collection</var> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>index</var>]</dt>
    <dd>
      Returns the item with index <var>index</var> from the collection. The items are sorted in
      <a>tree order</a>.
    </dd>

    <dt><var>element</var> = <var>collection</var> . <code>item</code>(<var>name</var>)</dt>
    <dt><var>collection</var> = <var>collection</var> . <code>item</code>(<var>name</var>)</dt>
    <dt><var>element</var> = <var>collection</var> . <code>namedItem</code>(<var>name</var>)</dt>
    <dt><var>collection</var> = <var>collection</var> . <code>namedItem</code>(<var>name</var>)</dt>
    <dt><var>element</var> = <var>collection</var>(<var>name</var>)</dt>
    <dt><var>collection</var> = <var>collection</var>(<var>name</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>name</var>]</dt>
    <dt><var>collection</var> = <var>collection</var>[<var>name</var>]</dt>
    <dd>
      Returns the item with <a>ID</a> or name <var>name</var> from the collection.

      If there are multiple matching items, then an <code>HTMLCollection</code> object containing
      all those elements is returned.

      Only <code>button</code>, <code>form</code>, <code>iframe</code>, <code>input</code>,
      <code>map</code>, <code>meta</code>, <code>object</code>, <code>select</code>, and
      <code>textarea</code> elements can have a name for the purpose of this method; their name is
      given by the value of their <code>name</code> attribute.
    </dd>
  </dl>

  <div class="impl">
    The object's <a>supported property indices</a> are as defined for <code>HTMLCollection</code>
    objects.

    The following elements are <dfn>"all"-named elements</dfn>: <code>a</code>, <code>applet</code>,
    <code>button</code>, <code>embed</code>, <code>form</code>, <code>frame</code>,
    <code>frameset</code>, <code>iframe</code>, <code>img</code>, <code>input</code>,
    <code>map</code>, <code>meta</code>, <code>object</code>, <code>select</code>, and
    <code>textarea</code>

    The <a>supported property names</a> consist of the non-empty values of all the <code>id</code>
    attributes of all the elements <a>represented by the collection</a>, and the non-empty values of
    all the <code>name</code> attributes of all the <a>"all"-named elements</a> <a>represented by
    the collection</a>, in <a>tree order</a>, ignoring later duplicates, with the <code>id</code> of
    an element preceding its <code>name</code> if it contributes both, they differ from each other,
    and neither is the duplicate of an earlier entry.

    The properties exposed in this way must be <a>unenumerable</a>.

    On getting, the <code>length</code> attribute must return the number of nodes
    <a>represented by the collection</a>.

    The <code>item(<var>index</var>)</code> method must return the <var>index</var><sup>th</sup>
    element in the collection. If there is no <var>index</var><sup>th</sup> element in the
    <a>collection</a>, then the method must return null.

    The <code>item(<var>name</var>)</code> and <code>namedItem(<var>name</var>)</code> methods must
    act according to the following algorithm:

    1. If <var>name</var> is the empty string, return null and stop the algorithm.
    2. Let <var>collection</var> be an <code>HTMLCollection</code> object rooted at the same
        <code>Document</code> as the <code>HTMLAllCollection</code> object on which the method was
        invoked, whose filter matches only elements that are either:
        * <a>"all"-named elements</a> with a <code>name</code> attribute equal to <var>name</var>,
            or,
        * elements with an <a>ID</a> equal to <var>name</var>.
    3. If, at the time the method is called, there is exactly one node in <var>collection</var>,
        then return that node and stop the algorithm.
    4. Otherwise, if, at the time the method is called, <var>collection</var> is empty, return null
        and stop the algorithm.
    5. Otherwise, return <var>collection</var>.
  </div>

<h5 id="the-htmlformcontrolscollection-interface">The <code>HTMLFormControlsCollection</code> interface</h5>

  The <code>HTMLFormControlsCollection</code> interface is used for <a>collections</a> of
  <a>listed elements</a> in <code>form</code> and <code>fieldset</code> elements.

  <pre class="idl" data-highlight="webidl">
    interface HTMLFormControlsCollection : HTMLCollection {
      // inherits length and item()
      getter (RadioNodeList or Element)? namedItem(DOMString name); // shadows inherited namedItem()
    };

    interface RadioNodeList : NodeList {
              attribute DOMString value;
    };
  </pre>

  <dl class="domintro">
    <dt><var>collection</var> . <code>length</code></dt>
    <dd>Returns the number of elements in the collection.</dd>

    <dt><var>element</var> = <var>collection</var> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>index</var>]</dt>
    <dd>
      Returns the item with index <var>index</var> from the collection. The items are sorted in
      <a>tree order</a>.
    </dd>

    <dt><var>element</var> = <var>collection</var> . <code>namedItem</code>(<var>name</var>)</dt>
    <dt>
      <var>radioNodeList</var> = <var>collection</var> . <code>namedItem</code>(<var>name</var>)
    </dt>
    <dt><var>element</var> = <var>collection</var>[<var>name</var>]</dt>
    <dt><var>radioNodeList</var> = <var>collection</var>[<var>name</var>]</dt>
    <dd>
      Returns the item with <a>ID</a> or <code>name</code> <var>name</var> from the collection.

      If there are multiple matching items, then a <code>RadioNodeList</code> object containing all
      those elements is returned.
    </dd>

    <dt><var>radioNodeList</var> . <var>value</var> [ = <var>value</var> ]</dt>
    <dd>
      Returns the value of the first checked radio button represented by the object.

      Can be set, to check the first radio button with the given value represented by the object.
    </dd>
  </dl>

  <div class="impl">
    The object's <a>supported property indices</a> are as defined for <code>HTMLCollection</code>
    objects.

    The <a>supported property names</a> consist of the non-empty values of all the <code>id</code>
    and <code>name</code> attributes of all the elements <a>represented by the collection</a>, in
    <a>tree order</a>, ignoring later duplicates, with the <code>id</code> of an element preceding
    its <code>name</code> if it contributes both, they differ from each other, and neither is the
    duplicate of an earlier entry.

    The properties exposed in this way must be <a>unenumerable</a>.

    The <dfn><code>namedItem(<var>name</var>)</code></dfn> method must act according to the
    following algorithm:

    1. If <var>name</var> is the empty string, return null and stop the algorithm.
    2. If, at the time the method is called, there is exactly one node in the collection that has
        either an <code>id</code> attribute or a <code>name</code> attribute equal to
        <var>name</var>, then return that node and stop the algorithm.
    3. Otherwise, if there are no nodes in the collection that have either an <code>id</code>
        attribute or a <code>name</code> attribute equal to <var>name</var>, then return null and
        stop the algorithm.
    4. Otherwise, create a new <code>RadioNodeList</code> object representing a <a>live</a> view of
        the <code>HTMLFormControlsCollection</code> object, further filtered so that the only nodes
        in the <code>RadioNodeList</code> object are those that have either an <code>id</code>
        attribute or a <code>name</code> attribute equal to <var>name</var>. The nodes in the
        <code>RadioNodeList</code> object must be sorted in <a>tree order</a>.
    5. Return that <code>RadioNodeList</code> object.

    <hr />

    Members of the <code>RadioNodeList</code> interface inherited from the <code>NodeList</code>
    interface must behave as they would on a <code>NodeList</code> object.

    The <dfn><code>value</code></dfn> IDL attribute on the <code>RadioNodeList</code> object, on
    getting, must return the value returned by running the following steps:

    1. Let <var>element</var> be the first element in <a>tree order</a> represented by the
        <code>RadioNodeList</code> object that is an <code>input</code> element whose
        <code>type</code> attribute is in the <a>Radio Button</a> state and whose <a>checkedness</a>
        is true. Otherwise, let it be null.
    2. If <var>element</var> is null, return the empty string.
    3. If <var>element</var> is an element with no <code>value</code> attribute, return the string
        "<code>on</code>".
    4. Otherwise, return the value of <var>element</var>'s <code>value</code> attribute.

    On setting, the <code>value</code> IDL attribute must run the following steps:

    1. If the new value is the string "<code>on</code>": let <var>element</var> be the first element
        in <a>tree order</a> represented by the <code>RadioNodeList</code> object that is an
        <code>input</code> element whose <code>type</code> attribute is in the <a>Radio Button</a>
        state and whose <code>value</code> content attribute is either absent, or present and equal
        to the new value, if any. If no such element exists, then instead let <var>element</var> be
        null.

        Otherwise: let <var>element</var> be the first element in <a>tree order</a>
        represented by the <code>RadioNodeList</code> object that is an <code>input</code> element
        whose <code>type</code> attribute is in the <a>Radio Button</a> state and whose
        <code>value</code> content attribute is present and equal to the new value, if any. If no
        such element exists, then instead let <var>element</var> be null.
    2. If <var>element</var> is not null, then set its <a>checkedness</a> to true.
  </div>

<h5 id="the-htmloptionscollection-interface">The <code>HTMLOptionsCollection</code> interface</h5>

  The <code>HTMLOptionsCollection</code> interface is used for <a>collections</a> of
  <code>option</code> elements. It is always rooted on a <code>select</code> element and has
  attributes and methods that manipulate that element's descendants.

  <pre class="idl" data-highlight="webidl">
    interface HTMLOptionsCollection : HTMLCollection {
      // inherits item(), namedItem()
      attribute unsigned long length; // shadows inherited length
      setter void (unsigned long index, HTMLOptionElement? option);
      void add((HTMLOptionElement or HTMLOptGroupElement) element, optional (HTMLElement or long)? before = null);
      void remove(long index);
      attribute long selectedIndex;
    };
  </pre>

  <dl class="domintro">
    <dt><var>collection</var> . <code>length</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns the number of elements in the collection.

      When set to a smaller number, truncates the number of <code>option</code> elements in the
      corresponding container.

      When set to a greater number, adds new blank <code>option</code> elements to that container.
    </dd>

    <dt><var>element</var> = <var>collection</var> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>index</var>]</dt>
    <dd>
      Returns the item with index <var>index</var> from the collection. The items are sorted in
      <a>tree order</a>.
    </dd>

    <dt><var>collection</var>[<var>index</var>] = <var>element</var></dt>
    <dd>
      When <var>index</var> is a greater number than the number of items in the collection, adds
      new blank <code>option</code> elements in the corresponding container.

      When set to null, removes the item at index <var>index</var> from the collection.

      When set to an <code>option</code> element, adds or replaces it at index <var>index</var>
      from the collection.
    </dd>

    <dt><var>element</var> = <var>collection</var> . <code>namedItem</code>(<var>name</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>name</var>]</dt>
    <dd>
      Returns the item with <a>ID</a> or <code>name</code> <var>name</var> from the collection.

      If there are multiple matching items, then the first is returned.
    </dd>

    <dt><var>collection</var> . <code>add</code>(<var>element</var> [, <var>before</var> ] )</dt>
    <dd>
      Inserts <var>element</var> before the node given by <var>before</var>.

      The <var>before</var> argument can be a number, in which case <var>element</var> is inserted
      before the item with that number, or an element from the collection, in which case
      <var>element</var> is inserted before that element.

      If <var>before</var> is omitted, null, or a number out of range, then <var>element</var> will
      be added at the end of the list.

      This method will throw a <code>HierarchyRequestError</code> exception if <var>element</var> is
      an ancestor of the element into which it is to be inserted.
    </dd>

    <dt><var>collection</var> . <code>remove</code>(<var>index</var>)</dt>
    <dd>Removes the item with index <var>index</var> from the collection.</dd>

    <dt><var>collection</var> . <code>selectedIndex</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns the index of the first selected item, if any, or -1 if there is no selected
      item.

      Can be set, to change the selection.
    </dd>
  </dl>

<div class="impl">
  The object's <a>supported property indices</a> are as defined for <code>HTMLCollection</code>
  objects.

  On getting, the <dfn><code>length</code></dfn> attribute must return the number of nodes
  <a>represented by the collection</a>.

  On setting, the behavior depends on whether the new value is equal to, greater than, or less than
  the number of nodes <a>represented by the collection</a> at that time. If the number is the same,
  then setting the attribute must do nothing. If the new value is greater, then <var>n</var> new
  <code>option</code> elements with no attributes and no child nodes must be appended to the
  <code>select</code> element on which the <code>HTMLOptionsCollection</code> is rooted, where
  <var>n</var> is the difference between the two numbers (new value minus old value). Mutation
  events must be fired as if a <code>DocumentFragment</code> containing the new <code>option</code>
  elements had been inserted. If the new value is lower, then the last <var>n</var> nodes in the
  collection must be removed from their parent nodes, where <var>n</var> is the difference between
  the two numbers (old value minus new value).

  <p class="note">
    Setting <code>length</code> never removes or adds any <code>optgroup</code> elements, and never
    adds new children to existing <code>optgroup</code> elements (though it can remove children from
    them).
  </p>

  The <a>supported property names</a> consist of the non-empty values of all the <code>id</code> and
  <code>name</code> attributes of all the elements <a>represented by the collection</a>, in
  <a>tree order</a>, ignoring later duplicates, with the <code>id</code> of an element preceding its
  <code>name</code> if it contributes both, they differ from each other, and neither is the
  duplicate of an earlier entry.

  The properties exposed in this way must be <a>unenumerable</a>.

  When the user agent is to <dfn>set the value of a new indexed property or set the value of an
  existing indexed property</dfn> for a given property index <var>index</var> to a new value
  <var>value</var>, it must run the following algorithm:

  1. If <var>value</var> is null, invoke the steps for the <code>remove</code> method with
      <var>index</var> as the argument, and abort these steps.
  2. Let <var>length</var> be the number of nodes <a>represented by the collection</a>.
  3. Let <var>n</var> be <var>index</var> minus <var>length</var>.
  4. If <var>n</var> is greater than zero, then <a>append</a> a <code>DocumentFragment</code>
      consisting of <a><var>n</var>-1</a> new <code>option</code> elements with no attributes and no
      child nodes to the <code>select</code> element on which the <code>HTMLOptionsCollection</code>
      is rooted.
  5. If <var>n</var> is greater than or equal to zero, <a>append</a> <var>value</var> to the
      <code>select</code> element. Otherwise, <a>replace</a> the <var>index</var>th element in the
      collection by <var>value</var>.

  The <dfn><code>add(<var>element</var>, <var>before</var>)</code></dfn> method must act according
  to the following algorithm:

  1. If <var>element</var> is an ancestor of the <code>select</code> element on which the
      <code>HTMLOptionsCollection</code> is rooted, then throw a <code>HierarchyRequestError</code>
      exception and abort these steps.
  2. If <var>before</var> is an element, but that element isn't a descendant of the
      <code>select</code> element on which the <code>HTMLOptionsCollection</code> is rooted, then
      throw a <code>NotFoundError</code> exception and abort these steps.
  3. If <var>element</var> and <var>before</var> are the same element, then return and abort these
      steps.
  4. If <var>before</var> is a node, then let <var>reference</var> be that node. Otherwise, if
      <var>before</var> is an integer, and there is a <var>before</var>th node in the collection,
      let <var>reference</var> be that node. Otherwise, let <var>reference</var> be null.
  5. If <var>reference</var> is not null, let <var>parent</var> be the parent node of
      <var>reference</var>. Otherwise, let <var>parent</var> be the <code>select</code> element on
      which the <code>HTMLOptionsCollection</code> is rooted.
  6. Act as if the DOM <code>insertBefore()</code> method was invoked on the <var>parent</var> node,
      with <var>element</var> as the first argument and <var>reference</var> as the second argument.

  The <dfn><code>remove(<var>index</var>)</code></dfn> method must act according to the following
  algorithm:

  1. If the number of nodes <a>represented by the collection</a> is zero, abort these steps.
  2. If <var>index</var> is not a number greater than or equal to 0 and less than the number of
      nodes <a>represented by the collection</a>, abort these steps.
  3. Let <var>element</var> be the <var>index</var>th element in the collection.
  4. Remove <var>element</var> from its parent node.

  The <dfn><code>selectedIndex</code></dfn> IDL attribute must act like the identically named
  attribute on the <code>select</code> element on which the <code>HTMLOptionsCollection</code> is
  rooted
</div>

<h4 id="the-domstringmap-interface">The <code>DOMStringMap</code> interface</h4>

  The <code>DOMStringMap</code> interface represents a set of name-value pairs. It exposes these
  using the scripting language's native mechanisms for property access.

<div class="impl">
  When a <code>DOMStringMap</code> object is instantiated, it is associated with three algorithms,
  one for getting the list of name-value pairs, one for setting names to certain values, and one for
  deleting names.

  <pre class="idl" data-highlight="webidl">
    [OverrideBuiltins]
    interface <dfn>DOMStringMap</dfn> {
      <a>getter</a> DOMString (DOMString name);
      <a>setter</a> void (DOMString name, DOMString value);
      <a>deleter</a> void (DOMString name);
    };
  </pre>

  The <a>supported property names</a> on a <code>DOMStringMap</code> object at any instant are the
  names of each pair returned from the algorithm for getting the list of name-value pairs at that
  instant, in the order returned.

  To <dfn>determine the value of a named property</dfn> <var>name</var> in a
  <code>DOMStringMap</code>, the user agent must return the value component of the name-value pair
  whose name component is <var>name</var> in the list returned by the algorithm for getting the list
  of name-value pairs.

  To <dfn>set</dfn> the value of a named property <var>name</var> to value <var>value</var>, the
  algorithm for setting names to certain values must be run, passing <var>name</var> as the name and
  <var>value</var> as the value.

  To <dfn>delete an existing named property</dfn> <var>name</var>, the algorithm for deleting names
  must be run, passing <var>name</var> as the name.

  <p class="note">
    The <code>DOMStringMap</code> interface definition here is only intended for JavaScript
    environments. Other language bindings will need to define how <code>DOMStringMap</code> is to be
    implemented for those languages.
  </p>
</div>

<div class="example">
  The <code>dataset</code> attribute on elements exposes the <code>data-*</code> attributes on the
  element.

  Given the following fragment and elements with similar constructions:

  <pre highlight="html">&lt;img class="tower" id="tower5" data-x="12" data-y="5" data-ai="robotarget" data-hp="46" data-ability="flames" src="towers/rocket.png" alt="Rocket Tower"></pre>

  ...one could imagine a function <code>splashDamage()</code> that takes some arguments, the first
  of which is the element to process:

  <pre highlight="javascript">
    function splashDamage(node, x, y, damage) {
      if (node.classList.contains('tower') && // checking the 'class' attribute
          node.dataset.x == x && // reading the 'data-x' attribute
          node.dataset.y == y) { // reading the 'data-y' attribute
        var hp = parseInt(node.dataset.hp); // reading the 'data-hp' attribute
        hp = hp - damage;
        if (hp &lt; 0) {
          hp = 0;
          node.dataset.ai = 'dead'; // setting the 'data-ai' attribute
          delete node.dataset.ability; // removing the 'data-ability' attribute
        }
        node.dataset.hp = hp; // setting the 'data-hp' attribute
      }
    }
  </pre>
</div>

<h4 id="the-domelementmap-interface">The <code>DOMElementMap</code> interface</h4>

  The <code>DOMElementMap</code> interface represents a set of name-element mappings. It exposes
  these using the scripting language's native mechanisms for property access.

  <div class="impl">

  When a <code>DOMElementMap</code> object is instantiated, it is associated with three algorithms,
  one for getting the list of name-element mappings, one for mapping a name to a certain element,
  and one for deleting mappings by name.

  <pre class="idl" data-highlight="webidl">
    interface DOMElementMap {
      getter Element (DOMString name);
      setter creator void (DOMString name, Element value);
      deleter void (DOMString name);
    };
  </pre>

  The <a>supported property names</a> on a <code>DOMElementMap</code> object at any instant are the
  names for each mapping returned from the algorithm for getting the list of name-element mappings
  at that instant, in the order returned.

  To <dfn>determine the value of a named property</dfn> <var>name</var> in a
  <code>DOMElementMap</code>, the user agent must return the element component of the name-element
  mapping whose name component is <var>name</var> in the list returned by the algorithm for getting
  the list of name-element mappings.

  To set the value of a <dfn>new</dfn> or <dfn>existing</dfn> named property <var>name</var> to
  value <var>value</var>, the algorithm for mapping a name to a certain element must be run, passing
  <var>name</var> as the name <var>value</var> as the element.

  To <dfn>delete an existing named property</dfn> <var>name</var>, the algorithm for deleting
  mappings must be run, passing <var>name</var> as the name component of the mapping to be deleted.

  <p class="note">
    The <code>DOMElementMap</code> interface definition here is only intended for JavaScript
    environments. Other language bindings will need to define how <code>DOMElementMap</code> is to
    be implemented for those languages.
  </p>
</div>

<h4 id="transferable-objects">Transferable objects</h4>

  Some objects support being copied and closed in one operation. This is called <i>transferring</i>
  the object, and is used in particular to transfer ownership of unsharable or expensive resources
  across worker boundaries.

  The following <code>Transferable</code> types exist:

  * <code>ArrayBuffer</code> [[!ECMA-262]]
  * <code>CanvasProxy</code> (defined in this specification)
  * <code>MessagePort</code>

<div class="impl">
  The following IDL block formalizes this:

  <pre class="idl" data-highlight="webidl">
    typedef (ArrayBuffer or CanvasProxy or MessagePort) Transferable;
  </pre>

  To <dfn>transfer a <code>Transferable</code> object</dfn> to a new owner, the user agent must run
  the steps defined for the type of object in question. The steps will return a new object of the
  same type, and will permanently <dfn>neuter</dfn> the original object. (This is an irreversible
  and non-idempotent operation; once an object has been transferred, it cannot be transferred, or
  indeed used, again.)

  To <a>transfer</a> an <code>ArrayBuffer</code> object <var>old</var> to a new owner
  <var>owner</var>, a user agent must create a new <code>ArrayBuffer</code> object pointing at the
  same underlying data as <var>old</var>, thus obtaining <var>new</var>, must <a>neuter</a> the
  <var>old</var> object, and must finally return <var>new</var>. [[!ECMA-262]]

  <p class="note">
    Rules for how to <a>transfer a <code>CanvasProxy</code> object</a> and how to
    <a>transfer a <code>MessagePort</code> object</a> are given in the relevant sections of this
    specification.
  </p>
</div>

<div class="impl">
  <h4 id="safe-passing-of-structured-data">Safe passing of structured data</h4>

  When a user agent is required to obtain a <dfn>structured clone</dfn> of a value, optionally with
  a <i>transfer map</i>, it must run the following algorithm, which either returns a separate value,
  or throws an exception. If a <i>transfer map</i> is provided, it consists of an association list
  of <code>Transferable</code> objects to placeholder objects.

  1. Let <var>input</var> be the value being cloned.
  2. Let <var>transfer map</var> be the <i>transfer map</i> passed to the algorithm, if any, or the
      empty list otherwise.
  3. Let <var>memory</var> be an association list of pairs of objects, initially empty. This is used
      to handle duplicate references. In each pair of objects, one is called the <i>source</i>
      object and the other the <i>destination</i> object.
  4. For each mapping in <var>transfer map</var>, add a mapping from the <code>Transferable</code>
      object (the source object) to the placeholder object (the destination object) to
      <var>memory</var>.
  5. Let <var>output</var> be the value resulting from calling the <a>internal structured cloning
      algorithm</a> with <var>input</var> as the "<var>input</var>" argument, and
      <var>memory</var> as the "<var>memory</var>" argument.
  6. Return <var>output</var>.

  The <dfn>internal structured cloning algorithm</dfn> is always called with two arguments,
  <var>input</var> and <var>memory</var>, and its behavior is as follows:

  1. If <var>input</var> is the source object of a pair of objects in <var>memory</var>, then return
      the destination object in that pair of objects and abort these steps.
  2. If <var>input</var> is a primitive value, then return that value and abort these steps.
  3. Let <var>deep clone</var> be <i>none</i>.
  4. The <var>input</var> value is an object. Jump to the appropriate step below:
      <dl class="switch">
        <dt>If <var>input</var> is a <code>Boolean</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed Boolean object with the same value as
          <var>input</var>.
        </dd>

        <dt>If <var>input</var> is a <code>Number</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed Number object with the same value as
          <var>input</var>.
        </dd>

        <dt>If <var>input</var> is a <code>String</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed String object with the same value as
          <var>input</var>.
        </dd>

        <dt>If <var>input</var> is a <code>Date</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed <code>Date</code> object with the same
          value as <var>input</var>.
        </dd>

        <dt>If <var>input</var> is a <code>RegExp</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed <code>RegExp</code> object with the same
          pattern and flags as <var>input</var>.

          <p class="note">The value of the <code>lastIndex</code> property is not copied.</p>
        </dd>

        <dt>If <var>input</var> is a <code>Blob</code> object</dt>
        <dd>
          If <var>input</var> has been disabled through the <code>close()</code> method, throw a
          <code>DataCloneError</code> exception and abort the overall <a>structured clone</a>
          algorithm. Otherwise, let <var>output</var> be a newly constructed object of the same
          class as <var>input</var>, corresponding to the same underlying data.
        </dd>

        <dt>If <var>input</var> is a <code>FileList</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed <code>FileList</code> object containing a
          list of newly constructed <code>File</code> objects corresponding to the same underlying
          data as those in <var>input</var>, maintaining their relative order.
        </dd>

        <dt>If <var>input</var> is an <code>ImageData</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed <code>ImageData</code> object whose
          <code>width</code> and <code>height</code> have values equal to the corresponding
          attributes on <var>input</var>, and whose <code>data</code> attribute has the value
          obtained from invoking the <a>internal structured cloning algorithm</a> recursively with
          the value of the <code>data</code> attribute on <var>input</var> as the new
          "<var>input</var>" argument and <var>memory</var> as the new "<var>memory</var>" argument.
        </dd>

        <dt>If <var>input</var> is an <code>ImageBitmap</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed <code>ImageBitmap</code> object whose bitmap
          data is a copy of <var>input</var>'s bitmap data.
        </dd>

        <dt>If <var>input</var> is an <code>ArrayBuffer</code> object</dt>
        <dd>
          If <var>input</var> has been <a>neutered</a>, throw a <code>DataCloneError</code>
          exception and abort the overall <a>structured clone</a> algorithm. Otherwise, let
          <var>output</var> be a newly constructed <code>ArrayBuffer</code> object whose contents
          are a copy of <var>input</var>'s contents, with the same length.
        </dd>

        <dt>If <var>input</var> is an object with a \[[DataView]] internal slot</dt>
        <dd>
          Let <var>output</var> be a newly constructed object of the same class as <var>input</var>,
          with its \[[DataView]] internal property present, its
          \[[ViewedArrayBuffer]] internal property set to the value obtained from invoking
          the <a>internal structured cloning algorithm</a> recursively with the value of the
          internal property on <var>input</var> as the new "<var>input</var>" argument and
          <var>memory</var> as the new "<var>memory</var>" argument, and with the
          \[[ByteLength]] and \[[ByteOffset]] internal properties set to the same
          value as their counterparts on <var>input</var>.
        </dd>

        <dt>If <var>input</var> is an <code>Array</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed empty <code>Array</code> object whose
          <code>length</code> is equal to the <code>length</code> of <var>input</var>, and set
          <var>deep clone</var> to <i>own</i>.

          <p class="note">This means that the length of sparse arrays is preserved.</p>
        </dd>

        <dt>If <var>input</var> is an <code>Object</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed empty <code>Object</code> object, and set
          <var>deep clone</var> to <i>own</i>.
        </dd>

        <dt>If <var>input</var> is a <code>Map</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed empty <code>Map</code> object, and set
          <var>deep clone</var> to <i>map</i>.
        </dd>

        <dt>If <var>input</var> is a <code>Set</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed empty <code>Set</code> object, and set
          <var>deep clone</var> to <i>set</i>.
        </dd>

        <dt>If <var>input</var> is an object that another specification defines how to clone</dt>
        <dd>
          Let <var>output</var> be a clone of the object as defined by the other specification.
        </dd>

        <dt>
          If <var>input</var> is another native object type (e.g. <code>Error</code>,
          <code>Function</code>)
        </dt>
        <dt>If<var>input</var> is a host object (e.g. a DOM node)</dt>
        <dd>
          Throw a <code>DataCloneError</code> exception and abort the overall
          <a>structured clone</a> algorithm.
        </dd>
      </dl>

      For the purposes of the algorithm above, an object is a particular type of object
      <var>class</var> if its \[[Class]] internal property is equal to <var>class</var>.

      <p class="example">
        For example, "<var>input</var> is an <code>Object</code> object" if <var>input</var>'s
        \[[Class]] internal property is equal to the string "<code>Object</code>".
      </p>
  5. Add a mapping from <var>input</var> (the source object) to <var>output</var> (the destination
      object) to <var>memory</var>.
  6. If <var>deep clone</var> is set to <i>map</i>, then run these substeps. These substeps use the
      terminology and typographic conventions used in the JavaScript specification's definition of
      Maps. [[!ECMA-262]]

      1. Let <var>original</var> be the List that is the value of <var>input</var>'s
          \[[MapData]] internal slot. [[!ECMA-262]]
      2. Let <var>source</var> be a new empty List.
      3. For each Record {\[[key]], \[[value]]} <var>entry</var> that is an
          element of <var>original</var>, run the following substeps:
          1. Let <var>new entry</var> be the Record {\[[key]]: <var>entry</var>.
              \[[key]], \[[value]]: <var>entry</var>.\[[value]]}.
          2. If <var>new entry</var>.\[[key]] is not <i>empty</i>, append <var>new entry</var> as
              the last element of <var>source</var>.
      4. Let <var>target</var> be the List that is the value of <var>output</var>'s
          \[[MapData]] internal slot.
      5. For each Record {\[[key]], \[[value]]} <var>entry</var> that is an
          element of <var>source</var>, run the following substeps:
          1. Let <var>key</var> have the value obtained from invoking the
              <a>internal structured cloning algorithm</a> recursively with <var>entry</var>.
              \[[key]] as the new "<var>input</var>" argument and <var>memory</var> as the
              new "<var>memory</var>" argument.
          2. Let <var>value</var> have the value obtained from invoking the
              <a>internal structured cloning algorithm</a> recursively with <var>entry</var>.
              \[[value]] as the new "<var>input</var>" argument and <var>memory</var> as
              the new "<var>memory</var>" argument.
          3. Let <var>new entry</var> be the Record {\[[key]]: <var>key</var>,
              \[[value]]: <var>value</var>}.
          4. Append <var>new entry</var> as the last element of <var>target</var>.

      6. Set <var>deep clone</var> to <i>own</i>.
  7. If <var>deep clone</var> is set to <i>set</i>, then run these substeps. These substeps use the
      terminology and typographic conventions used in the JavaScript specification's definition of
      Sets. [[!ECMA-262]]
      1. Let <var>source</var> be a copy of the List that is the value of <var>input</var>'s
          \[[SetData]] internal slot. [[!ECMA-262]]
      2. Let <var>target</var> be the List that is the value of <var>output</var>'s
          \[[SetData]] internal slot.
      3. For each <var>entry</var> that is an element of <var>source</var> that is not <i>empty</i>,
          run the following substeps:
          1. Let <var>new entry</var> have the value obtained from invoking the
              <a>internal structured cloning algorithm</a> recursively with <var>entry</var> as
              the new "<var>input</var>" argument and <var>memory</var> as the new
              "<var>memory</var>" argument.
          2. Append <var>new entry</var> as the last element of <var>target</var>.
      4. Set <var>deep clone</var> to <i>own</i>.
  8. If <var>deep clone</var> is set to <i>own</i>, then, for each enumerable own property in
      <var>input</var>, run the following steps:
      1. Let <var>name</var> be the name of the property.
      2. Let <var>source value</var> be the result of calling the \[[Get]] internal method
          of <var>input</var> with the argument <var>name</var>. If the \[[Get]] internal
          method of a property involved executing script, and that script threw an uncaught
          exception, then abort the overall <a>structured clone</a> algorithm, with that exception
          being passed through to the caller.
      3. Let <var>cloned value</var> be the result of invoking the
          <a>internal structured cloning algorithm</a> recursively with <var>source value</var> as
          the "<var>input</var>" argument and <var>memory</var> as the "<var>memory</var>" argument.
          If this results in an exception, then abort the overall <a>structured clone</a> algorithm,
          with that exception being passed through to the caller.
      4. Add a new property to <var>output</var> having the name <var>name</var>, and having the
          value <var>cloned value</var>, using CreateDataProperty(<var>output</var>,
          <var>name</var>, <var>cloned value</var>).

      The order of the properties in the <var>input</var> and <var>output</var> objects must be the
      same, and any properties whose \[[Get]] internal method involves running script must be
      processed in that same order.

      <p class="note">This does not walk the prototype chain.</p>

      <p class="note">
        Property descriptors, setters, getters, and analogous features are not copied in this
        process. For example, the property in the input could be marked as read-only, but in the
        output it would just have the default state (typically read-write, though that could depend
        on the scripting environment).
      </p>

      <p class="note">
        Properties of Array objects are not treated any differently than those of other Objects. In
        particular, this means that non-index properties of arrays are copied as well.
      </p>

  9. Return <var>output</var>.

  <p class="note">
    This algorithm preserves cycles and preserves the identity of duplicate objects in graphs.
  </p>
</div>

<h4 id="callbacks">Callbacks</h4>

  The following callback function type is used in various APIs that interact with <code>File</code>
  objects:

  <pre class="idl" data-highlight="webidl">
    callback <dfn>FileCallback</dfn> = void (<a>File</a> file);
  </pre>


<div class="impl">
  <h4 id="garbage-collection">Garbage collection</h4>

  There is an <dfn>implied strong reference</dfn> from any IDL attribute that returns a pre-existing
  object to that object.

  <div class="example">
    For example, the <code>document.location</code> attribute means that there is a strong reference
    from a <code>Document</code> object to its <code>Location</code> object. Similarly, there is
    always a strong reference from a <code>Document</code> to any descendant nodes, and from any
    node to its owner <code>Document</code>.
  </div>
</div>

<h3 id="namespaces">Namespaces</h3>

  The <dfn>HTML namespace</dfn> is: <code>http://www.w3.org/1999/xhtml</code>

  The <dfn>MathML namespace</dfn> is: <code>http://www.w3.org/1998/Math/MathML</code>

  The <dfn>SVG namespace</dfn> is: <code>http://www.w3.org/2000/svg</code>

  The <dfn>XLink namespace</dfn> is: <code>http://www.w3.org/1999/xlink</code>

  The <dfn>XML namespace</dfn> is: <code>http://www.w3.org/XML/1998/namespace</code>

  The <dfn>XMLNS namespace</dfn> is: <code>http://www.w3.org/2000/xmlns/</code>

  <hr />

  Data mining tools and other user agents that perform operations on content without running
  scripts, evaluating CSS or XPath expressions, or otherwise exposing the resulting DOM to arbitrary
  content, may "support namespaces" by just asserting that their DOM node analogs are in certain
  namespaces, without actually exposing the above strings.

  <hr />

  <p class="note">
    In <a>the HTML syntax</a>, namespace prefixes and namespace declarations do not have the same
    effect as in XML. For instance, the colon has no special meaning in HTML element names.
  </p>

<!-- Big Text: DOM -->

<h2 id="dom">Semantics, structure, and APIs of HTML documents</h2>

<h3 id="documents">Documents</h3>

  Every XML and HTML document in an HTML UA is represented by a <{Document}> object.
  [[!DOM]]

  <dfn>The document's address</dfn> is the <i>URL associated with a <{Document}></i> (as
  defined in the DOM standard). It is initially set when the <{Document}> is created, but
  that can change during the lifetime of the <{Document}>; for example, it changes when
  the user <a>navigates</a> to a <a>fragment identifier</a> on the page and when the
  <code>pushState()</code> method is called with a new <a>URL</a>. [[!DOM]]

  <p class="warning">
    Interactive user agents typically expose <a>the document's address</a> in their user interface.
    This is the primary mechanism by which a user can tell if a site is attempting to impersonate
    another.
  </p>

  When a <{Document}> is created by a <a>script</a> using the <code>createDocument()</code>
  or <code>createHTMLDocument()</code> APIs, <a>the document's address</a> is the same as
  <a>the document's address</a> of the <a>responsible document</a> specified by the script's
  <a>settings object</a>, and the <{Document}> is both <a>ready for post-load tasks</a> and
  <a>completely loaded</a> immediately.

  <dfn>The document's referrer</dfn> is an <a>absolute URL</a> that can be set when the
  <{Document}> is created. If it is not explicitly set, then its value is the empty string.

  Each <{Document}> object has a <dfn>reload override flag</dfn> that is originally unset.
  The flag is set by the <code>document.open()</code> and <code>document.write()</code> methods in
  certain situations. When the flag is set, the <{Document}> also has a
  <dfn>reload override buffer</dfn> which is a Unicode string that is used as the source of the
  document when it is reloaded.

  When the user agent is to perform <dfn>an overridden reload</dfn>, given a
  <a>source browsing context</a>, it must act as follows:


  1. Let <var>source</var> be the value of the <a>browsing context</a>'s <a>active document</a>'s
    <a>reload override buffer</a>.

  2. Let <var>address</var> be the <a>browsing context</a>'s <a>active document</a>'s
    <a>address</a>.

  3. Let <var>HTTPS state</var> be the <a>HTTPS state</a> of the <a>browsing context</a>'s
    <a>active document</a>'s <code>Window</code>.

  4. <a>Navigate</a> the <a>browsing context</a> to a new <a>response</a> whose <{body}> is
    <var>source</var> and <a>HTTPS state</a> is <var>HTTPS state</var>, with
    <a>replacement enabled</a> and <a>exceptions enabled</a>. The <a>source browsing context</a>
    is that given to the <a>overridden reload</a> algorithm. When the <a>navigate</a> algorithm
    creates a <{Document}> object for this purpose, set that <{Document}>'s
    <a>reload override flag</a> and set its <a>reload override buffer</a> to <var>source</var>.

    When it comes time to <a>set the document's address</a> in the <a>navigation algorithm</a>,
    use <var>address</var> as the <a>override URL</a>.

<h4 id="the-document-object">The <dfn element>Document</dfn> object</h4>

  The DOM specification defines a <{Document}> interface, which this specification extends
  significantly:

  <pre class="idl" highlights="webidl">
    enum DocumentReadyState { "loading", "interactive", "complete" };

    [OverrideBuiltins]
    partial /*sealed*/ interface Document {
      // resource metadata management
      [PutForwards=href, Unforgeable] readonly attribute Location? location;
      attribute DOMString domain;
      readonly attribute DOMString referrer;
      attribute DOMString cookie;
      readonly attribute DOMString lastModified;
      readonly attribute DocumentReadyState readyState;

      // DOM tree accessors
      getter object (DOMString name);
      attribute DOMString title;
      attribute DOMString dir;
      attribute HTMLElement? body;
      readonly attribute HTMLHeadElement? head;
      [SameObject] readonly attribute HTMLCollection images;
      [SameObject] readonly attribute HTMLCollection embeds;
      [SameObject] readonly attribute HTMLCollection plugins;
      [SameObject] readonly attribute HTMLCollection links;
      [SameObject] readonly attribute HTMLCollection forms;
      [SameObject] readonly attribute HTMLCollection scripts;
      NodeList getElementsByName(DOMString elementName);
      readonly attribute HTMLScriptElement? currentScript;

      // dynamic markup insertion
      Document open(optional DOMString type = "text/html", optional DOMString replace = "");
      WindowProxy open(DOMString url, DOMString name, DOMString features, optional boolean replace = false);
      void close();
      void write(DOMString... text);
      void writeln(DOMString... text);

      // user interaction
      readonly attribute WindowProxy? defaultView;
      readonly attribute Element? activeElement;
      boolean hasFocus();
      attribute DOMString designMode;
      boolean execCommand(DOMString commandId, optional boolean showUI = false, optional DOMString value = "");
      boolean queryCommandEnabled(DOMString commandId);
      boolean queryCommandIndeterm(DOMString commandId);
      boolean queryCommandState(DOMString commandId);
      boolean queryCommandSupported(DOMString commandId);
      DOMString queryCommandValue(DOMString commandId);

      // special event handler IDL attributes that only apply to Document objects
      [LenientThis] attribute EventHandler onreadystatechange;
    };
    Document implements GlobalEventHandlers;
  </pre>

<h4 id="resource-metadata-management">Resource metadata management</h4>

  <dl class="domintro">
    <dt><var>document</var> . <code>referrer</code></dt>
    <dd>
      Returns <a>the address</a> of the <{Document}> from which the user navigated to this one,
      unless it was blocked or there was no such document, in which case it returns the empty
      string.

      The <code>noreferrer</code> link type can be used to block the referrer.
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>referrer</code></dfn> attribute must return <a>the document's referrer</a>.
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>cookie</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns the HTTP cookies that apply to the <{Document}>. If there are no cookies or cookies
      can't be applied to this resource, the empty string will be returned.

      Can be set, to add a new cookie to the element's set of HTTP cookies.

      If the contents are <a>sandboxed into a unique origin</a> (e.g. in an <code>iframe</code> with
      the <code>sandbox</code> attribute), a <code>SecurityError</code> exception will be thrown on
      getting and setting.
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>cookie</code></dfn> attribute represents the cookies of the resource identified
    by <a>the document's address</a>.

    A <{Document}> object that falls into one of the following conditions is a
    <dfn>cookie-averse <{Document}> object</dfn>:

    * A <{Document}> that has no <a>browsing context</a>.

    * A <{Document}> whose <a>address</a> does not use a server-based naming
        authority.

    On getting, if the document is a <a>cookie-averse <code>Document</code> object</a>, then
    the user agent must return the empty string. Otherwise, if the <{Document}>'s
    <a>origin</a> is not a scheme/host/port tuple, the user agent must throw a
    <code>SecurityError</code> exception. Otherwise, the user agent must first
    <a>obtain the storage mutex</a> and then return the cookie-string for
    <a>the document's address</a> for a "non-HTTP" API, decoded using the <a>UTF-8 decoder</a>.
    [[!COOKIES]]
    <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

    On setting, if the document is a <a>cookie-averse <code>Document</code> object</a>, then
    the user agent must do nothing. Otherwise, if the <{Document}>'s <a>origin</a> is
    not a scheme/host/port tuple, the user agent must throw a <code>SecurityError</code> exception.
    Otherwise, the user agent must <a>obtain the storage mutex</a> and then act as it would
    when <a>receiving a set-cookie-string</a> for <a>the document's address</a> via a "non-HTTP"
    API, consisting of the new value encoded as UTF-8. [[!COOKIES]] [[!ENCODING]]

    <p class="note">
      Since the <code>cookie</code> attribute is accessible across frames, the path restrictions on
      cookies are only a tool to help manage which cookies are sent to which parts of the site, and
      are not in any way a security feature.
    </p>
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>lastModified</code></dt>
    <dd>
      Returns the date of the last modification to the document, as reported by the server, in the
      form "<code>MM/DD/YYYY&nbsp;hh:mm:ss</code>", in the user's local time zone.

      If the last modification date is not known, the current time is returned instead.
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>lastModified</code></dfn> attribute, on getting, must return the date and time of
    the <{Document}>'s source file's last modification, in the user's local time zone, in
    the following format:

    1. The month component of the date.
    2. A U+002F SOLIDUS character (/).
    3. The day component of the date.
    4. A U+002F SOLIDUS character (/).
    5. The year component of the date.
    6. A U+0020 SPACE character.
    7. The hours component of the time.
    8. A U+003A COLON character (:).
    9. The minutes component of the time.
    10. A U+003A COLON character (:).
    11. The seconds component of the time.

    All the numeric components above, other than the year, must be given as two <a>ASCII digits</a>
    representing the number in base ten, zero-padded if necessary. The year must be given as the
    shortest possible string of four or more <a>ASCII digits</a> representing the number in base
    ten, zero-padded if necessary.

    The <{Document}>'s source file's last modification date and time must be derived from
    relevant features of the networking protocols used, e.g. from the value of the HTTP
    <code>Last-Modified</code> header of the document, or from metadata in the file system for local
    files. If the last modification date and time are not known, the attribute must return the
    current date and time in the above format.
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>readyState</code></dt>
    <dd>
      Returns "<code>loading</code>" while the <{Document}> is loading, "<code>interactive</code>"
      once it is finished parsing but still loading sub-resources, and "<code>complete</code>" once
      it has loaded.

      The <code>readystatechange</code> event fires on the <{Document}> object when this value
      changes.
    </dd>
  </dl>

  <div class="impl">
    Each document has a <dfn>current document readiness</dfn>. When a <{Document}> object
    is created, it must have its <a>current document readiness</a> set to the string
    "<code>loading</code>" if the document is associated with an <a>HTML parser</a>, an
    <a>XML parser</a>, or an XSLT processor, and to the string "<code>complete</code>"
    otherwise. Various algorithms during page loading affect this value. When the value is set, the
    user agent must <a>fire a simple event</a> named <code>readystatechange</code> at the
    <{Document}> object.

    A <{Document}> is said to have an <dfn>active parser</dfn> if it is associated with an
    <a>HTML parser</a> or an <a>XML parser</a> that has not yet been <a>stopped</a> or
   <a>aborted</a>.

    The <dfn><code>readyState</code></dfn> IDL attribute must, on getting, return the <a>current
    document readiness</a>.
  </div>

<h4 id="dom-tree-accessors"><dfn>DOM tree accessors</dfn></h4>

  <dfn>The <code>html</code> element</dfn> of a document is the document's root element, if there is
  one and it's an <code>html</code> element, or null otherwise.

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>head</code></dt>
    <dd>Returns <a>the <code>head</code> element</a>.</dd>
  </dl>

  <dfn>The <code>head</code> element</dfn> of a document is the first <code>head</code> element that
  is a child of <a>the <code>html</code> element</a>, if there is one, or null otherwise.

  <div class="impl">
    The <dfn><code>head</code></dfn> attribute, on getting, must return
    <a>the <code>head</code> element</a> of the document (a <code>head</code> element or null).
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>title</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns the document's title, as given by <a>the <code>title</code> element</a> for HTML and
      as given by the SVG <code>title</code> element for SVG.

      Can be set, to update the document's title. If there is no appropriate element to update, the
      new value is ignored.
    </dd>
  </dl>

  <dfn>The <code>title</code> element</dfn> of a document is the first <code>title</code> element
  in the document (in <a>tree order</a>), if there is one, or null otherwise.

  <div class="impl">
    The <dfn><code>title</code></dfn> attribute must, on getting, run the following algorithm:

    1. If the <a>root element</a> is an <code>svg</code> element in the <a>SVG namespace</a>, then
        let <var>value</var> be a concatenation of the data of all the child <code>Text</code> nodes
        of the first <code>title</code> element in the <a>SVG namespace</a> that is a child of the
        <a>root element</a>. [[!SVG]]
    2. Otherwise, let <var>value</var> be a concatenation of the data of all the child
        <code>Text</code> nodes of <a>the <code>title</code> element</a>, in <a>tree order</a>, or
        the empty string if <a>the <code>title</code> element</a> is null.
    3. <a>Strip and collapse whitespace</a> in <var>value</var>.
    4. Return <var>value</var>.

    On setting, the steps corresponding to the first matching condition in the following list must
    be run:

    <dl class="switch">
      <dt>
        If the <a>root element</a> is an <code>svg</code> element in the <a>SVG namespace</a>
        [[!SVG]]
      </dt>
      <dd>
        1. Let <var>element</var> be the first <code>title</code> element in the
            <a>SVG namespace</a> that is a child of the <a>root element</a>, if any. If there isn't
            one, create a <code>title</code> element in the <a>SVG namespace</a>, insert it as the
            first child of the <a>root element</a>, and let <var>element</var> be that element.
            [[!SVG]]
        2. Act as if the <code>textContent</code> IDL attribute of <var>element</var> was set to the
            new value being assigned.
      </dd>

      <dt>If the <a>root element</a> is in the <a>HTML namespace</a></dt>
      <dd>
        1. If <a>the <code>title</code> element</a> is null and <a>the <code>head</code> element</a>
            is null, then abort these steps.
        2. If <a>the <code>title</code> element</a> is null, then create a new <code>title</code>
            element and <a>append</a> it to <a>the <code>head</code> element</a>, and let
            <var>element</var> be the newly created element; otherwise, let <var>element</var> be
            <a>the <code>title</code> element</a>.
        3. Act as if the <code>textContent</code> IDL attribute of <var>element</var> was set to the
            new value being assigned.
      </dd>

      <dt>Otherwise</dt>
      <dd>Do nothing.</dd>
    </dl>
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>body</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns <a>the body element</a>.

      Can be set, to replace <a>the body element</a>.

      If the new value is not a <code>body</code> or <code>frameset</code> element, this will throw
      a <code>HierarchyRequestError</code> exception.
    </dd>
  </dl>

  <dfn>The body element</dfn> of a document is the first child of
  <a>the <code>html</code> element</a> that is either a <code>body</code> element or a
  <code>frameset</code> element. If there is no such element, it is null.

  <div class="impl">
    The <dfn><code>body</code></dfn> attribute, on getting, must return <a>the body element</a> of
    the document (either a <code>body</code> element, a <code>frameset</code> element, or null). On
    setting, the following algorithm must be run:

    1. If the new value is not a <code>body</code> or <code>frameset</code> element, then throw a
        <code>HierarchyRequestError</code> exception and abort these steps.
    2. Otherwise, if the new value is the same as <a>the body element</a>, do nothing. Abort these
        steps.
    3. Otherwise, if <a>the body element</a> is not null, then replace that element with the new
        value in the DOM, as if the root element's <code>replaceChild()</code> method had been
        called with the new value and <a>the incumbent body element</a> as its two arguments
        respectively, then abort these steps.
    4. Otherwise, if there is no root element, throw a <code>HierarchyRequestError</code> exception
        and abort these steps.
    5. Otherwise, <a>the body element</a> is null, but there's a root element. Append the new value
        to the root element.
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>images</code></dt>
    <dd>
      Returns an <code>HTMLCollection</code> of the <code>img</code> elements in the
      <code>Document</code>.
    </dd>

    <dt><var>document</var> . <code>embeds</code></dt>
    <dt><var>document</var> . <code>plugins</code></dt>
    <dd>
      Return an <code>HTMLCollection</code> of the <code>embed</code> elements in the
      <code>Document</code>.
    </dd>

    <dt><var>document</var> . <code>links</code></dt>
    <dd>
      Returns an <code>HTMLCollection</code> of the <code>a</code> and <code>area</code> elements in
      the <code>Document</code> that have <code>href</code> attributes.
    </dd>

    <dt><var>document</var> . <code>forms</code></dt>
    <dd>
      Return an <code>HTMLCollection</code> of the <code>form</code> elements in the
      <code>Document</code>.
    </dd>

    <dt><var>document</var> . <code>scripts</code></dt>
    <dd>
      Return an <code>HTMLCollection</code> of the <code>script</code> elements in the
      <code>Document</code>.
    </dd>

  </dl>

  <div class="impl">
    The <dfn><code>images</code></dfn> attribute must return an <code>HTMLCollection</code> rooted
    at the <code>Document</code> node, whose filter matches only <code>img</code> elements.

    The <dfn><code>embeds</code></dfn> attribute must return an <code>HTMLCollection</code> rooted
    at the <code>Document</code> node, whose filter matches only <code>embed</code> elements.

    The <dfn><code>plugins</code></dfn> attribute must return the same object as that returned by
    the <code>embeds</code> attribute.

    The <dfn><code>links</code></dfn> attribute must return an <code>HTMLCollection</code> rooted at
    the <code>Document</code> node, whose filter matches only <code>a</code> elements with
    <code>href</code> attributes and <code>area</code> elements with <code>href</code> attributes.

    The <dfn><code>forms</code></dfn> attribute must return an <code>HTMLCollection</code> rooted at
    the <code>Document</code> node, whose filter matches only <code>form</code> elements.

    The <dfn><code>scripts</code></dfn> attribute must return an <code>HTMLCollection</code> rooted
    at the <code>Document</code> node, whose filter matches only <code>script</code> elements.

    <hr />
  </div>

  <dl class="domintro">
    <dt>
      <var>collection</var> = <var>document</var> . <code>getElementsByName</code>(<var>name</var>)
    </dt>
    <dd>
      Returns a <code>NodeList</code> of elements in the <code>Document</code> that have a
      <code>name</code> attribute with the value <var>name</var>.
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>getElementsByName(<var>name</var>)</code></dfn> method takes a string
    <var>name</var>, and must return a <a>live</a> <code>NodeList</code> containing all the
    <a>HTML elements</a> in that document that have a <code>name</code> attribute whose value is
    equal to the <var>name</var> argument (in a <a>case-sensitive</a> manner), in <a>tree order</a>.
    When the method is invoked on a <code>Document</code> object again with the same argument, the
    user agent may return the same as the object returned by the earlier call. In other cases, a new
    <code>NodeList</code> object must be returned.
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>currentScript</code></dt>
    <dd>
      Returns the <code>script</code> element that is currently executing. In the case of reentrant
      <code>script</code> execution, returns the one that most recently started executing amongst
      those that have not yet finished executing.

      Returns null if the <code>Document</code> is not currently executing a <code>script</code>
      element (e.g. because the running script is an event handler, or a timeout).
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>currentScript</code></dfn> attribute, on getting, must return the value to which
    it was most recently initialized. When the <code>Document</code> is created, the
    <code>currentScript</code> must be initialized to null.
  </div>

  <div class="impl">
    <hr />

    The <code>Document</code> interface <a>supports named properties</a>. The
    <a>supported property names</a> at any moment consist of the values of the <code>name</code>
    content attributes of all the <code>applet</code>, <a>exposed</a> <code>embed</code>,
    <code>form</code>, <code>iframe</code>, <code>img</code>, and <a>exposed</a> <code>object</code>
    elements in the <code>Document</code> that have non-empty <code>name</code> content attributes,
    and the values of the <code>id</code> content attributes of all the <code>applet</code> and
    <a>exposed</a> <code>object</code> elements in the <code>Document</code> that have non-empty
    <code>id</code> content attributes, and the values of the <code>id</code> content attributes of
    all the <code>img</code> elements in the <code>Document</code> that have both non-empty
    <code>name</code> content attributes and non-empty <code>id</code> content attributes. The
    <a>supported property names</a> must be in <a>tree order</a>, ignoring later duplicates, with
    values from <code>id</code> attributes coming before values from <code>name</code> attributes
    when the same element contributes both.

    To <a>determine the value of a named property</a> <var>name</var> when
    <dfn>the<code>Document</code> object is indexed for property retrieval</dfn>, the user agent
    must return the value obtained using the following steps:

    1. Let <var>elements</var> be the list of <a>named elements</a> with the name <var>name</var> in
        the <code>Document</code>.

        <p class="note">There will be at least one such element, by definition.</p>
    2. If <var>elements</var> has only one element, and that element is an <code>iframe</code>
        element, then return the <code>WindowProxy</code> object of the
        <a>nested browsing context</a> represented by that <code>iframe</code> element, and abort
        these steps.
    3. Otherwise, if <var>elements</var> has only one element, return that element and abort these
        steps.
    4. Otherwise return an <code>HTMLCollection</code> rooted at the <code>Document</code> node,
        whose filter matches only <a>named elements</a> with the name <var>name</var>.

    <dfn>Named elements</dfn> with the name <var>name</var>, for the purposes of the above
    algorithm, are those that are either:

    * <code>applet</code>, <a>exposed</a> <code>embed</code>, <code>form</code>,
        <code>iframe</code>, <code>img</code>, or <a>exposed</a> <code>object</code> elements that
        have a <code>name</code> content attribute whose value is <var>name</var>, or
    * <code>applet</code> or <a>exposed</a> <code>object</code> elements that have an
        <code>id</code> content attribute whose value is <var>name</var>, or
    * <code>img</code> elements that have an <code>id</code> content attribute whose value is
        <var>name</var>, and that have a non-empty <code>name</code> content attribute present also.

    An <code>embed</code> or <code>object</code> element is said to be <dfn>exposed</dfn> if it has
    no <a>exposed</a> <code>object</code> ancestor, and, for <code>object</code> elements, is
    additionally either not showing its <a>fallback content</a> or has no <code>object</code> or
    <code>embed</code> descendants.
  </div>

  <hr />

  <p class="note">
    The <code>dir</code> attribute on the <code>Document</code> interface is defined along with the
    <code>dir</code> content attribute.
  </p>

  <div class="impl">
    <h4 id="loading-xml-documents">Loading XML documents</h4>

    <pre class="idl" data-highlight="webidl">
      partial interface XMLDocument {
        boolean load(DOMString url);
      };
    </pre>

    The <dfn><code>load(<var>url</var>)</code></dfn> method must run the following steps:

    1. Let <var>document</var> be the <code>XMLDocument</code> object on which the method was
        invoked.
    2. <a>Resolve</a> the method's first argument, relative to the <a>API base URL</a> specified by
        the <a>entry settings object</a>. If this is not successful, throw a
        <code>SyntaxError</code> exception and abort these steps. Otherwise, let <var>url</var> be
        the resulting <a>absolute URL</a>.
    3. If the <a>origin</a> of <var>url</var> is not the same as the <a>origin</a> of
        <var>document</var>, throw a <code>SecurityError</code> exception and abort these steps.
    4. Remove all child nodes of <var>document</var>, without firing any mutation events.
    5. Set the <a>current document readiness</a> of <var>document</var> to "<code>loading</code>".
    6. Run the remainder of these steps <a>in parallel</a>, and return true from the method.
    7. Let <var>result</var> be a <code>Document</code> object.
    8. Let <var>success</var> be false.
    9. Let <var>request</var> be a new <a>request</a> whose <a>url</a> is <var>url</var>,
        <a>client</a> is <a>entry settings object</a>, <a>destination</a> is
        "<code>subresource</code>", <a>synchronous flag</a> is set, <a>mode</a> is
        "<code>same-origin</code>", <a>credentials mode</a> is "<code>same-origin</code>", and whose
        <a>use-URL-credentials flag</a> is set.
    10. Let <var>response</var> be the result of <a>fetching</a> <var>request</var>.
    11. If <var>response</var>'s <a>Content-Type metadata</a> is an <a>XML MIME type</a>, then run
        these substeps:
        1. Create a new <a>XML parser</a> associated with the <var>result</var> document.
        2. Pass this parser <var>response</var>'s <a>body</a>.
        3. If there is an XML well-formedness or XML namespace well-formedness error, then remove
            all child nodes from <var>result</var>. Otherwise let <var>success</var> be true.
    12. Queue a task</a> to run the following steps.
        1. Set the <a>current document readiness</a> of <var>document</var> to
            "<code>complete</code>".
        2. Replace all the children of <var>document</var> by the children of <var>result</var>
            (even if it has no children), firing mutation events as if a
            <code>DocumentFragment</code> containing the new children had been inserted.
        3. <a>Fire a simple event</a> named <code>load</code> at <var>document</var>.
  </div>

<h3 id="elements">Elements</h3>

<h4 id="semantics">Semantics</h4>

  Elements, attributes, and attribute values in HTML are defined (by this specification) to have
  certain meanings (semantics). For example, the <code>ol</code> element represents an ordered list,
  and the <code>lang</code> attribute represents the language of the content.

  These definitions allow HTML processors, such as Web browsers or search engines, to present and
  use documents and applications in a wide variety of contexts that the author might not have
  considered.

  <div class="example">
    As a simple example, consider a Web page written by an author who only considered desktop
    computer Web browsers:

    <pre highlight="html">
      &lt;!DOCTYPE HTML>
      &lt;html>
        &lt;head>
          &lt;title>My Page&lt;/title>
        &lt;/head>
        &lt;body>
          &lt;h1>Welcome to my page&lt;/h1>
          &lt;p>I like cars and lorries and have a big Jeep!&lt;/p>
          &lt;h2>Where I live&lt;/h2>
          &lt;p>I live in a small hut on a mountain!&lt;/p>
        &lt;/body>
      &lt;/html>
    </pre>

    Because HTML conveys <em>meaning</em>, rather than presentation, the same page can also be used
    by a small browser on a mobile phone, without any change to the page. Instead of headings being
    in large letters as on the desktop, for example, the browser on the mobile phone might use the
    same size text for the whole the page, but with the headings in bold.

    But it goes further than just differences in screen size: the same page could equally be used by
    a blind user using a browser based around speech synthesis, which instead of displaying the page
    on a screen, reads the page to the user, e.g. using headphones. Instead of large text for the
    headings, the speech browser might use a different volume or a slower voice.

    That's not all, either. Since the browsers know which parts of the page are the headings, they
    can create a document outline that the user can use to quickly navigate around the document,
    using keys for "jump to next heading" or "jump to previous heading". Such features are
    especially common with speech browsers, where users would otherwise find quickly navigating a
    page quite difficult.

    Even beyond browsers, software can make use of this information. Search engines can use the
    headings to more effectively index a page, or to provide quick links to subsections of the page
    from their results. Tools can use the headings to create a table of contents (that is in fact
    how this very specification's table of contents is generated).

    This example has focused on headings, but the same principle applies to all of the semantics
    in HTML.
  </div>

  Authors must not use elements, attributes, or attribute values for purposes other than their
  appropriate intended semantic purpose, as doing so prevents software from correctly processing the
  page.

  <div class="example">
    <pre class="bad" highlight="html">
      &lt;body&gt;
        &lt;h1&gt;ACME Corporation&lt;/h1&gt;
        &lt;h2&gt;The leaders in arbitrary fast delivery since 1920&lt;/h2&gt;
        ...
    </pre>
  </div>

  <div class="example">
    The document in this next example is similarly non-conforming, despite
    being syntactically correct, because the data placed in the cells is clearly
    not tabular data, and the <code>cite</code> element mis-used:

    <pre class="bad" highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;html lang="en-GB"&gt;
        &lt;head&gt; &lt;title&gt; Demonstration &lt;/title&gt; &lt;/head&gt;
        &lt;body&gt;
          &lt;table&gt;
            &lt;tr&gt; &lt;td&gt; My favourite animal is the cat. &lt;/td&gt; &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &mdash;&lt;a href="http://example.org/~ernest/"&gt;&lt;cite&gt;Ernest&lt;/cite&gt;&lt;/a&gt;,
                in an essay from 1992
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>

    This would make software that relies on these semantics fail: for example, a speech browser that
    allowed a blind user to navigate tables in the document would report the quote above as a table,
    confusing the user; similarly, a tool that extracted titles of works from pages would extract
    "Ernest" as the title of a work, even though it's actually a person's name, not a title.

    A corrected version of this document might be:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;html lang="en-GB"&gt;
        &lt;head&gt; &lt;title&gt; Demonstration &lt;/title&gt; &lt;/head&gt;
        &lt;body&gt;
          &lt;blockquote&gt;
            &lt;p&gt; My favourite animal is the cat. &lt;/p&gt;
          &lt;/blockquote&gt;
          &lt;p&gt;
            &mdash;&lt;a href="http://example.org/~ernest/"&gt;Ernest&lt;/a&gt;,
            in an essay from 1992
          &lt;/p&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>
  </div>

  Authors must not use elements, attributes, or attribute values that are not permitted by this
  specification or <a>other applicable specifications</a>, as doing so makes it significantly harder
  for the language to be extended in the future.

  <div class="example">
    In the next example, there is a non-conforming attribute value ("carpet") and a non-conforming
    attribute ("texture"), which is not permitted by this specification:

    <pre class="bad" highlight="html">&lt;label&gt;Carpet: &lt;input type="carpet" name="c" texture="deep pile"&gt;&lt;/label&gt;</pre>

    Here would be an alternative and correct way to mark this up:

    <pre highlight="html">&lt;label&gt;Carpet: &lt;input type="text" class="carpet" name="c" data-texture="deep pile"&gt;&lt;/label&gt;</pre>
  </div>

  Through scripting and using other mechanisms, the values of attributes, text, and indeed the
  entire structure of the document may change dynamically while a user agent is processing it. The
  semantics of a document at an instant in time are those represented by the state of the document
  at that instant in time, and the semantics of a document can therefore change over time. User
  agents <span class="impl">must</span> update their presentation of the document as this occurs.

  <p class="example">
    HTML has a <code>progress</code> element that describes a progress bar. If its "value" attribute
    is dynamically updated by a script, the UA would update the rendering to show the progress
    changing.
  </p>

<h4 id="elements-in-the-dom">Elements in the DOM</h4>

  The nodes representing <a>HTML elements</a> in the DOM <span class="impl">must</span> implement,
  and expose to scripts, the interfaces listed for them in the relevant sections of this
  specification. This includes <a>HTML elements</a> in <a>XML documents</a>, even when those
  documents are in another context (e.g. inside an XSLT transform).

  Elements in the DOM <dfn>represent</dfn> things; that is, they have intrinsic <em>meaning</em>,
  also known as semantics.

  <p class="example">For example, an <code>ol</code> element represents an ordered list.</p>

  The basic interface, from which all the <a>HTML elements</a>' interfaces inherit,
  <span class="impl">and which must be used by elements that have no additional requirements,</span>
  is the <code>HTMLElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLElement : Element {
      // metadata attributes
      attribute DOMString title;
      attribute DOMString lang;
      attribute boolean translate;
      attribute DOMString dir;
      [SameObject] readonly attribute DOMStringMap dataset;

      // user interaction
      attribute boolean hidden;
      void click();
      attribute long tabIndex;
      void focus();
      void blur();
      attribute DOMString accessKey;
      readonly attribute DOMString accessKeyLabel;
      attribute boolean draggable;
      [PutForwards=value] readonly attribute DOMSettableTokenList dropzone;
      attribute HTMLMenuElement? contextMenu;
      attribute boolean spellcheck;
      void forceSpellCheck();
    };
    HTMLElement implements GlobalEventHandlers;
    HTMLElement implements ElementContentEditable;

    interface HTMLUnknownElement : HTMLElement { };
  </pre>

  The <code>HTMLElement</code> interface holds methods and attributes related to a number of
  disparate features, and the members of this interface are therefore described in various different
  sections of this specification.

  <div class="impl">
    The <code>HTMLUnknownElement</code> interface must be used for <a>HTML elements</a> that are not
    defined by this specification (or <a>other applicable specifications</a>).
  </div>

<h4 id="element-definitions">Element definitions</h4>

  Each element in this specification has a definition that includes the following information:

  : <dfn>Categories</dfn>
  :: A list of <a>categories</a> to which the element belongs. These are used when defining the
      <a>content models</a> for each element.

  : <dfn>Contexts in which this element can be used</dfn>
  :: A <em>non-normative</em> description of where the element can be used. This information is
      redundant with the content models of elements that allow this one as a child, and is provided
      only as a convenience.

      <p class="note">
        For simplicity, only the most specific expectations are listed. For example, an element that
        is both <a>flow content</a> and <a>phrasing content</a> can be used anywhere that either
        <a>flow content</a> or <a>phrasing content</a> is expected, but since anywhere that
        <a>flow content</a> is expected, <a>phrasing content</a> is also expected (since all
        <a>phrasing content</a> is <a>flow content</a>), only "where <a>phrasing content</a> is
        expected" will be listed.
      </p>

  : <dfn>Content model</dfn>
  :: A normative description of what content must be included as children and descendants of the
      element.

  : <dfn>Tag omission in text/html</dfn>
  :: A <em>non-normative</em> description of whether, in the <code>text/html</code> syntax, the
      <a>start</a> and <a>end</a> tags can be omitted. This information is redundant with the
      normative requirements given in the <a>optional tags</a> section, and is provided in the
      element definitions only as a convenience.

  : <dfn>Content attributes</dfn>
  :: A normative list of attributes that may be specified on the element (except where otherwise
      disallowed), along with non-normative descriptions of those attributes. (The content to the
      left of the dash is normative, the content to the right of the dash is not.)

  : Allowed <a>ARIA role attribute</a> values
  :: A normative list of <a>ARIA role attribute</a> values that may be specified on the element
      (except where otherwise disallowed). Each value is linked to a non normative description.

  : Allowed <a>ARIA state and property attributes</a>
  :: Links to the <a>Global aria-* attributes</a> list and the
      <a>allowed roles, states and properties</a> table.

  : <dfn>DOM interface</dfn>
  :: A normative definition of a DOM interface that such elements must implement.

  This is then followed by a description of what the element <a>represents</a>, along with any
  additional normative conformance criteria that may apply to authors
  <span class="impl"> and implementations</span>. Examples are sometimes also included.

<h5 id="attributes">Attributes</h5>

  Except where otherwise specified, attributes on <a>HTML elements</a> may have any string value,
  including the empty string. Except where explicitly stated, there is no restriction on what text
  can be specified in such attributes.

<h4 id="content-models"><dfn>Content models</dfn></h4>

  Each element defined in this specification has a content model: a description of the element's
  expected <a>contents</a>. An <a>HTML element</a> must have contents that match the requirements
  described in the element's content model. The <dfn>contents</dfn> of an element are its children
  in the DOM, except for <code>template</code> elements, where the children are those in the
  <a>template contents</a> (a separate <code>DocumentFragment</code> assigned to the element when
  the element is created).

  The <a>space characters</a> are always allowed between elements. User agents represent these
  characters between elements in the source markup as <code>Text</code> nodes in the DOM. Empty
  <code>Text</code> nodes and <code>Text</code> nodes consisting of just sequences of those
  characters are considered <dfn>inter-element whitespace</dfn>.

  <a>Inter-element whitespace</a>, comment nodes, and processing instruction nodes must be ignored
  when establishing whether an element's contents match the element's content model or not, and must
  be ignored when following algorithms that define document and element semantics.

  <p class="note">
    Thus, an element <var>A</var> is said to be <i>preceded or followed</i> by a second element
    <var>B</var> if <var>A</var> and <var>B</var> have the same parent node and there are no other
    element nodes or <code>Text</code> nodes (other than <a>inter-element whitespace</a>) between
    them. Similarly, a node is the <i>only child</i> of an element if that element contains no other
    nodes other than <a>inter-element whitespace</a>, comment nodes, and processing instruction
    nodes.
  </p>

  Authors must not use <a>HTML elements</a> anywhere except where they are explicitly allowed, as
  defined for each element, or as explicitly required by other specifications. For XML compound
  documents, these contexts could be inside elements from other namespaces, if those elements are
  defined as providing the relevant contexts.

  <div class="example">
    For example, the Atom specification defines a <code>content</code> element. When its
    <code>type</code> attribute has the value <code>xhtml</code>, the Atom specification requires
    that it contain a single HTML <code>div</code> element. Thus, a <code>div</code> element is
    allowed in that context, even though this is not explicitly normatively stated by this
    specification. [[RFC4287]]
  </div>

  In addition, <a>HTML elements</a> may be orphan nodes (i.e. without a parent node).

  <div class="example">
    For example, creating a <code>td</code> element and storing it in a global variable in a
    script is conforming, even though <code>td</code> elements are otherwise only supposed to be
    used inside <code>tr</code> elements.

    <pre highlight="javascript">
      var data = {
        name: "Banana",
        cell: document.createElement('td'),
      };
    </pre>
  </div>

<h5 id="the-nothing-content-model">The "nothing" content model</h5>

  When an element's content model is <dfn>nothing</dfn>, the element must contain no
  <code>Text</code> nodes (other than <a>inter-element whitespace</a>) and no element nodes.

  <p class="note">
    Most HTML elements whose content model is "nothing" are also, for convenience,
    <a>void elements</a> (elements that have no <a>end tag</a> in the <a>HTML syntax</a>). However,
    these are entirely separate concepts.
  </p>

<h5 id="kinds-of-content">Kinds of content</h5>

  Each element in HTML falls into zero or more <dfn>categories</dfn> that group elements with
  similar characteristics together. The following broad categories are used in this specification:

  <ul class="brief category-list">
    <li><a>Metadata content</a></li>
    <li><a>Flow content</a></li>
    <li><a>Sectioning content</a></li>
    <li><a>Heading content</a></li>
    <li><a>Phrasing content</a></li>
    <li><a>Embedded content</a></li>
    <li><a>Interactive content</a></li>
  </ul>

  <p class="note">
    Some elements also fall into other categories, which are defined in other parts of this
    specification.
  </p>

  These categories are related as follows:

  <object width="1000" height="288" data="images/content-venn.svg"><img src="images/content-venn.png" alt="" width="512" height="288" /></object>

  Sectioning content, heading content, phrasing content, embedded content, and interactive content
  are all types of flow content. Metadata is sometimes flow content. Metadata and interactive
  content are sometimes phrasing content. Embedded content is also a type of phrasing content, and
  sometimes is interactive content.

  Other categories are also used for specific purposes, e.g. form controls are specified using a
  number of categories to define common requirements. Some elements have unique requirements and do
  not fit into any particular category.

<h6 id="metadata-content">Metadata content</h6>

  <dfn>Metadata content</dfn> is content that sets up the presentation or behavior of the rest of
  the content, or that sets up the relationship of the document with other documents, or that
  conveys other "out of band" information.

  <ul class="brief category-list">
    <li><code>base</code></li>
    <li><code>link</code></li>
    <li><code>meta</code></li>
    <li><code>noscript</code></li>
    <li><code>script</code></li>
    <li><code>style</code></li>
    <li><code>template</code></li>
    <li><code>title</code></li>
  </ul>

  Elements from other namespaces whose semantics are primarily metadata-related (e.g. RDF) are also
  <a>metadata content</a>.

  <div class="example">
    Thus, in the XML serialization, one can use RDF, like this:

    <pre highlight="html">
      &lt;html xmlns="http://www.w3.org/1999/xhtml" xmlns:r="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        &lt;head>
          &lt;title>Hedral's Home Page&lt;/title>
          &lt;r:RDF>
            &lt;Person xmlns="http://www.w3.org/2000/10/swap/pim/contact#"
                       r:about="http://hedral.example.com/#">
              &lt;fullName>Cat Hedral&lt;/fullName>
              &lt;mailbox r:resource="mailto:hedral@damowmow.com"/>
              &lt;personalTitle>Sir&lt;/personalTitle>
            &lt;/Person>
          &lt;/r:RDF>
        &lt;/head>
        &lt;body>
          &lt;h1>My home page&lt;/h1>
          &lt;p>I like playing with string, I guess. Sister says squirrels are fun
          too so sometimes I follow her to play with them.&lt;/p>
        &lt;/body>
      &lt;/html>
    </pre>

    This isn't possible in the HTML serialization, however.
  </div>

<h6 id="flow-content">Flow content</h6>

  Most elements that are used in the body of documents and applications are categorized as
  <dfn>flow content</dfn>.

  <ul class="brief category-list">
    <li><code>a</code></li>
    <li><code>abbr</code></li>
    <li><code>address</code></li>
    <li><code>area</code> (if it is a descendant of a <code>map</code> element)</li>
    <li><code>article</code></li>
    <li><code>aside</code></li>
    <li><code>audio</code></li>
    <li><code>b</code></li>
    <li><code>bdi</code></li>
    <li><code>bdo</code></li>
    <li><code>blockquote</code></li>
    <li><code>br</code></li>
    <li><code>button</code></li>
    <li><code>canvas</code></li>
    <li><code>cite</code></li>
    <li><code>code</code></li>
    <li><code>data</code></li>
    <li><code>datalist</code></li>
    <li><code>del</code></li>
    <li><code>details</code></li>
    <li><code>dfn</code></li>
    <li><code>dialog</code></li>
    <li><code>div</code></li>
    <li><code>dl</code></li>
    <li><code>em</code></li>
    <li><code>embed</code></li>
    <li><code>fieldset</code></li>
    <li><code>figure</code></li>
    <li><code>footer</code></li>
    <li><code>form</code></li>
    <li><code>h1</code></li>
    <li><code>h2</code></li>
    <li><code>h3</code></li>
    <li><code>h4</code></li>
    <li><code>h5</code></li>
    <li><code>h6</code></li>
    <li><code>header</code></li>
    <li><code>hr</code></li>
    <li><code>i</code></li>
    <li><code>iframe</code></li>
    <li><code>img</code></li>
    <li><code>input</code></li>
    <li><code>ins</code></li>
    <li><code>kbd</code></li>
    <li><code>keygen</code></li>
    <li><code>label</code></li>
    <li><code>link</code> (if the <code>itemprop</code> attribute is present)</li>
    <li><code>main</code></li>
    <li><code>map</code></li>
    <li><code>mark</code></li>
    <li><code>math</code></li>
    <li><code>menu</code></li>
    <li><code>meta</code> (if the <code>itemprop</code> attribute is present)</li>
    <li><code>meter</code></li>
    <li><code>nav</code></li>
    <li><code>noscript</code></li>
    <li><code>object</code></li>
    <li><code>ol</code></li>
    <li><code>output</code></li>
    <li><code>p</code></li>
    <li><code>picture</code></li>
    <li><code>pre</code></li>
    <li><code>progress</code></li>
    <li><code>q</code></li>
    <li><code>ruby</code></li>
    <li><code>s</code></li>
    <li><code>samp</code></li>
    <li><code>script</code></li>
    <li><code>section</code></li>
    <li><code>select</code></li>
    <li><code>small</code></li>
    <li><code>span</code></li>
    <li><code>strong</code></li>
    <li><code>style</code> (if the <code>scoped</code> attribute is present)</li>
    <li><code>sub</code></li>
    <li><code>sup</code></li>
    <li><code>svg</code></li>
    <li><code>table</code></li>
    <li><code>template</code></li>
    <li><code>textarea</code></li>
    <li><code>time</code></li>
    <li><code>u</code></li>
    <li><code>ul</code></li>
    <li><code>var</code></li>
    <li><code>video</code></li>
    <li><code>wbr</code></li>
    <li><a>Text</a></li>
  </ul>


<h6 id="sectioning-content">Sectioning content</h6>

  <dfn>Sectioning content</dfn> is content that defines the scope of <a>headings</a> and
  <a>footers</a>.

  <ul class="brief category-list">
    <li><code>article</code></li>
    <li><code>aside</code></li>
    <li><code>nav</code></li>
    <li><code>section</code></li>
  </ul>

  Each <a>sectioning content</a> element potentially has a heading and an <a>outline</a>. See the
  section on <a>headings and sections</a> for further details.

  <p class="note">
    There are also certain elements that are <a>sectioning roots</a>. These are distinct from
    <a>sectioning content</a>, but they can also have an <a>outline</a>.
  </p>

<h6 id="heading-content">Heading content</h6>

  <dfn>Heading content</dfn> defines the header of a section (whether explicitly marked up using
  <a>sectioning content</a> elements, or implied by the heading content itself).

  <ul class="brief category-list">
    <li><code>h1</code></li>
    <li><code>h2</code></li>
    <li><code>h3</code></li>
    <li><code>h4</code></li>
    <li><code>h5</code></li>
    <li><code>h6</code></li>
  </ul>

<h6 id="phrasing-content">Phrasing content</h6>

  <dfn>Phrasing content</dfn> is the text of the document, as well as elements that mark up that
  text at the intra-paragraph level. Runs of <a>phrasing content</a> form <a>paragraphs</a>.

  <ul class="brief category-list">
    <li><code>a</code></li>
    <li><code>abbr</code></li>
    <li><code>area</code> (if it is a descendant of a <code>map</code> element)</li>
    <li><code>audio</code></li>
    <li><code>b</code></li>
    <li><code>bdi</code></li>
    <li><code>bdo</code></li>
    <li><code>br</code></li>
    <li><code>button</code></li>
    <li><code>canvas</code></li>
    <li><code>cite</code></li>
    <li><code>code</code></li>
    <li><code>data</code></li>
    <li><code>datalist</code></li>
    <li><code>del</code></li>
    <li><code>dfn</code></li>
    <li><code>em</code></li>
    <li><code>embed</code></li>
    <li><code>i</code></li>
    <li><code>iframe</code></li>
    <li><code>img</code></li>
    <li><code>input</code></li>
    <li><code>ins</code></li>
    <li><code>kbd</code></li>
    <li><code>keygen</code></li>
    <li><code>label</code></li>
    <li><code>link</code> (if the <code>itemprop</code> attribute is present)</li>
    <li><code>map</code></li>
    <li><code>mark</code></li>
    <li><code>math</code></li>
    <li><code>meta</code> (if the <code>itemprop</code> attribute is present)</li>
    <li><code>meter</code></li>
    <li><code>noscript</code></li>
    <li><code>object</code></li>
    <li><code>output</code></li>
    <li><code>picture</code></li>
    <li><code>progress</code></li>
    <li><code>q</code></li>
    <li><code>ruby</code></li>
    <li><code>s</code></li>
    <li><code>samp</code></li>
    <li><code>script</code></li>
    <li><code>select</code></li>
    <li><code>small</code></li>
    <li><code>span</code></li>
    <li><code>strong</code></li>
    <li><code>sub</code></li>
    <li><code>sup</code></li>
    <li><code>svg</code></li>
    <li><code>template</code></li>
    <li><code>textarea</code></li>
    <li><code>time</code></li>
    <li><code>u</code></li>
    <li><code>var</code></li>
    <li><code>video</code></li>
    <li><code>wbr</code></li>
    <li><a>Text</a></li>
  </ul>

  <p class="note">
    Most elements that are categorized as phrasing content can only contain elements that are
    themselves categorized as phrasing content, not any flow content.
  </p>

  <dfn>Text</dfn>, in the context of content models, means either nothing, or <code>Text</code>
  nodes. <a>Text</a> is sometimes used as a content model on its own, but is also
  <a>phrasing content</a>, and can be <a>inter-element whitespace</a> (if the <code>Text</code>
  nodes are empty or contain just <a>space characters</a>).

  <code>Text</code> nodes and attribute values must consist of <a>Unicode characters</a>, must not
  contain U+0000 characters, must not contain permanently undefined Unicode characters
  (noncharacters), and must not contain <a>control characters</a> other than
  <a>space characters</a>.

  This specification includes extra constraints on the exact value of <code>Text</code> nodes and
  attribute values depending on their precise context.

<h6 id="embedded-content">Embedded content</h6>

  <dfn>Embedded content</dfn> is content that imports another
  resource into the document, or content from another vocabulary that is inserted into the document.

  <ul class="brief category-list">
    <li><code>audio</code></li>
    <li><code>canvas</code></li>
    <li><code>embed</code></li>
    <li><code>iframe</code></li>
    <li><code>img</code></li>
    <li><code>math</code></li>
    <li><code>object</code></li>
    <li><code>picture</code></li>
    <li><code>svg</code></li>
    <li><code>video</code></li>
  </ul>

  Elements that are from namespaces other than the <a>HTML namespace</a> and that convey content but
  not metadata, are <a>embedded content</a> for the purposes of the content models defined in this
  specification. (For example, MathML, or SVG.)

  Some embedded content elements can have <dfn>fallback content</dfn>: content that is to be used
  when the external resource cannot be used (e.g. because it is of an unsupported format). The
  element definitions state what the fallback is, if any.

<h6 id="interactive-content">Interactive content</h6>

  <dfn>Interactive content</dfn> is content that is specifically intended for user interaction.

  <ul class="brief category-list">
    <li><code>a</code></li>
    <li><code>audio</code> (if the <code>controls</code> attribute is present)</li>
    <li><code>button</code></li>
    <li><code>details</code></li>
    <li><code>embed</code></li>
    <li><code>iframe</code></li>
    <li><code>img</code> (if the <code>usemap</code> attribute is present)</li>
    <li>
      <code>input</code> (if the <code>type</code> attribute is <em>not</em> in the <a>Hidden</a>
      state)
    </li>
    <li><code>keygen</code></li>
    <li><code>label</code></li>
    <li><code>object</code> (if the <code>usemap</code> attribute is present)</li>
    <li><code>select</code></li>
    <li><code>textarea</code></li>
    <li><a>sorting interface <code>th</code> elements</a></li>
    <li><code>video</code> (if the <code>controls</code> attribute is present)</li>
  </ul>

  The <code>tabindex</code> attribute can also make any element into <a>interactive content</a>.

<h6 id="palpable-content">Palpable content</h6>

  As a general rule, elements whose content model allows any <a>flow content</a> or
  <a>phrasing content</a> should have at least one node in its <a>contents</a> that is
  <dfn>palpable content</dfn> and that does not have the <code>hidden</code> attribute specified.

  <p class="note">
    <a>Palpable content</a> makes an element non-empty by providing either some descendant non-empty
    <a>text</a>, or else something users can hear (<code>audio</code> elements) or view
    (<code>video</code> or <code>img</code> or <code>canvas</code> elements) or otherwise interact
    with (for example, interactive form controls).
  </p>

  This requirement is not a hard requirement, however, as there are many cases where an element can
  be empty legitimately, for example when it is used as a placeholder which will later be filled in
  by a script, or when the element is part of a template and would on most pages be filled in but on
  some pages is not relevant.

  Conformance checkers are encouraged to provide a mechanism for authors to find elements that fail
  to fulfill this requirement, as an authoring aid.

  The following elements are palpable content:

  <ul class="brief category-list">
    <li><code>a</code></li>
    <li><code>abbr</code></li>
    <li><code>address</code></li>
    <li><code>article</code></li>
    <li><code>aside</code></li>
    <li><code>audio</code> (if the <code>controls</code> attribute is present)</li>
    <li><code>b</code></li>
    <li><code>bdi</code></li>
    <li><code>bdo</code></li>
    <li><code>blockquote</code></li>
    <li><code>button</code></li>
    <li><code>canvas</code></li>
    <li><code>cite</code></li>
    <li><code>code</code></li>
    <li><code>data</code></li>
    <li><code>details</code></li>
    <li><code>dfn</code></li>
    <li><code>div</code></li>
    <li><code>dl</code> (if the element's children include at least one name-value group)</li>
    <li><code>em</code></li>
    <li><code>embed</code></li>
    <li><code>fieldset</code></li>
    <li><code>figure</code></li>
    <li><code>footer</code></li>
    <li><code>form</code></li>
    <li><code>h1</code></li>
    <li><code>h2</code></li>
    <li><code>h3</code></li>
    <li><code>h4</code></li>
    <li><code>h5</code></li>
    <li><code>h6</code></li>
    <li><code>header</code></li>
    <li><code>i</code></li>
    <li><code>iframe</code></li>
    <li><code>img</code></li>
    <li>
      <code>input</code> (if the <code>type</code> attribute is <em>not</em> in the <a>Hidden</a>
      state)
    </li>
    <li><code>ins</code></li>
    <li><code>kbd</code></li>
    <li><code>keygen</code></li>
    <li><code>label</code></li>
    <li><code>main</code></li>
    <li><code>map</code></li>
    <li><code>mark</code></li>
    <li><code>math</code></li>
    <li><code>menu</code> (if the <code>type</code> attribute is in the <a>toolbar</a> state)</li>
    <li><code>meter</code></li>
    <li><code>nav</code></li>
    <li><code>object</code></li>
    <li>
      <code>ol</code> (if the element's children include at least one <code>li</code> element)
    </li>
    <li><code>output</code></li>
    <li><code>p</code></li>
    <li><code>pre</code></li>
    <li><code>progress</code></li>
    <li><code>q</code></li>
    <li><code>ruby</code></li>
    <li><code>s</code></li>
    <li><code>samp</code></li>
    <li><code>section</code></li>
    <li><code>select</code></li>
    <li><code>small</code></li>
    <li><code>span</code></li>
    <li><code>strong</code></li>
    <li><code>sub</code></li>
    <li><code>sup</code></li>
    <li><code>svg</code></li>
    <li><code>table</code></li>
    <li><code>textarea</code></li>
    <li><code>time</code></li>
    <li><code>u</code></li>
    <li>
      <code>ul</code> (if the element's children include at least one <code>li</code> element)
    </li>
    <li><code>var</code></li>
    <li><code>video</code></li>
    <li><a>Text</a> that is not <a>inter-element whitespace</a></li>
  </ul>

<h6 id="script-supporting-elements">Script-supporting elements</h6>

  <dfn>Script-supporting elements</dfn> are those that do not <a>represent</a> anything themselves
  (i.e. they are not rendered), but are used to support scripts, e.g. to provide functionality for
  the user.

  The following elements are script-supporting elements:

  <ul class="brief category-list">
    <li><code>script</code></li>
    <li><code>template</code></li>
  </ul>

<h5 id="transparent-content-models">Transparent content models</h5>

  Some elements are described as <dfn>transparent</dfn>; they have "transparent" in the description
  of their content model. The content model of a <a>transparent</a> element is derived from the
  content model of its parent element: the elements required in the part of the content model that
  is "transparent" are the same elements as required in the part of the content model of the parent
  of the transparent element in which the transparent element finds itself.

  <div class="example">
    For instance, an <code>ins</code> element inside a <code>ruby</code> element cannot contain an
    <code>rt</code> element, because the part of the <code>ruby</code> element's content model that
    allows <code>ins</code> elements is the part that allows <a>phrasing content</a>, and the
    <code>rt</code> element is not <a>phrasing content</a>.
  </div>

  <p class="note">
    In some cases, where transparent elements are nested in each other, the process has to be
    applied iteratively.
  </p>

  <div class="example">
    Consider the following markup fragment:

    <pre highlight="html">&lt;p>&lt;object>&lt;param>&lt;ins>&lt;map>&lt;a href="/">Apples&lt;/a>&lt;/map>&lt;/ins>&lt;/object>&lt;/p></pre>

    To check whether "Apples" is allowed inside the <code>a</code> element, the content models are
    examined. The <code>a</code> element's content model is transparent, as is the <code>map</code>
    element's, as is the <code>ins</code> element's, as is the part of the <code>object</code>
    element's in which the <code>ins</code> element is found. The <code>object</code> element is
    found in the <code>p</code> element, whose content model is <a>phrasing content</a>. Thus,
    "Apples" is allowed, as text is phrasing content.
  </div>

  When a transparent element has no parent, then the part of its content model that is "transparent"
  must instead be treated as accepting any <a>flow content</a>.

<h5 id="paragraphs">Paragraphs</h5>

  <p class="note">
    The term <a>paragraph</a> as defined in this section is used for more than just the definition
    of the <code>p</code> element. The <a>paragraph</a> concept defined here is used to describe how
    to interpret documents. The <code>p</code> element is merely one of several ways of marking up a
    <a>paragraph</a>.
  </p>

  A <dfn>paragraph</dfn> is typically a run of <a>phrasing content</a> that forms a block of text
  with one or more sentences that discuss a particular topic, as in typography, but can also be used
  for more general thematic grouping. For instance, an address is also a paragraph, as is a part of
  a form, a byline, or a stanza in a poem.

  <div class="example">
    In the following example, there are two paragraphs in a section. There is also a heading,
    which contains phrasing content that is not a paragraph. Note how the comments and
    <a>inter-element whitespace</a> do not form paragraphs.

    <pre highlight="html">
      &lt;section>
        &lt;h2>Example of paragraphs&lt;/h2>
        This is the &lt;em>first&lt;/em> paragraph in this example.
        &lt;p>This is the second.&lt;/p>
        &lt;!-- This is not a paragraph. -->
      &lt;/section>
    </pre>
  </div>

  Paragraphs in <a>flow content</a> are defined relative to what the document looks like without the
  <code>a</code>, <code>ins</code>, <code>del</code>, and <code>map</code> elements complicating
  matters, since those elements, with their hybrid content models, can straddle paragraph
  boundaries, as shown in the first two examples below.

  <p class="note">
    Generally, having elements straddle paragraph boundaries is best avoided. Maintaining such
    markup can be difficult.
  </p>

  <div class="example">
    The following example takes the markup from the earlier example and puts <code>ins</code> and
    <code>del</code> elements around some of the markup to show that the text was changed (though in
    this case, the changes admittedly don't make much sense). Notice how this example has exactly
    the same paragraphs as the previous one, despite the <code>ins</code> and <code>del</code>
    elements &mdash; the <code>ins</code> element straddles the heading and the first paragraph, and
    the <code>del</code> element straddles the boundary between the two paragraphs.

    <pre highlight="html">
      &lt;section>
        &lt;ins>&lt;h1>Example of paragraphs&lt;/h1>
        This is the &lt;em>first&lt;/em> paragraph in&lt;/ins> this example&lt;del>.
        &lt;p>This is the second.&lt;/p>&lt;/del>
        &lt;!-- This is not a paragraph. -->
      &lt;/section>
    </pre>
  </div>

  <div class="impl">
    Let <var>view</var> be a view of the DOM that replaces all <code>a</code>, <code>ins</code>,
    <code>del</code>, and <code>map</code> elements in the document with their
    <a>contents</a>. Then, in <var>view</var>, for each run of sibling <a>phrasing content</a>
    nodes uninterrupted by other types of content, in an element that accepts content other than
    <a>phrasing content</a> as well as <a>phrasing content</a>, let <var>first</var> be the first
    node of the run, and let <var>last</var> be the last node of the run. For each such run that
    consists of at least one node that is neither <a>embedded content</a> nor
    <a>inter-element whitespace</a>, a paragraph exists in the original DOM from immediately before
    <var>first</var> to immediately after <var>last</var>. (Paragraphs can thus span across
    <code>a</code>, <code>ins</code>, <code>del</code>, and <code>map</code> elements.)

    Conformance checkers may warn authors of cases where they have paragraphs that overlap each
    other (this can happen with <code>object</code>, <code>video</code>, <code>audio</code>, and
    <code>canvas</code> elements, and indirectly through elements in other namespaces that allow
    HTML to be further embedded therein, like <code>svg</code> or <code>math</code>).
  </div>

  A <a>paragraph</a> is also formed explicitly by <code>p</code> elements.

  <p class="note">
    The <code>p</code> element can be used to wrap individual paragraphs when there would otherwise
    not be any content other than phrasing content to separate the paragraphs from each other.
  </p>

  <div class="example">
    In the following example, the link spans half of the first paragraph, all of the heading
    separating the two paragraphs, and half of the second paragraph. It straddles the paragraphs and
    the heading.

    <pre highlight="html">
      &lt;header>
        Welcome!
        &lt;a href="about.html">
          This is home of...
          &lt;h1>The Falcons!&lt;/h1>
          The Lockheed Martin multirole jet fighter aircraft!
        &lt;/a>
        This page discusses the F-16 Fighting Falcon's innermost secrets.
      &lt;/header>
    </pre>

    Here is another way of marking this up, this time showing the paragraphs explicitly, and
    splitting the one link element into three:

    <pre highlight="html">
      &lt;header>
        &lt;p>Welcome! &lt;a href="about.html">This is home of...&lt;/a>&lt;/p>
        &lt;h1>&lt;a href="about.html">The Falcons!&lt;/a>&lt;/h1>
        &lt;p>&lt;a href="about.html">The Lockheed Martin multirole jet
        fighter aircraft!&lt;/a> This page discusses the F-16 Fighting
        Falcon's innermost secrets.&lt;/p>
      &lt;/header>
    </pre>
  </div>

  <div class="example">
    It is possible for paragraphs to overlap when using certain elements that define fallback
    content. For example, in the following section:

    <pre highlight="html">
      &lt;section>
        &lt;h2>My Cats&lt;/h2>
        You can play with my cat simulator.
        &lt;object data="cats.sim">
          To see the cat simulator, use one of the following links:
          &lt;ul>
            &lt;li>&lt;a href="cats.sim">Download simulator file&lt;/a>
            &lt;li>&lt;a href="http://sims.example.com/watch?v=LYds5xY4INU">Use online simulator&lt;/a>
          &lt;/ul>
          Alternatively, upgrade to the Mellblom Browser.
        &lt;/object>
        I'm quite proud of it.
      &lt;/section>
    </pre>

    There are five paragraphs:

    1. The paragraph that says "You can play with my cat simulator. <i>object</i> I'm quite proud of
        it.", where <i>object</i> is the <code>object</code> element.
    2. The paragraph that says "To see the cat simulator, use one of the following links:".
    3. The paragraph that says "Download simulator file".
    4. The paragraph that says "Use online simulator".
    5. The paragraph that says "Alternatively, upgrade to the Mellblom Browser.".

    The first paragraph is overlapped by the other four. A user agent that supports the "cats.sim"
    resource will only show the first one, but a user agent that shows the fallback will confusingly
    show the first sentence of the first paragraph as if it was in the same paragraph as the second
    one, and will show the last paragraph as if it was at the start of the second sentence of the
    first paragraph.

    To avoid this confusion, explicit <code>p</code> elements can be used. For example:

    <pre highlight="html">
      &lt;section>
        &lt;h2>My Cats&lt;/h2>
        &lt;p>You can play with my cat simulator.&lt;/p>
        &lt;object data="cats.sim">
          &lt;p>To see the cat simulator, use one of the following links:&lt;/p>
          &lt;ul>
            &lt;li>&lt;a href="cats.sim">Download simulator file&lt;/a>
            &lt;li>&lt;a href="http://sims.example.com/watch?v=LYds5xY4INU">Use online simulator&lt;/a>
          &lt;/ul>
          &lt;p>Alternatively, upgrade to the Mellblom Browser.&lt;/p>
        &lt;/object>
        &lt;p>I'm quite proud of it.&lt;/p>
      &lt;/section>
    </pre>
  </div>


<h4 id="global-attributes"><dfn>Global attributes</dfn></h4>

  The following attributes are common to and may be specified on all <a>HTML elements</a>
  <span class="impl"> (even those not defined in this specification)</span>:

  * <code>accesskey</code>
  * <code>class</code>
  * <code>contenteditable</code>
  * <code>contextmenu</code>
  * <code>dir</code>
  * <code>draggable</code>
  * <code>dropzone</code>
  * <code>hidden</code>
  * <code>id</code>
  * <code>itemid</code>
  * <code>itemprop</code>
  * <code>itemref</code>
  * <code>itemscope</code>
  * <code>itemtype</code>
  * <code>lang</code>
  * <code>spellcheck</code>
  * <code>style</code>
  * <code>tabindex</code>
  * <code>title</code>
  * <code>translate</code>

  <div class="impl">
  These attributes are only defined by this specification as attributes for <a>HTML
  elements</a>. When this specification refers to elements having these attributes, elements from
  namespaces that are not defined as having these attributes must not be considered as being
  elements with these attributes.

  <div class="example">
    For example, in the following XML fragment, the "<code>bogus</code>" element does not have a
    <code>dir</code> attribute as defined in this specification, despite having an attribute with
    the literal name "<code>dir</code>". Thus, <a>the directionality</a> of the inner-most
    <code>span</code> element is '<a>rtl</a>', inherited from the <code>div</code> element
    indirectly through the "<code>bogus</code>" element.

    <pre class="bad">
      &lt;div xmlns="http://www.w3.org/1999/xhtml" dir="rtl">
        &lt;bogus xmlns="http://example.net/ns" dir="ltr">
          &lt;span xmlns="http://www.w3.org/1999/xhtml">
          &lt;/span>
        &lt;/bogus>
      &lt;/div>
    </pre>
  </div>

  </div>

  <hr />

  To enable assistive technology products to expose a more fine-grained interface than is otherwise
  possible with HTML elements and attributes, a set of
  <a>annotations for assistive technology products</a> can be specified (the ARIA <code>role</code>
  and <code>aria-*</code> attributes). [[!WAI-ARIA]]

  <hr />

  The following <a>event handler content attributes</a> may be specified on any <a>HTML element</a>:

  * <code>onabort</code>
  * <code>onautocomplete</code>
  * <code>onautocompleteerror</code>
  * <code>onblur</code>*
  * <code>oncancel</code>
  * <code>oncanplay</code>
  * <code>oncanplaythrough</code>
  * <code>onchange</code>
  * <code>onclick</code>
  * <code>onclose</code>
  * <code>oncontextmenu</code>
  * <code>oncuechange</code>
  * <code>ondblclick</code>
  * <code>ondrag</code>
  * <code>ondragend</code>
  * <code>ondragenter</code>
  * <code>ondragexit</code>
  * <code>ondragleave</code>
  * <code>ondragover</code>
  * <code>ondragstart</code>
  * <code>ondrop</code>
  * <code>ondurationchange</code>
  * <code>onemptied</code>
  * <code>onended</code>
  * <code>onerror</code>*
  * <code>onfocus</code>*
  * <code>oninput</code>
  * <code>oninvalid</code>
  * <code>onkeydown</code>
  * <code>onkeypress</code>
  * <code>onkeyup</code>
  * <code>onload</code>*
  * <code>onloadeddata</code>
  * <code>onloadedmetadata</code>
  * <code>onloadstart</code>
  * <code>onmousedown</code>
  * <code>onmouseenter</code>
  * <code>onmouseleave</code>
  * <code>onmousemove</code>
  * <code>onmouseout</code>
  * <code>onmouseover</code>
  * <code>onmouseup</code>
  * <code>onmousewheel</code>
  * <code>onpause</code>
  * <code>onplay</code>
  * <code>onplaying</code>
  * <code>onprogress</code>
  * <code>onratechange</code>
  * <code>onreset</code>
  * <code>onresize</code>*
  * <code>onscroll</code>*
  * <code>onseeked</code>
  * <code>onseeking</code>
  * <code>onselect</code>
  * <code>onshow</code>
  * <code>onsort</code>
  * <code>onstalled</code>
  * <code>onsubmit</code>
  * <code>onsuspend</code>
  * <code>ontimeupdate</code>
  * <code>ontoggle</code>
  * <code>onvolumechange</code>
  * <code>onwaiting</code>

  <p class="note">
    The attributes marked with an asterisk have a different meaning when specified on
    <code>body</code> elements as those elements expose <a>event handlers</a> of the
    <code>Window</code> object with the same names.
  </p>

  <p class="note">
    While these attributes apply to all elements, they are not useful on all elements. For example,
    only <a>media elements</a> will ever receive a <code>volumechange</code> event fired by the user
    agent.
  </p>

  <hr />

  <a>Custom data attributes</a> (e.g. <code>data-foldername</code> or <code>data-msgid</code>) can
  be specified on any <a>HTML element</a>, to store custom data specific to the page.

  <hr />

  In <a>HTML documents</a>, elements in the <a>HTML namespace</a> may have an <code>xmlns</code>
  attribute specified, if, and only if, it has the exact value
  "<code>http://www.w3.org/1999/xhtml</code>". This does not apply to <a>XML documents</a>.

  <p class="note">
    In HTML, the <code>xmlns</code> attribute has absolutely no effect. It is basically a talisman.
    It is allowed merely to make migration to and from XHTML mildly easier. When parsed by an
    <a>HTML parser</a>, the attribute ends up in no namespace, not the
    "<code>http://www.w3.org/2000/xmlns/</code>" namespace like namespace declaration attributes in
    XML do.
  </p>

  <p class="note">
    In XML, an <code>xmlns</code> attribute is part of the namespace declaration mechanism, and an
    element cannot actually have an <code>xmlns</code> attribute in no namespace specified.
  </p>

  <hr />

  The XML specification also allows the use of the <code>xml:space</code> attribute in the
  <a>XML namespace</a> on any element in an <a>XML document</a>. This attribute has no effect on
  <a>HTML elements</a>, as the default behavior in HTML is to preserve whitespace. [[!XML]]

  <p class="note">
    There is no way to serialize the <code>xml:space</code> attribute on <a>HTML elements</a> in the
    <code>text/html</code> syntax.
  </p>

<h5 id="the-id-attribute">The <dfn><code>id</code></dfn> attribute</h5>

  The <code>id</code> attribute specifies its element's <a>unique identifier (ID)</a>. [[!DOM]]

  The value must be unique amongst all the <a>IDs</a> in the element's <a>home subtree</a> and must
  contain at least one character. The value must not contain any <a>space characters</a>.

  <p class="note">
    There are no other restrictions on what form an ID can take; in particular, IDs can consist of
    just digits, start with a digit, start with an underscore, consist of just punctuation, etc.
  </p>

  <p class="note">
    An element's <a>unique identifier</a> can be used for a variety of purposes, most notably as a
    way to link to specific parts of a document using fragment identifiers, as a way to target an
    element when scripting, and as a way to style a specific element from CSS.
  </p>

  <div class="impl">
    Identifiers are opaque strings. Particular meanings should not be derived from the value of the
    <code>id</code> attribute.
  </div>

<h5 id="the-title-attribute">The <code>title</code> attribute</h5>

  The <dfn><code>title</code></dfn> attribute <a>represents</a> advisory information for the
  element, such as would be appropriate for a tooltip. On a link, this could be the title or a
  description of the target resource; on an image, it could be the image credit or a description of
  the image; on a paragraph, it could be a footnote or commentary on the text; on a citation, it
  could be further information about the source; on <a>interactive content</a>, it could be a label
  for, or instructions for, use of the element; and so forth. The value is text.

  <p class="note">
    Relying on the <code>title</code> attribute is currently discouraged as many user agents do not
    expose the attribute in an accessible manner as required by this specification (e.g. requiring a
    pointing device such as a mouse to cause a tooltip to appear, which excludes keyboard-only users
    and touch-only users, such as anyone with a modern phone or tablet).
  </p>

  If this attribute is omitted from an element, then it implies that the <code>title</code>
  attribute of the nearest ancestor <a>HTML element</a> with a <code>title</code> attribute set is
  also relevant to this element. Setting the attribute overrides this, explicitly stating that the
  advisory information of any ancestors is not relevant to this element. Setting the attribute to
  the empty string indicates that the element has no advisory information.

  If the <code>title</code> attribute's value contains U+000A LINE FEED (LF) characters, the content
  is split into multiple lines. Each U+000A LINE FEED (LF) character represents a line break.

  <div class="example">
    Caution is advised with respect to the use of newlines in <code>title</code> attributes.

    For instance, the following snippet actually defines an abbreviation's expansion
    <em>with a line break in it</em>:

    <pre class="bad" highlight="html">
      &lt;p>My logs show that there was some interest in &lt;abbr title="Hypertext
      Transport Protocol">HTTP&lt;/abbr> today.&lt;/p>
    </pre>
  </div>

  Some elements, such as <code>link</code>, <code>abbr</code>, and <code>input</code>, define
  additional semantics for the <code>title</code> attribute beyond the semantics described above.

  <div class="impl">
    The <dfn>advisory information</dfn> of an element is the value that the following algorithm
    returns, with the algorithm being aborted once a value is returned. When the algorithm returns
    the empty string, then there is no advisory information.

    1. If the element is a <code>link</code>, <code>style</code>, <code>dfn</code>,
        <code>abbr</code>, or <code>menuitem</code> element, then: if the element has a
        <code>title</code> attribute, return the value of that attribute, otherwise, return the
        empty string.
    2. Otherwise, if the element has a <code>title</code> attribute, then return its value.
    3. Otherwise, if the element has a parent element, then return the parent element's
        <a>advisory information</a>.
    4. Otherwise, return the empty string.

    User agents should inform the user when elements have <a>advisory information</a>, otherwise the
    information would not be discoverable.

    <hr />

    The <dfn><code>title</code></dfn> IDL attribute must <a>reflect</a> the <code>title</code>
    content attribute.
  </div>

<h5 id="the-lang-and-xmllang-attributes">
  The <code>lang</code> and <code>xml:lang</code> attributes
</h5>

  The <dfn><code>lang</code></dfn> attribute (in no namespace) specifies the primary language for
  the element's contents and for any of the element's attributes that contain text. Its value must
  be a valid BCP 47 language tag, or the empty string. Setting the attribute to the empty string
  indicates that the primary language is unknown. [[!BCP47]]

  The <dfn><code>lang</code></dfn> attribute in the <a>XML namespace</a> is defined in XML. [[!XML]]

  If these attributes are omitted from an element, then the language of this element is the same as
  the language of its parent element, if any.

  The <code>lang</code> attribute in no namespace may be used on any <a>HTML element</a>.

  The <a><code>lang</code> attribute in the <a>XML namespace</a></a> may be used on
  <a>HTML elements</a> in <a>XML documents</a>, as well as elements in other namespaces if the
  relevant specifications allow it (in particular, MathML and SVG allow <a><code>lang</code>
  attributes in the <a>XML namespace</a></a> to be specified on their elements). If both the
  <code>lang</code> attribute in no namespace and the <a><code>lang</code> attribute in the
  <a>XML namespace</a></a> are specified on the same element, they must have exactly the same value
  when compared in an <a>ASCII case-insensitive</a> manner.

  Authors must not use the <a><code>lang</code> attribute in the <a>XML namespace</a></a> on
  <a>HTML elements</a> in <a>HTML documents</a>. To ease migration to and from XHTML, authors may
  specify an attribute in no namespace with no prefix and with the literal localname
  "<code>xml:lang</code>" on <a>HTML elements</a> in <a>HTML documents</a>, but such attributes must
  only be specified if a <code>lang</code> attribute in no namespace is also specified, and both
  attributes must have the same value when compared in an <a>ASCII case-insensitive</a> manner.

  <p class="note">
    The attribute in no namespace with no prefix and with the literal localname
    "<code>xml:lang</code>" has no effect on language processing.
  </p>

  <div class="impl">
    <hr />

    To determine the <dfn>language</dfn> of a node, user agents must look at the nearest ancestor
    element (including the element itself if the node is an element) that has a
    <a><code>lang</code> attribute in the <a>XML namespace</a></a> set or is an <a>HTML element</a>
    and has a <code>lang</code> in no namespace attribute set. That attribute specifies the language
    of the node (regardless of its value).

    If both the <code>lang</code> attribute in no namespace and the
    <a><code>lang</code> attribute in the <a>XML namespace</a></a> are set on an element, user
    agents must use the <a><code>lang</code> attribute in the <a>XML namespace</a></a>, and the
    <code>lang</code> attribute in no namespace must be <a>ignored</a> for the purposes of
    determining the element's language.

    If neither the node nor any of the node's ancestors, including the <a>root element</a>,
    have either attribute set, but there is a <a>pragma-set default language</a> set, then that
    is the language of the node. If there is no <a>pragma-set default language</a> set, then
    language information from a higher-level protocol (such as HTTP), if any, must be used as the
    final fallback language instead. In the absence of any such language information, and in cases
    where the higher-level protocol reports multiple languages, the language of the node is unknown,
    and the corresponding language tag is the empty string.

    If the resulting value is not a recognized language tag, then it must be treated as an unknown
    language having the given language tag, distinct from all other languages. For the purposes of
    round-tripping or communicating with other services that expect language tags, user agents
    should pass unknown language tags through unmodified, and tagged as being BCP 47 language tags,
    so that subsequent services do not interpret the data as another type of language description.
    [[!BCP47]]

    <p class="example">
      Thus, for instance, an element with <code>lang="xyzzy"</code> would be matched by the selector
      <code>:lang(xyzzy)</code> (e.g. in CSS), but it would not be matched by
      <code>:lang(abcde)</code>, even though both are equally invalid. Similarly, if a Web browser
      and screen reader working in unison communicated about the language of the element, the
      browser would tell the screen reader that the language was "xyzzy", even if it knew it was
      invalid, just in case the screen reader actually supported a language with that tag after all.
      Even if the screen reader supported both BCP 47 and another syntax for encoding language
      names, and in that other syntax the string "xyzzy" was a way to denote the Belarusian
      language, it would be <em>incorrect</em> for the screen reader to then start treating text as
      Belarusian, because "xyzzy" is not how Belarusian is described in BCP 47 codes (BCP 47 uses
      the code "be" for Belarusian).
    </p>

    If the resulting value is the empty string, then it must be interpreted as meaning that the
    language of the node is explicitly unknown.

    <hr />

    User agents may use the element's language to determine proper processing or rendering (e.g. in
    the selection of appropriate fonts or pronunciations, for dictionary selection, or for the user
    interfaces of form controls such as date pickers).

    <hr />

    The <dfn><code>lang</code></dfn> IDL attribute must <a>reflect</a> the <code>lang</code> content
    attribute in no namespace.
  </div>

<h5 id="the-translate-attribute">The <code>translate</code> attribute</h5>

  The <dfn><code>translate</code></dfn> attribute is an <a>enumerated attribute</a> that is used to
  specify whether an element's attribute values and the values of its <code>Text</code> node
  children are to be translated when the page is localized, or whether to leave them unchanged.

  The attribute's keywords are the empty string, <code>yes</code>, and <code>no</code>. The empty
  string and the <code>yes</code> keyword map to the <i>yes</i> state. The <code>no</code> keyword
  maps to the <i>no</i> state. In addition, there is a third state, the <i>inherit</i> state, which
  is the <i>missing value default</i> (and the <i>invalid value default</i>).

  Each element (even non-HTML elements) has a <dfn>translation mode</dfn>, which is in either the
  <a>translate-enabled</a> state or the <a>no-translate</a> state. If an <a>HTML element</a>'s
  <code>translate</code> attribute is in the <i>yes</i> state, then the element's
  <a>translation mode</a> is in the <a>translate-enabled</a> state; otherwise, if the element's
  <code>translate</code> attribute is in the <i>no</i> state, then the element's
  <a>translation mode</a> is in the <a>no-translate</a> state. Otherwise, either the element's
  <code>translate</code> attribute is in the <i>inherit</i> state, or the element is not an
  <a>HTML element</a> and thus does not have a <code>translate</code> attribute; in either case, the
  element's <a>translation mode</a> is in the same state as its parent element's, if any, or in the
  <a>translate-enabled</a> state, if the element is a <a>root element</a>.

  When an element is in the <dfn>translate-enabled</dfn> state, the element's
  <a>translatable attributes</a> and the values of its <code>Text</code> node children are to be
  translated when the page is localized.

  When an element is in the <dfn>no-translate</dfn> state, the element's attribute values and the
  values of its <code>Text</code> node children are to be left as-is when the page is localized,
  e.g. because the element contains a person's name or a the name of a computer program.

  The following attributes are <dfn>translatable attributes</dfn>:

  * <code>abbr</code> on <code>th</code> elements
  * <code>alt</code> on <code>area</code>, <code>img</code>, and <code>input</code> elements
  * <code>content</code> on <code>meta</code> elements, if the <code>name</code> attribute specifies
    a metadata name whose value is known to be translatable
  * <code>download</code> on <code>a</code> and <code>area</code> elements
  * <code>label</code> on <code>menuitem</code>, <code>menu</code>, <code>optgroup</code>,
    <code>option</code>, and <code>track</code> elements
  * <code>lang</code> on <a>HTML elements</a>; must be "translated" to match the language used in
    the translation
  * <code>placeholder</code> on <code>input</code> and <code>textarea</code> elements
  * <code>srcdoc</code> on <code>iframe</code> elements; must be parsed and recursively processed
  * <code>style</code> on <a>HTML elements</a>; must be parsed and recursively processed (e.g. for
    the values of 'content' properties)
  * <code>title</code> on all <a>HTML elements</a>
  * <code>value</code> on <code>input</code> elements with a <code>type</code> attribute in the
    <a>Button</a> state or the <a>Reset Button</a> state

  <div class="impl">
    <hr />

    The <dfn><code>translate</code></dfn> IDL attribute must, on getting, return true if the
    element's <a>translation mode</a> is <a>translate-enabled</a>, and false otherwise. On setting,
    it must set the content attribute's value to "<code>yes</code>" if the new value is true, and
    set the content attribute's value to "<code>no</code>" otherwise.
  </div>

  <div class="example">
    In this example, everything in the document is to be translated when the page is localized,
    except the sample keyboard input and sample program output:

    <pre highlight="html">
      &lt;!DOCTYPE HTML>
      &lt;html> &lt;!-- default on the root element is translate=yes -->
        &lt;head>
          &lt;title>The Bee Game&lt;/title> &lt;!-- implied translate=yes inherited from ancestors -->
        &lt;/head>
        &lt;body>
          &lt;p>The Bee Game is a text adventure game in English.&lt;/p>
          &lt;p>When the game launches, the first thing you should do is type
            &lt;kbd translate=no>eat honey&lt;/kbd>. The game will respond with:&lt;/p>
        &lt;pre>&lt;samp translate=no>Yum yum! That was some good honey!&lt;/samp>&lt;/pre>
        &lt;/body>
      &lt;/html>
    </pre>
  </div>

<h5 id="the-xmlbase-attribute-xml-only">The <dfn><code>xml:base</code></dfn> attribute (XML only)</h5>

  The <code>xml:base</code> attribute is defined in XML Base. [[!XMLBASE]]

  The <code>xml:base</code> attribute may be used on <a>HTML elements</a> of <a>XML documents</a>.
  Authors must not use the <code>xml:base</code> attribute on <a>HTML elements</a> in
  <a>HTML documents</a>.

<h5 id="the-dir-attribute">The <dfn><code>dir</code></dfn> attribute</h5>

  The <code>dir</code> attribute specifies the element's text directionality. The attribute is an
  <a>enumerated attribute</a> with the following keywords and states:

  : The <dfn><code>ltr</code></dfn> keyword, which maps to the <dfn>ltr</dfn> state
  :: Indicates that the contents of the element are explicitly directionally isolated left-to-right
      text.

  : The <dfn><code>rtl</code></dfn> keyword, which maps to the <dfn>rtl</dfn> state
  :: Indicates that the contents of the element are explicitly directionally isolated right-to-left
      text.

  : The <dfn><code>auto</code></dfn> keyword, which maps to the <dfn>auto</dfn> state
  :: Indicates that the contents of the element are explicitly directionally isolated text, but that
      the direction is to be determined programmatically using the contents of the element (as
      described below).

      <p class="note">
        The heuristic used by this state is very crude (it just looks at the first character with a
        strong directionality, in a manner analogous to the Paragraph Level determination in the
        bidirectional algorithm). Authors are urged to only use this value as a last resort when the
        direction of the text is truly unknown and no better server-side heuristic can be applied.
        [[!BIDI]]
      </p>

      <p class="note">
        For <code>textarea</code> and <code>pre</code> elements, the heuristic is applied on a
        per-paragraph level.
      </p>

  The attribute has no <i>invalid value default</i> and no <i>missing value default</i>.

  <hr />

  <dfn>The directionality</dfn> of an element (any element, not just an <a>HTML element</a>) is
  either '<dfn>ltr</dfn>' or '<dfn>rtl</dfn>', and is determined as per the first appropriate set of
  steps from the following list:

  <dl class="switch">
    <dt>If the element's <code>dir</code> attribute is in the <a>ltr</a> state</dt>
    <dt>
      If the element is a <a>root element</a> and the <code>dir</code> attribute is not in a defined
      state (i.e. it is not present or has an invalid value)
    </dt>
    <dt>
      If the element is an <code>input</code> element whose <code>type</code> attribute is in the
      <a>Telephone</a> state, and the <code>dir</code> attribute is not in a defined state (i.e. it
      is not present or has an invalid value)
    </dt>
    <dd><a>The directionality</a> of the element is '<a>ltr</a>'.</dd>

    <dt>If the element's <code>dir</code> attribute is in the <a>rtl</a> state</dt>
    <dd><a>The directionality</a> of the element is '<a>rtl</a>'.</dd>

    <dt>
      If the element is an <code>input</code> element whose <code>type</code> attribute is in the
      <a>Text</a>, <a>Search</a>, <a>Telephone</a>, <a>URL</a>, or <a>E-mail</a> state, and the
      <code>dir</code> attribute is in the <a>auto</a> state
    </dt>
    <dt>
      If the element is a <code>textarea</code> element and the <code>dir</code> attribute is in the
      <a>auto</a> state
    </dt>
    <dd>
      If the element's <a>value</a> contains a character of bidirectional character type AL or R,
      and there is no character of bidirectional character type L anywhere before it in the
      element's <a>value</a>, then <a>the directionality</a> of the element is '<a>rtl</a>'.
      [[!BIDI]]

      Otherwise, if the element's <a>value</a> is not the empty string, or if the element is a
      <a>root element</a>, <a>the directionality</a> of the element is '<a>ltr</a>'.

      Otherwise, <a>the directionality</a> of the element is the same as the element's parent
      element's <a>directionality</a>.
    </dd>

    <dt>If the element's <code>dir</code> attribute is in the <a>auto</a> state</dt>
    <dt>
      If the element is a <code>bdi</code> element and the <code>dir</code> attribute is not in a
      defined state (i.e. it is not present or has an invalid value)
    </dt>
    <dd>
      Find the first character in <a>tree order</a> that matches the following criteria:

      * The character is from a <code>Text</code> node that is a descendant of the element whose
        <a>directionality</a> is being determined.
      * The character is of bidirectional character type L, AL, or R. [[!BIDI]]
      * The character is not in a <code>Text</code> node that has an ancestor element that is a
        descendant of the element whose <a>directionality</a> is being determined and that is
        either:
        * A <code>bdi</code> element.
        * A <code>script</code> element.
        * A <code>style</code> element.
        * A <code>textarea</code> element.
        * An element with a <code>dir</code> attribute in a defined state.

      If such a character is found and it is of bidirectional character type AL or R,
      <a>the directionality</a> of the element is '<a>rtl</a>'.

      If such a character is found and it is of bidirectional character type L,
      <a>the directionality</a> of the element is '<a>ltr</a>'.

      Otherwise, if the element is a <a>root element</a>, <a>the directionality</a> of the element
      is '<a>ltr</a>'.

      Otherwise, <a>the directionality</a> of the element the same as the element's parent element's
      <a>directionality</a>.
    </dd>

    <dt>
      If the element has a parent element and the <code>dir</code> attribute is not in a defined
      state (i.e. it is not present or has an invalid value)
    </dt>
    <dd>
      <a>The directionality</a> of the element is the same as the element's parent element's
      <a>directionality</a>.
    </dd>
  </dl>

  <p class="note">
    Since the <code>dir</code> attribute is only defined for <a>HTML elements</a>, it cannot be
    present on elements from other namespaces. Thus, elements from other namespaces always just
    inherit their <a>directionality</a> from their parent element, or, if they don't have one,
    default to '<a>ltr</a>'.
  </p>

  <div class="impl">
    <p class="note">
      This attribute <a>has rendering requirements involving the bidirectional algorithm</a>.
    </p>
  </div>

  <hr />

  The <dfn>directionality of an attribute</dfn> of an <a>HTML element</a>, which is used when the
  text of that attribute is to be included in the rendering in some manner, is determined as per the
  first appropriate set of steps from the following list:

  <dl class="switch">
    <dt>
      If the attribute is a <a>directionality-capable attribute</a> and the element's
      <code>dir</code> attribute is in the <a>auto</a> state
    </dt>
    <dd>
      Find the first character (in logical order) of the attribute's value that is of bidirectional
      character type L, AL, or R. [[!BIDI]]</a>

      If such a character is found and it is of bidirectional character type AL or R, the
      <a>directionality of the attribute</a> is '<a>rtl</a>'.

      Otherwise, the <a>directionality of the attribute</a> is '<a>ltr</a>'.
    </dd>

    <dt>Otherwise</dt>
    <dd>
      The <a>directionality of the attribute</a> is the same as <a>the element's directionality</a>.
    </dd>
  </dl>

  The following attributes are <dfn>directionality-capable attributes</dfn>:

  * <code>abbr</code> on <code>th</code> elements
  * <code>alt</code> on <code>area</code>, <code>img</code>, and <code>input</code> elements
  * <code>content</code> on <code>meta</code> elements, if the <code>name</code> attribute specifies
    a metadata name whose value is primarily intended to be human-readable rather than
    machine-readable
  * <code>label</code> on <code>menuitem</code>, <code>menu</code>, <code>optgroup</code>,
    <code>option</code>, and <code>track</code> elements
  * <code>placeholder</code> on <code>input</code> and <code>textarea</code> elements
  * <code>title</code> on all <a>HTML elements</a>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>dir</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns <a>the <code>html</code> element</a>'s <code>dir</code> attribute's value, if any.

      Can be set, to either "<code>ltr</code>", "<code>rtl</code>", or "<code>auto</code>" to
      replace <a>the <code>html</code> element</a>'s <code>dir</code> attribute's value.

      If there is no <a><code>html</code> element</a>, returns the empty string and ignores new
      values.
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>dir</code></dfn> IDL attribute on an element must <a>reflect</a> the
    <code>dir</code> content attribute of that element, <a>limited to only known values</a>.

    The <dfn><code>dir</code></dfn> IDL attribute on <code>Document</code> objects must
    <a>reflect</a> the <code>dir</code> content attribute of <a>the <code>html</code> element</a>,
    if any, <a>limited to only known values</a>. If there is no such element, then the attribute
    must return the empty string and do nothing on setting.
  </div>

  <p class="note">
    Authors are strongly encouraged to use the <code>dir</code> attribute to indicate text direction
    rather than using CSS, since that way their documents will continue to render correctly even in
    the absence of CSS (e.g. as interpreted by search engines).
  </p>

  <div class="example">
    This markup fragment is of an IM conversation.

    <pre highlight="html">
      &lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> How do you write "What's your name?" in Arabic?&lt;/p>
      &lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> &#x645;&#x627; &#x627;&#x633;&#x645;&#x643;&#x61f;&lt;/p>
      &lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> Thanks.&lt;/p>
      &lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> That's written "&#x634;&#x643;&#x631;&#x64b;&#x627;".&lt;/p>
      &lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> Do you know how to write "Please"?&lt;/p>
      &lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> "&#x645;&#x646; &#x641;&#x636;&#x644;&#x643;", right?&lt;/p>
    </pre>

    Given a suitable style sheet and the default alignment styles for the <code>p</code> element,
    namely to align the text to the <i>start edge</i> of the paragraph, the resulting rendering could
    be as follows:

    <img src="images/im.png" alt="Each paragraph rendered as a separate block, with the paragraphs left-aligned except the second paragraph and the last one, which would  be right aligned, with the usernames ('Student' and 'Teacher' in this example) flush right, with a colon to their left, and the text first to the left of that." width="366" height="157" />

    As noted earlier, the <code>auto</code> value is not a panacea. The final paragraph in this
    example is misinterpreted as being right-to-left text, since it begins with an Arabic character,
    which causes the "right?" to be to the left of the Arabic text.
  </div>

<h5 id="classes">The <dfn><code>class</code></dfn> attribute</h5>

  Every <a>HTML element</a> may have a <code>class</code> attribute specified.

  The attribute, if specified, must have a value that is a <a>set of space-separated tokens</a>
  representing the various classes that the element belongs to.

  <div class="impl">
    The classes that an <a>HTML element</a> has assigned to it consists of all the classes returned
    when the value of the <code>class</code> attribute is <a>split on spaces</a>. (Duplicates are
    ignored.)
  </div>

  <p class="note">
    Assigning classes to an element affects class matching in selectors in CSS, the
    <code>getElementsByClassName()</code> method in the DOM, and other such features.
  </p>

  There are no additional restrictions on the tokens authors can use in the <code>class</code>
  attribute, but authors are encouraged to use values that describe the nature of the content,
  rather than values that describe the desired presentation of the content.

  <div class="impl">
    <hr />

    <p class="note">
      The <dfn><code>className</code></dfn> and <dfn><code>classList</code></dfn> IDL attributes,
      defined in the DOM specification, <a>reflect</a> the <code>class</code> content attribute.
      [[!DOM]]
    </p>
  </div>

  <h5 id="the-style-attribute">The <dfn><code>style</code></dfn> attribute</h5>

  All <a>HTML elements</a> may have the <code>style</code> content attribute set. This is a
  <a>CSS styling attribute</a> as defined by the CSS Styling Attribute Syntax specification.
  [[!CSS-STYLE-ATTR]]

  <div class="impl">
    In user agents that support CSS, the attribute's value must be parsed when the attribute is
    added or has its value changed, according to the rules given for <a>CSS styling attributes</a>.
    [[!CSS-STYLE-ATTR]]
  </div>

  Documents that use <code>style</code> attributes on any of their elements must still be
  comprehensible and usable if those attributes were removed.

  <p class="note">
    In particular, using the <code>style</code> attribute to hide and show content, or to convey
    meaning that is otherwise not included in the document, is non-conforming. (To hide and show
    content, use the <code>hidden</code> attribute.)
  </p>

  <hr />

  <dl class="domintro">
    <dt><var>element</var> . <code>style</code></dt>
    <dd>
      Returns a <code>CSSStyleDeclaration</code> object for the element's <code>style</code>
      attribute.
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>style</code></dfn> IDL attribute is defined in the CSS Object Model (CSSOM)
    specification. [[!CSSOM]]
  </div>

  <div class="example">
    In the following example, the words that refer to colors are marked up using the
    <code>span</code> element and the <code>style</code> attribute to make those words show up in
    the relevant colors in visual media.

    <pre highlight="html">
      &lt;p>My sweat suit is &lt;span style="color: green; background:
      transparent">green&lt;/span> and my eyes are &lt;span style="color: blue;
      background: transparent">blue&lt;/span>.&lt;/p>
    </pre>
  </div>

<h5 id="embedding-custom-non-visible-data-with-the-data--attributes"><dfn>Embedding custom non-visible data</dfn> with the <code>data-*</code> attributes</h5>

  A <dfn>custom data attribute</dfn> is an attribute in no namespace whose name starts with the
  string "<dfn><code>data-</code></dfn>", has at least one character after the hyphen, is
  <a>XML-compatible</a>, and contains no <a>uppercase ASCII letters</a>.

  <p class="note">
    All attribute names on <a>HTML elements</a> in <a>HTML documents</a> get ASCII-lowercased
    automatically, so the restriction on ASCII uppercase letters doesn't affect such documents.
  </p>

  <a>Custom data attributes</a> are intended to store custom data private to the page or
  application, for which there are no more appropriate attributes or elements.

  These attributes are not intended for use by software that is not known to the administrators of
  the site that uses the attributes. For generic extensions that are to be used by multiple
  independent tools, either this specification should be extended to provide the feature explicitly,
  or a technology like <a>microdata</a> should be used (with a standardized vocabulary).

  <div class="example">
    For instance, a site about music could annotate list items representing tracks in an album with
    custom data attributes containing the length of each track. This information could then be used
    by the site itself to allow the user to sort the list by track length, or to filter the list for
    tracks of certain lengths.

    <pre highlight="html">
      &lt;ol>
        &lt;li data-length="2m11s">Beyond The Sea&lt;/li>
        ...
      &lt;/ol>
    </pre>

    It would be inappropriate, however, for the user to use generic software not associated with
    that music site to search for tracks of a certain length by looking at this data.

    This is because these attributes are intended for use by the site's own scripts, and are not a
    generic extension mechanism for publicly-usable metadata.
  </div>

  <div class="example">
    Similarly, a page author could write markup that provides information for a translation tool
    that they are intending to use:

    <pre highlight="html">
      &lt;p>The third &lt;span data-mytrans-de="Anspruch">claim&lt;/span> covers the case of
      &lt;span translate="no">HTML&lt;/span> markup.&lt;/p>
    </pre>

    In this example, the "<code>data-mytrans-de</code>" attribute gives specific text for the
    MyTrans product to use when translating the phrase "claim" to German. However, the standard
    <code>translate</code> attribute is used to tell it that in all languages, "HTML" is to remain
    unchanged. When a standard attribute is available, there is no need for a
    <a>custom data attribute</a> to be used.
  </div>

  Every <a>HTML element</a> may have any number of <a>custom data attributes</a> specified, with any
  value.

  <hr />

  <dl class="domintro">
    <dt><var>element</var> . <code>dataset</code></dt>
    <dd>
      Returns a <code>DOMStringMap</code> object for the element's <code>data-*</code> attributes.

      Hyphenated names become camel-cased. For example, <code>data-foo-bar=""</code> becomes
      <code>element.dataset.fooBar</code>.
    </dd>

  </dl>

  <div class="impl">
    The <dfn><code>dataset</code></dfn> IDL attribute provides convenient
    accessors for all the <code>data-*</code> attributes on an element. On
    getting, the <code>dataset</code> IDL attribute must return a
    <code>DOMStringMap</code> object, associated with the following algorithms, which expose these
    attributes on their element:

    : The algorithm for getting the list of name-value pairs
    :: 1. Let <var>list</var> be an empty list of name-value pairs.
        2. For each content attribute on the element whose first five characters are the string
            "<code>data-</code>" and whose remaining characters (if any) do not include any
            <a>uppercase ASCII letters</a>, in the order that those attributes are listed in the
            element's <a>attribute list</a>, add a name-value pair to <var>list</var> whose name is
            the attribute's name with the first five characters removed and whose value is the
            attribute's value.
        3. For each name in <var>list</var>, for each U+002D HYPHEN-MINUS character (-) in the name
            that is followed by a <a>lowercase ASCII letter</a>, remove the U+002D HYPHEN-MINUS
            character (-) and replace the character that followed it by the same character
            <a>converted to ASCII uppercase</a>.
        4. Return <var>list</var>.

    : The algorithm for setting names to certain values
    :: 1.Let <var>name</var> be the name passed to the algorithm.
        2. Let <var>value</var> be the value passed to the algorithm.
        3. If <var>name</var> contains a U+002D HYPHEN-MINUS character (-) followed by a
            <a>lowercase ASCII letter</a>, throw a <code>SyntaxError</code> exception and abort
            these steps.
        4. For each <a>uppercase ASCII letter</a> in <var>name</var>, insert a U+002D HYPHEN-MINUS
            character (-) before the character and replace the character with the same character
            <a>converted to ASCII lowercase</a>.
        5. Insert the string <code>data-</code> at the front of <var>name</var>.
        6. Set the value of the attribute with the name <var>name</var>, to the value
            <var>value</var>, replacing any previous value if the attribute already existed. If
            <code>setAttribute()</code> would have thrown an exception when setting an attribute
            with the name <var>name</var>, then this must throw the same exception.

    : The algorithm for deleting names
    :: 1. Let <var>name</var> be the name passed to the algorithm.
        2. For each <a>uppercase ASCII letter</a> in <var>name</var>, insert a U+002D HYPHEN-MINUS
            character (-) before the character and replace the character with the same character
            <a>converted to ASCII lowercase</a>.
        3. Insert the string <code>data-</code> at the front of <var>name</var>.
        4. Remove the attribute with the name <var>name</var>, if such an attribute exists. Do
            nothing otherwise.

        <p class="note">
          This algorithm will only get invoked by the Web IDL specification for names that are given
          by the earlier algorithm for getting the list of name-value pairs. [[!WEBIDL]]
        </p>
  </div>

  <div class="example">
    If a Web page wanted an element to represent a space ship, e.g. as part of a game, it would have
    to use the <code>class</code> attribute along with <code>data-*</code> attributes:

    <pre highlight="html">
      &lt;div class="spaceship">x="30">
        &lt;button class="fire" onclick="spaceships[this.parentNode.dataset.shipId].fire()">
          Fire
        &lt;/button>
      &lt;/div>
    </pre>

    Notice how the hyphenated attribute name becomes camel-cased in the API.
  </div>

  Authors should carefully design such extensions so that when the attributes are ignored and any
  associated CSS dropped, the page is still usable.

  <div class="impl">
    User agents must not derive any implementation behavior from these attributes or values.
    Specifications intended for user agents must not define these attributes to have any meaningful
    values.
  </div>

  JavaScript libraries may use the <a>custom data attributes</a>, as they are considered to be part
  of the page on which they are used. Authors of libraries that are reused by many authors are
  encouraged to include their name in the attribute names, to reduce the risk of clashes. Where it
  makes sense, library authors are also encouraged to make the exact name used in the attribute
  names customizable, so that libraries whose authors unknowingly picked the same name can be used
  on the same page, and so that multiple versions of a particular library can be used on the same
  page even when those versions are not mutually compatible.

  <div class="example">
    For example, a library called "DoQuery" could use attribute names like
    <code>data-doquery-range</code>, and a library called "jJo" could use attributes names like
    <code>data-jjo-range</code>. The jJo library could also provide an API to set which prefix to
    use (e.g. <code>J.setDataPrefix('j2')</code>, making the attributes have names like
    <code>data-j2-range</code>).
  </div>

<h4 id="requirements-relating-to-the-bidirectional-algorithm">
  Requirements relating to the bidirectional algorithm
</h4>

<h5 id="authoring-conformance-criteria-for-bidirectional-algorithm-formatting-characters">
  Authoring conformance criteria for bidirectional-algorithm formatting characters
</h5>

  <a>Text content</a> in <a>HTML elements</a> with <code>Text</code> nodes in their <a>contents</a>,
  and text in attributes of <a>HTML elements</a> that allow free-form text, may contain characters
  in the ranges U+202A to U+202E and U+2066 to U+2069 (the bidirectional-algorithm formatting
  characters). However, the use of these characters is restricted so that any embedding or overrides
  generated by these characters do not start and end with different parent elements, and so that all
  such embeddings and overrides are explicitly terminated by a U+202C POP DIRECTIONAL FORMATTING
  character. This helps reduce incidences of text being reused in a manner that has unforeseen
  effects on the bidirectional algorithm. [[!BIDI]]

  The aforementioned restrictions are defined by specifying that certain parts of documents form
  <a>bidirectional-algorithm formatting character ranges</a>, and then imposing a requirement on
  such ranges.

  The strings resulting from applying the following algorithm to an <a>HTML element</a>
  <var>element</var> are <a>bidirectional-algorithm formatting character ranges</a>:

  1. Let <var>output</var> be an empty list of strings.
  2. Let <var>string</var> be an empty string.
  3. Let <var>node</var> be the first child node of <var>element</var>, if any, or null otherwise.
  4. <i>Loop</i>: If <var>node</var> is null, jump to the step labeled <i>end</i>.
  5. Process <var>node</var> according to the first matching step from the following list:

      <dl class="switch">
        <dt>If <var>node</var> is a <code>Text</code> node</dt>
        <dd>Append the text data of <var>node</var> to <var>string</var>.</dd>

        <dt>If <var>node</var> is a <code>br</code> element</dt>
        <dt>
          If <var>node</var> is an <a>HTML element</a> that is <a>flow content</a> but that is not
          also <a>phrasing content</a>
        </dt>
        <dd>
          If <var>string</var> is not the empty string, push <var>string</var> onto
          <var>output</var>, and let <var>string</var> be empty string.
        </dd>

        <dt>Otherwise</dt>
        <dd>Do nothing.</dd>
      </dl>
  6. Let <var>node</var> be <var>node</var>'s next sibling, if any, or null otherwise.
  7. Jump to the step labeled <i>loop</i>.
  8. <i>End</i>: If <var>string</var> is not the empty string, push <var>string</var> onto
      <var>output</var>.
  9. Return <var>output</var> as the <a>bidirectional-algorithm formatting character ranges</a>.

  The value of a namespace-less attribute of an <a>HTML element</a> is a <a>bidirectional-algorithm
  formatting character range</a>.

  Any strings that, as described above, are
  <dfn>bidirectional-algorithm formatting character ranges</dfn> must match the <code>string</code>
  production in the following ABNF, the character set for which is Unicode. [[!ABNF]]

  <pre data-highlight="abnf">
    string        = *( plaintext ( embedding / override / isolation ) ) plaintext
    embedding     = ( lre / rle ) string pdf
    override      = ( lro / rlo ) string pdf
    isolation     = ( lri / rli / fsi ) string pdi
    lre           = %x202A ; U+202A LEFT-TO-RIGHT EMBEDDING
    rle           = %x202B ; U+202B RIGHT-TO-LEFT EMBEDDING
    lro           = %x202D ; U+202D LEFT-TO-RIGHT OVERRIDE
    rlo           = %x202E ; U+202E RIGHT-TO-LEFT OVERRIDE
    pdf           = %x202C ; U+202C POP DIRECTIONAL FORMATTING
    lri           = %x2066 ; U+2066 LEFT-TO-RIGHT ISOLATE
    rli           = %x2067 ; U+2067 RIGHT-TO-LEFT ISOLATE
    fsi           = %x2068 ; U+2068 FIRST STRONG ISOLATE
    pdi           = %x2069 ; U+2069 POP DIRECTIONAL ISOLATE
    plaintext     = *( %x0000-2029 / %x202F-2065 / %x206A-10FFFF )
                    ; any string with no bidirectional-algorithm formatting characters
  </pre>

  <p class="note">
    While the U+2069 POP DIRECTIONAL ISOLATE character implicitly also ends open embeddings and
    overrides, text that relies on this implicit scope closure is not conforming to this
    specification. All strings of embeddings, overrides, and isolations need to be explicitly
    terminated to conform to this section's requirements.
  </p>

  <p class="note">
    Authors are encouraged to use the <code>dir</code> attribute, the <code>bdo</code> element, and
    the <code>bdi</code> element, rather than maintaining the bidirectional-algorithm formatting
    characters manually. The bidirectional-algorithm formatting characters interact poorly with CSS.
</p>

  <div class="impl">
    <h5 id="user-agent-conformance-criteria">User agent conformance criteria</h5>

    User agents must implement the Unicode bidirectional algorithm to determine the proper ordering
    of characters when rendering documents and parts of documents. [[!BIDI]]

    The mapping of HTML to the Unicode bidirectional algorithm must be done in one of three ways.
    Either the user agent must implement CSS, including in particular the CSS 'unicode-bidi',
    'direction', and 'content' properties, and must have, in its user agent style sheet, the rules
    using those properties given in this specification's <a>rendering</a> section, or,
    alternatively, the user agent must act as if it implemented just the aforementioned properties
    and had a user agent style sheet that included all the aforementioned rules, but without letting
    style sheets specified in documents override them, or, alternatively, the user agent must
    implement another styling language with equivalent semantics. [[!CSS-WRITING-MODES]
    [[!CSS3-CONTENT]]

    The following elements and attributes have requirements defined by the <a>rendering</a> section
    that, due to the requirements in this section, are requirements on all user agents (not just
    those that <a>support the suggested default rendering</a>):

    * <code>dir</code> attribute
    * <code>bdi</code> element
    * <code>bdo</code> element
    * <code>br</code> element
    * <code>pre</code> element
    * <code>textarea</code> element
    * <code>wbr</code> element
  </div>

  <h4 id="wai-aria"><dfn>WAI-ARIA</dfn></h4>

  <div class="note">
    Authors are encouraged to make use of the following documents for guidance on using ARIA in HTML
    beyond that which is provided in this section:

    * <a>Using WAI-ARIA in HTML</a> - A practical guide for developers on how to to add
        accessibility information to HTML elements using the Accessible Rich Internet Applications
        specification [[!WAI-ARIA]]. In particular the <a>Recommendations Table</a> provides a
        complete reference for authors as to which ARIA roles, states and properties are appropriate
        to use on each HTML element.
    * <a>WAI-ARIA 1.0 Authoring Practices</a> - An author's guide to understanding and implementing
        Accessible Rich Internet Applications.
  </div>

  Authors may use the ARIA <code>role</code> and <code>aria-*</code> attributes on
  <a>HTML elements</a>, in accordance with the requirements described in the ARIA specifications,
  except where these conflict with the <a>strong native semantics</a> or are equal to the
  <a>default implicit ARIA semantics</a> described below. These exceptions are intended to prevent
  authors from making assistive technology products report nonsensical states that do not represent
  the actual state of the document. [[!WAI-ARIA]]

  Authors must not set the ARIA <code>role</code> and <code>aria-*</code> attributes in a manner
  that conflicts with the semantics described in the following table, except that the
  <code>presentation</code> role may always be used. Authors must not set the ARIA <code>role</code>
  and <code>aria-*</code> attributes to values that match the <a>default implicit ARIA semantics</a>
  defined in the following two tables.

  <div class="impl">
    User agents must implement ARIA semantics on all <a>HTML elements</a>, as defined in the ARIA
    specifications. The <a>default implicit ARIA semantics</a> defined below must be recognized by
    implementations for the purposes of ARIA processing. [[!WAI-ARIA-IMPLEMENTATION]]

    <p class="note">
      The ARIA attributes defined in the ARIA specifications, and the <a>strong native semantics</a>
      and <a>default implicit ARIA semantics</a> defined below, do not have any effect on CSS
      pseudo-class matching, user interface modalities that don't use assistive technologies, or the
      default actions of user interaction events as described in this specification.
    </p>
  </div>

<h5 id="aria-role-attribute">ARIA Role Attribute</h5>

  Any HTML element, other than elements having <a>Strong Native Semantics</a> of <a>No role</a>, may
  have an ARIA <code>role</code> attribute specified. This is an ARIA Role attribute as defined by
  [[!WAI-ARIA]] <a>Section 5.4 Definition of Roles</a>.

  The attribute, if specified, must have a value that is a set of space-separated tokens;
  each token must be a non-abstract role defined in the WAI-ARIA specification [[!WAI-ARIA]].

  <div class="impl">
    The WAI-ARIA role that an HTML element has assigned to it is the first non-abstract role found
    in the list of values generated when the <code>role</code> attribute is split on spaces.
  </div>

<h5 id="state-and-property-attributes">State and Property Attributes</h5>

  Every HTML element may have ARIA state and property attributes specified. These attributes are
  defined by [[!WAI-ARIA]] in
  <a>Section 6.6, Definitions of States and Properties (all aria-* attributes)</a>.

  A subset of the ARIA State and Property attributes are defined as
  "<dfn>Global States and Properties</dfn>" in <a>Section 6.4. Global States and Properties</a> of
  the [[!WAI-ARIA]] Specification.

  These attributes, if specified, must have a value that is the ARIA value type in the "Value" field
  of the definition for the state or property, mapped to the appropriate HTML value type according
  to [[!WAI-ARIA]] <a>Section 10.2 Mapping WAI-ARIA Value types to languages</a> using the HTML 5
  mapping.

  ARIA State and Property attributes can be used on any element. They are not always meaningful,
  however, and in such cases user agents might not perform any processing aside from including them
  in the DOM. State and property attributes are processed according to the requirements of the
  sections <a>Strong Native Semantics</a> and <a>Implicit ARIA semantics</a>, as well as
  [[!WAI-ARIA]] and [[!WAI-ARIA-IMPLEMENTATION]].

<h5 id="sec-strong-native-semantics">Strong Native Semantics</h5>

  The following table defines the <a>strong native semantics</a> and corresponding
  <a>default implicit ARIA semantics</a> that apply to <a>HTML elements</a>. Each language feature
  (element or attribute) in a cell in the first column implies the ARIA semantics (any role, states,
  and properties) given in the cell in the second column of the same row. <span  class="impl">When
  multiple rows apply to an element, the role from the last row to define a role must be applied,
  and the states and properties from all the rows must be combined.</span>

  Documents must not use any <code>role</code> values with elements in the following table other
  than the corresponding role value (if any) as listed for that element in the second column, or the
  <code>role</code> value "<code>presentation</code>", if the second column indicates that element's
  semantics can be removed by using the "<code>presentation</code>" <code>role</code> value.

 <p class="note">
   In the majority of cases setting an ARIA <code>role</code> and/or <code>aria-*</code> attribute
   that matches the <a>default implicit ARIA semantics</a> is unnecessary and not recommended as
   these properties are already set by the browser.
 </p>

  <table>
    <thead>
      <tr>
        <th>Language feature</th>
        <th><a>Strong native semantics</a> and <a>default implicit ARIA semantics</a></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>area</code> element that creates a <a>hyperlink</a></td>
        <td><code>link</code> role</td>
      </tr>
      <tr>
        <td><code>base</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>datalist</code> element</td>
        <td>
          <code>listbox</code> role, with the <code>aria-multiselectable</code> property set to
          "false"
        </td>
      </tr>
      <tr>
        <td><code>details</code> element</td>
        <td>
          <code>aria-expanded</code> state set to "true" if the element's <code>open</code>
          attribute is present, and set to "false" otherwise
        </td>
      </tr>
      <tr>
        <td><code>dialog</code> element without an <code>open</code> attribute</td>
        <td>The <code>aria-hidden</code> state set to "true"</td>
      </tr>
      <tr>
        <td><code>fieldset</code> element</td>
        <td>
          <code>group</code> role (semantics may be removed by using the <code>presentation</code>
          role)
        </td>
      </tr>
      <tr>
        <td>
          <code>footer</code> element that is not a descendant of an <code>article</code> or
          <code>section</code> element.
        </td>
        <td>
          <code>contentinfo</code> role (semantics may be removed by using the
          <code>presentation</code> role)
        </td>
      </tr>
      <tr>
        <td><code>head</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td>
          <code>header</code> element that is not a descendant of an <code>article</code> or
          <code>section</code> element.
        </td>
        <td>
          <code>banner</code> role (semantics may be removed by using the <code>presentation</code>
          role)
        </td>
      </tr>
      <tr>
        <td><code>hr</code> element</td>
        <td>
          <code>separator</code> role (semantics may be removed by using the
          <code>presentation</code> role)
        </td>
      </tr>
      <tr>
        <td><code>html</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>img</code> element whose <code>alt</code> attribute's value is empty</td>
        <td>
          <a>No role</a>. User Agents must identify the <code>img</code> as ignored or omit it from
          the accessibility tree.
        </td>
      </tr>
      <tr>
        <td>
          <code>img</code> element whose <code>alt</code> attribute's value is empty and whose
          <code>usemap</code> attribute has a <a>valid hash-name reference</a> to a <code>map</code>
          element.
        </td>
        <td><code>img</code> role</td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Checkbox</a>
          state
        </td>
        <td>
          <code>aria-checked</code> state set to "mixed" if the element's <code>indeterminate</code>
          IDL attribute is true, or "true" if the element's <a>checkedness</a> is true, or "false"
          otherwise
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Color</a> state
        </td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Date</a> state
        </td>
        <td>
          <a>No role</a>, with the <code>aria-readonly</code> property set to "true" if the element
          has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Date and Time</a>
          state
        </td>
        <td>
          <a>No role</a>, with the <code>aria-readonly</code> property set to "true" if the element
          has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>E-mail</a> state
          with no <a>suggestions source element</a>
        </td>
        <td>
          <code>textbox</code> role, with the <code>aria-readonly</code> property set to "true" if
          the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>File Upload</a>
          state
        </td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Hidden</a> state
        </td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Month</a> state
        </td>
        <td>
          <a>No role</a>, with the <code>aria-readonly</code> property set to "true" if the element
          has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Number</a> state
        </td>
        <td>
          <code>spinbutton</code> role, with the <code>aria-readonly</code> property set to "true"
          if the element has a <code>readonly</code> attribute, the <code>aria-valuemax</code>
          property set to the element's <a>maximum</a>, the <code>aria-valuemin</code> property set
          to the element's <a>minimum</a>, and, if the result of applying the <a>rules for parsing
          floating-point number values</a> to the element's <a>value</a> is a number, with the
          <code>aria-valuenow</code> property set to that number
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Password</a> state
        </td>
        <td>
          <code>textbox</code> role, with the <code>aria-readonly</code> property set to "true" if
          the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Range</a> state
          and the <code>multiple</code> attribute not specified
        </td>
        <td>
          <code>aria-valuemax</code> property set to the element's <a>maximum</a>, and the
          <code>aria-valuemin</code> property set to the element's <a>minimum</a>
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Reset Button</a>
          state
        </td>
        <td><code>button</code> role</td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Search</a> state
          with no <a>suggestions source element</a>
        </td>
        <td>
          <code>textbox</code> role, with the <code>aria-readonly</code> property set to "true" if
          the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Submit Button</a>
          state
        </td>
        <td><code>button</code> role</td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Telephone</a>
          state with no <a>suggestions source element</a>
        </td>
        <td>
          <code>textbox</code> role, with the <code>aria-readonly</code> property set to "true" if
          the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Text</a> state
          with no <a>suggestions source element</a>
        </td>
        <td>
          <code>textbox</code> role, with the <code>aria-readonly</code> property set to "true" if
          the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Text</a>,
          <a>Search</a>, <a>Telephone</a>, <a>URL</a>, or <a>E-mail</a> states with a <a>suggestions
          source element</a>
        </td>
        <td>
          <code>combobox</code> role, with the <code>aria-owns</code> property set to the same value
          as the <code>list</code> attribute, and the <code>aria-readonly</code> property set to
          "true" if the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Time</a> state
        </td>
        <td>
          <a>No role</a>, with the <code>aria-readonly</code> property set to "true" if the element
          has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>URL</a> state with
          no <a>suggestions source element</a>
        </td>
        <td>
          <code>textbox</code> role, with the <code>aria-readonly</code> property set to "true" if
          the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Week</a> state
        </td>
        <td>
          <a>No role</a>, with the <code>aria-readonly</code> property set to "true" if the element
          has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td><code>keygen</code> element</td>
        <td><a>No role</a>
        </td>
      </tr>
      <tr>
        <td><code>label</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>link</code> element that creates a <a>hyperlink</a></td>
        <td><code>link</code> role</td>
      </tr>
      <tr>
        <td><code>main</code> element</td>
        <td>
          <code>main</code> role (semantics may be removed by using the <code>presentation</code>
          role)
        </td>
      </tr>
      <tr>
        <td><code>map</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td>
          <code>menu</code> element with a <code>type</code> attribute in the <a>popup menu</a>
          state
        </td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>menuitem</code> element</td>
        <td><code>menuitem</code> role</td>
      </tr>
      <tr>
        <td><code>meta</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>meter</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>nav</code> element</td>
        <td>
          <code>navigation</code> role (semantics may be removed by using the
          <code>presentation</code> role)
        </td>
      </tr>
      <tr>
        <td><code>noscript</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>optgroup</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>option</code> element that is in a <a>list of options</a></td>
        <td>
          <code>aria-selected</code> and <code>aria-checked</code> states set to "true" if the
          element's <a>selectedness</a> is true, and "false" otherwise
        </td>
      </tr>
      <tr>
        <td>
          <code>option</code> element that represents a suggestion in a <code>datalist</code>
          element or that is in a <a>list of options</a> of a <code>select</code> element with a
          <code>multiple</code> attribute or a <a>display size</a> greater than 1
        </td>
        <td><code>option</code> role</td>
      </tr>
      <tr>
        <td><code>param</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>picture</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>progress</code> element</td>
        <td>
          <code>progressbar</code> role, with, if the progress bar is determinate, the
          <code>aria-valuemax</code> property set to the maximum value of the progress bar, the
          <code>aria-valuemin</code> property set to zero, and the <code>aria-valuenow</code>
          property set to the current value of the progress bar
        </td>
      </tr>
      <tr>
        <td><code>script</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>select</code> element with a <code>multiple</code> attribute</td>
        <td>
          <code>listbox</code> role, with the <code>aria-multiselectable</code> property set to
          "true"
        </td>
      </tr>
      <tr>
        <td>
          <code>select</code> element with no <code>multiple</code> attribute and with a
          <a>display size</a> equal to 1
        </td>
        <td><code>aria-multiselectable</code> property set to "false"</td>
      </tr>
      <tr>
        <td>
          <code>select</code> element with no <code>multiple</code> attribute and with a
          <a>display size</a> greater than 1
        </td>
        <td>
          <code>listbox</code> role, with the <code>aria-multiselectable</code> property set to
          "false"
        </td>
      </tr>
      <tr>
        <td><code>select</code> element with a <code>required</code> attribute</td>
        <td>The <code>aria-required</code> state set to "true"</td>
      </tr>
      <tr>
        <td><code>source</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>style</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>template</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>textarea</code> element</td>
        <td>
          <code>textbox</code> role, with the <code>aria-multiline</code> property set to "true",
          and the <code>aria-readonly</code> property set to "true" if the element has a
          <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td><code>th</code> element with a <code>scope</code> attribute set to <code>row</code></td>
        <td><code>rowheader</code> role</td>
      </tr>
      <tr>
        <td><code>th</code> element with a <code>scope</code> attribute set to <code>col</code></td>
        <td><code>columnheader</code> role</td>
      </tr>
      <tr>
        <td>
          <code>th</code> element that is a <a>sorting-capable</a> <code>th</code> element whose
          column key <a>ordinality</a> is 1
        </td>
        <td>
          <code>columnheader</code> role, with the <code>aria-sort</code> state set to "ascending"
          if the element's <a>column sort direction</a> is <i>normal</i>, and "descending"
          otherwise.
        </td>
      </tr>
      <tr>
        <td><code>title</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>track</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td>Element that is <a>disabled</a></td>
        <td>The <code>aria-disabled</code> state set to "true"</td>
      </tr>
      <tr>
        <td>
          Element that is a <a>candidate for constraint validation</a> but that does not
          <a>satisfy its constraints</a>
        </td>
        <td>The <code>aria-invalid</code> state set to "true"</td>
      </tr>
    </tbody>
  </table>

<h5 id="sec-implicit-aria-semantics">Implicit ARIA Semantics</h5>

  Some <a>HTML elements</a> have native semantics that can be overridden. The following table lists
  these elements and their <a>default implicit ARIA semantics</a>, along with the restrictions that
  apply to those elements. Each language feature (element or attribute) in a cell in the first
  column implies, unless otherwise overridden, the ARIA semantic (role, state, or property) given in
  the cell in the second column of the same row, but this semantic may be overridden under the
  conditions listed in the cell in the third column of that row.

  <table>
    <thead>
      <tr>
        <th>Language feature</th>
        <th>Default implicit ARIA semantic</th>
        <th>Restrictions</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>a</code> element that creates a <a>hyperlink</a></td>
        <td><code>link</code> role</td>
        <td>
          If specified, role must be one of the following: <code>link</code>, <code>button</code>,
          <code>checkbox</code>, <code>menuitem</code>, <code>menuitemcheckbox</code>,
          <code>menuitemradio</code>, <code>option</code>, <code>radio</code>, <code>tab</code>, or
          <code>treeitem</code>
        </td>
      </tr>
      <tr>
        <td><code>address</code> element</td>
        <td><a>No role</a></td>
        <td>If specified, role must be <code>contentinfo</code></td>
      </tr>
      <tr>
        <td><code>article</code> element</td>
        <td><code>article</code> role</td>
        <td>
          If specified, role must be one of the following: <code>article</code>,
          <code>document</code>, <code>application</code>, or <code>main</code>
        </td>
      </tr>
      <tr>
        <td><code>aside</code> element</td>
        <td><code>complementary</code> role</td>
        <td>
          If specified, role must be one of the following: <code>complementary</code>,
          <code>note</code>, <code>search</code> or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>audio</code> element</td>
        <td><a>No role</a></td>
        <td>If specified, role must be <code>application</code></td>
      </tr>
      <tr>
        <td><code>body</code> element</td>
        <td><code>document</code> role</td>
        <td>If specified, role must be either <code>document</code> or <code>application</code></td>
      </tr>
      <tr>
        <td><code>button</code> element</td>
        <td><code>button</code> role</td>
        <td>
          If specified, role must be one of the following:<code>button</code>, <code>link</code>,
          <code>menuitem</code>, <code>menuitemcheckbox</code>, <code>menuitemradio</code> or
          <code>radio</code>
        </td>
      </tr>
      <tr>
        <td><code>details</code> element</td>
        <td><code>group</code> role</td>
        <td>If specified, role must be a role that supports <code>aria-expanded</code></td>
      </tr>
      <tr>
        <td><code>dialog</code> element</td>
        <td><code>dialog</code> role</td>
        <td>
          If specified, role must be one of the following: <code>alert</code>,
          <code>alertdialog</code>, <code>application</code>, <code>contentinfo</code>,
          <code>dialog</code>, <code>document</code>, <code>log</code>, <code>main</code>,
          <code>marquee</code>, <code>region</code>, <code>search</code>, or <code>status</code>
        </td>
      </tr>
      <tr>
        <td><code>embed</code> element</td>
        <td><a>No role</a></td>
        <td>
          If specified, role must be one of the following: <code>application</code>,
          <code>document</code>, <code>img</code> or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>h1</code> element</td>
        <td>
          <code>heading</code> role, with the <code>aria-level</code> property set to the
          element's <a>outline depth</a>
        </td>
        <td>
          If specified, role must be one of the following: <code>heading</code>, <code>tab</code>
          or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>h2</code> element</td>
        <td>
          <code>heading</code> role, with the <code>aria-level</code> property set to the element's
          <a>outline depth</a>
        </td>
        <td>
          If specified, role must be one of the following: <code>heading</code>, <code>tab</code>
          or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>h3</code> element</td>
        <td>
          <code>heading</code> role, with the <code>aria-level</code> property set to the element's
          <a>outline depth</a>
        </td>
        <td>If specified, role must be one of the following: <code>heading</code>, <code>tab</code>
          or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>h4</code> element</td>
        <td>
          <code>heading</code> role, with the <code>aria-level</code> property set to the element's
          <a>outline depth</a>
        </td>
        <td>
          If specified, role must be one of the following: <code>heading</code>, <code>tab</code>
          or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>h5</code> element</td>
        <td>
          <code>heading</code> role, with the <code>aria-level</code> property set to the element's
          <a>outline depth</a>
        </td>
        <td>
          If specified, role must be one of the following: <code>heading</code>, <code>tab</code> or
          <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>h6</code> element</td>
        <td>
          <code>heading</code> role, with the <code>aria-level</code> property set to the element's
          <a>outline depth</a>
        </td>
        <td>
          If specified, role must be one of the following: <code>heading</code>, <code>tab</code> or
          <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>iframe</code> element</td>
        <td><a>No role</a></td>
        <td>
          If specified, role must be one of the following: <code>application</code>,
          <code>document</code>, <code>img</code>, or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>img</code> element whose <code>alt</code> attribute's value is absent</td>
        <td><code>img</code> role</td>
        <td>No restrictions</td>
      </tr>
      <tr>
        <td>
          <code>img</code> element whose <code>alt</code> attribute's value is present and not empty
        </td>
        <td><code>img</code> role</td>
        <td>No restrictions</td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Button</a> state
        </td>
        <td><code>button</code> role</td>
        <td>
          If specified, role must be one of the following: <code>button</code>, <code>link</code>,
          <code>menuitem</code>, <code>menuitemcheckbox</code>, <code>menuitemradio</code> or
          <code>radio</code>
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Checkbox</a> state
        </td>
        <td><code>checkbox</code> role</td>
        <td>
          If specified, role must be either <code>checkbox</code> or <code>menuitemcheckbox</code>
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Image Button</a>
          state
        </td>
        <td><code>button</code> role</td>
        <td>
          If specified, role must be one of the following: <code>button</code>, <code>link</code>,
          <code>menuitem</code>, <code>menuitemcheckbox</code>, <code>menuitemradio</code> or
          <code>radio</code>
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Radio Button</a>
          state
        </td>
        <td><code>radio</code> role</td>
        <td>If specified, role must be either <code>radio</code> or <code>menuitemradio</code></td>
      </tr>
      <tr>
        <td>
          <code>input</code>, <code>select</code> or <code>textarea</code> element with a
          <code>required</code> attribute
        </td>
        <td>The <code>aria-required</code> state set to "true"</td>
        <td>If specified, the <code>aria-required</code> state must be set to "true"</td>
      </tr>
      <tr>
        <td>
          <code>input</code>, <code>select</code> or <code>textarea</code> element without a
          <code>required</code> attribute
        </td>
        <td><code>aria-required</code> set to "false"</td>
        <td>If specified, the <code>aria-required</code> state set to "true" or "false"</td>
      </tr>
      <tr>
        <td>
          <code>li</code> element whose parent is an <code>ol</code> or <code>ul</code> element
        </td>
        <td><code>listitem</code> role</td>
        <td>
          If specified, role must be one of the following: <code>listitem</code>,
          <code>menuitem</code>, <code>menuitemcheckbox</code>, <code>menuitemradio</code>,
          <code>option</code>, <code>radio</code>, <code>tab</code>, <code>treeitem</code>,
          or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td>
          <code>menu</code> element with a <code>type</code> attribute in the <a>toolbar</a> state
        </td>
        <td><code>toolbar</code> role</td>
        <td>
          If specified, role must be one of the following: <code>directory</code>,
          <code>list</code>, <code>listbox</code>, <code>menu</code>, <code>menubar</code>,
          <code>tablist</code>, <code>toolbar</code>, or <code>tree</code>
        </td>
      </tr>
      <tr>
        <td><code>object</code> element</td>
        <td><a>No role</a></td>
        <td>
          If specified, role must be one of the following: <code>application</code>,
          <code>document</code>, <code>img</code>, or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>ol</code> element</td>
        <td><code>list</code> role</td>
        <td>
          If specified, role must be one of the following: <code>directory</code>,
          <code>group</code>, <code>list</code>, <code>listbox</code>, <code>menu</code>,
          <code>menubar</code>, <code>radiogroup</code>, <code>tablist</code>, <code>toolbar</code>,
          <code>tree</code>, or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td>
          <code>option</code> element that is in a <a> list of options </a> of a <code>select</code>
          element with no <code>multiple</code> attribute and with a <a>display size</a> equal to 1
        </td>
        <td><code>option</code> role</td>
        <td>
          If specified, role must be one of the following: <code>option</code>,
          <code>menuitem</code>, <code>menuitemradio</code>, or <code>separator</code>
        </td>
      </tr>
      <tr>
        <td><code>output</code> element</td>
        <td>
          <code>status</code> role
          <p class="note"><a>bug 26135</a> - is role=status correct for output element?</p>
        </td>
        <td>No restrictions</td>
      </tr>
      <tr>
        <td><code>section</code> element</td>
        <td>
          <code>region</code> role
          <p class="note">
            It is strongly recommended that user agents such as screen readers only convey the
            presence of, and provide navigation for <code>section</code> elements, when the
            <code>section</code> element has an accessible name.
          </p>
        </td>
        <td>
          If specified, role must be one of the following: <code>alert</code>,
          <code>alertdialog</code>, <code>application</code>, <code>contentinfo</code>,
          <code>dialog</code>, <code>document</code>, <code>log</code>, <code>main</code>,
          <code>marquee</code>, <code>region</code>, <code>search</code>, <code>status</code> or
          <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td>
          <code>select</code> element with no <code>multiple</code> attribute and with a
          <a>display size</a> equal to 1
        </td>
        <td><code>listbox</code> role</td>
        <td>Role must be either <code>listbox</code> or <code>menu</code></td>
      </tr>
      <tr>
        <td><code>summary</code> element with no <a>Interactive content</a> descendant</td>
        <td><a>No role</a></td>
        <td>If specified, role must be <code>button</code></td>
      </tr>
      <tr>
        <td><code>ul</code> element</td>
        <td><code>list</code> role</td>
        <td>
          If specified, role must be one of the following: <code>directory</code>,
          <code>group</code>, <code>list</code>, <code>listbox</code>, <code>menu</code>,
          <code>menubar</code>, <code>radiogroup</code>, <code>tablist</code>, <code>toolbar</code>,
          <code>tree</code>, or <code>presentation</code></td>
      </tr>
      <tr>
        <td><code>video</code> element</td>
        <td><a>No role</a></td>
        <td>If specified, role must be <code>application</code></td>
      </tr>
      <tr>
        <td>Element with a <code>hidden</code> attribute</td>
        <td>The <code>aria-hidden</code> state set to "true"</td>
        <td>If specified, the <code>aria-hidden</code> state set to "true" or "false"</td>
      </tr>
      <tr>
        <td>Element without a <code>hidden</code> attribute</td>
        <td>The <code>aria-hidden</code> state set to "false"</td>
        <td>If specified, the <code>aria-hidden</code> state set to "true" or "false"</td>
      </tr>
    </tbody>
  </table>

  The entry "<dfn>no role</dfn>", when used as a <a>strong native semantic</a>, means that no role
  can be used and that the user agent has no default mapping to ARIA roles. (However, it could have
  its own mappings to the accessibility layer.) When used as a
  <a>default implicit ARIA semantic</a>, it means the user agent has no default mapping to ARIA
  roles. (However, it could have its own mappings to the accessibility layer.)

  <div class="impl">
    The WAI-ARIA specification neither requires or forbids user agents from enhancing native
    presentation and interaction behaviors on the basis of WAI- ARIA markup. Even mainstream user
    agents might choose to expose metadata or navigational features directly or via user-installed
    extensions; for example, exposing required form fields or landmark navigation. User agents are
    encouraged to maximize their usefulness to users, including users without disabilities.

    Conformance checkers are encouraged to phrase errors such that authors are encouraged to use
    more appropriate elements rather than remove accessibility annotations. For example, if an
    <code>a</code> element is marked as having the <code>button</code> role, a conformance checker
    could say "Use a more appropriate element to represent a button, for example a
    <code>button</code> element or an <code>input</code> element" rather than "The
    <code>button</code> role cannot be used with <code>a</code> elements".
  </div>

  <div class="example">
    These features can be used to make accessibility tools render content to their users in more
    useful ways. For example, ASCII art, which is really an image, appears to be text, and in the
    absence of appropriate annotations would end up being rendered by screen readers as a very
    painful reading of lots of punctuation. Using the features described in this section, one can
    instead make the ATs skip the ASCII art and just read the caption:

    <pre highlight="html">
      &lt;figure <strong>role="img" aria-labelledby="fish-caption"</strong>>
        &lt;pre>
        o           .'`/
            '      /  (
          O    .-'` ` `'-._      .')
            _/ (o)        '.  .' /
            )       )))     >&lt;  &lt;
            `\  |_\      _.'  '. \
              '-._  _ .-'       '.)
          jgs     `\__\
        &lt;/pre>
        &lt;figcaption <strong>id="fish-caption"</strong>>
          Joan G. Stark, "&lt;cite>fish&lt;/cite>".
          October 1997. ASCII on electrons. 28&times;8.
        &lt;/figcaption>
      &lt;/figure>
   </pre>
</div>

<h5 id="allowed-aria-roles-states-and-properties">Allowed ARIA roles, states and properties</h5>

  <em>This section is non-normative.</em>

  <p class="note">
    The following table provides an informative reference to the ARIA roles, states and properties
    permitted for use in HTML. All ARIA roles, states and properties are normatively defined in the
    [[!WAI-ARIA]] specification. Links to ARIA roles, states and properties in the table reference
    the normative [[!WAI-ARIA]] definitions.
  </p>

  <table>
    <caption>
      <abbr title="Accessible Rich Internet Applications">ARIA</abbr> Roles, States and Properties
    </caption>
    <thead>
      <tr>
        <th>Role</th>
        <th>Description</th>
        <th>Required Properties</th>
        <th>Supported Properties</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>any</td>
        <td>ARIA <a>global states and properties</a> can be used on any HTML element.</td>
        <td>none</td>
        <td>

          * <code><a>aria-atomic</a></code>
          * <code><a>aria-busy (state)</a></code>
          * <code><a>aria-controls</a></code>
          * <code><a>aria-describedby</a></code>
          * <code><a>aria-disabled (state)</a></code>
          * <code><a>aria-dropeffect</a></code>
          * <code><a>aria-flowto</a></code>
          * <code><a>aria-grabbed (state)</a></code>
          * <code><a>aria-haspopup</a></code>
          * <code><a>aria-hidden (state)</a></code>
          * <code><a>aria-invalid (state)</a></code>
          * <code><a>aria-label</a></code>
          * <code><a>aria-labelledby</a></code>
          * <code><a>aria-live</a></code>
          * <code><a>aria-owns</a></code>
          * <code><a>aria-relevant</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>alert</a></code></td>
        <td>
          A message with important, and usually time-sensitive, information. See related
          <code>alertdialog</code> and <code>status</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>alertdialog</a></code></td>
        <td>
          A type of dialog that contains an alert message, where initial focus goes to an element
          within the dialog. See related <code>alert</code> and <code>dialog</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>application</a></code></td>
        <td>A region declared as a web application, as opposed to a web document.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>article</a></code></td>
        <td>
          A section of a page that consists of a composition that forms an independent part of a
          document, page, or site.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>banner</a></code></td>
        <td>
          A region that contains mostly site-oriented content, rather than page-specific content.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>button</a></code></td>
        <td>
          An input that allows for user-triggered actions when clicked or pressed. See related
          <code>link</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-pressed (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>checkbox</a></code></td>
        <td>A checkable input that has three possible values: true, false, or mixed.</td>
        <td>

          * <a><code>aria-checked (state)</code></a>

        </td>
        <td></td>
      </tr>
      <tr>
        <td><code><a>columnheader</a></code></td>
        <td>A cell containing header information for a column.</td>
        <td>none</td>
        <td>

          * <code><a>aria-sort</a></code>
          * <code><a>aria-readonly</a></code>
          * <code><a>aria-required</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>combobox</a></code></td>
        <td>
          A presentation of a select; usually similar to a textbox where users can type ahead to
          select an option, or type to enter arbitrary text as a new item in the list. See related
          <code>listbox</code>.
        </td>
        <td>

          * <a><code>aria-expanded (state)</code></a>

        </td>
        <td>

          * <code><a>aria-autocomplete</a></code>
          * <code><a>aria-required</a></code>
          * <code><a>aria-activedescendant</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>complementary</a></code></td>
        <td>
          A supporting section of the document, designed to be complementary to the main content at
          a similar level in the DOM hierarchy, but remains meaningful when separated from the main
          content.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>contentinfo</a></code></td>
        <td>A large perceivable region that contains information about the parent document.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>definition</a></code></td>
        <td>A definition of a term or concept.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>dialog</a></code></td>
        <td>
          A dialog is an application window that is designed to interrupt the current processing of
          an application in order to prompt the user to enter information or require a response. See
          related <code>alertdialog</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>directory</a></code></td>
        <td>A list of references to members of a group, such as a static table of contents.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>document</a></code></td>
        <td>
          A region containing related information that is declared as document content, as opposed
          to a web application.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>form</a></code></td>
        <td>
          A landmark region that contains a collection of items and objects that, as a whole,
          combine to create a form. See related <code>search</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>grid</a></code></td>
        <td>
          A grid is an interactive control which contains cells of tabular data arranged in rows and
          columns, like a table.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-multiselectable</a></code>
          * <code><a>aria-readonly</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>gridcell</a></code></td>
        <td>A cell in a grid or treegrid.</td>
        <td>none</td>
        <td>

          * <code><a>aria-readonly</a></code>
          * <code><a>aria-required</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>group</a></code></td>
        <td>
          A set of user interface objects which are not intended to be included in a page summary or
          table of contents by assistive technologies.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>heading</a></code></td>
        <td>A heading for a section of the page.</td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>img</a></code></td>
        <td>A container for a collection of elements that form an image.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>link</a></code></td>
        <td>
          An interactive reference to an internal or external resource that, when activated, causes
          the user agent to navigate to that resource. See related <code>button</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>list</a></code></td>
        <td>
          A group of non-interactive list items. See related <code>listbox</code>.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

          </td>
      </tr>
      <tr>
        <td><code><a>listbox</a></code></td>
        <td>
          A widget that allows the user to select one or more items from a list of choices. See
          related <code>combobox</code> and <code>list</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-multiselectable</a></code>
          * <code><a>aria-required</a></code>
          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>listitem</a></code></td>
        <td>A single item in a <code>list</code> or <code>directory</code>.</td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-posinset</a></code>
          * <code><a>aria-setsize</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>log</a></code></td>
        <td>
          A type of live region where new information is added in meaningful order and old
          information may disappear. See related <code>marquee</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>main</a></code></td>
        <td>The main content of a document.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>marquee</a></code></td>
        <td>
          A type of live region where non-essential information changes frequently. See related
          <code>log</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>math</a></code></td>
        <td>Content that represents a mathematical expression. </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>menu</a></code></td>
        <td>A type of widget that offers a list of choices to the user.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>menubar</a></code></td>
        <td>
          A presentation of menu that usually remains visible and is usually presented horizontally.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>menuitem</a></code></td>
        <td>
          An option in a group of choices contained by a <code>menu</code> or <code>menubar</code>.
        </td>
        <td>none</td>
        <td></td>
      </tr>
      <tr>
        <td><code><a>menuitemcheckbox</a></code></td>
        <td>A checkable menuitem that has three possible values: true, false, or mixed.</td>
        <td>

          * <code><a>aria-checked (state)</a></code>

        </td>
        <td></td>
      </tr>
      <tr>
        <td><code><a>menuitemradio</a></code></td>
        <td>
          A checkable menuitem in a group of <code>menuitemradio</code> roles, only one of which can
          be checked at a time.
        </td>
        <td>

          * <code><a>aria-checked (state)</a></code>

        </td>
        <td>

          * <code><a>aria-posinset</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-setsize</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>navigation</a></code></td>
        <td>
          A collection of navigational elements (usually links) for navigating the document or
          related documents.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

          </td>
      </tr>
      <tr>
        <td><code><a>note</a></code></td>
        <td>
          A section whose content is parenthetic or ancillary to the main content of the resource.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>option</a></code></td>
        <td>A selectable item in a select list.</td>
        <td>none</td>
        <td>

          * <code><a>aria-checked (state)</a></code>
          * <code><a>aria-posinset</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-setsize</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>presentation</a></code></td>
        <td>
          An element whose implicit native role semantics will not be mapped to the accessibility
          API.
        </td>
        <td>none</td>
        <td></td>
      </tr>
      <tr>
        <td><code><a>progressbar</a></code></td>
        <td>An element that displays the progress status for tasks that take a long time.</td>
        <td>none</td>
        <td>

          * <code><a>aria-valuemax</a></code>
          * <code><a>aria-valuemin</a></code>
          * <code><a>aria-valuenow</a></code>
          * <code><a>aria-valuetext</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>radio</a></code></td>
        <td>
          A checkable input in a group of radio roles, only one of which can be checked at a time.
        </td>
        <td>

          * <a><code>aria-checked (state)</code></a>

        </td>
        <td>

          * <code><a>aria-posinset</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-setsize</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>radiogroup</a></code></td>
        <td>A group of radio buttons.</td>
        <td>none</td>
        <td>

          * <code><a>aria-required</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>region</a></code></td>
        <td>
          A large perceivable section of a web page or document, that the author feels is important
          enough to be included in a page summary or table of contents, for example, an area of the
          page containing live sporting event statistics.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>row</a></code></td>
        <td>A row of cells in a grid.</td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>rowgroup</a></code></td>
        <td>A group containing one or more row elements in a grid.</td>
        <td>none</td>
        <td>

          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>rowheader</a></code></td>
        <td>A cell containing header information for a row in a grid.</td>
        <td>none</td>
        <td>

          * <code><a>aria-sort</a></code>
          * <code><a>aria-readonly</a></code>
          * <code><a>aria-required</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>scrollbar</a></code></td>
        <td>
          A graphical object that controls the scrolling of content within a viewing area,
          regardless of whether the content is fully displayed within the viewing area.
        </td>
        <td>

          * <code><a>aria-controls</a></code>
          * <code><a>aria-orientation</a></code>
          * <code><a>aria-valuemax</a></code>
          * <code><a>aria-valuemin</a></code>
          * <code><a>aria-valuenow</a></code>

        </td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>search</a></code></td>
        <td>
          A landmark region that contains a collection of items and objects that, as a whole,
          combine to create a search facility. See related <code>form</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-orientation</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>separator</a></code></td>
        <td>
          A divider that separates and distinguishes sections of content or groups of menuitems.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-valuetext</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>slider</a></code></td>
        <td>A user input where the user selects a value from within a given range.</td>
        <td>

          * <code><a>aria-valuemax</a></code>
          * <code><a>aria-valuemin</a></code>
          * <code><a>aria-valuenow</a></code>

        </td>
        <td>

          * <code><a>aria-orientation</a></code>
          * <code><a>aria-valuetext</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>spinbutton</a></code></td>
        <td>A form of range that expects the user to select from among discrete choices.</td>
        <td>

          * <code><a>aria-valuemax</a></code>
          * <code><a>aria-valuemin</a></code>
          * <code><a>aria-valuenow</a></code>

        </td>
        <td>

          * <code><a>aria-required</a></code>
          * <code><a>aria-valuetext</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>status</a></code></td>
        <td>
          A container whose content is advisory information for the user but is not important enough
          to justify an alert, often but not necessarily presented as a status bar. See related
          <code>alert</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>tab</a></code></td>
        <td>
          A grouping label providing a mechanism for selecting the tab content that is to be
          rendered to the user.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>tablist</a></code></td>
        <td>A list of tab elements, which are references to tabpanel elements.</td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>tabpanel</a></code></td>
        <td>
          A container for the resources associated with a <code>tab</code>, where each
          <code>tab</code> is contained in a <code>tablist</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>textbox</a></code></td>
        <td>Input that allows free-form text as its value.</td>
        <td>none</td>
        <td>

          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-autocomplete</a></code>
          * <code><a>aria-multiline</a></code>
          * <code><a>aria-readonly</a></code>
          * <code><a>aria-required</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>timer</a></code></td>
        <td>
          A type of live region containing a numerical counter which indicates an amount of elapsed
          time from a start point, or the time remaining until an end point.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>toolbar</a></code></td>
        <td>A collection of commonly used function buttons represented in compact visual form.</td>
        <td>none</td>
        <td>

          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>tooltip</a></code></td>
        <td>A contextual popup that displays a description for an element.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>tree</a></code></td>
        <td>
          A type of list that may contain sub-level nested groups that can be collapsed and
          expanded.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-multiselectable</a></code>
          * <code><a>aria-required</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>treegrid</a></code></td>
        <td>A grid whose rows can be expanded and collapsed in the same manner as for a tree.</td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-multiselectable</a></code>
          * <code><a>aria-readonly</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-required</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>treeitem</a></code></td>
        <td>
          An option item of a tree. This is an element within a tree that may be expanded or
          collapsed if it contains a sub-level group of treeitems.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-posinset</a></code>
          * <code><a>aria-setsize</a></code>
          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-checked (state)</a></code>
          * <code><a>aria-selected (state)</a></code>

        </td>
      </tr>
    </tbody>
  </table>

<!-- Big Text: Semantics -->

<h2 id="semantics">The elements of HTML</h2>

<h3 id="the-root-element">The root element</h3>

<h4 id="the-html-element">The <dfn><code>html</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As the root element of a document.</dd>
    <dd>Wherever a subdocument fragment is allowed in a compound document.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>A <code>head</code> element followed by a <code>body</code> element.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>manifest</code> â <a >Application cache manifest</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      An <code>html</code> element's <a>start tag</a> can be omitted if the first thing inside the
      <code>html</a></code> element is not a <a>comment</a>.
    </dd>
    <dd>
      An <code>html</code> element's <a>end tag</a> can be omitted if the <code>html</code> element
      is not immediately followed by a <a>comment</a>.
    </dd>
    <dt>Allowed <a >ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a >ARIA state and property attributes</a>:</dt>
    <dd><a >Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLHtmlElement : HTMLElement {};
      </pre>
    </dd>
  </dl>

  The <code>html</code> element <a>represents</a> the root of an HTML document.

  Authors are encouraged to specify a <code>lang</code> attribute on the root <code>html</code>
  element, giving the document's language. This aids speech synthesis tools to determine what
  pronunciations to use, translation tools to determine what rules to use, and so
  forth.

  The <dfn><code>manifest</code></dfn> attribute gives the address of the document's
  <a>application cache</a> <a>manifest</a>, if there is one. If the attribute is present,
  the attribute's value must be a <a>valid non-empty URL potentially surrounded by spaces</a>.

  The <code>manifest</code> attribute only <a>has an effect</a> during the early stages of document
  load. Changing the attribute dynamically thus has no effect (and thus, no DOM API is provided for
  this attribute).

  <p class="note">
    For the purposes of <a>application cache selection</a>, later <code>base</code> elements cannot
    affect the <a>resolving of relative URLs</a> in <code>manifest</code> attributes, as the
    attributes are processed before those elements are seen.
  </p>

  <p class="note">
    The <code>window.applicationCache</code> IDL attribute provides scripted access to the offline
    <a>application cache</a> mechanism.
  </p>

  <div class="example">
    The <code>html</code> element in the following example declares that the document's language is
    English.

    <pre highlight="html">
      &lt;!DOCTYPE html>
      &lt;html lang="en">
        &lt;head>
          &lt;title>Swapping Songs&lt;/title>
        &lt;/head>
        &lt;body>
          &lt;h1>Swapping Songs&lt;/h1>
          &lt;p>Tonight I swapped some of the songs I wrote with some friends, who
          gave me some of the songs they wrote. I love sharing my music.&lt;/p>
        &lt;/body>
      &lt;/html>
    </pre>
  </div>

<h3 id="document-metadata">Document metadata</h3>

<h4 id="the-head-element">The <dfn><code>head</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As the first element in an <code>html</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>
      If the document is <a>an <code>iframe</code> <code>srcdoc</code> document</a> or if title
      information is available from a higher-level protocol: Zero or more elements of
      <a>metadata content</a>, of which no more than one is a <code>title</code> element and no more
      than one is a <code>base</code> element.
    </dd>
    <dd>
      Otherwise: One or more elements of <a>metadata content</a>, of which exactly one is a
      <code>title</code> element and no more than one is a <code>base</code> element.
    </dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      A <code>head</code> element's <a>start tag</a> may be omitted if the element is empty, or if
      the first thing inside the <code>head</code> element is an element.
    </dd>
    <dd>
      A <code>head</code> element's <a>end tag</a> may be omitted if the <code>head</code> element
      is not immediately followed by a <a>space character</span> or a <span>comment</a>.
    </dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface <dfn>HTMLHeadElement</dfn> : <a>HTMLElement</a> {};
      </pre>
    </dd>
  </dl>

  The <code>head</code> element <a>represents</a> a collection of metadata for the
  <code>Document</code>.

  <div class="example">
    The collection of metadata in a <code>head</code> element can be large or small. Here is an
    example of a very short one:

    <pre highlight="html">
      &lt;!doctype html>
      &lt;html>
        &lt;head>
          &lt;title>A document with a short head&lt;/title>
        &lt;/head>
        &lt;body>
          ...
    </pre>

    Here is an example of a longer one:

    <pre highlight="html">
      &lt;!DOCTYPE HTML>
        &lt;HTML>
        &lt;HEAD>
          &lt;META CHARSET="UTF-8">
          &lt;BASE HREF="http://www.example.com/">
          &lt;TITLE>An application with a long head&lt;/TITLE>
          &lt;LINK REL="STYLESHEET" HREF="default.css">
          &lt;LINK REL="STYLESHEET ALTERNATE" HREF="big.css" TITLE="Big Text">
          &lt;SCRIPT SRC="support.js">&lt;/SCRIPT>
          &lt;META NAME="APPLICATION-NAME" CONTENT="Long headed application">
        &lt;/HEAD>
        &lt;BODY>
          ...
    </pre>
  </div>

  <p class="note">
    The <code>title</code> element is a required child in most situations, but when a higher-level
    protocol provides title information, e.g. in the Subject line of an e-mail when HTML is used as
    an e-mail authoring format, the <code>title</code> element can be omitted.
  </p>

<h4 id="the-title-element">The <dfn><code>title</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>In a <code>head</code> element containing no other <code>title</code> elements.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Text</a> that is not <a>inter-element whitespace</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" hightlight="webidl">
        interface HTMLTitleElement : HTMLElement {
          attribute DOMString text;
        };
      </pre>
    </dd>
  </dl>

  The <code>title</code> element <a>represents</a> the document's title or name. Authors should use
  titles that identify their documents even when they are used out of context, for example in a
  user's history or bookmarks, or in search results. The document's title is often different from
  its first heading, since the first heading does not have to stand alone when taken out of context.

  There must be no more than one <code>title</code> element per document.

  <p class="note">
    If it's reasonable for the <code>Document</code> to have no title, then the <code>title</code>
    element is probably not required. See the <code>head</code> element's content model for a
    description of when the element is required.
  </p>

  <dl class="domintro">
    <dt><var>title</var> . <code>text</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns the contents of the element, ignoring child nodes that aren't <code>Text</code> nodes.

      Can be set, to replace the element's children with the given value.
    </dd>
  </dl>

  <div class="impl">
    The IDL attribute <dfn><code>text</code></dfn> must return a concatenation of the contents of
    all the <code>Text</code> nodes that are children of the <code>title</code> element (ignoring
    any other nodes such as comments or elements), in <a>tree order</a>. On setting, it must act the
    same way as the <code>textContent</code> IDL attribute.
  </div>

  <div class="example">
    Here are some examples of appropriate titles, contrasted with the top-level headings that
    might be used on those same pages.

    <pre highlight="html">
      &lt;title>Introduction to The Mating Rituals of Bees&lt;/title>
      ...
      &lt;h1>Introduction&lt;/h1>
      &lt;p>This companion guide to the highly successful
      &lt;cite>Introduction to Medieval Bee-Keeping&lt;/cite> book is...
    </pre>

    The next page might be a part of the same site. Note how the title describes the subject matter
    unambiguously, while the first heading assumes the reader knows what the context is and
    therefore won't wonder if the dances are Salsa or Waltz:

    <pre highlight="html">
      &lt;title>Dances used during bee mating rituals&lt;/title>
      ...
      &lt;h2>The Dances&lt;/h2>
    </pre>
  </div>

  The string to use as the document's title is given by the <code>document.title</code> IDL
  attribute.

  <div class="impl">
    User agents should use the document's title when referring to the document in their user
    interface. When the contents of a <code>title</code> element are used in this way,
    <a>the directionality</a> of that <code>title</code> element should be used to set the
    directionality of the document's title in the user interface.
  </div>

<h4 id="the-base-element">The <dfn><code>base</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>In a <code>head</code> element containing no other <code>base</code> elements.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>href</code> â <a>Document base URL</a></dd>
    <dd>
      <code>target</code> â Default <a>browsing context</a> for <a>hyperlink</a> <a>navigation</a>
      and <a>form submission</a>
    </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No end tag.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLBaseElement : HTMLElement {
          attribute DOMString href;
          attribute DOMString target;
        };
      </pre>
    </dd>
  </dl>

  The <code>base</code> element allows authors to specify the <a>document base URL</a> for the
  purposes of <a>resolving relative URLs</a>, and the name of the default <a>browsing context</a>
  for the purposes of <a>following hyperlinks</a>. The element does not <a>represent</a> any content
  beyond this information.

  There must be no more than one <code>base</code> element per document.

  A <code>base</code> element must have either an <code>href</code> attribute, a <code>target</code>
  attribute, or both.

  The <dfn><code>href</code></dfn> content attribute, if specified, must contain a <a>valid URL
  potentially surrounded by spaces</a>.

  A <code>base</code> element, if it has an <code>href</code> attribute, must come before any other
  elements in the tree that have attributes defined as taking <a>URLs</a>, except the
  <code>html</code> element (its <code>manifest</code> attribute isn't affected by
  <code>xml:base</code> attributes or <code>base</code> elements).

  <div class="impl">
    <p class="note">
      If there are multiple <code>base</code> elements with <code>href</code> attributes, all but
      the first are ignored.
    </p>
  </div>

  The <dfn><code>target</code></dfn> attribute, if specified, must contain a <a>valid browsing
  context name or keyword</a>, which specifies which <a>browsing context</a> is to be used as the
  default when <a>hyperlinks</a> and <a>forms</a> in the <code>Document</code> cause
  <a>navigation</a>.

  A <code>base</code> element, if it has a <code>target</code> attribute, must come before any
  elements in the tree that represent <a>hyperlinks</a>.

  <div class="impl">
    <p class="note">
      If there are multiple <code>base</code> elements with <code>target</code> attributes, all but
      the first are ignored.
    </p>

    A <code>base</code> element that is the first <code>base</code> element with an
    <code>href</code> content attribute in a particular <code>Document</code> has a
    <dfn>frozen base URL</dfn>. The <a>frozen base URL</a> must be <a>immediately</a> <a>set</a>
    whenever any of the following situations occur:

    * The <code>base</code> element becomes the first <code>base</code> element in <a>tree order</a>
        with an <code>href</code> content attribute in its <code>Document</code>.

    * The <code>base</code> element is the first <code>base</code> element in <a>tree order</a> with
        an <code>href</code> content attribute in its <code>Document</code>, and its
        <code>href</code> content attribute is changed.

    To <dfn>set the frozen base URL</dfn>, <a>resolve</a> the value of the element's
    <code>href</code> content attribute relative to the <code>Document</code>'s
    <a>fallback base URL</a>; if this is successful, set the <a>frozen base URL</a> to the
    <a>resulting absolute URL</a>, otherwise, set the <a>frozen base URL</a> to the
    <a>fallback base URL</a>.

    The <dfn><code>href</code></dfn> IDL attribute, on getting, must return the result of running
    the following algorithm:

    1. If the <code>base</code> element has no <code>href</code> content attribute, then return the
        <a>document base URL</a> and abort these steps.
    2. Let <var>fallback base url</var> be the <code>Document</code>'s <a>fallback base URL</a>.
    3. Let <var>url</var> be the value of the <code>href</code> attribute of the <code>base</code>
        element.
    4. <a>Resolve</a> <var>url</var> relative to <var>fallback base url</var> (thus, the
        <code>base</code>'s <code>href</code> attribute isn't affected by other <code>base</code>
        elements).
    5. If the previous step was successful, return the resulting <a>absolute URL</a> and abort these
        steps.
    6. Otherwise, return the empty string.

    The <code>href</code> IDL attribute, on setting, must set the <code>href</code> content
    attribute to the given new value.

    The <dfn><code>target</code></dfn> IDL attribute must <a>reflect</a> the content attribute of
    the same name.
  </div>

  <div class="example">
    In this example, a <code>base</code> element is used to set the <a>document base
    URL</a>:

    <pre highlight="html">
      &lt;!DOCTYPE html>
      &lt;html>
        &lt;head>
          &lt;title>This is an example for the &amp;lt;base&amp;gt; element&lt;/title>
          &lt;base href="http://www.example.com/news/index.html">
        &lt;/head>
        &lt;body>
          &lt;p>Visit the &lt;a href="archives.html">archives&lt;/a>.&lt;/p>
        &lt;/body>
      &lt;/html>
    </pre>

    The link in the above example would be a link to
    "<code>http://www.example.com/news/archives.html</code>".
  </div>

<h4 id="the-link-element">The <dfn><code>link</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd>If the <code>itemprop</code> attribute is present: <a>flow content</a>.</dd>
    <dd>If the <code>itemprop</code> attribute is present: <a>phrasing content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>metadata content</a> is expected.</dd>
    <dd>In a <code>noscript</code> element that is a child of a <code>head</code> element.</dd>
    <dd>
      If the <code>itemprop</code> attribute is present: where <a>phrasing content</a> is expected.
    </dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>href</code> â Address of the <a>hyperlink</a></dd>
    <dd><code>crossorigin</code> â How the element handles crossorigin requests</dd>
    <dd>
      <code>rel</code> â Relationship between the document containing the hyperlink and the
      destination resource
    </dd>
    <dd><code>media</code> â Applicable media</dd>
    <dd><code>hreflang</code> â Language of the linked resource</dd>
    <dd><code>type</code> â Hint for the type of the referenced resource</dd>
    <dd><code>sizes</code> â Sizes of the icons (for <code>rel</code>="<code>icon</code>")</dd>
    <dd>
      Also, the <code>title</code> attribute has special semantics on this element:  Title of the
      link; alternative style sheet set name.
    </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a>.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>link</code></a> (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dd>For <code>role</code> value </dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLLinkElement : HTMLElement {
          attribute DOMString href;
          attribute DOMString? crossOrigin;
          attribute DOMString rel;

          attribute DOMString rev;
          readonly attribute DOMTokenList relList;
          attribute DOMString media;
          attribute DOMString hreflang;
          attribute DOMString type;
          [PutForwards=value] readonly attribute DOMSettableTokenList sizes;
        };
        HTMLLinkElement implements LinkStyle;
      </pre>
    </dd>
  </dl>

  The <code>link</code> element allows authors to link their document to other resources.

  The destination of the link(s) is given by the <dfn><code>href</code></dfn> attribute, which must
  be present and must contain a <a>valid non-empty URL potentially surrounded by spaces</a>.
  <span class="impl">If the <code>href</code> attribute is absent, then the element does not define
  a link.</span>

  A <code>link</code> element must have either a <code>rel</code> attribute or an
  <code>itemprop</code> attribute, but not both.

  <p class="note">
    If the <code>rel</code> attribute is used, the element is restricted to the <code>head</code>
    element. When used with the <code>itemprop</code> attribute, the element can be used both in the
    <code>head</code> element and in the <code>body</code> of the page, subject to the constraints
    of the microdata model.
  </p>

  The types of link indicated (the relationships) are given by the value of the
  <dfn><code>rel</code></dfn> attribute, which, if present, must have a value that is a <a>set of
  space-separated tokens</a>. The <a>allowed keywords and their meanings</a> are defined in a later
  section. <span class="impl">If the <code>rel</code> attribute is absent, has no keywords, or if
  none of the keywords used are allowed according to the definitions in this specification, then the
  element does not create any links.</span>

  Two categories of links can be created using the <code>link</code> element:
  <a>Links to external resources</a> and <a>hyperlinks</a>. The <a>link types section</a> defines
  whether a particular link type is an external resource or a hyperlink. One <code>link</code>
  element can create multiple links (of which some might be external resource links and some might
  be hyperlinks); exactly which and how many links are created depends on the keywords given in the
  <code>rel</code> attribute. User agents must process the links on a per-link
  basis, not a per-element basis.

  <p class="note">
    Each link created for a <code>link</code> element is handled separately. For instance, if there
    are two <code>link</code> elements with <code>rel="stylesheet"</code>, they each count as a
    separate external resource, and each is affected by its own attributes independently. Similarly,
    if a single <code>link</code> element has a <code>rel</code> attribute with the value
    <code>next stylesheet</code>, it creates both a <a>hyperlink</a> (for the <code>next</code>
    keyword) and an <a>external resource link</a> (for the <code>stylesheet</code> keyword), and
    they are affected by other attributes (such as <code>media</code> or <code>title</code>)
    differently.
  </p>

  <div class="example">
    For example, the following <code>link</code> element creates two hyperlinks (to the same page):

    <pre highlight="html">&lt;link rel="author license" href="/about"></pre>

    The two links created by this element are one whose semantic is that the target page has
    information about the current page's author, and one whose semantic is that the target page has
    information regarding the license under which the current page is provided.
  </div>

  The <dfn><code>crossorigin</code></dfn> attribute is a <a>CORS settings attribute</a>. It is
  intended for use with external resource links.

  The exact behavior for links to external resources depends on the exact relationship, as defined
  for the relevant link type. Some of the attributes control whether or not the external resource is
  to be applied (as defined below).

  <div class="impl">
    For external resources that are represented in the DOM (for example, style sheets), the DOM
    representation must be made available (modulo cross-origin restrictions) even if the resource is
    not applied. To <dfn>obtain the resource</dfn>, the user agent must
    run the following steps:

    1. If the <code>href</code> attribute's value is the empty string, then abort these steps.
    2. <a>Resolve</a> the <a>URL</a> given by the <code>href</code> attribute, relative to the
        element.
    3. If the previous step fails, then abort these steps.
    4. Let <var>corsAttributeState</var> be the current state of the element's
        <code>crossorigin</code> content attribute.
    5. Let <var>request</var> be the result of <a>creating a potential-CORS request</a> given the
        <a>absolute URL</a> and <var>corsAttributeState</var>.
    6. Set <var>request</var>'s <a>client</a> to the <code>link</code> element's
        <a>node document</a>'s <code>Window</code> object's <a>environment settings object</a>.
    7. <a>Fetch</a> <var>request</var>.

    User agents may opt to only try to obtain such resources when they are needed, instead of
    pro-actively fetching all the external resources that are not applied.

    The semantics of the protocol used (e.g. HTTP) must be followed when fetching external
    resources. (For example, redirects will be followed and 404 responses will cause the external
    resource to not be applied.)

    Once the attempts to obtain the resource and its <a>critical subresources</a> are complete, the
    user agent must, if the loads were successful, <a>queue a task</a> to <a>fire a simple event</a>
    named <code>load</code> at the <code>link</code> element, or, if the resource or one of its
    <a>critical subresources</a> failed to completely load for any reason (e.g. DNS error, HTTP 404
    response, a connection being prematurely closed, unsupported Content-Type), <a>queue a task</a>
    to <a>fire a simple event</a> named <code>error</code> at the <code>link</code> element.
    Non-network errors in processing the resource or its subresources (e.g. CSS parse errors, PNG
    decoding errors) are not failures for the purposes of this paragraph.

    The <a>task source</a> for these <a>tasks</a> is the <a>DOM manipulation task source</a>.

    The element must <a>delay the load event</a> of the element's <a>node document</a> until all the
    attempts to obtain the resource and its <a>critical subresources</a> are complete. (Resources
    that the user agent has not yet attempted to obtain, e.g. because it is waiting for the resource
    to be needed, do not <a>delay the load event</a>.)

    <hr />

    Interactive user agents may provide users with a means to <a>follow the hyperlinks</a> created
    using the <code>link</code> element, somewhere within their user interface. The exact interface
    is not defined by this specification, but it could include the following information (obtained
    from the element's attributes, again as defined below), in some form or another (possibly
    simplified), for each hyperlink created with each <code>link</code> element in the document:

    * The relationship between this document and the resource (given by the <code>rel</code>
        attribute)
    * The title of the resource (given by the <code>title</code> attribute).
    * The address of the resource (given by the <code>href</code> attribute).
    * The language of the resource (given by the <code>hreflang</code> attribute).
    * The optimum media for the resource (given by the <code>media</code> attribute).

    User agents could also include other information, such as the type of the resource (as given by
    the <code>type</code> attribute).
  </div>

  <p class="note">
    Hyperlinks created with the <code>link</code> element and its <code>rel</code> attribute apply
    to the whole page. This contrasts with the <code>rel</code> attribute of <code>a</code> and
    <code>area</code> elements, which indicates the type of a link whose context is given by the
    link's location within the document.
  </p>

  The <dfn><code>media</code></dfn> attribute says which media the resource applies to. The value
  must be a <a>valid media query list</a>.

  <div class="impl">
    If the link is a <a>hyperlink</a> then the <code>media</code> attribute is purely advisory, and
    describes for which media the document in question was designed.

    However, if the link is an <a>external resource link</a>, then the <code>media</code> attribute
    is prescriptive. The user agent must apply the external resource when the <code>media</code>
    attribute's value <a>matches the environment</a> and the other relevant conditions apply, and
    must not apply it otherwise.

    <p class="note">
      The external resource might have further restrictions defined within that limit its
      applicability. For example, a CSS style sheet might have some <code>@media</code> blocks. This
      specification does not override such further restrictions or requirements.
    </p>
  </div>

  The default, if the <code>media</code> attribute is omitted, is "<code>all</code>", meaning that
  by default links apply to all media.

  The <dfn><code>hreflang</code></dfn> attribute on the <code>link</code> element has the same
  semantics as the <a><code>hreflang</code> attribute on the <code>a</code> element</a>.

  The <dfn><code>type</code></dfn> attribute gives the <a>MIME type</a> of the linked resource. It
  is purely advisory. The value must be a <a>valid MIME type</a>.

  For <a>external resource links</a>, the <code>type</code> attribute is used as a hint to user
  agents so that they can avoid fetching resources they do not support. <span class="impl">If the
  attribute is present, then the user agent must assume that the resource is of the given type (even
  if that is not a <a>valid MIME type</a>, e.g. the empty string). If the attribute is omitted, but
  the external resource link type has a default type defined, then the user agent must assume that
  the resource is of that type. If the UA does not support the given <a>MIME type</a> for the given
  link relationship, then the UA should not <a>obtain</a> the resource; if the UA does support the
  given <a>MIME type</a> for the given link relationship, then the UA should <a>obtain</a> the
  resource at the appropriate time as specified for the <a>external resource link</a>'s particular
  type. If the attribute is omitted, and the external resource link type does not have a default
  type defined, but the user agent would <a>obtain</a> the resource if the type was known and
  supported, then the user agent should <a>obtain</a> the resource under the assumption that it will
  be supported.</span>

  <div class="impl">
    User agents must not consider the <code>type</code> attribute authoritative &mdash; upon
    fetching the resource, user agents must not use the <code>type</code> attribute to determine its
    actual type. Only the actual type (as defined in the next paragraph) is used to determine
    whether to <em>apply</em> the resource, not the aforementioned assumed type.

    If the external resource link type defines rules for processing the resource's
    <a>Content-Type metadata</a>, then those rules apply. Otherwise, if the resource is expected to
    be an image, user agents may apply the <a>image sniffing rules</a>, with the
    <var>official type</var> being the type determined from the resource's
    <a>Content-Type metadata</a>, and use the resulting sniffed type of the resource as if it was
    the actual type. Otherwise, if neither of these conditions apply or if the user agent opts not
    to apply the image sniffing rules, then the user agent must use the resource's
    <a>Content-Type metadata</a> to determine the type of the resource. If there is no type
    metadata, but the external resource link type has a default type defined, then the user agent
    must assume that the resource is of that type.

    <p class="note">
      The <code>stylesheet</code> link type defines rules for processing the resource's
      <a>Content-Type metadata</a>.
    </p>

    Once the user agent has established the type of the resource, the user agent must apply the
    resource if it is of a supported type and the other relevant conditions apply, and must ignore
    the resource otherwise.

    <div class="example">
      If a document contains style sheet links labeled as follows:

      <pre highlight="html">
        &lt;link rel="stylesheet" href="A" type="text/plain"&gt;
        &lt;link rel="stylesheet" href="B" type="text/css"&gt;
        &lt;link rel="stylesheet" href="C"&gt;
      </pre>

     ...then a compliant UA that supported only CSS style sheets would fetch the B and C files, and
     skip the A file (since <code>text/plain</code> is not the <a>MIME type</a> for CSS style
     sheets).

     For files B and C, it would then check the actual types returned by the server. For those that
     are sent as <code>text/css</code>, it would apply the styles, but for those labeled as
     <code>text/plain</code>, or any other type, it would not.

     If one of the two files was returned without a <a>Content-Type</a> metadata, or with a
     syntactically incorrect type like <code>Content-Type:&nbsp;"null"</code>, then the default type
     for <code>stylesheet</code> links would kick in. Since that default type is
     <code>text/css</code>, the style sheet <em>would</em> nonetheless be applied.
    </div>
  </div>

  The <dfn><code>title</code></dfn> attribute gives the title of the link. With one exception, it is
  purely advisory. The value is text. The exception is for style sheet links, where the
  <code>title</code> attribute defines <a>alternative style sheet sets</a>.

  <p class="note">
    The <code>title</code> attribute on <code>link</code> elements differs from the global
    <code>title</code> attribute of most other elements in that a link without a title does not
    inherit the title of the parent element: it merely has no title.
  </p>

  The <code>sizes</code> attribute is used with the <code>icon</code> link type. The attribute must
  not be specified on <code>link</code> elements that do not have a <code>rel</code> attribute that
  specifies the <code>icon</code> keyword.

  <div class="impl">
    The <a>activation behavior</a> of <code>link</code> elements that create <a>hyperlinks</a> is to
    run the following steps:

    1. If the <code>link</code> element's <a>node document</a> is not <a>fully active</a>, then
        abort these steps.
    2. <a>Follow the hyperlink</a> created by the<code>link</code> element.

    HTTP <code>Link:</code> headers, if supported, must be assumed to come before any links in the
    document, in the order that they were given in the HTTP message. These headers are to be
    processed according to the rules given in the relevant specifications. [[!HTTP11]] [[!RFC5988]]

    <p class="note">
      Registration of relation types in HTTP Link: headers is distinct from <a>HTML link types</a>,
      and thus their semantics can be different from same-named HTML types.
    </p>

    The IDL attributes <dfn><code>href</code></dfn>, <dfn><code>rel</code></dfn>,
    <dfn><code>rev</code></dfn>, <dfn><code>media</code></dfn>, <dfn><code>hreflang</code></dfn>,
    <dfn><code>type</code></dfn>, and <dfn><code>sizes</code></dfn> each must <a>reflect</a> the
    respective content attributes of the same name.

    The <dfn><code>crossOrigin</code></dfn> IDL attribute must <a>reflect</a> the
    <code>crossorigin</code> content attribute.

    The IDL attribute <dfn><code>relList</code></dfn> <span class="impl">must</span> <a>reflect</a>
    the <code>rel</code> content attribute.
  </div>

  The <code>LinkStyle</code> interface is also implemented by this element. [[!CSSOM]]

  <div class="example">
    Here, a set of <code>link</code> elements provide some style sheets:

    <pre highlight="html">
      &lt;!-- a persistent style sheet -->
      &lt;link rel="stylesheet" href="default.css">

      &lt;!-- the preferred alternate style sheet -->
      &lt;link rel="stylesheet" href="green.css" title="Green styles">

      &lt;!-- some alternate style sheets -->
      &lt;link rel="alternate stylesheet" href="contrast.css" title="High contrast">
      &lt;link rel="alternate stylesheet" href="big.css" title="Big fonts">
      &lt;link rel="alternate stylesheet" href="wide.css" title="Wide screen">
    </pre>
  </div>

  <div class="example">
    The following example shows how you can specify versions of the page that use alternative
    formats, are aimed at other languages, and that are intended for other media:

    <pre highlight="html">
      &lt;link rel=alternate href="/en/html" hreflang=en type=text/html title="English HTML">
      &lt;link rel=alternate href="/fr/html" hreflang=fr type=text/html title="French HTML">
      &lt;link rel=alternate href="/en/html/print" hreflang=en type=text/html media=print title="English HTML (for printing)">
      &lt;link rel=alternate href="/fr/html/print" hreflang=fr type=text/html media=print title="French HTML (for printing)">
      &lt;link rel=alternate href="/en/pdf" hreflang=en type=application/pdf title="English PDF">
      &lt;link rel=alternate href="/fr/pdf" hreflang=fr type=application/pdf title="French PDF">
    </pre>
  </div>

<h4 id="the-meta-element">The <dfn><code>meta</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd>If the <code>itemprop</code> attribute is present: <a>flow content</a>.</dd>
    <dd>If the <code>itemprop</code> attribute is present: <a>phrasing content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>
      If the <code>charset</code> attribute is present, or if the element's <code>http-equiv</code>
      attribute is in the <a>Encoding declaration state</a>: in a <code>head</code> element.
    </dd>
    <dd>
      If the <code>http-equiv</code> attribute is present but not in the
      <a>Encoding declaration state</a>: in a <code>head</code> element.
    </dd>
    <dd>
      If the <code>http-equiv</code> attribute is present but not in the
      <a>Encoding declaration state</a>: in a <code>noscript</code> element that is a child of a
      <code>head</code> element.
    </dd>
    <dd>
      If the <code>name</code> attribute is present: where <a>metadata content</a> is expected.
    </dd>
    <dd>
      If the <code>itemprop</code> attribute is present: where <a>metadata content</a> is expected.
    </dd>
    <dd>
      If the <code>itemprop</code> attribute is present: where <a>phrasing content</a> is expected.
    </dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>name</code> â Metadata name</dd>
    <dd><code>http-equiv</code> â Pragma directive</dd>
    <dd><code>content</code> â Value of the element</dd>
    <dd><code>charset</code> â <a>Character encoding declaration</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a>.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLMetaElement : HTMLElement {
          attribute DOMString name;
          attribute DOMString httpEquiv;
          attribute DOMString content;
        };
      </pre>
    </dd>
  </dl>

  The <code>meta</code> element <a>represents</a> various kinds of metadata that cannot be
  expressed using the <code>title</code>, <code>base</code>, <code>link</code>, <code>style</code>,
  and <code>script</code> elements.

  The <code>meta</code> element can represent document-level metadata with the <code>name</code>
  attribute, pragma directives with the <code>http-equiv</code> attribute, and the file's
  <a>character encoding declaration</a> when an HTML document is serialized to string form (e.g. for
  transmission over the network or for disk storage) with the <code>charset</code> attribute.

  Exactly one of the <code>name</code>, <code>http-equiv</code>, <code>charset</code>,
  and <code>itemprop</code> attributes must be specified.

  If either <code>name</code>, <code>http-equiv</code>, or <code>itemprop</code> is
  specified, then the <code>content</code> attribute must also be
  specified. Otherwise, it must be omitted.

  The <dfn><code>charset</code></dfn> attribute specifies the character
  encoding used by the document. This is a <a>character encoding declaration</a>. If the
  attribute is present in an <a>XML document</a>, its value must be an
  <a>ASCII case-insensitive</a> match for the string "<code>UTF-8</code>" (and the
  document is therefore forced to use UTF-8 as its encoding).

  <p class="note">The <code>charset</code> attribute on the
  <code>meta</code> element has no effect in XML documents, and is only allowed in order to
  facilitate migration to and from XHTML.</p>

  There must not be more than one <code>meta</code> element with a <code>charset</code> attribute
  per document.

  The <dfn><code>content</code></dfn> attribute gives the value of the
  document metadata or pragma directive when the element is used for those purposes. The allowed
  values depend on the exact context, as described in subsequent sections of this specification.

  If a <code>meta</code> element has a <dfn><code>name</code></dfn>
  attribute, it sets document metadata. Document metadata is expressed in terms of name-value pairs,
  the <code>name</code> attribute on the <code>meta</code> element giving the
  name, and the <code>content</code> attribute on the same element giving
  the value. The name specifies what aspect of metadata is being set; valid names and the meaning of
  their values are described in the following sections. If a <code>meta</code> element has no
  <code>content</code> attribute, then the value part of the metadata name-value pair is the empty
  string.

  <div class="impl">
    The <dfn><code>name</code></dfn> and <dfn><code>content</code></dfn> IDL attributes must
    <a>reflect</a> the respective content attributes of the same name. The IDL attribute
    <dfn><code>httpEquiv</code></dfn> must <a>reflect</a> the content attribute
    <code>http-equiv</code>.
  </div>

<h5 id="standard-metadata-names">Standard metadata names</h5>

  This specification defines a few names for the <code>name</code> attribute of the
  <code>meta</code> element.

  Names are case-insensitive<span class="impl">, and must be compared in an
  <a>ASCII case-insensitive</a> manner</span>.

  : <dfn><code>application-name</code></dfn>
  :: The value must be a short free-form string giving the name of the Web application that the page
      represents. If the page is not a Web application, the <code>application-name</code> metadata
      name must not be used. Translations of the Web application's name may be given, using the
      <code>lang</code> attribute to specify the language of each name.

      There must not be more than one <code>meta</code> element with a given <a>language</a> and
      with its <code>name</code> attribute set to the value <code>application-name</code> per
      document.

      <div class="impl">
        User agents may use the application name in UI in preference to the page's
        <code>title</code>, since the title might include status messages and the like relevant to
        the status of the page at a particular moment in time instead of just being the name of the
        application.

        To find the application name to use given an ordered list of languages (e.g. British
        English, American English, and English), user agents must run the following steps:

        1. Let <var>languages</var> be the list of languages.
        2. Let <var>default language</var> be the <a>language</a> of the <code>Document</code>'s
            <a>root element</a>, if any, and if that language is not unknown.
        3. If there is a <var>default language</var>, and if it is not the same language as any of
            the languages in <var>languages</var>, append it to <var>languages</var>.
        4. Let <var>winning language</var> be the first language in <var>languages</var> for which
            there is a <code>meta</code> element in the <code>Document</code> that has its
            <code>name</code> attribute set to the value <code>application-name</code> and whose
            <a>language</a> is the language in question.

            If none of the languages have such a <code>meta</code> element, then abort these steps;
            there's no given application name.
        5. Return the value of the <code>content</code> attribute of the first <code>meta</code>
            element in the <code>Document</code> in <a>tree order</a> that has its <code>name</code>
            attribute set to the value <code>application-name</code> and whose <a>language</a> is
            <var>winning language</var>.

        <p class="note">
          This algorithm would be used by a browser when it needs a name for the page, for instance,
          to label a bookmark. The languages it would provide to the algorithm would be the user's
          preferred languages.
        </p>
      </div>

  : <dfn><code>author</code></dfn>
  :: The value must be a free-form string giving the name of one of the page's authors.

  : <dfn><code>description</code></dfn>
  :: The value must be a free-form string that describes the page. The value must be appropriate for
      use in a directory of pages, e.g. in a search engine. There must not be more than one
      <code>meta</code> element with its <code>name</code> attribute set to the value
      <code>description</code> per document.

  : <dfn><code>generator</code></dfn>
  :: The value must be a free-form string that identifies one of the software packages used to
      generate the document. This value must not be used on pages whose markup is not generated by
      software, e.g. pages whose markup was written by a user in a text editor.

      <div class="example">
        Here is what a tool called "Frontweaver" could include in its output, in the page's
        <code>head</code> element, to identify itself as the tool used to generate the page:

        <pre highlight="html">&lt;meta name=generator content="Frontweaver 8.2"&gt;</pre>
      </div>

  : <dfn><code>keywords</code></dfn>
  :: The value must be a <a>set of comma-separated tokens</a>, each of which is a keyword relevant
      to the page.

      <div class="example">
        This page about typefaces on British motorways uses a <code>meta</code> element to specify
        some keywords that users might use to look for the page:

        <pre highlight="html">
          &lt;!DOCTYPE HTML&gt;
          &lt;html lang="en-GB"&gt;
            &lt;head&gt;
              &lt;title&gt;Typefaces on UK motorways&lt;/title&gt;
              &lt;meta name="keywords" content="british,type face,font,fonts,highway,highways"&gt;
            &lt;/head&gt;
            &lt;body&gt;
            ...
        </pre>
      </div>

      <p class="note">
        Many search engines do not consider such keywords, because this feature has historically
        been used unreliably and even misleadingly as a way to spam search engine results in a way
        that is not helpful for users.
      </p>

      <div class="impl">
        To obtain the list of keywords that the author has specified as applicable to the page, the
        user agent must run the following steps:

        1. Let <var>keywords</var> be an empty list.
        2. For each <code>meta</code> element with a <code>name</code> attribute and a
            <code>content</code> attribute and whose <code>name</code> attribute's value is
            <code>keywords</code>, run the following substeps:
            1. <a>Split the value of the element's <code>content</code> attribute on commas</a>.
            2. Add the resulting tokens, if any, to <var>keywords</var>.
        3. Remove any duplicates from <var>keywords</var>.
        4. Return <var>keywords</var>. This is the list of keywords that the author has specified as
            applicable to the page.

        User agents should not use this information when there is insufficient confidence in the
        reliability of the value.

        <p class="example">
          For instance, it would be reasonable for a content management system to use the keyword
          information of pages within the system to populate the index of a site-specific search
          engine, but a large-scale content aggregator that used this information would likely find
          that certain users would try to game its ranking mechanism through the use of
          inappropriate keywords.
        </p>
      </div>

<h5 id="other-metadata-names">Other metadata names</h5>

  <dfn>Extensions to the predefined set of metadata names</dfn> may be registered in the
  <a>WHATWG Wiki MetaExtensions page</a>. [[!WHATWGWIKI]]

  Anyone is free to edit the WHATWG Wiki MetaExtensions page at any time to add a type. These new
  names must be specified with the following information:

  : Keyword
  :: The actual name being defined. The name should not be confusingly similar to any other defined
      name (e.g. differing only in case).

  : Brief description
  :: A short non-normative description of what the metadata name's meaning is, including the format
      the value is required to be in.

  : Specification
  :: A link to a more detailed description of the metadata name's semantics and requirements. It
      could be another page on the Wiki, or a link to an external page.

  : Synonyms
  :: A list of other names that have exactly the same processing requirements. Authors should not
      use the names defined to be synonyms, they are only intended to allow user agents to support
      legacy content. Anyone may remove synonyms that are not used in practice; only names that need
      to be processed as synonyms for compatibility with legacy content are to be registered in this
      way.

  : Status
  :: One of the following:
      : Proposed
      :: The name has not received wide peer review and approval. Someone has proposed it and is, or
          soon will be, using it.

      : Ratified
      :: The name has received wide peer review and approval. It has a specification that
          unambiguously defines how to handle pages that use the name, including when they use it in
          incorrect ways.

      : Discontinued
      :: The metadata name has received wide peer review and it has been found wanting. Existing
          pages are using this metadata name, but new pages should avoid it. The "brief description"
          and "specification" entries will give details of what authors should use instead, if
          anything.

      If a metadata name is found to be redundant with existing values, it should be removed and
      listed as a synonym for the existing value.

      If a metadata name is registered in the "proposed" state for a period of a month or more
      without being used or specified, then it may be removed from the registry.

      If a metadata name is added with the "proposed" status and found to be redundant with existing
      values, it should be removed and listed as a synonym for the existing value. If a metadata
      name is added with the "proposed" status and found to be harmful, then it should be changed to
      "discontinued" status.

      Anyone can change the status at any time, but should only do so in accordance with the
      definitions above.

  <div class="impl">
    Conformance checkers may use the information given on the WHATWG Wiki MetaExtensions page to
    establish if a value is allowed or not: values defined in this specification or marked as
    "proposed" or "ratified" must be accepted, whereas values marked as "discontinued" or not listed
    in either this specification or on the aforementioned page must be reported as invalid.
    Conformance checkers may cache this information (e.g. for performance reasons or to avoid the
    use of unreliable network connectivity).

    When an author uses a new metadata name not defined by either this specification or the Wiki
    page, conformance checkers should offer to add the value to the Wiki, with the details described
    above, with the "proposed" status.
  </div>

  Metadata names whose values are to be <a>URLs</a> must not be proposed or accepted. Links must be
  represented using the <code>link</code> element, not the <code>meta</code> element.

<h5 id="pragma-directives">Pragma directives</h5>

  When the <dfn><code>http-equiv</code></dfn> attribute is specified on a <code>meta</code> element,
  the element is a pragma directive.

  The <code>http-equiv</code> attribute is an <a>enumerated attribute</a>. The following table lists
  the keywords defined for this attribute. The states given in the first cell of the rows with
  keywords give the states to which those keywords map. <span class="impl">Some of the keywords are
  non-conforming, as noted in the last column.</span>

  <table id="table-http-equiv">
    <thead>
      <tr>
        <th>State</th>
        <th>Keyword</th>
        <th>Notes</th>
      </tr>
    </thead>
    <tbody>
      <tr class="impl">
        <td><a>Content Language</a></td>
        <td><code>content-language</code></td>
        <td>Non-conforming</td>
      </tr>
      <tr>
        <td><a>Encoding declaration</a></td>
        <td><code>content-type</code></td>
        <td></td>
      </tr>
      <tr>
        <td><a>Default style</a></td>
        <td><code>default-style</code></td>
        <td></td>
      </tr>
      <tr>
        <td><a>Refresh</a></td>
        <td><code>refresh</code></td>
        <td></td>
      </tr>
      <tr class="impl">
        <td><a>Cookie setter</a></td>
        <td><code>set-cookie</code></td>
        <td>Non-conforming</td>
      </tr>
    </tbody>
  </table>

  <div class="impl">
    When a <code>meta</code> element is <a>inserted into the document</a>, if its
    <code>http-equiv</code> attribute is present and represents one of the above states, then the
    user agent must run the algorithm appropriate for that state, as described in the following
    list:
  </div>

  <div class="impl">
    : <dfn>Content language state</dfn> (<code>http-equiv="content-language"</code>)
    ::
        <p class="note">
          This feature is non-conforming. Authors are encouraged to use the <code>lang</code>
          attribute instead.
        </p>

        This pragma sets the <dfn>pragma-set default language</dfn>. Until such a pragma is
        successfully processed, there is no <a>pragma-set default language</a>.

        1. If the <code>meta</code> element has no <code>content</code> attribute, then abort these
            steps.
        2. If the element's <code>content</code> attribute contains a U+002C COMMA character (,)
            then abort these steps.
        3. Let <var>input</var> be the value of the element's <code>content</code> attribute.
        4. Let <var>position</var> point at the first character of <var>input</var>.
        5. <a>Skip whitespace</a>.
        6. <a>Collect a sequence of characters</a> that are not <a>space characters</a>.
        7. Let <var>candidate</var> be the string that resulted from the previous step.
        8. If <var>candidate</var> is the empty string, abort these steps.
        9. Set the <a>pragma-set default language</a> to <var>candidate</var>.
            <p class="note">
              If the value consists of multiple space-separated tokens, tokens after the first are
              ignored.
            </p>

        <p class="note">
          This pragma is almost, but not quite, entirely unlike the HTTP
          <code>Content-Language</code> header of the same name. [[!HTTP11]]
        </p>
  </div>

  : <dfn>Encoding declaration state</dfn> (<code>http-equiv="content-type"</code>)
  :: The <a>Encoding declaration state</a> is just an alternative form of setting the
      <code>charset</code> attribute: it is a <a>character encoding declaration</a>.
      <span class="impl">This state's user agent requirements are all handled by the parsing section
      of the specification.</span>

      For <code>meta</code> elements with an <code>http-equiv</code> attribute in the <a>Encoding
      declaration state</a>, the <code>content</code> attribute must have a value that is an
      <a>ASCII case-insensitive</a> match for a string that consists of: the literal string
      "<code>text/html;</code>", optionally followed by any number of <a>space characters</a>,
      followed by the literal string "<code>charset=</code>", followed by one of the <a>labels</a>
      of the <a>character encoding</a> of the <a>character encoding declaration</a>.

      A document must not contain both a <code>meta</code> element with an <code>http-equiv</code>
      attribute in the <a>Encoding declaration state</a> and a <code>meta</code> element with the
      <code>charset</code> attribute present.

      The <a>encoding declaration state</a> may be used in <a>HTML documents</a> and in
      <a>XML Documents</a>. If the <a>encoding declaration state</a> is used in
      <a>XML Documents</a>, the name of the <a>character encoding</a> must be an
      <a>ASCII case-insensitive</a> match for the string "<code>UTF-8</code>" (and	the document is
      therefore forced to use UTF-8 as its encoding).

      <p class="note">
        The <a>encoding declaration state</a> has no effect in XML documents, and is only allowed in
        order to facilitate migration to and from XHTML.
      </p>

  : <dfn>Default style state</dfn> (<code>http-equiv="default-style"</code>)
  :: This pragma sets the name of the default <a>alternative style sheet set</a>.
      <div class="impl">
        1. If the <code>meta</code> element has no <code>content</code> attribute, or if that
            attribute's value is the empty string, then abort these steps.
        2. Set the <a>preferred style sheet set</a> to the value of the element's
            <code>content</code> attribute. [[!CSSOM]]
      </div>

  : <dfn>Refresh state</dfn> (<code>http-equiv="refresh"</code>)
  :: This pragma acts as timed redirect.
      <div class="impl">
        1. If another <code>meta</code> element with an <code>http-equiv</code> attribute in the
            <a>Refresh state</a> has already been successfully processed (i.e. when it was inserted
            the user agent processed it and reached the last step of this list of steps), then abort
            these steps.
        2. If the <code>meta</code> element has no <code>content</code> attribute, or if that
            attribute's value is the empty string, then abort these steps.
        3. Let <var>input</var> be the value of the element's <code>content</code> attribute.
        4. Let <var>position</var> point at the first character of <var>input</var>.
        5. <a>Skip whitespace</a>.
        6. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and parse the
            resulting string using the <a>rules for parsing non-negative integers</a>. If the
            sequence of characters collected is the empty string, then no number will have been
            parsed; abort these steps. Otherwise, let <var>time</var> be the parsed number.
        7. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a> and U+002E FULL STOP
            characters (.). Ignore any collected characters.
        8. <a>Skip whitespace</a>.
        9. Let <var>url</var> be the address of the current page.
        10. If the character in <var>input</var> pointed to by <var>position</var> is a U+003B
            SEMICOLON character (;) or a U+002C COMMA character (,), then advance
            <var>position</var> to the next character.
        11. <a>Skip whitespace</a>.
        12. If the character in <var>input</var> pointed to by <var>position</var> is a U+0055 LATIN
            CAPITAL LETTER U character (U) or a U+0075 LATIN SMALL LETTER U character (u), then
            advance <var>position</var> to the next character. Otherwise, jump to the last step.
        13. If the character in <var>input</var> pointed to by <var>position</var> is a U+0052 LATIN
            CAPITAL LETTER R character (R) or a U+0072 LATIN SMALL LETTER R character (r), then
            advance <var>position</var> to the next character. Otherwise, jump to the last step.
        14. If the character in <var>input</var> pointed to by <var>position</var> is s U+004C LATIN
            CAPITAL LETTER L character (L) or a U+006C LATIN SMALL LETTER L character (l), then
            advance <var>position</var> to the next character. Otherwise, jump to the last step.
        15. <a>Skip whitespace</a>.
        16. If the character in <var>input</var> pointed to by <var>position</var> is a U+003D
            EQUALS SIGN (=), then advance <var>position</var> to the next character. Otherwise, jump
            to the last step.
        17. <a>Skip whitespace</a>.
        18. If the character in <var>input</var> pointed to by <var>position</var> is either a
            U+0027 APOSTROPHE character (') or U+0022 QUOTATION MARK character ("), then let
            <var>quote</var> be that character, and advance <var>position</var> to the next
            character. Otherwise, let <var>quote</var> be the empty string.
        19. Let <var>url</var> be equal to the substring of <var>input</var> from the character at
            <var>position</var> to the end of the string.
        20. If <var>quote</var> is not the empty string, and there is a character in <var>url</var>
            equal to <var>quote</var>, then truncate <var>url</var> at that character, so that it
            and all subsequent characters are removed.
        21. Strip any trailing <a>space characters</a> from the end of <var>url</var>.
        22. Strip any U+0009 CHARACTER TABULATION (tab), U+000A LINE FEED (LF), and U+000D CARRIAGE
            RETURN (CR) characters from <var>url</var>.
        23. <a>Resolve</a> the <var>url</var> value to an <a>absolute URL</a>, relative to the
            <code>meta</code> element. If this fails, abort these steps.
        24. Perform one or more of the following steps:

            * After the refresh has come due (as defined below), if the user has not canceled the
                redirect and if the <code>meta</code> element's <a>node document</a>'s <a>active
                sandboxing flag set</a> does not have the <a>sandboxed automatic features browsing
                context flag</a> set, <a>navigate</a> the <code>Document</code>'s
                <a>browsing context</a> to <var>url</var>, with <a>replacement enabled</a>, and with
                the <code>Document</code>'s <a>browsing context</a> as the
                <a>source browsing context</a>.

              For the purposes of the previous paragraph, a refresh is said to have come due as soon
              as the <em>later</em> of the following two conditions occurs:

              * At least <var>time</var> seconds have elapsed since the document has
                  <a>completely loaded</a>, adjusted to take into account user or user agent
                  preferences.
              * At least <var>time</var> seconds have elapsed since the <code>meta</code> element
                  was <a>inserted into the <code>Document</code></a>, adjusted to take into account
                  user or user agent preferences.

            * Provide the user with an interface that, when selected, <a>navigates</a> a
                <a>browsing context</a> to <var>url</var>, with the <code>Document</code>'s
                <a>browsing context</a> as the <a>source browsing context</a>.
            * Do nothing.

            In addition, the user agent may, as with anything, inform the user of any and all
            aspects of its operation, including the state of any timers, the destinations of any
            timed redirects, and so forth.
      </div>

      For <code>meta</code> elements with an <code>http-equiv</code> attribute in the
      <a>Refresh state</a>, the <code>content</code> attribute must have a value consisting either
      of:

      * just a <a>valid non-negative integer</a>, or
      * a <a>valid non-negative integer</a>, followed by a U+003B SEMICOLON character (;), followed
        by one or more <a>space characters</a>, followed by a substring that is an
        <a>ASCII case-insensitive</a> match for the string "<code>URL</code>", followed by a U+003D
        EQUALS SIGN character (=), followed by a <a>valid URL</a> that does not start with a literal
        U+0027 APOSTROPHE (') or U+0022 QUOTATION MARK (") character.

      In the former case, the integer represents a number of seconds before the page is to be
      reloaded; in the latter case the integer represents a number of seconds before the page is to
      be replaced by the page at the given <a>URL</a>.

      <div class="example">
        A news organization's front page could include the following markup in the page's
        <code>head</code> element, to ensure that the page automatically reloads from the server
        every five minutes:

        <pre highlight="html">&lt;meta http-equiv="Refresh" content="300"&gt;</pre>
      </div>

      <div class="example">
        A sequence of pages could be used as an automated slide show by making each page refresh to
        the next page in the sequence, using markup such as the following:

        <pre highlight="html">&lt;meta http-equiv="Refresh" content="20; URL=page4.html"&gt;</pre>
      </div>

  <div class="impl">
    : <dfn>Cookie setter</dfn> (<code>http-equiv="set-cookie"</code>)
    :: This pragma sets an HTTP cookie. [[!COOKIES]]

        It is non-conforming. Real HTTP headers should be used instead.

        1. If the <code>meta</code> element has no <code>content</code> attribute, or if that
            attribute's value is the empty string, then abort these steps.
        2. <a>Obtain the storage mutex</a>.
        3. Act as if <a>receiving a set-cookie-string</a> for <a>the document's address</a> via a
            "non-HTTP" API, consisting of the value of the element's <code>content</code> attribute
            encoded as UTF-8. [[!COOKIES]] [[!ENCODING]]
  </div>

  There must not be more than one <code>meta</code> element with any particular state in the
  document at a time.

<h5 id="other-pragma-directives">Other pragma directives</h5>

  <dfn>Extensions to the predefined set of pragma directives</dfn> may, under certain conditions, be
  registered in the <a>WHATWG Wiki PragmaExtensions page</a>. [[!WHATWGWIKI]]

  Such extensions must use a name that is identical to an HTTP header registered in the Permanent
  Message Header Field Registry, and must have behavior identical to that described for the HTTP
  header. [[!IANAPERMHEADERS]]

  Pragma directives corresponding to headers describing metadata, or not requiring specific user
  agent processing, must not be registered; instead, use <a>metadata names</a>. Pragma directives
  corresponding to headers that affect the HTTP processing model (e.g. caching) must not be
  registered, as they would result in HTTP-level behavior being different for user agents that
  implement HTML than for user agents that do not.

  Anyone is free to edit the WHATWG Wiki PragmaExtensions page at any time to add a pragma directive
  satisfying these conditions. Such registrations must specify the following information:

  : Keyword
  :: The actual name being defined. The name must match a previously-registered HTTP name with the
      same requirements.

  : Brief description
  :: A short non-normative description of the purpose of the pragma directive.

  : Specification
  :: A link to the specification defining the corresponding HTTP header.

  <div class="impl">
    Conformance checkers must use the information given on the WHATWG Wiki PragmaExtensions page to
    establish if a value is allowed or not: values defined in this specification or listed on the
    aforementioned page must be accepted, whereas values not listed in either this specification or
    on the aforementioned page must be rejected as invalid. Conformance checkers may cache this
    information (e.g. for performance reasons or to avoid the use of unreliable network
    connectivity).
  </div>

<h5 id="specifying-the-documents-character-encoding">Specifying the document'''s character encoding</h5>

  A <dfn>character encoding declaration</dfn> is a mechanism by which the <a>character encoding</a>
  used to store or transmit a document is specified.

  The following restrictions apply to <a>character encoding declarations</a>:

  * The character encoding name given must be an <a>ASCII case-insensitive</a> match for one of the
      <a>labels</a> of the <a>character encoding</a> used to serialize the file. [[!ENCODING]]
  * The character encoding declaration must be serialized without the use of
      <a>character references</a> or character escapes of any kind.
  * <a>The element containing the character encoding declaration must be serialized completely
      within the first 1024 bytes of the document.</a>

  In addition, due to a number of restrictions on <code>meta</code> elements, there can only be one
  <code>meta</code>-based character encoding declaration per document.

  If an <a>HTML document</a> does not start with a BOM, and its <a>encoding</a> is not explicitly
  given by <a>Content-Type metadata</a>, and the document is not <a>an <code>iframe</code>
  <code>srcdoc</code> document</a>, then the character encoding used must be an
  <a>ASCII-compatible encoding</a>, and the encoding must be specified using a <code>meta</code>
  element with a <code>charset</code> attribute or a <code>meta</code> element with an
  <code>http-equiv</code> attribute in the <a>Encoding declaration state</a>.

  <p class="note">
    A character encoding declaration is required (either in the <a>Content-Type metadata</a> or
    explicitly in the file) even if the encoding is US-ASCII, because a character encoding is needed
    to process non-ASCII characters entered by the user in forms, in URLs generated by scripts, and
    so forth.
  </p>

  If the document is <a>an <code>iframe</code> <code>srcdoc</code> document</a>, the document must
  not have a <a>character encoding declaration</a>. (In this case, the source is already decoded,
  since it is part of the document that contained the <code>iframe</code>.)

  If an <a>HTML document</a> contains a <code>meta</code> element with a <code>charset</code>
  attribute or a <code>meta</code> element with an <code>http-equiv</code> attribute in the
  <a>Encoding declaration state</a>, then the character encoding used must be an
  <a>ASCII-compatible encoding</a>.

  Authors should use UTF-8. Conformance checkers may advise authors against using legacy encodings.
  [[!ENCODING]]

  <div class="impl">
    Authoring tools should default to using UTF-8 for newly-created documents. [[!ENCODING]]
  </div>

  Encodings in which a series of bytes in the range 0x20 to 0x7E can encode characters other than
  the corresponding characters in the range U+0020 to U+007E represent a potential security
  vulnerability: a user agent that does not support the encoding (or does not support the label used
  to declare the encoding, or does not use the same mechanism to detect the encoding of unlabeled
  content as another user agent) might end up interpreting technically benign plain text content as
  HTML tags and JavaScript. Authors should therefore not use these encodings. For example, this
  applies to encodings in which the bytes corresponding to "<code>&lt;script&gt;</code>" in ASCII
  can encode a different string. Authors should not use such encodings, which are known to include
  JIS_C6226-1983, JIS_X0212-1990, HZ-GB-2312, JOHAB (Windows code page 1361), encodings based on
  ISO-2022, and encodings based on EBCDIC. Furthermore, authors must not use the CESU-8, UTF-7,
  BOCU-1 and SCSU encodings, which also fall into this category; these encodings were never intended
  for use for Web content. [[!RFC1345]] [[!RFC1842]] [[!RFC1468]] [[!RFC2237]] [[!RFC1554]]
  [[!CP50220]] [[!RFC1922]] [[!RFC1557]] [[!CESU8]] [[!RFC2152]] [[!BOCU1]] [[!SCSU]]

  Authors should not use UTF-32, as the encoding detection algorithms described in this
  specification intentionally do not distinguish it from UTF-16. [[!UNICODE]]

  <p class="note">
    Using non-UTF-8 encodings can have unexpected results on form submission and URL encodings,
    which use the <a>document's character encoding</a> by default.
  </p>

  In XHTML, the XML declaration should be used for inline character encoding information, if
  necessary.

  <div class="example">
    In HTML, to declare that the character encoding is UTF-8, the author could include the following
    markup near the top of the document (in the <code>head</code> element):

    <pre highlight="html">&lt;meta charset="utf-8"&gt;</pre>

    In XML, the XML declaration would be used instead, at the very top of the markup:

    <pre highlight="html">&lt;?xml version="1.0" encoding="utf-8"?&gt;</pre>
  </div>

<h4 id="the-style-element">The <dfn><code>style</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd>If the <code>scoped</code> attribute is present: <a>flow content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>
      If the <code>scoped</code> attribute is absent: where <a>metadata content</a> is expected.
    </dd>
    <dd>
      If the <code>scoped</code> attribute is absent: in a <code>noscript</code> element that is a
      child of a <code>head</code> element.
    </dd>
    <dd>
      If the <code>scoped</code> attribute is present: where <a>flow content</a> is expected, but
      before any other <a>flow content</a> other than <a>inter-element whitespace</a> and
      <code>style</code> elements, and not as the child of an element whose content model is
      <a>transparent</a>.
    </dd>
    <dt><a>Content model</a>:</dt>
    <dd>
      Depends on the value of the <code>type</code> attribute, but must match requirements described
      in prose below.
    </dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>media</code> â Applicable media</dd>
    <dd><code>type</code> â Type of embedded resource</dd>
    <dd>
      <code>scoped</code> â Whether the styles apply to the entire document or just the parent
      subtree
    </dd>
    <dd>
      Also, the <code>title</code> attribute has special semantics on this element: Alternative
      style sheet set name.
    </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLStyleElement : HTMLElement {
          attribute DOMString media;
          attribute DOMString type;
          attribute boolean scoped;
        };
        HTMLStyleElement implements LinkStyle;
      </pre>
    </dd>
  </dl>

  The <code>style</code> element allows authors to embed style information in their documents. The
  <code>style</code> element is one of several inputs to the styling processing model. The element
  does not <a>represent</a> content for the user.

  The <dfn><code>type</code></dfn> attribute gives the styling language. If the attribute is
  present, its value must be a <a>valid MIME type</a> that designates a styling language. The
  <code>charset</code> parameter must not be specified. The default value for the <code>type</code>
  attribute, which is used if the attribute is absent, is "<code>text/css</code>". [[!RFC2318]]

  <div class="impl">
    When examining types to determine if they support the language, user agents must not ignore
    unknown MIME parameters â types with unknown parameters must be assumed to be unsupported. The
    <code>charset</code> parameter must be treated as an unknown parameter for the purpose of
    comparing <a>MIME types</a> here.
  </div>

  The <dfn><code>media</code></dfn> attribute says which media the styles apply to. The value must
  be a <a>valid media query list</a>. <span class="impl">The user agent must apply the styles when
  the <code>media</code> attribute's value <a>matches the environment</a> and the other relevant
  conditions apply, and must not apply them otherwise.</span>

  <div class="impl">
    <p class="note">
      The styles might be further limited in scope, e.g. in CSS with the use of <code>@media</code>
      blocks. This specification does not override such further restrictions or requirements.
    </p>
  </div>

  The default, if the <code>media</code> attribute is omitted, is "<code>all</code>", meaning that
  by default styles apply to all media.

  The <dfn><code>scoped</code></dfn> attribute is a <a>boolean attribute</a>. If present, it
  indicates that the styles are intended just for the subtree rooted at the <code>style</code>
  element's parent element, as opposed to the whole <code>Document</code>.

  If the <code>scoped</code> attribute is present and the element has a parent element, then the
  <code>style</code> element must precede any <a>flow content</a> in its parent element other than
  <a>inter-element whitespace</a> and other <code>style</code> elements, and the parent element's
  content model must not have a <a>transparent</a> component.

  <p class="note">
    This implies that scoped <code>style</code> elements cannot be children of, e.g., <code>a</code>
    or <code>ins</code> elements, even when those are used as <a>flow content</a> containers.
  </p>

  <p class="note">
    A <code>style</code> element <em>without</em> a <code>scoped</code> attribute is restricted to
    appearing in the <code>head</code> of the document.
  </p>

  A style sheet declared by a <code>style</code> element that has a <code>scoped</code> attribute
  and has a parent node that is an element is <i>scoped</i>, with the <i>scoping root</i> being the
  <code>style</code> element's parent element. [[!CSS-SCOPING-1]]

  The <dfn><code>title</code></dfn> attribute on <code>style</code> elements defines
  <a>alternative style sheet sets</a>. If the <code>style</code> element has no <code>title</code>
  attribute, then it has no title; the <code>title</code> attribute of ancestors does not apply to
  the <code>style</code> element. [[!CSSOM]]

  <p class="note">
    The <code>title</code> attribute on <code>style</code> elements, like the <code>title</code>
    attribute on <code>link</code> elements, differs from the global <code>title</code> attribute in
    that a <code>style</code> block without a title does not inherit the title of the parent
    element: it merely has no title.
  </p>

  The <code>textContent</code> of a <code>style</code> element must match the <code>style</code>
  production in the following ABNF, the character set for which is Unicode. [[!ABNF]]

  <pre data-highlight="abnf">
    style         = no-c-start *( c-start no-c-end c-end no-c-start )
    no-c-start    = &lt; any string that doesn't contain a substring that matches c-start &gt;
    c-start       = "&lt;!--"
    no-c-end      = &lt; any string that doesn't contain a substring that matches c-end &gt;
    c-end         = "--&gt;"
  </pre>

  <hr />

  <div class="impl">
    Whenever one of the following conditions occur for an element whose <code>Document</code> is in
    a <a>browsing context</a>:

    * the element is popped off the <a>stack of open elements</a> of an <a>HTML parser</a> or
        <a>XML parser</a>,

    * the element is not on the <a>stack of open elements</a> of an <a>HTML parser</a> or
        <a>XML parser</a>, and it is <a>inserted into a document</a> or
        <a>removed from a document</a>,

    * the element is not on the <a>stack of open elements</a> of an <a>HTML parser</a> or
        <a>XML parser</a>, and one of its child nodes is modified by a script,

    ...the user agent must run the <dfn>update a <code>style</code> block</dfn> algorithm that
    applies for the style sheet language specified by the element's <code>type</code> attribute,
    passing it the element's <dfn>style data</dfn>.

    For styling languages that consist of pure text (as opposed to XML), a <code>style</code>
    element's <a>style data</a> is the concatenation of the contents of all the <code>Text</code>
    nodes that are children of the <code>style</code> element (not any other nodes such as comments
    or elements), in <a>tree order</a>. For XML-based styling languages, the <a>style data</a>
    consists of all the child nodes of the <code>style</code> element.

    The <a>update a <code>style</code> block</a> algorithm for CSS (<code>text/css</code>) is as
    follows:

    1. Let <var>element</var> be the <code>style</code> element.</li>
    2. If <var>element</var> has an <a>associated CSS style sheet</a>,
        <a>remove the CSS style sheet</a> in question.</li>
    3. If <var>element</var> is not <a>in a <code>Document</code></a>, then abort
        these steps.</li>
    4. <a>Create a CSS style sheet</a> with the following properties:

        : <a>type</a>
        :: <code>text/css</code>

        : <a>owner node</a>
        :: <var>element</var>

        : <a>media</a>
        :: The <code>media</code> attribute of <var>element</var>.

            <p class="note">
              This is a reference to the (possibly absent at this time) attribute, rather than a
              copy of the attribute's current value. The CSSOM specification defines what happens
              when the attribute is dynamically set, changed, or removed.
            </p>

        : <a>title</a>
        :: The <code>title</code> attribute of <var>element</var>.

            <p class="note">Again, this is a <em>reference</em> to the attribute.</p>

        : <a>alternate flag</a>
        :: Unset.

        : <a>origin-clean flag</a>
        :: Set.

        : <a>location</a>
        : <a>parent CSS style sheet</a>
        : <a>owner CSS rule</a>
        :: null

        : <a>disabled flag</a>
        :: Left at its default value.

        : <a>CSS rules</a>
        :: Left uninitialized.

    This specification does not define any other styling language's
    <i>update a <code>style</code> block</i> algorithm.

    Once the attempts to obtain the style sheet's <a>critical subresources</a>, if any, are
    complete, or, if the style sheet has no <a>critical subresources</a>, once the style sheet has
    been parsed and processed, the user agent must, if the loads were successful or there were none,
    <a>queue a task</a> to <a>fire a simple event</a> named <code>load</code> at the
    <code>style</code> element, or, if one of the style sheet's <a>critical subresources</a> failed
    to completely load for any reason (e.g. DNS error, HTTP 404 response, a connection being
    prematurely closed, unsupported Content-Type), <a>queue a task</a> to <a>fire a simple event</a>
    named <code>error</code> at the <code>style</code> element. Non-network errors in processing the
    style sheet or its subresources (e.g. CSS parse errors, PNG decoding errors) are not failures
    for the purposes of this paragraph.

    The <a>task source</a> for these <a>tasks</a> is the <a>DOM manipulation task source</a>.

    The element must <a>delay the load event</a> of the element's <a>node document</a> until all the
    attempts to obtain the style sheet's <a>critical subresources</a>, if any, are complete.
  </div>

  <p class="note">
    This specification does not specify a style system, but CSS is expected to be supported by most
    Web browsers. [[!CSS-2015]]
  </p>

  <div class="impl">
    The <dfn><code>media</code></dfn>, <dfn><code>type</code></dfn> and
    <dfn><code>scoped</code></dfn> IDL attributes must <a>reflect</a> the respective content
    attributes of the same name.
  </div>

  The <code>LinkStyle</code> interface is also implemented by this element. [[!CSSOM]]

  <div class="example">
    The following document has its stress emphasis styled as bright red text rather than italics
    text, while leaving titles of works and Latin words in their default italics. It shows how using
    appropriate elements enables easier restyling of documents.

    <pre highlight="html">&lt;!DOCTYPE html&gt;
      &lt;html&gt;
        &lt;head&gt;
          &lt;title&gt;My favorite book&lt;/title&gt;
          &lt;style&gt;
            body { color: black; background: white; }
            em { font-style: normal; color: red; }
          &lt;/style&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;p&gt;My &lt;em&gt;favorite&lt;/em&gt; book of all time has &lt;em&gt;got&lt;/em&gt; to be
          &lt;cite&gt;A Cat's Life&lt;/cite&gt;. It is a book by P. Rahmel that talks
          about the &lt;i lang="la"&gt;Felis Catus&lt;/i&gt; in modern human society.&lt;/p&gt;
        &lt;/body&gt;
      &lt;/html&gt;</pre>
  </div>

  <div class="impl">
    <h4 id="interactions-of-styling-and-scripting">Interactions of styling and scripting</h4>

    Style sheets, whether added by a <code>link</code> element, a <code>style</code> element, an
    <code>&lt;?xml-stylesheet?&gt;</code> PI, an HTTP <code>Link</code> header, or some other
    mechanism, have a <dfn>style sheet ready</dfn> flag, which is initially unset.

    When a style sheet is ready to be applied, its <a>style sheet ready</a> flag must be set. If the
    style sheet referenced no other resources (e.g. it was an internal style sheet given by a
    <code>style</code> element with no <code>@import</code> rules), then the style rules must be
    <a>immediately</a> made available to script; otherwise, the style rules must only be made
    available to script once the <a>event loop</a> reaches its <i>update the rendering</i> step.

    A style sheet in the context of the <code>Document</code> of an <a>HTML parser</a> or
    <a>XML parser</a> is said to be <dfn>a style sheet that is blocking scripts</dfn> if the element
    was created by that <code>Document</code>'s parser, and the element is either a
    <code>style</code> element or a <code>link</code> element that was an <a>external resource link
    that contributes to the styling processing model</a> when the element was created by the parser,
    and the element's style sheet was enabled when the element was created by the parser, and the
    element's <a>style sheet ready</a> flag is not yet set, and, the last time the <a>event loop</a>
    reached <a>step 1</a>, the element was <a>in that <code>Document</code></a>, and the user agent
    hasn't given up on that particular style sheet yet. A user agent may give up on a style sheet at
    any time.

    <p class="note">
      Giving up on a style sheet before the style sheet loads, if the style sheet eventually does
      still load, means that the script might end up operating with incorrect information. For
      example, if a style sheet sets the color of an element to green, but a script that inspects
      the resulting style is executed before the sheet is loaded, the script will find that the
      element is black (or whatever the default color is), and might thus make poor choices (e.g.
      deciding to use black as the color elsewhere on the page, instead of green). Implementors have
      to balance the likelihood of a script using incorrect information with the performance impact
      of doing nothing while waiting for a slow network request to finish.
    </p>

    A <code>Document</code> <dfn>has a style sheet that is blocking scripts</dfn> if there is either
    <a>a style sheet that is blocking scripts</a> in the context of that <code>Document</code>, or
    if that <code>Document</code> is in a <a>browsing context</a> that has a
    <a>parent browsing context</a>, and the <a>active document</a> of that
    <a>parent browsing context</a> itself <a>has a style sheet that is blocking scripts</a>.

    A <code>Document</code> <dfn>has no style sheet that is blocking scripts</dfn> if it does not
    <a>have a style sheet that is blocking scripts</a> as defined in the previous paragraph.
  </div>

<h3 id="sections">Sections</h3>
<h4 id="the-body-element">The <dfn><code>body</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Sectioning root</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As the second element in an <code>html</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>onafterprint</code></dd>
    <dd><code>onbeforeprint</code></dd>
    <dd><code>onbeforeunload</code></dd>
    <dd><code>onhashchange</code></dd>
    <dd><code>onlanguagechange</code></dd>
    <dd><code>onmessage</code></dd>
    <dd><code>onoffline</code></dd>
    <dd><code>ononline</code></dd>
    <dd><code>onpagehide</code></dd>
    <dd><code>onpageshow</code></dd>
    <dd><code>onpopstate</code></dd>
    <dd><code>onstorage</code></dd>
    <dd><code>onunload</code></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      A <code>body</code> element's <a>start tag</a> may be omitted if the element is empty, or if
      the first thing inside the <code>body</code> element is not a <a>space character</a> or a
      <a>comment</a>, except if the first thing inside the <code>body</code> element is a
      <code>meta</code>, <code>link</code>, <code>script</code>, <code>style</code>, or
      <code>template</code> element.</dd>
    <dd>
      A <code>body</code> element's <a>end tag</a> may be omitted if the <code>body</code> element
      is not immediately followed by a <a>comment</a>.
    </dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>document</code></a> role (default - <a><em>do not set</em></a>),
      <a><code>application</code></a>.
    </dd>
    <dt>Allowed <a>ARIA State and Property Attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLBodyElement : HTMLElement {
        };
        HTMLBodyElement implements WindowEventHandlers;
      </pre>
    </dd>
  </dl>

  The <code>body</code> element <a>represents</a> the content of the document.

  In conforming documents, there is only one <code>body</code> element. The
  <code>document.body</code> IDL attribute provides scripts with easy access to a document's
  <code>body</code> element.

  <p class="note">
    Some DOM operations (for example, parts of the <a>drag and drop</a> model) are defined in terms
    of "<a>the body element</a>". This refers to a particular element in the DOM, as per the
    definition of the term, and not any arbitrary <code>body</code> element.
  </p>

  The <code>body</code> element exposes as <a>event handler content attributes</a> a number of the
  <a>event handlers</a> of the <code>Window</code> object. It also mirrors their
  <a>event handler IDL attributes</a>.

  The <code>onblur</code>, <code>onerror</code>, <code>onfocus</code>, <code>onload</code>,
  <code>onresize</code>, and <code>onscroll</code> <a>event handlers</a> of the <code>Window</code>
  object, exposed on the <code>body</code> element, replace the generic <a>event handlers</a> with
  the same names normally supported by <a>HTML elements</a>.

  <p class="example">
    Thus, for example, a bubbling <code>error</code> event dispatched on a child of
    <a>the body element</a> of a <code>Document</code> would first trigger the <code>onerror</code>
    <a>event handler content attributes</a> of that element, then that of the root <code>html</code>
    element, and only <em>then</em> would it trigger the <code>onerror</code> <a>event handler
    content attribute</a> on the <code>body</code> element. This is because the event would bubble
    from the target, to the <code>body</code>, to the <code>html</code>, to the
    <code>Document</code>, to the <code>Window</code>, and the <a>event handler</a> on the
    <code>body</code> is watching the <code>Window</code> not the <code>body</code>. A regular event
    listener attached to the <code>body</code> using <code>addEventListener()</code>, however, would
    be run when the event bubbled through the <code>body</code> and not when it reaches the
    <code>Window</code> object.
  </p>

  <div class="example">
    This page updates an indicator to show whether or not the user is online:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;html&gt;
        &lt;head&gt;
          &lt;title&gt;Online or offline?&lt;/title&gt;
          &lt;script&gt;
            function update(online) {
              document.getElementById('status').textContent =
              online ? 'Online' : 'Offline';
            }
          &lt;/script&gt;
        &lt;/head&gt;
        &lt;body ononline="update(true)"
          onoffline="update(false)"
          onload="update(navigator.onLine)"&gt;
          &lt;p&gt;You are: &lt;span id="status"&gt;(Unknown)&lt;/span&gt;&lt;/p&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>
  </div>

<h4 id="the-article-element">The <dfn><code>article</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>, but with no <code>main</code> element descendants.</dd>
    <dd><a>Sectioning content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>article</code></a> (default - <a><em>do not set</em></a>),
      <a><code>application</code></a>, <a><code>document</code></a> or <a><code>main</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>article</code> element <a>represents</a> a complete, or self-contained, composition in a
  document, page, application, or site and that is, in principle, independently distributable or
  reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog
  entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of
  content. Each <code>article</code> should be identified, typically by including a heading
  (<code>h1</code>-<code>h6</code> element) as a child of the <code>article</code> element.

  A general rule is that the <code>article</code> element is appropriate only if the element's
  contents would be listed explicitly in the document's outline.

  When <code>article</code> elements are nested, the inner <code>article</code> elements represent
  articles that are in principle related to the contents of the outer article. For instance, a blog
  entry on a site that accepts user-submitted comments could represent the comments as
  <code>article</code> elements nested within the <code>article</code> element for the blog entry.

  Author information associated with an <code>article</code> element (q.v. the <code>address</code>
  element) does not apply to nested <code>article</code> elements.

  <p class="note">
    When used specifically with content to be redistributed in syndication, the <code>article</code>
    element is similar in purpose to the <code>entry</code> element in Atom. [[!RFC4287]]
  </p>
  <p class="note">
    The schema.org microdata vocabulary can be used to provide the publication date for an
    <code>article</code> element, using one of the CreativeWork subtypes.
  </p>

  When the main content of the page (i.e. excluding footers, headers, navigation blocks, and
  sidebars) is all one single self-contained composition, that content may be marked with an
  <code>article</code>, but it is technically redundant in that case (since it's self-evident that
  the page is a single composition, as it is a single document).

  <div class="example">
    This example shows a blog post using the <code>article</code> element, with some schema.org
    annotations:

    <pre highlight="html">
      &lt;article itemscope itemtype="http://schema.org/BlogPosting"&gt;
        &lt;header&gt;
          &lt;h2 itemprop="headline"&gt;The Very First Rule of Life&lt;/h2&gt;
          &lt;p&gt;&lt;time itemprop="datePublished" datetime="2009-10-09"&gt;3 days ago&lt;/time&gt;&lt;/p&gt;
          &lt;link itemprop="url" href="?comments=0"&gt;
        &lt;/header&gt;
        &lt;p&gt;If there's a microphone anywhere near you, assume it's hot and
        sending whatever you're saying to the world. Seriously.&lt;/p&gt;
        &lt;p&gt;<em>...</em>&lt;/p&gt;
        &lt;footer&gt;
          &lt;a itemprop="discussionUrl" href="?comments=1"&gt;Show comments...&lt;/a&gt;
        &lt;/footer&gt;
      &lt;/article&gt;
    </pre>

    Here is that same blog post, but showing some of the comments:

    <pre highlight="html">
      &lt;article itemscope itemtype="http://schema.org/BlogPosting"&gt;
        &lt;header&gt;
          &lt;h2 itemprop="headline"&gt;The Very First Rule of Life&lt;/h2&gt;
          &lt;p&gt;&lt;time itemprop="datePublished" datetime="2009-10-09"&gt;3 days ago&lt;/time&gt;&lt;/p&gt;
          &lt;link itemprop="url" href="?comments=0"&gt;
        &lt;/header&gt;
        &lt;p&gt;If there's a microphone anywhere near you, assume it's hot and
        sending whatever you're saying to the world. Seriously.&lt;/p&gt;
        &lt;p&gt;<em>...</em>&lt;/p&gt;
        &lt;section&gt;
          &lt;h2&gt;Comments&lt;/h2&gt;
          &lt;article itemprop="comment" itemscope itemtype="http://schema.org/UserComments" id="c1"&gt;
            &lt;link itemprop="url" href="#c1"&gt;
            &lt;footer&gt;
              &lt;p&gt;Posted by: &lt;span itemprop="creator" itemscope itemtype="http://schema.org/Person"&gt;
              &lt;span itemprop="name"&gt;George Washington&lt;/span&gt;
              &lt;/span&gt;&lt;/p&gt;
              &lt;p&gt;&lt;time itemprop="commentTime" datetime="2009-10-10"&gt;15 minutes ago&lt;/time&gt;&lt;/p&gt;
            &lt;/footer&gt;
            &lt;p&gt;Yeah! Especially when talking about your lobbyist friends!&lt;/p&gt;
          &lt;/article&gt;
          &lt;article itemprop="comment" itemscope itemtype="http://schema.org/UserComments" id="c2"&gt;
            &lt;link itemprop="url" href="#c2"&gt;
            &lt;footer&gt;
              &lt;p&gt;Posted by: &lt;span itemprop="creator" itemscope itemtype="http://schema.org/Person"&gt;
              &lt;span itemprop="name"&gt;George Hammond&lt;/span&gt;
              &lt;/span&gt;&lt;/p&gt;
              &lt;p&gt;&lt;time itemprop="commentTime" datetime="2009-10-10"&gt;5 minutes ago&lt;/time&gt;&lt;/p&gt;
            &lt;/footer&gt;
            &lt;p&gt;Hey, you have the same first name as me.&lt;/p&gt;
          &lt;/article&gt;
        &lt;/section&gt;
      &lt;/article&gt;
    </pre>

    Notice the use of <code>footer</code> to give the information for each comment (such as who
    wrote it and when): the <code>footer</code> element <em>can</em> appear at the start of its
    section when appropriate, such as in this case. (Using <code>header</code> in this case wouldn't
    be wrong either; it's mostly a matter of authoring preference.)

  </div>

<h4 id="the-section-element">The <dfn><code>section</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>region</code></a> role (default - <a><em>do not set</em></a>),
      <a><code>alert</code></a>, <a><code>alertdialog</code></a>, <a><code>application</code></a>,
      <a><code>contentinfo</code></a>, <a><code>dialog</code></a>, <a><code>document</code></a>,
      <a><code>log</code></a>, <a><code>main</code></a>, <a><code>marquee</code></a>,
      <a><code>presentation</code></a>, <a><code>search</code></a> or <a><code>status</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>section</code> element <a>represents</a> a generic section of a document or application.
  A section, in this context, is a thematic grouping of content. Each <code>section</code> should be
  identified, typically by including a heading (<code>h1</code>-<code>h6</code> element) as a child
  of the <code>section</code> element.

  <p class="example">
    Examples of sections would be chapters, the various tabbed pages in a tabbed dialog box, or the
    numbered sections of a thesis. A Web site's home page could be split into sections for an
    introduction, news items, and contact information.
  </p>

  <p class="note">
    Authors are encouraged to use the <code>article</code> element instead of the
    <code>section</code> element when it would make sense to syndicate the contents of the element.
  </p>

  <p class="note">
    The <code>section</code> element is not a generic container element. When an element is needed
    only for styling purposes or as a convenience for scripting, authors are encouraged to use the
    <code>div</code> element instead. A general rule is that the <code>section</code> element is
    appropriate only if the element's contents would be listed explicitly in the document's
    <a>outline</a>.
  </p>

  <div class="example">
    In the following example, we see an article (part of a larger Web page) about apples,
    containing two short sections.

    <pre highlight="html">
      &lt;article&gt;
        &lt;header&gt;
          &lt;h2&gt;Apples&lt;/h2&gt;
          &lt;p&gt;Tasty, delicious fruit!&lt;/p&gt;
        &lt;/header&gt;
        &lt;p&gt;The apple is the pomaceous fruit of the apple tree.&lt;/p&gt;
        &lt;section&gt;
          &lt;h3&gt;Red Delicious&lt;/h3&gt;
          &lt;p&gt;These bright red apples are the most common found in many
          supermarkets.&lt;/p&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h3&gt;Granny Smith&lt;/h3&gt;
          &lt;p&gt;These juicy, green apples make a great filling for
          apple pies.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/article&gt;
    </pre>
  </div>

  <div class="example">
    Here is a graduation program with two sections, one for the list of people graduating, and
    one for the description of the ceremony. (The markup in this example features an uncommon style
    sometimes used to minimize the amount of <a>inter-element whitespace</a>.)

    <pre highlight="html">
      &lt;!DOCTYPE Html&gt;
      &lt;html
        &gt;&lt;head
          &gt;&lt;title
            &gt;Graduation Ceremony Summer 2022&lt;/title
          &gt;&lt;/head
        &gt;&lt;body
          &gt;&lt;h1
            &gt;Graduation&lt;/h1
          &gt;&lt;section
            &gt;&lt;h2
              &gt;Ceremony&lt;/h2
            &gt;&lt;p
              &gt;Opening Procession&lt;/p
            &gt;&lt;p
              &gt;Speech by Validactorian&lt;/p
            &gt;&lt;p
              &gt;Speech by Class President&lt;/p
            &gt;&lt;p
              &gt;Presentation of Diplomas&lt;/p
            &gt;&lt;p
              &gt;Closing Speech by Headmaster&lt;/p
          &gt;&lt;/section
          &gt;&lt;section
            &gt;&lt;h2
              &gt;Graduates&lt;/h2
            &gt;&lt;ul
              &gt;&lt;li
                &gt;Molly Carpenter&lt;/li
              &gt;&lt;li
                &gt;Anastasia Luccio&lt;/li
              &gt;&lt;li
                &gt;Ebenezar McCoy&lt;/li
              &gt;&lt;li
                &gt;Karrin Murphy&lt;/li
              &gt;&lt;li
                &gt;Thomas Raith&lt;/li
              &gt;&lt;li
                &gt;Susan Rodriguez&lt;/li
            &gt;&lt;/ul
          &gt;&lt;/section
        &gt;&lt;/body
      &gt;&lt;/html&gt;
    </pre>
  </div>

  <div class="example">
    In this example, a book author has marked up some sections as chapters and some as appendices,
    and uses CSS to style the headers in these two classes of section differently. The whole book is
    wrapped in an <code>article</code> element as part of an even larger document containing other
    books.

    <pre highlight="html">
      &lt;article class="book"&gt;
        &lt;style&gt;
          section { border: double medium; margin: 2em; }
          section.chapter h1 { font: 2em Roboto, Helvetica Neue, sans-serif; }
          section.appendix h1 { font: small-caps 2em Roboto, Helvetica Neue, sans-serif; }
        &lt;/style&gt;
        &lt;header&gt;
          &lt;h2&gt;My Book&lt;/h2&gt;
          &lt;p&gt;A sample with not much content&lt;/p&gt;
          &lt;p&gt;&lt;small&gt;Published by Dummy Publicorp Ltd.&lt;/small&gt;&lt;/p&gt;
        &lt;/header&gt;

        &lt;section class="chapter"&gt;
          &lt;h3&gt;My First Chapter&lt;/h3&gt;
          &lt;p&gt;This is the first of my chapters. It doesn't say much.&lt;/p&gt;
          &lt;p&gt;But it has two paragraphs!&lt;/p&gt;
        &lt;/section&gt;
        &lt;section class="chapter"&gt;
          &lt;h3&gt;It Continutes: The Second Chapter&lt;/h3&gt;
          &lt;p&gt;Bla dee bla, dee bla dee bla. Boom.&lt;/p&gt;
        &lt;/section&gt;
        &lt;section class="chapter"&gt;
          &lt;h3&gt;Chapter Three: A Further Example&lt;/h3&gt;
          &lt;p&gt;It's not like a battle between brightness and earthtones would go
          unnoticed.&lt;/p&gt;
          &lt;p&gt;But it might ruin my story.&lt;/p&gt;
        &lt;/section&gt;
        &lt;section class="appendix"&gt;
          &lt;h3&gt;Appendix A: Overview of Examples&lt;/h3&gt;
          &lt;p&gt;These are demonstrations.&lt;/p&gt;
        &lt;/section&gt;
        &lt;section class="appendix"&gt;
          &lt;h3&gt;Appendix B: Some Closing Remarks&lt;/h3&gt;
          &lt;p&gt;Hopefully this long example shows that you &lt;em&gt;can&lt;/em&gt; style
          sections, so long as they are used to indicate actual sections.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/article&gt;
    </pre>

  </div>

<h4 id="the-nav-element">The <dfn><code>nav</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>, but with no <code>main</code> element descendants.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>navigation</code></a> role (default - <a><em>do not set</em></a>) or
      <a><code>presentation</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>nav</code> element <a>represents</a> a section of a page that links to other pages or to
  parts within the page: a section with navigation links.

  <p class="note">
    In cases where the content of a <code>nav</code> element represents a list of items, use list
    markup to aid understanding and navigation.
  </p>

  <p class="note">
    Not all groups of links on a page need to be in a <code>nav</code> element â the element is
    primarily intended for sections that consist of major navigation blocks. In particular, it is
    common for footers to have a short list of links to various pages of a site, such as the terms
    of service, the home page, and a copyright page. The <code>footer</code> element alone is
    sufficient for such cases; while a <code>nav</code> element can be used in such cases, it is
    usually unnecessary.
  </p>

  <p class="note">
    User agents (such as screen readers) that are targeted at users who can benefit from navigation
    information being omitted in the initial rendering, or who can benefit from navigation
    information being immediately available, can use this element as a way to determine what content
    on the page to initially skip or provide on request (or both).
  </p>

  <div class="example">
    In the following example, there are two <code>nav</code> elements, one for primary navigation
    around the site, and one for secondary navigation around the page itself.

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;The Wiki Center Of Exampland&lt;/h1&gt;
        &lt;nav&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="/events"&gt;Current Events&lt;/a&gt;&lt;/li&gt;
            <em>...more...</em>
          &lt;/ul&gt;
        &lt;/nav&gt;
        &lt;article&gt;
          &lt;header&gt;
            &lt;h2&gt;Demos in Exampland&lt;/h2&gt;
            &lt;p&gt;Written by A. N. Other.&lt;/p&gt;
          &lt;/header&gt;
          &lt;nav&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#public"&gt;Public demonstrations&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#destroy"&gt;Demolitions&lt;/a&gt;&lt;/li&gt;
              <em>...more...</em>
            &lt;/ul&gt;
          &lt;/nav&gt;
          &lt;div&gt;
            &lt;section id="public"&gt;
              &lt;h2&gt;Public demonstrations&lt;/h2&gt;
              &lt;p&gt;<em>...more...</em>&lt;/p&gt;
            &lt;/section&gt;
            &lt;section id="destroy"&gt;
              &lt;h2&gt;Demolitions&lt;/h2&gt;
              &lt;p&gt;<em>...more...</em>&lt;/p&gt;
            &lt;/section&gt;
            <em>...more...</em>
          &lt;/div&gt;
          &lt;footer&gt;
            &lt;p&gt;&lt;a href="?edit"&gt;Edit&lt;/a&gt; | &lt;a href="?delete"&gt;Delete&lt;/a&gt; | &lt;a href="?Rename"&gt;Rename&lt;/a&gt;&lt;/p&gt;
          &lt;/footer&gt;
        &lt;/article&gt;
        &lt;footer&gt;
          &lt;p&gt;&lt;small&gt;Â© copyright 1998 Exampland Emperor&lt;/small&gt;&lt;/p&gt;
        &lt;/footer&gt;
      &lt;/body&gt;
    </pre>
  </div>

  <div class="example">
    In the following example, the page has several places where links are present, but only one of
    those places is considered a navigation section.

    <pre highlight="html">
      &lt;body itemscope itemtype="http://schema.org/Blog"&gt;
        &lt;header&gt;
          &lt;h1&gt;Wake up sheeple!&lt;/h1&gt;
          &lt;p&gt;&lt;a href="news.html"&gt;News&lt;/a&gt; -
          &lt;a href="blog.html"&gt;Blog&lt;/a&gt; -
          &lt;a href="forums.html"&gt;Forums&lt;/a&gt;&lt;/p&gt;
          &lt;p&gt;Last Modified: &lt;span itemprop="dateModified"&gt;2009-04-01&lt;/span&gt;&lt;/p&gt;
          &lt;nav&gt;
            &lt;h2&gt;Navigation&lt;/h2&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="articles.html"&gt;Index of all articles&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="today.html"&gt;Things sheeple need to wake up for today&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="successes.html"&gt;Sheeple we have managed to wake&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/nav&gt;
        &lt;/header&gt;
        &lt;main&gt;
          &lt;article itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting"&gt;
            &lt;header&gt;
              &lt;h2 itemprop="headline"&gt;My Day at the Beach&lt;/h2&gt;
            &lt;/header&gt;
            &lt;main itemprop="articleBody"&gt;
              &lt;p&gt;Today I went to the beach and had a lot of fun.&lt;/p&gt;
              <em>...more content...</em>
            &lt;/main&gt;
            &lt;footer&gt;
              &lt;p&gt;Posted &lt;time itemprop="datePublished" datetime="2009-10-10"&gt;Thursday&lt;/time&gt;.&lt;/p&gt;
            &lt;/footer&gt;
          &lt;/article&gt;
          <em>...more blog posts...</em>
        &lt;/main&gt;
        &lt;footer&gt;
          &lt;p&gt;Copyright Â©
            &lt;span itemprop="copyrightYear"&gt;2010&lt;/span&gt;
            &lt;span itemprop="copyrightHolder"&gt;The Example Company&lt;/span&gt;
          &lt;/p&gt;
          &lt;p&gt;&lt;a href="about.html"&gt;About&lt;/a&gt; -
            &lt;a href="policy.html"&gt;Privacy Policy&lt;/a&gt; -
            &lt;a href="contact.html"&gt;Contact Us&lt;/a&gt;&lt;/p&gt;
        &lt;/footer&gt;
      &lt;/body&gt;
    </pre>

    Notice the <code>main</code> element being used to wrap the main content of the page. In this
    case, all content other than the page header and footer.

    You can also see microdata annotations in the above example that use the schema.org vocabulary
    to provide the publication date and other metadata about the blog post.
  </div>

  <div class="example">
    A <code>nav</code> element doesn't have to contain a list, it can contain other kinds of content
    as well. In this navigation block, links are provided in prose:

    <pre highlight="html">
      &lt;nav&gt;
        &lt;h2&gt;Navigation&lt;/h2&gt;
        &lt;p&gt;You are on my home page. To the north lies &lt;a href="/blog"&gt;my
        blog&lt;/a&gt;, from whence the sounds of battle can be heard. To the east
        you can see a large mountain, upon which many &lt;a
        href="/school"&gt;school papers&lt;/a&gt; are littered. Far up thus mountain
        you can spy a little figure who appears to be me, desperately
        scribbling a &lt;a href="/school/thesis"&gt;thesis&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;To the west are several exits. One fun-looking exit is labeled &lt;a
        href="http://games.example.com/"&gt;"games"&lt;/a&gt;. Another more
        boring-looking exit is labeled &lt;a
        href="http://isp.example.net/"&gt;ISPâ¢&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;To the south lies a dark and dank &lt;a href="/about"&gt;contacts
        page&lt;/a&gt;. Cobwebs cover its disused entrance, and at one point you
        see a rat run quickly out of the page.&lt;/p&gt;
      &lt;/nav&gt;
    </pre>

  </div>

  <div class="example">
    In this example, <code>nav</code> is used in an e-mail application, to let the user switch
    folders:

    <pre highlight="html">
      &lt;p&gt;&lt;input type=button value="Compose" onclick="compose()"&gt;&lt;/p&gt;
      &lt;nav&gt;
        &lt;h2&gt;Folders&lt;/h2&gt;
        &lt;ul&gt;
          &lt;li&gt; &lt;a href="/inbox" onclick="return openFolder(this.href)"&gt;Inbox&lt;/a&gt; &lt;span class=count&gt;&lt;/span&gt;
          &lt;li&gt; &lt;a href="/sent" onclick="return openFolder(this.href)"&gt;Sent&lt;/a&gt;
          &lt;li&gt; &lt;a href="/drafts" onclick="return openFolder(this.href)"&gt;Drafts&lt;/a&gt;
          &lt;li&gt; &lt;a href="/trash" onclick="return openFolder(this.href)"&gt;Trash&lt;/a&gt;
          &lt;li&gt; &lt;a href="/customers" onclick="return openFolder(this.href)"&gt;Customers&lt;/a&gt;
        &lt;/ul&gt;
      &lt;/nav&gt;
    </pre>

  </div>

<h4 id="the-aside-element">The <dfn><code>aside</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>, but with no <code>main</code> element descendants.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>complementary</code></a> role (default - <a><em>do not set</em></a>),
      <a><code>note</code></a>, <a><code>search</code></a> or <a><code>presentation</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>aside</code> element <a>represents</a> a section of a page that consists of content that
  is tangentially related to the content around the <code>aside</code> element, and which could be
  considered separate from that content. Such sections are often represented as sidebars in printed
  typography.

  The element can be used for typographical effects like pull quotes or sidebars, for advertising,
  for groups of <code>nav</code> elements, and for other content that is considered separate from
  the main content of the page.

  <p class="note">
    It's not appropriate to use the <code>aside</code> element just for parentheticals, since those
    are part of the main flow of the document.
  </p>

  <div class="example">
    The following example shows how an aside is used to mark up background material on Switzerland
    in a much longer news story on Europe.

    <pre highlight="html">
      &lt;aside&gt;
        &lt;h2&gt;Switzerland&lt;/h2&gt;
        &lt;p&gt;Switzerland, a land-locked country in the middle of geographic
        Europe, has not joined the geopolitical European Union, though it is
        a signatory to a number of European treaties.&lt;/p&gt;
      &lt;/aside&gt;
    </pre>
  </div>

  <div class="example">
    The following example shows how an aside is used to mark up a pull quote in a longer article.

    <pre highlight="html">
      ...

      &lt;p&gt;He later joined a large company, continuing on the same work.
      &lt;q&gt;I love my job. People ask me what I do for fun when I'm not at
      work. But I'm paid to do my hobby, so I never know what to
      answer. Some people wonder what they would do if they didn't have to
      work... but I know what I would do, because I was unemployed for a
      year, and I filled that time doing exactly what I do now.&lt;/q&gt;&lt;/p&gt;

      &lt;aside&gt;
        &lt;q&gt; People ask me what I do for fun when I'm not at work. But I'm
        paid to do my hobby, so I never know what to answer. &lt;/q&gt;
      &lt;/aside&gt;

      &lt;p&gt;Of course his work â or should that be hobby? â
      isn't his only passion. He also enjoys other pleasures.&lt;/p&gt;

      ...
    </pre>

  </div>

  <div class="example">
    The following extract shows how <code>aside</code> can be used for blogrolls and other side
    content on a blog:

    <pre highlight="html">
      &lt;body&gt;
        &lt;header&gt;
          &lt;h1&gt;My wonderful blog&lt;/h1&gt;
          &lt;p&gt;My tagline&lt;/p&gt;
        &lt;/header&gt;
        &lt;aside&gt;
          &lt;!-- <em>this aside contains two sections that are tangentially related
          to the page, namely, links to other blogs, and links to blog posts
          from this blog</em> --&gt;
          &lt;nav&gt;
            &lt;h2&gt;My blogroll&lt;/h2&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="http://blog.example.com/"&gt;Example Blog&lt;/a&gt;
            &lt;/ul&gt;
          &lt;/nav&gt;
          &lt;nav&gt;
            &lt;h2&gt;Archives&lt;/h2&gt;
            &lt;ol reversed&gt;
              &lt;li&gt;&lt;a href="/last-post"&gt;My last post&lt;/a&gt;
              &lt;li&gt;&lt;a href="/first-post"&gt;My first post&lt;/a&gt;
            &lt;/ol&gt;
          &lt;/nav&gt;
        &lt;/aside&gt;
        &lt;aside&gt;
          &lt;!-- <em>this aside is tangentially related to the page also, it
          contains twitter messages from the blog author</em> --&gt;
          &lt;h2&gt;Twitter Feed&lt;/h2&gt;
          &lt;blockquote cite="http://twitter.example.net/t31351234"&gt;
            I'm on vacation, writing my blog.
          &lt;/blockquote&gt;
          &lt;blockquote cite="http://twitter.example.net/t31219752"&gt;
            I'm going to go on vacation soon.
          &lt;/blockquote&gt;
        &lt;/aside&gt;
        &lt;article&gt;
          &lt;!-- <em>this is a blog post</em> --&gt;
          &lt;h2&gt;My last post&lt;/h2&gt;
          &lt;p&gt;This is my last post.&lt;/p&gt;
          &lt;footer&gt;
            &lt;p&gt;&lt;a href="/last-post" rel=bookmark&gt;Permalink&lt;/a&gt;
          &lt;/footer&gt;
        &lt;/article&gt;
        &lt;article&gt;
          &lt;!-- <em>this is also a blog post</em> --&gt;
          &lt;h2&gt;My first post&lt;/h2&gt;
          &lt;p&gt;This is my first post.&lt;/p&gt;
          &lt;aside&gt;
            &lt;!-- <em>this aside is about the blog post, since it's inside the
            &lt;article&gt; element; it would be wrong, for instance, to put the
              blogroll here, since the blogroll isn't really related to this post
              specifically, only to the page as a whole</em> --&gt;
              &lt;h1&gt;Posting&lt;/h1&gt;
              &lt;p&gt;While I'm thinking about it, I wanted to say something about
              posting. Posting is fun!&lt;/p&gt;
          &lt;/aside&gt;
          &lt;footer&gt;
            &lt;p&gt;&lt;a href="/first-post" rel=bookmark&gt;Permalink&lt;/a&gt;
          &lt;/footer&gt;
        &lt;/article&gt;
        &lt;footer&gt;
          &lt;nav&gt;
            &lt;a href="/archives"&gt;Archives&lt;/a&gt; â
            &lt;a href="/about"&gt;About me&lt;/a&gt; â
            &lt;a href="/copyright"&gt;Copyright&lt;/a&gt;
          &lt;/nav&gt;
        &lt;/footer&gt;
      &lt;/body&gt;
    </pre>
  </div>

<h4 id="the-h1-h2-h3-h4-h5-and-h6-elements">
  The <dfn><code>h1</code></dfn>, <dfn><code>h2</code></dfn>,
  <dfn><code>h3</code></dfn>, <dfn><code>h4</code></dfn>,
  <dfn><code>h5</code></dfn>, and <dfn><code>h6</code></dfn>
  elements
</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Heading content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>heading</code></a> role (default - <a><em>do not set</em></a>),
      <a><code>tab</code></a> or <a><code>presentation</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
    <pre class="idl" data-highlight="webidl">interface HTMLHeadingElement : HTMLElement {};
</pre>
    </dd>
  </dl>

  These elements <a>represent</a> headings for their sections.

  The semantics and meaning of these elements are defined in the section on
  <a>headings and sections</a>.

  These elements have a <dfn>rank</dfn> given by the number in their name. The <code>h1</code>
  element is said to have the highest rank, the <code>h6</code> element has the lowest rank, and two
  elements with the same name have equal rank.

  <code>h1</code>â<code>h6</code> elements must not be used to markup subheadings, subtitles,
  alternative titles and taglines unless intended to be the heading for a new section or subsection.
  Instead use the markup patterns in the <a>Common idioms without dedicated elements</a> section of
  the specification.

  <div class="example">
    As far as their respective document outlines (their heading and section structures) are
    concerned, these two snippets are semantically equivalent:

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;Let's call it a draw(ing surface)&lt;/h1&gt;
        &lt;h2&gt;Diving in&lt;/h2&gt;
        &lt;h2&gt;Simple shapes&lt;/h2&gt;
        &lt;h2&gt;Canvas coordinates&lt;/h2&gt;
        &lt;h3&gt;Canvas coordinates diagram&lt;/h3&gt;
        &lt;h2&gt;Paths&lt;/h2&gt;
      &lt;/body&gt;
    </pre>

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;Let's call it a draw(ing surface)&lt;/h1&gt;
        &lt;section&gt;
          &lt;h2&gt;Diving in&lt;/h2&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Simple shapes&lt;/h2&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Canvas coordinates&lt;/h2&gt;
          &lt;section&gt;
            &lt;h3&gt;Canvas coordinates diagram&lt;/h3&gt;
          &lt;/section&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Paths&lt;/h2&gt;
        &lt;/section&gt;
      &lt;/body&gt;
    </pre>

    Authors might prefer the former style for its terseness, or the latter style for its convenience
    in the face of heavy editing; which is best is purely an issue of preferred authoring style.

    The two styles can be combined, for compatibility with legacy tools while still future-proofing
    for when that compatibility is no longer needed. This third snippet again has the same outline
    as the previous two:

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;Let's call it a draw(ing surface)&lt;/h1&gt;
        &lt;section&gt;
          &lt;h2&gt;Diving in&lt;/h2&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Simple shapes&lt;/h2&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Canvas coordinates&lt;/h2&gt;
          &lt;section&gt;
            &lt;h3&gt;Canvas coordinates diagram&lt;/h3&gt;
          &lt;/section&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Paths&lt;/h2&gt;
        &lt;/section&gt;
      &lt;/body&gt;
    </pre>
  </div>

<h4 id="the-header-element">The <dfn><code>header</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>
      <a>Flow content</a>, but with no <code>header</code>, <code>footer</code>, or
      <code>main</code> element descendants.
    </dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>banner</code></a> role (default - <a><em>do not set</em></a>) or
      <a><code>presentation</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>header</code> element <a>represents</a> introductory content for its nearest ancestor
  <a>sectioning content</a> or <a>sectioning root</a> element. A <code>header</code> typically
  contains a group of introductory or navigational aids.

  When the nearest ancestor <a>sectioning content</a> or <a>sectioning root</a> element is
  <a>the body element</a>, then it applies to the whole page.

  <p class="note">
    A <code>header</code> element is intended to usually contain the section's heading (an
    <code>h1</code>â<code>h6</code> element), but this is not required. The <code>header</code>
    element can also be used to wrap a section's table of contents, a search form, or any relevant
    logos.
  </p>

  <div class="example">
    Here are some sample headers. This first one is for a game:

    <pre highlight="html">
      &lt;header&gt;
        &lt;p&gt;Welcome to...&lt;/p&gt;
        &lt;h1&gt;Voidwars!&lt;/h1&gt;
      &lt;/header&gt;
    </pre>

    The following snippet shows how the element can be used to mark
    up a specification's header:

    <pre highlight="html">
      &lt;header&gt;
        &lt;h1&gt;Scalable Vector Graphics (SVG) 1.2&lt;/h1&gt;
        &lt;p&gt;W3C Working Draft 27 October 2004&lt;/p&gt;
        &lt;dl&gt;
          &lt;dt&gt;This version:&lt;/dt&gt;
          &lt;dd&gt;&lt;a href="http://www.w3.org/TR/2004/WD-SVG12-20041027/"&gt;http://www.w3.org/TR/2004/WD-SVG12-20041027/&lt;/a&gt;&lt;/dd&gt;
          &lt;dt&gt;Previous version:&lt;/dt&gt;
          &lt;dd&gt;&lt;a href="http://www.w3.org/TR/2004/WD-SVG12-20040510/"&gt;http://www.w3.org/TR/2004/WD-SVG12-20040510/&lt;/a&gt;&lt;/dd&gt;
          &lt;dt&gt;Latest version of SVG 1.2:&lt;/dt&gt;
          &lt;dd&gt;&lt;a href="http://www.w3.org/TR/SVG12/"&gt;http://www.w3.org/TR/SVG12/&lt;/a&gt;&lt;/dd&gt;
          &lt;dt&gt;Latest SVG Recommendation:&lt;/dt&gt;
          &lt;dd&gt;&lt;a href="http://www.w3.org/TR/SVG/"&gt;http://www.w3.org/TR/SVG/&lt;/a&gt;&lt;/dd&gt;
          &lt;dt&gt;Editor:&lt;/dt&gt;
          &lt;dd&gt;Dean Jackson, W3C, &lt;a href="mailto:dean@w3.org"&gt;dean@w3.org&lt;/a&gt;&lt;/dd&gt;
          &lt;dt&gt;Authors:&lt;/dt&gt;
          &lt;dd&gt;See &lt;a href="#authors"&gt;Author List&lt;/a&gt;&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;p class="copyright"&gt;&lt;a href="http://www.w3.org/Consortium/Legal/ipr-notic <em>...</em>
      &lt;/header&gt;
    </pre>

  </div>

  <p class="note">
    The <code>header</code> element is not <a>sectioning content</a>; it doesn't introduce a new
    section.
  </p>

  <div class="example">
  In this example, the page has a page heading given by the <code>h1</code> element, and two
  subsections whose headings are given by <code>h2</code> elements. The content after the
  <code>header</code> element is still part of the last subsection started in the
  <code>header</code> element, because the <code>header</code> element doesn't take part in the
  <a>outline</a> algorithm.

  <pre highlight="html">
    &lt;body&gt;
      &lt;header&gt;
        &lt;h1&gt;Little Green Guys With Guns&lt;/h1&gt;
        &lt;nav&gt;
          &lt;ul&gt;
          &lt;li&gt;&lt;a href="/games"&gt;Games&lt;/a&gt;
          &lt;li&gt;&lt;a href="/forum"&gt;Forum&lt;/a&gt;
          &lt;li&gt;&lt;a href="/download"&gt;Download&lt;/a&gt;
          &lt;/ul&gt;
        &lt;/nav&gt;
        &lt;h2&gt;Important News&lt;/h2&gt; &lt;!-- this starts a second subsection --&gt;
        &lt;!-- this is part of the subsection entitled "Important News" --&gt;
        &lt;p&gt;To play today's games you will need to update your client.&lt;/p&gt;
        &lt;h2&gt;Games&lt;/h2&gt; &lt;!-- this starts a third subsection --&gt;
        &lt;/header&gt;
        &lt;p&gt;You have three active games:&lt;/p&gt;
        &lt;!-- this is still part of the subsection entitled "Games" --&gt;
        ...
  </pre>
  </div>

<h4 id="the-footer-element">The <dfn><code>footer</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>
      <a>Flow content</a>, but with no <code>header</code>, <code>footer</code>, or
      <code>main</code> element descendants.
    </dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>contentinfo</code></a> role (default - <a><em>do not set</em></a>) or
      <a><code>presentation</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>footer</code> element <a>represents</a> a footer for its nearest ancestor
  <a>sectioning content</a> or <a>sectioning root</a> element. A footer typically contains
  information about its section such as who wrote it, links to related documents, copyright data,
  and the like.

  When the <code>footer</code> element contains entire sections, they <a>represent</a> appendices,
  indexes, long colophons, verbose license agreements, and other such content.

  <p class="note">
    Contact information for the author or editor of a section belongs in an <code>address</code>
    element, possibly itself inside a <code>footer</code>. Bylines and other information that could
    be suitable for both a <code>header</code> or a <code>footer</code> can be placed in either (or
    neither). The primary purpose of these elements is merely to help the author write
    self-explanatory markup that is easy to maintain and style; they are not intended to impose
    specific structures on authors.
  </p>

  Footers don't necessarily have to appear at the <em>end</em> of a section, though they usually do.

  When the nearest ancestor <a>sectioning content</a> or <a>sectioning root</a> element is <a>the
  body element</a>, then it applies to the whole page.

  <p class="note">
    The <code>footer</code> element is not <a>sectioning content</a>; it doesn't introduce a new
    section.
  </p>

  <div class="example">
    Here is a page with two footers, one at the top and one at the bottom, with the same content:

    <pre highlight="html">
      &lt;body&gt;
        &lt;footer&gt;&lt;a href="../"&gt;Back to index...&lt;/a&gt;&lt;/footer&gt;
        &lt;div&gt;
          &lt;h1&gt;Lorem ipsum&lt;/h1&gt;
          &lt;p&gt;The ipsum of all lorems&lt;/p&gt;
        &lt;/div&gt;
        &lt;p&gt;A dolor sit amet, consectetur adipisicing elit, sed do eiusmod
        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex
        ea commodo consequat. Duis aute irure dolor in reprehenderit in
        voluptate velit esse cillum dolore eu fugiat nulla
        pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
        culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
        &lt;footer&gt;&lt;a href="../"&gt;Back to index...&lt;/a&gt;&lt;/footer&gt;
      &lt;/body&gt;
    </pre>
  </div>

  <div class="example">
    Here is an example which shows the <code>footer</code> element being used both for a site-wide
    footer and for a section footer.

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;HTML&gt;&lt;HEAD&gt;
      &lt;TITLE&gt;The Ramblings of a Scientist&lt;/TITLE&gt;
      &lt;BODY&gt;
      &lt;h1&gt;The Ramblings of a Scientist&lt;/h1&gt;
      &lt;MAIN&gt;
        &lt;ARTICLE&gt;
        &lt;H2&gt;Episode 15&lt;/H2&gt;
        &lt;VIDEO SRC="/fm/015.ogv" CONTROLS PRELOAD&gt;
        &lt;P&gt;&lt;A HREF="/fm/015.ogv"&gt;Download video&lt;/A&gt;.&lt;/P&gt;
        &lt;/VIDEO&gt;
        &lt;FOOTER&gt; &lt;!-- footer for article --&gt;
        &lt;P&gt;Published &lt;TIME DATETIME="2009-10-21T18:26-07:00"&gt;on 2009/10/21 at 6:26pm&lt;/TIME&gt;&lt;/P&gt;
        &lt;/FOOTER&gt;
      &lt;/ARTICLE&gt;
      &lt;ARTICLE&gt;
        &lt;H2&gt;My Favorite Trains&lt;/H2&gt;
        &lt;P&gt;I love my trains. My favorite train of all time is a KÃ¶f.&lt;/P&gt;
        &lt;P&gt;It is fun to see them pull some coal cars because they look so
        dwarfed in comparison.&lt;/P&gt;
        &lt;FOOTER&gt; &lt;!-- footer for article --&gt;
        &lt;P&gt;Published &lt;TIME DATETIME="2009-09-15T14:54-07:00"&gt;on 2009/09/15 at 2:54pm&lt;/TIME&gt;&lt;/P&gt;
        &lt;/FOOTER&gt;
        &lt;/ARTICLE&gt;
      &lt;/MAIN&gt;
      &lt;FOOTER&gt; &lt;!-- site wide footer --&gt;
        &lt;NAV&gt;
        &lt;P&gt;&lt;A HREF="/credits.html"&gt;Credits&lt;/A&gt; â
            &lt;A HREF="/tos.html"&gt;Terms of Service&lt;/A&gt; â
            &lt;A HREF="/index.html"&gt;Blog Index&lt;/A&gt;&lt;/P&gt;
        &lt;/NAV&gt;
        &lt;P&gt;Copyright Â© 2009 Gordon Freeman&lt;/P&gt;
      &lt;/FOOTER&gt;
      &lt;/BODY&gt;
      &lt;/HTML&gt;
    </pre>
  </div>

  <div class="example">
    Some site designs have what is sometimes referred to as "fat footers" â footers that contain a
    lot of material, including images, links to other articles, links to pages for sending feedback,
    special offers... in some ways, a whole "front page" in the footer.

    This fragment shows the bottom of a page on a site with a "fat footer":

    <pre highlight="html">
      ...
        &lt;footer&gt;
          &lt;nav&gt;
            &lt;section&gt;
              &lt;h2&gt;Articles&lt;/h2&gt;
              &lt;p&gt;&lt;img src="images/somersaults.jpeg" alt=""&gt; Go to the gym with
              our somersaults class! Our teacher Jim takes you through the paces
              in this two-part article. &lt;a href="articles/somersaults/1"&gt;Part
              1&lt;/a&gt; Â· &lt;a href="articles/somersaults/2"&gt;Part 2&lt;/a&gt;&lt;/p&gt;
              &lt;p&gt;&lt;img src="images/kindplus.jpeg"&gt; Tired of walking on the edge of
              a clif&lt;!-- sic --&gt;? Our guest writer Lara shows you how to bumble
              your way through the bars. &lt;a href="articles/kindplus/1"&gt;Read
              more...&lt;/a&gt;&lt;/p&gt;
              &lt;p&gt;&lt;img src="images/crisps.jpeg"&gt; The chips are down, now all
              that's left is a potato. What can you do with it? &lt;a
              href="articles/crisps/1"&gt;Read more...&lt;/a&gt;&lt;/p&gt;
            &lt;/section&gt;
            &lt;ul&gt;
              &lt;li&gt; &lt;a href="/about"&gt;About us...&lt;/a&gt;
              &lt;li&gt; &lt;a href="/feedback"&gt;Send feedback!&lt;/a&gt;
              &lt;li&gt; &lt;a href="/sitemap"&gt;Sitemap&lt;/a&gt;
            &lt;/ul&gt;
          &lt;/nav&gt;
          &lt;p&gt;&lt;small&gt;Copyright Â© 2015 The Snacker â
          &lt;a href="/tos"&gt;Terms of Service&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        &lt;/footer&gt;
      &lt;/body&gt;
    </pre>
  </div>

<h4 id="the-address-element">The <dfn><code>address</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>, but with no <a>heading
    content</a> descendants, no <a>sectioning content</a>
    descendants, and no <code>header</code>, <code>footer</code>, or
    <code>address</code> element descendants.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>contentinfo</code></a> role.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>address</code> element <a>represents</a> the contact information for its nearest
    <code>article</code> or <code>body</code> element ancestor. If that is <a>the body element</a>,
    then the contact information applies to the document as a whole.

  <div class="example">
    For example, a page at the W3C Web site related to HTML might include the following contact
    information:

    <pre highlight="html">
      &lt;ADDRESS&gt;
        &lt;A href="../People/Raggett/"&gt;Dave Raggett&lt;/A&gt;,
        &lt;A href="../People/Arnaud/"&gt;Arnaud Le Hors&lt;/A&gt;,
        contact persons for the &lt;A href="Activity"&gt;W3C HTML Activity&lt;/A&gt;
      &lt;/ADDRESS&gt;
    </pre>
  </div>

  The <code>address</code> element must not be used to represent arbitrary addresses (e.g. postal
  addresses), unless those addresses are in fact the relevant contact information. (The
  <code>p</code> element is the appropriate element for marking up postal addresses in general.)

  The <code>address</code> element must not contain information other than contact information.

  <div class="example">
    For example, the following is non-conforming use of the <code>address</code> element:

    <pre class="bad" highlight="html">&lt;ADDRESS&gt;Last Modified: 1999/12/24 23:37:50&lt;/ADDRESS&gt;</pre>
  </div>

  Typically, the <code>address</code> element would be included along with other information in a
  <code>footer</code> element.

  <div class="impl">
    The contact information for a node <var>node</var> is a collection of <code>address</code>
    elements defined by the first applicable entry from the following list:

    <dl class="switch">
      <dt>If <var>node</var> is an <code>article</code> element</dt>
      <dt>If <var>node</var> is a <code>body</code> element</dt>
      <dd>
        The contact information consists of all the <code>address</code> elements that have
        <var>node</var> as an ancestor and do not have another <code>body</code> or
        <code>article</code> element ancestor that is a descendant of <var>node</var>.
      </dd>

      <dt>If <var>node</var> has an ancestor element that is an <code>article</code> element</dt>
      <dt>If <var>node</var> has an ancestor element that is a <code>body</code> element</dt>
      <dd>
        The contact information of <var>node</var> is the same as the contact information of the
        nearest <code>article</code> or <code>body</code> element ancestor, whichever is nearest.
      </dd>

      <dt>If <var>node</var>'s <a>node document</a> has <a>a body element</a></dt>
      <dd>
        The contact information of <var>node</var> is the same as the contact information of
        <a>the body element</a> of the <code>Document</code>.
      </dd>

      <dt>Otherwise</dt>
      <dd> There is no contact information for <var>node</var>.</dd>
    </dl>

    User agents may expose the contact information of a node to the user, or use it for other
    purposes, such as indexing sections based on the sections' contact information.
  </div>

  <div class="example">
    In this example the footer contains contact information and a copyright notice.

    <pre highlight="html">
      &lt;footer&gt;
        &lt;address&gt;
        For more details, contact
        &lt;a href="mailto:js@example.com"&gt;John Smith&lt;/a&gt;.
        &lt;/address&gt;
        &lt;p&gt;&lt;small&gt;Â© copyright 2038 Example Corp.&lt;/small&gt;&lt;/p&gt;
      &lt;/footer&gt;
    </pre>
  </div>

<h4 id="headings-and-sections"><dfn>Headings and sections</dfn></h4>

  The <code>h1</code>â<code>h6</code> elements are headings.

  The first element of <a>heading content</a> in an element of <a>sectioning content</a>
  <a>represents</a> the heading for that section. Subsequent headings of equal or higher <a>rank</a>
  start new (implied) sections, headings of lower <a>rank</a> start implied subsections that are
  part of the previous one. In both cases, the element <a>represents</a> the heading of the implied
  section.

  <code>h1</code>â<code>h6</code> elements must not be used to markup subheadings, subtitles,
  alternative titles and taglines unless intended to be the heading for a new section or subsection.
  Instead use the markup patterns in the <a>Common idioms without dedicated elements</a> section of
  the specification.

  Certain elements are said to be <dfn>sectioning roots</dfn>, including <code>blockquote</code> and
  <code>td</code> elements. These elements can have their own outlines, but the sections and
  headings inside these elements do not contribute to the outlines of their ancestors.

  <ul class="brief category-list">
    <li><code>blockquote</code></li>
    <li><code>body</code></li>
    <li><code>details</code></li>
    <li><code>dialog</code></li>
    <li><code>fieldset</code></li>
    <li><code>figure</code></li>
    <li><code>td</code></li>
  </ul>

  <a>Sectioning content</a> elements are always considered subsections of their nearest ancestor
  <a>sectioning root</a> or their nearest ancestor element of <a>sectioning content</a>, whichever
  is nearest, regardless of what implied sections other headings may have created.

  <div class="example">
    For the following fragment:

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;Foo&lt;/h1&gt;
        &lt;h2&gt;Bar&lt;/h2&gt;
        &lt;blockquote&gt;
          &lt;h3&gt;Bla&lt;/h3&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Baz&lt;/p&gt;
        &lt;h2&gt;Quux&lt;/h2&gt;
        &lt;section&gt;
          &lt;h3&gt;Thud&lt;/h3&gt;
        &lt;/section&gt;
        &lt;p&gt;Grunt&lt;/p&gt;
      &lt;/body&gt;
    </pre>

    ...the structure would be:

    1. Foo (heading of explicit <code>body</code> section, containing the "Grunt" paragraph)
        1.Bar (heading starting implied section, containing a block quote and the "Baz" paragraph)
        2. Quux (heading starting implied section with no content other than the heading itself)
        3. Thud (heading of explicit <code>section</code> section)

    Notice how the <code>section</code> ends the earlier implicit section so that a later paragraph
    ("Grunt") is back at the top level.
  </div>

  Sections may contain headings of any <a>rank</a>, and authors are strongly encouraged to use
  headings of the appropriate <a>rank</a> for the section's nesting level.

  Authors are also encouraged to explicitly wrap sections in elements of <a>sectioning content</a>,
  instead of relying on the implicit sections generated by having multiple headings in one element
  of <a>sectioning content</a>.

  <div class="example">
    For example, the following is correct:

    <pre highlight="html">
      &lt;body&gt;
        &lt;h4&gt;Apples&lt;/h4&gt;
        &lt;p&gt;Apples are fruit.&lt;/p&gt;
        &lt;section&gt;
          &lt;h2&gt;Taste&lt;/h2&gt;
          &lt;p&gt;They taste lovely.&lt;/p&gt;
          &lt;h6&gt;Sweet&lt;/h6&gt;
          &lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt;
          &lt;h1&gt;Color&lt;/h1&gt;
          &lt;p&gt;Apples come in various colors.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/body&gt;
    </pre>

    However, the same document would be more clearly expressed as:

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;Apples&lt;/h1&gt;
        &lt;p&gt;Apples are fruit.&lt;/p&gt;
        &lt;section&gt;
          &lt;h2&gt;Taste&lt;/h2&gt;
          &lt;p&gt;They taste lovely.&lt;/p&gt;
          &lt;section&gt;
            &lt;h3&gt;Sweet&lt;/h3&gt;
            &lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt;
          &lt;/section&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Color&lt;/h2&gt;
          &lt;p&gt;Apples come in various colors.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/body&gt;
    </pre>

    Both of the documents above are semantically identical and would produce the same outline in
    compliant user agents.

    This third example is also semantically identical, and might be easier to maintain (e.g. if
    sections are often moved around in editing):

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;Apples&lt;/h1&gt;
        &lt;p&gt;Apples are fruit.&lt;/p&gt;
        &lt;section&gt;
          &lt;h1&gt;Taste&lt;/h1&gt;
          &lt;p&gt;They taste lovely.&lt;/p&gt;
          &lt;section&gt;
            &lt;h1&gt;Sweet&lt;/h1&gt;
            &lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt;
          &lt;/section&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h1&gt;Color&lt;/h1&gt;
          &lt;p&gt;Apples come in various colors.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/body&gt;
    </pre>

    This final example would need explicit style rules to be rendered well in legacy browsers.
    Legacy browsers without CSS support would render all the headings as top-level headings.
  </div>

<h5 id="creating-an-outline">Creating an outline</h5>

  <p class="warning">
    There are currently no known implementations of the outline algorithm in graphical browsers or
    assistive technology user agents, although the algorithm is implemented in other software such
    as conformance checkers.

    Therefore the <a>outline</a> algorithm cannot be relied upon to convey document structure to
    users. Authors are advised to use heading <a>rank</a> (<code>h1</code>-<code>h6</code>) to
    convey document structure.
  </p>

  <div class="impl">
    This section defines an algorithm for creating an outline for a <a>sectioning content</a>
    element or a <a>sectioning root</a> element. It is defined in terms of a walk over the nodes
    of a DOM tree, in <a>tree order</a>, with each node being visited when it is <i>entered</i> and
    when it is <i>exited</i> during the walk.
  </div>

  The <dfn>outline</dfn> for a <a>sectioning content</a> element or a <a>sectioning root</a> element
  consists of a list of one or more potentially nested <a>sections</a>. The element for which an
  <a>outline</a> is created is said to be <dfn>the outline's owner</dfn>.

  A <dfn>section</dfn> is a container that corresponds to some nodes in the original DOM tree. Each
  section can have one heading associated with it, and can contain any number of further nested
  sections. <span class="impl">The algorithm for the outline also associates each node in the DOM
  tree with a particular section and potentially a heading.</span> (The sections in the outline
  aren't <code>section</code> elements, though some may correspond to such elements â they are
  merely conceptual sections.)

  <div class="example">
    The following markup fragment:

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;A&lt;/h1&gt;
        &lt;p&gt;B&lt;/p&gt;
        &lt;h2&gt;C&lt;/h2&gt;
        &lt;p&gt;D&lt;/p&gt;
        &lt;h2&gt;E&lt;/h2&gt;
        &lt;p&gt;F&lt;/p&gt;
      &lt;/body&gt;
    </pre>

    ...results in the following outline being created for the <code>body</code> node (and thus the
    entire document):

    1. Section created for <code>body</code> node. Associated with heading "A". Also associated with
        paragraph "B". Nested sections:
        1. Section implied for first <code>h2</code> element. Associated with heading "C". Also
            associated with paragraph "D". No nested sections.
        2. Section implied for second <code>h2</code> element. Associated with heading "E". Also
            associated with paragraph "F". No nested sections.
  </div>

  <div class="impl">
    The algorithm that must be followed during a walk of a DOM subtree rooted at a
    <a>sectioning content</a> element or a <a>sectioning root</a> element to determine that
    element's <a>outline</a> is as follows:

    1. Let <var>current outline target</var> be null. (It holds the element whose <a>outline</a> is
        being created.)
    2. Let <var>current section</var> be null. (It holds a pointer to a <a>section</a>, so that
        elements in the DOM can all be associated with a section.)
    3. Create a stack to hold elements, which is used to handle nesting. Initialize this stack to
        empty.
    4. Walk over the DOM in <a>tree order</a>, starting with the <a>sectioning content</a> element
        or <a>sectioning root</a> element at the root of the subtree for which an outline is to be
        created, and trigger the first relevant step below for each element as the walk enters and
        exits it.

        <dl class="switch">
          <dt>When exiting an element, if that element is the element at the top of the stack</dt>
          <dd>
            <p class="note">
              The element being exited is a <a>heading content</a> element or an element with a
              <code>hidden</code> attribute.
            </p>

            Pop that element from the stack.
          </dd>

          <dt>
            If the top of the stack is a <a>heading content</a> element or an element with a
            <code>hidden</code> attribute
          </dt>
          <dd>Do nothing.</dd>

          <dt>When entering an element with a <code>hidden</code> attribute</dt>
          <dd>
            Push the element being entered onto the stack. (This causes the algorithm to skip that
            element and any descendants of the element.)
          </dd>

          <dt>When entering a <a>sectioning content</a> element</dt>
          <dd>
            Run these steps:
            1. If <var>current outline target</var> is not null, run these substeps:
                1. If the <var>current section</var> has no heading, create an implied heading and
                    let that be the heading for the <var>current section</var>.
                2. Push <var>current outline target</var> onto the stack.
            2. Let <var>current outline target</var> be the element that is being entered.
            3. Let <var>current section</var> be a newly created <a>section</a> for the
                <var>current outline target</var> element.
            4. Associate <var>current outline target</var> with <var>current section</var>.
            5. Let there be a new <a>outline</a> for the new <var>current outline target</var>,
                initialized with just the new <var>current section</var> as the only <a>section</a>
                in the outline.
          </dd>

          <dt>When exiting a <a>sectioning content</a> element, if the stack is not empty</dt>
          <dd>
            Run these steps:
            1. If the <var>current section</var> has no heading, create an implied heading and let
                that be the heading for the <var>current section</var>.
            2. Pop the top element from the stack, and let the <var>current outline target</var> be
                that element.
            3. Let <var>current section</var> be the last section in the <a>outline</a> of the
                <var>current outline target</var> element.
            4. Append the <a>outline</a> of the <a>sectioning content</a> element being exited to
                the <var>current section</var>. (This does not change which section is the last
                section in the <a>outline</a>.)
          </dd>

          <dt>When entering a <a>sectioning root</a> element</dt>
          <dd>
            Run these steps:
            1. If <var>current outline target</var> is not null, push
                <var>current outline target</var> onto the stack.
            2. Let <var>current outline target</var> be the element that is being entered.
            3. Let <var>current outline target</var>'s <i>parent section</i> be
                <var>current section</var>.
            4. Let <var>current section</var> be a newly created <a>section</a> for the
                <var>current outline target</var> element.
            5. Let there be a new <a>outline</a> for the new <var>current outline target</var>,
                initialized with just the new <var>current section</var> as the only <a>section</a>
                in the outline.
          </dd>

          <dt>When exiting a <a>sectioning root</a> element, if the stack is not empty</dt>
          <dd>
            Run these steps:
            1. If the <var>current section</var> has no heading, create an implied heading and let
                that be the heading for the <var>current section</var>.
            2. Let <var>current section</var> be <var>current outline target</var>'s
                <i>parent section</i>.
            3. Pop the top element from the stack, and let the <var>current outline target</var> be
                that element.
          </dd>

          <dt>
            When exiting a <a>sectioning content</a> element or a <a>sectioning root</a> element
            (when the stack is empty)
          </dt>
          <dd>
            <p class="note">
              The <var>current outline target</var> is the element being exited, and it is the
              <a>sectioning content</a> element or a <a>sectioning root</a> element at the root of
              the subtree for which an outline is being generated.
            </p>

            If the <var>current section</var> has no heading, create an implied heading and
            let that be the heading for the <var>current section</var>.

            Skip to the next step in the overall set of steps. (The walk is over.)
          </dd>

          <dt>When entering a <a>heading content</a> element</dt>
          <dd>
            If the <var>current section</var> has no heading, let the element being entered be the
            heading for the <var>current section</var>.

            Otherwise, if the element being entered has a <a>rank</a> equal to or higher than the
            heading of the last section of the <a>outline</a> of the
            <var>current outline target</var>, or if the heading of the last section of the
            <a>outline</a> of the <var>current outline target</var> is an implied heading, then
            create a new <a>section</a> and append it to the <a>outline</a> of the
            <var>current outline target</var> element, so that this new section is the new last
            section of that outline. Let <var>current section</var> be that new section. Let the
            element being entered be the new heading for the <var>current section</var>.

            Otherwise, run these substeps:
            1. Let <var>candidate section</var> be <var>current section</var>.
            2. <i>Heading loop</i>: If the element being entered has a <a>rank</a> lower than the
                <a>rank</a> of the heading of the <var>candidate section</var>, then create a new
                <a>section</a>, and append it to <var>candidate section</var>. (This does not change
                which section is the last section in the outline.) Let <var>current section</var> be
                this new section. Let the element being entered be the new heading for the
                <var>current section</var>. Abort these substeps.
            3. Let <var>new candidate section</var> be the <a>section</a> that contains
                <var>candidate section</var> in the <a>outline</a> of
                <var>current outline target</var>.
            4. Let <var>candidate section</var> be <var>new candidate section</var>.
            5. Return to the step labeled <i>heading loop</i>.

            Push the element being entered onto the stack. (This causes the algorithm to skip any
            descendants of the element.)

            <p class="note">
              Recall that <code>h1</code> has the <em>highest</em> rank, and <code>h6</code> has the
              lowest rank.
            </p>
          </dd>

          <dt>Otherwise</dt>
          <dd>Do nothing.</dd>
        </dl>

        In addition, whenever the walk exits a node, after doing the steps above, if the node is not
        associated with a <a>section</a> yet, associate the node with the <a>section</a>
        <var>current section</var>.

    5. Associate all non-element nodes that are in the subtree for which an outline is being created
        with the <a>section</a> with which their parent element is associated.
    6. Associate all nodes in the subtree with the heading of the <a>section</a> with which they are
        associated, if any.

    The tree of sections created by the algorithm above, or a proper subset thereof, must be used
    when generating document outlines, for example when generating tables of contents.

    The outline created for <a>the body element</a> of a <code>Document</code> is the <a>outline</a>
      of the entire document.

    When creating an interactive table of contents, entries should jump the user to the relevant
    <a>sectioning content</a> element, if the <a>section</a> was created for a real element in the
    original document, or to the relevant <a>heading content</a> element, if the <a>section</a> in
    the tree was generated for a heading in the above process.

    <p class="note">
      Selecting the first <a>section</a> of the document therefore always takes the user to the top
      of the document, regardless of where the first heading in the <code>body</code> is to be
      found.
    </p>

    The <dfn>outline depth</dfn> of a <a>heading content</a> element associated with a
    <a>section</a> <var>section</var> is the number of <a>sections</a> that are ancestors of
    <var>section</var> in the outermost <a>outline</a> that <var>section</var> finds itself in when
    the <a>outlines</a> of its <code>Document</code>'s elements are created, plus 1. The
    <a>outline depth</a> of a <a>heading content</a> element not associated with a <a>section</a> is
    1.

    User agents should provide default headings for sections that do not have explicit section
    headings.

    <div class="example">
      Consider the following snippet:

      <pre highlight="html">
        &lt;body&gt;
          &lt;nav&gt;
            &lt;p&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/p&gt;
          &lt;/nav&gt;
          &lt;p&gt;Hello world.&lt;/p&gt;
          &lt;aside&gt;
            &lt;p&gt;My cat is cute.&lt;/p&gt;
          &lt;/aside&gt;
        &lt;/body&gt;
      </pre>

      Although it contains no headings, this snippet has three sections: a document (the
      <code>body</code>) with two subsections (a <code>nav</code> and an <code>aside</code>). A user
      agent could present the outline as follows:

      1. Untitled document
          1. Navigation
          2. Sidebar

      These default headings ("Untitled document", "Navigation", "Sidebar") are not specified by
      this specification, and might vary with the user's language, the page's language, the user's
      preferences, the user agent implementor's preferences, etc.
    </div>

    <div class="note">
      The following JavaScript function shows how the tree walk could be implemented. The
      <var>root</var> argument is the root of the tree to walk (either a <a>sectioning content</a>
      element or a <a>sectioning root</a> element), and the <var>enter</var> and <var>exit</var>
      arguments are callbacks that are called with the nodes as they are entered and exited.
      [[!ECMA-262]]

      <pre highlight="javascript">
        function (root, enter, exit) {
          var node = root;
          start: while (node) {
            enter(node);
            if (node.firstChild) {
              node = node.firstChild;
              continue start;
            }
            while (node) {
              exit(node);
              if (node == root) {
                node = null;
              } else if (node.nextSibling) {
                node = node.nextSibling;
                continue start;
              } else {
                node = node.parentNode;
              }
            }
          }
        }
      </pre>
    </div>
  </div>

<h5 id="sample-outlines">Sample outlines</h5>

  <em>This section is non-normative.</em>

  <div class="example">
    The following document shows a straight-forward application of the <a>outline</a> algorithm.
    First, here is the document, which is a book with very short chapters and subsections:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;title&gt;The Tax Book (all in one page)&lt;/title&gt;
      &lt;h1&gt;The Tax Book&lt;/h1&gt;
      &lt;h2&gt;Earning money&lt;/h2&gt;
      &lt;p&gt;Earning money is good.&lt;/p&gt;
      &lt;h3&gt;Getting a job&lt;/h3&gt;
      &lt;p&gt;To earn money you typically need a job.&lt;/p&gt;
      &lt;h2&gt;Spending money&lt;/h2&gt;
      &lt;p&gt;Spending is what money is mainly used for.&lt;/p&gt;
      &lt;h3&gt;Cheap things&lt;/h3&gt;
      &lt;p&gt;Buying cheap things often not cost-effective.&lt;/p&gt;
      &lt;h3&gt;Expensive things&lt;/h3&gt;
      &lt;p&gt;The most expensive thing is often not the most cost-effective either.&lt;/p&gt;
      &lt;h2&gt;Investing money&lt;/h2&gt;
      &lt;p&gt;You can lend your money to other people.&lt;/p&gt;
      &lt;h2&gt;Losing money&lt;/h2&gt;
      &lt;p&gt;If you spend money or invest money, sooner or later you will lose money.
      &lt;h3&gt;Poor judgement&lt;/h3&gt;
      &lt;p&gt;Usually if you lose money it's because you made a mistake.&lt;/p&gt;
    </pre>

    This book would form the following outline:

    1. The Tax Book
        1. Earning money
            1. Getting a job
        2. Spending money
            1. Cheap things
            2. Expensive things
        3. Investing money
        4. Losing money
            1. Poor judgement

    Notice that the <code>title</code> element does not participate in the outline.
  </div>

  <div class="example">
    Here is a similar document, but this time using <code>section</code> elements to get the same
    effect:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;title&gt;The Tax Book (all in one page)&lt;/title&gt;
      &lt;h1&gt;The Tax Book&lt;/h1&gt;
      &lt;section&gt;
        &lt;h1&gt;Earning money&lt;/h1&gt;
        &lt;p&gt;Earning money is good.&lt;/p&gt;
        &lt;section&gt;
          &lt;h1&gt;Getting a job&lt;/h1&gt;
          &lt;p&gt;To earn money you typically need a job.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/section&gt;
      &lt;section&gt;
        &lt;h1&gt;Spending money&lt;/h1&gt;
        &lt;p&gt;Spending is what money is mainly used for.&lt;/p&gt;
        &lt;section&gt;
          &lt;h1&gt;Cheap things&lt;/h1&gt;
          &lt;p&gt;Buying cheap things often not cost-effective.&lt;/p&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h1&gt;Expensive things&lt;/h1&gt;
          &lt;p&gt;The most expensive thing is often not the most cost-effective either.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/section&gt;
      &lt;section&gt;
        &lt;h1&gt;Investing money&lt;/h1&gt;
        &lt;p&gt;You can lend your money to other people.&lt;/p&gt;
      &lt;/section&gt;
      &lt;section&gt;
        &lt;h1&gt;Losing money&lt;/h1&gt;
        &lt;p&gt;If you spend money or invest money, sooner or later you will lose money.
        &lt;section&gt;
          &lt;h1&gt;Poor judgement&lt;/h1&gt;
          &lt;p&gt;Usually if you lose money it's because you made a mistake.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/section&gt;
    </pre>

    This book would form the same outline:

    1. The Tax Book
        1. Earning money
            1. Getting a job
        2. Spending money
            1. Cheap things
            2. Expensive things
        3. Investing money
        4. Losing money
            1. Poor judgement
  </div>

  <div class="example">
    A document can contain multiple top-level headings:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;title&gt;Alphabetic Fruit&lt;/title&gt;
      &lt;h1&gt;Apples&lt;/h1&gt;
      &lt;p&gt;Pomaceous.&lt;/p&gt;
      &lt;h1&gt;Bananas&lt;/h1&gt;
      &lt;p&gt;Edible.&lt;/p&gt;
      &lt;h1&gt;Oranges&lt;/h1&gt;
      &lt;p&gt;Star.&lt;/p&gt;
    </pre>

    This would form the following simple outline consisting of three top-level sections:

    1. Apples
    2. Bananas
    3. Oranges

    Effectively, the <code>body</code> element is split into three.
  </div>

  <div class="example">
    Mixing both the <code>h1</code>â<code>h6</code> model and the
    <code>section</code>/<code>h1</code> model can lead to some unintuitive results.

    Consider for example the following, which is just the previous example but with the contents
    of the (implied) <code>body</code> wrapped in a <code>section</code>:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;title&gt;Alphabetic Fruit&lt;/title&gt;
      &lt;section&gt;
        &lt;h1&gt;Apples&lt;/h1&gt;
        &lt;p&gt;Pomaceous.&lt;/p&gt;
        &lt;h1&gt;Bananas&lt;/h1&gt;
        &lt;p&gt;Edible.&lt;/p&gt;
        &lt;h1&gt;Oranges&lt;/h1&gt;
        &lt;p&gt;Star.&lt;/p&gt;
      &lt;/section&gt;
    </pre>

    The resulting outline would be:

    1. <i>(untitled page)</i>
        1. Apples
        2. Bananas
        3. Oranges

    This result is described as <i>unintuitive</i> because it results in three subsections even
    though there's only one <code>section</code> element. Effectively, the <code>section</code> is
    split into three, just like the implied <code>body</code> element in the previous example.

    (In this example, "<i>(untitled page)</i>" is the implied heading for the <code>body</code>
    element, since it has no explicit heading.)
  </div>

  <div class="example">
    Headings never rise above other sections. Thus, in the following example, the first
    <code>h1</code> does not actually describe the page header; it describes the header for the
    second half of the page:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;title&gt;Feathers on The Site of Encyclopedic Knowledge&lt;/title&gt;
      &lt;section&gt;
        &lt;h1&gt;A plea from our caretakers&lt;/h1&gt;
        &lt;p&gt;Please, we beg of you, send help! We're stuck in the server room!&lt;/p&gt;
      &lt;/section&gt;
      &lt;h1&gt;Feathers&lt;/h1&gt;
      &lt;p&gt;Epidermal growths.&lt;/p&gt;
    </pre>

    The resulting outline would be:

    1. <i>(untitled page)</i>
        1. A plea from our caretakers
    2. Feathers
  </div>

  <div class="example">
    Thus, when an <code>article</code> element starts with a <code>nav</code> block and only later
    has its heading, the result is that the <code>nav</code> block is not part of the same section
    as the rest of the <code>article</code> in the outline. For instance, take this document:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;title&gt;We're adopting a child! â Ray's blog&lt;/title&gt;
      ...

      &lt;h1&gt;Ray's blog&lt;/h1&gt;

      &lt;main&gt;
        &lt;article&gt;
          &lt;header&gt;
            &lt;nav&gt;
              &lt;a href="?t=-1d"&gt;Yesterday&lt;/a&gt;;
              &lt;a href="?t=-7d"&gt;Last week&lt;/a&gt;;
              &lt;a href="?t=-1m"&gt;Last month&lt;/a&gt;
            &lt;/nav&gt;
          &lt;/header&gt;
          &lt;h2&gt;We're adopting a child!&lt;/h2&gt;

          &lt;p&gt;As of today, Janine and I have signed the papers to become
          the proud parents of baby Diane! We've been looking forward to
          this day for weeks.&lt;/p&gt;
        &lt;/article&gt;
      &lt;/main&gt;
      ...
    </pre>

    The resulting outline would be:

    1. Ray's blog
        1. <i>Untitled article</i>
            1. <i>Untitled navigation section</i>
        2. We're adopting a child!

    Also worthy of note in this example is that the <code>header</code> and <code>main</code>
    elements have no effect whatsoever on the document outline.
  </div>

<h5 id="exposing-outlines-to-users">Exposing outlines to users</h5>

  User agents are encouraged to expose page outlines to users to aid in navigation. This is
  especially true for non-visual media, e.g. screen readers.

  However, to mitigate the difficulties that arise from authors misusing <a>sectioning content</a>,
  user agents are also encouraged to offer a mode that navigates the page using
  <a>heading content</a> alone.

  <div class="example">
    For instance, a user agent could map the arrow keys as follows:

    : <kbd>Shift</kbd>+<kbd>â Left</kbd>
    :: Go to previous section, including subsectons of previous sections

    : <kbd>Shift</kbd>+<kbd>â Right</kbd>
    :: Go to next section, including subsections of the current section

    : <kbd>Shift</kbd>+<kbd>â Up</kbd>
    :: Go to parent section of the current section

    : <kbd>Shift</kbd>+<kbd>â Down</kbd>
    :: Go to next section, skipping subsections of the current section

    Plus in addition, the user agent could map the <kbd>j</kbd> and
    <kbd>k</kbd> keys to navigating to the previous or next element of
    <a>heading content</a>, regardless of the section's outline depth and ignoring sections with no
    headings.
  </div>

<h4 id="usage-summary">Usage summary</h4>

  <em>This section is non-normative.</em>

  <table class="vertical-summary-table">
    <thead>
      <tr>
        <th rowspan="2">Element</th>
        <th>Purpose</th>
      </tr>
      <tr>
        <th>Example</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td rowspan="2"><code>body</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;!DOCTYPE HTML&gt;
            &lt;html&gt;
              &lt;head&gt; &lt;title&gt;Steve Hill's Home Page&lt;/title&gt; &lt;/head&gt;
              &lt;body&gt; &lt;p&gt;Hard Trance is My Life.&lt;/p&gt; &lt;/body&gt;
            &lt;/html&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>article</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;article&gt;
              &lt;img src="/tumblr_masqy2s5yn1rzfqbpo1_500.jpg" alt="Yellow smiley face with the caption 'masif'"&gt;
              &lt;p&gt;My fave Masif tee so far!&lt;/p&gt;
              &lt;footer&gt;Posted 2 days ago&lt;/footer&gt;
            &lt;/article&gt;
            &lt;article&gt;
              &lt;img src="/tumblr_m9tf6wSr6W1rzfqbpo1_500.jpg" alt=""&gt;
              &lt;p&gt;Happy 2nd birthday Masif Saturdays!!!&lt;/p&gt;
              &lt;footer&gt;Posted 3 weeks ago&lt;/footer&gt;
            &lt;/article&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>section</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;h1&gt;Biography&lt;/h1&gt;
            &lt;section&gt;
              &lt;h1&gt;The facts&lt;/h1&gt;
              &lt;p&gt;1500+ shows, 14+ countries&lt;/p&gt;
            &lt;/section&gt;
            &lt;section&gt;
              &lt;h1&gt;2010/2011 figures per year&lt;/h1&gt;
              &lt;p&gt;100+ shows, 8+ countries&lt;/p&gt;
            &lt;/section&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>nav</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;nav&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;
                &lt;li&gt;&lt;a href="/biog.html"&gt;Bio&lt;/a&gt;
                &lt;li&gt;&lt;a href="/discog.html"&gt;Discog&lt;/a&gt;
              &lt;/ul&gt;
            &lt;/nav&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>aside</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;h1&gt;Music&lt;/h1&gt;
            &lt;p&gt;As any burner can tell you, the event has a lot of trance.&lt;/p&gt;
            &lt;aside&gt;You can buy the music we played at our &lt;a href="buy.html"&gt;playlist page&lt;/a&gt;.&lt;/aside&gt;
            &lt;p&gt;This year we played a kind of trance that originated in Belgium, Germany, and the Netherlands in the mid 90s.&lt;/p&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>h1</code>â<code>h6</code></td>
        <td>A section heading</td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;h1&gt;The Guide To Music On The Playa&lt;/h1&gt;
            &lt;h2&gt;The Main Stage&lt;/h2&gt;
            &lt;p&gt;If you want to play on a stage, you should bring one.&lt;/p&gt;
            &lt;h2&gt;Amplified Music&lt;/h2&gt;
            &lt;p&gt;Amplifiers up to 300W or 90dB are welcome.&lt;/p&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>header</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;article&gt;
              &lt;header&gt;
              &lt;h1&gt;Hard Trance is My Life&lt;/h1&gt;
              &lt;p&gt;By DJ Steve Hill and Technikal&lt;/p&gt;
              &lt;/header&gt;
              &lt;p&gt;The album with the amusing punctuation has red artwork.&lt;/p&gt;
            &lt;/article&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>footer</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;article&gt;
              &lt;h1&gt;Hard Trance is My Life&lt;/h1&gt;
              &lt;p&gt;The album with the amusing punctuation has red artwork.&lt;/p&gt;
              &lt;footer&gt;
              &lt;p&gt;Artists: DJ Steve Hill and Technikal&lt;/p&gt;
              &lt;/footer&gt;
            &lt;/article&gt;
          </pre>
        </td>
      </tr>
    </tbody>
  </table>

<h5 id="article-or-section">Article or section?</h5>

  <em>This section is non-normative.</em>

  A <code>section</code> forms part of something else. An <code>article</code> is its own thing. But
  how does one know which is which? Mostly the real answer is "it depends on author intent".

  For example, one could imagine a book with a "Granny Smith" chapter that just said "These juicy,
  green apples make a great filling for apple pies."; that would be a <code>section</code> because
  there'd be lots of other chapters on (maybe) other kinds of apples.

  On the other hand, one could imagine a tweet or reddit comment or tumblr post or newspaper
  classified ad that just said "Granny Smith. These juicy, green apples make a great filling for
  apple pies."; it would then be <code>article</code>s because that was the whole thing.

  A comment on an article is not part of the <code>article</code> on which it is commenting,
  therefore it is its own <code>article</code>.

<h3 id="grouping-content">Grouping content</h3>

<h4 id="the-p-element">The <dfn><code>p</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      A <code>p</code> element's <a>end tag</a> may be omitted if the <code>p</code> element is
      immediately followed by an <code>address</code>, <code>article</code>, <code>aside</code>,
      <code>blockquote</code>, <code>div</code>, <code>dl</code>, <code>fieldset</code>,
      <code>footer</code>, <code>form</code>, <code>h1</code>, <code>h2</code>, <code>h3</code>,
      <code>h4</code>, <code>h5</code>, <code>h6</code>, <code>header</code>, <code>hr</code>,
      <code>main</code>, <code>menu</code>, <code>nav</code>, <code>ol</code>, <code>p</code>,
      <code>pre</code>, <code>section</code>, <code>table</code>, or <code>ul</code>, element, or if
      there is no more content in the parent element and the parent element is not an <code>a</code>
      element.
    </dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" highlight="webidl">
        interface HTMLParagraphElement : HTMLElement {};
      </pre>
    </dd>
  </dl>

  The <code>p</code> element <a>represents</a> a <a>paragraph</a>.

  <p class="note">
    While paragraphs are usually represented in visual media by blocks of text that are physically
    separated from adjacent blocks through blank lines, a style sheet or user agent would be equally
    justified in presenting paragraph breaks in a different manner, for instance using inline
    pilcrows (Â¶).
  </p>

  <div class="example">
    The following examples are conforming HTML fragments:
    <pre highlight="html">
      &lt;p&gt;The little kitten gently seated himself on a piece of
      carpet. Later in his life, this would be referred to as the time the
      cat sat on the mat.&lt;/p&gt;
    </pre>

    <pre highlight="html">
      &lt;fieldset&gt;
        &lt;legend&gt;Personal information&lt;/legend&gt;
        &lt;p&gt;
          &lt;label&gt;Name: &lt;input name="n"&gt;&lt;/label&gt;
          &lt;label&gt;&lt;input name="anon" type="checkbox"&gt; Hide from other users&lt;/label&gt;
        &lt;/p&gt;
        &lt;p&gt;&lt;label&gt;Address: &lt;textarea name="a"&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;
      &lt;/fieldset&gt;
    </pre>

    <pre highlight="html">
      &lt;p&gt;There was once an example from Femley,&lt;br&gt;
      Whose markup was of dubious quality.&lt;br&gt;
      The validator complained,&lt;br&gt;
      So the author was pained,&lt;br&gt;
      To move the error from the markup to the rhyming.&lt;/p&gt;
    </pre>
  </div>

  The <code>p</code> element should not be used when a more specific element is more appropriate.

  <div class="example">
    The following example is technically correct:

    <pre highlight="html">
      &lt;section&gt;
        &lt;!-- ... --&gt;
        &lt;p&gt;Last modified: 2001-04-23&lt;/p&gt;
        &lt;p&gt;Author: fred@example.com&lt;/p&gt;
      &lt;/section&gt;
    </pre>

    However, it would be better marked-up as:

    <pre highlight="html">
      &lt;section&gt;
        &lt;!-- ... --&gt;
        &lt;footer&gt;Last modified: 2001-04-23&lt;/footer&gt;
        &lt;address&gt;Author: fred@example.com&lt;/address&gt;
      &lt;/section&gt;
    </pre>

    Or:

    <pre highlight="html">
      &lt;section&gt;
        &lt;!-- ... --&gt;
        &lt;footer&gt;
        &lt;p&gt;Last modified: 2001-04-23&lt;/p&gt;
        &lt;address&gt;Author: fred@example.com&lt;/address&gt;
        &lt;/footer&gt;
      &lt;/section&gt;
    </pre>
  </div>

  <div class="note">
    List elements (in particular, <code>ol</code> and <code>ul</code> elements) cannot be children
    of <code>p</code> elements. When a sentence contains a bulleted list, therefore, one might
    wonder how it should be marked up.

    <div class="example">
      For instance, this fantastic sentence has bullets relating to

      * wizards,
      * faster-than-light travel, and
      * telepathy,

      and is further discussed below.
    </div>

    The solution is to realize that a <i>paragraph</i>, in HTML terms, is not a logical concept, but
    a structural one. In the fantastic example above, there are actually <em>five</em>
    <a>paragraphs</a> as defined by this specification: one before the list, one for each bullet,
    and one after the list.

    <div class="example">
      The markup for the above example could therefore be:

      <pre highlight="html">
        &lt;p&gt;For instance, this fantastic sentence has bullets relating to&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;wizards,
          &lt;li&gt;faster-than-light travel, and
          &lt;li&gt;telepathy,
        &lt;/ul&gt;
        &lt;p&gt;and is further discussed below.&lt;/p&gt;
      </pre>
    </div>

    Authors wishing to conveniently style such "logical" paragraphs consisting of multiple
    "structural" paragraphs can use the <code>div</code> element instead of the <code>p</code>
    element.

    <div class="example">
      Thus for instance the above example could become the following:

      <pre highlight="html">
        &lt;div&gt;For instance, this fantastic sentence has bullets relating to
          &lt;ul&gt;
            &lt;li&gt;wizards,
            &lt;li&gt;faster-than-light travel, and
            &lt;li&gt;telepathy,
          &lt;/ul&gt;
        and is further discussed below.&lt;/div&gt;
      </pre>

      This example still has five structural paragraphs, but now the author can style just the
      <code>div</code> instead of having to consider each part of the example separately.
    </div>
  </div>

<h4 id="the-hr-element">The <dfn><code>hr</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a>.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>separator</code></a> (default - <a><em>do not set</em></a>) or
      <a><code>presentation</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" highlight="webidl">
        interface HTMLHRElement : HTMLElement {};
      </pre>
    </dd>
  </dl>

  The <code>hr</code> element <a>represents</a> a <a>paragraph</a>-level thematic break, e.g. a
  scene change in a story, or a transition to another topic within a section of a reference book.

  <div class="example">
    The following fictional extract from a project manual shows two sections that use the
    <code>hr</code> element to separate topics within the section.

    <pre highlight="html">
      &lt;section&gt;
        &lt;h1&gt;Communication&lt;/h1&gt;
        &lt;p&gt;There are various methods of communication. This section
        covers a few of the important ones used by the project.&lt;/p&gt;
        <strong>&lt;hr&gt;</strong>
        &lt;p&gt;Communication stones seem to come in pairs and have mysterious
        properties:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;They can transfer thoughts in two directions once activated
          if used alone.&lt;/li&gt;
          &lt;li&gt;If used with another device, they can transfer one's
          consciousness to another body.&lt;/li&gt;
          &lt;li&gt;If both stones are used with another device, the
          consciousnesses switch bodies.&lt;/li&gt;
        &lt;/ul&gt;
        <strong>&lt;hr&gt;</strong>
        &lt;p&gt;Radios use the electromagnetic spectrum in the meter range and
        longer.&lt;/p&gt;
        <strong>&lt;hr&gt;</strong>
        &lt;p&gt;Signal flares use the electromagnetic spectrum in the
        nanometer range.&lt;/p&gt;
      &lt;/section&gt;
      &lt;section&gt;
        &lt;h1&gt;Food&lt;/h1&gt;
        &lt;p&gt;All food at the project is rationed:&lt;/p&gt;
        &lt;dl&gt;
          &lt;dt&gt;Potatoes&lt;/dt&gt;
          &lt;dd&gt;Two per day&lt;/dd&gt;
          &lt;dt&gt;Soup&lt;/dt&gt;
          &lt;dd&gt;One bowl per day&lt;/dd&gt;
        &lt;/dl&gt;
        <strong>&lt;hr&gt;</strong>
        &lt;p&gt;Cooking is done by the chefs on a set rotation.&lt;/p&gt;
      &lt;/section&gt;
    </pre>

    There is no need for an <code>hr</code> element between the sections themselves, since the
    <code>section</code> elements and the <code>h1</code> elements imply thematic changes
    themselves.
  </div>

  <div class="example">
    The following extract from <cite>Pandora's Star</cite> by Peter F. Hamilton shows two
    paragraphs that precede a scene change and the paragraph that follows it. The scene change,
    represented in the printed book by a gap containing a solitary centered star between the second
    and third paragraphs, is here represented using the <code>hr</code> element.

    <pre lang="en-GB">
      &lt;p&gt;Dudley was ninety-two, in his second life, and fast approaching
      time for another rejuvenation. Despite his body having the physical
      age of a standard fifty-year-old, the prospect of a long degrading
      campaign within academia was one he regarded with dread. For a
      supposedly advanced civilization, the Intersolar Commonwealth could be
      appallingly backward at times, not to mention cruel.&lt;/p&gt;
      &lt;p&gt;&lt;i&gt;Maybe it won't be that bad&lt;/i&gt;, he told himself. The lie was
      comforting enough to get him through the rest of the night's
      shift.&lt;/p&gt;
      <strong>&lt;hr&gt;</strong>
      &lt;p&gt;The Carlton AllLander drove Dudley home just after dawn. Like the
      astronomer, the vehicle was old and worn, but perfectly capable of
      doing its job. It had a cheap diesel engine, common enough on a
      semi-frontier world like Gralmond, although its drive array was a
      thoroughly modern photoneural processor. With its high suspension and
      deep-tread tyres it could plough along the dirt track to the
      observatory in all weather and seasons, including the metre-deep snow
      of Gralmond's winters.&lt;/p&gt;
    </pre>
  </div>

  <p class="note">The <code>hr</code> element does not affect the document's <a>outline</a>.</p>

<h4 id="the-pre-element">The <dfn><code>pre</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" highlight="webidl">
        interface HTMLPreElement : HTMLElement {};
      </pre>
    </dd>
  </dl>

  The <code>pre</code> element <a>represents</a> a block of preformatted text, in which structure is
  represented by typographic conventions rather than by elements.

  <p class="note">
    In <a>the HTML syntax</a>, a leading newline character immediately following the
    <code>pre</code> element start tag is stripped.
  </p>

  Some examples of cases where the <code>pre</code> element could be used:

  * Including an e-mail, with paragraphs indicated by blank lines, lists indicated by lines prefixed
    with a bullet, and so on.
  * Including fragments of computer code, with structure indicated according to the conventions of
    that language.
  * Displaying ASCII art.

  <p class="note">
    Authors are encouraged to consider how preformatted text will be experienced when the formatting
    is lost, as will be the case for users of speech synthesizers, braille displays, and the like.
    For cases like ASCII art, it is likely that an alternative presentation, such as a textual
    description, would be more universally accessible to the readers of the document.
  </p>

  To represent a block of computer code, the <code>pre</code> element can be used with a
  <code>code</code> element; to represent a block of computer output the <code>pre</code> element
  can be used with a <code>samp</code> element. Similarly, the <code>kbd</code> element can be used
  within a <code>pre</code> element to indicate text that the user is to enter.

  <div class="impl">
    <p class="note">
      This element <a>has rendering requirements involving the bidirectional algorithm</a>.
    </p>
  </div>

  <div class="example">
    In the following snippet, a sample of computer code is presented.

    <pre highlight="html">
      &lt;p&gt;This is the &lt;code&gt;Panel&lt;/code&gt; constructor:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;function Panel(element, canClose, closeHandler) {
        this.element = element;
        this.canClose = canClose;
        this.closeHandler = function () { if (closeHandler) closeHandler() };
      }&lt;/code&gt;&lt;/pre&gt;
    </pre>
  </div>

  <div class="example">
    In the following snippet, <code>samp</code> and <code>kbd</code> elements are mixed in the
    contents of a <code>pre</code> element to show a session of Zork I.

    <pre highlight="html">
      &lt;pre&gt;&lt;samp&gt;You are in an open field west of a big white house with a boarded
      front door.
      There is a small mailbox here.

      &gt;&lt;/samp&gt; &lt;kbd&gt;open mailbox&lt;/kbd&gt;

      &lt;samp&gt;Opening the mailbox reveals:
      A leaflet.

      &gt;&lt;/samp&gt;&lt;/pre&gt;
    </pre>
  </div>

  <div class="example">
    The following shows a contemporary poem that uses the <code>pre</code> element to preserve its
    unusual formatting, which forms an intrinsic part of the poem itself.

    <pre highlight="html">
      &lt;pre&gt;                maxling

      it is with a          heart
                      heavy

      that i admit loss of a feline
              so           loved

      a friend lost to the
              unknown
                                      (night)

      ~cdr 11dec07&lt;/pre&gt;
    </pre>
  </div>

<h4 id="the-blockquote-element">The <dfn><code>blockquote</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning root</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>cite</code> - Link to the source of the quotation.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" highlight="webidl">
        interface HTMLQuoteElement : HTMLElement {
          attribute DOMString cite;
        };
      </pre>
      <p class="note">
        The <code>HTMLQuoteElement</code> interface is also used by the <code>q</code> element.
      </p>
    </dd>
  </dl>

  The <code>blockquote</code> element <a>represents</a> content that is quoted from another source,
  optionally with a citation which must be within a <code>footer</code> or <code>cite</code>
  element, and optionally with in-line changes such as annotations and abbreviations.

  Content inside a <code>blockquote</code> other than citations and in-line changes must be quoted
  from another source, whose address, if it has one, may be cited in the
  <dfn><code>cite</code></dfn> attribute.

  <p class="note">
    In cases where a page contains contributions from multiple people, such as comments on a blog
    post, '<i>another source</i>' can include text from the same page, written by another person.
  </p>

  If the <code>cite</code> attribute is present, it must be a
  <a>valid URL potentially surrounded by spaces</a>. <span class="impl">To obtain the corresponding
  citation link, the value of the attribute must be <a>resolved</a> relative to the element.</span>
  User agents may allow users to follow such citation links, but they are primarily intended for
  private use (e.g. by server-side scripts collecting statistics about a site's use of quotations),
  not for readers.

  <div class="impl">
    The <dfn><code>cite</code></dfn> IDL attribute must <a>reflect</a> the element's
    <code>cite</code> content attribute.
  </div>

  The content of a <code>blockquote</code> may be abbreviated, may have context added or may have
  annotations. Any such additions or changes to quoted text must be indicated in the text (at the
  text level). This may mean the use of notational conventions or explicit remarks, such as
  "emphasis mine".

  <div class="example">
    For example, in English, abbreviations are traditionally identified using square brackets.
    Consider a page with the sentence "Fred ate the cracker. He then said he liked apples and
    fish."; it could be quoted as follows:

    <pre highlight="html">
      &lt;blockquote&gt;
        &lt;p&gt;[Fred] then said he liked [...] fish.&lt;/p&gt;
      &lt;/blockquote&gt;
    </pre>
  </div>

  Quotation marks may be used to delineate between quoted text and annotations within a
  <code>blockquote</code>.

  <div class="example">
    For example, an in-line note provided by the author:

    <pre highlight="html">
      &lt;figure&gt;
      &lt;blockquote&gt;
      "That monster custom, who all sense doth eat
      Of habit's devil," <mark>&lt;abbr title="et cetera"&gt;&amp;c.&lt;/abbr&gt; not in Folio</mark>

      "What a falling off was there !
      From me, whose love was of that dignity
      That it went hand in hand even with the vow
      I made to her in marriage, and to decline
      Upon a wretch."
      &lt;/blockquote&gt;
      &lt;footer&gt;
      â &lt;cite class="title"&gt;Shakespeare manual&lt;/cite&gt; by &lt;cite class="author"&gt;Frederick Gard Fleay&lt;/cite&gt;,
      p19 (in Google Books)
      &lt;/footer&gt;
      &lt;/figure&gt;
    </pre>

    <p class="note">
      In the example above, the citation is contained within the <code>footer</code> of a
      <code>figure</code> element, this groups and associates the information, about the quote, with
      the quote. The <code>figcaption</code> element was not used, in this case, as a container for
      the citation as it is not a caption.
    </p>

  </div>

  Attribution for the quotation, may be be placed inside the <code>blockquote</code> element, but
  must be within a <code>cite</code> element for in-text attributions or within a
  <code>footer</code> element.

  <div class="example">
    For example, here the attribution is given in a <code>footer</code> after the quoted text, to
    clearly relate the quote to its attribution:

    <pre highlight="html">
      &lt;blockquote&gt;
        &lt;p&gt;I contend that we are both atheists. I just believe in one fewer
        god than you do. When you understand why you dismiss all the other
        possible gods, you will understand why I dismiss yours.&lt;/p&gt;
        &lt;footer&gt;â &lt;cite&gt;Stephen Roberts&lt;/cite&gt;&lt;/footer&gt;
      &lt;/blockquote&gt;
    </pre>
  </div>

  <div class="example">
    Here the attribution is given in a <code>cite</code> element on the last line of the quoted
    text. Note that a link to the author is also included.

    <pre highlight="html">
      &lt;blockquote&gt;
        The people recognize themselves in their commodities; they find their
        soul in their automobile, hi-fi set, split-level home, kitchen equipment.
        â <strong>&lt;cite&gt;&lt;a href="http://en.wikipedia.org/wiki/Herbert_Marcuse"&gt;Herbert Marcuse&lt;/a&gt;&lt;/cite&gt;</strong>
      &lt;/blockquote&gt;
    </pre>
  </div>

  <div class="example">
    Here the attribution is given in a <code>footer</code> after the quoted text, and metadata about
    the reference has been added using the <a>Microdata</a> syntax (note it could have equally been
    marked up using <a>RDFA Lite</a>).

    <pre highlight="html">
      &lt;blockquote&gt;
        &lt;p&gt;... she said she would not sign any deposition containing the word "amorous"
        instead of "advances". For her the difference was of crucial significance,
        and one of the reasons she had separated from her husband was that he had never been
        amorous but had consistently made advances.&lt;/p&gt;

        &lt;footer itemscope itemtype="http://schema.org/Book"&gt;
          &lt;span itemprop="author"&gt;Heinrich BÃ¶ll&lt;/span&gt;,
          &lt;span itemprop="name"&gt;The Lost Honor of Katharina Blum&lt;/span&gt;,
          &lt;span itemprop="datePublished"&gt;January 1, 1974&lt;/span&gt;
        &lt;/footer&gt;
      &lt;/blockquote&gt;
    </pre>
  </div>

  <p class="note">
    There is no formal method for indicating the markup in a <code>blockquote</code> is from a
    quoted source. It is suggested that if the <code>footer</code> or <code>cite</code> elements are
    included and these elements are also being used within a <code>blockquote</code> to identify
    citations, the elements from the quoted source could be annotated with metadata to identify
    their origin, for example by using the <code>class</code> attribute (a defined
    <a>extensibility</a> mechanism).
  </p>

  <div class="example">
    In this example the source of a quote includes a <code>cite</code> element, which is annotated
    using the <code>class</code> attribute:

    <pre highlight="html">
      &lt;blockquote&gt;
        &lt;p&gt;My favorite book is <mark>&lt;cite class="from-source"&gt;At Swim-Two-Birds&lt;/cite&gt;</mark>&lt;/p&gt;
        &lt;footer&gt;- &lt;cite&gt;Mike[tm]Smith&lt;/cite&gt;&lt;/footer&gt;
      &lt;/blockquote&gt;
    </pre>
  </div>

  The other examples below show other ways of showing attribution.

  <div class="example">
    Here a <code>blockquote</code> element is used in conjunction with a <code>figure</code> element
    and its <code>figcaption</code>:

    <pre highlight="html">
      &lt;figure&gt;
        &lt;blockquote&gt;
        &lt;p&gt;The truth may be puzzling. It may take some work to grapple with.
        It may be counterintuitive. It may contradict deeply held
        prejudices. It may not be consonant with what we desperately want to
        be true. But our preferences do not determine what's true. We have a
        method, and that method helps us to reach not absolute truth, only
        asymptotic approaches to the truth â never there, just closer
        and closer, always finding vast new oceans of undiscovered
        possibilities. Cleverly designed experiments are the key.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;figcaption&gt;&lt;cite&gt;Carl Sagan&lt;/cite&gt;, in "&lt;cite&gt;Wonder and Skepticism&lt;/cite&gt;", from
        the &lt;cite&gt;Skeptical Enquirer&lt;/cite&gt; Volume 19, Issue 1 (January-February
        1995)&lt;/figcaption&gt;
      &lt;/figure&gt;
    </pre>
  </div>

  <div class="example">
    This next example shows the use of <code>cite</code> alongside <code>blockquote</code>:

    <pre highlight="html">
      &lt;p&gt;His next piece was the aptly named &lt;cite&gt;Sonnet 130&lt;/cite&gt;:&lt;/p&gt;
      &lt;blockquote cite="http://quotes.example.org/s/sonnet130.html"&gt;
        &lt;p&gt;My mistress' eyes are nothing like the sun,&lt;br&gt;
        Coral is far more red, than her lips red,&lt;br&gt;
        ...
    </pre>
  </div>

  <div class="example">
    This example shows how a forum post could use <code>blockquote</code> to show what post a user
    is replying to. The <code>article</code> element is used for each post, to mark up the
    threading.

    <pre highlight="html">
      &lt;article&gt;
        &lt;h1&gt;&lt;a href="http://bacon.example.com/?blog=109431"&gt;Bacon on a crowbar&lt;/a&gt;&lt;/h1&gt;
        &lt;article&gt;
        &lt;header&gt;&lt;strong&gt;t3yw&lt;/strong&gt; 12 points 1 hour ago&lt;/header&gt;
        &lt;p&gt;I bet a narwhal would love that.&lt;/p&gt;
        &lt;footer&gt;&lt;a href="?pid=29578"&gt;permalink&lt;/a&gt;&lt;/footer&gt;
        &lt;article&gt;
          &lt;header&gt;&lt;strong&gt;greg&lt;/strong&gt; 8 points 1 hour ago&lt;/header&gt;
          &lt;blockquote&gt;&lt;p&gt;I bet a narwhal would love that.&lt;/p&gt;&lt;/blockquote&gt;
          &lt;p&gt;Dude narwhals don't eat bacon.&lt;/p&gt;
          &lt;footer&gt;&lt;a href="?pid=29579"&gt;permalink&lt;/a&gt;&lt;/footer&gt;
          &lt;article&gt;
          &lt;header&gt;&lt;strong&gt;t3yw&lt;/strong&gt; 15 points 1 hour ago&lt;/header&gt;
          &lt;blockquote&gt;
            &lt;blockquote&gt;&lt;p&gt;I bet a narwhal would love that.&lt;/p&gt;&lt;/blockquote&gt;
            &lt;p&gt;Dude narwhals don't eat bacon.&lt;/p&gt;
          &lt;/blockquote&gt;
          &lt;p&gt;Next thing you'll be saying they don't get capes and wizard
          hats either!&lt;/p&gt;
          &lt;footer&gt;&lt;a href="?pid=29580"&gt;permalink&lt;/a&gt;&lt;/footer&gt;
          &lt;article&gt;
            &lt;article&gt;
            &lt;header&gt;&lt;strong&gt;boing&lt;/strong&gt; -5 points 1 hour ago&lt;/header&gt;
            &lt;p&gt;narwhals are worse than ceiling cat&lt;/p&gt;
            &lt;footer&gt;&lt;a href="?pid=29581"&gt;permalink&lt;/a&gt;&lt;/footer&gt;
            &lt;/article&gt;
          &lt;/article&gt;
          &lt;/article&gt;
        &lt;/article&gt;
        &lt;article&gt;
          &lt;header&gt;&lt;strong&gt;fred&lt;/strong&gt; 1 points 23 minutes ago&lt;/header&gt;
          &lt;blockquote&gt;&lt;p&gt;I bet a narwhal would love that.&lt;/p&gt;&lt;/blockquote&gt;
          &lt;p&gt;I bet they'd love to peel a banana too.&lt;/p&gt;
          &lt;footer&gt;&lt;a href="?pid=29582"&gt;permalink&lt;/a&gt;&lt;/footer&gt;
        &lt;/article&gt;
        &lt;/article&gt;
      &lt;/article&gt;
    </pre>
  </div>

  <div class="example">
    This example shows the use of a <code>blockquote</code> for short snippets, demonstrating that
    one does not have to use <code>p</code> elements inside <code>blockquote</code> elements:

    <pre highlight="html">
      &lt;p&gt;He began his list of "lessons" with the following:&lt;/p&gt;
      &lt;blockquote&gt;One should never assume that his side of
      the issue will be recognized, let alone that it will
      be conceded to have merits.&lt;/blockquote&gt;
      &lt;p&gt;He continued with a number of similar points, ending with:&lt;/p&gt;
      &lt;blockquote&gt;Finally, one should be prepared for the threat
      of breakdown in negotiations at any given moment and not
      be cowed by the possibility.&lt;/blockquote&gt;
      &lt;p&gt;We shall now discuss these points...
    </pre>
  </div>

  <p class="note">
    <a>Examples of how to represent a conversation</a> are shown in a later section; it is not
    appropriate to use the <code>cite</code> and <code>blockquote</code> elements for this purpose.
  </p>

<h4 id="the-ol-element">The <dfn><code>ol</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd>
      If the element's children include at least one <code>li</code> element:
      <a>Palpable content</a>.
    </dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Zero or more <code>li</code> and <a>script-supporting</a> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>reversed</code> - Number the list backwards.</dd>
    <dd><code>start</code> - <a>Ordinal value</a> of the first item </dd>
    <dd><code>type</code> - Kind of list marker.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>list</code></a> role (default - <a><em>do not set</em></a>),
      <a><code>directory</code></a>, <a><code>group</code></a>,  <a><code>listbox</code></a>,
      <a><code>menu</code></a>, <a><code>menubar</code></a>, <a><code>presentation</code></a>,
      <a><code>radiogroup</code></a>, <a><code>tablist</code></a>, <a><code>toolbar</code></a> or
      <a><code>tree</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" highlight="webidl">
        interface HTMLOListElement : HTMLElement {
          attribute boolean reversed;
          attribute long start;
          attribute DOMString type;
        };
      </pre>
    </dd>
  </dl>

  The <code>ol</code> element <a>represents</a> a list of items, where the items have been
  intentionally ordered, such that changing the order would change the meaning of the document.

  The items of the list are the <code>li</code> element child nodes of the <code>ol</code> element,
  in <a>tree order</a>.

  The <dfn><code>reversed</code></dfn> attribute is a <a>boolean attribute</a>. If present, it
  indicates that the list is a descending list (..., 3, 2, 1). If the attribute is omitted, the list
  is an ascending list (1, 2, 3, ...).

  The <dfn><code>start</code></dfn> attribute, if present, must be a <a>valid integer</a> giving the
  <a>ordinal value</a> of the first list item.

  <div class="impl">
    If the <code>start</code> attribute is present, user agents must <a>parse it as an integer</a>,
    in order to determine the attribute's value. The default value, used if the attribute is missing
    or if the value cannot be converted to a number according to the referenced algorithm, is 1 if
    the element has no <code>reversed</code> attribute, and is the number of child <code>li</code>
    elements otherwise.

    The first item in the list has the <a>ordinal value</a> given by the <code>ol</code> element's
    <code>start</code> attribute, unless that <code>li</code> element has a <code>value</code>
    attribute with a value that can be successfully parsed, in which case it has the
    <a>ordinal value</a> given by that <code>value</code> attribute.

    Each subsequent item in the list has the <a>ordinal value</a> given by its <code>value</code>
    attribute, if it has one, or, if it doesn't, the <a>ordinal value</a> of the previous item, plus
    one if the <code>reversed</code> is absent, or minus one if it is present.
  </div>

  The <dfn><code>type</code></dfn> attribute can be used to specify the kind of marker to use in the
  list, in the cases where that matters (e.g. because items are to be referenced by their
  number/letter). The attribute, if specified, must have a value that is a <a>case-sensitive</a>
  match for one of the characters given in the first cell of one of the rows of the following table.
  <span class="impl">The <code>type</code> attribute represents the state given in the cell in the
  second column of the row whose first cell matches the attribute's value; if none of the cells
  match, or if the attribute is omitted, then the attribute represents the <a>decimal</a>
  state.</span>

  <table>
    <thead>
      <tr>
        <th>Keyword</th>
        <th>State</th>
        <th>Description</th>
        <th colspan="8">Examples for values 1-3 and 3999-4001</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><dfn><code>1</code></dfn> (U+0031)</td>
        <td><dfn>decimal</dfn></td>
        <td>Decimal numbers</td>
        <td class="eg"><samp>1.</samp></td>
        <td class="eg"><samp>2.</samp></td>
        <td class="eg"><samp>3.</samp></td>
        <td class="eg">... </td>
        <td class="eg"><samp>3999.</samp></td>
        <td class="eg"><samp>4000.</samp></td>
        <td class="eg"><samp>4001.</samp></td>
        <td class="eg">...</td>
      </tr>
      <tr>
        <td><dfn><code>a</code></dfn> (U+0061)</td>
        <td><dfn>lower-alpha</dfn></td>
        <td>Lowercase latin alphabet</td>
        <td class="eg"><samp>a.</samp></td>
        <td class="eg"><samp>b.</samp></td>
        <td class="eg"><samp>c.</samp></td>
        <td class="eg">... </td>
        <td class="eg"><samp>ewu.</samp></td>
        <td class="eg"><samp>ewv.</samp></td>
        <td class="eg"><samp>eww.</samp></td>
        <td class="eg">...</td>
      </tr>
      <tr>
        <td><dfn><code>A</code></dfn> (U+0041)</td>
        <td><dfn>upper-alpha</dfn></td>
        <td>Uppercase latin alphabet</td>
        <td class="eg"><samp>A.</samp></td>
        <td class="eg"><samp>B.</samp></td>
        <td class="eg"><samp>C.</samp></td>
        <td class="eg">... </td>
        <td class="eg"><samp>EWU.</samp></td>
        <td class="eg"><samp>EWV.</samp></td>
        <td class="eg"><samp>EWW.</samp></td>
        <td class="eg">...</td>
      </tr>
      <tr>
        <td><dfn><code>i</code></dfn> (U+0069)</td>
        <td><dfn>lower-roman</dfn></td>
        <td>Lowercase roman numerals</td>
        <td class="eg"><samp>i.</samp></td>
        <td class="eg"><samp>ii.</samp></td>
        <td class="eg"><samp>iii.</samp></td>
        <td class="eg">... </td>
        <td class="eg"><samp>mmmcmxcix.</samp></td>
        <td class="eg"><samp>iÌvÌ.</samp></td>
        <td class="eg"><samp>iÌvÌi.</samp></td>
        <td class="eg">...</td>
      </tr>
      <tr>
        <td><dfn><code>I</code></dfn> (U+0049)</td>
        <td><dfn>upper-roman</dfn></td>
        <td>Uppercase roman numerals</td>
        <td class="eg"><samp>I.</samp></td>
        <td class="eg"><samp>II.</samp></td>
        <td class="eg"><samp>III.</samp></td>
        <td class="eg">... </td>
        <td class="eg"><samp>MMMCMXCIX.</samp></td>
        <td class="eg"><samp>IÌVÌ.</samp></td>
        <td class="eg"><samp>IÌVÌI.</samp></td>
        <td class="eg">...</td>
      </tr>
    </tbody>
  </table>

  <div class="impl">
    User agents should render the items of the list in a manner consistent with the state of the
    <code>type</code> attribute of the <code>ol</code> element. Numbers less than or equal to zero
    should always use the decimal system regardless of the <code>type</code> attribute.

    <p class="note">
      For CSS user agents, a mapping for this attribute to the 'list-style-type' CSS property is
      given <a>in the rendering section</a> (the mapping is straightforward: the states above have
      the same names as their corresponding CSS values).
    </p>
  </div>

  <p class="note">
    It is possible to redefine the default CSS list styles used to implement this attribute in CSS
    user agents; doing so will affect how list items are rendered.
  </p>

  <div class="impl">
    The <dfn><code>reversed</code></dfn>, <dfn><code>start</code></dfn>, and
    <dfn><code>type</code></dfn> IDL attributes must <a>reflect</a> the respective content
    attributes of the same name. The <code>start</code> IDL attribute has the same default as its
    content attribute.
  </div>

  <div class="example">
    The following markup shows a list where the order matters, and where the <code>ol</code>
    element is therefore appropriate. Compare this list to the equivalent list in the
    <code>ul</code> section to see an example of the same items using the <code>ul</code> element.

    <pre highlight="html">
      &lt;p&gt;I have lived in the following countries (given in the order of when
      I first lived there):&lt;/p&gt;
      &lt;ol&gt;
        &lt;li&gt;Switzerland
        &lt;li&gt;United Kingdom
        &lt;li&gt;United States
        &lt;li&gt;Norway
      &lt;/ol&gt;
    </pre>

    Note how changing the order of the list changes the meaning of the document. In the following
    example, changing the relative order of the first two items has changed the birthplace of the
    author:

    <pre highlight="html">
      &lt;p&gt;I have lived in the following countries (given in the order of when
      I first lived there):&lt;/p&gt;
      &lt;ol&gt;
        &lt;li&gt;United Kingdom
        &lt;li&gt;Switzerland
        &lt;li&gt;United States
        &lt;li&gt;Norway
      &lt;/ol&gt;
    </pre>
  </div>

<h4 id="the-ul-element">The <dfn><code>ul</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd>
      If the element's children include at least one <code>li</code> element:
      <a>Palpable content</a>.
    </dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Zero or more <code>li</code> and <a>script-supporting</a> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>list</code></a> role (default - <a><em>do not set</em></a>),
      <a><code>directory</code></a>, <a><code>group</code></a>, <a><code>listbox</code></a>,
      <a><code>menu</code></a>, <a><code>menubar</code></a>, <a><code>presentation</code></a>,
      <a><code>radiogroup</code></a>, <a><code>tablist</code></a>, <a><code>toolbar</code></a> or
      <a><code>tree</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" highlight="webidl">
        interface HTMLUListElement : HTMLElement {};
      </pre>
    </dd>
  </dl>

  The <code>ul</code> element <a>represents</a> a list of items, where the order of the items is not
  important â that is, where changing the order would not materially change the meaning of the
  document.

  The items of the list are the <code>li</code> element child nodes of the <code>ul</code> element.

  <div class="example">
    The following markup shows a list where the order does not matter, and where the <code>ul</code>
    element is therefore appropriate. Compare this list to the equivalent list in the
    <code>ol</code> section to see an example of the same items using the <code>ol</code> element.

    <pre highlight="html">
      &lt;p&gt;I have lived in the following countries:&lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;Norway
        &lt;li&gt;Switzerland
        &lt;li&gt;United Kingdom
        &lt;li&gt;United States
      &lt;/ul&gt;
    </pre>

    Note that changing the order of the list does not change the meaning of the document. The
    items in the snippet above are given in alphabetical order, but in the snippet below they are
    given in order of the size of their current account balance in 2007, without changing the meaning
    of the document whatsoever:

    <pre highlight="html">
      &lt;p&gt;I have lived in the following countries:&lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;Switzerland
        &lt;li&gt;Norway
        &lt;li&gt;United Kingdom
        &lt;li&gt;United States
      &lt;/ul&gt;
    </pre>
  </div>

<h4 id="the-li-element">The <dfn><code>li</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Inside <code>ol</code> elements.</dd>
    <dd>Inside <code>ul</code> elements.</dd>
    <dd>
      Inside <code>menu</code> elements whose <code>type</code> attribute is in the <a>toolbar</a>
      state.
    </dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd>
      If the element is a child of an <code>ol</code> element: <code>value</code> -  Ordinal value
      of the list item
    </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      An <code>li</code> element's <a>end tag</a> may be omitted if the <code>li</code> element is
      immediately followed by another <code>li</code> element or if there is no more content in the
      parent element.
    </dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>listitem</code></a> role (default - <a><em>do not set</em></a>),
      <a><code>menuitem</code></a>, <a><code>menuitemcheckbox</code></a>,
      <a><code>menuitemradio</code></a>, <a><code>option</code></a>, <a><code>radio</code></a>,
      <a><code>tab</code></a>, <a><code>treeitem</code></a> or <a><code>presentation</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" highlight="webidl">
        interface HTMLLIElement : HTMLElement {
          attribute long value;
        };
      </pre>
    </dd>
  </dl>

  The <code>li</code> element <a>represents</a> a list item. If its parent element is an
  <code>ol</code>, <code>ul</code>, or <code>menu</code> element, then the element is an item of the
  parent element's list, as defined for those elements. Otherwise, the list item has no defined
  list-related relationship to any other <code>li</code> element.

  If the parent element is an <code>ol</code> element, then the <code>li</code> element has an
  <dfn>ordinal value</dfn>.

  The <dfn><code>value</code></dfn> attribute, if present, must be a <a>valid integer</a> giving the
  <a>ordinal value</a> of the list item.

  <div class="impl">
    If the <code>value</code> attribute is present, user agents must <a>parse it as an integer</a>,
    in order to determine the attribute's value. If the attribute's value cannot be converted to a
    number, the attribute must be treated as if it was absent. The attribute has no default value.

    The <code>value</code> attribute is processed relative to the element's parent <code>ol</code>
    element (q.v.), if there is one. If there is not, the attribute has no effect.

    The <dfn><code>value</code></dfn> IDL attribute must <a>reflect</a> the value of the
    <code>value</code> content attribute.
  </div>

  <div class="example">
    The following example, the top ten movies are listed (in reverse order). Note the way the list
    is given a title by using a <code>figure</code> element and its <code>figcaption</code> element.

    <pre highlight="html">
      &lt;figure&gt;
        &lt;figcaption&gt;The top 10 movies of all time&lt;/figcaption&gt;
        &lt;ol&gt;
          &lt;li value="10"&gt;&lt;cite&gt;Josie and the Pussycats&lt;/cite&gt;, 2001&lt;/li&gt;
          &lt;li value="9"&gt;&lt;cite lang="sh"&gt;Ð¦ÑÐ½Ð° Ð¼Ð°ÑÐºÐ°, Ð±ÐµÐ»Ð¸ Ð¼Ð°ÑÐ¾Ñ&lt;/cite&gt;, 1998&lt;/li&gt;
          &lt;li value="8"&gt;&lt;cite&gt;A Bug's Life&lt;/cite&gt;, 1998&lt;/li&gt;
          &lt;li value="7"&gt;&lt;cite&gt;Toy Story&lt;/cite&gt;, 1995&lt;/li&gt;
          &lt;li value="6"&gt;&lt;cite&gt;Monsters, Inc&lt;/cite&gt;, 2001&lt;/li&gt;
          &lt;li value="5"&gt;&lt;cite&gt;Cars&lt;/cite&gt;, 2006&lt;/li&gt;
          &lt;li value="4"&gt;&lt;cite&gt;Toy Story 2&lt;/cite&gt;, 1999&lt;/li&gt;
          &lt;li value="3"&gt;&lt;cite&gt;Finding Nemo&lt;/cite&gt;, 2003&lt;/li&gt;
          &lt;li value="2"&gt;&lt;cite&gt;The Incredibles&lt;/cite&gt;, 2004&lt;/li&gt;
          &lt;li value="1"&gt;&lt;cite&gt;Ratatouille&lt;/cite&gt;, 2007&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/figure&gt;
    </pre>

    The markup could also be written as follows, using the <code>reversed</code> attribute on the
    <code>ol</code> element:

    <pre highlight="html">
      &lt;figure&gt;
        &lt;figcaption&gt;The top 10 movies of all time&lt;/figcaption&gt;
        &lt;ol reversed&gt;
          &lt;li&gt;&lt;cite&gt;Josie and the Pussycats&lt;/cite&gt;, 2001&lt;/li&gt;
          &lt;li&gt;&lt;cite lang="sh"&gt;Ð¦ÑÐ½Ð° Ð¼Ð°ÑÐºÐ°, Ð±ÐµÐ»Ð¸ Ð¼Ð°ÑÐ¾Ñ&lt;/cite&gt;, 1998&lt;/li&gt;
          &lt;li&gt;&lt;cite&gt;A Bug's Life&lt;/cite&gt;, 1998&lt;/li&gt;
          &lt;li&gt;&lt;cite&gt;Toy Story&lt;/cite&gt;, 1995&lt;/li&gt;
          &lt;li&gt;&lt;cite&gt;Monsters, Inc&lt;/cite&gt;, 2001&lt;/li&gt;
          &lt;li&gt;&lt;cite&gt;Cars&lt;/cite&gt;, 2006&lt;/li&gt;
          &lt;li&gt;&lt;cite&gt;Toy Story 2&lt;/cite&gt;, 1999&lt;/li&gt;
          &lt;li&gt;&lt;cite&gt;Finding Nemo&lt;/cite&gt;, 2003&lt;/li&gt;
          &lt;li&gt;&lt;cite&gt;The Incredibles&lt;/cite&gt;, 2004&lt;/li&gt;
          &lt;li&gt;&lt;cite&gt;Ratatouille&lt;/cite&gt;, 2007&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/figure&gt;
    </pre>
  </div>

  <p class="note">
    While it is conforming to include heading elements (e.g. <code>h1</code>) inside <code>li</code>
    elements, it likely does not convey the semantics that the author intended. A heading starts a
    new section, so a heading in a list implicitly splits the list into spanning multiple sections.
  </p>

<h4 id="the-dl-element">The <dfn><code>dl</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd>If the element's children include at least one name-value group: <a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>
      Zero or more groups each consisting of one or more <code>dt</code> elements followed by one or
      more <code>dd</code> elements, optionally intermixed with <a>script-supporting elements</a>.
    </dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" highlight="webidl">
        interface HTMLDListElement : HTMLElement {};
      </pre>
    </dd>
  </dl>

  The <code>dl</code> element <a>represents</a> an association list consisting of zero or more
  name-value groups (a description list). A name-value group consists of one or more names
  (<code>dt</code> elements) followed by one or more values (<code>dd</code> elements), ignoring any
  nodes other than <code>dt</code> and <code>dd</code> elements. Within a single <code>dl</code>
  element, there should not be more than one <code>dt</code> element for each name.

  Name-value groups may be terms and definitions, metadata topics and values, questions and answers,
  or any other groups of name-value data.

  The values within a group are alternatives; multiple paragraphs forming part of the same value
  must all be given within the same <code>dd</code> element.

  The order of the list of groups, and of the names and values within each group, may be significant.

  <div class="impl">
    If a <code>dl</code> element has no <code>dt</code> or <code>dd</code> element children, it
    contains no groups.

    If a <code>dl</code> element has one or more non-<a>whitespace</a> <code>Text</code> node
    children, or has child elements that are neither <code>dt</code> nor <code>dd</code> elements,
    all such <code>Text</code> nodes and elements, as well as their descendants (including any
    <code>dt</code> or <code>dd</code> elements), do not form part of any groups in that
    <code>dl</code>.

    If a <code>dl</code> element has one or more <code>dt</code> element children but no
    <code>dd</code> element children, then it consists of one group with names but no values.

    If a <code>dl</code> element has one or more <code>dd</code> element children but no
    <code>dt</code> element children, then it consists of one group with values but no names.

    If a <code>dl</code> element's first <code>dt</code> or <code>dd</code> element child is a
    <code>dd</code> element, then the first group has no associated name.

    If a <code>dl</code> element's last <code>dt</code> or <code>dd</code> element child is a
    <code>dt</code> element, then the last group has no associated value.

    <p class="note">
      When a <code>dl</code> element doesn't match its content model, it is often due to
      accidentally using <code>dd</code> elements in the place of <code>dt</code> elements and vice
      versa. Conformance checkers can spot such mistakes and might be able to advise authors how to
      correctly use the markup.
    </p>
  </div>

  <div class="example">
    In the following example, one entry ("Authors") is linked to two values ("John" and "Luke").

    <pre highlight="html">
      &lt;dl&gt;
        &lt;dt&gt; Authors
        &lt;dd&gt; John
        &lt;dd&gt; Luke
        &lt;dt&gt; Editor
        &lt;dd&gt; Frank
      &lt;/dl&gt;
    </pre>
  </div>

  <div class="example">
    In the following example, one definition is linked to two terms.

    <pre highlight="html">
      &lt;dl&gt;
        &lt;dt lang="en-US"&gt; &lt;dfn&gt;color&lt;/dfn&gt; &lt;/dt&gt;
        &lt;dt lang="en-GB"&gt; &lt;dfn&gt;colour&lt;/dfn&gt; &lt;/dt&gt;
        &lt;dd&gt; A sensation which (in humans) derives from the ability of
        the fine structure of the eye to distinguish three differently
        filtered analyses of a view. &lt;/dd&gt;
      &lt;/dl&gt;
    </pre>
  </div>

  <div class="example">
    The following example illustrates the use of the <code>dl</code> element to mark up metadata of
    sorts. At the end of the example, one group has two metadata labels ("Authors" and "Editors")
    and two values ("Robert Rothman" and "Daniel Jackson").

    <pre highlight="html">
      &lt;dl&gt;
        &lt;dt&gt; Last modified time &lt;/dt&gt;
        &lt;dd&gt; 2004-12-23T23:33Z &lt;/dd&gt;
        &lt;dt&gt; Recommended update interval &lt;/dt&gt;
        &lt;dd&gt; 60s &lt;/dd&gt;
        &lt;dt&gt; Authors &lt;/dt&gt;
        &lt;dt&gt; Editors &lt;/dt&gt;
        &lt;dd&gt; Robert Rothman &lt;/dd&gt;
        &lt;dd&gt; Daniel Jackson &lt;/dd&gt;
      &lt;/dl&gt;
    </pre>
  </div>

  <div class="example">
    The following example shows the <code>dl</code> element used to give a set of instructions. The
    order of the instructions here is important (in the other examples, the order of the blocks was
    not important).

    <pre highlight="html">
      &lt;p&gt;Determine the victory points as follows (use the
      first matching case):&lt;/p&gt;
      &lt;dl&gt;
        &lt;dt&gt; If you have exactly five gold coins &lt;/dt&gt;
        &lt;dd&gt; You get five victory points &lt;/dd&gt;
        &lt;dt&gt; If you have one or more gold coins, and you have one or more silver coins &lt;/dt&gt;
        &lt;dd&gt; You get two victory points &lt;/dd&gt;
        &lt;dt&gt; If you have one or more silver coins &lt;/dt&gt;
        &lt;dd&gt; You get one victory point &lt;/dd&gt;
        &lt;dt&gt; Otherwise &lt;/dt&gt;
        &lt;dd&gt; You get no victory points &lt;/dd&gt;
      &lt;/dl&gt;
    </pre>
  </div>

  <div class="example">
    The following snippet shows a <code>dl</code> element being used as a glossary. Note the use of
    <code>dfn</code> to indicate the word being defined.

    <pre highlight="html">
      &lt;dl&gt;
        &lt;dt&gt;&lt;dfn&gt;Apartment&lt;/dfn&gt;, n.&lt;/dt&gt;
        &lt;dd&gt;An execution context grouping one or more threads with one or
        more COM objects.&lt;/dd&gt;
        &lt;dt&gt;&lt;dfn&gt;Flat&lt;/dfn&gt;, n.&lt;/dt&gt;
        &lt;dd&gt;A deflated tire.&lt;/dd&gt;
        &lt;dt&gt;&lt;dfn&gt;Home&lt;/dfn&gt;, n.&lt;/dt&gt;
        &lt;dd&gt;The user's login directory.&lt;/dd&gt;
      &lt;/dl&gt;
    </pre>
  </div>

<h4 id="the-dt-element">The <dfn><code>dt</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Before <code>dd</code> or <code>dt</code> elements inside <code>dl</code> elements.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>
      <a>Flow content</a>, but with no <code>header</code>, <code>footer</code>,
      <a>sectioning content</a>, or <a>heading content</a> descendants.
    </dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      A <code>dt</code> element's <a>end tag</a> may be omitted if the <code>dt</code> element is
      immediately followed by another <code>dt</code> element or a <code>dd</code> element.
    </dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>dt</code> element <a>represents</a> the term, or name, part of a term-description group
  in a description list (<code>dl</code> element).

  <p class="note">
    The <code>dt</code> element itself, when used in a <code>dl</code> element, does not indicate
    that its contents are a term being defined, but this can be indicated using the <code>dfn</code>
    element.
  </p>

  <div class="example">
    This example shows a list of frequently asked questions (a FAQ) marked up using the
    <code>dt</code> element for questions and the <code>dd</code> element for answers.

    <pre highlight="html">
      &lt;article&gt;
        &lt;h1&gt;FAQ&lt;/h1&gt;
        &lt;dl&gt;
          &lt;dt&gt;What do we want?&lt;/dt&gt;
          &lt;dd&gt;Our data.&lt;/dd&gt;
          &lt;dt&gt;When do we want it?&lt;/dt&gt;
          &lt;dd&gt;Now.&lt;/dd&gt;
          &lt;dt&gt;Where is it?&lt;/dt&gt;
          &lt;dd&gt;We are not sure.&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/article&gt;
    </pre>
  </div>

<h4 id="the-dd-element">The <dfn><code>dd</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>After <code>dt</code> or <code>dd</code> elements inside <code>dl</code> elements.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      A <code>dd</code> element's <a>end tag</a> may be omitted if the <code>dd</code> element is
      immediately followed by another <code>dd</code> element or a <code>dt</code> element, or if
      there is no more content in the parent element.
    </dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>dd</code> element <a>represents</a> the description, definition, or value, part of a
  term-description group in a description list (<code>dl</code> element).

  <div class="example">
    A <code>dl</code> can be used to define a vocabulary list, like in a dictionary. In the
    following example, each entry, given by a <code>dt</code> with a <code>dfn</code>, has several
    <code>dd</code>s, showing the various parts of the definition.

    <pre highlight="html">
      &lt;dl&gt;
        &lt;dt&gt;&lt;dfn&gt;happiness&lt;/dfn&gt;&lt;/dt&gt;
        &lt;dd class="pronunciation"&gt;/'hÃ¦ p. nes/&lt;/dd&gt;
        &lt;dd class="part-of-speech"&gt;&lt;i&gt;&lt;abbr&gt;n.&lt;/abbr&gt;&lt;/i&gt;&lt;/dd&gt;
        &lt;dd&gt;The state of being happy.&lt;/dd&gt;
        &lt;dd&gt;Good fortune; success. &lt;q&gt;Oh &lt;b&gt;happiness&lt;/b&gt;! It worked!&lt;/q&gt;&lt;/dd&gt;
        &lt;dt&gt;&lt;dfn&gt;rejoice&lt;/dfn&gt;&lt;/dt&gt;
        &lt;dd class="pronunciation"&gt;/ri jois'/&lt;/dd&gt;
        &lt;dd&gt;&lt;i class="part-of-speech"&gt;&lt;abbr&gt;v.intr.&lt;/abbr&gt;&lt;/i&gt; To be delighted oneself.&lt;/dd&gt;
        &lt;dd&gt;&lt;i class="part-of-speech"&gt;&lt;abbr&gt;v.tr.&lt;/abbr&gt;&lt;/i&gt; To cause one to be delighted.&lt;/dd&gt;
      &lt;/dl&gt;
    </pre>
  </div>

<h4 id="the-figure-element">The <dfn><code>figure</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning root</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Either: One <code>figcaption</code> element followed by <a>flow content</a>.</dd>
    <dd>Or: <a>Flow content</a> followed by one <code>figcaption</code> element.</dd>
    <dd>Or: <a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>figure</code> element <a>represents</a> some <a>flow content</a>, optionally with a
  caption, that is self-contained (like a complete sentence) and is typically referenced as a single
  unit from the main flow of the document.

  <p class="note">
    Self-contained in this context does not necessarily mean independent. For example, each sentence
    in a paragraph is self-contained; an image that is part of a sentence would be inappropriate for
    <code>figure</code>, but an entire sentence made of images would be fitting.
  </p>

  The element can thus be used to annotate illustrations, diagrams, photos, code listings, etc.

  <div class="note">
    When a <code>figure</code> is referred to from the main content of the document by identifying
    it by its caption (e.g. by figure number), it enables such content to be easily moved away from
    that primary content, e.g. to the side of the page, to dedicated pages, or to an appendix,
    without affecting the flow of the document.

    If a <code>figure</code> element is referenced by its relative position, e.g. "in the photograph
    above" or "as the next figure shows", then moving the figure would disrupt the page's meaning.
    Authors are encouraged to consider using labels to refer to figures, rather than using such
    relative references, so that the page can easily be restyled without affecting the page's
    meaning.
  </div>

  The <span class="impl">first</span> <code>figcaption</code> element child of the element, if any,
  represents the caption of the <code>figure</code> element's contents. If there is no child
  <code>figcaption</code> element, then there is no caption.

  A <code>figure</code> element's contents are part of the surrounding flow. If the purpose of the
  page is to display the figure, for example a photograph on an image sharing site, the
  <code>figure</code> and <code>figcaption</code> elements can be used to explicitly provide a
  caption for that figure. For content that is only tangentially related, or that serves a separate
  purpose than the surrounding flow, the <code>aside</code> element should be used (and can itself
  wrap a <code>figure</code>). For example, a pull quote that repeats content from an
  <code>article</code> would be more appropriate in an <code>aside</code> than in a
  <code>figure</code>, because it isn't part of the content, it's a repetition of the content for
  the purposes of enticing readers or highlighting key topics.

  <div class="example">
    This example shows the <code>figure</code> element to mark up a code listing.

    <pre highlight="html">
      &lt;p&gt;In &lt;a href="#l4"&gt;listing 4&lt;/a&gt; we see the primary core interface
      API declaration.&lt;/p&gt;
      &lt;figure id="l4"&gt;
        &lt;figcaption&gt;Listing 4. The primary core interface API declaration.&lt;/figcaption&gt;
        &lt;pre&gt;&lt;code&gt;interface PrimaryCore {
        boolean verifyDataLine();
        void sendData(in sequence&amp;lt;byte&gt; data);
        void initSelfDestruct();
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/figure&gt;
      &lt;p&gt;The API is designed to use UTF-8.&lt;/p&gt;
    </pre>
  </div>

  <div class="example">
    Here we see a <code>figure</code> element to mark up a photo that is the main content of the
    page (as in a gallery).

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;title&gt;Bubbles at work â My Galleryâ¢&lt;/title&gt;
      &lt;figure&gt;
        &lt;img src="bubbles-work.jpeg"
            alt="Bubbles, sitting in his office chair, works on his
                  latest project intently."&gt;
        &lt;figcaption&gt;Bubbles at work&lt;/figcaption&gt;
      &lt;/figure&gt;
      &lt;nav&gt;&lt;a href="19414.html"&gt;Prev&lt;/a&gt; â &lt;a href="19416.html"&gt;Next&lt;/a&gt;&lt;/nav&gt;
    </pre>
  </div>

  <div class="example">
    In this example, we see an image that is <em>not</em> a figure, as well as an image and a video
    that are. The first image is literally part of the example's second sentence, so it's not a
    self-contained unit, and thus <code>figure</code> would be inappropriate.

    <pre highlight="html">
      &lt;h2&gt;Malinko's comics&lt;/h2&gt;

      &lt;p&gt;This case centered on some sort of "intellectual property"
      infringement related to a comic (see Exhibit A). The suit started
      after a trailer ending with these words:

      &lt;blockquote&gt;
        &lt;img src="promblem-packed-action.png" alt="ROUGH COPY! Promblem-Packed Action!"&gt;
      &lt;/blockquote&gt;

      &lt;p&gt;...was aired. A lawyer, armed with a Bigger Notebook, launched a
      preemptive strike using snowballs. A complete copy of the trailer is
      included with Exhibit B.

      &lt;figure&gt;
        &lt;img src="ex-a.png" alt="Two squiggles on a dirty piece of paper."&gt;
        &lt;figcaption&gt;Exhibit A. The alleged &lt;cite&gt;rough copy&lt;/cite&gt; comic.&lt;/figcaption&gt;
      &lt;/figure&gt;

      &lt;figure&gt;
        &lt;video src="ex-b.mov"&gt;&lt;/video&gt;
        &lt;figcaption&gt;Exhibit B. The &lt;cite&gt;Rough Copy&lt;/cite&gt; trailer.&lt;/figcaption&gt;
      &lt;/figure&gt;

      &lt;p&gt;The case was resolved out of court.
    </pre>
  </div>

  <div class="example">
    Here, a part of a poem is marked up using <code>figure</code>.

    <pre highlight="html">
      &lt;figure&gt;
        &lt;p&gt;'Twas brillig, and the slithy toves&lt;br&gt;
        Did gyre and gimble in the wabe;&lt;br&gt;
        All mimsy were the borogoves,&lt;br&gt;
        And the mome raths outgrabe.&lt;/p&gt;
        &lt;figcaption&gt;&lt;cite&gt;Jabberwocky&lt;/cite&gt; (first verse). Lewis Carroll, 1832-98&lt;/figcaption&gt;
      &lt;/figure&gt;
    </pre>
  </div>

  <div class="example">
    In this example, which could be part of a much larger work discussing a castle, nested
    <code>figure</code> elements are used to provide both a group caption and individual captions for
    each figure in the group:

    <pre highlight="html">
      &lt;figure&gt;
        &lt;figcaption&gt;The castle through the ages: 1423, 1858, and 1999 respectively.&lt;/figcaption&gt;
        &lt;figure&gt;
          &lt;figcaption&gt;Etching. Anonymous, ca. 1423.&lt;/figcaption&gt;
          &lt;img src="castle1423.jpeg" alt="The castle has one tower, and a tall wall around it."&gt;
        &lt;/figure&gt;
        &lt;figure&gt;
          &lt;figcaption&gt;Oil-based paint on canvas. Maria Towle, 1858.&lt;/figcaption&gt;
          &lt;img src="castle1858.jpeg" alt="The castle now has two towers and two walls."&gt;
        &lt;/figure&gt;
        &lt;figure&gt;
          &lt;figcaption&gt;Film photograph. Peter Jankle, 1999.&lt;/figcaption&gt;
          &lt;img src="castle1999.jpeg" alt="The castle lies in ruins, the original tower all that remains in one piece."&gt;
        &lt;/figure&gt;
      &lt;/figure&gt;
    </pre>
  </div>

  <div class="example">
    The previous example could also be more succintly written as follows (using <code>title</code>
    attributes in place of the nested <code>figure</code>/<code>figcaption</code> pairs):

    <pre highlight="html">
      &lt;figure&gt;
        &lt;img src="castle1423.jpeg" title="Etching. Anonymous, ca. 1423."
            alt="The castle has one tower, and a tall wall around it."&gt;
        &lt;img src="castle1858.jpeg" title="Oil-based paint on canvas. Maria Towle, 1858."
            alt="The castle now has two towers and two walls."&gt;
        &lt;img src="castle1999.jpeg" title="Film photograph. Peter Jankle, 1999."
            alt="The castle lies in ruins, the original tower all that remains in one piece."&gt;
        &lt;figcaption&gt;The castle through the ages: 1423, 1858, and 1999 respectively.&lt;/figcaption&gt;
      &lt;/figure&gt;
    </pre>
  </div>

  <div class="example">
    The figure is sometimes referenced only implicitly from the content:

    <pre highlight="html">
      &lt;article&gt;
        &lt;h1&gt;Fiscal negotiations stumble in Congress as deadline nears&lt;/h1&gt;
        &lt;figure&gt;
          &lt;img src="obama-reid.jpeg" alt="Obama and Reid sit together smiling in the Oval Office."&gt;
          &lt;figcaption&gt;Barrak Obama and Harry Reid. White House press photograph.&lt;/figcaption&gt;
        &lt;/figure&gt;
        &lt;p&gt;Negotiations in Congress to end the fiscal impasse sputtered on Tuesday, leaving both chambers
        grasping for a way to reopen the government and raise the country's borrowing authority with a
        Thursday deadline drawing near.&lt;/p&gt;
        ...
      &lt;/article&gt;
    </pre>
  </div>

<h4 id="the-figcaption-element">The <dfn><code>figcaption</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As the first or last child of a <code>figure</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>figcaption</code> element <a>represents</a> a caption or legend for the rest of the
  contents of the <code>figcaption</code> element's parent <code>figure</code>
  element<span class="impl">, if any</span>.

<h4 id="the-main-element">The <dfn><code>main</code></dfn> element</h4>
  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>main</code></a> role (default - <a><em>do not set</em></a>) or
      <a><code>presentation</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
    Uses <code>HTMLElement</code>
    </dd>
  </dl>

  The <code>main</code> element can be used as a container for the dominant contents of another
  element. It <a>represents</a> its children.

  <p class="note">
    The <code>main</code> element is not <a>sectioning content</a> and has no effect on the document
    <a>outline</a>
  </p>
  The main content area of a document includes content that is unique to that document and excludes
  content that is repeated  across a set of documents such as site navigation links, copyright
  information, site logos and banners and search forms (unless the document or applications main
  function is that of a search form).

  <p class="note">
    There is no restriction as to the number of <code>main</code> elements in a document. Indeed,
    there are many cases where it would make sense to have multiple <code>main</code> elements. For
    example, a page with multiple <code>article</code> elements might need to indicate the dominant
    contents of each such element.
  </p>

  Authors must not include the <code>main</code> element as a descendant of an <code>article</code>,
  <code>aside</code>, <code>footer</code>, <code>header</code> or <code>nav</code> element.

  <p class="note">
    The <code>main</code> element is not suitable for use to identify the main content areas of sub
    sections of a document or application. The simplest solution is to not mark up the main content
    of a sub section at all, and just leave it as implicit, but an author could use a
    <a>grouping content</a> or <a>sectioning content</a> element as appropriate.
  </p>

  <p class="note">
    Authors are advised to use ARIA <code>role="main"</code> attribute on the <code>main</code>
    element until user agents implement the required role mapping.
  </p>

  <div class="example">
    <pre highlight="html">
      &lt;main role="main"&gt;
        ...
      &lt;/main&gt;
    </pre>
  </div>

    In the following example, we see 2 articles about skateboards (the main topic of a Web page) the
    main topic content is identified by the use of the <code>main</code> element.

  <div class="example">
    <pre highlight="html">
      &lt;!-- other content --&gt;

      &lt;main&gt;

        &lt;h1&gt;Skateboards&lt;/h1&gt;
        &lt;p&gt;The skateboard is the way cool kids get around&lt;/p&gt;

        &lt;article&gt;
          &lt;h2&gt;Longboards&lt;/h2&gt;
          &lt;p&gt;Longboards are a type of skateboard with a longer
          wheelbase and larger, softer wheels.&lt;/p&gt;
          &lt;p&gt;... &lt;/p&gt;
          &lt;p&gt;... &lt;/p&gt;
        &lt;/article&gt;

        &lt;article&gt;
          &lt;h2&gt;Electric Skateboards&lt;/h2&gt;
          &lt;p&gt;These no longer require the propelling of the skateboard
          by means of the feet; rather an electric motor propels the board,
          fed by an electric battery.&lt;/p&gt;
          &lt;p&gt;... &lt;/p&gt;
          &lt;p&gt;... &lt;/p&gt;
        &lt;/article&gt;

      &lt;/main&gt;

      &lt;!-- other content --&gt;
    </pre>
  </div>

  Here is a graduation programme the main content section is defined by the use of the
  <code>main</code> element. Note in this example the <code>main</code> element contains a
  <code>nav</code> element consisting of links to sub sections of the main content.

  <div class="example">
    <pre highlight="html">
      &lt;!DOCTYPE html&gt;
      &lt;html lang="en"&gt;
        &lt;head&gt;
          &lt;title&gt;Graduation Ceremony Summer 2022&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;

          &lt;header&gt;The Lawson Academy:
          &lt;nav&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="courses.html"&gt;Courses&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="fees.html"&gt;Fees&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a&gt;Graduation&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/nav&gt;
          &lt;/header&gt;

          &lt;main&gt;

            &lt;h1&gt;Graduation&lt;/h1&gt;

            &lt;nav&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;a href="#ceremony"&gt;Ceremony&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="#graduates"&gt;Graduates&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="#awards"&gt;Awards&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/nav&gt;

            &lt;H2 id="ceremony"&gt;Ceremony&lt;/H2&gt;
            &lt;p&gt;Opening Procession&lt;/p&gt;
            &lt;p&gt;Speech by Valedictorian&lt;/p&gt;
            &lt;p&gt;Speech by Class President&lt;/p&gt;
            &lt;p&gt;Presentation of Diplomas&lt;/p&gt;
            &lt;p&gt;Closing Speech by Headmaster&lt;/p&gt;

            &lt;h2 id="graduates"&gt;Graduates&lt;/h2&gt;
            &lt;ul&gt;
              &lt;li&gt;Eileen Williams&lt;/li&gt;
              &lt;li&gt;Andy Maseyk&lt;/li&gt;
              &lt;li&gt;Blanca Sainz Garcia&lt;/li&gt;
              &lt;li&gt;Clara Faulkner&lt;/li&gt;
              &lt;li&gt;Gez Lemon&lt;/li&gt;
              &lt;li&gt;Eloisa Faulkner&lt;/li&gt;
            &lt;/ul&gt;

            &lt;h2 id="awards"&gt;Awards&lt;/h2&gt;
            &lt;ul&gt;
              &lt;li&gt;Clara Faulkner&lt;/li&gt;
              &lt;li&gt;Eloisa Faulkner&lt;/li&gt;
              &lt;li&gt;Blanca Sainz Garcia&lt;/li&gt;
            &lt;/ul&gt;

          &lt;/main&gt;

          &lt;footer&gt; Copyright 2012 B.lawson&lt;/footer&gt;

        &lt;/body&gt;
      &lt;/html&gt;
    </pre>
  </div>

<h4 id="the-div-element">The <dfn><code>div</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" highlight="webidl">
        interface HTMLDivElement : HTMLElement {};
      </pre>
    </dd>
  </dl>

  The <code>div</code> element has no special meaning at all. It <a>represents</a> its children. It
  can be used with the <code>class</code>, <code>lang</code>, and <code>title</code> attributes to
  mark up semantics common to a group of consecutive elements.

  <p class="note">
    Authors are strongly encouraged to view the <code>div</code> element as an element of last
    resort, for when no other element is suitable. Use of more appropriate elements instead of the
    <code>div</code> element leads to better accessibility for readers and easier maintainability
    for authors.
  </p>

  <div class="example">
    For example, a blog post would be marked up using <code>article</code>, a chapter using
    <code>section</code>, a page's navigation aids using <code>nav</code>, and a group of form
    controls using <code>fieldset</code>.

    On the other hand, <code>div</code> elements can be useful for stylistic purposes or to wrap
    multiple paragraphs within a section that are all to be annotated in a similar way. In the
    following example, we see <code>div</code> elements used as a way to set the language of two
    paragraphs at once, instead of setting the language on the two paragraph elements separately:

    <pre highlight="html">
      &lt;article lang="en-US"&gt;
        &lt;h2&gt;My use of language and my cats&lt;/h2&gt;
        &lt;p&gt;My cat's behavior hasn't changed much since her absence, except
        that she plays her new physique to the neighbors regularly, in an
        attempt to get pets.&lt;/p&gt;
        &lt;div lang="en-GB"&gt;
        &lt;p&gt;My other cat, colored black and white, is a sweetie. He followed
        us to the pool today, walking down the pavement with us. Yesterday
        he apparently visited our neighbours. I wonder if he recognizes that
        their flat is a mirror image of ours.&lt;/p&gt;
        &lt;p&gt;Hm, I just noticed that in the last paragraph I used British
        English. But I'm supposed to write in American English. So I
        shouldn't say "pavement" or "flat" or "color"...&lt;/p&gt;
        &lt;/div&gt;
        &lt;p&gt;I should say "sidewalk" and "apartment" and "color"!&lt;/p&gt;
      &lt;/article&gt;
    </pre>
  </div>

<h3 id="textlevel-semantics">Text-level semantics</h3>

<h4 id="the-a-element">The <dfn><code>a</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Interactive content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Transparent</a>, but there must be no <a>interactive content</a> descendant.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>href</code> - Address of the <a>hyperlink</a></dd>
    <dd>
      <code>target</code> - Default <a>browsing context</a> for <a>hyperlink</a> <a>navigation</a>
      and <a>form submission</a>
    </dd>
    <dd>
      <code>download</code> - Whether to download the resource instead of navigating to it, and its
      file name if so
    </dd>
    <dd>
      <code>rel</code> - Relationship between the document containing the hyperlink and the
      destination resource
    </dd>
    <dd><code>hreflang</code> - Language of the linked resource</dd>
    <dd><code>type</code> - Hint for the type of the referenced resource</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>link</code></a> (default - <a><em>do not set</em></a>), <a><code>button</code></a>,
      <a><code>checkbox</code></a>, <a><code>menuitem</code></a>,
      <a><code>menuitemcheckbox</code></a>, <a><code>menuitemradio</code></a>,
      <a><code>tab</code></a> or <a><code>treeitem</code></a>
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" highlight="webidl">
        interface HTMLAnchorElement : HTMLElement {
          attribute DOMString target;
          attribute DOMString download;
          attribute DOMString rel;
          attribute DOMString rev;
          readonly attribute DOMTokenList relList;
          attribute DOMString hreflang;
          attribute DOMString type;
          attribute DOMString text;
        };
        HTMLAnchorElement implements URLUtils;
      </pre>
    </dd>
  </dl>

  If the <code>a</code> element has an <code>href</code> attribute, then it <a>represents</a> a
  <a>hyperlink</a> (a hypertext anchor) labeled by its contents.



  If the <code>a</code> element has no <code>href</code> attribute, then the element
  <a>represents</a> a placeholder for where a link might otherwise have been placed, if it had been
  relevant, consisting of just the element's contents.

  The <code>target</code>, <code>download</code>, <code>rel</code>, <code>hreflang</code>, and
  <code>type</code> attributes must be omitted if the <code>href</code> attribute is not present.

  If the <code>itemprop</code> attribute is specified on an <code>a</code> element, then the
  <code>href</code> attribute must also be specified.

  <div class="example">

    If a site uses a consistent navigation toolbar on every page, then the link that would
    normally link to the page itself could be marked up using an <code>a</code> element:

    <pre highlight="html">
      &lt;nav&gt;
        &lt;ul&gt;
          &lt;li&gt; &lt;a href="/"&gt;Home&lt;/a&gt; &lt;/li&gt;
          &lt;li&gt; &lt;a href="/news"&gt;News&lt;/a&gt; &lt;/li&gt;
          &lt;li&gt; &lt;a&gt;Examples&lt;/a&gt; &lt;/li&gt;
          &lt;li&gt; &lt;a href="/legal"&gt;Legal&lt;/a&gt; &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/nav&gt;
    </pre>
  </div>

  <div class="impl">
    The <code>href</code>, <code>target</code>, <code>download</code>, and attributes affect what
    happens when users <a>follow hyperlinks</a> or <a>download hyperlinks</a> created using the
    <code>a</code> element. The <code>rel</code>, <code>hreflang</code>, and <code>type</code>
    attributes may be used to indicate to the user the likely nature of the target resource before
    the user follows the link.

    The <a>activation behavior</a> of <code>a</code> elements that create <a>hyperlinks</a> is to
    run the following steps:

    1. If the <code>a</code> element's <code>Document</code> is not <a>fully active</a>, then abort
        these steps.
    2. If either the <code>a</code> element has a <code>download</code> attribute and the algorithm
        is not <a>allowed to show a popup</a>, or the element's <code>target</code> attribute is
        present and applying
        <a>the rules for choosing a browsing context given a browsing context name</a>, using the
        value of the <code>target</code> attribute as the browsing context name, would result
        in there not being a chosen browsing context, then run these substeps:
        1. If there is an <a>entry settings object</a>, throw an <code>InvalidAccessError</code>
            exception.
        2. Abort these steps without following the hyperlink.
    3. If the target of the <code>click</code> event is an <code>img</code> element with an
        <code>ismap</code> attribute specified, then server-side image map processing must be
        performed, as follows:
        1. If the <code>click</code> event was a real pointing-device-triggered <code>click</code>
            event on the <code>img</code> element, then let <var>x</var> be the distance in CSS
            pixels from the left edge of the image's left border, if it has one, or the left edge of
            the image otherwise, to the location of the click, and let <var>y</var> be the distance
            in CSS pixels from the top edge of the image's top border, if it has one, or the top
            edge of the image otherwise, to the location of the click. Otherwise, let <var>x</var>
            and <var>y</var> be zero.
        2. Let <var>hyperlink suffix</var> be a U+003F QUESTION MARK character, the value of
            <var>x</var> expressed as a base-ten integer using <a>ASCII digits</a>, a U+002C COMMA
            character (,), and the value of <var>y</var> expressed as a base-ten integer using
            <a>ASCII digits</a>.
    4. Finally, the user agent must <a>follow the hyperlink</a> or <a>download the hyperlink</a>
        created by the <code>a</code> element, as determined by the <code>download</code> attribute
        and any expressed user preference, passing <var>hyperlink suffix</var>, if the steps above
        defined it.
  </div>

  <dl class="domintro">
    <dt><var>a</var> . <code>text</code></dt>
    <dd>Same as <code>textContent</code>.</dd>
  </dl>

  <div class="impl">
    The IDL attributes <dfn><code>download</code></dfn>, <dfn><code>ping</code></dfn>,
    <dfn><code>target</code></dfn>, <dfn><code>rel</code></dfn>, <dfn><code>rev</code></dfn>,
    <dfn><code>hreflang</code></dfn>, and <dfn><code>type</code></dfn>, must <a>reflect</a> the
    respective content attributes of the same name.

    The IDL attribute <dfn><code>relList</code></dfn> must <a>reflect</a> the <code>rel</code>
    content attribute.

    The <dfn><code>text</code></dfn> IDL attribute, on getting, must return the same value as the
    <code>textContent</code> IDL attribute on the element, and on setting, must act as if the
    <code>textContent</code> IDL attribute on the element had been set to the new value.

    <hr />

    The <code>a</code> element also supports the <code>URLUtils</code> interface. [[!URL]]

    When the element is created, and whenever the element's <code>href</code> content attribute is
    set, changed, or removed, the user agent must invoke the element's <code>URLUtils</code>
    interface's <a>set the input</a> algorithm with the value of the <code>href</code> content
    attribute, if any, or the empty string otherwise, as the given value.

    The element's <code>URLUtils</code> interface's <a>get the base</a> algorithm must simply return
    <a>the element's base URL</a>.

    The element's <code>URLUtils</code> interface's <a>query encoding</a> is the
    <a>document's character encoding</a>.

    When the element's <code>URLUtils</code> interface invokes its <a>update steps</a> with a string
    <var>value</var>, the user agent must set the element's <code>href</code> content attribute to
    the string <var>value</var>.
  </div>

  <div class="example">
    The <code>a</code> element may be wrapped around entire paragraphs, lists, tables, and so forth,
    even entire sections, so long as there is no interactive content within (e.g. buttons or other
    links). This example shows how this can be used to make an entire advertising block into a link:

    <pre highlight="html">
      &lt;aside class="advertising"&gt;
        &lt;h1&gt;Advertising&lt;/h1&gt;
        &lt;a href="http://ad.example.com/?adid=1929&amp;amp;pubid=1422"&gt;
        &lt;section&gt;
          &lt;h1&gt;Mellblomatic 9000!&lt;/h1&gt;
          &lt;p&gt;Turn all your widgets into mellbloms!&lt;/p&gt;
          &lt;p&gt;Only $9.99 plus shipping and handling.&lt;/p&gt;
        &lt;/section&gt;
        &lt;/a&gt;
        &lt;a href="http://ad.example.com/?adid=375&amp;amp;pubid=1422"&gt;
        &lt;section&gt;
          &lt;h1&gt;The Mellblom Browser&lt;/h1&gt;
          &lt;p&gt;Web browsing at the speed of light.&lt;/p&gt;
          &lt;p&gt;No other browser goes faster!&lt;/p&gt;
        &lt;/section&gt;
        &lt;/a&gt;
      &lt;/aside&gt;
    </pre>
  </div>

<h4 id="the-em-element">The <dfn><code>em</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>em</code> element <a>represents</a> stress emphasis of its contents.

  The level of stress that a particular piece of content has is given by its number of ancestor
  <code>em</code> elements.

  The placement of stress emphasis changes the meaning of the sentence. The element thus forms an
  integral part of the content. The precise way in which stress is used in this way depends on the
  language.

  <div class="example">
    These examples show how changing the stress emphasis changes the meaning. First, a general
    statement of fact, with no stress:

    <pre highlight="html">&lt;p&gt;Cats are cute animals.&lt;/p&gt;</pre>

    By emphasizing the first word, the statement implies that the kind of animal under discussion
    is in question (maybe someone is asserting that dogs are cute):

    <pre highlight="html">&lt;p&gt;&lt;em&gt;Cats&lt;/em&gt; are cute animals.&lt;/p&gt;</pre>

    Moving the stress to the verb, one highlights that the truth of the entire sentence is in
    question (maybe someone is saying cats are not cute):

    <pre highlight="html">&lt;p&gt;Cats &lt;em&gt;are&lt;/em&gt; cute animals.&lt;/p&gt;</pre>

    By moving it to the adjective, the exact nature of the cats is reasserted (maybe someone
    suggested cats were <em>mean</em> animals):

    <pre highlight="html">&lt;p&gt;Cats are &lt;em&gt;cute&lt;/em&gt; animals.&lt;/p&gt;</pre>

    Similarly, if someone asserted that cats were vegetables, someone correcting this might
    emphasize the last word:

    <pre highlight="html">&lt;p&gt;Cats are cute &lt;em&gt;animals&lt;/em&gt;.&lt;/p&gt;</pre>

    By emphasizing the entire sentence, it becomes clear that the speaker is fighting hard to get
    the point across. This kind of stress emphasis also typically affects the punctuation, hence the
    exclamation mark here.

    <pre highlight="html">&lt;p&gt;&lt;em&gt;Cats are cute animals!&lt;/em&gt;&lt;/p&gt;</pre>

    Anger mixed with emphasizing the cuteness could lead to markup such as:

    <pre highlight="html">&lt;p&gt;&lt;em&gt;Cats are &lt;em&gt;cute&lt;/em&gt; animals!&lt;/em&gt;&lt;/p&gt;</pre>
  </div>

  <div class="note">
    The <code>em</code> element isn't a generic "italics" element. Sometimes, text is intended to
    stand out from the rest of the paragraph, as if it was in a different mood or voice. For this,
    the <code>i</code> element is more appropriate.

    The <code>em</code> element also isn't intended to convey importance; for that purpose, the
    <code>strong</code> element is more appropriate.
  </div>

<h4 id="the-strong-element">The <dfn><code>strong</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>strong</code> element <a>represents</a> strong importance, seriousness, or
  urgency for its contents.

  <strong>Importance</strong>: The <code>strong</code> element can be used in a heading, caption,
  or paragraph to distinguish the part that really matters from other parts that might be more
  detailed, more jovial, or merely boilerplate.

  <p class="example">For example, the first word of the previous paragraph is marked up with
  <code>strong</code> to distinguish it from the more detailed text in the rest of the
  paragraph.</p>

  <strong>Seriousness</strong>: The <code>strong</code> element can be used to mark up a warning
  or caution notice.

  <strong>Urgency</strong>: The <code>strong</code> element can be used to denote contents that
  the user needs to see sooner than other parts of the document.

  The relative level of importance of a piece of content is given by its number of ancestor
  <code>strong</code> elements; each <code>strong</code> element increases the importance of its
  contents.

  Changing the importance of a piece of text with the <code>strong</code> element does not change
  the meaning of the sentence.

  <div class="example">
    Here, the word "chapter" and the actual chapter number are mere boilerplate, and the actual
    name of the chapter is marked up with <code>strong</code>:

    <pre highlight="html">&lt;h1&gt;Chapter 1: &lt;strong&gt;The Praxis&lt;/strong&gt;&lt;/h1&gt;</pre>

    In the following example, the name of the diagram in the caption is marked up with
    <code>strong</code>, to distinguish it from boilerplate text (before) and the description
    (after):

    <pre highlight="html">&lt;figcaption&gt;Figure 1. &lt;strong&gt;Ant colony dynamics&lt;/strong&gt;. The ants in this colony are
affected by the heat source (upper left) and the food source (lower right).&lt;/figcaption&gt;</pre>

    In this example, the heading is really "Flowers, Bees, and Honey", but the author has added a
    light-hearted addition to the heading. The <code>strong</code> element is thus used to mark up
    the first part to distinguish it from the latter part.

    <pre highlight="html">&lt;h1&gt;&lt;strong&gt;Flowers, Bees, and Honey&lt;/strong&gt; and other things I don't understand&lt;/h1&gt;</pre>
  </div>

  <div class="example">
    Here is an example of a warning notice in a game, with the
    various parts marked up according to how important they are:

    <pre highlight="html">
      &lt;p&gt;&lt;strong&gt;Warning.&lt;/strong&gt; This dungeon is dangerous.
      &lt;strong&gt;Avoid the ducks.&lt;/strong&gt; Take any gold you find.
      &lt;strong&gt;&lt;strong&gt;Do not take any of the diamonds&lt;/strong&gt;,
      they are explosive and &lt;strong&gt;will destroy anything within
      ten meters.&lt;/strong&gt;&lt;/strong&gt; You have been warned.&lt;/p&gt;
    </pre>
  </div>

  <div class="example">
    In this example, the <code>strong</code> element is used to denote the part of the text that
    the user is intended to read first.

    <pre highlight="html">
      &lt;p&gt;Welcome to Remy, the reminder system.&lt;/p&gt;
      &lt;p&gt;Your tasks for today:&lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;p&gt;&lt;strong&gt;Turn off the oven.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
        &lt;li&gt;&lt;p&gt;Put out the trash.&lt;/p&gt;&lt;/li&gt;
        &lt;li&gt;&lt;p&gt;Do the laundry.&lt;/p&gt;&lt;/li&gt;
      &lt;/ul&gt;
    </pre>
  </div>

<h4 id="the-small-element">The <dfn><code>small</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>small</code> element <a>represents</a> side comments such as small print.

  <p class="note">
    Small print typically features disclaimers, caveats, legal restrictions, or copyrights. Small
    print is also sometimes used for attribution, or for satisfying licensing requirements.
  </p>

  <p class="note">
    The <code>small</code> element does not "de-emphasize" or lower the importance of text
    emphasized by the <code>em</code> element or marked as important with the <code>strong</code>
    element. To mark text as not emphasized or important, simply do not mark it up with the
    <code>em</code> or <code>strong</code> elements respectively.
  </p>

  The <code>small</code> element should not be used for extended spans of text, such as multiple
  paragraphs, lists, or sections of text. It is only intended for short runs of text. The text of a
  page listing terms of use, for instance, would not be a suitable candidate for the
  <code>small</code> element: in such a case, the text is not a side comment, it is the main content
  of the page.

  <div class="example">
    In this example, the <code>small</code> element is used to indicate that value-added tax is
    not included in a price of a hotel room:

    <pre highlight="html">
      &lt;dl&gt;
        &lt;dt&gt;Single room
        &lt;dd&gt;199 â¬ &lt;small&gt;breakfast included, VAT not included&lt;/small&gt;
        &lt;dt&gt;Double room
        &lt;dd&gt;239 â¬ &lt;small&gt;breakfast included, VAT not included&lt;/small&gt;
      &lt;/dl&gt;
    </pre>
  </div>

  <div class="example">
    In this second example, the <code>small</code> element is used for a side comment in an article.

    <pre highlight="html">
      &lt;p&gt;Example Corp today announced record profits for the
      second quarter &lt;small&gt;(Full Disclosure: Foo News is a subsidiary of
      Example Corp)&lt;/small&gt;, leading to speculation about a third quarter
      merger with Demo Group.&lt;/p&gt;
    </pre>

    This is distinct from a sidebar, which might be multiple paragraphs long and is removed from the
    main flow of text. In the following example, we see a sidebar from the same article. This
    sidebar also has small print, indicating the source of the information in the sidebar.

    <pre highlight="html">
      &lt;aside&gt;
        &lt;h1&gt;Example Corp&lt;/h1&gt;
        &lt;p&gt;This company mostly creates small software and Web
        sites.&lt;/p&gt;
        &lt;p&gt;The Example Corp company mission is "To provide entertainment
        and news on a sample basis".&lt;/p&gt;
        &lt;p&gt;&lt;small&gt;Information obtained from &lt;a
        href="http://example.com/about.html"&gt;example.com&lt;/a&gt; home
        page.&lt;/small&gt;&lt;/p&gt;
      &lt;/aside&gt;
    </pre>

    In this last example, the <code>small</code> element is marked as being <em>important</em>
    small print.

    <pre highlight="html">&lt;p&gt;&lt;strong&gt;&lt;small&gt;Continued use of this service will result in a kiss.&lt;/small&gt;&lt;/strong&gt;&lt;/p&gt;</pre>
  </div>

<h4 id="the-s-element">The <dfn><code>s</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a></dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>s</code> element <a>represents</a> contents that are no longer accurate or no longer
  relevant.

  <p class="note">
    The <code>s</code> element is not appropriate when indicating document edits; to mark a span of
    text as having been removed from a document, use the <code>del</code> element.
  </p>

  <div class="example">
    In this example a recommended retail price has been marked as no longer relevant as the product
    in question has a new sale price.

    <pre highlight="html">
      &lt;p&gt;Buy our Iced Tea and Lemonade!&lt;/p&gt;
      &lt;p&gt;&lt;s&gt;Recommended retail price: $3.99 per bottle&lt;/s&gt;&lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;Now selling for just $2.99 a bottle!&lt;/strong&gt;&lt;/p&gt;
    </pre>
  </div>

<h4 id="the-cite-element">The <dfn><code>cite</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>cite</code> element <a>represents</a> a reference to a creative work. It must include
  the title of the work or the name of the author(person, people or organization) or an URL
  reference, or a reference in abbreviated form as per the conventions used for the addition of
  citation metadata.

  <p class="note">
    Creative works include a book, a paper, an essay, a poem, a score, a song, a script, a film, a
    TV show, a game, a sculpture, a painting, a theatre production, a play, an opera, a musical, an
    exhibition, a legal case report, a computer program, , a web site, a web page, a blog post or
    comment, a forum post or comment, a tweet, a written or oral statement, etc.
  </p>

  <div class="example">
    Here is an example of the author of a quote referenced using the <code>cite</code> element:

    <pre highlight="html">
      &lt;p&gt;In the words of &lt;cite&gt;Charles Bukowski&lt;/cite&gt; -
      &lt;q&gt;An intellectual says a simple thing in a hard way. An artist says a hard thing in a simple way.&lt;/q&gt;&lt;/p&gt;
    </pre>
  </div>

  <div class="example">
    This second example identifies the author of a tweet by referencing the authors name using the <code>cite</code> element:

    <pre highlight="html">
      &lt;blockquote class="twitter-tweet"&gt;
      &lt;p&gt;â¥ Bukowski in &lt;a href="https://twitter.com/search?q=%23HTML5&amp;src=hash"&gt;#HTML5&lt;/a&gt; spec examples
      &lt;a href="http://t.co/0FIEiYN1pC"&gt;http://t.co/0FIEiYN1pC&lt;/a&gt;&lt;/p&gt;<mark>&lt;cite&gt;â karl dubost (@karlpro)
      &lt;a href="https://twitter.com/karlpro/statuses/370905307293442048"&gt;August 23, 2013&lt;/a&gt;&lt;/cite&gt;</mark>
      &lt;/blockquote&gt;
    </pre>
  </div>

  <div class="example">
    In this example the <code>cite</code> element is used to reference the title of a work in a
    bibliography:

    <pre highlight="html">
      &lt;p&gt;&lt;cite&gt;Universal Declaration of Human Rights&lt;/cite&gt;, United Nations,
      December 1948. Adopted by General Assembly resolution 217 A (III).&lt;/p&gt;
    </pre>
  </div>

  <div class="example">
    In this example the <code>cite</code> element is used to reference the title of a television
    show:

    <pre highlight="html">&lt;p&gt;Who is your favorite doctor (in &lt;cite&gt;Doctor Who&lt;/cite&gt;)?&lt;/p&gt;</pre>
  </div>

  <div class="example">
    A very common use for the <code>cite</code> element is to identify the author of a comment in a
    blog post or forum, as in this example:

    <pre highlight="html">
      &lt;article id="comment-1"&gt;
        Comment by &lt;cite&gt;&lt;a href="http://oli.jp"&gt;Oli Studholme&lt;/a&gt;&lt;/cite&gt;
        &lt;time datetime="2013-08-19T16:01"&gt;August 19th, 2013 at 4:01 pm&lt;/time&gt;
        &lt;p&gt;Unfortunately I don't think adding names back into the definition of &lt;code&gt;cite&lt;/code&gt;
        solves the problem: of the 12 blockquote examples in
        &lt;a href="http://oli.jp/example/blockquote-metadata/"&gt;Examples of block quote metadata&lt;/a&gt;,
        there's not even one that's &lt;em&gt;just&lt;/em&gt; a person's name.&lt;/p&gt;
        &lt;p&gt;A subset of the problem, maybeâ¦&lt;/p&gt;
      &lt;/article&gt;
    </pre>
  </div>

  <div class="example">
    Another common use for the <code>cite</code> element is to reference the <code>URL</code>
    of a search result, as in this example:

    <pre highlight="html">
      &lt;div id="resultStats"&gt;About 416,000,000 results 0.33 seconds)&nbsp;&lt;/div&gt;
      ...
      &lt;p&gt;&lt;a href="http://www.w3.org/html/wg/"&gt;W3C &lt;i&gt;HTML Working Group&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;p&gt;<mark>&lt;cite&gt;www.w3.org/&lt;b&gt;html&lt;/b&gt;/wg/&lt;/cite&gt;</mark>&lt;/p&gt;
      &lt;p&gt;15 Apr 2013 - The &lt;i&gt;HTML Working Group&lt;/i&gt; is currently chartered to continue its
      work through 31 December 2014. A Plan 2014 document published by the...&lt;/p&gt;
      ...
    </pre>
  </div>

  <div class="example">
    Where the <code>cite</code> element is used to identify an abbreviated reference such as
    <i>Ibid.</i> it is suggested that this reference be linked to the base reference:

    <pre highlight="html">
      &lt;article&gt;
        &lt;h2&gt;Book notes&lt;/h2&gt;
        ...
        ...
        &lt;blockquote&gt;"Money is the real cause of poverty,"
        &lt;footer&gt;
        <strong>&lt;cite id="baseref"&gt;The Ragged-Trousered Philanthropists, page 89.&lt;/cite&gt;</strong>
        &lt;/footer&gt;
        &lt;/blockquote&gt;
        ...
        ...
        &lt;blockquote&gt;"Money is the cause of poverty because it is the device by which those who
        are too lazy to work are enabled to rob the workers of the fruits of their labour."
        <strong>&lt;a href="#baseref"&gt;&lt;cite&gt;Ibid.&lt;/cite&gt;&lt;/a&gt;</strong>
        &lt;/blockquote&gt;
        ...
      &lt;/article&gt;
    </pre>
  </div>

  <p class="note">
    A <em>citation</em> is not a <em>quote</em> (for which the <code>q</code> element is
    appropriate).
  </p>

  <div class="example">
    This is incorrect usage, because <code>cite</code> is not for quotes:

    <pre class="bad">
      &lt;p&gt;&lt;cite&gt;This is wrong!, said Hillary.&lt;/cite&gt; is a quote from the
      popular daytime TV drama When Ian became Hillary.&lt;/p&gt;
    </pre>

    This is an example of the correct usage:

    <pre highlight="html">
      &lt;p&gt;&lt;q&gt;This is correct, said Hillary.&lt;/q&gt; is a quote from the
      popular daytime TV drama &lt;cite&gt;When Ian became Hillary&lt;/cite&gt;.&lt;/p&gt;
    </pre>
  </div>

<h4 id="the-q-element">The <dfn><code>q</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd>
      <code>cite</code> - Link to the source of the quotation or more information about the edit
    </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLQuoteElement</code>.</dd>
  </dl>

  The <code>q</code> element <a>represents</a> some <a>phrasing content</a> quoted from another
  source.

  Quotation punctuation (such as quotation marks) that is quoting the contents of the element must
  not appear immediately before, after, or inside <code>q</code> elements; they will be inserted
  into the rendering by the user agent.

  Content inside a <code>q</code> element must be quoted from another source, whose address, if it
  has one, may be cited in the <dfn><code>cite</code></dfn> attribute. The source may be fictional,
  as when quoting characters in a novel or screenplay.

  If the <code>cite</code> attribute is present, it must be a
  <a>valid URL potentially surrounded by spaces</a>. <span class="impl">To obtain the corresponding
  citation link, the value of the attribute must be <a>resolved</a> relative to the element.</span>
  User agents may allow users to follow such citation links, but they are primarily intended for
  private use (e.g. by server-side scripts collecting statistics about a site's use of quotations),
  not for readers.

  The <code>q</code> element must not be used in place of quotation marks that do not represent
  quotes; for example, it is inappropriate to use the <code>q</code> element for marking up
  sarcastic statements.

  The use of <code>q</code> elements to mark up quotations is entirely optional; using explicit
  quotation punctuation without <code>q</code> elements is just as correct.

  <div class="example">
    Here is a simple example of the use of the <code>q</code> element:

    <pre highlight="html">
      &lt;p&gt;The man said &lt;q&gt;Things that are impossible just take
      longer&lt;/q&gt;. I disagreed with him.&lt;/p&gt;
    </pre>
  </div>

  <div class="example">
    Here is an example with both an explicit citation link in the <code>q</code> element, and an
    explicit citation outside:

    <pre highlight="html">
      &lt;p&gt;The W3C page &lt;cite&gt;About W3C&lt;/cite&gt; says the W3C's
      mission is &lt;q cite="http://www.w3.org/Consortium/"&gt;To lead the
      World Wide Web to its full potential by developing protocols and
      guidelines that ensure long-term growth for the Web&lt;/q&gt;. I
      disagree with this mission.&lt;/p&gt;
    </pre>
  </div>

  <div class="example">
    In the following example, the quotation itself contains a quotation:

    <pre highlight="html">
      &lt;p&gt;In &lt;cite&gt;Example One&lt;/cite&gt;, he writes &lt;q&gt;The man
      said &lt;q&gt;Things that are impossible just take longer&lt;/q&gt;. I
      disagreed with him&lt;/q&gt;. Well, I disagree even more!&lt;/p&gt;
    </pre>
  </div>

  <div class="example">
    In the following example, quotation marks are used instead of the <code>q</code> element:

    <pre highlight="html">
      &lt;p&gt;His best argument was âI disagreeâ, which
      I thought was laughable.&lt;/p&gt;
    </pre>
  </div>

  <div class="example">
    In the following example, there is no quote â the quotation marks are used to name a
    word. Use of the <code>q</code> element in this case would be inappropriate.

    <pre highlight="html">
      &lt;p&gt;The word "ineffable" could have been used to describe the disaster
      resulting from the campaign's mismanagement.&lt;/p&gt;
    </pre>
  </div>

<h4 id="the-dfn-element">The <dfn><code>dfn</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>, but there must be no <code>dfn</code> element descendants.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd>Also, the <code>title</code> attribute has special semantics on this element.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>dfn</code> element <a>represents</a> the defining instance of a term. The
  <a>paragraph</a>, <a>description list group</a>, or <a>section</a> that is the nearest ancestor of
  the <code>dfn</code> element must also contain the definition(s) for the <a>term</a> given by the
  <code>dfn</code> element.

  <dfn>Defining term</dfn>: If the <code>dfn</code> element has a <dfn><code>title</code></dfn>
  attribute, then the exact value of that attribute is the term being defined. Otherwise, if it
  contains exactly one element child node and no child <code>Text</code> nodes, and that child
  element is an <code>abbr</code> element with a <code>title</code> attribute, then the exact value
  of <em>that</em> attribute is the term being defined. Otherwise, it is the exact
  <code>textContent</code> of the <code>dfn</code> element that gives the term being defined.

  If the <code>title</code> attribute of the <code>dfn</code> element is present, then it must
  contain only the term being defined.

  <p class="note">
    The <code>title</code> attribute of ancestor elements does not affect <code>dfn</code> elements.
  </p>

  An <code>a</code> element that links to a <code>dfn</code> element represents an instance of the
  term defined by the <code>dfn</code> element.

  <div class="example">
    In the following fragment, the term "Garage Door Opener" is first defined in the first
    paragraph, then used in the second. In both cases, its abbreviation is what is actually
    displayed.

    <pre highlight="html">
      &lt;p&gt;The <strong>&lt;dfn&gt;&lt;abbr title="Garage Door Opener"&gt;GDO&lt;/abbr&gt;&lt;/dfn&gt;</strong>
      is a device that allows off-world teams to open the iris.&lt;/p&gt;
      &lt;!-- ... later in the document: --&gt;
      &lt;p&gt;Teal'c activated his <strong>&lt;abbr title="Garage Door Opener"&gt;GDO&lt;/abbr&gt;</strong>
      and so Hammond ordered the iris to be opened.&lt;/p&gt;
    </pre>

    With the addition of an <code>a</code> element, the reference can be made explicit:

    <pre highlight="html">
      &lt;p&gt;The &lt;dfn <strong>id=gdo</strong>&gt;&lt;abbr title="Garage Door Opener"&gt;GDO&lt;/abbr&gt;&lt;/dfn&gt;
      is a device that allows off-world teams to open the iris.&lt;/p&gt;
      &lt;!-- ... later in the document: --&gt;
      &lt;p&gt;Teal'c activated his <strong>&lt;a href=#gdo&gt;</strong>&lt;abbr title="Garage Door Opener"&gt;GDO&lt;/abbr&gt;<strong>&lt;/a&gt;</strong>
      and so Hammond ordered the iris to be opened.&lt;/p&gt;
    </pre>
</div>

<h4 id="the-abbr-element">The <dfn><code>abbr</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd>Also, the <code>title</code> attribute has special semantics on this element.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>abbr</code> element <a>represents</a> an abbreviation or acronym, optionally with its
  expansion. The <dfn><code>title</code></dfn> attribute may be used to provide an expansion of the
  abbreviation. The attribute, if specified, must contain an expansion of the abbreviation, and
  nothing else.

  <div class="example">
    The paragraph below contains an abbreviation marked up with the <code>abbr</code> element.
    This paragraph <a>defines the term</a> "Web Hypertext Application
    Technology Working Group".

    <pre highlight="html">
      &lt;p&gt;The &lt;dfn id=whatwg&gt;&lt;abbr
      title="Web Hypertext Application Technology Working Group"&gt;WHATWG&lt;/abbr&gt;&lt;/dfn&gt;
      is a loose unofficial collaboration of Web browser manufacturers and
      interested parties who wish to develop new technologies designed to
      allow authors to write and deploy Applications over the World Wide
      Web.&lt;/p&gt;
    </pre>

    An alternative way to write this would be:

    <pre highlight="html">
      &lt;p&gt;The &lt;dfn id=whatwg&gt;Web Hypertext Application Technology
      Working Group&lt;/dfn&gt; (&lt;abbr
      title="Web Hypertext Application Technology Working Group"&gt;WHATWG&lt;/abbr&gt;)
      is a loose unofficial collaboration of Web browser manufacturers and
      interested parties who wish to develop new technologies designed to
      allow authors to write and deploy Applications over the World Wide
      Web.&lt;/p&gt;
    </pre>
  </div>

  <div class="example">
    This paragraph has two abbreviations. Notice how only one is defined; the other, with no
    expansion associated with it, does not use the <code>abbr</code> element.

    <pre highlight="html">
      &lt;p&gt;The
      &lt;abbr title="Web Hypertext Application Technology Working Group"&gt;WHATWG&lt;/abbr&gt;
      started working on HTML5 in 2004.&lt;/p&gt;
    </pre>
  </div>

  <div class="example">
    This paragraph links an abbreviation to its definition.

    <pre highlight="html">
      &lt;p&gt;The &lt;a href="#whatwg"&gt;&lt;abbr
      title="Web Hypertext Application Technology Working Group"&gt;WHATWG&lt;/abbr&gt;&lt;/a&gt;
      community does not have much representation from Asia.&lt;/p&gt;
    </pre>

  </div>

  <div class="example">
    This paragraph marks up an abbreviation without giving an expansion, possibly as a hook to
    apply styles for abbreviations (e.g. smallcaps).

    <pre highlight="html">
      &lt;p&gt;Philip and Dashiva both denied that they were going to
      get the issue counts from past revisions of the specification to
      backfill the &lt;abbr&gt;WHATWG&lt;/abbr&gt; issue graph.&lt;/p&gt;
    </pre>
  </div>

  If an abbreviation is pluralized, the expansion's grammatical number (plural vs singular) must
  match the grammatical number of the contents of the element.

  <div class="example">
    Here the plural is outside the element, so the expansion is in the singular:

    <pre highlight="html">
      &lt;p&gt;Two &lt;abbr title="Working Group"&gt;WG&lt;/abbr&gt;s worked on
      this specification: the &lt;abbr&gt;WHATWG&lt;/abbr&gt; and the
      &lt;abbr&gt;HTMLWG&lt;/abbr&gt;.&lt;/p&gt;
    </pre>

    Here the plural is inside the element, so the expansion is in the plural:

    <pre highlight="html">
      &lt;p&gt;Two &lt;abbr title="Working Groups"&gt;WGs&lt;/abbr&gt; worked on
      this specification: the &lt;abbr&gt;WHATWG&lt;/abbr&gt; and the
      &lt;abbr&gt;HTMLWG&lt;/abbr&gt;.&lt;/p&gt;
    </pre>
  </div>

  Abbreviations do not have to be marked up using this element. It is expected to be useful in the
  following cases:

  * Abbreviations for which the author wants to give expansions, where using the <code>abbr</code>
    element with a <code>title</code> attribute is an alternative to including the expansion inline
    (e.g. in parentheses).
  * Abbreviations that are likely to be unfamiliar to the document's readers, for which authors are
    encouraged to either mark up the abbreviation using an <code>abbr</code> element with a
    <code>title</code> attribute or include the expansion inline in the text the first time the
    abbreviation is used.
  * Abbreviations whose presence needs to be semantically annotated, e.g. so that they can be
    identified from a style sheet and given specific styles, for which the <code>abbr</code> element
    can be used without a <code>title</code> attribute.

  Providing an expansion in a <code>title</code> attribute once will not necessarily cause other
  <code>abbr</code> elements in the same document with the same contents but without a
  <code>title</code> attribute to behave as if they had the same expansion. Every <code>abbr</code>
  element is independent.

<h4 id="the-ruby-element">The <dfn><code>ruby</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>See prose.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>ruby</code> element allows one or more spans of phrasing content to be marked with ruby
  annotations. Ruby annotations are short runs of text presented alongside base text, primarily
  used in East Asian typography as a guide for pronunciation or to include other annotations. In
  Japanese, this form of typography is also known as <i>furigana</i>. Ruby text can appear on either
  side, and sometimes both sides, of the base text, and it is possible to control its position using
  CSS. A more complete introduction to ruby can be found in the <cite>Use Cases &amp; Exploratory
  Approaches for Ruby Markup</cite> document as well as in <cite>CSS Ruby Module Level 1</cite>.
  [[!RUBY-UC]] [[!CSS3-RUBY]]

  The content model of <code>ruby</code> elements consists of one or more of the following sequences:

  1. One or more <a>phrasing content</a> nodes or <code>rb</code> elements.
  2. One or more <code>rt</code> or <code>rtc</code> elements, each of which either immediately
      preceded or followed by an <code>rp</code> elements.

  The <code>ruby</code>, <code>rb</code>, <code>rtc</code>, and <code>rt</code> elements can be used
  for a variety of kinds of annotations, including in particular (though by no means limited to)
  those described below. For more details on Japanese Ruby in particular, and how to render Ruby for
  Japanese, see <cite>Requirements for Japanese Text Layout</cite>. [[!JLREQ]] The <code>rp</code>
  element can be used as fallback content when ruby rendering is not supported.

  : Mono-ruby for individual base characters
  :: Annotations (the ruby text) are associated individually with each ideographic character (the
      base text). In Japanese this is typically hiragana or katakana characters used to provide
      readings of kanji characters.

      <div class="example">
        <pre highlight="html">&lt;ruby&gt;base&lt;rt&gt;annotation&lt;/ruby&gt;</pre>
      </div>

      When no <code>rb</code> element is used, the base is implied, as above. But you can also make
      it explicit. This can be useful notably for styling, or when consecutive bases are to be
      treated as a group, as in the jukugo ruby example further down.

      <div class="example">
        <pre highlight="html">&lt;ruby&gt;&lt;rb&gt;base&lt;rt&gt;annotation&lt;/ruby&gt;</pre>
      </div>

      In the following example, notice how each annotation corresponds to a single base character.

      <div class="example">
        <pre highlight="html">
          &lt;ruby&gt;æ¥&lt;rt&gt;ã«&lt;/rt&gt;&lt;/ruby&gt;&lt;ruby&gt;æ¬&lt;rt&gt;ã»ã&lt;/rt&gt;&lt;/ruby&gt;
          &lt;ruby&gt;èª&lt;rt&gt;ã&lt;/rt&gt;&lt;/ruby&gt;ã§&lt;ruby&gt;æ¸&lt;rt&gt;ã&lt;/rt&gt;&lt;/ruby&gt;
          ãã&lt;ruby&gt;ä½&lt;rt&gt;ãã&lt;/rt&gt;&lt;/ruby&gt;&lt;ruby&gt;æ&lt;rt&gt;ã¶ã&lt;/rt&gt;&lt;/ruby&gt;ã§ãã
        </pre>
      </div>

      Ruby text interspersed in regular text provides structure akin to the following image:

      <img src="images/composition.png" width="390" height="87" alt="An example of ruby text mixed up with regular text." />

      This example can also be written as follows, using one <code>ruby</code> element with two
      segments of base text and two annotations (one for each) rather than two back-to-back
      <code>ruby</code> elements each with one base text segment and annotation (as in the markup
      above):

      <div class="example">
        <pre highlight="html">
          &lt;ruby&gt;æ¥&lt;rt&gt;ã«&lt;/rt&gt;æ¬&lt;rt&gt;ã»ã&lt;/rt&gt;èª&lt;rt&gt;ã&lt;/rt&gt;&lt;/ruby&gt;
          ã§&lt;ruby&gt;æ¸&lt;rt&gt;ã&lt;/rt&gt;&lt;/ruby&gt;
          ãã&lt;ruby&gt;ä½&lt;rt&gt;ãã&lt;/rt&gt;æ&lt;rt&gt;ã¶ã&lt;/rt&gt;&lt;/ruby&gt;ã§ãã
        </pre>
      </div>

    : Group ruby
    :: Group ruby is often used where phonetic annotations don't map to discreet base characters, or
        for semantic glosses that span the whole base text. For example, the word "today" is written
        with the characters ä»æ¥, literally "this day". But it's pronounced ããã (kyou), which
        can't be broken down into a "this" part and a "day" part. In typical rendering, you can't
        split text that is annotated with group ruby; it has to wrap as a single unit onto the next
        line. When a <a>ruby text annotation</a> maps to a base that is comprised of more than one
        character, then that base is grouped.

        The following group ruby:

        <img src="images/group.png" width="78" height="88" alt="Group ruby example with ããã annotating ä»æ¥" />

        Can be marked up as follows:

        <div class="example">
          <pre highlight="html">&lt;ruby&gt;ä»æ¥&lt;rt&gt;ããã&lt;/ruby&gt;</pre>
        </div>

    : Jukugo ruby
    :: <em>Jukugo</em> refers to a Japanese compound noun, i.e. a word made up of more than one
        kanji character. <em>Jukugo ruby</em> is a term that is used not to describe ruby
        annotations over jukugo text, but rather to describe ruby with a behavior slightly
        different from mono or group ruby. Jukugo ruby is similar to mono ruby, in that there is
        a strong association between ruby text and individual base characters, but the ruby text
        is typically rendered as grouped together over multiple ideographs when they are on the
        same line.

        The distinction is captured in this example:

        <img src="images/hokekyou.png" width="66" height="126" alt="Example of jukugo ruby" />

        Which can be marked up as follows:

        <div class="example">
          <pre highlight="html">
            &lt;ruby&gt;æ³&lt;rb&gt;è¯&lt;rb&gt;çµ&lt;rt&gt;ã»&lt;rt&gt;ã&lt;rt&gt;ããã&lt;/ruby&gt;
          </pre>
        </div>

        In this example, each <code>rt</code> element is paired with its respective <code>rb</code>
        element, the difference with an interleaved <code>rb</code>/<code>rt</code> approach being
        that the sequences of both base text and ruby annotations are implicitly placed in common
        containers so that the grouping information is captured.

        <p class="note">
          For more details on <a>Jukugo Ruby rendering</a>, see Appendix F in the
          <cite>Requirements for Japanese Text Layout</cite> and Use Case C: Jukugo ruby in the
          <cite>Use Cases &amp; Exploratory Approaches for Ruby Markup</cite>. [[!JLREQ]]
          [[!RUBY-UC]]
        </p>

    : Inline ruby
    :: In some contexts, for instance when the font size or line height are too small for ruby to be
        readable, it is desirable to inline the ruby annotation such that it appears in parentheses
        after the text it annotates. This also provides a convenient fallback strategy for user
        agents that do not support rendering ruby annotations.

        Inlining takes grouping into account. For example, Tokyo is written with two kanji
        characters, æ±, which is pronounced ã¨ã, and äº¬, which is pronounced ããã. Each base
        character should be annotated individually, but the fallback should be æ±äº¬(ã¨ãããã) not
        æ±(ã¨ã)äº¬(ããã). This can be marked up as follows:

        <div class="example">
          <pre highlight="html">
            &lt;ruby&gt;æ±&lt;rb&gt;äº¬&lt;rt&gt;ã¨ã&lt;rt&gt;ããã&lt;/ruby&gt;
          </pre>
        </div>

        Note that the above markup will enable the usage of parentheses when inlining for browsers
        that support ruby layout, but for those that don't it will fail to provide parenthetical
        fallback. This is where the <code>rp</code> element is useful. It can be inserted into the
        above example to provide the appropriate fallback when ruby layout is not supported:

      <div class="example">
        <pre highlight="html">
          &lt;ruby&gt;æ±&lt;rb&gt;äº¬&lt;rp&gt;(&lt;rt&gt;ã¨ã&lt;rt&gt;ããã&lt;rp&gt;)&lt;/ruby&gt;
        </pre>
      </div>

    : Text with both phonetic and semantic annotations (double-sided ruby)
    :: Sometimes, ruby can be used to annotate a base twice.

        In the following example, the Chinese word for San Francisco (æ§éå±±, i.e. "old gold
        mountain") is annotated both using pinyin to give the pronunciation, and with the original
        English.

        <img src="images/group-double.png" width="113" height="84" alt="San Francisco in Chinese, with both pinyin and the original English as annotations." />

        Which is marked up as follows:

        <div class="example">
          <pre highlight="html">
            &lt;ruby&gt;&lt;rb&gt;æ§&lt;rb&gt;é&lt;rb&gt;å±±&lt;rt&gt;jiÃ¹&lt;rt&gt;jÄ«n&lt;rt&gt;shÄn&lt;rtc&gt;San Francisco&lt;/ruby&gt;
          </pre>
        </div>

          In this example, a single base run of three base characters is annotated with three pinyin
          ruby text segments in a first (implicit) container, and an <code>rtc</code> element is
          introduced in order to provide a second single <a>ruby text annotation</a> being the
          city's English name.

          We can also revisit our jukugo example above with ä¸æ ("skill") to show how it can be
          annotation in both kana and romaji phonetics while at the same time maintaining the
          pairing to bases and annotation grouping information.

          <img src="images/mono-or-jukugo-double.png" width="185" height="120" alt="ä¸æ (&quot;skill&quot;) annotated in both kana and romaji, shown in both jukugo and mono styles." />

          Which is marked up as follows:

        <div class="example">
          <pre highlight="html">
            &lt;ruby&gt;&lt;rb&gt;ä¸&lt;rb&gt;æ&lt;rt&gt;ããã&lt;rt&gt;ã&lt;rtc&gt;&lt;rt&gt;jou&lt;rt&gt;zu&lt;/ruby&gt;
          </pre>
        </div>

        Text that is a direct child of the <code>rtc</code> element implicitly produces a ruby text
        segment as if it were contained in an <code>rt</code> element. In this contrived example,
        this is shown with some symbols that are given names in English and French with annotations
        intended to appear on either side of the base symbol.

        <div class="example">
          <pre highlight="html">
            &lt;ruby&gt;
              â¥&lt;rt&gt;Heart&lt;rtc lang=fr&gt;CÅur&lt;/rtc&gt;
              â&lt;rt&gt;Shamrock&lt;rtc lang=fr&gt;TrÃ¨fle&lt;/rtc&gt;
              â¶&lt;rt&gt;Star&lt;rtc lang=fr&gt;Ãtoile
            &lt;/ruby&gt;
          </pre>
        </div>

        Similarly, text directly inside a <code>ruby</code> element implicitly produces a ruby base
        as if it were contained in an <code>rb</code> element, and <code>rt</code> children of
        <code>ruby</code> are implicitly contained in an <code>rtc</code> container. In effect, the
        above example is equivalent (in meaning, though not in the DOM it produces) to the
        following:

        <div class="example">
          <pre highlight="html">
            &lt;ruby&gt;
              &lt;rb&gt;â¥&lt;/rb&gt;&lt;rtc&gt;&lt;rt&gt;Heart&lt;/rt&gt;&lt;/rtc&gt;&lt;rtc lang=fr&gt;&lt;rt&gt;CÅur&lt;/rt&gt;&lt;/rtc&gt;
              &lt;rb&gt;â&lt;/rb&gt;&lt;rtc&gt;&lt;rt&gt;Shamrock&lt;/rt&gt;&lt;/rtc&gt;&lt;rtc lang=fr&gt;&lt;rt&gt;TrÃ¨fle&lt;/rt&gt;&lt;/rtc&gt;
              &lt;rb&gt;â¶&lt;/rb&gt;&lt;rtc&gt;&lt;rt&gt;Star&lt;/rt&gt;&lt;/rtc&gt;&lt;rtc lang=fr&gt;&lt;rt&gt;Ãtoile&lt;/rt&gt;&lt;/rtc&gt;
            &lt;/ruby&gt;
          </pre>
        </div>

  <hr />

  <div class="impl">
    Within a ruby element, content is parcelled into a series of ruby segments. Each
    <dfn>ruby segment</dfn> is described by:

      * Zero or more <dfn>ruby bases</dfn>, each of which is a DOM range that may contain phrasing
          content or an <code>rb</code> element.
      * A base range, that is a DOM range including all the bases. This is the
          <dfn>ruby base container</dfn>.
      * Zero or more <a>ruby text containers</a> which may correspond to explicit <code>rtc</code>
          elements, or to sequences of <code>rt</code> elements implicitly recognized as contained
          in an anonymous <a>ruby text container</a>.

    Each <dfn>ruby text container</dfn> is described by zero or more
    <dfn>ruby text annotations</dfn> each of which is a DOM range that may contain phrasing content
    or an <code>rt</code> element, and an annotations range that is a range including all the
    annotations for that container. A <a>ruby text container</a> is also known (primarily in a CSS
    context) as a <dfn>ruby annotation container</dfn>.

    Furthermore, a ruby element contains <dfn>ignored ruby content</dfn>. Ignored ruby content does
    not form part of the document's semantics. It consists of some <a>inter-element whitespace</a>
    and <code>rp</code> elements, the latter of which are used for legacy user agents that do not
    support ruby at all.

    The process of <dfn>annotation pairing</dfn> associates <a>ruby annotations</a> with
    <a>ruby bases</a>. Within each <a>ruby segment</a>, each <a>ruby base</a> in the
    <a>ruby base container</a> is paired with one <a>ruby text annotation</a> from the
    <a>ruby text container</a>, in order. If there are not enough <a>ruby text annotations</a> in a
    <a>ruby annotation container</a>, the last one is associated with any excess <a>ruby bases</a>.
    (If there are not any in the <a>ruby annotation container</a>, an anonymous empty one is assumed
    to exist.) If there are not enough <a>ruby bases</a>, any remaining <a>ruby text annotations</a>
    are assumed to be associated with empty, anonymous bases inserted at the end of the
    <a>ruby base container</a>.

    Note that the terms <a>ruby segment</a>, <a>ruby base</a>, <a>ruby text annotation</a>,
    <a>ruby text container</a>, <a>ruby base container</a>, and <a>ruby annotation container</a>
    have their equivalents in <cite>CSS Ruby Module Level 3</cite>. [[!CSS3-RUBY]]

    Informally, the segmentation and categorisation algorithm below performs a simple set of
    tasks. First it processes adjacent <code>rb</code> elements, text nodes, and non-ruby
    elements into a list of bases. Then it processes any number of <code>rtc</code> elements or
    sequences of <code>rt</code> elements that are considered to automatically map to an
    anonymous <a>ruby text container</a>. Put together these data items form a <a>ruby
    segment</a> as detailed in the data model above. It will continue to produce such segments
    until it reaches the end of the content of a given <code>ruby</code> element. The complexity
    of the algorithm below compared to this informal description stems from the need to support
    an author-friendly syntax and being mindful of inter-element white space.

    At any particular time, the <dfn>segmentation and categorisation of content of a
    <code>ruby</code></dfn> element is the result that would be obtained from running the following
    algorithm:

<!-- Start cleanup here -->

    <ol>
      <li>
        Let <var>root</var> be the <code>ruby</code> element for which the algorithm is
        being run.
      </li>
      <li>Let <var>index</var> be 0.</li>
      <li>Let <var>ruby segments</var> be an empty list.</li>
      <li>Let <var>current bases</var> be an empty list of DOM ranges.</li>
      <li>Let <var>current bases range</var> be null.</li>
      <li>Let <var>current bases range start</var> be null.</li>
      <li>Let <var>current annotations</var> be an empty list of DOM ranges.</li>
      <li>Let <var>current annotations range</var> be null.</li>
      <li>Let <var>current annotations range start</var> be null.</li>
      <li>Let <var>current annotation containers</var> be an empty list.</li>
      <li>Let <var>current automatic base nodes</var> be an empty list of DOM Nodes.</li>
      <li>Let <var>current automatic base range start</var> be null.</li>
      <li>
        <i>Process a ruby child</i>: If <var>index</var> is equal to or greater than the number of
        child nodes in <var>root</var>, then run the steps to <a>commit a ruby segment</a>,
        return <var>ruby segments</var>, and abort these steps.
      </li>
      <li>
        Let <var>current child</var> be the <var>index</var>th node in <var>root</var>.
      </li>
      <li>
        If <var>current child</var> is not a <a>Text</a> node and is not an
        <a>Element</a> node, then increment <var>index</var> by one and jump to the step
        labelled <i>process a ruby child</i>.
      </li>
      <li>
        If <var>current child</var> is an <code>rp</code> element, then increment
        <var>index</var> by one and jump to the step labelled <i>process a ruby child</i>. (Note
        that this has the effect of including this element in any range that we are currently
        processing. This is done intentionally so that misplaced <code>rp</code> can be
        processed correctly; semantically they are ignored all the same.)
      </li>
      <li>
        If <var>current child</var> is an <code>rt</code> element, then run these substeps:
    <ol>
          <li>Run the steps to <a>commit an automatic base</a>.</li>
          <li>Run the steps to <a>commit the base range</a>.</li>
          <li>
            If <var>current annotations</var> is empty, set <var>current annotations range
            start</var> to the value of <var>index</var>.
          </li>
          <li>
            Create a new DOM range whose <a>start</a> is the
            <a>boundary point</a> (<var>root</var>,
            <var>index</var>) and whose <a>end</a> is the <a>boundary point</a> (<var>root</var>, <var>index</var> plus
            one), and append it at the end of <var>current annotations</var>.
          </li>
          <li>
            Increment <var>index</var> by one and jump to the step labelled <i>process a ruby
            child</i>.
          </li>
        </ol>
      </li>
      <li>
        If <var>current child</var> is an <code>rtc</code> element, then run these
        substeps:
        <ol>
          <li>Run the steps to <a>commit an automatic base</a>.</li>
          <li>Run the steps to <a>commit the base range</a>.</li>
          <li>Run the steps to <a>commit current annotations</a>.</li>
          <li>
            Create a new <a>ruby annotation container</a>. It is described by the list of
            annotations returned by running the steps to <a>process an <code>rtc</code>
            element</a> and a DOM range whose <a>start</a> is
            the <a>boundary point</a> (<var>root</var>,
            <var>index</var>) and whose <a>end</a> is the <a>boundary point</a> (<var>root</var>, <var>index</var> plus
            one). Append this new <a>ruby annotation container</a> at the end of <var>current
            annotation containers</var>.
          </li>
          <li>
            Increment <var>index</var> by one and jump to the step labelled <i>process a ruby
            child</i>.
          </li>
        </ol>
      </li>
      <li>
        If <var>current child</var> is a <a>Text</a> node and is <a>inter-element
        whitespace</a>, then run these substeps:
        <ol>
          <li>
            If <var>current annotations</var> is not empty, increment <var>index</var> by one and
            jump to the step labelled <i>process a ruby child</i>.
          </li>
          <li>
            Run the following substeps:
            <ol>
              <li>Let <var>lookahead index</var> be set to the value of <var>index</var>.</li>
              <li><i>Peek ahead</i>: Increment <var>lookahead index</var> by one.</li>
              <li>
                If <var>lookahead index</var> is equal to or greater than the number of
                child nodes in <var>root</var>, then abort these substeps.
              </li>
              <li>
                Let <var>peek child</var> be the <var>lookahead index</var>th node in
                <var>root</var>.
              </li>
              <li>
                If <var>peek child</var> is a <a>Text</a> node and is <a>inter-element
                whitespace</a>, then jump to the step labelled <i>peek ahead</i>.
              </li>
              <li>
                If <var>peek child</var> is an <code>rt</code> element, an
                <code>rtc</code> element, or an <code>rp</code> element, then set
                <var>index</var> to the value of <var>lookahead index</var> and jump to the step
                labelled <i>process a ruby child</i>.
              </li>
            </ol>
          </li>
        </ol>
      </li>
      <li>
        If <var>current annotations</var> is not empty or if <var>current annotation
        containers</var> is not empty, then run the steps to <a>commit a ruby segment</a>.
      </li>
      <li>
        If <var>current child</var> is an <code>rb</code> element, then run these substeps:
        <ol>
          <li>Run the steps to <a>commit an automatic base</a>.</li>
          <li>
            If <var>current bases</var> is empty, then set <var>current bases range start</var> to
            the value of <var>index</var>.
          </li>
          <li>
            Create a new DOM range whose <a>start</a> is the
            <a>boundary point</a> (<var>root</var>,
            <var>index</var>) and whose <a>end</a> is the <a>boundary point</a> (<var>root</var>, <var>index</var> plus
            one), and append it at the end of <var>current bases</var>.
          </li>
          <li>
            Increment <var>index</var> by one and jump to the step labelled <i>process a ruby
            child</i>.
            </li>
        </ol>
      </li>
      <li>
        If <var>current automatic base nodes</var> is empty, set <var>current automatic base range
        start</var> to the value of <var>index</var>.
      </li>
      <li>
        Append <var>current child</var> at the end of <var>current automatic base nodes</var>.
      </li>
      <li>
        Increment <var>index</var> by one and jump to the step labelled <i>process a ruby
        child</i>.
      </li>
    </ol>

      When the steps above say to <dfn>commit a ruby segment</dfn>, it means to run the
      following steps at that point in the algorithm:

    <ol>
      <li>Run the steps to <a>commit an automatic base</a>.</li>
      <li>
        If <var>current bases</var>, <var>current annotations</var>, and <var>current annotation
        containers</var> are all empty, abort these steps.
      </li>
      <li>Run the steps to <a>commit the base range</a>.</li>
      <li>Run the steps to <a>commit current annotations</a>.</li>
      <li>
        Create a new <a>ruby segment</a>. It is described by a list of bases set to
        <var>current bases</var>, a base DOM range set to <var>current bases range</var>, and a
        list of <a>ruby annotation containers</a>
        that are the <var>current annotation containers</var> list. Append this new
        <a>ruby segment</a> at the end of <var>ruby segments</var>.
      </li>
      <li>Let <var>current bases</var> be an empty list.</li>
      <li>Let <var>current bases range</var> be null.</li>
      <li>Let <var>current bases range start</var> be null.</li>
      <li>Let <var>current annotation containers</var> be an empty list.</li>
    </ol>

      When the steps above say to <dfn>commit the base range</dfn>, it means to run the following
      steps at that point in the algorithm:

    <ol>
      <li>If <var>current bases</var> is empty, abort these steps.</li>
      <li>If <var>current bases range</var> is not null, abort these steps.</li>
      <li>
        Let <var>current bases range</var> be a DOM range whose <a>start</a> is the <a>boundary
        point</a> (<var>root</var>, <var>current bases range start</var>) and whose <a>end</a> is the <a>boundary
        point</a> (<var>root</var>, <var>index</var>).
      </li>
    </ol>

      When the steps above say to <dfn>commit current annotations</dfn>, it means to run the
      following steps at that point in the algorithm:

    <ol>
      <li>
        If <var>current annotations</var> is not empty and <var>current annotations range</var> is
        null let <var>current annotations range</var> be a DOM range whose <a>start</a> is the <a>boundary
        point</a> (<var>root</var>, <var>current annotations range start</var>) and whose <a>end</a> is the <a>boundary
        point</a> (<var>root</var>, <var>index</var>).
      </li>
      <li>
        If <var>current annotations</var> is not empty, create a new <a>ruby annotation
        container</a>. It is described by an annotations list set to <var>current
        annotations</var> and a range set to <var>current annotations range</var>. Append this new
        <a>ruby annotation container</a> at the end of <var>current annotation
        containers</var>.
      </li>
      <li>Let <var>current annotations</var> be an empty list of DOM ranges.</li>
      <li>Let <var>current annotations range</var> be null.</li>
      <li>Let <var>current annotations range start</var> be null.</li>
    </ol>

      When the steps above say to <dfn>commit an automatic base</dfn>, it means to run the
      following steps at that point in the algorithm:

    <ol>
      <li>
        If <var>current automatic base nodes</var> is empty, abort these steps.
      </li>
      <li>
        If <var>current automatic base nodes</var> contains nodes that are not <a>Text</a>
        nodes, or <a>Text</a> nodes that are not <a>inter-element whitespace</a>, then
        run these substeps:
        <ol>
          <li>
            It <var>current bases</var> is empty, set <var>current bases range start</var> to the
            value of <var>current automatic base range start</var>.
          </li>
          <li>
            Create a new DOM range whose <a>start</a> is the
            <a>boundary point</a> (<var>root</var>, <var>current
            automatic base range start</var>) and whose <a>end</a>
            is the <a>boundary point</a> (<var>root</var>,
            <var>index</var>), and append it at the end of <var>current bases</var>.
          </li>
        </ol>
        </li><li>Let <var>current automatic base nodes</var> be an empty list of DOM Nodes.</li>
        <li>Let <var>current automatic base range start</var> be null.</li>

    </ol>
  </div>

<h4 id="the-rb-element">The <dfn><code>rb</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>ruby</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      An <code>rb</code> element's <a>end tag</a> may be omitted if the <code>rb</code> element is
      immediately followed by an <code>rb</code>, <code>rt</code>, <code>rtc</code> or
      <code>rp</code> element, or if there is no more content in the parent element.
    </dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

    The <code>rb</code> element marks the base text component of a ruby annotation. When it is
    the child of a <code>ruby</code> element, it doesn't <a>represent</a> anything itself, but its parent <code>ruby</code>
    element uses it as part of determining what <em>it</em> <a>represents</a>.

  <div class="impl">
    An <code>rb</code> element that is not a child of a <code>ruby</code> element <a>represents</a>
    the same thing as its children.
  </div>

<h4 id="the-rt-element">The <dfn><code>rt</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>ruby</code> or of an <code>rtc</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      An <code>rt</code> element's <a>end tag</a> may be omitted if the <code>rt</code> element is
      immediately followed by an <code>rb</code>, <code>rt</code>, <code>rtc</code> or
      <code>rp</code> element, or if there is no more content in the parent element.
    </dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>rt</code> element marks the ruby text component of a ruby annotation. When it is
  the child of a <code>ruby</code> element or of an <code>rtc</code> element that is itself
  the child of a <code>ruby</code> element, it doesn't <a>represent</a> anything itself, but its ancestor <code>ruby</code>
  element uses it as part of determining what <em>it</em> <a>represents</a>.

  <div class="impl">
    An <code>rt</code> element that is not a child of a <code>ruby</code> element or of an
    <code>rtc</code> element that is itself the child of a <code>ruby</code> element
    <a>represents</a> the same thing as its children.
  </div>

<h4 id="the-rtc-element">The <dfn><code>rtc</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>ruby</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>, <code>rt</code>, or <code>rp</code> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      An <code>rtc</code> element's <a>end tag</a> may be omitted if the <code>rtc</code> element is
      immediately followed by an <code>rb</code> or <code>rtc</code> element, or if there is no more
      content in the parent element.
    </dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>rtc</code> element marks a <a>ruby text container</a> for ruby text components
  in a ruby annotation. When it is the child of a <code>ruby</code> element it doesn't <a>represent</a> anything itself, but its parent <code>ruby</code> element
  uses it as part of determining what <em>it</em> <a>represents</a>.

  <div class="impl">

      An <code>rtc</code> element that is not a child of a <code>ruby</code> element
      <a>represents</a> the same thing as its children.

      When an <code>rtc</code> element is processed as part of the segmentation and
      categorisation of content for a <code>ruby</code> element, the following algorithm
      defines how to <dfn>process an <code>rtc</code> element</dfn>:

    <ol>
      <li>
        Let <var>root</var> be the <code>rtc</code> element for which the algorithm is
        being run.
        </li>
      <li>Let <var>index</var> be 0.</li>
      <li>Let <var>annotations</var> be an empty list of DOM ranges.</li>
      <li>Let <var>current automatic annotation nodes</var> be an empty list of DOM nodes.</li>
      <li>Let <var>current automatic annotation range start</var> be null.</li>
      <li>
        <i>Process an rtc child</i>: If <var>index</var> is equal to or greater than the number of
        child nodes in <var>root</var>, then run the steps to <a>commit an automatic
        annotation</a>, return <var>annotations</var>, and abort these steps.
      </li>
      <li>
        Let <var>current child</var> be the <var>index</var>th node in <var>root</var>.
      </li>
      <li>
        If <var>current child</var> is an <code>rt</code> element, then run these substeps:
        <ol>
          <li>Run the steps to <a>commit an automatic annotation</a>.</li>
          <li>
            Create a new DOM range whose <a>start</a> is the
            <a>boundary point</a> (<var>root</var>,
            <var>index</var>) and whose <a>end</a> is the <a>boundary point</a> (<var>root</var>, <var>index</var> plus
            one), and append it at the end of <var>annotations</var>.
          </li>
          <li>
            Increment <var>index</var> by one and jump to the step labelled <i>process an rtc
            child</i>.
          </li>
        </ol>
      </li>
      <li>
        If <var>current automatic annotation nodes</var> is empty, set <var>current automatic
        annotation range start</var> to the value of <var>index</var>.
      </li>
      <li>
        Append <var>current child</var> at the end of <var>current automatic annotation
        nodes</var>.
      </li>
      <li>
        Increment <var>index</var> by one and jump to the step labelled <i>process an rtc
        child</i>.
      </li>
    </ol>

      When the steps above say to <dfn>commit an automatic annotation</dfn>, it means to run the
      following steps at that point in the algorithm:

    <ol>
      <li>
        If <var>current automatic annotation nodes</var> is empty, abort these steps.
      </li>
      <li>
        If <var>current automatic annotation nodes</var> contains nodes that are not
        <a>Text</a> nodes, or <a>Text</a> nodes that are not <a>inter-element
        whitespace</a>, then create a new DOM range whose <a>start</a> is the <a>boundary
        point</a> (<var>root</var>, <var>current automatic annotation range start</var>) and
        whose <a>end</a> is the <a>boundary point</a> (<var>root</var>, <var>index</var>), and
        append it at the end of <var>annotations</var>.
      </li>
      <li>Let <var>current automatic annotation nodes</var> be an empty list of DOM nodes.</li>
      <li>Let <var>current automatic annotation range start</var> be null.</li>
    </ol>
  </div>

<h4 id="the-rp-element">The <dfn><code>rp</code></dfn> element</h4>
  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt>
      <a>Contexts in which this element can be used</a>:
      </dt>
    <dd>
      As a child of a <code>ruby</code> or <code>rtc</code> element, either immediately before or
      immediately after an <code>rt</code> or <code>rtc</code> element, but not between
      <code>rt</code> elements.
    </dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>An <code>rp</code> element's <a>end tag</a> may be omitted
    if the <code>rp</code> element is immediately followed by an <code>rb</code>, <code>rt</code>,
    <code>rtc</code> or <code>rp</code> element, or if there is no more content in the parent
    element.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

    The <code>rp</code> element is used to provide fallback text to be shown by user agents that
    don't support ruby annotations. One widespread convention is to provide parentheses around
    the ruby text component of a ruby annotation.

    The contents of the <code>rp</code> elements are typically not displayed by user agents
    which do support ruby annotations

    An <code>rp</code> element <span class="impl">that is a child of a <code>ruby</code>
    element</span> <a>represents</a> nothing. <span class="impl">An <code>rp</code>
    element whose parent element is not a <code>ruby</code> element <a>represents</a> its
    children.</span>

    The example shown previously, in which each ideograph in the text <span lang="ja">æ¼¢å­</span> is annotated with its phonetic reading, could be expanded
    to use <code>rp</code> so that in legacy user agents the readings are in parentheses (please
    note that white space has been introduced into this example in order to make it more
    readable):

  <div class="example"><pre lang="ja">...
&lt;ruby&gt;
  æ¼¢
  &lt;rb&gt;å­&lt;/rb&gt;
  &lt;rp&gt; (&lt;/rp&gt;
  &lt;rt&gt;ãã&lt;/rt&gt;
  &lt;rt&gt;ã&lt;/rt&gt;
  &lt;rp&gt;) &lt;/rp&gt;
&lt;/ruby&gt;
...
  </pre></div>

    In conforming user agents the rendering would be as above, but in user agents that do not
    support ruby, the rendering would be:

  <div class="example"><pre lang="ja">... æ¼¢å­ (ããã) ...</pre></div>

    When there are multiple annotations for a segment, <code>rp</code> elements can also be
    placed between the annotations. Here is another copy of an earlier contrived example showing
    some symbols with names given in English and French using double-sided annotations, but this
    time with <code>rp</code> elements as well:

  <div class="example">
    <pre highlight="html">
      &lt;ruby&gt;
        â¥&lt;rp&gt;: &lt;/rp&gt;&lt;rt&gt;Heart&lt;/rt&gt;&lt;rp&gt;, &lt;/rp&gt;&lt;rtc&gt;&lt;rt lang=fr&gt;CÅur&lt;/rt&gt;&lt;/rtc&gt;&lt;rp&gt;.&lt;/rp&gt;
        â&lt;rp&gt;: &lt;/rp&gt;&lt;rt&gt;Shamrock&lt;/rt&gt;&lt;rp&gt;, &lt;/rp&gt;&lt;rtc&gt;&lt;rt lang=fr&gt;TrÃ¨fle&lt;/rt&gt;&lt;/rtc&gt;&lt;rp&gt;.&lt;/rp&gt;
        â¶&lt;rp&gt;: &lt;/rp&gt;&lt;rt&gt;Star&lt;/rt&gt;&lt;rp&gt;, &lt;/rp&gt;&lt;rtc&gt;&lt;rt lang=fr&gt;Ãtoile&lt;/rt&gt;&lt;/rtc&gt;&lt;rp&gt;.&lt;/rp&gt;
      &lt;/ruby&gt;
    </pre>
  </div>

    This would make the example render as follows in non-ruby-capable user agents:

  <div class="example">
    <pre highlight="html">
      â¥: Heart, <span lang="fr">CÅur</span>.
      â: Shamrock, <span lang="fr">TrÃ¨fle</span>.
      â¶: Star, <span lang="fr">Ãtoile</span>.
    </pre>
  </div>

<h4 id="the-data-element">The <dfn><code>data</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>value</code> - Machine-readable value </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLDataElement : HTMLElement {
          attribute DOMString value;
        };
      </pre>
    </dd>
  </dl>

  The <code>data</code> element <a>represents</a> its contents, along with a
  machine-readable form of those contents in the <code>value</code>
  attribute.

  The <dfn><code>value</code></dfn> attribute must be present. Its value
  must be a representation of the element's contents in a machine-readable format.

  <p class="note">
    When the value is date- or time-related, the more specific <code>time</code>
  element can be used instead.
  </p>

  The element can be used for several purposes.

  When combined with microformats or microdata,
  the element serves to provide both a machine-readable value for the purposes
  of data processors, and a human-readable value for the purposes of rendering in a Web browser. In
  this case, the format to be used in the <code>value</code> attribute is
  determined by the microformats or microdata vocabulary in use.

  The element can also, however, be used in conjunction with scripts in the page, for when a
  script has a literal value to store alongside a human-readable value. In such cases, the format to
  be used depends only on the needs of the script. (The <code>data-*</code>
  attributes can also be useful in such situations.)

  <div class="impl">

  The <dfn><code>value</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.

  </div>

  <div class="example">
    Here, a short table has its numeric values encoded using <code>data</code> so that the
    <a>table sorting model</a> can provide a sorting mechanism on each column, despite the
    numbers being presented in textual form in one column and in a decomposed form in another.

    <pre highlight="html">
&lt;table sortable&gt;
  &lt;thead&gt; &lt;tr&gt; &lt;th&gt; Game &lt;th&gt; Corporations &lt;th&gt; Map Size
  &lt;tbody&gt;
  &lt;tr&gt; &lt;td&gt; 1830 &lt;td&gt; &lt;data value="8"&gt;Eight&lt;/data&gt; &lt;td&gt; &lt;data value="93"&gt;19+74 hexes (93 total)&lt;/data&gt;
  &lt;tr&gt; &lt;td&gt; 1856 &lt;td&gt; &lt;data value="11"&gt;Eleven&lt;/data&gt; &lt;td&gt; &lt;data value="99"&gt;12+87 hexes (99 total)&lt;/data&gt;
  &lt;tr&gt; &lt;td&gt; 1870 &lt;td&gt; &lt;data value="10"&gt;Ten&lt;/data&gt; &lt;td&gt; &lt;data value="149"&gt;4+145 hexes (149 total)&lt;/data&gt;
&lt;/table&gt;
    </pre>

  </div>

<h4 id="the-time-element">The <dfn><code>time</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>datetime</code> - Machine-readable value</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLTimeElement : HTMLElement {
  attribute DOMString dateTime;
};
</pre>
    </dd>
  </dl>

  The <code>time</code> element <a>represents</a> its contents, along with a
  machine-readable form of those contents in the <code>datetime</code>
  attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and
  durations, as described below.

  The <dfn><code>datetime</code></dfn> attribute may be present. If
  present, its value must be a representation of the element's contents in a machine-readable
  format.

  A <code>time</code> element that does not have a <code>datetime</code> content attribute must not have any element
  descendants.

  The <dfn>datetime value</dfn> of a <code>time</code> element is the value of the element's
  <code>datetime</code> content attribute, if it has one, or the
  element's <code>textContent</code>, if it does not.

  The <a>datetime value</a> of a <code>time</code> element must match one of the following
  syntaxes.

  <dl>

    <dt>A <a>valid month string</a></dt>

    <dd>

    <pre class="example">&lt;time&gt;2011-11&lt;/time&gt;</pre>

    </dd>

    <dt>A <a>valid date string</a></dt>

    <dd>

    <pre class="example">&lt;time&gt;2011-11-12&lt;/time&gt;</pre>

    </dd>

    <dt>A <a>valid yearless date string</a></dt>

    <dd>

    <pre class="example">&lt;time&gt;11-12&lt;/time&gt;</pre>

    </dd>

    <dt>A <a>valid time string</a></dt>

    <dd>

    <pre class="example">&lt;time&gt;14:54&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;14:54:39&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;14:54:39.929&lt;/time&gt;</pre>

    </dd>

    <dt>A <a>valid floating date and time string</a></dt>

    <dd>

    <pre class="example">&lt;time&gt;2011-11-12T14:54&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12T14:54:39&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12T14:54:39.929&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12 14:54&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12 14:54:39&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12 14:54:39.929&lt;/time&gt;</pre>

    <p class="note">
    Times with dates but without a time zone offset are useful for specifying events
    that are observed at the same specific time in each time zone, throughout a day. For example,
    the 2020 new year is celebrated at 2020-01-01 00:00 in each time zone, not at the same precise
    moment across all time zones. For events that occur at the same time across all time zones, for
    example a videoconference meeting, a <a>valid global date and time string</a> is likely
    more useful.
  </p>

    </dd>

    <dt>A <a>valid time-zone offset string</a></dt>

    <dd>

    <pre class="example">&lt;time&gt;Z&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;+0000&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;+00:00&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;-0800&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;-08:00&lt;/time&gt;</pre>

    <p class="note">
    For times without dates (or times referring to events that recur on multiple
    dates), specifying the geographic location that controls the time is usually more useful than
    specifying a time zone offset, because geographic locations change time zone offsets with
    daylight savings time. In some cases, geographic locations even change time zone, e.g. when the
    boundaries of those time zones are redrawn, as happened with Samoa at the end of 2011. There
    exists a time zone database that describes the boundaries of time zones and what rules apply
    within each such zone, known as the <i>time zone database</i>. [[!TZDATABASE]]
  </p>

    </dd>

    <dt>A <a>valid global date and time string</a></dt>

    <dd>

    <pre class="example">&lt;time&gt;2011-11-12T14:54Z&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12T14:54:39Z&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12T14:54:39.929Z&lt;/time&gt;</pre>

    <pre class="example">&lt;time&gt;2011-11-12T14:54+0000&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12T14:54:39+0000&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12T14:54:39.929+0000&lt;/time&gt;</pre>

    <pre class="example">&lt;time&gt;2011-11-12T14:54+00:00&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12T14:54:39+00:00&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12T14:54:39.929+00:00&lt;/time&gt;</pre>

    <pre class="example">&lt;time&gt;2011-11-12T06:54-0800&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12T06:54:39-0800&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12T06:54:39.929-0800&lt;/time&gt;</pre>

    <pre class="example">&lt;time&gt;2011-11-12T06:54-08:00&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12T06:54:39-08:00&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12T06:54:39.929-08:00&lt;/time&gt;</pre>

    <pre class="example">&lt;time&gt;2011-11-12 14:54Z&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12 14:54:39Z&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12 14:54:39.929Z&lt;/time&gt;</pre>

    <pre class="example">&lt;time&gt;2011-11-12 14:54+0000&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12 14:54:39+0000&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12 14:54:39.929+0000&lt;/time&gt;</pre>

    <pre class="example">&lt;time&gt;2011-11-12 14:54+00:00&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12 14:54:39+00:00&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12 14:54:39.929+00:00&lt;/time&gt;</pre>

    <pre class="example">&lt;time&gt;2011-11-12 06:54-0800&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12 06:54:39-0800&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12 06:54:39.929-0800&lt;/time&gt;</pre>

    <pre class="example">&lt;time&gt;2011-11-12 06:54-08:00&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12 06:54:39-08:00&lt;/time&gt;</pre>
    <pre class="example">&lt;time&gt;2011-11-12 06:54:39.929-08:00&lt;/time&gt;</pre>

    <p class="note">
    Times with dates and a time zone offset are useful for specifying specific
    events, or recurring virtual events where the time is not anchored to a specific geographic
    location. For example, the precise time of an asteroid impact, or a particular meeting in a
    series of meetings held at 1400 UTC every day, regardless of whether any particular part of the
    world is observing daylight savings time or not. For events where the precise time varies by the
    local time zone offset of a specific geographic location, a <a>valid floating date and time
    string</a> combined with that geographic location is likely more useful.
  </p>

    </dd>

    <dt>A <a>valid week string</a></dt>

    <dd>

    <pre class="example">&lt;time&gt;2011-W46&lt;/time&gt;</pre>

    </dd>

    <dt>Four or more <a>ASCII digits</a>, at least one of which is not U+0030 DIGIT ZERO (0)</dt>

    <dd>

    <pre class="example">&lt;time&gt;2011&lt;/time&gt;</pre>

    <pre class="example">&lt;time&gt;0001&lt;/time&gt;</pre>

    </dd>

    <dt>A <a>valid duration string</a></dt>

    <dd>

    <pre class="example">&lt;time&gt;PT4H18M3S&lt;/time&gt;</pre>

    <pre class="example">&lt;time&gt;4h 18m 3s&lt;/time&gt;</pre>

    </dd>

  </dl>

  <p class="note">
    Many of the preceding valid syntaxes describe "floating" date and/or time values
  (they do not include a <a>time-zone offset</a>). Care is needed when
  converting floating time values to or from global ("incremental") time values (e.g., JavaScript's
  Date object). In many cases, an implicit time-of-day and time zone are used in the conversion and
  may result in unexpected changes to the value of the date itself.
  [[!TIMEZONE]]
  </p>

  <div class="impl">

  The <dfn>machine-readable equivalent of the element's contents</dfn> must be obtained from the
  element's <a>datetime value</a> by using the following algorithm:

  <ol>

    <li>If <a>parsing a month string</a> from the element's
    <a>datetime value</a> returns a <a>month</a>, that is the
    machine-readable equivalent; abort these steps.</li>

    <li>If <a>parsing a date string</a> from the element's
    <a>datetime value</a> returns a <a>date</a>, that is the
    machine-readable equivalent; abort these steps.</li>

    <li>If <a>parsing a yearless date string</a> from
    the element's <a>datetime value</a> returns a <a>yearless
    date</a>, that is the machine-readable equivalent; abort these steps.</li>

    <li>If <a>parsing a time string</a> from the element's
    <a>datetime value</a> returns a <a>time</a>, that is the
    machine-readable equivalent; abort these steps.</li>

    <li>If <a>parsing a local date and time
    string</a> from the element's <a>datetime value</a> returns a <a>local date and time</a>, that is the machine-readable
    equivalent; abort these steps.</li>

    <li>If <a>parsing a time-zone offset string</a>
    from the element's <a>datetime value</a> returns a <a>time-zone
    offset</a>, that is the machine-readable equivalent; abort these steps.</li>

    <li>If <a>parsing a global date and time
    string</a> from the element's <a>datetime value</a> returns a <a>global date and time</a>, that is the machine-readable equivalent;
    abort these steps.</li>

    <li>If <a>parsing a week string</a> from the element's
    <a>datetime value</a> returns a <a>week</a>, that is the
    machine-readable equivalent; abort these steps.</li>

    <li>If the element's <a>datetime value</a> consists of only <a>ASCII digits</a>,
    at least one of which is not U+0030 DIGIT ZERO (0), then the machine-readable equivalent is the
    base-ten interpretation of those digits, representing a year; abort these steps.</li>

    <li>If <a>parsing a duration string</a> from the
    element's <a>datetime value</a> returns a <a>duration</a>,
    that is the machine-readable equivalent; abort these steps.</li>

    <li>There is no machine-readable equivalent.</li>

  </ol>

  <p class="note">
    The algorithms referenced above are intended to be designed such that for any
  arbitrary string <var>s</var>, only one of the algorithms returns a value. A more
  efficient approach might be to create a single algorithm that parses all these data types in one
  pass; developing such an algorithm is left as an exercise to the reader.
  </p>

  The <dfn><code>dateTime</code></dfn> IDL attribute must
  <a>reflect</a> the element's <code>datetime</code> content
  attribute.

  </div>

  <div class="example">
    The <code>time</code> element can be used to encode dates, for example in microformats. The
    following shows a hypothetical way of encoding an event using a variant on hCalendar that uses
    the <code>time</code> element:

    <pre highlight="html">
&lt;div class="vevent"&gt;
  &lt;a class="url" href="http://www.web2con.com/"&gt;http://www.web2con.com/&lt;/a&gt;
  &lt;span class="summary"&gt;Web 2.0 Conference&lt;/span&gt;:
  &lt;time class="dtstart" datetime="2005-10-05"&gt;October 5&lt;/time&gt; -
  &lt;time class="dtend" datetime="2005-10-07"&gt;7&lt;/time&gt;,
  at the &lt;span class="location"&gt;Argent Hotel, San Francisco, CA&lt;/span&gt;
  &lt;/div&gt;
    </pre>

  </div>

  <div class="example">
    Here, a fictional microdata vocabulary based on the Atom vocabulary is used with the
    <code>time</code> element to mark up a blog post's publication date.

    <pre highlight="html">
&lt;article itemscope itemtype="http://n.example.org/rfc4287"&gt;
  &lt;h1 itemprop="title"&gt;Big tasks&lt;/h1&gt;
  &lt;footer&gt;Published &lt;time itemprop="published" datetime="2009-08-29"&gt;two days ago&lt;/time&gt;.&lt;/footer&gt;
  &lt;p itemprop="content"&gt;Today, I went out and bought a bike for my kid.&lt;/p&gt;
&lt;/article&gt;
    </pre>

  </div>

  <div class="example">
    In this example, another article's publication date is marked up using <code>time</code>, this
    time using the schema.org microdata vocabulary:

    <pre highlight="html">
&lt;article itemscope itemtype="http://schema.org/BlogPosting"&gt;
  &lt;h1 itemprop="headline"&gt;Small tasks&lt;/h1&gt;
  &lt;footer&gt;Published &lt;time itemprop="datePublished" datetime="2009-08-30"&gt;yesterday&lt;/time&gt;.&lt;/footer&gt;
  &lt;p itemprop="articleBody"&gt;I put a bike bell on his bike.&lt;/p&gt;
&lt;/article&gt;
    </pre>

  </div>

  <div class="example">
    In the following snippet, the <code>time</code> element is used to encode a date in the
    ISO8601 format, for later processing by a script:

    <pre highlight="html">
&lt;p&gt;Our first date was &lt;time datetime="2006-09-23"&gt;a Saturday&lt;/time&gt;.&lt;/p&gt;
    </pre>

    In this second snippet, the value includes a time:

    <pre highlight="html">
&lt;p&gt;We stopped talking at &lt;time datetime="2006-09-24T05:00-07:00"&gt;5am the next morning&lt;/time&gt;.&lt;/p&gt;
    </pre>

    A script loaded by the page (and thus privy to the page's internal convention of marking up
    dates and times using the <code>time</code> element) could scan through the page and look at all
    the <code>time</code> elements therein to create an index of dates and times.

  </div>

  <div class="example">
    For example, this element conveys the string "Tuesday" with the additional semantic that the
    15th of November 2011 is the meaning that corresponds to "Tuesday":

    <pre highlight="html">
Today is &lt;time datetime="2011-11-15"&gt;Tuesday&lt;/time&gt;.
    </pre>

  </div>

  <div class="example">
    In this example, a specific time in the Pacific Standard Time timezone is specified:

    <pre highlight="html">
Your next meeting is at &lt;time datetime="2011-11-12T15:00-08:00"&gt;3pm&lt;/time&gt;.
    </pre>

  </div>

<h4 id="the-code-element">The <dfn><code>code</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>code</code> element <a>represents</a> a fragment of computer code. This could
  be an XML element name, a file name, a computer program, or any other string that a computer would
  recognize.

  There is no formal way to indicate the language of computer code being marked up. Authors who
  wish to mark <code>code</code> elements with the language used, e.g. so that syntax highlighting
  scripts can use the right rules, can use the <code>class</code> attribute, e.g.
  by adding a class prefixed with "<code>language-</code>" to the element.

  <div class="example">
    The following example shows how the element can be used in a paragraph to mark up element
    names and computer code, including punctuation.

    <pre highlight="html">
&lt;p&gt;The &lt;code&gt;code&lt;/code&gt; element represents a fragment of computer
code.&lt;/p&gt;

&lt;p&gt;When you call the &lt;code&gt;activate()&lt;/code&gt; method on the
&lt;code&gt;robotSnowman&lt;/code&gt; object, the eyes glow.&lt;/p&gt;

&lt;p&gt;The example below uses the &lt;code&gt;begin&lt;/code&gt; keyword to indicate
the start of a statement block. It is paired with an &lt;code&gt;end&lt;/code&gt;
keyword, which is followed by the &lt;code&gt;.&lt;/code&gt; punctuation character
(full stop) to indicate the end of the program.&lt;/p&gt;
    </pre>

  </div>

  <div class="example">
    The following example shows how a block of code could be marked up using the <code>pre</code>
    and <code>code</code> elements.

    <pre highlight="html">
&lt;pre&gt;&lt;code class="language-pascal"&gt;var i: Integer;
begin
    i := 1;
end.&lt;/code&gt;&lt;/pre&gt;
    </pre>

    A class is used in that example to indicate the language used.

  </div>

  <p class="note">
    See the <code>pre</code> element for more details.
  </p>

<h4 id="the-var-element">The <dfn><code>var</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>var</code> element <a>represents</a> a variable. This could be an actual
  variable in a mathematical expression or programming context, an identifier representing a
  constant, a symbol identifying a physical quantity, a function parameter, or just be a term used
  as a placeholder in prose.

  <div class="example">
    In the paragraph below, the letter "n" is being used as a
    variable in prose:
    <pre highlight="html">
&lt;p&gt;If there are &lt;var&gt;n&lt;/var&gt; pipes leading to the ice
cream factory then I expect at &lt;em&gt;least&lt;/em&gt; &lt;var&gt;n&lt;/var&gt;
flavors of ice cream to be available for purchase!&lt;/p&gt;
    </pre>
  </div>

  For mathematics, in particular for anything beyond the simplest of expressions, MathML is more
  appropriate. However, the <code>var</code> element can still be used to refer to specific
  variables that are then mentioned in MathML expressions.

  <div class="example">
    In this example, an equation is shown, with a legend that references the variables in the
    equation. The expression itself is marked up with MathML, but the variables are mentioned in the
    figure's legend using <code>var</code>.

    <pre highlight="html">
&lt;figure&gt;
  &lt;math&gt;
  &lt;mi&gt;a&lt;/mi&gt;
  &lt;mo&gt;=&lt;/mo&gt;
  &lt;msqrt&gt;
    &lt;msup&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;
    &lt;mi&gt;+&lt;/mi&gt;
    &lt;msup&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;
  &lt;/msqrt&gt;
  &lt;/math&gt;
  &lt;figcaption&gt;
  Using Pythagoras' theorem to solve for the hypotenuse &lt;var&gt;a&lt;/var&gt; of
  a triangle with sides &lt;var&gt;b&lt;/var&gt; and &lt;var&gt;c&lt;/var&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
    </pre>

  </div>

  <div class="example">
    Here, the equation describing mass-energy equivalence is used in a sentence, and the
    <code>var</code> element is used to mark the variables and constants in that equation:

    <pre highlight="html">
&lt;p&gt;Then he turned to the blackboard and picked up the chalk. After a few moment's
thought, he wrote &lt;var&gt;E&lt;/var&gt; = &lt;var&gt;m&lt;/var&gt; &lt;var&gt;c&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt;. The teacher
looked pleased.&lt;/p&gt;
    </pre>

  </div>

<h4 id="the-samp-element">The <dfn><code>samp</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>samp</code> element <a>represents</a> sample or quoted output from another
  program or computing system.

  <p class="note">
    See the <code>pre</code> and <code>kbd</code> elements for more details.
  </p>

  <p class="note">
    This element can be contrasted with the <code>output</code> element, which can be
  used to provide immediate output in a Web application.
  </p>

  <div class="example">
    This example shows the <code>samp</code> element being used
    inline:
    <pre highlight="html">
&lt;p&gt;The computer said &lt;samp&gt;Too much cheese in tray
two&lt;/samp&gt; but I didn't know what that meant.&lt;/p&gt;
    </pre>
  </div>

  <div class="example">
    This second example shows a block of sample output. Nested <code>samp</code> and
    <code>kbd</code> elements allow for the styling of specific elements of the sample output using a
    style sheet. There's also a few parts of the <code>samp</code> that are annotated with even more
    detailed markup, to enable very precise styling. To achieve this, <code>span</code> elements are
    used.

    <pre highlight="html">
&lt;pre&gt;&lt;samp&gt;&lt;span class="prompt"&gt;jdoe@mowmow:~$&lt;/span&gt; &lt;kbd&gt;ssh demo.example.com&lt;/kbd&gt;
Last login: Tue Apr 12 09:10:17 2005 from mowmow.example.com on pts/1
Linux demo 2.6.10-grsec+gg3+e+fhs6b+nfs+gr0501+++p3+c4a+gr2b-reslog-v6.189 #1 SMP Tue Feb 1 11:22:36 PST 2005 i686 unknown

&lt;span class="prompt"&gt;jdoe@demo:~$&lt;/span&gt; &lt;span class="cursor"&gt;_&lt;/span&gt;&lt;/samp&gt;&lt;/pre&gt;
    </pre>

  </div>

<h4 id="the-kbd-element">The <dfn><code>kbd</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>kbd</code> element <a>represents</a> user input (typically keyboard input,
  although it may also be used to represent other input, such as voice commands).

  When the <code>kbd</code> element is nested inside a <code>samp</code> element, it represents
  the input as it was echoed by the system.

  When the <code>kbd</code> element <em>contains</em> a <code>samp</code> element, it represents
  input based on system output, for example invoking a menu item.

  When the <code>kbd</code> element is nested inside another <code>kbd</code> element, it
  represents an actual key or other single unit of input as appropriate for the input mechanism.

  <div class="example">
    Here the <code>kbd</code> element is used to indicate keys to press:

    <pre highlight="html">
&lt;p&gt;To make George eat an apple, press &lt;kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;F3&lt;/kbd&gt;&lt;/kbd&gt;&lt;/p&gt;
    </pre>

    In this second example, the user is told to pick a particular menu item. The outer
    <code>kbd</code> element marks up a block of input, with the inner <code>kbd</code> elements
    representing each individual step of the input, and the <code>samp</code> elements inside them
    indicating that the steps are input based on something being displayed by the system, in this
    case menu labels:

    <pre highlight="html">
&lt;p&gt;To make George eat an apple, select
    &lt;kbd&gt;&lt;kbd&gt;&lt;samp&gt;File&lt;/samp&gt;&lt;/kbd&gt;|&lt;kbd&gt;&lt;samp&gt;Eat Apple...&lt;/samp&gt;&lt;/kbd&gt;&lt;/kbd&gt;
&lt;/p&gt;
    </pre>

    Such precision isn't necessary; the following is equally fine:

    <pre highlight="html">
&lt;p&gt;To make George eat an apple, select &lt;kbd&gt;File | Eat Apple...&lt;/kbd&gt;&lt;/p&gt;
    </pre>

  </div>

<h4 id="the-sub-and-sup-elements">The <dfn><code>sub</code></dfn> and <dfn><code>sup</code></dfn> elements</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Use <code>HTMLElement</code>.</dd>
  </dl>

  The <code>sup</code> element <a>represents</a> a superscript and the <code>sub</code>
  element <a>represents</a> a subscript.

  These elements must be used only to mark up typographical conventions with specific meanings,
  not for typographical presentation for presentation's sake. For example, it would be inappropriate
  for the <code>sub</code> and <code>sup</code> elements to be used in the name of the LaTeX
  document preparation system. In general, authors should use these elements only if the
  <em>absence</em> of those elements would change the meaning of the content.

  In certain languages, superscripts are part of the typographical conventions for some
  abbreviations.

  <div class="example">
    <pre highlight="html">
&lt;p&gt;The most beautiful women are
&lt;span lang="fr"&gt;&lt;abbr&gt;M&lt;sup&gt;lle&lt;/sup&gt;&lt;/abbr&gt; Gwendoline&lt;/span&gt; and
&lt;span lang="fr"&gt;&lt;abbr&gt;M&lt;sup&gt;me&lt;/sup&gt;&lt;/abbr&gt; Denise&lt;/span&gt;.&lt;/p&gt;
    </pre>
  </div>

  The <code>sub</code> element can be used inside a <code>var</code> element, for variables that
  have subscripts.

  <div class="example">
    Here, the <code>sub</code> element is used to represent the subscript that identifies the
    variable in a family of variables:

    <pre highlight="html">
&lt;p&gt;The coordinate of the &lt;var&gt;i&lt;/var&gt;th point is
(&lt;var&gt;x&lt;sub&gt;&lt;var&gt;i&lt;/var&gt;&lt;/sub&gt;&lt;/var&gt;, &lt;var&gt;y&lt;sub&gt;&lt;var&gt;i&lt;/var&gt;&lt;/sub&gt;&lt;/var&gt;).
For example, the 10th point has coordinate
(&lt;var&gt;x&lt;sub&gt;10&lt;/sub&gt;&lt;/var&gt;, &lt;var&gt;y&lt;sub&gt;10&lt;/sub&gt;&lt;/var&gt;).&lt;/p&gt;
    </pre>
  </div>

  Mathematical expressions often use subscripts and superscripts. Authors are encouraged to use
  MathML for marking up mathematics, but authors may opt to use <code>sub</code> and
  <code>sup</code> if detailed mathematical markup is not desired. [[!MATHML]]

  <div class="example">
    <pre highlight="html">
&lt;var&gt;E&lt;/var&gt;=&lt;var&gt;m&lt;/var&gt;&lt;var&gt;c&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt;
    </pre>
    <pre highlight="html">
f(&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;n&lt;/var&gt;) = log&lt;sub&gt;4&lt;/sub&gt;&lt;var&gt;x&lt;/var&gt;&lt;sup&gt;&lt;var&gt;n&lt;/var&gt;&lt;/sup&gt;
    </pre>
  </div>

<h4 id="the-i-element">The <dfn><code>i</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>i</code> element <a>represents</a> a span of text in an alternate voice or
  mood, or otherwise offset from the normal prose in a manner indicating a different quality of
  text, such as a taxonomic designation, a technical term, an idiomatic phrase from another
  language, transliteration, a thought, or a ship name in Western texts.

  Terms in languages different from the main text should be annotated with <code>lang</code> attributes (or, in XML, <a><code>lang</code> attributes in the </a><a>XML namespace</a>).

  <div class="example">
    The examples below show uses of the <code>i</code> element:
    <pre highlight="html">
&lt;p&gt;The &lt;i class="taxonomy"&gt;Felis silvestris catus&lt;/i&gt; is cute.&lt;/p&gt;
&lt;p&gt;The term &lt;i&gt;prose content&lt;/i&gt; is defined above.&lt;/p&gt;
&lt;p&gt;There is a certain &lt;i lang="fr"&gt;je ne sais quoi&lt;/i&gt; in the air.&lt;/p&gt;
    </pre>
    In the following example, a dream sequence is marked up using
    <code>i</code> elements.
    <pre highlight="html">
&lt;p&gt;Raymond tried to sleep.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;The ship sailed away on Thursday&lt;/i&gt;, he
dreamt. &lt;i&gt;The ship had many people aboard, including a beautiful
princess called Carey. He watched her, day-in, day-out, hoping she
would notice him, but she never did.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Finally one night he picked up the courage to speak with
herâ&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Raymond woke with a start as the fire alarm rang out.&lt;/p&gt;
    </pre>
  </div>

  Authors can use the <code>class</code> attribute on the <code>i</code>
  element to identify why the element is being used, so that if the style of a particular use (e.g.
  dream sequences as opposed to taxonomic terms) is to be changed at a later date, the author
  doesn't have to go through the entire document (or series of related documents) annotating each
  use.

  Authors are encouraged to consider whether other elements might be more applicable than the
  <code>i</code> element, for instance the <code>em</code> element for marking up stress emphasis,
  or the <code>dfn</code> element to mark up the defining instance of a term.

  <p class="note">
    Style sheets can be used to format <code>i</code> elements, just like any other
  element can be restyled. Thus, it is not the case that content in <code>i</code> elements will
  necessarily be italicized.
  </p>

<h4 id="the-b-element">The <dfn><code>b</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>b</code> element <a>represents</a> a span of text to which attention is being
  drawn for utilitarian purposes without conveying any extra importance and with no implication of
  an alternate voice or mood, such as key words in a document abstract, product names in a review,
  actionable words in interactive text-driven software, or an article lede.

  <div class="example">
    The following example shows a use of the <code>b</code> element to highlight key words without
    marking them up as important:

    <pre highlight="html">
&lt;p&gt;The &lt;b&gt;frobonitor&lt;/b&gt; and &lt;b&gt;barbinator&lt;/b&gt; components are fried.&lt;/p&gt;
    </pre>

  </div>

  <div class="example">
    In the following example, objects in a text adventure are highlighted as being special by use
    of the <code>b</code> element.

    <pre highlight="html">
&lt;p&gt;You enter a small room. Your &lt;b&gt;sword&lt;/b&gt; glows
brighter. A &lt;b&gt;rat&lt;/b&gt; scurries past the corner wall.&lt;/p&gt;
    </pre>

  </div>

  <div class="example">
    Another case where the <code>b</code> element is appropriate is in marking up the lede (or
    lead) sentence or paragraph. The following example shows how a <a>BBC article about
    kittens adopting a rabbit as their own</a> could be marked up:

    <pre highlight="html">
&lt;article&gt;
  &lt;h2&gt;Kittens 'adopted' by pet rabbit&lt;/h2&gt;
  &lt;p&gt;&lt;b class="lede"&gt;Six abandoned kittens have found an
  unexpected new mother figure â a pet rabbit.&lt;/b&gt;&lt;/p&gt;
  &lt;p&gt;Veterinary nurse Melanie Humble took the three-week-old
  kittens to her Aberdeen home.&lt;/p&gt;
<i>[...]</i>
    </pre>

  </div>

  As with the <code>i</code> element, authors can use the <code>class</code>
  attribute on the <code>b</code> element to identify why the element is being used, so that if the
  style of a particular use is to be changed at a later date, the author doesn't have to go through
  annotating each use.

  The <code>b</code> element should be used as a last resort when no other element is more
  appropriate. In particular, headings should use the <code>h1</code> to <code>h6</code> elements,
  stress emphasis should use the <code>em</code> element, importance should be denoted with the
  <code>strong</code> element, and text marked or highlighted should use the <code>mark</code>
  element.

  <div class="example">
    The following would be <em>incorrect</em> usage:

    <pre class="bad">&lt;p&gt;&lt;b&gt;WARNING!&lt;/b&gt; Do not frob the barbinator!&lt;/p&gt;</pre>

    In the previous example, the correct element to use would have been <code>strong</code>, not
    <code>b</code>.

  </div>

  <p class="note">
    Style sheets can be used to format <code>b</code> elements, just like any other
  element can be restyled. Thus, it is not the case that content in <code>b</code> elements will
  necessarily be boldened.
  </p>

<h4 id="the-u-element">The <dfn><code>u</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>u</code> element <a>represents</a> a span of text with an unarticulated, though
  explicitly rendered, non-textual annotation, such as labeling the text as being a proper name in
  Chinese text (a Chinese proper name mark), or labeling the text as being misspelt.

  In most cases, another element is likely to be more appropriate: for marking stress emphasis,
  the <code>em</code> element should be used; for marking key words or phrases either the
  <code>b</code> element or the <code>mark</code> element should be used, depending on the context;
  for marking book titles, the <code>cite</code> element should be used; for labeling text with explicit textual annotations, the
  <code>ruby</code> element should be used; for labeling ship names in Western texts, the
  <code>i</code> element should be used.

  <p class="note">
    The default rendering of the <code>u</code> element in visual presentations
  clashes with the conventional rendering of hyperlinks (underlining). Authors are encouraged to
  avoid using the <code>u</code> element where it could be confused for a hyperlink.
  </p>

<h4 id="the-mark-element">The <dfn><code>mark</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>mark</code> element <a>represents</a> a run of text in one document marked or
  highlighted for reference purposes, due to its relevance in another context. When used in a
  quotation or other block of text referred to from the prose, it indicates a highlight that was not
  originally present but which has been added to bring the reader's attention to a part of the text
  that might not have been considered important by the original author when the block was originally
  written, but which is now under previously unexpected scrutiny. When used in the main prose of a
  document, it indicates a part of the document that has been highlighted due to its likely
  relevance to the user's current activity.

  <div class="example">
    This example shows how the <code>mark</code> element can be used to bring attention to a
    particular part of a quotation:

    <pre highlight="html">
&lt;p lang="en-US"&gt;Consider the following quote:&lt;/p&gt;
&lt;blockquote lang="en-GB"&gt;
  &lt;p&gt;Look around and you will find, no-one's really
  &lt;mark&gt;colour&lt;/mark&gt; blind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p lang="en-US"&gt;As we can tell from the &lt;em&gt;spelling&lt;/em&gt; of the word,
the person writing this quote is clearly not American.&lt;/p&gt;
    </pre>

    (If the goal was to mark the element as misspelt, however, the <code>u</code> element,
    possibly with a class, would be more appropriate.)

  </div>

  <div class="example">
    Another example of the <code>mark</code> element is highlighting parts of a document that are
    matching some search string. If someone looked at a document, and the server knew that the user
    was searching for the word "kitten", then the server might return the document with one paragraph
    modified as follows:

    <pre highlight="html">
&lt;p&gt;I also have some &lt;mark&gt;kitten&lt;/mark&gt;s who are visiting me
these days. They're really cute. I think they like my garden! Maybe I
should adopt a &lt;mark&gt;kitten&lt;/mark&gt;.&lt;/p&gt;
    </pre>

  </div>

  <div class="example">
    In the following snippet, a paragraph of text refers to a specific part of a code
    fragment.

    <pre highlight="html">
&lt;p&gt;The highlighted part below is where the error lies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var i: Integer;
begin
    i := &lt;mark&gt;1.1&lt;/mark&gt;;
end.&lt;/code&gt;&lt;/pre&gt;
    </pre>

    This is separate from <em>syntax highlighting</em>, for which <code>span</code> is more
    appropriate. Combining both, one would get:

    <pre highlight="html">
&lt;p&gt;The highlighted part below is where the error lies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=keyword&gt;var&lt;/span&gt; &lt;span class=ident&gt;i&lt;/span&gt;: &lt;span class=type&gt;Integer&lt;/span&gt;;
&lt;span class=keyword&gt;begin&lt;/span&gt;
    &lt;span class=ident&gt;i&lt;/span&gt; := &lt;span class=literal&gt;&lt;mark&gt;1.1&lt;/mark&gt;&lt;/span&gt;;
&lt;span class=keyword&gt;end&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;
    </pre>

  </div>

  <div class="example">
    This is another example showing the use of <code>mark</code> to highlight a part of quoted
    text that was originally not emphasized. In this example, common typographic conventions have led
    the author to explicitly style <code>mark</code> elements in quotes to render in italics.

    <pre highlight="html">
&lt;article&gt;
  &lt;style scoped&gt;
  blockquote mark, q mark {
    font: inherit; font-style: italic;
    text-decoration: none;
    background: transparent; color: inherit;
  }
  .bubble em {
    font: inherit; font-size: larger;
    text-decoration: underline;
  }
  &lt;/style&gt;
  &lt;h1&gt;She knew&lt;/h1&gt;
  &lt;p&gt;Did you notice the subtle joke in the joke on panel 4?&lt;/p&gt;
  &lt;blockquote&gt;
  &lt;p class="bubble"&gt;I didn't &lt;em&gt;want&lt;/em&gt; to believe. &lt;mark&gt;Of course
  on some level I realized it was a known-plaintext attack.&lt;/mark&gt; But I
  couldn't admit it until I saw for myself.&lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;p&gt;(Emphasis mine.) I thought that was great. It's so pedantic, yet it
  explains everything neatly.&lt;/p&gt;
&lt;/article&gt;
    </pre>

    Note, incidentally, the distinction between the <code>em</code> element in this example, which
    is part of the original text being quoted, and the <code>mark</code> element, which is
    highlighting a part for comment.

  </div>

  <div class="example">
    The following example shows the difference between denoting the <em>importance</em> of a span
    of text (<code>strong</code>) as opposed to denoting the <em>relevance</em> of a span of text
    (<code>mark</code>). It is an extract from a textbook, where the extract has had the parts
    relevant to the exam highlighted. The safety warnings, important though they may be, are
    apparently not relevant to the exam.

    <pre highlight="html">
&lt;h3&gt;Wormhole Physics Introduction&lt;/h3&gt;

&lt;p&gt;&lt;mark&gt;A wormhole in normal conditions can be held open for a
maximum of just under 39 minutes.&lt;/mark&gt; Conditions that can increase
the time include a powerful energy source coupled to one or both of
the gates connecting the wormhole, and a large gravity well (such as a
black hole).&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;Momentum is preserved across the wormhole. Electromagnetic
radiation can travel in both directions through a wormhole,
but matter cannot.&lt;/mark&gt;&lt;/p&gt;

&lt;p&gt;When a wormhole is created, a vortex normally forms.
&lt;strong&gt;Warning: The vortex caused by the wormhole opening will
annihilate anything in its path.&lt;/strong&gt; Vortexes can be avoided when
using sufficiently advanced dialing technology.&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;An obstruction in a gate will prevent it from accepting a
wormhole connection.&lt;/mark&gt;&lt;/p&gt;
    </pre>

  </div>

<h4 id="the-bdi-element">The <dfn><code>bdi</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd>Also, the <code>dir</code> global attribute has special semantics on this element.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>bdi</code> element <a>represents</a> a span of text that is to be isolated from
  its surroundings for the purposes of bidirectional text formatting. [[!BIDI]]

  <p class="note">
    The <code>dir</code> global attribute defaults to <code>auto</code> on this element (it never inherits from the parent element like
  with other elements).
  </p>

  <div class="impl">

  <p class="note">
    This element <a>has rendering requirements involving the
  bidirectional algorithm</a>.
  </p>

  </div>

  <div class="example">
    This element is especially useful when embedding user-generated content with an unknown
    directionality.

    In this example, usernames are shown along with the number of posts that the user has
    submitted. If the <code>bdi</code> element were not used, the username of the Arabic user would
    end up confusing the text (the bidirectional algorithm would put the colon and the number "3"
    next to the word "User" rather than next to the word "posts").

    <pre highlight="html">
&lt;ul&gt;
  &lt;li&gt;User &lt;bdi&gt;jcranmer&lt;/bdi&gt;: 12 posts.
  &lt;li&gt;User &lt;bdi&gt;hober&lt;/bdi&gt;: 5 posts.
  &lt;li&gt;User &lt;bdi&gt;<bdo dir="rtl">Ø¥ÙØ§Ù</bdo>&lt;/bdi&gt;: 3 posts.
&lt;/ul&gt;
    </pre>

    <figure>
    <img src="images/sample-bdi.png" />
    <figcaption>When using the <code>bdi</code> element, the username acts as expected.</figcaption>
    </figure>

    <figure>
    <img src="images/sample-not-bdi.png" />
    <figcaption>If the <code>bdi</code> element were to be replaced by a <code>b</code> element, the username would confuse the bidirectional algorithm and the third bullet would end up saying "User 3 :", followed by the Arabic name (right-to-left), followed by "posts" and a period.</figcaption>
    </figure>

  </div>

<h4 id="the-bdo-element">The <dfn><code>bdo</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd>Also, the <code>dir</code> global attribute has special semantics on this element.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>bdo</code> element <a>represents</a> explicit text directionality formatting
  control for its children. It allows authors to override the Unicode bidirectional algorithm by
  explicitly specifying a direction override. [[!BIDI]]

  Authors must specify the <code>dir</code> attribute on this element, with the
  value <code>ltr</code> to specify a left-to-right override and with the value <code>rtl</code> to
  specify a right-to-left override. The <code>auto</code> value must not be specified.

  <div class="impl">

  <p class="note">
    This element <a>has rendering requirements involving the
  bidirectional algorithm</a>.
  </p>

  </div>

<h4 id="the-span-element">The <dfn><code>span</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
    <pre class="idl" data-highlight="webidl">interface HTMLSpanElement : HTMLElement {};
</pre>
    </dd>
  </dl>

  The <code>span</code> element doesn't mean anything on its own, but can be useful when used
  together with the <a>global attributes</a>, e.g. <code>class</code>,
  <code>lang</code>, or <code>dir</code>. It
  <a>represents</a> its children.

  <div class="example">
    In this example, a code fragment is marked up using
    <code>span</code> elements and <code>class</code> attributes so that its keywords and
    identifiers can be color-coded from CSS:

    <pre highlight="html">
&lt;pre&gt;&lt;code class="lang-c"&gt;&lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="ident"&gt;j&lt;/span&gt; = 0; &lt;span class="ident"&gt;j&lt;/span&gt; &amp;lt; 256; &lt;span class="ident"&gt;j&lt;/span&gt;++) {
  &lt;span class="ident"&gt;i_t3&lt;/span&gt; = (&lt;span class="ident"&gt;i_t3&lt;/span&gt; &amp; 0x1ffff) | (&lt;span class="ident"&gt;j&lt;/span&gt; &amp;lt;&amp;lt; 17);
  &lt;span class="ident"&gt;i_t6&lt;/span&gt; = (((((((&lt;span class="ident"&gt;i_t3&lt;/span&gt; &gt;&gt; 3) ^ &lt;span class="ident"&gt;i_t3&lt;/span&gt;) &gt;&gt; 1) ^ &lt;span class="ident"&gt;i_t3&lt;/span&gt;) &gt;&gt; 8) ^ &lt;span class="ident"&gt;i_t3&lt;/span&gt;) &gt;&gt; 5) &amp; 0xff;
  &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="ident"&gt;i_t6&lt;/span&gt; == &lt;span class="ident"&gt;i_t1&lt;/span&gt;)
    &lt;span class="keyword"&gt;break&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
    </pre>

  </div>

<h4 id="the-br-element">The <dfn><code>br</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
    <pre class="idl" data-highlight="webidl">interface HTMLBRElement : HTMLElement {};
</pre>
    </dd>
  </dl>

  The <code>br</code> element <a>represents</a> a line break.

  <p class="note">
    While line breaks are usually represented in visual media by physically moving
  subsequent text to a new line, a style sheet or user agent would be equally justified in causing
  line breaks to be rendered in a different manner, for instance as green dots, or as extra
  spacing.
  </p>

  <code>br</code> elements must be used only for line breaks that are actually part of the
  content, as in poems or addresses.

  <div class="example">
  The following example is correct usage of the <code>br</code> element:

    <pre highlight="html">
&lt;p&gt;P. Sherman&lt;br&gt;
42 Wallaby Way&lt;br&gt;
Sydney&lt;/p&gt;
    </pre>

  </div>

  <code>br</code> elements must not be used for separating thematic groups in a paragraph.

  <div class="example">
    The following examples are non-conforming, as they abuse the <code>br</code> element:

    <pre highlight="html">
&lt;p&gt;&lt;a ...&gt;34 comments.&lt;/a&gt;&lt;br&gt;
&lt;a ...&gt;Add a comment.&lt;/a&gt;&lt;/p&gt;
    </pre>

    <pre highlight="html">
&lt;p&gt;&lt;label&gt;Name: &lt;input name="name"&gt;&lt;/label&gt;&lt;br&gt;
&lt;label&gt;Address: &lt;input name="address"&gt;&lt;/label&gt;&lt;/p&gt;
    </pre>

    Here are alternatives to the above, which are correct:

    <pre highlight="html">
&lt;p&gt;&lt;a ...&gt;34 comments.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a ...&gt;Add a comment.&lt;/a&gt;&lt;/p&gt;
    </pre>

    <pre highlight="html">
&lt;p&gt;&lt;label&gt;Name: &lt;input name="name"&gt;&lt;/label&gt;&lt;/p&gt;
&lt;p&gt;&lt;label&gt;Address: &lt;input name="address"&gt;&lt;/label&gt;&lt;/p&gt;
    </pre>

  </div>

  If a <a>paragraph</a> consists of nothing but a single <code>br</code> element, it
  represents a placeholder blank line (e.g. as in a template). Such blank lines must not be used for
  presentation purposes.

  <div class="impl">

  Any content inside <code>br</code> elements must not be considered part of the surrounding
  text.

  <p class="note">
    This element <a>has rendering requirements involving the
  bidirectional algorithm</a>.
  </p>

  </div>

<h4 id="the-wbr-element">The <dfn><code>wbr</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>wbr</code> element <a>represents</a> a line break opportunity.

  <div class="example">
    In the following example, someone is quoted as saying something which, for effect, is written
    as one long word. However, to ensure that the text can be wrapped in a readable fashion, the
    individual words in the quote are separated using a <code>wbr</code> element.

    <pre highlight="html">
&lt;p&gt;So then he pointed at the tiger and screamed
"there&lt;wbr&gt;is&lt;wbr&gt;no&lt;wbr&gt;way&lt;wbr&gt;you&lt;wbr&gt;are&lt;wbr&gt;ever&lt;wbr&gt;going&lt;wbr&gt;to&lt;wbr&gt;catch&lt;wbr&gt;me"!&lt;/p&gt;
    </pre>

  </div>

  <div class="example">
    Here, especially long lines of code in a program listing have suggested wrapping points given
    using <code>wbr</code> elements.

    <pre highlight="html">
&lt;pre&gt;...
Heading heading = Helm.HeadingFactory(HeadingCoordinates[1], &lt;wbr&gt;HeadingCoordinates[2], &lt;wbr&gt;HeadingCoordinates[3], &lt;wbr&gt;HeadingCoordinates[4]);
Course course = Helm.CourseFactory(Heading, &lt;wbr&gt;Maps.MapFactoryFromHeading(heading), &lt;wbr&gt;Speeds.GetMaximumSpeed().ConvertToWarp());
...&lt;/pre&gt;
    </pre>

  </div>

  <div class="impl">

  Any content inside <code>wbr</code> elements must not be considered part of the surrounding
  text.

    <pre class="example">var wbr = document.createElement("wbr");
wbr.textContent = "This is wrong";
document.body.appendChild(wbr);
</pre>

  <p class="note">
    This element <a>has rendering requirements involving the
  bidirectional algorithm</a>.
  </p>

  </div>

<h4 id="usage-summary">Usage summary</h4>

  <em>This section is non-normative.</em>

  <table>
    <thead>
    <tr>
      <th>Element
      </th><th>Purpose
      </th><th>Example
    </th></tr></thead><tbody>
    <tr>
      <td><code>a</code>
      </td><td>Hyperlinks
      </td><td><pre class="example">Visit my <strong>&lt;a href="drinks.html"&gt;drinks&lt;/a&gt;</strong> page.</pre>

    </td></tr><tr>
      <td><code>em</code>
      </td><td>Stress emphasis
      </td><td><pre class="example">I must say I <strong>&lt;em&gt;adore&lt;/em&gt;</strong> lemonade.</pre>

    </td></tr><tr>
      <td><code>strong</code>
      </td><td>Importance
      </td><td><pre class="example">This tea is <strong>&lt;strong&gt;very hot&lt;/strong&gt;</strong>.</pre>

    </td></tr><tr>
      <td><code>small</code>
      </td><td>Side comments
      </td><td><pre class="example">These grapes are made into wine. <strong>&lt;small&gt;Alcohol is addictive.&lt;/small&gt;</strong></pre>

    </td></tr><tr>
      <td><code>s</code>
      </td><td>Inaccurate text
      </td><td><pre class="example">Price: <strong>&lt;s&gt;Â£4.50&lt;/s&gt;</strong> Â£2.00!</pre>

    </td></tr><tr>
      <td><code>cite</code>
      </td><td>Titles of works
      </td><td><pre class="example">The case <strong>&lt;cite&gt;Hugo v. Danielle&lt;/cite&gt;</strong> is relevant here.</pre>

    </td></tr><tr>
      <td><code>q</code>
      </td><td>Quotations
      </td><td><pre class="example">The judge said <strong>&lt;q&gt;You can drink water from the fish tank&lt;/q&gt;</strong> but advised against it.</pre>

    </td></tr><tr>
      <td><code>dfn</code>
      </td><td>Defining instance
      </td><td><pre class="example">The term <strong>&lt;dfn&gt;organic food&lt;/dfn&gt;</strong> refers to food produced without synthetic chemicals.</pre>

    </td></tr><tr>
      <td><code>abbr</code>
      </td><td>Abbreviations
      </td><td><pre class="example">Organic food in Ireland is certified by the <strong>&lt;abbr title="Irish Organic Farmers and Growers Association"&gt;IOFGA&lt;/abbr&gt;</strong>.</pre>

    </td></tr><tr>
      <td><code>ruby</code>, <code>rb</code>, <code>rp</code>, <code>rt</code>, <code>rtc</code>
      </td><td>Ruby annotations
      </td><td><pre class="example"><strong>&lt;ruby&gt; &lt;rb&gt;OJ &lt;rp&gt;(&lt;rtc&gt;&lt;rt&gt;Orange Juice&lt;/rtc&gt;&lt;rp&gt;)&lt;/ruby&gt;</strong></pre>

    </td></tr><tr>
      <td><code>data</code>
      </td><td>Machine-readable equivalent
      </td><td><pre class="example">Available starting today! <strong>&lt;data value="UPC:022014640201"&gt;North Coast Organic Apple Cider&lt;/data&gt;</strong></pre>

    </td></tr><tr>
      <td><code>time</code>
      </td><td>Machine-readable equivalent of date- or time-related data
      </td><td><pre class="example">Available starting on <strong>&lt;time datetime="2011-11-12"&gt;November 12th&lt;/time&gt;</strong>!</pre>

    </td></tr><tr>
      <td><code>code</code>
      </td><td>Computer code
      </td><td><pre class="example">The <strong>&lt;code&gt;fruitdb&lt;/code&gt;</strong> program can be used for tracking fruit production.</pre>

    </td></tr><tr>
      <td><code>var</code>
      </td><td>Variables
      </td><td><pre class="example">If there are <strong>&lt;var&gt;n&lt;/var&gt;</strong> fruit in the bowl, at least <strong>&lt;var&gt;n&lt;/var&gt;</strong>Ã·2 will be ripe.</pre>

    </td></tr><tr>
      <td><code>samp</code>
      </td><td>Computer output
      </td><td><pre class="example">The computer said <strong>&lt;samp&gt;Unknown error -3&lt;/samp&gt;</strong>.</pre>

    </td></tr><tr>
      <td><code>kbd</code>
      </td><td>User input
      </td><td><pre class="example">Hit <strong>&lt;kbd&gt;F1&lt;/kbd&gt;</strong> to continue.</pre>

    </td></tr><tr>
      <td><code>sub</code>
      </td><td>Subscripts
      </td><td><pre class="example">Water is H<strong>&lt;sub&gt;2&lt;/sub&gt;</strong>O.</pre>

    </td></tr><tr>
      <td><code>sup</code>
      </td><td>Superscripts
      </td><td><pre class="example">The Hydrogen in heavy water is usually <strong>&lt;sup&gt;2&lt;/sup&gt;</strong>H.</pre>

    </td></tr><tr>
      <td><code>i</code>
      </td><td>Alternative voice
      </td><td><pre class="example">Lemonade consists primarily of <strong>&lt;i&gt;Citrus limon&lt;/i&gt;</strong>.</pre>

    </td></tr><tr>
      <td><code>b</code>
      </td><td>Keywords
      </td><td><pre class="example">Take a <strong>&lt;b&gt;lemon&lt;/b&gt;</strong> and squeeze it with a <strong>&lt;b&gt;juicer&lt;/b&gt;</strong>.</pre>

    </td></tr><tr>
      <td><code>u</code>
      </td><td>Annotations
      </td><td><pre class="example">The mixture of apple juice and <strong>&lt;u class="spelling"&gt;eldeflower&lt;/u&gt;</strong> juice is very pleasant.</pre>

    </td></tr><tr>
      <td><code>mark</code>
      </td><td>Highlight
      </td><td><pre class="example">Elderflower cordial, with one <strong>&lt;mark&gt;part&lt;/mark&gt;</strong> cordial to ten <strong>&lt;mark&gt;part&lt;/mark&gt;</strong>s water, stands a<strong>&lt;mark&gt;part&lt;/mark&gt;</strong> from the rest.</pre>

    </td></tr><tr>
      <td><code>bdi</code>
      </td><td>Text directionality isolation
      </td><td><pre class="example">The recommended restaurant is <strong>&lt;bdi lang=""&gt;My Juice CafÃ© (At The Beach)&lt;/bdi&gt;</strong>.</pre>

    </td></tr><tr>
      <td><code>bdo</code>
      </td><td>Text directionality formatting
      </td><td><pre class="example">The proposal is to write English, but in reverse order. "Juice" would become "<strong>&lt;bdo dir=rtl&gt;Juice&lt;/bdo&gt;</strong>"</pre>

    </td></tr><tr>
      <td><code>span</code>
      </td><td>Other
      </td><td><pre class="example">In French we call it <strong>&lt;span lang="fr"&gt;sirop de sureau&lt;/span&gt;</strong>.</pre>

    </td></tr><tr>
      <td><code>br</code>
      </td><td>Line break
      </td><td><pre class="example">Simply Orange Juice Company<strong>&lt;br&gt;</strong>Apopka, FL 32703<strong>&lt;br&gt;</strong>U.S.A.</pre>

    </td></tr><tr>
      <td><code>wbr</code>
      </td><td>Line breaking opportunity
      </td><td><pre class="example">www.simply<strong>&lt;wbr&gt;</strong>orange<strong>&lt;wbr&gt;</strong>juice.com</pre>

  </td></tr></tbody></table>

  <h3 id="edits">Edits</h3>

  The <code>ins</code> and <code>del</code> elements represent edits to the document.

<h4 id="the-ins-element">The <dfn><code>ins</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Transparent</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>cite</code> - Link to the source of the quotation or more information about the edit </dd>
    <dd><code>datetime</code> - Date and (optionally) time of the change </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses the <code>HTMLModElement</code> interface.</dd>
  </dl>

  The <code>ins</code> element <a>represents</a> an addition to the document.

  <div class="example">
    The following represents the addition of a single paragraph:

    <pre highlight="html">
&lt;aside&gt;
  &lt;ins&gt;
  &lt;p&gt; I like fruit. &lt;/p&gt;
  &lt;/ins&gt;
&lt;/aside&gt;
    </pre>

    As does the following, because everything in the <code>aside</code> element here counts as
    <a>phrasing content</a> and therefore there is just one <a>paragraph</a>:

    <pre highlight="html">
&lt;aside&gt;
  &lt;ins&gt;
  Apples are &lt;em&gt;tasty&lt;/em&gt;.
  &lt;/ins&gt;
  &lt;ins&gt;
  So are pears.
  &lt;/ins&gt;
&lt;/aside&gt;
    </pre>

  </div>

  <code>ins</code> elements should not cross <a>implied paragraph</a>
  boundaries.

  <div class="example">
    The following example represents the addition of two paragraphs, the second of which was
    inserted in two parts. The first <code>ins</code> element in this example thus crosses a
    paragraph boundary, which is considered poor form.

    <pre class="bad">&lt;aside&gt;
  &lt;!-- don't do this --&gt;
  &lt;ins datetime="2005-03-16 00:00Z"&gt;
  &lt;p&gt; I like fruit. &lt;/p&gt;
  Apples are &lt;em&gt;tasty&lt;/em&gt;.
  &lt;/ins&gt;
  &lt;ins datetime="2007-12-19 00:00Z"&gt;
  So are pears.
  &lt;/ins&gt;
&lt;/aside&gt;</pre>

    Here is a better way of marking this up. It uses more elements, but none of the elements cross
    implied paragraph boundaries.

    <pre highlight="html">
&lt;aside&gt;
  &lt;ins datetime="2005-03-16 00:00Z"&gt;
  &lt;p&gt; I like fruit. &lt;/p&gt;
  &lt;/ins&gt;
  &lt;ins datetime="2005-03-16 00:00Z"&gt;
  Apples are &lt;em&gt;tasty&lt;/em&gt;.
  &lt;/ins&gt;
  &lt;ins datetime="2007-12-19 00:00Z"&gt;
  So are pears.
  &lt;/ins&gt;
&lt;/aside&gt;
    </pre>

  </div>

<h4 id="the-del-element">The <dfn><code>del</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Transparent</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>cite</code> - Link to the source of the quotation or more information about the edit </dd>
    <dd><code>datetime</code> - Date and (optionally) time of the change </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses the <code>HTMLModElement</code> interface.</dd>
  </dl>

  The <code>del</code> element <a>represents</a> a removal from the document.

  <code>del</code> elements should not cross <a>implied paragraph</a>
  boundaries.

  <div class="example">
    The following shows a "to do" list where items that have been done are crossed-off with the
    date and time of their completion.

    <pre highlight="html">
&lt;h1&gt;To Do&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Empty the dishwasher&lt;/li&gt;
  &lt;li&gt;&lt;del datetime="2009-10-11T01:25-07:00"&gt;Watch Walter Lewin's lectures&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del datetime="2009-10-10T23:38-07:00"&gt;Download more tracks&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Buy a printer&lt;/li&gt;
&lt;/ul&gt;
    </pre>

  </div>

<h4 id="attributes-common-to-ins-and-del-elements">Attributes common to <code>ins</code> and <code>del</code> elements</h4>

  The <dfn><code>cite</code></dfn> attribute may be used to specify the
  address of a document that explains the change. When that document is long, for instance the
  minutes of a meeting, authors are encouraged to include a fragment identifier pointing to the
  specific part of that document that discusses the change.

  If the <code>cite</code> attribute is present, it must be a <a>valid
  URL potentially surrounded by spaces</a> that explains the change. <span class="impl">To obtain
  the corresponding citation link, the value of the attribute must be <a>resolved</a> relative to the element.</span> User agents may allow users to follow such
  citation links, but they are primarily intended for private use (e.g. by server-side scripts
  collecting statistics about a site's edits), not for readers.

  The <dfn><code>datetime</code></dfn> attribute may be used to specify
  the time and date of the change.

  If present, the <code>datetime</code> attribute's value must be a
  <a>valid date string with optional time</a>.

  <div class="impl">

  User agents must parse the <code>datetime</code> attribute according
  to the <a>parse a date or time string</a> algorithm. If that doesn't return a <a>date</a> or a <a>global date and time</a>,
  then the modification has no associated timestamp (the value is non-conforming; it is not a
  <a>valid date string with optional time</a>). Otherwise, the modification is marked as
  having been made at the given <a>date</a> or <a>global date and time</a>. If the given value is a <a>global date and time</a> then user agents should use the associated
  time-zone offset information to determine which time zone to present the given datetime in.

  </div>

  This value <span class="impl">may be shown to the user, but it</span> is primarily intended for
  private use.

  The <code>ins</code> and <code>del</code> elements <span class="impl">must</span> implement the
  <code>HTMLModElement</code> interface:

  <pre class="idl" data-highlight="webidl">interface HTMLModElement : HTMLElement {
  attribute DOMString cite;
  attribute DOMString dateTime;
};
</pre>

  <div class="impl">

  The <dfn><code>cite</code></dfn> IDL attribute must <a>reflect</a>
  the element's <code>cite</code> content attribute. The <dfn><code>dateTime</code></dfn> IDL attribute must <a>reflect</a> the
  element's <code>datetime</code> content attribute.

  </div>

<h4 id="edits-and-paragraphs">Edits and paragraphs</h4>

  <em>This section is non-normative.</em>

  Since the <code>ins</code> and <code>del</code> elements do not affect <a>paragraphing</a>, it is possible, in some cases where paragraphs are <a>implied</a> (without explicit <code>p</code> elements), for an
  <code>ins</code> or <code>del</code> element to span both an entire paragraph or other
  non-<a>phrasing content</a> elements and part of another paragraph. For example:

  <pre highlight="html">
&lt;section&gt;
  &lt;ins&gt;
  &lt;p&gt;
    This is a paragraph that was inserted.
  &lt;/p&gt;
  This is another paragraph whose first sentence was inserted
  at the same time as the paragraph above.
  &lt;/ins&gt;
  This is a second sentence, which was there all along.
&lt;/section&gt;
    </pre>

  By only wrapping some paragraphs in <code>p</code> elements, one can even get the end of one
  paragraph, a whole second paragraph, and the start of a third paragraph to be covered by the same
  <code>ins</code> or <code>del</code> element (though this is very confusing, and not considered
  good practice):

  <pre class="bad">&lt;section&gt;
  This is the first paragraph. &lt;ins&gt;This sentence was
  inserted.
  &lt;p&gt;This second paragraph was inserted.&lt;/p&gt;
  This sentence was inserted too.&lt;/ins&gt; This is the
  third paragraph in this example.
  &lt;!-- (don't do this) --&gt;
&lt;/section&gt;</pre>

  However, due to the way <a>implied paragraphs</a> are defined, it is
  not possible to mark up the end of one paragraph and the start of the very next one using the same
  <code>ins</code> or <code>del</code> element. You instead have to use one (or two) <code>p</code>
  element(s) and two <code>ins</code> or <code>del</code> elements, as for example:

  <pre highlight="html">
&lt;section&gt;
  &lt;p&gt;This is the first paragraph. &lt;del&gt;This sentence was
  deleted.&lt;/del&gt;&lt;/p&gt;
  &lt;p&gt;&lt;del&gt;This sentence was deleted too.&lt;/del&gt; That
  sentence needed a separate &amp;lt;del&amp;gt; element.&lt;/p&gt;
&lt;/section&gt;
    </pre>

  Partly because of the confusion described above, authors are strongly encouraged to always mark
  up all paragraphs with the <code>p</code> element, instead of having <code>ins</code> or
  <code>del</code> elements that cross <a>implied paragraphs</a>
  boundaries.

<h4 id="edits-and-lists">Edits and lists</h4>

  <em>This section is non-normative.</em>

  The content models of the <code>ol</code> and <code>ul</code> elements do not allow
  <code>ins</code> and <code>del</code> elements as children. Lists always represent all their
  items, including items that would otherwise have been marked as deleted.

  To indicate that an item is inserted or deleted, an <code>ins</code> or <code>del</code>
  element can be wrapped around the contents of the <code>li</code> element. To indicate that an
  item has been replaced by another, a single <code>li</code> element can have one or more
  <code>del</code> elements followed by one or more <code>ins</code> elements.

  <div class="example">
    In the following example, a list that started empty had items added and removed from it over
    time. The bits in the example that have been emphasized show the parts that are the "current"
    state of the list. The list item numbers don't take into account the edits, though.

    <pre highlight="html">
&lt;h1&gt;Stop-ship bugs&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;ins datetime="2008-02-12T15:20Z"&gt;<em>Bug 225:
  Rain detector doesn't work in snow</em>&lt;/ins&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del datetime="2008-03-01T20:22Z"&gt;&lt;ins datetime="2008-02-14T12:02Z"&gt;Bug 228:
  Water buffer overflows in April&lt;/ins&gt;&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;ins datetime="2008-02-16T13:50Z"&gt;<em>Bug 230:
  Water heater doesn't use renewable fuels</em>&lt;/ins&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del datetime="2008-02-20T21:15Z"&gt;&lt;ins datetime="2008-02-16T14:25Z"&gt;Bug 232:
  Carbon dioxide emissions detected after startup&lt;/ins&gt;&lt;/del&gt;&lt;/li&gt;
&lt;/ol&gt;
    </pre>

  </div>

  <div class="example">
    In the following example, a list that started with just fruit was replaced by a list with just
    colors.

    <pre highlight="html">
&lt;h1&gt;List of &lt;del&gt;fruits&lt;/del&gt;&lt;ins&gt;colors&lt;/ins&gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;del&gt;Lime&lt;/del&gt;&lt;ins&gt;Green&lt;/ins&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Apple&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Orange&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Pear&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;ins&gt;Teal&lt;/ins&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Lemon&lt;/del&gt;&lt;ins&gt;Yellow&lt;/ins&gt;&lt;/li&gt;
  &lt;li&gt;Olive&lt;/li&gt;
  &lt;li&gt;&lt;ins&gt;Purple&lt;/ins&gt;&lt;/li&gt;
&lt;/ul&gt;
    </pre>

  </div>

<h4 id="edits-and-tables">Edits and tables</h4>

  <em>This section is non-normative.</em>

  The elements that form part of the table model have complicated content model requirements that
  do not allow for the <code>ins</code> and <code>del</code> elements, so indicating edits to a
  table can be difficult.

  To indicate that an entire row or an entire column has been added or removed, the entire
  contents of each cell in that row or column can be wrapped in <code>ins</code> or <code>del</code>
  elements (respectively).

  <div class="example">
    Here, a table's row has been added:

    <pre highlight="html">
&lt;table&gt;
  &lt;thead&gt;
  &lt;tr&gt; &lt;th&gt; Game name           &lt;th&gt; Game publisher   &lt;th&gt; Verdict
  &lt;tbody&gt;
  &lt;tr&gt; &lt;td&gt; Diablo 2            &lt;td&gt; Blizzard         &lt;td&gt; 8/10
  &lt;tr&gt; &lt;td&gt; Portal              &lt;td&gt; Valve            &lt;td&gt; 10/10
<strong>  &lt;tr&gt; &lt;td&gt; &lt;ins&gt;Portal 2&lt;/ins&gt; &lt;td&gt; &lt;ins&gt;Valve&lt;/ins&gt; &lt;td&gt; &lt;ins&gt;10/10&lt;/ins&gt;</strong>
&lt;/table&gt;
    </pre>

    Here, a column has been removed (the time at which it was removed is given also, as is a link
    to the page explaining why):

    <pre highlight="html">
&lt;table&gt;
  &lt;thead&gt;
  &lt;tr&gt; &lt;th&gt; Game name           &lt;th&gt; Game publisher   &lt;th&gt; <strong>&lt;del cite="/edits/r192" datetime="2011-05-02 14:23Z"&gt;Verdict&lt;/del&gt;</strong>
  &lt;tbody&gt;
  &lt;tr&gt; &lt;td&gt; Diablo 2            &lt;td&gt; Blizzard         &lt;td&gt; <strong>&lt;del cite="/edits/r192" datetime="2011-05-02 14:23Z"&gt;8/10&lt;/del&gt;</strong>
  &lt;tr&gt; &lt;td&gt; Portal              &lt;td&gt; Valve            &lt;td&gt; <strong>&lt;del cite="/edits/r192" datetime="2011-05-02 14:23Z"&gt;10/10&lt;/del&gt;</strong>
  &lt;tr&gt; &lt;td&gt; Portal 2            &lt;td&gt; Valve            &lt;td&gt; <strong>&lt;del cite="/edits/r192" datetime="2011-05-02 14:23Z"&gt;10/10&lt;/del&gt;</strong>
&lt;/table&gt;
    </pre>

  </div>

  Generally speaking, there is no good way to indicate more complicated edits (e.g. that a cell
  was removed, moving all subsequent cells up or to the left).

<h3 id="embedded-content">Embedded content</h3>

<h4 id="embedded-content-introduction">Introduction</h4>

  <em>This section is non-normative.</em>

  To embed an image in HTML, when there is only a single image resource,
  use the <code>img</code> element and its <code>src</code> attribute.

  <div class="example">
    <pre highlight="html">
      &lt;h2&gt;From today's featured article&lt;/h2&gt;
      <strong>&lt;img src="/uploads/100-marie-lloyd.jpg" alt="" width="100" height="150"&gt;</strong>
      &lt;p&gt;&lt;b&gt;&lt;a href="/wiki/Marie_Lloyd"&gt;Marie Lloyd&lt;/a&gt;&lt;/b&gt; (1870â1922)
      was an English &lt;a href="/wiki/Music_hall"&gt;music hall&lt;/a&gt; singer, ...
    </pre>
  </div>

  However, there are a number of situations for which the author might wish
  to use multiple image resources that the user agent can choose from:

  <ul>

    <li>

    Different users might have different environmental characteristics:

    <ul>

      <li>

      The users' physical screen size might be different from one another.

      <p class="example">
        A mobile phone's screen might be 4 inches diagonally, while a laptop's screen might be 14 inches diagonally.</p>

      <p class="note">
        This is only relevant when an image's rendered size depends on the viewport size.
      </p>

      </li>

      <li>

      The users' screen pixel density might be different from one another.

      <p class="example">A mobile phone's screen might have three times as many physical pixels per inch
      compared to another mobile phone's screen, regardless of their physical screen size.</p>

      </li>

      <li>

      The users' zoom level might be different from one another, or might change for a single user over time.

      <p class="example">A user might zoom in to a particular image to be able to get a more detailed look.</p>

      The zoom level and the screen pixel density (the previous point) can both affect the number of physical screen pixels per CSS pixel.
      This ratio is usually referred to as <dfn>device-pixel-ratio</dfn>.

      </li>

      <li>

      The users' screen orientation might be different from one another, or might change for a single user over time.

      <p class="example">A tablet can be held upright or rotated 90 degrees, so that the screen is either "portrait" or "landscape".</p>

      </li>

      <li>

      The users' network speed, network latency and bandwidth cost might be different from one another, or might change for a single user over time.

      <p class="example">A user might be on a fast, low-latency and constant-cost connection while at work,
      on a slow, low-latency and constant-cost connection while at home,
      and on a variable-speed, high-latency and variable-cost connection anywhere else.</p>

      </li>

    </ul>

    </li>

    <li>

    Authors might want to show different image content depending on the rendered size of the image.
    This is usually referred to as <dfn>art direction</dfn>.

    <p class="example">
      When a Web page is viewed on a screen with a large physical size (assuming a maximized browser window),
    the author might wish to include some less relevant parts surrounding the critical part of the image.
    When the same Web page is viewed on a screen with a small physical size,
    the author might wish to show only the critical part of the image.
    </p>

    </li>

    <li>

    Authors might want to show the same image content but with different rendered size depending on, usually, the width of the viewport.
    This is usually referred to as <dfn>viewport-based selection</dfn>.

    <p class="example">A Web page might have a banner at the top that always spans the entire viewport width.
    In this case, the rendered size of the image depends on the physical size of the screen (assuming a maximized browser window).</p>

    <p class="example">Another Web page might have images in columns,
    with a single column for screens with a small physical size,
    two columns for screens with medium physical size,
    and three columns for screens with big physical size,
    with the images varying in rendered size in each case to fill up the viewport.
    In this case, the rendered size of an image might be <em>bigger</em> in the one-column layout compared to the two-column layout,
    despite the screen being smaller.</p>

    </li>

    <li>

    Authors might want to show the same image content but using different image formats, depending on which image formats the user agent supports.
    This is usually referred to as <dfn>image format-based selection</dfn>.

    <p class="example">A Web page might have some images in the JPEG, WebP and JPEG XR image formats,
    with the latter two having better compression abilities compared to JPEG.
    Since different user agents can support different image formats,
    with some formats offering better compression ratios,
    the author would like to serve the better formats to user agenst that support them,
    while providing JPEG fallback for user agents that don't.</p>

    </li>

  </ul>

  The above situations are not mutually exclusive.
  For example, it is reasonable to combine different resources for different <a>device-pixel-ratio</a>
  with different resources for <a>art direction</a>.

  While it is possible to solve these problems using scripting, doing so introduces some other problems:

  <ul>

    <li>Some user agents agressively download images specified in the HTML markup,
    before scripts have had a chance to run,
    so that Web pages complete loading sooner.
    If a script changes which image to download,
    the user agent will potentially start two separate downloads,
    which can instead cause worse page loading performance.</li>

    <li>If the author avoids specifying any image in the HTML markup
    and instead instantiates a single download from script,
    that avoids the double download problem above
    but instead it makes no image be downloaded at all for users with scripting disabled
    and it disables the agressive image downloading optimization.</li>

  </ul>

  With this in mind, this specification introduces a number of features to address the above problems in a declarative manner.

  <dl>

    <dt><a>Device-pixel-ratio</a>-based selection when the rendered size of the image is fixed</dt>

    <dd>

    The <code>src</code> and <code>srcset</code>
    attributes on the <code>img</code> element can be used,
    using the <code>x</code> descriptor,
    to provide multiple images that only vary in their size
    (the smaller image is a scaled-down version of the bigger image).

    <p class="note">
    The <code>x</code> descriptor is not appropriate when the
    rendered size of the image depends on the viewport width (<a>viewport-based selection</a>),
    but can be used together with <a>art direction</a>.
  </p>

    <div class="example">
<pre highlight="html">
&lt;h2&gt;From today's featured article&lt;/h2&gt;
&lt;img src="/uploads/100-marie-lloyd.jpg"
      srcset="/uploads/150-marie-lloyd.jpg 1.5x, /uploads/200-marie-lloyd.jpg 2x"
      alt="" width="100" height="150"&gt;
&lt;p&gt;&lt;b&gt;&lt;a href="/wiki/Marie_Lloyd"&gt;Marie Lloyd&lt;/a&gt;&lt;/b&gt; (1870â1922)
was an English &lt;a href="/wiki/Music_hall"&gt;music hall&lt;/a&gt; singer, ...
    </pre>

      The user agent can choose any of the given resources depending on
      the user's screen's pixel density, zoom level, and possibly other factors such as the user's network conditions.

      For backwards compatibility with older user agents that
      don't yet understand the <code>srcset</code> attribute,
      one of the URLs is specified in the <code>img</code> element's <code>src</code> attribute.
      This will result in something useful (though perhaps lower-resolution than the user would like)
      being displayed even in older user agents.
      For new user agents, the <code>src</code> attribute participates in the resource selection,
      as if it was specified in <code>srcset</code> with a <code>1x</code> descriptor.

      The image's rendered size is given in the
      <code>width</code> and <code>height</code> attributes,
      which allows the user agent to allocate space for the image before it is downloaded.

    </div>

    </dd>

    <dt><a>Art direction</a>-based selection</dt>

    <dd>

    The <code>picture</code> element and the <code>source</code> element,
    together with the <code>media</code> attribute,
    can be used, to provide multiple images that vary the image content
    (for intance the smaller image might be a cropped version of the bigger image).

    <div class="example">
<pre highlight="html">
&lt;picture&gt;
  &lt;source <strong>media="(min-width: 45em)"</strong> srcset="large.jpg"&gt;
  &lt;source <strong>media="(min-width: 32em)"</strong> srcset="med.jpg"&gt;
  &lt;img src="small.jpg" alt="The president giving an award."&gt;
&lt;/picture&gt;
    </pre>

      The user agent will choose the first <code>source</code> element
      for which the media query in the <code>media</code> attribute matches,
      and then choose an appropriate URL from its <code>srcset</code> attribute.

      The rendered size of the image varies depending on which resource is chosen.
      To specify dimensions that the user agent can use before having downloaded the image,
      CSS can be used.

      <pre class="css">
        img { width: 300px; height: 300px }
        @media (min-width: 32em) { img { width: 500px; height:300px } }
        @media (min-width: 45em) { img { width: 700px; height:400px } }
      </pre>

    </div>

    <div class="example">
      This example combines <a>art direction</a>- and <a>device-pixel-ratio</a>-based selection.
      A banner that takes half the viewport is provided in two versions,
      one for wide screens and one for narrow screens.

    <pre highlight="html">
      &lt;h1&gt;
        &lt;picture&gt;
        &lt;source media="(max-width: 500px)" srcset="banner-phone.jpeg, banner-phone-HD.jpeg 2x"&gt;
        &lt;img src="banner.jpeg" srcset="banner-HD.jpeg 2x" alt="The Breakfast Combo"&gt;
        &lt;/picture&gt;
      &lt;/h1&gt;
    </pre>

    </div>

    </dd>

    <dt><a>Viewport-based selection</a></dt>

    <dd>

    The <code>srcset</code> and <code>sizes</code> attributes can be used,
    using the <code>w</code> descriptor,
    to provide multiple images that only vary in their size
    (the smaller image is a scaled-down version of the bigger image).

    <div class="example">
      In this example, a banner image takes up the entire viewport width
      (using appropriate CSS).

<pre highlight="html">
&lt;h1&gt;&lt;img <strong>sizes="100vw" srcset="wolf-400.jpg 400w, wolf-800.jpg 800w, wolf-1600.jpg 1600w"</strong>
      src="wolf-400.jpg" alt="The rad wolf"&gt;&lt;/h1&gt;
    </pre>

      The user agent will calculate the effective pixel density of each image
      from the specified <code>w</code> descriptors and the specified rendered size in the <code>sizes</code> attribute.
      It can then choose any of the given resources depending on
      the user's screen's pixel density, zoom level, and possibly other factors such as the user's network conditions.

      If the user's screen is 320 CSS pixels wide, this is equivalent to specifying
      <code>wolf-400.jpg 1.25x, wolf-800.jpg 2.5x, wolf-1600.jpg 5x</code>.
      On the other hand, if the user's screen is 1200 CSS pixels wide,
      this is equivalent to specifying
      <code>wolf-400.jpg 0.33x, wolf-800.jpg 0.67x, wolf-1600.jpg 1.33x</code>.
      By using the <code>w</code> descriptors and the <code>sizes</code> attribute,
      the user agent can choose the correct image source to download regardless of how large the user's device is.

      For backwards compatibility,
      one of the URLs is specified in the <code>img</code> element's <code>src</code> attribute.
      In new user agents, the <code>src</code> attribute is ignored
      when the <code>srcset</code> attribute uses <code>w</code> descriptors.

      In this example, the <code>sizes</code> attribute could be omitted
      because the default value is <code>100vw</code>.

    </div>

    <div class="example">
      In this example, the Web page has three layouts depending on the width of the viewport.
      The narrow layout has one column of images (the width of each image is about 100%),
      the middle layout has two columns of images (the width of each image is about 50%),
      and the widest layout has three columns of images, and some page margin (the width of each image is about 33%).
      It breaks between these layouts when the viewport is <code>30em</code> wide and <code>50em</code> wide, respectively.

    <pre highlight="html">
      &lt;img <strong>sizes="(max-width: 30em) 100vw, (max-width: 50em) 50vw, calc(33vw - 100px)"</strong>
      <strong>srcset="swing-200.jpg 200w, swing-400.jpg 400w, swing-800.jpg 800w, swing-1600.jpg 1600w"</strong>
      src="swing-400.jpg" alt="Kettlebell Swing"&gt;
    </pre>

      The <code>sizes</code> attribute sets up the
      layout breakpoints at <code>30em</code> and <code>50em</code>,
      and declares the image sizes between these breakpoints to be
      <code>100vw</code>, <code>50vw</code>, or <code>calc(33vw - 100px)</code>.
      These sizes do not necessarily have to match up exactly with the actual image width as specified in the CSS.

      The user agent will pick a width from the <code>sizes</code> attribute,
      using the first item with a <a>&lt;media-condition&gt;</a> (the part in parentheses) that evaluates to true,
      or using the last item (<code>calc(33vw - 100px)</code>) if they all evaluate to false.

      For example, if the viewport width is <code>29em</code>,
      then <code>(max-width: 30em)</code> evaluates to true and <code>100vw</code> is used,
      so the image size, for the purpose of resource selection, is <code>29em</code>.
      If the viewport width is instead <code>32em</code>,
      then <code>(max-width: 30em)</code> evaluates to false,
      but <code>(max-width: 50em)</code> evaluates to true and <code>50vw</code> is used,
      so the image size, for the purpose of resource selection, is <code>16em</code> (half the viewport width).
      Notice that the slightly wider viewport results in a smaller image because of the different layout.

      The user agent can then calculate the effective pixel density and choose an appropriate resource
      similarly to the previous example.

    </div>

    </dd>

    <dt><a>Image format-based selection</a></dt>

    <dd>

    The <code>type</code> attribute
    on the <code>source</code> element can be used,
    to provide multiple images in different formats.

    <div class="example">
      <pre highlight="html">
        &lt;h2&gt;From today's featured article&lt;/h2&gt;
        &lt;picture&gt;
          &lt;source srcset="/uploads/100-marie-lloyd.webp" <strong>type="image/webp"</strong>&gt;
          &lt;source srcset="/uploads/100-marie-lloyd.jxr" <strong>type="image/vnd.ms-photo"</strong>&gt;
          &lt;img src="/uploads/100-marie-lloyd.jpg" alt="" width="100" height="150"&gt;
        &lt;/picture&gt;
        &lt;p&gt;&lt;b&gt;&lt;a href="/wiki/Marie_Lloyd"&gt;Marie Lloyd&lt;/a&gt;&lt;/b&gt; (1870â1922)
        was an English &lt;a href="/wiki/Music_hall"&gt;music hall&lt;/a&gt; singer, ...
      </pre>

      In this example, the user agent will choose the first source that has
      a <code>type</code> attribute with a supported MIME type.
      If the user agent supports WebP images,
      the first <code>source</code> element will be chosen.
      If not, but the user agent does support JPEG XR images,
      the second <code>source</code> element will be chosen.
      If neither of those formats are supported,
      the <code>img</code> element will be chosen.

    </div>

    </dd>

  </dl>

<h4 id="dependencies">Dependencies</h4>

  : Media Queries [[!MEDIAQ]]
  :: <dfn>&lt;media-condition&gt;</dfn>
  : CSS Values and Units [[!CSS-VALUES]]
  :: <dfn>&lt;length&gt;</dfn>
  : CSS Syntax [[!CSS-SYNTAX-3]]
  :: <dfn>Parse a comma-separated list of component values</dfn>
  :: <dfn>component value</dfn>
  :: <dfn>&lt;whitespace-token&gt;</dfn>

<h4 id="the-picture-element">The <dfn><code>picture</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Zero or more <code>source</code> elements, followed by one <code>img</code> element, optionally intermixed with <a>script-supporting elements</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLPictureElement : HTMLElement {};
      </pre>
    </dd>
  </dl>

  The <code>picture</code> element is a container
  which provides multiples sources to its contained <code>img</code> element
  to allow authors to declaratively control or give hints to the user agent about which image resource to use,
  based on the screen pixel density, viewport size, image format, and other factors. It <a>represents</a> its children.

  <p class="note">
    The <code>picture</code> element is somewhat different
  from the similar-looking <code>video</code> and <code>audio</code> elements.
  While all of them contain <code>source</code> elements,
  the <code>source</code> element's <code>src</code> attribute has no meaning
  when the element is nested within a <code>picture</code> element,
  and the resource selection algorithm is different.
  As well, the <code>picture</code> element itself does not display anything;
  it merely provides a context for its contained <code>img</code> element
  that enables it to choose from multiple <a>URLs</a>.
  </p>

<h4 id="the-source-element-when-used-with-the-picture-element">The <dfn><code>source</code></dfn> element when used with the <code>picture</code> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>Same as for the <code>source</code> element.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>picture</code> element, before the <code>img</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Same as for the <code>source</code> element.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>srcset</code> - Images to use in different situations
    (e.g. high-resolution displays, small monitors, etc)</dd>
    <dd><code>sizes</code> - Image sizes between breakpoints</dd>
    <dd><code>media</code> - Applicable media</dd>
    <dd><code>type</code> - Type of embedded resource</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        partial interface HTMLSourceElement {
          attribute DOMString srcset;
          attribute DOMString sizes;
          attribute DOMString media;
        };
      </pre>
    </dd>
  </dl>

  The authoring requirements in this section only apply if the <code>source</code> element has
  a parent that is a <code>picture</code> element.

  The <code>source</code> element allows authors to specify multiple alternative
  <a>source sets</a> for <code>img</code> elements.
  It does not <a>represent</a> anything on its own.

  The <dfn><code>srcset</code></dfn> attribute must be present,
  and must consist of one or more <a>image candidate strings</a>,
  each separated from the next by a U+002C COMMA character (,).
  If an <a>image candidate string</a> contains no descriptors
  and no <a>space characters</a> after the URL,
  the following <a>image candidate string</a>, if there is one,
  must begin with one or more <a>space characters</a>.

  If the <code>srcset</code> attribute has any
  <a>image candidate strings</a> using a <i>width descriptor</i>,
  the <dfn><code>sizes</code></dfn> attribute must also be present,
  and the value must be a <a>valid source size list</a>.

  The <dfn><code>media</code></dfn> attributes may also be present.
  If present, the value must contain a <a>valid media query list</a>.

  The <dfn><code>type</code></dfn> attribute may also be present.
  If present, the value must be a <a>valid MIME type</a>.
  It gives the type of the images in the <a>source set</a>,
  to allow the user agent to skip to the next <code>source</code> element
  if it does not support the given type.

  <p class="note">
    If the <code>type</code> attribute
  is <em>not</em> specified, the user agent will not select a different
  <code>source</code> element if it finds that it does not support
  the image format after fetching it.
  </p>

  When a <code>source</code> element has a following sibling
  <code>source</code> element or <code>img</code> element with a
  <code>srcset</code> attribute specified, it must have
  at least one of the following:

  <ul>

    <li>A <code>media</code> attribute specified with a value that,
    after <a>stripping leading and trailing whitespace</a>,
    is not the empty string and is not an <a>ASCII case-insensitive</a> match for the string "<code>all</code>".</li>

    <li>A <code>type</code> attribute specified.</li>

  </ul>

  The <code>src</code> attribute must not be present.

  <div class="impl">

  The IDL attributes <dfn><code>srcset</code></dfn>,
  <dfn><code>sizes</code></dfn> and
  <dfn><code>media</code></dfn> must <a>reflect</a> the
  respective content attributes of the same name.

  </div>

<h4 id="the-img-element">The <dfn><code>img</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dd><a>Form-associated element</a>.</dd>
    <dd>If the element has a <code>usemap</code> attribute: <a>Interactive content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Nothing</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>alt</code> - Replacement text for use when images are not available </dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>srcset</code> - Images to use in different situations
    (e.g. high-resolution displays, small monitors, etc) </dd>
    <dd><code>sizes</code> - Image sizes between breakpoints</dd>
    <dd><code>crossorigin</code> - How the element handles crossorigin requests</dd>
    <dd><code>usemap</code> - Name of <a>image map</a> to use </dd>
    <dd><code>ismap</code> - Whether the image is a server-side image map</dd>
    <dd><code>width</code> - Horizontal dimension</dd>
    <dd><code>height</code> - Vertical dimension</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a>.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>presentation</code></a> role only, for an
    <code>img</code> element whose <code>alt</code> attribute's value is empty (<code>alt=""</code>), otherwise
    <a>any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        [NamedConstructor=Image(optional unsigned long width, optional unsigned long height)]
        interface HTMLImageElement : HTMLElement {
          attribute DOMString alt;
          attribute DOMString src;
          attribute DOMString srcset;
          attribute DOMString sizes;
          attribute DOMString? crossOrigin;
          attribute DOMString useMap;
          attribute boolean isMap;
          attribute unsigned long width;
          attribute unsigned long height;
          readonly attribute unsigned long naturalWidth;
          readonly attribute unsigned long naturalHeight;
          readonly attribute boolean complete;
          readonly attribute DOMString currentSrc;
        };
      </pre>
    </dd>
  </dl>

  An <code>img</code> element represents an image.

  The image given by the <dfn><code>src</code></dfn> and <dfn><code>srcset</code></dfn> attributes,
  and any previous sibling <code>source</code> elements'
  <code>srcset</code> attributes if the parent is a <code>picture</code> element,
  is the embedded content; the value of
  the <dfn><code>alt</code></dfn> attribute provides equivalent content for
  those who cannot process images or who have image loading disabled (i.e. it is the
  <code>img</code> element's <a>fallback content</a>).

  The requirements on the <code>alt</code> attribute's value are described
  <a>in the next section</a>.

  The <code>src</code> attribute must be present, and must contain a
  <a>valid non-empty URL potentially surrounded by spaces</a> referencing a non-interactive,
  optionally animated, image resource that is neither paged nor scripted.

  The <code>srcset</code> attribute may also be present.
  If present, its value must consist of one or more
  <a>image candidate strings</a>,
  each separated from the next by a U+002C COMMA character (,).
  If an <a>image candidate string</a> contains no descriptors
  and no <a>space characters</a> after the URL,
  the following <a>image candidate string</a>, if there is one,
  must begin with one or more <a>space characters</a>.

  An <dfn>image candidate string</dfn> consists of the following components, in order, with the
  further restrictions described below this list:

  <ol>

    <li>Zero or more <a>space characters</a>.</li>

    <li>A <a>valid non-empty URL</a> that does not start or end with a U+002C COMMA character (,),
    referencing a non-interactive, optionally animated, image resource
    that is neither paged nor scripted.</li>

    <li>Zero or more <a>space characters</a>.</li>

    <li>

    Zero or one of the following:

    <ul>

      <li>A <i>width descriptor</i>, consisting of:
      a <a>space character</a>,
      a <a>valid non-negative integer</a> giving a number greater than zero
      representing the <i>width descriptor</i> value,
      and a U+0077 LATIN SMALL LETTER W character.</li>

      <li>A <i>pixel density descriptor</i>, consisting of:
      a <a>space character</a>,
      a <a>valid floating-point number</a> giving a number greater than zero
      representing the <i>pixel density descriptor</i> value,
      and a U+0078 LATIN SMALL LETTER X character.</li>

    </ul>

    </li>

    <li>Zero or more <a>space characters</a>.</li>

  </ol>

  There must not be an <a>image candidate string</a> for an element that
  has the same <i>width descriptor</i> value as another
  <a>image candidate string</a>'s <i>width descriptor</i> value for the same element.

  There must not be an <a>image candidate string</a> for an element that
  has the same <i>pixel density descriptor</i> value as another
  <a>image candidate string</a>'s <i>pixel density descriptor</i> value for the same element.
  For the purpose of this requirement,
  an <a>image candidate string</a> with no descriptors is equivalent to
  an <a>image candidate string</a> with a <code>1x</code> descriptor.

  If a <code>source</code> element has a <code>sizes</code> attribute present
  or an <code>img</code> element has a <code>sizes</code> attribute present,
  all <a>image candidate strings</a> for that
  element must have the <i>width descriptor</i> specified.

  If an <a>image candidate string</a> for a <code>source</code> or
  <code>img</code> element has the <i>width descriptor</i> specified, all other
  <a>image candidate strings</a> for that element must also
  have the <i>width descriptor</i> specified.

  The specified width in an <a>image candidate string</a>'s <i>width descriptor</i>
  must match the <a>intrinsic width</a> in the resource given by the
  <a>image candidate string</a>'s URL, if it has an <a>intrinsic width</a>.

  <p class="note">
    The requirements above imply that images can be static bitmaps (e.g. PNGs, GIFs,
  JPEGs), single-page vector documents (single-page PDFs, XML files with an SVG root element),
  animated bitmaps (APNGs, animated GIFs), animated vector graphics (XML files with an SVG root
  element that use declarative SMIL animation), and so forth. However, these definitions preclude
  SVG files with script, multipage PDF files, interactive MNG files, HTML documents, plain text
  documents, and so forth. [[!PNG]] [[!GIF]] [[!JPEG]] [[!PDF]] [[!XML]] [[!APNG]]  [[!SVG]]
  [[!MNG]]
  </p>

  If the <code>srcset</code> attribute is present,
  the <dfn><code>sizes</code></dfn> attribute may also be present.
  If present, its value must be a <a>valid source size list</a>.

  A <dfn>valid source size list</dfn> is a string that matches the following grammar:
  [[!CSS-VALUES]] [[!MEDIAQ]]

  <pre highlight="html">
    &lt;source-size-list&gt; = <a>&lt;source-size&gt;</a># [ , <a>&lt;source-size-value&gt;</a> ]? | <a>&lt;source-size-value&gt;</a>
    &lt;source-size&gt; = <a>&lt;media-condition&gt;</a> <a>&lt;source-size-value&gt;</a>
    &lt;source-size-value&gt; = <a>&lt;length&gt;</a>
  </pre>

  A <a>&lt;source-size-value&gt;</a> must not be negative.

  <p class="note">
    Percentages are not allowed in a <a>&lt;source-size-value&gt;</a>,
  to avoid confusion about what it would be relative to.
  The <code>vw</code> unit can be used for sizes relative to the viewport width.
  </p>

  The <code>img</code> element must not be used as a layout tool. In particular, <code>img</code>
  elements should not be used to display transparent images, as such images rarely convey meaning and
  rarely add anything useful to the document.

  <hr />

  The <dfn><code>crossorigin</code></dfn> attribute is a <a>CORS
  settings attribute</a>. Its purpose is to allow images from third-party sites that allow
  cross-origin access to be used with <code>canvas</code>.

  <div class="impl">

  <hr />

  An <code>img</code> element has a <dfn>current request</dfn> and a <dfn>pending request</dfn>.
  The <a>current request</a> is initially set to a new <a>image request</a>.
  The <a>pending request</a> is initially set to null.
  The <a>current request</a> is usually referred to as the <code>img</code> element itself.

  An <dfn>image request</dfn> has a <dfn>state</dfn>, <dfn>current URL</dfn> and <dfn>image data</dfn>.

  An <a>image request</a>'s <a>state</a> is one of the following:

  <dl>

    <dt><dfn>Unavailable</dfn></dt>
    <dd>The user agent hasn't obtained any image data,
    or has obtained some or all of the image data but
    hasn't yet decoded enough of the image to get the image dimensions.</dd>

    <dt><dfn>Partially available</dfn></dt>
    <dd>The user agent has obtained some of the image data and at least the image dimensions are
    available.</dd>

    <dt><dfn>Completely available</dfn></dt>
    <dd>The user agent has obtained all of the image data and at least the image dimensions are
    available.</dd>

    <dt><dfn>Broken</dfn></dt>
    <dd>The user agent has obtained all of the image data that it can, but it cannot even decode the
    image enough to get the image dimensions (e.g. the image is corrupted, or the format is not
    supported, or no data could be obtained).</dd>

  </dl>

  An <a>image request</a>'s <a>current URL</a> is initially the empty string.

  An <a>image request</a>'s <a>image data</a> is the decoded image data.

  When an <a>image request</a> is either in the <a>partially
  available</a> state or in the <a>completely available</a> state, it is
  said to be <dfn>available</dfn>.

  An <a>image request</a> is initially <a>unavailable</a>.

  When an <code>img</code> element is <a>available</a>,
  it <a>provides a paint source</a>
  whose width is the image's <a>density-corrected intrinsic width</a> (if any),
  whose height is the image's <a>density-corrected intrinsic height</a> (if any),
  and whose appearance is the intrinsic appearance of the image.

  In a <a>browsing context</a> where <a>scripting is
  disabled</a>, user agents may obtain images immediately or on demand. In a <a>browsing
  context</a> where <a>scripting is enabled</a>, user agents
  must obtain images immediately.

  A user agent that obtains images immediately must immediately
  <a>update the image data</a> of an <code>img</code> element,
  with the <i>restart animation</i> flag set if so stated,
  whenever that element is created or has experienced <a>relevant mutations</a>.

  A user agent that obtains images on demand must <a>update the image data</a> of an
  <code>img</code> element whenever it needs the image data (i.e. on demand),
  but only if the <code>img</code> element is in the
  <a>unavailable</a> state. When an <code>img</code> element
  has experienced <a>relevant mutations</a>, if the user
  agent only obtains images on demand, the <code>img</code> element must return to the <a>unavailable</a> state.

  The <dfn>relevant mutations</dfn> for an <code>img</code> element are as follows:

  <ul>

    <li>The element's <code>src</code>, <code>srcset</code>, <code>width</code>, or <code>sizes</code> attributes are set, changed, or removed.</li>

    <li>The element's <code>src</code> attribute is set to the same value as the previous value.
    This must set the <i>restart animation</i> flag for the <a>update the image data</a> algorithm.</li>

    <li>The element's <code>crossorigin</code> attribute's state is changed.</li>

    <li>The <a>element is inserted</a> into or
    <a>removed</a> from a <code>picture</code> parent element.</li>

    <li>The element's parent is a <code>picture</code> element and a
    <code>source</code> <a>element is inserted</a> as a previous sibling.</li>

    <li>The element's parent is a <code>picture</code> element and a
    <code>source</code> element that was a previous sibling is <a>removed</a>.</li>

    <li>The element's parent is a <code>picture</code> element and a
    <code>source</code> element that is a previous sibling has its
    <code>srcset</code>,
    <code>sizes</code>,
    <code>media</code>
    or <code>type</code> attributes set, changed, or removed.</li>

    <li>The element's <a>adopting steps</a> are run.</li>

  </ul>

  Each <code>img</code> element has a <dfn>last selected source</dfn>, which must initially be
  null.

  Each <a>image request</a> has a <dfn>current pixel density</dfn>, which must initially be undefined.

  When an <code>img</code> element has a <a>current pixel density</a> that is not 1.0, the
  element's image data must be treated as if its resolution, in device pixels per CSS pixels, was
  the <a>current pixel density</a>.
  The image's <dfn>density-corrected intrinsic width and height</dfn> are the <a>intrinsic width and height</a>
  after taking into account the <a>current pixel density</a>.

  <p class="example">For example, if the <a>current pixel density</a> is 3.125, that means
  that there are 300 device pixels per CSS inch, and thus if the image data is 300x600, it has
  <a>intrinsic dimensions</a> of 96 CSS pixels by 192 CSS pixels.</p>

  Each <code>Document</code> object must have a <dfn>list of available images</dfn>. Each image
  in this list is identified by a tuple consisting of an <a>absolute URL</a>, a <a>CORS
  settings attribute</a> mode, and, if the mode is not <a>No
  CORS</a>, an <a>origin</a>.
  Each image furthermore has an <dfn>ignore higher-layer caching</dfn> flag.
  User agents may copy entries from one <code>Document</code>
  object's <a>list of available images</a> to another at any time (e.g. when the
  <code>Document</code> is created, user agents can add to it all the images that are loaded in
  other <code>Document</code>s), but must not change the keys of entries copied in this way when
  doing so, and must unset the <a>ignore higher-layer caching</a> flag for the copied entry.
  User agents may also remove images from such lists at any time (e.g. to save
  memory).
  User agents must remove entries in the <a>list of available images</a> as appropriate
  given higher-layer caching semantics for the resource (e.g. the HTTP <code>Cache-Control</code>
  response header) when the <a>ignore higher-layer caching</a> flag is unset.

  <p class="note">
    The <a>list of available images</a> is intended to enable synchronous
  switching when changing the <code>src</code> attribute to a URL that has
  previously been loaded, and to avoid re-downloading images in the same document even when they
  don't allow caching per HTTP. It is not used to avoid re-downloading the same image while the
  previous image is still loading.
  </p>

  <p class="example">For example, if a resource has the HTTP response header <code>Cache-Control: must-revalidate</code>,
  the user agent would remove it from the <a>list of available images</a> but could keep the image data separately,
  and use that if the server responds with a <code>204 No Content</code> status.</p>

  When the user agent is to <dfn>update the image data</dfn> of an <code>img</code> element,
  optionally with the <i>restart animations</i> flag set,
  it must run the following steps:

  <ol>

    <li>

    If the element's <a>node document</a> is not the <a>active document</a>,
    then run these substeps:

    <ol>

      <li>Continue running this algorithm <a>in parallel</a>.</li>

      <li>Wait until the element's <a>node document</a> is the <a>active document</a>.</li>

      <li>If another instance of this algorithm for this <code>img</code> element was started after this instance
      (even if it aborted and is no longer running), then abort these steps.</li>

      <li><a>Queue a microtask</a> to continue this algorithm.</li>

    </ol>

    </li>

    <li>If the user agent cannot support images, or its support for images has been disabled, then
    <a>abort the image request</a> for the <a>current request</a> and the <a>pending request</a>,
    set <a>current request</a> to the <a>unavailable</a> state,
    let <a>pending request</a> be null,
    and abort these steps.</li>

    <li>

    If the element does not have a <code>srcset</code> attribute specified and
    it does not have a parent or it has a parent but it is not a <code>picture</code> element,
    and it has a <code>src</code> attribute specified and
    its value is not the empty string, let <var>selected source</var> be the value of the
    element's <code>src</code> attribute, and <var>selected pixel
    density</var> be 1.0. Otherwise, let <var>selected source</var> be null and <var>selected pixel density</var> be undefined.

    </li>

    <li>Let the <code>img</code> element's <a>last selected source</a> be <var>selected source</var>.</li>

    <li>

    If <var>selected source</var> is not null, run these substeps:

    <ol>

      <li><a>Resolve</a> <var>selected source</var>, relative
      to the element, and let the result be <var>absolute URL</var>. If that is not successful, then
      abort these inner set of steps.</li>

      <li>Let <var>key</var> be a tuple consisting of the resulting <a>absolute
      URL</a>, the <code>img</code> element's <code>crossorigin</code>
      attribute's mode, and, if that mode is not <a>No CORS</a>,
      the <a>node document</a>'s <a>origin</a>.</li>

      <li>If the <a>list of available images</a> contains an entry for <var>key</var>, then
      set the <a>ignore higher-layer caching</a> flag for that entry,
      <a>abort the image request</a> for the <a>current request</a> and the <a>pending request</a>,
      let <a>pending request</a> be null,
      let <a>current request</a> be a new <a>image request</a> whose <a>image data</a> is that of the entry
      and whose state is set to the <a>completely available</a> state,
      update the presentation of the image appropriately,
      let the <a>current request</a>'s <a>current pixel density</a> be <var>selected pixel density</var>,
      <a>queue a task</a> to <a>restart the animation</a> if <i>restart animation</i> is set,
      change <a>current request</a>'s <a>current URL</a> to <var>absolute URL</var>,
      and then <a>fire a simple event</a> named <code>load</code> at the <code>img</code> element,
      and abort these steps.</li>

    </ol>

    </li>

    <li><a>In parallel</a> <a>await a stable state</a>, allowing the <a>task</a> that invoked this algorithm to continue.
    The <a>synchronous
    section</a> consists of all the remaining steps of this algorithm until the algorithm says the
    <a>synchronous section</a> has ended. (Steps in <a>synchronous sections</a> are marked with &#x231B;.)</li>

    <li>

    &#x231B; If another instance of this algorithm for this <code>img</code> element was started
    after this instance (even if it aborted and is no longer running), then abort these steps.

    <p class="note">
    Only the last instance takes effect, to avoid multiple requests when, for
    example, the <code>src</code>, <code>srcset</code>,
    and <code>crossorigin</code> attributes are all set in
    succession.
  </p>

    </li>

    <li>

    &#x231B; Let <var>selected source</var> and <var>selected pixel density</var> be the
    URL and pixel density that results from <a>selecting an image source</a>,
    respectively.

    </li>

    <li>

    &#x231B; If <var>selected source</var> is null, run these substeps:

    <ol>

      <li>&#x231B; Set the <a>current request</a> to the <a>broken</a> state,
      <a>abort the image request</a> for the <a>current request</a> and the <a>pending request</a>,
      and let <a>pending request</a> be null.</li>

      <li>&#x231B; <a>Queue a task</a> to change the <a>current request</a>'s <a>current URL</a> to the empty string,
      and then, if the element has a <code>src</code> attribute
      or a <code>srcset</code> attribute
      or a parent that is a <code>picture</code> element,
      <a>fire a simple event</a> named <code>error</code> at the <code>img</code> element.</li>

      <li>&#x231B; Abort this algorithm.</li>

    </ol>

    </li>

    <li>

    &#x231B; <a>Queue a task</a> to <a>fire a progress event</a> named <code>loadstart</code> at
    the <code>img</code> element.

    </li>

    <li>&#x231B; <a>Resolve</a> <var>selected source</var>, relative
    to the element, and let the result be <var>absolute URL</var>. If that is not successful, then
    <a>abort the image request</a> for the <a>current request</a> and the <a>pending request</a>,
    set the <a>current request</a> to the <a>broken</a> state,
    let <a>pending request</a> be null,
    <a>queue a task</a> to
    change the <a>current request</a>'s <a>current URL</a> to <var>absolute URL</var>,
    <a>fire a simple event</a> named <code>error</code> at the <code>img</code> element
    and then <a>fire a simple event</a> named <code>loadend</code> at the <code>img</code> element,
    and abort these steps.</li>

    <li>

    &#x231B; If the <a>pending request</a> is not null,
    and <var>absolute URL</var> is the same as the <a>pending request</a>'s <a>current URL</a>,
    then abort these steps.

    &#x231B; If <var>absolute URL</var> is the same as the <a>current request</a>'s <a>current URL</a>,
    and <a>current request</a> is in the <a>partially available</a> state,
    then <a>abort the image request</a> for the <a>pending request</a>,
    <a>queue a task</a> to <a>restart the animation</a> if <i>restart animation</i> is set,
    and abort these steps.

    &#x231B; If the <a>pending request</a> is not null,
    <a>abort the image request</a> for the <a>pending request</a>.

    &#x231B; Let <var>image request</var> be a new <a>image request</a>
    whose <a>current URL</a> is <var>absolute URL</var>.

    &#x231B; If <a>current request</a> is in the <a>unavailable</a> state
    or the <a>broken</a> state,
    let the <a>current request</a> be <var>image request</var>.
    Otherwise, let the <a>pending request</a> be <var>image request</var>.

    &#x231B; Let <var>request</var> be the result of <a>creating a potential-CORS request</a> given
    <var>absolute URL</var> and the current state of the element's <code>crossorigin</code> content attribute.

    &#x231B; Set <var>request</var>'s <a>client</a> to the
    element's <a>node document</a>'s <code>Window</code> object's <a>environment settings
    object</a> and <a>type</a> to "<code>image</code>".

    &#x231B; If the element has a <code>srcset</code> attribute or a
    parent that is a <code>picture</code> element, set <var>request</var>'s <a>initiator</a> to "<code>imageset</code>".

    &#x231B; <a>Fetch</a> <var>request</var>. Let this
    instance of the <a>fetching</a> algorithm be associated with
    <var>image request</var>.

    The resource obtained in this fashion, if any, is <var>image request</var>'s <a>image data</a>.
    It can be either <a>CORS-same-origin</a> or <a>CORS-cross-origin</a>; this affects
    the <a>origin</a> of the image itself (e.g. when used on a <code>canvas</code>).

    Fetching the image must <a>delay the load event</a> of the element's <a>node document</a> until the
    <a>task</a> that is <a>queued</a> by the
    <a>networking task source</a> once the resource has been fetched (<a>defined below</a>) has been run.

    <p class="warning">This, unfortunately, can be used to perform a rudimentary port scan of the
    user's local network (especially in conjunction with scripting, though scripting isn't actually
    necessary to carry out such an attack). User agents may implement <a>cross-origin</a> access control policies that are stricter than those
    described above to mitigate this attack, but unfortunately such policies are typically not
    compatible with existing Web content.</p>

    If the resource is <a>CORS-same-origin</a>, each <a>task</a>
    that is <a>queued</a> by the <a>networking task source</a>
    while the image is being fetched, if <var>image request</var> is the <a>current
    request</a>, must <a>fire a progress event</a> named <code>progress</code> at the <code>img</code> element.

    </li>

    <li>End the <a>synchronous section</a>, continuing the remaining steps <a>in
    parallel</a>, but without missing any data from fetching.</li>

    <li>

    As soon as possible, jump to the first applicable entry from the following list:

    <dl class="switch">

      <dt>If the resource type is <code>multipart/x-mixed-replace</code></dt>

      <dd>

      The next <a>task</a> that is <a>queued</a> by the <a>networking task source</a> while the image is being
      fetched must run the following steps:

      <ol>

        <li>

        If <var>image request</var> is the <a>pending request</a>
        and at least one body part has been completely decoded,
        <a>abort the image request</a> for the <a>current request</a>,
        <a>upgrade the pending request to the current request</a>.

        </li>

        <li>

        Otherwise, if <var>image request</var> is the <a>pending request</a>
        and the user agent is able to determine that <var>image request</var>'s image
        is corrupted in some fatal way such that the image dimensions cannot be obtained,
        <a>abort the image request</a> for the <a>current request</a>,
        <a>upgrade the pending request to the current request</a>
        and set the <a>current request</a>'s state to <a>broken</a>.

        </li>

        <li>

        Otherwise, if <var>image request</var> is the <a>current request</a>,
        it is in the <a>unavailable</a> state,
        and the user agent is able to determine <var>image request</var>'s image's width and height,
        set the <a>current request</a>'s state to <a>partially available</a>.

        </li>

        <li>

        Otherwise, if <var>image request</var> is the <a>current request</a>,
        it is in the <a>unavailable</a> state,
        and the user agent is able to determine that <var>image request</var>'s image
        is corrupted in some fatal way such that the image dimensions cannot be obtained,
        set the <a>current request</a>'s state to <a>broken</a>.

        </li>

      </ol>

      Each <a>task</a> that is <a>queued</a> by the <a>networking task source</a> while the image is being
      fetched must update the presentation of the image, but as each new body part comes in, it must
      replace the previous image. Once one body part has been completely decoded, the user agent
      must set the <code>img</code> element to the <a>completely
      available</a> state and <a>queue a task</a> to <a>fire a simple event</a> named
      <code>load</code> at the <code>img</code> element.

      <p class="note">
    The <code>progress</code> and <code>loadend</code> events are not fired for
      <code>multipart/x-mixed-replace</code> image streams.
  </p>

      </dd>

      <dt>If the resource type and data corresponds to a supported image format, <a>as described below</a></dt>

      <dd>

      The next <a>task</a> that is <a>queued</a> by the <a>networking task source</a> while the image is being
      fetched must run the following steps:

      <ol>

        <li>

        If the user agent is able to determine <var>image request</var>'s image's width and height,
        and <var>image request</var> is <a>pending request</a>,
        set <var>image request</var>'s state to <a>partially available</a>.

        </li>

        <li>

        Otherwise, if the user agent is able to determine <var>image request</var>'s image's width and height,
        and <var>image request</var> is <a>current request</a>,
        update the <code>img</code> element's presentation appropriately
        and set <var>image request</var>'s state to <a>partially available</a>.

        </li>

        <li>

        Otherwise, if the user agent is able to determine that <var>image request</var>'s image
        is corrupted in some fatal way such that the image dimensions cannot be obtained,
        and <var>image request</var> is <a>pending request</a>,
        <a>abort the image request</a> for the <a>current request</a> and the <a>pending request</a>,
        <a>upgrade the pending request to the current request</a>,
        set <a>current request</a> to the <a>broken</a> state,
        <a>fire a simple event</a> named <code>error</code> at the <code>img</code> element,
        <a>fire a simple event</a> named <code>loadend</code> at the <code>img</code> element,
        and abort these steps.

        </li>

        <li>

        Otherwise, if the user agent is able to determine that <var>image request</var>'s image
        is corrupted in some fatal way such that the image dimensions cannot be obtained,
        and <var>image request</var> is <a>current request</a>,
        <a>abort the image request</a> for <var>image request</var>,
        <a>fire a simple event</a> named <code>error</code> at the <code>img</code> element,
        <a>fire a simple event</a> named <code>loadend</code> at the <code>img</code> element,
        and abort these steps.

        </li>

      </ol>

      That <a>task</a>, and each subsequent <a>task</a>, that is <a>queued</a> by the
      <a>networking task source</a> while the image is being fetched, if <var>image
      request</var> is the <a>current request</a>, must update the presentation of the image
      appropriately (e.g., if the image is a progressive JPEG, each packet can improve the
      resolution of the image).

      Furthermore, the last <a>task</a> that is <a>queued</a> by the <a>networking task source</a> once the resource has been
      fetched must additionally run these steps:

      <ol>

        <li>If <var>image request</var> is the <a>pending request</a>,
        <a>abort the image request</a> for the <a>current request</a>,
        <a>upgrade the pending request to the current request</a> and
        update the <code>img</code> element's presentation appropriately.</li>

        <li>Set <var>image request</var> to the <a>completely
        available</a> state.</li>

        <li>Add the image to the <a>list of available images</a> using the key <var>key</var>, with the <a>ignore higher-layer caching</a> flag set.</li>

        <li><a>Fire a progress event or simple event</a> named <code>load</code>
        at the <code>img</code> element, depending on the resource in <var>image request</var>.</li>

        <li><a>Fire a progress event or simple event</a> named <code>loadend</code>
        at the <code>img</code> element, depending on the resource in <var>image request</var>.</li>

      </ol>

      </dd>

      <dt>Otherwise</dt>

      <dd>

      The image data is not in a supported file format; the user agent must set
      <var>image request</var> to the <a>broken</a> state,
      <a>abort the image request</a> for the <a>current request</a> and the <a>pending request</a>,
      <a>upgrade the pending request to the current request</a> if <var>image request</var> is the <a>pending request</a>,
      and then <a>queue a task</a> to first <a>fire a simple event</a> named <code>error</code> at the <code>img</code> element and then <a>fire a simple
      event</a> named <code>loadend</code> at the <code>img</code>
      element.

      </dd>

    </dl>

    </li>

  </ol>

  To <dfn>abort the image request</dfn> for an <a>image request</a> <var>image request</var> means to run the following steps:

  <ol>

    <li>Forget <var>image request</var>'s <a>image data</a>, if any.</li>

    <li>Abort any instance of the <a>fetching</a> algorithm for
    <var>image request</var>, discarding any pending tasks generated by that algorithm.</li>

  </ol>

  To <dfn>upgrade the pending request to the current request</dfn> for an <code>img</code> element means to run the following steps:

  <ol>

    <li>Let the <code>img</code> element's <a>current request</a> be the <a>pending request</a>.</li>

    <li>Let the <code>img</code> element's <a>pending request</a> be null.</li>

  </ol>

  To <dfn>fire a progress event or simple event</dfn> named <var>type</var> at an element <var>e</var>,
  depending on resource <var>r</var>, means to
  <a>fire a progress event</a> named <var>type</var> at <var>e</var> if <var>r</var> is <a>CORS-same-origin</a>,
  and otherwise <a>fire a simple event</a> named <var>type</var> at <var>e</var>.

  While a user agent is running the above algorithm for an element <var>x</var>, there
  must be a strong reference from the element's <a>node document</a> to the element <var>x</var>,
  even if that element is not <a>in its <code>Document</code></a>.

  When an <code>img</code> element is in the <a>completely available</a>
  state <em>and</em> the user agent can decode the media data without errors, then the
  <code>img</code> element is said to be <dfn>fully decodable</dfn>.

  Whether the image is fetched successfully or not (e.g. whether the response status was an
  <a>ok status</a>) must be ignored when determining the image's type and whether it is a
  valid image.

  <p class="note">
    This allows servers to return images with error responses, and have them
  displayed.
  </p>

  The user agent should apply the <a>image sniffing rules</a> to determine the type of the image, with the image's <a>associated Content-Type headers</a> giving the <var>official
  type</var>. If these rules are not applied, then the type of the image must be the type given by
  the image's <a>associated Content-Type headers</a>.

  User agents must not support non-image resources with the <code>img</code> element (e.g. XML
  files whose root element is an HTML element). User agents must not run executable code (e.g.
  scripts) embedded in the image resource. User agents must only display the first page of a
  multipage resource (e.g. a PDF file). User agents must not allow the resource to act in an
  interactive fashion, but should honor any animation in the resource.

  This specification does not specify which image types are to be supported.

  <hr />

  An <code>img</code> element is associated with a <a>source set</a>.

  A <dfn>source set</dfn> is an ordered set of zero or more <a>image sources</a>
  and a <a>source size</a>.

  An <dfn>image source</dfn> is a <a>URL</a>,
  and optionally either a density descriptor, or a width descriptor.

  A <dfn>source size</dfn> is a <a>&lt;source-size-value&gt;</a>.
  When a <a>source size</a> has a unit relative to the viewport,
  it must be interpreted relative to the <code>img</code> element's document's viewport.
  Other units must be interpreted the same as in Media Queries. [[!MEDIAQ]]

  When asked to <dfn>select an image source</dfn> for a given <code>img</code> element <var>el</var>,
  user agents must do the following:

  <ol>

    <li><a>Update the source set</a> for <var>el</var>.</li>

    <li>If <var>el</var>'s <a>source set</a> is empty,
    return null as the URL and undefined as the pixel density and abort these steps.</li>

    <li>Otherwise, take <var>el</var>'s <a>source set</a>
    and let it be <var>source set</var>.</li>

    <li>If an entry <var>b</var> in <var>source set</var> has the same associated density descriptor
    as an earlier entry <var>a</var> in <var>source set</var>, then remove entry <var>b</var>.
    Repeat this step until none of the entries in <var>source set</var> have the same associated density descriptor as an earlier entry.</li>

    <li>In a user agent-specific manner,
    choose one <a>image source</a> from <var>source set</var>.
    Let this be <var>selected source</var>.</li>

    <li>Return <var>selected source</var> and its associated pixel density.</li>

  </ol>

  When asked to <dfn>update the source set</dfn> for a given <code>img</code> element <var>el</var>,
  user agents must do the following:

  <ol>

    <li>Set <var>el</var>'s <a>source set</a> to an empty <a>source set</a>.</li>

    <li>If <var>el</var> has a parent node and that is a <code>picture</code> element,
    let <var>elements</var> be an array containing <var>el</var>'s parent node's child elements, retaining relative order.
    Otherwise, let <var>elements</var> be array containing only <var>el</var>.</li>

    <li>If <var>el</var> has a <code>width</code> attribute, and parsing
    that attribute's value using the <a>rules for parsing dimension values</a> doesn't generate
    an error or a percentage value, then let <var>width</var> be the returned integer value.
    Otherwise, let <var>width</var> be null.</li>

    <li>

    Iterate through <var>elements</var>,
    doing the following for each item <var>child</var>:

    <ol>

      <li>

      If <var>child</var> is <var>el</var>:

      <ol>

        <li>If <var>child</var> has a <code>srcset</code> attribute,
        <a>parse <var>child</var>'s srcset attribute</a>
        and let the returned <a>source set</a> be <var>source set</var>.
        Otherwise, let <var>source set</var> be an empty <a>source set</a>.</li>

        <li><a>Parse <var>child</var>'s sizes
        attribute</a> with the fallback width <var>width</var>, and let <var>source set</var>'s
        <a>source size</a> be the returned value.</li>

        <li>If <var>child</var> has a <code>src</code> attribute
        whose value is not the empty string
        and <var>source set</var> does not contain an
        <a>image source</a> with a density descriptor value of 1,
        and no <a>image source</a> with a width descriptor,
        append <var>child</var>'s <code>src</code> attribute value to <var>source set</var>.</li>

        <li><a>Normalize the source densities</a> of <var>source set</var>.</li>

        <li>Let <var>el</var>'s <a>source set</a> be <var>source set</var>.</li>

        <li>Abort this algorithm.</li>

      </ol>

      </li>

      <li>If <var>child</var> is not a <code>source</code> element,
      continue to the next child.
      Otherwise, <var>child</var> is a <code>source</code> element.</li>

      <li>If <var>child</var> does not have a <code>srcset</code> attribute,
      continue to the next child.</li>

      <li><a>Parse <var>child</var>'s srcset attribute</a> and
      let the returned <a>source set</a> be <var>source set</var>.</li>

      <li>If <var>source set</var> has zero <a>image sources</a>,
      continue to the next child.</li>

      <li>If <var>child</var> has a <code>media</code> attribute,
      and its value does not <a>match the environment</a>,
      continue to the next child.</li>

      <li><a>Parse <var>child</var>'s sizes attribute</a>
      with the fallback width <var>width</var>, and let <var>source set</var>'s <a>source
      size</a> be the returned value.</li>

      <li>If <var>child</var> has a <code>type</code> attribute,
      and its value is an unknown or unsupported <a>MIME type</a>,
      continue to the next child.</li>

      <li><a>Normalize the source densities</a> of <var>source set</var>.</li>

      <li>Let <var>el</var>'s <a>source set</a> be <var>source set</var>.</li>

      <li>Abort this algorithm.</li>

    </ol>

    </li>

  </ol>

  <p class="note">
    Each <code>img</code> element independently considers
  its previous sibling <code>source</code> elements
  plus the <code>img</code> element itself
  for selecting an <a>image source</a>, ignoring any other (invalid) elements,
  including other <code>img</code> elements in the same <code>picture</code> element,
  or <code>source</code> elements that are following siblings
  of the relevant <code>img</code> element.
  </p>

  When asked to <dfn>parse a srcset attribute</dfn> from an element,
  parse the value of the element's <code>srcset</code> attribute as follows:

  <ol>

    <li>Let <var>input</var> be the value passed to this algorithm.</li>

    <li>Let <var>position</var> be a pointer into <var>input</var>,
    initially pointing at the start of the string.</li>

    <li>Let <var>candidates</var> be an initially empty <a>source set</a>.</li>

    <li><i>Splitting loop</i>: <a>Collect a sequence of characters</a>
    that are <a>space characters</a> or U+002C COMMA characters.
    If any U+002C COMMA characters were collected, that is a <a>parse error</a>.</li>

    <li>If <var>position</var> is past the end of <var>input</var>,
    return <var>candidates</var> and abort these steps.</li>

    <li><a>Collect a sequence of characters</a> that are not
    <a>space characters</a>, and let that be <var>url</var>.</li>

    <li>Let <var>descriptors</var> be a new empty list.</li>

    <li>

    If <var>url</var> ends with a U+002C COMMA character (,),
    follow these substeps:

    <ol>

      <li>Remove all trailing U+002C COMMA characters from <var>url</var>.
      If this removed more than one character,
      that is a <a>parse error</a>.</li>

    </ol>

    Otherwise, follow these substeps:

    <ol>

      <li><i>Descriptor tokenizer</i>: <a>Skip whitespace</a></li>

      <li>Let <var>current descriptor</var> be the empty string.</li>

      <li>Let <var>state</var> be <i>in descriptor</i>.</li>

      <li>

      Let <var>c</var> be the character at <var>position</var>.
      Do the following depending on the value of <var>state</var>.
      For the purpose of this step, "EOF" is a special character representing
      that <var>position</var> is past the end of <var>input</var>.

      <dl class="switch">

        <dt><i title="">In descriptor</i></dt>

        <dd>

        Do the following, depending on the value of <var>c</var>:

        <dl class="switch">

          <dt><a>Space character</a></dt>

          <dd>If <var>current descriptor</var> is not empty,
          append <var>current descriptor</var> to <var>descriptors</var>
          and let <var>current descriptor</var> be the empty string.
          Set <var>state</var> to <i>after descriptor</i>.</dd>

          <dt>U+002C COMMA (,)</dt>

          <dd>Advance <var>position</var> to the next character in <var>input</var>.
          If <var>current descriptor</var> is not empty,
          append <var>current descriptor</var> to <var>descriptors</var>.
          Jump to the step labeled <i>descriptor parser</i>.</dd>

          <dt>U+0028 LEFT PARENTHESIS (()</dt>

          <dd>Append <var>c</var> to <var>current descriptor</var>.
          Set <var>state</var> to <i>in parens</i>.</dd>

          <dt>EOF</dt>

          <dd>If <var>current descriptor</var> is not empty,
          append <var>current descriptor</var> to <var>descriptors</var>.
          Jump to the step labeled <i>descriptor parser</i>.</dd>

          <dt>Anything else</dt>

          <dd>Append <var>c</var> to <var>current descriptor</var>.</dd>

        </dl>

        </dd>

        <dt><i title="">In parens</i></dt>

        <dd>

        Do the following, depending on the value of <var>c</var>:

        <dl class="switch">

          <dt>U+0029 RIGHT PARENTHESIS ())</dt>

          <dd>Append <var>c</var> to <var>current descriptor</var>.
          Set <var>state</var> to <i>in descriptor</i>.</dd>

          <dt>EOF</dt>

          <dd>Append <var>current descriptor</var> to <var>descriptors</var>.
          Jump to the step labeled <i>descriptor parser</i>.</dd>

          <dt>Anything else</dt>

          <dd>Append <var>c</var> to <var>current descriptor</var>.</dd>

        </dl>

        </dd>

        <dt><i title="">After descriptor</i></dt>

        <dd>

        Do the following, depending on the value of <var>c</var>:

        <dl class="switch">

          <dt><a>Space character</a></dt>

          <dd>Stay in this state.</dd>

          <dt>EOF</dt>

          <dd>Jump to the step labeled <i>descriptor parser</i>.</dd>

          <dt>Anything else</dt>

          <dd>Set <var>state</var> to <i>in descriptor</i>.
          Set <var>position</var> to the <em>previous</em> character in <var>input</var>.</dd>

        </dl>

        </dd>

      </dl>

      Advance <var>position</var> to the next character in <var>input</var>.
      Repeat this substep.

      <p class="note">
    In order to be compatible with future additions,
      this algorithm supports multiple descriptors and descriptors with parens.
  </p>

      </li>

    </ol>

    </li>

    <li><i>Descriptor parser</i>: Let <var>error</var> be <i>no</i>.</li>

    <li>Let <var>width</var> be <i>absent</i>.</li>

    <li>Let <var>density</var> be <i>absent</i>.</li>

    <li>Let <var>future-compat-h</var> be <i>absent</i>.</li>

    <li>

    For each descriptor in <var>descriptors</var>,
    run the appropriate set of steps from the following list:

    <dl class="switch">

      <dt>If the descriptor consists of a <a>valid non-negative integer</a>
      followed by a U+0077 LATIN SMALL LETTER W character</dt>

      <dd>

      <ol>

        <li>

        If the user agent does not support the <code>sizes</code> attribute,
        let <var>error</var> be <i>yes</i>.

        <p class="note">
    A conforming user agent will support the <code>sizes</code> attribute.
        However, user agents typically implement and ship features in an incremental manner in practice.
  </p>

        </li>

        <li>If <var>width</var> and <var>density</var>
        are not both <i>absent</i>,
        then let <var>error</var> be <i>yes</i>.</li>

        <li>Apply the <a>rules for parsing non-negative integers</a> to the descriptor.
        If the result is zero, let <var>error</var> be <i>yes</i>.
        Otherwise, let <var>width</var> be the result.</li>

      </ol>

      </dd>

      <dt>If the descriptor consists of a <a>valid floating-point number</a>
      followed by a U+0078 LATIN SMALL LETTER X character</dt>

      <dd>

      <ol>

        <li>If <var>width</var>, <var>density</var> and <var>future-compat-h</var>
        are not all <i>absent</i>,
        then let <var>error</var> be <i>yes</i>.</li>

        <li>

        Apply the <a>rules for parsing floating-point number values</a> to the descriptor.
        If the result is less than zero, let <var>error</var> be <i>yes</i>.
        Otherwise, let <var>density</var> be the result.

        <p class="note">
    If <var>density</var> is zero,
        the <a>intrinsic dimensions</a> will be infinite.
        User agents are expected to have limits in how big images can be rendered,
        which is allowed by the <a>hardware limitations</a> clause.
  </p>

        </li>

      </ol>

      </dd>

      <dt>If the descriptor consists of a <a>valid non-negative integer</a>
      followed by a U+0068 LATIN SMALL LETTER H character</dt>

      <dd>

      This is a <a>parse error</a>.

      <ol>

        <li>If <var>future-compat-h</var> and <var>density</var>
        are not both <i>absent</i>,
        then let <var>error</var> be <i>yes</i>.</li>

        <li>Apply the <a>rules for parsing non-negative integers</a> to the descriptor.
        If the result is zero, let <var>error</var> be <i>yes</i>.
        Otherwise, let <var>future-compat-h</var> be the result.</li>

      </ol>

      </dd>

      <dt>Anything else</dt>

      <dd>Let <var>error</var> be <i>yes</i>.</dd>

    </dl>

    </li>

    <li>If <var>future-compat-h</var> is not <i>absent</i> and <var>width</var> is <i>absent</i>,
    let <var>error</var> be <i>yes</i>.</li>

    <li>If <var>error</var> is still <i>no</i>,
    then append a new <a>image source</a> to <var>candidates</var>
    whose URL is <var>url</var>,
    associated with a width <var>width</var> if not <i>absent</i>
    and a pixel density <var>density</var> if not <i>absent</i>.
    Otherwise, there is a <a>parse error</a>.</li>

    <li>Return to the step labeled <i>splitting loop</i>.</li>

  </ol>

  When asked to <dfn>parse a sizes attribute</dfn> from an element,
  <a>parse a comma-separated list of component values</a>
  from the value of the element's <code>sizes</code> attribute
  (or the empty string, if the attribute is absent),
  and let <var>unparsed sizes list</var> be the result. [[!CSS-SYNTAX-3]]

  For each <var>unparsed size</var> in <var>unparsed sizes list</var>:

  <ol>

    <li>Remove all consecutive <a>&lt;whitespace-token&gt;</a>s
    from the end of <var>unparsed size</var>.
    If <var>unparsed size</var> is now empty,
    that is a <a>parse error</a>;
    continue to the next iteration of this algorithm.</li>

    <li>If the last <a>component value</a> in <var>unparsed size</var>
    is a valid non-negative <a>&lt;source-size-value&gt;</a>,
    let <var>size</var> be its value
    and remove the <a>component value</a> from <var>unparsed size</var>.
    Any CSS function other than the <code>calc()</code> function is invalid.
    Otherwise, there is a <a>parse error</a>;
    continue to the next iteration of this algorithm.</li>

    <li>Remove all consecutive <a>&lt;whitespace-token&gt;</a>s
    from the end of <var>unparsed size</var>.
    If <var>unparsed size</var> is now empty,
    return <var>size</var> and exit this algorithm.
    If this was not the last item in <var>unparsed sizes list</var>,
    that is a <a>parse error</a>.</li>

    <li>Parse the remaining <a>component values</a> in <var>unparsed size</var>
    as a <a>&lt;media-condition&gt;</a>.
    If it does not parse correctly,
    or it does parse correctly but the <a>&lt;media-condition&gt;</a> evaluates to false,
    continue to the next iteration of this algorithm. [[!MEDIAQ]]</li>

    <li>Return <var>size</var> and exit this algorithm.</li>

  </ol>

  If the above algorithm exhausts <var>unparsed sizes list</var> without returning a
  <var>size</var> value, follow these steps:

  <ol>

    <li>If <var>width</var> is not null, return a <a>&lt;length&gt;</a> with the value
    <var>width</var> and the unit <code>px</code>.</li>

    <li>Return <code>100vw</code>.</li>

  </ol>

  A <dfn>parse error</dfn> for the algorithms above
  indicates a non-fatal mismatch between input and requirements.
  User agents are encouraged to expose <a>parse error</a>s somehow.

  <p class="note">
    While a <a>valid source size list</a> only contains a bare <a>&lt;source-size-value&gt;</a>
  (without an accompanying <a>&lt;media-condition&gt;</a>)
  as the last entry in the <a>&lt;source-size-list&gt;</a>,
  the parsing algorithm technically allows such at any point in the list,
  and will accept it immediately as the size
  if the preceding entries in the list weren't used.
  This is to enable future extensions,
  and protect against simple author errors such as a final trailing comma.
  </p>

  An <a>image source</a> can have a density descriptor,
  a width descriptor,
  or no descriptor at all accompanying its URL.
  Normalizing a <a>source set</a> gives every <a>image source</a> a density descriptor.

  When asked to <dfn>normalize the source densities</dfn> of a <a>source set</a> <var>source set</var>,
  the user agent must do the following:

  <ol>

    <li>Let <var>source size</var> be <var>source set</var>'s <a>source size</a>.</li>

    <li>

    For each <a>image source</a> in <var>source set</var>:

    <ol>

      <li>If the <a>image source</a> has a density descriptor,
      continue to the next <a>image source</a>.</li>

      <li>

      Otherwise, if the <a>image source</a> has a width descriptor,
      replace the width descriptor with a density descriptor
      with a value of the width descriptor divided by the <a>source size</a>
      and a unit of <code>x</code>.

      <p class="note">
    If the <a>source size</a> is zero,
      the density would be infinity,
      which results in the <a>intrinsic dimensions</a> being zero by zero.
  </p>

      </li>

      <li>Otherwise, give the <a>image source</a> a density descriptor of <code>1x</code>.</li>

    </ol>

    </li>

  </ol>

  The user agent may at any time run the following algorithm to update an <code>img</code>
  element's image in order to react to changes in the environment. (User agents are <em>not
  required</em> to ever run this algorithm; for example, if the user is not looking at the page any
  more, the user agent might want to wait until the user has returned to the page before determining
  which image to use, in case the environment changes again in the meantime.)

  <p class="note">
    User agents are encouraged to run this algorithm in particular when the user changes the viewport's size
  (e.g. by resizing the window or changing the page zoom),
  and when an <code>img</code> element is <a>inserted into a document</a>,
  so that the <a>density-corrected intrinsic width and height</a> match the new viewport,
  and so that the correct image is chosen when <a>art direction</a> is involved.
  </p>

  <ol>

    <li><a>In parallel</a> <a>await a stable state</a>. The <a>synchronous section</a>
    consists of all the remaining steps of this algorithm until the algorithm says the
    <a>synchronous section</a> has ended. (Steps in <a>synchronous sections</a> are marked with &#x231B;.)</li>

    <li>&#x231B; If the <code>img</code> element does not have a <code>srcset</code> attribute specified and it either has no parent
    or it is not a <code>picture</code> element, is not in the <a>completely available</a> state, has image data whose resource type is
    <code>multipart/x-mixed-replace</code>, or if its <a>update the image data</a> algorithm is
    running, then abort this algorithm.</li>

    <li>&#x231B; Let <var>selected source</var> and <var>selected pixel
    density</var> be the URL and pixel density that results from <a>selecting an image source</a>, respectively.</li>

    <li>&#x231B; If <var>selected source</var> is null, then abort these steps.</li>

    <li>&#x231B; If <var>selected source</var> and <var>selected pixel
    density</var> are the same as the element's <a>last selected source</a> and <a>current
    pixel density</a>, then abort these steps.</li>

    <li>&#x231B; <a>Resolve</a> <var>selected source</var>,
    relative to the element, and let the result be <var>absolute URL</var>.
    If that is not successful, abort these steps.</li>

    <li>&#x231B; Let <var>corsAttributeState</var> be the state of the element's <code>crossorigin</code> content attribute.</li>

    <li>&#x231B; Let <var>origin</var> be the <a>origin</a> of the <code>img</code> element's <a>node document</a>.</li>

    <li>&#x231B; Let <var>client</var> be the <code>img</code> element's <a>node
    document</a>'s <code>Window</code> object's <a>environment settings object</a>.</li>

    <li>&#x231B; Let <var>key</var> be a tuple consisting of <var>absolute URL</var>,
    <var>corsAttributeState</var>, and, if <var>corsAttributeState</var> is not <a>No CORS</a>, <var>origin</var>.</li>

    <li>&#x231B; Let <var>image request</var> be a new <a>image request</a>
    whose <a>current URL</a> is <var>absolute URL</var></li>

    <li>&#x231B; Let the element's <a>pending request</a> be <var>image request</var>.</li>

    <li>End the <a>synchronous section</a>, continuing the remaining steps
    <a>in parallel</a>.</li>

    <li>

    If the <a>list of available images</a> contains an entry for <var>key</var>,
    then set <var>image request</var>'s <a>image data</a> to that of the entry.
    Continue to the next step.

    Otherwise, run these substeps:

    <ol>
      <li>Let <var>request</var> be the result of <a>creating a potential-CORS request</a> given
      <var>absolute URL</var> and <var>corsAttributeState</var>.</li>

      <li>Set <var>request</var>'s <a>client</a> to
      <var>client</var>, <a>type</a> to "<code>image</code>", and set <var>request</var>'s <a>synchronous flag</a>.</li>

      <li>Let <var>response</var> be the result of <a>fetching</a> <var>request</var>.</li>

      <li>If <var>response</var>'s <a>unsafe response</a> is a <a>network error</a> or
      if the image format is unsupported (as determined by applying the <a>image sniffing rules</a>, again as mentioned earlier),
      or if the user agent is able to determine that <var>image request</var>'s image is corrupted in
      some fatal way such that the image dimensions cannot be obtained, or if the resource type is
      <code>multipart/x-mixed-replace</code>, then let <a>pending request</a> be null and abort
      these steps.</li>

      <li>Otherwise, <var>response</var>'s <a>unsafe response</a> is <var>image
      request</var>'s <a>image data</a>. It can be either
      <a>CORS-same-origin</a> or <a>CORS-cross-origin</a>; this affects the
      <a>origin</a> of the image itself (e.g., when used on a <code>canvas</code>).</li>
    </ol>

    </li>

    <li>

    <a>Queue a task</a> to run the following substeps:

    <ol>

      <li>If the <code>img</code> element has experienced <a>relevant mutations</a>
      since this algorithm started, then let <a>pending request</a> be null and abort these steps.

      </li><li>Let the <code>img</code> element's <a>last selected source</a> be <var>selected source</var>
      and the <code>img</code> element's <a>current pixel density</a> be <var>selected pixel density</var>.</li>

      <li>Set <var>image request</var> to the <a>completely available</a> state.</li>

      <li>Add the image to the <a>list of available images</a> using the key <var>key</var>,
      with the <a>ignore higher-layer caching</a> flag set.</li>

      <li><a>Upgrade the pending request to the current request</a>.</li>

      <li>Update the <code>img</code> element's presentation appropriately.</li>

      <li><a>Fire a simple event</a> named <code>load</code> at the
      <code>img</code> element.</li>

    </ol>

    </li>

  </ol>

  <hr />

  The <a>task source</a> for the <a>tasks</a> <a>queued</a> by algorithms in this section is the <a>DOM manipulation task
  source</a>.

  <hr />

  What an <code>img</code> element represents depends on the <code>src</code> attribute and the <code>alt</code>
  attribute.

  <dl class="switch">

    <dt>If the <code>src</code> attribute is set and the <code>alt</code> attribute is set to the empty string</dt>

    <dd>

    The image is either decorative or supplemental to the rest of the content, redundant with
    some other information in the document.

    If the image is <a>available</a> and the user agent is configured
    to display that image, then the element <a>represents</a> the element's image data.

    Otherwise, the element <a>represents</a> nothing, and may be omitted completely from
    the rendering. User agents may provide the user with a notification that an image is present but
    has been omitted from the rendering.

    </dd>

    <dt>If the <code>src</code> attribute is set and the <code>alt</code> attribute is set to a value that isn't empty</dt>

    <dd>

    The image is a key part of the content; the <code>alt</code> attribute
    gives a textual equivalent or replacement for the image.

    If the image is <a>available</a> and the user agent is configured
    to display that image, then the element <a>represents</a> the element's image data.

    Otherwise, the element <a>represents</a> the text given by the <code>alt</code> attribute. User agents may provide the user with a notification
    that an image is present but has been omitted from the rendering.

    </dd>

    <dt>If the <code>src</code> attribute is set and the <code>alt</code> attribute is not</dt>

    <dd>

    There is no textual equivalent of the image available.

    If the image is <a>available</a> and the user agent is configured
    to display that image, then the element <a>represents</a> the element's image data.

    Otherwise, the user agent should display some sort of indicator that there is an image that
    is not being rendered, and may, if requested by the user, or if so configured, or when required
    to provide contextual information in response to navigation, provide caption information for the
    image, derived as follows:

    <ol>

      <li>If the image is a descendant of a <code>figure</code> element that has a child
      <code>figcaption</code> element, and, ignoring the <code>figcaption</code> element and its
    descendants, the <code>figure</code> element has no <code>Text</code> node descendants other
    than <a>inter-element whitespace</a>, and no <a>embedded content</a> descendant
    other than the <code>img</code> element, then the contents of the first such
      <code>figcaption</code> element are the caption information; abort these steps.</li>

      <li>There is no caption information.</li>

    </ol>

    </dd>

    <dt>If the <code>src</code> attribute is not set and either the <code>alt</code> attribute is set to the empty string or the <code>alt</code> attribute is not set at all</dt>

    <dd>

    The element <a>represents</a> nothing.

    </dd>

    <dt>Otherwise</dt>

    <dd>

    The element <a>represents</a> the text given by the <code>alt</code> attribute.

    </dd>

  </dl>

  The <code>alt</code> attribute does not represent advisory information.
  User agents must not present the contents of the <code>alt</code> attribute
  in the same way as content of the <code>title</code> attribute.

  User agents may always provide the user with the option to display any image, or to prevent any
  image from being displayed. User agents may also apply heuristics to help the user make use of the
  image when the user is unable to see it, e.g. due to a visual disability or because they are using
  a text terminal with no graphics capabilities. Such heuristics could include, for instance,
  optical character recognition (OCR) of text found within the image.

  <p class="warning">While user agents are encouraged to repair cases of missing <code>alt</code> attributes, authors must not rely on such behavior. <a>Requirements for providing text to act as an alternative for images</a> are described
  in detail below.</p>

  The <em>contents</em> of <code>img</code> elements, if any, are ignored for the purposes of
  rendering.

  </div>

  <hr />

  The <code>usemap</code> attribute,
  if present, can indicate that the image has an associated
  <a>image map</a>.

  The <dfn><code>ismap</code></dfn>
  attribute, when used on an element that is a descendant of an
  <code>a</code> element with an <code>href</code> attribute, indicates by its
  presence that the element provides access to a server-side image
  map. This affects how events are handled on the corresponding
  <code>a</code> element.

  The <code>ismap</code> attribute is a
  <a>boolean attribute</a>. The attribute must not be specified
  on an element that does not have an ancestor <code>a</code> element
  with an <code>href</code> attribute.

  <p class="note">
    The <code>usemap</code> and
  <code>ismap</code> attributes
  can result in confusing behavior when used together with
  <code>source</code> elements with the
  <code>media</code> attribute specified
  in a <code>picture</code> element.
  </p>

  The <code>img</code> element supports <a>dimension
  attributes</a>.

  <div class="impl">

  The <dfn><code>alt</code></dfn>, <dfn><code>src</code></dfn>, <dfn><code>srcset</code></dfn> and <dfn><code>sizes</code></dfn> IDL attributes must <a>reflect</a> the
  respective content attributes of the same name.

  The <dfn><code>crossOrigin</code></dfn> IDL attribute must
  <a>reflect</a> the <code>crossorigin</code> content attribute.

  The <dfn><code>useMap</code></dfn> IDL attribute must
  <a>reflect</a> the <code>usemap</code> content attribute.

  The <dfn><code>isMap</code></dfn> IDL attribute must <a>reflect</a>
  the <code>ismap</code> content attribute.

  </div>

  <dl class="domintro">

    <dt><var>image</var> . <code>width</code> [ = <var>value</var> ]</dt>
    <dt><var>image</var> . <code>height</code> [ = <var>value</var> ]</dt>

    <dd>

    These attributes return the actual rendered dimensions of the
    image, or zero if the dimensions are not known.

    They can be set, to change the corresponding content
    attributes.

    </dd>

    <dt><var>image</var> . <code>naturalWidth</code></dt>
    <dt><var>image</var> . <code>naturalHeight</code></dt>

    <dd>

    These attributes return the intrinsic dimensions of the image,
    or zero if the dimensions are not known.

    </dd>

    <dt><var>image</var> . <code>complete</code></dt>

    <dd>

    Returns true if the image has been completely downloaded or if
    no image is specified; otherwise, returns false.

    </dd>

    <dt><var>image</var> . <code>currentSrc</code></dt>

    <dd>

    Returns the image's <a>absolute URL</a>.

    </dd>

    <dt><var>image</var> = new <code>Image</code>( [ <var>width</var> [, <var>height</var> ] ] )</dt>

    <dd>

    Returns a new <code>img</code> element, with the <code>width</code> and <code>height</code> attributes set to the values
    passed in the relevant arguments, if applicable.

    </dd>

  </dl>

  <div class="impl">

  The IDL attributes <dfn><code>width</code></dfn> and <dfn><code>height</code></dfn> must return the rendered width and height of the
  image, in CSS pixels, if the image is <a>being rendered</a>, and is being rendered to a
  visual medium; or else the <a>density-corrected intrinsic width and height</a>
  of the image, in CSS pixels, if the image has <a>intrinsic dimensions</a> and is
  <i>available</i> but not being rendered to a visual medium; or else 0, if
  the image is not <i>available</i> or does not have
  <a>intrinsic dimensions</a>. [[!CSS-2015]]

  On setting, they must act as if they <a>reflected</a> the respective
  content attributes of the same name.

  The IDL attributes <dfn><code>naturalWidth</code></dfn> and
  <dfn><code>naturalHeight</code></dfn> must return
  the <a>density-corrected intrinsic width and height</a>
  of the image, in CSS pixels, if the image has <a>intrinsic dimensions</a> and is
  <i>available</i>, or else 0. [[!CSS-2015]]

  The IDL attribute <dfn><code>complete</code></dfn> must return true if
  any of the following conditions is true:

  <ul class="brief">

    <li>Both the <code>src</code> attribute and the <code>srcset</code> attribute are omitted.

    </li><li>The <code>srcset</code> attribute is omitted and the <code>src</code> attribute's value is the empty string.

    </li><li>The final <a>task</a> that is <a>queued</a> by the <a>networking task source</a> once the resource has been fetched
    has been <a>queued</a>.

    </li><li>The <code>img</code> element is <a>completely available</a>.

    </li><li>The <code>img</code> element is <a>broken</a>.

  </li></ul>

  Otherwise, the attribute must return false.

  <p class="note">
    The value of <code>complete</code> can thus change while
  a <a>script</a> is executing.
  </p>

  The <dfn><code>currentSrc</code></dfn> IDL attribute
  must return the <code>img</code> element's <a>current request</a>'s <a>current URL</a>.

  A constructor is provided for creating <code>HTMLImageElement</code> objects (in addition to
  the factory methods from DOM such as <code>createElement()</code>): <dfn><code>Image(<var>width</var>, <var>height</var>)</code></dfn>.
  When invoked as a constructor, this must return a new <code>HTMLImageElement</code> object (a new
  <code>img</code> element). If the <var>width</var> argument is present, the new object's
  <code>width</code> content attribute must be set to <var>width</var>. If the <var>height</var> argument is also present, the new object's
  <code>height</code> content attribute must be set to <var>height</var>.
  The element's <a>node document</a> must be the <a>active document</a> of the
  <a>browsing context</a> of the <code>Window</code> object on which the interface object of
  the invoked constructor is found.

  </div>

<h5 id="requirements-for-providing-text-to-act-as-an-alternative-for-images">Requirements for providing text to act as an alternative for images</h5>

  <a>Text alternatives</a>, [[!WCAG]]
  are a primary way of making visual information accessible, because they can be rendered through any
  sensory modality (for example, visual, auditory or tactile) to match the needs of the user. Providing text alternatives allows
  the information to be rendered in a variety of ways by a variety of user agents. For example, a person who cannot see a picture
  can have the text alternative read aloud using synthesized speech.

  <p class="note">
    The <code>alt</code> attribute on images is a very important accessibility attribute.
  Authoring useful <code>alt</code> attribute content requires the author to carefully consider the context in
  which the image appears and the function that image may have in that context. The guidance included
  here addresses the most common ways authors use images. Additional guidance and techniques are available in <a>Resources on Alternative Text for Images</a>.
  </p>

<h6 id="examples-of-scenarios-where-users-benefit-from-text-alternatives-for-images">Examples of scenarios where users benefit from text alternatives for images</h6>

  <ul>
      <li>They have a very slow connection and are browsing with images disabled.</li>
      <li>They have a vision impairment and use text to speech software.</li>
      <li>They have a cognitive impairment and use text to speech software.</li>
      <li>They are using a text-only browser.</li>
      <li>They are listening to the page being read out by a voice Web browser.</li>
      <li>They have images disabled to save on download costs.</li>
      <li>They have problems loading images or the source of an image is wrong.</li>
    </ul>

<h6 id="general-guidelines">General guidelines</h6>

  Except where otherwise specified, the <code>alt</code> attribute must be specified and its value must not be empty;
  the value must be an appropriate functional replacement for the image. The specific requirements for the <code>alt</code> attribute content
  depend on the image's function in the page, as described in the following sections.

  To determine an appropriate text alternative it is important to think about why an image is being included in a page.
  What is its purpose? Thinking like this will help you to understand what is important about the image for the
  intended audience. Every image has a reason for being on a page, because it provides useful information, performs a
  function, labels an interactive element, enhances aesthetics or is purely decorative. Therefore, knowing what the image
  is for, makes writing an appropriate text alternative easier.

<h6 id="a-link-or-button-containing-nothing-but-an-image">A link or button containing nothing but an image</h6>

  When an <code>a</code> element that is a <a>hyperlink</a>, or a <code>button</code> element, has no text content
  but contains one or more images, include text in the <code>alt</code> attribute(s) that together convey the purpose of the link or button.

  <div class="example">
    In this example, a portion of an editor interface is displayed. Each button has an icon representing an action a user can take on content they are editing. For users who cannot view the images, the action names are included within the <code>alt</code> attributes of the images:

    <img src="images/buttons1.png" alt="5 buttons: bold, italic, strike through, bulleted list and numbered list." />

    <pre highlight="html">
      &lt;ul&gt;
        &lt;li&gt;&lt;button&gt;&lt;img src="b.png" <strong>alt="Bold"</strong>&gt;&lt;/button&gt;&lt;/li&gt;
        &lt;li&gt;&lt;button&gt;&lt;img src="i.png" <strong>alt="Italics"</strong>&gt;&lt;/button&gt;&lt;/li&gt;
        &lt;li&gt;&lt;button&gt;&lt;img src="strike.png" <strong>alt="Strike through"</strong>&gt;&lt;/button&gt;&lt;/li&gt;
        &lt;li&gt;&lt;button&gt;&lt;img src="blist.png" <strong>alt="Bulleted list"</strong>&gt;&lt;/button&gt;&lt;/li&gt;
        &lt;li&gt;&lt;button&gt;&lt;img src="nlist.png" <strong>alt="Numbered list"</strong>&gt;&lt;/button&gt;&lt;/li&gt;
      &lt;/ul&gt;
    </pre>
  </div>

  <div class="example">
    In this example, a link contains a logo. The link points to the W3C web site <strong>from an external site</strong>. The text alternative is
    a brief description of the link target.

    <abbr title="World Wide Web Consortium"><img src="images/w3c_home.png" alt="W3C logo used as link content." width="72" height="48" /></abbr>

    <pre highlight="html">
      &lt;a href="http://w3.org"&gt;
      &lt;img src="images/w3c_home.png" width="72" height="48" <strong>alt="W3C web site"</strong>&gt;
      &lt;/a&gt;
    </pre>
  </div>

  <div class="example">
    This example is the same as the previous example, except that the <strong>link is on the W3C web site</strong>. The text alternative is
    a brief description of the link target.

    <abbr title="World Wide Web Consortium"><img src="images/w3c_home.png" alt="W3C logo used as link content." width="72" height="48" /></abbr>

    <pre highlight="html">
      &lt;a href="http://w3.org"&gt;
      &lt;img src="images/w3c_home.png" width="72" height="48" <strong>alt="W3C home"</strong>&gt;
      &lt;/a&gt;
    </pre>

    <p class="note">
      Depending on the context in which an image of a logo is used it could be appropriate to provide an indication, as part of the text alternative, that the image is a <em>logo</em>. Refer to section <a>4.7.1.1.19 Logos, insignia, flags, or emblems</a>.
    </p>
  </div>

  <div class="example">
    In this example, a link contains a print preview icon. The link points to a version of the page with a
    print stylesheet applied. The text alternative is a brief description of the link target.

    <img src="images/preview.png" width="32" height="30" alt="Print preview icon used as link content." />

    <pre highlight="html">
      &lt;a href="preview.html"&gt;
      &lt;img src="images/preview.png" width="32" height="30" alt="Print preview."&gt;
      &lt;/a&gt;
    </pre>
  </div>

  <div class="example">
    In this example, a button contains a search icon. The button submits a search form. The text alternative is a
    brief description of what the button does.

    <img src="images/search.png" width="74" height="29" alt="Search icon used as button content." />

    <pre highlight="html">
      &lt;button&gt;
      &lt;img src="images/search.png" width="74" height="29" <strong>alt="Search"</strong>&gt;
      &lt;/button&gt;
    </pre>
  </div>

  <div class="example">
    In this example, a company logo for the <i>PIP Corporation</i> has been split into the following two images,
    the first containing the word <i>PIP</i> and the second with the abbreviated word <i>CO</i>. The images are the
    sole content of a link to the <i>PIPCO</i> home page. In this case a brief description of the link target is provided.
    As the images are presented to the user as a single entity the text alternative <i>PIP CO home</i> is in the
    <code>alt</code> attribute of the first image.

    <img src="images/pip.gif" alt="Image containing the text 'PIP'." width="99" height="64" /><img src="images/co.gif" alt="Image containing the text 'CO'." width="103" height="64" />

    <pre highlight="html">
      &lt;a href="pipco-home.html"&gt;
      &lt;img src="pip.gif" <strong>alt="PIP CO home"</strong>&gt;&lt;img src="co.gif" <strong>alt=""</strong>&gt;
      &lt;/a&gt;
    </pre>
  </div>

<h6 id="graphical-representations-charts-diagrams-graphs-maps-illustrations">Graphical Representations: Charts, diagrams, graphs, maps, illustrations</h6>

  Users can benefit when content is presented in graphical form, for example as a
  flowchart, a diagram, a graph, or a map showing directions. Users also benefit when
  content presented in a graphical form is also provided in a textual format, these users include
  those who are unable to view the image (e.g. because they have a very slow connection,
  or because they are using a text-only browser, or because they are listening to the page
  being read out by a hands-free automobile voice Web browser, or because they have a
  visual impairment and use an assistive technology to render the text to speech).

  <div class="example">
    In the following example we have an image of a pie chart, with text in the <code>alt</code>
    attribute representing the data shown in the pie chart:

    <img src="images/browserShare.png" width="380" height="299" alt="Browser Share: Internet Explorer 25%, Firefox 40%, Chrome 25%, Safari 6% and Opera 4%." />

    <pre highlight="html">
      &lt;img src="piechart.gif" alt="Pie chart: Browser Share - Internet Explorer 25%, Firefox 40%, Chrome 25%, Safari 6% and Opera 4%."&gt;
    </pre>
  </div>

  <div class="example">
    In the case where an image repeats the previous paragraph in graphical form. The
    <code>alt</code> attribute content labels the image.

    <pre highlight="html">
      &lt;p&gt;According to a recent study Firefox has a 40% browser share, Internet Explorer has 25%, Chrome has 25%, Safari has 6% and Opera has 4%.&lt;/p&gt;
      &lt;p&gt;&lt;img src="piechart.gif" alt="Pie chart representing the data in the previous paragraph."&gt;&lt;/p&gt;
    </pre>

    It can be seen that when the image is not available, for example because the <code>src</code>
    attribute value is incorrect, the text alternative provides the user with a brief description of
    the image content:

    <img src="images/brokenimg.png" alt="Representation of the code snippet above." />
  </div>

  <p class="note">
    In cases where the text alternative is lengthy, more than a sentence or two, or would benefit
    from the use of structured markup, provide a brief description or label using the
    <code>alt</code>
  attribute, and an associated text alternative.
  </p>

  <div class="example">
  Here's an example of a flowchart image, with a short text alternative
  included in the <code>alt</code> attribute, in this case the text alternative is a description of the link target
  as the image is the sole content of a link. The link points to a description, within the same document, of the
  process represented in the flowchart.

  <img width="221" height="320" src="images/flowchart.png" alt="Flowchart: Dealing with a broken lamp." />

  <pre highlight="html">
  <strong>
  &lt;a href="#desc"&gt;</strong>&lt;img src="flowchart.gif" <strong>alt="Flowchart: Dealing with a broken lamp."</strong>&gt;<strong>&lt;/a&gt;</strong>

  ...

  ...

  &lt;div <strong>id="desc"</strong>&gt;
  &lt;h2&gt;Dealing with a broken lamp&lt;/h2&gt;
  <strong>&lt;ol&gt;</strong>
  <strong>&lt;li&gt;</strong>Check if it's plugged in, if not, plug it in.<strong>&lt;/li&gt;</strong>
  <strong>&lt;li&gt;</strong>If it still doesn't work; check if the bulb is burned out. If it is, replace the bulb.<strong>&lt;/li&gt;</strong>
  <strong>&lt;li&gt;</strong>If it still doesn't work; buy a new lamp.<strong>&lt;/li&gt;</strong>
  <strong>&lt;/ol&gt;</strong>
  &lt;/div&gt;
    </pre>
  </div>

  <div class="example">
  In this example, there is an image of a chart. It would be inappropriate to provide the information depicted in
  the chart as a plain text alternative in an <code>alt</code> attribute as the information is a data set. Instead a
  structured text alternative is provided below the image in the form of a data table using the data that is represented
  in the chart image.

  <img src="images/table.gif" alt="Bar Chart showing average rainfall in millimetres by Country and Season." width="407" height="341" />
  <p class="note">
    Indications of the highest and lowest rainfall for each season have been included in the
  table, so trends easily identified in the chart are also available in the data table.
  </p>

  <table border="1" style="width:28em">
  <caption>Average rainfall in millimetres  by country and season.</caption>
  <tbody><tr><td></td><th scope="col">United Kingdom</th><th scope="col">Japan</th><th scope="col">Australia</th></tr>
  <tr><th scope="row">Spring</th><td>5.3 (highest)</td><td>2.4</td><td>2 (lowest)</td></tr>
  <tr><th scope="row">Summer</th><td>4.5 (highest)</td><td>3.4</td><td>2 (lowest)</td></tr>
  <tr><th scope="row">Autumn</th><td>3.5 (highest)</td><td>1.8</td><td>1.5 (lowest)</td></tr>
  <tr><th scope="row">Winter</th><td>1.5 (highest)</td><td>1.2</td><td>1 (lowest)</td></tr>
  </tbody></table>

  <pre highlight="html">
  &lt;figure&gt;
  &lt;figcaption&gt;Rainfall Data&lt;/figcaption&gt;
  &lt;img src="rainchart.gif" <strong>alt="Bar chart: Average rainfall in millimetres by Country and Season."</strong>&gt;
  &lt;table&gt;
  &lt;caption&gt;Rainfall in millimetres by Country and Season.&lt;/caption&gt;
  &lt;tr&gt;&lt;td&gt;&lt;th scope="col"&gt;UK &lt;th scope="col"&gt;Japan&lt;th scope="col"&gt;Australia&lt;/tr&gt;
  &lt;tr&gt;&lt;th scope="row"&gt;Spring &lt;td&gt;5.5 (highest)&lt;td&gt;2.4 &lt;td&gt;2 (lowest)&lt;/tr&gt;
  &lt;tr&gt;&lt;th scope="row"&gt;Summer &lt;td&gt;4.5 (highest)&lt;td&gt;3.4&lt;td&gt;2 (lowest)&lt;/tr&gt;
  &lt;tr&gt;&lt;th scope="row"&gt;Autumn &lt;td&gt;3.5 (highest) &lt;td&gt;1.8 &lt;td&gt;1.5 (lowest)&lt;/tr&gt;
  &lt;tr&gt;&lt;th scope="row"&gt;Winter &lt;td&gt;1.5 (highest) &lt;td&gt;1.2 &lt;td&gt;1 lowest&lt;/tr&gt;
  &lt;/table&gt;
  &lt;/figure&gt;
    </pre>
  <p class="note">
    The <code>figure</code> element is used to group the Bar Chart image and data table.
  The <code>figcaption</code> element provides a caption for the grouped content.
  </p>

  </div>
  <p class="note">
    For any of the examples in this section the <code>details</code> and <code>summary</code>
  elements could be used so that the text descriptions for the images are only displayed on demand:
  </p>

  <div class="example">
    <img src="images/altdetails-collapsed.png" alt="Details element in the closed state." />
    <img src="images/altdetails-expanded.png" alt="Details element in the open state with list content displayed." />

    <pre highlight="html">
      &lt;figure&gt;
      &lt;img src="flowchart.gif" alt="Flowchart: Dealing with a broken lamp."&gt;
      <strong>&lt;details&gt;</strong>
      <strong>&lt;summary&gt;Dealing with a broken lamp&lt;/summary&gt;</strong>
      &lt;ol&gt;
      lt;li&gt;Check if it's plugged in, if not, plug it in.&lt;/li&gt;
      &lt;li&gt;If it still doesn't work; check if the bulb is burned out. If it is, replace the bulb.&lt;/li&gt;
      &lt;li&gt;If it still doesn't work; buy a new lamp.&lt;/li&gt;
      &lt;/ol&gt;
      <strong>&lt;/details&gt;</strong>
      &lt;/figure&gt;
    </pre>

    <p class="note">
      The <code>details</code> and <code>summary</code> elements are not currently well supported by browsers, until such times they are supported, if used, you will need to use scripting to provide the functionality. There are a number of scripted Polyfills and scripted custom controls available, in popular JavaScript UI widget libraries, which provide similar functionality.
    </p>
  </div>

<h6 id="images-of-text">Images of text</h6>

  Sometimes, an image only contains  text, and the purpose of the image
  is to display text  using visual effects and /or fonts.  It is <em>strongly</em>
  recommended that text styled using CSS be used, but if this is not possible, provide
  the same text in the <code>alt</code> attribute as is in the image.

  <div class="example">
    This example shows an image of the text "Get Happy!" written in a fancy multi colored freehand
    style. The image makes up the content of a heading. In this case the text alternative for the
    image is "Get Happy!".

    <img src="images/text.png" alt="Get Happy!" width="275" height="77" />

    <pre highlight="html">
      &lt;h1&gt;&lt;img src="gethappy.gif" <strong>alt="Get Happy!"</strong>&gt;&lt;/h1&gt;
    </pre>
  </div>

  <div class="example">
  In this example we have an advertising image consisting of text, the phrase "The BIG sale" is
    repeated 3 times, each time the text gets smaller and fainter, the last line reads "...ends Friday"
    In the context of use, as an advertisement, it is recommended that the image's text alternative only include the text "The BIG sale"
    once as the repetition is for visual effect and the repetition of the text for users who cannot view
    the image is unnecessary and could be confusing.

  <img src="images/sale.png" alt="The big sale ...ends Friday." width="400" height="190" />
  <pre highlight="html">
  &lt;p&gt;&lt;img src="sale.gif" <strong>alt="The BIG sale ...ends Friday."</strong>&gt;&lt;/p&gt;
    </pre>
  <p class="note">
    In situations where there is also a photo or other graphic along with the image of text,
    ensure that the words in the image text are included in the text alternative, along with any other description
    of the image that conveys meaning to users who can view the image, so the information is also
    available to users who cannot view the image.
  </p>
  </div>
  When an image is used to represent a character that cannot otherwise be represented in Unicode,
  for example gaiji, itaiji, or new characters such as novel currency symbols, the alternative text
  should be a more conventional way of writing the same thing, e.g. using the phonetic hiragana or
  katakana to give the character's pronunciation.

  <div class="example">
    In this example from 1997, a new-fangled currency symbol that looks like a curly E with two
    bars in the middle instead of one is represented using an image. The alternative text gives the
    character's pronunication.

Only <img width="21" height="18" src="images/euro.png" alt="euro " />5.99!

    <pre highlight="html">
&lt;p&gt;Only &lt;img src="euro.png" alt="euro "&gt;5.99!
    </pre>

  </div>

  An image should not be used if Unicode characters would serve an identical purpose. Only when
  the text cannot be directly represented using Unicode, e.g. because of decorations or because the
  character is not in the Unicode character set (as in the case of gaiji), would an image be
  appropriate.

  <p class="note">
    If an author is tempted to use an image because their default system font does not
  support a given character, then Web Fonts are a better solution than images.
  </p>

  <div class="example">
    An illuminated manuscript might use graphics for some of its letters. The text alternative in
    such a situation is just the character that the image represents.
    <img width="24" height="32" src="images/fancyO.png" alt="O" />nce upon a time and a long long time ago...
    <pre highlight="html">
&lt;p&gt;&lt;img src="initials/fancyO.png" <mark>alt="O"</mark>&gt;nce upon a time and a long long time ago...
    </pre>
  </div>

<h6 id="images-that-include-text">Images that include text</h6>

  Sometimes, an image consists of a graphics such as a chart and associated text.
  In this case it is recommended that the text in the image is included in the text alternative.

  <div class="example">
  Consider an image containing  a pie chart and associated text. It is recommended wherever
  possible to provide any associated text as text, not an image of text.
  If this is not possible include the text in the text alternative along with the pertinent information
  conveyed in the image.

  <img src="images/figure1.png" alt="Figure 1. Distribution of Articles by Journal
  Category. Pie chart: Language=68%, Education=14% and Science=18%." id="piechart" width="351" height="279">
  <pre highlight="html">
  &lt;p&gt;&lt;img src="figure1.gif" <strong>alt="Figure 1. Distribution of Articles by Journal Category.
  Pie chart: Language=68%, Education=14% and Science=18%."</strong>&gt;&lt;/p&gt;
    </pre>
  </div>

  <div class="example">
  Here's another example of the same <a>pie chart</a> image,
  showing a short text alternative included in the <code>alt</code> attribute
  and a longer text alternative in text. The <code>figure</code> and <code>figcaption</code>
  elements are used to associate the longer text alternative with the image. The <code>alt</code> attribute is used
  to label the image.

  <pre highlight="html">
  &lt;figure&gt;
  &lt;img src="figure1.gif" <strong>alt="Figure 1"</strong>&gt;
  &lt;figcaption&gt;&lt;strong&gt;Figure 1.&lt;/strong&gt; Distribution of Articles by Journal Category.
  Pie chart: Language=68%, Education=14% and Science=18%.&lt;/figcaption&gt;
  &lt;/figure&gt;
    </pre>
  <p class="note">
    The advantage of this method over the previous example is that the text alternative
  is available to all users at all times. It also allows structured mark up to be used in the text
  alternative, where as a text alternative provided using the <code>alt</code> attribute does not.
  </p>
  </div>

<h6 id="images-that-enhance-the-themes-or-subject-matter-of-the-page-content">Images that enhance the themes or subject matter of the page content</h6>

  An image that isn't discussed directly by the surrounding text but still has
  some relevance can be included in a page using the <code>img</code> element. Such images
  are more than mere decoration, they may augment the themes or subject matter of the page
  content and so still form part of the content. In these cases, it is recommeneded that a
  text alternative be provided.

  <div class="example">
  Here is an example of an image closely related to the subject matter of the page content
  but not directly discussed. An image of a painting inspired by a poem, on a page reciting that poem.
  The following snippet shows an example. The image is a painting titled the "Lady of Shallot", it is
  inspired by the poem and its subject matter is derived from the poem. Therefore it is strongly
  recommended that a text alternative is provided. There is a short description of the content of
  the image in the <code>alt</code> attribute and
  a link below the image to a longer description located at the bottom of the document. At the end
  of the longer description there is also a link to further information about the painting.
  <img src="images/shalott.jpg" alt="A painting inspired by Alfred Tennyson's poem The Lady of Shalott" width="338" height="234" />
  <pre highlight="html">
  &lt;header&gt;
  &lt;h1&gt;The Lady of Shalott&lt;/h1&gt;
  &lt;p&gt;A poem by Alfred Lord Tennyson&lt;/p&gt;
  &lt;/header&gt;

  &lt;img src="shalott.jpeg" <strong>alt="Painting of a  young woman with long hair, sitting in a wooden boat. "</strong>&gt;
  &lt;p&gt;&lt;a href="#des"&gt;Description of the painting&lt;/a&gt;.&lt;/p&gt;

  &lt;!-- Full Recitation of Alfred, Lord Tennyson's Poem.  --&gt;

  ...
  ...
  ...
  &lt;p id="des"&gt;<strong>The woman in the painting is wearing a flowing white dress. A large piece of intricately
  patterned fabric is draped over the side. In her right hand she holds the chain mooring the boat. Her expression
  is mournful. She stares at a crucifix lying in front of her. Beside it are three candles. Two have blown out.</strong>
  <strong>&lt;a href="http://bit.ly/5HJvVZ"&gt;Further information about the painting&lt;/a&gt;.</strong>&lt;/p&gt;
    </pre>
  </div>
  <div class="example">
  This example illustrates the provision of a text alternative identifying an image as a photo of the main subject of a page.
  <img src="images/robin.png" alt="Portrait photo(black and white) of Robin, accompanied by a heading 'Robin Berjon' and a question
  'what more needs to be said?'" width="354" height="138">
<pre highlight="html">
  &lt;img src="orateur_robin_berjon.png" <strong>alt="Portrait photo(black and white) of Robin."</strong>&gt;
  &lt;h1&gt;Robin Berjon&lt;/h1&gt;
  &lt;p&gt;What more needs to be said?&lt;/p&gt;
    </pre>
  </div>

<h6 id="a-graphical-representation-of-some-of-the-surrounding-text">A graphical representation of some of the surrounding text</h6>

  In many cases, the image is actually just supplementary, and its presence merely reinforces the
  surrounding text. In these cases, the <code>alt</code> attribute must be
  present but its value must be the empty string.

  In general, an image falls into this category if removing the image doesn't make the page any
  less useful, but including the image makes it a lot easier for users of visual browsers to
  understand the concept.

  <div class="example">
  It is not always easy to write a useful text alternative for an image, another option is to provide a link to a
  description or further information about the image when one is available.
  In this example of  the same image, there is a short text alternative included in the <code>alt</code> attribute, and
  there is a link after the image. The link points to a page containing <a>information about the painting</a>.

  <strong>The Lady of Shalott</strong><br><small>A poem by Alfred Lord Tennyson.</small>
  <img src="images/shalott.jpg" alt="Painting of a woman in a white flowing dress, sitting in a small boat." width="271" height="171" />
  <a>About this painting.</a>
  <em>Full recitation of Alfred, Lord Tennyson's poem.</em>
  <pre highlight="html">
  &lt;header&gt;&lt;h1&gt;The Lady of Shalott&lt;/h1&gt;
  &lt;p&gt;A poem by Alfred Lord Tennyson&lt;/p&gt;&lt;/header&gt;
  &lt;figure&gt;
  &lt;img src="shalott.jpeg" <strong>alt="Painting of a woman in a white flowing dress, sitting in a small boat."</strong>&gt;
  &lt;p&gt;&lt;a href="http://bit.ly/5HJvVZ"&gt;<strong>About this painting.</strong>&lt;/a&gt;&lt;/p&gt;
  &lt;/figure&gt;
  &lt;!-- Full Recitation of Alfred, Lord Tennyson's Poem.  --&gt;
    </pre>
  </div>

<h6 id="a-purely-decorative-image-that-doesnt-add-any-information">A purely decorative image that doesn't add any information</h6>

  Purely decorative images are visual enhancements, decorations or embellishments that provide no
  function or information beyond aesthetics to users who can view the images.

  Mark up purely decorative images so they can be ignored by assistive technology by using an empty <code>alt</code>
  attribute (<code>alt=""</code>). While it is not unacceptable to include decorative images inline,
  it is recommended if they are purely decorative to include the image using CSS.

  <div class="example">
  Here's an example of an image being used as a decorative banner for a person's blog, the image offers no information
  and so an empty <code>alt</code> attribute is used.

  <div>
  <img src="images/border.png" alt="" width="400" height="30" />
  <strong>Clara's Blog</strong>
  Welcome to my blog...
  </div>
  <pre highlight="html">
  &lt;header&gt;
  &lt;div&gt;&lt;img src="border.gif" <strong>alt=""</strong> width="400" height="30"&gt;&lt;/div&gt;
  &lt;h1&gt;Clara's Blog&lt;/h1&gt;
  &lt;/header&gt;
  &lt;p&gt;Welcome to my blog...&lt;/p&gt;
    </pre>
  </div>

<h6 id="inline-images">Inline images</h6>

  When images are used inline as part of the flow of text in a sentence, provide a word or phrase as a text
  alternative which makes sense in the context of the sentence it is apart of.

  <div class="example">
  I <img src="images/heart.png" alt="love" width="27" height="24" /> you.

  <pre highlight="html">
I &lt;img src="heart.png" <strong>alt="love"</strong>&gt; you.
    </pre>

  My <img src="images/heart.png" alt="heart" width="27" height="24" /> breaks.

  <pre highlight="html">
My &lt;img src="heart.png" <strong>alt="heart"</strong>&gt; breaks.
    </pre>
  </div>

<h6 id="a-group-of-images-that-form-a-single-larger-picture-with-no-links">A group of images that form a single larger picture with no links</h6>

  When a picture has been sliced into smaller image files that are then displayed
  together to form the complete picture again, include a text alternative for one
  of the images using the <code>alt</code> attribute as per the relevant relevant
  guidance for the picture as a whole, and then include an empty <code>alt</code>
  attribute on the other images.

  <div class="example">
  In this example, a picture representing a company logo for the <i>PIP Corporation</i>
  has been split into two pieces, the first containing the letters "PIP" and the second with the word "CO".
  The text alternatve <i>PIP CO</i> is in the <code>alt</code> attribute of the first image.

  <img src="images/pip.gif" alt="Image containing the text 'PIP'." width="99" height="64" /><img src="images/co.gif" alt="Image containing the text 'CO'." width="103" height="64" />

  <pre highlight="html">
  &lt;img src="pip.gif" <strong>alt="PIP CO"</strong>&gt;&lt;img src="co.gif" <strong>alt=""</strong>&gt;
    </pre>
  </div>

  <div class="example">
  In the following example, a rating is shown as three filled
  stars and two empty stars. While the text alternative could have
  been "âââââ", the author has
  instead decided to more helpfully give the rating in the form "3
  out of 5". That is the text alternative of the first image, and the
  rest have empty <code>alt</code> attributes.
  <img src="images/rating.png" alt="3 out of 5." width="149" height="30" />

  <pre highlight="html">
  &lt;p&gt;Rating: &lt;meter max=5 value=3&gt;
  &lt;img src="1" <strong>alt="3 out of 5"</strong>&gt;
  &lt;img src="1" <strong>alt=""</strong>&gt;&lt;img src="1" <strong>alt=""</strong>&gt;
  &lt;img src="0" <strong>alt=""</strong>&gt;&lt;img src="0" <strong>alt=""</strong>&gt;
  &lt;/meter&gt;&lt;/p&gt;
    </pre>

  </div>

<h6 id="image-maps">Image maps</h6>
  If an <code>img</code> element has a <code>usemap</code> attribute which references a <code>map</code> element containing
  <code>area</code> elements that have <code>href</code> attributes, the <code>img</code> is considered to be interactive content.
  In such cases, always provide a text alternative for the image using the <code>alt</code> attribute.<p></p>
  <div class="example">
    Consider the following image which is a map of <a>Katoomba</a>,
    it has 2 interactive regions corresponding to the areas of North and South Katoomba:

    <img src="images/imagemap.png" width="209" height="249" alt="Map of Katoomba." usemap="#Map" />
<map name="Map">
<area shape="poly" coords="78,124,124,10,189,29,173,93,168,132,136,151,110,130" href="#" alt="North Katoomba">
<area shape="poly" coords="66,63,80,135,106,138,137,154,167,137,175,133,144,240,49,223,17,137,17,61" alt="South Katoomba" href="#">
</map>
    The text alternative is a brief description of the image. The <code>alt</code> attribute on each
    of the <code>area</code> elements provides text describing the content of the target page of each linked region:

  <pre highlight="html">
&lt;p&gt;View houses for sale in North Katoomba or South Katoomba:&lt;/p&gt;
  &lt;p&gt;&lt;img src="imagemap.png" width="209" <mark>alt="Map of Katoomba"</mark> height="249" usemap="#Map"&gt;

  &lt;map name="Map"&gt;
  &lt;area shape="poly" coords="78,124,124,10,189,29,173,93,168,132,136,151,110,130"
  href="north.html" <mark>alt="Houses in North Katoomba"</mark>&gt;
  &lt;area shape="poly" coords="66,63,80,135,106,138,137,154,167,137,175,133,144,240,49,223,17,137,17,61"
  <mark>alt="Houses in South Katoomba"</mark> href="south.html"&gt;
  &lt;/map&gt;
    </pre>

  </div>

<h6 id="a-group-of-images-that-form-a-single-larger-picture-with-links">A group of images that form a single larger picture with links</h6>

  <p class="note">
    Generally, <a>image maps</a> should be
  used instead of slicing an image for links.
  </p>

  Sometimes, when you create a composite picture from multiple images, you may wish to
  link one or more of the images. Provide an <code>alt</code> attribute
  for each linked image to describe the purpose of the link.

  <div class="example">
  In the following example, a composite picture is used to represent a "crocoduck"; a fictional creature which
  defies evolutionary principles by being part crocodile and part duck. You are asked to interact with the
  crocoduck, but you need to exercise caution...

  <img src="images/crocoduck1.png" alt="crocodile's angry, chomping head" /><img src="images/crocoduck2.png" alt="duck's soft, feathery body" />
  <pre highlight="html">
  &lt;h1&gt;The crocoduck&lt;/h1&gt;
  &lt;p&gt;You encounter a strange creature called a "crocoduck".
  The creature seems angry! Perhaps some friendly stroking will help to calm
  it, but be careful not to stroke any crocodile parts. This would just enrage
  the beast further.&lt;/p&gt;
  &lt;a href="?stroke=head"&gt;&lt;img src="crocoduck1.png" <strong>alt="Stroke crocodile's angry, chomping head"</strong>&gt;&lt;/a&gt;
  &lt;a href="?stroke=body"&gt;&lt;img src="crocoduck2.png" <strong>alt="Stroke duck's soft, feathery body"</strong>&gt;&lt;/a&gt;
    </pre>

  </div>

<h6 id="images-of-pictures">Images of Pictures</h6>

  Images of pictures or graphics include visual representations of objects, people, scenes, abstractions, etc.
  This <a>non-text content</a>, [[!WCAG]] can convey a significant amount of
  information visually or provide a <a>specific sensory experience</a>, [[!WCAG]] to
  a sighted person. Examples include photographs, paintings, drawings and artwork.

  An appropriate text alternative for a picture is a brief description, or <a>name</a> [[!WCAG]]. As in all text alternative authoring decisions, writing suitable text alternatives for pictures requires
  human judgment. The text value is subjective to the context where the image is used and the page author's writing style. Therefore,
  there is no single 'right' or 'correct' piece of <code>alt</code> text for any particular image. In  addition to providing a short text
  alternative that gives a brief description of the non-text content, also providing supplemental content through another means when
  appropriate may be useful.

    <div class="example">
  This first example shows an image uploaded to a photo-sharing site. The photo is of a cat, sitting in the bath. The image has a
  text alternative provided using the <code>img</code> element's <code>alt</code> attribute. It also has a caption provided by including
  the <code>img</code> element in a <code>figure</code> element and using a <code>figcaption</code> element to identify the caption text.

  <img src="images/lola.png" alt="Lola the cat sitting under an umbrella in the bath tub." width="300" height="242" />
  Lola prefers a bath to a shower.

  <pre highlight="html">
  &lt;figure&gt;
  &lt;img src="664aef.jpg" <strong>alt="Lola the cat sitting under an umbrella in the bath tub."</strong>&gt;
  &lt;figcaption&gt;Lola prefers a bath to a shower.&lt;/figcaption&gt;
  &lt;/figure&gt;
    </pre>
    </div>

    <div class="example">
  This example is of an image that defies a complete description, as the subject of the image is open to interpretation.
  The image has a text alternative in the <code>alt</code> attribute which gives users who cannot view the image a sense
  of what the image is. It also has a caption provided by including the <code>img</code> element in a <code>figure</code>
  element and using a <code>figcaption</code> element to identify the caption text.

  <img src="images/inkblot1.png" alt="An abstract, freeform, vertically symmetrical, black inkblot on a light background." width="300" height="197" />
  The first of the ten cards in the Rorschach test.

  <pre highlight="html">
&lt;figure&gt;
  &lt;img src="Rorschach1.jpg" <strong>alt="An abstract, freeform, vertically symmetrical, black inkblot on a light background."</strong>&gt;
  &lt;figcaption&gt;The first of the ten cards in the Rorschach test.&lt;/figcaption&gt;
  &lt;/figure&gt;
    </pre>
    </div>

<h6 id="webcam-images">Webcam images</h6>

  Webcam images are static images that are automatically updated periodically. Typically the images are
  from a fixed viewpoint, the images may update on the page automatically as each new image is uploaded from
  the camera or the user may be required to refresh the page to view an updated image. Examples include traffic
  and weather cameras.

  <div class="example">
  This example is fairly typical; the title and a time stamp are included in the image, automatically generated
  by the webcam software. It would be better if the text information was not included in the image, but as it is part
  of the image, include it as part of the text alternative. A caption is also provided using the <code>figure</code>
  and <code>figcaption</code> elements.  As the image is provided to give a visual indication of the current weather near a building,
  a link to a local weather forecast is provided, as with automatically generated and uploaded webcam images it may be impractical to
  provide such information as a text alternative.

  The text of the <code>alt</code> attribute includes a prose version of the timestamp, designed to make the text more
  understandable when announced by text to speech software.  The text alternative also includes a description of some aspects
  of what can be seen in the image which are unchanging, although weather conditions and time of day change.

  <img src="images/webcam1.png" alt="Sopwith house weather cam. Taken on the 21/04/10 at 11:51 and 34 seconds. In the foreground are the safety
  rails on the flat part of the roof. Nearby ther are low rize industrial buildings, beyond those are block of flats. In the distance there's a
  church steeple." width="296" height="225">

  View from the top of Sopwith house, looking towards North Kingston. This image is updated every hour.

  View the <a>latest weather details</a> for Kingston upon Thames.

  <pre highlight="html">
&lt;figure&gt;
  &lt;img src="webcam1.jpg" <strong>alt="Sopwith house weather cam. Taken on the 21/04/10 at 11:51 and 34 seconds.
  In the foreground are the safety rails on the flat part of the roof. Nearby there are low rize industrial buildings,
  beyond are blocks of flats. In the distance there's a church steeple."</strong>&gt;
  &lt;figcaption&gt;View from Sopwith house, looking towards north Kingston. This image is updated every hour.&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;p&gt;View the &lt;a href="http://news.bbc.co.uk/weather/forecast/4296?area=Kingston"&gt;latest weather details&lt;/a&gt; for Kingston upon Thames.&lt;/p&gt;
    </pre>
  </div>

<h6 id="when-a-text-alternative-is-not-available-at-the-time-of-publication">When a text alternative is not available at the time of publication</h6>

  In some cases an image is included in a published document, but the author is unable to provide an appropriate text alternative.
  In such cases the minimum requirement is to provide a caption for the image using the <code>figure</code> and <code>figcaption</code>
  elements under the following conditions:

  <ul id="figcaption-as-alt-condition">
  <li>The <code>img</code> element is in a <code>figure</code> element
  </li><li>The <code>figure</code> element contains a <code>figcaption</code> element
  </li><li>The <code>figcaption</code> element contains content other than inter-element whitespace
  </li><li>Ignoring the <code>figcaption</code> element and its descendants, the <code>figure</code>
  element has no <code>Text</code> node descendants other than inter-element whitespace, and no
  embedded content descendant other than the <code>img</code> element.
  </li></ul>

  <p class="note">
    In other words, the only content of the <code>figure</code> is an <code>img</code> element and a <code>figcaption</code>
  element, and the <code>figcaption</code> element must include (caption) content.
  </p>
  <p class="note">
    Such cases are to be kept to an absolute
    minimum. If there is even the slightest possibility of the author
    having the ability to provide real alternative text, then it would
    not be acceptable to omit the <code>alt</code>
    attribute.
  </p>

  <div class="example">
  In this example, a person uploads a photo, as part of a bulk upoad of many images, to a photo sharing site. The user has not
  provided a text alternative or a caption for the image. The site's authoring tool inserts a caption automatically using whatever useful
  information it has for the image. In this case it's the file name and date the photo was taken.
  <p class="warning">The caption text in the example below is not a suitable text alternative and is not conforming to the Web Accessibility Guidelines 2.0. [[!WCAG]]</p>
  <img src="images/clara.png" alt="no text alternative provided" width="300" height="258" />
  <strong>clara.jpg, taken on 12/11/2010.</strong>

  <pre highlight="html">
  &lt;figure&gt;
  &lt;img src="clara.jpg"&gt;
  &lt;figcaption&gt;<strong>clara.jpg, taken on 12/11/2010.</strong>&lt;/figcaption&gt;
  &lt;/figure&gt;
    </pre>
  Notice that even in this example, as much useful information
    as possible is still included in the <code>figcaption</code> element.
    </div>

    <div class="example">
  In this second example, a person uploads a photo to a photo sharing site. She has provided
  a caption for the image but not a text alternative. This may be because the site does not provide users with the ability
  to add a text alternative in the <code>alt</code> attribute.

  <img src="images/elo.png" alt="no text alternative provided" width="205" height="250" />
  <strong>Eloisa with Princess Belle</strong>

  <pre highlight="html">
  &lt;figure&gt;
  &lt;img src="elo.jpg"&gt;
  &lt;figcaption&gt;<strong>Eloisa with Princess Belle</strong>&lt;/figcaption&gt;
  &lt;/figure&gt;
    </pre>

    </div>

    <div class="example">
  Sometimes the entire point of the image is that a textual
  description is not available, and the user is to provide the
  description. For example, software that displays images and
  asks for alternative text precisely for the purpose of then
  writing a page with correct alternative text. Such a page could
  have a table of images, like this:

  <pre highlight="html">
&lt;table&gt;
  &lt;tr&gt;&lt;tr&gt; &lt;th&gt; Image &lt;th&gt; Description&lt;tr&gt;
  &lt;td&gt;
  &lt;figure&gt;
  &lt;img src="2421.png"&gt;
  &lt;figcaption&gt;Image 640 by 100, filename 'banner.gif'&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;td&gt; &lt;input name="alt2421"&gt;
  &lt;tr&gt;
  &lt;td&gt; &lt;figure&gt;
  &lt;img src="2422.png"&gt;
  &lt;figcaption&gt;Image 200 by 480, filename 'ad3.gif'&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;td&gt; &lt;input name="alt2422"&gt;
  &lt;/table&gt;
    </pre>

    </div>

  <p class="note">
    Since some users cannot use images at all (e.g. because they are blind) the
  <code>alt</code> attribute is only allowed to be omitted when no text
  alternative is available and none can be made available, as in the above examples.
  </p>

<h6 id="an-image-not-intended-for-the-user">An image not intended for the user</h6>

  Generally authors should avoid using <code>img</code> elements
  for purposes other than showing images.

  If an <code>img</code> element is being used for purposes other
  than showing an image, e.g. as part of a service to count page
  views, use an empty <code>alt</code> attribute.

  <div class="example">
  An example of an <code>img</code> element used to collect web page statistics.
  The <code>alt</code> attribute is empty as the image has no meaning.

  <pre highlight="html">
  &lt;img src="http://server3.stats.com/count.pl?NeonMeatDream.com" width="0" height="0" <strong>alt=""</strong>&gt;
    </pre>
  </div>

  <p class="note">
    It is recommended for the example use above the <code>width</code> and
  <code>height</code> attributes  be set to zero.
  </p>

  <div class="example">
  Another example use is when an image such as a <i>spacer.gif</i> is used to aid positioning of content.
  The <code>alt</code> attribute is empty as the image has no meaning.

  <pre highlight="html">
  &lt;img src="spacer.gif" width="10" height="10" <strong>alt=""</strong>&gt;
    </pre>
  </div>

  <p class="note">
    It is recommended that that CSS be used to position content instead of <code>img</code> elements.
  </p>

<h6 id="icon-images">Icon Images</h6>

  An icon is usually a simple picture representing a program, action, data file or a concept.
  Icons are intended to help users of visual browsers to recognize features at a glance.

  Use an empty <code>alt</code> attribute when an icon is supplemental to
  text conveying the same meaning.

    <div class="example">
  In this example, we have a link pointing to a site's home page, the link contains a
  house icon image and the text "home". The image has an empty <code>alt</code> text.
  Where images are used in this way, it would also be appropriate to add the image using CSS

  <img src="images/home.png" alt="A house icon next to the word 'home'." width="100" height="38" />

  <pre highlight="html">
  &lt;a href="home.html"&gt;&lt;img src="home.gif" width="15" height="15" <strong>alt=""</strong>&gt;Home&lt;/a&gt;
    </pre>

  <pre highlight="css">
  #home:before
  {
  content: url(home.png);
  }

  &lt;a href="home.html" id="home"&gt;Home&lt;/a&gt;
    </pre>
    </div>

    <div class="example">
  In this example, there is a warning message, with a warning icon. The word "Warning!" is in emphasized
  text next to the icon. As the information conveyed by the icon is redundant the <code>img</code> element is given an an empty <code>alt</code> attribute.

  <img src="images/warning.png" alt="Warning!" width="38" height="34" /> <strong>Warning!</strong> Your session is about to expire.

  <pre highlight="html">
  &lt;p&gt;&lt;img src="warning.png" width="15" height="15" <strong>alt=""</strong>&gt;
  &lt;strong&gt;Warning!&lt;/strong&gt;
  Your session is about to expire&lt;/p&gt;
    </pre>
    </div>

  When an icon conveys additional information not available in text, provide a text alternative.

    <div class="example">
  In this example, there is a warning message, with a warning icon. The icon emphasizes the
  importance of the message and identifies it as a particular type of content.
  <img src="images/warning.png" alt="Warning!" width="38" height="34" /> <strong>Your session is about to expire.</strong>

  <pre highlight="html">
  &lt;p&gt;&lt;img src="warning.png" width="15" height="15" <strong>alt="Warning!"</strong>&gt;
  Your session is about to expire&lt;/p&gt;
    </pre>

  </div>

<h6 id="logos-insignia-flags-or-emblems">Logos, insignia, flags, or emblems</h6>

  Many pages include logos, insignia, flags, or emblems, which stand for a company, organization, project,
  band, software package, country, or other entity. What can be considered as an appropriate text alternative depends upon,
  like all images, the context in which the image is being used and what function it serves in the given context.

  If a logo is the sole content of a link, provide a brief description of the link target in the <code>alt</code> attribute.

  <div class="example">
    This example illustrates the use of the HTML5 logo as the sole content of a link to the HTML specification.

    <a href="http://dev.w3.org/html51/spec/spec.html"><img src="images/HTML5_Logo.png" alt="HTML 5.1 Nightly specification" width="128" height="128" /></a>

    <pre highlight="html">
      &lt;a href="http://dev.w3.org/html51/spec/spec.html"&gt;
      &lt;img src="HTML5_Logo.png" <strong>alt="HTML 5.1 specification"</strong>&gt;&lt;/a&gt;
    </pre>
  </div>

  If a logo is being used to represent the entity, e.g. as a page heading, provide the name of the
  entity being represented by the logo as the text alternative.

  <div class="example">
    This example illustrates the use of the WebPlatform.org logo being used to represent itself.
    <img src="images/logo-with-text.png" alt="WebPlatform.org" width="110" height="100" /> and other developer resources

    <pre highlight="html">
      &lt;h2&gt;&lt;img src="images/webplatform.png" <strong>alt="WebPlatform.org"</strong>&gt; and other developer resources&lt;h2&gt;
    </pre>

    <p class="note">
      The text alternative in the example above could also include the word "logo" to describe the
      type of image content. If so, it is suggested that square brackets be used to delineate this
      information: <code>alt="[logo] WebPlatform.org"</code>.
    </p>
  </div>

  If a logo is being used next to the name of the what that it represents, then the logo is
  supplemental. Include an empty <code>alt</code> attribute as the text alternative is already
  provided.

  <div class="example">
    This example illustrates the use of a logo next to the name of the organization it represents.

    <img src="images/webplatform.png" alt="" width="72" height="68" /> WebPlatform.org

    <pre highlight="html">&lt;img src="images/webplatform1.png" alt=""&gt; WebPlatform.org</pre>
  </div>

  If the logo is used alongside text discussing the subject or entity the logo represents, then
  provide a text alternative which describes the logo.

  <div class="example">
    This example illustrates the use of a logo next to text discussing the subject the logo
    represents.

    <p style="float:left;">
      <img src="images/HTML5_Logo.png" alt="HTML5 logo: Shaped like a shield with the text 'HTML' above and the numeral '5' prominent on the face of the shield." width="128" height="128" />
    </p>
    <p style="width:30em;">
      <strong>HTML5</strong> is a language for structuring and presenting content for the World Wide
      Web, a core technology of the Internet. It is the latest revision of the HTML standard
      (originally created in 1990 and most recently standardized as HTML4 in 1997) and currently
      remains under development. Its core aims have been to improve the language with support for
      the latest multimedia while keeping it easily readable by humans and consistently understood
      by computers and devices (web browsers, parsers etc.).
    </p>

    <pre style="clear:both">
      &lt;p&gt;&lt;img src="HTML5_Logo.png" alt="HTML5 logo: Shaped like a shield with the
      text 'HTML' above and the numeral '5' prominent on the face of the shield."&gt;&lt;/p&gt;

      <i>Information about HTML5</i>
    </pre>
  </div>

<h6 id="captcha-images">CAPTCHA Images</h6>

  CAPTCHA stands for "Completely Automated Public Turing test to tell Computers and Humans Apart".
  CAPTCHA images are used for security purposes to confirm that content is being accessed by a
  person rather than a computer. This authentication is done through visual verification of an
  image. CAPTCHA typically presents an image with characters or words in it that the user is to
  re-type. The image is usually distorted and has some noise applied to it to make the characters
  difficult to read.

  To improve the accessibility of CAPTCHA provide text alternatives that identify and describe the
  purpose of the image, and provide alternative forms of the CAPTCHA using output modes for
  different types of sensory perception. For instance provide an audio alternative along with the
  visual image. Place the audio option right next to the visual one. This helps but is still
  problematic for people without sound cards, the deaf-blind, and some people with limited hearing.
  Another method is to include a form that asks a question along with the visual image. This helps
  but can be problematic for people with cognitive impairments.

  <p class="note">
    It is strongly recommended that alternatives to CAPTCHA be used, as all forms of CAPTCHA
    introduce unacceptable barriers to entry for users with disabilities. Further information is
    available in <a>Inaccessibility of CAPTCHA</a>.
  </p>

  <div class="example">
    This example shows a CAPTCHA test which uses a distorted image of text. The text alternative in
    the <code>alt</code> attribute provides instructions for a user in the case where she cannot
    access the image content.

  <img src="images/captcha.png" alt="captcha containing the words 'aides' and 'sprucest'. The letters are distorted and the color of the letters and background is partially inverted," width="270" height="60" />

  <strong>Example code:</strong>

    <pre highlight="html">
      &lt;img src="captcha.png" <strong>alt="If you cannot view this image an audio challenge is provided."</strong>&gt;
      &lt;!-- audio CAPTCHA option that allows the user to listen and type the word --&gt;
      &lt;!-- form that asks a question --&gt;
    </pre>
  </div>

<h6 id="an-image-in-a-picture-element">An image in a <code>picture</code> element</h6>

  The <code>picture</code> element and any <code>source</code> elements it contains have no semantics for users,
  only the <code>img</code> element or its text alternative is displayed to users. Provide a text alternative for an
  <code>img</code> element without regard to it being within a <code>picture</code> element. Refer to
  <a>Requirements for providing text to act as an alternative for images</a> for more information on how to provide
  useful <code>alt</code> text for images.

  <p class="note"><a>Art directed</a> images that rely on <code>picture</code> need to depict
  the same content (irrespective of size, pixel density, or any other discriminating factor). Therefore the appropriate
  text alternative for an image will always be the same irrespective of which source file ends up being chosen by the browser.</p>

  <div class="example">
    <pre highlight="html">
      &lt;h2&gt;Is it a ghost?&lt;/h2&gt;
      &lt;picture&gt;
        &lt;source <strong>media="(min-width: 32em)"</strong> srcset="large.jpg"&gt;
        &lt;img src="small.jpg" alt="Reflection of a girls face in a train window."&gt;
      &lt;/picture&gt;
    </pre>

    The large and small versions (both versions are displayed for demonstration purposes) of
    the image portray the same scene: Reflection of a girls face in a train window,
    while the small version (displayed on smaller screens) is cropped, this does not effect the subject matter
    or the appropriateness of the <code>alt</code> text.

    <img src="images/face_large.png" alt="Reflection of a girls face in a train window." width="300" height="315" />&nbsp;<img src="images/face_small.png" alt="Reflection of a girls face in a train window." width="228" height="237" />
</div>

<h6 id="an-image-in-an-email-or-private-document-intended-for-a-specific-person-who-is-known-to-be-able-to-view-images">An image in an e-mail or private document intended for a specific person who is known to be able to view images</h6>

  <i>This section does not apply to documents that are publicly accessible, or whose target
  audience is not necessarily personally known to the author, such as documents on a Web site,
  e-mails sent to public mailing lists, or software documentation.</i>

  When an image is included in a private communication (such as an HTML e-mail) aimed at a
  specific person who is known to be able to view images, the <code>alt</code>
  attribute may be omitted. However, even in such cases authors are strongly urged to include
  alternative text (as appropriate according to the kind of image involved, as described in the
  above entries), so that the e-mail is still usable should the user use a mail client that does not
  support images, or should the document be forwarded on to other users whose abilities might not
  include easily seeing images.

  <div class="impl">

<h6 id="guidance-for-markup-generators">Guidance for markup generators</h6>

  Markup generators (such as WYSIWYG authoring tools) should, wherever possible, obtain
  alternative text from their users. However, it is recognized that in many cases, this will not be
  possible.

  For images that are the sole contents of links, markup generators should examine the link
  target to determine the title of the target, or the URL of the target, and use information
  obtained in this manner as the alternative text.

  For images that have captions, markup generators should use the
  <code>figure</code> and <code>figcaption</code> elements to provide the
  image's caption.

  As a last resort, implementors should either set the <code>alt</code> attribute to the empty string, under
  the assumption that the image is a purely decorative image that
  doesn't add any information but is still specific to the surrounding
  content, or omit the <code>alt</code> attribute
  altogether, under the assumption that the image is a key part of the
  content.

  Markup generators may specify a <dfn><code>generator-unable-to-provide-required-alt</code></dfn>
  attribute on <code>img</code> elements for which they have been
  unable to obtain a text alternative and for which they have therefore
  omitted the <code>alt</code> attribute. The
  value of this attribute must be the empty string. Documents
  containing such attributes are not conforming, but conformance
  checkers will <a>silently
  ignore</a> this error.

  <p class="note">
    This is intended to avoid markup generators from
  being pressured into replacing the error of omitting the <code>alt</code> attribute with the even more
  egregious error of providing phony text alternatives, because
  state-of-the-art automated conformance checkers cannot distinguish
  phony text alternatives from correct text alternatives.
  </p>

  Markup generators should generally avoid using the image's own
  file name as the text alternative. Similarly, markup generators
  should avoid generating text alternatives from any content that will
  be equally available to presentation user agents (e.g. Web
  browsers).

  <p class="note">
    This is because once a page is generated, it will
  typically not be updated, whereas the browsers that later read the
  page can be updated by the user, therefore the browser is likely to
  have more up-to-date and finely-tuned heuristics than the markup
  generator did when generating the page.
  </p>

  </div>

  <div class="impl">

<h6 id="guidance-for-conformance-checkers">Guidance for conformance checkers</h6>

  A conformance checker must report the lack of an <code>alt</code> attribute as an error unless one of
  the conditions listed below applies:

  <ul>

    <li>The <code>img</code> element is in a <code>figure</code>
    element that satisfies <a>the
    conditions described above</a>.</li>

    <li>The <code>title</code> attribute is present
    and has a non-empty value (as <a>described
    above</a>).</li>

    <li>The conformance checker has been configured to assume that the
    document is an e-mail or document intended for a specific person
    who is known to be able to view images.</li>

    <li>The <code>img</code> element has a (non-conforming) <code>generator-unable-to-provide-required-alt</code>
    attribute whose value is the empty string. A conformance checker
    that is not reporting the lack of an <code>alt</code> attribute as an error must also not
    report the presence of the empty <code>generator-unable-to-provide-required-alt</code>
    attribute as an error. (This case does not represent a case where
    the document is conforming, only that the generator could not
    determine appropriate alternative text â validators are not
    required to show an error in this case, because such an error might
    encourage markup generators to include bogus alternative text
    purely in an attempt to silence validators. Naturally, conformance
    checkers <em>may</em> report the lack of an <code>alt</code> attribute as an error even in the
    presence of the <code>generator-unable-to-provide-required-alt</code>
    attribute; for example, there could be a user option to report
    <em>all</em> conformance errors even those that might be the more
    or less inevitable result of using a markup generator.)</li>

  </ul>

  </div>

<h4 id="the-iframe-element">The <dfn><code>iframe</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dd><a>Interactive content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Text that conforms to <a>the requirements given in the prose</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>srcdoc</code> - A document to render in the <code>iframe</code></dd>
    <dd><code>name</code> - Name of <a>nested browsing context</a></dd>
    <dd><code>sandbox</code> - Security rules for nested content</dd>
    <dd><code>seamless</code> - Whether to apply the document's styles to the nested content</dd>
    <dd><code>allowfullscreen</code> - Whether to allow the <code>iframe</code>'s
    contents to use <code>requestFullscreen()</code></dd>
    <dd><code>width</code> - Horizontal dimension</dd>
    <dd><code>height</code> - Vertical dimension</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>application</code></a>, <a>
    <code>document</code></a>, <a><code>img</code></a> or
    <a><code>presentation</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLIFrameElement : HTMLElement {
  attribute DOMString src;
  attribute DOMString srcdoc;
  attribute DOMString name;
  [PutForwards=value] readonly attribute DOMSettableTokenList sandbox;
  attribute boolean seamless;
  attribute boolean allowFullscreen;
  attribute DOMString width;
  attribute DOMString height;
  readonly attribute Document? contentDocument;
  readonly attribute WindowProxy? contentWindow;
};
</pre>
    </dd>
  </dl>

  The <code>iframe</code> element <a>represents</a> a <a>nested browsing
  context</a>.

  The <dfn><code>src</code></dfn> attribute gives the address of a page
  that the <a>nested browsing context</a> is to contain. The attribute, if present, must be a
  <a>valid non-empty URL potentially surrounded by spaces</a>. If the <code>itemprop</code> is specified on an <code>iframe</code> element, then the
  <code>src</code> attribute must also be specified.

  The <dfn><code>srcdoc</code></dfn> attribute gives the content of
  the page that the <a>nested browsing context</a> is to contain. The value of the attribute
  is the source of <dfn>an <code>iframe</code> <code>srcdoc</code>
  document</dfn>.

  The <code>srcdoc</code> attribute, if present, must have a value
  using <a>the HTML syntax</a> that consists of the following syntactic components, in the
  given order:

  <ol>

    <li>Any number of <a>comments</a> and <a>space characters</a>.</li>

    <li>Optionally, a <a>DOCTYPE</a>.

    </li><li>Any number of <a>comments</a> and <a>space characters</a>.</li>

    <li>The root element, in the form of an <code>html</code> <a>element</a>.</li>

    <li>Any number of <a>comments</a> and <a>space characters</a>.</li>

  </ol>

  For <code>iframe</code> elements in <a>XML documents</a>, the <code>srcdoc</code> attribute, if present, must have a value that matches the
  production labeled <code>document</code> in the XML specification. [[!XML]]

  <div class="example">
    Here a blog uses the <code>srcdoc</code> attribute in conjunction
    with the <code>sandbox</code> and <code>seamless</code> attributes described below to provide users of user
    agents that support this feature with an extra layer of protection from script injection in the
    blog post comments:

    <pre highlight="html">
&lt;article&gt;
  &lt;h1&gt;I got my own magazine!&lt;/h1&gt;
  &lt;p&gt;After much effort, I've finally found a publisher, and so now I
  have my own magazine! Isn't that awesome?! The first issue will come
  out in September, and we have articles about getting food, and about
  getting in boxes, it's going to be great!&lt;/p&gt;
  &lt;footer&gt;
  &lt;p&gt;Written by &lt;a href="/users/cap"&gt;cap&lt;/a&gt;, 1 hour ago.
  &lt;/footer&gt;
  &lt;article&gt;
  &lt;footer&gt; Thirteen minutes ago, &lt;a href="/users/ch"&gt;ch&lt;/a&gt; wrote: &lt;/footer&gt;
  &lt;iframe seamless sandbox srcdoc="&lt;p&gt;did you get a cover picture yet?"&gt;&lt;/iframe&gt;
  &lt;/article&gt;
  &lt;article&gt;
  &lt;footer&gt; Nine minutes ago, &lt;a href="/users/cap"&gt;cap&lt;/a&gt; wrote: &lt;/footer&gt;
  &lt;iframe seamless sandbox srcdoc="&lt;p&gt;Yeah, you can see it &lt;a href=&amp;quot;/gallery?mode=cover&amp;amp;amp;page=1&amp;quot;&gt;in my gallery&lt;/a&gt;."&gt;&lt;/iframe&gt;
  &lt;/article&gt;
  &lt;article&gt;
  &lt;footer&gt; Five minutes ago, &lt;a href="/users/ch"&gt;ch&lt;/a&gt; wrote: &lt;/footer&gt;
  &lt;iframe seamless sandbox srcdoc="&lt;p&gt;hey that's earl's table.
&lt;p&gt;you should get earl&amp;amp;amp;me on the next cover."&gt;&lt;/iframe&gt;
  &lt;/article&gt;
    </pre>

    Notice the way that quotes have to be escaped (otherwise the <code>srcdoc</code> attribute would end prematurely), and the way raw
    ampersands (e.g. in URLs or in prose) mentioned in the sandboxed content have to be
    <em>doubly</em> escaped â once so that the ampersand is preserved when originally parsing
    the <code>srcdoc</code> attribute, and once more to prevent the
    ampersand from being misinterpreted when parsing the sandboxed content.

    Furthermore, notice that since the <a>DOCTYPE</a> is optional in
    <a><code>iframe</code> <code>srcdoc</code> documents</a>, and the <code>html</code>,
    <code>head</code>, and <code>body</code> elements have <a>optional
    start and end tags</a>, and the <code>title</code> element is also optional in <a><code>iframe</code> <code>srcdoc</code>
    documents</a>, the markup in a <code>srcdoc</code> attribute can be
    relatively succint despite representing an entire document, since only the contents of the
    <code>body</code> element need appear literally in the syntax. The other elements are still
    present, but only by implication.

  </div>

  <p class="note">
    In <a>the HTML syntax</a>, authors need only remember to use U+0022
  QUOTATION MARK characters (") to wrap the attribute contents and then to escape all U+0022
  QUOTATION MARK (") and U+0026 AMPERSAND (&amp;) characters, and to specify the <code>sandbox</code> attribute, to ensure safe embedding of content.
  </p>

  <p class="note">
    Due to restrictions of <a>the XHTML syntax</a>, in XML the U+003C LESS-THAN
  SIGN character (&lt;) needs to be escaped as well. In order to prevent <a>attribute-value normalization</a>, some of XML's
  whitespace characters â specifically U+0009 CHARACTER TABULATION (tab), U+000A LINE FEED
  (LF), and U+000D CARRIAGE RETURN (CR) â also need to be escaped. [[!XML]]
  </p>

  <p class="note">
    If the <code>src</code> attribute and the <code>srcdoc</code> attribute are both specified together, the <code>srcdoc</code> attribute takes priority. This allows authors to provide
  a fallback <a>URL</a> for legacy user agents that do not support the <code>srcdoc</code> attribute.
  </p>

  <div class="impl">

  <hr />

  When an <code>iframe</code> element is <a>inserted
  into a document</a> that has a <a>browsing context</a>, the user agent must <a>create</a> a <a>nested browsing context</a>, and
  then <a>process the <code>iframe</code> attributes</a> for the "first time".

  When an <code>iframe</code> element is <a>removed
  from a document</a>, the user agent must <a>discard</a> the <a>nested browsing context</a>, if any.

  <p class="note">
    This happens without any <code>unload</code> events firing
  (the <a>nested browsing context</a> and its <code>Document</code> are <em><a>discarded</a></em>, not <em><a>unloaded</a></em>).
  </p>

  Whenever an <code>iframe</code> element with a <a>nested browsing context</a> has its
  <code>srcdoc</code> attribute set, changed, or removed, the user agent
  must <a>process the <code>iframe</code> attributes</a>.

  Similarly, whenever an <code>iframe</code> element with a <a>nested browsing context</a>
  but with no <code>srcdoc</code> attribute specified has its <code>src</code> attribute set, changed, or removed, the user agent must
  <a>process the <code>iframe</code> attributes</a>.

  When the user agent is to <dfn>process the <code>iframe</code> attributes</dfn>, it must run
  the first appropriate steps from the following list:

  <dl class="switch">

    <dt>If the <code>srcdoc</code> attribute is specified</dt>

    <dd>

    <a>Navigate</a> the element's <a>child browsing context</a> to
    a new <a>response</a> whose <a>url list</a> consists of <code>about:srcdoc</code>, <a>header list</a> consists of
    <code>Content-Type</code>/<code>text/html</code>, <a>body</a> is the value of the attribute, and <a>HTTPS state</a> is the <a>HTTPS state</a> of the <code>iframe</code> element's
    <a>node document</a>'s <code>Window</code>.

    The resulting <code>Document</code> must be considered <a>an <code>iframe</code> <code>srcdoc</code> document</a>.

    </dd>

    <dt>Otherwise, if the element has no <code>src</code> attribute
    specified, and the user agent is processing the <code>iframe</code>'s attributes for the "first
    time"</dt>

    <dd>

    <a>Queue a task</a> to run the <a>iframe load event steps</a>.

    The <a>task source</a> for this <a>task</a> is the
    <a>DOM manipulation task source</a>.

    </dd>

    <dt>Otherwise</dt>

    <dd>

    <ol>

      <li>

      If the value of the <code>src</code> attribute is missing, or its
      value is the empty string, let <var>url</var> be the string
      "<code>about:blank</code>".

      Otherwise, <a>resolve</a> the value of the <code>src</code> attribute, relative to the <code>iframe</code> element.

      If that is not successful, then let <var>url</var> be the string
      "<code>about:blank</code>". Otherwise, let <var>url</var> be the resulting
      <a>absolute URL</a>.

      </li>

      <li>

      If there exists an <a>ancestor browsing context</a> whose <a>active
      document</a>'s <a>address</a>, ignoring fragment
      identifiers, is equal to <var>url</var>, then abort these steps.

      </li>

      <li>

      <a>Navigate</a> the element's <a>child browsing context</a>
      to <var>url</var>.

      </li>

    </ol>

    </dd>

  </dl>

  Any <a>navigation</a> required of the user agent in the <a>process
  the <code>iframe</code> attributes</a> algorithm must be completed as an <a>explicit
  self-navigation override</a> and with the <code>iframe</code> element's <a>node document</a>'s
  <a>browsing context</a> as the <a>source browsing context</a>.

  Furthermore, if the <a>active document</a> of the element's <a>child browsing
  context</a> before such a <a>navigation</a> was not <a>completely
  loaded</a> at the time of the new <a>navigation</a>, then the <a>navigation</a> must be completed with <a>replacement enabled</a>.

  Similarly, if the <a>child browsing context</a>'s <a>session history</a> contained
  only one <code>Document</code> when the <a>process the <code>iframe</code> attributes</a>
  algorithm was invoked, and that was the <code>about:blank</code> <code>Document</code> created
  when the <a>child browsing context</a> was created, then any <a>navigation</a> required of the user agent in that algorithm must be completed
  with <a>replacement enabled</a>.

  When a <code>Document</code> in an <code>iframe</code> is marked as <a>completely
  loaded</a>, the user agent must run the <a>iframe load event steps</a> <a>in parallel</a>.

  <p class="note">
    A <code>load</code> event is also fired at the
  <code>iframe</code> element when it is created if no other data is loaded in it.
  </p>

  Each <code>Document</code> has an <dfn>iframe load in progress</dfn> flag and a <dfn>mute
  iframe load</dfn> flag. When a <code>Document</code> is created, these flags must be unset for
  that <code>Document</code>.

  The <dfn>iframe load event steps</dfn> are as follows:

  <ol>

    <li>Let <var>child document</var> be the <a>active document</a> of the
    <code>iframe</code> element's <a>nested browsing context</a>.</li>

    <li>If <var>child document</var> has its <a>mute iframe load</a> flag set,
    abort these steps.</li>

    <li>Set <var>child document</var>'s <a>iframe load in progress</a>
    flag.</li>

    <li><a>Fire a simple event</a> named <code>load</code> at the
    <code>iframe</code> element.</li>

    <li>Unset <var>child document</var>'s <a>iframe load in progress</a>
    flag.</li>

  </ol>

  <p class="warning">This, in conjunction with scripting, can be used to probe the URL space of the
  local network's HTTP servers. User agents may implement <a>cross-origin</a>
  access control policies that are stricter than those described above to mitigate this attack, but
  unfortunately such policies are typically not compatible with existing Web content.</p>

  When the <code>iframe</code>'s <a>browsing context</a>'s <a>active document</a> is
  not <a>ready for post-load tasks</a>, and when anything in the <code>iframe</code> is <a>delaying the load event</a> of the <code>iframe</code>'s
  <a>browsing context</a>'s <a>active document</a>, and when the <code>iframe</code>'s
  <a>browsing context</a> is in the <a>delaying <code>load</code> events
  mode</a>, the <code>iframe</code> must <a>delay the load event</a> of its document.

  <p class="note">
    If, during the handling of the <code>load</code> event, the
  <a>browsing context</a> in the <code>iframe</code> is again <a>navigated</a>, that will further <a>delay the load event</a>.
  </p>

  </div>

  <p class="note">
    If, when the element is created, the <code>srcdoc</code> attribute is not set, and the <code>src</code> attribute is either also not set or set but its value cannot be
  <a>resolved</a>, the browsing context will remain at the initial
  <code>about:blank</code> page.
  </p>

  <p class="note">
    If the user <a>navigates</a> away from this page, the
  <code>iframe</code>'s corresponding <code>WindowProxy</code> object will proxy new
  <code>Window</code> objects for new <code>Document</code> objects, but the <code>src</code> attribute will not change.
  </p>

  <hr />

  The <dfn><code>name</code></dfn> attribute, if present, must be a
  <a>valid browsing context name</a>. The given value is used to name the <a>nested
  browsing context</a>. <span class="impl">When the browsing context is created, if the attribute
  is present, the <a>browsing context name</a> must be set to the value of this attribute;
  otherwise, the <a>browsing context name</a> must be set to the empty string.</span>

  <div class="impl">

  Whenever the <code>name</code> attribute is set, the nested
  <a>browsing context</a>'s <a>name</a> must be changed to
  the new value. If the attribute is removed, the <a>browsing context name</a> must be set to
  the empty string.

  </div>

  <hr />

  The <dfn><code>sandbox</code></dfn> attribute, when specified,
  enables a set of extra restrictions on any content hosted by the <code>iframe</code>. Its value
  must be an <a>unordered set of unique space-separated tokens</a> that are <a>ASCII
  case-insensitive</a>. The allowed values are <code>allow-forms</code>, <code>allow-pointer-lock</code>, <code>allow-popups</code>, <code>allow-same-origin</code>, <code>allow-scripts</code>, and <code>allow-top-navigation</code>.

  When the attribute is set, the content is treated as being from a unique <a>origin</a>,
  forms, scripts, and various potentially annoying APIs are disabled, links are prevented from
  targeting other <a>browsing contexts</a>, and plugins are secured.
  The <code>allow-same-origin</code> keyword causes
  the content to be treated as being from its real origin instead of forcing it into a unique
  origin; the <code>allow-top-navigation</code>
  keyword allows the content to <a>navigate</a> its <a>top-level browsing context</a>;
  and the <code>allow-forms</code>, <code>allow-pointer-lock</code>, <code>allow-popups</code> and <code>allow-scripts</code> keywords re-enable forms, the
  pointer lock API, popups, and scripts respectively. [[!POINTERLOCK]]

  <p class="warning">Setting both the <code>allow-scripts</code> and <code>allow-same-origin</code> keywords together when the
  embedded page has the <a>same origin</a> as the page containing the <code>iframe</code>
  allows the embedded page to simply remove the <code>sandbox</code>
  attribute and then reload itself, effectively breaking out of the sandbox altogether.</p>

  <p class="warning">These flags only take effect when the <a>nested browsing context</a> of
  the <code>iframe</code> is <a>navigated</a>. Removing them, or removing the
  entire <code>sandbox</code> attribute, has no effect on an
  already-loaded page.</p>

  <p class="warning">Potentially hostile files should not be served from the same server as the file
  containing the <code>iframe</code> element. Sandboxing hostile content is of minimal help if an
  attacker can convince the user to just visit the hostile content directly, rather than in the
  <code>iframe</code>. To limit the damage that can be caused by hostile HTML content, it should be
  served from a separate dedicated domain. Using a different domain ensures that scripts in the
  files are unable to attack the site, even if the user is tricked into visiting those pages
  directly, without the protection of the <code>sandbox</code>
  attribute.</p>

  <div class="impl">

  When an <code>iframe</code> element with a <code>sandbox</code>
  attribute has its <a>nested browsing context</a> created (before the initial
  <code>about:blank</code> <code>Document</code> is created), and when an <code>iframe</code>
  element's <code>sandbox</code> attribute is set or changed while it
  has a <a>nested browsing context</a>, the user agent must <a>parse the sandboxing directive</a> using the attribute's value as the <var>input</var>, the <code>iframe</code> element's <a>nested browsing context</a>'s
  <a><code>iframe</code> sandboxing flag set</a> as the output, and, if the
  <code>iframe</code> has an <code>allowfullscreen</code>
  attribute, the <var>allow fullscreen flag</var>.

  When an <code>iframe</code> element's <code>sandbox</code>
  attribute is removed while it has a <a>nested browsing context</a>, the user agent must
  empty the <code>iframe</code> element's <a>nested browsing context</a>'s
  <a><code>iframe</code> sandboxing flag set</a> as the output.

  </div>

  <div class="example">
    In this example, some completely-unknown, potentially hostile, user-provided HTML content is
    embedded in a page. Because it is served from a separate domain, it is affected by all the normal
    cross-site restrictions. In addition, the embedded page has scripting disabled, plugins disabled,
    forms disabled, and it cannot navigate any frames or windows other than itself (or any frames or
    windows it itself embeds).

    <pre highlight="html">
&lt;p&gt;We're not scared of you! Here is your content, unedited:&lt;/p&gt;
&lt;iframe sandbox src="http://usercontent.example.net/getusercontent.cgi?id=12193"&gt;&lt;/iframe&gt;
    </pre>

    <p class="warning">It is important to use a separate domain so that if the attacker convinces the
    user to visit that page directly, the page doesn't run in the context of the site's origin, which
    would make the user vulnerable to any attack found in the page.</p>

  </div>

  <div class="example">
    In this example, a gadget from another site is embedded. The gadget has scripting and forms
    enabled, and the origin sandbox restrictions are lifted, allowing the gadget to communicate with
    its originating server. The sandbox is still useful, however, as it disables plugins and popups,
    thus reducing the risk of the user being exposed to malware and other annoyances.

    <pre highlight="html">
&lt;iframe sandbox="allow-same-origin allow-forms allow-scripts"
        src="http://maps.example.com/embedded.html"&gt;&lt;/iframe&gt;
    </pre>

  </div>

  <div class="example">
    Suppose a file A contained the following fragment:

    <pre highlight="html">
&lt;iframe sandbox="allow-same-origin allow-forms" src=B&gt;&lt;/iframe&gt;
    </pre>

    Suppose that file B contained an iframe also:

    <pre highlight="html">
&lt;iframe sandbox="allow-scripts" src=C&gt;&lt;/iframe&gt;
    </pre>

    Further, suppose that file C contained a link:

    <pre highlight="html">
&lt;a href=D&gt;Link&lt;/a&gt;
    </pre>

    For this example, suppose all the files were served as <code>text/html</code>.

    Page C in this scenario has all the sandboxing flags set. Scripts are disabled, because the
    <code>iframe</code> in A has scripts disabled, and this overrides the <code>allow-scripts</code> keyword set on the
    <code>iframe</code> in B. Forms are also disabled, because the inner <code>iframe</code> (in B)
    does not have the <code>allow-forms</code> keyword
    set.

    Suppose now that a script in A removes all the <code>sandbox</code> attributes in A  and B.
    This would change nothing immediately. If the user clicked the link in C, loading page D into the
    <code>iframe</code> in B, page D would now act as if the <code>iframe</code> in B had the <code>allow-same-origin</code> and <code>allow-forms</code> keywords set, because that was the
    state of the <a>nested browsing context</a> in the <code>iframe</code> in A when page B was
    loaded.

    Generally speaking, dynamically removing or changing the <code>sandbox</code> attribute is ill-advised, because it can make it quite
    hard to reason about what will be allowed and what will not.

  </div>

  <hr />

  The <dfn><code>seamless</code></dfn> attribute is a <a>boolean
  attribute</a>. When specified, it indicates that the <code>iframe</code> element's
  <a>browsing context</a> is to be rendered in a manner that makes it appear to be part of the
  containing document (seamlessly included in the parent document).

  <div class="example">
    An HTML inclusion is effected using this attribute as in the following example.
    In this case, the inclusion is of a site-wide navigation bar. Any links in the
    <code>iframe</code> will, in new user agents, be automatically opened in the
    <code>iframe</code>'s parent browsing context; for legacy user agents, the site could also
    include a <code>base</code> element with a <code>target</code>
    attribute with the value <code>_parent</code>. Similarly, in new user agents the styles
    of the parent page will be automatically applied to the contents of the frame, but to support
    legacy user agents authors might wish to include the styles explicitly.

    <pre highlight="html">
&lt;!DOCTYPE HTML&gt;
&lt;title&gt;Mirror Mirror â MovieInfoâ¢&lt;/title&gt;
&lt;header&gt;
  &lt;h1&gt;Mirror Mirror&lt;/h1&gt;
  &lt;p&gt;Part of the MovieInfoâ¢ Database&lt;/p&gt;
  &lt;nav&gt;
  <strong>&lt;iframe seamless src="nav.inc"&gt;&lt;/iframe&gt;</strong>
  &lt;/nav&gt;
&lt;/header&gt;
...
    </pre>

  </div>

  <div class="impl">

  An <code>iframe</code> element is said to be <dfn>in seamless mode</dfn> when all of the
  following conditions are met:

  <ul>

    <li>The <code>seamless</code> attribute is set on the
    <code>iframe</code> element, and

    </li><li>The <code>iframe</code> element's owner <code>Document</code>'s <a>active sandboxing flag
    set</a> does not have the <a>sandboxed seamless iframes flag</a> set, and

    </li><li>Either:

    <ul>

      <li>The <a>browsing context</a>'s <a>active document</a> has the <a>same
      origin</a> as the <code>iframe</code> element's <a>node document</a>, or

      </li><li>The <a>browsing context</a>'s <a>active document</a>'s <em><a>address</a></em> has the <a>same origin</a> as the
      <code>iframe</code> element's <a>node document</a>, or

      </li><li>The <a>browsing context</a>'s <a>active document</a> is <a>an
      <code>iframe</code> <code>srcdoc</code> document</a>.

    </li></ul>

    </li>

  </ul>

  When an <code>iframe</code> element is <a>in seamless mode</a>, the following
  requirements apply:

  <ul>

    <li>The user agent must set the <dfn>seamless browsing context flag</dfn> to true for that
    <a>browsing context</a>. This will <a>cause links to open in the
    parent browsing context</a> unless an <a>explicit self-navigation override</a> is used
    (<code>target="_self"</code>).</li>

    <li>Media queries in the context of the <code>iframe</code>'s <a>browsing context</a>
    (e.g. on <code>media</code> attributes of <code>style</code> elements in
    <code>Document</code>s in that <code>iframe</code>) must be evaluated with respect to the nearest
    <a>ancestor browsing context</a> that is not itself being <a>nested through</a> an <code>iframe</code> that is <a>in seamless
    mode</a>. [[!MEDIAQ]]</li>

    <li>In a CSS-supporting user agent: the user agent must add all the style sheets that apply to
    the <code>iframe</code> element to the cascade of the <a>active document</a> of the
    <code>iframe</code> element's <a>nested browsing context</a>, at the appropriate cascade
    levels, before any style sheets specified by the document itself.</li>

    <li>In a CSS-supporting user agent: the user agent must, for the purpose of CSS property
    inheritance only, treat the root element of the <a>active document</a> of the
    <code>iframe</code> element's <a>nested browsing context</a> as being a child of the
    <code>iframe</code> element. (Thus inherited properties on the root element of the document in
    the <code>iframe</code> will inherit the computed values of those properties on the
    <code>iframe</code> element instead of taking their initial values.)</li>

    <li>In visual media, in a CSS-supporting user agent: the user agent should set the
    <a>intrinsic width</a> of the <code>iframe</code> to the width that the element would have
    if it was a non-replaced block-level element with 'width: auto', unless that width would be zero
    (e.g. if the element is floating or absolutely positioned), in which case the user agent should
    set the <a>intrinsic width</a> of the <code>iframe</code> to the shrink-to-fit width of
    the root element (if any) of the content rendered in the <code>iframe</code>.</li>

    <li>In visual media, in a CSS-supporting user agent: the user agent should set the
    <a>intrinsic height</a> of the <code>iframe</code> to the shortest height that would make
    the content rendered in the <code>iframe</code> at its current width (as given in the previous
    bullet point) have no scrollable overflow at its bottom edge. Scrollable overflow is any overflow that
    would increase the range to which a scrollbar or other scrolling mechanism can scroll.</li>

    <li>

    In visual media, in a CSS-supporting user agent: the user agent must force the height of the
    initial containing block of the <a>active document</a> of the <a>nested browsing
    context</a> of the <code>iframe</code> to zero.

    <p class="note">
    This is intended to get around the otherwise circular dependency of percentage
    dimensions that depend on the height of the containing block, thus affecting the height of the
    document's bounding box, thus affecting the height of the viewport, thus affecting the size of
    the initial containing block.
  </p>

    </li>

    <li>In speech media, the user agent should render the <a>nested browsing context</a>
    without announcing that it is a separate document.</li>

    <li>

    User agents should, in general, act as if the <a>active document</a> of the
    <code>iframe</code>'s <a>nested browsing context</a> was part of the document that the
    <code>iframe</code> is in, if any.

    <p class="example">For example if the user agent supports listing all the links in a document,
    links in "seamlessly" nested documents would be included in that list without being
    significantly distinguished from links in the document itself.</p>

    </li>

    <li>The <a>nested browsing context</a>'s <code>Window</code> object's
    <a>cross-boundary event parent</a> is the <a>browsing context container</a>. [[!DOM]]</li>

  </ul>

  If the attribute is not specified, or if the <a>origin</a> conditions listed above are
  not met, then the user agent should render the <a>nested browsing context</a> in a manner
  that is clearly distinguishable as a separate <a>browsing context</a>, and the
  <a>seamless browsing context flag</a> must be set to false for that <a>browsing
  context</a>.

  <p class="warning">It is important that user agents recheck the above conditions whenever the
  <a>active document</a> of the <a>nested browsing context</a> of the
  <code>iframe</code> changes, such that the <a>seamless browsing context flag</a> gets unset
  if the <a>nested browsing context</a> is <a>navigated</a> to another
  origin.</p>

  </div>

  <p class="note">
    The attribute can be set or removed dynamically, with the rendering updating in
  tandem.
  </p>

  <p class="note">
    The <code>contenteditable</code> attribute does not
  propagate into <code>seamless</code> <code>iframe</code>s.
  </p>

  <hr />

  The <dfn><code>allowfullscreen</code></dfn> attribute is a
  <a>boolean attribute</a>. When specified, it indicates that <code>Document</code> objects in
  the <code>iframe</code> element's <a>browsing context</a> are to be allowed to use <code>requestFullscreen()</code> (if it's not blocked for other
  reasons, e.g. there is another ancestor <code>iframe</code> without this attribute set).

  <div class="example">
    Here, an <code>iframe</code> is used to embed a player from a video site. The <code>allowfullscreen</code> attribute is needed to enable the
    player to show its video full-screen.

    <pre highlight="html">
&lt;article&gt;
  &lt;header&gt;
  &lt;p&gt;&lt;img src="/usericons/1627591962735"&gt; &lt;b&gt;Fred Flintstone&lt;/b&gt;&lt;/p&gt;
  &lt;p&gt;&lt;a href="/posts/3095182851" rel=bookmark&gt;12:44&lt;/a&gt; â &lt;a href="#acl-3095182851"&gt;Private Post&lt;/a&gt;&lt;/p&gt;
  &lt;/header&gt;
  &lt;main&gt;
  &lt;p&gt;Check out my new ride!&lt;/p&gt;
  <strong>&lt;iframe src="https://video.example.com/embed?id=92469812" allowfullscreen&gt;&lt;/iframe&gt;</strong>
  &lt;/main&gt;
&lt;/article&gt;
    </pre>

  </div>

  <hr />

  The <code>iframe</code> element supports <a>dimension attributes</a> for cases where the
  embedded content has specific dimensions (e.g. ad units have well-defined dimensions).

  An <code>iframe</code> element never has <a>fallback content</a>, as it will always
  <a>create</a> a nested <a>browsing context</a>, regardless of whether the specified initial
  contents are successfully used.

  <hr />

  Descendants of <code>iframe</code> elements represent nothing. (In legacy user agents that do
  not support <code>iframe</code> elements, the contents would be parsed as markup that could act as
  fallback content.)

  When used in <a>HTML documents</a>, the allowed content model
  of <code>iframe</code> elements is text, except that invoking the <a>HTML fragment parsing
  algorithm</a> with the <code>iframe</code> element as the <var>context</var> element and the text contents as the <var>input</var> must result in a list of nodes that are all <a>phrasing content</a>,
  with no <a>parse errors</a> having occurred, with no <code>script</code>
  elements being anywhere in the list or as descendants of elements in the list, and with all the
  elements in the list (including their descendants) being themselves conforming.

  The <code>iframe</code> element must be empty in <a>XML documents</a>.

  <p class="note">
    The <a>HTML parser</a> treats markup inside <code>iframe</code> elements as
  text.
  </p>

  <div class="impl">

  <hr />

  The IDL attributes <dfn><code>src</code></dfn>, <dfn><code>srcdoc</code></dfn>, <dfn><code>name</code></dfn>, <dfn><code>sandbox</code></dfn>, and <dfn><code>seamless</code></dfn> must <a>reflect</a> the respective
  content attributes of the same name.

  The <dfn><code>allowFullscreen</code></dfn> IDL attribute
  must <a>reflect</a> the <code>allowfullscreen</code>
  content attribute.

  The <dfn><code>contentDocument</code></dfn> IDL attribute
  must return the <code>Document</code> object of the <a>active document</a> of the
  <code>iframe</code> element's <a>nested browsing context</a>, if any and if its
  <a>effective script origin</a> is the <a>same origin</a> as the <a>effective script
  origin</a> specified by the <a>incumbent settings object</a>, or null otherwise.

  The <dfn><code>contentWindow</code></dfn> IDL attribute must
  return the <code>WindowProxy</code> object of the <code>iframe</code> element's <a>nested
  browsing context</a>, if any, or null otherwise.

  </div>

  <div class="example">
    Here is an example of a page using an <code>iframe</code> to include advertising from an
    advertising broker:

    <pre highlight="html">
&lt;iframe src="http://ads.example.com/?customerid=923513721&amp;amp;format=banner"
        width="468" height="60"&gt;&lt;/iframe&gt;
    </pre>

  </div>

<h4 id="the-embed-element">The <dfn><code>embed</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dd><a>Interactive content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>type</code> - Type of embedded resource</dd>
    <dd><code>width</code> - Horizontal dimension</dd>
    <dd><code>height</code>- Vertical dimension</dd>
    <dd>Any other attribute that has no namespace (see prose).</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>application</code></a>, <a>
    <code>document</code></a> or <a><code>img</code></a> or
    <a><code>presentation</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLEmbedElement : HTMLElement {
  attribute DOMString src;
  attribute DOMString type;
  attribute DOMString width;
  attribute DOMString height;
  legacycaller any (any... arguments);
};
</pre>
    <div class="impl">
    Depending on the type of content instantiated by the
    <code>embed</code> element, the node may also support other
    interfaces.
    </div>
    </dd>
  </dl>

  The <code>embed</code> element provides an integration point for an external (typically
  non-HTML) application or interactive content.

  The <dfn><code>src</code></dfn> attribute gives the address of the
  resource being embedded. The attribute, if present, must contain a <a>valid non-empty URL
  potentially surrounded by spaces</a>.

  If the <code>itemprop</code> attribute is specified on an
  <code>embed</code> element, then the <code>src</code> attribute must also
  be specified.

  The <dfn><code>type</code></dfn> attribute, if present, gives the
  <a>MIME type</a> by which the plugin to instantiate is selected. The value must be a
  <a>valid MIME type</a>. If both the <code>type</code> attribute and
  the <code>src</code> attribute are present, then the <code>type</code> attribute must specify the same type as the <a>explicit Content-Type metadata</a> of the resource given by the <code>src</code> attribute.

  <div class="impl">

  While any of the following conditions are occurring, any <a>plugin</a> instantiated for
  the element must be removed, and the <code>embed</code> element <a>represents</a>
  nothing:

  <ul class="brief">

    <li>The element has neither a <code>src</code> attribute nor a <code>type</code> attribute.</li>

    <li>The element has a <a>media element</a> ancestor.</li>

    <li>The element has an ancestor <code>object</code> element that is <em>not</em> showing its
    <a>fallback content</a>.</li>

  </ul>

  An <code>embed</code> element is said to be <dfn>potentially
  active</dfn> when the following conditions are all met simultaneously:

  <ul class="brief">

    <li>The element is <a>in a <code>Document</code></a> or was <a>in a <code>Document</code></a> the last time the <a>event loop</a>
    reached <a>step 1</a>.</li>

    <li>The element's <a>node document</a> is <a>fully active</a>.</li>

    <li>The element has either a <code>src</code> attribute set or a <code>type</code> attribute set (or both).</li>

    <li>The element's <code>src</code> attribute is either absent or its value
    is not the empty string.</li>

    <li>The element is not a descendant of a <a>media element</a>.</li>

    <li>The element is not a descendant of an <code>object</code> element that is not showing its
    <a>fallback content</a>.</li>

    <li>The element is <a>being rendered</a>, or was <a>being rendered</a> the last time
    the <a>event loop</a> reached <a>step 1</a>.</li>

  </ul>

  Whenever an <code>embed</code> element that was not <a>potentially active</a> becomes <a>potentially active</a>, and whenever a <a>potentially active</a> <code>embed</code> element that is
  remaining <a>potentially active</a> and has its <code>src</code> attribute set, changed, or removed or its <code>type</code> attribute set, changed, or removed, the user agent must
  <a>queue a task</a> using the <dfn>embed task source</dfn> to run <a>the
  <code>embed</code> element setup steps</a>.

  <dfn>The <code>embed</code> element setup steps</dfn> are as follows:

  <ol>

    <li>If another <a>task</a> has since been queued to run <a>the
    <code>embed</code> element setup steps</a> for this element, then abort these steps.</li>

    <li>

    <dl class="switch">

      <dt>If the element has a <code>src</code> attribute set</dt>

      <dd>

      The user agent must <a>resolve</a> the value of the element's
      <code>src</code> attribute, relative to the element. If that is
      successful, the user agent should run these steps:

      <ol>

        <li>Let <var>request</var> be a new <a>request</a> whose
        <a>url</a> is the resulting <a>absolute URL</a>,
        <a>client</a> is the element's <a>node
        document</a>'s <code>Window</code> object's <a>environment settings object</a>,
        <a>destination</a> is "<code>unknown</code>", <a>omit-<code>Origin</code>-header flag</a> is set if the
        element doesn't have a <a>browsing context scope origin</a>, <a>credentials mode</a> is "<code>include</code>", and whose <a>use-URL-credentials flag</a> is set.</li>

        <li><a>Fetch</a> <var>request</var>.</li>
      </ol>

      The <a>task</a> that is <a>queued</a> by the <a>networking task source</a> once the
      resource has been fetched must run the following steps:

      <ol>

        <li>If another <a>task</a> has since been queued to run
        <a>the <code>embed</code> element setup steps</a> for this element, then abort these
        steps.</li>

        <li>

        Determine the <dfn>type of the content</dfn> being embedded, as
        follows (stopping at the first substep that determines the type):

        <ol>

          <li>If the element has a <code>type</code> attribute, and that
attribute's value is a type that a <a>plugin</a> supports, then the value of the
          <code>type</code> attribute is the <a>content's type</a>.</li>

          <li>

          Otherwise, if applying the <a>URL parser</a> algorithm to the <a>URL</a> of
          the specified resource (after any redirects) results in a <a>parsed URL</a> whose
          <a>path</a> component matches a pattern that a
          <a>plugin</a> supports, then the <a>content's
          type</a> is the type that that plugin can handle.

          <p class="example">For example, a plugin might say that it can handle resources with <a>path</a> components that end with the four character string
          "<code>.swf</code>".</p>

          </li>

          <li>Otherwise, if the specified resource has <a>explicit
          Content-Type metadata</a>, then that is the <a>content's
          type</a>.</li>

          <li>Otherwise, the content has no <a>type</a> and there
          can be no appropriate <a>plugin</a> for it.</li>

        </ol>

        </li>

        <li>

        If the previous step determined that the <a>content's
        type</a> is <code>image/svg+xml</code>, then run the following substeps:

        <ol>

          <li>If the <code>embed</code> element is not associated with a <a>nested browsing
          context</a>, associate the element with a newly created <a>nested browsing
          context</a>, and, if the element has a <code>name</code>
attribute, set the <a>browsing context name</a> of the element's <a>nested
          browsing context</a> to the value of this attribute.

          </li><li><a>Navigate</a> the <a>nested browsing context</a> to
          the fetched resource, with <a>replacement enabled</a>, and with the
          <code>embed</code> element's <a>node document</a>'s <a>browsing context</a> as the <a>source
          browsing context</a>. (The <code>src</code> attribute of the
          <code>embed</code> element doesn't get updated if the browsing context gets further
          navigated to other locations.)</li>

          <li>The <code>embed</code> element now <a>represents</a> its associated
          <a>nested browsing context</a>.</li>

        </ol>

        </li>

        <li>

        Otherwise, find and instantiate an appropriate <a>plugin</a> based on the <a>content's type</a>, and hand that <a>plugin</a> the
        content of the resource, replacing any previously instantiated plugin for the element. The
        <code>embed</code> element now represents this <a>plugin</a> instance.

        </li>

        <li>Once the resource or plugin has completely loaded, <a>queue a task</a> to
        <a>fire a simple event</a> named <code>load</code> at the
        element.</li>

      </ol>

      Whether the resource is fetched successfully or not (e.g. whether the response status was
      an <a>ok status</a>) must be ignored when determining the <a>content's type</a> and when handing the resource to the
      plugin.

      <p class="note">
    This allows servers to return data for plugins even with error responses (e.g.
      HTTP 500 Internal Server Error codes can still contain plugin data).
  </p>

      Fetching the resource must <a>delay the load event</a> of the element's <a>node document</a>.

      </dd>

      <dt>If the element has no <code>src</code> attribute set</dt>

      <dd>

      The user agent should find and instantiate an appropriate <a>plugin</a> based on the
      value of the <code>type</code> attribute. The <code>embed</code>
      element now represents this <a>plugin</a> instance.

      Once the plugin is completely loaded, <a>queue a task</a> to <a>fire a simple
      event</a> named <code>load</code> at the element.

      </dd>

    </dl>

    </li>

  </ol>

  The <code>embed</code> element has no <a>fallback content</a>. If the user agent can't
  find a suitable plugin when attempting to find and instantiate one for the algorithm above, then
  the user agent must use a default plugin. This default could be as simple as saying "Unsupported
  Format".

  Whenever an <code>embed</code> element that was <a>potentially
  active</a> stops being <a>potentially active</a>, any
  <a>plugin</a> that had been instantiated for that element must be unloaded.

  When a <a>plugin</a> is to be instantiated but it cannot be <a>secured</a> and the <a>sandboxed plugins browsing context
  flag</a> is set on the <code>embed</code> element's <a>node document</a>'s <a>active
  sandboxing flag set</a>, then the user agent must not instantiate the <a>plugin</a>, and
  must instead render the <code>embed</code> element in a manner that conveys that the
  <a>plugin</a> was disabled. The user agent may offer the user the option to override the
  sandbox and instantiate the <a>plugin</a> anyway; if the user invokes such an option, the
  user agent must act as if the conditions above did not apply for the purposes of this element.

  <p class="warning">Plugins that cannot be <a>secured</a> are
  disabled in sandboxed browsing contexts because they might not honor the restrictions imposed by
  the sandbox (e.g. they might allow scripting even when scripting in the sandbox is disabled). User
  agents should convey the danger of overriding the sandbox to the user if an option to do so is
  provided.</p>

  When an <code>embed</code> element represents a <a>nested browsing context</a>: if the
  <code>embed</code> element's <a>nested browsing context</a>'s <a>active document</a>
  is not <a>ready for post-load tasks</a>, and when anything is <a>delaying the load event</a> of the <code>embed</code> element's <a>browsing
  context</a>'s <a>active document</a>, and when the <code>embed</code> element's
  <a>browsing context</a> is in the <a>delaying <code>load</code>
  events mode</a>, the <code>embed</code> must <a>delay the load event</a> of its
  document.

  The <a>task source</a> for the <a>tasks</a> mentioned in this
  section is the <a>DOM manipulation task source</a>.

  </div>

  Any namespace-less attribute other than <code>name</code>, <code>align</code>, <code>hspace</code>, and <code>vspace</code>  may be
  specified on the <code>embed</code> element, so long as its name is <a>XML-compatible</a>
  and contains no <a>uppercase ASCII letters</a>. These attributes are then passed as
  parameters to the <a>plugin</a>.

  <p class="note">
    All attributes in <a>HTML documents</a> get lowercased automatically, so the
  restriction on uppercase letters doesn't affect such documents.
  </p>

  <p class="note">
    The four exceptions are to exclude legacy attributes that have side-effects beyond
  just sending parameters to the <a>plugin</a>.
  </p>

  <div class="impl">

  The user agent should pass the names and values of all the attributes of the <code>embed</code>
  element that have no namespace to the <a>plugin</a> used, when one is instantiated.

  The <code>HTMLEmbedElement</code> object representing the element must expose the scriptable
  interface of the <a>plugin</a> instantiated for the <code>embed</code> element, if any. At a
  minimum, this interface must implement the <dfn>legacy caller
  operation</dfn>. (It is suggested that the default behavior of this legacy caller operation, e.g.
  the behavior of the default plugin's legacy caller operation, be to throw a
  <code>NotSupportedError</code> exception.)

  </div>

  The <code>embed</code> element supports <a>dimension attributes</a>.

  <div class="impl">

  The IDL attributes <dfn><code>src</code></dfn> and <dfn><code>type</code></dfn> each must <a>reflect</a> the respective
  content attributes of the same name.

  </div>

  <div class="example">
    Here's a way to embed a resource that requires a proprietary plugin, like Flash:

    <pre highlight="html">
&lt;embed src="catgame.swf"&gt;
    </pre>

    If the user does not have the plugin (for example if the plugin vendor doesn't support the
    user's platform), then the user will be unable to use the resource.

    To pass the plugin a parameter "quality" with the value "high", an attribute can be
    specified:

    <pre highlight="html">
&lt;embed src="catgame.swf" quality="high"&gt;
    </pre>

    This would be equivalent to the following, when using an <code>object</code> element
    instead:

    <pre highlight="html">
&lt;object data="catgame.swf"&gt;
  &lt;param name="quality" value="high"&gt;
&lt;/object&gt;
    </pre>

  </div>

<h4 id="the-object-element">The <dfn><code>object</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dd>If the element has a <code>usemap</code> attribute: <a>Interactive content</a>.</dd>
    <dd><a>Listed</a>, <a>submittable</a>, and <a>reassociateable</a> <a>form-associated element</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Zero or more <code>param</code> elements, then, <a>transparent</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>data</code> - Address of the resource</dd>
    <dd><code>type</code> - Type of embedded resource</dd>
    <dd><code>typemustmatch</code> - Whether the <code>type</code>
    attribute and the <a>Content-Type</a> value need to match for the resource to be used</dd>
    <dd><code>name</code> - Name of <a>nested browsing context</a></dd>
    <dd><code>usemap</code> - Name of <a>image map</a> to use </dd>
    <dd><code>form</code> - Associates the control with a <code>form</code> element</dd>
    <dd><code>width</code> - Horizontal dimension</dd>
    <dd><code>height</code> - Vertical dimension</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>application</code></a>, <a>
    <code>document</code></a> or <a><code>img</code></a> or
    <a><code>presentation</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLObjectElement : HTMLElement {
  attribute DOMString data;
  attribute DOMString type;
  attribute boolean typeMustMatch;
  attribute DOMString name;
  attribute DOMString useMap;
  readonly attribute HTMLFormElement? form;
  attribute DOMString width;
  attribute DOMString height;
  readonly attribute Document? contentDocument;
  readonly attribute WindowProxy? contentWindow;

  readonly attribute boolean willValidate;
  readonly attribute ValidityState validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  boolean reportValidity();
  void setCustomValidity(DOMString error);

  legacycaller any (any... arguments);
};
</pre>
    <div class="impl">
    Depending on the type of content instantiated by the
    <code>object</code> element, the node also supports other
    interfaces.
    </div>
    </dd>
  </dl>

  The <code>object</code> element can represent an external resource, which, depending on the
  type of the resource, will either be treated as an image, as a <a>nested browsing
  context</a>, or as an external resource to be processed by a <a>plugin</a>.

  The <dfn><code>data</code></dfn> attribute, if present, specifies the
  address of the resource. If present, the attribute must be a <a>valid non-empty URL potentially
  surrounded by spaces</a>.

  <p class="warning">Authors who reference resources from other <a>origins</a>
  that they do not trust are urged to use the <code>typemustmatch</code> attribute defined below. Without that
  attribute, it is possible in certain cases for an attacker on the remote host to use the plugin
  mechanism to run arbitrary scripts, even if the author has used features such as the Flash
  "allowScriptAccess" parameter.</p>

  The <dfn><code>type</code></dfn> attribute, if present, specifies the
  type of the resource. If present, the attribute must be a <a>valid MIME type</a>.

  At least one of either the <code>data</code> attribute or the <code>type</code> attribute must be present.

  If the <code>itemprop</code> attribute is specified on an <code>object</code>
  element, then the <code>data</code> attribute must also be specified.

  The <dfn><code>typemustmatch</code></dfn> attribute is a
  <a>boolean attribute</a> whose presence indicates that the resource specified by the <code>data</code> attribute is only to be used if the value of the <code>type</code> attribute and the <a>Content-Type</a> of the
  aforementioned resource match.

  The <code>typemustmatch</code> attribute must not be
  specified unless both the <code>data</code> attribute and the <code>type</code> attribute are present.

  The <dfn><code>name</code></dfn> attribute, if present, must be a
  <a>valid browsing context name</a>. The given value is used to name the <a>nested
  browsing context</a>, if applicable.

  <div class="impl">

  Whenever one of the following conditions occur:

  <ul>

    <li>the element is created,

    </li><li>the element is popped off the <a>stack of open elements</a> of an <a>HTML
    parser</a> or <a>XML parser</a>,

    </li><li>the element is not on the <a>stack of open elements</a> of an <a>HTML parser</a>
    or <a>XML parser</a>, and it is either <a>inserted into a document</a> or <a>removed from a document</a>,

    </li><li>the element's <a>node document</a> changes whether it is <a>fully active</a>,

    </li><li>one of the element's ancestor <code>object</code> elements changes to or from showing its
    <a>fallback content</a>,

    </li><li>the element's <code>classid</code> attribute is set, changed, or
    removed,

    </li><li>the element's <code>classid</code> attribute is not present, and
    its <code>data</code> attribute is set, changed, or removed,

    </li><li>neither the element's <code>classid</code> attribute nor its
    <code>data</code> attribute are present, and its <code>type</code> attribute is set, changed, or removed,

    </li><li>the element changes from <a>being rendered</a> to not being rendered, or vice versa,

  </li></ul>

  ...the user agent must <a>queue a task</a> to run the following steps to (re)determine
  what the <code>object</code> element represents. This <a>task</a>
  being <a>queued</a> or actively running must <a>delay the load
  event</a> of the element's <a>node document</a>.

  <ol>

    <li>

    If the user has indicated a preference that this <code>object</code> element's <a>fallback
    content</a> be shown instead of the element's usual behavior, then jump to the step below
    labeled <i>fallback</i>.

    <p class="note">
    For example, a user could ask for the element's <a>fallback content</a> to
    be shown because that content uses a format that the user finds more accessible.
  </p>

    </li>

    <li>

    If the element has an ancestor <a>media element</a>, or has an ancestor
    <code>object</code> element that is <em>not</em> showing its <a>fallback content</a>, or
    if the element is not <a>in a <code>Document</code></a> with a
    <a>browsing context</a>, or if the element's <a>node document</a> is not <a>fully
    active</a>, or if the element is still in the <a>stack of open elements</a> of an
    <a>HTML parser</a> or <a>XML parser</a>, or if the element is not <a>being
    rendered</a>, then jump to the step below labeled <i>fallback</i>.

    </li>

    <li>

    If the <code>classid</code> attribute is present, and has a
    value that isn't the empty string, then: if the user agent can find a <a>plugin</a>
    suitable according to the value of the <code>classid</code>
    attribute, and either <a>plugins aren't being sandboxed</a> or that
    <a>plugin</a> can be <a>secured</a>, then that
    <a>plugin</a> <a>should be used</a>, and the value of the <code>data</code> attribute, if any, should be passed to the
    <a>plugin</a>. If no suitable <a>plugin</a> can be found, or if the
    <a>plugin</a> reports an error, jump to the step below labeled <i>fallback</i>.

    </li>

    <li>If the <code>data</code> attribute is present and its value is
    not the empty string, then:

    <ol>

      <li>If the <code>type</code> attribute is present and its value is
      not a type that the user agent supports, and is not a type that the user agent can find a
      <a>plugin</a> for, then the user agent may jump to the step below labeled <i>fallback</i>
      without fetching the content to examine its real type.</li>

      <li><a>Resolve</a> the <a>URL</a> specified by the <code>data</code> attribute, relative to the element.</li>

      <li>If that failed, <a>fire a simple event</a> named <code>error</code> at the element, then jump to the step below labeled
      <i>fallback</i>.</li>

      <li>Let <var>request</var> be a new <a>request</a> whose
      <a>url</a> is the resulting <a>absolute URL</a>,
      <a>client</a> is the element's <a>node
      document</a>'s <code>Window</code> object's <a>environment settings object</a>,
      <a>destination</a> is "<code>unknown</code>", <a>omit-<code>Origin</code>-header flag</a> is set if the
      element doesn't have a <a>browsing context scope origin</a>, <a>credentials mode</a> is "<code>include</code>", and whose <a>use-URL-credentials flag</a> is set.</li>

      <li>

      <a>Fetch</a> <var>request</var>.

      Fetching the resource must <a>delay the load event</a> of the element's <a>node
      document</a> until the <a>task</a> that is <a>queued</a> by the <a>networking task source</a> once the resource has been
      fetched (defined next) has been run.

      For the purposes of the <a>application cache</a> networking model, this fetch
      operation is not for a <a>child browsing context</a> (though it might end up being used
      for one after all, as defined below).

      </li>

      <li>If the resource is not yet available (e.g. because the resource was not available in the
      cache, so that loading the resource required making a request over the network), then jump to
      the step below labeled <i>fallback</i>. The <a>task</a> that is
      <a>queued</a> by the <a>networking task source</a> once the
      resource is available must restart this algorithm from this step. Resources can load
      incrementally; user agents may opt to consider a resource "available" whenever enough data has
      been obtained to begin processing the resource.</li>

      <li>If the load failed (e.g. there was an HTTP 404 error, there was a DNS error), <a>fire
      a simple event</a> named <code>error</code> at the element, then jump to
      the step below labeled <i>fallback</i>.</li>

      <li>

      Determine the <var>resource type</var>, as follows:

      <ol>

        <li>

        Let the <var>resource type</var> be unknown.

        </li>

        <li>

        If the <code>object</code> element has a <code>type</code>
        attribute and a <code>typemustmatch</code> attribute, and
        the resource has <a>associated Content-Type metadata</a>, and the
        type specified in <a>the resource's Content-Type metadata</a> is
        an <a>ASCII case-insensitive</a> match for the value of the element's <code>type</code> attribute, then let <var>resource type</var>
        be that type and jump to the step below labeled <i>handler</i>.

        </li>

        <li>

        If the <code>object</code> element has a <code>typemustmatch</code> attribute, jump to the step below
        labeled <i>handler</i>.

        </li>

        <li>

        If the user agent is configured to strictly obey Content-Type headers for this resource,
        and the resource has <a>associated Content-Type metadata</a>,
        then let the <var>resource type</var> be the type specified in <a>the resource's Content-Type metadata</a>, and jump to the step below
        labeled <i>handler</i>.

        <p class="warning">This can introduce a vulnerability, wherein a site is trying to embed a
        resource that uses a particular plugin, but the remote site overrides that and instead
        furnishes the user agent with a resource that triggers a different plugin with different
        security characteristics. </p>

        </li>

        <li>

        If there is a <code>type</code> attribute present on the
        <code>object</code> element, and that attribute's value is not a type that the user agent
        supports, but it <em>is</em> a type that a <a>plugin</a> supports, then let the <var>resource type</var> be the type specified in that <code>type</code> attribute, and jump to the step below labeled
        <i>handler</i>.

        </li>

        <li>

        Run the appropriate set of steps from the following
        list:

        <dl class="switch">

          <dt>If the resource has <a>associated Content-Type
          metadata</a></dt>

          <dd>

          <ol>

            <li>

            Let <var>binary</var> be false.

            </li>

            <li>

            If the type specified in <a>the resource's Content-Type
            metadata</a> is "<code>text/plain</code>", and the result of applying the <a>rules for distinguishing if a resource is
            text or binary</a> to the resource is that the resource is not
            <code>text/plain</code>, then set <var>binary</var> to true.

            </li>

            <li>

            If the type specified in <a>the resource's Content-Type
            metadata</a> is "<code>application/octet-stream</code>", then set <var>binary</var> to true.

            </li>

            <li>

            If <var>binary</var> is false, then let the <var>resource
            type</var> be the type specified in <a>the resource's
            Content-Type metadata</a>, and jump to the step below labeled <i>handler</i>.

            </li>

            <li>

            If there is a <code>type</code> attribute present on the
            <code>object</code> element, and its value is not <code>application/octet-stream</code>,
            then run the following steps:

            <ol>

              <li>

              If the attribute's value is a type that a <a>plugin</a> supports, or the
      attribute's value is a type that starts with "<code>image/</code>" that is
              not also an <a>XML MIME type</a>, then let the <var>resource type</var> be the
              type specified in that <code>type</code> attribute.

              </li>

              <li>

              Jump to the step below labeled <i>handler</i>.

              </li>

            </ol>

            </li>

          </ol>

          </dd>

          <dt>Otherwise, if the resource does not have <a>associated
          Content-Type metadata</a></dt>

          <dd>

          <ol>

            <li>

            If there is a <code>type</code> attribute present on the
            <code>object</code> element, then let the <var>tentative type</var> be the type
            specified in that <code>type</code> attribute.

            Otherwise, let <var>tentative type</var> be the <a>sniffed type of the resource</a>.

            </li>

            <li>

            If <var>tentative type</var> is <em>not</em>
            <code>application/octet-stream</code>, then let <var>resource type</var> be
            <var>tentative type</var> and jump to the step below labeled
            <i>handler</i>.

            </li>

          </ol>

          </dd>

        </dl>

        </li>

        <li>

        If applying the <a>URL parser</a> algorithm to the <a>URL</a> of the
        specified resource (after any redirects) results in a <a>parsed URL</a> whose <a>path</a> component matches a pattern that a <a>plugin</a>
        supports, then let <var>resource type</var> be the type that that plugin can
        handle.

        <p class="example">For example, a plugin might say that it can handle resources with <a>path</a> components that end with the four character string
        "<code>.swf</code>".</p>

        </li>

      </ol>

      <p class="note">
    It is possible for this step to finish, or for one of the substeps above to
      jump straight to the next step, with <var>resource type</var> still being unknown. In
      both cases, the next step will trigger fallback.
  </p>

      </li>

      <li><i>Handler</i>: Handle the content as given by the first of the following cases that
      matches:

      <dl class="switch">

        <dt>If the <var>resource type</var> is not a type that the user agent supports, but
        it <em>is</em> a type that a <a>plugin</a> supports</dt>

        <dd>

        If <a>plugins are being sandboxed</a> and the plugin that
        supports <var>resource type</var> cannot be <a>secured</a>, jump to the step below labeled <i>fallback</i>.

        Otherwise, the user agent should <a>use the plugin that supports
        <var>resource type</var></a> and pass the content of the resource to that
        <a>plugin</a>. If the <a>plugin</a> reports an error, then jump to the step
        below labeled <i>fallback</i>.

        </dd>

        <dt>If the <var>resource type</var> is an <a>XML MIME type</a>, or  if the <var>resource type</var>
        does not start with "<code>image/</code>"</dt>

        <dd>

        The <code>object</code> element must be associated with a newly created <a>nested
        browsing context</a>, if it does not already have one.

        If the <a>URL</a> of the given resource is not <code>about:blank</code>, the
        element's <a>nested browsing context</a> must then be <a>navigated</a> to that resource, with
        <a>replacement enabled</a>, and with the <code>object</code> element's <a>node document</a>'s
        <a>browsing context</a> as the <a>source browsing context</a>. (The <code>data</code> attribute of the <code>object</code> element doesn't
        get updated if the browsing context gets further navigated to other locations.)

        If the <a>URL</a> of the given resource <em>is</em> <code>about:blank</code>, then,
        instead, the user agent must <a>queue a task</a> to <a>fire a simple event</a>
        named <code>load</code> at the <code>object</code> element. <span class="note">No <code>load</code> event is fired at the
        <code>about:blank</code> document itself.</span>

        The <code>object</code> element <a>represents</a> the <a>nested browsing
        context</a>.

        If the <code>name</code> attribute is present, the
        <a>browsing context name</a> must be set to the value of this attribute; otherwise,
        the <a>browsing context name</a> must be set to the empty string.

        <p class="note">
    In certain situations, e.g., if the resource was fetched from an
        <a>application cache</a> but it is an HTML file with a <code>manifest</code> attribute that points to a different <a>application cache manifest</a>, the <a>navigation</a> of the <a>browsing context</a> will be restarted
        so as to load the resource afresh from the network or a different <a>application
        cache</a>. Even if the resource is then found to have a different type, it is still used
        as part of a <a>nested browsing context</a>: only the <a>navigate</a> algorithm
        is restarted, not this <code>object</code> algorithm.
  </p>

        </dd>

        <dt>If the <var>resource type</var> starts with "<code>image/</code>", and support
        for images has not been disabled</dt>

        <dd>

        Apply the <a>image sniffing</a> rules to
        determine the type of the image.

        The <code>object</code> element <a>represents</a> the specified image. The image is
        not a <a>nested browsing context</a>.

        If the image cannot be rendered, e.g. because it is malformed or in an unsupported
        format, jump to the step below labeled <i>fallback</i>.

        </dd>

        <dt>Otherwise</dt>

        <dd>

        The given <var>resource type</var> is not supported. Jump to the step below
        labeled <i>fallback</i>.

        <p class="note">
    If the previous step ended with the <var>resource type</var> being
        unknown, this is the case that is triggered.
  </p>

        </dd>

      </dl>

      </li>

      <li>The element's contents are not part of what the <code>object</code> element
      represents.

      </li><li>

      Abort these steps. Once the resource is completely loaded, <a>queue a task</a> to
      <a>fire a simple event</a> named <code>load</code> at the
      element.

      </li>

    </ol>

    </li>

    <li>If the <code>data</code> attribute is absent but the <code>type</code> attribute is present, and the user agent can find a
    <a>plugin</a> suitable according to the value of the <code>type</code> attribute, and either <a>plugins aren't being sandboxed</a> or the <a>plugin</a> can be
    <a>secured</a>, then that <a>plugin</a> <a>should be used</a>. If these conditions cannot be met, or if the
    <a>plugin</a> reports an error, jump to the step below labeled <i>fallback</i>. Otherwise
    abort these steps; once the plugin is completely loaded, <a>queue a task</a> to <a>fire
    a simple event</a> named <code>load</code> at the element.</li>

    <li><i>Fallback</i>: The <code>object</code> element <a>represents</a> the element's
    children, ignoring any leading <code>param</code> element children. This is the element's
    <a>fallback content</a>. If the element has an instantiated <a>plugin</a>, then
    unload it.</li>

  </ol>

  When the algorithm above instantiates a <a>plugin</a>, the user agent
  should pass to the <a>plugin</a> used the names and values of all the attributes on the
  element, in the order they were added to the element, with the attributes added by the parser
  being ordered in source order, followed by a parameter named "PARAM" whose value is null, followed
  by all the names and values of <a>parameters</a> given by
  <code>param</code> elements that are children of the <code>object</code> element, in <a>tree
  order</a>. If the <a>plugin</a> supports a scriptable interface, the
  <code>HTMLObjectElement</code> object representing the element should expose that interface. The
  <code>object</code> element <a>represents</a> the <a>plugin</a>. The
  <a>plugin</a> is not a nested <a>browsing context</a>.

  Plugins are considered sandboxed for the purpose of an
  <code>object</code> element if the <a>sandboxed plugins browsing context flag</a> is set on
  the <code>object</code> element's <a>node document</a>'s <a>active sandboxing flag
  set</a>.

  Due to the algorithm above, the contents of <code>object</code> elements act as <a>fallback
  content</a>, used only when referenced resources can't be shown (e.g. because it returned a 404
  error). This allows multiple <code>object</code> elements to be nested inside each other,
  targeting multiple user agents with different capabilities, with the user agent picking the first
  one it supports.

  When an <code>object</code> element represents a <a>nested browsing context</a>: if the
  <code>object</code> element's <a>nested browsing context</a>'s <a>active document</a>
  is not <a>ready for post-load tasks</a>, and when anything is <a>delaying the load event</a> of the <code>object</code> element's <a>browsing
  context</a>'s <a>active document</a>, and when the <code>object</code> element's
  <a>browsing context</a> is in the <a>delaying <code>load</code>
  events mode</a>, the <code>object</code> must <a>delay the load event</a> of its
  document.

  The <a>task source</a> for the <a>tasks</a> mentioned in this
  section is the <a>DOM manipulation task source</a>.

  Whenever the <code>name</code> attribute is set, if the
  <code>object</code> element has a nested <a>browsing context</a>, its <a>name</a> must be changed to the new value. If the attribute is removed, if the
  <code>object</code> element has a <a>browsing context</a>, the <a>browsing context
  name</a> must be set to the empty string.

  </div>

  The <code>usemap</code> attribute, if present while the
  <code>object</code> element represents an image, can indicate that the object has an associated
  <a>image map</a>. <span class="impl">The attribute must be ignored if the
  <code>object</code> element doesn't represent an image.</span>

  The <code>form</code> attribute is used to explicitly associate the
  <code>object</code> element with its <a>form owner</a>.

  <div class="impl">

  <strong>Constraint validation</strong>: <code>object</code> elements are always <a>barred
  from constraint validation</a>.

  </div>

  The <code>object</code> element supports <a>dimension attributes</a>.

  <div class="impl">

  The IDL attributes <dfn><code>data</code></dfn>, <dfn><code>type</code></dfn> and <dfn><code>name</code></dfn> each must <a>reflect</a> the respective
  content attributes of the same name. The <dfn><code>typeMustMatch</code></dfn> IDL attribute must
  <a>reflect</a> the <code>typemustmatch</code> content
  attribute. The <dfn><code>useMap</code></dfn> IDL attribute must
  <a>reflect</a> the <code>usemap</code> content attribute.

  The <dfn><code>contentDocument</code></dfn> IDL attribute
  must return the <code>Document</code> object of the <a>active document</a> of the
  <code>object</code> element's <a>nested browsing context</a>, if any and if its
  <a>effective script origin</a> is the <a>same origin</a> as the <a>effective script
  origin</a> specified by the <a>incumbent settings object</a>, or null otherwise.

  The <dfn><code>contentWindow</code></dfn> IDL attribute must
  return the <code>WindowProxy</code> object of the <code>object</code> element's <a>nested
  browsing context</a>, if it has one; otherwise, it must return null.

  The <code>willValidate</code>, <code>validity</code>, and <code>validationMessage</code> attributes, and the <code>checkValidity()</code>, <code>reportValidity()</code>, and <code>setCustomValidity()</code> methods, are part of the
  <a>constraint validation API</a>. The <code>form</code> IDL attribute
  is part of the element's forms API.

  All <code>object</code> elements have a <dfn>legacy caller
  operation</dfn>. If the <code>object</code> element has an instantiated <a>plugin</a> that
  supports a scriptable interface that defines a legacy caller operation, then that must be the
  behavior of the object's legacy caller operation. Otherwise, the object's legacy caller operation
  must be to throw a <code>NotSupportedError</code> exception.

  </div>

  <div class="example">
    In the following example, a Java applet is embedded in a page using the <code>object</code>
    element. (Generally speaking, it is better to avoid using applets like these and instead use
    native JavaScript and HTML to provide the functionality, since that way the application will work
    on all Web browsers without requiring a third-party plugin. Many devices, especially embedded
    devices, do not support third-party technologies like Java.)

    <pre highlight="html">
&lt;figure&gt;
  &lt;object type="application/x-java-applet"&gt;
  &lt;param name="code" value="MyJavaClass"&gt;
  &lt;p&gt;You do not have Java available, or it is disabled.&lt;/p&gt;
  &lt;/object&gt;
  &lt;figcaption&gt;My Java Clock&lt;/figcaption&gt;
&lt;/figure&gt;
    </pre>

  </div>

  <div class="example">
    In this example, an HTML page is embedded in another using the <code>object</code>
    element.

    <pre highlight="html">
&lt;figure&gt;
  &lt;object data="clock.html"&gt;&lt;/object&gt;
  &lt;figcaption&gt;My HTML Clock&lt;/figcaption&gt;
&lt;/figure&gt;
    </pre>

  </div>

  <div class="example">
    The following example shows how a plugin can be used in HTML (in this case the Flash plugin,
    to show a video file). Fallback is provided for users who do not have Flash enabled, in this case
    using the <code>video</code> element to show the video for those using user agents that support
    <code>video</code>, and finally providing a link to the video for those who have neither Flash
    nor a <code>video</code>-capable browser.

    <pre highlight="html">
&lt;p&gt;Look at my video:
  &lt;object type="application/x-shockwave-flash"&gt;
  &lt;param name=movie value="http://video.example.com/library/watch.swf"&gt;
  &lt;param name=allowfullscreen value=true&gt;
  &lt;param name=flashvars value="http://video.example.com/vids/315981"&gt;
  &lt;video controls src="http://video.example.com/vids/315981"&gt;
    &lt;a href="http://video.example.com/vids/315981"&gt;View video&lt;/a&gt;.
  &lt;/video&gt;
  &lt;/object&gt;
&lt;/p&gt;
    </pre>

  </div>

<h4 id="the-param-element">The <dfn><code>param</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of an <code>object</code> element, before any <a>flow content</a>.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>name</code> - Name of parameter</dd>
    <dd><code>value</code> - Value of parameter</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLParamElement : HTMLElement {
  attribute DOMString name;
  attribute DOMString value;
};
</pre>
    </dd>
  </dl>

  The <code>param</code> element defines parameters for plugins invoked by <code>object</code>
  elements. It does not <a>represent</a> anything on its own.

  The <dfn><code>name</code></dfn> attribute gives the name of the
  parameter.

  The <dfn><code>value</code></dfn> attribute gives the value of the
  parameter.

  Both attributes must be present. They may have any value.

  <div class="impl">

  If both attributes are present, and if the parent element of the <code>param</code> is an
  <code>object</code> element, then the element defines a <dfn>parameter</dfn> with the given name-value pair.

  If either the name or value of a <a>parameter</a> defined
  by a <code>param</code> element that is the child of an <code>object</code> element that
  <a>represents</a> an instantiated <a>plugin</a> changes, and if that
  <a>plugin</a> is communicating with the user agent using an API that features the ability to
  update the <a>plugin</a> when the name or value of a <a>parameter</a> so changes, then the user agent must
  appropriately exercise that ability to notify the <a>plugin</a> of the change.

  The IDL attributes <dfn><code>name</code></dfn> and <dfn><code>value</code></dfn> must both <a>reflect</a> the respective
  content attributes of the same name.

  </div>

  <div class="example">
    The following example shows how the <code>param</code> element can be used to pass a parameter
    to a plugin, in this case the O3D plugin.

    <pre highlight="html">
&lt;!DOCTYPE HTML&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;title&gt;O3D Utah Teapot&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;
    &lt;object type="application/vnd.o3d.auto"&gt;
      <strong>&lt;param name="o3d_features" value="FloatingPointTextures"&gt;</strong>
      &lt;img src="o3d-teapot.png"
          title="3D Utah Teapot illustration rendered using O3D."
          alt="When O3D renders the Utah Teapot, it appears as a squat
          teapot with a shiny metallic finish on which the
          surroundings are reflected, with a faint shadow caused by
          the lighting."&gt;
      &lt;p&gt;To see the teapot actually rendered by O3D on your
      computer, please download and install the &lt;a
      href="http://code.google.com/apis/o3d/docs/gettingstarted.html#install"&gt;O3D plugin&lt;/a&gt;.&lt;/p&gt;
    &lt;/object&gt;
    &lt;script src="o3d-teapot.js"&gt;&lt;/script&gt;
    &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
    </pre>

  </div>

<h4 id="the-video-element">The <dfn><code>video</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dd>If the element has a <code>controls</code> attribute: <a>Interactive content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>If the element has a <code>src</code> attribute:
  zero or more <code>track</code> elements, then
  <a>transparent</a>, but with no <a>media element</a> descendants.</dd>
    <dd>If the element does not have a <code>src</code> attribute: zero or
    more <code>source</code> elements, then zero or more <code>track</code> elements, then
  <a>transparent</a>, but with no <a>media element</a> descendants.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>crossorigin</code> - How the element handles crossorigin requests</dd>
    <dd><code>poster</code> - Poster frame to show prior to video playback</dd>
    <dd><code>preload</code> - Hints how much buffering the
    <a>media resource</a> will likely need</dd>
    <dd><code>autoplay</code> - Hint that the <a>media resource</a>
    can be started automatically when the page is loaded</dd>
    <dd><code>mediagroup</code> - Groups <a>media elements</a>
    together with an implicit <code>MediaController</code></dd>
    <dd><code>loop</code> - Whether to loop the <a>media resource</a></dd>
    <dd><code>muted</code> - Whether to mute the <a>media resource</a> by default</dd>
    <dd><code>controls</code> - Show user agent controls</dd>
    <dd><code>width</code> - Horizontal dimension</dd>
    <dd><code>height</code> - Vertical dimension</dd>
    <dt><a>Tag omission in text/html</a></dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>application</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>

    <dt><a>DOM interface</a>:</dt>
    <dd>
    <pre class="idl" data-highlight="webidl">interface HTMLVideoElement : HTMLMediaElement {
  attribute unsigned long width;
  attribute unsigned long height;
  readonly attribute unsigned long videoWidth;
  readonly attribute unsigned long videoHeight;
  attribute DOMString poster;
};
</pre>
    </dd>
  </dl>

  A <code>video</code> element is used for playing videos or movies, and audio files with
  captions.

  Content may be provided inside the <code>video</code> element<span class="impl">. User agents
  should not show this content to the user</span>; it is intended for older Web browsers which do
  not support <code>video</code>, so that legacy video plugins can be tried, or to show text to the
  users of these older browsers informing them of how to access the video contents.

  <p class="note">
    In particular, this content is not intended to address accessibility concerns. To
  make video content accessible to the partially sighted, the blind, the hard-of-hearing, the deaf,
  and those with other physical or cognitive disabilities, a variety of features are available.
  Captions can be provided, either embedded in the video stream or as external files using the
  <code>track</code> element. Sign-language tracks can be provided, again either embedded in the
  video stream or by synchronizing multiple <code>video</code> elements using the <code>mediagroup</code> attribute or a <code>MediaController</code>
  object. Audio descriptions can be provided, either as a separate track embedded in the video
  stream, or a separate audio track in an <code>audio</code> element <a>slaved</a> to the same controller as the <code>video</code> element(s), or in text
  form using a <a>WebVTT file</a> referenced using the <code>track</code> element and
  synthesized into speech by the user agent. WebVTT can also be used to provide chapter titles. For
  users who would rather not use a media element at all, transcripts or other textual alternatives
  can be provided by simply linking to them in the prose near the <code>video</code> element. [[!WEBVTT]]
  </p>

  The <code>video</code> element is a <a>media element</a> whose <a>media data</a> is
  ostensibly video data, possibly with associated audio data.

  The <code>src</code>, <code>preload</code>,
  <code>autoplay</code>, <code>mediagroup</code>, <code>loop</code>, <code>muted</code>, and <code>controls</code>
  attributes are <a>the attributes common to all media
  elements</a>.

  The <dfn><code>poster</code></dfn> attribute gives the address of an
  image file that the user agent can show while no video data is available. The attribute, if
  present, must contain a <a>valid non-empty URL potentially surrounded by spaces</a>.

  <div class="impl">

  If the specified resource is to be used, then, when the element is created or when the <code>poster</code> attribute is set, changed, or removed, the user agent must
  run the following steps to determine the element's <dfn>poster frame</dfn> (regardless of the
  value of the element's <a>show poster flag</a>):

  <ol>

    <li>If there is an existing instance of this algorithm running for this <code>video</code>
    element, abort that instance of this algorithm without changing the <a>poster
    frame</a>.</li>

    <li>If the <code>poster</code> attribute's value is the empty string
    or if the attribute is absent, then there is no <a>poster frame</a>; abort these
    steps.</li>

    <li><a>Resolve</a> the <code>poster</code> attribute's value relative to the element. If this fails,
    then there is no <a>poster frame</a>; abort these steps.</li>

    <li>Let <var>request</var> be a new <a>request</a> whose
    <a>url</a> is the resulting <a>absolute URL</a>,
    <a>client</a> is the element's <a>node document</a>'s
    <code>Window</code> object's <a>environment settings object</a>, <a>type</a> is "<code>image</code>", <a>destination</a> is "<code>subresource</code>",
    <a>credentials mode</a> is "<code>include</code>", and whose <a>use-URL-credentials flag</a> is set.

    </li><li><a>Fetch</a> <var>request</var>. This must
    <a>delay the load event</a> of the element's <a>node document</a>.</li>

    <li>If an image is thus obtained, the <a>poster frame</a> is that image. Otherwise,
    there is no <a>poster frame</a>.</li>

  </ol>

  </div>

  <p class="note">
    The image given by the <code>poster</code> attribute,
  the <i>poster frame</i>, is intended to be a representative frame of the
  video (typically one of the first non-blank frames) that gives the user an idea of what the video
  is like.
  </p>

  <div class="impl">

  <hr />

  A <code>video</code> element represents what is given for the first matching condition in the
  list below:

  <dl class="switch">

    <dt>When no video data is available (the element's <code>readyState</code> attribute is either <code>HAVE_NOTHING</code>, or <code>HAVE_METADATA</code> but no video data has yet been obtained at
    all, or the element's <code>readyState</code> attribute is any
    subsequent value but the <a>media resource</a> does not have a video channel)</dt>

    <dd>The <code>video</code> element <a>represents</a> its <a>poster frame</a>, if any,
    or else transparent black with no <a>intrinsic dimensions</a>.</dd>

    <dt>When the <code>video</code> element is <a>paused</a>, the <a>current playback position</a> is the first frame of video,
    and the element's <a>show poster flag</a> is set</dt>

    <dd>The <code>video</code> element <a>represents</a> its <a>poster frame</a>, if any,
    or else the first frame of the video.</dd>

    <dt>When the <code>video</code> element is <a>paused</a>, and the
    frame of video corresponding to the <a>current playback
    position</a> is not available (e.g. because the video is seeking or buffering)</dt>

    <dt>When the <code>video</code> element is neither <a>potentially playing</a> nor <a>paused</a> (e.g. when seeking or stalled)</dt>

    <dd>The <code>video</code> element <a>represents</a> the last frame of the video to have
    been rendered.</dd>

    <dt>When the <code>video</code> element is <a>paused</a></dt>

    <dd>The <code>video</code> element <a>represents</a> the frame of video corresponding to
    the <a>current playback position</a>.</dd>

    <dt>Otherwise (the <code>video</code> element has a video channel and is <a>potentially
    playing</a>)</dt>

    <dd>The <code>video</code> element <a>represents</a> the frame of video at the continuously
    increasing <a>"current" position</a>. When the
    <a>current playback position</a> changes such that the last frame rendered is no longer the
    frame corresponding to the <a>current playback position</a> in the video, the new frame
    must be rendered.</dd>

  </dl>

  Frames of video must be obtained from the video track that was <a>selected</a> when the <a>event loop</a> last reached
  <a>step 1</a>.

  <p class="note">
    Which frame in a video stream corresponds to a particular playback position is
  defined by the video stream's format.
  </p>

  The <code>video</code> element also <a>represents</a> any <a>text track cues</a> whose <a>text track cue active flag</a> is set and whose
  <a>text track</a> is in the <a>showing</a> mode, and any
  audio from the <a>media resource</a>, at the <a>current playback position</a>.

  Any audio associated with the <a>media resource</a> must, if played, be played
  synchronized with the <a>current playback position</a>, at the element's <a>effective
  media volume</a>. The user agent must play the audio from audio tracks that were <a>enabled</a> when the <a>event loop</a> last reached step
  1.

  In addition to the above, the user agent may provide messages to the user (such as "buffering",
  "no video loaded", "error", or more detailed information) by overlaying text or icons on the video
  or other areas of the element's playback area, or in another appropriate manner.

  User agents that cannot render the video may instead make the element <a>represent</a> a link to an external video playback utility or to the video
  data itself.

  When a <code>video</code> element's <a>media resource</a> has a video channel, the
  element <a>provides a paint source</a> whose width is the <a>media resource</a>'s
  <a>intrinsic width</a>, whose height is the
  <a>media resource</a>'s <a>intrinsic
  height</a>, and whose appearance is the frame of video corresponding to the <a>current playback position</a>, if that is available, or else
  (e.g. when the video is seeking or buffering) its previous appearance, if any, or else (e.g.
  because the video is still loading the first frame) blackness.

  <hr />

  </div>

  <dl class="domintro">

    <dt><var>video</var> . <code>videoWidth</code></dt>
    <dt><var>video</var> . <code>videoHeight</code></dt>

    <dd>

    These attributes return the intrinsic dimensions of the video,
    or zero if the dimensions are not known.

    </dd>

  </dl>

  <div class="impl">

  The <dfn>intrinsic width</dfn> and <dfn>intrinsic height</dfn> of the <a>media resource</a>
  are the dimensions of the resource in CSS pixels after taking into account the resource's
  dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used
  by the resource. If an anamorphic format does not define how to apply the aspect ratio to the
  video data's dimensions to obtain the "correct" dimensions, then the user agent must apply the
  ratio by increasing one dimension and leaving the other unchanged.

  The <dfn><code>videoWidth</code></dfn> IDL attribute must return
  the <a>intrinsic width</a> of the video in CSS pixels.
  The <dfn><code>videoHeight</code></dfn> IDL attribute must return
  the <a>intrinsic height</a> of the video in CSS
  pixels. If the element's <code>readyState</code> attribute is <code>HAVE_NOTHING</code>, then the attributes must return 0.

  Whenever the <a>intrinsic width</a>
  or <a>intrinsic height</a> of the video changes
  (including, for example, because the <a>selected video
  track</a> was changed), if the element's <code>readyState</code>
  attribute is not <code>HAVE_NOTHING</code>, the user agent must
  <a>queue a task</a> to <a>fire a simple event</a> named <code>resize</code> at the <a>media element</a>.

  </div>

  The <code>video</code> element supports <a>dimension attributes</a>.

  <div class="impl">

  In the absence of style rules to the contrary, video content should be rendered inside the
  element's playback area such that the video content is shown centered in the playback area at the
  largest possible size that fits completely within it, with the video content's aspect ratio being
  preserved. Thus, if the aspect ratio of the playback area does not match the aspect ratio of the
  video, the video will be shown letterboxed or pillarboxed. Areas of the element's playback area
  that do not contain the video represent nothing.

  <p class="note">
    In user agents that implement CSS, the above requirement can be implemented by
  using the <a>style rule suggested in the rendering section</a>.
  </p>

  The <a>intrinsic width</a> of a <code>video</code> element's playback area is the
  <a>intrinsic width</a> of the <a>poster frame</a>, if that is available and the
  element currently <a>represents</a> its poster frame; otherwise, it is the <a>intrinsic width</a> of the video resource, if that is
  available; otherwise the <a>intrinsic width</a> is missing.

  The <a>intrinsic height</a> of a <code>video</code> element's playback area is the
  <a>intrinsic height</a> of the <a>poster frame</a>, if that is available and the
  element currently <a>represents</a> its poster frame; otherwise it is the <a>intrinsic height</a> of the video resource, if that is
  available; otherwise the <a>intrinsic height</a> is missing.

  The <a>default object size</a> is a width of 300 CSS pixels and a height of 150 CSS
  pixels. [[!CSS3-IMAGES]]

  <hr />

  User agents should provide controls to enable or disable the display of closed captions, audio
  description tracks, and other additional data associated with the video stream, though such
  features should, again, not interfere with the page's normal rendering.

  User agents may allow users to view the video content in manners more suitable to the user
  (e.g. full-screen or in an independent resizable window). As for the other user interface
  features, controls to enable this should not interfere with the page's normal rendering unless the
  user agent is <a>exposing a user interface</a>.
  In such an independent context, however, user agents may make full user interfaces visible, with,
  e.g., play, pause, seeking, and volume controls, even if the <code>controls</code> attribute is absent.

  User agents may allow video playback to affect system features that could interfere with the
  user's experience; for example, user agents could disable screensavers while video playback is in
  progress.

  <hr />

  The <dfn><code>poster</code></dfn> IDL attribute must
  <a>reflect</a> the <code>poster</code> content attribute.

  </div>

  <div class="example">
    This example shows how to detect when a video has failed to play correctly:

    <pre highlight="html">
&lt;script&gt;
  function failed(e) {
    // video playback failed - show a message saying why
    switch (e.target.error.code) {
      case e.target.error.MEDIA_ERR_ABORTED:
        alert('You aborted the video playback.');
        break;
      case e.target.error.MEDIA_ERR_NETWORK:
        alert('A network error caused the video download to fail part-way.');
        break;
      case e.target.error.MEDIA_ERR_DECODE:
        alert('The video playback was aborted due to a corruption problem or because the video used features your browser did not support.');
        break;
      case e.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED:
        alert('The video could not be loaded, either because the server or network failed or because the format is not supported.');
        break;
      default:
        alert('An unknown error occurred.');
        break;
    }
  }
&lt;/script&gt;
&lt;p&gt;&lt;video src="tgif.vid" autoplay controls onerror="failed(event)"&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="tgif.vid"&gt;Download the video file&lt;/a&gt;.&lt;/p&gt;
    </pre>

  </div>

<h4 id="the-audio-element">The <dfn><code>audio</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dd>If the element has a <code>controls</code> attribute: <a>Interactive content</a>.</dd>
    <dd>If the element has a <code>controls</code> attribute: <a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>If the element has a <code>src</code> attribute:
zero or more <code>track</code> elements, then
<a>transparent</a>, but with no <a>media element</a> descendants.</dd>
    <dd>If the element does not have a <code>src</code> attribute: zero or more <code>source</code> elements, then
  zero or more <code>track</code> elements, then
  <a>transparent</a>, but with no <a>media element</a> descendants.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>crossorigin</code> - How the element handles crossorigin requests</dd>
    <dd><code>preload</code> - Hints how much buffering the
    <a>media resource</a> will likely need</dd>
    <dd><code>autoplay</code> - Hint that the <a>media resource</a>
    can be started automatically when the page is loaded</dd>
    <dd><code>mediagroup</code> - Groups <a>media elements</a>
    together with an implicit <code>MediaController</code></dd>
    <dd><code>loop</code> - Whether to loop the <a>media resource</a></dd>
    <dd><code>muted</code> - Whether to mute the <a>media resource</a> by default</dd>
    <dd><code>controls</code> - Show user agent controls</dd>
    <dt><a>Tag omission in text/html</a></dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>application</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
    <pre class="idl" data-highlight="webidl">
      [NamedConstructor=Audio(optional DOMString src)]
interface HTMLAudioElement : HTMLMediaElement {};
</pre>
    </dd>
  </dl>

  An <code>audio</code> element <a>represents</a> a sound or audio stream.

  Content may be provided inside the <code>audio</code> element<span class="impl">. User agents
  should not show this content to the user</span>; it is intended for older Web browsers which do
  not support <code>audio</code>, so that legacy audio plugins can be tried, or to show text to the
  users of these older browsers informing them of how to access the audio contents.

  <p class="note">
    In particular, this content is not intended to address accessibility concerns. To
  make audio content accessible to the deaf or to those with other physical or cognitive
  disabilities, a variety of features are available. If captions or a sign language video are
  available, the <code>video</code> element can be used instead of the <code>audio</code> element to
  play the audio, allowing users to enable the visual alternatives. Chapter titles can be provided
  to aid navigation, using the <code>track</code> element and a <a>WebVTT file</a>. And,
  naturally, transcripts or other textual alternatives can be provided by simply linking to them in
  the prose near the <code>audio</code> element. [[!WEBVTT]]
  </p>

  The <code>audio</code> element is a <a>media element</a> whose <a>media data</a> is
  ostensibly audio data.

  The <code>src</code>, <code>preload</code>,
  <code>autoplay</code>, <code>mediagroup</code>, <code>loop</code>, <code>muted</code>, and <code>controls</code>
  attributes are <a>the attributes common to all media
  elements</a>.

  <div class="impl">

  When an <code>audio</code> element is <a>potentially playing</a>, it must have its audio
  data played synchronized with the <a>current playback position</a>, at the element's
  <a>effective media volume</a>. The user agent must play the audio from audio tracks that
  were enabled when the <a>event loop</a> last reached <a>step 1</a>.

  When an <code>audio</code> element is not <a>potentially playing</a>, audio must not play
  for the element.

  </div>

  <dl class="domintro">

    <dt><var>audio</var> = new <code>Audio</code>( [ <var>url</var> ] )</dt>

    <dd>

    Returns a new <code>audio</code> element, with the <code>src</code>
    attribute set to the value passed in the argument, if applicable.

    </dd>

  </dl>

  <div class="impl">

  A constructor is provided for creating <code>HTMLAudioElement</code> objects (in addition to
  the factory methods from DOM such as <code>createElement()</code>): <dfn><code>Audio(<var>src</var>)</code></dfn>. When invoked as a
  constructor, it must return a new <code>HTMLAudioElement</code> object (a new <code>audio</code>
  element). The element must be created with its <code>preload</code>
  attribute set to the literal value "<code>auto</code>". If the
  <var>src</var> argument is present, the object created must be created with its <code>src</code> content attribute set to the provided value (this will <a>cause the user agent to invoke</a> the object's
  <a>resource selection algorithm</a> before returning).
  The element's <a>node document</a> must be the <a>active document</a> of the <a>browsing
  context</a> of the <code>Window</code> object on which the interface object of the invoked
  constructor is found.

  </div>

<h4 id="the-source-element">The <dfn><code>source</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <a>media element</a>, before any <a>flow content</a>
  or <code>track</code> elements.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>type</code> - Type of embedded resource</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">
  interface HTMLSourceElement : HTMLElement {
  attribute DOMString src;
  attribute DOMString type;
};
</pre>
    </dd>
  </dl>

  The <code>source</code> element allows authors to specify multiple alternative <a>media resources</a> for <a>media
  elements</a>. It does not <a>represent</a> anything on its own.

  The <dfn><code>src</code></dfn> attribute gives the address of the
  <a>media resource</a>. The value must be a <a>valid non-empty URL potentially surrounded
  by spaces</a>. This attribute must be present.

  <p class="note">
    Dynamically modifying a <code>source</code> element and its attribute when the
  element is already inserted in a <code>video</code> or <code>audio</code> element will have no
  effect. To change what is playing, just use the <code>src</code> attribute
  on the <a>media element</a> directly, possibly making use of the <code>canPlayType()</code> method to pick from amongst available
  resources. Generally, manipulating <code>source</code> elements manually after the document has
  been parsed is an unnecessarily complicated approach.
  </p>

  The <dfn><code>type</code></dfn> attribute gives the type of the
  <a>media resource</a>, to help the user agent determine if it can play this <a>media
  resource</a> before fetching it. If specified, its value must be a <a>valid MIME
  type</a>. The <code>codecs</code> parameter, which certain MIME types define, might be
  necessary to specify exactly how the resource is encoded. [[!RFC6381]]

  <div class="example">
    The following list shows some examples of how to use the <code>codecs=</code> MIME
    parameter in the <code>type</code> attribute.

    <dl>

    <dt>H.264 Constrained baseline profile video (main and extended video compatible) level 3 and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre highlight="html">
&lt;source src='video.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'&gt;
    </pre></dd>

    <dt>H.264 Extended profile video (baseline-compatible) level 3 and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre highlight="html">
&lt;source src='video.mp4' type='video/mp4; codecs="avc1.58A01E, mp4a.40.2"'&gt;
    </pre></dd>

    <dt>H.264 Main profile video level 3 and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre highlight="html">
&lt;source src='video.mp4' type='video/mp4; codecs="avc1.4D401E, mp4a.40.2"'&gt;
    </pre></dd>

    <dt>H.264 'High' profile video (incompatible with main, baseline, or extended profiles) level 3 and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre highlight="html">
&lt;source src='video.mp4' type='video/mp4; codecs="avc1.64001E, mp4a.40.2"'&gt;
    </pre></dd>

    <dt>MPEG-4 Visual Simple Profile Level 0 video and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre highlight="html">
&lt;source src='video.mp4' type='video/mp4; codecs="mp4v.20.8, mp4a.40.2"'&gt;
    </pre></dd>

    <dt>MPEG-4 Advanced Simple Profile Level 0 video and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre highlight="html">
&lt;source src='video.mp4' type='video/mp4; codecs="mp4v.20.240, mp4a.40.2"'&gt;
    </pre></dd>

    <dt>MPEG-4 Visual Simple Profile Level 0 video and AMR audio in 3GPP container</dt>
    <dd><pre highlight="html">
&lt;source src='video.3gp' type='video/3gpp; codecs="mp4v.20.8, samr"'&gt;
    </pre></dd>

    <dt>Theora video and Vorbis audio in Ogg container</dt>
    <dd><pre highlight="html">
&lt;source src='video.ogv' type='video/ogg; codecs="theora, vorbis"'&gt;
    </pre></dd>

    <dt>Theora video and Speex audio in Ogg container</dt>
    <dd><pre highlight="html">
&lt;source src='video.ogv' type='video/ogg; codecs="theora, speex"'&gt;
    </pre></dd>

    <dt>Vorbis audio alone in Ogg container</dt>
    <dd><pre highlight="html">
&lt;source src='audio.ogg' type='audio/ogg; codecs=vorbis'&gt;
    </pre></dd>

    <dt>Speex audio alone in Ogg container</dt>
    <dd><pre highlight="html">
&lt;source src='audio.spx' type='audio/ogg; codecs=speex'&gt;
    </pre></dd>

    <dt>FLAC audio alone in Ogg container</dt>
    <dd><pre highlight="html">
&lt;source src='audio.oga' type='audio/ogg; codecs=flac'&gt;
    </pre></dd>

    <dt>Dirac video and Vorbis audio in Ogg container</dt>
    <dd><pre highlight="html">
&lt;source src='video.ogv' type='video/ogg; codecs="dirac, vorbis"'&gt;
    </pre></dd>

    </dl>

  </div>

  <div class="impl">

  If a <code>source</code> <a>element is inserted</a> as a child of a <a>media element</a> that
  has no <code>src</code> attribute and whose <code>networkState</code> has the value <code>NETWORK_EMPTY</code>, the user agent must invoke the <a>media
  element</a>'s <a>resource selection
  algorithm</a>.

  The IDL attributes <dfn><code>src</code></dfn> and <dfn><code>type</code></dfn> must <a>reflect</a> the respective content
  attributes of the same name.

  </div>

  <div class="example">
    If the author isn't sure if user agents will all be able to render the media resources
    provided, the author can listen to the <code>error</code> event on the last
    <code>source</code> element and trigger fallback behavior:

    <pre highlight="html">
&lt;script&gt;
  function fallback(video) {
    // replace &lt;video&gt; with its contents
    while (video.hasChildNodes()) {
      if (video.firstChild instanceof HTMLSourceElement)
        video.removeChild(video.firstChild);
      else
        video.parentNode.insertBefore(video.firstChild, video);
    }
    video.parentNode.removeChild(video);
  }
&lt;/script&gt;
&lt;video controls autoplay&gt;
  &lt;source src='video.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'&gt;
  &lt;source src='video.ogv' type='video/ogg; codecs="theora, vorbis"'
          onerror="fallback(parentNode)"&gt;
  ...
&lt;/video&gt;
    </pre>

  </div>

<h4 id="the-track-element">The <dfn><code>track</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <a>media element</a>, before any <a>flow content</a>.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>kind</code> - The type of text track</dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>srclang</code> - Language of the text track</dd>
    <dd><code>label</code> - User-visible label</dd>
    <dd><code>default</code> - Enable the track if no other <a>text track</a> is more suitable</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLTrackElement : HTMLElement {
  attribute DOMString kind;
  attribute DOMString src;
  attribute DOMString srclang;
  attribute DOMString label;
  attribute boolean default;

  const unsigned short NONE = 0;
  const unsigned short LOADING = 1;
  const unsigned short LOADED = 2;
  const unsigned short ERROR = 3;
  readonly attribute unsigned short readyState;

  readonly attribute TextTrack track;
};
</pre>
    </dd>
  </dl>

  The <code>track</code> element allows authors to specify explicit external timed <a>text tracks</a> for <a>media elements</a>. It
  does not <a>represent</a> anything on its own.

  The <dfn><code>kind</code></dfn> attribute is an <a>enumerated
  attribute</a>. The following table lists the keywords defined for this attribute. The keyword
  given in the first cell of each row maps to the state given in the second cell.

  <table>
    <thead>
    <tr>
      <th>Keyword
      </th><th>State
      </th><th>Brief description
    </th></tr></thead><tbody>
    <tr>
      <td><dfn><code>subtitles</code></dfn>
      </td><td><dfn>Subtitles</dfn>
      </td><td>
      Transcription or translation of the dialog, suitable for when the sound is available but not understood (e.g. because the user does not understand the language of the <a>media resource</a>'s audio track).
      Overlaid on the video.
    </td></tr><tr>
      <td><dfn><code>captions</code></dfn>
      </td><td><dfn>Captions</dfn>
      </td><td>
      Transcription or translation of the dialog, sound effects, relevant musical cues, and other relevant audio information, suitable for when sound is unavailable or not clearly audible (e.g. because it is muted, drowned-out by ambient noise, or because the user is deaf).
      Overlaid on the video; labeled as appropriate for the hard-of-hearing.
    </td></tr><tr>
      <td><dfn><code>descriptions</code></dfn>
      </td><td><dfn>Descriptions</dfn>
      </td><td>
      Textual descriptions of the video component of the <a>media resource</a>, intended for audio synthesis when the visual component is obscured, unavailable, or not usable (e.g. because the user is interacting with the application without a screen while driving, or because the user is blind).
      Synthesized as audio.
    </td></tr><tr>
      <td><dfn><code>chapters</code></dfn>
      </td><td><dfn>Chapters</dfn>
      </td><td>
      Chapter titles, intended to be used for navigating the <a>media resource</a>.
      Displayed as an interactive (potentially nested) list in the user agent's interface.
    </td></tr><tr>
      <td><dfn><code>metadata</code></dfn>
      </td><td><dfn>Metadata</dfn>
      </td><td>
      Tracks intended for use from script.
      Not displayed by the user agent.
  </td></tr></tbody></table>

  The attribute may be omitted. The <i>missing value default</i> is the <a>subtitles</a> state.

  The <dfn><code>src</code></dfn> attribute gives the address of the text
  track data. The value must be a <a>valid non-empty URL potentially surrounded by spaces</a>.
  This attribute must be present.

  <div class="impl">

  If the element has a <code>src</code> attribute whose value is not the
  empty string and whose value, when the attribute was set, could be successfully <a>resolved</a> relative to the element, then the element's <dfn>track
  URL</dfn> is the resulting <a>absolute URL</a>. Otherwise, the element's <a>track
  URL</a> is the empty string.

  </div>

  If the element's <a>track URL</a> identifies a <a>WebVTT</a> resource, and the
  element's <code>kind</code> attribute is not in the <a>metadata</a> state, then the <a>WebVTT</a> file must be
  a <a>WebVTT file using cue text</a>. [[!WEBVTT]]

  Furthermore, if the element's <a>track URL</a> identifies a <a>WebVTT</a> resource,
  and the element's <code>kind</code> attribute is in the <a>chapters</a> state, then the <a>WebVTT</a> file must be
  both a <a>WebVTT file using chapter title text</a> and a <a>WebVTT file using only nested
  cues</a>. [[!WEBVTT]]

  The <dfn><code>srclang</code></dfn> attribute gives the language of
  the text track data. The value must be a valid BCP 47 language tag. This attribute must be present
  if the element's <code>kind</code> attribute is in the <a>subtitles</a> state. [[!BCP47]]

  <div class="impl">

  If the element has a <code>srclang</code> attribute whose value is
  not the empty string, then the element's <dfn>track language</dfn> is the value of the attribute.
  Otherwise, the element has no <a>track language</a>.

  </div>

  The <dfn><code>label</code></dfn> attribute gives a user-readable
  title for the track. This title is used by user agents when listing <a>subtitle</a>, <a>caption</a>, and <a>audio description</a> tracks in their user interface.

  The value of the <code>label</code> attribute, if the attribute is
  present, must not be the empty string. Furthermore, there must not be two <code>track</code>
  element children of the same <a>media element</a> whose <code>kind</code> attributes are in the same state, whose <code>srclang</code> attributes are both missing or have values that
  represent the same language, and whose <code>label</code> attributes are
  again both missing or both have the same value.

  <div class="impl">

  If the element has a <code>label</code> attribute whose value is not
  the empty string, then the element's <dfn>track label</dfn> is the value of the attribute.
  Otherwise, the element's <a>track label</a> is an empty string.

  </div>

  The <dfn><code>default</code></dfn> attribute is a <a>boolean
  attribute</a>, which, if specified, indicates that the track is to be enabled if the user's
  preferences do not indicate that another track would be more appropriate.

  Each <a>media element</a> must have no more than one <code>track</code> element child
  whose <code>kind</code> attribute is in the <a>subtitles</a> or <a>captions</a> state and whose <code>default</code> attribute is specified.

  Each <a>media element</a> must have no more than one <code>track</code> element child
  whose <code>kind</code> attribute is in the <a>description</a> state and whose <code>default</code> attribute is specified.

  Each <a>media element</a> must have no more than one <code>track</code> element child
  whose <code>kind</code> attribute is in the <a>chapters</a> state and whose <code>default</code> attribute is specified.

  <p class="note">
    There is no limit on the number of <code>track</code> elements whose <code>kind</code> attribute is in the <a>metadata</a> state and whose <code>default</code> attribute is specified.
  </p>

  <dl class="domintro">

    <dt><var>track</var> . <code>readyState</code></dt>
    <dd>
    Returns the <a>text track readiness state</a>,
    represented by a number from the following list:
    <dl>
      <dt><var>track</var> . <code>NONE</code> (0)</dt>
      <dd>
      The <a>text track not loaded</a> state.
      </dd>
      <dt><var>track</var> . <code>LOADING</code> (1)</dt>
      <dd>
      The <a>text track loading</a> state.
      </dd>
      <dt><var>track</var> . <code>LOADED</code> (2)</dt>
      <dd>
      The <a>text track loaded</a> state.
      </dd>
      <dt><var>track</var> . <code>ERROR</code> (3)</dt>
      <dd>
      The <a>text track failed to load</a> state.
      </dd>
    </dl>
    </dd>

    <dt><var>track</var> . <code>track</code></dt>

    <dd>

    Returns the <code>TextTrack</code> object corresponding to the <a>text track</a> of the <code>track</code> element.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>readyState</code></dfn> attribute must return the
  numeric value corresponding to the <a>text track readiness state</a> of the
  <code>track</code> element's <a>text track</a>, as defined by the following list:

  <dl>
    <dt><dfn><code>NONE</code></dfn> (numeric value 0)</dt>
    <dd>The <a>text track not loaded</a> state.</dd>
    <dt><dfn><code>LOADING</code></dfn> (numeric value 1)</dt>
    <dd>The <a>text track loading</a> state.</dd>
    <dt><dfn><code>LOADED</code></dfn> (numeric value 2)</dt>
    <dd>The <a>text track loaded</a> state.</dd>
    <dt><dfn><code>ERROR</code></dfn> (numeric value 3)</dt>
    <dd>The <a>text track failed to load</a> state.</dd>
  </dl>

  The <dfn><code>track</code></dfn> IDL attribute must, on getting,
  return the <code>track</code> element's <a>text track</a>'s corresponding
  <code>TextTrack</code> object.

  The <dfn><code>src</code></dfn>, <dfn><code>srclang</code></dfn>, <dfn><code>label</code></dfn>, and <dfn><code>default</code></dfn> IDL attributes must <a>reflect</a> the
  respective content attributes of the same name. The <dfn><code>kind</code></dfn> IDL attribute must <a>reflect</a> the content
  attribute of the same name, <a>limited to only known values</a>.

  </div>

  <div class="example">
    This video has subtitles in several languages:

    <pre highlight="html">
&lt;video src="brave.webm"&gt;
  &lt;track kind=subtitles src=brave.en.vtt srclang=en label="English"&gt;
  &lt;track kind=captions src=brave.en.hoh.vtt srclang=en label="English for the Hard of Hearing"&gt;
  &lt;track kind=subtitles src=brave.fr.vtt srclang=fr lang=fr label="FranÃ§ais"&gt;
  &lt;track kind=subtitles src=brave.de.vtt srclang=de lang=de label="Deutsch"&gt;
&lt;/video&gt;
    </pre>

    (The <code>lang</code> attributes on the last two describe the language of
    the <code>label</code> attribute, not the language of the subtitles
    themselves. The language of the subtitles is given by the <code>srclang</code> attribute.)

  </div>

<h4 id="media-elements">Media elements</h4>

  <a>HTMLMediaElement</a> objects (<code>audio</code> and <code>video</code>, in this
  specification) are simply known as <dfn>media elements</dfn>.

  <pre class="idl" data-highlight="webidl">
    enum CanPlayTypeResult { "" /* empty string */, "maybe", "probably" };

    interface HTMLMediaElement : HTMLElement {

      // error state
      readonly attribute MediaError? error;

      // network state
      attribute DOMString src;
      readonly attribute DOMString currentSrc;
      attribute DOMString? crossOrigin;
      const unsigned short NETWORK_EMPTY = 0;
      const unsigned short NETWORK_IDLE = 1;
      const unsigned short NETWORK_LOADING = 2;
      const unsigned short NETWORK_NO_SOURCE = 3;
      readonly attribute unsigned short networkState;
      attribute DOMString preload;
      readonly attribute TimeRanges buffered;
      void load();
      CanPlayTypeResult canPlayType(DOMString type);

      // ready state
      const unsigned short HAVE_NOTHING = 0;
      const unsigned short HAVE_METADATA = 1;
      const unsigned short HAVE_CURRENT_DATA = 2;
      const unsigned short HAVE_FUTURE_DATA = 3;
      const unsigned short HAVE_ENOUGH_DATA = 4;
      readonly attribute unsigned short readyState;
      readonly attribute boolean seeking;

      // playback state
      attribute double currentTime;
      void fastSeek(double time);
      readonly attribute unrestricted double duration;
      object getStartDate();
      readonly attribute boolean paused;
      attribute double defaultPlaybackRate;
      attribute double playbackRate;
      readonly attribute TimeRanges played;
      readonly attribute TimeRanges seekable;
      readonly attribute boolean ended;
      attribute boolean autoplay;
      attribute boolean loop;
      void play();
      void pause();

      // media controller
      attribute DOMString mediaGroup;
      attribute MediaController? controller;

      // controls
      attribute boolean controls;
      attribute double volume;
      attribute boolean muted;
      attribute boolean defaultMuted;

      // tracks
      [SameObject] readonly attribute AudioTrackList audioTracks;
      [SameObject] readonly attribute VideoTrackList videoTracks;
      [SameObject] readonly attribute TextTrackList textTracks;
      TextTrack addTextTrack(TextTrackKind kind, optional DOMString label = "", optional DOMString language = "");
    };
  </pre>

  The <dfn>media element attributes</dfn>, <code>src</code>, <code>crossorigin</code>, <code>preload</code>, <code>autoplay</code>,
  <code>mediagroup</code>, <code>loop</code>,
  <code>muted</code>, and <code>controls</code>, apply to all <a>media
  elements</a>. They are defined in this section.

  <a>Media elements</a> are used to present audio data, or video and
  audio data, to the user. This is referred to as <dfn>media data</dfn> in this section, since this
  section applies equally to <a>media elements</a> for audio or for
  video.

  The term <dfn>media resource</dfn> is used to refer to the complete set of media data, e.g. the
  complete video file, or complete audio file.

  A <a>media resource</a> can have multiple audio and video tracks. For the purposes of a
  <a>media element</a>, the video data of the <a>media resource</a> is only that of the
  currently selected track (if any) as given by the element's <code>videoTracks</code> attribute when the <a>event loop</a> last
  reached <a>step 1</a>, and the audio data of the <a>media resource</a> is the result of mixing all
  the currently enabled tracks (if any) given by the element's <code>audioTracks</code> attribute when the <a>event loop</a> last
  reached <a>step 1</a>.

  <p class="note">
    Both <code>audio</code> and <code>video</code> elements can be used for both audio
  and video. The main difference between the two is simply that the <code>audio</code> element has
  no playback area for visual content (such as video or captions), whereas the <code>video</code>
  element does.
  </p>

  <div class="impl">

  Except where otherwise explicitly specified, the <a>task source</a> for all the tasks
  <a>queued</a> in this section and its subsections is the <dfn>media
  element event task source</dfn> of the <a>media element</a> in question.

  </div>

<h5 id="error-codes">Error codes</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>error</code></dt>

    <dd>

    Returns a <code>MediaError</code> object representing the current error state of the
    element.

    Returns null if there is no error.

    </dd>

  </dl>

  <div class="impl">

  All <a>media elements</a> have an associated error status, which
  records the last error the element encountered since its <a>resource selection algorithm</a> was last invoked. The
  <dfn><code>error</code></dfn> attribute, on getting, must return the
  <code>MediaError</code> object created for this last error, or null if there has not been an
  error.

  </div>

  <pre class="idl" data-highlight="webidl">interface MediaError {
  const unsigned short MEDIA_ERR_ABORTED = 1;
  const unsigned short MEDIA_ERR_NETWORK = 2;
  const unsigned short MEDIA_ERR_DECODE = 3;
  const unsigned short MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
  readonly attribute unsigned short code;
};
</pre>

  <dl class="domintro">

    <dt><var>media</var> . <code>error</code> . <code>code</code></dt>

    <dd>

    Returns the current error's error code, from the list below.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>code</code></dfn> attribute of a
  <code>MediaError</code> object must return the code for the error, which must be one of the
  following:

  </div>

  <dl>

    <dt><dfn><code>MEDIA_ERR_ABORTED</code></dfn> (numeric value 1)</dt>

    <dd>The fetching process for the <a>media resource</a> was aborted by the user agent at the
    user's request.</dd>

    <dt><dfn><code>MEDIA_ERR_NETWORK</code></dfn> (numeric value 2)</dt>

    <dd>A network error of some description caused the user agent to stop fetching the <a>media
    resource</a>, after the resource was established to be usable.</dd>

    <dt><dfn><code>MEDIA_ERR_DECODE</code></dfn> (numeric value 3)</dt>

    <dd>An error of some description occurred while decoding the <a>media resource</a>, after
    the resource was established to be usable.</dd>

    <dt><dfn><code>MEDIA_ERR_SRC_NOT_SUPPORTED</code></dfn> (numeric value 4)</dt>

    <dd>The <a>media resource</a> indicated by the <code>src</code>
    attribute or <a>assigned media provider object</a> was not suitable.</dd>

  </dl>

<h5 id="location-of-the-media-resource">Location of the media resource</h5>

  The <dfn><code>src</code></dfn> content attribute on <a>media elements</a> gives the address of the media resource (video, audio) to show. The
  attribute, if present, must contain a <a>valid non-empty URL potentially surrounded by
  spaces</a>.

  If the <code>itemprop</code> attribute is specified on the <a>media
  element</a>, then the <code>src</code> attribute must also be
  specified.

  The <dfn><code>crossorigin</code></dfn> content attribute on
  <a>media elements</a> is a <a>CORS settings attribute</a>.

  <div class="impl">

  If a <a>media element</a> is created with a
  <code>src</code> attribute, the user agent must <a>immediately</a> invoke the
  <a>media element</a>'s <a>resource selection
  algorithm</a>.

  If a <code>src</code> attribute of a <a>media element</a> is set
  or changed, the user agent must invoke the <a>media element</a>'s <a>media element load
  algorithm</a>. (<em>Removing</em> the <code>src</code> attribute does
  not do this, even if there are <code>source</code> elements present.)

  The <dfn><code>src</code></dfn> IDL attribute on <a>media elements</a> must <a>reflect</a> the content attribute of the same
  name.

  The <dfn><code>crossOrigin</code></dfn> IDL attribute must
  <a>reflect</a> the <code>crossorigin</code> content attribute.

  </div>

  A <dfn>media provider object</dfn> is an object that can represent a <a>media resource</a>,
  separate from a <a>URL</a>. <code>MediaStream</code> objects, <code>MediaSource</code>
  objects, <code>Blob</code> objects, and <code>File</code> objects are all <a>media provider objects</a>.

  <div class="impl">

  Each <a>media element</a> can have an <dfn>assigned media provider object</dfn>, which is a
  <a>media provider object</a>. When a <a>media element</a> is created, it has no
  <a>assigned media provider object</a>.

  </div>

  <dl class="domintro">

    <dt><var>media</var> . <code>currentSrc</code></dt>

    <dd>

    Returns the address of the current <a>media resource</a>.

    Returns the empty string when there is no <a>media resource</a>.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>currentSrc</code></dfn> IDL attribute is initially
  the empty string. Its value is changed by the <a>resource
  selection algorithm</a> defined below.

  </div>

  <p class="note">
    There are two ways to specify a <a>media resource</a>, the <code>src</code> attribute, or <code>source</code> elements. The attribute
  overrides the elements.
  </p>

<h5 id="mime-types">MIME types</h5>

  A <a>media resource</a> can be described in terms of its <em>type</em>, specifically a
  <a>MIME type</a>, in some cases with a <code>codecs</code> parameter. (Whether the
  <code>codecs</code> parameter is allowed or not depends on the MIME type.) [[!RFC6381]]

  Types are usually somewhat incomplete descriptions; for example "<code>video/mpeg</code>" doesn't say anything except what the container type is, and even a
  type like "<code>video/mp4; codecs="avc1.42E01E, mp4a.40.2"</code>" doesn't
  include information like the actual bitrate (only the maximum bitrate). Thus, given a type, a user
  agent can often only know whether it <em>might</em> be able to play media of that type (with
  varying levels of confidence), or whether it definitely <em>cannot</em> play media of that
  type.

  <dfn>A type that the user agent knows it cannot render</dfn> is one that describes a resource
  that the user agent definitely does not support, for example because it doesn't recognize the
  container type, or it doesn't support the listed codecs.

  The <a>MIME type</a> "<code>application/octet-stream</code>" with no parameters is never
  <a>a type that the user agent knows it cannot render</a>. User agents must treat that type
  as equivalent to the lack of any explicit <a>Content-Type metadata</a>
  when it is used to label a potential <a>media resource</a>.

  <p class="note">
    Only the <a>MIME type</a> "<code>application/octet-stream</code>" with no
  parameters is special-cased here; if any parameter appears with it, it will be treated just like
  any other <a>MIME type</a>. This is a deviation from the rule  that unknown <a>MIME type</a> parameters should be ignored.
  </p>

  <dl class="domintro">

    <dt><var>media</var> . <code>canPlayType</code>(<var>type</var>)</dt>

    <dd>

    Returns the empty string (a negative response), "maybe", or "probably" based on how confident
    the user agent is that it can play media resources of the given type.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>canPlayType(<var>type</var>)</code></dfn> method must return <dfn>the
  empty string</dfn> if <var>type</var> is <a>a type that the user agent knows it cannot
  render</a> or is the type "<code>application/octet-stream</code>"; it must return "<dfn><code>probably</code></dfn>" if the user agent is confident
  that the type represents a <a>media resource</a> that it can render if used in with this
  <code>audio</code> or <code>video</code> element; and it must return "<dfn><code>maybe</code></dfn>" otherwise. Implementors are encouraged
  to return "<code>maybe</code>" unless the type can be
  confidently established as being supported or not. Generally, a user agent should never return
  "<code>probably</code>" for a type that allows the <code>codecs</code> parameter if that parameter is not present.

  </div>

  <div class="example">
    This script tests to see if the user agent supports a (fictional) new format to dynamically
    decide whether to use a <code>video</code> element or a plugin:

    <pre highlight="html">
&lt;section id="video"&gt;
  &lt;p&gt;&lt;a href="playing-cats.nfv"&gt;Download video&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;script&gt;
  var videoSection = document.getElementById('video');
  var videoElement = document.createElement('video');
  var support = videoElement.canPlayType('video/x-new-fictional-format;codecs="kittens,bunnies"');
  if (support != "probably" &amp;&amp; "New Fictional Video Plugin" in navigator.plugins) {
    // not confident of browser support
    // but we have a plugin
    // so use plugin instead
    videoElement = document.createElement("embed");
  } else if (support == "") {
    // no support from browser and no plugin
    // do nothing
    videoElement = null;
  }
  if (videoElement) {
    while (videoSection.hasChildNodes())
      videoSection.removeChild(videoSection.firstChild);
    videoElement.setAttribute("src", "playing-cats.nfv");
    videoSection.appendChild(videoElement);
  }
&lt;/script&gt;
    </pre>

  </div>

  <p class="note">
    The <code>type</code> attribute of the
  <code>source</code> element allows the user agent to avoid downloading resources that use formats
  it cannot render.
  </p>

<h5 id="network-states">Network states</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>networkState</code></dt>

    <dd>

    Returns the current state of network activity for the element, from the codes in the list
    below.

    </dd>

  </dl>

  <div class="impl">

  As <a>media elements</a> interact with the network, their current
  network activity is represented by the <dfn><code>networkState</code></dfn> attribute. On getting, it must
  return the current network state of the element, which must be one of the following values:

  </div>

  <dl>

    <dt><dfn><code>NETWORK_EMPTY</code></dfn> (numeric value 0)</dt>

    <dd>The element has not yet been initialized. All attributes are in their initial states.</dd>

    <dt><dfn><code>NETWORK_IDLE</code></dfn> (numeric value 1)</dt>

    <dd>The element<span class="impl">'s <a>resource
    selection algorithm</a> is active and</span> has selected a <a>resource</a>, but it is not actually using the network at this time.</dd>

    <dt><dfn><code>NETWORK_LOADING</code></dfn> (numeric value 2)</dt>

    <dd>The user agent is actively trying to download data.</dd>

    <dt><dfn><code>NETWORK_NO_SOURCE</code></dfn> (numeric value 3)</dt>

    <dd>The element<span class="impl">'s <a>resource
    selection algorithm</a> is active, but it</span> has not yet found a <a>resource</a> to use.</dd>

  </dl>

  <div class="impl">

  The <a>resource selection algorithm</a> defined
  below describes exactly when the <code>networkState</code>
  attribute changes value and what events fire to indicate changes in this state.

  </div>

<h5 id="loading-the-media-resource">Loading the media resource</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>load</code>()</dt>

    <dd>

    Causes the element to reset and start selecting and loading a new <a>media resource</a>
    from scratch.

    </dd>

  </dl>

  <div class="impl">

  All <a>media elements</a> have an <dfn>autoplaying flag</dfn>,
  which must begin in the true state, and a <dfn>delaying-the-load-event flag</dfn>, which must
  begin in the false state. While the <a>delaying-the-load-event flag</a> is true, the element
  must <a>delay the load event</a> of its document.

  When the <dfn><code>load()</code></dfn> method on a <a>media
  element</a> is invoked, the user agent must run the <a>media element load
  algorithm</a>.

  The <dfn>media element load algorithm</dfn> consists of the following steps.

  <ol>

    <li>Abort any already-running instance of the <a>resource selection algorithm</a> for this
    element.</li>

    <li>

    If there are any <a>tasks</a> from the <a>media
    element</a>'s <a>media element event task source</a> in one of the <a>task queues</a>, then remove those tasks.

    <p class="note">
    Basically, pending events and callbacks for the media element are discarded when
    the media element starts loading a new resource.
  </p>

    </li>

    <li>If the <a>media element</a>'s <code>networkState</code> is set to <code>NETWORK_LOADING</code> or <code>NETWORK_IDLE</code>, <a>queue a task</a> to <a>fire a
    simple event</a> named <code>abort</code> at the <a>media
    element</a>.</li>

    <li>

    If the <a>media element</a>'s <code>networkState</code>
    is not set to <code>NETWORK_EMPTY</code>, then run these
    substeps:

    <ol>

      <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>emptied</code> at the <a>media element</a>.</li>

      <li>If a fetching process is in progress for the <a>media
      element</a>, the user agent should stop it.</li>

      <li><a>Forget the media element's media-resource-specific tracks</a>.</li>

      <li>If <code>readyState</code> is not set to <code>HAVE_NOTHING</code>, then set it to that state.

      </li>

      <li>If the <code>paused</code> attribute is false, then set it to
      true.</li>

      <li>If <code>seeking</code> is true, set it to false.</li>

      <li>

      Set the <a>current playback position</a> to 0.

      Set the <a>official playback position</a> to 0.

      If this changed the <a>official playback position</a>, then <a>queue a task</a>
      to <a>fire a simple event</a> named <code>timeupdate</code> at the <a>media element</a>.

      </li>

      <li>Set the <a>initial playback position</a> to 0.</li>

      <li>Set the <a>timeline offset</a> to Not-a-Number (NaN).</li>

      <li>

      Update the <code>duration</code> attribute to Not-a-Number
      (NaN).

      <p class="note">
    The user agent <a>will not</a> fire a <code>durationchange</code> event for this particular change of
      the duration.
  </p>

      </li>

    </ol>

    </li>

    <li>Set the <code>playbackRate</code> attribute to the value of
    the <code>defaultPlaybackRate</code> attribute.</li>

    <li>Set the <code>error</code> attribute to null and the
    <a>autoplaying flag</a> to true.</li>

    <li>Invoke the <a>media element</a>'s <a>resource selection algorithm</a>.</li>

    <li>

    <p class="note">
    Playback of any previously playing <a>media resource</a> for this element
    stops.

  </p></li>

  </ol>

  The <dfn>resource selection algorithm</dfn> for a
  <a>media element</a> is as follows. This algorithm is always invoked as part of a <a>task</a>, but one
  of the first steps in the algorithm is to return and continue running the remaining steps
  <a>in parallel</a>. In addition, this algorithm interacts
  closely with the <a>event loop</a> mechanism; in particular, it has <a>synchronous sections</a> (which are triggered as part of the <a>event loop</a>
  algorithm). Steps in such sections are marked with &#x231B;.

  <ol>

    <li>Set the element's <code>networkState</code> attribute to
    the <code>NETWORK_NO_SOURCE</code> value.</li>

    <li>Set the element's <a>show poster flag</a> to true.</li>

    <li>Set the <a>media element</a>'s <a>delaying-the-load-event flag</a> to true
    (this <a>delays the load event</a>).</li>

    <li><a>In parallel</a> <a>await a stable state</a>, allowing the <a>task</a> that invoked this algorithm to continue. The <a>synchronous
    section</a> consists of all the remaining steps of this algorithm until the algorithm says the
    <a>synchronous section</a> has ended. (Steps in <a>synchronous sections</a> are marked with &#x231B;.)</li>

    <li>

    &#x231B; If the <a>media element</a>'s <a>blocked-on-parser</a> flag is false,
    then <a>populate the list of pending text tracks</a>.

    </li>

    <li>

    &#x231B; If the <a>media element</a> has an <a>assigned media provider
    object</a>, then let <var>mode</var> be <i>object</i>.

    &#x231B; Otherwise, if the <a>media element</a> has no <a>assigned media provider
    object</a> but has a <code>src</code>
    attribute, then let <var>mode</var> be <i>attribute</i>.

    &#x231B; Otherwise, if the <a>media element</a> does not have an <a>assigned media provider
    object</a> and does not have a <code>src</code> attribute, but does have a <code>source</code> element child, then
    let <var>mode</var> be <i>children</i> and let <var>candidate</var>
    be the first such <code>source</code> element child in <a>tree order</a>.

    &#x231B; Otherwise the <a>media element</a> has no <a>assigned media provider
    object</a> and has neither a <code>src</code> attribute nor a <code>source</code> element child: set the
    <code>networkState</code> to <code>NETWORK_EMPTY</code>, and abort these steps; the
    <a>synchronous section</a> ends.

    </li>

    <li>&#x231B; Set the <a>media element</a>'s <code>networkState</code> to <code>NETWORK_LOADING</code>.</li>

    <li>&#x231B; <a>Queue a task</a> to <a>fire a simple event</a> named <code>loadstart</code> at the <a>media element</a>.</li>

    <li>

    Run the appropriate steps from the following list:

    <dl class="switch">

      <dt>If <var>mode</var> is <i>object</i></dt>

      <dd>

      <ol>

        <li>&#x231B; Set the <code>currentSrc</code> attribute to
        the empty string.</li>

        <li>End the <a>synchronous section</a>, continuing the remaining steps
        <a>in parallel</a>.</li>

        <li>Run the <a>resource fetch algorithm</a>
        with the <a>assigned media provider object</a>. If that algorithm returns without
        aborting <em>this</em> one, then the load failed.</li>

        <li><i>Failed with media provider</i>: Reaching this step indicates that the media
        resource failed to load. <a>Queue a task</a> to run the <a>dedicated media source
        failure steps</a>.</li>

        <li>Wait for the <a>task</a> queued by the previous step to have
        executed.</li>

        <li>Abort these steps. The element won't attempt to load another resource until this
        algorithm is triggered again.</li>

      </ol>

      </dd>

      <dt>If <var>mode</var> is <i>attribute</i></dt>

      <dd>

      <ol>

        <li>&#x231B; If the <code>src</code>
        attribute's value is the empty string, then end the <a>synchronous section</a>, and jump
        down to the <i>failed with attribute</i> step below.</li>

        <li>&#x231B; Let <var>absolute URL</var> be the <a>absolute URL</a> that
        would have resulted from <a>resolving</a> the <a>URL</a>
        specified by the <code>src</code> attribute's value relative to the
        <a>media element</a> when the <code>src</code> attribute was last
      changed.

        </li><li>&#x231B; If <var>absolute URL</var> was obtained successfully, set the <code>currentSrc</code> attribute to <var>absolute
        URL</var>.</li>

        <li>End the <a>synchronous section</a>, continuing the remaining steps
        <a>in parallel</a>.</li>

        <li>If <var>absolute URL</var> was obtained successfully, run the <a>resource fetch algorithm</a> with <var>absolute
        URL</var>. If that algorithm returns without aborting <em>this</em> one, then the load
        failed.</li>

        <li><i>Failed with attribute</i>: Reaching this step indicates that the media resource
        failed to load or that the given <a>URL</a> could not be <a>resolved</a>. <a>Queue a task</a> to run the <a>dedicated media source
        failure steps</a>.</li>

        <li>Wait for the <a>task</a> queued by the previous step to have
        executed.</li>

        <li>Abort these steps. The element won't attempt to load another resource until this
        algorithm is triggered again.</li>

      </ol>

      </dd>

      <dt>Otherwise (<var>mode</var> is <i>children</i>)</dt>

      <dd>

      <ol>

        <li>

        &#x231B; Let <var>pointer</var> be a position defined by two adjacent nodes in the
        <a>media element</a>'s child list, treating the start of the list (before the first
        child in the list, if any) and end of the list (after the last child in the list, if any) as
        nodes in their own right. One node is the node before <var>pointer</var>, and the
        other node is the node after <var>pointer</var>. Initially, let <var>pointer</var> be the position between the <var>candidate</var> node and the
        next node, if there are any, or the end of the list, if it is the last node.

        As <a>nodes are inserted</a> and <a>removed</a> into the <a>media element</a>, <var>pointer</var> must be updated as follows:

        <dl>

          <dt>If a new <a>node is inserted</a> between the two nodes that define <var>pointer</var></dt>

          <dd>Let <var>pointer</var> be the point between the node before <var>pointer</var> and the new node. In other words, insertions at <var>pointer</var> go after <var>pointer</var>.</dd>

          <dt>If the node before <var>pointer</var> is removed</dt>

          <dd>Let <var>pointer</var> be the point between the node after <var>pointer</var> and the node before the node after <var>pointer</var>. In
          other words, <var>pointer</var> doesn't move relative to the remaining nodes.</dd>

          <dt>If the node after <var>pointer</var> is removed</dt>

          <dd>Let <var>pointer</var> be the point between the node before <var>pointer</var> and the node after the node before <var>pointer</var>. Just
          as with the previous case, <var>pointer</var> doesn't move relative to the remaining
          nodes.</dd>

        </dl>

        Other changes don't affect <var>pointer</var>.

        </li>

        <li>&#x231B; <i>Process candidate</i>: If <var>candidate</var> does not have a
        <code>src</code> attribute, or if its <code>src</code> attribute's value is the empty string, then end the
        <a>synchronous section</a>, and jump down to the <i>failed with elements</i> step
        below.</li>

        <li>&#x231B; Let <var>absolute URL</var> be the <a>absolute URL</a> that
        would have resulted from <a>resolving</a> the <a>URL</a>
      specified by <var>candidate</var>'s <code>src</code>
      attribute's value relative to the <var>candidate</var> when the <code>src</code> attribute was last changed.

        </li><li>&#x231B; If <var>absolute URL</var> was not obtained successfully, then end the
        <a>synchronous section</a>, and jump down to the <i>failed with elements</i> step
        below.</li>

        <li>&#x231B; If <var>candidate</var> has a <code>type</code> attribute whose value, when parsed as a <a>MIME
        type</a> (including any codecs described by the <code>codecs</code> parameter, for
        types that define that parameter), represents <a>a type that the user agent knows it cannot
        render</a>, then end the <a>synchronous section</a>, and jump down to the <i>failed with elements</i> step below.</li>

        <li>&#x231B; Set the <code>currentSrc</code> attribute to <var>absolute URL</var>.</li>

        <li>End the <a>synchronous section</a>, continuing the remaining steps
        <a>in parallel</a>.</li>

        <li>Run the <a>resource fetch algorithm</a> with
        <var>absolute URL</var>. If that algorithm returns without aborting <em>this</em> one,
        then the load failed.</li>

        <li><i>Failed with elements</i>: <a>Queue a task</a> to <a>fire a simple
        event</a> named <code>error</code> at the <var>candidate</var> element.</li>

        <li><a>Await a stable state</a>. The <a>synchronous section</a>
        consists of all the remaining steps of this algorithm until the algorithm says the
        <a>synchronous section</a> has ended. (Steps in <a>synchronous sections</a> are marked with &#x231B;.)</li>

        <li>&#x231B; <a>Forget the media element's media-resource-specific
        tracks</a>.</li>

        <li>&#x231B; <i>Find next candidate</i>: Let <var>candidate</var> be
        null.</li>

        <li>&#x231B; <i>Search loop</i>: If the node after <var>pointer</var> is
        the end of the list, then jump to the <i>waiting</i> step below.</li>

        <li>&#x231B; If the node after <var>pointer</var> is a <code>source</code> element,
        let <var>candidate</var> be that element.</li>

        <li>&#x231B; Advance <var>pointer</var> so that the node before <var>pointer</var> is now the node that was after <var>pointer</var>, and the node
        after <var>pointer</var> is the node after the node that used to be after <var>pointer</var>, if any.</li>

        <li>&#x231B; If <var>candidate</var> is null, jump back to the <i>search
        loop</i> step. Otherwise, jump back to the <i>process candidate</i> step.</li>

        <li>&#x231B; <i>Waiting</i>: Set the element's <code>networkState</code> attribute to the <code>NETWORK_NO_SOURCE</code> value.</li>

        <li>&#x231B; Set the element's <a>show poster flag</a> to true.</li>

        <li>&#x231B; <a>Queue a task</a> to set the element's <a>delaying-the-load-event
        flag</a> to false. This stops <a>delaying the load
        event</a>.</li>

        <li>End the <a>synchronous section</a>, continuing the remaining steps
        <a>in parallel</a>.</li>

        <li>Wait until the node after <var>pointer</var> is a node other than the end of
        the list. (This step might wait forever.)</li>

        <li><a>Await a stable state</a>. The <a>synchronous section</a>
        consists of all the remaining steps of this algorithm until the algorithm says the
        <a>synchronous section</a> has ended. (Steps in <a>synchronous sections</a> are marked with &#x231B;.)</li>

        <li>&#x231B; Set the element's <a>delaying-the-load-event flag</a> back to true (this
        <a>delays the load event</a> again, in case it hasn't been
        fired yet).

        </li><li>&#x231B; Set the <code>networkState</code> back to <code>NETWORK_LOADING</code>.</li>

        <li>&#x231B; Jump back to the <i>find next candidate</i> step above.</li>

      </ol>

      </dd>

    </dl>

    The <dfn>dedicated media source failure steps</dfn> are the following steps:

    <ol>

      <li>Set the <code>error</code> attribute to a new
      <code>MediaError</code> object whose <code>code</code> attribute
      is set to <code>MEDIA_ERR_SRC_NOT_SUPPORTED</code>.</li>

      <li><a>Forget the media element's media-resource-specific tracks</a>.</li>

      <li>Set the element's <code>networkState</code> attribute to
      the <code>NETWORK_NO_SOURCE</code> value.</li>

      <li>Set the element's <a>show poster flag</a> to true.</li>

      <li><a>Fire a simple event</a> named <code>error</code> at
      the <a>media element</a>.</li>

      <li>Set the element's <a>delaying-the-load-event flag</a> to false. This stops <a>delaying the load event</a>.</li>

    </ol>

    </li>

  </ol>

  The <dfn>resource fetch algorithm</dfn> for a <a>media
  element</a> and a given <a>absolute URL</a> or <a>media provider object</a> is as
  follows:

  <ol>

    <li>If the algorithm was invoked with a <a>URL</a>, then let <var>mode</var> be
    <i>remote</i>, otherwise let <var>mode</var> be <i>local</i>.</li>

    <li>If <var>mode</var> is <i>local</i>, then let the <var>current media resource</var> be the
    resource given by the <a>absolute URL</a> passed to this algorithm; otherwise, let the
    <var>current media resource</var> be the resource given by the <a>media provider
    object</a>. Either way, the <var>current media resource</var> is now the element's <a>media
    resource</a>.</li>

    <li>Remove all <a>media-resource-specific text
    tracks</a> from the <a>media element</a>'s <a>list of pending text tracks</a>, if
    any.

    </li><li>

    Run the appropriate steps from the following list:

    <dl class="switch">

      <dt>If <var>mode</var> is remote</dt>

      <dd>

      <ol>

        <li>

        Optionally, run the following substeps. This is the expected behavior if the user agent
        intends to not attempt to fetch the resource until the user requests it explicitly (e.g. as
        a way to implement the <code>preload</code> attribute's <code>none</code> keyword).

        <ol>

          <li>Set the <code>networkState</code> to <code>NETWORK_IDLE</code>.</li>

          <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>suspend</code> at the element.</li>

          <li><a>Queue a task</a> to set the element's <a>delaying-the-load-event flag</a>
          to false. This stops <a>delaying the load
          event</a>.</li>

          <li>Wait for the task to be run.</li>

          <li>Wait for an implementation-defined event (e.g. the user requesting that the media
          element begin playback).</li>

          <li>Set the element's <a>delaying-the-load-event flag</a> back to true (this <a>delays the load event</a> again, in case it hasn't been fired
          yet).

          </li><li>Set the <code>networkState</code> to <code>NETWORK_LOADING</code>.</li>

        </ol>

        </li>

        <li>

        Let <var>request</var> be the result of <a>creating a potential-CORS request</a> given
        <var>current media resource</var>'s <a>absolute URL</a> and the <a>media
        element</a>'s <code>crossorigin</code> content attribute
        value.

        Set <var>request</var>'s <a>client</a> to the
        <a>media element</a>'s <a>node document</a>'s <code>Window</code> object's
        <a>environment settings object</a> and <a>type</a>
        to "<code>audio</code>" if the <a>media element</a> is an <code>audio</code>
        element and to "<code>video</code>" otherwise.

        <a>Fetch</a> <var>request</var>.

        The <var>response</var>'s <a>unsafe response</a> obtained in this fashion, if any,
        contains the <a>media data</a>. It can be <a>CORS-same-origin</a> or
        <a>CORS-cross-origin</a>; this affects whether subtitles referenced in the <a>media
        data</a> are exposed in the API and, for <code>video</code> elements, whether a
        <code>canvas</code> gets tainted when the video is drawn on it.

        The <dfn>stall timeout</dfn> is a user-agent defined length of time, which should be about
        three seconds. When a <a>media element</a> that is actively attempting to obtain
        <a>media data</a> has failed to receive any data for a duration equal to the <a>stall
        timeout</a>, the user agent must <a>queue a task</a> to <a>fire a simple
        event</a> named <code>stalled</code> at the element.

        User agents may allow users to selectively block or slow <a>media data</a> downloads.
        When a <a>media element</a>'s download has been blocked altogether, the user agent must
        act as if it was stalled (as opposed to acting as if the connection was closed). The rate of the
        download may also be throttled automatically by the user agent, e.g. to balance the download
        with other connections sharing the same bandwidth.

        User agents may decide to not download more content at any time, e.g.
        after buffering five minutes of a one hour media resource, while waiting for the user to decide
        whether to play the resource or not, while waiting for user input in an interactive resource, or
        when the user navigates away from the page. When a <a>media element</a>'s download has
        been suspended, the user agent must <a>queue a task</a>, to set the <code>networkState</code> to <code>NETWORK_IDLE</code> and <a>fire a simple event</a> named
        <code>suspend</code> at the element. If and when downloading of the
        resource resumes, the user agent must <a>queue a task</a> to set the <code>networkState</code> to <code>NETWORK_LOADING</code>. Between the queuing of these tasks,
        the load is suspended (so <code>progress</code> events don't fire,
        as described above).<p></p>

        <p class="note">
    The <code>preload</code> attribute provides a hint
        regarding how much buffering the author thinks is advisable, even in the absence of the <code>autoplay</code> attribute.
  </p>

        When a user agent decides to completely suspend a download, e.g., if it is waiting until
        the user starts playback before downloading any further content, the user agent must
        <a>queue a task</a> to set the element's <a>delaying-the-load-event flag</a> to
        false. This stops <a>delaying the load event</a>.

        The user agent may use whatever means necessary to fetch the resource (within the constraints
        put forward by this and other specifications); for example, reconnecting to the server in the
        face of network errors, using HTTP range retrieval requests, or switching to a streaming
        protocol. The user agent must consider a resource erroneous only if it has given up trying to
        fetch it.

        To determine the format of the <a>media resource</a>, the user agent must use the
        <a>rules for sniffing audio and video specifically</a>.

        While the load is not suspended (see below), every 350ms (Â±200ms) or for every byte
        received, whichever is <em>least</em> frequent, <a>queue a task</a> to <a>fire a simple
        event</a> named <code>progress</code> at the element.

        The <a>networking task source</a> <a>tasks</a> to
        process the data as it is being fetched must each <a>immediately</a> <a>queue a task</a> to
        run the first appropriate steps from the <a>media data processing steps list</a>
        below. (A new task is used for this so that the work described below occurs relative to the
        <a>media element event task source</a> rather than the <a>networking task
        source</a>.)

        When the <a>networking task source</a> has <a>queued</a> the last <a>task</a> as part of fetching the
        <a>media resource</a> (i.e. once the download has completed), if the fetching process
        completes without errors, including decoding the media data, and if all of the data is available
        to the user agent without network access, then, the user agent must move on to the <i>final step</i> below.
        This might never happen, e.g. when streaming an infinite resource such as Web radio, or if the
        resource is longer than the user agent's ability to cache data.

        While the user agent might still need network access to obtain parts of the <a>media
        resource</a>, the user agent must remain on this step.

        <p class="example">For example, if the user agent has discarded the first half of a video, the
        user agent will remain at this step even once the <a>playback has
        ended</a>, because there is always the chance the user will seek back to the start. In fact,
        in this situation, once <a>playback has ended</a>, the user agent
        will end up firing a <code>suspend</code> event, as described
        earlier.</p>

        </li>

      </ol>

      </dd>

      <dt>Otherwise (<var>mode</var> is <i>local</i>)</dt>

      <dd>

      The resource described by the <var>current media resource</var>, if any, contains the
      <a>media data</a>. It is <a>CORS-same-origin</a>.

      If the <var>current media resource</var> is a raw data stream (e.g. from a
      <code>File</code> object), then to determine the format of the <a>media resource</a>,
      the user agent must use the <a>rules for sniffing audio and video specifically</a>.
      Otherwise, if the data stream is pre-decoded, then the format is the format given by the
      relevant specification.

      Whenever new data for the <var>current media resource</var> becomes available, <a>queue
      a task</a> to run the first appropriate steps from the <a>media data processing steps
      list</a> below.

      When the <var>current media resource</var> is permanently exhausted (e.g. all the bytes of
      a <code>Blob</code> have been processed), if there were no decoding errors, then the user
      agent must move on to the <i>final step</i> below. This might never happen, e.g. if the
      <var>current media resource</var> is a <code>MediaStream</code>.

      </dd>

    </dl>

    The <dfn>media data processing steps list</dfn> is as follows:

    <dl class="switch">

      <dt>If the <a>media data</a> cannot be fetched at all, due to network errors, causing the
      user agent to give up trying to fetch the resource</dt>

      <dt>If the <a>media data</a> can be fetched but is found by inspection to be in an
      unsupported format, or can otherwise not be rendered at all</dt>

      <dd>

      DNS errors, HTTP 4xx and 5xx errors (and equivalents in other protocols), and other fatal
      network errors that occur before the user agent has established whether the <var>current media resource</var> is usable, as well as the file using an unsupported
      container format, or using unsupported codecs for all the data, must cause the user agent to
      execute the following steps:

      <ol>

        <li>The user agent should cancel the fetching process.</li>

        <li>Abort this subalgorithm, returning to the <a>resource selection algorithm</a>.

      </li></ol>

      </dd>

      <dt id="found-another-audio-track">If the <a>media resource</a> is found to have an audio
      track</dt>

      <dd>

      <ol>

        <li>Create an <code>AudioTrack</code> object to represent the audio track.</li>

        <li>Update the <a>media element</a>'s <code>audioTracks</code> attribute's <code>AudioTrackList</code>
        object with the new <code>AudioTrack</code> object.</li>

        <li>Let <var>enable</var> be <i>unknown</i>.</li>

        <li>

        If either the <a>media resource</a> or the address of the <var>current
        media resource</var> indicate a particular set of audio tracks to enable, or if the user
        agent has information that would facilitate the selection of specific audio tracks to
        improve the user's experience, then: if this audio track is one of the ones to enable, then
        set <var>enable</var> to <i>true</i>, otherwise, set <var>enable</var>
        to <i>false</i>.

        <p class="example">This could be triggered by <cite>Media Fragments URI</cite> fragment
        identifier syntax, but it could also be triggered e.g. by the user agent selecting a 5.1
        surround sound audio track over a stereo audio track. [[!MEDIA-FRAGS]]</p>

        </li>

        <li>If <var>enable</var> is still <i>unknown</i>, then, if the <a>media
        element</a> does not yet have an <a>enabled</a>
        audio track, then set <var>enable</var> to <i>true</i>, otherwise, set <var>enable</var> to <i>false</i>.</li>

        <li>If <var>enable</var> is <i>true</i>, then enable this audio track,
        otherwise, do not enable this audio track.</li>

        <li><a>Fire</a> a <a>trusted</a> event with the name <code>addtrack</code>, that does not bubble and is not cancelable,
        and that uses the <code>TrackEvent</code> interface, with the <code>track</code> attribute initialized to the new
        <code>AudioTrack</code> object, at this <code>AudioTrackList</code> object.</li>

      </ol>

      </dd>

      <dt id="found-another-video-track">If the <a>media resource</a> is found to have a video
      track</dt>

      <dd>

      <ol>

        <li>Create a <code>VideoTrack</code> object to represent the video track.</li>

        <li>Update the <a>media element</a>'s <code>videoTracks</code> attribute's <code>VideoTrackList</code>
        object with the new <code>VideoTrack</code> object.</li>

        <li>Let <var>enable</var> be <i>unknown</i>.</li>

        <li>

        If either the <a>media resource</a> or the address of the <var>current
        media resource</var> indicate a particular set of video tracks to enable, or if the user
        agent has information that would facilitate the selection of specific video tracks to
        improve the user's experience, then: if this video track is the first such video track, then
        set <var>enable</var> to <i>true</i>, otherwise, set <var>enable</var>
        to <i>false</i>.

        <p class="example">This could again be triggered by <cite>Media Fragments URI</cite>
        fragment identifier syntax.</p>

        </li>

        <li>If <var>enable</var> is still <i>unknown</i>, then, if the <a>media
        element</a> does not yet have a <a>selected</a>
        video track, then set <var>enable</var> to <i>true</i>, otherwise, set <var>enable</var> to <i>false</i>.</li>

        <li>If <var>enable</var> is <i>true</i>, then select this track and unselect any
        previously selected video tracks, otherwise, do not select this video track. If other tracks
        are unselected, then <a>a <code>change</code> event will be fired.</a></li>

        <li><a>Fire</a> a <a>trusted</a> event with the name <code>addtrack</code>, that does not bubble and is not cancelable,
        and that uses the <code>TrackEvent</code> interface, with the <code>track</code> attribute initialized to the new
        <code>VideoTrack</code> object, at this <code>VideoTrackList</code> object.</li>

      </ol>

      </dd>

      <dt id="getting-media-metadata">Once enough of the <a>media data</a> has been fetched to
      determine the duration of the <a>media resource</a>, its dimensions, and other
      metadata</dt>

      <dd>

      This indicates that the resource is usable. The user agent must follow these substeps:

      <ol>

        <li>

        <a>Establish the media timeline</a> for the purposes of the <a>current playback
        position</a> and the <a>earliest possible position</a>, based on the <a>media data</a>.

        </li>

        <li>

        Update the <a>timeline offset</a> to the date and time that corresponds to the zero
        time in the <a>media timeline</a> established in the previous step, if any. If no
        explicit time and date is given by the <a>media resource</a>, the <a>timeline
        offset</a> must be set to Not-a-Number (NaN).

        </li>

        <li>Set the <a>current playback position</a> and the <a>official playback
        position</a> to the <a>earliest possible position</a>.</li>

        <li>

        Update the <code>duration</code> attribute with the time of
        the last frame of the resource, if known, on the <a>media timeline</a> established
        above. If it is not known (e.g. a stream that is in principle infinite), update the <code>duration</code> attribute to the value positive Infinity.

        <p class="note">
    The user agent <a>will</a> <a>queue a task</a>
        to <a>fire a simple event</a> named <code>durationchange</code> at the element at this point.
  </p>

        </li>

        <li>

        For <code>video</code> elements, set the <code>videoWidth</code> and <code>videoHeight</code> attributes, and <a>queue a task</a>
        to <a>fire a simple event</a> named <code>resize</code> at
        the <a>media element</a>.

        <p class="note">
    Further <code>resize</code> events will be fired
        if the dimensions subsequently change.
  </p>

        </li>

        <li>

        Set the <code>readyState</code> attribute to <code>HAVE_METADATA</code>.

        <p class="note">
    A <code>loadedmetadata</code> DOM event
        <a>will be fired</a> as part of setting the <code>readyState</code> attribute to a new value.
  </p>

        </li>

        <li>Let <var>jumped</var> be false.</li>

        <li>If the <a>media element</a>'s <a>default playback start position</a> is
        greater than zero, then <a>seek</a> to that time, and let <var>jumped</var> be true.</li>

        <li>Let the <a>media element</a>'s <a>default playback
        start position</a> be zero.</li>

        <li>Let the <var>initial playback position</var> be zero.</li>

        <li>

        If either the <a>media resource</a> or the address of the <var>current
        media resource</var> indicate a particular start time, then set the <var>initial playback
        position</var> to that time and, if <var>jumped</var> is still false, <a>seek</a> to that time and let <var>jumped</var> be
        true.

        <p class="example">For example, with media formats that support the <cite>Media Fragments
        URI</cite> fragment identifier syntax, the fragment identifier can be used to indicate a
        start position. [[!MEDIA-FRAGS]]</p>

        </li>

        <li>If there is no <a>enabled</a> audio track, then
        enable an audio track. This <a>will cause a <code>change</code> event to be fired</a>.</li>

        <li>If there is no <a>selected</a> video track,
        then select a video track. This <a>will cause a <code>change</code> event to be fired</a>.</li>

        <li>If the <a>media element</a> has a <a>current media controller</a>, then:
        if <var>jumped</var> is true and the <var>initial playback position</var>,
        relative to the <a>current media controller</a>'s timeline, is greater than the
        <a>current media controller</a>'s <a>media controller position</a>, then
        <a>seek the media controller</a> to the <a>media element</a>'s <var>initial
        playback position</var>, relative to the <a>current media controller</a>'s timeline;
        otherwise, <a>seek</a> the <a>media element</a> to the
        <a>media controller position</a>, relative to the <a>media element</a>'s
        timeline.</li>

      </ol>

      Once the <code>readyState</code> attribute reaches <code>HAVE_CURRENT_DATA</code>, <a>after
      the <code>loadeddata</code> event has been fired</a>, set the
      element's <a>delaying-the-load-event flag</a> to false. This stops <a>delaying the load event</a>.

      <p class="note">
    A user agent that is attempting to reduce network usage while still fetching
      the metadata for each <a>media resource</a> would also stop buffering at this point,
      following <a>the rules described previously</a>, which involve the
      <code>networkState</code> attribute switching to the <code>NETWORK_IDLE</code> value and a <code>suspend</code> event firing.
  </p>

      <p class="note">
    The user agent is <em>required</em> to determine the duration of the
      <a>media resource</a> and go through this step before playing.
  </p>

      </dd>

      <dt>Once the entire <a>media resource</a> has been fetched (but potentially before any of
      it has been decoded)</dt>

      <dd>

      <a>Fire a simple event</a> named <code>progress</code>
      at the <a>media element</a>.

      Set the <code>networkState</code> to <code>NETWORK_IDLE</code> and <a>fire a simple event</a> named
      <code>suspend</code> at the <a>media element</a>.

      If the user agent ever discards any <a>media data</a> and then needs to resume the
      network activity to obtain it again, then it must <a>queue a task</a> to set the <code>networkState</code> to <code>NETWORK_LOADING</code>.

      <p class="note">
    If the user agent can keep the <a>media resource</a> loaded, then the
      algorithm will continue to its <i>final step</i> below, which aborts the algorithm.
  </p>

      </dd>

      <dt>If the connection is interrupted after some <a>media data</a> has been received,
      causing the user agent to give up trying to fetch the resource</dt>

      <dd>

      Fatal network errors that occur after the user agent has established whether the <var>current media resource</var> is usable (i.e. once the <a>media element</a>'s
      <code>readyState</code> attribute is no longer <code>HAVE_NOTHING</code>) must cause the user agent to execute the
      following steps:

      <ol>

        <li>The user agent should cancel the fetching process.</li>

        <li>Set the <code>error</code> attribute to a new
        <code>MediaError</code> object whose <code>code</code> attribute
        is set to <code>MEDIA_ERR_NETWORK</code>.</li>

        <li>Set the element's <code>networkState</code> attribute
        to the <code>NETWORK_IDLE</code> value.</li>

        <li>Set the element's <a>delaying-the-load-event flag</a> to false. This stops <a>delaying the load event</a>.</li>

        <li><a>Fire a simple event</a> named <code>error</code> at
        the <a>media element</a>.</li>

        <li>Abort the overall <a>resource selection
        algorithm</a>.</li>

      </ol>

      </dd>

      <dt id="fatal-decode-error">If the <a>media data</a> is corrupted</dt>

      <dd>

      Fatal errors in decoding the <a>media data</a> that occur after the user agent has
      established whether the <var>current media resource</var> is usable (i.e. once the <a>media element</a>'s
      <code>readyState</code> attribute is no longer <code>HAVE_NOTHING</code>) must cause the
      user agent to execute the following steps:

      <ol>

        <li>The user agent should cancel the fetching process.</li>

        <li>Set the <code>error</code> attribute to a new
        <code>MediaError</code> object whose <code>code</code> attribute
        is set to <code>MEDIA_ERR_DECODE</code>.</li>

        <li>Set the element's <code>networkState</code> attribute
        to the <code>NETWORK_IDLE</code> value.</li>

        <li>Set the element's <a>delaying-the-load-event flag</a> to false. This stops <a>delaying the load event</a>.</li>

        <li><a>Fire a simple event</a> named <code>error</code> at
        the <a>media element</a>.</li>

        <li>Abort the overall <a>resource selection
        algorithm</a>.</li>

      </ol>

      </dd>

      <dt>If the <a>media data</a> fetching process is aborted by the user</dt>

      <dd>

      The fetching process is aborted by the user, e.g. because the user
      pressed a "stop" button, the user agent must execute the following steps. These steps are not
      followed if the <code>load()</code> method itself is invoked while
      these steps are running, as the steps above handle that particular kind of abort.

      <ol>

        <li>The user agent should cancel the fetching process.</li>

        <li>Set the <code>error</code> attribute to a new
        <code>MediaError</code> object whose <code>code</code> attribute
        is set to <code>MEDIA_ERR_ABORTED</code>.</li>

        <li><a>Fire a simple event</a> named <code>abort</code> at
        the <a>media element</a>.</li>

        <li>

        If the <a>media element</a>'s <code>readyState</code>
        attribute has a value equal to <code>HAVE_NOTHING</code>, set
        the element's <code>networkState</code> attribute to the
        <code>NETWORK_EMPTY</code> value, set the element's
        <a>show poster flag</a> to true, and <a>fire a simple event</a> named <code>emptied</code> at the element.

        Otherwise, set the element's <code>networkState</code>
        attribute to the <code>NETWORK_IDLE</code> value.

        </li>

        <li>Set the element's <a>delaying-the-load-event flag</a> to false. This stops <a>delaying the load event</a>.</li>

        <li>Abort the overall <a>resource selection
        algorithm</a>.</li>

      </ol>

      </dd>

      <dt id="non-fatal-media-error">If the <a>media data</a> can be fetched but has non-fatal
      errors or uses, in part, codecs that are unsupported, preventing the user agent from rendering
      the content completely correctly but not preventing playback altogether</dt>

      <dd>

      The server returning data that is partially usable but cannot be optimally rendered must
      cause the user agent to render just the bits it can handle, and ignore the rest.

      </dd>

      <dt id="found-a-media-resource-specific-timed-track">If the <a>media resource</a> is
      found to declare a <a>media-resource-specific text track</a> that the user agent
      supports</dt>

      <dd>

      If the <a>media data</a> is <a>CORS-same-origin</a>, run the <a>steps to
      expose a media-resource-specific text track</a> with the relevant data.

      <p class="note">
    Cross-origin videos do not expose their subtitles, since that would allow
      attacks such as hostile sites reading subtitles from confidential videos on a user's
      intranet.
  </p>

      </dd>

    </dl>

    </li>

    <li><i>Final step:</i> If the user agent ever reaches this step (which can only happen if the entire resource
    gets loaded and kept available): abort the overall <a>resource selection algorithm</a>.</li>

  </ol>

  When a <a>media element</a> is to <dfn>forget the media element's media-resource-specific
  tracks</dfn>, the user agent must remove from the <a>media element</a>'s <a>list of text
  tracks</a> all the <a>media-resource-specific
  text tracks</a>, then empty the <a>media element</a>'s <code>audioTracks</code> attribute's <code>AudioTrackList</code> object,
  then empty the <a>media element</a>'s <code>videoTracks</code>
  attribute's <code>VideoTrackList</code> object. No events (in particular, no <code>removetrack</code> events) are fired as part of this; the <code>error</code> and <code>emptied</code>
  events, fired by the algorithms that invoke this one, can be used instead.

  </div>

  <hr />

  The <dfn><code>preload</code></dfn> attribute is an <a>enumerated
  attribute</a>. The following table lists the keywords and states for the attribute â the
  keywords in the left column map to the states in the cell in the second column on the same row as
  the keyword. The attribute can be changed even once the <a>media resource</a> is being
  buffered or played; the descriptions in the table below are to be interpreted with that in
  mind.

  <table>
    <thead>
    <tr>
      <th> Keyword
      </th><th> State
      </th><th> Brief description
    </th></tr></thead><tbody>
    <tr>
      <td><dfn><code>none</code></dfn>
      </td><td><dfn>None</dfn>
      </td><td>Hints to the user agent that either the author does not expect the user to need the media resource, or that the server wants to minimize unnecessary traffic.
          This state does not provide a hint regarding how aggressively to actually download the media resource if buffering starts anyway (e.g. once the user hits "play").
    </td></tr><tr>
      <td><dfn><code>metadata</code></dfn>
      </td><td><dfn>Metadata</dfn>
      </td><td>Hints to the user agent that the author does not expect the user to need the media resource, but that fetching the resource metadata (dimensions, track list, duration, etc), and maybe even the first few frames, is reasonable. If the user agent precisely fetches no more than the metadata, then the <a>media element</a> will end up with its <code>readyState</code> attribute set to <code>HAVE_METADATA</code>; typically though, some frames will be obtained as well and it will probably be <code>HAVE_CURRENT_DATA</code> or <code>HAVE_FUTURE_DATA</code>.
          When the media resource is playing, hints to the user agent that bandwidth is to be considered scarce, e.g. suggesting throttling the download so that the media data is obtained at the slowest possible rate that still maintains consistent playback.
    </td></tr><tr>
      <td><dfn><code>auto</code></dfn>
      </td><td><dfn>Automatic</dfn>
      </td><td>Hints to the user agent that the user agent can put the user's needs first without risk to the server, up to and including optimistically downloading the entire resource.
  </td></tr></tbody></table>

  The empty string is also a valid keyword, and maps to the <a>Automatic</a> state. The attribute's <i>missing value default</i> is user-agent defined, though the <a>Metadata</a> state is suggested as a compromise
  between reducing server load and providing an optimal user experience.

  <p class="note">
    Authors might switch the attribute from "<code>none</code>" or "<code>metadata</code>" to "<code>auto</code>" dynamically once the user begins playback. For
  example, on a page with many videos this might be used to indicate that the many videos are not to
  be downloaded unless requested, but that once one <em>is</em> requested it is to be downloaded
  aggressively.
  </p>

  <div class="impl">

  The <code>preload</code> attribute is intended to provide a hint to
  the user agent about what the author thinks will lead to the best user experience. The attribute
  may be ignored altogether, for example based on explicit user preferences or based on the
  available connectivity.

  The <dfn><code>preload</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name, <a>limited to only known
  values</a>.

  </div>

  <p class="note">
    The <code>autoplay</code> attribute can override the
  <code>preload</code> attribute (since if the media plays, it naturally
  has to buffer first, regardless of the hint given by the <code>preload</code> attribute). Including both is not an error, however.
  </p>

  <hr />

  <dl class="domintro">

    <dt><var>media</var> . <code>buffered</code></dt>

    <dd>

    Returns a <code>TimeRanges</code> object that represents the ranges of the <a>media
    resource</a> that the user agent has buffered.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>buffered</code></dfn> attribute must return a new
  static <a>normalized <code>TimeRanges</code> object</a> that represents the ranges of the
  <a>media resource</a>, if any, that the user agent has buffered, at the time the attribute
  is evaluated. Users agents must accurately determine the ranges available, even for media streams
  where this can only be determined by tedious inspection.

  <p class="note">
    Typically this will be a single range anchored at the zero point, but if, e.g. the
  user agent uses HTTP range requests in response to seeking, then there could be multiple
  ranges.
  </p>

  User agents may discard previously buffered data.

  <p class="note">
    Thus, a time position included within a range of the objects return by the <code>buffered</code> attribute at one time can end up being not included in
  the range(s) of objects returned by the same attribute at later times.
  </p>

  </div>

<h5 id="offsets-into-the-media-resource">Offsets into the media resource</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>duration</code></dt>

    <dd>

    Returns the length of the <a>media resource</a>, in seconds, assuming that the start of
    the <a>media resource</a> is at time zero.

    Returns NaN if the duration isn't available.

    Returns Infinity for unbounded streams.

    </dd>

    <dt><var>media</var> . <code>currentTime</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the <a>official playback position</a>, in seconds.

    Can be set, to seek to the given time.

    Will throw an <code>InvalidStateError</code> exception if there is a <a>current media
    controller</a>.

    </dd>

  </dl>

  <div class="impl">

  A <a>media resource</a> has a <dfn>media timeline</dfn> that maps times (in seconds) to
  positions in the <a>media resource</a>. The origin of a timeline is its earliest defined
  position. The duration of a timeline is its last defined position.

  <dfn>Establishing the media
  timeline</dfn>: If the <a>media resource</a> somehow specifies an explicit timeline whose
  origin is not negative (i.e. gives each frame a specific time offset and gives the first frame a
  zero or positive offset), then the <a>media timeline</a> should be that timeline. (Whether
  the <a>media resource</a> can specify a timeline or not depends on the <a>media resource's</a> format.) If the <a>media resource</a> specifies an
  explicit start time <em>and date</em>, then that time and date should be considered the zero point
  in the <a>media timeline</a>; the <a>timeline offset</a> will be the time and date,
  exposed using the <code>getStartDate()</code> method.

  If the <a>media resource</a> has a discontinuous timeline, the user agent must extend the
  timeline used at the start of the resource across the entire resource, so that the <a>media
  timeline</a> of the <a>media resource</a> increases linearly starting from the
  <a>earliest possible position</a> (as defined below), even if the underlying <a>media
  data</a> has out-of-order or even overlapping time codes.

  <p class="example">For example, if two clips have been concatenated into one video file, but the
  video format exposes the original times for the two clips, the video data might expose a timeline
  that goes, say, 00:15..00:29 and then 00:05..00:38. However, the user agent would not expose those
  times; it would instead expose the times as 00:15..00:29 and 00:29..01:02, as a single video.</p>

  In the rare case of a <a>media resource</a> that does not have an explicit timeline, the
  zero time on the <a>media timeline</a> should correspond to the first frame of the
  <a>media resource</a>. In the even rarer case of a <a>media resource</a> with no
  explicit timings of any kind, not even frame durations, the user agent must itself determine the
  time for each frame in a user-agent-defined manner.
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

  <p class="note">
    An example of a file format with no explicit timeline but with explicit frame
  durations is the Animated GIF format. An example of a file format with no explicit timings at all
  is the JPEG-push format (<code>multipart/x-mixed-replace</code> with JPEG frames, often
  used as the format for MJPEG streams).
  </p>

  If, in the case of a resource with no timing information, the user agent will nonetheless be
  able to seek to an earlier point than the first frame originally provided by the server, then the
  zero time should correspond to the earliest seekable time of the <a>media resource</a>;
  otherwise, it should correspond to the first frame received from the server (the point in the
  <a>media resource</a> at which the user agent began receiving the stream).

  <p class="note">
    At the time of writing, there is no known format that lacks explicit frame time
  offsets yet still supports seeking to a frame before the first frame sent by the server.
  </p>

  <div class="example">
    Consider a stream from a TV broadcaster, which begins streaming on a sunny Friday afternoon in
    October, and always sends connecting user agents the media data on the same media timeline, with
    its zero time set to the start of this stream. Months later, user agents connecting to this
    stream will find that the first frame they receive has a time with millions of seconds. The <code>getStartDate()</code> method would always return the date that the
    broadcast started; this would allow controllers to display real times in their scrubber (e.g.
    "2:30pm") rather than a time relative to when the broadcast began ("8 months, 4 hours, 12
    minutes, and 23 seconds").

    Consider a stream that carries a video with several concatenated fragments, broadcast by a
    server that does not allow user agents to request specific times but instead just streams the
    video data in a predetermined order, with the first frame delivered always being identified as
    the frame with time zero. If a user agent connects to this stream and receives fragments defined
    as covering timestamps 2010-03-20 23:15:00 UTC to 2010-03-21 00:05:00 UTC and 2010-02-12 14:25:00
    UTC to 2010-02-12 14:35:00 UTC, it would expose this with a <a>media timeline</a> starting
    at 0s and extending to 3,600s (one hour). Assuming the streaming server disconnected at the end
    of the second clip, the <code>duration</code> attribute would then
    return 3,600. The <code>getStartDate()</code> method would return a
    <code>Date</code> object with a time corresponding to 2010-03-20 23:15:00 UTC. However, if a
    different user agent connected five minutes later, <em>it</em> would (presumably) receive
    fragments covering timestamps 2010-03-20 23:20:00 UTC to 2010-03-21 00:05:00 UTC and 2010-02-12
    14:25:00 UTC to 2010-02-12 14:35:00 UTC, and would expose this with a <a>media timeline</a>
    starting at 0s and extending to 3,300s (fifty five minutes). In this case, the <code>getStartDate()</code> method would return a <code>Date</code> object
    with a time corresponding to 2010-03-20 23:20:00 UTC.

    In both of these examples, the <code>seekable</code> attribute
    would give the ranges that the controller would want to actually display in its UI; typically, if
    the servers don't support seeking to arbitrary times, this would be the range of time from the
    moment the user agent connected to the stream up to the latest frame that the user agent has
    obtained; however, if the user agent starts discarding earlier information, the actual range
    might be shorter.

  </div>

  In any case, the user agent must ensure that the <a>earliest possible position</a> (as
  defined below) using the established <a>media timeline</a>, is greater than or equal to
  zero.

  The <a>media timeline</a> also has an associated clock. Which clock is used is user-agent
  defined, and may be <a>media resource</a>-dependent, but it should approximate the user's
  wall clock.

  <p class="note">
    All the <a>media elements</a> that share <a>current
  media controller</a> use the same clock for their <a>media timeline</a>.
  </p>

  <a>Media elements</a> have a <dfn>current playback position</dfn>,
  which must initially (i.e. in the absence of <a>media data</a>) be zero seconds. The
  <a>current playback position</a> is a time on the <a>media timeline</a>.

  <a>Media elements</a> also have an <dfn>official playback
  position</dfn>, which must initially be set to zero seconds. The <a>official playback
  position</a> is an approximation of the <a>current playback position</a> that is kept
  stable while scripts are running.

  <a>Media elements</a> also have a <dfn>default playback start
  position</dfn>, which must initially be set to zero seconds. This time is used to allow the
  element to be seeked even before the media is loaded.

  Each <a>media element</a> has a <dfn>show poster flag</dfn>. When a <a>media
  element</a> is created, this flag must be set to true. This flag is used to control when the
  user agent is to show a poster frame for a <code>video</code> element instead of showing the video
  contents.

  The <dfn><code>currentTime</code></dfn> attribute must, on
  getting, return the <a>media element</a>'s <a>default playback start position</a>,
  unless that is zero, in which case it must return the element's <a>official playback
  position</a>. The returned value must be expressed in seconds. On setting, if the <a>media
  element</a> has a <a>current media controller</a>, then the user agent must throw an
  <code>InvalidStateError</code> exception; otherwise, if the <a>media element</a>'s <code>readyState</code> is <code>HAVE_NOTHING</code>, then it must set the <a>media
  element</a>'s <a>default playback start position</a> to the new value; otherwise, it must
  set the <a>official playback position</a> to the new value and then <a>seek</a> to the new value. The new value must be interpreted as being in
  seconds.

  <a>Media elements</a> have an <dfn>initial playback position</dfn>,
  which must initially (i.e. in the absence of <a>media data</a>) be zero seconds. The
  <a>initial playback position</a> is updated when a <a>media resource</a> is loaded.
  The <a>initial playback position</a> is a time on the <a>media timeline</a>.

  If the <a>media resource</a> is a streaming resource, then the user agent might be unable
  to obtain certain parts of the resource after it has expired from its buffer. Similarly, some
  <a>media resources</a> might have a <a>media timeline</a> that
  doesn't start at zero. The <dfn>earliest possible position</dfn> is the earliest position in the
  stream or resource that the user agent can ever obtain again. It is also a time on the <a>media
  timeline</a>.

  <p class="note">
    The <a>earliest possible position</a> is not explicitly exposed in the API;
  it corresponds to the start time of the first range in the <code>seekable</code> attribute's <code>TimeRanges</code> object, if any, or
  the <a>current playback position</a> otherwise.
  </p>

  When the <a>earliest possible position</a> changes, then: if the <a>current playback
  position</a> is before the <a>earliest possible position</a>, the user agent must <a>seek</a> to the <a>earliest possible position</a>; otherwise, if
  the user agent has not fired a <code>timeupdate</code> event at the
  element in the past 15 to 250ms and is not still running event handlers for such an event, then
  the user agent must <a>queue a task</a> to <a>fire a simple event</a> named <code>timeupdate</code> at the element.

  <p class="note">
    Because of the above requirement and the requirement in the <a>resource fetch algorithm</a> that kicks in <a>when the metadata of the clip becomes known</a>, the <a>current
  playback position</a> can never be less than the <a>earliest possible position</a>.
  </p>

  If at any time the user agent learns that an audio or video track has ended and all <a>media
  data</a> relating to that track corresponds to parts of the <a>media timeline</a> that
  are <em>before</em> the <a>earliest possible position</a>, the user agent may <a>queue a
  task</a> to first remove the track from the <code>audioTracks</code>
  attribute's <code>AudioTrackList</code> object or the <code>videoTracks</code> attribute's <code>VideoTrackList</code> object as
  appropriate and then <a>fire</a> a <a>trusted</a> event with the name <code>removetrack</code>, that does not bubble and is not cancelable, and that
  uses the <code>TrackEvent</code> interface, with the <code>track</code> attribute initialized to the <code>AudioTrack</code> or
  <code>VideoTrack</code> object representing the track, at the <a>media element</a>'s
  aforementioned <code>AudioTrackList</code> or <code>VideoTrackList</code> object.

  The <dfn><code>duration</code></dfn> attribute must return the time
  of the end of the <a>media resource</a>, in seconds, on the <a>media timeline</a>. If
  no <a>media data</a> is available, then the attributes must return the Not-a-Number (NaN)
  value. If the <a>media resource</a> is not known to be bounded (e.g. streaming radio, or a
  live event with no announced end time), then the attribute must return the positive Infinity
  value.

  The user agent must determine the duration of the <a>media resource</a> before playing
  any part of the <a>media data</a> and before setting <code>readyState</code> to a value equal to or greater than <code>HAVE_METADATA</code>, even if doing so requires fetching multiple
  parts of the resource.

  When the length of the <a>media resource</a> changes to a known value
  (e.g. from being unknown to known, or from a previously established length to a new length) the
  user agent must <a>queue a task</a> to <a>fire a simple event</a> named <code>durationchange</code> at the <a>media element</a>. (The
  event is not fired when the duration is reset as part of loading a new media resource.) If the
  duration is changed such that the <a>current playback position</a> ends up being greater
  than the time of the end of the <a>media resource</a>, then the user agent must also <a>seek</a> to the time of the end of the <a>media resource</a>.

  <p class="example">If an "infinite" stream ends for some reason, then the duration would change
  from positive Infinity to the time of the last frame or sample in the stream, and the <code>durationchange</code> event would be fired. Similarly, if the
  user agent initially estimated the <a>media resource</a>'s duration instead of determining
  it precisely, and later revises the estimate based on new information, then the duration would
  change and the <code>durationchange</code> event would be
  fired.</p>

  Some video files also have an explicit date and time corresponding to the zero time in the
  <a>media timeline</a>, known as the <dfn>timeline offset</dfn>. Initially, the
  <a>timeline offset</a> must be set to Not-a-Number (NaN).

  The <dfn><code>getStartDate()</code></dfn> method must return <a>a new <code>Date</code> object</a> representing the current
  <a>timeline offset</a>.

  </div>

  <hr />

  The <dfn><code>loop</code></dfn> attribute is a <a>boolean
  attribute</a> that, if specified, indicates that the <a>media element</a> is to seek back
  to the start of the <a>media resource</a> upon reaching the end.

  The <code>loop</code> attribute has no effect while the element has a
  <a>current media controller</a>.

  <div class="impl">

  The <dfn><code>loop</code></dfn> IDL attribute must <a>reflect</a>
  the content attribute of the same name.

  </div>

<h5 id="ready-states">Ready states</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>readyState</code></dt>

    <dd>

    Returns a value that expresses the current state of the element with respect to rendering the
    <a>current playback position</a>, from the codes in the list below.

    </dd>

  </dl>

  <div class="impl">

  <a>Media elements</a> have a <i>ready state</i>, which describes to
  what degree they are ready to be rendered at the <a>current playback position</a>. The
  possible values are as follows; the ready state of a media element at any particular time is the
  greatest value describing the state of the element:

  </div>

  <dl>

    <dt><dfn><code>HAVE_NOTHING</code></dfn> (numeric value 0)</dt>

    <dd>No information regarding the <a>media resource</a> is available. No data for the
    <a>current playback position</a> is available. <a>Media
    elements</a> whose <code>networkState</code> attribute are set
    to <code>NETWORK_EMPTY</code> are always in the <code>HAVE_NOTHING</code> state.</dd>

    <dt><dfn><code>HAVE_METADATA</code></dfn> (numeric value 1)</dt>

    <dd>Enough of the resource has been obtained that the duration of the resource is available.
    In the case of a <code>video</code> element, the dimensions of the video are also available. No
    <a>media data</a> is available for the immediate <a>current playback
    position</a>.</dd>

    <dt><dfn><code>HAVE_CURRENT_DATA</code></dfn> (numeric value 2)</dt>

    <dd>Data for the immediate <a>current playback position</a> is available, but either not
    enough data is available that the user agent could successfully advance the <a>current
    playback position</a> in the <a>direction of playback</a> at all without immediately
    reverting to the <code>HAVE_METADATA</code> state, or there is no
    more data to obtain in the <a>direction of playback</a>. For example, in video this
    corresponds to the user agent having data from the current frame, but not the next frame, when
    the <a>current playback position</a> is at the end of the current frame; and to when <a>playback has ended</a>.</dd>

    <dt><dfn><code>HAVE_FUTURE_DATA</code></dfn> (numeric value 3)</dt>

    <dd>Data for the immediate <a>current playback position</a> is available, as well as
    enough data for the user agent to advance the <a>current playback position</a> in the
    <a>direction of playback</a> at least a little without immediately reverting to the <code>HAVE_METADATA</code> state, and <a>the text tracks are
    ready</a>. For example, in video this corresponds to the user agent having data for at least
    the current frame and the next frame when the <a>current playback position</a> is at the
    instant in time between the two frames, or to the user agent having the video data for the
    current frame and audio data to keep playing at least a little when the <a>current playback
    position</a> is in the middle of a frame. The user agent cannot be in this state if <a>playback has ended</a>, as the <a>current playback position</a>
    can never advance in this case.</dd>

    <dt><dfn><code>HAVE_ENOUGH_DATA</code></dfn> (numeric value 4)</dt>

    <dd>

    All the conditions described for the <code>HAVE_FUTURE_DATA</code> state are met, and, in addition,
    either of the following conditions is also true:

    <ul>

      <li>The user agent estimates that data is being fetched at a rate where the <a>current
      playback position</a>, if it were to advance at the <a>effective playback rate</a>,
      would not overtake the available data before playback reaches the end of the <a>media
      resource</a>.</li>

      <li>The user agent has entered a state where waiting longer will not result in further data
      being obtained, and therefore nothing would be gained by delaying playback any further. (For
      example, the buffer might be full.)</li>

    </ul>

    </dd>

  </dl>

  <p class="note">
    In practice, the difference between <code>HAVE_METADATA</code> and <code>HAVE_CURRENT_DATA</code> is negligible. Really the only time
  the difference is relevant is when painting a <code>video</code> element onto a
  <code>canvas</code>, where it distinguishes the case where something will be drawn (<code>HAVE_CURRENT_DATA</code> or greater) from the case where
  nothing is drawn (<code>HAVE_METADATA</code> or less). Similarly,
  the difference between <code>HAVE_CURRENT_DATA</code> (only
  the current frame) and <code>HAVE_FUTURE_DATA</code> (at least
  this frame and the next) can be negligible (in the extreme, only one frame). The only time that
  distinction really matters is when a page provides an interface for "frame-by-frame"
  navigation.
  </p>

  <div class="impl">

  When the ready state of a <a>media element</a> whose <code>networkState</code> is not <code>NETWORK_EMPTY</code> changes, the user agent must follow the steps
  given below:

  <ol>

    <li>

    Apply the first applicable set of substeps from the following list:

    <dl class="switch">

      <dt>If the previous ready state was <code>HAVE_NOTHING</code>,
      and the new ready state is <code>HAVE_METADATA</code></dt>

      <dd id="fire-loadedmetadata">

      <a>Queue a task</a> to <a>fire a simple event</a> named <code>loadedmetadata</code> at the element.

      <p class="note">
    Before this task is run, as part of the <a>event loop</a> mechanism, the
      rendering will have been updated to resize the <code>video</code> element if appropriate.
  </p>

      </dd>

      <dt id="handling-first-frame-available">If the previous ready state was <code>HAVE_METADATA</code> and the new ready state is <code>HAVE_CURRENT_DATA</code> or greater</dt>

      <dd>

      If this is the first time this occurs for this <a>media
      element</a> since the <code>load()</code> algorithm was last
      invoked, the user agent must <a>queue a task</a> to <a>fire a simple event</a>
      named <code>loadeddata</code> at the element.

      If the new ready state is <code>HAVE_FUTURE_DATA</code>
      or <code>HAVE_ENOUGH_DATA</code>, then the relevant steps
      below must then be run also.

      </dd>

      <dt>If the previous ready state was <code>HAVE_FUTURE_DATA</code> or more, and the new ready state is
      <code>HAVE_CURRENT_DATA</code> or less</dt>

      <dd>

      If the <a>media element</a> was <a>potentially
      playing</a> before its <code>readyState</code> attribute
      changed to a value lower than <code>HAVE_FUTURE_DATA</code>, and the element has not
      <a>ended playback</a>, and playback has not <a>stopped due to errors</a>,
      <a>paused for user interaction</a>, or <a>paused for in-band content</a>, the user
      agent must <a>queue a task</a> to <a>fire a simple event</a> named <code>timeupdate</code> at the element, and <a>queue a task</a>
      to <a>fire a simple event</a> named <code>waiting</code> at
      the element.

      </dd>

      <dt>If the previous ready state was <code>HAVE_CURRENT_DATA</code> or less, and the new ready state
      is <code>HAVE_FUTURE_DATA</code></dt>

      <dd>

      The user agent must <a>queue a task</a> to <a>fire a simple event</a> named
      <code>canplay</code> at the element.

      If the element's <code>paused</code> attribute is false, the user
      agent must <a>queue a task</a> to <a>fire a simple event</a> named <code>playing</code> at the element.

      </dd>

      <dt>If the new ready state is <code>HAVE_ENOUGH_DATA</code></dt>

      <dd>

      If the previous ready state was <code>HAVE_CURRENT_DATA</code> or less, the user agent must
      <a>queue a task</a> to <a>fire a simple event</a> named <code>canplay</code> at the element, and, if the element's <code>paused</code> attribute is false, <a>queue a task</a> to
      <a>fire a simple event</a> named <code>playing</code>
      at the element.

      If the <a>autoplaying flag</a> is true, and the <code>paused</code> attribute is true, and the <a>media element</a>
      has an <code>autoplay</code> attribute specified, and the
      <a>media element</a>'s <a>node document</a>'s <a>active sandboxing flag set</a>
      does not have the <a>sandboxed automatic features browsing context flag</a> set, then
      the user agent may also run the following substeps:

      <ol>

        <li>Set the <code>paused</code> attribute to false.</li>

        <li>If the element's <a>show poster flag</a> is true, set it to false and run the
        <i>time marches on</i> steps.</li>

        <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>play</code> at the element.</li>

        <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>playing</code> at the element.</li>

      </ol>

      <p class="note">
    User agents do not need to support autoplay, and it is suggested that user
      agents honor user preferences on the matter. Authors are urged to use the <code>autoplay</code> attribute rather than using script to force the
      video to play, so as to allow the user to override the behavior if so desired.
  </p>

      In any case, the user agent must finally <a>queue a task</a> to <a>fire a simple
      event</a> named <code>canplaythrough</code> at the element.

      </dd>

    </dl>

    </li>

    <li>If the <a>media element</a> has a <a>current media controller</a>, then
    <a>report the controller state</a> for the <a>media element</a>'s <a>current media
    controller</a>.</li>

  </ol>

  </div>

  <p class="note">
    It is possible for the ready state of a media element to jump between these states
  discontinuously. For example, the state of a media element can jump straight from <code>HAVE_METADATA</code> to <code>HAVE_ENOUGH_DATA</code> without passing through the <code>HAVE_CURRENT_DATA</code> and <code>HAVE_FUTURE_DATA</code> states.
  </p>

  <div class="impl">

  The <dfn><code>readyState</code></dfn> IDL attribute must, on
  getting, return the value described above that describes the current ready state of the
  <a>media element</a>.

  </div>

  The <dfn><code>autoplay</code></dfn> attribute is a <a>boolean
  attribute</a>. When present, the user agent <span class="impl">(as described in the algorithm
  described herein)</span> will automatically begin playback of the <a>media resource</a> as
  soon as it can do so without stopping.

  <p class="note">
    Authors are urged to use the <code>autoplay</code>
  attribute rather than using script to trigger automatic playback, as this allows the user to
  override the automatic playback when it is not desired, e.g. when using a screen reader. Authors
  are also encouraged to consider not using the automatic playback behavior at all, and instead to
  let the user agent wait for the user to start playback explicitly.
  </p>

  <div class="impl">

  The <dfn><code>autoplay</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.

  </div>

<h5 id="playing-the-media-resource">Playing the media resource</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>paused</code></dt>

    <dd>

    Returns true if playback is paused; false otherwise.

    </dd>

    <dt><var>media</var> . <code>ended</code></dt>

    <dd>

    Returns true if playback has reached the end of the <a>media resource</a>.

    </dd>

    <dt><var>media</var> . <code>defaultPlaybackRate</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the default rate of playback, for when the user is not fast-forwarding or reversing
    through the <a>media resource</a>.

    Can be set, to change the default rate of playback.

    The default rate has no direct effect on playback, but if the user switches to a fast-forward
    mode, when they return to the normal playback mode, it is expected that the rate of playback
    will be returned to the default rate of playback.

    When the element has a <a>current media controller</a>, the <code>defaultPlaybackRate</code> attribute is ignored and the
    <a>current media controller</a>'s <code>defaultPlaybackRate</code> is used instead.

    </dd>

    <dt><var>media</var> . <code>playbackRate</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the current rate playback, where 1.0 is normal speed.

    Can be set, to change the rate of playback.

    When the element has a <a>current media controller</a>, the <code>playbackRate</code> attribute is ignored and the <a>current
    media controller</a>'s <code>playbackRate</code> is
    used instead.

    </dd>

    <dt><var>media</var> . <code>played</code></dt>

    <dd>

    Returns a <code>TimeRanges</code> object that represents the ranges of the <a>media
    resource</a> that the user agent has played.

    </dd>

    <dt><var>media</var> . <code>play</code>()</dt>

    <dd>

    Sets the <code>paused</code> attribute to false, loading the
    <a>media resource</a> and beginning playback if necessary. If the playback had ended, will
    restart it from the start.

    </dd>

    <dt><var>media</var> . <code>pause</code>()</dt>

    <dd>

    Sets the <code>paused</code> attribute to true, loading the
    <a>media resource</a> if necessary.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>paused</code></dfn> attribute represents whether the
  <a>media element</a> is paused or not. The attribute must initially be true.

  A <a>media element</a> is a <dfn>blocked media element</dfn> if its <code>readyState</code> attribute is in the <code>HAVE_NOTHING</code> state, the <code>HAVE_METADATA</code> state, or the <code>HAVE_CURRENT_DATA</code> state, or if the element has
  <a>paused for user interaction</a> or <a>paused for in-band content</a>.

  A <a>media element</a> is said to be <dfn>potentially playing</dfn> when its <code>paused</code> attribute is false, the element has not <a>ended
  playback</a>, playback has not <a>stopped due to errors</a>, the element either has no
  <a>current media controller</a> or has a <a>current media controller</a> but is not
  <a>blocked on its media controller</a>, and the element is not a <a>blocked media
  element</a>.

  <p class="note">
    A <code>waiting</code> DOM event <a>can be fired</a> as a result of an element that is
  <a>potentially playing</a> stopping playback due to its <code>readyState</code> attribute changing to a value lower than <code>HAVE_FUTURE_DATA</code>.
  </p>

  A <a>media element</a> is said to have <dfn>ended playback</dfn> when:

  <ul>

    <li>The element's <code>readyState</code> attribute is <code>HAVE_METADATA</code> or greater, and

    </li><li>

    Either:

    <ul>

      <li>The <a>current playback position</a> is the end of the <a>media resource</a>,
      and

      </li><li>The <a>direction of playback</a> is forwards, and

      </li><li>Either the <a>media element</a> does not have a <code>loop</code> attribute specified, or the <a>media element</a> has
      a <a>current media controller</a>.

    </li></ul>

    Or:

    <ul>

      <li>The <a>current playback position</a> is the <a>earliest possible position</a>,
      and

      </li><li>The <a>direction of playback</a> is backwards.

    </li></ul>

    </li>

  </ul>

  The <dfn><code>ended</code></dfn> attribute must return true if, the
  last time the <a>event loop</a> reached <a>step 1</a>, the <a>media element</a> had
  <a>ended playback</a> and the <a>direction of playback</a> was forwards, and false
  otherwise.

  A <a>media element</a> is said to have <dfn>stopped due to errors</dfn> when the
  element's <code>readyState</code> attribute is <code>HAVE_METADATA</code> or greater, and the user agent <a>encounters a non-fatal error</a> during the processing of the
  <a>media data</a>, and due to that error, is not able to play the content at the
  <a>current playback position</a>.

  A <a>media element</a> is said to have <dfn>paused for user interaction</dfn> when its
  <code>paused</code> attribute is false, the <code>readyState</code> attribute is either <code>HAVE_FUTURE_DATA</code> or <code>HAVE_ENOUGH_DATA</code> and the user agent has reached a point
  in the <a>media resource</a> where the user has to make a selection for the resource to
  continue. If the <a>media element</a> has a <a>current media controller</a> when this
  happens, then the user agent must <a>report the controller state</a> for the <a>media
  element</a>'s <a>current media controller</a>. If the <a>media element</a> has a
  <a>current media controller</a> when the user makes a selection, allowing playback to
  resume, the user agent must similarly <a>report the controller state</a> for the <a>media
  element</a>'s <a>current media controller</a>.

  It is possible for a <a>media element</a> to have both <a>ended playback</a> and
  <a>paused for user interaction</a> at the same time.

  When a <a>media element</a> that is <a>potentially playing</a> stops playing
  because it has <a>paused for user interaction</a>, the user agent must <a>queue a
  task</a> to <a>fire a simple event</a> named <code>timeupdate</code> at the element.

  A <a>media element</a> is said to have <dfn>paused for in-band content</dfn> when its
  <code>paused</code> attribute is false, the <code>readyState</code> attribute is either <code>HAVE_FUTURE_DATA</code> or <code>HAVE_ENOUGH_DATA</code> and the user agent has suspended
  playback of the <a>media resource</a> in order to play content that is temporally anchored
  to the <a>media resource</a> and has a non-zero length, or to play content that is
  temporally anchored to a segment of the <a>media resource</a> but has a length longer than
  that segment. If the <a>media element</a> has a <a>current media controller</a> when
  this happens, then the user agent must <a>report the controller state</a> for the
  <a>media element</a>'s <a>current media controller</a>. If the <a>media
  element</a> has a <a>current media controller</a> when the user agent unsuspends
  playback, the user agent must similarly <a>report the controller state</a> for the
  <a>media element</a>'s <a>current media controller</a>.

  <p class="example">One example of when a <a>media element</a> would be <a>paused for
  in-band content</a> is when the user agent is playing <a>audio descriptions</a> from an external WebVTT file, and
  the synthesized speech generated for a cue is longer than the time between the <a>text track
  cue start time</a> and the <a>text track cue end time</a>.</p>

  <hr />

  When the <a>current playback position</a> reaches the end of the
  <a>media resource</a> when the <a>direction of playback</a> is forwards, then the user
  agent must follow these steps:

  <ol>

    <li>If the <a>media element</a> has a <code>loop</code>
    attribute specified and does not have a <a>current media controller</a>, then <a>seek</a> to the <a>earliest possible position</a> of the
    <a>media resource</a> and abort these steps.</li>

    <li>As defined above, the <code>ended</code> IDL attribute starts
    returning true once the <a>event loop</a> returns to <a>step 1</a>.</li>

    <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>timeupdate</code> at the <a>media element</a>.</li>

    <li><a>Queue a task</a> that, if the <a>media element</a> does not have a
    <a>current media controller</a>, and the <a>media element</a> has still <a>ended
    playback</a>, and the <a>direction of playback</a> is still forwards, and <a>paused</a> is false, changes <a>paused</a> to true and <a>fires a
    simple event</a> named <code>pause</code> at the <a>media
    element</a>.</li>

    <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>ended</code> at the <a>media element</a>.</li>

    <li>If the <a>media element</a> has a <a>current media controller</a>, then
    <a>report the controller state</a> for the <a>media element</a>'s <a>current media
    controller</a>.</li>

  </ol>

  When the <a>current playback position</a> reaches the <a>earliest possible
  position</a> of the <a>media resource</a> when the <a>direction of playback</a> is
  backwards, then the user agent must only <a>queue a task</a> to <a>fire a simple
  event</a> named <code>timeupdate</code> at the element.

  <p class="note">
    The word "reaches" here does not imply that the <a>current playback
  position</a> needs to have changed during normal playback; it could be via <a>seeking</a>, for instance.
  </p>

  <hr />

  The <dfn><code>defaultPlaybackRate</code></dfn> attribute
  gives the desired speed at which the <a>media resource</a> is to play, as a multiple of its
  intrinsic speed. The attribute is mutable: on getting it must return the last value it was set to,
  or 1.0 if it hasn't yet been set; on setting the attribute must be set to the new value.

  <p class="note">
    The <code>defaultPlaybackRate</code> is used
  by the user agent when it <a>exposes a user
  interface to the user</a>.
  </p>

  The <dfn><code>playbackRate</code></dfn> attribute gives the
  <a>effective playback rate</a> (assuming there is no <a>current media controller</a>
  overriding it), which is the speed at which the <a>media resource</a> plays, as a multiple
  of its intrinsic speed. If it is not equal to the <code>defaultPlaybackRate</code>, then the implication is that the
  user is using a feature such as fast forward or slow motion playback. The attribute is mutable: on
  getting it must return the last value it was set to, or 1.0 if it hasn't yet been set; on setting
  the attribute must be set to the new value, and the playback will change speed (if the element is
  <a>potentially playing</a> and there is no <a>current media controller</a>).

  When the <code>defaultPlaybackRate</code>
  or <code>playbackRate</code> attributes change value (either by
  being set by script or by being changed directly by the user agent, e.g. in response to user
  control) the user agent must <a>queue a task</a> to <a>fire a simple event</a> named
  <code>ratechange</code> at the <a>media element</a>.

  <p class="note">
    The <code>defaultPlaybackRate</code> and
  <code>playbackRate</code> attributes have no effect when the
  <a>media element</a> has a <a>current media controller</a>; the namesake attributes on
  the <code>MediaController</code> object are used instead in that situation.
  </p>

  <hr />

  The <dfn><code>played</code></dfn> attribute must return a new static
  <a>normalized <code>TimeRanges</code> object</a> that represents the ranges of points on the
  <a>media timeline</a> of the <a>media resource</a> reached through the usual monotonic
  increase of the <a>current playback position</a> during normal playback, if any, at the time
  the attribute is evaluated.

  <hr />

  When the <dfn><code>play()</code></dfn> method on a <a>media
  element</a> is invoked, the user agent must run the following steps.

  <ol>

    <li>If the <a>media element</a>'s <code>networkState</code> attribute has the value <code>NETWORK_EMPTY</code>, invoke the <a>media element</a>'s
    <a>resource selection algorithm</a>.</li>

    <li>

    If the <a>playback has ended</a> and the <a>direction of
    playback</a> is forwards, and the <a>media element</a> does not have a <a>current
    media controller</a>, <a>seek</a> to the <a>earliest possible
    position</a> of the <a>media resource</a>.

    <p class="note">
    This <a>will cause</a> the user agent to <a>queue a
    task</a> to <a>fire a simple event</a> named <code>timeupdate</code> at the <a>media element</a>.
  </p>

    </li>

    <li>If the <a>media element</a> has a <a>current media controller</a>, then
    <a>bring the media element up to speed with its new media controller</a>.

    </li><li>

    If the <a>media element</a>'s <code>paused</code> attribute is
    true, run the following substeps:

    <ol>

      <li>Change the value of <code>paused</code> to false.</li>

      <li>If the <a>show poster flag</a> is true, set the element's <a>show poster
      flag</a> to false and run the <i>time marches on</i> steps.</li>

      <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>play</code> at the element.</li>

      <li>

      If the <a>media element</a>'s <code>readyState</code>
      attribute has the value <code>HAVE_NOTHING</code>, <code>HAVE_METADATA</code>, or <code>HAVE_CURRENT_DATA</code>, <a>queue a task</a> to
      <a>fire a simple event</a> named <code>waiting</code> at the
      element.

      Otherwise, the <a>media element</a>'s <code>readyState</code> attribute has the value <code>HAVE_FUTURE_DATA</code> or <code>HAVE_ENOUGH_DATA</code>: <a>queue a task</a> to
      <a>fire a simple event</a> named <code>playing</code> at the
      element.

      </li>

    </ol>

    </li>

    <li>Set the <a>media element</a>'s <a>autoplaying flag</a> to false.</li>

    <li>If the <a>media element</a> has a <a>current media controller</a>, then
    <a>report the controller state</a> for the <a>media element</a>'s <a>current media
    controller</a>.</li>

  </ol>

  <hr />

  When the <dfn><code>pause()</code></dfn> method is invoked, and when
  the user agent is required to pause the <a>media element</a>, the user agent must run the
  following steps:

  <ol>

    <li>If the <a>media element</a>'s <code>networkState</code> attribute has the value <code>NETWORK_EMPTY</code>, invoke the <a>media element</a>'s
    <a>resource selection algorithm</a>.</li>

    <li>Run the <a>internal pause steps</a> for the <a>media element</a>.</li>

  </ol>

  The <dfn>internal pause steps</dfn> for a <a>media element</a> are as follows:

  <ol>

    <li>Set the <a>media element</a>'s <a>autoplaying flag</a> to false.</li>

    <li>If the <a>media element</a>'s <code>paused</code> attribute
    is false, run the following steps:

    <ol>

      <li>Change the value of <code>paused</code> to true.</li>

      <li><a>Queue a task</a> to <a>fire a simple
      event</a> named <code>timeupdate</code> at the
      element.</li>

      <li><a>Queue a task</a> to <a>fire a simple
      event</a> named <code>pause</code>
      at the element.</li>

      <li>Set the <a>official playback position</a> to the <a>current playback
      position</a>.</li>

    </ol>

    </li>

    <li>If the <a>media element</a> has a <a>current media controller</a>, then
    <a>report the controller state</a> for the <a>media element</a>'s <a>current media
    controller</a>.</li>

  </ol>

  <hr />

  The <dfn>effective playback rate</dfn> is not necessarily the element's <code>playbackRate</code>. When a <a>media element</a> has a
  <a>current media controller</a>, its <a>effective playback rate</a> is the
  <code>MediaController</code>'s <a>media controller playback rate</a>. Otherwise, the
  <a>effective playback rate</a> is just the element's <code>playbackRate</code>. Thus, the <a>current media
  controller</a> overrides the <a>media element</a>.

  If the <a>effective playback rate</a> is positive or zero, then the <dfn>direction of
  playback</dfn> is forwards. Otherwise, it is backwards.

  When a <a>media element</a> is <a>potentially playing</a> and
  its <code>Document</code> is a <a>fully active</a> <code>Document</code>, its <a>current
  playback position</a> must increase monotonically at <a>effective playback rate</a> units
  of media time per unit time of the <a>media timeline</a>'s clock. (This specification always
  refers to this as an <i>increase</i>, but that increase could actually be a <em>de</em>crease if
  the <a>effective playback rate</a> is negative.)

  <p class="note">
    The <a>effective playback rate</a> can be 0.0, in which case the
  <a>current playback position</a> doesn't move, despite playback not being paused (<code>paused</code> doesn't become true, and the <code>pause</code> event doesn't fire).
  </p>

  <p class="note">
    This specification doesn't define how the user agent achieves the appropriate
  playback rate â depending on the protocol and media available, it is plausible that the user
  agent could negotiate with the server to have the server provide the media data at the appropriate
  rate, so that (except for the period between when the rate is changed and when the server updates
  the stream's playback rate) the client doesn't actually have to drop or interpolate any
  frames.
  </p>

  Any time the user agent <a>provides a stable state</a>,
  the <a>official playback position</a> must be set to the <a>current playback
  position</a>.

  While the <a>direction of playback</a> is backwards, any corresponding audio must be
  <a>muted</a>. While the <a>effective playback rate</a> is
  so low or so high that the user agent cannot play audio usefully, the corresponding audio must
  also be <a>muted</a>. If the <a>effective playback
  rate</a> is not 1.0, the user agent may apply pitch adjustments to the audio as necessary to
  render it faithfully.

  <a>Media elements</a> that are <a>potentially playing</a>
  while not <a>in a <code>Document</code></a> must not play any video, but should play any
  audio component. Media elements must not stop playing just because all references to them have
  been removed; only once a media element is in a state where no further audio could ever be played
  by that element may the element be garbage collected.

  <p class="note">
    It is possible for an element to which no explicit references exist to play audio,
  even if such an element is not still actively playing: for instance, it could have a <a>current
  media controller</a> that still has references and can still be unpaused, or it could be
  unpaused but stalled waiting for content to buffer, or it could be still buffering, but with a
  <code>suspend</code> event listener that begins playback. Even a
  media element whose <a>media resource</a> has no audio tracks could eventually play audio
  again if it had an event listener that changes the <a>media resource</a>.
  </p>

  <hr />

  Each <a>media element</a> has a <dfn>list of newly introduced cues</dfn>, which must be
  initially empty. Whenever a <a>text track cue</a> is added to the <a>list of cues</a> of a <a>text track</a> that is in the <a>list of text
  tracks</a> for a <a>media element</a>, that <a>cue</a> must
  be added to the <a>media element</a>'s <a>list of newly introduced cues</a>. Whenever
  a <a>text track</a> is added to the <a>list of text tracks</a> for a <a>media
  element</a>, all of the <a>cues</a> in that <a>text
  track</a>'s <a>list of cues</a> must be added to the
  <a>media element</a>'s <a>list of newly introduced cues</a>. When a <a>media
  element</a>'s <a>list of newly introduced cues</a> has new cues added while the
  <a>media element</a>'s <a>show poster flag</a> is not set, then the user agent must
  run the <i>time marches on</i> steps.

  When a <a>text track cue</a> is removed from the <a>list of cues</a> of a <a>text track</a> that is in the <a>list of text
  tracks</a> for a <a>media element</a>, and whenever a <a>text track</a> is removed
  from the <a>list of text tracks</a> of a <a>media element</a>, if the <a>media
  element</a>'s <a>show poster flag</a> is not set, then the user agent must run the
  <i>time marches on</i> steps.

  When the <a>current playback position</a> of a <a>media element</a> changes (e.g.
  due to playback or seeking), the user agent must run the <i>time marches on</i> steps. If the
  <a>current playback position</a> changes while the steps are running, then the user agent
  must wait for the steps to complete, and then must immediately rerun the steps. (These steps are
  thus run as often as possible or needed â if one iteration takes a long time, this can cause
  certain <a>cues</a> to be skipped over as the user agent rushes ahead
  to "catch up".)

  The <dfn><i>time marches on</i></dfn> steps are as follows:

  <ol>

    <li>Let <var>current cues</var> be a list of <a>cues</a>, initialized to contain all the <a>cues</a> of all
    the <a>hidden</a> or <a>showing</a> <a>text tracks</a> of the <a>media
    element</a> (not the <a>disabled</a> ones) whose <a>start times</a> are less than or equal to the <a>current
    playback position</a> and whose <a>end times</a> are
    greater than the <a>current playback position</a>.</li>

    <li>Let <var>other cues</var> be a list of <a>cues</a>,
    initialized to contain all the <a>cues</a> of <a>hidden</a> and <a>showing</a> <a>text tracks</a> of the <a>media element</a> that are not present in <var>current cues</var>.</li>

    <li>Let <var>last time</var> be the <a>current playback position</a> at the
    time this algorithm was last run for this <a>media element</a>, if this is not the first
    time it has run.</li>

    <li>If the <a>current playback position</a> has, since the last time this algorithm was
    run, only changed through its usual monotonic increase during normal playback, then let <var>missed cues</var> be the list of <a>cues</a> in <var>other cues</var> whose <a>start times</a> are
    greater than or equal to <var>last time</var> and whose <a>end times</a> are less than or equal to the <a>current playback position</a>.
    Otherwise, let <var>missed cues</var> be an empty list.</li>

    <li>Remove all the <a>cues</a> in <var>missed cues</var>
    that are also in the <a>media element</a>'s <a>list of newly introduced cues</a>, and
    then empty the element's <a>list of newly introduced cues</a>.</li>

    <li>If the time was reached through the usual monotonic increase of the <a>current playback
    position</a> during normal playback, and if the user agent has not fired a <code>timeupdate</code> event at the element in the past 15 to 250ms and
    is not still running event handlers for such an event, then the user agent must <a>queue a
    task</a> to <a>fire a simple event</a> named <code>timeupdate</code> at the element. (In the other cases, such as
    explicit seeks, relevant events get fired as part of the overall process of changing the
    <a>current playback position</a>.)

    <p class="note">
    The event thus is not to be fired faster than about 66Hz or slower than 4Hz
    (assuming the event handlers don't take longer than 250ms to run). User agents are encouraged to
    vary the frequency of the event based on the system load and the average cost of processing the
    event each time, so that the UI updates are not any more frequent than the user agent can
    comfortably handle while decoding the video.
  </p></li>

    <li>If all of the <a>cues</a> in <var>current cues</var>
    have their <a>text track cue active flag</a> set, none of the <a>cues</a> in <var>other cues</var> have their <a>text track cue active
    flag</a> set, and <var>missed cues</var> is empty, then abort these steps.</li>

    <li>

    If the time was reached through the usual monotonic increase of the <a>current playback
    position</a> during normal playback, and there are <a>cues</a>
    in <var>other cues</var> that have their <a>text track cue pause-on-exit flag</a>
    set and that either have their <a>text track cue active flag</a> set or are also in <var>missed cues</var>, then <a>immediately</a> <a>pause</a> the
    <a>media element</a>.

    <p class="note">
    In the other cases, such as explicit seeks, playback is not paused by going past
    the end time of a <a>cue</a>, even if that <a>cue</a> has its <a>text track cue pause-on-exit flag</a> set.
  </p>

    </li>

    <li>

    Let <var>events</var> be a list of <a>tasks</a>,
    initially empty. Each <a>task</a> in this list will be associated
    with a <a>text track</a>, a <a>text track cue</a>, and a time, which are used to
    sort the list before the <a>tasks</a> are queued.

    Let <var>affected tracks</var> be a list of <a>text
    tracks</a>, initially empty.

    When the steps below say to <dfn>prepare an event</dfn> named <var>event</var> for a
    <a>text track cue</a> <var>target</var> with a time <var>time</var>, the
    user agent must run these substeps:

    <ol>

      <li>Let <var>track</var> be the <a>text track</a> with which the <a>text
      track cue</a> <var>target</var> is associated.</li>

      <li>Create a <a>task</a> to <a>fire a simple event</a>
      named <var>event</var> at <var>target</var>.</li>

      <li>Add the newly created <a>task</a> to <var>events</var>, associated with the time <var>time</var>, the <a>text
      track</a> <var>track</var>, and the <a>text track cue</a> <var>target</var>.</li>

      <li>Add <var>track</var> to <var>affected tracks</var>.</li>

    </ol>

    </li>

    <li>For each <a>text track cue</a> in <var>missed
    cues</var>, <a>prepare an event</a> named <code>enter</code> for the
    <code>TextTrackCue</code> object with the <a>text track cue start time</a>.</li>

    <li>For each <a>text track cue</a> in <var>other
    cues</var> that either has its <a>text track cue active flag</a> set or is in <var>missed cues</var>, <a>prepare an event</a> named <code>exit</code> for the <code>TextTrackCue</code> object with the later of the
    <a>text track cue end time</a> and the <a>text track cue start time</a>.</li>

    <li>For each <a>text track cue</a> in <var>current
    cues</var> that does not have its <a>text track cue active flag</a> set, <a>prepare an
    event</a> named <code>enter</code> for the <code>TextTrackCue</code>
    object with the <a>text track cue start time</a>.</li>

    <li>

    Sort the <a>tasks</a> in <var>events</var> in ascending
    time order (<a>tasks</a> with earlier times first).

    Further sort <a>tasks</a> in <var>events</var> that have
    the same time by the relative <a>text track cue order</a> of the <a>text track cues</a> associated with these <a>tasks</a>.

    Finally, sort <a>tasks</a> in <var>events</var> that have
    the same time and same <a>text track cue order</a> by placing <a>tasks</a> that fire <code>enter</code> events before
    those that fire <code>exit</code> events.

    </li>

    <li><a>Queue</a> each <a>task</a> in
    <var>events</var>, in list order.</li>

    <li>Sort <var>affected tracks</var> in the same order as the <a>text tracks</a> appear in the <a>media element</a>'s <a>list of text
    tracks</a>, and remove duplicates.

    </li><li>For each <a>text track</a> in <var>affected tracks</var>, in the list
    order, <a>queue a task</a> to <a>fire a simple event</a> named <code>cuechange</code> at the <code>TextTrack</code> object, and, if the
    <a>text track</a> has a corresponding <code>track</code> element, to then <a>fire a
    simple event</a> named <code>cuechange</code> at the
    <code>track</code> element as well.</li>

    <li>Set the <a>text track cue active flag</a> of all the <a>cues</a> in the <var>current cues</var>, and unset the <a>text track cue
    active flag</a> of all the <a>cues</a> in the <var>other
    cues</var>.</li>

    <li>Run the <a>rules for updating the text track rendering</a> of each of the <a>text tracks</a> in <var>affected tracks</var> that are <a>showing</a>. For example, for <a>text tracks</a>
    based on WebVTT, the <a>rules for updating the display of WebVTT text tracks</a>. [[!WEBVTT]]</li>

  </ol>

  For the purposes of the algorithm above, a <a>text track cue</a> is considered to be part
  of a <a>text track</a> only if it is listed in the <a>text track list of cues</a>, not
  merely if it is associated with the <a>text track</a>.

  <p class="note">
    If the <a>media element</a>'s <a>node document</a> stops being a
  <a>fully active</a> document, then the playback will <a>stop</a>
  until the document is active again.
  </p>

  When a <a>media element</a> is <a>removed
  from a <code>Document</code></a>, the user agent must run the following steps:

  <ol>

    <li><a>Await a stable state</a>, allowing the <a>task</a> that removed the <a>media element</a> from the
    <code>Document</code> to continue. The <a>synchronous section</a> consists of all the
    remaining steps of this algorithm. (Steps in the <a>synchronous section</a> are marked with
    &#x231B;.)</li>

    <li>&#x231B; If the <a>media element</a> is <a>in a <code>Document</code></a>,
    abort these steps.</li>

    <li>&#x231B; Run the <a>internal pause steps</a> for the <a>media element</a>.

  </li></ol>
  </div>

<h5 id="seeking">Seeking</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>seeking</code></dt>

    <dd>

    Returns true if the user agent is currently seeking.

    </dd>

    <dt><var>media</var> . <code>seekable</code></dt>

    <dd>

    Returns a <code>TimeRanges</code> object that represents the ranges of the <a>media
    resource</a> to which it is possible for the user agent to seek.

    </dd>

    <dt><var>media</var> . <code>fastSeek</code>( <var>time</var> )</dt>

    <dd>

    Seeks to near the given <var>time</var> as fast as possible, trading precision for
    speed. (To seek to a precise time, use the <code>currentTime</code> attribute.)

    This does nothing if the media resource has not been loaded.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>seeking</code></dfn> attribute must initially have the
  value false.

  The <dfn><code>fastSeek()</code></dfn> method must <a>seek</a> to the time given by the method's argument, with the
  <i>approximate-for-speed</i> flag set.

  When the user agent is required to <dfn>seek</dfn> to a particular <var>new playback position</var> in the <a>media resource</a>, optionally with the
  <i>approximate-for-speed</i> flag set, it means that the user agent must run the following steps.
  This algorithm interacts closely with the <a>event loop</a> mechanism; in particular, it has
  a <a>synchronous section</a> (which is triggered as part of the <a>event loop</a>
  algorithm). Steps in that section are marked with &#x231B;.

  <ol>

    <li>Set the <a>media element</a>'s <a>show poster flag</a> to false.</li>

    <li>If the <a>media element</a>'s <code>readyState</code>
    is <code>HAVE_NOTHING</code>, abort these steps.</li>

    <li>If the element's <code>seeking</code> IDL attribute is true,
    then another instance of this algorithm is already running. Abort that other instance of the
    algorithm without waiting for the step that it is running to complete.</li>

    <li>Set the <code>seeking</code> IDL attribute to true.</li>

    <li>If the seek was in response to a DOM method call or setting of an IDL attribute, then
    continue the script. The remainder of these steps must be run <a>in parallel</a>. With the exception
    of the steps marked with &#x231B;, they could be aborted at any time by another instance of this
    algorithm being invoked.</li>

    <li>If the <var>new playback position</var> is later than the end of the <a>media
    resource</a>, then let it be the end of the <a>media resource</a> instead.</li>

    <li>If the <var>new playback position</var> is less than the <a>earliest possible
    position</a>, let it be that position instead.</li>

    <li>If the (possibly now changed) <var>new playback position</var> is not in one of
    the ranges given in the <code>seekable</code> attribute, then let it
    be the position in one of the ranges given in the <code>seekable</code> attribute that is the nearest to the <var>new
    playback position</var>. If two positions both satisfy that constraint (i.e. the <var>new playback position</var> is exactly in the middle between two ranges in the <code>seekable</code> attribute) then use the position that is closest to
    the <a>current playback position</a>. If there are no ranges given in the <code>seekable</code> attribute then set the <code>seeking</code> IDL attribute to false and abort these steps.</li>

    <li>

    If the <i>approximate-for-speed</i> flag is set, adjust the <var>new playback
    position</var> to a value that will allow for playback to resume promptly. If <var>new
    playback position</var> before this step is before <a>current playback position</a>, then
    the adjusted <var>new playback position</var> must also be before the <a>current
    playback position</a>. Similarly, if the <var>new playback position</var> before
    this step is after <a>current playback position</a>, then the adjusted <var>new
    playback position</var> must also be after the <a>current playback position</a>.

    <p class="example">For example, the user agent could snap to a nearby key frame, so that it
    doesn't have to spend time decoding then discarding intermediate frames before resuming
    playback.</p>

    </li>

    <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>seeking</code> at the element.</li>

    <li>

    Set the <a>current playback position</a> to the <var>new playback
    position</var>.

    <p class="note">
    If the <a>media element</a> was <a>potentially playing</a>
    immediately before it started seeking, but seeking caused its <code>readyState</code> attribute to change to a value lower than <code>HAVE_FUTURE_DATA</code>, then a <code>waiting</code> event <a>will be
    fired</a> at the element.
  </p>

    <p class="note">
    This step sets the <a>current playback position</a>, and thus can
    immediately trigger other conditions, such as the rules regarding when playback "<a>reaches the end of the media resource</a>" (part of the logic that
    handles looping), even before the user agent is actually able to render the media data for that
    position (as determined in the next step).
  </p>

    <p class="note">
    The <code>currentTime</code> attribute returns
    the <a>official playback position</a>, not the <a>current playback position</a>, and
    therefore gets updated before script execution, separate from this algorithm.
  </p>

    </li>

    <li>Wait until the user agent has established whether or not the <a>media data</a> for
    the <var>new playback position</var> is available, and, if it is, until it has decoded
    enough data to play back that position.

    </li>

    <li><a>Await a stable state</a>. The <a>synchronous section</a> consists of all
    the remaining steps of this algorithm. (Steps in the <a>synchronous section</a> are marked
    with &#x231B;.)</li>

    <li>&#x231B; Set the <code>seeking</code> IDL attribute to
    false.</li>

    <li>&#x231B; Run the <a>time marches on</a> steps.</li>

    <li id="seekUpdate">&#x231B; <a>Queue a task</a> to <a>fire a simple event</a>
    named <code>timeupdate</code> at the element.</li>

    <li>&#x231B; <a>Queue a task</a> to <a>fire a simple event</a> named <code>seeked</code> at the element.</li>

  </ol>

  <hr />

  The <dfn><code>seekable</code></dfn> attribute must return a new
  static <a>normalized <code>TimeRanges</code> object</a> that represents the ranges of the
  <a>media resource</a>, if any, that the user agent is able to seek to, at the time the
  attribute is evaluated.

  <p class="note">
    If the user agent can seek to anywhere in the <a>media resource</a>, e.g.
  because it is a simple movie file and the user agent and the server support HTTP Range requests,
  then the attribute would return an object with one range, whose start is the time of the first
  frame (the <a>earliest possible position</a>, typically zero), and whose end is the same as
  the time of the first frame plus the <code>duration</code> attribute's
  value (which would equal the time of the last frame, and might be positive Infinity).
  </p>

  <p class="note">
    The range might be continuously changing, e.g. if the user agent is buffering a
  sliding window on an infinite stream. This is the behavior seen with DVRs viewing live TV, for
  instance.
  </p>

  User agents should adopt adopt a very liberal and optimistic view of what is seekable. User
  agents should also buffer recent content where possible to enable seeking to be fast.

  <p class="example">For instance, consider a large video file served on an HTTP server without
  support for HTTP Range requests. A browser <em>could</em> implement this by only buffering the
  current frame and data obtained for subsequent frames, never allow seeking, except for seeking to
  the very start by restarting the playback. However, this would be a poor implementation. A high
  quality implementation would buffer the last few minutes of content (or more, if sufficient
  storage space is available), allowing the user to jump back and rewatch something surprizing
  without any latency, and would in addition allow arbitrary seeking by reloading the file from the
  start if necessary, which would be slower but still more convenient than having to literally
  restart the video and watch it all the way through just to get to an earlier unbuffered spot.</p>

  <a>Media resources</a> might be internally scripted or
  interactive. Thus, a <a>media element</a> could play in a non-linear fashion. If this
  happens, the user agent must act as if the algorithm for <a>seeking</a> was used whenever the <a>current playback position</a>
  changes in a discontinuous fashion (so that the relevant events fire). If the <a>media
  element</a> has a <a>current media controller</a>, then the user agent must <a>seek
  the media controller</a> appropriately instead.

  </div>

<h5 id="media-resources-with-multiple-media-tracks">Media resources with multiple media tracks</h5>

  A <a>media resource</a> can have multiple embedded audio and video tracks. For example,
  in addition to the primary video and audio tracks, a <a>media resource</a> could have
  foreign-language dubbed dialogs, director's commentaries, audio descriptions, alternative
  angles, or sign-language overlays.

  <dl class="domintro">

    <dt><var>media</var> . <code>audioTracks</code></dt>

    <dd>

    Returns an <code>AudioTrackList</code> object representing the audio tracks available in the
    <a>media resource</a>.

    </dd>

    <dt><var>media</var> . <code>videoTracks</code></dt>

    <dd>

    Returns a <code>VideoTrackList</code> object representing the video tracks available in the
    <a>media resource</a>.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>audioTracks</code></dfn> attribute of a
  <a>media element</a> must return a <a>live</a> <code>AudioTrackList</code> object
  representing the audio tracks available in the <a>media element</a>'s <a>media
  resource</a>.

  The <dfn><code>videoTracks</code></dfn> attribute of a
  <a>media element</a> must return a <a>live</a> <code>VideoTrackList</code> object
  representing the video tracks available in the <a>media element</a>'s <a>media
  resource</a>.

  <p class="note">
    There are only ever one <code>AudioTrackList</code> object and one
  <code>VideoTrackList</code> object per <a>media element</a>, even if another <a>media
  resource</a> is loaded into the element: the objects are reused. (The <code>AudioTrack</code>
  and <code>VideoTrack</code> objects are not, though.)
  </p>

  </div>

  <div class="example">
    In this example, a script defines a function that takes a URL to a video and a reference to an
    element where the video is to be placed. That function then tries to load the video, and, once it
    is loaded, checks to see if there is a sign-language track available. If there is, it also
    displays that track. Both tracks are just placed in the given container; it's assumed that styles
    have been applied to make this work in a pretty way!

    <pre highlight="html">
&lt;script&gt;
  function loadVideo(url, container) {
    var controller = new MediaController();
    var video = document.createElement('video');
    video.src = url;
    video.autoplay = true;
    video.controls = true;
    video.controller = controller;
    container.appendChild(video);
    video.onloadedmetadata = function (event) {
      for (var i = 0; i &lt; video.videoTracks.length; i += 1) {
        if (video.videoTracks[i].kind == 'sign') {
          var sign = document.createElement('video');
          sign.src = url + '#track=' + video.videoTracks[i].id;
          sign.autoplay = true;
          sign.controller = controller;
          container.appendChild(sign);
          return;
        }
      }
    };
  }
&lt;/script&gt;
    </pre>

  </div>

<h6 id="audiotracklist-and-videotracklist-objects"><code>AudioTrackList</code> and <code>VideoTrackList</code> objects</h6>

  The <code>AudioTrackList</code> and <code>VideoTrackList</code> interfaces are used by
  attributes defined in the previous section.

  <pre class="idl" data-highlight="webidl">interface AudioTrackList : EventTarget {
  readonly attribute unsigned long length;
  getter AudioTrack (unsigned long index);
  AudioTrack? getTrackById(DOMString id);

  attribute EventHandler onchange;
  attribute EventHandler onaddtrack;
  attribute EventHandler onremovetrack;
};

interface AudioTrack {
  readonly attribute DOMString id;
  readonly attribute DOMString kind;
  readonly attribute DOMString label;
  readonly attribute DOMString language;
  attribute boolean enabled;
};

interface VideoTrackList : EventTarget {
  readonly attribute unsigned long length;
  getter VideoTrack (unsigned long index);
  VideoTrack? getTrackById(DOMString id);
  readonly attribute long selectedIndex;

  attribute EventHandler onchange;
  attribute EventHandler onaddtrack;
  attribute EventHandler onremovetrack;
};

interface VideoTrack {
  readonly attribute DOMString id;
  readonly attribute DOMString kind;
  readonly attribute DOMString label;
  readonly attribute DOMString language;
  attribute boolean selected;
};
</pre>

  <dl class="domintro">

    <dt><var>media</var> . <code>audioTracks</code> . <code>length</code></dt>
    <dt><var>media</var> . <code>videoTracks</code> . <code>length</code></dt>

    <dd>

    Returns the number of tracks in the list.

    </dd>

    <dt><var>audioTrack</var> = <var>media</var> . <code>audioTracks</code>[<var>index</var>]</dt>
    <dt><var>videoTrack</var> = <var>media</var> . <code>videoTracks</code>[<var>index</var>]</dt>

    <dd>

    Returns the specified <code>AudioTrack</code> or <code>VideoTrack</code> object.

    </dd>

    <dt><var>audioTrack</var> = <var>media</var> . <code>audioTracks</code> . <code>getTrackById</code>( <var>id</var> )</dt>
    <dt><var>videoTrack</var> = <var>media</var> . <code>videoTracks</code> . <code>getTrackById</code>( <var>id</var> )</dt>

    <dd>

    Returns the <code>AudioTrack</code> or <code>VideoTrack</code> object with the given identifier, or null if no track has that identifier.

    </dd>

    <dt><var>audioTrack</var> . <code>id</code></dt>
    <dt><var>videoTrack</var> . <code>id</code></dt>

    <dd>

    Returns the ID of the given track. This is the ID that can be used with a fragment identifier
    if the format supports the <cite>Media Fragments URI</cite> syntax, and that can be used with
    the <code>getTrackById()</code> method. [[!MEDIA-FRAGS]]

    </dd>

    <dt><var>audioTrack</var> . <code>kind</code></dt>
    <dt><var>videoTrack</var> . <code>kind</code></dt>

    <dd>

    Returns the category the given track falls into. The <a>possible track categories</a> are given below.

    </dd>

    <dt><var>audioTrack</var> . <code>label</code></dt>
    <dt><var>videoTrack</var> . <code>label</code></dt>

    <dd>

    Returns the label of the given track, if known, or the empty string otherwise.

    </dd>

    <dt><var>audioTrack</var> . <code>language</code></dt>
    <dt><var>videoTrack</var> . <code>language</code></dt>

    <dd>

    Returns the language of the given track, if known, or the empty string otherwise.

    </dd>

    <dt><var>audioTrack</var> . <code>enabled</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns true if the given track is active, and false otherwise.

    Can be set, to change whether the track is enabled or not. If multiple audio tracks are
    enabled simultaneously, they are mixed.

    </dd>

    <dt><var>media</var> . <code>videoTracks</code> . <code>selectedIndex</code></dt>

    <dd>

    Returns the index of the currently selected track, if any, or -1 otherwise.

    </dd>

    <dt><var>videoTrack</var> . <code>selected</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns true if the given track is active, and false otherwise.

    Can be set, to change whether the track is selected or not. Either zero or one video track is
    selected; selecting a new track while a previous one is selected will unselect the previous
    one.

    </dd>

  </dl>

  <div class="impl">

  An <code>AudioTrackList</code> object represents a dynamic list of zero or more audio tracks,
  of which zero or more can be enabled at a time. Each audio track is represented by an
  <code>AudioTrack</code> object.

  A <code>VideoTrackList</code> object represents a dynamic list of zero or more video tracks, of
  which zero or one can be selected at a time. Each video track is represented by a
  <code>VideoTrack</code> object.

  Tracks in <code>AudioTrackList</code> and <code>VideoTrackList</code> objects must be
  consistently ordered. If the <a>media resource</a> is in a format that defines an order,
  then that order must be used; otherwise, the order must be the relative order in which the tracks
  are declared in the <a>media resource</a>. The order used is called the <i>natural order</i>
  of the list.

  <p class="note">
    Each track in one of these objects thus has an index; the first has the index
  0, and each subsequent track is numbered one higher than the previous one. If a <a>media
  resource</a> dynamically adds or removes audio or video tracks, then the indices of the tracks
  will change dynamically. If the <a>media resource</a> changes entirely, then all the
  previous tracks will be removed and replaced with new tracks.
  </p>

  The <dfn><code>AudioTrackList.length</code></dfn> and <dfn><code>VideoTrackList.length</code></dfn> attributes must return
  the number of tracks represented by their objects at the time of getting.

  The <a>supported property indices</a> of <code>AudioTrackList</code> and
  <code>VideoTrackList</code> objects at any instant are the numbers from zero to the number of
  tracks represented by the respective object minus one, if any tracks are represented. If an
  <code>AudioTrackList</code> or <code>VideoTrackList</code> object represents no tracks, it has no
  <a>supported property indices</a>.

  To <a>determine the value of an indexed property</a> for a given index <var>index</var> in an <code>AudioTrackList</code> or <code>VideoTrackList</code> object <var>list</var>, the user agent must return the <code>AudioTrack</code> or
  <code>VideoTrack</code> object that represents the <var>index</var>th track in <var>list</var>.

  The <dfn><code>AudioTrackList.getTrackById(<var>id</var>)</code></dfn> and <dfn><code>VideoTrackList.getTrackById(<var>id</var>)</code></dfn> methods must return the first <code>AudioTrack</code> or
  <code>VideoTrack</code> object (respectively) in the <code>AudioTrackList</code> or
  <code>VideoTrackList</code> object (respectively) whose identifier is equal to the value of the
  <var>id</var> argument (in the natural order of the list, as defined above). When no
  tracks match the given argument, the methods must return null.

  The <code>AudioTrack</code> and <code>VideoTrack</code> objects represent specific tracks of a
  <a>media resource</a>. Each track can have an identifier, category, label, and language.
  These aspects of a track are permanent for the lifetime of the track; even if a track is removed
  from a <a>media resource</a>'s <code>AudioTrackList</code> or <code>VideoTrackList</code>
  objects, those aspects do not change.

  In addition, <code>AudioTrack</code> objects can each be enabled or disabled; this is the audio
  track's <i>enabled state</i>. When an <code>AudioTrack</code> is created, its <i>enabled state</i>
  must be set to false (disabled). The <a>resource fetch
  algorithm</a> can override this.

  Similarly, a single <code>VideoTrack</code> object per <code>VideoTrackList</code> object can
  be selected, this is the video track's <i>selection state</i>. When a <code>VideoTrack</code> is
  created, its <i>selection state</i> must be set to false (not selected). The <a>resource fetch algorithm</a> can override this.

  The <dfn><code>AudioTrack.id</code></dfn> and <dfn><code>VideoTrack.id</code></dfn> attributes must return the identifier
  of the track, if it has one, or the empty string otherwise. If the <a>media resource</a> is
  in a format that supports the <cite>Media Fragments URI</cite> fragment identifier syntax, the
  identifier returned for a particular track must be the same identifier that would enable the track
  if used as the name of a track in the track dimension of such a fragment identifier. [[!MEDIA-FRAGS]] [[!INBAND]]

  <p class="example">For example, in Ogg files, this would be the Name header field of the track. [[!OGGSKELETON]]</p>

  The <dfn><code>AudioTrack.kind</code></dfn> and <dfn><code>VideoTrack.kind</code></dfn> attributes must return the category
  of the track, if it has one, or the empty string otherwise.

  The category of a track is the string given in the first column of the table below that is the
  most appropriate for the track based on the definitions in the table's second and third columns,
  as determined by the metadata included in the track in the <a>media resource</a>. The cell
  in the third column of a row says what the category given in the cell in the first column of that
  row applies to; a category is only appropriate for an audio track if it applies to audio tracks,
  and a category is only appropriate for video tracks if it applies to video tracks. Categories must
  only be returned for <code>AudioTrack</code> objects if they are appropriate for audio, and must
  only be returned for <code>VideoTrack</code> objects if they are appropriate for video.

  </div>

  <table id="dom-TrackList-getKind-categories">
    <caption>Return values for <code>AudioTrack.kind</code> and <code>VideoTrack.kind</code></caption>
    <thead>
    <tr>
      <th>Category
      </th><th>Definition
      </th><th>Applies to...</th>
    </tr></thead><tbody>

    <tr>
      <td>"<dfn><code>alternative</code></dfn>"
      </td><td>A possible alternative to the main track, e.g. a different take of a song (audio), or a different angle (video).
      </td><td>Audio and video.

    </td></tr><tr>
      <td>"<dfn><code>captions</code></dfn>"
      </td><td>A version of the main video track with captions burnt in. (For legacy content; new content would use text tracks.)
      </td><td>Video only.

    </td></tr><tr>
      <td>"<dfn><code>descriptions</code></dfn>"
      </td><td>An audio description of a video track.
      </td><td>Audio only.

    </td></tr><tr>
      <td>"<dfn><code>main</code></dfn>"
      </td><td>The primary audio or video track.
      </td><td>Audio and video.

    </td></tr><tr>
      <td>"<dfn><code>main-desc</code></dfn>"
      </td><td>The primary audio track, mixed with audio descriptions.
      </td><td>Audio only.

    </td></tr><tr>
      <td>"<dfn><code>sign</code></dfn>"
      </td><td>A sign-language interpretation of an audio track.
      </td><td>Video only.

    </td></tr><tr>
      <td>"<dfn><code>subtitles</code></dfn>"
      </td><td>A version of the main video track with subtitles burnt in. (For legacy content; new content would use text tracks.)
      </td><td>Video only.

    </td></tr><tr>
      <td>"<dfn><code>translation</code></dfn>"
      </td><td>A translated version of the main audio track.
      </td><td>Audio only.

    </td></tr><tr>
      <td>"<dfn><code>commentary</code></dfn>"
      </td><td>Commentary on the primary audio or video track, e.g. a director's commentary.
      </td><td>Audio and video.

    </td></tr><tr>
      <td>"" (empty string)
      </td><td>No explicit kind, or the kind given by the track's metadata is not recognized by the user agent.
      </td><td>Audio and video.

  </td></tr></tbody></table>

  <div class="impl">

  The <dfn><code>AudioTrack.label</code></dfn> and <dfn><code>VideoTrack.label</code></dfn> attributes must return the label
  of the track, if it has one, or the empty string otherwise. [[!INBAND]]

  The <dfn><code>AudioTrack.language</code></dfn> and <dfn><code>VideoTrack.language</code></dfn> attributes must return the
  BCP 47 language tag of the language of the track, if it has one, or the empty string otherwise. If
  the user agent is not able to express that language as a BCP 47 language tag (for example because
  the language information in the <a>media resource</a>'s format is a free-form string without
  a defined interpretation), then the method must return the empty string, as if the track had no
  language.

  Source attribute values for id, kind, label and language of multitrack audio and video tracks as
  described for the relevant <a>media resource</a> format. [[!INBAND]]

  The <dfn><code>AudioTrack.enabled</code></dfn> attribute, on
  getting, must return true if the track is currently enabled, and false otherwise. On setting, it
  must enable the track if the new value is true, and disable it otherwise. (If the track is no
  longer in an <code>AudioTrackList</code> object, then the track being enabled or disabled has no
  effect beyond changing the value of the attribute on the <code>AudioTrack</code> object.)

  Whenever an audio track in an <code>AudioTrackList</code> that was
  disabled is enabled, and whenever one that was enabled is disabled, the user agent must
  <a>queue a task</a> to <a>fire a simple event</a> named <code>change</code> at the <code>AudioTrackList</code> object.

  An audio track that has no data for a particular position on the <a>media timeline</a>,
  or that does not exist at that position, must be interpreted as being silent at that point on the
  timeline.

  The <dfn><code>VideoTrackList.selectedIndex</code></dfn> attribute
  must return the index of the currently selected track, if any. If the <code>VideoTrackList</code>
  object does not currently represent any tracks, or if none of the tracks are selected, it must
  instead return -1.

  The <dfn><code>VideoTrack.selected</code></dfn> attribute, on
  getting, must return true if the track is currently selected, and false otherwise. On setting, it
  must select the track if the new value is true, and unselect it otherwise. If the track is in a
  <code>VideoTrackList</code>, then all the other <code>VideoTrack</code> objects in that list must
  be unselected. (If the track is no longer in a <code>VideoTrackList</code> object, then the track
  being selected or unselected has no effect beyond changing the value of the attribute on the
  <code>VideoTrack</code> object.)

  Whenever a track in a <code>VideoTrackList</code> that was previously
  not selected is selected, and whenever the selected track in a <code>VideoTrackList</code> is
  unselected without a new track being selected in its stead, the user agent must <a>queue a task</a> to <a>fire a simple
  event</a> named <code>change</code> at the
  <code>VideoTrackList</code> object. This <a>task</a> must be <a>queued</a> before the <a>task</a> that fires
  the <code>resize</code> event, if any.

  A video track that has no data for a particular position on the <a>media timeline</a>
  must be interpreted as being fully transparent black at that point on the timeline, with the same
  dimensions as the last frame before that position, or, if the position is before all the data for
  that track, the same dimensions as the first frame for that track. A track that does not exist at
  all at the current position must be treated as if it existed but had no data.

  <p class="example">For instance, if a video has a track that is only introduced after one hour of
  playback, and the user selects that track then goes back to the start, then the user agent will
  act as if that track started at the start of the <a>media resource</a> but was simply
  transparent until one hour in.</p>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span> supported, as <a>event handler IDL attributes</a>,
  by all objects implementing the <code>AudioTrackList</code> and <code>VideoTrackList</code>
  interfaces:

  <table>
    <thead>
    <tr><th><a>Event handler</a> </th><th><a>Event handler event type</a>
    </th></tr></thead><tbody>
    <tr><td><dfn><code>onchange</code></dfn> </td><td> <code>change</code>
    </td></tr><tr><td><dfn><code>onaddtrack</code></dfn> </td><td> <code>addtrack</code>
    </td></tr><tr><td><dfn><code>onremovetrack</code></dfn> </td><td> <code>removetrack</code>
  </td></tr></tbody></table>

  </div>

<h6 id="selecting-specific-audio-and-video-tracks-declaratively">Selecting specific audio and video tracks declaratively</h6>

  The <code>audioTracks</code> and <code>videoTracks</code> attributes allow scripts to select which track
  should play, but it is also possible to select specific tracks declaratively, by specifying
  particular tracks in the fragment identifier of the <a>URL</a> of the <a>media
  resource</a>. The format of the fragment identifier depends on the <a>MIME type</a> of
  the <a>media resource</a>. [[!RFC2046]] [[!URL]]

  <div class="example">
    In this example, a video that uses a format that supports the <cite>Media Fragments URI</cite>
    fragment identifier syntax is embedded in such a way that the alternative angles labeled
    "Alternative" are enabled instead of the default video track. [[!MEDIA-FRAGS]]

    <pre highlight="html">
&lt;video src="myvideo#track=Alternative"&gt;&lt;/video&gt;
    </pre>

  </div>

<h5 id="synchronizing-multiple-media-elements">Synchronizing multiple media elements</h5>

<h6 id="synchronizing-multiple-media-elements-introduction">Introduction</h6>

  Each <a>media element</a> can have a <code>MediaController</code>. A
  <code>MediaController</code> is an object that coordinates the playback of multiple <a>media elements</a>, for instance so that a sign-language interpreter
  track can be overlaid on a video track, with the two being kept synchronized.

  By default, a <a>media element</a> has no <code>MediaController</code>. An implicit
  <code>MediaController</code> can be assigned using the <code>mediagroup</code> content attribute. An explicit
  <code>MediaController</code> can be assigned directly using the <code>controller</code> IDL attribute.

  <a>Media elements</a> with a <code>MediaController</code> are said
  to be <i>slaved</i> to their controller. The <code>MediaController</code> modifies the playback
  rate and the playback volume of each of the <a>media elements</a>
  slaved to it, and ensures that when any of its slaved <a>media
  elements</a> unexpectedly stall, the others are stopped at the same time.

  When a <a>media element</a> is slaved to a <code>MediaController</code>, its playback
  rate is fixed to that of the other tracks in the same <code>MediaController</code>, and any
  looping is disabled.

<h6 id="media-controllers">Media controllers</h6>

  <pre class="idl" data-highlight="webidl">
    enum MediaControllerPlaybackState { "waiting", "playing", "ended" };

    [Constructor]
    interface MediaController : EventTarget {
      readonly attribute unsigned short readyState; // uses HTMLMediaElement.readyState's values

      readonly attribute TimeRanges buffered;
      readonly attribute TimeRanges seekable;
      readonly attribute unrestricted double duration;
      attribute double currentTime;

      readonly attribute boolean paused;
      readonly attribute MediaControllerPlaybackState playbackState;
      readonly attribute TimeRanges played;
      void pause();
      void unpause();
      void play(); // calls play() on all media elements as well

      attribute double defaultPlaybackRate;
      attribute double playbackRate;

      attribute double volume;
      attribute boolean muted;

      attribute EventHandler onemptied;
      attribute EventHandler onloadedmetadata;
      attribute EventHandler onloadeddata;
      attribute EventHandler oncanplay;
      attribute EventHandler oncanplaythrough;
      attribute EventHandler onplaying;
      attribute EventHandler onended;
      attribute EventHandler onwaiting;

      attribute EventHandler ondurationchange;
      attribute EventHandler ontimeupdate;
      attribute EventHandler onplay;
      attribute EventHandler onpause;
      attribute EventHandler onratechange;
      attribute EventHandler onvolumechange;
    };
  </pre>

  <dl class="domintro">

    <dt><var>controller</var> = new <code>MediaController</code>()</dt>

    <dd>

    Returns a new <code>MediaController</code> object.

    </dd>

    <dt><var>media</var> . <code>controller</code> [ = <var>controller</var> ]</dt>

    <dd>

    Returns the current <code>MediaController</code> for the <a>media element</a>, if any,
    or null otherwise.

    Can be set, to set an explicit <code>MediaController</code>. Doing so removes the <code>mediagroup</code> attribute, if any.

    </dd>

    <dt><var>controller</var> . <code>readyState</code></dt>

    <dd>

    Returns the state that the <code>MediaController</code> was in the last time it fired events
    as a result of <a>reporting the controller state</a>.
    The values of this attribute are the same as for the <code>readyState</code> attribute of <a>media
    elements</a>.

    </dd>

    <dt><var>controller</var> . <code>buffered</code></dt>

    <dd>

    Returns a <code>TimeRanges</code> object that represents the intersection of the time ranges
    for which the user agent has all relevant media data for all the slaved <a>media elements</a>.

    </dd>

    <dt><var>controller</var> . <code>seekable</code></dt>

    <dd>

    Returns a <code>TimeRanges</code> object that represents the intersection of the time ranges
    into which the user agent can seek for all the slaved <a>media
    elements</a>.

    </dd>

    <dt><var>controller</var> . <code>duration</code></dt>

    <dd>

    Returns the difference between the earliest playable moment and the latest playable moment
    (not considering whether the data in question is actually buffered or directly seekable, but not
    including time in the future for infinite streams). Will return zero if there is no media.

    </dd>

    <dt><var>controller</var> . <code>currentTime</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the <a>current playback position</a>, in seconds, as a position between zero
    time and the current <code>duration</code>.

    Can be set, to seek to the given time.

    </dd>

    <dt><var>controller</var> . <code>paused</code></dt>

    <dd>

    Returns true if playback is paused; false otherwise. When this attribute is true, any
    <a>media element</a> slaved to this controller will be stopped.

    </dd>

    <dt><var>controller</var> . <code>playbackState</code></dt>

    <dd>

    Returns the state that the <code>MediaController</code> was in the last time it fired events
    as a result of <a>reporting the controller state</a>.
    The value of this attribute is either "<code>playing</code>", indicating that the media is actively
    playing, "<code>ended</code>", indicating that the media is
    not playing because playback has reached the end of all the <a>slaved media elements</a>,
    or "<code>waiting</code>", indicating that the media is not
    playing for some other reason (e.g. the <code>MediaController</code> is paused).

    </dd>

    <dt><var>controller</var> . <code>pause</code>()</dt>

    <dd>

    Sets the <code>paused</code> attribute to true.

    </dd>

    <dt><var>controller</var> . <code>unpause</code>()</dt>

    <dd>

    Sets the <code>paused</code> attribute to false.

    </dd>

    <dt><var>controller</var> . <code>play</code>()</dt>

    <dd>

    Sets the <code>paused</code> attribute to false and
    invokes the <code>play()</code> method of each <a>slaved media element</a>.

    </dd>

    <dt><var>controller</var> . <code>played</code></dt>

    <dd>

    Returns a <code>TimeRanges</code> object that represents the union of the time ranges in all
    the slaved <a>media elements</a> that have been played.

    </dd>

    <dt><var>controller</var> . <code>defaultPlaybackRate</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the default rate of playback.

    Can be set, to change the default rate of playback.

    This default rate has no direct effect on playback, but if the user switches to a
    fast-forward mode, when they return to the normal playback mode, it is expected that rate of
    playback (<code>playbackRate</code>) will be returned
    to this default rate.

    </dd>

    <dt><var>controller</var> . <code>playbackRate</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the current rate of playback.

    Can be set, to change the rate of playback.

    </dd>

    <dt><var>controller</var> . <code>volume</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the current playback volume multiplier, as a number in the range 0.0 to 1.0, where
    0.0 is the quietest and 1.0 the loudest.

    Can be set, to change the volume multiplier.

    Throws an <code>IndexSizeError</code> exception if the new value is not in the range 0.0 .. 1.0.

    </dd>

    <dt><var>controller</var> . <code>muted</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns true if all audio is muted (regardless of other attributes either on the controller
    or on any <a>media elements</a> slaved to this controller), and
    false otherwise.

    Can be set, to change whether the audio is muted or not.

    </dd>

  </dl>

  <div class="impl">

  A <a>media element</a> can have a <dfn>current media controller</dfn>, which is a
  <code>MediaController</code> object. When a <a>media element</a> is created without a <code>mediagroup</code> attribute, it does not have a <a>current media
  controller</a>. (If it is created <em>with</em> such an attribute, then that attribute
  initializes the <a>current media controller</a>, as defined below.)

  The <dfn>slaved media elements</dfn> of a <code>MediaController</code> are the <a>media elements</a> whose <a>current media controller</a> is that
  <code>MediaController</code>. All the <a>slaved media elements</a> of a
  <code>MediaController</code> must use the same clock for their definition of their <a>media
  timeline</a>'s unit time. When the user agent is required to act on each <a>slaved media element</a> in turn, they must be processed in the order that they
  were last associated with the <code>MediaController</code>.

  <hr />

  The <dfn><code>controller</code></dfn> attribute on a <a>media
  element</a>, on getting, must return the element's <a>current media controller</a>, if
  any, or null otherwise. On setting, the user agent must run the following steps:

  <ol>

    <li>Let <var>m</var> be the <a>media element</a> in question.</li>

    <li>Let <var>old controller</var> be <var>m</var>'s <a>current media
    controller</a>, if it currently has one, and null otherwise.</li>

    <li>Let <var>new controller</var> be null.</li>

    <li>Let <var>m</var> have no <a>current media controller</a>, if it currently
    has one.</li>

    <li>Remove the element's <code>mediagroup</code> content
    attribute, if any.</li>

    <li>If the new value is null, then jump to the <i>update controllers</i> step below.</li>

    <li>Let <var>m</var>'s <a>current media controller</a> be the new
    value.</li>

    <li>Let <var>new controller</var> be <var>m</var>'s <a>current media
    controller</a>.</li>

    <li><a>Bring the media element up to speed with its new media controller</a>.</li>

    <li><i>Update controllers</i>: If <var>old controller</var> and <var>new
    controller</var> are the same (whether both null or both the same controller) then abort these
    steps.</li>

    <li>If <var>old controller</var> is not null and still has one or more <a>slaved
    media elements</a>, then <a>report the controller state</a> for <var>old
    controller</var>.</li>

    <li>If <var>new controller</var> is not null, then <a>report the controller
    state</a> for <var>new controller</var>.</li>

  </ol>

  <hr />

  The <dfn><code>MediaController()</code></dfn> constructor, when
  invoked, must return a newly created <code>MediaController</code> object.

  <hr />

  The <dfn><code>readyState</code></dfn> attribute must
  return the value to which it was most recently set. When the <code>MediaController</code> object
  is created, the attribute must be set to the value 0 (<code>HAVE_NOTHING</code>). The value is updated by the <a>report the
  controller state</a> algorithm below.

  The <dfn><code>seekable</code></dfn> attribute must return
  a new static <a>normalized <code>TimeRanges</code> object</a> that represents the
  intersection of the ranges of the <a>media resources</a> of the
  <a>slaved media elements</a> that the user agent is able to seek to, at the time the
  attribute is evaluated.

  The <dfn><code>buffered</code></dfn> attribute must return
  a new static <a>normalized <code>TimeRanges</code> object</a> that represents the
  intersection of the ranges of the <a>media resources</a> of the
  <a>slaved media elements</a> that the user agent has buffered, at the time the attribute is
  evaluated. Users agents must accurately determine the ranges available, even for media streams
  where this can only be determined by tedious inspection.

  The <dfn><code>duration</code></dfn> attribute must return
  the <a>media controller duration</a>.

  Every 15 to 250ms, or whenever the <code>MediaController</code>'s <a>media controller
  duration</a> changes, whichever happens least often, the user agent must <a>queue a
  task</a> to <a>fire a simple event</a> named <code>durationchange</code> at the
  <code>MediaController</code>. If the <code>MediaController</code>'s <a>media controller
  duration</a> decreases such that the <a>media controller position</a> is greater than the
  <a>media controller duration</a>, the user agent must <a>immediately</a> <a>seek the media
  controller</a> to <a>media controller duration</a>.

  The <dfn><code>currentTime</code></dfn> attribute must
  return the <a>media controller position</a> on getting, and on setting must <a>seek the
  media controller</a> to the new value.

  Every 15 to 250ms, or whenever the <code>MediaController</code>'s <a>media controller
  position</a> changes, whichever happens least often, the user agent must <a>queue a
  task</a> to <a>fire a simple event</a> named <code>timeupdate</code> at the
  <code>MediaController</code>.

  <hr />

  When a <code>MediaController</code> is created it is a <dfn>playing media controller</dfn>. It
  can be changed into a <dfn>paused media controller</dfn> and back either via the user agent's user
  interface (when the element is <a>exposing a user
  interface to the user</a>) or by script using the APIs defined in this section (see below).

  The <dfn><code>paused</code></dfn> attribute must return
  true if the <code>MediaController</code> object is a <a>paused media controller</a>, and
  false otherwise.

  When the <dfn><code>pause()</code></dfn> method is invoked,
  if the <code>MediaController</code> is a <a>playing media controller</a> then the user agent
  must change the <code>MediaController</code> into a <a>paused media controller</a>,
  <a>queue a task</a> to <a>fire a simple event</a> named <code>pause</code> at the <code>MediaController</code>, and then
  <a>report the controller state</a> of the <code>MediaController</code>.

  When the <dfn><code>unpause()</code></dfn> method is
  invoked, if the <code>MediaController</code> is a <a>paused media controller</a>, the user
  agent must change the <code>MediaController</code> into a <a>playing media controller</a>,
  <a>queue a task</a> to <a>fire a simple event</a> named <code>play</code> at the <code>MediaController</code>, and then
  <a>report the controller state</a> of the <code>MediaController</code>.

  When the <dfn><code>play()</code></dfn> method is invoked, the
  user agent must invoke the <code>play()</code> method of each <a>slaved media element</a> in turn, and then invoke the <code>unpause</code> method of the <code>MediaController</code>.

  The <dfn><code>playbackState</code></dfn> attribute
  must return the value to which it was most recently set. When the <code>MediaController</code>
  object is created, the attribute must be set to the value "<code>waiting</code>". The value is updated by the <a>report the
  controller state</a> algorithm below.

  The <dfn><code>played</code></dfn> attribute must return a
  new static <a>normalized <code>TimeRanges</code> object</a> that represents the union of the
  ranges of points on the <a>media timelines</a> of the <a>media resources</a> of the <a>slaved media elements</a> that the
  user agent has so far reached through the usual monotonic increase of their <a>current playback positions</a> during normal playback, at the time the
  attribute is evaluated.

  <hr />

  A <code>MediaController</code> has a <dfn>media controller default playback rate</dfn> and a
  <dfn>media controller playback rate</dfn>, which must both be set to 1.0 when the
  <code>MediaController</code> object is created.

  The <dfn><code>defaultPlaybackRate</code></dfn>
  attribute, on getting, must return the <code>MediaController</code>'s <a>media controller
  default playback rate</a>, and on setting, must set the <code>MediaController</code>'s
  <a>media controller default playback rate</a> to the new value, then <a>queue a
  task</a> to <a>fire a simple event</a> named <code>ratechange</code> at the
  <code>MediaController</code>.

  The <dfn><code>playbackRate</code></dfn> attribute, on
  getting, must return the <code>MediaController</code>'s <a>media controller playback
  rate</a>, and on setting, must set the <code>MediaController</code>'s <a>media controller
  playback rate</a> to the new value, then <a>queue a task</a> to <a>fire a simple
  event</a> named <code>ratechange</code> at the
  <code>MediaController</code>.

  <hr />

  A <code>MediaController</code> has a <dfn>media controller volume multiplier</dfn>, which must
  be set to 1.0 when the <code>MediaController</code> object is created, and a <dfn>media controller
  mute override</dfn>, much must initially be false.

  The <dfn><code>volume</code></dfn> attribute, on getting,
  must return the <code>MediaController</code>'s <a>media controller volume multiplier</a>,
  and on setting, if the new value is in the range 0.0 to 1.0 inclusive, must set the
  <code>MediaController</code>'s <a>media controller volume multiplier</a> to the new value
  and <a>queue a task</a> to <a>fire a simple event</a> named <code>volumechange</code> at the
  <code>MediaController</code>. If the new value is outside the range 0.0 to 1.0 inclusive, then, on
  setting, an <code>IndexSizeError</code> exception must be thrown instead.

  The <dfn><code>muted</code></dfn> attribute, on getting, must
  return the <code>MediaController</code>'s <a>media controller mute override</a>, and on
  setting, must set the <code>MediaController</code>'s <a>media controller mute override</a>
  to the new value and <a>queue a task</a> to <a>fire a simple event</a> named <code>volumechange</code> at the
  <code>MediaController</code>.

  <hr />

  The <a>media resources</a> of all the <a>slaved media
  elements</a> of a <code>MediaController</code> have a defined temporal relationship which
  provides relative offsets between the zero time of each such <a>media resource</a>: for
  <a>media resources</a> with a <a>timeline offset</a>, their
  relative offsets are the difference between their <a>timeline offset</a>; the zero times of
  all the <a>media resources</a> without a <a>timeline offset</a>
  are not offset from each other (i.e. the origins of their timelines are cotemporal); and finally,
  the zero time of the <a>media resource</a> with the earliest <a>timeline offset</a>
  (if any) is not offset from the zero times of the <a>media
  resources</a> without a <a>timeline offset</a> (i.e. the origins of <a>media resources</a> without a <a>timeline offset</a> are further cotemporal
  with the earliest defined point on the timeline of the <a>media resource</a> with the
  earliest <a>timeline offset</a>).

  The <dfn>media resource end position</dfn> of a <a>media resource</a> in a <a>media
  element</a> is defined as follows: if the <a>media resource</a> has a finite and known
  duration, the <a>media resource end position</a> is the duration of the <a>media
  resource</a>'s timeline (the last defined position on that timeline); otherwise, the
  <a>media resource</a>'s duration is infinite or unknown, and the <a>media resource end
  position</a> is the time of the last frame of <a>media data</a> currently available for
  that <a>media resource</a>.

  Each <code>MediaController</code> also has its own defined timeline. On this timeline, all the
  <a>media resources</a> of all the <a>slaved media elements</a>
  of the <code>MediaController</code> are temporally aligned according to their defined offsets. The
  <dfn>media controller duration</dfn> of that <code>MediaController</code> is the time from the
  earliest <a>earliest possible position</a>, relative to this <code>MediaController</code>
  timeline, of any of the <a>media resources</a> of the <a>slaved
  media elements</a> of the <code>MediaController</code>, to the time of the latest <a>media
  resource end position</a> of the <a>media resources</a> of the
  <a>slaved media elements</a> of the <code>MediaController</code>, again relative to this
  <code>MediaController</code> timeline.

  Each <code>MediaController</code> has a <dfn>media controller position</dfn>. This is the time
  on the <code>MediaController</code>'s timeline at which the user agent is trying to play the
  <a>slaved media elements</a>. When a <code>MediaController</code> is created, its
  <a>media controller position</a> is initially zero.

  When the user agent is to <dfn>bring a media element up to speed with its new media controller</dfn>, it must <a>seek</a> that <a>media element</a> to the
  <code>MediaController</code>'s <a>media controller position</a> relative to the <a>media
  element</a>'s timeline.

  When the user agent is to <dfn>seek the media controller</dfn> to a particular <var>new playback position</var>, it must follow these steps:

  <ol>

    <li>If the <var>new playback position</var> is less than zero, then set it to
    zero.</li>

    <li>If the <var>new playback position</var> is greater than the <a>media
    controller duration</a>, then set it to the <a>media controller duration</a>.</li>

    <li>Set the <a>media controller position</a> to the <var>new playback
    position</var>.</li>

    <li><a>Seek</a> each <a>slaved
    media element</a> to the <var>new playback position</var> relative to the <a>media
    element</a> timeline.</li>

  </ol>

  A <code>MediaController</code> is a <dfn>blocked media controller</dfn> if the
  <code>MediaController</code> is a <a>paused media controller</a>, or if any of its
  <a>slaved media elements</a> are <a>blocked media
  elements</a>, or if any of its <a>slaved media elements</a> whose <a>autoplaying
  flag</a> is true still have their <code>paused</code> attribute set to
  true, or if all of its <a>slaved media elements</a> have their <code>paused</code> attribute set to true.

  A <a>media element</a> is <dfn>blocked on its media controller</dfn> if the
  <code>MediaController</code> is a <a>blocked media controller</a>, or if its <a>media
  controller position</a> is either before the <a>media resource</a>'s <a>earliest
  possible position</a> relative to the <code>MediaController</code>'s timeline or after the end
  of the <a>media resource</a> relative to the <code>MediaController</code>'s timeline.

  When a <code>MediaController</code> is not a <a>blocked media
  controller</a> and it has at least one <a>slaved media
  element</a> whose <code>Document</code> is a <a>fully active</a> <code>Document</code>,
  the <code>MediaController</code>'s <a>media controller position</a> must increase
  monotonically at <a>media controller playback rate</a> units of time on the
  <code>MediaController</code>'s timeline per unit time of the clock used by its <a>slaved media
  elements</a>.

  When the zero point on the timeline of a <code>MediaController</code> moves relative to the
  timelines of the <a>slaved media elements</a> by a time difference <var>ÎT</var>, the <code>MediaController</code>'s <a>media controller
  position</a> must be decremented by <var>ÎT</var>.

  <p class="note">
    In some situations, e.g. when playing back a live stream without buffering
  anything, the <a>media controller position</a> would increase monotonically as described
  above at the same rate as the <var>ÎT</var> described in the previous paragraph
  decreases it, with the end result that for all intents and purposes, the <a>media controller
  position</a> would appear to remain constant (probably with the value 0).
  </p>

  <hr />

  A <code>MediaController</code> has a <dfn>most recently reported readiness state</dfn>, which
  is a number from 0 to 4 derived from the numbers used for the <a>media element</a> <code>readyState</code> attribute, and a <dfn>most recently reported
  playback state</dfn>, which is either <i>playing</i>, <i>waiting</i>, or <i>ended</i>.

  When a <code>MediaController</code> is created, its <a>most recently reported readiness
  state</a> must be set to 0, and its <a>most recently reported playback state</a> must be
  set to <i>waiting</i>.

  When a user agent is required to <dfn>report the controller state</dfn> for a
  <code>MediaController</code>, the user agent must run the following steps:

  <ol>

    <li>

    If the <code>MediaController</code> has no <a>slaved media elements</a>, let <var>new readiness state</var> be 0.

    Otherwise, let it have the lowest value of the <code>readyState</code> IDL attributes of all of its <a>slaved media
    elements</a>.

    </li>

    <li>

    If the <code>MediaController</code>'s <a>most recently reported readiness state</a> is
    less than the <var>new readiness state</var>, then run these substeps:

    <ol>

      <li>Let <var>next state</var> be the <code>MediaController</code>'s <a>most
      recently reported readiness state</a>.</li>

      <li><i>Loop</i>: Increment <var>next state</var> by one.</li>

      <li>

      <a>Queue a task</a> to run the following steps:

      <ol>

        <li>Set the <code>MediaController</code>'s <code>readyState</code> attribute to the value <var>next state</var>.</li>

        <li><a>Fire a simple event</a> at the <code>MediaController</code> object, whose
        name is the event name corresponding to the value of <var>next state</var> given in
        the table below.</li>

      </ol>

      </li>

      <li>If <var>next state</var> is less than <var>new readiness state</var>,
      then return to the step labeled <i>loop</i>.</li>

    </ol>

    Otherwise, if the <code>MediaController</code>'s <a>most recently reported readiness
    state</a> is greater than <var>new readiness state</var> then <a>queue a
    task</a> to <a>fire a simple event</a> at the <code>MediaController</code> object,
    whose name is the event name corresponding to the value of <var>new readiness
    state</var> given in the table below.

    <table>
      <thead>
      <tr>
        <th>Value of <var>new readiness state</var>
        </th><th>Event name

      </th></tr></thead><tbody>
      <tr>
        <td> 0
        </td><td> <code>emptied</code>

      </td></tr><tr>
        <td> 1
        </td><td> <code>loadedmetadata</code>

      </td></tr><tr>
        <td> 2
        </td><td> <code>loadeddata</code>

      </td></tr><tr>
        <td> 3
        </td><td> <code>canplay</code>

      </td></tr><tr>
        <td> 4
        </td><td> <code>canplaythrough</code>

    </td></tr></tbody></table>

    </li>

    <li>Let the <code>MediaController</code>'s <a>most recently reported readiness state</a>
    be <var>new readiness state</var>.</li>

    <li>

    Initialize <var>new playback state</var> by setting it to the state given for the
    first matching condition from the following list:

    <dl class="switch">

      <dt>If the <code>MediaController</code> has no <a>slaved media elements</a></dt>

      <dd>Let <var>new playback state</var> be <i>waiting</i>.</dd>

      <dt>If all of the <code>MediaController</code>'s <a>slaved media elements</a> have
      <a>ended playback</a> and the <a>media controller playback rate</a> is positive or
      zero</dt>

      <dd>Let <var>new playback state</var> be <i>ended</i>.</dd>

      <dt>If the <code>MediaController</code> is a <a>blocked media controller</a></dt>

      <dd>Let <var>new playback state</var> be <i>waiting</i>.</dd>

      <dt>Otherwise</dt>

      <dd>Let <var>new playback state</var> be <i>playing</i>.</dd>

    </dl>

    </li>

    <li>If the <code>MediaController</code>'s <a>most recently reported playback state</a>
    is not equal to <var>new playback state</var> and the <var>new playback
    state</var> is <i>ended</i>, then <a>queue a task</a> that, if the
    <code>MediaController</code> object is a <a>playing media controller</a>, and all of the
    <code>MediaController</code>'s <a>slaved media elements</a> have still <a>ended
    playback</a>, and the <a>media controller playback rate</a> is still positive or zero,
    changes the <code>MediaController</code> object to a <a>paused media controller</a> and
    then <a>fires a simple event</a> named <code>pause</code> at the <code>MediaController</code>
    object.</li>

    <li>

    If the <code>MediaController</code>'s <a>most recently reported playback state</a> is
    not equal to <var>new playback state</var> then <a>queue a task</a> to run the
    following steps:

    <ol>

      <li>Set the <code>MediaController</code>'s <code>playbackState</code> attribute to the value given in
      the second column of the row of the following table whose first column contains the <var>new playback state</var>.</li>

      <li><a>Fire a simple event</a> at the <code>MediaController</code> object, whose name
      is the value given in the third column of the row of the following table whose first column
      contains the <var>new playback state</var>.</li>

    </ol>

    <table>
      <thead>
      <tr>
        <th>New playback state
        </th><th>New value for <code>playbackState</code>
        </th><th>Event name
      </th></tr></thead><tbody>
      <tr>
        <td><i>playing</i>
        </td><td>"<dfn><code>playing</code></dfn>"
        </td><td><code>playing</code>
      </td></tr><tr>
        <td><i>waiting</i>
        </td><td>"<dfn><code>waiting</code></dfn>"
        </td><td><code>waiting</code>
      </td></tr><tr>
        <td><i>ended</i>
        </td><td>"<dfn><code>ended</code></dfn>"
        </td><td><code>ended</code>
    </td></tr></tbody></table>

    </li>

    <li>Let the <code>MediaController</code>'s <a>most recently reported playback state</a>
    be <var>new playback state</var>.</li>

  </ol>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span> supported, as <a>event handler IDL attributes</a>,
  by all objects implementing the <code>MediaController</code> interface:

  <table>
    <thead>
    <tr><th><a>Event handler</a> </th><th><a>Event handler event type</a>
    </th></tr></thead><tbody>
    <tr><td><dfn><code>onemptied</code></dfn> </td><td> <code>emptied</code>
    </td></tr><tr><td><dfn><code>onloadedmetadata</code></dfn> </td><td> <code>loadedmetadata</code>
    </td></tr><tr><td><dfn><code>onloadeddata</code></dfn> </td><td> <code>loadeddata</code>
    </td></tr><tr><td><dfn><code>oncanplay</code></dfn> </td><td> <code>canplay</code>
    </td></tr><tr><td><dfn><code>oncanplaythrough</code></dfn> </td><td> <code>canplaythrough</code>
    </td></tr><tr><td><dfn><code>onplaying</code></dfn> </td><td> <code>playing</code>
    </td></tr><tr><td><dfn><code>onended</code></dfn> </td><td> <code>ended</code>
    </td></tr><tr><td><dfn><code>onwaiting</code></dfn> </td><td> <code>waiting</code>
    </td></tr></tbody><tbody>
    <tr><td><dfn><code>ondurationchange</code></dfn> </td><td> <code>durationchange</code>
    </td></tr><tr><td><dfn><code>ontimeupdate</code></dfn> </td><td> <code>timeupdate</code>
    </td></tr><tr><td><dfn><code>onplay</code></dfn> </td><td> <code>play</code>
    </td></tr><tr><td><dfn><code>onpause</code></dfn> </td><td> <code>pause</code>
    </td></tr><tr><td><dfn><code>onratechange</code></dfn> </td><td> <code>ratechange</code>
    </td></tr><tr><td><dfn><code>onvolumechange</code></dfn> </td><td> <code>volumechange</code>
  </td></tr></tbody></table>

  <hr />

  The <a>task source</a> for the <a>tasks</a> listed in this
  section is the <a>DOM manipulation task source</a>.

  </div>

<h6 id="assigning-a-media-controller-declaratively">Assigning a media controller declaratively</h6>

  The <dfn><code>mediagroup</code></dfn> content attribute on <a>media elements</a> can be used to link multiple <a>media elements</a> together by implicitly creating a <code>MediaController</code>. The
  value is text; <a>media elements</a> with the same value are
  automatically linked by the user agent.

  <div class="impl">

  When a <a>media element</a> is created with a <code>mediagroup</code> attribute, and when a <a>media element</a>'s
  <code>mediagroup</code> attribute is set, changed, or removed, the
  user agent must run the following steps:

  <ol>

    <li>Let <var>m</var> be the <a>media element</a> in question.</li>

    <li>Let <var>old controller</var> be <var>m</var>'s <a>current media
    controller</a>, if it currently has one, and null otherwise.</li>

    <li>Let <var>new controller</var> be null.</li>

    <li>Let <var>m</var> have no <a>current media controller</a>, if it currently
    has one.</li>

    <li>If <var>m</var>'s <code>mediagroup</code> attribute
    is being removed, then jump to the <i>update controllers</i> step below.</li>

    <li>

    If there is another <a>media element</a> whose <code>Document</code> is the same as
    <var>m</var>'s <a>node document</a> (even if one or both of these elements are not
    actually <a><em>in</em> the <code>Document</code></a>), and which
    also has a <code>mediagroup</code> attribute, and whose <code>mediagroup</code> attribute has the same value as the new value of
    <var>m</var>'s <code>mediagroup</code> attribute, then
    let <var>controller</var> be that <a>media element</a>'s <a>current media
    controller</a>.

    Otherwise, let <var>controller</var> be a newly created
    <code>MediaController</code>.

    </li>

    <li>Let <var>m</var>'s <a>current media controller</a> be <var>controller</var>.</li>

    <li>Let <var>new controller</var> be <var>m</var>'s <a>current media
    controller</a>.</li>

    <li><a>Bring the media element up to speed with its new media
    controller</a>.</li>

    <li><i>Update controllers</i>: If <var>old
    controller</var> and <var>new controller</var> are the
    same (whether both null or both the same controller) then abort
    these steps.</li>

    <li>If <var>old controller</var> is not null and still has one or more <a>slaved
    media elements</a>, then <a>report the controller state</a> for <var>old
    controller</var>.</li>

    <li>If <var>new controller</var> is not null, then <a>report the controller
    state</a> for <var>new controller</var>.</li>

  </ol>

  The <dfn><code>mediaGroup</code></dfn> IDL attribute on <a>media elements</a> must <a>reflect</a> the <code>mediagroup</code> content attribute.

  </div>

  <div class="example">
    Multiple <a>media elements</a> referencing the same <a>media
    resource</a> will share a single network request. This can be used to efficiently play two
    (video) tracks from the same <a>media resource</a> in two different places on the screen.
    Used with the <code>mediagroup</code> attribute, these elements can
    also be kept synchronized.

    In this example, a sign-languge interpreter track from a movie file is overlaid on the primary
    video track of that same video file using two <code>video</code> elements, some CSS, and an
    implicit <code>MediaController</code>:

    <pre highlight="html">
&lt;article&gt;
  &lt;style scoped&gt;
  div { margin: 1em auto; position: relative; width: 400px; height: 300px; }
  video { position; absolute; bottom: 0; right: 0; }
  video:first-child { width: 100%; height: 100%; }
  video:last-child { width: 30%; }
  &lt;/style&gt;
  &lt;div&gt;
  &lt;video src="movie.vid#track=Video&amp;amp;track=English" autoplay controls mediagroup=movie&gt;&lt;/video&gt;
  &lt;video src="movie.vid#track=sign" autoplay mediagroup=movie&gt;&lt;/video&gt;
  &lt;/div&gt;
&lt;/article&gt;
    </pre>

  </div>

<h5 id="timed-text-tracks">Timed text tracks</h5>

<h6 id="text-track-model">Text track model</h6>

  A <a>media element</a> can have a group of associated <dfn>text
  tracks</dfn>, known as the <a>media element</a>'s <dfn>list of text tracks</dfn>. The <a>text tracks</a> are sorted as follows:

  <ol class="brief">

    <li>The <a>text tracks</a> corresponding to <code>track</code> element
    children of the <a>media element</a>, in <a>tree order</a>.</li>

    <li>Any <a>text tracks</a> added using the <code>addTextTrack()</code> method, in the order they were added, oldest
    first.</li>

    <li>Any <a>media-resource-specific text
    tracks</a> (<a>text tracks</a> corresponding to data in the
    <a>media resource</a>), in the order defined by the <a>media resource</a>'s format
    specification.</li>

  </ol>

  A <a>text track</a> consists of:

  <dl>

    <dt><dfn>The kind of text track</dfn>

    </dt><dd>

    This decides how the track is handled by the user agent. The kind is represented by a string.
    The possible strings are:

    <ul class="brief">
      <li><dfn><code>subtitles</code></dfn>
      </li><li><dfn><code>captions</code></dfn>
      </li><li><dfn><code>descriptions</code></dfn>
      </li><li><dfn><code>chapters</code></dfn>
      </li><li><dfn><code>metadata</code></dfn>
    </li></ul>

    The <a>kind of track</a> can change dynamically, in the case of
    a <a>text track</a> corresponding to a <code>track</code> element.

    </dd>

    <dt><dfn>A label</dfn>

    </dt><dd>

    This is a human-readable string intended to identify the track for the user.

    The <a>label of a track</a> can change dynamically, in the
    case of a <a>text track</a> corresponding to a <code>track</code> element.

    When a <a>text track label</a> is the empty string, the user agent should automatically
    generate an appropriate label from the text track's other properties (e.g. the kind of text
    track and the text track's language) for use in its user interface. This automatically-generated
    label is not exposed in the API.

    </dd>

    <dt><dfn>An in-band metadata track dispatch type</dfn>

    </dt><dd>

    This is a string extracted from the <a>media resource</a> specifically for in-band
    metadata tracks to enable such tracks to be dispatched to different scripts in the document.

    <p class="example">For example, a traditional TV station broadcast streamed on the Web and
    augmented with Web-specific interactive features could include text tracks with metadata for ad
    targeting, trivia game data during game shows, player states during sports games, recipe
    information during food programs, and so forth. As each program starts and ends, new tracks
    might be added or removed from the stream, and as each one is added, the user agent could bind
    them to dedicated script modules using the value of this attribute.</p>

    Other than for in-band metadata text tracks, the <a>in-band metadata track dispatch type</a> is the empty string. How this
    value is populated for different media formats is described in <a>steps to expose a
    media-resource-specific text track</a>.

    </dd>

    <dt><dfn>A language</dfn>

    </dt><dd>

    This is a string (a BCP 47 language tag) representing the language of the text track's cues.
    [[!BCP47]]

    The <a>language of a text track</a> can change dynamically,
    in the case of a <a>text track</a> corresponding to a <code>track</code> element.

    </dd>

    <dt><dfn>A readiness state</dfn>

    </dt><dd>

    One of the following:

    <dl>

      <dt><dfn>Not loaded</dfn>

      </dt><dd>

      Indicates that the text track's cues have not been obtained.

      </dd>

      <dt><dfn>Loading</dfn>

      </dt><dd>

      Indicates that the text track is loading and there have been no fatal errors encountered so
      far. Further cues might still be added to the track by the parser.

      </dd>

      <dt><dfn>Loaded</dfn>

      </dt><dd>

      Indicates that the text track has been loaded with no fatal errors.

      </dd>

      <dt><dfn>Failed to load</dfn>

      </dt><dd>

      Indicates that the text track was enabled, but when the user agent attempted to obtain it,
      this failed in some way (e.g. <a>URL</a> could not be <a>resolved</a>, network error, unknown text track format). Some or all of the cues are
      likely missing and will not be obtained.

      </dd>

    </dl>

    The <a>readiness state</a> of a <a>text
    track</a> changes dynamically as the track is obtained.

    </dd>

    <dt><dfn>A mode</dfn>

    </dt><dd>

    One of the following:

    <dl>

      <dt><dfn>Disabled</dfn>

      </dt><dd>

      Indicates that the text track is not active. Other than for the purposes of exposing the
      track in the DOM, the user agent is ignoring the text track. No cues are active, no events are
      fired, and the user agent will not attempt to obtain the track's cues.

      </dd>

      <dt><dfn>Hidden</dfn>

      </dt><dd>

      Indicates that the text track is active, but that the user agent is not actively displaying
      the cues. If no attempt has yet been made to obtain the track's cues, the user agent will
      perform such an attempt momentarily. The user agent is maintaining a list of which cues are
      active, and events are being fired accordingly.

      </dd>

      <dt><dfn>Showing</dfn>

      </dt><dd>

      Indicates that the text track is active. If no attempt has yet been made to obtain the
      track's cues, the user agent will perform such an attempt momentarily. The user agent is
      maintaining a list of which cues are active, and events are being fired accordingly. In
      addition, for text tracks whose <a>kind</a> is <code>subtitles</code> or <code>captions</code>, the cues are being overlaid on the video
      as appropriate; for text tracks whose <a>kind</a> is <code>descriptions</code>, the user agent is making the
      cues available to the user in a non-visual fashion; and for text tracks whose <a>kind</a> is <code>chapters</code>, the user agent is making available to
      the user a mechanism by which the user can navigate to any point in the <a>media
      resource</a> by selecting a cue.

      </dd>

    </dl>

    </dd>

    <dt><dfn>A list of zero or more cues</dfn>

    </dt><dd>

    A list of <a>text track cues</a>, along with <dfn>rules for
    updating the text track rendering</dfn>. For example, for <a>WebVTT</a>, the <a>rules
    for updating the display of WebVTT text tracks</a>. [[!WEBVTT]]

    The <a>list of cues of a text track</a> can change
    dynamically, either because the <a>text track</a> has <a>not yet been loaded</a> or is still <a>loading</a>,
    or due to DOM manipulation.

    </dd>

  </dl>

  Each <a>text track</a> has a corresponding <code>TextTrack</code> object.

  <hr />

  Each <a>media element</a> has a <dfn>list of pending text tracks</dfn>, which must
  initially be empty, a <dfn>blocked-on-parser</dfn> flag, which must initially be false, and a
  <dfn>did-perform-automatic-track-selection</dfn> flag, which must also initially be false.

  When the user agent is required to <dfn>populate the list of pending text tracks</dfn> of a
  <a>media element</a>, the user agent must add to the element's <a>list of pending text
  tracks</a> each <a>text track</a> in the element's <a>list of text tracks</a> whose
  <a>text track mode</a> is not <a>disabled</a> and whose
  <a>text track readiness state</a> is  <a>loading</a>.

  Whenever a <code>track</code> element's parent node changes, the user agent must remove the
  corresponding <a>text track</a> from any <a>list of pending text tracks</a> that it is
  in.

  Whenever a <a>text track</a>'s <a>text track readiness state</a> changes to either
  <a>loaded</a> or <a>failed to
  load</a>, the user agent must remove it from any <a>list of pending text tracks</a> that
  it is in.

  When a <a>media element</a> is created by an <a>HTML parser</a> or <a>XML
  parser</a>, the user agent must set the element's <a>blocked-on-parser</a> flag to true.
  When a <a>media element</a> is popped off the <a>stack of open elements</a> of an
  <a>HTML parser</a> or <a>XML parser</a>, the user agent must <a>honor user
  preferences for automatic text track selection</a>, <a>populate the list of pending text
  tracks</a>, and set the element's <a>blocked-on-parser</a> flag to false.

  The <a>text tracks</a> of a <a>media element</a> are <dfn>ready</dfn> when both the element's <a>list of pending text
  tracks</a> is empty and the element's <a>blocked-on-parser</a> flag is false.

  Each <a>media element</a> has a <dfn>pending text track change notification flag</dfn>,
  which must initially be unset.

  Whenever a <a>text track</a> that is in a <a>media element</a>'s <a>list of text
  tracks</a> has its <a>text track mode</a> change value, the user agent must run the
  following steps for the <a>media element</a>:

  <ol>

    <li>If the <a>media element</a>'s <a>pending text track change notification
    flag</a> is set, abort these steps.</li>

    <li>Set the <a>media element</a>'s <a>pending text track change notification
    flag</a>.</li>

    <li>

    <a>Queue a task</a> that runs the following substeps:

    <ol>

      <li>Unset the <a>media element</a>'s <a>pending text track change notification
      flag</a>.</li>

      <li><a>Fire a simple event</a> named <code>change</code> at
      the <a>media element</a>'s <code>textTracks</code>
      attribute's <code>TextTrackList</code> object.</li>

    </ol>

    </li>

    <li>If the <a>media element</a>'s <a>show poster flag</a> is not set, run the
    <i>time marches on</i> steps.</li>

  </ol>

  The <a>task source</a> for the <a>tasks</a> listed in this
  section is the <a>DOM manipulation task source</a>.

  <hr />

  A <dfn>text track cue</dfn> is the unit of time-sensitive data in a <a>text track</a>,
  corresponding for instance for subtitles and captions to the text that appears at a particular
  time and disappears at another time.

  Each <a>text track cue</a> consists of:

  <dl>

    <dt><dfn>An identifier</dfn>
    </dt><dd>
    An arbitrary string.
    </dd>

    <dt><dfn>A start time</dfn>
    </dt><dd>
    The time, in seconds and fractions of a second, that describes the beginning of the range of
    the <a>media data</a> to which the cue applies.
    </dd>

    <dt><dfn>An end time</dfn>
    </dt><dd>
    The time, in seconds and fractions of a second, that describes the end of the range of the
    <a>media data</a> to which the cue applies.
    </dd>

    <dt><dfn>A pause-on-exit flag</dfn>
    </dt><dd>
    A boolean indicating whether playback of the <a>media resource</a> is to pause when the
    end of the range to which the cue applies is reached.
    </dd>

    <dt>Some additional format-specific data</dt>
    <dd>
    Additional fields, as needed for the format. For example, WebVTT has a <a>text track cue
    writing direction</a> and so forth. [[!WEBVTT]]
    </dd>

    <dt><dfn>Rules for extracting the chapter title</dfn>
    </dt><dd>
    An algorithm which, when applied to the cue, returns a string that can be used in user
    interfaces that use the cue as a chapter title.
    </dd>

  </dl>

  <p class="note">
    The <a>text track cue start time</a> and <a>text track cue end
  time</a> can be negative. (The <a>current playback position</a> can never be negative,
  though, so cues entirely before time zero cannot be active.)
  </p>

  Each <a>text track cue</a> has a corresponding <code>TextTrackCue</code> object (or more
  specifically, an object that inherits from <code>TextTrackCue</code> â for example, WebVTT
  cues use the <code>VTTCue</code> interface). A <a>text track cue</a>'s in-memory
  representation can be dynamically changed through this <code>TextTrackCue</code> API. [[!WEBVTT]]

  A <a>text track cue</a> is associated with <a>rules for updating the text track
  rendering</a>, as defined by the specification for the specific kind of <a>text track
  cue</a>. These rules are used specifically when the object representing the cue is added to a
  <code>TextTrack</code> object using the <code>addCue()</code>
  method.

  In addition, each <a>text track cue</a> has two pieces of dynamic information:

  <dl>

    <dt>The <dfn>active flag</dfn>
    </dt><dd>

    This flag must be initially unset. The flag is used to ensure events are fired appropriately
    when the cue becomes active or inactive, and to make sure the right cues are rendered.

    The user agent must immediately unset this flag whenever the <a>text track cue</a> is
    removed from its <a>text track</a>'s <a>text track list of cues</a>; whenever the
    <a>text track</a> itself is removed from its <a>media element</a>'s <a>list of
    text tracks</a> or has its <a>text track mode</a> changed to <a>disabled</a>; and whenever the <a>media element</a>'s <code>readyState</code> is changed back to <code>HAVE_NOTHING</code>. When the flag is unset in this way for one
    or more cues in <a>text tracks</a> that were <a>showing</a> prior to the relevant incident, the user agent must, after having unset
    the flag for all the affected cues, apply the <a>rules for updating the text track
    rendering</a> of those <a>text tracks</a>. For example, for <a>text tracks</a> based on <a>WebVTT</a>, the <a>rules for updating
    the display of WebVTT text tracks</a>. [[!WEBVTT]] </dd>

    <dt>The <dfn>display state</dfn>
    </dt><dd>

    This is used as part of the rendering model, to keep cues in a consistent position. It must
    initially be empty. Whenever the <a>text track cue active flag</a> is unset, the user
    agent must empty the <a>text track cue display state</a>.

    </dd>

  </dl>

  The <a>text track cues</a> of a <a>media element</a>'s
  <a>text tracks</a> are ordered relative to each other in the <dfn>text
  track cue order</dfn>, which is determined as follows: first group the <a>cues</a> by their <a>text track</a>, with the groups being sorted in the same order
  as their <a>text tracks</a> appear in the <a>media element</a>'s
  <a>list of text tracks</a>; then, within each group, <a>cues</a> must be sorted by their <a>start
  time</a>, earliest first; then, any <a>cues</a> with the same
  <a>start time</a> must be sorted by their <a>end time</a>, latest first; and finally, any <a>cues</a> with identical <a>end
  times</a> must be sorted in the order they were last added to their respective <a>text track
  list of cues</a>, oldest first (so e.g. for cues from a WebVTT file, that would initially be
  the order in which the cues were listed in the file). [[!WEBVTT]]

<h6 id="sourcing-inband-text-tracks">Sourcing in-band text tracks</h6>

  A <dfn>media-resource-specific text track</dfn> is a <a>text track</a> that corresponds
  to data found in the <a>media resource</a>.

  <div class="impl">

  Rules for processing and rendering such data are defined by the relevant specifications, e.g.
  the specification of the video format if the <a>media resource</a> is a video. Details for
  some legacy formats can be found in the <cite>Sourcing In-band Media Resource Tracks from Media
  Containers into HTML</cite> specification. [[!INBAND]]

  When a <a>media resource</a> contains data that the user agent recognizes and supports as
  being equivalent to a <a>text track</a>, the user agent <a>runs</a> the <dfn>steps to expose a
  media-resource-specific text track</dfn> with the relevant data, as follows.

  <ol>

    <li>Associate the relevant data with a new <a>text track</a> and its corresponding new
    <code>TextTrack</code> object. The <a>text track</a> is a <a>media-resource-specific
    text track</a>.</li>

    <li>Set the new <a>text track</a>'s <a>kind</a>, <a>label</a>, and <a>language</a>
    based on the semantics of the relevant data, as defined for the relevant format [[!INBAND]]. If there is no label in that data, then the <a>label</a> must be set to the empty string.</li>

    <li>Associate the <a>text track list of cues</a> with the <a>rules for updating the
    text track rendering</a> appropriate for the format in question.

    </li><li>

    If the new <a>text track</a>'s <a>kind</a> is <code>metadata</code>, then set the <a>text track in-band
    metadata track dispatch type</a> as follows, based on the type of the <a>media
    resource</a>:

    <dl class="switch">

      <dt>If the <a>media resource</a> is an Ogg file</dt>

      <dd>The <a>text track in-band metadata track dispatch type</a> must be set to the value
      of the Role header field. [[!OGGSKELETON]]</dd>

      <dt>If the <a>media resource</a> is a WebM file</dt>

      <dd>The <a>text track in-band metadata track dispatch type</a> must be set to the value
      of the <code>CodecID</code> element. [[!WEBM]]</dd>

      <dt>If the <a>media resource</a> is an MPEG-2 file</dt>

      <dd>Let <var>stream type</var> be the value of the "stream_type" field describing the
      text track's type in the file's program map section, interpreted as an 8-bit unsigned integer.
      Let <var>length</var> be the value of the "ES_info_length" field for the track in the
      same part of the program map section, interpreted as an integer as defined by the MPEG-2
      specification. Let <var>descriptor bytes</var> be the <var>length</var> bytes
      following the "ES_info_length" field. The <a>text track in-band metadata track dispatch
      type</a> must be set to the concatenation of the <var>stream type</var> byte and
      the zero or more <var>descriptor bytes</var> bytes, expressed in hexadecimal using
      <a>uppercase ASCII hex digits</a>. [[!MPEG2TS]]

      </dd>

      <dt>If the <a>media resource</a> is an MPEG-4 file</dt>

      <dd>Let the
      first <code>stsd</code> box of the
      first <code>stbl</code> box of the
      first <code>minf</code> box of the
      first <code>mdia</code> box of the
      <a>text track</a>'s <code>trak</code> box in the
      first <code>moov</code> box
      of the file be the <i>stsd box</i>, if any.

      If the file has no <i>stsd box</i>, or if the <i>stsd box</i> has neither a <code>mett</code> box nor a <code>metx</code> box, then the <a>text track
      in-band metadata track dispatch type</a> must be set to the empty string.

      Otherwise, if the <i>stsd box</i> has a <code>mett</code> box then the <a>text
      track in-band metadata track dispatch type</a> must be set to the concatenation of the
      string "<code>mett</code>", a U+0020 SPACE character, and the value of the first <code>mime_format</code> field of the first <code>mett</code> box of the <i>stsd
      box</i>, or the empty string if that field is absent in that box.

      Otherwise, if the <i>stsd box</i> has no <code>mett</code> box but has a <code>metx</code> box then the <a>text track in-band metadata track dispatch type</a>
      must be set to the concatenation of the string "<code>metx</code>", a U+0020 SPACE
      character, and the value of the first <code>namespace</code> field of the first <code>metx</code> box of the <i>stsd box</i>, or the empty string if that field is absent in
      that box.

      [[!MPEG4]]

      </dd>

      <dt>If the <a>media resource</a> is a DASH media resource</dt>

      <dd>The <a>text track in-band metadata track dispatch type</a> must be set to the concatenation
      of the "AdaptationSet" element attributes and all child Role descriptors.

      [[!DASH]]

      </dd>

    </dl>

    </li>

    <li>Populate the new <a>text track</a>'s <a>list of
    cues</a> with the cues parsed so far, following the <a>guidelines for exposing
    cues</a>, and begin updating it dynamically as necessary.</li>

    <li>Set the new <a>text track</a>'s <a>readiness
    state</a> to <a>loaded</a>.</li>

    <li>Set the new <a>text track</a>'s <a>mode</a> to the
    mode consistent with the user's preferences and the requirements of the relevant specification
    for the data.

    <p class="note">
    For instance, if there are no other active subtitles, and this is a forced
    subtitle track (a subtitle track giving subtitles in the audio track's primary language, but
    only for audio that is actually in another language), then those subtitles might be activated
    here.
  </p>

    </li>

    <li>Add the new <a>text track</a> to the <a>media element</a>'s <a>list of text
    tracks</a>.</li>

    <li><a>Fire</a> a <a>trusted</a> event with the name <code>addtrack</code>, that does not bubble and is not cancelable, and that uses
    the <code>TrackEvent</code> interface, with the <code>track</code>
    attribute initialized to the <a>text track</a>'s <code>TextTrack</code> object, at the
    <a>media element</a>'s <code>textTracks</code> attribute's
    <code>TextTrackList</code> object.</li>

  </ol>

  </div>

  <div class="impl">

<h6 id="sourcing-outofband-text-tracks">Sourcing out-of-band text tracks</h6>

  When a <code>track</code> element is created, it must be associated with a new <a>text
  track</a> (with its value set as defined below) and its corresponding new
  <code>TextTrack</code> object.

  The <a>text track kind</a> is determined from the state of the element's <code>kind</code> attribute according to the following table; for a state given
  in a cell of the first column, the <a>kind</a> is the string given
  in the second column:

  <table>
    <thead>
    <tr>
      <th>State
      </th><th>String
    </th></tr></thead><tbody>
    <tr>
      <td><a>Subtitles</a>
      </td><td><code>subtitles</code>
    </td></tr><tr>
      <td><a>Captions</a>
      </td><td><code>captions</code>
    </td></tr><tr>
      <td><a>Descriptions</a>
      </td><td><code>descriptions</code>
    </td></tr><tr>
      <td><a>Chapters</a>
      </td><td><code>chapters</code>
    </td></tr><tr>
      <td><a>Metadata</a>
      </td><td><code>metadata</code>
  </td></tr></tbody></table>

  The <a>text track label</a> is the element's <a>track label</a>.

  The <a>text track language</a> is the element's <a>track language</a>, if any, or
  the empty string otherwise.

  As the <code>kind</code>, <code>label</code>,
  and <code>srclang</code> attributes are set, changed, or removed, the
  <a>text track</a> must update accordingly, as per the definitions above.

  <p class="note">
    Changes to the <a>track URL</a> are handled in the algorithm below.
  </p>

  The <a>text track readiness state</a> is initially <a>not loaded</a>, and the <a>text track mode</a> is initially <a>disabled</a>.

  The <a>text track list of cues</a> is initially empty. It is dynamically modified when
  the referenced file is parsed. Associated with the list are the <a>rules for updating the text
  track rendering</a> appropriate for the format in question; for <a>WebVTT</a>, this is
  the <a>rules for updating the display of WebVTT text tracks</a>. [[!WEBVTT]]

  When a <code>track</code> element's parent element changes and the new parent is a <a>media
  element</a>, then the user agent must add the <code>track</code> element's corresponding
  <a>text track</a> to the <a>media element</a>'s <a>list of text tracks</a>, and
  then <a>queue a task</a> to <a>fire</a> a <a>trusted</a> event with the name <code>addtrack</code>, that does not bubble and is not cancelable, and that uses
  the <code>TrackEvent</code> interface, with the <code>track</code>
  attribute initialized to the <a>text track</a>'s <code>TextTrack</code> object, at the
  <a>media element</a>'s <code>textTracks</code> attribute's
  <code>TextTrackList</code> object.

  When a <code>track</code> element's parent element changes and the old parent was a <a>media
  element</a>, then the user agent must remove the <code>track</code> element's corresponding
  <a>text track</a> from the <a>media element</a>'s <a>list of text tracks</a>,
  and then <a>queue a task</a> to <a>fire</a> a <a>trusted</a> event with the name <code>removetrack</code>, that does not bubble and is not cancelable, and that
  uses the <code>TrackEvent</code> interface, with the <code>track</code> attribute initialized to the <a>text track</a>'s
  <code>TextTrack</code> object, at the <a>media element</a>'s <code>textTracks</code> attribute's <code>TextTrackList</code> object.

  <hr />

  When a <a>text track</a> corresponding to a <code>track</code> element is added to a
  <a>media element</a>'s <a>list of text tracks</a>, the user agent must <a>queue a
  task</a> to run the following steps for the <a>media element</a>:

  <ol>

    <li>If the element's <a>blocked-on-parser</a> flag is true, abort these steps.</li>

    <li>If the element's <a>did-perform-automatic-track-selection</a> flag is true, abort
    these steps.</li>

    <li><a>Honor user preferences for automatic text track selection</a> for this
    element.</li>

  </ol>

  When the user agent is required to <dfn>honor user preferences for automatic text track
  selection</dfn> for a <a>media element</a>, the user agent must run the following steps:

  <ol>

    <li><a>Perform automatic text track selection</a> for <code>subtitles</code> and <code>captions</code>.</li>

    <li><a>Perform automatic text track selection</a> for <code>descriptions</code>.</li>

    <li><a>Perform automatic text track selection</a> for <code>chapters</code>.</li>

    <li>If there are any <a>text tracks</a> in the <a>media
    element</a>'s <a>list of text tracks</a> whose <a>text track kind</a> is <code>metadata</code> that correspond to <code>track</code>
    elements with a <code>default</code> attribute set whose <a>text
    track mode</a> is set to <a>disabled</a>, then set the
    <a>text track mode</a> of all such tracks to <a>hidden</a></li>

    <li>Set the element's <a>did-perform-automatic-track-selection</a> flag to
    true.</li>

  </ol>

  When the steps above say to <dfn>perform automatic text track selection</dfn> for one or more
  <a>text track kinds</a>, it means to run the following steps:

  <ol>

    <li>Let <var>candidates</var> be a list consisting of the <a>text tracks</a> in the <a>media element</a>'s <a>list of text tracks</a>
    whose <a>text track kind</a> is one of the kinds that were passed to the algorithm, if any,
    in the order given in the <a>list of text tracks</a>.</li>

    <li>If <var>candidates</var> is empty, then abort these steps.</li>

    <li>If any of the <a>text tracks</a> in <var>candidates</var> have a <a>text track mode</a> set to <a>showing</a>, abort these steps.</li>

    <li>

    If the user has expressed an interest in having a track from <var>candidates</var>
    enabled based on its <a>text track kind</a>, <a>text track language</a>, and
    <a>text track label</a>, then set its <a>text track mode</a> to <a>showing</a>.

    <p class="note">
    For example, the user could have set a browser preference to the effect of "I
    want French captions whenever possible", or "If there is a subtitle track with 'Commentary' in
    the title, enable it", or "If there are audio description tracks available, enable one, ideally
    in Swiss German, but failing that in Standard Swiss German or Standard German".
  </p>

    Otherwise, if there are any <a>text tracks</a> in <var>candidates</var> that correspond to <code>track</code> elements with a <code>default</code> attribute set whose <a>text track mode</a> is
    set to <a>disabled</a>, then set the <a>text track
    mode</a> of the first such track to <a>showing</a>.

    </li>

  </ol>

  When a <a>text track</a> corresponding to a <code>track</code> element experiences any of
  the following circumstances, the user agent must <a>start the <code>track</code> processing
  model</a> for that <a>text track</a> and its <code>track</code> element:

  <ul>

    <li>The <code>track</code> element is created.</li>

    <li>The <a>text track</a> has its <a>text track mode</a> changed.</li>

    <li>The <code>track</code> element's parent element changes and the new parent is a <a>media
    element</a>.</li>

  </ul>

  When a user agent is to <dfn>start the <code>track</code> processing model</dfn> for a
  <a>text track</a> and its <code>track</code> element, it must run the following algorithm.
  This algorithm interacts closely with the <a>event loop</a> mechanism; in particular, it has
  a <a>synchronous section</a> (which is triggered as part of the <a>event loop</a>
  algorithm). The steps in that section are marked with &#x231B;.

  <ol>

    <li>If another occurrence of this algorithm is already running for this <a>text
    track</a> and its <code>track</code> element, abort these steps, letting that other algorithm
    take care of this element.</li>

    <li>If the <a>text track</a>'s <a>text track mode</a> is not set to one of <a>hidden</a> or <a>showing</a>, abort
    these steps.</li>

    <li>If the <a>text track</a>'s <code>track</code> element does not have a <a>media
    element</a> as a parent, abort these steps.</li>

    <li>Run the remainder of these steps <a>in parallel</a>, allowing whatever caused these steps to
    run to continue.</li>

    <li><i>Top</i>: <a>Await a stable state</a>. The <a>synchronous section</a>
    consists of the following steps. (The steps in the <a>synchronous section</a> are marked
    with &#x231B;.)</li>

    <li>&#x231B; Set the <a>text track readiness state</a> to <a>loading</a>.</li>

    <li>&#x231B; Let <var>URL</var> be the <a>track URL</a> of the
    <code>track</code> element.</li>

    <li>&#x231B; If the <code>track</code> element's parent is a <a>media element</a> then
    let <var>corsAttributeState</var> be the state of the parent <a>media element</a>'s <code>crossorigin</code> content attribute. Otherwise, let
    <var>corsAttributeState</var> be <a>No CORS</a>.</li>

    <li>End the <a>synchronous section</a>, continuing the remaining steps
    <a>in parallel</a>.</li>

    <li>

    If <var>URL</var> is not the empty string, run these substeps:

    <ol>
      <li>Let <var>request</var> be the result of <a>creating a potential-CORS request</a> given
      <var>URL</var>, <var>corsAttributeState</var>, and with the <i>same-origin fallback flag</i>
      set.</li>

      <li>Set <var>request</var>'s <a>client</a> to the
      <code>track</code> element's <a>node document</a>'s <code>Window</code> object's
      <a>environment settings object</a> and <a>type</a> to
      "<code>track</code>".</li>

      <li><a>Fetch</a> <var>request</var>.</li>
    </ol>

    The <a>tasks</a> <a>queued</a> by the
    <a>fetching algorithm</a> on the <a>networking task source</a> to
    process the data as it is being fetched must determine the  type of the resource. If the
     type of the resource is not a supported text track format, the load will fail, as
    described below. Otherwise, the resource's data must be passed to the appropriate parser (e.g.
    the <a>WebVTT parser</a>) as it is received, with the <a>text track list of cues</a> being used for
    that parser's output. [[!WEBVTT]]

    <p class="note">
    The appropriate parser will incrementally update the <a>text track list of
    cues</a> during these <a>networking task
    source</a> <a>tasks</a>, as each such task is
    run with whatever data has been received from the network).
  </p>

    <p class="critical">This specification does not currently say whether or how to check the MIME
    types of text tracks, or whether or how to perform file type sniffing using the actual file
    data. Implementors differ in their intentions on this matter and it is therefore unclear what
    the right solution is. In the absence of any requirement here, the HTTP specification's strict
    requirement to follow the Content-Type header prevails ("Content-Type specifies the media type
    of the underlying data." ... "If and only if the media type is not given by a Content-Type
    field, the recipient MAY attempt to guess the media type via inspection of its content
    and/or the name extension(s) of the URI used to identify the resource.").</p>

    If the <a>fetching algorithm</a> fails for any reason (network error,
    the server returns an error code, a cross-origin check fails, etc), or if <var>URL</var> is the empty string, then <a>queue a task</a> to first change the
    <a>text track readiness state</a> to <a>failed to
    load</a> and then <a>fire a simple event</a> named <code>error</code> at the <code>track</code> element. This <a>task</a> must use the <a>DOM manipulation task source</a>.

    If the <a>fetching algorithm</a> does not fail, but the
    type of the resource is not a supported text track format, or the file was not successfully
    processed (e.g. the format in question is an XML format and the file contained a well-formedness
    error that the XML specification requires be detected and reported to the application), then the
    <a>task</a> that is <a>queued</a> by the
    <a>networking task source</a> in which the aforementioned problem is found must change the
    <a>text track readiness state</a> to <a>failed to
    load</a> and <a>fire a simple event</a> named <code>error</code>
    at the <code>track</code> element.

    If the <a>fetching algorithm</a> does not fail, and the file was
    successfully processed, then the final <a>task</a> that is <a>queued</a> by the <a>networking task source</a>, after it has
    finished parsing the data, must change the <a>text track readiness state</a> to <a>loaded</a>, and <a>fire a simple event</a> named <code>load</code> at the <code>track</code> element.

    If, while fetching is ongoing, either:

    <ul>

      <li>the <a>track URL</a> changes so that it is no longer equal to <var>URL</var>, while the <a>text track mode</a> is set to <a>hidden</a> or <a>showing</a>; or</li>

      <li>the <a>text track mode</a> changes to <a>hidden</a>
      or <a>showing</a>, while the <a>track URL</a> is not
      equal to <var>URL</var></li>

    </ul>

    ...then the user agent must abort <a>fetching</a>, discarding
    any pending <a>tasks</a> generated by that algorithm (and
    in particular, not adding any cues to the <a>text track list of cues</a> after the moment
    the URL changed), and then <a>queue a task</a> that first changes the <a>text track
    readiness state</a> to <a>failed to load</a> and
    then <a>fires a simple event</a> named <code>error</code> at the <code>track</code> element. This <a>task</a> must use the <a>DOM manipulation task source</a>.

    </li>

    <li>Wait until the <a>text track readiness state</a> is no longer set to <a>loading</a>.</li>

    <li>Wait until the <a>track URL</a> is no longer equal to <var>URL</var>, at
    the same time as the <a>text track mode</a> is set to <a>hidden</a> or <a>showing</a>.</li>

    <li>Jump to the step labeled <i>top</i>.</li>

  </ol>

  Whenever a <code>track</code> element has its <code>src</code> attribute
  set, changed, or removed, the user agent must <a>immediately</a> empty the element's <a>text
  track</a>'s <a>text track list of cues</a>. (This also causes the algorithm above to stop
  adding cues from the resource being obtained using the previously given URL, if any.)

  </div>

  <div class="impl">

<h6 id="guidelines-for-exposing-cues-in-various-formats-as-text-track-cues"><dfn>Guidelines for exposing cues</dfn> in various formats as <a>text track cues</a></h6>

  How a specific format's text track cues are to be interpreted for the purposes of processing by
  an HTML user agent is defined by that format [[!INBAND]]. In the
  absence of such a specification, this section provides some constraints within which implementations can
  attempt to consistently expose such formats.

  To support the <a>text track</a> model of HTML, each unit of timed data is converted to a
  <a>text track cue</a>. Where the mapping of the format's features to the aspects of a
  <a>text track cue</a> as defined in this specification are not defined, implementations must
  ensure that the mapping is consistent with the definitions of the aspects of a <a>text track
  cue</a> as defined above, as well as with the following constraints:

  <dl>

    <dt>The <a>text track cue identifier</a>
    </dt><dd>
    Should be set to the empty string if the format has no obvious analog to a per-cue
    identifier.
    </dd>

    <dt>The <a>text track cue pause-on-exit flag</a>
    </dt><dd>
    Should be set to false.
    </dd>

  </dl>

    For <a>media-resource-specific text tracks</a>
    of <a>kind</a> <code>metadata</code>,
    <a>text track cues</a> are exposed using the <code>DataCue</code> object
    unless there is a more appropriate <code>TextTrackCue</code> interface available.
    For example, if the <a>media-resource-specific text track</a> format is <a>WebVTT</a>,
    then <code>VTTCue</code> is more appropriate.

  </div>

<h6 id="text-track-api">Text track API</h6>

  <pre class="idl" data-highlight="webidl">interface TextTrackList : EventTarget {
  readonly attribute unsigned long length;
  getter TextTrack (unsigned long index);
  TextTrack? getTrackById(DOMString id);

  attribute EventHandler onchange;
  attribute EventHandler onaddtrack;
  attribute EventHandler onremovetrack;
};
</pre>

  <dl class="domintro">

    <dt><var>media</var> . <code>textTracks</code> . <code>length</code></dt>
    <dd>
    Returns the number of <a>text tracks</a> associated with the <a>media element</a> (e.g. from <code>track</code> elements). This is the number of <a>text tracks</a> in the <a>media element</a>'s <a>list of text tracks</a>.
    </dd>

    <dt><var>media</var> . <code>textTracks[</code> <var>n</var> <code>]</code></dt>
    <dd>
    Returns the <code>TextTrack</code> object representing the <var>n</var>th <a>text track</a> in the <a>media element</a>'s <a>list of text tracks</a>.
    </dd>

    <dt><var>textTrack</var> = <var>media</var> . <code>textTracks</code> . <code>getTrackById</code>( <var>id</var> )</dt>

    <dd>

    Returns the <code>TextTrack</code> object with the given identifier, or null if no track has that identifier.

    </dd>

  </dl>

  <div class="impl">

  A <code>TextTrackList</code> object represents a dynamically updating list of <a>text tracks</a> in a given order.

  The <dfn><code>textTracks</code></dfn> attribute of <a>media elements</a> must return a <code>TextTrackList</code> object
  representing the <code>TextTrack</code> objects of the <a>text tracks</a>
  in the <a>media element</a>'s <a>list of text tracks</a>, in the same order as in the
  <a>list of text tracks</a>.

  The <dfn><code>length</code></dfn> attribute of a
  <code>TextTrackList</code> object must return the number of <a>text
  tracks</a> in the list represented by the <code>TextTrackList</code> object.

  The <a>supported property indices</a> of a <code>TextTrackList</code> object at any
  instant are the numbers from zero to the number of <a>text tracks</a> in
  the list represented by the <code>TextTrackList</code> object minus one, if any. If there are no
  <a>text tracks</a> in the list, there are no <a>supported property
  indices</a>.

  To <a>determine the value of an indexed property</a> of a <code>TextTrackList</code>
  object for a given index <var>index</var>, the user agent must return the <var>index</var>th <a>text track</a> in the list represented by the
  <code>TextTrackList</code> object.

  The <dfn><code>getTrackById(<var>id</var>)</code></dfn> method must return the first <code>TextTrack</code> in the
  <code>TextTrackList</code> object whose <code>id</code> IDL attribute
  would return a value equal to the value of the <var>id</var> argument. When no tracks
  match the given argument, the method must return null.

  </div>

  <hr />

  <pre class="idl" data-highlight="webidl">enum TextTrackMode { "disabled",  "hidden",  "showing" };
enum TextTrackKind { "subtitles",  "captions",  "descriptions",  "chapters",  "metadata" };
interface TextTrack : EventTarget {
  readonly attribute TextTrackKind kind;
  readonly attribute DOMString label;
  readonly attribute DOMString language;

  readonly attribute DOMString id;
  readonly attribute DOMString inBandMetadataTrackDispatchType;

  attribute TextTrackMode mode;

  readonly attribute TextTrackCueList? cues;
  readonly attribute TextTrackCueList? activeCues;

  void addCue(TextTrackCue cue);
  void removeCue(TextTrackCue cue);

  attribute EventHandler oncuechange;
};
</pre>

  <dl class="domintro">

    <dt><var>textTrack</var> = <var>media</var> . <code>addTextTrack</code>( <var>kind</var> [, <var>label</var> [, <var>language</var> ] ] )</dt>
    <dd>

    Creates and returns a new <code>TextTrack</code> object, which is also added to the
    <a>media element</a>'s <a>list of text tracks</a>.

    </dd>

    <dt><var>textTrack</var> . <code>kind</code></dt>
    <dd>

    Returns the <a>text track kind</a> string.

    </dd>

    <dt><var>textTrack</var> . <code>label</code></dt>
    <dd>

    Returns the <a>text track label</a>, if there is one, or the empty string otherwise
    (indicating that a custom label probably needs to be generated from the other attributes of the
    object if the object is exposed to the user).

    </dd>

    <dt><var>textTrack</var> . <code>language</code></dt>
    <dd>
    Returns the <a>text track language</a> string.
    </dd>

    <dt><var>textTrack</var> . <code>id</code></dt>
    <dd>

    Returns the ID of the given track.

    For in-band tracks, this is the ID that can be used with a fragment identifier if the format
    supports the <cite>Media Fragments URI</cite> syntax, and that can be used with the <code>getTrackById()</code> method. [[!MEDIA-FRAGS]]

    For <code>TextTrack</code> objects corresponding to <code>track</code> elements, this is the
    ID of the <code>track</code> element.

    </dd>

    <dt><var>textTrack</var> . <code>inBandMetadataTrackDispatchType</code></dt>
    <dd>

    Returns the <a>text track in-band metadata track dispatch type</a> string.

    </dd>

    <dt><var>textTrack</var> . <code>mode</code> [ = <var>value</var> ]</dt>
    <dd>

    Returns the <a>text track mode</a>, represented by a string from the following
    list:

    <dl>
      <dt>"<code>disabled</code>"</dt>
      <dd>
      The <a>text track disabled</a> mode.
      </dd>
      <dt>"<code>hidden</code>"</dt>
      <dd>
      The <a>text track hidden</a> mode.
      </dd>
      <dt>"<code>showing</code>"</dt>
      <dd>
      The <a>text track showing</a> mode.
      </dd>
    </dl>

    Can be set, to change the mode.

    </dd>

    <dt><var>textTrack</var> . <code>cues</code></dt>
    <dd>
    Returns the <a>text track list of cues</a>, as a <code>TextTrackCueList</code> object.
    </dd>

    <dt><var>textTrack</var> . <code>activeCues</code></dt>
    <dd>

    Returns the <a>text track cues</a> from the <a>text track
    list of cues</a> that are currently active (i.e. that start before the <a>current playback
    position</a> and end after it), as a <code>TextTrackCueList</code> object.

    </dd>

    <dt><var>textTrack</var> . <code>addCue</code>( <var>cue</var> )</dt>
    <dd>
    Adds the given cue to <var>textTrack</var>'s <a>text track list of cues</a>.
    </dd>

    <dt><var>textTrack</var> . <code>removeCue</code>( <var>cue</var> )</dt>
    <dd>
    Removes the given cue from <var>textTrack</var>'s <a>text track list of cues</a>.
    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>addTextTrack(<var>kind</var>, <var>label</var>, <var>language</var>)</code></dfn> method of <a>media elements</a>, when invoked, must run the following steps:

  <ol>

    <li>

    Create a new <code>TextTrack</code> object.

    </li>

    <li>

    Create a new <a>text track</a> corresponding to the new object, and set its <a>text
    track kind</a> to <var>kind</var>, its <a>text track label</a> to <var>label</var>, its <a>text track language</a> to <var>language</var>, its
    <a>text track readiness state</a> to the <a>text track loaded</a> state, its
    <a>text track mode</a> to the <a>text track hidden</a> mode, and its <a>text
    track list of cues</a> to an empty list.

    Initially, the <a>text track list of cues</a> is not associated with any <a>rules
    for updating the text track rendering</a>. When a <a>text track cue</a> is added to it,
    the <a>text track list of cues</a> has its rules permanently set accordingly.

    </li>

    <li>

    Add the new <a>text track</a> to the <a>media element</a>'s <a>list of text
    tracks</a>.

    </li>

    <li>

    <a>Queue a task</a> to <a>fire</a> a <a>trusted</a> event with the name <code>addtrack</code>, that does not bubble and is not cancelable, and
    that uses the <code>TrackEvent</code> interface, with the <code>track</code> attribute initialized to the new <a>text
    track</a>'s <code>TextTrack</code> object, at the <a>media element</a>'s <code>textTracks</code> attribute's <code>TextTrackList</code>
    object.

    </li>

    <li>

    Return the new <code>TextTrack</code> object.

    </li>

  </ol>

  <hr />

  The <dfn><code>kind</code></dfn> attribute must return the
  <a>text track kind</a> of the <a>text track</a> that the <code>TextTrack</code> object
  represents.

  The <dfn><code>label</code></dfn> attribute must return the
  <a>text track label</a> of the <a>text track</a> that the <code>TextTrack</code>
  object represents.

  The <dfn><code>language</code></dfn> attribute must return the
  <a>text track language</a> of the <a>text track</a> that the <code>TextTrack</code>
  object represents.

  The <dfn><code>id</code></dfn> attribute returns the track's
  identifier, if it has one, or the empty string otherwise. For tracks that correspond to
  <code>track</code> elements, the track's identifier is the value of the element's <code>id</code> attribute, if any. For in-band tracks, the track's identifier is
  specified by the <a>media resource</a>. If the <a>media resource</a> is in a format
  that supports the <cite>Media Fragments URI</cite> fragment identifier syntax, the identifier
  returned for a particular track must be the same identifier that would enable the track if used as
  the name of a track in the track dimension of such a fragment identifier. [[!MEDIA-FRAGS]]

  The <dfn><code>inBandMetadataTrackDispatchType</code></dfn>
  attribute must return the <a>text track in-band metadata track dispatch type</a> of the
  <a>text track</a> that the <code>TextTrack</code> object represents.

  The <dfn><code>mode</code></dfn> attribute, on getting, must return
  the string corresponding to the <a>text track mode</a> of the <a>text track</a> that
  the <code>TextTrack</code> object represents, as defined by the following list:

  <dl>
    <dt>"<dfn><code>disabled</code></dfn>"</dt>
    <dd>The <a>text track disabled</a> mode.</dd>
    <dt>"<dfn><code>hidden</code></dfn>"</dt>
    <dd>The <a>text track hidden</a> mode.</dd>
    <dt>"<dfn><code>showing</code></dfn>"</dt>
    <dd>The <a>text track showing</a> mode.</dd>
  </dl>

  On setting, if the new value isn't equal to what the attribute would currently return, the new
  value must be processed as follows:

  <dl class="switch">

    <dt>If the new value is "<code>disabled</code>"</dt>

    <dd>

    Set the <a>text track mode</a> of the <a>text track</a> that the
    <code>TextTrack</code> object represents to the <a>text track disabled</a> mode.

    </dd>

    <dt>If the new value is "<code>hidden</code>"</dt>

    <dd>

    Set the <a>text track mode</a> of the <a>text track</a> that the
    <code>TextTrack</code> object represents to the <a>text track hidden</a> mode.

    </dd>

    <dt>If the new value is "<code>showing</code>"</dt>

    <dd>

    Set the <a>text track mode</a> of the <a>text track</a> that the
    <code>TextTrack</code> object represents to the <a>text track showing</a> mode.

    </dd>

  </dl>

  If the <a>text track mode</a> of the <a>text track</a> that the
  <code>TextTrack</code> object represents is not the <a>text track disabled</a> mode, then
  the <dfn><code>cues</code></dfn> attribute must return a
  <a>live</a> <code>TextTrackCueList</code> object that represents the subset of the
  <a>text track list of cues</a> of the <a>text track</a> that the
  <code>TextTrack</code> object represents whose <a>end
  times</a> occur at or after the <a>earliest possible position when the script
  started</a>, in <a>text track cue order</a>. Otherwise, it must return null. For each <code>TextTrack</code> object, when an
  object is returned, the same <code>TextTrackCueList</code> object must be returned each time.

  The <dfn>earliest possible position when the script started</dfn> is whatever the
  <a>earliest possible position</a> was the last time the <a>event loop</a> reached step
  1.

  If the <a>text track mode</a> of the <a>text track</a> that the
  <code>TextTrack</code> object represents is not the <a>text track disabled</a> mode, then
  the <dfn><code>activeCues</code></dfn> attribute must return a
  <a>live</a> <code>TextTrackCueList</code> object that represents the subset of the
  <a>text track list of cues</a> of the <a>text track</a> that the
  <code>TextTrack</code> object represents whose <a>active flag was set when the script
  started</a>, in <a>text track cue order</a>. Otherwise, it must return null. For each <code>TextTrack</code> object, when an
  object is returned, the same <code>TextTrackCueList</code> object must be returned each time.

  A <a>text track cue</a>'s <dfn>active flag was set when the script started</dfn> if its
  <a>text track cue active flag</a> was set the last time the <a>event loop</a> reached
  <a>step 1</a>.

  <hr />

  The <dfn><code>addCue(<var>cue</var>)</code></dfn> method
  of <code>TextTrack</code> objects, when invoked, must run the following steps:

  <ol>

    <li>If the <a>text track list of cues</a> does not yet have any associated <a>rules
    for updating the text track rendering</a>, then associate the <a>text track list of
    cues</a> with the <a>rules for updating the text track rendering</a> appropriate to <var>cue</var>.

    </li><li>If <a>text track list of cues</a>' associated <a>rules for updating the text
    track rendering</a> are not the same <a>rules for updating the text track rendering</a>
    as appropriate for <var>cue</var>, then throw an <code>InvalidStateError</code>
    exception and abort these steps.

    </li><li>If the given <var>cue</var> is in a <a>text track list of cues</a>, then
    remove <var>cue</var> from that <a>text track list of cues</a>.</li>

    <li>Add <var>cue</var> to the method's <code>TextTrack</code> object's <a>text
    track</a>'s <a>text track list of cues</a>.</li>

  </ol>

  The <dfn><code>removeCue(<var>cue</var>)</code></dfn>
  method of <code>TextTrack</code> objects, when invoked, must run the following steps:

  <ol>

    <li>If the given <var>cue</var> is not currently listed in the method's
    <code>TextTrack</code> object's <a>text track</a>'s <a>text track list of cues</a>,
    then throw a <code>NotFoundError</code> exception and abort these steps.</li>

    <li>Remove <var>cue</var> from the method's <code>TextTrack</code> object's
    <a>text track</a>'s <a>text track list of cues</a>.</li>

  </ol>

  </div>

  <div class="example">
    In this example, an <code>audio</code> element is used to play a specific sound-effect from a
    sound file containing many sound effects. A cue is used to pause the audio, so that it ends
    exactly at the end of the clip, even if the browser is busy running some script. If the page had
    relied on script to pause the audio, then the start of the next clip might be heard if the
    browser was not able to run the script at the exact time specified.

    <pre highlight="javascript">
var sfx = new Audio('sfx.wav');
var sounds = sfx.addTextTrack('metadata');

// add sounds we care about
function addFX(start, end, name) {
  var cue = new VTTCue(start, end, '');
  cue.id = name;
  cue.pauseOnExit = true;
  sounds.addCue(cue);
}
addFX(12.783, 13.612, 'dog bark');
addFX(13.612, 15.091, 'kitten mew'))

function playSound(id) {
  sfx.currentTime = sounds.getCueById(id).startTime;
  sfx.play();
}

// play a bark as soon as we can
sfx.oncanplaythrough = function () {
  playSound('dog bark');
}
// meow when the user tries to leave
window.onbeforeunload = function () {
  playSound('kitten mew');
  return 'Are you sure you want to leave this awesome page?';
}
    </pre>

  </div>

  <hr />

  <pre class="idl" data-highlight="webidl">interface TextTrackCueList {
  readonly attribute unsigned long length;
  getter TextTrackCue (unsigned long index);
  TextTrackCue? getCueById(DOMString id);
};
</pre>

  <dl class="domintro">

    <dt><var>cuelist</var> . <code>length</code></dt>
    <dd>
    Returns the number of <a>cues</a> in the list.
    </dd>

    <dt><var>cuelist</var>[<var>index</var>]</dt>
    <dd>
    Returns the <a>text track cue</a> with index <var>index</var> in the list. The cues are sorted in <a>text track cue order</a>.
    </dd>

    <dt><var>cuelist</var> . <code>getCueById</code>( <var>id</var> )</dt>
    <dd>
    Returns the first <a>text track cue</a> (in <a>text track cue order</a>) with <a>text track cue identifier</a> <var>id</var>.
    Returns null if none of the cues have the given identifier or if the argument is the empty string.
    </dd>

  </dl>

  <div class="impl">

  A <code>TextTrackCueList</code> object represents a dynamically updating list of <a>text track cues</a> in a given order.

  The <dfn><code>length</code></dfn> attribute must return
  the number of <a>cues</a> in the list represented by the
  <code>TextTrackCueList</code> object.

  The <a>supported property indices</a> of a <code>TextTrackCueList</code> object at any
  instant are the numbers from zero to the number of <a>cues</a> in the
  list represented by the <code>TextTrackCueList</code> object minus one, if any. If there are no
  <a>cues</a> in the list, there are no <a>supported property
  indices</a>.

  To <a>determine the value of an indexed property</a> for a given index <var>index</var>, the user agent must return the <var>index</var>th <a>text track
  cue</a> in the list represented by the <code>TextTrackCueList</code> object.

  The <dfn><code>getCueById(<var>id</var>)</code></dfn> method, when called with an argument other than the empty string,
  must return the first <a>text track cue</a> in the list represented by the
  <code>TextTrackCueList</code> object whose <a>text track cue identifier</a> is <var>id</var>, if any, or null otherwise. If the argument is the empty string, then the method
  must return null.

  </div>

  <hr />

  <pre class="idl" data-highlight="webidl">interface TextTrackCue : EventTarget {
  readonly attribute TextTrack? track;

  attribute DOMString id;
  attribute double startTime;
  attribute double endTime;
  attribute boolean pauseOnExit;

  attribute EventHandler onenter;
  attribute EventHandler onexit;
};
</pre>

  <dl class="domintro">

    <dt><var>cue</var> . <a>track</a></dt>
    <dd>
    Returns the <code>TextTrack</code> object to which this
    <a>text track cue</a> belongs, if any, or null
    otherwise.
    </dd>

    <dt><var>cue</var> . <a>id</a> [ = <var>value</var> ]</dt>
    <dd>
    Returns the <a>text track cue identifier</a>.
    Can be set.
    </dd>

    <dt><var>cue</var> . <a>startTime</a> [ = <var>value</var> ]</dt>
    <dd>
    Returns the <a>text track cue start time</a>, in seconds.
    Can be set.
    </dd>

    <dt><var>cue</var> . <a>endTime</a> [ = <var>value</var> ]</dt>
    <dd>
    Returns the <a>text track cue end time</a>, in seconds.
    Can be set.
    </dd>

    <dt><var>cue</var> . <a>pauseOnExit</a> [ = <var>value</var> ]</dt>
    <dd>
    Returns true if the <a>text track cue pause-on-exit flag</a> is set, false otherwise.
    Can be set.
    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>track</code></dfn> attribute, on getting, must
  return the <code>TextTrack</code> object of the <a>text track</a> in whose <a>list of cues</a> the <a>text track cue</a> that the
  <code>TextTrackCue</code> object represents finds itself, if any; or null otherwise.

  The <dfn><code>id</code></dfn> attribute, on getting, must return
  the <a>text track cue identifier</a> of the <a>text track cue</a> that the
  <code>TextTrackCue</code> object represents. On setting, the <a>text track cue
  identifier</a> must be set to the new value.

  The <dfn><code>startTime</code></dfn> attribute, on
  getting, must return the <a>text track cue start time</a> of the <a>text track cue</a>
  that the <code>TextTrackCue</code> object represents, in seconds. On setting, the <a>text track
  cue start time</a> must be set to the new value, interpreted in seconds; then, if the
  <code>TextTrackCue</code> object's <a>text track cue</a> is in a <a>text track</a>'s
  <a>list of cues</a>, and that <a>text track</a> is in
  a <a>media element</a>'s <a>list of text tracks</a>, and the <a>media
  element</a>'s <a>show poster flag</a> is not set, then run the <i>time marches on</i> steps for that <a>media element</a>.

  The <dfn><code>endTime</code></dfn> attribute, on getting,
  must return the <a>text track cue end time</a> of the <a>text track cue</a> that the
  <code>TextTrackCue</code> object represents, in seconds. On setting, the <a>text track cue end
  time</a> must be set to the new value, interpreted in seconds; then, if the
  <code>TextTrackCue</code> object's <a>text track cue</a> is in a <a>text track</a>'s
  <a>list of cues</a>, and that <a>text track</a> is in
  a <a>media element</a>'s <a>list of text tracks</a>, and the <a>media
  element</a>'s <a>show poster flag</a> is not set, then run the <i>time marches on</i> steps for that <a>media element</a>.

  The <dfn><code>pauseOnExit</code></dfn> attribute, on
  getting, must return true if the <a>text track cue pause-on-exit flag</a> of the <a>text
  track cue</a> that the <code>TextTrackCue</code> object represents is set; or false otherwise.
  On setting, the <a>text track cue pause-on-exit flag</a> must be set if the new value is
  true, and must be unset otherwise.

  </div>

<h6 id="text-tracks-exposing-inband-metadata">Text tracks exposing in-band metadata</h6>

  <a>Media resources</a> often contain one or more
  <a>media-resource-specific text tracks</a>
  containing data that browsers don't render, but want to expose to script to allow being
  dealt with.

  If the browser is unable to identify a <code>TextTrackCue</code> interface that is more
  appropriate to expose the data in the cues of a <a>media-resource-specific text track</a>,
  the <a>DataCue</a> object is used. [[!INBAND]]

  <pre class="idl" data-highlight="webidl">[Constructor(double startTime, double endTime, ArrayBuffer data)]
    interface DataCue : TextTrackCue {
  attribute ArrayBuffer data;
};
</pre>

  <dl class="domintro">

  <dt><var>cue</var> = new <code>DataCue</code>( [ <var>startTime</var>, <var>endTime</var>, <var>data</var> ] )</dt>
  <dd>
    Returns a new <code>DataCue</code> object, for use with the <code>addCue()</code> method.
    The <var>startTime</var> argument sets the <a>text track cue start time</a>.
    The <var>endTime</var> argument sets the <a>text track cue end time</a>.
    The <var>data</var> argument is copied as the <a>text track cue data</a>.
  </dd>

  <dt><var>cue</var> . <a>data</a> [ = <var>value</var> ]</dt>
  <dd>
    Returns the <a>text track cue data</a> in raw unparsed form.
    Can be set.
  </dd>

  </dl>

  <div class="impl">

  The <dfn><code>data</code></dfn> attribute, on getting, must
  return the raw text track cue data of the <a>text track cue</a> that the
  <code>TextTrackCue</code> object represents. On setting, the text track cue data must
  be set to the new value.

  </div>

  The UA will use <a>DataCue</a> to expose only <a>text track cue</a>
  objects that belong to a <a>text track</a> that has a <a>text track kind</a> of
  <a>metadata</a>.

  <p class="note"><a>DataCue</a> has a constructor to allow script to create <a>DataCue</a>
  objects in cases where generic metadata needs to be managed for a <a>text track</a>.</p>

  The <a>rules for updating the text track rendering</a> for a <a>DataCue</a> simply
  state that there is no rendering, even when the cues are in <a>showing</a> mode and the <a>text track kind</a> is one of
  <code>subtitles</code> or
  <code>captions</code> or
  <code>descriptions</code> or
  <code>chapters</code>.

<h6 id="text-tracks-describing-chapters">Text tracks describing chapters</h6>

  Chapters are segments of a <a>media resource</a> with a given title. Chapters can be
  nested, in the same way that sections in a document outline can have subsections.

  Each <a>text track cue</a> in a <a>text track</a> being used for describing
  chapters has three key features: the <a>text track cue start time</a>, giving the start time
  of the chapter, the <a>text track cue end time</a>, giving the end time of the chapter, and
  the <a>text track rules for extracting the chapter title</a>.

  <div class="impl">

  The <dfn>rules for constructing the chapter tree from a text track</dfn> are as follows. They
  produce a potentially nested list of chapters, each of which have a start time, end time, title,
  and a list of nested chapters. This algorithm discards cues that do not correctly nest within each
  other, or that are out of order.

  <ol>

    <li>Let <var>list</var> be a copy of the <a>list
    of cues</a> of the <a>text track</a> being processed.</li>

    <li>Remove from <var>list</var> any <a>text track cue</a> whose <a>text
    track cue end time</a> is before its <a>text track cue start time</a>.</li>

    <li>Let <var>output</var> be an empty list of chapters, where a chapter is a record
    consisting of a start time, an end time, a title, and a (potentially empty) list of nested
    chapters. For the purpose of this algorithm, each chapter also has a parent chapter.</li>

    <li>Let <var>current chapter</var> be a stand-in chapter whose start time is negative
    infinity, whose end time is positive infinity, and whose list of nested chapters is <var>output</var>. (This is just used to make the algorithm easier to describe.)</li>

    <li><i>Loop</i>: If <var>list</var> is empty, jump to the step labeled
    <i>end</i>.</li>

    <li>Let <var>current cue</var> be the first cue in <var>list</var>, and then
    remove it from <var>list</var>.</li>

    <li>If <var>current cue</var>'s <a>text track cue start time</a> is less than
    the start time of <var>current chapter</var>, then return to the step labeled
    <i>loop</i>.

    </li><li>While <var>current cue</var>'s <a>text track cue start time</a> is greater
    than or equal to <var>current chapter</var>'s end time, let <var>current
    chapter</var> be <var>current chapter</var>'s parent chapter.</li>

    <li>If <var>current cue</var>'s <a>text track cue end time</a> is greater than
    the end time of <var>current chapter</var>, then return to the step labeled
    <i>loop</i>.

    </li><li>

    Create a new chapter <var>new chapter</var>, whose start time is <var>current cue</var>'s <a>text track cue start time</a>, whose end time is <var>current cue</var>'s <a>text track cue end time</a>, whose title is <var>current cue</var>'s <a>text track cue data</a> interpreted according to its
    <a>rules for rendering the cue in isolation</a>, and whose list of nested chapters is
    empty.

    <p class="note">
    For WebVTT, the <a>rules for rendering the cue in isolation</a> are the
    <a>rules for interpreting WebVTT cue text</a>. [[!WEBVTT]]
  </p>

    </li>

    <li>Append <var>new chapter</var> to <var>current chapter</var>'s list of
    nested chapters, and let <var>current chapter</var> be <var>new chapter</var>'s
    parent.</li>

    <li>Let <var>current chapter</var> be <var>new chapter</var>.</li>

    <li>Return to the step labeled <i>loop</i>.</li>

    <li><i>End</i>: Return <var>output</var>.</li>

  </ol>

  </div>

  <div class="example">
    The following snippet of a <a>WebVTT file</a> shows how nested chapters can be marked
    up. The file describes three 50-minute chapters, "Astrophysics", "Computational Physics", and
    "General Relativity". The first has three subchapters, the second has four, and the third has
    two. [[!WEBVTT]]

    <pre>WEBVTT

00:00:00.000 --&gt; 00:50:00.000
Astrophysics

00:00:00.000 --&gt; 00:10:00.000
Introduction to Astrophysics

00:10:00.000 --&gt; 00:45:00.000
The Solar System

00:00:00.000 --&gt; 00:10:00.000
Coursework Description

00:50:00.000 --&gt; 01:40:00.000
Computational Physics

00:50:00.000 --&gt; 00:55:00.000
Introduction to Programming

00:55:00.000 --&gt; 01:30:00.000
Data Structures

01:30:00.000 --&gt; 01:35:00.000
Answers to Last Exam

01:35:00.000 --&gt; 01:40:00.000
Coursework Description

01:40:00.000 --&gt; 02:30:00.000
General Relativity

01:40:00.000 --&gt; 02:00:00.000
Tensor Algebra

02:00:00.000 --&gt; 02:30:00.000
The General Relativistic Field Equations</pre>

  </div>

  <div class="impl">

<h6 id="event-handlers-for-objects-of-the-text-track-apis">Event handlers for objects of the text track APIs</h6>

  The following are the <a>event handlers</a> that (and their corresponding <a>event handler event types</a>) must be supported, as <a>event handler IDL
  attributes</a>, by all objects implementing the <code>TextTrackList</code> interface:

  <table>
    <thead>
    <tr><th><a>Event handler</a> </th><th><a>Event handler event type</a>
    </th></tr></thead><tbody>
    <tr><td><dfn><code>onchange</code></dfn> </td><td> <code>change</code>
    </td></tr><tr><td><dfn><code>onaddtrack</code></dfn> </td><td> <code>addtrack</code>
    </td></tr><tr><td><dfn><code>onremovetrack</code></dfn> </td><td> <code>removetrack</code>
  </td></tr></tbody></table>

  The following are the <a>event handlers</a> that (and their corresponding <a>event handler event types</a>) must be supported, as <a>event handler IDL
  attributes</a>, by all objects implementing the <code>TextTrack</code> interface:

  <table>
    <thead>
    <tr><th><a>Event handler</a> </th><th><a>Event handler event type</a>
    </th></tr></thead><tbody>
    <tr><td><dfn><code>oncuechange</code></dfn> </td><td> <code>cuechange</code>
  </td></tr></tbody></table>

  The following are the <a>event handlers</a> that (and their corresponding <a>event handler event types</a>) must be supported, as <a>event handler IDL
  attributes</a>, by all objects implementing the <code>TextTrackCue</code> interface:

  <table>
    <thead>
    <tr><th><a>Event handler</a> </th><th><a>Event handler event type</a>
    </th></tr></thead><tbody>
    <tr><td><dfn><code>onenter</code></dfn> </td><td> <code>enter</code>
    </td></tr><tr><td><dfn><code>onexit</code></dfn> </td><td> <code>exit</code>
  </td></tr></tbody></table>

  </div>

<h6 id="best-practices-for-metadata-text-tracks">Best practices for metadata text tracks</h6>

  <em>This section is non-normative.</em>

  Text tracks can be used for storing data relating to the media data, for interactive or
  augmented views.

  For example, a page showing a sports broadcast could include information about the current
  score. Suppose a robotics competition was being streamed live. The image could be overlayed with
  the scores, as follows:

  <iframe src="images/robots.html" width="600" height="400"></iframe>

  In order to make the score display render correctly whenever the user seeks to an arbitrary
  point in the video, the metadata text track cues need to be as long as is appropriate for the
  score. For example, in the frame above, there would be maybe one cue that lasts the length of the
  match that gives the match number, one cue that lasts until the blue alliance's score changes, and
  one cue that lasts until the red alliance's score changes. If the video is just a stream of the
  live event, the time in the bottom right would presumably be automatically derived from the
  current video time, rather than based on a cue. However, if the video was just the highlights,
  then that might be given in cues also.

  The following shows what fragments of this could look like in a WebVTT file:

  <pre>WEBVTT

...

05:10:00.000 --&gt; 05:12:15.000
matchtype:qual
matchnumber:37

...

05:11:02.251 --&gt; 05:11:17.198
red:78

05:11:03.672 --&gt; 05:11:54.198
blue:66

05:11:17.198 --&gt; 05:11:25.912
red:80

05:11:25.912 --&gt; 05:11:26.522
red:83

05:11:26.522 --&gt; 05:11:26.982
red:86

05:11:26.982 --&gt; 05:11:27.499
red:89

...</pre>

  The key here is to notice that the information is given in cues that span the length of time to
  which the relevant event applies. If, instead, the scores were given as zero-length (or very
  brief, nearly zero-length) cues when the score changes, for example saying "red+2" at
  05:11:17.198, "red+3" at 05:11:25.912, etc, problems arise: primarily, seeking is much harder to
  implement, as the script has to walk the entire list of cues to make sure that no notifications
  have been missed; but also, if the cues are short it's possible the script will never see that
  they are active unless it listens to them specifically.

  When using cues in this manner, authors are encouraged to use the <code>cuechange</code> event to update the current annotations. (In
  particular, using the <code>timeupdate</code> event would be less
  appropriate as it would require doing work even when the cues haven't changed, and, more
  importantly, would introduce a higher latency between when the metatata cues become active and
  when the display is updated, since <code>timeupdate</code> events
  are rate-limited.)

<h5 id="user-interface">User interface</h5>

  The <dfn><code>controls</code></dfn> attribute is a <a>boolean
  attribute</a>. If present, it indicates that the author has not provided a scripted controller
  and would like the user agent to provide its own set of controls.

  <div class="impl">

  If the attribute is present, or if <a>scripting is
  disabled</a> for the <a>media element</a>, then the user agent should <dfn>expose a user
  interface to the user</dfn>. This user interface should include features to begin playback, pause
  playback, seek to an arbitrary position in the content (if the content supports arbitrary
  seeking), change the volume, change the display of closed captions or embedded sign-language
  tracks, select different audio tracks or turn on audio descriptions, and show the media content in
  manners more suitable to the user (e.g. full-screen video or in an independent resizable window).
  Other controls may also be made available.

  If the <a>media element</a> has a <a>current media controller</a>, then the user
  agent should expose audio tracks from all the <a>slaved media elements</a> (although
  avoiding duplicates if the same <a>media resource</a> is being used several times). If a
  <a>media resource</a>'s audio track exposed in this way has no known name, and it is the
  only audio track for a particular <a>media element</a>, the user agent should use the
  element's <code>title</code> attribute, if any, as the name (or as part of the
  name) of that track.

  Even when the attribute is absent, however, user agents may provide controls to affect playback
  of the media resource (e.g. play, pause, seeking, and volume controls), but such features should
  not interfere with the page's normal rendering. For example, such features could be exposed in the
  <a>media element</a>'s context menu. The user agent may implement this simply by <a>exposing a user interface to the user</a> as
  described above (as if the <code>controls</code> attribute was
  present).

  If the user agent <a>exposes a user interface to
  the user</a> by displaying controls over the <a>media element</a>, then the user agent
  should suppress any user interaction events while the user agent is interacting with this
  interface. (For example, if the user clicks on a video's playback control, <code>mousedown</code> events and so forth would not simultaneously be fired at
  elements on the page.)

  Where possible (specifically, for starting, stopping, pausing, and unpausing playback, for
  seeking, for changing the rate of playback, for fast-forwarding or rewinding, for listing,
  enabling, and disabling text tracks, and for muting or changing the volume of the audio), user
  interface features exposed by the user agent must be implemented in terms of the DOM API described
  above, so that, e.g., all the same events fire.

  When a <a>media element</a> has a <a>current media controller</a>, the user agent's
  user interface for pausing and unpausing playback, for seeking, for changing the rate of playback,
  for fast-forwarding or rewinding, and for muting or changing the volume of audio of the entire
  group must be implemented in terms of the <code>MediaController</code> API exposed on that
  <a>current media controller</a>. When a <a>media element</a> has a <a>current media
  controller</a>, and all the <a>slaved media elements</a> of that
  <code>MediaController</code> are paused, the user agent should also unpause all the <a>slaved
  media elements</a> when the user invokes a user agent interface control for beginning
  playback.

  The "play" function in the user agent's interface must set the <code>playbackRate</code> attribute to the value of the <code>defaultPlaybackRate</code> attribute before invoking the <code>play()</code>
  method. When a <a>media element</a> has a <a>current media controller</a>, the
  attributes and method with those names on that <code>MediaController</code> object must be used.
  Otherwise, the attributes and method with those names on the <a>media element</a> itself
  must be used.

  Features such as fast-forward or rewind must be implemented by only changing the <code>playbackRate</code> attribute (and not the <code>defaultPlaybackRate</code>
  attribute). Again, when a <a>media element</a> has a <a>current media controller</a>,
  the attributes with those names on that <code>MediaController</code> object must be used;
  otherwise, the attributes with those names on the <a>media element</a> itself must be used.

  When a <a>media element</a> has a <a>current media controller</a>, seeking must be
  implemented in terms of the <code>currentTime</code>
  attribute on that <code>MediaController</code> object. Otherwise, the user agent must directly
  <a>seek</a> to the requested position in the <a>media
  element</a>'s <a>media timeline</a>. For media resources where seeking to an arbitrary
  position would be slow, user agents are encouraged to use the <i>approximate-for-speed</i> flag
  when seeking in response to the user manipulating an approximate position interface such as a seek
  bar.

  When a <a>media element</a> has a <a>current media controller</a>, user agents may
  additionally provide the user with controls that directly manipulate an individual <a>media
  element</a> without affecting the <code>MediaController</code>, but such features are
  considered relatively advanced and unlikely to be useful to most users.

  For the purposes of listing chapters in the <a>media resource</a>, only <a>text tracks</a> in the <a>media element</a>'s <a>list of text tracks</a>
  that are <a>showing</a> and whose <a>text track kind</a> is
  <code>chapters</code> should be used. Such tracks must be
  interpreted according to the <a>rules for constructing the chapter tree from a text
  track</a>. When seeking in response to a user maniplating a chapter selection interface, user
  agents should not use the <i>approximate-for-speed</i> flag.

  The <dfn><code>controls</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  </div>

  <dl class="domintro">

    <dt><var>media</var> . <code>volume</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the current playback volume, as a number in the range 0.0 to 1.0, where 0.0 is the
    quietest and 1.0 the loudest.

    Can be set, to change the volume.

    Throws an <code>IndexSizeError</code> exception if the new value is not in the range 0.0 .. 1.0.

    </dd>

    <dt><var>media</var> . <code>muted</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns true if audio is muted, overriding the <code>volume</code>
    attribute, and false if the <code>volume</code> attribute is being
    honored.

    Can be set, to change whether the audio is muted or not.

    </dd>

  </dl>

  <div class="impl">

  A <a>media element</a> has a <dfn>playback volume</dfn>, which is a fraction in the range 0.0 (silent) to 1.0 (loudest).
  Initially, the volume should be 1.0, but user agents may remember the last set value across
  sessions, on a per-site basis or otherwise, so the volume may start at other values.

  The <dfn><code>volume</code></dfn> IDL attribute must return the
  <a>playback volume</a> of any audio portions of the
  <a>media element</a>. On setting, if the new value is in the range 0.0 to 1.0 inclusive, the
  <a>media element</a>'s <a>playback volume</a> must be
  set to the new value. If the new value is outside the range 0.0 to 1.0 inclusive, then, on
  setting, an <code>IndexSizeError</code> exception must be thrown instead.

  A <a>media element</a> can also be <dfn>muted</dfn>. If
  anything is muting the element, then it is muted. (For example, when the <a>direction of
  playback</a> is backwards, the element is muted.)

  The <dfn><code>muted</code></dfn> IDL attribute must return the value
  to which it was last set. When a <a>media element</a> is created, if the element has a <code>muted</code> content attribute specified, then the <code>muted</code> IDL attribute should be set to true; otherwise, the user
  agents may set the value to the user's preferred value (e.g. remembering the last set value across
  sessions, on a per-site basis or otherwise). While the <code>muted</code>
  IDL attribute is set to true, the <a>media element</a> must be <a>muted</a>.

  Whenever either of the values that would be returned by the <code>volume</code> and <code>muted</code> IDL
  attributes change, the user agent must <a>queue a task</a> to <a>fire a simple
  event</a> named <code>volumechange</code> at the <a>media
  element</a>.

  An element's <dfn>effective media volume</dfn> is determined as follows:

  <ol>

    <li>If the user has indicated that the user agent is to override the volume of the element,
    then the element's <a>effective media volume</a> is the volume desired by the user. Abort
    these steps.</li>

    <li>If the element's audio output is <a>muted</a>, the
    element's <a>effective media volume</a> is zero. Abort these steps.</li>

    <li>If the element has a <a>current media controller</a> and that
    <code>MediaController</code> object's <a>media controller mute override</a> is true, the
    element's <a>effective media volume</a> is zero. Abort these steps.</li>

    <li>Let <var>volume</var> be the <a>playback
    volume</a> of the audio portions of the <a>media element</a>, in range 0.0 (silent) to
    1.0 (loudest).</li>

    <li>If the element has a <a>current media controller</a>, multiply <var>volume</var> by that <code>MediaController</code> object's <a>media controller
    volume multiplier</a>. (The <a>media controller volume multiplier</a> is in the range
    0.0 to 1.0, so this can only reduce the value.)</li>

    <li>The element's <a>effective media volume</a> is <var>volume</var>,
    interpreted relative to the range 0.0 to 1.0, with 0.0 being silent, and 1.0 being the loudest
    setting, values in between increasing in loudness. The range need not be linear. The loudest
    setting may be lower than the system's loudest possible setting; for example the user could have
    set a maximum volume.</li>

  </ol>

  </div>

  The <dfn><code>muted</code></dfn> content attribute on <a>media elements</a> is a <a>boolean attribute</a> that controls the
  default state of the audio output of the <a>media resource</a>, potentially overriding user
  preferences.

  <div class="impl">

  The <dfn><code>defaultMuted</code></dfn> IDL attribute must
  <a>reflect</a> the <code>muted</code> content attribute.

  </div>

  <p class="note">
    This attribute has no dynamic effect (it only controls the default state of the
  element).
  </p>

  <div class="example">
    This video (an advertisement) autoplays, but to avoid annoying users, it does so without
    sound, and allows the user to turn the sound on.

    <pre highlight="html">
&lt;video src="adverts.cgi?kind=video" controls autoplay loop muted&gt;&lt;/video&gt;
    </pre>

  </div>

<h5 id="time-ranges">Time ranges</h5>

  Objects implementing the <code>TimeRanges</code> interface
  represent a list of ranges (periods) of time.

  <pre class="idl" data-highlight="webidl">interface TimeRanges {
  readonly attribute unsigned long length;
  double start(unsigned long index);
  double end(unsigned long index);
};
</pre>

  <dl class="domintro">

    <dt><var>media</var> . <code>length</code></dt>

    <dd>

    Returns the number of ranges in the object.

    </dd>

    <dt><var>time</var> = <var>media</var> . <code>start</code>(<var>index</var>)</dt>

    <dd>

    Returns the time for the start of the range with the given index.

    Throws an <code>IndexSizeError</code> exception if the index is out of range.

    </dd>

    <dt><var>time</var> = <var>media</var> . <code>end</code>(<var>index</var>)</dt>

    <dd>

    Returns the time for the end of the range with the given index.

    Throws an <code>IndexSizeError</code> exception if the index is out of range.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>length</code></dfn> IDL attribute must return the
  number of ranges represented by the object.

  The <dfn><code>start(<var>index</var>)</code></dfn>
  method must return the position of the start of the <var>index</var>th range represented
  by the object, in seconds measured from the start of the timeline that the object covers.

  The <dfn><code>end(<var>index</var>)</code></dfn> method
  must return the position of the end of the <var>index</var>th range represented by the
  object, in seconds measured from the start of the timeline that the object covers.

  These methods must throw <code>IndexSizeError</code> exceptions if called with an <var>index</var> argument greater than or equal to the number of ranges represented by the
  object.

  When a <code>TimeRanges</code> object is said to be a <dfn>normalized <code>TimeRanges</code>
  object</dfn>, the ranges it represents must obey the following criteria:

  <ul>

    <li>The start of a range must be greater than the end of all earlier ranges.</li>

    <li>The start of a range must be less than or equal to the end of that same range.</li>

  </ul>

  In other words, the ranges in such an object are ordered, don't overlap, and don't touch
  (adjacent ranges are folded into one bigger range). A range can be empty (referencing just a
  single moment in time), e.g. to indicate that only one frame is currently buffered in the case
  that the user agent has discarded the entire <a>media resource</a> except for the current
  frame, when a <a>media element</a> is paused.

  Ranges in a <code>TimeRanges</code> object must be inclusive.

  <p class="example">Thus, the end of a range would be equal to the start of a following adjacent
  (touching but not overlapping) range. Similarly, a range covering a whole timeline anchored at
  zero would have a start equal to zero and an end equal to the duration of the timeline.</p>

  The timelines used by the objects returned by the <code>buffered</code>, <code>seekable</code> and
  <code>played</code> IDL attributes of <a>media
  elements</a> must be that element's <a>media timeline</a>.

  </div>

<h5 id="the-trackevent-interface">The <code>TrackEvent</code> interface</h5>

  <pre class="idl" data-highlight="webidl">[Constructor(DOMString type, optional TrackEventInit eventInitDict)]
interface TrackEvent : Event {
  readonly attribute (VideoTrack or AudioTrack or TextTrack)? track;
};

dictionary TrackEventInit : EventInit {
  (VideoTrack or AudioTrack or TextTrack)? track;
};
</pre>

  <dl class="domintro">

    <dt><var>event</var> . <code>track</code></dt>

    <dd>

    Returns the track object (<code>TextTrack</code>, <code>AudioTrack</code>, or
    <code>VideoTrack</code>) to which the event relates.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>track</code></dfn> attribute must return the value
  it was initialized to. When the object is created, this attribute must be initialized to null. It
  represents the context information for the event.

  </div>

<h5 id="event-summary">Event summary</h5>

  <em>This section is non-normative.</em>

  The following events fire on <a>media elements</a> as part of the
  processing model described above:

  <table>
    <thead>
    <tr>
      <th>Event name
      </th><th>Interface
      </th><th>Fired when...
      </th><th>Preconditions

    </th></tr></thead><tbody>
    <tr>

      <td><dfn><code>loadstart</code></dfn>

      </td><td><code>Event</code>

      </td><td>The user agent begins looking for <a>media data</a>, as part of the <a>resource selection algorithm</a>.

      </td><td><code>networkState</code> equals <code>NETWORK_LOADING</code>

    </td></tr><tr>

      <td><dfn><code>progress</code></dfn>

      </td><td><code>Event</code>

      </td><td>The user agent is fetching <a>media data</a>.

      </td><td><code>networkState</code> equals <code>NETWORK_LOADING</code>

    </td></tr><tr>

      <td><dfn><code>suspend</code></dfn>

      </td><td><code>Event</code>

      </td><td>The user agent is intentionally not currently fetching <a>media data</a>.

      </td><td><code>networkState</code> equals <code>NETWORK_IDLE</code>

    </td></tr><tr>

      <td><dfn><code>abort</code></dfn>

      </td><td><code>Event</code>

      </td><td>The user agent stops fetching the <a>media data</a> before it is completely
      downloaded, but not due to an error.

      </td><td><code>error</code> is an object with the code <code>MEDIA_ERR_ABORTED</code>. <code>networkState</code> equals either <code>NETWORK_EMPTY</code> or <code>NETWORK_IDLE</code>, depending on when the download was aborted.

    </td></tr><tr>

      <td><dfn><code>error</code></dfn>

      </td><td><code>Event</code>

      </td><td>An error occurs while fetching the <a>media data</a>.

      </td><td><code>error</code> is an object with the code <code>MEDIA_ERR_NETWORK</code> or higher. <code>networkState</code> equals either <code>NETWORK_EMPTY</code> or <code>NETWORK_IDLE</code>, depending on when the download was aborted.

    </td></tr><tr>

      <td><dfn><code>emptied</code></dfn>

      </td><td><code>Event</code>

      </td><td>A <a>media element</a> whose <code>networkState</code>
      was previously not in the <code>NETWORK_EMPTY</code> state has
      just switched to that state (either because of a fatal error during load that's about to be
      reported, or because the <code>load()</code> method was invoked while
      the <a>resource selection algorithm</a> was already
      running).

      </td><td><code>networkState</code> is <code>NETWORK_EMPTY</code>; all the IDL attributes are in their
      initial states.

    </td></tr><tr>

      <td><dfn><code>stalled</code></dfn>

      </td><td><code>Event</code>

      </td><td>The user agent is trying to fetch <a>media data</a>, but data is unexpectedly not
      forthcoming.

      </td><td><code>networkState</code> is <code>NETWORK_LOADING</code>.

    </td></tr></tbody><tbody>
    <tr>

      <td><dfn><code>loadedmetadata</code></dfn>

      </td><td><code>Event</code>

      </td><td>The user agent has just determined the duration and dimensions of the <a>media
      resource</a> and <a>the text tracks are ready</a>.

      </td><td><code>readyState</code> is newly equal to <code>HAVE_METADATA</code> or greater for the first time.

    </td></tr><tr>

      <td><dfn><code>loadeddata</code></dfn>

      </td><td><code>Event</code>

      </td><td>The user agent can render the <a>media data</a> at the <a>current playback
      position</a> for the first time.

      </td><td><code>readyState</code> newly increased to <code>HAVE_CURRENT_DATA</code> or greater for the first time.

    </td></tr><tr>

      <td><dfn><code>canplay</code></dfn>

      </td><td><code>Event</code>

      </td><td>The user agent can resume playback of the <a>media data</a>, but estimates that if
      playback were to be started now, the <a>media resource</a> could not be rendered at the
      current playback rate up to its end without having to stop for further buffering of content.

      </td><td><code>readyState</code> newly increased to <code>HAVE_FUTURE_DATA</code> or greater.

    </td></tr><tr>

      <td><dfn><code>canplaythrough</code></dfn>

      </td><td><code>Event</code>

      </td><td>The user agent estimates that if playback were to be started now, the <a>media
      resource</a> could be rendered at the current playback rate all the way to its end without
      having to stop for further buffering.

      </td><td><code>readyState</code> is newly equal to <code>HAVE_ENOUGH_DATA</code>.

    </td></tr><tr>

      <td><dfn><code>playing</code></dfn>

      </td><td><code>Event</code>

      </td><td>Playback is ready to start after having been paused or delayed due to lack of <a>media
      data</a>.

      </td><td><code>readyState</code> is newly equal to or greater than
      <code>HAVE_FUTURE_DATA</code> and <code>paused</code> is false, or <code>paused</code> is newly false and <code>readyState</code> is equal to or greater than <code>HAVE_FUTURE_DATA</code>. Even if this event fires, the
      element might still not be <a>potentially playing</a>, e.g. if the element is
      <a>blocked on its media controller</a> (e.g. because the <a>current media
      controller</a> is paused, or another <a>slaved media
      element</a> is stalled somehow, or because the <a>media resource</a> has no data
      corresponding to the <a>media controller position</a>), or the element is <a>paused
      for user interaction</a> or <a>paused for in-band content</a>.

    </td></tr><tr>

      <td><dfn><code>waiting</code></dfn>

      </td><td><code>Event</code>

      </td><td>Playback has stopped because the next frame is not available, but the user agent expects
      that frame to become available in due course.

      </td><td><code>readyState</code> is equal to or less than <code>HAVE_CURRENT_DATA</code>, and <code>paused</code> is false. Either <code>seeking</code> is true, or the <a>current playback position</a>
      is not contained in any of the ranges in <code>buffered</code>. It
      is possible for playback to stop for other reasons without <code>paused</code> being false, but those reasons do not fire this event
      (and when those situations resolve, a separate <code>playing</code>
      event is not fired either): e.g. the element is newly <a>blocked on its media
      controller</a>, or <a>playback ended</a>, or playback
      <a>stopped due to errors</a>, or the element has <a>paused for user interaction</a>
      or <a>paused for in-band content</a>.

    </td></tr></tbody><tbody>
    <tr>

      <td><dfn><code>seeking</code></dfn>

      </td><td><code>Event</code>

      </td><td>The <code>seeking</code> IDL attribute changed to true, and the user agent has started seeking to a new position.

      </td><td>

    </td></tr><tr>

      <td><dfn><code>seeked</code></dfn>

      </td><td><code>Event</code>

      </td><td>The <code>seeking</code> IDL attribute changed to false after the <a>current playback position</a> was changed.

      </td><td>

    </td></tr><tr>

      <td><dfn><code>ended</code></dfn>

      </td><td><code>Event</code>

      </td><td>Playback has stopped because the end of the <a>media resource</a> was reached.

      </td><td><code>currentTime</code> equals the end of the <a>media
      resource</a>; <code>ended</code> is true.

    </td></tr></tbody><tbody>
    <tr>

      <td><dfn><code>durationchange</code></dfn>

      </td><td><code>Event</code>

      </td><td>The <code>duration</code> attribute has just been updated.

      </td><td>

    </td></tr><tr>

      <td><dfn><code>timeupdate</code></dfn>

      </td><td><code>Event</code>

      </td><td>The <a>current playback position</a> changed as part of normal playback or in an especially interesting way, for example discontinuously.

      </td><td>

    </td></tr><tr>

      <td><dfn><code>play</code></dfn>

      </td><td><code>Event</code>

      </td><td>The element is no longer paused. Fired after the <code>play()</code>
      method has returned, or when the <code>autoplay</code> attribute
      has caused playback to begin.

      </td><td><code>paused</code> is newly false.

    </td></tr><tr>

      <td><dfn><code>pause</code></dfn>

      </td><td><code>Event</code>

      </td><td>The element has been paused. Fired after the <code>pause()</code>
      method has returned.

      </td><td><code>paused</code> is newly true.

    </td></tr><tr>

      <td><dfn><code>ratechange</code></dfn>

      </td><td><code>Event</code>

      </td><td>Either the <code>defaultPlaybackRate</code> or the
      <code>playbackRate</code> attribute has just been updated.

      </td><td>

    </td></tr></tbody><tbody>
    <tr>

      <td><dfn><code>resize</code></dfn>

      </td><td><code>Event</code>

      </td><td>One or both of the <code>videoWidth</code> and <code>videoHeight</code> attributes have just been updated.

      </td><td><a>Media element</a> is a <code>video</code> element; <code>readyState</code> is not <code>HAVE_NOTHING</code>

    </td></tr><tr>

      <td><dfn><code>volumechange</code></dfn>

      </td><td><code>Event</code>

      </td><td>Either the <code>volume</code> attribute or the <code>muted</code> attribute has changed. Fired after the relevant
      attribute's setter has returned.

      </td><td>

  </td></tr></tbody></table>

  The following events fire on <code>MediaController</code> objects:

  <table>

    <thead>
    <tr>

      <th>Event name

      </th><th>Interface

      </th><th>Fired when...

    </th></tr></thead><tbody>
    <tr>

      <td><dfn><code>emptied</code></dfn>

      </td><td><code>Event</code>

      </td><td>All the <a>slaved media elements</a> newly have <code>readyState</code> set to <code>HAVE_NOTHING</code> or greater, or there are no longer any
      <a>slaved media elements</a>.

    </td></tr><tr>

      <td><dfn><code>loadedmetadata</code></dfn>

      </td><td><code>Event</code>

      </td><td>All the <a>slaved media elements</a> newly have <code>readyState</code> set to <code>HAVE_METADATA</code> or greater.

    </td></tr><tr>

      <td><dfn><code>loadeddata</code></dfn>

      </td><td><code>Event</code>

      </td><td>All the <a>slaved media elements</a> newly have <code>readyState</code> set to <code>HAVE_CURRENT_DATA</code> or greater.

    </td></tr><tr>

      <td><dfn><code>canplay</code></dfn>

      </td><td><code>Event</code>

      </td><td>All the <a>slaved media elements</a> newly have <code>readyState</code> set to <code>HAVE_FUTURE_DATA</code> or greater.

    </td></tr><tr>

      <td><dfn><code>canplaythrough</code></dfn>

      </td><td><code>Event</code>

      </td><td>All the <a>slaved media elements</a> newly have <code>readyState</code> set to <code>HAVE_ENOUGH_DATA</code>.

    </td></tr><tr>

      <td><dfn><code>playing</code></dfn>

      </td><td><code>Event</code>

      </td><td>The <code>MediaController</code> is no longer a <a>blocked media controller</a>.

    </td></tr><tr>

      <td><dfn><code>waiting</code></dfn>

      </td><td><code>Event</code>

      </td><td>The <code>MediaController</code> is now a <a>blocked media controller</a>.

    </td></tr><tr>

      <td><dfn><code>ended</code></dfn>

      </td><td><code>Event</code>

      </td><td>All the <a>slaved media elements</a> have newly <a>ended playback</a>; the
      <code>MediaController</code> has reached the end of all the <a>slaved media elements</a>.

    </td></tr></tbody><tbody>
    <tr>

      <td><dfn><code>durationchange</code></dfn>

      </td><td><code>Event</code>

      </td><td>The <code>duration</code> attribute has just been
      updated.

    </td></tr><tr>

      <td><dfn><code>timeupdate</code></dfn>

      </td><td><code>Event</code>

      </td><td>The <a>media controller position</a> changed.

    </td></tr><tr>

      <td><dfn><code>play</code></dfn>

      </td><td><code>Event</code>

      </td><td>The <code>paused</code> attribute is newly false.

    </td></tr><tr>

      <td><dfn><code>pause</code></dfn>

      </td><td><code>Event</code>

      </td><td>The <code>paused</code> attribute is newly true.

    </td></tr><tr>

      <td><dfn><code>ratechange</code></dfn>

      </td><td><code>Event</code>

      </td><td>Either the <code>defaultPlaybackRate</code>
      attribute or the <code>playbackRate</code> attribute
      has just been updated.

    </td></tr><tr>

      <td><dfn><code>volumechange</code></dfn>

      </td><td><code>Event</code>

      </td><td>Either the <code>volume</code> attribute or the <code>muted</code> attribute has just been updated.

  </td></tr></tbody></table>

  The following events fire on <code>AudioTrackList</code>, <code>VideoTrackList</code>, and
  <code>TextTrackList</code> objects:

  <table>

    <thead>
    <tr>

      <th>Event name

      </th><th>Interface

      </th><th>Fired when...

    </th></tr></thead><tbody>
    <tr>

      <td><dfn><code>change</code></dfn>

      </td><td><code>Event</code>

      </td><td>One or more tracks in the track list have been enabled or disabled.

    </td></tr><tr>

      <td><dfn><code>addtrack</code></dfn>

      </td><td><code>TrackEvent</code>

      </td><td>A track has been added to the track list.

    </td></tr><tr>

      <td><dfn><code>removetrack</code></dfn>

      </td><td><code>TrackEvent</code>

      </td><td>A track has been removed from the track list.

  </td></tr></tbody></table>

  The following event fires on <code>TextTrack</code> objects and <code>track</code> elements:

  <table>

    <thead>
    <tr>

      <th>Event name

      </th><th>Interface

      </th><th>Fired when...

    </th></tr></thead><tbody>
    <tr>

      <td><dfn><code>cuechange</code></dfn>

      </td><td><code>Event</code>

      </td><td>One or more cues in the track have become active or stopped being active.

  </td></tr></tbody></table>

  The following events fire on <code>TextTrackCue</code> objects:

  <table>

    <thead>
    <tr>

      <th>Event name

      </th><th>Interface

      </th><th>Fired when...

    </th></tr></thead><tbody>
    <tr>

      <td><dfn><code>enter</code></dfn>

      </td><td><code>Event</code>

      </td><td>The cue has become active.

    </td></tr><tr>

      <td><dfn><code>exit</code></dfn>

      </td><td><code>Event</code>

      </td><td>The cue has stopped being active.

  </td></tr></tbody></table>

  <div class="impl">

<h5 id="security-and-privacy-considerations">Security and privacy considerations</h5>

  The main security and privacy implications of the <code>video</code> and <code>audio</code>
  elements come from the ability to embed media cross-origin. There are two directions that threats
  can flow: from hostile content to a victim page, and from a hostile page to victim content.

  <hr />

  If a victim page embeds hostile content, the threat is that the content might contain scripted
  code that attempts to interact with the <code>Document</code> that embeds the content. To avoid
  this, user agents must ensure that there is no access from the content to the embedding page. In
  the case of media content that uses DOM concepts, the embedded content must be treated as if it
  was in its own unrelated <a>top-level browsing context</a>.

  <p class="example">For instance, if an SVG animation was embedded in a <code>video</code> element,
  the user agent would not give it access to the DOM of the outer page. From the perspective of
  scripts in the SVG resource, the SVG file would appear to be in a lone top-level browsing context
  with no parent.</p>

  <hr />

  If a hostile page embeds victim content, the threat is that the embedding page could obtain
  information from the content that it would not otherwise have access to. The API does expose some
  information: the existence of the media, its type, its duration, its size, and the performance
  characteristics of its host. Such information is already potentially problematic, but in practice
  the same information can more or less be obtained using the <code>img</code> element, and so it
  has been deemed acceptable.

  However, significantly more sensitive information could be obtained if the user agent further
  exposes metadata within the content such as subtitles or chapter titles. Such information is
  therefore only exposed if the video resource passes a CORS <a>resource sharing check</a>.
  The <code>crossorigin</code> attribute allows authors to control
  how this check is performed. [[!FETCH]]

  <p class="example">Without this restriction, an attacker could trick a user running within a
  corporate network into visiting a site that attempts to load a video from a previously leaked
  location on the corporation's intranet. If such a video included confidential plans for a new
  product, then being able to read the subtitles would present a serious confidentiality breach.</p>

  </div>

<h5 id="best-practices-for-authors-using-media-elements">Best practices for authors using media elements</h5>

  <em>This section is non-normative.</em>

  Playing audio and video resources on small devices such as set-top boxes or mobile phones is
  often constrained by limited hardware resources in the device. For example, a device might only
  support three simultaneous videos. For this reason, it is a good practice to release resources
  held by <a>media elements</a> when they are done playing, either by
  being very careful about removing all references to the element and allowing it to be garbage
  collected, or, even better, by removing the element's <code>src</code>
  attribute and any <code>source</code> element descendants, and invoking the element's <code>load()</code> method.

  Similarly, when the playback rate is not exactly 1.0, hardware, software, or format limitations
  can cause video frames to be dropped and audio to be choppy or muted.

  <div class="impl">

<h5 id="best-practices-for-implementors-of-media-elements">Best practices for implementors of media elements</h5>

  <em>This section is non-normative.</em>

  How accurately various aspects of the <a>media element</a> API are implemented is
  considered a quality-of-implementation issue.

  For example, when implementing the <code>buffered</code> attribute,
  how precise an implementation reports the ranges that have been buffered depends on how carefully
  the user agent inspects the data. Since the API reports ranges as times, but the data is obtained
  in byte streams, a user agent receiving a variable-bit-rate stream might only be able to determine
  precise times by actually decoding all of the data. User agents aren't required to do this,
  however; they can instead return estimates (e.g. based on the average bit rate seen so far) which
  get revised as more information becomes available.

  As a general rule, user agents are urged to be conservative rather than optimistic. For
  example, it would be bad to report that everything had been buffered when it had not.

  Another quality-of-implementation issue would be playing a video backwards when the codec is
  designed only for forward playback (e.g. there aren't many key frames, and they are far apart, and
  the intervening frames only have deltas from the previous frame). User agents could do a poor job,
  e.g. only showing key frames; however, better implementations would do more work and thus do a
  better job, e.g. actually decoding parts of the video forwards, storing the complete frames, and
  then playing the frames backwards.

  Similarly, while implementations are allowed to drop buffered data at any time (there is no
  requirement that a user agent keep all the media data obtained for the lifetime of the media
  element), it is again a quality of implementation issue: user agents with sufficient resources to
  keep all the data around are encouraged to do so, as this allows for a better user experience. For
  example, if the user is watching a live stream, a user agent could allow the user only to view the
  live video; however, a better user agent would buffer everything and allow the user to seek
  through the earlier material, pause it, play it forwards and backwards, etc.

  When multiple tracks are synchronized with a <code>MediaController</code>, it is possible for
  scripts to add and remove media elements from the <code>MediaController</code>'s list of
  <a>slaved media elements</a>, even while these tracks are playing. How smoothly the media
  plays back in such situations is another quality-of-implementation issue.

  <hr />

  When a <a>media element</a> that is paused is <a>removed from a document</a> and not reinserted before the next time the <a>event
  loop</a> reaches <a>step 1</a>, implementations that are resource constrained are encouraged to take
  that opportunity to release all hardware resources (like video planes, networking resources, and
  data buffers) used by the <a>media element</a>. (User agents still have to keep track of the
  playback position and so forth, though, in case playback is later restarted.)

  </div>

<h4 id="the-map-element">The <dfn><code>map</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Transparent</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>name</code> - Name of <a>image map</a> to reference from the <code>usemap</code> attribute</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLMapElement : HTMLElement {
  attribute DOMString name;
  [SameObject] readonly attribute HTMLCollection areas;
  [SameObject] readonly attribute HTMLCollection images;
};
</pre>
    </dd>
  </dl>

  The <code>map</code> element, in conjunction with an <code>img</code> element and any
  <code>area</code> element descendants, defines an <a>image map</a>. The element
  <a>represents</a> its children.

  The <dfn><code>name</code></dfn> attribute gives the map a name so that
  it can be referenced. The attribute must be present and must have a non-empty value with no <a>space characters</a>. The value of the <code>name</code> attribute must not be a <a>compatibility-caseless</a> match for the value of the <code>name</code> attribute of another <code>map</code> element in the same
  document. If the <code>id</code> attribute is also specified, both attributes must
  have the same value.

  <dl class="domintro">

    <dt><var>map</var> . <code>areas</code></dt>

    <dd>

    Returns an <code>HTMLCollection</code> of the <code>area</code> elements in the
    <code>map</code>.

    </dd>

    <dt><var>map</var> . <code>images</code></dt>

    <dd>

    Returns an <code>HTMLCollection</code> of the <code>img</code> and <code>object</code>
    elements that use the <code>map</code>.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>areas</code></dfn> attribute must return an
  <code>HTMLCollection</code> rooted at the <code>map</code> element, whose filter matches only
  <code>area</code> elements.

  The <dfn><code>images</code></dfn> attribute must return an
  <code>HTMLCollection</code> rooted at the <code>Document</code> node, whose filter matches only
  <code>img</code> and <code>object</code> elements that are associated with this <code>map</code>
  element according to the <a>image map</a> processing model.

  The IDL attribute <dfn><code>name</code></dfn> must <a>reflect</a>
  the content attribute of the same name.

  </div>

  <div class="example">
    Image maps can be defined in conjunction with other content on the page, to ease maintenance.
    This example is of a page with an image map at the top of the page and a corresponding set of
    text links at the bottom.

    <pre highlight="html">
&lt;!DOCTYPE HTML&gt;
&lt;TITLE&gt;Babiesâ¢: Toys&lt;/TITLE&gt;
&lt;HEADER&gt;
  &lt;h1&gt;Toys&lt;/h1&gt;
  &lt;IMG SRC="/images/menu.gif"
      ALT="Babiesâ¢ navigation menu. Select a department to go to its page."
      USEMAP="#NAV"&gt;
&lt;/HEADER&gt;
  ...
&lt;FOOTER&gt;
  &lt;MAP NAME="NAV"&gt;
  &lt;P&gt;
    &lt;A HREF="/clothes/"&gt;Clothes&lt;/A&gt;
    &lt;AREA ALT="Clothes" COORDS="0,0,100,50" HREF="/clothes/"&gt; |
    &lt;A HREF="/toys/"&gt;Toys&lt;/A&gt;
    &lt;AREA ALT="Toys" COORDS="100,0,200,50" HREF="/toys/"&gt; |
    &lt;A HREF="/food/"&gt;Food&lt;/A&gt;
    &lt;AREA ALT="Food" COORDS="200,0,300,50" HREF="/food/"&gt; |
    &lt;A HREF="/books/"&gt;Books&lt;/A&gt;
    &lt;AREA ALT="Books" COORDS="300,0,400,50" HREF="/books/"&gt;
  &lt;/P&gt;
  &lt;/MAP&gt;
&lt;/FOOTER&gt;
    </pre>

  </div>

<h4 id="the-area-element">The <dfn><code>area</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected, but only if there is a <code>map</code> element ancestor or a <code>template</code> element ancestor.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>alt</code> - Replacement text for use when images are not available</dd>
    <dd><code>coords</code> - Coordinates for the shape to be created in an <a>image map</a></dd>
    <dd><code>download</code> - Whether to download the resource instead of navigating to it, and its file name if so</dd>
    <dd><code>href</code> - Address of the <a>hyperlink</a></dd>
    <dd><code>hreflang</code> -  Language of the linked resource</dd>
    <dd><code>rel</code> Relationship between the document containing the hyperlink and the destination resource</dd>
    <dd><code>shape</code> - The kind of shape to be created in an <a>image map</a></dd><a>
    </a><dd><a><code>target</code> - </a><a>Browsing context</a> for <a>hyperlink</a> <a>navigation</a></dd>
    <dd><code>type</code> - Hint for the type of the referenced resource</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>link</code></a> role (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLAreaElement : HTMLElement {
  attribute DOMString alt;
  attribute DOMString coords;
  attribute DOMString shape;
  attribute DOMString target;
  attribute DOMString download;
  attribute DOMString rel;
  readonly attribute DOMTokenList relList;
  attribute DOMString hreflang;
  attribute DOMString type;
};
HTMLAreaElement implements URLUtils;
</pre>
    </dd>
  </dl>

  The <code>area</code> element <a>represents</a> either a hyperlink with some text and a
  corresponding area on an <a>image map</a>, or a dead area on an image map.

  An <code>area</code> element with a parent node must have a <code>map</code> element ancestor
  or a <code>template</code> element ancestor.

  If the <code>area</code> element has an <code>href</code>
  attribute, then the <code>area</code> element represents a <a>hyperlink</a>. In this case,
  the <dfn><code>alt</code></dfn> attribute must be present. It specifies the
  text of the hyperlink. Its value must be text that, when presented with the texts specified for
  the other hyperlinks of the <a>image map</a>, and with the alternative text of the image,
  but without the image itself, provides the user with the same kind of choice as the hyperlink
  would when used without its text but with its shape applied to the image. The <code>alt</code> attribute may be left blank if there is another <code>area</code>
  element in the same <a>image map</a> that points to the same resource and has a non-blank
  <code>alt</code> attribute.

  If the <code>area</code> element has no <code>href</code>
  attribute, then the area represented by the element cannot be selected, and the <code>alt</code> attribute must be omitted.

  In both cases, the <code>shape</code> and <code>coords</code> attributes specify the area.

  The <dfn><code>shape</code></dfn> attribute is an <a>enumerated
  attribute</a>. The following table lists the keywords defined for this attribute. The states
  given in the first cell of the rows with keywords give the states to which those keywords map.
  <span class="impl">Some of the keywords are non-conforming, as noted in the last
  column.</span>

  <table>
    <thead>
    <tr>
      <th>State
      </th><th>Keywords
      </th><th class="impl">Notes
    </th></tr></thead><tbody>
    <tr>
      <td rowspan="2"><a>Circle state</a>
      </td><td><dfn><code>circle</code></dfn>
      </td><td class="impl">
    </td></tr><tr>
      <td class="impl"><dfn><code>circ</code></dfn>
      </td><td class="impl">Non-conforming
    </td></tr><tr>
      <td><a>Default state</a>
      </td><td><dfn><code>default</code></dfn>
      </td><td class="impl">
    </td></tr><tr>
      <td rowspan="2"><a>Polygon state</a>
      </td><td><dfn><code>poly</code></dfn>
      </td><td class="impl">
    </td></tr><tr>
      <td class="impl"><dfn><code>polygon</code></dfn>
      </td><td class="impl">Non-conforming
    </td></tr><tr>
      <td rowspan="2"><a>Rectangle state</a>
      </td><td><dfn><code>rect</code></dfn>
      </td><td class="impl">
    </td></tr><tr>
      <td class="impl"><dfn><code>rectangle</code></dfn>
      </td><td class="impl">Non-conforming
  </td></tr></tbody></table>

  The attribute may be omitted. The <i>missing value default</i> is the <a>rectangle</a> state.

  The <dfn><code>coords</code></dfn> attribute must, if specified,
  contain a <a>valid list of integers</a>. This attribute gives the coordinates for the shape
  described by the <code>shape</code> attribute. <span class="impl">The
  processing for this attribute is described as part of the <a>image map</a> processing
  model.</span>

  In the <dfn>circle state</dfn>, <code>area</code> elements must
  have a <code>coords</code> attribute present, with three integers, the
  last of which must be non-negative. The first integer must be the distance in CSS pixels from the
  left edge of the image to the center of the circle, the second integer must be the distance in CSS
  pixels from the top edge of the image to the center of the circle, and the third integer must be
  the radius of the circle, again in CSS pixels.

  In the <dfn>default state</dfn> state, <code>area</code>
  elements must not have a <code>coords</code> attribute. (The area is the
  whole image.)

  In the <dfn>polygon state</dfn>, <code>area</code> elements must
  have a <code>coords</code> attribute with at least six integers, and the
  number of integers must be even. Each pair of integers must represent a coordinate given as the
  distances from the left and the top of the image in CSS pixels respectively, and all the
  coordinates together must represent the points of the polygon, in order.

  In the <dfn>rectangle state</dfn>, <code>area</code> elements must
  have a <code>coords</code> attribute with exactly four integers, the
  first of which must be less than the third, and the second of which must be less than the fourth.
  The four points must represent, respectively, the distance from the left edge of the image to the
  left side of the rectangle, the distance from the top edge to the top side, the distance from the
  left edge to the right side, and the distance from the top edge to the bottom side, all in CSS
  pixels.

  <div class="impl">

  When user agents allow users to <a>follow hyperlinks</a> or
  <a>download hyperlinks</a> created using the
  <code>area</code> element, as described in the next section, the <code>href</code>, <code>target</code>,
  <code>download</code>, and

  attributes decide how the link is followed. The <code>rel</code>, <code>hreflang</code>, and <code>type</code>
  attributes may be used to indicate to the user the likely nature of the target resource before the
  user follows the link.

  </div>

  The <code>target</code>,
    <code>download</code>,

  <code>rel</code>, <code>hreflang</code>, and <code>type</code>
  attributes must be omitted if the <code>href</code> attribute is not
  present.

  If the <code>itemprop</code> attribute is specified on an
  <code>area</code> element, then the <code>href</code> attribute must
  also be specified.

  <div class="impl">

  The <a>activation behavior</a> of <code>area</code> elements is to run the following
  steps:

  <ol>

    <li>If the <code>area</code> element's <a>node document</a> is not <a>fully active</a>,
    then abort these steps.</li>

    <li>

    If the <code>area</code> element has a <code>download</code>
    attribute and the algorithm is not <a>allowed to show a popup</a>; or, if the user has not indicated a specific <a>browsing context</a> for following the link, and the element's <code>target</code> attribute is present, and applying <a>the rules
    for choosing a browsing context given a browsing context name</a>, using the value of the
    <code>target</code> attribute as the browsing context name, would
    result in there not being a chosen browsing context, then run these substeps:

    <ol>

      <li>If there is an <a>entry settings object</a>, throw an
      <code>InvalidAccessError</code> exception.</li>

      <li>Abort these steps without following the hyperlink.</li>

    </ol>

    </li>

    <li>Otherwise, the user agent must <a>follow the
    hyperlink</a> or <a>download the hyperlink</a> created
    by the <code>area</code> element, if any, and as determined by the <code>download</code> attribute and any expressed user
    preference.</li>

  </ol>

  The IDL attributes <dfn><code>alt</code></dfn>, <dfn><code>coords</code></dfn>, <dfn><code>target</code></dfn>, <dfn><code>download</code></dfn>,
  <dfn><code>rel</code></dfn>,
  <dfn><code>hreflang</code></dfn>, and <dfn><code>type</code></dfn>, each must <a>reflect</a> the respective
  content attributes of the same name.

  The IDL attribute <dfn><code>shape</code></dfn> must
  <a>reflect</a> the <code>shape</code> content attribute.

  The IDL attribute <dfn><code>relList</code></dfn> must
  <a>reflect</a> the <code>rel</code> content attribute.

  <hr />

  The <code>area</code> element also supports the <code>URLUtils</code> interface. [[!URL]]

  When the element is created, and whenever the element's <code>href</code> content attribute is set, changed, or removed, the user
  agent must invoke the element's <code>URLUtils</code> interface's <a>set the input</a> algorithm with the value of the <code>href</code> content attribute, if any, or the empty string otherwise,
  as the given value.

  The element's <code>URLUtils</code> interface's <a>get the
  base</a> algorithm must simply return <a>the element's base URL</a>.

  The element's <code>URLUtils</code> interface's <a>query
  encoding</a> is the <a>document's character encoding</a>.

  When the element's <code>URLUtils</code> interface invokes its <a>update steps</a> with a string <var>value</var>, the user
  agent must set the element's <code>href</code> content attribute to
  the string <var>value</var>.

  </div>

<h4 id="image-maps">Image maps</h4>

  <div class="impl">

<h5 id="authoring">Authoring</h5>

  </div>

  An <dfn>image map</dfn> allows geometric areas on an image to be associated with <a>hyperlinks</a>.

  An image, in the form of an <code>img</code> element or an <code>object</code> element
  representing an image, may be associated with an image map (in the form of a <code>map</code>
  element) by specifying a <dfn><code>usemap</code></dfn> attribute on
  the <code>img</code> or <code>object</code> element. The <code>usemap</code> attribute, if specified, must be a <a>valid
  hash-name reference</a> to a <code>map</code> element.

  <div class="example">
    Consider an image that looks as follows:

    <img src="images/sample-usemap.png" width="600" height="150" alt="A line with four shapes in it, equally spaced: a red hollow box, a green circle, a blue triangle, and a yellow four-pointed star." />

    If we wanted just the colored areas to be clickable, we could do it as follows:

    <pre highlight="html">
&lt;p&gt;
  Please select a shape:
  &lt;img src="shapes.png" usemap="#shapes"
      alt="Four shapes are available: a red hollow box, a green circle, a blue triangle, and a yellow four-pointed star."&gt;
  &lt;map name="shapes"&gt;
  &lt;area shape=rect coords="50,50,100,100"&gt; &lt;!-- the hole in the red box --&gt;
  &lt;area shape=rect coords="25,25,125,125" href="red.html" alt="Red box."&gt;
  &lt;area shape=circle coords="200,75,50" href="green.html" alt="Green circle."&gt;
  &lt;area shape=poly coords="325,25,262,125,388,125" href="blue.html" alt="Blue triangle."&gt;
  &lt;area shape=poly coords="450,25,435,60,400,75,435,90,450,125,465,90,500,75,465,60"
        href="yellow.html" alt="Yellow star."&gt;
  &lt;/map&gt;
&lt;/p&gt;
    </pre>

  </div>

  <div class="impl">

<h5 id="processing-model">Processing model</h5>

  If an <code>img</code> element or an <code>object</code> element representing an image has a
  <code>usemap</code> attribute specified, user agents must process it
  as follows:

  <ol>

    <li>Parse the attribute's value using the <a>rules for parsing a hash-name reference</a> to a <code>map</code> element, with the element's <a>node document</a> as the context node.
    This will return either an element (the <var>map</var>) or
    null.</li>

    <li>If that returned null, then abort these steps. The image is not associated with an image
    map after all.</li>

    <li>Otherwise, the user agent must collect all the <code>area</code> elements that are
    descendants of the <var>map</var>. Let those be the <var>areas</var>.</li>

  </ol>

  Having obtained the list of <code>area</code> elements that form the image map (the <var>areas</var>), interactive user agents must process the list in one of two ways.

  If the user agent intends to show the text that the <code>img</code> element represents, then
  it must use the following steps.

  <p class="note">
    In user agents that do not support images, or that have images disabled,
  <code>object</code> elements cannot represent images, and thus this section never applies (the
  <a>fallback content</a> is shown instead). The following steps therefore only apply to
  <code>img</code> elements.
  </p>

  <ol>

    <li>Remove all the <code>area</code> elements in <var>areas</var> that have no <code>href</code> attribute.</li>

    <li>Remove all the <code>area</code> elements in <var>areas</var> that have no <code>alt</code> attribute, or whose <code>alt</code>
    attribute's value is the empty string, <em>if</em> there is another <code>area</code> element in
    <var>areas</var> with the same value in the <code>href</code> attribute and with a non-empty <code>alt</code> attribute.</li>

    <li>Each remaining <code>area</code> element in <var>areas</var> represents a
    <a>hyperlink</a>. Those hyperlinks should all be made available to the user in a manner
    associated with the text of the <code>img</code>.

    In this context, user agents may represent <code>area</code> and <code>img</code> elements
    with no specified <code>alt</code> attributes, or whose <code>alt</code>
    attributes are the empty string or some other non-visible text, in a user-agent-defined fashion
    intended to indicate the lack of suitable author-provided text.</li>

  </ol>

  If the user agent intends to show the image and allow interaction with the image to select
  hyperlinks, then the image must be associated with a set of layered shapes, taken from the
  <code>area</code> elements in <var>areas</var>, in reverse <a>tree order</a> (so the last
  specified <code>area</code> element in the <var>map</var> is the bottom-most shape, and
  the first element in the <var>map</var>, in <a>tree order</a>, is the top-most shape).

  Each <code>area</code> element in <var>areas</var> must be processed as follows to
  obtain a shape to layer onto the image:

  <ol>

    <li>Find the state that the element's <code>shape</code> attribute
    represents.</li>

    <li>Use the <a>rules for parsing a list of integers</a> to parse the element's <code>coords</code> attribute, if it is present, and let the result be the
    <var>coords</var> list. If the attribute is absent, let the <var>coords</var>
    list be the empty list.</li>

    <li>

    If the number of items in the <var>coords</var> list is less than the minimum number
    given for the <code>area</code> element's current state, as per the following table, then the
    shape is empty; abort these steps.

    <table>
      <thead>
      <tr>
        <th>State
        </th><th>Minimum number of items
      </th></tr></thead><tbody>
      <tr>
        <td><a>Circle state</a>
        </td><td>3
      </td></tr><tr>
        <td><a>Default state</a>
        </td><td>0
      </td></tr><tr>
        <td><a>Polygon state</a>
        </td><td>6
      </td></tr><tr>
        <td><a>Rectangle state</a>
        </td><td>4
    </td></tr></tbody></table>

    </li>

    <li>

    Check for excess items in the <var>coords</var> list as per the entry in the
    following list corresponding to the <code>shape</code> attribute's
    state:

    <dl class="switch">
      <dt><a>Circle state</a></dt>
      <dd>Drop any items in the list beyond the third.</dd>
      <dt><a>Default state</a></dt>
      <dd>Drop all items in the list.</dd>
      <dt><a>Polygon state</a></dt>
      <dd>Drop the last item if there's an odd number of items.</dd>
      <dt><a>Rectangle state</a></dt>
      <dd>Drop any items in the list beyond the fourth.</dd>
    </dl>

    </li>

    <li>If the <code>shape</code> attribute represents the <a>rectangle state</a>, and the first number in the list is
    numerically greater than the third number in the list, then swap those two numbers around.</li>

    <li>If the <code>shape</code> attribute represents the <a>rectangle state</a>, and the second number in the list is
    numerically greater than the fourth number in the list, then swap those two numbers around.</li>

    <li>If the <code>shape</code> attribute represents the <a>circle state</a>, and the third number in the list is less than
    or equal to zero, then the shape is empty; abort these steps.</li>

    <li>Now, the shape represented by the element is the one described for the entry in the list
    below corresponding to the state of the <code>shape</code> attribute:

    <dl class="switch">

      <dt><a>Circle state</a></dt>
      <dd>

      Let <var>x</var> be the first number in <var>coords</var>, <var>y</var> be the second number, and <var>r</var> be the third number.

      The shape is a circle whose center is <var>x</var> CSS pixels from the left edge
      of the image and <var>y</var> CSS pixels from the top edge of the image, and whose
      radius is <var>r</var> pixels.

      </dd>

      <dt><a>Default state</a></dt>
      <dd>

      The shape is a rectangle that exactly covers the entire image.

      </dd>

      <dt><a>Polygon state</a></dt>
      <dd>

      Let <var>x<sub><var>i</var></sub></var> be the <a>(2<var>i</var>)</a>th entry in <var>coords</var>, and <var>y<sub><var>i</var></sub></var> be the <a>(2<var>i</var>+1)</a>th entry in <var>coords</var> (the first entry in <var>coords</var> being the one with index 0).

      Let <var>the coordinates</var> be (<var>x<sub><var>i</var></sub></var>, <var>y<sub><var>i</var></sub></var>),
      interpreted in CSS pixels measured from the top left of the image, for all integer values of
      <var>i</var> from 0 to <a>(<var>N</var>/2)-1</a>, where <var>N</var> is the number of items in <var>coords</var>.

      The shape is a polygon whose vertices are given by <var>the coordinates</var>, and
      whose interior is established using the even-odd rule. [[!GRAPHICS]]

      </dd>

      <dt><a>Rectangle state</a></dt>

      <dd>

      Let <var>x<sub>1</sub></var> be the first number in <var>coords</var>, <var>y<sub>1</sub></var> be the second number, <var>x<sub>2</sub></var> be the third number, and <var>y<sub>2</sub></var> be the fourth number.

      The shape is a rectangle whose top-left corner is given by the coordinate (<var>x<sub>1</sub></var>, <var>y<sub>1</sub></var>) and whose
      bottom right corner is given by the coordinate (<var>x<sub>2</sub></var>,
      <var>y<sub>2</sub></var>), those coordinates being interpreted as CSS pixels
      from the top left corner of the image.

      </dd>

    </dl>

    For historical reasons, the coordinates must be interpreted relative to the
    <em>displayed</em> image after any stretching caused by the CSS 'width' and 'height' properties
    (or, for non-CSS browsers, the image element's <code>width</code> and <code>height</code> attributes â CSS browsers map those attributes to the
    aforementioned CSS properties).

    <p class="note">
    Browser zoom features and transforms applied using CSS or SVG do not affect the
    coordinates.
  </p>

    </li>

  </ol>

  Pointing device interaction with an image associated with a set of layered shapes per the above
  algorithm must result in the relevant user interaction events being first fired to the top-most
  shape covering the point that the pointing device indicated, if any, or to the image element
  itself, if there is no shape covering that point. User agents may also allow individual
  <code>area</code> elements representing <a>hyperlinks</a> to be selected
  and activated (e.g. using a keyboard).

  <p class="note">
    Because a <code>map</code> element (and its <code>area</code> elements) can be
  associated with multiple <code>img</code> and <code>object</code> elements, it is possible for an
  <code>area</code> element to correspond to multiple <i>focusable areas</i>
  of the document.
  </p>

  Image maps are <a>live</a>; if the DOM is mutated, then the user agent must act as if it
  had rerun the algorithms for image maps.

  </div>

<h4 id="mathml">MathML</h4>

  The <dfn><code>math</code></dfn> element from the <a>MathML namespace</a>
  falls into the <a>embedded content</a>, <a>phrasing content</a>, <a>flow
  content</a>, and <a>palpable content</a> categories for the purposes of the content
  models in this specification.

  This specification refers to several specific MathML elements, in particular:
    <dfn><code>annotation-xml</code></dfn>,
    <dfn><code>merror</code></dfn>,
    <dfn><code>mi</code></dfn>,
    <dfn><code>mn</code></dfn>,
    <dfn><code>mo</code></dfn>,
    <dfn><code>ms</code></dfn>, and
    <dfn><code>mtext</code></dfn>.

  When the MathML <code>annotation-xml</code> element contains
  elements from the <a>HTML namespace</a>, such elements must all be <a>flow
  content</a>. [[!MATHML]]

  When the MathML token elements (<code>mi</code>, <code>mo</code>, <code>mn</code>, <code>ms</code>,
  and <code>mtext</code>) are descendants of HTML elements, they may contain
  <a>phrasing content</a> elements from the <a>HTML namespace</a>. [[!MATHML]]

  <div class="impl">

  User agents must handle text other than <a>inter-element whitespace</a> found in MathML
  elements whose content models do not allow straight text by pretending for the purposes of MathML
  content models, layout, and rendering that that text is actually wrapped in an <code>mtext</code> element in the <a>MathML namespace</a>. (Such text is not,
  however, conforming.)

  User agents must act as if any MathML element whose contents does not match the element's
  content model was replaced, for the purposes of MathML layout and rendering, by an <code>merror</code> element in the <a>MathML namespace</a> containing some
  appropriate error message.

  To enable authors to use MathML tools that only accept MathML in its XML form, interactive HTML
  user agents are encouraged to provide a way to export any MathML fragment as an XML
  namespace-well-formed XML fragment.

  </div>

  The semantics of MathML elements are defined by the MathML specification and <a>other
  applicable specifications</a>. [[!MATHML]]

  <div class="example">
    Here is an example of the use of MathML in an HTML document:

    <pre highlight="html">
      &lt;!DOCTYPE html&gt;
      &lt;html&gt;
        &lt;head&gt;
        &lt;title&gt;The quadratic formula&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
        &lt;h1&gt;The quadratic formula&lt;/h1&gt;
        &lt;p&gt;
          &lt;math&gt;
          &lt;mi&gt;x&lt;/mi&gt;
          &lt;mo&gt;=&lt;/mo&gt;
          &lt;mfrac&gt;
            &lt;mrow&gt;
            &lt;mo form="prefix"&gt;-&lt;/mo&gt; &lt;mi&gt;b&lt;/mi&gt;
            &lt;mo&gt;Â±&lt;/mo&gt;
            &lt;msqrt&gt;
              &lt;msup&gt; &lt;mi&gt;b&lt;/mi&gt; &lt;mn&gt;2&lt;/mn&gt; &lt;/msup&gt;
              &lt;mo&gt;-&lt;/mo&gt;
              &lt;mn&gt;4&lt;/mn&gt; &lt;mo&gt;â¢&lt;/mo&gt; &lt;mi&gt;a&lt;/mi&gt; &lt;mo&gt;â¢&lt;/mo&gt; &lt;mi&gt;c&lt;/mi&gt;
            &lt;/msqrt&gt;
            &lt;/mrow&gt;
            &lt;mrow&gt;
            &lt;mn&gt;2&lt;/mn&gt; &lt;mo&gt;â¢&lt;/mo&gt; &lt;mi&gt;a&lt;/mi&gt;
            &lt;/mrow&gt;
          &lt;/mfrac&gt;
          &lt;/math&gt;
        &lt;/p&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>
  </div>

<h4 id="svg">SVG</h4>

  The <dfn><code>svg</code></dfn> element from the <a>SVG namespace</a> falls into the
  <a>embedded content</a>, <a>phrasing content</a>, <a>flow content</a>,
  and <a>palpable content</a> categories for the purposes of the content models in this
  specification.

  <div class="impl">

  To enable authors to use SVG tools that only accept SVG in its XML form, interactive HTML user
  agents are encouraged to provide a way to export any SVG fragment as an XML namespace-well-formed
  XML fragment.

  </div>

  When the SVG <code>foreignObject</code> element contains elements from the <a>HTML
  namespace</a>, such elements must all be <a>flow content</a>. [[!SVG]]

  The content model for <code>title</code> elements in the <a>SVG namespace</a>
  inside <a>HTML documents</a> is <a>phrasing content</a>. (This further constrains the
  requirements given in the SVG specification.)

  The semantics of SVG elements are defined by the SVG specification and <a>other applicable
  specifications</a>. [[!SVG]]

<h4 id="dimension-attributes"><dfn>Dimension attributes</dfn></h4>

  <span class="impl"><strong>Author requirements</strong>:</span> The <dfn><code>width</code></dfn> and <dfn><code>height</code></dfn> attributes on <code>img</code>, <code>iframe</code>,
  <code>embed</code>, <code>object</code>, <code>video</code>, and, when their <code>type</code> attribute is in the <a>Image Button</a> state, <code>input</code> elements may be
  specified to give the dimensions of the visual content of the element (the width and height
  respectively, relative to the nominal direction of the output medium), in CSS pixels. The
  attributes, if specified, must have values that are <a>valid non-negative integers</a>.

  The specified dimensions given may differ from the dimensions specified in the resource itself,
  since the resource may have a resolution that differs from the CSS pixel resolution. (On screens,
  CSS pixels have a resolution of 96ppi, but in general the CSS pixel resolution depends on the
  reading distance.) If both attributes are specified, then one of the following statements must be
  true:

  <ul>

    <li><a><var>specified width</var> - 0.5 â¤
              <var>specified height</var> * <var>target ratio</var> â¤
              <var>specified width</var> + 0.5</a></li>

    <li><a><var>specified height</var> - 0.5 â¤
              <var>specified width</var> / <var>target ratio</var> â¤
              <var>specified height</var> + 0.5</a></li>

    <li><a><var>specified height</var> = <var>specified width</var> = 0</a></li>

  </ul>

  The <var>target ratio</var> is the ratio of the <a>intrinsic width</a> to the
  <a>intrinsic height</a> in the resource. The <var>specified width</var> and <var>specified
  height</var> are the values of the <code>width</code> and <code>height</code> attributes respectively.

  The two attributes must be omitted if the resource in question does not have both an
  <a>intrinsic width</a> and an <a>intrinsic height</a>.

  If the two attributes are both zero, it indicates that the element is not intended for the user
  (e.g. it might be a part of a service to count page views).

  <p class="note">The dimension attributes are not intended to be used to stretch the image.</p>

  <div class="impl">

  <strong>User agent requirements</strong>: User agents are expected to use these attributes <a>as hints for the rendering</a>.

  The <dfn><code>width</code></dfn> and <dfn><code>height</code></dfn> IDL attributes on the <code>iframe</code>,
  <code>embed</code>, <code>object</code>, and <code>video</code> elements must <a>reflect</a>
  the respective content attributes of the same name.

  <p class="note">
    For <code>iframe</code>, <code>embed</code>, and <code>object</code> the IDL
  attributes are <code>DOMString</code>; for <code>video</code> the IDL attributes are <code>unsigned long</code>.
  </p>

  <p class="note">
    The corresponding IDL attributes for <code>img</code> and
  <code>input</code> elements are defined in those respective elements'
  sections, as they are slightly more specific to those elements' other behaviors.
  </p>

  </div>

<h3 id="links">Links</h3>

  Links are a conceptual construct, created by <code>a</code>, <code>area</code>, and
  <code>link</code> elements, that <a>represent</a> a connection between
  two resources, one of which is the current <code>Document</code>. There are two kinds of links in
  HTML:

  <dl>

    <dt><dfn>Links to external resources</dfn></dt>

    <dd>These are links to resources that are to be used to augment the current document,
    generally automatically processed by the user agent.</dd>

    <dt><dfn>Hyperlinks</dfn></dt>

    <dd>These are links to other resources that are generally exposed to the user by the user
    agent so that the user can cause the user agent to <a>navigate</a> to those resources, e.g.
    to visit them in a browser or download them.</dd>

  </dl>

  For <code>link</code> elements with an <code>href</code> attribute and a
  <code>rel</code> attribute, links must be created for the keywords of the
  <code>rel</code> attribute, as defined for those keywords in the <a>link types</a> section.

  Similarly, for <code>a</code> and <code>area</code> elements with an <code>href</code> attribute and a <code>rel</code> attribute, links must be created for the keywords of the
  <code>rel</code> attribute as defined for those keywords in the <a>link types</a> section. Unlike <code>link</code> elements, however,
  <code>a</code> and <code>area</code> elements with an <code>href</code>
  attribute that either do not have a <code>rel</code> attribute, or
  whose <code>rel</code> attribute has no keywords that are defined as
  specifying <a>hyperlinks</a>, must also create a <a>hyperlink</a>.
  This implied hyperlink has no special meaning (it has no <a>link type</a>)
  beyond linking the element's <a>node document</a> to the resource given by the element's <code>href</code> attribute.

  A <a>hyperlink</a> can have one or more <dfn>hyperlink
  annotations</dfn> that modify the processing semantics of that hyperlink.

<h4 id="links-created-by-a-and-area-elements">Links created by <code>a</code> and <code>area</code> elements</h4>

  The <dfn><code>href</code></dfn> attribute on <code>a</code> and
  <code>area</code> elements must have a value that is a <a>valid URL potentially surrounded by
  spaces</a>.

  <p class="note">
    The <code>href</code> attribute on <code>a</code> and
  <code>area</code> elements is not required; when those elements do not have <code>href</code> attributes they do not create hyperlinks.
  </p>

  The <dfn><code>target</code></dfn> attribute, if present, must be
  a <a>valid browsing context name or keyword</a>. It gives the name of the <a>browsing
  context</a> that will be used. <span class="impl">User agents use this name when
  <a>following hyperlinks</a>.</span>

  When an <code>a</code> or <code>area</code> element's <a>activation behavior</a> is
  invoked, the user agent may allow the user to indicate a preference regarding whether the
  hyperlink is to be used for <a>navigation</a> or whether the resource it
  specifies is to be downloaded.

  In the absence of a user preference, the default should be navigation if the element has no
  <code>download</code> attribute, and should be to download the
  specified resource if it does.

  Whether determined by the user's preferences or via the presence or absence of the attribute,
  if the decision is to use the hyperlink for <a>navigation</a> then the user
  agent must <a>follow the hyperlink</a>, and if the decision is
  to use the hyperlink to download a resource, the user agent must <a>download the hyperlink</a>. These terms are defined in subsequent sections
  below.

  The <dfn><code>download</code></dfn> attribute, if present,
  indicates that the author intends the hyperlink to be used for downloading a resource. The
  attribute may have a value; the value, if any, specifies the default file name that the author
  recommends for use in labeling the resource in a local file system. There are no restrictions on
  allowed values, but authors are cautioned that most file systems have limitations with regard to
  what punctuation is supported in file names, and user agents are likely to adjust file names
  accordingly.

  The <dfn><code>ping</code></dfn> attribute, if present,
  gives the URLs of the resources that are interested in being notified if the user follows the
  hyperlink. The value must be a <a>set of space-separated tokens</a>, each of which must be a
  <a>valid non-empty URL</a>. <span class="impl">The value is used by the user agent for
  <a>hyperlink auditing</a>.</span>

  The <dfn><code>rel</code></dfn> attribute on <code>a</code> and
  <code>area</code> elements controls what kinds of links the elements create. The attribute's value
  must be a <a>set of space-separated tokens</a>. The <a>allowed keywords
  and their meanings</a> are defined below.

  The <code>rel</code> attribute has no default value. If the
  attribute is omitted or if none of the values in the attribute are recognized by the user agent,
  then the document has no particular relationship with the destination resource other than there
  being a hyperlink between the two.

  The <dfn><code>hreflang</code></dfn> attribute on
  <code>a</code> elements that create <a>hyperlinks</a>, if present, gives
  the language of the linked resource. It is purely advisory. The value must be a valid BCP 47
  language tag. [[!BCP47]] <span class="impl">User agents must not consider this attribute
  authoritative â upon fetching the resource, user agents must use only language information
  associated with the resource to determine its language, not metadata included in the link to the
  resource.</span>

  The <dfn><code>type</code></dfn> attribute, if present, gives the
  <a>MIME type</a> of the linked resource. It is purely advisory. The value must be a
  <a>valid MIME type</a>. <span class="impl">User agents must not consider the <code>type</code> attribute authoritative â upon fetching the
  resource, user agents must not use metadata included in the link to the resource to determine its
  type.</span>

  <div class="impl">

<h4 id="following-hyperlinks">Following hyperlinks</h4>

  When a user <dfn>follows a hyperlink</dfn> created by an element
  <var>subject</var>, optionally with a <var>hyperlink suffix</var>, the user agent must run the
  following steps:

  <ol>

    <li>Let <var>replace</var> be false.</li>

    <li>Let <var>source</var> be the <a>browsing context</a> that contains the
    <code>Document</code> object with which <var>subject</var> in question is
    associated.</li>

    <li>

    If the user indicated a specific <a>browsing context</a> when following the hyperlink,
    or if the user agent is configured to follow hyperlinks by navigating a particular browsing
    context, then let <var>target</var> be that <a>browsing context</a>. If this is a new
    <a>top-level browsing context</a> (e.g. when the user followed the hyperlink using "Open
    in New Tab"), then <var>source</var> must be set as the new <a>browsing context</a>'s
    <a>one permitted sandboxed navigator</a>.

    Otherwise, if <var>subject</var> is an <code>a</code> or <code>area</code> element
    that has a <code>target</code> attribute, then let <var>target</var> be the <a>browsing context</a> that is chosen by applying <a>the
    rules for choosing a browsing context given a browsing context name</a>, using the value of
    the <code>target</code> attribute as the browsing context name. If
    these rules result in the creation of a new <a>browsing context</a>, set <var>replace</var> to true.

    Otherwise, if <var>target</var> is an <code>a</code> or <code>area</code> element
    with no <code>target</code> attribute, but the
    <code>Document</code> contains a <code>base</code> element with a <code>target</code> attribute, then let <var>target</var> be the
    <a>browsing context</a> that is chosen by applying <a>the rules for choosing a browsing
    context given a browsing context name</a>, using the value of the <code>target</code> attribute of the first such <code>base</code> element as
    the browsing context name. If these rules result in the creation of a new <a>browsing
    context</a>, set <var>replace</var> to true.

    Otherwise, let <var>target</var> be the <a>browsing context</a> that <var>subject</var> itself is in.

    </li>

    <li><a>Resolve</a> the <a>URL</a> given by
    <var>subject</var>'s <code>href</code> attribute, relative to
    <var>subject</var>.</li>

    <li>

    If that is successful, let <var>URL</var> be the <a>resulting absolute
    URL</a>.

    Otherwise, if <a>resolving</a> the <a>URL</a> failed, the
    user agent may report the error to the user in a user-agent-specific manner, may <a>queue a
    task</a> to <a>navigate</a> the <var>target</var>
    <a>browsing context</a> to an error page to report the error, or may ignore the error and
    do nothing. In any case, the user agent must then abort these steps.

    </li>

    <li>If there is a <var>hyperlink suffix</var>, append it to <var>URL</var>.</li>

    <li><a>Queue a task</a> to <a>navigate</a> the
    <var>target</var> <a>browsing context</a> to <var>URL</var>. If <var>replace</var> is true,
    the navigation must be performed with <a>replacement enabled</a>. The <a>source browsing
    context</a> must be <var>source</var>.</li>

  </ol>

  The <a>task source</a> for the tasks mentioned above is the <a>DOM manipulation task
  source</a>.

  </div>

<h4 id="downloading-resources">Downloading resources</h4>

  In some cases, resources are intended for later use rather than immediate viewing. To indicate
  that a resource is intended to be downloaded for use later, rather than immediately used, the
  <code>download</code> attribute can be specified on the
  <code>a</code> or <code>area</code> element that creates the <a>hyperlink</a> to that
  resource.

  The attribute can furthermore be given a value, to specify the file name that user agents are
  to use when storing the resource in a file system. This value can be overridden by the <code>Content-Disposition</code> HTTP header's filename parameters.
  [[!RFC6266]]

  In cross-origin situations, the <code>download</code>
  attribute has to be combined with the <code>Content-Disposition</code> HTTP header, specifically with the
  <code>attachment</code> disposition type, to avoid the user being warned of possibly
  nefarious activity. (This is to protect users from being made to download sensitive personal or
  confidential information without their full understanding.)

  <div class="impl">

  <hr />

  When a user <dfn>downloads a hyperlink</dfn> created by an
  element <var>subject</var>, optionally with a <var>hyperlink suffix</var>, the user agent must
  run the following steps:

  <ol>

    <li><a>Resolve</a> the <a>URL</a> given by
    <var>subject</var>'s <code>href</code> attribute, relative to
    <var>subject</var>.</li>

    <li>If <a>resolving</a> the <a>URL</a> fails, the user agent
    may report the error to the user in a user-agent-specific manner, may
    <a>navigate</a> to an error page to report the error, or may
    ignore the error and do nothing. In either case, the user agent must abort these steps.

    </li><li>Otherwise, let <var>URL</var> be the resulting <a>absolute
    URL</a>.</li>

    <li>If there is a <var>hyperlink suffix</var>, append it to <var>URL</var>.</li>

    <li>Return to whatever algorithm invoked these steps and continue
    these steps <a>in parallel</a>.</li>

    <li><a>Fetch</a> <var>URL</var> and handle the resulting resource
    <a>as a download</a>.</li>

  </ol>

  When a user agent is to handle a resource obtained from a fetch <dfn>as a download</dfn>, it
  should provide the user with a way to save the resource for later use, if a resource is
  successfully obtained; or otherwise should report any problems downloading the file to the
  user.

  If the user agent needs a file name for a resource being handled <a>as a download</a>, it
  should select one using the following algorithm.

  <p class="warning">This algorithm is intended to mitigate security dangers involved in downloading
  files from untrusted sites, and user agents are strongly urged to follow it.</p>

  <ol>

    <li>Let <var>filename</var> be the void value.</li>

    <li>If the resource has a <code>Content-Disposition</code>
    header, that header specifies the <code>attachment</code> disposition type, and the
    header includes file name information, then let <var>filename</var> have the value
    specified by the header, and jump to the step labeled <i>sanitize</i> below. [[!RFC6266]]</li>

    <li>Let <var>interface origin</var> be the <a>origin</a> of the
    <code>Document</code> in which the <a>download</a> or
    <a>navigate</a> action resulting in the download was initiated, if any.</li>

    <li>Let <var>resource origin</var> be the <a>origin</a> of the URL of the
    resource being downloaded, unless that URL's <a>scheme</a>
    component is <code>data</code>, in which case let <var>resource origin</var> be
    the same as the <var>interface origin</var>, if any.</li>

    <li>If there is no <var>interface origin</var>, then let <var>trusted
    operation</var> be true. Otherwise, let <var>trusted operation</var> be true if <var>resource origin</var> is the <a>same origin</a> as <var>interface
    origin</var>, and false otherwise.</li>

    <li>If <var>trusted operation</var> is true and the resource has a <code>Content-Disposition</code> header and that header includes file
    name information, then let <var>filename</var> have the value specified by the header,
    and jump to the step labeled <i>sanitize</i> below. [[!RFC6266]]</li>

    <li>If the download was not initiated from a <a>hyperlink</a> created by an
    <code>a</code> or <code>area</code> element, or if the element of the <a>hyperlink</a> from
    which it was initiated did not have a <code>download</code>
    attribute when the download was initiated, or if there was such an attribute but its value when
    the download was initiated was the empty string, then jump to the step labeled <i>no proposed
    file name</i>.</li>

    <li>Let <var>proposed filename</var> have the value of the <code>download</code> attribute of the element of the
    <a>hyperlink</a> that initiated the download at the time the download was
    initiated.</li>

    <li>If <var>trusted operation</var> is true, let <var>filename</var> have
    the value of <var>proposed filename</var>, and jump to the step labeled <i>sanitize</i>
    below.</li>

    <li>If the resource has a <code>Content-Disposition</code>
    header and that header specifies the <code>attachment</code> disposition type, let <var>filename</var> have the value of <var>proposed filename</var>, and jump to the
    step labeled <i>sanitize</i> below. [[!RFC6266]]</li>

    <li><i>No proposed file name</i>: If <var>trusted operation</var> is true, or if the
    user indicated a preference for having the resource in question downloaded, let <var>filename</var> have a value derived from the <a>URL</a> of the resource in a
    user-agent-defined manner, and jump to the step labeled <i>sanitize</i> below.</li>

    <li>

    Act in a user-agent-defined manner to safeguard the user from a potentially hostile
    cross-origin download. If the download is not to be aborted, then let <var>filename</var> be set to the user's preferred file name or to a file name selected by
    the user agent, and jump to the step labeled <i>sanitize</i> below.

    <div class="warning">

      If the algorithm reaches this step, then a download was begun from a different origin than
      the resource being downloaded, and the origin did not mark the file as suitable for
      downloading, and the download was not initiated by the user. This could be because a <code>download</code> attribute was used to trigger the download, or
      because the resource in question is not of a type that the user agent supports.

      This could be dangerous, because, for instance, a hostile server could be trying to get a
      user to unknowingly download private information and then re-upload it to the hostile server,
      by tricking the user into thinking the data is from the hostile server.

      Thus, it is in the user's interests that the user be somehow notified that the resource in
      question comes from quite a different source, and to prevent confusion, any suggested file name
      from the potentially hostile <var>interface origin</var> should be ignored.

    </div>

    </li>

    <li><i>Sanitize</i>: Optionally, allow the user to influence <var>filename</var>. For
    example, a user agent could prompt the user for a file name, potentially providing the value of
    <var>filename</var> as determined above as a default value.</li>

    <li>

    Adjust <var>filename</var> to be suitable for the local file system.

    <p class="example">For example, this could involve removing characters that are not legal in
    file names, or trimming leading and trailing whitespace.</p>

    </li>

    <li>If the platform conventions do not in any way use <a>extensions</a> to determine the types of file on the file system,
    then return <var>filename</var> as the file name and abort these steps.</li>

    <li>Let <var>claimed type</var> be the type given by the resource's <a>Content-Type metadata</a>, if any is known. Let <var>named
    type</var> be the type given by <var>filename</var>'s <a>extension</a>, if any is known. For the purposes of this step, a
    <i>type</i> is a mapping of a <a>MIME type</a> to an <a>extension</a>.</li>

    <li>If <var>named type</var> is consistent with the user's preferences (e.g. because
    the value of <var>filename</var> was determined by prompting the user), then return <var>filename</var> as the file name and abort these steps.</li>

    <li>If <var>claimed type</var> and <var>named type</var> are the same type
    (i.e. the type given by the resource's <a>Content-Type metadata</a> is
    consistent with the type given by <var>filename</var>'s <a>extension</a>), then return <var>filename</var> as the file
    name and abort these steps.</li>

    <li>

    If the <var>claimed type</var> is known, then alter <var>filename</var> to
    add an <a>extension</a> corresponding to <var>claimed
    type</var>.

    Otherwise, if <var>named type</var> is known to be potentially dangerous (e.g. it
    will be treated by the platform conventions as a native executable, shell script, HTML
    application, or executable-macro-capable document) then optionally alter <var>filename</var> to add a known-safe <a>extension</a>
    (e.g. "<code>.txt</code>").

    <p class="note">
    This last step would make it impossible to download executables, which might not
    be desirable. As always, implementors are forced to balance security and usability in this
    matter.
  </p>

    </li>

    <li>Return <var>filename</var> as the file name.</li>

  </ol>

  For the purposes of this algorithm, a file <dfn>extension</dfn>
  consists of any part of the file name that platform conventions dictate will be used for
  identifying the type of the file. For example, many operating systems use the part of the file
  name following the last dot ("<code>.</code>") in the file name to determine the type of
  the file, and from that the manner in which the file is to be opened or executed.

  User agents should ignore any directory or path information provided by the resource itself,
  its <a>URL</a>, and any <code>download</code> attribute, in
  deciding where to store the resulting file in the user's file system.

  </div>

<h4 id="link-types">Link types</h4>

  The following table summarizes the link types that are defined by this specification. This
  table is non-normative; the actual definitions for the link types are given in the next few
  sections.

  In this section, the term <i>referenced document</i> refers to the resource identified by the
  element representing the link, and the term <i>current document</i> refers to the resource within
  which the element representing the link finds itself.

  <div class="impl">

  To determine which link types apply to a <code>link</code>, <code>a</code>, or
  <code>area</code> element, the element's <code>rel</code> attribute must be <a>split on spaces</a>. The resulting tokens are the link types
  that apply to that element.

  </div>

  Except where otherwise specified, a keyword must not be specified more than once per <code>rel</code> attribute.

  Link types are always <a>ASCII case-insensitive</a><span class="impl">, and must be
  compared as such</span>.

  <p class="example">Thus, <code>rel="next"</code> is the same as <code>rel="NEXT"</code>.</p>

  <table>
    <thead>
    <tr>
      <th rowspan="2">Link type</th>
      <th colspan="2">Effect on...</th>
      <th rowspan="2">Brief description</th>
    </tr>
    <tr>
      <th><code>link</code></th>
      <th><code>a</code> and <code>area</code></th>
    </tr>
    </thead>
    <tbody>

    <tr>
      <td><code>alternate</code></td>
      <td><a>Hyperlink</a></td>
      <td><a>Hyperlink</a></td>
      <td>Gives alternate representations of the current document.</td>
    </tr>

    <tr>
      <td><code>author</code></td>
      <td><a>Hyperlink</a></td>
      <td><a>Hyperlink</a></td>
      <td>Gives a link to the author of the current document or article.</td>
    </tr>

    <tr>
      <td><code>bookmark</code></td>
      <td><em>not allowed</em></td>
      <td><a>Hyperlink</a></td>
      <td>Gives the permalink for the nearest ancestor section.</td>
    </tr>

    <tr>
      <td><code>help</code></td>
      <td><a>Hyperlink</a></td>
      <td><a>Hyperlink</a></td>
      <td>Provides a link to context-sensitive help.</td>
    </tr>

    <tr>
      <td><code>icon</code></td>
      <td><a>External Resource</a></td>
      <td><em>not allowed</em></td>
      <td>Imports an icon to represent the current document.</td>
    </tr>

    <tr>
      <td><code>license</code></td>
      <td><a>Hyperlink</a></td>
      <td><a>Hyperlink</a></td>
      <td>Indicates that the main content of the current document is covered by the copyright license described by the referenced document.</td>
    </tr>

    <tr>
      <td><code>next</code></td>
      <td><a>Hyperlink</a></td>
      <td><a>Hyperlink</a></td>
      <td>Indicates that the current document is a part of a series, and that the next document in the series is the referenced document.</td>
    </tr>

    <tr>
      <td><code>nofollow</code></td>
      <td><em>not allowed</em></td>
      <td><a>Annotation</a></td>
      <td>Indicates that the current document's original author or publisher does not endorse the referenced document.</td>
    </tr>

    <tr>
      <td><code>noreferrer</code></td>
      <td><em>not allowed</em></td>
      <td><a>Annotation</a></td>
      <td>Requires that the user agent not send an HTTP <code>Referer</code> (sic) header if the user follows the hyperlink.</td>
    </tr>

    <tr>
      <td><code>prefetch</code></td>
      <td><a>External Resource</a></td>
      <td><a>External Resource</a></td>
      <td>Specifies that the target resource should be preemptively cached.</td>
    </tr>

    <tr>
      <td><code>prev</code></td>
      <td><a>Hyperlink</a></td>
      <td><a>Hyperlink</a></td>
      <td>Indicates that the current document is a part of a series, and that the previous document in the series is the referenced document.</td>
    </tr>

    <tr>
      <td><code>search</code></td>
      <td><a>Hyperlink</a></td>
      <td><a>Hyperlink</a></td>
      <td>Gives a link to a resource that can be used to search through the current document and its related pages.</td>
    </tr>

    <tr>
      <td><code>stylesheet</code></td>
      <td><a>External Resource</a></td>
      <td><em>not allowed</em></td>
      <td>Imports a stylesheet.</td>
    </tr>

    <tr>
      <td><code>tag</code></td>
      <td><em>not allowed</em></td>
      <td><a>Hyperlink</a></td>
      <td>Gives a tag (identified by the given address) that applies to the current document.</td>
    </tr>

    </tbody>
  </table>

  <div class="impl">

  Some of the types described below list synonyms for these values. These are to be handled as specified by user agents, but must not be used
  in documents.

  </div>

<h5 id="link-type-alternate">Link type "<dfn><code>alternate</code></dfn>"</h5>

  The <code>alternate</code> keyword may be used with <code>link</code>,
  <code>a</code>, and <code>area</code> elements.

  The meaning of this keyword depends on the values of the other attributes.

  <dl class="switch">

    <dt>If the element is a <code>link</code> element and the <code>rel</code>
    attribute also contains the keyword <code>stylesheet</code></dt>

    <dd>

    The <code>alternate</code> keyword modifies the meaning of the <code>stylesheet</code> keyword in the way described for that keyword. The
    <code>alternate</code> keyword does not create a link of its own.

    </dd>

    <dt>If the <code>alternate</code> keyword is used with the <code>type</code> attribute set to the value <code>application/rss+xml</code> or the value <code>application/atom+xml</code></dt>

    <dd>

    The keyword creates a <a>hyperlink</a> referencing a syndication feed (though not
    necessarily syndicating exactly the same content as the current page).

    <div class="impl">

    The first <code>link</code> or <code>a</code> element in the document (in <a>tree
    order</a>) with the <code>alternate</code> keyword used with the <code>type</code> attribute set to the value <code>application/rss+xml</code> or the value <code>application/atom+xml</code>
    must be treated as the default syndication feed for the purposes of feed autodiscovery.

    <div class="example">
      The following <code>link</code> element gives the syndication
      feed for the current page:
      <pre highlight="html">
&lt;link rel="alternate" type="application/atom+xml" href="data.xml"&gt;
    </pre>
      The following extract offers various different syndication
      feeds:
      <pre highlight="html">
&lt;p&gt;You can access the planets database using Atom feeds:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="recently-visited-planets.xml" rel="alternate" type="application/atom+xml"&gt;Recently Visited Planets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="known-bad-planets.xml" rel="alternate" type="application/atom+xml"&gt;Known Bad Planets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="unexplored-planets.xml" rel="alternate" type="application/atom+xml"&gt;Unexplored Planets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    </pre>
    </div>

    </div>

    </dd>

    <dt>Otherwise</dt>

    <dd>

    The keyword creates a <a>hyperlink</a> referencing an alternate representation of the
    current document.

    The nature of the referenced document is given by the <code>hreflang</code>, and <code>type</code> attributes.

    If the <code>alternate</code> keyword is used with the <code>hreflang</code> attribute, and that attribute's value differs
    from the <a>root element</a>'s <a>language</a>, it indicates that the referenced
    document is a translation.

    If the <code>alternate</code> keyword is used with the <code>type</code> attribute, it indicates that the referenced document is
    a reformulation of the current document in the specified format.

    The <code>hreflang</code> and <code>type</code> attributes can be combined when specified with the <code>alternate</code> keyword.

    <div class="example">
      For example, the following link is a French translation that uses the PDF format:

      <pre highlight="html">
&lt;link rel=alternate type=application/pdf hreflang=fr href=manual-fr&gt;
    </pre>

    </div>

    This relationship is transitive â that is, if a document links to two other documents
    with the link type "<code>alternate</code>", then, in addition to implying
    that those documents are alternative representations of the first document, it is also implying
    that those two documents are alternative representations of each other.

    </dd>

  </dl>

<h5 id="link-type-author">Link type "<dfn><code>author</code></dfn>"</h5>

  The <code>author</code> keyword may be used with <code>link</code>,
  <code>a</code>, and <code>area</code> elements. This keyword creates a <a>hyperlink</a>.

  For <code>a</code> and <code>area</code> elements, the <code>author</code>
  keyword indicates that the referenced document provides further information about the author of
  the nearest <code>article</code> element ancestor of the element defining the hyperlink, if there
  is one, or of the page as a whole, otherwise.

  For <code>link</code> elements, the <code>author</code> keyword indicates
  that the referenced document provides further information about the author for the page as a
  whole.

  <p class="note">
    The "referenced document" can be, and often is, a <code>mailto:</code> URL giving the e-mail address of the author. [[!MAILTO]]
  </p>

  <div class="impl">

  <strong>Synonyms</strong>: For historical reasons, user agents must also treat
  <code>link</code>, <code>a</code>, and <code>area</code> elements that have a <code>rev</code> attribute with the value "<code>made</code>" as having the <code>author</code> keyword specified as a link relationship.

  </div>

<h5 id="link-type-bookmark">Link type "<dfn><code>bookmark</code></dfn>"</h5>

  The <code>bookmark</code> keyword may be used with <code>a</code> and
  <code>area</code> elements. This keyword creates a <a>hyperlink</a>.

  The <code>bookmark</code> keyword gives a permalink for the nearest
  ancestor <code>article</code> element of the linking element in question, or of <a>the section the linking element is most closely associated with</a>, if
  there are no ancestor <code>article</code> elements.

  <div class="example">
    The following snippet has three permalinks. A user agent could determine which permalink
    applies to which part of the spec by looking at where the permalinks are given.

    <pre highlight="html">
 ...
  &lt;body&gt;
  &lt;h1&gt;Example of permalinks&lt;/h1&gt;
  &lt;div id="a"&gt;
    &lt;h2&gt;First example&lt;/h2&gt;
    &lt;p&gt;&lt;a href="a.html" rel="bookmark"&gt;This permalink applies to
    only the content from the first H2 to the second H2&lt;/a&gt;. The DIV isn't
    exactly that section, but it roughly corresponds to it.&lt;/p&gt;
  &lt;/div&gt;
  &lt;h2&gt;Second example&lt;/h2&gt;
  &lt;article id="b"&gt;
    &lt;p&gt;&lt;a href="b.html" rel="bookmark"&gt;This permalink applies to
    the outer ARTICLE element&lt;/a&gt; (which could be, e.g., a blog post).&lt;/p&gt;
    &lt;article id="c"&gt;
    &lt;p&gt;&lt;a href="c.html" rel="bookmark"&gt;This permalink applies to
    the inner ARTICLE element&lt;/a&gt; (which could be, e.g., a blog comment).&lt;/p&gt;
    &lt;/article&gt;
  &lt;/article&gt;
  &lt;/body&gt;
  ...
    </pre>
  </div>

<h5 id="link-type-help">Link type "<dfn><code>help</code></dfn>"</h5>

  The <code>help</code> keyword may be used with <code>link</code>,
  <code>a</code>, and <code>area</code> elements. This keyword creates a <a>hyperlink</a>.

  For <code>a</code> and <code>area</code> elements, the <code>help</code>
  keyword indicates that the referenced document provides further help information for the parent of
  the element defining the hyperlink, and its children.

  <div class="example">
    In the following example, the form control has associated context-sensitive help. The user
    agent could use this information, for example, displaying the referenced document if the user
    presses the "Help" or "F1" key.

    <pre highlight="html">
 &lt;p&gt;&lt;label&gt; Topic: &lt;input name=topic&gt; &lt;a href="help/topic.html" rel="help"&gt;(Help)&lt;/a&gt;&lt;/label&gt;&lt;/p&gt;
    </pre>

  </div>

  For <code>link</code> elements, the <code>help</code> keyword indicates that
  the referenced document provides help for the page as a whole.

  For <code>a</code> and <code>area</code> elements, on some browsers, the <code>help</code> keyword causes the link to use a different cursor.

<h5 id="link-type-icon">Link type "<dfn><code>icon</code></dfn>"</h5>

  The <code>icon</code> keyword may be used with <code>link</code> elements.
  This keyword creates an <a>external resource link</a>.

  <div class="impl">

  The specified resource is an icon representing the page or site, and should be used by the user
  agent when representing the page in the user interface.

  </div>

  Icons could be auditory icons, visual icons, or other kinds of icons. <span class="impl">If
  multiple icons are provided, the user agent must select the most appropriate icon according to the
  <code>type</code>, <code>media</code>, and <code>sizes</code> attributes. If there are multiple equally appropriate icons,
  user agents must use the last one declared in <a>tree order</a> at the time that the user
  agent collected the list of icons. If the user agent tries to use an icon but that icon is
  determined, upon closer examination, to in fact be inappropriate (e.g. because it uses an
  unsupported format), then the user agent must try the next-most-appropriate icon as determined by
  the attributes.</span>

  <div class="impl">

  <p class="note">
    User agents are not required to update icons when the list of icons changes, but
  are encouraged to do so.
  </p>

  There is no default type for resources given by the <code>icon</code> keyword.
  However, for the purposes of <a>determining the type of the
  resource</a>, user agents must expect the resource to be an image.

  </div>

  The <dfn><code>sizes</code></dfn> attribute gives the sizes of icons
  for visual media. Its value, if present, is merely advisory. User agents may use the value to
  decide which icon(s) to use if multiple icons are available.

  If specified, the attribute must have a value that is an <a>unordered set of unique
  space-separated tokens</a> which are <a>ASCII case-insensitive</a>. Each value must be
  either an <a>ASCII case-insensitive</a> match for the string "<code>any</code>", or a value that consists of two <a>valid non-negative integers</a> that do not have a leading U+0030 DIGIT
  ZERO (0) character and that are separated by a single U+0078 LATIN SMALL LETTER X or U+0058 LATIN
  CAPITAL LETTER X character.

  The keywords represent icon sizes in raw pixels (as opposed to CSS pixels).

  <p class="note">
    An icon that is 50 CSS pixels wide intended for displays with a device pixel
  density of two device pixels per CSS pixel (2x, 192dpi) would have a width of 100 raw pixels. This
  feature does not support indicating that a different resource is to be used for small
  high-resolution icons vs large low-resolution icons (e.g. 50&times;50 2x vs 100&times;100 1x).
  </p>

  <div class="impl">

  To parse and process the attribute's value, the user agent must first <a>split the attribute's value on spaces</a>, and must then parse each resulting
  keyword to determine what it represents.

  </div>

  The <dfn><code>any</code></dfn> keyword represents that the
  resource contains a scalable icon, e.g. as provided by an SVG image.

  <div class="impl">

  Other keywords must be further parsed as follows to determine what they represent:

  <ul>

    <li>If the keyword doesn't contain exactly one U+0078 LATIN SMALL LETTER X or U+0058 LATIN
    CAPITAL LETTER X character, then this keyword doesn't represent anything. Abort these steps for
    that keyword.</li>

    <li>Let <var>width string</var> be the string before the "<code>x</code>" or
    "<code>X</code>".</li>

    <li>Let <var>height string</var> be the string after the "<code>x</code>" or
    "<code>X</code>".</li>

    <li>If either <var>width string</var> or <var>height string</var> start with
    a U+0030 DIGIT ZERO (0) character or contain any characters other than <a>ASCII digits</a>,
    then this keyword doesn't represent anything. Abort these steps for that keyword.</li>

    <li>Apply the <a>rules for parsing non-negative integers</a> to <var>width
    string</var> to obtain <var>width</var>.</li>

    <li>Apply the <a>rules for parsing non-negative integers</a> to <var>height
    string</var> to obtain <var>height</var>.</li>

    <li>The keyword represents that the resource contains a bitmap icon with a width of <var>width</var> device pixels and a height of <var>height</var> device
    pixels.</li>

  </ul>

  </div>

  The keywords specified on the <code>sizes</code> attribute must not
  represent icon sizes that are not actually available in the linked resource.

  <div class="impl">

  In the absence of a <code>link</code> with the <code>icon</code> keyword, for
  <code>Document</code> objects obtained over HTTP or HTTPS, user agents may instead run these
  steps <a>in parallel</a>:

  <ol>
    <li>Let <var>request</var> be a new <a>request</a> whose
    <a>url</a> is the <a>absolute URL</a> obtained by
    resolving the <a>URL</a> "<code>/favicon.ico</code>" against <a>the document's
    address</a>, <a>client</a> is the <code>Document</code>
    object's <code>Window</code> object's <a>environment settings object</a>, <a>type</a> is "<code>image</code>", <a>destination</a> is "<code>subresource</code>",
    <a>synchronous flag</a> is set, <a>credentials
    mode</a> is "<code>include</code>", and whose <a>use-URL-credentials flag</a>
    is set.</li>

    <li>Let <var>response</var> be the result of <a>fetching</a> <var>request</var>.</li>

    <li>Use <var>response</var>'s <a>unsafe response</a> as an icon as if it had been
    declared using the <code>icon</code> keyword.</li>
  </ol>

  </div>

  <div class="example">
    The following snippet shows the top part of an application with several icons.

    <pre highlight="html">
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
  &lt;head&gt;
  &lt;title&gt;lsForums â Inbox&lt;/title&gt;
  &lt;link rel=icon href=favicon.png sizes="16x16" type="image/png"&gt;
  &lt;link rel=icon href=windows.ico sizes="32x32 48x48" type="image/vnd.microsoft.icon"&gt;
  &lt;link rel=icon href=mac.icns sizes="128x128 512x512 8192x8192 32768x32768"&gt;
  &lt;link rel=icon href=iphone.png sizes="57x57" type="image/png"&gt;
  &lt;link rel=icon href=gnome.svg sizes="any" type="image/svg+xml"&gt;
  &lt;link rel=stylesheet href=lsforums.css&gt;
  &lt;script src=lsforums.js&gt;&lt;/script&gt;
  &lt;meta name=application-name content="lsForums"&gt;
  &lt;/head&gt;
  &lt;body&gt;
  ...
    </pre>

  </div>

  For historical reasons, the <code>icon</code> keyword may be preceded by the
  keyword "<code>shortcut</code>". If the "<code>shortcut</code>" keyword is
  present, the <code>rel</code> attribute's entire value must be an
  <a>ASCII case-insensitive</a> match for the string "<code>shortcut&nbsp;icon</code>" (with a single U+0020 SPACE character between the tokens and
  no other <a>space characters</a>).

<h5 id="link-type-license">Link type "<dfn><code>license</code></dfn>"</h5>

  The <code>license</code> keyword may be used with <code>link</code>,
  <code>a</code>, and <code>area</code> elements. This keyword creates a <a>hyperlink</a>.

  The <code>license</code> keyword indicates that the referenced document
  provides the copyright license terms under which the main content of the current document is
  provided.

  This specification defines the main content of a document and content that
  is not deemed to be part of that main content via the <code>main</code> element.
  The distinction should be made clear to the user.

  <div class="example">
    Consider a photo sharing site. A page on that site might
    describe and show a photograph, and the page might be marked up as
    follows:

    <pre highlight="html">
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
  &lt;head&gt;
  &lt;title&gt;Exampl Pictures: Kissat&lt;/title&gt;
  &lt;link rel="stylesheet" href="/style/default"&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;h1&gt;Kissat&lt;/h1&gt;
  &lt;nav&gt;
    &lt;a href="../"&gt;Return to photo index&lt;/a&gt;
  &lt;/nav&gt;

  &lt;main&gt;
  &lt;figure&gt;
    &lt;img src="/pix/39627052_fd8dcd98b5.jpg"&gt;
    &lt;figcaption&gt;Kissat&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;p&gt;One of them has six toes!&lt;/p&gt;
  &lt;p&gt;&lt;small&gt;This photograph is &lt;a rel="license" href="http://www.opensource.org/licenses/mit-license.php"&gt;MIT Licensed&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
  &lt;/main&gt;
  &lt;footer&gt;
    &lt;a href="/"&gt;Home&lt;/a&gt; | &lt;a href="../"&gt;Photo index&lt;/a&gt;
    &lt;p&gt;&lt;small&gt;Â© copyright 2009 Exampl Pictures. All Rights Reserved.&lt;/small&gt;&lt;/p&gt;
  &lt;/footer&gt;
  &lt;/body&gt;
&lt;/html&gt;
    </pre>

    In this case the <code>license</code>
    applies to just the photo (the main content of the document), not
    the whole document. In particular not the design of the page
    itself, which is covered by the copyright given at the bottom of
    the document. This should be made clear in the text referencing the licensing
    link and could also be made clearer in the styling
    (e.g. making the license link prominently positioned near the
    photograph, while having the page copyright in small text at
    the foot of the page, or adding a border to the <code>main</code> element.)

  </div>

  <div class="impl">

  <strong>Synonyms</strong>: For historical reasons, user agents must also treat the keyword
  "<code>copyright</code>" like the <code>license</code> keyword.

  </div>

<h5 id="link-type-nofollow">Link type "<dfn><code>nofollow</code></dfn>"</h5>

  The <code>nofollow</code> keyword may be used with <code>a</code> and
  <code>area</code> elements. This keyword does not create a <a>hyperlink</a>, but <a>annotates</a> any other hyperlinks created by the element (the
  implied hyperlink, if no other keywords create one).

  The <code>nofollow</code> keyword indicates that the link is not endorsed
  by the original author or publisher of the page, or that the link to the referenced document was
  included primarily because of a commercial relationship between people affiliated with the two
  pages.

<h5 id="link-type-noreferrer">Link type "<dfn><code>noreferrer</code></dfn>"</h5>

  The <code>noreferrer</code> keyword may be used with <code>a</code> and
  <code>area</code> elements. This keyword does not create a <a>hyperlink</a>, but <a>annotates</a> any other hyperlinks created by the element (the
  implied hyperlink, if no other keywords create one).

  It indicates that no referrer information is to be leaked when following the link.

  <div class="impl">

  If a user agent follows a link defined by an <code>a</code> or <code>area</code> element that
  has the <code>noreferrer</code> keyword, the user agent must set their
  <a>request</a>'s <a>referrer</a> to "<code>no-referrer</code>".

  This keyword also <a>causes the <code>opener</code>
  attribute to remain null</a> if the hyperlink <a>creates</a> a new <a>browsing context</a>.

  </div>

<h5 id="link-type-prefetch">Link type "<dfn><code>prefetch</code></dfn>"</h5>

  The <code>prefetch</code> keyword may be used with <code>link</code>,
  <code>a</code>, and <code>area</code> elements. This keyword creates an <a>external resource link</a>.

  The <code>prefetch</code> keyword indicates that preemptively fetching and
  caching the specified resource is likely to be beneficial, as it is highly likely that the user
  will require this resource.

  There is no default type for resources given by the <code>prefetch</code>
  keyword.

<h5 id="link-type-search">Link type "<dfn><code>search</code></dfn>"</h5>

  The <code>search</code> keyword may be used with <code>link</code>,
  <code>a</code>, and <code>area</code> elements. This keyword creates a <a>hyperlink</a>.

  The <code>search</code> keyword indicates that the referenced document
  provides an interface specifically for searching the document and its related resources.

  <p class="note">
    OpenSearch description documents can be used with <code>link</code> elements and
  the <code>search</code> link type to enable user agents to autodiscover search
  interfaces. [[!OPENSEARCH]]
  </p>

<h5 id="link-type-stylesheet">Link type "<dfn><code>stylesheet</code></dfn>"</h5>

  The <code>stylesheet</code> keyword may be used with <code>link</code>
  elements. This keyword creates an <a>external resource
  link</a> that contributes to the styling processing model.

  The specified resource is a resource that describes how to present the document. Exactly how
  the resource is to be processed depends on the actual type of the resource.

  If the <code>alternate</code> keyword is also specified on the
  <code>link</code> element, then <dfn>the link is an alternative stylesheet</dfn>; in this case,
  the <code>title</code> attribute must be specified on the <code>link</code>
  element, with a non-empty value.

  The default type for resources given by the <code>stylesheet</code> keyword is
  <code>text/css</code>.

  <div class="impl">
    The appropriate times to <a>obtain</a> the resource are:

    * When the <a>external resource link</a> is created on a <code>link</code> element that is
        already <a>in a <code>Document</code></a>.
    * When the <a>external resource link</a>'s <code>link</code> element is
        <a>inserted into a document</a>.
    * When the <code>href</code> attribute of the <code>link</code> element of an
        <a>external resource link</a> that is already <a>in a <code>Document</code></a> is changed.
    * When the <code>crossorigin</code> attribute of the <code>link</code> element of an
        <a>external resource link</a> that is already <a>in a <code>Document</code></a> is set,
        changed, or removed.
    * When the <code>type</code> attribute of the <code>link</code> element of an
        <a>external resource link</a> that is already <a>in a <code>Document</code></a> is set or
        changed to a value that does not or no longer matches the <a>Content-Type metadata</a> of
        the previous obtained external resource, if any.
    * When the <code>type</code> attribute of the <code>link</code> element of an
        <a>external resource link</a> that is already <a>in a <code>Document</code></a> but was
        previously not obtained due to the <code>type</code> attribute specifying an unsupported
        type is set, removed, or changed.
    * When the <a>external resource link</a> changes from being <a>an alternative stylesheet</a> to
        not being one, or vice versa.

    <strong>Quirk</strong>: If the document has been set to <a>quirks mode</a>, has the
    <a>same origin</a> as the <a>URL</a> of the external resource,
    and the <a>Content-Type metadata</a> of the external resource is not a
    supported style sheet type, the user agent must instead assume it to be <code>text/css</code>.

    Once a resource has been <a>obtained</a>, if its <a>Content-Type metadata</a> is <code>text/css</code>, the user
    agent must run these steps:

    1. Let <var>element</var> be the <code>link</code> element that created the
        <a>external resource link</a>.
    2. If <var>element</var> has an <a>associated CSS style sheet</a>,
        <a>remove the CSS style sheet</a> in question.
    3. If <var>element</var> no longer creates an <a>external resource link</a>
        that contributes to the styling processing model, or if, since the resource in question was
        <a>obtained</a>, it has become appropriate to <a>obtain</a> it again (meaning this algorithm
        is about to be invoked again for a newly obtained resource), then abort these steps.
    4. <a>Create a CSS style sheet</a> with the following properties:
        : <a>type</a>
        :: <code>text/css</code>

        : <a>location</a>
        :: The <a>resulting absolute URL</a> determined during the <a>obtain</a> algorithm.
            <p class="note">This is before any redirects get applied.</p>

        : <a>owner node</a>
        :: <var>element</var>

        : <a>media</a>
        :: The <code>media</code> attribute of <var>element</var>.
            <p class="note">
              This is a reference to the (possibly absent at this time) attribute, rather than a copy
              of the attribute's current value. The CSSOM specification defines what happens  when the
              attribute is dynamically set, changed, or removed.
            </p>

        : <a>title</a>
        :: The <code>title</code> attribute of <var>element</var>.
            <p class="note">
              This is similarly a reference to the attribute, rather than a copy of the attribute's
              current value.
            </p>

        : <a>alternate flag</a>
        :: Set if <a>the link is an alternative stylesheet</a>; unset otherwise.

        : <a>origin-clean flag</a>
        :: Set if the resource is <a>CORS-same-origin</a>; unset otherwise.

        : <a>parent CSS style sheet</a>
        : <a>owner CSS rule</a>
        :: null

        : <a>disabled flag</a>
        :: Left at its default value.

        : <a>CSS rules</a>
        :: Left uninitialized.

        The CSS <a>environment encoding</a> is the result of running the following steps: [[!CSS-SYNTAX-3]]

        1. If the element has a <code>charset</code> attribute, <a>get an encoding</a> from that
            attribute's value. If that succeeds, return the resulting encoding and abort these steps.
            [[!ENCODING]]
        2. Otherwise, return the <a>document's character encoding</a>. [[!DOM]]
  </div>

<h5 id="link-type-tag">Link type "<dfn><code>tag</code></dfn>"</h5>

  The <code>tag</code> keyword may be used with <code>a</code> and
  <code>area</code> elements. This keyword creates a <a>hyperlink</a>.

  The <code>tag</code> keyword indicates that the <em>tag</em> that the
  referenced document represents applies to the current document.

  <p class="note">
    Since it indicates that the tag <em>applies to the current document</em>, it would
  be inappropriate to use this keyword in the markup of a <a>tag cloud</a>, which
  lists the popular tags across a set of pages.
  </p>

  <div class="example">
    This document is about some gems, and so it is <i>tagged</i> with
    "<code>http://en.wikipedia.org/wiki/Gemstone</code>" to unambiguously categorize it as applying
    to the "jewel" kind of gems, and not to, say, the towns in the US, the Ruby package format, or
    the Swiss locomotive class:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;html&gt;
        &lt;head&gt;
        &lt;title&gt;My Precious&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
        &lt;header&gt;&lt;h1&gt;My precious&lt;/h1&gt; &lt;p&gt;Summer 2012&lt;/p&gt;&lt;/header&gt;
        &lt;p&gt;Recently I managed to dispose of a red gem that had been
        bothering me. I now have a much nicer blue sapphire.&lt;/p&gt;
        &lt;p&gt;The red gem had been found in a bauxite stone while I was digging
        out the office level, but nobody was willing to haul it away. The
        same red gem stayed there for literally years.&lt;/p&gt;
        &lt;footer&gt;
          Tags: &lt;a rel=tag href="http://en.wikipedia.org/wiki/Gemstone"&gt;Gemstone&lt;/a&gt;
        &lt;/footer&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>
  </div>

  <div class="example">
    In <em>this</em> document, there are two articles. The "<code>tag</code>" link, however, applies
    to the whole page (and would do so wherever it was placed, including if it was within the
    <code>article</code> elements).

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;html&gt;
        &lt;head&gt;
        &lt;title&gt;Gem 4/4&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
        &lt;article&gt;
          &lt;h1&gt;801: Steinbock&lt;/h1&gt;
          &lt;p&gt;The number 801 Gem 4/4 electro-diesel has an ibex and was rebuilt in 2002.&lt;/p&gt;
        &lt;/article&gt;
        &lt;article&gt;
          &lt;h1&gt;802: Murmeltier&lt;/h1&gt;
          &lt;figure&gt;
          &lt;img src="http://upload.wikimedia.org/wikipedia/commons/b/b0/Trains_de_la_Bernina_en_hiver_2.jpg"
                alt="The 802 was red with pantographs and tall vents on the side."&gt;
          &lt;figcaption&gt;The 802 in the 1980s, above Lago Bianco.&lt;/figcaption&gt;
          &lt;/figure&gt;
          &lt;p&gt;The number 802 Gem 4/4 electro-diesel has a marmot and was rebuilt in 2003.&lt;/p&gt;
        &lt;/article&gt;
        &lt;p class="topic"&gt;&lt;a rel=tag href="http://en.wikipedia.org/wiki/Rhaetian_Railway_Gem_4/4"&gt;Gem 4/4&lt;/a&gt;&lt;/p&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>
  </div>

<h5 id="sequential-link-types">Sequential link types</h5>

  Some documents form part of a sequence of documents.

  A sequence of documents is one where each document can have a <em>previous sibling</em> and a
  <em>next sibling</em>. A document with no previous sibling is the start of its sequence, a
  document with no next sibling is the end of its sequence.

  A document may be part of multiple sequences.

<h6 id="link-type-next">Link type "<dfn><code>next</code></dfn>"</h6>

  The <code>next</code> keyword may be used with <code>link</code>,
  <code>a</code>, and <code>area</code> elements. This keyword creates a <a>hyperlink</a>.

  The <code>next</code> keyword indicates that the document is part of a
  sequence, and that the link is leading to the document that is the next logical document in the
  sequence.

<h6 id="link-type-prev">Link type "<dfn><code>prev</code></dfn>"</h6>

  The <code>prev</code> keyword may be used with <code>link</code>,
  <code>a</code>, and <code>area</code> elements. This keyword creates a <a>hyperlink</a>.

  The <code>prev</code> keyword indicates that the document is part of a
  sequence, and that the link is leading to the document that is the previous logical document in
  the sequence.

  <div class="impl">
  <strong>Synonyms</strong>: For historical reasons, user agents must also treat the keyword
  "<code>previous</code>" like the <code>prev</code> keyword.
  </div>

<h5 id="other-link-types">Other link types</h5>

  <dfn>Extensions to the predefined set of link types</dfn> may be registered in the
  <a>microformats wiki existing-rel-values page</a>. [[!MFREL]]

  Anyone is free to edit the <a>microformats wiki existing-rel-values page</a> at
  any time to add a type. Extension types must be specified with the following information:

  <dl>

    <dt>Keyword</dt>

    <dd>

    The actual value being defined. The value should not be confusingly similar to any other
    defined value (e.g. differing only in case).

    If the value contains a U+003A COLON character (:), it must also be an <a>absolute
    URL</a>.

    </dd>

    <dt>Effect on... <code>link</code></dt>

    <dd>

    One of the following:

    <dl>

      <dt>Not allowed</dt>

      <dd>The keyword must not be specified on <code>link</code> elements.</dd>

      <dt>Hyperlink</dt>

      <dd>The keyword may be specified on a <code>link</code> element; it creates a
      <a>hyperlink</a>.</dd>

      <dt>External Resource</dt>

      <dd>The keyword may be specified on a <code>link</code> element; it creates an <a>external
      resource link</a>.</dd>

    </dl>

    </dd>

    <dt>Effect on... <code>a</code> and <code>area</code></dt>

    <dd>

    One of the following:

    <dl>

      <dt>Not allowed</dt>

      <dd>The keyword must not be specified on <code>a</code> and <code>area</code> elements.</dd>

      <dt>Hyperlink</dt>

      <dd>The keyword may be specified on <code>a</code> and <code>area</code> elements; it creates a
      <a>hyperlink</a>.</dd>

      <dt>External Resource</dt>

      <dd>The keyword may be specified on <code>a</code> and <code>area</code> elements; it creates
      an <a>external resource link</a>.</dd>

      <dt>Hyperlink Annotation</dt>

      <dd>The keyword may be specified on <code>a</code> and <code>area</code> elements; it <a>annotates</a> other <a>hyperlinks</a>
      created by the element.</dd>

    </dl>

    </dd>

    <dt>Brief description</dt>

    <dd>A short non-normative description of what the keyword's meaning is.</dd>

    <dt>Specification</dt>

    <dd>A link to a more detailed description of the keyword's semantics and requirements. It
    could be another page on the Wiki, or a link to an external page.</dd>

    <dt>Synonyms</dt>

    <dd>A list of other keyword values that have exactly the same processing requirements. Authors
    should not use the values defined to be synonyms, they are only intended to allow user agents to
    support legacy content. Anyone may remove synonyms that are not used in practice; only names that
    need to be processed as synonyms for compatibility with legacy content are to be registered in
    this way.</dd>

    <dt>Status</dt>

    <dd>

    One of the following:

    <dl>

      <dt>Proposed</dt>

      <dd>The keyword has not received wide peer review and approval. Someone has proposed it and is,
      or soon will be, using it.</dd>

      <dt>Ratified</dt>

      <dd>The keyword has received wide peer review and approval. It has a specification that
      unambiguously defines how to handle pages that use the keyword, including when they use it in
      incorrect ways.</dd>

      <dt>Discontinued</dt>

      <dd>The keyword has received wide peer review and it has been found wanting. Existing pages are
      using this keyword, but new pages should avoid it. The "brief description" and "specification"
      entries will give details of what authors should use instead, if anything.</dd>

    </dl>

    If a keyword is found to be redundant with existing values, it should be removed and listed
    as a synonym for the existing value.

    If a keyword is registered in the "proposed" state for a period of a month or more without
    being used or specified, then it may be removed from the registry.

    If a keyword is added with the "proposed" status and found to be redundant with existing
    values, it should be removed and listed as a synonym for the existing value. If a keyword is
    added with the "proposed" status and found to be harmful, then it should be changed to
    "discontinued" status.

    Anyone can change the status at any time, but should only do so in accordance with the
    definitions above.

    </dd>

  </dl>

  <div class="impl">

  Conformance checkers may use the information given on the <a>microformats wiki existing-rel-values page</a> to
  establish if a value is allowed or not: values defined in this
  specification or marked as "proposed" or "ratified" must be accepted
  when used on the elements for which they apply as described in the
  "Effect on..." field, whereas values marked as "discontinued" or
  values not containing a U+003A COLON character but not listed in
  either this specification or on the aforementioned page must be
  reported as invalid. The remaining values must be accepted as valid
  if they are absolute URLs containing US-ASCII characters only and
  rejected otherwise. Conformance checkers may cache this
  information (e.g. for performance reasons or to avoid the use of
  unreliable network connectivity).

  <p class="note">
    Note: Even URL-valued link types are compared
  ASCII-case-insensitively. Validators might choose to warn about
  characters U+0041 (LATIN CAPITAL LETTER A) through
  U+005A (LATIN CAPITAL LETTER Z) (inclusive) in the pre-case-folded
  form of link types that contain a colon.
  </p>

  When an author uses a new type not defined by either this specification or the Wiki page,
  conformance checkers should offer to add the value to the Wiki, with the details described above,
  with the "proposed" status.

  </div>

  Types defined as extensions in the <a>microformats
  wiki existing-rel-values page</a> with the status "proposed" or "ratified" may be used with the
  <code>rel</code> attribute on <code>link</code>, <code>a</code>, and <code>area</code>
  elements in accordance to the "Effect on..." field. [[!MFREL]]

<h3 id="tabular-data">Tabular data</h3>

<h4 id="the-table-element">The <dfn><code>table</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>In this order: optionally a <code>caption</code> element,
    followed by zero or more <code>colgroup</code> elements, followed
    optionally by a <code>thead</code> element, followed optionally by
    a <code>tfoot</code> element, followed by either zero or more
    <code>tbody</code> elements or one or more <code>tr</code>
    elements, followed optionally by a <code>tfoot</code> element (but
    there can only be one <code>tfoot</code> element child in
    total), optionally intermixed with one or more <a>script-supporting elements</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>border</code></dd>
    <dd><code>sortable</code> - Enables a sorting interface for the table</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLTableElement : HTMLElement {
  attribute HTMLTableCaptionElement? caption;
  HTMLElement createCaption();
  void deleteCaption();
  attribute HTMLTableSectionElement? tHead;
  HTMLElement createTHead();
  void deleteTHead();
  attribute HTMLTableSectionElement? tFoot;
  HTMLElement createTFoot();
  void deleteTFoot();
  [SameObject] readonly attribute HTMLCollection tBodies;
  HTMLElement createTBody();
  [SameObject] readonly attribute HTMLCollection rows;
  HTMLElement insertRow(optional long index = -1);
  void deleteRow(long index);
  attribute boolean sortable;
  void stopSorting();
};
</pre>
    </dd>
  </dl>

  The <code>table</code> element <a>represents</a> data with more than one dimension, in
  the form of a <a>table</a>.

  <span class="impl">The <code>table</code> element takes part in the <a>table
  model</a>.</span> Tables have rows, columns, and cells given by their descendants. The rows and
  columns form a grid; a table's cells must completely cover that grid without overlap.

  <div class="impl">

  <p class="note">
    Precise rules for determining whether this conformance requirement is met are
  described in the description of the <a>table model</a>.
  </p>

  </div>

  Authors are encouraged to provide information describing how to interpret complex tables.
  Guidance on how to <a>provide such information</a> is given
  below.

  Tables should not be used as layout aids.

  Historically, many Web authors have tables in HTML as a way to
  control their page layout making it difficult to extract tabular
  data from such documents.

  In particular, users of accessibility tools, like screen readers,
  are likely to find it very difficult to navigate pages with tables
  used for layout.

  If a table is to be used for layout it must be marked with the
  attribute <a><code>role="presentation"</code></a> for a
  user agent to properly represent the table to an assistive technology and to properly convey the
  intent of the author to tools that wish to extract tabular data from
  the document.

  <p class="note">
    There are a variety of alternatives to using HTML
  tables for layout, primarily using CSS positioning and the CSS table
  model. [[!CSS-2015]]
  </p>

  The <dfn><code>border</code></dfn>
  attribute may be specified on a <code>table</code> element to
  explicitly indicate that the <code>table</code> element is not being
  used for layout purposes. If specified, the attribute's value must
  either be the empty string or the value "<code>1</code>".
  The attribute is used by certain user agents as an indication that
  borders should be drawn around cells of the table.

  <div class="impl">

  <hr />

  Tables can be complicated to understand and navigate. To help
  users with this, user agents should clearly delineate cells in a
  table from each other, unless the user agent has classified the
  table as a
  layout table.
  </div>

  <p class="note">
    Authors <span class="impl">and implementors</span>
  are encouraged to consider using some of the <a>table design techniques</a>
  described below to make tables easier to navigate for users.
  </p>

  <div class="impl">

  User agents, especially those that do table analysis on arbitrary content, are encouraged to
  find heuristics to determine which tables actually contain data and which are merely being used
  for layout. This specification does not define a precise heuristic, but the following are
  suggested as possible indicators:

  <table>
    <thead>
    <tr>
      <th>Feature
      </th><th>Indication
    </th></tr></thead><tbody>
    <tr>
      <td>The use of the <code>role</code> attribute with the value <code>presentation</code>
      </td><td>Probably a layout table
    </td></tr><tr>
      <td>The use of the non-conforming <code>border</code> attribute with the non-conforming value 0
      </td><td>Probably a layout table
    </td></tr><tr>
      <td>The use of the non-conforming <code>cellspacing</code> and
      <code>cellpadding</code> attributes with the value 0
      </td><td>Probably a layout table
    </td></tr></tbody><tbody>
    <tr>
      <td>The use of <code>caption</code>, <code>thead</code>, or <code>th</code> elements
      </td><td>Probably a non-layout table
    </td></tr><tr>
      <td>The use of the <code>headers</code> and <code>scope</code> attributes
      </td><td>Probably a non-layout table
    </td></tr><tr>
      <td>The use of the non-conforming <code>border</code> attribute with a value other than 0
      </td><td>Probably a non-layout table
    </td></tr><tr>
      <td>Explicit visible borders set using CSS
      </td><td>Probably a non-layout table
    </td></tr></tbody><tbody>
    <tr>
      <td>The use of the <code>summary</code> attribute
      </td><td>Not a good indicator (both layout and non-layout tables have historically been given this attribute)
  </td></tr></tbody></table>

  <p class="note">
    It is quite possible that the above suggestions are wrong. Implementors are urged
  to provide feedback elaborating on their experiences with trying to create a layout table
  detection heuristic.
  </p>

  If a <code>table</code> element has a (non-conforming) <code>summary</code> attribute, and the user agent has not classified the
  table as a layout table, the user agent may report the contents of that attribute to the user.

  </div>

  <hr />

  The <code>sortable</code> attribute is used in the <a>table
  sorting model</a>.

  <hr />

  <dl class="domintro">

    <dt><var>table</var> . <code>caption</code> [ = <var>value</var> ]</dt>
    <dd>

    Returns the table's <code>caption</code> element.

    Can be set, to replace the <code>caption</code> element.

    </dd>

    <dt><var>caption</var> = <var>table</var> . <code>createCaption</code>()</dt>
    <dd>

    Ensures the table has a <code>caption</code> element, and returns it.

    </dd>

    <dt><var>table</var> . <code>deleteCaption</code>()</dt>
    <dd>

    Ensures the table does not have a <code>caption</code> element.

    </dd>

    <dt><var>table</var> . <code>tHead</code> [ = <var>value</var> ]</dt>
    <dd>

    Returns the table's <code>thead</code> element.

    Can be set, to replace the <code>thead</code> element. If the new value is not a
    <code>thead</code> element, throws a <code>HierarchyRequestError</code> exception.

    </dd>

    <dt><var>thead</var> = <var>table</var> . <code>createTHead</code>()</dt>
    <dd>

    Ensures the table has a <code>thead</code> element, and returns it.

    </dd>

    <dt><var>table</var> . <code>deleteTHead</code>()</dt>
    <dd>

    Ensures the table does not have a <code>thead</code> element.

    </dd>

    <dt><var>table</var> . <code>tFoot</code> [ = <var>value</var> ]</dt>
    <dd>

    Returns the table's <code>tfoot</code> element.

    Can be set, to replace the <code>tfoot</code> element. If the new value is not a
    <code>tfoot</code> element, throws a <code>HierarchyRequestError</code> exception.

    </dd>

    <dt><var>tfoot</var> = <var>table</var> . <code>createTFoot</code>()</dt>
    <dd>

    Ensures the table has a <code>tfoot</code> element, and returns it.

    </dd>

    <dt><var>table</var> . <code>deleteTFoot</code>()</dt>
    <dd>

    Ensures the table does not have a <code>tfoot</code> element.

    </dd>

    <dt><var>table</var> . <code>tBodies</code></dt>
    <dd>

    Returns an <code>HTMLCollection</code> of the <code>tbody</code> elements of the table.

    </dd>

    <dt><var>tbody</var> = <var>table</var> . <code>createTBody</code>()</dt>
    <dd>

    Creates a <code>tbody</code> element, inserts it into the table, and returns it.

    </dd>

    <dt><var>table</var> . <code>rows</code></dt>
    <dd>

    Returns an <code>HTMLCollection</code> of the <code>tr</code> elements of the table.

    </dd>

    <dt><var>tr</var> = <var>table</var> . <code>insertRow</code>( [ <var>index</var> ] )</dt>
    <dd>

    Creates a <code>tr</code> element, along with a <code>tbody</code> if required, inserts them
    into the table at the position given by the argument, and returns the <code>tr</code>.

    The position is relative to the rows in the table. The index -1, which is the default
    if the argument is omitted, is equivalent to inserting at the end of the table.

    If the given position is less than -1 or greater than the number of rows, throws an
    <code>IndexSizeError</code> exception.

    </dd>

    <dt><var>table</var> . <code>deleteRow</code>(<var>index</var>)</dt>
    <dd>

    Removes the <code>tr</code> element with the given position in the table.

    The position is relative to the rows in the table. The index -1 is equivalent to
    deleting the last row of the table.

    If the given position is less than -1 or greater than the index of the last row, or if
    there are no rows, throws an <code>IndexSizeError</code> exception.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>caption</code></dfn> IDL attribute must return, on
  getting, the first <code>caption</code> element child of the <code>table</code> element, if any,
  or null otherwise. On setting, the first <code>caption</code> element child of the
  <code>table</code> element, if any, must be removed, and the new value, if not null, must be
  inserted as the first node of the <code>table</code> element.

  The <dfn><code>createCaption()</code></dfn> method must return
  the first <code>caption</code> element child of the <code>table</code> element, if any; otherwise
  a new <code>caption</code> element must be created, inserted as the first node of the
  <code>table</code> element, and then returned.

  The <dfn><code>deleteCaption()</code></dfn> method must remove
  the first <code>caption</code> element child of the <code>table</code> element, if any.

  The <dfn><code>tHead</code></dfn> IDL attribute must return, on
  getting, the first <code>thead</code> element child of the <code>table</code> element, if any, or
  null otherwise. On setting, if the new value is null or a <code>thead</code> element, the first
  <code>thead</code> element child of the <code>table</code> element, if any, must be removed, and
  the new value, if not null, must be inserted immediately before the first element in the
  <code>table</code> element that is neither a <code>caption</code> element nor a
  <code>colgroup</code> element, if any, or at the end of the table if there are no such elements.
  If the new value is neither null nor a <code>thead</code> element, then a
  <code>HierarchyRequestError</code> DOM exception must be thrown instead.

  The <dfn><code>createTHead()</code></dfn> method must return the
  first <code>thead</code> element child of the <code>table</code> element, if any; otherwise a new
  <code>thead</code> element must be created and inserted immediately before the first element in
  the <code>table</code> element that is neither a <code>caption</code> element nor a
  <code>colgroup</code> element, if any, or at the end of the table if there are no such elements,
  and then that new element must be returned.

  The <dfn><code>deleteTHead()</code></dfn> method must remove the
  first <code>thead</code> element child of the <code>table</code> element, if any.

  The <dfn><code>tFoot</code></dfn> IDL attribute must return, on
  getting, the first <code>tfoot</code> element child of the <code>table</code> element, if any, or
  null otherwise. On setting, if the new value is null or a <code>tfoot</code> element, the first
  <code>tfoot</code> element child of the <code>table</code> element, if any, must be removed, and
  the new value, if not null, must be inserted immediately before the first element in the
  <code>table</code> element that is neither a <code>caption</code> element, a <code>colgroup</code>
  element, nor a <code>thead</code> element, if any, or at the end of the table if there are no such
  elements. If the new value is neither null nor a <code>tfoot</code> element, then a
  <code>HierarchyRequestError</code> DOM exception must be thrown instead.

  The <dfn><code>createTFoot()</code></dfn> method must return the
  first <code>tfoot</code> element child of the <code>table</code> element, if any; otherwise a new
  <code>tfoot</code> element must be created and inserted immediately before the first element in
  the <code>table</code> element that is neither a <code>caption</code> element, a
  <code>colgroup</code> element, nor a <code>thead</code> element, if any, or at the end of the
  table if there are no such elements, and then that new element must be returned.

  The <dfn><code>deleteTFoot()</code></dfn> method must remove the
  first <code>tfoot</code> element child of the <code>table</code> element, if any.

  The <dfn><code>tBodies</code></dfn> attribute must return an
  <code>HTMLCollection</code> rooted at the <code>table</code> node, whose filter matches only
  <code>tbody</code> elements that are children of the <code>table</code> element.

  The <dfn><code>createTBody()</code></dfn> method must create a
  new <code>tbody</code> element, insert it immediately after the last <code>tbody</code> element
  child in the <code>table</code> element, if any, or at the end of the <code>table</code> element
  if the <code>table</code> element has no <code>tbody</code> element children, and then must return
  the new <code>tbody</code> element.

  The <dfn><code>rows</code></dfn> attribute must return an
  <code>HTMLCollection</code> rooted at the <code>table</code> node, whose filter matches only
  <code>tr</code> elements that are either children of the <code>table</code> element, or children
  of <code>thead</code>, <code>tbody</code>, or <code>tfoot</code> elements that are themselves
  children of the <code>table</code> element. The elements in the collection must be ordered such
  that those elements whose parent is a <code>thead</code> are included first, in <a>tree order</a>,
  followed by those elements whose parent is either a <code>table</code> or <code>tbody</code>
  element, again in <a>tree order</a>, followed finally by those elements whose parent is a
  <code>tfoot</code> element, still in <a>tree order</a>.

  The behavior of the <dfn><code>insertRow(<var>index</var>)</code></dfn> method depends on the state of the table. When it is called,
  the method must act as required by the first item in the following list of conditions that
  describes the state of the table and the <var>index</var> argument:

  <dl class="switch">

    <dt>If <var>index</var> is less than -1 or greater than the number of elements
    in <code>rows</code> collection:</dt>

    <dd>The method must throw an <code>IndexSizeError</code> exception.</dd>

    <dt>If the <code>rows</code> collection has zero elements in it, and the
    <code>table</code> has no <code>tbody</code> elements in it:</dt>

    <dd>The method must create a <code>tbody</code> element, then create a <code>tr</code> element,
    then append the <code>tr</code> element to the <code>tbody</code> element, then append the
    <code>tbody</code> element to the <code>table</code> element, and finally return the
    <code>tr</code> element.</dd>

    <dt>If the <code>rows</code> collection has zero elements in it:</dt>

    <dd>The method must create a <code>tr</code> element, append it to the last <code>tbody</code>
    element in the table, and return the <code>tr</code> element.</dd>

    <dt>If <var>index</var> is -1 or equal to the number of items in <code>rows</code> collection:</dt>

    <dd>The method must create a <code>tr</code> element, and append it to the parent of the last
    <code>tr</code> element in the <code>rows</code> collection. Then, the
    newly created <code>tr</code> element must be returned.</dd>

    <dt>Otherwise:</dt>

    <dd>The method must create a <code>tr</code> element, insert it immediately before the <var>index</var>th <code>tr</code> element in the <code>rows</code>
    collection, in the same parent, and finally must return the newly created <code>tr</code>
    element.</dd>

  </dl>

  When the <dfn><code>deleteRow(<var>index</var>)</code></dfn> method is called, the user agent must run the following
  steps:

  <ol>

    <li>If <var>index</var> is equal to -1, then <var>index</var> must be
    set to the number of items in the <code>rows</code> collection, minus
    one.</li>

    <li>Now, if <var>index</var> is less than zero, or greater than or equal to the
    number of elements in the <code>rows</code> collection, the method must
    instead throw an <code>IndexSizeError</code> exception, and these steps must be aborted.</li>

    <li>Otherwise, the method must remove the <var>index</var>th element in the <code>rows</code> collection from its parent.

  </li></ol>

  The <code>stopSorting()</code> method is used in the <a>table
  sorting model</a>.

  The IDL attribute <dfn><code>sortable</code></dfn> must
  <a>reflect</a> the <code>sortable</code> content attribute.

  </div>

  <div class="example">
    Here is an example of a table being used to mark up a Sudoku puzzle. Observe the lack of
    headers, which are not necessary in such a table.

    <pre highlight="html">
&lt;section&gt;
  &lt;style scoped&gt;
  table { border-collapse: collapse; border: solid thick; }
  colgroup, tbody { border: solid medium; }
  td { border: solid thin; height: 1.4em; width: 1.4em; text-align: center; padding: 0; }
  &lt;/style&gt;
  &lt;h1&gt;Today's Sudoku&lt;/h1&gt;
  &lt;table&gt;
  &lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;
  &lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;
  &lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;
  &lt;tbody&gt;
    &lt;tr&gt; &lt;td&gt; 1 &lt;td&gt;   &lt;td&gt; 3 &lt;td&gt; 6 &lt;td&gt;   &lt;td&gt; 4 &lt;td&gt; 7 &lt;td&gt;   &lt;td&gt; 9
    &lt;tr&gt; &lt;td&gt;   &lt;td&gt; 2 &lt;td&gt;   &lt;td&gt;   &lt;td&gt; 9 &lt;td&gt;   &lt;td&gt;   &lt;td&gt; 1 &lt;td&gt;
    &lt;tr&gt; &lt;td&gt; 7 &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt; 6
  &lt;tbody&gt;
    &lt;tr&gt; &lt;td&gt; 2 &lt;td&gt;   &lt;td&gt; 4 &lt;td&gt;   &lt;td&gt; 3 &lt;td&gt;   &lt;td&gt; 9 &lt;td&gt;   &lt;td&gt; 8
    &lt;tr&gt; &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt;
    &lt;tr&gt; &lt;td&gt; 5 &lt;td&gt;   &lt;td&gt;   &lt;td&gt; 9 &lt;td&gt;   &lt;td&gt; 7 &lt;td&gt;   &lt;td&gt;   &lt;td&gt; 1
  &lt;tbody&gt;
    &lt;tr&gt; &lt;td&gt; 6 &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt; 5 &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt; 2
    &lt;tr&gt; &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt; 7 &lt;td&gt;   &lt;td&gt;   &lt;td&gt;   &lt;td&gt;
    &lt;tr&gt; &lt;td&gt; 9 &lt;td&gt;   &lt;td&gt;   &lt;td&gt; 8 &lt;td&gt;   &lt;td&gt; 2 &lt;td&gt;   &lt;td&gt;   &lt;td&gt; 5
  &lt;/table&gt;
&lt;/section&gt;
    </pre>

  </div>

<h5 id="techniques-for-describing-tables">Techniques for describing tables</h5>

  For tables that consist of more than just a grid of cells with headers
  in the first row and headers in the first column, and for any table in general where the reader
  might have difficulty understanding the content, authors should include explanatory information
  introducing the table. This information is useful for all users, but is especially useful for
  users who cannot see the table, e.g. users of screen readers.

  Such explanatory information should introduce the purpose of the table, outline its basic cell
  structure, highlight any trends or patterns, and generally teach the user how to use the
  table.

  For instance, the following table:

  <table>
    <caption>Characteristics with positive and negative sides</caption>
    <thead>
    <tr>
      <th id="n"> Negative
      </th><th> Characteristic
      </th><th> Positive
    </th></tr></thead><tbody>
    <tr>
      <td headers="n r1"> Sad
      </td><th id="r1"> Mood
      </th><td> Happy
    </td></tr><tr>
      <td headers="n r2"> Failing
      </td><th id="r2"> Grade
      </th><td> Passing
  </td></tr></tbody></table>

  ...might benefit from a description explaining the way the table is laid out, something like
  "Characteristics are given in the second column, with the negative side in the left column and the
  positive side in the right column".

  There are a variety of ways to include this information, such as:

  <dl>

    <dt>In prose, surrounding the table</dt>

    <dd>
    <div class="example"><pre highlight="html">
&lt;p id="summary"&gt;In the following table, characteristics are
given in the second column, with the negative side in the left column and the positive
side in the right column.&lt;/p&gt;
&lt;table aria-describedby="summary"&gt;
  &lt;caption&gt;Characteristics with positive and negative sides&lt;/caption&gt;
  &lt;thead&gt;
  &lt;tr&gt;
    &lt;th id="n"&gt; Negative
    &lt;th&gt; Characteristic
    &lt;th&gt; Positive
  &lt;tbody&gt;
  &lt;tr&gt;
    &lt;td headers="n r1"&gt; Sad
    &lt;th id="r1"&gt; Mood
    &lt;td&gt; Happy
  &lt;tr&gt;
    &lt;td headers="n r2"&gt; Failing
    &lt;th id="r2"&gt; Grade
    &lt;td&gt; Passing
&lt;/table&gt;
    </pre></div>
    <p class="note">
    In the example above the
    <a>
    <code>aria-describedby</code></a> attribute is used to explicitly associate the information
    with the table for assistive technology users.
  </p>
    </dd>

    <dt>In the table's <code>caption</code></dt>

    <dd>
    <div class="example"><pre highlight="html">
&lt;table&gt;
<strong> &lt;caption&gt;
  &lt;strong&gt;Characteristics with positive and negative sides.&lt;/strong&gt;
  &lt;p&gt;Characteristics are given in the second column, with the
  negative side in the left column and the positive side in the right
  column.&lt;/p&gt;</strong>
  &lt;/caption&gt;
  &lt;thead&gt;
  &lt;tr&gt;
    &lt;th id="n"&gt; Negative
    &lt;th&gt; Characteristic
    &lt;th&gt; Positive
  &lt;tbody&gt;
  &lt;tr&gt;
    &lt;td headers="n r1"&gt; Sad
    &lt;th id="r1"&gt; Mood
    &lt;td&gt; Happy
  &lt;tr&gt;
    &lt;td headers="n r2"&gt; Failing
    &lt;th id="r2"&gt; Grade
    &lt;td&gt; Passing
&lt;/table&gt;
    </pre></div>
    </dd>

    <dt>In the table's <code>caption</code>, in a <code>details</code> element</dt>

    <dd>
    <div class="example"><pre highlight="html">
&lt;table&gt;
  &lt;caption&gt;
  &lt;strong&gt;Characteristics with positive and negative sides.&lt;/strong&gt;
<strong>  &lt;details&gt;
    &lt;summary&gt;Help&lt;/summary&gt;
    &lt;p&gt;Characteristics are given in the second column, with the
    negative side in the left column and the positive side in the right
    column.&lt;/p&gt;
  &lt;/details&gt;</strong>
  &lt;/caption&gt;
  &lt;thead&gt;
  &lt;tr&gt;
    &lt;th id="n"&gt; Negative
    &lt;th&gt; Characteristic
    &lt;th&gt; Positive
  &lt;tbody&gt;
  &lt;tr&gt;
    &lt;td headers="n r1"&gt; Sad
    &lt;th id="r1"&gt; Mood
    &lt;td&gt; Happy
  &lt;tr&gt;
    &lt;td headers="n r2"&gt; Failing
    &lt;th id="r2"&gt; Grade
    &lt;td&gt; Passing
&lt;/table&gt;
    </pre></div>
    </dd>

    <dt>Next to the table, in the same <code>figure</code></dt>

    <dd>
    <div class="example"><pre highlight="html">
&lt;figure&gt;
  &lt;figcaption&gt;Characteristics with positive and negative sides&lt;/figcaption&gt;
<strong> &lt;p&gt;Characteristics are given in the second column, with the
  negative side in the left column and the positive side in the right
  column.&lt;/p&gt;</strong>
  &lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
    &lt;th id="n"&gt; Negative
    &lt;th&gt; Characteristic
    &lt;th&gt; Positive
  &lt;tbody&gt;
    &lt;tr&gt;
    &lt;td headers="n r1"&gt; Sad
    &lt;th id="r1"&gt; Mood
    &lt;td&gt; Happy
    &lt;tr&gt;
    &lt;td headers="n r2"&gt; Failing
    &lt;th id="r2"&gt; Grade
    &lt;td&gt; Passing
  &lt;/table&gt;
&lt;/figure&gt;
    </pre></div>
    </dd>

    <dt>Next to the table, in a <code>figure</code>'s <code>figcaption</code></dt>

    <dd>
    <div class="example"><pre highlight="html">
&lt;figure&gt;
  &lt;figcaption&gt;
  &lt;strong&gt;Characteristics with positive and negative sides&lt;/strong&gt;
<strong>  &lt;p&gt;Characteristics are given in the second column, with the
  negative side in the left column and the positive side in the right
  column.&lt;/p&gt;</strong>
  &lt;/figcaption&gt;
  &lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
    &lt;th id="n"&gt; Negative
    &lt;th&gt; Characteristic
    &lt;th&gt; Positive
  &lt;tbody&gt;
    &lt;tr&gt;
    &lt;td headers="n r1"&gt; Sad
    &lt;th id="r1"&gt; Mood
    &lt;td&gt; Happy
    &lt;tr&gt;
    &lt;td headers="n r2"&gt; Failing
    &lt;th id="r2"&gt; Grade
    &lt;td&gt; Passing
  &lt;/table&gt;
&lt;/figure&gt;
    </pre></div>
    </dd>

  </dl>

  Authors may also use other techniques, or combinations of the above techniques, as
  appropriate.

  The best option, of course, rather than writing a description explaining the way the table is
  laid out, is to adjust the table such that no explanation is needed.

  <div class="example">
    In the case of the table used in the examples above, a simple rearrangement of the table so
    that the headers are on the top and left sides removes the need for an explanation as well as
    removing the need for the use of <code>headers</code> attributes:

    <pre highlight="html">
&lt;table&gt;
  &lt;caption&gt;Characteristics with positive and negative sides&lt;/caption&gt;
  &lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt; Characteristic
    &lt;th&gt; Negative
    &lt;th&gt; Positive
  &lt;tbody&gt;
  &lt;tr&gt;
    &lt;th&gt; Mood
    &lt;td&gt; Sad
    &lt;td&gt; Happy
  &lt;tr&gt;
    &lt;th&gt; Grade
    &lt;td&gt; Failing
    &lt;td&gt; Passing
&lt;/table&gt;
    </pre>

  </div>

<h5 id="techniques-for-table-design">Techniques for table design</h5>

  Good table design is key to making tables more readable and usable.

  In visual media, providing column and row borders and alternating row backgrounds can be very
  effective to make complicated tables more readable.

  For tables with large volumes of numeric content, using monospaced fonts can help users see
  patterns, especially in situations where a user agent does not render the borders. (Unfortunately,
  for historical reasons, not rendering borders on tables is a common default.)

  In speech media, table cells can be distinguished by reporting the corresponding headers before
  reading the cell's contents, and by allowing users to navigate the table in a grid fashion, rather
  than serializing the entire contents of the table in source order.

  Authors are encouraged to use CSS to achieve these effects.

  <div class="impl">

  User agents are encouraged to render tables using these techniques whenever the page does not
  use CSS and the table is not classified as a layout table.

  </div>

<h4 id="the-caption-element">The <dfn><code>caption</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As the first element child of a <code>table</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>, but with no descendant <code>table</code> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLTableCaptionElement : HTMLElement {};
</pre>
    </dd>
  </dl>

  The <code>caption</code> element <a>represents</a> the title of the <code>table</code>
  that is its parent, if it has a parent and that is a <code>table</code> element.

  <div class="impl">

  The <code>caption</code> element takes part in the <a>table model</a>.

  </div>

  When a <code>table</code> element is the only content in a <code>figure</code> element other
  than the <code>figcaption</code>, the <code>caption</code> element should be omitted in favor of
  the <code>figcaption</code>.

  A caption can introduce context for a table, making it significantly easier to understand.

  <div class="example">
    Consider, for instance, the following table:

    <table class="dice-example">
    <tbody><tr> <th>   </th><th> 1 </th><th> 2 </th><th> 3 </th><th> 4 </th><th> 5 </th><th> 6
    </th></tr><tr> <th> 1 </th><td> 2 </td><td> 3 </td><td> 4 </td><td> 5 </td><td> 6 </td><td> 7
    </td></tr><tr> <th> 2 </th><td> 3 </td><td> 4 </td><td> 5 </td><td> 6 </td><td> 7 </td><td> 8
    </td></tr><tr> <th> 3 </th><td> 4 </td><td> 5 </td><td> 6 </td><td> 7 </td><td> 8 </td><td> 9
    </td></tr><tr> <th> 4 </th><td> 5 </td><td> 6 </td><td> 7 </td><td> 8 </td><td> 9 </td><td> 10
    </td></tr><tr> <th> 5 </th><td> 6 </td><td> 7 </td><td> 8 </td><td> 9 </td><td> 10 </td><td> 11
    </td></tr><tr> <th> 6 </th><td> 7 </td><td> 8 </td><td> 9 </td><td> 10 </td><td> 11 </td><td> 12
    </td></tr></tbody></table>

    In the abstract, this table is not clear. However, with a caption giving the table's number
    (for reference in the main prose) and explaining its use, it makes more sense:

    <pre highlight="html">
&lt;caption&gt;
&lt;p&gt;Table 1.
&lt;p&gt;This table shows the total score obtained from rolling two
six-sided dice. The first row represents the value of the first die,
the first column the value of the second die. The total is given in
the cell that corresponds to the values of the two dice.
&lt;/caption&gt;
    </pre>

    This provides the user with more context:

    <table class="dice-example">
    <caption>
      Table 1.
      This table shows the total score obtained from rolling two
      six-sided dice. The first row represents the value of the first
      die, the first column the value of the second die. The total is
      given in the cell that corresponds to the values of the two dice.
    </caption>
    <tbody><tr> <th>   </th><th> 1 </th><th> 2 </th><th> 3 </th><th> 4 </th><th> 5 </th><th> 6
    </th></tr><tr> <th> 1 </th><td> 2 </td><td> 3 </td><td> 4 </td><td> 5 </td><td> 6 </td><td> 7
    </td></tr><tr> <th> 2 </th><td> 3 </td><td> 4 </td><td> 5 </td><td> 6 </td><td> 7 </td><td> 8
    </td></tr><tr> <th> 3 </th><td> 4 </td><td> 5 </td><td> 6 </td><td> 7 </td><td> 8 </td><td> 9
    </td></tr><tr> <th> 4 </th><td> 5 </td><td> 6 </td><td> 7 </td><td> 8 </td><td> 9 </td><td> 10
    </td></tr><tr> <th> 5 </th><td> 6 </td><td> 7 </td><td> 8 </td><td> 9 </td><td> 10 </td><td> 11
    </td></tr><tr> <th> 6 </th><td> 7 </td><td> 8 </td><td> 9 </td><td> 10 </td><td> 11 </td><td> 12
    </td></tr></tbody></table>

  </div>

<h4 id="the-colgroup-element">The <dfn><code>colgroup</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>table</code> element, after any
    <code>caption</code> elements and before any <code>thead</code>,
    <code>tbody</code>, <code>tfoot</code>, and <code>tr</code>
    elements.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>If the <code>span</code> attribute is present: <a>Nothing</a>.</dd>
    <dd>If the <code>span</code> attribute is absent: Zero or more <code>col</code> and <code>template</code> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>span</code> - Number of columns spanned by the element</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>A <code>colgroup</code> element's <a>end tag</a> may be omitted if
    the <code>colgroup</code> element is not immediately followed by a <a>space character</a> or
    a <a>comment</a>. A <code>colgroup</code> element's
    <a>end tag</a> may be omitted if the <code>colgroup</code> element is not
    immediately followed by a <a>space character</a> or a <a>comment</a>.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLTableColElement : HTMLElement {
  attribute unsigned long span;
};
</pre>
    </dd>
  </dl>

  The <code>colgroup</code> element <a>represents</a> a <a>group</a> of one or more <a>columns</a> in the <code>table</code> that is its parent, if it has a
  parent and that is a <code>table</code> element.

  If the <code>colgroup</code> element contains no <code>col</code> elements, then the element
  may have a <dfn><code>span</code></dfn> content attribute specified,
  whose value must be a <a>valid non-negative integer</a> greater than zero.

  <div class="impl">

  The <code>colgroup</code> element and its <code>span</code>
  attribute take part in the <a>table model</a>.

  The <dfn><code>span</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name. The value must be <a>limited to
  only non-negative numbers greater than zero</a>.

  </div>

<h4 id="the-col-element">The <dfn><code>col</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>colgroup</code> element that doesn't have
    a <code>span</code> attribute.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>span</code></dd>

    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a>.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
    <code>HTMLTableColElement</code>, same as for
    <code>colgroup</code> elements. This interface defines one member,
    <code>span</code>.
    </dd>
  </dl>

  If a <code>col</code> element has a parent and that is a <code>colgroup</code> element that
  itself has a parent that is a <code>table</code> element, then the <code>col</code> element
  <a>represents</a> one or more <a>columns</a> in the <a>column group</a> represented by that <code>colgroup</code>.

  The element may have a <dfn><code>span</code></dfn> content attribute
  specified, whose value must be a <a>valid non-negative integer</a> greater than zero.

  <div class="impl">

  The <code>col</code> element and its <code>span</code> attribute take
  part in the <a>table model</a>.

  The <dfn><code>span</code></dfn> IDL attribute must <a>reflect</a>
  the content attribute of the same name. The value must be <a>limited to only non-negative
  numbers greater than zero</a>.

  </div>

<h4 id="the-tbody-element">The <dfn><code>tbody</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>table</code> element, after any
    <code>caption</code>, <code>colgroup</code>, and
    <code>thead</code> elements, but only if there are no
    <code>tr</code> elements that are children of the
    <code>table</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Zero or more <code>tr</code> and <a>script-supporting</a> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>A <code>tbody</code> element's <a>start tag</a> may be omitted
  if the first thing inside the <code>tbody</code> element is a <code>tr</code> element, and if the
  element is not immediately preceded by a <code>tbody</code>, <code>thead</code>, or
  <code>tfoot</code> element whose <a>end tag</a> has been omitted. (It
  can't be omitted if the element is empty.). A <code>tbody</code> element's
  <a>end tag</a> may be omitted if
  the <code>tbody</code> element is immediately followed by a <code>tbody</code> or
  <code>tfoot</code> element, or if there is no more content in the parent element.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
    <pre class="idl" data-highlight="webidl">interface HTMLTableSectionElement : HTMLElement {
  [SameObject] readonly attribute HTMLCollection rows;
  HTMLElement insertRow(optional long index = -1);
  void deleteRow(long index);
};
</pre>
    The <code>HTMLTableSectionElement</code> interface is also
    used for <code>thead</code> and <code>tfoot</code> elements.
    </dd>
  </dl>

  The <code>tbody</code> element <a>represents</a> a <a>block</a> of <a>rows</a> that consist of a
  body of data for the parent <code>table</code> element, if the <code>tbody</code> element has a
  parent and it is a <code>table</code>.

  <div class="impl">

  The <code>tbody</code> element takes part in the <a>table model</a>.

  </div>

  <dl class="domintro">

    <dt><var>tbody</var> . <code>rows</code></dt>
    <dd>

    Returns an <code>HTMLCollection</code> of the <code>tr</code> elements of the table
    section.

    </dd>

    <dt><var>tr</var> = <var>tbody</var> . <code>insertRow</code>( [ <var>index</var> ] )</dt>
    <dd>

    Creates a <code>tr</code> element, inserts it into the table section at the position given by
    the argument, and returns the <code>tr</code>.

    The position is relative to the rows in the table section. The index -1, which is the
    default if the argument is omitted, is equivalent to inserting at the end of the table
    section.

    If the given position is less than -1 or greater than the number of rows, throws an
    <code>IndexSizeError</code> exception.

    </dd>

    <dt><var>tbody</var> . <code>deleteRow</code>(<var>index</var>)</dt>
    <dd>

    Removes the <code>tr</code> element with the given position in the table section.

    The position is relative to the rows in the table section. The index -1 is equivalent
    to deleting the last row of the table section.

    If the given position is less than -1 or greater than the index of the last row, or if
    there are no rows, throws an <code>IndexSizeError</code> exception.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>rows</code></dfn> attribute must return an
  <code>HTMLCollection</code> rooted at the element, whose filter matches only <code>tr</code>
  elements that are children of the element.

  The <dfn><code>insertRow(<var>index</var>)</code></dfn>
  method must, when invoked on an element <var>table section</var>, act as follows:

  If <var>index</var> is less than -1 or greater than the number of elements in
  the <code>rows</code> collection, the method must throw an
  <code>IndexSizeError</code> exception.

  If <var>index</var> is -1 or equal to the number of items in the <code>rows</code> collection, the method must create a <code>tr</code> element,
  append it to the element <var>table section</var>, and return the newly created
  <code>tr</code> element.

  Otherwise, the method must create a <code>tr</code> element, insert it as a child of the <var>table section</var> element, immediately before the <var>index</var>th
  <code>tr</code> element in the <code>rows</code> collection, and finally
  must return the newly created <code>tr</code> element.

  The <dfn><code>deleteRow(<var>index</var>)</code></dfn> method
  must, when invoked, act as follows:

  If <var>index</var> is less than -1 or greater than the number of elements in
  the <code>rows</code> collection, the method must throw an
  <code>IndexSizeError</code> exception.

  If <var>index</var> is -1, remove the last element in the <code>rows</code> collection from its parent.

  Otherwise, remove the <var>index</var>th element in the <code>rows</code> collection from its parent.

  </div>

<h4 id="the-thead-element">The <dfn><code>thead</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>table</code> element, after any
    <code>caption</code>, and <code>colgroup</code>
    elements and before any <code>tbody</code>, <code>tfoot</code>, and
    <code>tr</code> elements, but only if there are no other
    <code>thead</code> elements that are children of the
    <code>table</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Zero or more <code>tr</code> and <a>script-supporting</a> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>A <code>thead</code> element's <a>end tag</a> may be omitted if
  the <code>thead</code> element is immediately followed by a <code>tbody</code> or
  <code>tfoot</code> element.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd><code>HTMLTableSectionElement</code>, as defined for
    <code>tbody</code> elements.</dd>
  </dl>

  The <code>thead</code> element <a>represents</a> the <a>block</a> of <a>rows</a> that consist of
  the column labels (headers) for the parent <code>table</code> element, if the <code>thead</code>
  element has a parent and it is a <code>table</code>.

  <div class="impl">

  The <code>thead</code> element takes part in the <a>table model</a>.

  </div>

  <div class="example">
    This example shows a <code>thead</code> element being used. Notice the use of both
    <code>th</code> and <code>td</code> elements in the <code>thead</code> element: the first row is
    the headers, and the second row is an explanation of how to fill in the table.

    <pre highlight="html">
      &lt;table&gt;
        &lt;caption&gt; School auction sign-up sheet &lt;/caption&gt;
      <strong> &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;&lt;label for=e1&gt;Name&lt;/label&gt;
          &lt;th&gt;&lt;label for=e2&gt;Product&lt;/label&gt;
          &lt;th&gt;&lt;label for=e3&gt;Picture&lt;/label&gt;
          &lt;th&gt;&lt;label for=e4&gt;Price&lt;/label&gt;
        &lt;tr&gt;
          &lt;td&gt;Your name here
          &lt;td&gt;What are you selling?
          &lt;td&gt;Link to a picture
          &lt;td&gt;Your reserve price
      </strong> &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Ms Danus
          &lt;td&gt;Doughnuts
          &lt;td&gt;&lt;img src="http://example.com/mydoughnuts.png" title="Doughnuts from Ms Danus"&gt;
          &lt;td&gt;$45
        &lt;tr&gt;
          &lt;td&gt;&lt;input id=e1 type=text name=who required form=f&gt;
          &lt;td&gt;&lt;input id=e2 type=text name=what required form=f&gt;
          &lt;td&gt;&lt;input id=e3 type=url name=pic form=f&gt;
          &lt;td&gt;&lt;input id=e4 type=number step=0.01 min=0 value=0 required form=f&gt;
      &lt;/table&gt;
      &lt;form id=f action="/auction.cgi"&gt;
        &lt;input type=button name=add value="Submit"&gt;
      &lt;/form&gt;
    </pre>

  </div>

<h4 id="the-tfoot-element">The <dfn><code>tfoot</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>table</code> element, after any
    <code>caption</code>, <code>colgroup</code>, and <code>thead</code>
    elements and before any <code>tbody</code> and <code>tr</code>
    elements, but only if there are no other <code>tfoot</code>
    elements that are children of the <code>table</code> element.</dd>
    <dd>As a child of a <code>table</code> element, after any
    <code>caption</code>, <code>colgroup</code>, <code>thead</code>,
    <code>tbody</code>, and <code>tr</code> elements, but only if there
    are no other <code>tfoot</code> elements that are children of the
    <code>table</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Zero or more <code>tr</code> and <a>script-supporting</a> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>A <code>tfoot</code> element's <a>end tag</a> may be omitted if
  the <code>tfoot</code> element is immediately followed by a <code>tbody</code> element, or if
  there is no more content in the parent element.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd><code>HTMLTableSectionElement</code>, as defined for
    <code>tbody</code> elements.</dd>
  </dl>

  The <code>tfoot</code> element <a>represents</a> the <a>block</a> of <a>rows</a> that consist of
  the column summaries (footers) for the parent <code>table</code> element, if the
  <code>tfoot</code> element has a parent and it is a <code>table</code>.

  <div class="impl">

  The <code>tfoot</code> element takes part in the <a>table
  model</a>.

  </div>

<h4 id="the-tr-element">The <dfn><code>tr</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>thead</code> element.</dd>
    <dd>As a child of a <code>tbody</code> element.</dd>
    <dd>As a child of a <code>tfoot</code> element.</dd>
    <dd>As a child of a <code>table</code> element, after any
    <code>caption</code>, <code>colgroup</code>, and <code>thead</code>
    elements, but only if there are no <code>tbody</code> elements that
    are children of the <code>table</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Zero or more <code>td</code>, <code>th</code>, and <a>script-supporting</a> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>A <code>tr</code> element's <a>end tag</a> may be omitted if the
  <code>tr</code> element is immediately followed by another <code>tr</code> element, or if there is
  no more content in the parent element.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
    <pre class="idl" data-highlight="webidl">interface HTMLTableRowElement : HTMLElement {
  readonly attribute long rowIndex;
  readonly attribute long sectionRowIndex;
  [SameObject] readonly attribute HTMLCollection cells;
  HTMLElement insertCell(optional long index = -1);
  void deleteCell(long index);
};
</pre>
    </dd>
  </dl>

  The <code>tr</code> element <a>represents</a> a <a>row</a> of
  <a>cells</a> in a <a>table</a>.

  <div class="impl">

  The <code>tr</code> element takes part in the <a>table model</a>.

  </div>

  <dl class="domintro">

    <dt><var>tr</var> . <code>rowIndex</code></dt>

    <dd>

    Returns the position of the row in the table's <code>rows</code>
    list.

    Returns -1 if the element isn't in a table.

    </dd>

    <dt><var>tr</var> . <code>sectionRowIndex</code></dt>

    <dd>

    Returns the position of the row in the table section's <code>rows</code> list.

    Returns -1 if the element isn't in a table section.

    </dd>

    <dt><var>tr</var> . <code>cells</code></dt>
    <dd>

    Returns an <code>HTMLCollection</code> of the <code>td</code> and <code>th</code> elements of
    the row.

    </dd>

    <dt><var>cell</var> = <var>tr</var> . <code>insertCell</code>( [ <var>index</var> ] )</dt>

    <dd>

    Creates a <code>td</code> element, inserts it into the table row at the position given by the
    argument, and returns the <code>td</code>.

    The position is relative to the cells in the row. The index -1, which is the default
    if the argument is omitted, is equivalent to inserting at the end of the row.

    If the given position is less than -1 or greater than the number of cells, throws an
    <code>IndexSizeError</code> exception.

    </dd>

    <dt><var>tr</var> . <code>deleteCell</code>(<var>index</var>)</dt>
    <dd>

    Removes the <code>td</code> or <code>th</code> element with the given position in the
    row.

    The position is relative to the cells in the row. The index -1 is equivalent to
    deleting the last cell of the row.

    If the given position is less than -1 or greater than the index of the last cell, or
    if there are no cells, throws an <code>IndexSizeError</code> exception.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>rowIndex</code></dfn> attribute must, if the element has
  a parent <code>table</code> element, or a parent <code>tbody</code>, <code>thead</code>, or
  <code>tfoot</code> element and a <em>grandparent</em> <code>table</code> element, return the index
  of the <code>tr</code> element in that <code>table</code> element's <code>rows</code> collection. If there is no such <code>table</code> element,
  then the attribute must return -1.

  The <dfn><code>sectionRowIndex</code></dfn> attribute must, if
  the element has a parent <code>table</code>, <code>tbody</code>, <code>thead</code>, or
  <code>tfoot</code> element, return the index of the <code>tr</code> element in the parent
  element's <code>rows</code> collection (for tables, that's the <code>HTMLTableElement.rows</code> collection; for table sections, that's the
  <code>HTMLTableRowElement.rows</code> collection). If there is no such
  parent element, then the attribute must return -1.

  The <dfn><code>cells</code></dfn> attribute must return an
  <code>HTMLCollection</code> rooted at the <code>tr</code> element, whose filter matches only
  <code>td</code> and <code>th</code> elements that are children of the <code>tr</code> element.

  The <dfn><code>insertCell(<var>index</var>)</code></dfn>
  method must act as follows:

  If <var>index</var> is less than -1 or greater than the number of elements in
  the <code>cells</code> collection, the method must throw an
  <code>IndexSizeError</code> exception.

  If <var>index</var> is equal to -1 or equal to the number of items in <code>cells</code> collection, the method must create a <code>td</code> element,
  append it to the <code>tr</code> element, and return the newly created <code>td</code>
  element.

  Otherwise, the method must create a <code>td</code> element, insert it as a child of the
  <code>tr</code> element, immediately before the <var>index</var>th <code>td</code> or
  <code>th</code> element in the <code>cells</code> collection, and finally
  must return the newly created <code>td</code> element.

  The <dfn><code>deleteCell(<var>index</var>)</code></dfn>
  method must act as follows:

  If <var>index</var> is less than -1 or greater than the number of elements in
  the <code>cells</code> collection, the method must throw an
  <code>IndexSizeError</code> exception.

  If <var>index</var> is -1, remove the last element in the <code>cells</code> collection from its parent.

  Otherwise, remove the <var>index</var>th element in the <code>cells</code> collection from its parent.

  </div>

<h4 id="the-td-element">The <dfn><code>td</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Sectioning root</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>tr</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>colspan</code> - Number of columns that the cell is to span</dd>
    <dd><code>rowspan</code> - Number of rows that the cell is to span</dd>
    <dd><code>headers</code> - The header cells for this cell</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>A <code>td</code> element's <a>end tag</a> may be omitted if the
  <code>td</code> element is immediately followed by a <code>td</code> or <code>th</code> element,
  or if there is no more content in the parent element.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>

    <dt><a>DOM interface</a>:</dt>
    <dd>
    <pre class="idl" data-highlight="webidl">interface HTMLTableDataCellElement : HTMLTableCellElement {};
</pre>
    </dd>
  </dl>

  The <code>td</code> element <a>represents</a> a data <a>cell</a> in a table.

  <div class="impl">

  The <code>td</code> element and its <code>colspan</code>, <code>rowspan</code>, and <code>headers</code>
  attributes take part in the <a>table model</a>.

  User agents, especially in non-visual environments or where displaying the table as a 2D grid
  is impractical, may give the user context for the cell when rendering the contents of a cell; for
  instance, giving its position in the <a>table model</a>, or listing the cell's header cells
  (as determined by the <a>algorithm for assigning header cells</a>). When a cell's header
  cells are being listed, user agents may use the value of <code>abbr</code>
  attributes on those header cells, if any, instead of the contents of the header cells
  themselves.

  </div>

<h4 id="the-th-element">The <dfn><code>th</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>If the <code>th</code> element is a <a>sorting interface <code>th</code> element</a>: <a>Interactive content</a>.</dd>
    <dd>Otherwise: None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>tr</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>, but with no <code>header</code>, <code>footer</code>, <a>sectioning content</a>, or <a>heading content</a> descendants, and if the <code>th</code> element is a <a>sorting interface <code>th</code> element</a>, no <a>interactive content</a> descendants.</dd>

    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>colspan</code> - Number of columns that the cell is to span</dd>
    <dd><code>rowspan</code> - Number of rows that the cell is to span</dd>
    <dd><code>headers</code> - The headers for this cell</dd>
    <dd><code>scope</code> - Specifies which cells the header cell applies to</dd>
    <dd><code>abbr</code> - Alternative label to use for the header cell when
    referencing the cell in other contexts</dd>
    <dd><code>sorted</code> - <a>Column sort direction</a> and
    <a>ordinality</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>A <code>th</code> element's <a>end tag</a> may be omitted if the
  <code>th</code> element is immediately followed by a <code>td</code> or <code>th</code> element,
  or if there is no more content in the parent element.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
    <pre class="idl" data-highlight="webidl">interface HTMLTableHeaderCellElement : HTMLTableCellElement {
  attribute DOMString scope;
  attribute DOMString abbr;
  attribute DOMString sorted;
  void sort();
};
</pre>
    </dd>
  </dl>

  The <code>th</code> element <a>represents</a> a header <a>cell</a> in a table.

  The <code>th</code> element may have a <dfn><code>scope</code></dfn>
  content attribute specified. The <code>scope</code> attribute is an
  <a>enumerated attribute</a> with five states, four of which have explicit keywords:

  <dl>

    <dt>The <dfn><code>row</code></dfn> keyword, which maps to the
    <i>row</i> state</dt>

    <dd>The <i>row</i> state means the header cell applies to some of the subsequent cells in the
    same row(s).</dd>

    <dt>The <dfn><code>col</code></dfn> keyword, which maps to the
    <i>column</i> state</dt>

    <dd>The <i>column</i> state means the header cell applies to some of the subsequent cells in the
    same column(s).</dd>

    <dt>The <dfn><code>rowgroup</code></dfn> keyword, which maps to
    the <i>row group</i> state</dt>

    <dd>The <i>row group</i> state means the header cell applies to all the remaining cells in the
    row group. A <code>th</code> element's <code>scope</code> attribute must
    not be in the <a>row group</a> state if the element is not
    anchored in a <a>row group</a>.</dd>

    <dt>The <dfn><code>colgroup</code></dfn> keyword, which maps to
    the <i>column group</i> state</dt>

    <dd>The <i>column group</i> state means the header cell applies to all the remaining cells in the
    column group. A <code>th</code> element's <code>scope</code> attribute must
    not be in the <a>column group</a> state if the element is
    not anchored in a <a>column group</a>.</dd>

    <dt>The <dfn>auto</dfn> state</dt>

    <dd>The <i>auto</i> state makes the header cell apply to a set of cells selected based on
    context.</dd>

  </dl>

  The <code>scope</code> attribute's <i>missing value default</i> is the
  <i>auto</i> state.

  The <code>th</code> element may have an <dfn><code>abbr</code></dfn>
  content attribute specified. Its value must be an alternative label for the header cell, to be
  used when referencing the cell in other contexts (e.g. when describing the header cells that apply
  to a data cell). It is typically an abbreviated form of the full header cell, but can also be an
  expansion, or merely a different phrasing.

  The <code>sorted</code> attribute is used in the <a>table
  sorting model</a>.

  <div class="impl">

  The <code>th</code> element and its <code>colspan</code>, <code>rowspan</code>, <code>headers</code>, and
  <code>scope</code> attributes take part in the <a>table model</a>.

  The <code>sort()</code> method is used in the <a>table sorting
  model</a>.

  The <dfn><code>scope</code></dfn> IDL attribute must <a>reflect</a>
  the content attribute of the same name, <a>limited to only known values</a>.

  The <dfn><code>abbr</code></dfn> and <dfn><code>sorted</code></dfn> IDL attributes must <a>reflect</a> the
  content attributes of the same name.

  </div>

  <div class="example">
    The following example shows how the <code>scope</code> attribute's <code>rowgroup</code> value affects which data cells a header cell
    applies to.

    Here is a markup fragment showing a table:
<p class="note">
    The <code>tbody</code> elements in this example identify the range of the row groups.
  </p>

    <pre highlight="html">
&lt;table&gt;
    &lt;caption&gt;Measurement of legs and tails in Cats and English speakers&lt;/caption&gt;
  &lt;thead&gt;
  &lt;tr&gt; &lt;th&gt; ID &lt;th&gt; Measurement &lt;th&gt; Average &lt;th&gt; Maximum
  &lt;tbody&gt;
  &lt;tr&gt; &lt;td&gt; &lt;th scope=rowgroup&gt; Cats &lt;td&gt; &lt;td&gt;
  &lt;tr&gt; &lt;td&gt; 93 &lt;th scope=row&gt; Legs &lt;td&gt; 3.5 &lt;td&gt; 4
  &lt;tr&gt; &lt;td&gt; 10 &lt;th scope=row&gt; Tails &lt;td&gt; 1 &lt;td&gt; 1
  &lt;/tbody&gt;
  &lt;tbody&gt;
  &lt;tr&gt; &lt;td&gt; &lt;th scope=rowgroup&gt; English speakers &lt;td&gt; &lt;td&gt;
  &lt;tr&gt; &lt;td&gt; 32 &lt;th scope=row&gt; Legs &lt;td&gt; 2.67 &lt;td&gt; 4
  &lt;tr&gt; &lt;td&gt; 35 &lt;th scope=row&gt; Tails &lt;td&gt; 0.33 &lt;td&gt; 1
  &lt;/tbody&gt;
&lt;/table&gt;
    </pre>

    This would result in the following table:

    <table>
<caption>Measurement of legs and tails in Cats and English speakers</caption>
    <thead>
      <tr> <th aria-describedby="exp1"> ID </th><th> Measurement </th><th> Average </th><th> Maximum
    </th></tr></thead><tbody>
      <tr> <td aria-describedby="exp2"> </td><th scope="rowgroup" aria-describedby="exp3"> Cats </th><td> </td><td>
      </td></tr><tr> <td> 93 </td><th scope="row" aria-describedby="exp5"> Legs </th><td> 3.5 </td><td> 4
      </td></tr><tr> <td> 10 </td><th scope="row"> Tails </th><td> 1 </td><td> 1
    </td></tr></tbody><tbody>
      <tr> <td> </td><th scope="rowgroup" aria-describedby="exp4"> English speakers </th><td> </td><td>
      </td></tr><tr> <td> 32 </td><th scope="row"> Legs </th><td> 2.67 </td><td> 4
      </td></tr><tr> <td> 35 </td><th scope="row"> Tails </th><td> 0.33 </td><td> 1
    </td></tr></tbody></table>

    The header cells in row 1 ('ID', 'Measurement', 'Average' and 'Maximum') each apply only to the cells in their column.

    The header cells with a <code>scope=rowgroup</code>
    ('Cats' and 'English speakers') apply to all the cells in their row group other
    than the cells (to their left) in column 1:

     The header 'Cats' (row 2, column 2) applies to the headers 'Legs' (row 3, column 2)
    and 'Tails' (row 4, column 2) and to the data cells
    in rows 2, 3 and 4 of the 'Average' and 'Maximum' columns.

     The header 'English speakers' (row 5, column 2) applies to the headers 'Legs' (row 6, column 2)
    and 'Tails' (row 7, column 2) and to the data cells in rows 5, 6 and 7 of the 'Average' and 'Maximum' columns.

    Each of the 'Legs' and 'Tails' header cells has a <code>scope=row</code> and therefore apply to the data cells (to the right)
    in their row, from the 'Average' and 'Maximum' columns.

    <img src="images/table-scope-diagram.png" width="459" height="256" alt="Representation of the example
    table overlayed with arrows indicating which cells each header applies to.">

  </div>

<h4 id="attributes-common-to-td-and-th-elements">Attributes common to <code>td</code> and <code>th</code> elements</h4>

  The <code>td</code> and <code>th</code> elements may have a <dfn><code>colspan</code></dfn> content attribute specified, whose value must
  be a <a>valid non-negative integer</a> greater than zero.

  The <code>td</code> and <code>th</code> elements may also have a <dfn><code>rowspan</code></dfn> content attribute specified, whose value must
  be a <a>valid non-negative integer</a>. For this attribute, the value zero means that the
  cell is to span all the remaining rows in the row group.

  These attributes give the number of columns and rows respectively that the cell is to span.
  These attributes must not be used to overlap cells<span class="impl">, as described in the
  description of the <a>table model</a></span>.

  <hr />

  The <code>td</code> and <code>th</code> element may have a <dfn><code>headers</code></dfn> content attribute specified. The <code>headers</code> attribute, if specified, must contain a string consisting
  of an <a>unordered set of unique space-separated tokens</a> that are
  <a>case-sensitive</a>, each of which must have the value of an <a>ID</a> of a <code>th</code> element taking part in the same <a>table</a> as the <code>td</code> or <code>th</code> element<span class="impl"> (as defined by the <a>table model</a>)</span>.

  A <code>th</code> element with <a>ID</a> <var>id</var> is
  said to be <i>directly targeted</i> by all <code>td</code> and <code>th</code> elements in the
  same <a>table</a> that have <code>headers</code> attributes whose values include as one of their tokens
  the <a>ID</a> <var>id</var>. A <code>th</code> element <var>A</var> is said to be <i>targeted</i> by a <code>th</code> or <code>td</code> element
  <var>B</var> if either <var>A</var> is <i>directly targeted</i> by <var>B</var> or if there exists an element <var>C</var> that is itself
  <i>targeted</i> by the element <var>B</var> and <var>A</var> is <i>directly
  targeted</i> by <var>C</var>.

  A <code>th</code> element must not be <i>targeted</i> by itself.

  <div class="impl">

  The <code>colspan</code>, <code>rowspan</code>, and <code>headers</code>
  attributes take part in the <a>table model</a>.

  </div>

  <hr />

  The <code>td</code> and <code>th</code> elements implement interfaces that inherit from the
  <code>HTMLTableCellElement</code> interface:

  <pre class="idl" data-highlight="webidl">interface HTMLTableCellElement : HTMLElement {
  attribute unsigned long colSpan;
  attribute unsigned long rowSpan;
  [PutForwards=value] readonly attribute DOMSettableTokenList headers;
  readonly attribute long cellIndex;
};
</pre>

  <dl class="domintro">

    <dt><var>cell</var> . <code>cellIndex</code></dt>

    <dd>

    Returns the position of the cell in the row's <code>cells</code> list.
    This does not necessarily correspond to the <var>x</var>-position of the cell in the
    table, since earlier cells might cover multiple rows or columns.

    Returns -1 if the element isn't in a row.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>colSpan</code></dfn> IDL attribute must
  <a>reflect</a> the <code>colspan</code> content attribute. Its
  default value is 1.

  The <dfn><code>rowSpan</code></dfn> IDL attribute must
  <a>reflect</a> the <code>rowspan</code> content attribute. Its
  default value is 1.

  The <dfn><code>headers</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.

  The <dfn><code>cellIndex</code></dfn> IDL attribute must, if the
  element has a parent <code>tr</code> element, return the index of the cell's element in the parent
  element's <code>cells</code> collection. If there is no such parent element,
  then the attribute must return -1.

  </div>

  <div class="impl">

<h4 id="processing-model">Processing model</h4>

  The various table elements and their content attributes together define the <dfn>table
  model</dfn>.

  A <dfn>table</dfn> consists of cells aligned on a two-dimensional grid of
  <dfn>slots</dfn> with coordinates (<var>x</var>, <var>y</var>). The grid is finite, and is either empty or has one or more slots. If the grid
  has one or more slots, then the <var>x</var> coordinates are always in the range <a>0&nbsp;â¤&nbsp;<var>x</var>&nbsp;&lt;&nbsp;<var>x<sub>width</sub></var></a>, and the <var>y</var> coordinates are always in the
  range <a>0&nbsp;â¤&nbsp;<var>y</var>&nbsp;&lt;&nbsp;<var>y<sub>height</sub></var></a>. If one or both of <var>x<sub>width</sub></var> and <var>y<sub>height</sub></var> are zero, then the
  table is empty (has no slots). Tables correspond to <code>table</code> elements.

  A <dfn>cell</dfn> is a set of slots anchored at a slot (<var>cell<sub>x</sub></var>, <var>cell<sub>y</sub></var>), and with
  a particular <var>width</var> and <var>height</var> such that the cell covers
  all the slots with coordinates (<var>x</var>, <var>y</var>) where <a><var>cell<sub>x</sub></var>&nbsp;â¤&nbsp;<var>x</var>&nbsp;&lt;&nbsp;<var>cell<sub>x</sub></var>+<var>width</var></a> and <a><var>cell<sub>y</sub></var>&nbsp;â¤&nbsp;<var>y</var>&nbsp;&lt;&nbsp;<var>cell<sub>y</sub></var>+<var>height</var></a>. Cells can either be <em>data cells</em>
  or <em>header cells</em>. Data cells correspond to <code>td</code> elements, and header cells
  correspond to <code>th</code> elements. Cells of both types can have zero or more associated
  header cells.

  It is possible, in certain error cases, for two cells to occupy the same slot.

  A <dfn>row</dfn> is a complete set of slots from <a><var>x</var>=0</a> to <a><var>x</var>=<var>x<sub>width</sub></var>-1</a>, for a particular value of <var>y</var>. Rows usually
  correspond to <code>tr</code> elements, though a <a>row group</a>
  can have some implied <a>rows</a> at the end in some cases involving
  <a>cells</a> spanning multiple rows.

  A <dfn>column</dfn> is a complete set of slots from <a><var>y</var>=0</a> to <a><var>y</var>=<var>y<sub>height</sub></var>-1</a>, for a particular value of <var>x</var>. Columns can
  correspond to <code>col</code> elements. In the absence of <code>col</code> elements, columns are
  implied.

  A <dfn>row group</dfn> is a set of <a>rows</a> anchored at a slot (0, <var>group<sub>y</sub></var>) with a particular <var>height</var> such that the row group
  covers all the slots with coordinates (<var>x</var>, <var>y</var>) where <a>0&nbsp;â¤&nbsp;<var>x</var>&nbsp;&lt;&nbsp;<var>x<sub>width</sub></var></a> and <a><var>group<sub>y</sub></var>&nbsp;â¤&nbsp;<var>y</var>&nbsp;&lt;&nbsp;<var>group<sub>y</sub></var>+<var>height</var></a>. Row groups correspond to
  <code>tbody</code>, <code>thead</code>, and <code>tfoot</code> elements. Not every row is
  necessarily in a row group.

  A <dfn>column group</dfn> is a set of <a>columns</a> anchored at a slot (<var>group<sub>x</sub></var>, 0) with a particular <var>width</var> such that the column group
  covers all the slots with coordinates (<var>x</var>, <var>y</var>) where <a><var>group<sub>x</sub></var>&nbsp;â¤&nbsp;<var>x</var>&nbsp;&lt;&nbsp;<var>group<sub>x</sub></var>+<var>width</var></a> and <a>0&nbsp;â¤&nbsp;<var>y</var>&nbsp;&lt;&nbsp;<var>y<sub>height</sub></var></a>. Column
  groups correspond to <code>colgroup</code> elements. Not every column is necessarily in a column
  group.

  <a>Row groups</a> cannot overlap each other. Similarly, <a>column groups</a> cannot overlap each other.

  A <a>cell</a> cannot cover slots that are from two or more <a>row groups</a>. It is, however, possible for a cell to be in multiple
  <a>column groups</a>. All the slots that form part of one cell
  are part of zero or one <a>row groups</a> and zero or more <a>column groups</a>.

  In addition to <a>cells</a>, <a>columns</a>, <a>rows</a>, <a>row groups</a>, and <a>column
  groups</a>, <a>tables</a> can have a <code>caption</code> element
  associated with them. This gives the table a heading, or legend.

  A <dfn>table model error</dfn> is an error with the data represented by <code>table</code>
  elements and their descendants. Documents must not have table model errors.

<h5 id="forming-a-table">Forming a table</h5>

  To determine which elements correspond to which slots in a <a>table</a> associated with a <code>table</code> element, to determine the
  dimensions of the table (<var>x<sub>width</sub></var> and <var>y<sub>height</sub></var>), and to determine if there are any <a>table model errors</a>, user agents must use the following algorithm:

  <ol>

    <li>
    Let <var>x<sub>width</sub></var> be zero.
    </li>

    <li>
    Let <var>y<sub>height</sub></var> be zero.
    </li>

    <li>

    Let <var>pending <code>tfoot</code> elements</var> be a list of <code>tfoot</code>
    elements, initially empty.

    </li>

    <li>

    Let <var>the table</var> be the <a>table</a> represented
    by the <code>table</code> element. The <var>x<sub>width</sub></var> and <var>y<sub>height</sub></var> variables give <var>the table</var>'s
    dimensions. <var>The table</var> is initially empty.

    </li>

    <li>

    If the <code>table</code> element has no children elements, then return <var>the
    table</var> (which will be empty), and abort these steps.

    </li>

    <li>

    Associate the first <code>caption</code> element child of the <code>table</code> element with
    <var>the table</var>. If there are no such children, then it has no associated
    <code>caption</code> element.

    </li>

    <li>

    Let the <var>current element</var> be the first element child of the
    <code>table</code> element.

    If a step in this algorithm ever requires the <var>current element</var> to be <dfn>advanced to the next child of the <code>table</code></dfn> when
    there is no such next child, then the user agent must jump to the step labeled <i>end</i>, near
    the end of this algorithm.

    </li>

    <li>

    While the <var>current element</var> is not one of the following elements, <a>advance</a> the <var>current element</var> to the next
    child of the <code>table</code>:

    <ul class="brief">
      <li><code>colgroup</code></li>
      <li><code>thead</code></li>
      <li><code>tbody</code></li>
      <li><code>tfoot</code></li>
      <li><code>tr</code></li>
    </ul>

    </li>

    <li>

    If the <var>current element</var> is a <code>colgroup</code>, follow these
    substeps:

    <ol>

      <li>

      <i>Column groups</i>: Process the <var>current element</var> according to the
      appropriate case below:

      <dl class="switch">

        <dt>If the <var>current element</var> has any <code>col</code> element children</dt>

        <dd>

        Follow these steps:

        <ol>

          <li>

          Let <var>x<sub>start</sub></var> have the value of <a><var>x<sub>width</sub></var></a>.

          </li>

          <li>

          Let the <var>current column</var> be the first <code>col</code> element child
          of the <code>colgroup</code> element.

          </li>

          <li>

          <i>Columns</i>: If the <var>current column</var> <code>col</code> element has
          a <code>span</code> attribute, then parse its value using the
          <a>rules for parsing non-negative integers</a>.

          If the result of parsing the value is not an error or zero, then let <var>span</var> be that value.

          Otherwise, if the <code>col</code> element has no <code>span</code> attribute, or if trying to parse the attribute's value
          resulted in an error or zero, then let <var>span</var> be 1.

          </li>

          <li>

          Increase <var>x<sub>width</sub></var> by <var>span</var>.

          </li>

          <li>

          Let the last <var>span</var> <a>columns</a> in
          <var>the table</var> correspond to the <var>current column</var>
          <code>col</code> element.

          </li>

          <li>

          If <var>current column</var> is not the last <code>col</code> element child of
          the <code>colgroup</code> element, then let the <var>current column</var> be the
          next <code>col</code> element child of the <code>colgroup</code> element, and return to
          the step labeled <i>columns</i>.

          </li>

          <li>

          Let all the last <a>columns</a> in <var>the
          table</var> from <a>x=<var>x<sub>start</sub></var></a> to
          <a>x=<var>x<sub>width</sub></var>-1</a> form a new <a>column group</a>, anchored at the slot (<var>x<sub>start</sub></var>, 0), with width <a><var>x<sub>width</sub></var>-<var>x<sub>start</sub></var></a>, corresponding to the <code>colgroup</code> element.

          </li>

        </ol>

        </dd>

        <dt>If the <var>current element</var> has no <code>col</code> element children</dt>

        <dd>

        <ol>

          <li>

          If the <code>colgroup</code> element has a <code>span</code>
  attribute, then parse its value using the <a>rules for parsing non-negative
          integers</a>.

          If the result of parsing the value is not an error or zero, then let <var>span</var> be that value.

          Otherwise, if the <code>colgroup</code> element has no <code>span</code> attribute, or if trying to parse the attribute's
          value resulted in an error or zero, then let <var>span</var> be 1.

          </li>

          <li>

          Increase <var>x<sub>width</sub></var> by <var>span</var>.

          </li>

          <li>

          Let the last <var>span</var> <a>columns</a> in
          <var>the table</var> form a new <a>column
          group</a>, anchored at the slot (<a><var>x<sub>width</sub></var>-<var>span</var></a>, 0), with width <var>span</var>, corresponding to the <code>colgroup</code> element.

          </li>

        </ol>

        </dd>

      </dl>

      </li>

      <li>

      <a>Advance</a> the <var>current element</var>
      to the next child of the <code>table</code>.

      </li>

      <li>

      While the <var>current element</var> is not one of the following elements, <a>advance</a> the <var>current element</var> to the
      next child of the <code>table</code>:

      <ul class="brief">
        <li><code>colgroup</code></li>
        <li><code>thead</code></li>
        <li><code>tbody</code></li>
        <li><code>tfoot</code></li>
        <li><code>tr</code></li>
      </ul>

      </li>

      <li>

      If the <var>current element</var> is a <code>colgroup</code> element, jump to the
      step labeled <i>column groups</i> above.

      </li>

    </ol>

    </li>

    <li>

    Let <var>y<sub>current</sub></var> be zero.

    </li>

    <li>

    Let the <var>list of downward-growing cells</var> be an empty list.

    </li>

    <li>

    <i>Rows</i>: While the <var>current element</var> is not one of the following
    elements, <a>advance</a> the <var>current
    element</var> to the next child of the <code>table</code>:

    <ul class="brief">
      <li><code>thead</code></li>
      <li><code>tbody</code></li>
      <li><code>tfoot</code></li>
      <li><code>tr</code></li>
    </ul>

    </li>

    <li>

    If the <var>current element</var> is a <code>tr</code>, then run the <a>algorithm
    for processing rows</a>, <a>advance</a> the <var>current element</var> to the next child of the <code>table</code>, and return to the
    step labeled <i>rows</i>.

    </li>

    <li>

    Run the <a>algorithm for ending a row group</a>.

    </li>

    <li>

    If the <var>current element</var> is a <code>tfoot</code>, then add that element to
    the list of <var>pending <code>tfoot</code> elements</var>, <a>advance</a> the <var>current element</var> to the next
    child of the <code>table</code>, and return to the step labeled <i>rows</i>.

    </li>

    <li>

    The <var>current element</var> is either a <code>thead</code> or a
    <code>tbody</code>.

    Run the <a>algorithm for processing row groups</a>.

    </li>

    <li>

    <a>Advance</a> the <var>current element</var> to
    the next child of the <code>table</code>.

    </li>

    <li>

    Return to the step labeled <i>rows</i>.

    </li>

    <li>

    <i>End</i>: For each <code>tfoot</code> element in the list of <var>pending
    <code>tfoot</code> elements</var>, in <a>tree order</a>, run the <a>algorithm for processing row
    groups</a>.

    </li>

    <li>

    If there exists a <a>row</a> or <a>column</a> in <var>the table</var> containing only <a>slots</a> that do not have a <a>cell</a>
    anchored to them, then this is a <a>table model error</a>.

    </li>

    <li>

    Return <var>the table</var>.

    </li>

  </ol>

  The <dfn>algorithm for processing row groups</dfn>, which is invoked by the set of steps above
  for processing <code>thead</code>, <code>tbody</code>, and <code>tfoot</code> elements, is:

  <ol>

    <li>

    Let <var>y<sub>start</sub></var> have the value of <var>y<sub>height</sub></var>.

    </li>

    <li>

    For each <code>tr</code> element that is a child of the element being processed, in tree
    order, run the <a>algorithm for processing rows</a>.

    </li>

    <li>

    If <a><var>y<sub>height</sub></var>&nbsp;&gt;&nbsp;<var>y<sub>start</sub></var></a>, then let all the last <a>rows</a> in <var>the table</var> from <a>y=<var>y<sub>start</sub></var></a> to <a>y=<var>y<sub>height</sub></var>-1</a> form a new <a>row
    group</a>, anchored at the slot with coordinate (0, <var>y<sub>start</sub></var>), with height <a><var>y<sub>height</sub></var>-<var>y<sub>start</sub></var></a>, corresponding
    to the element being processed.

    </li>

    <li>

    Run the <a>algorithm for ending a row group</a>.

    </li>

  </ol>

  The <dfn>algorithm for ending a row group</dfn>, which is invoked by the set of steps above
  when starting and ending a block of rows, is:

  <ol>

    <li>

    While <var>y<sub>current</sub></var> is less than <var>y<sub>height</sub></var>, follow these steps:

    <ol>

      <li>

      Run the <a>algorithm for growing downward-growing cells</a>.

      </li>

      <li>

      Increase <var>y<sub>current</sub></var> by 1.

      </li>

    </ol>

    </li>

    <li>

    Empty the <var>list of downward-growing cells</var>.

    </li>

  </ol>

  The <dfn>algorithm for processing rows</dfn>, which is invoked by the set of steps above for
  processing <code>tr</code> elements, is:

  <ol>

    <li>

    If <var>y<sub>height</sub></var> is equal to <var>y<sub>current</sub></var>, then increase <var>y<sub>height</sub></var> by
    1. (<var>y<sub>current</sub></var> is never <em>greater</em> than <var>y<sub>height</sub></var>.)

    </li>

    <li>

    Let <var>x<sub>current</sub></var> be 0.

    </li>

    <li>

    Run the <a>algorithm for growing downward-growing cells</a>.

    </li>

    <li>

    If the <code>tr</code> element being processed has no <code>td</code> or <code>th</code>
    element children, then increase <var>y<sub>current</sub></var> by 1, abort
    this set of steps, and return to the algorithm above.

    </li>

    <li>

    Let <var>current cell</var> be the first <code>td</code> or <code>th</code> element child
    in the <code>tr</code> element being processed.

    </li>

    <li>

    <i>Cells</i>: While <var>x<sub>current</sub></var> is less than <var>x<sub>width</sub></var> and the slot with coordinate (<var>x<sub>current</sub></var>, <var>y<sub>current</sub></var>) already has a
    cell assigned to it, increase <var>x<sub>current</sub></var> by 1.

    </li>

    <li>

    If <var>x<sub>current</sub></var> is equal to <var>x<sub>width</sub></var>, increase <var>x<sub>width</sub></var> by 1. (<var>x<sub>current</sub></var> is never <em>greater</em> than <var>x<sub>width</sub></var>.)

    </li>

    <li>

    If the <var>current cell</var> has a <code>colspan</code>
    attribute, then <a>parse that attribute's
    value</a>, and let <var>colspan</var> be the result.

    If parsing that value failed, or returned zero, or if the attribute is absent, then let <var>colspan</var> be 1, instead.

    </li>

    <li>

    If the <var>current cell</var> has a <code>rowspan</code>
    attribute, then <a>parse that attribute's
    value</a>, and let <var>rowspan</var> be the result.

    If parsing that value failed or if the attribute is absent, then let <var>rowspan</var> be 1, instead.

    </li>

    <li>

    If <var>rowspan</var> is zero and the <code>table</code> element's
    <a>node document</a> is not set to <a>quirks mode</a>, then let <var>cell grows
    downward</var> be true, and set <var>rowspan</var> to 1. Otherwise, let <var>cell grows downward</var> be false.

    </li>

    <li>

    If <a><var>x<sub>width</sub></var>&nbsp;&lt;&nbsp;<var>x<sub>current</sub></var>+<var>colspan</var></a>, then let <var>x<sub>width</sub></var> be <a><var>x<sub>current</sub></var>+<var>colspan</var></a>.

    </li>

    <li>

    If <a><var>y<sub>height</sub></var>&nbsp;&lt;&nbsp;<var>y<sub>current</sub></var>+<var>rowspan</var></a>, then let <var>y<sub>height</sub></var> be <a><var>y<sub>current</sub></var>+<var>rowspan</var></a>.

    </li>

    <li>

    Let the slots with coordinates (<var>x</var>, <var>y</var>) such that <a><var>x<sub>current</sub></var>&nbsp;â¤&nbsp;<var>x</var>&nbsp;&lt;&nbsp;<var>x<sub>current</sub></var>+<var>colspan</var></a> and <a><var>y<sub>current</sub></var>&nbsp;â¤&nbsp;<var>y</var>&nbsp;&lt;&nbsp;<var>y<sub>current</sub></var>+<var>rowspan</var></a> be covered by a
    new <a>cell</a> <var>c</var>, anchored at (<var>x<sub>current</sub></var>, <var>y<sub>current</sub></var>),
    which has width <var>colspan</var> and height <var>rowspan</var>,
    corresponding to the <var>current cell</var> element.

    If the <var>current cell</var> element is a <code>th</code> element, let this new
    cell <var>c</var> be a header cell; otherwise, let it be a data cell.

    To establish which header cells apply to the <var>current cell</var> element, use
    the <a>algorithm for assigning header cells</a> described in the next section.

    If any of the slots involved already had a <a>cell</a> covering
    them, then this is a <a>table model error</a>. Those slots now have two cells
    overlapping.

    </li>

    <li>

    If <var>cell grows downward</var> is true, then add the tuple {<var>c</var>, <var>x<sub>current</sub></var>, <var>colspan</var>}
    to the <var>list of downward-growing cells</var>.

    </li>

    <li>

    Increase <var>x<sub>current</sub></var> by <var>colspan</var>.

    </li>

    <li>

    If <var>current cell</var> is the last <code>td</code> or <code>th</code> element child in
    the <code>tr</code> element being processed, then increase <var>y<sub>current</sub></var> by 1, abort this set of steps, and return to the algorithm
    above.

    </li>

    <li>

    Let <var>current cell</var> be the next <code>td</code> or <code>th</code> element child
    in the <code>tr</code> element being processed.

    </li>

    <li>

    Return to the step labeled <i>cells</i>.

    </li>

  </ol>

  When the algorithms above require the user agent to run the <dfn>algorithm for growing
  downward-growing cells</dfn>, the user agent must, for each {<var>cell</var>, <var>cell<sub>x</sub></var>, <var>width</var>} tuple in the <var>list of downward-growing cells</var>, if any, extend the <a>cell</a> <var>cell</var> so that it also covers the slots with
  coordinates (<var>x</var>, <var>y<sub>current</sub></var>), where <a><var>cell<sub>x</sub></var>&nbsp;â¤&nbsp;<var>x</var>&nbsp;&lt;&nbsp;<var>cell<sub>x</sub></var>+<var>width</var></a>.

<h5 id="forming-relationships-between-data-cells-and-header-cells">Forming relationships between data cells and header cells</h5>

  Each cell can be assigned zero or more header cells. The <dfn>algorithm for assigning header
  cells</dfn> to a cell <var>principal cell</var> is as follows.

  <ol>

    <li>

    Let <var>header list</var> be an empty list of cells.

    </li>

    <li>

    Let (<var>principal<sub>x</sub></var>, <var>principal<sub>y</sub></var>) be the coordinate of the slot to which the <var>principal
    cell</var> is anchored.

    </li>

    <li>

    <dl class="switch">

      <dt>If the <var>principal cell</var> has a <code>headers</code> attribute specified</dt>

      <dd>

      <ol>

        <li>

        Take the value of the <var>principal cell</var>'s <code>headers</code> attribute and <a>split it on spaces</a>, letting <var>id list</var> be the list of tokens
        obtained.

        </li>

        <li>

        For each token in the <var>id list</var>, if the
        first element in the <code>Document</code> with an <a>ID</a> equal to
        the token is a cell in the same <a>table</a>, and that cell is not the
        <var>principal cell</var>, then add that cell to <var>header list</var>.

        </li>

      </ol>

      </dd>

      <dt>If <var>principal cell</var> does not have a <code>headers</code> attribute specified</dt>

      <dd>

      <ol>

        <li>

        Let <var>principal<sub>width</sub></var> be the width of the <var>principal cell</var>.

        </li>

        <li>

        Let <var>principal<sub>height</sub></var> be the height of the <var>principal cell</var>.

        </li>

        <li>

        For each value of <var>y</var> from <var>principal<sub>y</sub></var> to <a><var>principal<sub>y</sub></var>+<var>principal<sub>height</sub></var>-1</a>, run
        the <a>internal algorithm for scanning and assigning header cells</a>, with the <var>principal cell</var>, the <var>header list</var>, the initial coordinate
        (<var>principal<sub>x</sub></var>,<var>y</var>), and the
        increments <a>Î<var>x</var>=-1</a> and <a>Î<var>y</var>=0</a>.

        </li>

        <li>

        For each value of <var>x</var> from <var>principal<sub>x</sub></var> to <a><var>principal<sub>x</sub></var>+<var>principal<sub>width</sub></var>-1</a>, run
        the <a>internal algorithm for scanning and assigning header cells</a>, with the <var>principal cell</var>, the <var>header list</var>, the initial coordinate
        (<var>x</var>,<var>principal<sub>y</sub></var>), and the
        increments <a>Î<var>x</var>=0</a> and <a>Î<var>y</var>=-1</a>.

        </li>

        <li>

        If the <var>principal cell</var> is anchored in a <a>row group</a>, then add all header cells that are <a>row group headers</a> and are anchored in the same row group
        with an <var>x</var>-coordinate less than or equal to <a><var>principal<sub>x</sub></var>+<var>principal<sub>width</sub></var>-1</a> and a <var>y</var>-coordinate less than or
        equal to <a><var>principal<sub>y</sub></var>+<var>principal<sub>height</sub></var>-1</a> to <var>header
        list</var>.

        </li>

        <li>

        If the <var>principal cell</var> is anchored in a <a>column group</a>, then add all header cells that are <a>column group headers</a> and are anchored in the same column
        group with an <var>x</var>-coordinate less than or equal to <a><var>principal<sub>x</sub></var>+<var>principal<sub>width</sub></var>-1</a> and a <var>y</var>-coordinate less than or
        equal to <a><var>principal<sub>y</sub></var>+<var>principal<sub>height</sub></var>-1</a> to <var>header
        list</var>.

        </li>

      </ol>

      </dd>

    </dl>

    </li>

    <li>

    Remove all the <a>empty cells</a> from the <var>header
    list</var>.

    </li>

    <li>

    Remove any duplicates from the <var>header list</var>.

    </li>

    <li>

    Remove <var>principal cell</var> from the <var>header list</var> if it is
    there.

    </li>

    <li>

    Assign the headers in the <var>header list</var> to the <var>principal
    cell</var>.

    </li>

  </ol>

  The <dfn>internal algorithm for scanning and assigning header cells</dfn>, given a <var>principal cell</var>, a <var>header list</var>, an initial coordinate (<var>initial<sub>x</sub></var>, <var>initial<sub>y</sub></var>),
  and Î<var>x</var> and Î<var>y</var> increments, is as follows:

  <ol>

    <li>

    Let <var>x</var> equal <var>initial<sub>x</sub></var>.

    </li>

    <li>

    Let <var>y</var> equal <var>initial<sub>y</sub></var>.

    </li>

    <li>

    Let <var>opaque headers</var> be an empty list of cells.

    </li>

    <li>

    <dl class="switch">

      <dt>If <var>principal cell</var> is a header cell</dt>

      <dd>Let <var>in header block</var> be true, and let <var>headers from
      current header block</var> be a list of cells containing just the <var>principal
      cell</var>.</dd>

      <dt>Otherwise</dt>

      <dd>Let <var>in header block</var> be false and let <var>headers from
      current header block</var> be an empty list of cells.

    </dd></dl>

    </li>

    <li>

    <i>Loop</i>: Increment <var>x</var> by Î<var>x</var>; increment <var>y</var> by Î<var>y</var>.

    <p class="note">
    For each invocation of this algorithm, one of Î<var>x</var> and
    Î<var>y</var> will be -1, and the other will be 0.
  </p>

    </li>

    <li>

    If either <var>x</var> or <var>y</var> is less than 0, then abort this
    internal algorithm.

    </li>

    <li>

    If there is no cell covering slot (<var>x</var>, <var>y</var>), or if there
    is more than one cell covering slot (<var>x</var>, <var>y</var>), return to
    the substep labeled <i>loop</i>.

    </li>

    <li>

    Let <var>current cell</var> be the cell covering slot (<var>x</var>, <var>y</var>).

    </li>

    <li>

    <dl class="switch">

      <dt>If <var>current cell</var> is a header cell</dt>

      <dd>

      <ol>

        <li>Set <var>in header block</var> to true.</li>

        <li>Add <var>current cell</var> to <var>headers from current header
        block</var>.</li>

        <li>Let <var>blocked</var> be false.</li>

        <li>

        <dl class="switch">

          <dt>If Î<var>x</var> is 0</dt>

          <dd>

          If there are any cells in the <var>opaque headers</var> list anchored with the
          same <var>x</var>-coordinate as the <var>current cell</var>, and with
          the same width as <var>current cell</var>, then let <var>blocked</var>
          be true.

          If the <var>current cell</var> is not a <a>column header</a>, then let
          <var>blocked</var> be true.

          </dd>

          <dt>If Î<var>y</var> is 0</dt>

          <dd>

          If there are any cells in the <var>opaque headers</var> list anchored with the
          same <var>y</var>-coordinate as the <var>current cell</var>, and with
          the same height as <var>current cell</var>, then let <var>blocked</var>
          be true.

          If the <var>current cell</var> is not a <a>row header</a>, then let <var>blocked</var> be true.

          </dd>

        </dl>

        </li>

        <li>If <var>blocked</var> is false, then add the <var>current cell</var>
        to the <var>headers list</var>.</li>

      </ol>

      </dd>

      <dt>If <var>current cell</var> is a data cell and <var>in header block</var> is true</dt>

      <dd>Set <var>in header block</var> to false. Add all the cells in <var>headers from current header block</var> to the <var>opaque headers</var>
      list, and empty the <var>headers from current header block</var> list.

    </dd></dl>

    </li>

    <li>

    Return to the step labeled <i>loop</i>.

    </li>

  </ol>

  A header cell anchored at the slot with coordinate (<var>x</var>, <var>y</var>) with width <var>width</var> and height <var>height</var> is
  said to be a <dfn>column header</dfn> if any of the following conditions are true:

  <ul>

    <li>The cell's <code>scope</code> attribute is in the <a>column</a> state, or</li>

    <li>The cell's <code>scope</code> attribute is in the <a>auto</a> state, and there are no data cells in any of the cells
    covering slots with <var>y</var>-coordinates <var>y</var> .. <a><var>y</var>+<var>height</var>-1</a>.</li>

  </ul>

  A header cell anchored at the slot with coordinate (<var>x</var>, <var>y</var>) with width <var>width</var> and height <var>height</var> is
  said to be a <dfn>row header</dfn> if any of the following conditions are true:

  <ul>

    <li>The cell's <code>scope</code> attribute is in the <a>row</a> state, or</li>

    <li>The cell's <code>scope</code> attribute is in the <a>auto</a> state, the cell is not a <a>column header</a>, and
    there are no data cells in any of the cells covering slots with <var>x</var>-coordinates
    <var>x</var> .. <a><var>x</var>+<var>width</var>-1</a>.</li>

  </ul>

  A header cell is said to be a <dfn>column group header</dfn> if its <code>scope</code> attribute is in the <a>column
  group</a> state.

  A header cell is said to be a <dfn>row group header</dfn> if its <code>scope</code> attribute is in the <a>row
  group</a> state.

  A cell is said to be an <dfn>empty cell</dfn> if it contains no elements and its text content,
  if any, consists only of <a>White_Space</a> characters.

  </div>

<h4 id="table-sorting-model"><dfn>Table sorting model</dfn></h4>

  The <dfn><code>sortable</code></dfn> attribute on
  <code>table</code> elements is a <a>boolean attribute</a>. When present, it indicates that
  the user agent is to <a>allow the user to sort</a> the <code>table</code>.

  To make a column sortable in a <code>table</code> with a <code>thead</code>, the column needs
  to have <code>th</code> element that does not <a>span multiple
  columns</a> in a <code>thead</code> above any rows that it is to sort.

  To make a column sortable in a <code>table</code> without a <code>thead</code>, the column
  needs to have <code>th</code> element that does not <a>span multiple
  columns</a> in the first <code>tr</code> element of the <code>table</code>, where that
  <code>tr</code> element is not in a <code>tfoot</code>.

  When the user selects a column by which to sort, the user agent sets the <code>th</code>
  element's <dfn><code>sorted</code></dfn> attribute. This attribute can also
  be set manually, to indicate that the table should be automatically sorted, even when scripts
  modify the page on when the page is loaded.

  The <code>sorted</code> attribute, if specified, must have a value that
  is a <a>set of space-separated tokens</a> consisting of optionally a token whose value is an
  <a>ASCII case-insensitive</a> match for the string "<dfn><code>reversed</code></dfn>", and optionally a token whose value
  is a <a>valid non-negative integer</a> greater than zero, in either order.

  <p class="note">
    In other words, ignoring spaces and case, the <code>sorted</code> attribute's value can be empty, "<code>reversed</code>", "<code>1</code>", "<code>reversed 1</code>", or
  "<code>1 reversed</code>", where "1" is any number equal to or greater than 1.
  </p>

  While one or more <code>th</code> elements in the table have a <code>sorted</code> attribute, the user agent will keep the table's data rows
  sorted. The value of the attribute controls how the column is used in determining the sort order.
  The <code>reversed</code> keyword means that the <dfn>column sort
  direction</dfn> is <i>reversed</i>, rather than <i>normal</i>, which is the default if the keyword
  is omitted. The number, if present, indicates the <dfn>column key ordinality</dfn>; if the number
  is omitted, the column is the primary key, as if the value 1 had been specified.

  <p class="note">
    Thus, <code>sorted="1"</code> indicates the table's primary key, <code>sorted="2"</code> its secondary key, and so forth.
  </p>

  <hr />

  A <dfn>sorting-capable <code>th</code> element</dfn> is a <code>th</code> element that matches
  all the following conditions simultaneously:

  <ul>

    <li>It corresponds to a <a>cell</a> whose <i>width</i> is 1.
    (Specifically, a <i>header cell</i>, since this is a <code>th</code> element.)</li>

    <li>There is no <a>cell</a> that corresponds to another
    <a>sorting-capable <code>th</code> element</a> that covers slots in the same <a>column</a> but on a higher (earlier) <a>row</a>.</li>

    <li>

    If the <a>cell</a>'s <a>table</a> has
    a <a>row group</a> corresponding to a <code>thead</code>
    element, the <a>cell</a> is in a <a>row
    group</a> that corresponds to the <em>first</em> <code>thead</code> element of the <a>cell</a>'s <a>table</a>.

    Otherwise: the <a>cell</a> is not in a <a>row group</a> corresponding to a <code>tfoot</code> element, and
    the <a>cell</a> is in the first <a>row</a>
    of the <a>table</a>.

    </li>

  </ul>

  <p class="note">
    In other words, each <a>column</a> can have one
  <a>sorting-capable <code>th</code> element</a>; this will be the highest <code>th</code> in
  a <code>thead</code> that spans no other columns, or, if there is no <code>thead</code>, the
  <code>th</code> in the first row (that is not in a <code>tfoot</code>), assuming it spans no
  columns.
  </p>

  The <dfn>sorting-capable <code>th</code> elements of the <code>table</code> element</dfn> <var>table</var> are the <a>sorting-capable
  <code>th</code> elements</a> whose <a>cell</a>'s <a>table</a> is <var>table</var>.

  A <code>table</code> element <var>table</var> is a <dfn>sorting-capable
  <code>table</code> element</dfn> if there are one or more <a>sorting-capable <code>th</code>
  elements of the <code>table</code> element</a> <var>table</var>.

  A <code>th</code> element is a <dfn>sorting-enabled <code>th</code> element</dfn> if it is a
  <a>sorting-capable <code>th</code> element</a> and it has a <code>sorted</code> attribute.

  The <dfn>sorting-enabled <code>th</code> elements of the <code>table</code> element</dfn> <var>table</var> are the <a>sorting-enabled
  <code>th</code> elements</a> whose <a>cell</a>'s <a>table</a> is <var>table</var>.

  A <code>table</code> element <var>table</var> is a <dfn>sorting-enabled
  <code>table</code> element</dfn> if there are one or more <a>sorting-capable <code>th</code>
  elements of the <code>table</code> element</a> <var>table</var>, and at least one of
  them is a <a>sorting-enabled <code>th</code> element</a> (i.e. at least one has a <code>sorted</code> attribute).

  A <code>table</code> element is a <dfn><code>table</code> element with a user-agent exposed
  sorting interface</dfn> if it is a <a>sorting-capable <code>table</code> element</a> and has
  a <code>sortable</code> attribute specified.

  A <dfn>sorting interface <code>th</code> element</dfn> is a <a>sorting-capable
  <code>th</code> element</a> whose <a>cell</a>'s <a>table</a> is a <a><code>table</code> element with a user-agent exposed
  sorting interface</a>.

  <hr />

  Each <code>table</code> element has a <dfn>currently-sorting flag</dfn>, which must initially
  be false.

  <hr />

  The <code>sorted</code> attribute must not be specified on
  <code>th</code> elements that are not <a>sorting-capable
  <code>th</code> elements</a>. The <code>sortable</code> attribute
  must not be specified on <code>table</code> elements that are not <a>sorting-capable <code>table</code> elements</a>.

  <div class="impl">

  To determine a <code>th</code> element's <code>sorted</code> attribute's
  <a>column sort direction</a> and <a>column key ordinality</a>, user agents must use
  the following algorithm:

  <ol>

    <li>Let <var>direction</var> be <i>normal</i>.

    </li><li>Let <var>have explicit direction</var> be false.

    </li><li>Let <var>ordinality</var> be 1.

    </li><li>Let <var>have explicit ordinality</var> be false.

    </li><li>Let <var>tokens</var> be the result of <a>splitting the attribute's value on spaces</a>.</li>

    <li>

    For each token <var>token</var> in <var>tokens</var>, run the appropriate
    steps from the following list:

    <dl class="switch">

      <dt>If <var>have explicit direction</var> is false and <var>token</var> is an
      <a>ASCII case-insensitive</a> match for the string "<code>reversed</code>"</dt>

      <dd>

      Let <var>direction</var> be <i>reversed</i> and <var>have explicit
      direction</var> be true.

      </dd>

      <dt>If <var>have explicit ordinality</var> is false</dt>

      <dd>

      <a>Parse <var>token</var> as an
      integer</a>. If this resulted in an error or the value zero, then ignore the token.
      Otherwise, set <var>ordinality</var> to the parsed value, and set <var>have
      explicit ordinality</var> to true.

      </dd>

      <dt>Otherwise</dt>

      <dd>Ignore the token.</dd>

    </dl>

    </li>

    <li>The <a>column sort direction</a> is the value of <var>direction</var>, and
    the <a>column key ordinality</a> is the value of <var>ordinality</var>.</li>

  </ol>

  </div>

  A <code>table</code> must not have two <code>th</code> elements whose <code>sorted</code> attribute have the same <a>column key
  ordinality</a>.

  <div class="impl">

  <hr />

  The <dfn>table sorting algorithm</dfn>, which is applied to a <code>table</code>, is as
  follows:

  <ol>

    <li>Let <var>table</var> be the <code>table</code> element being sorted.</li>

    <li>If <var>table</var>'s <a>currently-sorting flag</a> is true, then abort
    these steps.</li>

    <li>Set <var>table</var>'s <a>currently-sorting flag</a> to true.</li>

    <li><a>Fire a simple event</a> named <code>sort</code> that is
    cancelable at <var>table</var>.</li>

    <li>If the event fired in the previous step was canceled, then jump to the step labeled
    <i>end</i> below.</li>

    <li>

    If <var>table</var> is not now a <a>sorting-enabled <code>table</code>
    element</a>, then jump to the step labeled <i>end</i> below.

    <p class="note">
    Even if <var>table</var> was a <a>sorting-enabled <code>table</code>
    element</a> when the algorithm was invoked, the DOM might have been entirely changed by the
    event handlers for the <code>sort</code> event, so this has to be verified at
    this stage, not earlier.
  </p>

    </li>

    <li>Let <var>key heading cells</var> be the <a>sorting-enabled <code>th</code>
    elements of the <code>table</code> element</a> <var>table</var>.</li>

    <li>Sort <var>key heading cells</var> in ascending order of the <a>column key
    ordinality</a> of their <code>sorted</code> attributes, with those
    having the same <a>column key ordinality</a> being sorted in <a>tree order</a>.

    </li><li>

    Let <var>row collection cursor</var> be a pointer to an element, initially pointing
    at the first child of <var>table</var> that is after <var>table</var>'s first
    <code>thead</code>, if any, and that is either a <code>tbody</code> or a <code>tr</code>
    element, assuming there is one. If there is no such child, then jump to the step labeled
    <i>end</i> below.

    </li>

    <li>If <var>table</var> has no <a>row group</a>
    corresponding to a <code>thead</code> element, then set <var>ignore first group</var> to
    true. Otherwise, set it to false.</li>

    <li>

    Run these substeps:

    <ol>

      <li><i>Row loop</i>: Let <var>rows</var> be an empty list of <code>tr</code>
      elements.</li>

      <li>

      Run these substeps:

      <ol>

        <li>

        Run the appropriate steps from the following list:

        <dl class="switch">

          <dt>If <var>row collection cursor</var> points to a <code>tr</code> element

          </dt><dd>

          <ol>

            <li><i>Collect</i>: Append the element pointed to by <var>row collection
            cursor</var> to <var>rows</var>.</li>

            <li>If there are no <code>tr</code> or <code>tbody</code> children of <var>table</var> that are later siblings of the element pointed to by <var>row
            collection cursor</var>, or if the next such child is a <code>tbody</code> element, then jump
            to the step labeled <i>group</i> below.</li>

            <li>Let <var>row collection cursor</var> point to the next <code>tr</code> child
            of <var>table</var> that is a later sibling of the element pointed to by <var>row collection cursor</var>.</li>

            <li>Jump back to the step labeled <i>collect</i> above.</li>

          </ol>

          </dd>

          <dt>If <var>row collection cursor</var> points to a <code>tbody</code> element

          </dt><dd>

          <ol>

            <li>Place all the <code>tr</code> element children of the element pointed to by <var>row collection cursor</var> into <var>rows</var>, in <a>tree
            order</a>.</li>

            <li>If <var>rows</var> is empty, jump to the step labeled <i>increment loop</i>
            below.</li>

          </ol>

          </dd>

        </dl>

        </li>

        <li><i>Group</i>: Let <var>groups</var> be an empty list of groups of <code>tr</code>
        elements.</li>

        <li>Let <var>group</var> be an empty group of <code>tr</code> elements.</li>

        <li>Let <var>group cursor</var> be a pointer to an element, initially pointing at the
        first <code>tr</code> element in <var>rows</var>.</li>

        <li>

        Run these substeps:

        <ol>

          <li><i>Start group</i>: Let <var>pending rows in group</var> be 1.</li>

          <li>

          Run these substeps:

          <ol>

            <li><i>Group loop</i>: Append the <code>tr</code> element pointed to by <var>group
            cursor</var> to <var>group</var>.</li>

            <li>If there are any <a>cells</a> whose highest <a>row</a>'s element is the one pointed to by <var>group
            cursor</var>, then let <var>tallest height</var> be the number of rows covered by the
            tallest such <a>cell</a>.</li>

            <li>If <var>tallest height</var> is greater than <var>pending rows in
            group</var> then set <var>pending rows in group</var> to <var>tallest
            height</var>.</li>

            <li>Decrement <var>pending rows in group</var> by one.</li>

            <li>Let <var>group cursor</var> point to the next <code>tr</code> element in <var>rows</var>, if any; otherwise, let it be null.</li>

            <li>If <var>group cursor</var> is not null and <var>pending rows in
            group</var> is not zero, jump back to the step labeled <i>group loop</i>.</li>

          </ol>

          </li>

          <li>Append a new group to <var>groups</var> consisting of the <code>tr</code>
          elements in <var>group</var>.</li>

          <li>Empty <var>group</var>.</li>

          <li>If <var>group cursor</var> is not null, then jump back to the step labeled <i>start
          group</i>.</li>

        </ol>

        </li>

        <li>If <var>ignore first group</var> is true, then drop the first group in <var>groups</var> and set <var>ignore first group</var> to false.</li>

        <li>

        Run these steps:

        <ol>

          <li><i>Drop leading header groups</i>: If <var>groups</var> is now empty, jump to the
          step labeled <i>increment loop</i> below.</li>

          <li>If the first group of <var>groups</var> consists of <code>tr</code> elements
          whose element children are all <code>th</code> elements, then drop the first group in <var>groups</var> and jump back to the previous step (labeled <i>drop leading header
          groups</i>).</li>

        </ol>

        </li>

        <li>Let <var>insertion point</var> be a placeholder in a DOM tree, which can be used
        to reinsert nodes at a specific point in the DOM. Insert <var>insertion point</var> into
        the parent of the first <code>tr</code> element of the first group in <var>groups</var>,
        immediately before that <code>tr</code> element.</li>

        <li>

        Sort the groups in <var>groups</var>, using the following algorithm to decide the
        relative order of any two groups <var>a</var> and <var>b</var> (the algorithm
        either returns that <var>a</var> comes before <var>b</var>, or that <var>b</var> comes before <var>a</var>):

        <ol>

          <li>Let <var>key index</var> be an index into <var>key heading
          cells</var>, initially denoting the first element in the list.</li>

          <li>Let <var>direction</var> be a sort direction, initially <i>ascending</i>. Its
          other possible value is <i>descending</i>. When <var>direction</var> is
          <i>toggled</i>, that means that if its value is <i>ascending</i>, it must be changed to
          <i>descending</i>, and when its value is <i>descending</i>, it must be changed to
          <i>ascending</i>.</li>

          <li>

          Run these substeps:

          <ol>

            <li><i>Column loop</i>: Let <var>th</var> be the <var>key index</var>th
            <code>th</code> in <var>key heading cells</var>.</li>

            <li>If <var>th</var>'s <code>sorted</code> attribute's
            <a>column sort direction</a> is <i>reversed</i>, then toggle <var>direction</var>.</li>

            <li>Let <var>tentative order</var> be the result of <a>comparing two row groups
            using the <code>th</code> element</a> <var>th</var>, with <var>a</var> and
            <var>b</var> as the rows.</li>

            <li>If <var>tentative order</var> is not "equal", then jump to the step labeled
            <i>return</i> below.</li>

            <li>Increment <var>key index</var>.</li>

            <li>If <var>key index</var> still denotes a <code>th</code> element in <var>key heading cells</var>, then jump back to the step above labeled <i>column
            loop</i>.</li>

          </ol>

          </li>

          <li>If <var>a</var>'s <code>tr</code> elements precede <var>b</var>'s in
          <a>tree order</a>, then let <var>tentative order</var> be "a before b".
          Otherwise, let <var>tentative order</var> be "b before a".</li>

          <li><i>Return</i>: Return the relative order given by the matching option from the following
          list:

          <dl class="switch">

            <dt>If <var>direction</var> is <i>ascending</i> and <var>tentative
            order</var> is "a before b"</dt>

            <dd>Return that <var>a</var> comes before <var>b</var>.</dd>

            <dt>If <var>direction</var> is <i>ascending</i> and <var>tentative
            order</var> is "b before a"</dt>

            <dd>Return that <var>b</var> comes before <var>a</var>.</dd>

            <dt>If <var>direction</var> is <i>descending</i> and <var>tentative
            order</var> is "a before b"</dt>

            <dd>Return that <var>b</var> comes before <var>a</var>.</dd>

            <dt>If <var>direction</var> is <i>descending</i> and <var>tentative
            order</var> is "b before a"</dt>

            <dd>Return that <var>a</var> comes before <var>b</var>.</dd>

          </dl>

          </li>

        </ol>

        When the user agent is required to <dfn>compare two row groups using the <code>th</code> element</dfn> <var>th</var>,
        with <var>a</var> and <var>b</var> being the two row groups respectively, the
        user agent must run the following steps:

        <ol>

          <li>Let <var>x</var> be the <var>x</var>-coordinate of the slots that
          <code>th</code> covers in its <a>table</a>.</li>

          <li>

          Let <var>cell<sub>a</sub></var> be the element corresponding to the <a>cell</a> in the first <a>row</a> of group
          <var>a</var> that covers the slot in that <a>row</a> whose
          <var>x</var>-coordinate is <var>x</var>.

          Let <var>cell<sub>b</sub></var> be the element corresponding to the <a>cell</a> in the first <a>row</a> of group
          <var>b</var> that covers the slot in that <a>row</a> whose
          <var>x</var>-coordinate is <var>x</var>.

          In either case, if there's no <a>cell</a> that actually covers
          the slot, then use the value <i>null</i> instead.

          </li>

          <li>

          Let <var>type<sub>a</sub></var> and <var>value<sub>a</sub></var> be
          the <a>type and value of the cell</a> <var>cell<sub>a</sub></var>, as defined
          below.

          Let <var>type<sub>b</sub></var> and <var>value<sub>b</sub></var> be
          the <a>type and value of the cell</a> <var>cell<sub>b</sub></var>, as defined
          below.

          The <dfn>type and value of the cell</dfn> <var>cell</var> are computed as follows.

          <ol>

            <li>If <var>cell</var> is <i>null</i>, then the type is "string" and the value is
            the empty string; abort these steps.</li>

            <li>If, ignoring <a>inter-element whitespace</a> and nodes other than
            <a>Element</a> and <a>Text</a> nodes, <var>cell</var> has only one child
            and that child is a <code>data</code> element, then the value is the value of that
            <code>data</code> element's <code>value</code> attribute, if there is
            one, or the empty string otherwise; the type is "string".

            </li><li>If, ignoring <a>inter-element whitespace</a> and nodes other than
            <a>Element</a> and <a>Text</a> nodes, <var>cell</var> has only one child
            and that child is a <code>progress</code> element, then the value is the value of that
            <code>progress</code> element's <code>value</code> attribute, if
            there is one, or the empty string otherwise; the type is "string".

            </li><li>If, ignoring <a>inter-element whitespace</a> and nodes other than
            <a>Element</a> and <a>Text</a> nodes, <var>cell</var> has only one child
            and that child is a <code>meter</code> element, then the value is the value of that
            <code>meter</code> element's <code>value</code> attribute, if there is
            one, or the empty string otherwise; the type is "string".

            </li><li>

            If, ignoring <a>inter-element whitespace</a> and nodes other than
            <a>Element</a> and <a>Text</a> nodes, <var>cell</var> has only one
            child and that child is a <code>time</code> element, then the value is the
            <a>machine-readable equivalent of the element's contents</a>, if any, and the type is
            the kind of value that is thus obtained
            (a <a>month</a>,
            a <a>date</a>,
            a <a>yearless date</a>,
            a <a>time</a>,
            a <a>floating date and time</a>,
            a <a>time-zone offset</a>,
            a <a>global date and time</a>,
            a <a>week</a>,
            a year, or
            a <a>duration</a>);
            abort these steps after completing this one.

            If there is no machine-readable equivalent, then the type is "string" and the value is
            the empty string.

            If the type is
            a <a>month</a>,
            a <a>date</a>,
            a <a>week</a>, or
            a year,
            then change the value to be the instant in time (with no time zone) that describes the
            earliest moment that the value represents, and change the type to be
            a <a>floating date and time</a>.

            <p class="example">For example, if the cell was <code>&lt;td&gt;&lt;time&gt;2011-11&lt;/time&gt;</code> then for sorting purposes the value is
            interpreted as "2011-11-01T00:00:00.000" and the type is treated as a <a>floating date and time</a> rather than a <a>month</a>.</p>

            <p class="example">Similarly, if the cell was <code>&lt;td&gt;&lt;time
            datetime="2014"&gt;MMXIV&lt;/time&gt;</code> then for sorting purposes the value is interpreted as
            "2014-01-01T00:00:00.000" and the type is treated as a <a>floating date and time</a> rather than a year.</p>

            </li>

            <li>The value is the element's <code>textContent</code>. The type is "string".</li>

          </ol>

          </li>

          <li>

          If <var>type<sub>a</sub></var> and <var>type<sub>b</sub></var> are not
          equal, then: return "a before b" if <var>type<sub>a</sub></var> is earlier in the
          following list than <var>type<sub>b</sub></var>, otherwise, return "b before a";
          then, abort these steps.

          <ol class="brief">
            <li><a>time</a></li>
            <li><a>yearless date</a></li>
            <li><a>floating date and time</a></li>
            <li><a>global date and time</a></li>
            <li><a>time-zone offset</a></li>
            <li><a>duration</a></li>
            <li>"string"</li>
          </ol>

          </li>

          <li>If <var>value<sub>a</sub></var> and <var>value<sub>b</sub></var> are
          equal, then return "equal" and abort these steps.</li>

          <li>

          If <var>type<sub>a</sub></var> and <var>type<sub>b</sub></var> are not
          "string", then: if <var>value<sub>a</sub></var> is earlier than <var>value<sub>b</sub></var> then return "a before b" and abort these steps, otherwise,
          return "b before a" and abort these steps.

          Values sort in their natural order, with the following additional constraints:

          For <a>time</a> values, 00:00:00.000 is the earliest value and
          23:59:59.999 is the latest value.

          For <a>yearless date</a> values, 01-01 is the earliest
          value and 12-31 is the latest value; 02-28 is earlier than 02-29 which is earlier than
          03-01.

          Values that are <a>floating date and time</a> compare as
          if they were in the same time zone.

          For <a>time-zone offset</a> values, -23:59 is the earliest
          value and +23:59 is the latest value.

          </li>

          <li>

          Let <var>components<sub>a</sub></var> be the result of <a>parsing the sort
          key</a> <var>value<sub>a</sub></var>.

          Let <var>components<sub>b</sub></var> be the result of <a>parsing the sort
          key</a> <var>value<sub>b</sub></var>.

          As described below, <var>components<sub>a</sub></var> and <var>components<sub>b</sub></var> are tuples consisting of a list of <var>n</var>
          <i>numbers</i>, a list of <var>n</var> <i>number strings</i>, a list of <var>n</var>+1 <i>non-numeric strings</i>, and a list of 2<var>n</var>+1 <i>raw
          strings</i>, for any non-negative integer value of <var>n</var> (zero or more).

          </li>

          <li>

          Let <var>order</var> be the result of a <a>locale-specific string
          comparison</a> of <var>components<sub>a</sub></var>'s first <i>non-numeric
          string</i> and <var>components<sub>b</sub></var>'s first <i>non-numeric string</i>,
          in the context of <var>th</var>.

          If <var>order</var> is not "equal" then return <var>order</var> and abort
          these steps.

          </li>

          <li>

          If <var>components<sub>a</sub></var> and <var>components<sub>b</sub></var> both have exactly one <i>number</i>, then run these
          substeps:

          <ol>

            <li>

            If <var>components<sub>a</sub></var>'s <i>number</i> is less than <var>components<sub>b</sub></var>'s <i>number</i>, return "a before b".

            If <var>components<sub>b</sub></var>'s <i>number</i> is less than <var>components<sub>a</sub></var>'s <i>number</i>, return "b before a".

            </li>

            <li>

            Let <var>order</var> be the result of a <a>locale-specific string
            comparison</a> of <var>components<sub>a</sub></var>'s second <i>non-numeric
            string</i> and <var>components<sub>b</sub></var>'s second <i>non-numeric
            string</i>, in the context of <var>th</var>.

            If <var>order</var> is not "equal" then return <var>order</var> and
            abort these steps.

            </li>

            <li>

            Let <var>order</var> be the result of a <a>locale-specific string
            comparison</a> of <var>components<sub>a</sub></var>'s <i>number string</i> and
            <var>components<sub>b</sub></var>'s <i>number string</i>, in the context of <var>th</var>.

            If <var>order</var> is not "equal" then return <var>order</var> and
            abort these steps.

            </li>

          </ol>

          Otherwise, run these substeps:

          <ol>

            <li>

            If <var>components<sub>a</sub></var> has zero <i>numbers</i> but <var>components<sub>b</sub></var> has more than zero <i>numbers</i>, return "a before
            b".

            If <var>components<sub>b</sub></var> has zero <i>numbers</i> but <var>components<sub>a</sub></var> has more than zero <i>numbers</i>, return "b before
            a".

            </li>

            <li>

            If <var>components<sub>a</sub></var> has one <i>number</i>, return "a before
            b".

            If <var>components<sub>b</sub></var> has one <i>number</i>, return "b before
            a".

            </li>

            <li>

            If <var>components<sub>a</sub></var> and <var>components<sub>b</sub></var> have more than one <i>number</i>, run these substeps:

            <ol>

              <li>Let <var>count</var> be the smaller of the number of <i>numbers</i> in <var>components<sub>a</sub></var> and the number of <i>numbers</i> in <var>components<sub>b</sub></var>.</li>

              <li>For each <i>number</i> in <var>components<sub>a</sub></var> and <var>components<sub>b</sub></var> from the first to the <var>count</var>th, in
              order: if <var>components<sub>a</sub></var>'s <i>number</i> is less than <var>components<sub>b</sub></var>'s <i>number</i>, then return "a before b" and abort
              these steps; otherwise, if <var>components<sub>b</sub></var>'s <i>number</i> is
              less than <var>components<sub>a</sub></var>'s <i>number</i>, return "b before a"
              and abort these steps.</li>

              <li>

              If <var>components<sub>a</sub></var> has fewer <i>numbers</i> than <var>components<sub>b</sub></var>, return "a before b" and abort these steps.

              If <var>components<sub>b</sub></var> has fewer <i>numbers</i> than <var>components<sub>a</sub></var>, return "b before a" and abort these steps.

              </li>

              <li>Let <var>index</var> be zero.</li>

              <li>

              <i>String loop</i>: Let <var>order</var> be the result of a <a>locale-specific
              string comparison</a> of <var>components<sub>a</sub></var>'s <var>index</var>th <i>number string</i> and <var>components<sub>b</sub></var>'s <var>index</var>th <i>number string</i>,
              in the context of <var>th</var>.

              If <var>order</var> is not "equal" then return <var>order</var> and
              abort these steps.

              </li>

              <li>

              Increment <var>index</var>.

              </li>

              <li>

              Let <var>order</var> be the result of a <a>locale-specific string
              comparison</a> of <var>components<sub>a</sub></var>'s <var>index</var>th <i>separator string</i> and <var>components<sub>b</sub></var>'s <var>index</var>th <i>separator
              string</i>, in the context of <var>th</var>.

              If <var>order</var> is not "equal" then return <var>order</var> and
              abort these steps.

              </li>

              <li>

              If <var>index</var> is less than the number of <i>numbers</i> in <var>components<sub>a</sub></var> and <var>components<sub>b</sub></var>, jump back
              to the step labeled <i>string loop</i>.

              </li>

            </ol>

            </li>

          </ol>

          </li>

          <li>

          Let <var>index</var> be zero.

          </li>

          <li>

          Run these substeps:

          <ol>

            <li>

            <i>Final loop:</i> Let <var>order</var> be the result of a <a>raw string
            comparison</a> of <var>components<sub>a</sub></var>'s <var>n</var>th
            <i>raw string</i> and <var>components<sub>b</sub></var>'s <var>n</var>th
            <i>raw string</i>.

            If <var>order</var> is not "equal" then return <var>order</var> and abort
            these steps.

            </li>

            <li>

            Increment <var>index</var>.

            </li>

            <li>

            If <var>index</var> is less than the number of <i>raw strings</i> in <var>components<sub>a</sub></var> and <var>components<sub>b</sub></var>, jump back
            to the step labeled <i>final loop</i>.

            </li>

          </ol>

          </li>

          <li>

          Return "equal".

          </li>

        </ol>

        </li>

        <li>Let <var>new order</var> be a list of <code>tr</code> elements consisting of the
        <code>tr</code> elements of all the groups in the newly ordered <var>groups</var>, with
        the <code>tr</code> elements being in the same order as the groups to which they belong are in
        <var>groups</var>, and the <code>tr</code> elements within each such group themselves
        being ordered in <a>tree order</a>.</li>

        <li><a>Remove</a> all the <code>tr</code> elements in <var>new order</var> from their parents, in <a>tree order</a>.</li>

        <li><a>Insert</a> all the <code>tr</code> elements in <var>new order</var> into the DOM at the location of <var>insertion point</var>, in
        the order these elements are found in <var>new order</var>.</li>

        <li>Remove <var>insertion point</var> from the DOM.</li>

      </ol>

      </li>

      <li><i>Increment loop</i>: If there are no <code>tr</code> or <code>tbody</code> children of
      <var>table</var> that are later siblings of the element pointed to by <var>row
      collection cursor</var>, then jump to the step labeled <i>end</i> below.</li>

      <li>Let <var>row collection cursor</var> point to the next <code>tr</code> or
      <code>tbody</code> child of <var>table</var> that is a later sibling of the element
      pointed to by <var>row collection cursor</var>.</li>

      <li>Jump back to the step labeled <i>row loop</i> above.</li>

    </ol>

    </li>

    <li><i>End</i>: Set <var>table</var>'s <a>currently-sorting flag</a> to
    false.</li>

  </ol>

  When a user agent is to <dfn>parse the sort key</dfn> <var>value</var>, it must run the following steps. These return a tuple consisting of a list
  of <var>n</var> <i>numbers</i>, a list of <var>n</var> <i>number strings</i>, a
  list of <var>n</var>+1 <i>non-numeric strings</i>, and a list of 2<var>n</var>+1
  <i>raw strings</i>, respectively, for any non-negative integer value of <var>n</var> (zero or
  more).

  <ol>

    <li>
    Let <var>raw strings</var> be a list of strings initially containing just one entry, an empty string.
    </li>

    <li>
    Let <var>negatives prejudiced</var> be false.
    Let <var>decimals prejudiced</var> be false.
    Let <var>exponents prejudiced</var> be false.
    </li>

    <li>
    Let <var>buffer</var> be the empty string.
    Let <var>index</var> be zero.
    Let <dfn><var>mode</var></dfn> be "<a>separator</a>".

    When a subsequent step in this algorithm says to <dfn>push the buffer</dfn>, the user agent must run the following substeps:

    <ol>

      <li>Add an entry to <var>raw strings</var> that consists of the value of <var>buffer</var>.</li>

      <li>Add an entry to <var>raw strings</var> that is the empty string.</li>

      <li>Decrement <var>index</var> by one.</li>

      <li>Set <var>mode</var> to "<a>separator</a>".</li>

    </ol>

    </li>

    <li>
    Let <var>checkpoint buffer</var> be the empty string.
    Let <var>checkpoint index</var> be zero.

    When a subsequent step in this algorithm says to <dfn>checkpoint</dfn>, the user agent must run the following substeps:

    <ol>
      <li>Set the <var>checkpoint buffer</var> to the value of <var>buffer</var>.
      </li><li>Set the <var>checkpoint index</var> to the value of <var>index</var>.
    </li></ol>

    When a subsequent step in this algorithm says to <dfn>push the checkpoint</dfn>, the user agent must run the following substeps:

    <ol>

      <li>Add an entry to <var>raw strings</var> that consists of the value of <var>checkpoint buffer</var>.</li>

      <li>Add an entry to <var>raw strings</var> that is the empty string.</li>

      <li>Decrement <var>index</var> by one.</li>

      <li>Set <var>mode</var> to "<a>separator</a>".</li>

    </ol>

    </li>

    <li>

    Run through the following steps repeatedly until the condition in the last step is met.

    <ol>

      <li>

      <i>Top of loop</i>: If <var>index</var> is equal to or greater than the number of
      characters in <var>value</var>, let <var>c</var> be EOF. Otherwise, let <var>c</var> be the <var>index</var>th character in <var>value</var>.

      </li>

      <li>

      Run the appropriate steps from the following list:

      <pre>parse using c, index, buffer, negatives prejudiced, decimals prejudiced, exponents prejudiced
      posting to: the last entry in <var>raw strings</var>
      buffering to: <var>buffer</var>
      defined above: push the buffer, checkpoint, push the checkpoint
      prefix xrefs with "sort parser"
      switch using mode
        case separator:
          c=space character:
            negatives prejudiced := false
            decimals prejudiced := false
            exponents prejudiced := false
            post c
          c=- unless negatives prejudiced:
            buffer := c
            mode := negative
          c=. unless decimals prejudiced:
            buffer := c
            mode := leading-decimal
          c=0-9:
            buffer := c
            mode := integral
          c=letter:
            exponents prejudiced := true
            post c
          c=eof:
            nop
          otherwise:
            post c
        case negative:
          c=-:
            negatives prejudiced := true
            post buffer
            post c
            mode := separator
          c=. unless decimals prejudiced:
            buffer c
            mode := leading-decimal
          c=0-9:
            buffer c
            mode := integral
          otherwise:
            post buffer
            dec index
            mode := separator
        case integral:
          c=-:
            negatives prejudiced := true
            push the buffer
          c=. unless decimals prejudiced:
            checkpoint
            buffer c
            mode := decimal
          c=0-9:
            post c
          c=e/E unless exponents prejudiced:
            checkpoint
            buffer c
            mode := exponent
          otherwise:
            push the buffer
        case leading-decimal:
          c=0-9:
            buffer c
            mode := decimal
          otherwise:
            post buffer
            dec index
            mode := separator
        case decimal:
          c=-:
            negatives prejudiced := true
            push the buffer
          c=. if numbers are coming:
            decimals prejudiced := true
            push the checkpoint
          c=. if numbers are not coming:
            push the buffer
          c=0-9:
            buffer c
          c=e/E unless exponents prejudiced:
            checkpoint
            buffer c
            mode := exponent
          otherwise:
            push the buffer
        case exponent:
          c=- unless negatives prejudiced:
            buffer c
            mode := exponent-negative
          c=.:
            decimals prejudiced := true
            push the checkpoint
          c=0-9:
            buffer c
            mode := exponent-number
          c=e/E:
            exponents prejudiced := true
            push the checkpoint
          otherwise:
            push the checkpoint
        case exponent-negative:
          c=-:
            negatives prejudiced := true
            push the checkpoint
          c=.:
            decimals prejudiced := true
            push the checkpoint
          c=0-9:
            buffer c
            mode := exponent-negative-number
          c=e/E:
            exponents prejudiced := true
            push the checkpoint
          otherwise:
            push the checkpoint
        case exponent-number:
          c=-:
            negatives prejudiced := true
            push the buffer
          c=.:
            decimals prejudiced := true
            push the checkpoint
          c=0-9:
            buffer c
          c=e/E:
            exponents prejudiced := true
            push the checkpoint
          otherwise:
            push the buffer
        case exponent-negative-number:
          c=-:
            negatives prejudiced := true
            push the checkpoint
          c=.:
            decimals prejudiced := true
            push the checkpoint
          c=0-9:
            buffer c
          c=e/E:
            exponents prejudiced := true
            push the checkpoint
          otherwise:
            push the buffer
      </pre>

      </li>

      <li>

      Increment <var>index</var> by one.

      </li>

      <li>

      If <var>index</var> is greater than the number of characters in <var>value</var>, stop repeating these substeps and continue along the overall steps.
      Otherwise, return to the step labeled <i>top of loop</i>.

      </li>

    </ol>

    </li>

    <li>
    Let <var>numbers</var> be an empty list.
    Let <var>number strings</var> be an empty list.
    Let <var>non-numeric strings</var> be an empty list.
    </li>

    <li>

    For each even-numbered entry in <var>raw strings</var>, in order, starting from the
    first entry (numbered 0), append an entry to <var>non-numeric strings</var> that
    consists of the result of <a>trimming and collapsing</a> the value of the entry.

    </li>

    <li>

    If <var>raw strings</var> has more than one entry, then, for each odd-numbered entry
    in <var>raw strings</var>, in order, starting from the second entry (numbered 1),
    append an entry to <var>number strings</var> that consists of the value of the entry,
    and append an entry to <var>number strings</var> that consists of the result of parsing
    the value of the entry using the <a>rules for parsing floating-point number
    values</a>.

    </li>

    <li>

    Return <var>numbers</var>, <var>number strings</var>, <var>non-numeric strings</var>, and <var>raw strings</var> respectively.

    </li>

  </ol>

  When the user agent is required by the step above to perform a <dfn>locale-specific string
  comparison</dfn> of two strings <var>a</var> and <var>b</var> in the context of
  an element <var>e</var>, the user agent must apply the Unicode Collation Algorithm, using
  the Default Unicode Collation Element Table as customized for the <a>language</a> of the
  element <var>e</var> in the Common Locale Data Repository, to the strings <var>a</var> and <var>b</var>, ignoring case. If the result of this algorithm places
  <var>a</var> first, then return "a before b"; if it places <var>b</var> first,
  then return "b before a"; otherwise, if they compare as equal, then return "equal". [[!UCA]] [[!CLDR]]

  When the user agent is required by the step above to perform a <dfn>raw string comparison</dfn>
  of two strings <var>a</var> and <var>b</var>, the user agent must apply the
  Unicode Collation Algorithm, using the Default Unicode Collation Element Table without
  customizations, to the strings <var>a</var> and <var>b</var>. If the result of
  this algorithm places <var>a</var> first, then return "a before b"; if it places <var>b</var> first, then return "b before a"; otherwise, if they compare as equal, then return
  "equal". [[!UCA]]

  Where the steps above refer to <dfn>trimming and collapsing</dfn> a string <var>value</var>, it means running the following algorithm:

  <ol>

    <li><a>Strip leading and trailing whitespace</a> from <var>value</var>.</li>

    <li>Replace any sequence of one or more <a>space characters</a>
    in <var>value</var> with a single U+0020 SPACE character.</li>

  </ol>

  <hr />

  When any of the descendants of a <a>sorting-enabled <code>table</code> element</a> change
  in any way (including attributes changing), and when a <code>table</code> element becomes a
  <a>sorting-enabled <code>table</code> element</a>, the <code>table</code> element is said to
  become <dfn>a table with a pending sort</dfn>. When a <code>table</code> element becomes <a>a
  table with a pending sort</a>, the user agent must <a>queue a microtask</a> that applies
  the <a>table sorting algorithm</a> to that <code>table</code>, and then flags the
  <code>table</code> as no longer being <a>a table with a pending sort</a>.

  <hr />

  When the user agent is to <dfn>set the sort key</dfn> to a <code>th</code> element <var>target</var>, it must run the following algorithm:

  <ol>

    <li>Let <var>table</var> be the <code>table</code> of the <a>table</a> of which <var>target</var> is a header cell.</li>

    <li>If <code>th</code> is a <a>sorting-enabled <code>th</code> element</a> whose
    <a>column key ordinality</a> is 1, then: if its <a>column sort direction</a> is
    <i>normal</i>, set that element's <code>sorted</code> attribute to the
    string "<code>reversed</code>", otherwise, set it to the empty string; then, abort these
    steps.</li>

    <li>Let <var>current headers</var> be the <a>sorting-enabled <code>th</code>
    elements of the <code>table</code> element</a> <var>table</var>, excluding <var>target</var>.</li>

    <li>Sort <var>current headers</var> by their <code>sorted</code> attributes' <a>column key ordinality</a>, in ascending
    order, with elements that have the same <a>column key ordinality</a> being sorted in
    <a>tree order</a>.</li>

    <li>Let <var>level</var> be 2.</li>

    <li>

    For each <code>th</code> element <var>th</var> in <var>current
    headers</var>, in order, run the following substeps:

    <ol>

      <li>If <var>th</var>'s <code>sorted</code> attribute's
      <a>column sort direction</a> is <i>normal</i>, then set <var>th</var>'s <code>sorted</code> attribute to a <a>valid integer</a> whose value is
      <var>level</var>. Otherwise, set it to the concatenation of the string "<code>reversed</code>", a U+0020 SPACE character, and a <a>valid integer</a> whose
      value is <var>level</var>.

      </li><li>Increment <var>level</var> by 1.</li>

    </ol>

    </li>

    <li>Set <var>target</var>'s <code>sorted</code> attribute to
    the empty string.</li>

  </ol>

  <hr />

  The <a>activation behavior</a> of a <a>sorting interface <code>th</code>
  element</a> is to <a>set the sort key</a> to the <code>th</code> element.

  <p class="note">
    The <code>table</code> will be sorted the next time the user agent <a>performs a microtask checkpoint</a>.
  </p>

  </div>

  <dl class="domintro">

    <dt><var>th</var> . <code>sort</code>()</dt>

    <dd>

    Act as if the user had indicated that this was to be the new primary sort column.

    The <code>table</code> won't actually be sorted until the script terminates.

    </dd>

    <dt><var>table</var> . <code>stopSorting</code>()</dt>

    <dd>

    Removes all the <code>sorted</code> attributes that are causing the
    table to automatically sort its contents, if any.

    </dd>

  </dl>

  <div class="impl">

  The <code>th</code> element's <dfn><code>sort()</code></dfn> method, when
  invoked, must run the following steps:

  <ol>

    <li>If the <code>th</code> element is not a <a>sorting-capable <code>th</code>
    element</a>, then abort these steps.</li>

    <li>

    <a>Set the sort key</a> to the <code>th</code> element.

    <p class="note">
    The <code>table</code> will be sorted the next time the user agent <a>performs a microtask checkpoint</a>.
  </p>

    </li>

  </ol>

  The <code>table</code> element's <dfn><code>stopSorting()</code></dfn> method, when invoked, must remove
  the <code>sorted</code> attribute of all the <a>sorting-enabled
  <code>th</code> elements of the table element</a> on which the method was invoked.

  </div>

<h4 id="examples">Examples</h4>

  <em>This section is non-normative.</em>

  The following shows how might one mark up the bottom part of table 45 of the <cite>Smithsonian
  physical tables, Volume 71</cite>:

  <pre highlight="html">
&lt;table&gt;
  &lt;caption&gt;Specification values: &lt;b&gt;Steel&lt;/b&gt;, &lt;b&gt;Castings&lt;/b&gt;,
  Ann. A.S.T.M. A27-16, Class B;* P max. 0.06; S max. 0.05.&lt;/caption&gt;
  &lt;thead&gt;
  &lt;tr&gt;
    &lt;th rowspan=2&gt;Grade.&lt;/th&gt;
    &lt;th rowspan=2&gt;Yield Point.&lt;/th&gt;
    &lt;th colspan=2&gt;Ultimate tensile strength&lt;/th&gt;
    &lt;th rowspan=2&gt;Per cent elong. 50.8mm or 2 in.&lt;/th&gt;
    &lt;th rowspan=2&gt;Per cent reduct. area.&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;kg/mm&lt;sup&gt;2&lt;/sup&gt;&lt;/th&gt;
    &lt;th&gt;lb/in&lt;sup&gt;2&lt;/sup&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;Hard&lt;/td&gt;
    &lt;td&gt;0.45 ultimate&lt;/td&gt;
    &lt;td&gt;56.2&lt;/td&gt;
    &lt;td&gt;80,000&lt;/td&gt;
    &lt;td&gt;15&lt;/td&gt;
    &lt;td&gt;20&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Medium&lt;/td&gt;
    &lt;td&gt;0.45 ultimate&lt;/td&gt;
    &lt;td&gt;49.2&lt;/td&gt;
    &lt;td&gt;70,000&lt;/td&gt;
    &lt;td&gt;18&lt;/td&gt;
    &lt;td&gt;25&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Soft&lt;/td&gt;
    &lt;td&gt;0.45 ultimate&lt;/td&gt;
    &lt;td&gt;42.2&lt;/td&gt;
    &lt;td&gt;60,000&lt;/td&gt;
    &lt;td&gt;22&lt;/td&gt;
    &lt;td&gt;30&lt;/td&gt;
  &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
    </pre>

  This table could look like this:

  <table>
    <caption>Specification values: <b>Steel</b>, <b>Castings</b>,
    Ann. A.S.T.M. A27-16, Class B;* P max. 0.06; S max. 0.05.</caption>
    <thead>
    <tr>
      <th rowspan="2">Grade.</th>
      <th rowspan="2">Yield Point.</th>
      <th colspan="2">Ultimate tensile strength</th>
      <th rowspan="2">Per cent elong. 50.8&nbsp;mm or&nbsp;2&nbsp;in.</th>
      <th rowspan="2">Per cent reduct. area.</th>
    </tr>
    <tr>
      <th>kg/mm<sup>2</sup></th>
      <th>lb/in<sup>2</sup></th>
    </tr>
    </thead>
    <tbody>
    <tr>
      <td>Hard</td>
      <td>0.45 ultimate</td>
      <td>56.2</td>
      <td>80,000</td>
      <td>15</td>
      <td>20</td>
    </tr>
    <tr>
      <td>Medium</td>
      <td>0.45 ultimate</td>
      <td>49.2</td>
      <td>70,000</td>
      <td>18</td>
      <td>25</td>
    </tr>
    <tr>
      <td>Soft</td>
      <td>0.45 ultimate</td>
      <td>42.2</td>
      <td>60,000</td>
      <td>22</td>
      <td>30</td>
    </tr>
    </tbody>
  </table>

  <hr />

  The following shows how one might mark up the gross margin table on page 46 of Apple, Inc's
  10-K filing for fiscal year 2008:

  <pre highlight="html">
&lt;table&gt;
  &lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;
    &lt;th&gt;2008
    &lt;th&gt;2007
    &lt;th&gt;2006
  &lt;tbody&gt;
  &lt;tr&gt;
    &lt;th&gt;Net sales
    &lt;td&gt;$ 32,479
    &lt;td&gt;$ 24,006
    &lt;td&gt;$ 19,315
  &lt;tr&gt;
    &lt;th&gt;Cost of sales
    &lt;td&gt;  21,334
    &lt;td&gt;  15,852
    &lt;td&gt;  13,717
  &lt;tbody&gt;
  &lt;tr&gt;
    &lt;th&gt;Gross margin
    &lt;td&gt;$ 11,145
    &lt;td&gt;$  8,154
    &lt;td&gt;$  5,598
  &lt;tfoot&gt;
  &lt;tr&gt;
    &lt;th&gt;Gross margin percentage
    &lt;td&gt;34.3%
    &lt;td&gt;34.0%
    &lt;td&gt;29.0%
&lt;/table&gt;
    </pre>

  This table could look like this:

  <table class="apple-table-examples e1">
    <thead>
      <tr>
        <th></th>
        <th>2008</th>
        <th>2007</th>
        <th>2006</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>Net sales</th>
        <td>$ 32,479</td>
        <td>$ 24,006</td>
        <td>$ 19,315</td>
      </tr>
      <tr>
        <th>Cost of sales</th>
        <td>21,334</td>
        <td>15,852</td>
        <td>13,717</td>
      </tr>
    </tbody>
    <tbody>
      <tr>
        <th>Gross margin</th>
        <td>$ 11,145</td>
        <td>$  8,154</td>
        <td>$  5,598</td>
      </tr>
    </tbody>
    <tfoot>
      <tr>
        <th>Gross margin percentage</th>
        <td>34.3%</td>
        <td>34.0%</td>
        <td>29.0%</td>
      </tr>
    </tfoot>
  </table>

  <hr />

  The following shows how one might mark up the operating expenses table from lower on the same
  page of that document:

  <pre highlight="html">
&lt;table&gt;
  &lt;colgroup&gt; &lt;col&gt;
  &lt;colgroup&gt; &lt;col&gt; &lt;col&gt; &lt;col&gt;
  &lt;thead&gt;
  &lt;tr&gt; &lt;th&gt; &lt;th&gt;2008 &lt;th&gt;2007 &lt;th&gt;2006
  &lt;tbody&gt;
  &lt;tr&gt; &lt;th scope=rowgroup&gt; Research and development
        &lt;td&gt; $ 1,109 &lt;td&gt; $ 782 &lt;td&gt; $ 712
  &lt;tr&gt; &lt;th scope=row&gt; Percentage of net sales
        &lt;td&gt; 3.4% &lt;td&gt; 3.3% &lt;td&gt; 3.7%
  &lt;tbody&gt;
  &lt;tr&gt; &lt;th scope=rowgroup&gt; Selling, general, and administrative
        &lt;td&gt; $ 3,761 &lt;td&gt; $ 2,963 &lt;td&gt; $ 2,433
  &lt;tr&gt; &lt;th scope=row&gt; Percentage of net sales
        &lt;td&gt; 11.6% &lt;td&gt; 12.3% &lt;td&gt; 12.6%
&lt;/table&gt;
    </pre>

  This table could look like this:

  <table class="apple-table-examples e2">
    <thead>
    <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006
    </th></tr></thead><tbody>
    <tr> <th scope="rowgroup"> Research and development
          </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712
    </td></tr><tr> <th scope="row"> Percentage of net sales
          </th><td> 3.4% </td><td> 3.3% </td><td> 3.7%
    </td></tr></tbody><tbody>
    <tr> <th scope="rowgroup"> Selling, general, and administrative
          </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433
    </td></tr><tr> <th scope="row"> Percentage of net sales
          </th><td> 11.6% </td><td> 12.3% </td><td> 12.6%
  </td></tr></tbody></table>

  <hr />

  Sometimes, tables are used for dense data. For examples, here a table is used to show entries
  in an access log:

  <pre highlight="html">
&lt;table sortable&gt;
  &lt;thead&gt;
  &lt;tr&gt;
    &lt;th sorted&gt; Timestamp
    &lt;th&gt; IP
    &lt;th&gt; Message
  &lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt; &lt;time&gt;21:01&lt;/time&gt;
    &lt;td&gt; 128.30.52.199
    &lt;td&gt; Exceeded ingress limit
  &lt;tr&gt;
    &lt;td&gt; &lt;time&gt;21:04&lt;/time&gt;
    &lt;td&gt; 128.30.52.3
    &lt;td&gt; Authentication failure
  &lt;tr&gt;
    &lt;td&gt; &lt;time&gt;22:35&lt;/time&gt;
    &lt;td&gt; 128.30.52.29
    &lt;td&gt; Malware command request blocked
  &lt;tr&gt;
    &lt;td&gt; &lt;time&gt;22:36&lt;/time&gt;
    &lt;td&gt; 128.30.52.3
    &lt;td&gt; Authentication failure
&lt;/table&gt;
    </pre>

  Because the <code>table</code> element has a <code>sortable</code>
  attribute, the column headers can be selected to change the table's sort order.

  This might render as follows:

  <img width="418" height="109" src="images/sample-table-sortable-1.png" alt="The table as marked above, but with the column headers having interactive affordances to select which column to sort by, the first being already selected." />

  If the user activates the second column, the table might change as follows:

  <img width="414" height="109" src="images/sample-table-sortable-2.png" alt="The same table, but with the second column header's interactive affordance marked as selected, with the IP addresses sorted in numeric order (first the rows with the address ending in '3', then the row with the address ending in '29', and finally the row with the address ending in '199'." />

  If the user activates the second column again, reversing the sort order, it might change as follows:

  <img width="414" height="109" src="images/sample-table-sortable-3.png" alt="The same table, but with the second column header's interactive affordance marked as selected and reversed, with the IP addresses sorted in reverse numeric order (first the row with the address ending in '199', then the row with the address ending in '29', and finally the rows with the address ending in '3'." />

<h3 id="forms">Forms</h3>

<h4 id="forms-introduction">Introduction</h4>

  <em>This section is non-normative.</em>

  A form is a component of a Web page that has form controls, such as text fields, buttons,
  checkboxes, range controls, or color pickers. A user can interact with such a form, providing data
  that can then be sent to the server for further processing (e.g. returning the results of a search
  or calculation). No client-side scripting is needed in many cases, though an API is available so
  that scripts can augment the user experience or use forms for purposes other than submitting data
  to a server.

  Writing a form consists of several steps, which can be performed in any order: writing the user
  interface, implementing the server-side processing, and configuring the user interface to
  communicate with the server.

<h5 id="writing-a-forms-user-interface">Writing a form\'s user interface</h5>

  <em>This section is non-normative.</em>

  For the purposes of this brief introduction, we will create a pizza ordering form.

  Any form starts with a <code>form</code> element, inside which are placed the controls. Most
  controls are represented by the <code>input</code> element, which by default provides a one-line
  text field. To label a control, the <code>label</code> element is used; the label text and the
  control itself go inside the <code>label</code> element. Each part of a form is considered a
  <a>paragraph</a>, and is typically separated from other parts using <code>p</code> elements.
  Putting this together, here is how one might ask for the customer's name:

  <pre highlight="html">
<strong>&lt;form&gt;
  &lt;p&gt;&lt;label&gt;Customer name: &lt;input&gt;&lt;/label&gt;&lt;/p&gt;
&lt;/form&gt;</strong>
    </pre>

  To let the user select the size of the pizza, we can use a set of radio buttons. Radio buttons
  also use the <code>input</code> element, this time with a <code>type</code> attribute with the value <code>radio</code>. To make the radio buttons work as a group, they are
  given a common name using the <code>name</code> attribute. To group a batch
  of controls together, such as, in this case, the radio buttons, one can use the
  <code>fieldset</code> element. The title of such a group of controls is given by the first element
  in the <code>fieldset</code>, which has to be a <code>legend</code> element.

  <pre highlight="html">
&lt;form&gt;
  &lt;p&gt;&lt;label&gt;Customer name: &lt;input&gt;&lt;/label&gt;&lt;/p&gt;
<strong> &lt;fieldset&gt;
  &lt;legend&gt; Pizza Size &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Small &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Medium &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Large &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;</strong>
&lt;/form&gt;
    </pre>

  <p class="note">
    Changes from the previous step are highlighted.
  </p>

  To pick toppings, we can use checkboxes. These use the <code>input</code> element with a <code>type</code> attribute with the value <code>checkbox</code>:

  <pre highlight="html">
&lt;form&gt;
  &lt;p&gt;&lt;label&gt;Customer name: &lt;input&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Size &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Small &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Medium &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Large &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
<strong> &lt;fieldset&gt;
  &lt;legend&gt; Pizza Toppings &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Bacon &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Extra Cheese &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Onion &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Mushroom &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;</strong>
&lt;/form&gt;
    </pre>

  The pizzeria for which this form is being written is always making mistakes, so it needs a way
  to contact the customer. For this purpose, we can use form controls specifically for telephone
  numbers (<code>input</code> elements with their <code>type</code>
  attribute set to <code>tel</code>) and e-mail addresses
  (<code>input</code> elements with their <code>type</code> attribute set to
  <code>email</code>):

  <pre highlight="html">
&lt;form&gt;
  &lt;p&gt;&lt;label&gt;Customer name: &lt;input&gt;&lt;/label&gt;&lt;/p&gt;
<strong> &lt;p&gt;&lt;label&gt;Telephone: &lt;input type=tel&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;E-mail address: &lt;input type=email&gt;&lt;/label&gt;&lt;/p&gt;</strong>
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Size &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Small &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Medium &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Large &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Toppings &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Bacon &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Extra Cheese &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Onion &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Mushroom &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
    </pre>

  We can use an <code>input</code> element with its <code>type</code>
  attribute set to <code>time</code> to ask for a delivery time. Many
  of these form controls have attributes to control exactly what values can be specified; in this
  case, three attributes of particular interest are <code>min</code>, <code>max</code>, and <code>step</code>. These set the
  minimum time, the maximum time, and the interval between allowed values (in seconds). This
  pizzeria only delivers between 11am and 9pm, and doesn't promise anything better than 15 minute
  increments, which we can mark up as follows:

  <pre highlight="html">
&lt;form&gt;
  &lt;p&gt;&lt;label&gt;Customer name: &lt;input&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Telephone: &lt;input type=tel&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;E-mail address: &lt;input type=email&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Size &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Small &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Medium &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Large &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Toppings &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Bacon &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Extra Cheese &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Onion &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Mushroom &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
<strong> &lt;p&gt;&lt;label&gt;Preferred delivery time: &lt;input type=time min="11:00" max="21:00" step="900"&gt;&lt;/label&gt;&lt;/p&gt;</strong>
&lt;/form&gt;
    </pre>

  The <code>textarea</code> element can be used to provide a free-form text field. In this
  instance, we are going to use it to provide a space for the customer to give delivery
  instructions:

  <pre highlight="html">
&lt;form&gt;
  &lt;p&gt;&lt;label&gt;Customer name: &lt;input&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Telephone: &lt;input type=tel&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;E-mail address: &lt;input type=email&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Size &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Small &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Medium &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Large &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Toppings &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Bacon &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Extra Cheese &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Onion &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Mushroom &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;p&gt;&lt;label&gt;Preferred delivery time: &lt;input type=time min="11:00" max="21:00" step="900"&gt;&lt;/label&gt;&lt;/p&gt;
<strong> &lt;p&gt;&lt;label&gt;Delivery instructions: &lt;textarea&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;</strong>
&lt;/form&gt;
    </pre>

  Finally, to make the form submittable we use the <code>button</code> element:

  <pre highlight="html">
&lt;form&gt;
  &lt;p&gt;&lt;label&gt;Customer name: &lt;input&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Telephone: &lt;input type=tel&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;E-mail address: &lt;input type=email&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Size &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Small &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Medium &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size&gt; Large &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Toppings &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Bacon &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Extra Cheese &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Onion &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox&gt; Mushroom &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;p&gt;&lt;label&gt;Preferred delivery time: &lt;input type=time min="11:00" max="21:00" step="900"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Delivery instructions: &lt;textarea&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;
<strong> &lt;p&gt;&lt;button&gt;Submit order&lt;/button&gt;&lt;/p&gt;</strong>
&lt;/form&gt;
    </pre>

<h5 id="implementing-the-serverside-processing-for-a-form">Implementing the server-side processing for a form</h5>

  <em>This section is non-normative.</em>

  The exact details for writing a server-side processor are out of scope for this specification.
  For the purposes of this introduction, we will assume that the script at <code>https://pizza.example.com/order.cgi</code> is configured to accept submissions using the
  <code>application/x-www-form-urlencoded</code> format,
  expecting the following parameters sent in an HTTP POST body:

  <dl>

    <dt><code>custname</code></dt>
    <dd>Customer's name</dd>

    <dt><code>custtel</code></dt>
    <dd>Customer's telephone number</dd>

    <dt><code>custemail</code></dt>
    <dd>Customer's e-mail address</dd>

    <dt><code>size</code></dt>
    <dd>The pizza size, either <code>small</code>, <code>medium</code>, or <code>large</code></dd>

    <dt><code>topping</code></dt>
    <dd>A topping, specified once for each selected topping, with the allowed values being <code>bacon</code>, <code>cheese</code>, <code>onion</code>, and <code>mushroom</code></dd>

    <dt><code>delivery</code></dt>
    <dd>The requested delivery time</dd>

    <dt><code>comments</code></dt>
    <dd>The delivery instructions</dd>

  </dl>

<h5 id="configuring-a-form-to-communicate-with-a-server">Configuring a form to communicate with a server</h5>

  <em>This section is non-normative.</em>

  Form submissions are exposed to servers in a variety of ways, most commonly as HTTP GET or POST
  requests. To specify the exact method used, the <code>method</code>
  attribute is specified on the <code>form</code> element. This doesn't specify how the form data is
  encoded, though; to specify that, you use the <code>enctype</code>
  attribute. You also have to specify the <a>URL</a> of the service that will handle the
  submitted data, using the <code>action</code> attribute.

  For each form control you want submitted, you then have to give a name that will be used to
  refer to the data in the submission. We already specified the name for the group of radio buttons;
  the same attribute (<code>name</code>) also specifies the submission name.
  Radio buttons can be distinguished from each other in the submission by giving them different
  values, using the <code>value</code> attribute.

  Multiple controls can have the same name; for example, here we give all the checkboxes the same
  name, and the server distinguishes which checkbox was checked by seeing which values are submitted
  with that name â like the radio buttons, they are also given unique values with the <code>value</code> attribute.

  Given the settings in the previous section, this all becomes:

  <pre highlight="html">
&lt;form<strong> method="post"
      enctype="application/x-www-form-urlencoded"
      action="https://pizza.example.com/order.cgi"</strong>&gt;
  &lt;p&gt;&lt;label&gt;Customer name: &lt;input<strong> name="custname"</strong>&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Telephone: &lt;input type=tel<strong> name="custtel"</strong>&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;E-mail address: &lt;input type=email<strong> name="custemail"</strong>&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Size &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size<strong> value="small"</strong>&gt; Small &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size<strong> value="medium"</strong>&gt; Medium &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size<strong> value="large"</strong>&gt; Large &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Toppings &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox<strong> name="topping" value="bacon"</strong>&gt; Bacon &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox<strong> name="topping" value="cheese"</strong>&gt; Extra Cheese &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox<strong> name="topping" value="onion"</strong>&gt; Onion &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox<strong> name="topping" value="mushroom"</strong>&gt; Mushroom &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;p&gt;&lt;label&gt;Preferred delivery time: &lt;input type=time min="11:00" max="21:00" step="900"<strong> name="delivery"</strong>&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Delivery instructions: &lt;textarea<strong> name="comments"</strong>&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;button&gt;Submit order&lt;/button&gt;&lt;/p&gt;
&lt;/form&gt;
    </pre>

  <p class="note">
    There is no particular significance to the way some of the attributes have their
  values quoted and others don't. The HTML syntax allows a variety of equally valid ways to specify
  attributes, as discussed <a>in the syntax section</a>.
  </p>

  For example, if the customer entered "Denise Lawrence" as their name, "555-321-8642" as their
  telephone number, did not specify an e-mail address, asked for a medium-sized pizza, selected the
  Extra Cheese and Mushroom toppings, entered a delivery time of 7pm, and left the delivery
  instructions text field blank, the user agent would submit the following to the online Web
  service:

  <pre>custname=Denise+Lawrence&amp;custtel=555-321-8642&amp;custemail=&amp;size=medium&amp;topping=cheese&amp;topping=mushroom&amp;delivery=19%3A00&amp;comments=</pre>

<h5 id="clientside-form-validation">Client-side form validation</h5>

  <em>This section is non-normative.</em>

  Forms can be annotated in such a way that the user agent will check the user's input before the
  form is submitted. The server still has to verify the input is valid (since hostile users can
  easily bypass the form validation), but it allows the user to avoid the wait incurred by having
  the server be the sole checker of the user's input.

  The simplest annotation is the <code>required</code> attribute,
  which can be specified on <code>input</code> elements to indicate that the form is not to be
  submitted until a value is given. By adding this attribute to the customer name, pizza size, and
  delivery time fields, we allow the user agent to notify the user when the user submits the form
  without filling in those fields:

  <pre highlight="html">
&lt;form method="post"
      enctype="application/x-www-form-urlencoded"
      action="https://pizza.example.com/order.cgi"&gt;
  &lt;p&gt;&lt;label&gt;Customer name: &lt;input name="custname"<strong> required</strong>&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Telephone: &lt;input type=tel name="custtel"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;E-mail address: &lt;input type=email name="custemail"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Size &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size<strong> required</strong> value="small"&gt; Small &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size<strong> required</strong> value="medium"&gt; Medium &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size<strong> required</strong> value="large"&gt; Large &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Toppings &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="bacon"&gt; Bacon &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="cheese"&gt; Extra Cheese &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="onion"&gt; Onion &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="mushroom"&gt; Mushroom &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;p&gt;&lt;label&gt;Preferred delivery time: &lt;input type=time min="11:00" max="21:00" step="900" name="delivery"<strong> required</strong>&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Delivery instructions: &lt;textarea name="comments"&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;button&gt;Submit order&lt;/button&gt;&lt;/p&gt;
&lt;/form&gt;
    </pre>

  It is also possible to limit the length of the input, using the <code>maxlength</code> attribute. By adding this to the <code>textarea</code>
  element, we can limit users to 1000 characters, preventing them from writing huge essays to the
  busy delivery drivers instead of staying focused and to the point:

  <pre highlight="html">
&lt;form method="post"
      enctype="application/x-www-form-urlencoded"
      action="https://pizza.example.com/order.cgi"&gt;
  &lt;p&gt;&lt;label&gt;Customer name: &lt;input name="custname" required&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Telephone: &lt;input type=tel name="custtel"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;E-mail address: &lt;input type=email name="custemail"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Size &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size required value="small"&gt; Small &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size required value="medium"&gt; Medium &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size required value="large"&gt; Large &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Toppings &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="bacon"&gt; Bacon &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="cheese"&gt; Extra Cheese &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="onion"&gt; Onion &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="mushroom"&gt; Mushroom &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;p&gt;&lt;label&gt;Preferred delivery time: &lt;input type=time min="11:00" max="21:00" step="900" name="delivery" required&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Delivery instructions: &lt;textarea name="comments"<strong> maxlength=1000</strong>&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;button&gt;Submit order&lt;/button&gt;&lt;/p&gt;
&lt;/form&gt;
    </pre>

  <p class="note">
    When a form is submitted, <code>invalid</code> events are
  fired at each form control that is invalid, and then at the <code>form</code> element itself. This
  can be useful for displaying a summary of the problems with the form, since typically the browser
  itself will only report one problem at a time.
  </p>

<h5 id="enabling-clientside-automatic-filling-of-form-controls">Enabling client-side automatic filling of form controls</h5>

  <em>This section is non-normative.</em>

  Some browsers attempt to aid the user by automatically filling form controls rather than having
  the user reenter their information each time. For example, a field asking for the user's telephone
  number can be automatically filled with the user's phone number.

  To help the user agent with this, the <code>autocomplete</code>
  attribute can be used to describe the field's purpose. In the case of this form, we have three
  fields that can be usefully annotated in this way: the information about who the pizza is to be
  delivered to. Adding this information looks like this:

  <pre highlight="html">
&lt;form method="post"
      enctype="application/x-www-form-urlencoded"
      action="https://pizza.example.com/order.cgi"&gt;
  &lt;p&gt;&lt;label&gt;Customer name: &lt;input name="custname" required <strong>autocomplete="shipping name"</strong>&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Telephone: &lt;input type=tel name="custtel" <strong>autocomplete="shipping tel"</strong>&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;E-mail address: &lt;input type=email name="custemail" <strong>autocomplete="shipping email"</strong>&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Size &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size required value="small"&gt; Small &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size required value="medium"&gt; Medium &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size required value="large"&gt; Large &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Toppings &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="bacon"&gt; Bacon &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="cheese"&gt; Extra Cheese &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="onion"&gt; Onion &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="mushroom"&gt; Mushroom &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;p&gt;&lt;label&gt;Preferred delivery time: &lt;input type=time min="11:00" max="21:00" step="900" name="delivery" required&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Delivery instructions: &lt;textarea name="comments" maxlength=1000&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;button&gt;Submit order&lt;/button&gt;&lt;/p&gt;
&lt;/form&gt;
    </pre>

<h5 id="improving-the-user-experience-on-mobile-devices">Improving the user experience on mobile devices</h5>

  <em>This section is non-normative.</em>

  Some devices, in particular those with on-screen keyboards and those in locales with languages
  with many characters (e.g. Japanese), can provide the user with multiple input modalities. For
  example, when typing in a credit card number the user may wish to only see keys for digits 0-9,
  while when typing in their name they may wish to see a form field that by default capitalizes each
  word.

  Using the <code>inputmode</code> attribute we can select appropriate
  input modalities:

  <pre highlight="html">
&lt;form method="post"
      enctype="application/x-www-form-urlencoded"
      action="https://pizza.example.com/order.cgi"&gt;
  &lt;p&gt;&lt;label&gt;Customer name: &lt;input name="custname" required autocomplete="shipping name" <strong>inputmode="latin-name"</strong>&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Telephone: &lt;input type=tel name="custtel" autocomplete="shipping tel"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;E-mail address: &lt;input type=email name="custemail" autocomplete="shipping email"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Size &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size required value="small"&gt; Small &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size required value="medium"&gt; Medium &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=radio name=size required value="large"&gt; Large &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;fieldset&gt;
  &lt;legend&gt; Pizza Toppings &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="bacon"&gt; Bacon &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="cheese"&gt; Extra Cheese &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="onion"&gt; Onion &lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt; &lt;input type=checkbox name="topping" value="mushroom"&gt; Mushroom &lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;p&gt;&lt;label&gt;Preferred delivery time: &lt;input type=time min="11:00" max="21:00" step="900" name="delivery" required&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Delivery instructions: &lt;textarea name="comments" maxlength=1000 <strong>inputmode="latin-prose"</strong>&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;button&gt;Submit order&lt;/button&gt;&lt;/p&gt;
&lt;/form&gt;
    </pre>

<h5 id="the-difference-between-the-field-type-the-autofill-field-name-and-the-input-modality">The difference between the field type, the autofill field name, and the input modality</h5>

  <em>This section is non-normative.</em>

  The <code>type</code>, <code>autocomplete</code>, and <code>inputmode</code> attributes can seem confusingly similar. For instance,
  in all three cases, the string "<code>email</code>" is a valid value. This section
  attempts to illustrate the difference between the three attributes and provides advice suggesting
  how to use them.

  The <code>type</code> attribute on <code>input</code> elements decides
  what kind of control the user agent will use to expose the field. Choosing between different
  values of this attribute is the same choice as choosing whether to use an <code>input</code>
  element, a <code>textarea</code> element, a <code>select</code> element, a <code>keygen</code>
  element, etc.

  The <code>autocomplete</code> attribute, in contrast, describes
  what the value that the user will enter actually represents. Choosing between different values of
  this attribute is the same choice as choosing what the label for the element will be.

  First, consider telephone numbers. If a page is asking for a telephone number from the user,
  the right form control to use is <code>&lt;input type=tel&gt;</code>.
  However, which <code>autocomplete</code> value to use depends on
  which phone number the page is asking for, whether they expect a telephone number in the
  international format or just the local format, and so forth.

  For example, a page that forms part of a checkout process on an e-commerce site for a customer
  buying a gift to be shipped to a friend might need both the buyer's telephone number (in case of
  payment issues) and the friend's telephone number (in case of delivery issues). If the site
  expects international phone numbers (with the country code prefix), this could thus look like
  this:

  <pre highlight="html">
&lt;p&gt;&lt;label&gt;Your phone number: &lt;input type=tel name=custtel autocomplete="billing tel"&gt;&lt;/label&gt;
&lt;p&gt;&lt;label&gt;Recipient's phone number: &lt;input type=tel name=shiptel autocomplete="shipping tel"&gt;&lt;/label&gt;
&lt;p&gt;Please enter complete phone numbers including the country code prefix, as in "+1 555 123 4567".
    </pre>

  But if the site only supports British customers and recipients, it might instead look like this
  (notice the use of <code>tel-national</code> rather than
  <code>tel</code>):

  <pre highlight="html">
&lt;p&gt;&lt;label&gt;Your phone number: &lt;input type=tel name=custtel autocomplete="billing tel-national"&gt;&lt;/label&gt;
&lt;p&gt;&lt;label&gt;Recipient's phone number: &lt;input type=tel name=shiptel autocomplete="shipping tel-national"&gt;&lt;/label&gt;
&lt;p&gt;Please enter complete UK phone numbers, as in "(01632) 960 123".
    </pre>

  Now, consider a person's preferred languages. The right <code>autocomplete</code> value is <code>language</code>. However, there could be a number of
  different form controls used for the purpose: a free text field (<code>&lt;input type=text&gt;</code>), a drop-down list (<code>&lt;select&gt;</code>), radio buttons (<code>&lt;input
  type=radio&gt;</code>), etc. It only depends on what kind of interface is desired.

  The <code>inputmode</code> decides what kind of input modality (e.g.
  keyboard) to use, when the control is a free-form text field.

  Consider names. If a page just wants one name from the user, then the relevant control is <code>&lt;input type=text&gt;</code>. If the page is asking for the user's
  full name, then the relevant <code>autocomplete</code> value is <code>name</code>. But if the user is Japanese, and the page is asking
  for the user's Japanese name and the user's romanized name, then it would be helpful to the user
  if the first field defaulted to a Japanese input modality, while the second defaulted to a Latin
  input modality (ideally with automatic capitalization of each word). This is where the <code>inputmode</code> attribute can help:

  <pre highlight="html">
&lt;p&gt;&lt;label&gt;Japanese name: &lt;input name="j" type="text" autocomplete="section-jp name" inputmode="kana"&gt;&lt;/label&gt;
&lt;label&gt;Romanized name: &lt;input name="e" type="text" autocomplete="section-en name" inputmode="latin-name"&gt;&lt;/label&gt;
    </pre>

  In this example, the "<code>section-*</code>" keywords in
  the <code>autocomplete</code> attributes' values tell the user agent
  that the two fields expect <em>different</em> names. Without them, the user agent could
  automatically fill the second field with the value given in the first field when the user gave a
  value to the first field.

  <p class="note">
    The "<code>-jp</code>" and "<code>-en</code>" parts of the
  keywords are opaque to the user agent; the user agent cannot guess, from those, that the two names
  are expected to be in Japanese and English respectively.
  </p>

<h5 id="date-time-and-number-formats">Date, time, and number formats</h5>

  <em>This section is non-normative.</em>

  In this pizza delivery example, the times are specified in the format "HH:MM": two digits for
  the hour, in 24-hour format, and two digits for the time. (Seconds could also be specified, though
  they are not necessary in this example.)

  In some locales, however, times are often expressed differently when presented to users. For
  example, in the United States, it is still common to use the 12-hour clock with an am/pm
  indicator, as in "2pm". In France, it is common to separate the hours from the minutes using an
  "h" character, as in "14h00".

  Similar issues exist with dates, with the added complication that even the order of the
  components is not always consistent â for example, in Cyprus the first of February 2003
  would typically be written "1/2/03", while that same date in Japan would typically be written as
  "2003å¹´02æ01æ¥" â and even with numbers, where locales differ, for
  example, in what punctuation is used as the decimal separator and the thousands separator.

  It is therefore important to distinguish the time, date, and number formats used in HTML and in
  form submissions, which are always the formats defined in this specification (and based on the
  well-established ISO 8601 standard for computer-readable date and time formats), from the time,
  date, and number formats presented to the user by the browser and accepted as input from the user
  by the browser.

  The format used "on the wire", i.e. in HTML markup and in form submissions, is intended to be
  computer-readable and consistent irrespective of the user's locale. Dates, for instance, are
  always written in the format "YYYY-MM-DD", as in "2003-02-01". Users are not expected to ever see
  this format.

  The time, date, or number given by the page in the wire format is then translated to the user's
  preferred presentation (based on user preferences or on the locale of the page itself), before
  being displayed to the user. Similarly, after the user inputs a time, date, or number using their
  preferred format, the user agent converts it back to the wire format before putting it in the DOM
  or submitting it.

  This allows scripts in pages and on servers to process times, dates, and numbers in a
  consistent manner without needing to support dozens of different formats, while still supporting
  the users' needs.

  <div class="impl">
  <p class="note">
    See also the <a>implementation notes</a> regarding
  localization of form controls.
  </p>
  </div>

<h4 id="categories">Categories</h4>

  Mostly for historical reasons, elements in this section fall into several overlapping (but
  subtly different) categories in addition to the usual ones like <a>flow content</a>,
  <a>phrasing content</a>, and <a>interactive content</a>.

  A number of the elements are <dfn>form-associated
  elements</dfn>, which means they can have a <a>form owner</a>.

  <ul class="brief category-list">
    <li><code>button</code></li>
    <li><code>fieldset</code></li>
    <li><code>input</code></li>
    <li><code>keygen</code></li>
    <li><code>label</code></li>
    <li><code>object</code></li>
    <li><code>output</code></li>
    <li><code>select</code></li>
    <li><code>textarea</code></li>
    <li><code>img</code></li>
  </ul>

  The <a>form-associated elements</a> fall into several
  subcategories:

  <dl>

    <dt><dfn>Listed elements</dfn></dt>

    <dd>

    Denotes elements that are listed in the <code><var>form</var>.elements</code> and <code><var>fieldset</var>.elements</code> APIs.

    <ul class="brief category-list">
      <li><code>button</code></li>
      <li><code>fieldset</code></li>
      <li><code>input</code></li>
      <li><code>keygen</code></li>
      <li><code>object</code></li>
      <li><code>output</code></li>
      <li><code>select</code></li>
      <li><code>textarea</code></li>
    </ul>

    </dd>

    <dt><dfn>Submittable elements</dfn></dt>

    <dd>

    Denotes elements that can be used for <a>constructing the
    form data set</a> when a <code>form</code> element is <a>submitted</a>.

    <ul class="brief category-list">
      <li><code>button</code></li>
      <li><code>input</code></li>
      <li><code>keygen</code></li>
      <li><code>object</code></li>
      <li><code>select</code></li>
      <li><code>textarea</code></li>
    </ul>

    Some <a>submittable elements</a> can be, depending on their
    attributes, <dfn>buttons</dfn>. The prose below defines when an element
    is a button. Some buttons are specifically <dfn>submit
    buttons</dfn>.

    </dd>

    <dt><dfn>Resettable elements</dfn></dt>

    <dd>

    Denotes elements that can be affected when a <code>form</code> element is <a>reset</a>.

    <ul class="brief category-list">
      <li><code>input</code></li>
      <li><code>keygen</code></li>
      <li><code>output</code></li>
      <li><code>select</code></li>
      <li><code>textarea</code></li>
    </ul>

    </dd>

    <dt><dfn>Reassociateable elements</dfn></dt>

    <dd>

    Denotes elements that have a <code>form</code> content attribute, and a
    matching <code>form</code> IDL attribute, that allow authors to specify an
    explicit <a>form owner</a>.

    <ul class="brief category-list">
      <li><code>button</code></li>
      <li><code>fieldset</code></li>
      <li><code>input</code></li>
      <li><code>keygen</code></li>
      <li><code>label</code></li>
      <li><code>object</code></li>
      <li><code>output</code></li>
      <li><code>select</code></li>
      <li><code>textarea</code></li>
    </ul>

    </dd>

  </dl>

  Some elements, not all of them <a>form-associated</a>,
  are categorized as <dfn>labelable elements</dfn>. These are elements that
  can be associated with a <code>label</code> element.

  <ul class="brief category-list">
    <li><code>button</code></li>
    <li><code>input</code> (if the <code>type</code> attribute is <em>not</em> in the <a>Hidden</a> state)</li>
    <li><code>keygen</code></li>
    <li><code>meter</code></li>
    <li><code>output</code></li>
    <li><code>progress</code></li>
    <li><code>select</code></li>
    <li><code>textarea</code></li>
  </ul>

<h4 id="the-form-element">The <dfn><code>form</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>, but with no <code>form</code> element descendants.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>accept-charset</code> - Character encodings to use for <a>form submission</a></dd>
    <dd><code>action</code> - <a>URL</a> to use for <a>form submission</a></dd>
    <dd><code>autocomplete</code> - Default setting for autofill feature for controls in the form </dd>
    <dd><code>enctype</code> - Form data set encoding type to use for <a>form submission</a></dd>
    <dd><code>method</code> - HTTP method to use for <a>form submission</a></dd>
    <dd><code>name</code> -  Name of form to use in the <code>document.forms</code> API</dd>
    <dd><code>novalidate</code> - Bypass form control validation for <a>form submission</a></dd>
    <dd><code>target</code> - <a>Browsing context</a> for <a>form submission</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">[OverrideBuiltins]
interface HTMLFormElement : HTMLElement {
  attribute DOMString acceptCharset;
  attribute DOMString action;
  attribute DOMString autocomplete;
  attribute DOMString enctype;
  attribute DOMString encoding;
  attribute DOMString method;
  attribute DOMString name;
  attribute boolean noValidate;
  attribute DOMString target;

  [SameObject] readonly attribute HTMLFormControlsCollection elements;
  readonly attribute long length;
  getter Element (unsigned long index);
  getter (RadioNodeList or Element) (DOMString name);

  void submit();
  void reset();
  boolean checkValidity();
  boolean reportValidity();

  void requestAutocomplete();
};
</pre>
    </dd>
  </dl>

  The <code>form</code> element <a>represents</a> a collection of <a>form-associated elements</a>, some of which can represent
  editable values that can be submitted to a server for processing.

  The <dfn><code>accept-charset</code></dfn> attribute gives the
  character encodings that are to be used for the submission. If specified, the value must be an
  <a>ordered set of unique space-separated tokens</a> that are <a>ASCII
  case-insensitive</a>, and each token must be an <a>ASCII case-insensitive</a> match for
  one of the <a>labels</a> of an <a>ASCII-compatible
  encoding</a>. [[!ENCODING]]

  The <dfn><code>name</code></dfn> attribute represents the
  <code>form</code>'s name within the <code>forms</code> collection. The
  value must not be the empty string, and the value must be unique amongst the <code>form</code>
  elements in the <code>forms</code> collection that it is in, if
  any.

  The <dfn><code>autocomplete</code></dfn> attribute is an
  <a>enumerated attribute</a>. The attribute has two states. The <dfn><code>on</code></dfn> keyword maps to the <dfn>on</dfn> state, and the <dfn><code>off</code></dfn> keyword maps to the <dfn>off</dfn> state. The attribute may also be omitted. The
  <i>missing value default</i> is the <a>on</a> state. The <a>off</a> state indicates that by default, form
  controls in the form will have their <a>autofill field name</a> set to "<code>off</code>"; the <a>on</a> state indicates that by default, form controls
  in the form will have their <a>autofill field name</a> set to "<code>on</code>".

  The <code>action</code>, <code>enctype</code>,
  <code>method</code>, <code>novalidate</code>,
  and <code>target</code> attributes are <a>attributes for form
  submission</a>.

  <dl class="domintro">

    <dt><var>form</var> . <code>elements</code></dt>

    <dd>

    Returns an <code>HTMLFormControlsCollection</code> of the form controls in the form (excluding image
    buttons for historical reasons).

    </dd>

    <dt><var>form</var> . <code>length</code></dt>

    <dd>

    Returns the number of form controls in the form (excluding image buttons for historical
    reasons).

    </dd>

    <dt><var>form</var>[<var>index</var>]</dt>

    <dd>

    Returns the <var>index</var>th element in the form (excluding image buttons for
    historical reasons).

    </dd>

    <dt><var>form</var>[<var>name</var>]</dt>

    <dd>

    Returns the form control (or, if there are several, a <code>RadioNodeList</code> of the form
    controls) in the form with the given <a>ID</a> or <code>name</code> (excluding image buttons for historical reasons); or, if there
    are none, returns the <code>img</code> element with the given ID.

    Once an element has been referenced using a particular name, that name will continue being
    available as a way to reference that element in this method, even if the element's actual <a>ID</a> or <code>name</code> changes, for as long as
    the element remains in the <code>Document</code>.

    If there are multiple matching items, then a <code>RadioNodeList</code> object containing all
    those elements is returned.

    </dd>

    <dt><var>form</var> . <code>submit</code>()</dt>

    <dd>

    Submits the form.

    </dd>

    <dt><var>form</var> . <code>reset</code>()</dt>

    <dd>

    Resets the form.

    </dd>

    <dt><var>form</var> . <code>checkValidity</code>()</dt>

    <dd>

    Returns true if the form's controls are all valid; otherwise, returns false.

    </dd>

    <dt><var>form</var> . <code>reportValidity</code>()</dt>

    <dd>

    Returns true if the form's controls are all valid; otherwise, returns false and informs the user.

    </dd>

    <dt><var>form</var> . <code>requestAutocomplete</code>()</dt>

    <dd>

    Triggers a user-agent-specific user interface to help the user fill in any
    fields that have an <a>autofill field name</a> other than "<code>on</code>" or "<code>off</code>".

    The <code>form</code> element will subsequently receive an event, either <code>autocomplete</code>, indicating that the fields have been prefilled,
    or <code>autocompleteerror</code> (using the
    <code>AutocompleteErrorEvent</code> interface), indicating that there was some problem (the
    general class of problem is described by the <code>reason</code> IDL attribute on the event).

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>autocomplete</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name, <a>limited to only known
  values</a>.

  The <code>requestAutocomplete()</code> method is part of
  the <a>autofill mechanism</a>.

  The <dfn><code>name</code></dfn> IDL attribute must <a>reflect</a>
  the content attribute of the same name.

  The <dfn><code>acceptCharset</code></dfn> IDL attribute must
  <a>reflect</a> the <code>accept-charset</code> content
  attribute.

  <hr />

  The <dfn><code>elements</code></dfn> IDL attribute must return an
  <code>HTMLFormControlsCollection</code> rooted at the <code>form</code> element's <a>home
  subtree</a>'s <a>root element</a>, whose filter matches <a>listed elements</a> whose <a>form owner</a> is the
  <code>form</code> element, with the exception of <code>input</code> elements whose <code>type</code> attribute is in the <a>Image Button</a> state, which must, for historical reasons, be
  excluded from this particular collection.

  The <dfn><code>length</code></dfn> IDL attribute must return the number
  of nodes <a>represented</a> by the <code>elements</code> collection.

  The <a>supported property indices</a> at any instant are the indices supported by the
  object returned by the <code>elements</code> attribute at that
  instant.

  When a <code>form</code> element is <dfn>indexed for indexed property
  retrieval</dfn>, the user agent must return the value returned by the <code>item</code> method on the <code>elements</code> collection, when invoked with the given index as its
  argument.

  <hr />

  Each <code>form</code> element has a mapping of names to elements called the <dfn>past names
  map</dfn>. It is used to persist names of controls even when they change names.

  The <a>supported property names</a> consist of the names obtained from the following
  algorithm, in the order obtained from this algorithm:

  <ol>

    <li>Let <var>sourced names</var> be an initially empty ordered list of tuples
    consisting of a string, an element, a source, where the source is either <i>id</i>, <i>name</i>,
    or <i>past</i>, and, if the source is <i>past</i>, an age.</li>

    <li>

    For each <a>listed element</a> <var>candidate</var>
    whose <a>form owner</a> is the <code>form</code> element, with the exception of any
    <code>input</code> elements whose <code>type</code> attribute is in the
    <a>Image Button</a> state, run these substeps:

    <ol>

      <li>If <var>candidate</var> has an <code>id</code> attribute, add
      an entry to <var>sourced names</var> with that <code>id</code>
      attribute's value as the string, <var>candidate</var> as the element, and <i>id</i> as
      the source.</li>

      <li>If <var>candidate</var> has a <code>name</code> attribute,
      add an entry to <var>sourced names</var> with that <code>name</code> attribute's value as the string, <var>candidate</var>
      as the element, and <i>name</i> as the source.</li>

    </ol>

    </li>

    <li>

    For each <code>img</code> element <var>candidate</var> whose <a>form owner</a>
    is the <code>form</code> element, run these substeps:

    <ol>

      <li>If <var>candidate</var> has an <code>id</code> attribute, add
      an entry to <var>sourced names</var> with that <code>id</code>
      attribute's value as the string, <var>candidate</var> as the element, and <i>id</i> as
      the source.</li>

      <li>If <var>candidate</var> has a <code>name</code> attribute,
      add an entry to <var>sourced names</var> with that <code>name</code> attribute's value as the string, <var>candidate</var>
      as the element, and <i>name</i> as the source.</li>

    </ol>

    </li>

    <li>

    For each entry <var>past entry</var> in the <a>past names map</a> add an entry
    to <var>sourced names</var> with the <var>past entry</var>'s name as the
    string, <var>past entry</var>'s element as the element, <i>past</i> as the source, and
    the length of time <var>past entry</var> has been in the <a>past names map</a> as
    the age.

    </li>

    <li>Sort <var>sourced names</var> by <a>tree order</a> of the element entry of
    each tuple, sorting entries with the same element by putting entries whose source is <i>id</i>
    first, then entries whose source is <i>name</i>, and finally entries whose source is <i>past</i>,
    and sorting entries with the same element and source by their age, oldest first.</li>

    <li>Remove any entries in <var>sourced names</var> that have the empty string as
    their name.</li>

    <li>Remove any entries in <var>sourced names</var> that have the same name as an
    earlier entry in the map.</li>

    <li>Return the list of names from <var>sourced names</var>, maintaining their
    relative order.</li>

  </ol>

  The properties exposed in this way must be <a>unenumerable</a>.

  When a <code>form</code> element is <dfn>indexed for named property
  retrieval</dfn>, the user agent must run the following steps:

  <ol>

    <li>Let <var>candidates</var> be a <a>live</a> <code>RadioNodeList</code>
    object containing all the <a>listed elements</a> whose <a>form
    owner</a> is the <code>form</code> element that have either an <code>id</code>
    attribute or a <code>name</code> attribute equal to <var>name</var>, with the exception of <code>input</code> elements whose <code>type</code> attribute is in the <a>Image
    Button</a> state, in <a>tree order</a>.</li>

    <li>If <var>candidates</var> is empty, let <var>candidates</var> be a
    <a>live</a> <code>RadioNodeList</code> object containing all the <code>img</code> elements
    that are descendants of the <code>form</code> element and that have either an <code>id</code> attribute or a <code>name</code> attribute equal
    to <var>name</var>, in <a>tree order</a>.</li>

    <li>If <var>candidates</var> is empty, <var>name</var> is the name of one of
    the entries in the <code>form</code> element's <a>past names map</a>: return the object
    associated with <var>name</var> in that map.</li>

    <li>If <var>candidates</var> contains more than one node, return <var>candidates</var> and abort these steps.</li>

    <li>Otherwise, <var>candidates</var> contains exactly one node. Add a mapping from
    <var>name</var> to the node in <var>candidates</var> in the <code>form</code>
    element's <a>past names map</a>, replacing the previous entry with the same name, if
    any.</li>

    <li>Return the node in <var>candidates</var>.</li>

  </ol>

  If an element listed in a <code>form</code> element's <a>past names map</a> changes
  <a>form owner</a>, then its entries must be removed from that map.

  <hr />

  The <dfn><code>submit()</code></dfn> method, when invoked, must <a>submit</a> the <code>form</code> element from the <code>form</code>
  element itself, with the <var>submitted from <code>submit()</code> method</var> flag set.

  The <dfn><code>reset()</code></dfn> method, when invoked, must run the
  following steps:

  <ol>

    <li>If the <code>form</code> element is marked as <i>locked for reset</i>, then abort these
    steps.</li>

    <li>Mark the <code>form</code> element as <dfn>locked for reset</dfn>.</li>

    <li><a>Reset</a> the <code>form</code> element.</li>

    <li>Unmark the <code>form</code> element as <i>locked for reset</i>.</li>

  </ol>

  If the <dfn><code>checkValidity()</code></dfn> method is
  invoked, the user agent must <a>statically validate the constraints</a> of the
  <code>form</code> element, and return true if the constraint validation return a <i>positive</i>
  result, and false if it returned a <i>negative</i> result.

  If the <dfn><code>reportValidity()</code></dfn> method is
  invoked, the user agent must <a>interactively validate the constraints</a> of the
  <code>form</code> element, and return true if the constraint validation return a <i>positive</i>
  result, and false if it returned a <i>negative</i> result.

  </div>

  <div class="example">
    This example shows two search forms:

    <pre highlight="html">
&lt;form action="http://www.google.com/search" method="get"&gt;
  &lt;label&gt;Google: &lt;input type="search" name="q"&gt;&lt;/label&gt; &lt;input type="submit" value="Search..."&gt;
&lt;/form&gt;
&lt;form action="http://www.bing.com/search" method="get"&gt;
  &lt;label&gt;Bing: &lt;input type="search" name="q"&gt;&lt;/label&gt; &lt;input type="submit" value="Search..."&gt;
&lt;/form&gt;
    </pre>

  </div>

<h4 id="the-label-element">The <dfn><code>label</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Interactive content</a>.</dd>
    <dd><a>Reassociateable</a> <a>form-associated element</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>, but with no descendant <a>labelable elements</a> unless it is the element's <a>labeled control</a>, and no descendant <code>label</code> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>form</code> - Associates the control with a <code>form</code> element</dd>
    <dd><code>for</code> - Associate the label with form control</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissable</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLLabelElement : HTMLElement {
  readonly attribute HTMLFormElement? form;
  attribute DOMString htmlFor;
  readonly attribute HTMLElement? control;
};
</pre>
    </dd>
  </dl>

  The <code>label</code> element <a>represents</a> a caption in a user interface. The
  caption can be associated with a specific form control<span class="impl">, known as the
  <code>label</code> element's <dfn>labeled control</dfn></span>, either using the <code>for</code> attribute, or by putting the form control inside the
  <code>label</code> element itself.

  <div class="impl">

  Except where otherwise specified by the following rules, a <code>label</code> element has no
  <a>labeled control</a>.

  </div>

  The <dfn><code>for</code></dfn> attribute may be specified to indicate a
  form control with which the caption is to be associated. If the attribute is specified, the
  attribute's value must be the <a>ID</a> of a <a>labelable element</a> in the same <code>Document</code> as the
  <code>label</code> element. <span class="impl">If the attribute is specified and there is an
  element in the <code>Document</code> whose <a>ID</a> is equal to the
  value of the <code>for</code> attribute, and the first such element is a
  <a>labelable element</a>, then that element is the <code>label</code>
  element's <a>labeled control</a>.</span>

  <div class="impl">

  If the <code>for</code> attribute is not specified, but the
  <code>label</code> element has a <a>labelable element</a> descendant,
  then the first such descendant in <a>tree order</a> is the <code>label</code> element's
  <a>labeled control</a>.

  The <code>label</code> element's exact default presentation and behavior, in particular what
  its <a>activation behavior</a> might be, if anything, should match the platform's label
  behavior. The <a>activation behavior</a> of a <code>label</code> element for events targeted
  at <a>interactive content</a> descendants of a <code>label</code> element, and any
  descendants of those <a>interactive content</a> descendants, must be to do nothing.

  <div class="example">
    For example, on platforms where clicking a checkbox label checks the checkbox, clicking the
    <code>label</code> in the following snippet could trigger the user agent to <a>run synthetic
    click activation steps</a> on the <code>input</code> element, as if the element itself had
    been triggered by the user:

    <pre highlight="html">
&lt;label&gt;&lt;input type=checkbox name=lost&gt; Lost&lt;/label&gt;
    </pre>

    On other platforms, the behavior might be just to focus the control, or do nothing.

  </div>
  </div>

 <br>
  <div class="note">
  <strong>Note:</strong> The ability to click or press a <code>label</code> to trigger an event on a control provides
  usability and accessibility benefits by increasing the <em>hit area</em> of a control, making it easier for a user to operate.
  These benefits may be lost or reduced, if the <code>label</code> element contains an element with its own activation
  behavior, such as a link:

  <div class="example">
  <pre highlight="html">
  &lt;!-- bad example - link inside label reduces checkbox activation area --&gt;
  &lt;label&gt;&lt;input type=checkbox name=tac&gt;I agree to &lt;a href="tandc.html"&gt;the terms and conditions&lt;/a&gt;&lt;/label&gt;
    </pre>

  <pre highlight="html">
  &lt;!-- bad example - all label text inside the link reduces activation area to checkbox only --&gt;
  &lt;label&gt;&lt;input type=checkbox name=tac&gt;&lt;a href="tandc.html"&gt;I agree to the terms and conditions&lt;/a&gt;&lt;/label&gt;
    </pre>

  The usability and accessibility benefits can be maintained by placing such elements outside the <code>label</code> element:

  <pre highlight="html">
  &lt;!-- good example - link outside label means checkbox activation area includes the checkbox and all the label text --&gt;
  &lt;label&gt;&lt;input type=checkbox name=tac&gt;I agree to the terms and conditions&lt;/label&gt;
(read &lt;a href="tandc.html"&gt;Terms and Conditions&lt;/a&gt;)
    </pre></div>
  </div>

  The <code>form</code> attribute is used to explicitly associate the
  <code>label</code> element with its <a>form owner</a>.

  <div class="example">
    The following example shows three form controls each with a label, two of which have small
    text showing the right format for users to use.

    <pre highlight="html">
&lt;p&gt;&lt;label&gt;Full name: &lt;input name=fn&gt; &lt;small&gt;Format: First Last&lt;/small&gt;&lt;/label&gt;&lt;/p&gt;
&lt;p&gt;&lt;label&gt;Age: &lt;input name=age type=number min=0&gt;&lt;/label&gt;&lt;/p&gt;
&lt;p&gt;&lt;label&gt;Post code: &lt;input name=pc&gt; &lt;small&gt;Format: AB12 3CD&lt;/small&gt;&lt;/label&gt;&lt;/p&gt;
    </pre>

  </div>

  <dl class="domintro">

    <dt><var>label</var> . <code>control</code></dt>

    <dd>

    Returns the form control that is associated with this element.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>htmlFor</code></dfn> IDL attribute must
  <a>reflect</a> the <code>for</code> content attribute.

  The <dfn><code>control</code></dfn> IDL attribute must return the
  <code>label</code> element's <a>labeled control</a>, if any, or null if there isn't one.

  The <code>form</code> IDL attribute is part of the element's forms
  API.

  </div>

  <hr />

  <dl class="domintro">

    <dt><var>control</var> . <code>labels</code></dt>

    <dd>

    Returns a <code>NodeList</code> of all the <code>label</code> elements that the form control
    is associated with.

    </dd>

  </dl>

  <div class="impl">

  <a>Labelable elements</a> have a <code>NodeList</code> object
  associated with them that represents the list of <code>label</code> elements, in <a>tree
  order</a>, whose <a>labeled control</a> is the element in question. The <dfn><code>labels</code></dfn> IDL attribute of <a>labelable elements</a>, on getting, must return that
  <code>NodeList</code> object.

  </div>

<h4 id="the-input-element">The <dfn><code>input</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd>If the <code>type</code> attribute is <em>not</em> in the <a>Hidden</a> state: <a>Interactive content</a>.</dd>
    <dd>If the <code>type</code> attribute is <em>not</em> in the <a>Hidden</a> state: <a>Listed</a>, <a>labelable</a>, <a>submittable</a>, <a>resettable</a>, and <a>reassociateable</a> <a>form-associated element</a>.</dd>
    <dd>If the <code>type</code> attribute is in the <a>Hidden</a> state: <a>Listed</a>, <a>submittable</a>, <a>resettable</a>, and <a>reassociateable</a> <a>form-associated element</a>.</dd>
    <dd>If the <code>type</code> attribute is <em>not</em> in the <a>Hidden</a> state: <a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>accept</code> - Hint for expected file type in <a>file upload controls</a></dd>
    <dd><code>alt</code> - Replacement text for use when images are not available</dd>
    <dd><code>autocomplete</code> - Hint for form autofill feature</dd>
    <dd><code>autofocus</code> - Automatically focus the form control when the page is loaded</dd>
    <dd><code>checked</code> - Whether the command or control is checked</dd>
    <dd><code>dirname</code> - Name of form field to use for sending the element's <a>directionality</a> in <a>form submission</a></dd>
    <dd><code>disabled</code> - Whether the form control is disabled</dd>
    <dd><code>form</code> - Associates the control with a <code>form</code> element</dd>
    <dd><code>formaction</code> - <a>URL</a> to use for <a>form submission</a></dd>
    <dd><code>formenctype</code> - Form data set encoding type to use for <a>form submission</a></dd>
    <dd><code>formmethod</code> - HTTP method to use for <a>form submission</a></dd>
    <dd><code>formnovalidate</code> - Bypass form control validation for <a>form submission</a></dd>
    <dd><code>formtarget</code> - <a>Browsing context</a> for <a>form submission</a></dd>
    <dd><code>height</code> - Vertical dimension</dd>
    <dd><code>inputmode</code> - Hint for selecting an input modality</dd>
    <dd><code>list</code> - List of autocomplete options</dd>
    <dd><code>max</code> - Maximum value</dd>
    <dd><code>maxlength</code> - Maximum length of value</dd>
    <dd><code>min</code> - Minimum value</dd>
    <dd><code>minlength</code> - Minimum length of value</dd>
    <dd><code>multiple</code> - Whether to allow multiple values</dd>
    <dd><code>name</code> - Name of form control to use for <a>form submission</a> and in the <code>form.elements</code> API </dd>
    <dd><code>pattern</code> - Pattern to be matched by the form control's value</dd>
    <dd><code>placeholder</code> - User-visible label to be placed within the form control</dd>
    <dd><code>readonly</code> - Whether to allow the value to be edited by the user</dd>
    <dd><code>required</code> - Whether the control is required for <a>form submission</a></dd>
    <dd><code>size</code> - Size of the control</dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>step</code> - Granularity to be matched by the form control's value</dd>
    <dd><code>type</code> - Type of form control</dd>
    <dd><code>value</code> - Value of the form control</dd>
    <dd><code>width</code> - Horizontal dimension</dd>
    <dd>Also, the <code>title</code> attribute <a>has special semantics</a> on this element
    when used in conjunction with the <code>pattern</code> attribute.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>Depends upon <a>state of the <code>type</code> attribute</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLInputElement : HTMLElement {
  attribute DOMString accept;
  attribute DOMString alt;
  attribute DOMString autocomplete;
  attribute boolean autofocus;
  attribute boolean defaultChecked;
  attribute boolean checked;
  attribute DOMString dirName;
  attribute boolean disabled;
  readonly attribute HTMLFormElement? form;
  readonly attribute FileList? files;
  attribute DOMString formAction;
  attribute DOMString formEnctype;
  attribute DOMString formMethod;
  attribute boolean formNoValidate;
  attribute DOMString formTarget;
  attribute unsigned long height;
  attribute boolean indeterminate;
  attribute DOMString inputMode;
  readonly attribute HTMLElement? list;
  attribute DOMString max;
  attribute long maxLength;
  attribute DOMString min;
  attribute long minLength;
  attribute boolean multiple;
  attribute DOMString name;
  attribute DOMString pattern;
  attribute DOMString placeholder;
  attribute boolean readOnly;
  attribute boolean required;
  attribute unsigned long size;
  attribute DOMString src;
  attribute DOMString step;
  attribute DOMString type;
  attribute DOMString defaultValue;
  [TreatNullAs=EmptyString] attribute DOMString value;
  attribute object? valueAsDate;
  attribute unrestricted double valueAsNumber;
  attribute double valueLow;
  attribute double valueHigh;
  attribute unsigned long width;

  void stepUp(optional long n = 1);
  void stepDown(optional long n = 1);

  readonly attribute boolean willValidate;
  readonly attribute ValidityState validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  boolean reportValidity();
  void setCustomValidity(DOMString error);

  [SameObject] readonly attribute NodeList labels;

  void select();
  attribute unsigned long selectionStart;
  attribute unsigned long selectionEnd;
  attribute DOMString selectionDirection;
  void setRangeText(DOMString replacement);
  void setRangeText(DOMString replacement, unsigned long start, unsigned long end, optional SelectionMode selectionMode = "preserve");
  void setSelectionRange(unsigned long start, unsigned long end, optional DOMString direction);
};
</pre>
    </dd>
  </dl>

  The <code>input</code> element <a>represents</a> a typed data field, usually with a form
  control to allow the user to edit the data.

  The <dfn><code>type</code></dfn> attribute controls the data type (and
  associated control) of the element. It is an <a>enumerated attribute</a>. The following
  table lists the keywords and states for the attribute â the keywords in the left column map
  to the states in the cell in the second column on the same row as the keyword.

  <table id="attr-input-type-keywords">
    <thead>
    <tr>
      <th> Keyword
      </th><th> State
      </th><th> Data type
      </th><th> Control type
    </th></tr></thead><tbody>
    <tr>
      <td> <dfn><code>hidden</code></dfn>
      </td><td> <a>Hidden</a>
      </td><td> An arbitrary string
      </td><td> n/a
    </td></tr><tr>
      <td> <dfn><code>text</code></dfn>
      </td><td> <a>Text</a>
      </td><td> Text with no line breaks
      </td><td> A text field
    </td></tr><tr>
      <td> <dfn><code>search</code></dfn>
      </td><td> <a>Search</a>
      </td><td> Text with no line breaks
      </td><td> Search field
    </td></tr><tr>
      <td> <dfn><code>tel</code></dfn>
      </td><td> <a>Telephone</a>
      </td><td> Text with no line breaks
      </td><td> A text field
    </td></tr><tr>
      <td> <dfn><code>url</code></dfn>
      </td><td> <a>URL</a>
      </td><td> An absolute URL
      </td><td> A text field
    </td></tr><tr>
      <td> <dfn><code>email</code></dfn>
      </td><td> <a>E-mail</a>
      </td><td> An e-mail address or list of e-mail addresses
      </td><td> A text field
    </td></tr><tr>
      <td> <dfn><code>password</code></dfn>
      </td><td> <a>Password</a>
      </td><td> Text with no line breaks (sensitive information)
      </td><td> A text field that obscures data entry
    </td></tr><tr>
      <td> <dfn><code>datetime</code></dfn>
      </td><td> <a>Date and Time</a>
      </td><td> A date and time (year, month, day, hour, minute, second, fraction of a second) with the time zone set to UTC
      </td><td> A date and time control
    </td></tr><tr>
      <td> <dfn><code>date</code></dfn>
      </td><td> <a>Date</a>
      </td><td> A date (year, month, day) with no time zone
      </td><td> A date control
    </td></tr><tr>
      <td> <dfn><code>month</code></dfn>
      </td><td> <a>Month</a>
      </td><td> A date consisting of a year and a month with no time zone
      </td><td> A month control
    </td></tr><tr>
      <td> <dfn><code>week</code></dfn>
      </td><td> <a>Week</a>
      </td><td> A date consisting of a week-year number and a week number with no time zone
      </td><td> A week control
    </td></tr><tr>
      <td> <dfn><code>time</code></dfn>
      </td><td> <a>Time</a>
      </td><td> A time (hour, minute, seconds, fractional seconds) with no time zone
      </td><td> A time control
    </td></tr><tr>
      <td> <dfn><code>number</code></dfn>
      </td><td> <a>Number</a>
      </td><td> A numerical value
      </td><td> A text field or spinner control
    </td></tr><tr>
      <td> <dfn><code>range</code></dfn>
      </td><td> <a>Range</a>
      </td><td> A numerical value, with the extra semantic that the exact value is not important
      </td><td> A slider control or similar
    </td></tr><tr>
      <td> <dfn><code>color</code></dfn>
      </td><td> <a>Color</a>
      </td><td> An sRGB color with 8-bit red, green, and blue components
      </td><td> A color well
    </td></tr><tr>
      <td> <dfn><code>checkbox</code></dfn>
      </td><td> <a>Checkbox</a>
      </td><td> A set of zero or more values from a predefined list
      </td><td> A checkbox
    </td></tr><tr>
      <td> <dfn><code>radio</code></dfn>
      </td><td> <a>Radio Button</a>
      </td><td> An enumerated value
      </td><td> A radio button
    </td></tr><tr>
      <td> <dfn><code>file</code></dfn>
      </td><td> <a>File Upload</a>
      </td><td> Zero or more files each with a <a>MIME type</a> and optionally a file name
      </td><td> A label and a button
    </td></tr><tr>
      <td> <dfn><code>submit</code></dfn>
      </td><td> <a>Submit Button</a>
      </td><td> An enumerated value, with the extra semantic that it must be the last value selected and initiates form submission
      </td><td> A button
    </td></tr><tr>
      <td> <dfn><code>image</code></dfn>
      </td><td> <a>Image Button</a>
      </td><td> A coordinate, relative to a particular image's size, with the extra semantic that it must
      be the last value selected and initiates form submission
      </td><td> Either a clickable image, or a button
    </td></tr><tr>
      <td> <dfn><code>reset</code></dfn>
      </td><td> <a>Reset Button</a>
      </td><td> n/a
      </td><td> A button
    </td></tr><tr>
      <td> <dfn><code>button</code></dfn>
      </td><td> <a>Button</a>
      </td><td> n/a
      </td><td> A button
  </td></tr></tbody></table>

  The <i>missing value default</i> is the <a>Text</a>
  state.

  Which of the
    <code>accept</code>,
    <code>alt</code>,
    <code>autocomplete</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>list</code>,
    <code>max</code>,
    <code>maxlength</code>,
    <code>min</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>,
    <code>size</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code> content attributes, the
    <code>checked</code>,
    <code>files</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>,
    <code>valueHigh</code>, and
    <code>list</code> IDL attributes, the
    <code>select()</code> method, the
    <code>selectionStart</code>,
    <code>selectionEnd</code>, and
    <code>selectionDirection</code>, IDL attributes, the
    <code>setRangeText()</code> and
    <code>setSelectionRange()</code> methods, the
    <code>stepUp()</code> and
    <code>stepDown()</code> methods, and the
    <code>input</code> and
    <code>change</code> events <dfn>apply</dfn> to an
    <code>input</code> element depends on the state of its
    <code>type</code> attribute.
  The subsections that define each type also clearly define in normative "bookkeeping" sections
  which of these feature apply, and which <dfn>do not apply</dfn>, to each type. The behavior of
  these features depends on whether they apply or not, as defined in their various sections (q.v.
  for <a>content attributes</a>, for <a>APIs</a>, for <a>events</a>).

  The following table <span class="impl">is non-normative and</span> summarizes which of those
  content attributes, IDL attributes, methods, and events <a>apply</a> to each state:

  <table class="applies" id="input-type-attr-summary">
    <thead>
    <tr>
      <th>
      </th><th> <a>Hidden</a>
      </th><th> <a>Text</a>,
          <a>Search</a>
      </th><th> <a>URL</a>,
          <a>Telephone</a>
      </th><th> <a>E-mail</a>
      </th><th> <a>Password</a>
      </th><th> <a>Date and Time</a>,
          <a>Date</a>,
          <a>Month</a>,
          <a>Week</a>,
          <a>Time</a>

      </th><th> <a>Number</a>
      </th><th> <a>Range</a>
      </th><th> <a>Color</a>
      </th><th> <a>Checkbox</a>,
          <a>Radio Button</a>
      </th><th> <a>File Upload</a>
      </th><th> <a>Submit Button</a>
      </th><th> <a>Image Button</a>
      </th><th> <a>Reset Button</a>,
          <a>Button</a>

    </th></tr></thead><tbody>
    <tr>

      <th scope="rowgroup" colspan="15">Content attributes

    </th></tr><tr>
      <th> <code>accept</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>alt</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>autocomplete</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>checked</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>dirname</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>formaction</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>formenctype</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>formmethod</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>formnovalidate</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>formtarget</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>height</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>inputmode</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>list</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>max</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>maxlength</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>min</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>minlength</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>multiple</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>pattern</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>placeholder</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>readonly</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>required</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>size</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>src</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>step</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>width</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

    </td></tr></tbody><tbody>
    <tr>
      <th scope="rowgroup" colspan="16">IDL attributes and methods

    </th></tr><tr>
      <th> <code>checked</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>files</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr class="impl">
      <th> <code>value</code>
      </th><td class="yes"> <a>default</a>
      </td><td class="yes"> <a>value</a>

      </td><td class="yes"> <a>value</a>
      </td><td class="yes"> <a>value</a>
      </td><td class="yes"> <a>value</a>
      </td><td class="yes"> <a>value</a>

      </td><td class="yes"> <a>value</a>
      </td><td class="yes"> <a>value</a>
      </td><td class="yes"> <a>value</a>
      </td><td class="yes"> <a>default/on</a>

      </td><td class="yes"> <a>filename</a>
      </td><td class="yes"> <a>default</a>
      </td><td class="yes"> <a>default</a>
      </td><td class="yes"> <a>default</a>

    </td></tr><tr>
      <th> <code>valueAsDate</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>valueAsNumber</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes*
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>valueLow</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="yes"> Yes**
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>valueHigh</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="yes"> Yes**
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>list</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>select()</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>selectionStart</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>selectionEnd</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>selectionDirection</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>setRangeText()</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>setSelectionRange()</code>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="yes"> Yes
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>stepDown()</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <code>stepUp()</code>
      </th><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·

      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr></tbody><tbody>
    <tr>
      <th scope="rowgroup" colspan="16">Events

    </th></tr><tr>
      <th> <a><code>input</code> event</a>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

    </td></tr><tr>
      <th> <a><code>change</code> event</a>
      </th><td class="no"> Â·
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes
      </td><td class="yes"> Yes

      </td><td class="yes"> Yes
      </td><td class="no"> Â·
      </td><td class="no"> Â·
      </td><td class="no"> Â·

  </td></tr></tbody></table>

  <small>* If the <code>multiple</code> attribute
  is not specified.</small>

  <small>** If the <code>multiple</code> attribute
  <em>is</em> specified.</small>

  <div class="impl">

  Some states of the <code>type</code> attribute define a <dfn>value
  sanitization algorithm</dfn>.

  Each <code>input</code> element has a <a>value</a>, which is
  exposed by the <code>value</code> IDL attribute. Some states define an
  <dfn>algorithm to convert a string to a number</dfn>,
  an <dfn>algorithm to convert a number to a
  string</dfn>, an <dfn>algorithm to convert a string to a
  <code>Date</code> object</dfn>, and an <dfn>algorithm to
  convert a <code>Date</code> object to a string</dfn>, which are used by <code>max</code>, <code>min</code>, <code>step</code>, <code>valueAsDate</code>,
  <code>valueAsNumber</code>, <code>valueLow</code>, <code>valueHigh</code>,
  <code>stepDown()</code>, and <code>stepUp()</code>.

  Each <code>input</code> element has a boolean <dfn>dirty
  value flag</dfn>. The <a>dirty value flag</a> must be
  initially set to false when the element is created, and must be set to true whenever the user
  interacts with the control in a way that changes the <a>value</a>.
  (It is also set to true when the value is programmatically changed, as described in the definition
  of the <code>value</code> IDL attribute.)

  </div>

  The <dfn><code>value</code></dfn> content attribute gives the default
  <a>value</a> of the <code>input</code> element. <span class="impl">When the <code>value</code> content attribute is added, set,
  or removed, if the control's <a>dirty value flag</a>
  is false, the user agent must set the <a>value</a> of the element
  to the value of the <code>value</code> content attribute, if there is
  one, or the empty string otherwise, and then run the current <a>value sanitization
  algorithm</a>, if one is defined.</span>

  <div class="impl">

  Each <code>input</code> element has a <a>checkedness</a>,
  which is exposed by the <code>checked</code> IDL attribute.

  Each <code>input</code> element has a boolean <dfn>dirty checkedness flag</dfn>. When it is true, the
  element is said to have a <dfn><i>dirty checkedness</i></dfn>.
  The <a>dirty checkedness flag</a> must be initially
  set to false when the element is created, and must be set to true whenever the user interacts with
  the control in a way that changes the <a>checkedness</a>.

  </div>

  The <dfn><code>checked</code></dfn> content attribute is a
  <a>boolean attribute</a> that gives the default <a>checkedness</a> of the <code>input</code> element. <span class="impl">When the <code>checked</code> content attribute is added,
  if the control does not have <i>dirty checkedness</i>, the
  user agent must set the <a>checkedness</a> of the element to
  true; when the <code>checked</code> content attribute is removed, if
  the control does not have <i>dirty checkedness</i>, the user
  agent must set the <a>checkedness</a> of the element to
  false.</span>

  <div class="impl">

  The <a>reset algorithm</a> for <code>input</code>
  elements is to set the <a>dirty value flag</a> and
  <a>dirty checkedness flag</a> back to false, set
  the <a>value</a> of the element to the value of the <code>value</code> content attribute, if there is one, or the empty string
  otherwise, set the <a>checkedness</a> of the element to true if
  the element has a <code>checked</code> content attribute and false if
  it does not, empty the list of <a>selected
  files</a>, and then invoke the <a>value sanitization algorithm</a>, if the <code>type</code> attribute's current state defines one.

  Each <code>input</code> element can be <i>mutable</i>. Except where
  otherwise specified, an <code>input</code> element is always <i>mutable</i>. Similarly, except where otherwise specified, the user
  agent should not allow the user to modify the element's <a>value</a> or <a>checkedness</a>.

  When an <code>input</code> element is <a>disabled</a>, it is not <i>mutable</i>.

  <p class="note">
    The <code>readonly</code> attribute can also in some
  cases (e.g. for the <a>Date</a> state, but not the <a>Checkbox</a> state) stop an <code>input</code> element from
  being <i>mutable</i>.
  </p>

  The <a>cloning steps</a> for <code>input</code> elements
  must propagate the <a>value</a>, <a>dirty value flag</a>, <a>checkedness</a>, and <a>dirty checkedness flag</a> from the node being cloned
  to the copy.

  <hr />

  When an <code>input</code> element is first created, the element's rendering and behavior must
  be set to the rendering and behavior defined for the <code>type</code>
  attribute's state, and the <a>value sanitization algorithm</a>, if one is defined for the
  <code>type</code> attribute's state, must be invoked.

  </div>

  <div id="input-type-change" class="impl">

  When an <code>input</code> element's <code>type</code> attribute
  changes state, the user agent must run the following steps:

  <ol>

    <li>If the previous state of the element's <code>type</code> attribute
    put the <code>value</code> IDL attribute in the <i>value</i> mode, and the element's <a>value</a> is not the empty string, and the new state of the element's
    <code>type</code> attribute puts the <code>value</code> IDL attribute in either the <i>default</i> mode or the <i>default/on</i> mode, then set the element's <code>value</code> content attribute to the element's <a>value</a>.</li>

    <li>Otherwise, if the previous state of the element's <code>type</code> attribute put the <code>value</code>
    IDL attribute in any mode other than the <i>value</i> mode, and the
    new state of the element's <code>type</code> attribute puts the <code>value</code> IDL attribute in the <i>value</i> mode, then set the <a>value</a> of the element to the value of the <code>value</code> content attribute, if there is one, or the empty string
    otherwise, and then set the control's <a>dirty value
    flag</a> to false.</li>

    <li>Otherwise, if the previous state of the element's <code>type</code> attribute put the <code>value</code> IDL attribute in any mode other than the <i>filename</i> mode, and the new state of the element's <code>type</code> attribute puts the <code>value</code> IDL attribute in the <i>filename</i> mode, then set the <a>value</a> of the element to the empty string.</li>

    <li>Update the element's rendering and behavior to the new state's.</li>

    <li><dfn>Signal a type change</dfn> for the element. (The <a>Radio Button</a> state uses this, in particular.)</li>

    <li>Invoke the <a>value sanitization algorithm</a>, if one is defined for the <code>type</code> attribute's new state.</li>

  </ol>

  </div>

  <hr />

  The <code>name</code> attribute represents the element's name.
  The <code>dirname</code> attribute controls how the element's <a>directionality</a> is submitted.
  The <code>disabled</code> attribute is used to make the control non-interactive and to prevent its value from being submitted.
  The <code>form</code> attribute is used to explicitly associate the <code>input</code> element with its <a>form owner</a>.
  The <code>autofocus</code> attribute controls focus.
  The <code>inputmode</code> attribute controls the user interface's input modality for the control.
  The <code>autocomplete</code> attribute controls how the user agent provides autofill behavior.

  <div class="impl">

  The <dfn><code>indeterminate</code></dfn> IDL attribute must
  initially be set to false. On getting, it must return the last value it was set to. On setting, it
  must be set to the new value. It has no effect except for changing the appearance of <a>checkbox</a> controls.

  The <dfn><code>accept</code></dfn>, <dfn><code>alt</code></dfn>, <dfn><code>max</code></dfn>,
  <dfn><code>min</code></dfn>, <dfn><code>multiple</code></dfn>, <dfn><code>pattern</code></dfn>, <dfn><code>placeholder</code></dfn>, <dfn><code>required</code></dfn>, <dfn><code>size</code></dfn>, <dfn><code>src</code></dfn>,
  and <dfn><code>step</code></dfn> IDL attributes must <a>reflect</a>
  the respective content attributes of the same name. The <dfn><code>dirName</code></dfn> IDL attribute must <a>reflect</a> the
  <code>dirname</code> content attribute. The <dfn><code>readOnly</code></dfn> IDL attribute must <a>reflect</a> the
  <code>readonly</code> content attribute. The <dfn><code>defaultChecked</code></dfn> IDL attribute must
  <a>reflect</a> the <code>checked</code> content attribute. The
  <dfn><code>defaultValue</code></dfn> IDL attribute must
  <a>reflect</a> the <code>value</code> content attribute.

  The <dfn><code>type</code></dfn> IDL attribute must <a>reflect</a>
  the respective content attribute of the same name, <a>limited to only known values</a>. The
  <dfn><code>inputMode</code></dfn> IDL attribute must
  <a>reflect</a> the <code>inputmode</code> content attribute,
  <a>limited to only known values</a>. The <dfn><code>maxLength</code></dfn> IDL attribute must <a>reflect</a>
  the <code>maxlength</code> content attribute, <a>limited to only
  non-negative numbers</a>.  The <dfn><code>minLength</code></dfn> IDL attribute must <a>reflect</a>
  the <code>minlength</code> content attribute, <a>limited to only
  non-negative numbers</a>.

  The IDL attributes <dfn><code>width</code></dfn> and <dfn><code>height</code></dfn> must return the rendered width and height of
  the image, in CSS pixels, if an image is <a>being rendered</a>, and is being rendered to a
  visual medium; or else the <a>intrinsic width and height</a>
  of the image, in CSS pixels, if an image is <i>available</i> but
  not being rendered to a visual medium; or else 0,
  if no image is <i>available</i>. When the <code>input</code> element's
  <code>type</code> attribute is not in the <a>Image Button</a> state, then no image is <i>available</i>. [[!CSS-2015]]

  On setting, they must act as if they <a>reflected</a> the respective
  content attributes of the same name.

  The <code>willValidate</code>, <code>validity</code>, and <code>validationMessage</code> IDL attributes, and the <code>checkValidity()</code>, <code>reportValidity()</code>, and <code>setCustomValidity()</code> methods, are part of the
  <a>constraint validation API</a>. The <code>labels</code> IDL
  attribute provides a list of the element's <code>label</code>s. The <code>select()</code>, <code>selectionStart</code>, <code>selectionEnd</code>, <code>selectionDirection</code>, <code>setRangeText()</code>, and <code>setSelectionRange()</code> methods and IDL attributes
  expose the element's text selection. The <code>autofocus</code>, <code>disabled</code>, <code>form</code>, and <code>name</code> IDL attributes are part of the element's forms API.

  </div>

<h5 id="states-of-the-type-attribute">States of the <code>type</code> attribute</h5>

<h6 id="hidden-state-typehidden"><dfn>Hidden</dfn> state (<code>type=hidden</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Hidden</a> state, the rules in this section apply.

  </div>

  The <code>input</code> element <a>represents</a> a value that is not intended to be
  examined or manipulated by the user.

  <div class="impl">

  <strong>Constraint validation</strong>: If an <code>input</code> element's <code>type</code> attribute is in the <a>Hidden</a> state, it is <a>barred from constraint
  validation</a>.

  </div>

  If the <code>name</code> attribute is present and has a value that is a
  <a>case-sensitive</a> match for the string "<code>_charset_</code>", then the element's <code>value</code> attribute must be omitted.

  <div class="bookkeeping">

    The
    <code>value</code>
    IDL attribute <a>applies</a> to this element and is
    in mode <a>default</a>.

    The following content attributes must not be specified and <a>do not
    apply</a> to the element:
    <code>accept</code>,
    <code>alt</code>,
    <code>autocomplete</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>list</code>,
    <code>max</code>,
    <code>maxlength</code>,
    <code>min</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>,
    <code>size</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the
    element:
    <code>checked</code>,
    <code>files</code>,
    <code>list</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>select()</code>,
    <code>setRangeText()</code>,
    <code>setSelectionRange()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

    The <code>input</code> and <code>change</code> events <a>do not apply</a>.

  </div>

<h6 id="text-typetext-state-and-search-state-typesearch"><dfn>Text</dfn> (<code>type=text</code>) state and <dfn>Search</dfn> state (<code>type=search</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>textbox</code></a>
    (default - <a><em>do not set</em></a>) or
    <a><code>combobox</code>.</a></dd><a>
    </a><dt><a>Allowed </a><a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Text</a> state or the <a>Search</a> state, the rules in this section apply.

  </div>

  The <code>input</code> element <a>represents</a> a one line plain text edit control for
  the element's <a>value</a>.

  <p class="note">
    The difference between the <a>Text</a> state
  and the <a>Search</a> state is primarily stylistic: on
  platforms where search fields are distinguished from regular text fields, the <a>Search</a> state might result in an appearance consistent with
  the platform's search fields rather than appearing like a regular text field.
  </p>

  <div class="impl">

  If the element is <i>mutable</i>, its <a>value</a> should be editable by the user. User agents must not allow
  users to insert U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters into the element's
  <a>value</a>.

  If the element is <i>mutable</i>, the user agent should allow the
  user to change the writing direction of the element, setting it either to a left-to-right writing
  direction or a right-to-left writing direction. If the user does so, the user agent must then run
  the following steps:

  <ol>

    <li>Set the element's <code>dir</code> attribute to "<code>ltr</code>" if the user selected a left-to-right writing direction, and
    "<code>rtl</code>" if the user selected a right-to-left writing
    direction.</li>

    <li><a>Queue a task</a> to <a>fire a simple event</a> that bubbles named <code>input</code> at the <code>input</code> element.</li>

  </ol>

  </div>

  The <code>value</code> attribute, if specified, must have a value that
  contains no U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters.

  <div class="impl">

  <strong>The <a>value sanitization algorithm</a> is as follows</strong>: <a>Strip line
  breaks</a> from the <a>value</a>.

  </div>

  <div class="bookkeeping">

    The following common <code>input</code> element content
    attributes, IDL attributes, and methods <a>apply</a> to the element:
    <code>autocomplete</code>,
    <code>dirname</code>,
    <code>inputmode</code>,
    <code>list</code>,
    <code>maxlength</code>,
    <code>minlength</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>, and
    <code>size</code> content attributes;
    <code>list</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>, and
    <code>value</code> IDL attributes;
    <code>select()</code>,
    <code>setRangeText()</code>, and
    <code>setSelectionRange()</code> methods.

    The <code>value</code> IDL attribute is
    in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not
    apply</a> to the element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>max</code>,
    <code>min</code>,
    <code>multiple</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the
    element:
    <code>checked</code>,
    <code>files</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>stepDown()</code> and
    <code>stepUp()</code> methods.

  </div>

<h6 id="telephone-state-typetel"><dfn>Telephone</dfn> state (<code>type=tel</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>textbox</code></a>
    (default - <a><em>do not set</em></a>) or
    <a><code>combobox</code>.</a></dd><a>
    </a><dt><a>Allowed </a><a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Telephone</a> state, the rules in this section apply.

  </div>

  The <code>input</code> element <a>represents</a> a control for editing a telephone number
  given in the element's <a>value</a>.

  <div class="impl">

  If the element is <i>mutable</i>, its <a>value</a> should be editable by the user. User agents may change the
  spacing and, with care, the punctuation of <a>values</a> that the
  user enters. User agents must not allow users to insert U+000A LINE FEED (LF) or U+000D CARRIAGE
  RETURN (CR) characters into the element's <a>value</a>.

  </div>

  The <code>value</code> attribute, if specified, must have a value that
  contains no U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters.

  <div class="impl">

  <strong>The <a>value sanitization algorithm</a> is as follows</strong>: <a>Strip line
  breaks</a> from the <a>value</a>.

  </div>

  <p class="note">
    Unlike the <a>URL</a> and <a>E-mail</a> types, the <a>Telephone</a> type does not enforce a particular syntax. This is
  intentional; in practice, telephone number fields tend to be free-form fields, because there are a
  wide variety of valid phone numbers. Systems that need to enforce a particular format are
  encouraged to use the <code>pattern</code> attribute or the <code>setCustomValidity()</code> method to hook into the client-side
  validation mechanism.
  </p>

  <div class="bookkeeping">

    The following common <code>input</code> element content
    attributes, IDL attributes, and methods <a>apply</a> to the element:
    <code>autocomplete</code>,
    <code>list</code>,
    <code>maxlength</code>,
    <code>minlength</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>, and
    <code>size</code> content attributes;
    <code>list</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>, and
    <code>value</code> IDL attributes;
    <code>select()</code>,
    <code>setRangeText()</code>, and
    <code>setSelectionRange()</code> methods.

    The <code>value</code> IDL attribute is
    in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not
    apply</a> to the element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>max</code>,
    <code>min</code>,
    <code>multiple</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the
    element:
    <code>checked</code>,
    <code>files</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>stepDown()</code> and
    <code>stepUp()</code> methods.

  </div>

<h6 id="url-state-typeurl"><dfn>URL</dfn> state (<code>type=url</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>textbox</code></a>
    (default - <a><em>do not set</em></a>) or
    <a><code>combobox</code>.</a></dd><a>
    </a><dt><a>Allowed </a><a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>URL</a> state, the rules in this section apply.

  </div>

  The <code>input</code> element <a>represents</a> a control for editing a single
  <a>absolute URL</a> given in the element's <a>value</a>.

  <div class="impl">

  If the element is <i>mutable</i>, the user agent should allow the
  user to change the URL represented by its <a>value</a>. User agents
  may allow the user to set the <a>value</a> to a string that is not
  a <a>valid</a> <a>absolute URL</a>, but may also or instead
  automatically escape characters entered by the user so that the <a>value</a> is always a <a>valid</a>
  <a>absolute URL</a> (even if that isn't the actual value seen and edited by the user in the
  interface). User agents should allow the user to set the <a>value</a> to the empty string. User agents must not allow users to
  insert U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters into the <a>value</a>.

  </div>

  The <code>value</code> attribute, if specified and not empty, must
  have a value that is a <a>valid URL potentially surrounded by spaces</a> that is also an
  <a>absolute URL</a>.

  <div class="impl">

  <strong>The <a>value sanitization algorithm</a> is as follows</strong>: <a>Strip line
  breaks</a> from the <a>value</a>, then <a>strip leading and
  trailing whitespace</a> from the <a>value</a>.

  <strong>Constraint validation</strong>: While the <a>value</a>
  of the element is neither the empty string nor a <a>valid</a>
  <a>absolute URL</a>, the element is <a>suffering from a type mismatch</a>.

  </div>

  <div class="bookkeeping">

    The following common <code>input</code> element content
    attributes, IDL attributes, and methods <a>apply</a> to the element:
    <code>autocomplete</code>,
    <code>list</code>,
    <code>maxlength</code>,
    <code>minlength</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>, and
    <code>size</code> content attributes;
    <code>list</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>, and
    <code>value</code> IDL attributes;
    <code>select()</code>,
    <code>setRangeText()</code>, and
    <code>setSelectionRange()</code> methods.

    The <code>value</code> IDL attribute is
    in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not
    apply</a> to the element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>max</code>,
    <code>min</code>,
    <code>multiple</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the
    element:
    <code>checked</code>,
    <code>files</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>stepDown()</code> and
    <code>stepUp()</code> methods.

  </div>

  <div class="example">
    If a document contained the following markup:

    <pre highlight="html">
&lt;input type="url" name="location" list="urls"&gt;
&lt;datalist id="urls"&gt;
  &lt;option label="MIME: Format of Internet Message Bodies" value="https://tools.ietf.org/html/rfc2045"&gt;
  &lt;option label="HTML 4.01 Specification" value="http://www.w3.org/TR/html4/"&gt;
  &lt;option label="Form Controls" value="http://www.w3.org/TR/xforms/slice8.html#ui-commonelems-hint"&gt;
  &lt;option label="Scalable Vector Graphics (SVG) 1.1 Specification" value="http://www.w3.org/TR/SVG/"&gt;
  &lt;option label="Feature Sets - SVG 1.1 - 20030114" value="http://www.w3.org/TR/SVG/feature.html"&gt;
  &lt;option label="The Single UNIX Specification, Version 3" value="http://www.unix-systems.org/version3/"&gt;
&lt;/datalist&gt;
    </pre>

    ...and the user had typed "<kbd>www.w3</kbd>", and the user agent had also found that the user
    had visited <code>http://www.w3.org/Consortium/#membership</code> and <code>http://www.w3.org/TR/XForms/</code> in the recent past, then the rendering might look
    like this:

    <img src="images/sample-url.png" width="472" height="134" alt="A text box with an icon on the left followed by the text &quot;www.w3&quot; and a cursor, with a drop down button on the right hand side; with, below, a drop down box containing a list of six URLs on the left, with the first four having grayed out labels on the right; and a scroll bar to the right of the drop down box, indicating further values are available." />

    The first four URLs in this sample consist of the four URLs in the author-specified list that
    match the text the user has entered, sorted in some UA-defined manner (maybe by how frequently
    the user refers to those URLs). Note how the UA is using the knowledge that the values are URLs
    to allow the user to omit the scheme part and perform intelligent matching on the domain
    name.

    The last two URLs (and probably many more, given the scrollbar's indications of more values
    being available) are the matches from the user agent's session history data. This data is not
    made available to the page DOM. In this particular case, the UA has no titles to provide for
    those values.

  </div>

<h6 id="email-state-typeemail"><dfn>E-mail</dfn> state (<code>type=email</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>textbox</code></a>
    (default - <a><em>do not set</em></a>) or
    <a><code>combobox</code>.</a></dd><a>
    </a><dt><a>Allowed </a><a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>E-mail</a> state, the rules in this section apply.

  </div>

  How the <a>E-mail</a> state operates depends on whether the
  <code>multiple</code> attribute is specified or not.

  <dl class="switch">

    <dt>When the <code>multiple</code> attribute is not specified on the
    element</dt>

    <dd>

    The <code>input</code> element <a>represents</a> a control for editing an e-mail
    address given in the element's <a>value</a>.

    <div class="impl">

    If the element is <i>mutable</i>, the user agent should allow the
    user to change the e-mail address represented by its <a>value</a>. User agents may allow the user to set the <a>value</a> to a string that is not a <a>valid e-mail
    address</a>. The user agent should act in a manner consistent with expecting the user to
    provide a single e-mail address. User agents should allow the user to set the <a>value</a> to the empty string. User agents must not allow users to
    insert U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters into the <a>value</a>. User agents may transform the <a>value</a> for display and editing; in particular, user agents should
    convert punycode in the domain labels of the <a>value</a> to IDN in the display and
    vice versa.

    <strong>Constraint validation</strong>: While the user interface is representing input that
    the user agent cannot convert to punycode, the control is <a>suffering from bad
    input</a>.

    </div>

    The <code>value</code> attribute, if specified and not empty, must
    have a value that is a single <a>valid e-mail address</a>.

    <div class="impl">

    <strong>The <a>value sanitization algorithm</a> is as follows</strong>: <a>Strip
    line breaks</a> from the <a>value</a>, then <a>strip
    leading and trailing whitespace</a> from the <a>value</a>.

    <strong>Constraint validation</strong>: While the <a>value</a>
    of the element is neither the empty string nor a single <a>valid e-mail address</a>, the
    element is <a>suffering from a type mismatch</a>.

    </div>

    </dd>

    <dt>When the <code>multiple</code> attribute <em>is</em> specified on
    the element</dt>

    <dd>

    The <code>input</code> element <a>represents</a> a control for adding, removing, and
    editing the e-mail addresses given in the element's <a>value<em>s</em></a>.

    <div class="impl">

    If the element is <i>mutable</i>, the user agent should allow the
    user to add, remove, and edit the e-mail addresses represented by its <a>values</a>. User agents may allow the user to set any
    individual value in the list of <a>value<em>s</em></a> to a
    string that is not a <a>valid e-mail address</a>, but must not allow users to set any
    individual value to a string containing U+002C COMMA (,), U+000A LINE FEED (LF), or U+000D
    CARRIAGE RETURN (CR) characters. User agents should allow the user to remove all the addresses
    in the element's <a>values</a>. User agents may
    transform the <a>values</a> for display and editing; in
    particular, user agents should convert punycode in the domain labels of the <a>value</a> to IDN in the display and vice versa.

    <strong>Constraint validation</strong>: While the user interface describes a situation where
    an individual value contains a U+002C COMMA (,) or is representing input that the user agent
    cannot convert to punycode, the control is <a>suffering from bad input</a>.

    Whenever the user changes the element's <a>value<em>s</em></a>, the user agent must run the following
    steps:

    <ol>

      <li>Let <var>latest values</var> be a copy of the element's <a>value<em>s</em></a>.</li>

      <li><a>Strip leading and trailing whitespace</a> from each value in <var>latest values</var>.</li>

      <li>Let the element's <a>value</a> be the result of
      concatenating all the values in <var>latest values</var>, separating each value from
      the next by a single U+002C COMMA character (,), maintaining the list's order.</li>

    </ol>

    </div>

    The <code>value</code> attribute, if specified, must have a value
    that is a <a>valid e-mail address list</a>.

    <div class="impl">

    <strong>The <a>value sanitization algorithm</a> is as follows</strong>:

    <ol>

      <li><a>Split on commas</a> the element's <a>value</a>, <a>strip leading and trailing whitespace</a> from
      each resulting token, if any, and let the element's <a>values</a> be the (possibly empty) resulting list of
      (possibly empty) tokens, maintaining the original order.</li>

      <li>Let the element's <a>value</a> be the result of
      concatenating the element's <a>values</a>, separating
      each value from the next by a single U+002C COMMA character (,), maintaining the list's
      order.</li>

    </ol>

    <strong>Constraint validation</strong>: While the <a>value</a>
    of the element is not a <a>valid e-mail address list</a>, the element is <a>suffering
    from a type mismatch</a>.

    </div>

    </dd>

  </dl>

  When the <code>multiple</code> attribute is set or removed, the
  user agent must run the <a>value sanitization algorithm</a>.

  A <dfn>valid e-mail address</dfn> is a string that matches the <code>email</code>
  production of the following ABNF, the character set for which is Unicode. This ABNF implements the
  extensions described in RFC 1123. [[!ABNF]] [[!RFC5322]] [[!RFC1034]] [[!RFC1123]]

  <pre data-highlight="abnf">
email         = 1*( atext / "." ) "@" label *( "." label )
label         = let-dig [ [ ldh-str ] let-dig ]  ; limited to a length of 63 characters by <a>RFC 1034 section 3.5</a>
atext         = &lt; as defined in <a>RFC 5322 section 3.2.3</a> &gt;
let-dig       = &lt; as defined in <a>RFC 1034 section 3.5</a> &gt;
ldh-str       = &lt; as defined in <a>RFC 1034 section 3.5</a> &gt;
    </pre>

  <p class="note">
    This requirement is a <a>willful violation</a> of RFC 5322, which defines a
  syntax for e-mail addresses that is simultaneously too strict (before the "@" character), too
  vague (after the "@" character), and too lax (allowing comments, whitespace characters, and quoted
  strings in manners unfamiliar to most users) to be of practical use here.
  </p>

  <div class="note">

    The following JavaScript- and Perl-compatible regular expression is an implementation of the
    above definition.

    <pre highlight="javascript">
/^[a-zA-Z0-9.!#$%&amp;'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
    </pre>

  </div>

  A <dfn>valid e-mail address list</dfn> is a <a>set of comma-separated tokens</a>, where
  each token is itself a <a>valid e-mail address</a>. <span class="impl">To obtain the list of
  tokens from a <a>valid e-mail address list</a>, an implementation must <a>split the string on commas</a>.</span>

  <div class="bookkeeping">

    The following common <code>input</code> element content
    attributes, IDL attributes, and methods <a>apply</a> to the element:
    <code>autocomplete</code>,
    <code>list</code>,
    <code>maxlength</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>, and
    <code>size</code> content attributes;
    <code>list</code> and
    <code>value</code> IDL attributes;
    <code>select()</code> method.

    The <code>value</code> IDL attribute is
    in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not
    apply</a> to the element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>max</code>,
    <code>min</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the
    element:
    <code>checked</code>,
    <code>files</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>select()</code>,
    <code>setRangeText()</code>,
    <code>setSelectionRange()</code>,
    <code>stepDown()</code> and
    <code>stepUp()</code> methods.

  </div>

<h6 id="password-state-typepassword"><dfn>Password</dfn> state (<code>type=password</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>textbox</code></a>
    (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Password</a> state, the rules in this section
  apply.

  </div>

  The <code>input</code> element <a>represents</a> a one line plain text edit control for
  the element's <a>value</a>. The user agent should obscure the value
  so that people other than the user cannot see it.

  <div class="impl">

  If the element is <i>mutable</i>, its <a>value</a> should be editable by the user. User agents must not allow
  users to insert U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters into the <a>value</a>.

  </div>

  The <code>value</code> attribute, if specified, must have a value that
  contains no U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters.

  <div class="impl">

  <strong>The <a>value sanitization algorithm</a> is as follows</strong>: <a>Strip line
  breaks</a> from the <a>value</a>.

  </div>

  <div class="bookkeeping">

    The following common <code>input</code> element content
    attributes, IDL attributes, and methods <a>apply</a> to the element:
    <code>autocomplete</code>,
    <code>inputmode</code>,
    <code>maxlength</code>,
    <code>minlength</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>, and
    <code>size</code> content attributes;
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>, and
    <code>value</code> IDL attributes;
    <code>select()</code>,
    <code>setRangeText()</code>, and
    <code>setSelectionRange()</code> methods.

    The <code>value</code> IDL attribute is
    in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not
    apply</a> to the element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>list</code>,
    <code>max</code>,
    <code>min</code>,
    <code>multiple</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the
    element:
    <code>checked</code>,
    <code>files</code>,
    <code>list</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>stepDown()</code> and
    <code>stepUp()</code> methods.

  </div>

<h6 id="date-and-time-state-typedatetime"><dfn>Date and Time</dfn> state (<code>type=datetime</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    </dl>
    </div>

  <div class="impl">

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Date and Time</a> state, the rules in this section
  apply.

  </div>

  The <code>input</code> element <a>represents</a> a control for setting the element's
  <a>value</a> to a string representing a specific <a>global date and time</a>. <span class="impl">User agents may display
  the date and time in whatever time zone is appropriate for the user.</span>

  <div class="impl">

  If the element is <i>mutable</i>, the user agent should allow the
  user to change the <a>global date and time</a> represented by its
  <a>value</a>, as obtained by <a>parsing a global date and time</a> from it. User agents must not allow the user to
  set the <a>value</a> to a non-empty string that is not a
  <a>valid normalized forced-UTC global date and time string</a>, though user agents may allow
  the user to set and view the time in another time zone and silently translate the time to and from
  the UTC time zone in the <a>value</a>. If the user agent provides a
  user interface for selecting a <a>global date and time</a>, then
  the <a>value</a> must be set to a <a>valid normalized forced-UTC
  global date and time string</a> representing the user's selection. User agents should allow the
  user to set the <a>value</a> to the empty string.

  <strong>Constraint validation</strong>: While the user interface describes input that the user
  agent cannot convert to a <a>valid normalized forced-UTC global date and time string</a>,
  the control is <a>suffering from bad input</a>.

  </div>

  <p class="note">
    See the <a>introduction section</a> for a discussion of
  the difference between the input format and submission format for date, time, and number form
  controls<span class="impl">, and the <a>implementation notes</a>
  regarding localization of form controls</span>.
  </p>

  The <code>value</code> attribute, if specified and not empty, must
  have a value that is a <a>valid global date and time string</a>.

  <div class="impl">

  <strong>The <a>value sanitization algorithm</a> is as follows</strong>: If the <a>value</a> of the element is a <a>valid global date and time
  string</a>, then adjust the time so that the <a>value</a>
  represents the same point in time but expressed in the UTC time zone as a <a>valid normalized
  forced-UTC global date and time string</a>, otherwise, set it to the empty string instead.

  </div>

  The <code>min</code> attribute, if specified, must have a value that is
  a <a>valid global date and time string</a>. The <code>max</code>
  attribute, if specified, must have a value that is a <a>valid global date and time
  string</a>.

  The <code>step</code> attribute is expressed in seconds. <span class="impl">The <a>step scale factor</a> is 1000 (which
  converts the seconds to milliseconds, as used in the other algorithms).</span> The <a>default step</a> is 60 seconds.

  <div class="impl">

  When the element is <a>suffering from a step mismatch</a>, the user agent may round the
  element's <a>value</a> to the nearest <a>global date and time</a> for which the element would not <a>suffer from a step mismatch</a>.

  <strong>The <a>algorithm to convert a string to a
  number</a>, given a string <var>input</var>, is as follows</strong>: If <a>parsing a global date and time</a> from <var>input</var> results in an error, then return an error; otherwise, return the number of
  milliseconds elapsed from midnight UTC on the morning of 1970-01-01 (the time represented by the
  value "<code>1970-01-01T00:00:00.0Z</code>") to the parsed <a>global date and time</a>, ignoring leap seconds.

  <strong>The <a>algorithm to convert a number to a
  string</a>, given a number <var>input</var>, is as follows</strong>: Return a
  <a>valid normalized forced-UTC global date and time string</a> that represents the <a>global date and time</a> that is <var>input</var>
  milliseconds after midnight UTC on the morning of 1970-01-01 (the time represented by the value
  "<code>1970-01-01T00:00:00.0Z</code>").

  <strong>The <a>algorithm to convert a string to a
  <code>Date</code> object</a>, given a string <var>input</var>, is as follows</strong>:
  If <a>parsing a global date and time</a> from
  <var>input</var> results in an error, then return an error; otherwise, return <a>a new <code>Date</code> object</a> representing the parsed <a>global date and time</a>, expressed in UTC.

  <strong>The <a>algorithm to convert a
  <code>Date</code> object to a string</a>, given a <code>Date</code> object <var>input</var>, is as follows</strong>: Return a <a>valid normalized forced-UTC global
  date and time string</a> that represents the <a>global date and
  time</a> that is represented by <var>input</var>.

  </div>

  <div class="note" id="only-contemporary-times">

    The <a>Date and Time</a> state (and other date- and
    time-related states described in subsequent sections) is not intended for the entry of values for
    which a precise date and time relative to the contemporary calendar cannot be established. For
    example, it would be inappropriate for the entry of times like "one millisecond after the big
    bang", "the early part of the Jurassic period", or "a winter around 250 BCE".

    For the input of dates before the introduction of the Gregorian calendar, authors are
    encouraged to not use the <a>Date and Time</a> state (and
    the other date- and time-related states described in subsequent sections), as user agents are not
    required to support converting dates and times from earlier periods to the Gregorian calendar,
    and asking users to do so manually puts an undue burden on users. (This is complicated by the
    manner in which the Gregorian calendar was phased in, which occurred at different times in
    different countries, ranging from partway through the 16th century all the way to early in the
    20th.) Instead, authors are encouraged to provide fine-grained input controls using the
    <code>select</code> element and <code>input</code> elements with the <a>Number</a> state.

  </div>

  <div class="bookkeeping">

    The following common <code>input</code> element content
    attributes, IDL attributes, and methods <a>apply</a> to the element:
    <code>autocomplete</code>,
    <code>list</code>,
    <code>max</code>,
    <code>min</code>,
    <code>readonly</code>,
    <code>required</code>, and
    <code>step</code> content attributes;
    <code>list</code>,
    <code>value</code>,
    <code>valueAsDate</code>, and
    <code>valueAsNumber</code> IDL attributes;
    <code>select()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

    The <code>value</code> IDL attribute is
    in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not
    apply</a> to the element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>maxlength</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>size</code>,
    <code>src</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the
    element:
    <code>checked</code>,
    <code>files</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>setRangeText()</code>, and
    <code>setSelectionRange()</code> methods.

  </div>

  <div class="example">
    The following fragment shows part of a calendar application. A user can specify a date and
    time for a meeting (in his local time zone, probably, though the user agent can allow the user to
    change that), and since the submitted data includes the time-zone offset, the application can
    ensure that the meeting is shown at the correct time regardless of the time zones used by all the
    participants.

    <pre highlight="html">
&lt;fieldset&gt;
  &lt;legend&gt;Add Meeting&lt;/legend&gt;
  &lt;p&gt;&lt;label&gt;Meeting name: &lt;input type=text name="meeting.label"&gt;&lt;/label&gt;
  &lt;p&gt;&lt;label&gt;Meeting time: &lt;input type=datetime name="meeting.start"&gt;&lt;/label&gt;
&lt;/fieldset&gt;
    </pre>

    Had the application used the <code>date</code> and/or
    <code>time</code> types instead, the calendar application would
    have also had to explicitly determine which time zone the user intended.

    For events where the precise time is to vary as the user travels (e.g. "celebrate the new
    year!"), and for recurring events that are to stay at the same time for a specific geographic
    location even though that location may go in and out of daylight savings time (e.g. "bring the
    kid to school"), the <code>date</code> and/or
    <code>time</code> types combined with a <code>select</code> element
    (or other similar control) to pick the specific geographic location to which to anchor the time
    would be more appropriate.

  </div>

<h6 id="date-state-typedate"><dfn>Date</dfn> state (<code>type=date</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Date</a> state, the rules in this section apply.

  </div>

  The <code>input</code> element <a>represents</a> a control for setting the element's
  <a>value</a> to a string representing a specific <a>date</a>.

  <p class="note"><a>date</a> values represent a "floating" time and do
  not include <a>time zone</a> information. Care is needed when
  converting values of this type to or from date data types in JavaScript and other programming
  languages. In many cases, an implicit time-of-day and time zone are used to create a global
  ("incremental") time (an integer value that represents the offset from some arbitrary epoch time).
  Processing or conversion of these values, particularly across time zones, can change the value of
  the date itself. [[!TIMEZONE]]</p>

  <div class="impl">

  If the element is <i>mutable</i>, the user agent should allow the
  user to change the <a>date</a> represented by its <a>value</a>, as obtained by <a>parsing a
  date</a> from it. User agents must not allow the user to set the <a>value</a> to a non-empty string that is not a <a>valid date
  string</a>. If the user agent provides a user interface for selecting a <a>date</a>, then the <a>value</a> must be set
  to a <a>valid date string</a> representing the user's selection. User agents should allow
  the user to set the <a>value</a> to the empty string.

  <strong>Constraint validation</strong>: While the user interface describes input that the user
  agent cannot convert to a <a>valid date string</a>, the control is <a>suffering from bad
  input</a>.

  </div>

  <p class="note">
    See the <a>introduction section</a> for a discussion of
  the difference between the input format and submission format for date, time, and number form
  controls<span class="impl">, and the <a>implementation notes</a>
  regarding localization of form controls</span>.
  </p>

  The <code>value</code> attribute, if specified and not empty, must
  have a value that is a <a>valid date string</a>.

  <div class="impl">

  <strong>The <a>value sanitization algorithm</a> is as follows</strong>: If the <a>value</a> of the element is not a <a>valid date string</a>, then
  set it to the empty string instead.

  </div>

  The <code>min</code> attribute, if specified, must have a value that is
  a <a>valid date string</a>. The <code>max</code> attribute, if
  specified, must have a value that is a <a>valid date string</a>.

  The <code>step</code> attribute is expressed in days. <span class="impl">The <a>step scale factor</a> is 86,400,000
  (which converts the days to milliseconds, as used in the other algorithms).</span> The <a>default step</a> is 1 day.

  <div class="impl">

  When the element is <a>suffering from a step mismatch</a>, the user agent may round the
  element's <a>value</a> to the nearest <a>date</a> for which the element would not <a>suffer from a step mismatch</a>.

  <strong>The <a>algorithm to convert a string to a
  number</a>, given a string <var>input</var>, is as follows</strong>: If <a>parsing a date</a> from <var>input</var> results in an
  error, then return an error; otherwise, return the number of milliseconds elapsed from midnight
  UTC on the morning of 1970-01-01 (the time represented by the value "<code>1970-01-01T00:00:00.0Z</code>") to midnight UTC on the morning of the parsed <a>date</a>, ignoring leap seconds.

  <strong>The <a>algorithm to convert a number to a
  string</a>, given a number <var>input</var>, is as follows</strong>: Return a
  <a>valid date string</a> that represents the <a>date</a> that, in
  UTC, is current <var>input</var> milliseconds after midnight UTC on the morning of
  1970-01-01 (the time represented by the value "<code>1970-01-01T00:00:00.0Z</code>").

  <strong>The <a>algorithm to convert a string to a
  <code>Date</code> object</a>, given a string <var>input</var>, is as follows</strong>:
  If <a>parsing a date</a> from <var>input</var> results
  in an error, then return an error; otherwise, return <a>a new
  <code>Date</code> object</a> representing midnight UTC on the morning of the parsed <a>date</a>.

  <strong>The <a>algorithm to convert a
  <code>Date</code> object to a string</a>, given a <code>Date</code> object <var>input</var>, is as follows</strong>: Return a <a>valid date string</a> that
  represents the <a>date</a> current at the time represented by <var>input</var> in the UTC time zone.

  </div>

  <p class="note">
    See <a>the note on historical dates</a> in the
  <a>Date and Time</a> state section.
  </p>

  <div class="bookkeeping">

    The following common <code>input</code> element content
    attributes, IDL attributes, and methods <a>apply</a> to the element:
    <code>autocomplete</code>,
    <code>list</code>,
    <code>max</code>,
    <code>min</code>,
    <code>readonly</code>,
    <code>required</code>, and
    <code>step</code> content attributes;
    <code>list</code>,
    <code>value</code>,
    <code>valueAsDate</code>, and
    <code>valueAsNumber</code> IDL attributes;
    <code>select()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

    The <code>value</code> IDL attribute is
    in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not
    apply</a> to the element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>maxlength</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>size</code>,
    <code>src</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the
    element:
    <code>checked</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>setRangeText()</code>, and
    <code>setSelectionRange()</code> methods.

  </div>

<h6 id="month-state-typemonth"><dfn>Month</dfn> state (<code>type=month</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Month</a> state, the rules in this section apply.

  </div>

  The <code>input</code> element <a>represents</a> a control for setting the element's
  <a>value</a> to a string representing a specific <a>month</a>.

  <div class="impl">

  If the element is <i>mutable</i>, the user agent should allow the
  user to change the <a>month</a> represented by its <a>value</a>, as obtained by <a>parsing a
  month</a> from it. User agents must not allow the user to set the <a>value</a> to a non-empty string that is not a <a>valid month
  string</a>. If the user agent provides a user interface for selecting a <a>month</a>, then the <a>value</a> must be
  set to a <a>valid month string</a> representing the user's selection. User agents should
  allow the user to set the <a>value</a> to the empty string.

  <strong>Constraint validation</strong>: While the user interface describes input that the user
  agent cannot convert to a <a>valid month string</a>, the control is <a>suffering from bad
  input</a>.

  </div>

  <p class="note">
    See the <a>introduction section</a> for a discussion of
  the difference between the input format and submission format for date, time, and number form
  controls<span class="impl">, and the <a>implementation notes</a>
  regarding localization of form controls</span>.
  </p>

  The <code>value</code> attribute, if specified and not empty, must
  have a value that is a <a>valid month string</a>.

  <div class="impl">

  <strong>The <a>value sanitization algorithm</a> is as follows</strong>: If the <a>value</a> of the element is not a <a>valid month string</a>,
  then set it to the empty string instead.

  </div>

  The <code>min</code> attribute, if specified, must have a value that is
  a <a>valid month string</a>. The <code>max</code> attribute, if
  specified, must have a value that is a <a>valid month string</a>.

  The <code>step</code> attribute is expressed in months. <span class="impl">The <a>step scale factor</a> is 1 (there is no
  conversion needed as the algorithms use months).</span> The <a>default step</a> is 1 month.

  <div class="impl">

  When the element is <a>suffering from a step mismatch</a>, the user agent may round the
  element's <a>value</a> to the nearest <a>month</a> for which the element would not <a>suffer from a step mismatch</a>.

  <strong>The <a>algorithm to convert a string to a
  number</a>, given a string <var>input</var>, is as follows</strong>: If <a>parsing a month</a> from <var>input</var> results in an
  error, then return an error; otherwise, return the number of months between January 1970 and the
  parsed <a>month</a>.

  <strong>The <a>algorithm to convert a number to a
  string</a>, given a number <var>input</var>, is as follows</strong>: Return a
  <a>valid month string</a> that represents the <a>month</a> that
  has <var>input</var> months between it and January 1970.

  <strong>The <a>algorithm to convert a string to a
  <code>Date</code> object</a>, given a string <var>input</var>, is as follows</strong>:
  If <a>parsing a month</a> from <var>input</var>
  results in an error, then return an error; otherwise, return <a>a
  new <code>Date</code> object</a> representing midnight UTC on the morning of the first day of
  the parsed <a>month</a>.

  <strong>The <a>algorithm to convert a
  <code>Date</code> object to a string</a>, given a <code>Date</code> object <var>input</var>, is as follows</strong>: Return a <a>valid month string</a> that
  represents the <a>month</a> current at the time represented by <var>input</var> in the UTC time zone.

  </div>

  <div class="bookkeeping">

    The following common <code>input</code> element content
    attributes, IDL attributes, and methods <a>apply</a> to the element:
    <code>autocomplete</code>,
    <code>list</code>,
    <code>max</code>,
    <code>min</code>,
    <code>readonly</code>,
    <code>required</code>, and
    <code>step</code> content attributes;
    <code>list</code>,
    <code>value</code>,
    <code>valueAsDate</code>, and
    <code>valueAsNumber</code> IDL attributes;
    <code>select()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

    The <code>value</code> IDL attribute is
    in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not
    apply</a> to the element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>maxlength</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>size</code>,
    <code>src</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the
    element:
    <code>checked</code>,
    <code>files</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>setRangeText()</code>, and
    <code>setSelectionRange()</code> methods.

  </div>

<h6 id="week-state-typeweek"><dfn>Week</dfn> state (<code>type=week</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Week</a> state, the rules in this section apply.

  </div>

  The <code>input</code> element <a>represents</a> a control for setting the element's
  <a>value</a> to a string representing a specific <a>week</a>.

  <div class="impl">

  If the element is <i>mutable</i>, the user agent should allow the
  user to change the <a>week</a> represented by its <a>value</a>, as obtained by <a>parsing a
  week</a> from it. User agents must not allow the user to set the <a>value</a> to a non-empty string that is not a <a>valid week
  string</a>. If the user agent provides a user interface for selecting a <a>week</a>, then the <a>value</a> must be set
  to a <a>valid week string</a> representing the user's selection. User agents should allow
  the user to set the <a>value</a> to the empty string.

  <strong>Constraint validation</strong>: While the user interface describes input that the user
  agent cannot convert to a <a>valid week string</a>, the control is <a>suffering from bad
  input</a>.

  </div>

  <p class="note">
    See the <a>introduction section</a> for a discussion of
  the difference between the input format and submission format for date, time, and number form
  controls<span class="impl">, and the <a>implementation notes</a>
  regarding localization of form controls</span>.
  </p>

  The <code>value</code> attribute, if specified and not empty, must
  have a value that is a <a>valid week string</a>.

  <div class="impl">

  <strong>The <a>value sanitization algorithm</a> is as follows</strong>: If the <a>value</a> of the element is not a <a>valid week string</a>, then
  set it to the empty string instead.

  </div>

  The <code>min</code> attribute, if specified, must have a value that is
  a <a>valid week string</a>. The <code>max</code> attribute, if
  specified, must have a value that is a <a>valid week string</a>.

  The <code>step</code> attribute is expressed in weeks. <span class="impl">The <a>step scale factor</a> is 604,800,000
  (which converts the weeks to milliseconds, as used in the other algorithms).</span> The <a>default step</a> is 1 week. <span class="impl">The <a>default step base</a> is -259,200,000 (the start
  of week 1970-W01).</span>

  <div class="impl">

  When the element is <a>suffering from a step mismatch</a>, the user agent may round the
  element's <a>value</a> to the nearest <a>week</a> for which the element would not <a>suffer from a step mismatch</a>.

  <strong>The <a>algorithm to convert a string to a
  number</a>, given a string <var>input</var>, is as follows</strong>: If <a>parsing a week string</a> from <var>input</var> results in
  an error, then return an error; otherwise, return the number of milliseconds elapsed from midnight
  UTC on the morning of 1970-01-01 (the time represented by the value "<code>1970-01-01T00:00:00.0Z</code>") to midnight UTC on the morning of the Monday of the
  parsed <a>week</a>, ignoring leap seconds.

  <strong>The <a>algorithm to convert a number to a
  string</a>, given a number <var>input</var>, is as follows</strong>: Return a
  <a>valid week string</a> that represents the <a>week</a> that, in
  UTC, is current <var>input</var> milliseconds after midnight UTC on the morning of
  1970-01-01 (the time represented by the value "<code>1970-01-01T00:00:00.0Z</code>").

  <strong>The <a>algorithm to convert a string to a
  <code>Date</code> object</a>, given a string <var>input</var>, is as follows</strong>:
  If <a>parsing a week</a> from <var>input</var> results
  in an error, then return an error; otherwise, return <a>a new
  <code>Date</code> object</a> representing midnight UTC on the morning of the Monday of the
  parsed <a>week</a>.

  <strong>The <a>algorithm to convert a
  <code>Date</code> object to a string</a>, given a <code>Date</code> object <var>input</var>, is as follows</strong>: Return a <a>valid week string</a> that
  represents the <a>week</a> current at the time represented by <var>input</var> in the UTC time zone.

  </div>

  <div class="bookkeeping">

    The following common <code>input</code> element content attributes, IDL attributes, and
    methods <a>apply</a> to the element:
    <code>autocomplete</code>,
    <code>list</code>,
    <code>max</code>,
    <code>min</code>,
    <code>readonly</code>,
    <code>required</code>, and
    <code>step</code> content attributes;
    <code>list</code>,
    <code>value</code>,
    <code>valueAsDate</code>, and
    <code>valueAsNumber</code> IDL attributes;
    <code>select()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

    The <code>value</code> IDL attribute is in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not apply</a> to the
    element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>maxlength</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>size</code>,
    <code>src</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the element:
    <code>checked</code>,
    <code>files</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>setRangeText()</code>, and
    <code>setSelectionRange()</code> methods.

  </div>

<h6 id="time-state-typetime"><dfn>Time</dfn> state (<code>type=time</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Time</a> state, the rules in this section apply.

  </div>

  The <code>input</code> element <a>represents</a> a control for setting the element's
  <a>value</a> to a string representing a specific <a>time</a>.

  <div class="impl">

  If the element is <i>mutable</i>, the user agent should allow the
  user to change the <a>time</a> represented by its <a>value</a>, as obtained by <a>parsing a
  time</a> from it. User agents must not allow the user to set the <a>value</a> to a non-empty string that is not a <a>valid time
  string</a>. If the user agent provides a user interface for selecting a <a>time</a>, then the <a>value</a> must be set
  to a <a>valid time string</a> representing the user's selection. User agents should allow
  the user to set the <a>value</a> to the empty string.

  <strong>Constraint validation</strong>: While the user interface describes input that the user
  agent cannot convert to a <a>valid time string</a>, the control is <a>suffering from bad
  input</a>.

  </div>

  <p class="note">
    See the <a>introduction section</a> for a discussion of
  the difference between the input format and submission format for date, time, and number form
  controls<span class="impl">, and the <a>implementation notes</a>
  regarding localization of form controls</span>.
  </p>

  The <code>value</code> attribute, if specified and not empty, must
  have a value that is a <a>valid time string</a>.

  <div class="impl">

  <strong>The <a>value sanitization algorithm</a> is as follows</strong>: If the <a>value</a> of the element is not a <a>valid time string</a>, then
  set it to the empty string instead.

  The form control <a>has a periodic domain</a>.

  </div>

  The <code>min</code> attribute, if specified, must have a value that is
  a <a>valid time string</a>. The <code>max</code> attribute, if
  specified, must have a value that is a <a>valid time string</a>.

  The <code>step</code> attribute is expressed in seconds. <span class="impl">The <a>step scale factor</a> is 1000 (which
  converts the seconds to milliseconds, as used in the other algorithms).</span> The <a>default step</a> is 60 seconds.

  <div class="impl">

  When the element is <a>suffering from a step mismatch</a>, the user agent may round the
  element's <a>value</a> to the nearest <a>time</a> for which the element would not <a>suffer from a step mismatch</a>.

  <strong>The <a>algorithm to convert a string to a
  number</a>, given a string <var>input</var>, is as follows</strong>: If <a>parsing a time</a> from <var>input</var> results in an
  error, then return an error; otherwise, return the number of milliseconds elapsed from midnight to
  the parsed <a>time</a> on a day with no time changes.

  <strong>The <a>algorithm to convert a number to a
  string</a>, given a number <var>input</var>, is as follows</strong>: Return a
  <a>valid time string</a> that represents the <a>time</a> that is
  <var>input</var> milliseconds after midnight on a day with no time changes.

  <strong>The <a>algorithm to convert a string to a
  <code>Date</code> object</a>, given a string <var>input</var>, is as follows</strong>:
  If <a>parsing a time</a> from <var>input</var> results
  in an error, then return an error; otherwise, return <a>a new
  <code>Date</code> object</a> representing the parsed <a>time</a> in
  UTC on 1970-01-01.

  <strong>The <a>algorithm to convert a
  <code>Date</code> object to a string</a>, given a <code>Date</code> object <var>input</var>, is as follows</strong>: Return a <a>valid time string</a> that
  represents the UTC <a>time</a> component that is represented by <var>input</var>.

  </div>

  <div class="bookkeeping">

    The following common <code>input</code> element content attributes, IDL attributes, and
    methods <a>apply</a> to the element:
    <code>autocomplete</code>,
    <code>list</code>,
    <code>max</code>,
    <code>min</code>,
    <code>readonly</code>,
    <code>required</code>, and
    <code>step</code> content attributes;
    <code>list</code>,
    <code>value</code>,
    <code>valueAsDate</code>, and
    <code>valueAsNumber</code> IDL attributes;
    <code>select()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

    The <code>value</code> IDL attribute is in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not apply</a> to the
    element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>maxlength</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>size</code>,
    <code>src</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the element:
    <code>checked</code>,
    <code>files</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>setRangeText()</code>, and
    <code>setSelectionRange()</code> methods.

  </div>

<h6 id="local-date-and-time-state-typedatetimelocal"><dfn>Local Date and Time</dfn> state (<code>type=datetime-local</code>)</h6>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Local Date and Time</a> state, the rules in
  this section apply.

  </div>

  The <code>input</code> element <a>represents</a> a control for setting the element's
  <a>value</a> to a string representing a <a>local date and time</a>, with no time-zone offset
  information.

  <div class="impl">

  If the element is <i>mutable</i>, the user agent should allow the
  user to change the <a>date and time</a> represented by its
  <a>value</a>, as obtained by <a>parsing a date and time</a> from it. User agents must not allow the user to set
  the <a>value</a> to a non-empty string that is not a <a>valid
  normalized local date and time string</a>. If the user agent provides a user interface for
  selecting a <a>local date and time</a>, then the <a>value</a> must be set to a <a>valid normalized local date and time
  string</a> representing the user's selection. User agents should allow the user to set the
  <a>value</a> to the empty string.

  <strong>Constraint validation</strong>: While the user interface describes input that the user
  agent cannot convert to a <a>valid normalized local date and time string</a>, the control is
  <a>suffering from bad input</a>.

  </div>

  <p class="note">
    See the <a>introduction section</a> for a discussion of
  the difference between the input format and submission format for date, time, and number form
  controls<span class="impl">, and the <a>implementation notes</a>
  regarding localization of form controls</span>.
  </p>

  The <code>value</code> attribute, if specified and not empty, must
  have a value that is a <a>valid local date and time string</a>.

  <div class="impl">

  <strong>The <a>value sanitization algorithm</a> is as follows</strong>: If the <a>value</a> of the element is a <a>valid local date and time
  string</a>, then set it to a <a>valid normalized local date and time string</a>
  representing the same date and time; otherwise, set it to the empty string instead.

  </div>

  The <code>min</code> attribute, if specified, must have a value that is
  a <a>valid local date and time string</a>. The <code>max</code>
  attribute, if specified, must have a value that is a <a>valid local date and time
  string</a>.

  The <code>step</code> attribute is expressed in seconds. <span class="impl">The <a>step scale factor</a> is 1000 (which
  converts the seconds to milliseconds, as used in the other algorithms).</span> The <a>default step</a> is 60 seconds.

  <div class="impl">

  When the element is <a>suffering from a step mismatch</a>, the user agent may round the
  element's <a>value</a> to the nearest <a>local date and time</a> for which the element would not <a>suffer from a step mismatch</a>.

  <strong>The <a>algorithm to convert a string to a
  number</a>, given a string <var>input</var>, is as follows</strong>: If <a>parsing a date and time</a> from <var>input</var> results in an error, then return an error; otherwise, return the number of
  milliseconds elapsed from midnight on the morning of 1970-01-01 (the time represented by the value
  "<code>1970-01-01T00:00:00.0</code>") to the parsed <a>local date and time</a>, ignoring leap seconds.

  <strong>The <a>algorithm to convert a number to a
  string</a>, given a number <var>input</var>, is as follows</strong>: Return a
  <a>valid normalized local date and time string</a> that represents the date and time that is
  <var>input</var> milliseconds after midnight on the morning of 1970-01-01 (the time
  represented by the value "<code>1970-01-01T00:00:00.0</code>").

  </div>

  <p class="note">
    See <a>the note on historical dates</a> in the
  <a>Date and Time</a> state section.
  </p>

  <div class="bookkeeping">

    The following common <code>input</code> element content
    attributes, IDL attributes, and methods <a>apply</a> to the element:
    <code>autocomplete</code>,
    <code>list</code>,
    <code>max</code>,
    <code>min</code>,
    <code>readonly</code>,
    <code>required</code>, and
    <code>step</code> content attributes;
    <code>list</code>,
    <code>value</code>, and
    <code>valueAsNumber</code> IDL attributes;
    <code>select()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

    The <code>value</code> IDL attribute is
    in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not
    apply</a> to the element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>maxlength</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>size</code>,
    <code>src</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the
    element:
    <code>checked</code>,
    <code>files</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueAsDate</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>setRangeText()</code>, and
    <code>setSelectionRange()</code> methods.

  </div>

  <div class="example">
    The following example shows part of a flight booking application. The application uses an
    <code>input</code> element with its <code>type</code> attribute set to
    <code>datetime-local</code>, and it then interprets the
    given date and time in the time zone of the selected airport.

    <pre highlight="html">
&lt;fieldset&gt;
  &lt;legend&gt;Destination&lt;/legend&gt;
  &lt;p&gt;&lt;label&gt;Airport: &lt;input type=text name=to list=airports&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Departure time: &lt;input type=datetime-local name=totime step=3600&gt;&lt;/label&gt;&lt;/p&gt;
&lt;/fieldset&gt;
&lt;datalist id=airports&gt;
  &lt;option value=ATL label="Atlanta"&gt;
  &lt;option value=MEM label="Memphis"&gt;
  &lt;option value=LHR label="London Heathrow"&gt;
  &lt;option value=LAX label="Los Angeles"&gt;
  &lt;option value=FRA label="Frankfurt"&gt;
&lt;/datalist&gt;
    </pre>

    If the application instead used the <code>datetime</code>
    type, then the user would have to work out the time-zone conversions himself, which is clearly
    not a good user experience!

  </div>

<h6 id="number-state-typenumber"><dfn>Number</dfn> state (<code>type=number</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>spinbutton</code></a>
    (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Number</a> state, the rules in this section apply.

  </div>

  The <code>input</code> element <a>represents</a> a control for setting the element's
  <a>value</a> to a string representing a number.

  <div class="impl">

  If the element is <i>mutable</i>, the user agent should allow the
  user to change the number represented by its <a>value</a>, as
  obtained from applying the <a>rules for parsing floating-point number values</a> to it. User
  agents must not allow the user to set the <a>value</a> to a
  non-empty string that is not a <a>valid floating-point number</a>. If the user agent
  provides a user interface for selecting a number, then the <a>value</a> must be set to the <a>best representation of the number representing the user's
  selection as a floating-point number</a>. User agents should allow the user to set the <a>value</a> to the empty string.

  <strong>Constraint validation</strong>: While the user interface describes input that the user
  agent cannot convert to a <a>valid floating-point number</a>, the control is <a>suffering
  from bad input</a>.

  </div>

  <p class="note">
    This specification does not define what user interface user agents are to use;
  user agent vendors are encouraged to consider what would best serve their users' needs. For
  example, a user agent in Persian or Arabic markets might support Persian and Arabic numeric input
  (converting it to the format required for submission as described above). Similarly, a user agent
  designed for Romans might display the value in Roman numerals rather than in decimal; or (more
  realistically) a user agent designed for the French market might display the value with
  apostrophes between thousands and commas before the decimals, and allow the user to enter a value
  in that manner, internally converting it to the submission format described above.
  </p>

  The <code>value</code> attribute, if specified and not empty, must
  have a value that is a <a>valid floating-point number</a>.

  <div class="impl">

  <strong>The <a>value sanitization algorithm</a> is as follows</strong>: If the <a>value</a> of the element is not a <a>valid floating-point
  number</a>, then set it to the empty string instead.

  </div>

  The <code>min</code> attribute, if specified, must have a value that is
  a <a>valid floating-point number</a>. The <code>max</code> attribute,
  if specified, must have a value that is a <a>valid floating-point number</a>.

  <span class="impl">The <a>step scale factor</a> is
  1.</span> The <a>default step</a> is 1 (allowing only
  integers to be selected by the user, unless the <a>step
  base</a> has a non-integer value).

  <div class="impl">

  When the element is <a>suffering from a step mismatch</a>, the user agent may round the
  element's <a>value</a> to the nearest number for which the element
  would not <a>suffer from a step mismatch</a>. If
  there are two such numbers, user agents are encouraged to pick the one nearest positive
  infinity.

  <strong>The <a>algorithm to convert a string to a
  number</a>, given a string <var>input</var>, is as follows</strong>: If applying the
  <a>rules for parsing floating-point number values</a> to <var>input</var> results
  in an error, then return an error; otherwise, return the resulting number.

  <strong>The <a>algorithm to convert a number to a
  string</a>, given a number <var>input</var>, is as follows</strong>: Return a
  <a>valid floating-point number</a> that represents <var>input</var>.

  </div>

  <div class="bookkeeping">

    The following common <code>input</code> element content attributes, IDL attributes, and
    methods <a>apply</a> to the element:
    <code>autocomplete</code>,
    <code>list</code>,
    <code>max</code>,
    <code>min</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>, and
    <code>step</code> content attributes;
    <code>list</code>,
    <code>value</code>, and
    <code>valueAsNumber</code> IDL attributes;
    <code>select()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

    The <code>value</code> IDL attribute is in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not apply</a> to the
    element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>maxlength</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>size</code>,
    <code>src</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the element:
    <code>checked</code>,
    <code>files</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueAsDate</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>setRangeText()</code>, and
    <code>setSelectionRange()</code> methods.

  </div>

  <div class="example">
    Here is an example of using a numeric input control:

    <pre highlight="html">
&lt;label&gt;How much do you want to charge? $&lt;input type=number min=0 step=0.01 name=price&gt;&lt;/label&gt;
    </pre>

    As described above, a user agent might support numeric input in the user's local format,
    converting it to the format required for submission as described above. This might include
    handling grouping separators (as in "872,000,000,000") and various decimal separators (such as
    "3,99" vs "3.99") or using local digits (such as those in Arabic, Devanagari, Persian, and
    Thai).

  </div>

  <p class="note">
    The <code>type=number</code> state is not appropriate for input that
  happens to only consist of numbers but isn't strictly speaking a number. For example, it would be
  inappropriate for credit card numbers or US postal codes. A simple way of determining whether to
  use <code>type=number</code> is to consider whether it would make sense for the input
  control to have a spinbox interface (e.g. with "up" and "down" arrows). Getting a credit card
  number wrong by 1 in the last digit isn't a minor mistake, it's as wrong as getting every digit
  incorrect. So it would not make sense for the user to select a credit card number using "up" and
  "down" buttons. When a spinbox interface is not appropriate, <code>type=text</code> is
  probably the right choice (possibly with a <code>pattern</code>
  attribute).
  </p>

<h6 id="range-state-typerange"><dfn>Range</dfn> state (<code>type=range</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>slider</code></a>
    (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Range</a> state, the rules in this section apply.

  </div>

  How the <a>Range</a> state operates depends on whether the
  <code>multiple</code> attribute is specified or not.

  <dl class="switch">

    <dt>When the <code>multiple</code> attribute is not specified on the
    element</dt>

    <dd>

    The <code>input</code> element <a>represents</a> a control for setting the element's
    <a>value</a> to a string representing a number, but with the
    caveat that the exact value is not important, letting UAs provide a simpler interface than they
    do for the <a>Number</a> state.

    <div class="impl">

    If the element is <i>mutable</i>, the user agent should allow the
    user to change the number represented by its <a>value</a>, as
    obtained from applying the <a>rules for parsing floating-point number values</a> to it.
    User agents must not allow the user to set the <a>value</a> to a
    string that is not a <a>valid floating-point number</a>. If the user agent provides a user
    interface for selecting a number, then the <a>value</a> must be
    set to a <a>best
    representation of the number representing the user's selection as a floating-point
    number</a>. User agents must not allow the user to set the <a>value</a> to the empty string.

    <strong>Constraint validation</strong>: While the user interface describes input that the
    user agent cannot convert to a <a>valid floating-point number</a>, the control is
    <a>suffering from bad input</a>.

    </div>

    The <code>value</code> attribute, if specified, must have a value
    that is a <a>valid floating-point number</a>.

    <div class="impl">

    <strong>The <a>value sanitization algorithm</a> is as follows</strong>: If the <a>value</a> of the element is not a <a>valid floating-point
    number</a>, then set it to the <a>best representation, as a floating-point number</a>, of the <a>default value</a>.

    </div>

    The <dfn>default value</dfn> is the <a>minimum</a> plus half the difference between the <a>minimum</a> and the <a>maximum</a>, unless the <a>maximum</a> is less than the <a>minimum</a>, in which case the <a>default value</a> is the <a>minimum</a>.

    <div class="impl">

    When the element is <a>suffering from an underflow</a>, the user agent must set the
    element's <a>value</a> to the <a>best representation, as a floating-point
    number</a>, of the <a>minimum</a>.

    When the element is <a>suffering from an overflow</a>, if the <a>maximum</a> is not less than the <a>minimum</a>, the user agent must set the element's <a>value</a> to a <a>valid floating-point number</a> that
    represents the <a>maximum</a>.

    When the element is <a>suffering from a step mismatch</a>, the user agent must round
    the element's <a>value</a> to the nearest number for which the
    element would not <a>suffer from a step
    mismatch</a>, and which is greater than or equal to the <a>minimum</a>, and, if the <a>maximum</a> is not less than the <a>minimum</a>, which is less than or equal to the <a>maximum</a>, if there is a number that matches these constraints.
    If two numbers match these constraints, then user agents must use the one nearest to positive
    infinity.

    <p class="example">For example, the markup
    <code>&lt;input&nbsp;type="range"&nbsp;min=0&nbsp;max=100&nbsp;step=20&nbsp;value=50&gt;</code>
    results in a range control whose initial value is 60.</p>

    </div>

    <div class="example">
      Here is an example of a range control using an autocomplete list with the <code>list</code> attribute. This could be useful if there are values along
      the full range of the control that are especially important, such as preconfigured light levels
      or typical speed limits in a range control used as a speed control. The following markup
      fragment:

      <pre highlight="html">
&lt;input type="range" min="-100" max="100" value="0" step="10" name="power" list="powers"&gt;
&lt;datalist id="powers"&gt;
  &lt;option value="0"&gt;
  &lt;option value="-30"&gt;
  &lt;option value="30"&gt;
<span class="bad"> &lt;option value="++50"&gt;</span>
&lt;/datalist&gt;
    </pre>

      ...with the following style sheet applied:

      <pre highlight="css">
input { height: 75px; width: 49px; background: #D5CCBB; color: black; }
    </pre>

      ...might render as:

      <img src="images/sample-range.png" width="49" height="75" alt="A vertical slider control whose primary color is black and whose background color is beige, with the slider having five tick marks, one long one at each extremity, and three short ones clustered around the midpoint." />

      Note how the UA determined the orientation of the control from the ratio of the
      style-sheet-specified height and width properties. The colors were similarly derived from the
      style sheet. The tick marks, however, were derived from the markup. In particular, the <code>step</code> attribute has not affected the placement of tick marks,
      the UA deciding to only use the author-specified completion values and then adding longer tick
      marks at the extremes.

      Note also how the invalid value <code>++50</code> was completely ignored.

    </div>

    <div class="example">
      For another example, consider the following markup fragment:

      <pre highlight="html">
&lt;input name=x type=range min=100 max=700 step=9.09090909 value=509.090909&gt;
    </pre>

      A user agent could display in a variety of ways, for instance:

      <img src="images/sample-range-2a.png" width="231" height="57" alt="As a dial." />

      Or, alternatively, for instance:

      <img src="images/sample-range-2b.png" width="445" height="56" alt="As a long horizontal slider with tick marks." />

      The user agent could pick which one to display based on the dimensions given in the style
      sheet. This would allow it to maintain the same resolution for the tick marks, despite the
      differences in width.

    </div>

    <div class="example">
      Finally, here is an example of a range control with two labeled values:

      <pre highlight="html">
&lt;input type="range" name="a" list="a-values"&gt;
&lt;datalist id="a-values"&gt;
  &lt;option value="10" label="Low"&gt;
  &lt;option value="90" label="High"&gt;
&lt;/datalist&gt;
    </pre>

      With styles that make the control draw vertically, it might look as follows:

      <img src="images/sample-range-labels.png" width="103" height="164" alt="A vertical slider control with two tick marks, one near the top labeled 'High', and one near the bottom labeled 'Low'." />

    </div>

    </dd>

    <dt>When the <code>multiple</code> attribute <em>is</em> specified on
    the element</dt>

    <dd>

    The <code>input</code> element <a>represents</a> a control for setting the element's
    <a>value<em>s</em></a> to two strings representing numbers, but
    with the caveat that the exact values are not important, enabling UAs provide a graphical
    interface rather than requiring the user to type the numbers directly.

    <div class="impl">

    If the element is <i>mutable</i>, the user agent should allow the
    user to change either the first or second number represented by its <a>values</a>, as obtained from applying the <a>rules for parsing
    floating-point number values</a> to them, and ensuring that the first value is never larger
    than the second value. User agents must not allow the user to set either the first or second of
    the <a>values</a> to a string that is not a <a>valid
    floating-point number</a>. If the user agent provides a user interface for selecting a
    number, then these <a>values</a> must be set to the <a>best representations of
    the numbers representing the user's selections as floating-point numbers</a>. User agents
    must not allow the user to set the <a>values</a> to the empty
    string.

    <strong>Constraint validation</strong>: While the user interface describes input that the
    user agent cannot convert to a pair of <a>valid
    floating-point numbers</a>, the control is <a>suffering from bad input</a>.

    </div>

    The <code>value</code> attribute, if specified, must have a value
    that is a pair of <a>valid floating-point numbers</a>
    separated by a single U+002C COMMA character (,).

    <div class="impl">

    <strong>The <a>value sanitization algorithm</a> is as follows</strong>:

    <ol>

      <li><a>Split on commas</a> the element's <a>value</a>.</li>

      <li>If there are not exactly two values, or if either value is not a <a>valid
      floating-point number</a>, then let the element's <a>values</a> be a pair of values consisting of <a>a best representation, as a
      floating-point number</a>, of the element's <a>minimum</a>
      and the element's <a>maximum</a>, with the smaller value
      first.</li>

      <li>Othwerwise, let the element's <a>values</a> be the two
      values, with the smaller value first.</li>

      <li>Let the element's <a>value</a> be the result of
      concatenating the element's <a>values</a>, separating them by
      a single U+002C COMMA character (,), with the lower value coming first.</li>

    </ol>

    Whenever the user changes the element's <a>values</a>, the
    user agent must set the element's <a>value</a> to the result of
    concatenating the element's <a>values</a>, separating them by a
    single U+002C COMMA character (,), with the lower value coming first.

    </div>

    <div class="impl">

    When the element is <a>suffering from an underflow</a>, the user agent must set either
    of the element's <a>values</a> that represent values less than
    the <a>minimum</a> to the <a>best representation, as a floating-point number</a>,
    of the <a>minimum</a>.

    When the element is <a>suffering from an overflow</a>, if the <a>maximum</a> is not less than the <a>minimum</a>, the user agent must set either of the element's <a>values</a> that represent values greater than the <a>maximum</a> to a <a>valid floating-point number</a> that
    represents the <a>maximum</a>.

    When the element is <a>suffering from a step mismatch</a>, the user agent must round
    the values represented by the element's <a>values</a> to, in
    each case, the nearest number for which the element would not <a>suffer from a step mismatch</a>, and which is greater than or equal to the
    <a>minimum</a>, and, if the <a>maximum</a> is not less than the <a>minimum</a>, which is less than or equal to the <a>maximum</a>, if there is a number that matches these constraints.
    If two numbers match these constraints, then user agents must use the one nearest to positive
    infinity.

    Whenever the user agent changes the element's <a>values</a>
    according to the three previous paragraphs, the user agent must set the element's <a>value</a> to the result of concatenating the element's <a>values</a>, separating them by a single U+002C COMMA character
    (,), with the lower value coming first.

    </div>

    <div class="example">
      Consider a user interface that filters possible flights by departure and arrival time:

      <pre highlight="html">
&lt;form ...&gt;
  &lt;fieldset&gt;
  &lt;legend&gt;Outbound flight time&lt;/legend&gt;
  &lt;select ...&gt;
    &lt;option&gt;Departure
    &lt;option&gt;Arrival
  &lt;/select&gt;
  &lt;p&gt;&lt;output name=o1&gt;00:00&lt;/output&gt; â &lt;output name=o2&gt;24:00&lt;/output&gt;&lt;/p&gt;
  &lt;input type=range multiple min=0 max=24 value=0,24 step=1.0 ...
          oninput="o1.value = valueLow + ':00'; o2.value = valueHigh + ':00'"&gt;
  &lt;/fieldset&gt;
  ...
&lt;/form&gt;
    </pre>

      With appropriate styling, this might look like:

      <img src="images/sample-range-multiple.png" alt="A control group with the label 'Outbound flight time', showing a drop-down that lets you select Departure vs Arrival, a two-handled range control that lets you set the start and end time of the range, and a label showing the currently selected times." />

    </div>

    </dd>

  </dl>

  When the <code>multiple</code> attribute is set or removed, the
  user agent must run the <a>value sanitization algorithm</a>.

  <p class="note">
    In this state, the range and step constraints are enforced even during user input,
  and there is no way to set the value to the empty string.
  </p>

  The <code>min</code> attribute, if specified, must have a value that is
  a <a>valid floating-point number</a>. The <a>default
  minimum</a> is 0. The <code>max</code> attribute, if specified, must
  have a value that is a <a>valid floating-point number</a>. The <a>default maximum</a> is 100.

  <span class="impl">The <a>step scale factor</a> is
  1.</span> The <a>default step</a> is 1 (allowing only
  integers, unless the <code>min</code> attribute has a non-integer
  value).

  <div class="impl">

  <strong>The <a>algorithm to convert a string to a
  number</a>, given a string <var>input</var>, is as follows</strong>: If applying the
  <a>rules for parsing floating-point number values</a> to <var>input</var> results
  in an error, then return an error; otherwise, return the resulting number.

  <strong>The <a>algorithm to convert a number to a
  string</a>, given a number <var>input</var>, is as follows</strong>: Return the <a>best representation, as a
  floating-point number</a>, of <var>input</var>.

  </div>

  <div class="bookkeeping">

    The following common <code>input</code> element content attributes, IDL attributes, and
    methods <a>apply</a> to the element:
    <code>autocomplete</code>,
    <code>list</code>,
    <code>max</code>,
    <code>min</code>,
    <code>multiple</code>, and
    <code>step</code> content attributes;
    <code>list</code>,
    <code>value</code>, and
    <code>valueAsNumber</code> IDL attributes;
    <code>stepDown()</code> and
    <code>stepUp()</code> methods.

    The following common <code>input</code> IDL attribute <a>applies</a> to the element if the <code>multiple</code> content attribute is not specified:
    <code>valueAsNumber</code>.

    The following common <code>input</code> IDL attributes <a>apply</a> to the element if the <code>multiple</code> content attribute <em>is</em> specified:
    <code>valueLow</code> and
    <code>valueHigh</code>.

    The <code>value</code> IDL attribute is in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not apply</a> to the
    element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>maxlength</code>,
    <code>minlength</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>,
    <code>size</code>,
    <code>src</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the element:
    <code>checked</code>,
    <code>files</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueAsDate</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>select()</code>,
    <code>setRangeText()</code>, and
    <code>setSelectionRange()</code> methods.

    The following common <code>input</code> IDL attributes <a>do not apply</a> to the
    element if the <code>multiple</code> content
    attribute is not specified:
    <code>valueLow</code> and
    <code>valueHigh</code>.

    The following common <code>input</code> IDL attribute <a>does not
    apply</a> to the element if the <code>multiple</code> content attribute <em>is</em> specified:
    <code>valueAsNumber</code>.

  </div>

<h6 id="color-state-typecolor"><dfn>Color</dfn> state (<code>type=color</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Color</a> state, the rules in this section apply.

  </div>

  The <code>input</code> element <a>represents</a> a color well control, for setting the
  element's <a>value</a> to a string representing a <a>simple
  color</a>.

  <div class="impl">

  <p class="note">
    In this state, there is always a color picked, and there is no way to set the
  value to the empty string.
  </p>

  If the element is <i>mutable</i>, the user agent should allow the
  user to change the color represented by its <a>value</a>, as
  obtained from applying the <a>rules for parsing simple color values</a> to it. User agents
  must not allow the user to set the <a>value</a> to a string that is
  not a <a>valid lowercase simple color</a>. If the user agent provides a user interface for
  selecting a color, then the <a>value</a> must be set to the result
  of using the <a>rules for serializing simple color values</a> to the user's selection. User
  agents must not allow the user to set the <a>value</a> to the empty
  string.

  <strong>Constraint validation</strong>: While the user interface describes input that the user
  agent cannot convert to a <a>valid lowercase simple color</a>, the control is
  <a>suffering from bad input</a>.

  </div>

  The <code>value</code> attribute, if specified and not empty, must
  have a value that is a <a>valid simple color</a>.

  <div class="impl">

  <strong>The <a>value sanitization algorithm</a> is as follows</strong>: If the <a>value</a> of the element is a <a>valid simple color</a>, then
  set it to the <a>value</a> of the element <a>converted to ASCII
  lowercase</a>; otherwise, set it to the string "<code>#000000</code>".

  </div>

  <div class="bookkeeping">

    The following common <code>input</code> element content attributes and IDL attributes <a>apply</a> to the element:
    <code>autocomplete</code> and
    <code>list</code> content attributes;
    <code>list</code> and
    <code>value</code> IDL attributes;
    <code>select()</code> method.

    The <code>value</code> IDL attribute is in mode <a>value</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not apply</a> to the
    element:
    <code>accept</code>,
    <code>alt</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>max</code>,
    <code>maxlength</code>,
    <code>min</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>,
    <code>size</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the element:
    <code>checked</code>,
    <code>files</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>setRangeText()</code>,
    <code>setSelectionRange()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

  </div>

<h6 id="checkbox-state-typecheckbox"><dfn>Checkbox</dfn> state (<code>type=checkbox</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>checkbox</code></a>
    (default - <a><em>do not set</em></a>) or <a><code>menuitemcheckbox</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Checkbox</a> state, the rules in this section
  apply.

  </div>

  The <code>input</code> element <a>represents</a> a two-state control that represents the
  element's <a>checkedness</a> state. If the element's <a>checkedness</a> state is true, the control represents a positive
  selection, and if it is false, a negative selection. If the element's <code>indeterminate</code> IDL attribute is set to true, then the
  control's selection should be obscured as if the control was in a third, indeterminate, state.

  <p class="note">
    The control is never a true tri-state control, even if the element's <code>indeterminate</code> IDL attribute is set to true. The <code>indeterminate</code> IDL attribute only gives the appearance of a
  third state.
  </p>

  <div class="impl">

  If the element is <i>mutable</i>, then: The <a>pre-click
  activation steps</a> consist of setting the element's <a>checkedness</a> to its opposite value (i.e. true if it is false,
  false if it is true), and of setting the element's <code>indeterminate</code> IDL attribute to false. The <a>canceled
  activation steps</a> consist of setting the <a>checkedness</a> and the element's <code>indeterminate</code> IDL attribute back to the values they had
  before the <a>pre-click activation steps</a> were run. The <a>activation behavior</a>
  is to <a>fire a simple event</a> that bubbles named <code>input</code> at the element and then <a>fire a simple event</a>
  that bubbles named <code>change</code> at the element.

  If the element is not <i>mutable</i>, it has no <a>activation
  behavior</a>.

  <strong>Constraint validation</strong>: If the element is <i>required</i> and its <a>checkedness</a> is false, then the element is <a>suffering from
  being missing</a>.

  </div>

  <dl class="domintro">

    <dt><var>input</var> . <code>indeterminate</code> [ = <var>value</var> ]</dt>

    <dd>

    When set, overrides the rendering of <a>checkbox</a>
    controls so that the current value is not visible.

    </dd>

  </dl>

  <div class="bookkeeping">

    The following common <code>input</code> element content attributes and IDL attributes <a>apply</a> to the element:
    <code>checked</code>, and
    <code>required</code> content attributes;
    <code>checked</code> and
    <code>value</code> IDL attributes.

    The <code>value</code> IDL attribute is in mode <a>default/on</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not apply</a> to the
    element:
    <code>accept</code>,
    <code>alt</code>,
    <code>autocomplete</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>list</code>,
    <code>max</code>,
    <code>maxlength</code>,
    <code>min</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>size</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the element:
    <code>files</code>,
    <code>list</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>select()</code>,
    <code>setRangeText()</code>,
    <code>setSelectionRange()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

  </div>

<h6 id="radio-button-state-typeradio"><dfn>Radio Button</dfn> state (<code>type=radio</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>radio</code></a>
    (default - <a><em>do not set</em></a>) or <a><code>menuitemradio</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Radio Button</a> state, the rules in this section
  apply.

  </div>

  The <code>input</code> element <a>represents</a> a control that, when used in conjunction
  with other <code>input</code> elements, forms a <i>radio button group</i> in which only one
  control can have its <a>checkedness</a> state set to true. If
  the element's <a>checkedness</a> state is true, the control
  represents the selected control in the group, and if it is false, it indicates a control in the
  group that is not selected.

  The <dfn><i>radio button group</i></dfn> that contains an <code>input</code> element
  <var>a</var> also contains all the other <code>input</code> elements <var>b</var> that fulfill all
  of the following conditions:

  <ul>

    <li>The <code>input</code> element <var>b</var>'s <code>type</code> attribute is in the <a>Radio
    Button</a> state.</li>

    <li>Either <var>a</var> and <var>b</var> have the same <a>form owner</a>,
    or they both have no <a>form owner</a>.</li>

    <li>Both <var>a</var> and <var>b</var> are in the same <a>home
    subtree</a>.</li>

    <li>They both have a <code>name</code> attribute, their <code>name</code> attributes are not empty, and the value of <var>a</var>'s <code>name</code> attribute is a <a>compatibility
    caseless</a> match for the value of <var>b</var>'s <code>name</code> attribute.</li>

  </ul>

  A document must not contain an <code>input</code> element whose <i>radio button group</i>
  contains only that element.

  <div class="impl">

  When any of the following phenomena occur, if the element's <a>checkedness</a> state is true after the occurrence, the <a>checkedness</a> state of all the other elements in the same <i>radio
  button group</i> must be set to false:

  <ul>

    <li>The element's <a>checkedness</a> state is set to true (for
    whatever reason).</li>

    <li>The element's <code>name</code> attribute is set, changed, or
    removed.</li>

    <li>The element's <a>form owner</a> changes.</li>

    <li><a>A type change is signalled</a> for the element.</li>

  </ul>

  If the element <var>R</var> is <i>mutable</i>, then: The
  <a>pre-click activation steps</a> for <var>R</var> consist of getting a reference to the
  element in <var>R</var>'s <a>radio button group</a> that has its <a>checkedness</a> set to true, if any, and then setting
  <var>R</var>'s <a>checkedness</a> to true. The <a>canceled
  activation steps</a> for <var>R</var> consist of checking if the element to which a reference
  was obtained in the <a>pre-click activation steps</a>, if any, is still in what is now
  <var>R</var>'s <a>radio button group</a>, if it still has one, and if so, setting that
  element's <a>checkedness</a> to true; or else, if there was no
  such element, or that element is no longer in <var>R</var>'s <a>radio button group</a>, or
  if <var>R</var> no longer has a <a>radio button group</a>, setting <var>R</var>'s <a>checkedness</a> to false. The <a>activation behavior</a> for
  <var>R</var> is to <a>fire a simple event</a> that bubbles named <code>input</code> at <var>R</var> and then <a>fire a simple event</a>
  that bubbles named <code>change</code> at <var>R</var>.

  If the element is not <i>mutable</i>, it has no <a>activation
  behavior</a>.

  <strong>Constraint validation</strong>: If an element in the <i>radio button group</i> is <i>required</i>, and all of the <code>input</code> elements in the
  <i>radio button group</i> have a <a>checkedness</a> that is
  false, then the element is <a>suffering from being missing</a>.

  </div>

  <p class="note">
    If none of the radio buttons in a <a>radio button group</a> are checked when
  they are inserted into the document, then they will all be initially unchecked in the interface,
  until such time as one of them is checked (either by the user or by script).
  </p>

  <div class="bookkeeping">

    The following common <code>input</code> element content attributes and IDL attributes <a>apply</a> to the element:
    <code>checked</code> and
    <code>required</code> content attributes;
    <code>checked</code> and
    <code>value</code> IDL attributes.

    The <code>value</code> IDL attribute is in mode <a>default/on</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not apply</a> to the
    element:
    <code>accept</code>,
    <code>alt</code>,
    <code>autocomplete</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>list</code>,
    <code>max</code>,
    <code>maxlength</code>,
    <code>min</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>size</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the element:
    <code>files</code>,
    <code>list</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>select()</code>,
    <code>setRangeText()</code>,
    <code>setSelectionRange()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

  </div>

<h6 id="file-upload-state-typefile"><dfn>File Upload</dfn> state (<code>type=file</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>File Upload</a> state, the rules in this section
  apply.

  </div>

  The <code>input</code> element <a>represents</a> a list of <dfn>selected files</dfn>, each file consisting of a file
  name, a file type, and a file body (the contents of the file).

  <div class="impl">

  File names must not contain <a>path components</a>, even
  in the case that a user has selected an entire directory hierarchy or multiple files with the same
  name from different directories. <dfn>Path components</dfn>, for
  the purposes of the <a>File Upload</a> state, are those parts
  of file names that are separated by U+005C REVERSE SOLIDUS character (\) characters.

  Unless the <code>multiple</code> attribute is set, there must be
  no more than one file in the list of <a>selected
  files</a>.

  If the element is <i>mutable</i>, then the element's
  <a>activation behavior</a> is to run the following steps:

  <ol>

    <li>If the algorithm is not <a>allowed to show a popup</a>, then abort these steps
    without doing anything else.</li>

    <li>Return, but continue running these steps <a>in parallel</a>.</li>

    <li>Optionally, wait until any prior execution of this algorithm has terminated.

    </li><li>Display a prompt to the user requesting that the user specify some files. If the <code>multiple</code> attribute is not set, there must be no more than one
    file selected; otherwise, any number may be selected. Files can be from the filesystem or created
    on the fly, e.g. a picture taken from a camera connected to the user's device.

    </li><li>Wait for the user to have made their selection.</li>

    <li><a>Queue a task</a> to first update the element's <a>selected files</a> so that it represents the user's
    selection, then <a>fire a simple event</a> that bubbles named <code>input</code> at the <code>input</code> element, and finally <a>fire
    a simple event</a> that bubbles named <code>change</code> at the
    <code>input</code> element.</li>

  </ol>

  If the element is <i>mutable</i>, the user agent should allow the
  user to change the files on the list in other ways also, e.g. adding or removing files by
  drag-and-drop. When the user does so, the user agent must <a>queue a task</a> to first
  update the element's <a>selected files</a> so that
  it represents the user's new selection, then <a>fire a simple event</a> that bubbles named
  <code>input</code> at the <code>input</code> element, and finally
  <a>fire a simple event</a> that bubbles named <code>change</code> at the <code>input</code> element.

  If the element is not <i>mutable</i>, it has no <a>activation
  behavior</a> and the user agent must not allow the user to change the element's selection.

  <strong>Constraint validation</strong>: If the element is <i>required</i> and the list of <a>selected files</a> is empty, then the element is
  <a>suffering from being missing</a>.

  </div>

  <hr />

  The <dfn><code>accept</code></dfn> attribute may be specified to
  provide user agents with a hint of what file types will be accepted.

  If specified, the attribute must consist of a <a>set of comma-separated tokens</a>, each
  of which must be an <a>ASCII case-insensitive</a> match for one of the following:

  <dl>

    <dt>The string "<code>audio/*</code>"</dt>

    <dd>Indicates that sound files are accepted.</dd>

    <dt>The string "<code>video/*</code>"</dt>

    <dd>Indicates that video files are accepted.</dd>

    <dt>The string "<code>image/*</code>"</dt>

    <dd>Indicates that image files are accepted.</dd>

    <dt>A <a>valid MIME type with no parameters</a></dt>

    <dd>Indicates that files of the specified type are accepted.</dd>

    <dt>A string whose first character is a U+002E FULL STOP character (.)</dt>

    <dd>Indicates that files with the specified file extension are accepted.</dd>

  </dl>

  The tokens must not be <a>ASCII case-insensitive</a> matches for any of the other tokens
  (i.e. duplicates are not allowed). <span class="impl">To obtain the list of tokens from the
  attribute, the user agent must <a>split the attribute value on
  commas</a>.</span>

  User agents may use the value of this attribute to display a more appropriate user interface
  than a generic file picker. For instance, given the value <code>image/*</code>, a user
  agent could offer the user the option of using a local camera or selecting a photograph from their
  photo collection; given the value <code>audio/*</code>, a user agent could offer the user
  the option of recording a clip using a headset microphone.

  <div class="impl">
    User agents should prevent the user from selecting files that are not accepted by one (or more)
    of these tokens.
  </div>

  <p class="note">
    Authors are encouraged to specify both any MIME types and any corresponding
  extensions when looking for data in a specific format.
  </p>

  <div class="example">
    For example, consider an application that converts Microsoft Word documents to Open Document
    Format files. Since Microsoft Word documents are described with a wide variety of MIME types and
    extensions, the site can list several, as follows:

    <pre highlight="html">
      &lt;input type="file" accept=".doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document"&gt;
    </pre>

    On platforms that only use file extensions to describe file types, the extensions listed here
    can be used to filter the allowed documents, while the MIME types can be used with the system's
    type registration table (mapping MIME types to extensions used by the system), if any, to
    determine any other extensions to allow. Similarly, on a system that does not have file names or
    extensions but labels documents with MIME types internally, the MIME types can be used to pick
    the allowed files, while the extensions can be used if the system has an extension registration
    table that maps known extensions to MIME types used by the system.
  </div>

  <p class="warning">Extensions tend to be ambiguous (e.g. there are an untold number of formats
  that use the "<code>.dat</code>" extension, and users can typically quite easily rename
  their files to have a "<code>.doc</code>" extension even if they are not Microsoft Word
  documents), and MIME types tend to be unreliable (e.g. many formats have no formally registered
  types, and many formats are in practice labeled using a number of different MIME types). Authors
  are reminded that, as usual, data received from a client should be treated with caution, as it may
  not be in an expected format even if the user is not hostile and the user agent fully obeyed the
  <code>accept</code> attribute's requirements.</p>

  <div class="example">
    For historical reasons, the <code>value</code> IDL attribute prefixes
    the file name with the string "<code>C:\fakepath\</code>". Some legacy user agents
    actually included the full path (which was a security vulnerability). As a result of this,
    obtaining the file name from the <code>value</code> IDL attribute in a
    backwards-compatible way is non-trivial. The following function extracts the file name in a
    suitably compatible manner:

    <pre highlight="javascript">
      function extractFilename(path) {
        if (path.substr(0, 12) == "C:\\fakepath\\")
          return path.substr(12); // modern browser
        var x;
        x = path.lastIndexOf('/');
        if (x &gt;= 0) // Unix-based path
          return path.substr(x+1);
        x = path.lastIndexOf('\\');
        if (x &gt;= 0) // Windows-based path
          return path.substr(x+1);
        return path; // just the file name
      }
    </pre>

    This can be used as follows:

    <pre highlight="html">
      &lt;p&gt;&lt;input type=file name=image onchange="updateFilename(this.value)"&gt;&lt;/p&gt;
      &lt;p&gt;The name of the file you picked is: &lt;span id="filename"&gt;(none)&lt;/span&gt;&lt;/p&gt;
      &lt;script&gt;
        function updateFilename(path) {
          var name = extractFilename(path);
          document.getElementById('filename').textContent = name;
        }
      &lt;/script&gt;
    </pre>
  </div>

  <hr />

  <div class="bookkeeping">
    The following common <code>input</code> element content attributes and IDL attributes <a>apply</a> to the element:
    <code>accept</code>,
    <code>multiple</code>, and
    <code>required</code> content attributes;
    <code>files</code> and
    <code>value</code> IDL attributes;
    <code>select()</code> method.

    The <code>value</code> IDL attribute is in mode <a>filename</a>.

    The <code>input</code> and <code>change</code> events <a>apply</a>.

    The following content attributes must not be specified and <a>do not apply</a> to the
    element:
    <code>alt</code>,
    <code>autocomplete</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>list</code>,
    <code>max</code>,
    <code>maxlength</code>,
    <code>min</code>,
    <code>minlength</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>size</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code>.

    The element's <code>value</code> attribute must be omitted.

    The following IDL attributes and methods <a>do not apply</a> to the element:
    <code>checked</code>,
    <code>list</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>setRangeText()</code>,
    <code>setSelectionRange()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.
  </div>

<h6 id="submit-button-state-typesubmit"><dfn>Submit Button</dfn> state (<code>type=submit</code>)</h6>

  <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>button</code></a>
    (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    </dl>
  </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Submit Button</a> state, the rules in this section
  apply.

  </div>

  The <code>input</code> element <a>represents</a> a button that, when activated, submits
  the form. <span class="impl">If the element has a <code>value</code>
  attribute, the button's label must be the value of that attribute; otherwise, it must be an
  implementation-defined string that means "Submit" or some such.</span> The element is a <a>button</a>, specifically a <a>submit
  button</a>.
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

  <p class="note">
    Since the default label is implementation-defined, and the width of the button
  typically depends on the button's label, the button's width can leak a few bits of fingerprintable
  information. These bits are likely to be strongly correlated to the identity of the user agent and
  the user's locale.
  </p>

  <div class="impl">

  If the element is <i>mutable</i>, then the element's
  <a>activation behavior</a> is as follows: if the element has a <a>form owner</a>,
  and the element's <a>node document</a> is <a>fully active</a>,
  <a>submit</a> the <a>form owner</a> from the
  <code>input</code> element; otherwise, do nothing.

  If the element is not <i>mutable</i>, it has no <a>activation
  behavior</a>.

  </div>

  The <code>formaction</code>, <code>formenctype</code>, <code>formmethod</code>, <code>formnovalidate</code>, and <code>formtarget</code> attributes are <a>attributes for form
  submission</a>.

  <p class="note">
    The <code>formnovalidate</code> attribute can be
  used to make submit buttons that do not trigger the constraint validation.
  </p>

  <div class="bookkeeping">

    The following common <code>input</code> element content attributes and IDL attributes <a>apply</a> to the element:
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>, and
    <code>formtarget</code> content attributes;
    <code>value</code> IDL attribute.

    The <code>value</code> IDL attribute is in mode <a>default</a>.

    The following content attributes must not be specified and <a>do not apply</a> to the
    element:
    <code>accept</code>,
    <code>alt</code>,
    <code>autocomplete</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>list</code>,
    <code>max</code>,
    <code>maxlength</code>,
    <code>min</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>,
    <code>size</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the element:
    <code>checked</code>,
    <code>files</code>,
    <code>list</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>select()</code>,
    <code>setRangeText()</code>,
    <code>setSelectionRange()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

    The <code>input</code> and <code>change</code> events <a>do not apply</a>.

  </div>

<h6 id="image-button-state-typeimage"><dfn>Image Button</dfn> state (<code>type=image</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>button</code></a>
    (default - <a><em>do not set</em></a>),
    <a><code>link</code></a>,
      <a><code>menuitem</code></a>,
    <a><code>menuitemcheckbox</code></a>,
      <a><code>menuitemradio</code></a>
    or <a><code>radio</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Image Button</a> state, the rules in this section
  apply.

  </div>

  The <code>input</code> element <a>represents</a> either an image from which a user can
  select a coordinate and submit the form, or alternatively a button from which the user can submit
  the form. The element is a <a>button</a>, specifically a <a>submit button</a>.

  <p class="note">
    The coordinate is sent to the server <a>during form submission</a> by sending two entries for the element, derived from the name
  of the control but with "<code>.x</code>" and "<code>.y</code>" appended to the
  name with the <var>x</var> and <var>y</var> components of the coordinate
  respectively.
  </p>

  <hr />

  The image is given by the <dfn><code>src</code></dfn> attribute. The
  <code>src</code> attribute must be present, and must contain a <a>valid
  non-empty URL potentially surrounded by spaces</a> referencing a non-interactive, optionally
  animated, image resource that is neither paged nor scripted.

  <div class="impl">

  When any of the these events occur

  <ul>

    <li>the <code>input</code> element's <code>type</code> attribute is
    first set to the <a>Image Button</a> state (possibly when
    the element is first created), and the <code>src</code> attribute is
    present</li>

    <li>the <code>input</code> element's <code>type</code> attribute is
    changed back to the <a>Image Button</a> state, and the <code>src</code> attribute is present, and its value has changed since the last
    time the <code>type</code> attribute was in the <a>Image Button</a> state</li>

    <li>the <code>input</code> element's <code>type</code> attribute is in
    the <a>Image Button</a> state, and the <code>src</code> attribute is set or changed</li>

  </ul>

  then unless the user agent cannot support images, or its support for images has been disabled,
  or the user agent only fetches images on demand, or the <code>src</code>
  attribute's value is the empty string, the user agent must <a>resolve</a> the value of the <code>src</code>
  attribute value, relative to the element, and if that is successful, run these substeps:

  <ol>
    <li>Let <var>request</var> be a new <a>request</a> whose
    <a>url</a> is the resulting <a>absolute URL</a>,
    <a>client</a> is the element's <a>node document</a>'s
    <code>Window</code> object's <a>environment settings object</a>, <a>type</a> is "<code>image</code>", <a>destination</a> is "<code>subresource</code>",
    <a>omit-<code>Origin</code>-header flag</a> is set, <a>credentials mode</a> is "<code>include</code>", and whose <a>use-URL-credentials flag</a> is set.</li>

    <li><a>Fetch</a> <var>request</var>.</li>
  </ol>

  Fetching the image must <a>delay the load event</a> of the element's <a>node document</a> until the
  <a>task</a> that is <a>queued</a> by the
  <a>networking task source</a> once the resource has been fetched (defined below) has been
  run.

  If the image was successfully obtained, with no network errors, and the image's type is a
  supported image type, and the image is a valid image of that type, then the image is said to be
  <dfn><i>available</i></dfn>. If this is true before the image is
  completely downloaded, each <a>task</a> that is <a>queued</a> by the <a>networking task source</a> while the image is being fetched
  must update the presentation of the image appropriately.

  The user agent should apply the <a>image sniffing
  rules</a> to determine the type of the image, with the image's <a>associated Content-Type headers</a> giving the <var>official
  type</var>. If these rules are not applied, then the type of the image must be the type given by
  the image's <a>associated Content-Type headers</a>.

  User agents must not support non-image resources with the <code>input</code> element. User
  agents must not run executable code embedded in the image resource. User agents must only display
  the first page of a multipage resource. User agents must not allow the resource to act in an
  interactive fashion, but should honor any animation in the resource.

  The <a>task</a> that is <a>queued</a>
  by the <a>networking task source</a> once the resource has been fetched, must, if the
  download was successful and the image is <i>available</i>,
  <a>queue a task</a> to <a>fire a simple event</a> named <code>load</code> at the <code>input</code> element; and otherwise, if the fetching
  process fails without a response from the remote server, or completes but the image is not a valid
  or supported image, <a>queue a task</a> to <a>fire a simple event</a> named <code>error</code> on the <code>input</code> element.

  <hr />

  </div>

  The <dfn><code>alt</code></dfn> attribute provides the textual label for
  the button for users and user agents who cannot use the image. The <code>alt</code> attribute must be present, and must contain a non-empty string
  giving the label that would be appropriate for an equivalent button if the image was
  unavailable.

  The <code>input</code> element supports <a>dimension attributes</a>.

  <div class="impl">

  <hr />

  If the <code>src</code> attribute is set, and the image is <i>available</i> and the user agent is configured to display that image,
  then: The element <a>represents</a> a control for selecting a <a>coordinate</a> from the image specified by the
  <code>src</code> attribute; if the element is <i>mutable</i>, the user agent should allow the user to select this <a>coordinate</a>, and the element's <a>activation
  behavior</a> is as follows: if the element has a <a>form owner</a>, and the element's
  <a>node document</a> is <a>fully active</a>, take the user's selected <a>coordinate</a>, and <a>submit</a> the <code>input</code> element's <a>form owner</a>
  from the <code>input</code> element. If the user activates the control without explicitly
  selecting a coordinate, then the coordinate (0,0) must be assumed.

  Otherwise, the element <a>represents</a> a submit button whose label is given by the
  value of the <code>alt</code> attribute; if the element is <i>mutable</i>, then the element's <a>activation behavior</a> is as
  follows: if the element has a <a>form owner</a>, and the element's <a>node document</a> is
  <a>fully active</a>, set the <a>selected
  coordinate</a> to (0,0), and <a>submit</a> the
  <code>input</code> element's <a>form owner</a> from the <code>input</code> element.

  In either case, if the element is <i>mutable</i> but has no
  <a>form owner</a> or the element's <a>node document</a> is not <a>fully active</a>,
  then its <a>activation behavior</a> must be to do nothing. If the element is not <i>mutable</i>, it has no <a>activation behavior</a>.

  The <dfn>selected coordinate</dfn> must consist of
  an <var>x</var>-component and a <var>y</var>-component. The coordinates
  represent the position relative to the edge of the image, with the coordinate space having the
  positive <var>x</var> direction to the right, and the positive <var>y</var>
  direction downwards.

  The <var>x</var>-component must be a <a>valid integer</a> representing a number
  <var>x</var> in the range <a>-(<var>border<sub>left</sub></var>+<var>padding<sub>left</sub></var>) â¤ <var>x</var> â¤ <var>width</var>+<var>border<sub>right</sub></var>+<var>padding<sub>right</sub></var></a>, where <var>width</var> is the rendered width of the image, <var>border<sub>left</sub></var> is the width of the border on the left of the image, <var>padding<sub>left</sub></var> is the width of the padding on the left of the
  image, <var>border<sub>right</sub></var> is the width of the border on the right
  of the image, and <var>padding<sub>right</sub></var> is the width of the padding
  on the right of the image, with all dimensions given in CSS pixels.

  The <var>y</var>-component must be a <a>valid integer</a> representing a number
  <var>y</var> in the range <a>-(<var>border<sub>top</sub></var>+<var>padding<sub>top</sub></var>) â¤ <var>y</var> â¤ <var>height</var>+<var>border<sub>bottom</sub></var>+<var>padding<sub>bottom</sub></var></a>, where
  <var>height</var> is the rendered height of the image, <var>border<sub>top</sub></var> is the width of the border above the image, <var>padding<sub>top</sub></var> is the width of the padding above the image, <var>border<sub>bottom</sub></var> is the width of the border below the image, and <var>padding<sub>bottom</sub></var> is the width of the padding below the image, with
  all dimensions given in CSS pixels.

  Where a border or padding is missing, its width is zero CSS pixels.

  <hr />

  </div>

  The <code>formaction</code>, <code>formenctype</code>, <code>formmethod</code>, <code>formnovalidate</code>, and <code>formtarget</code> attributes are <a>attributes for form
  submission</a>.

  <dl class="domintro">

    <dt><var>image</var> . <code>width</code> [ = <var>value</var> ]</dt>
    <dt><var>image</var> . <code>height</code> [ = <var>value</var> ]</dt>

    <dd>

    These attributes return the actual rendered dimensions of the image, or zero if the
    dimensions are not known.

    They can be set, to change the corresponding content attributes.

    </dd>

  </dl>

  <div class="bookkeeping">

    The following common <code>input</code> element content attributes and IDL attributes <a>apply</a> to the element:
    <code>alt</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>src</code>, and
    <code>width</code> content attributes;
    <code>value</code> IDL attribute.

    The <code>value</code> IDL attribute is in mode <a>default</a>.

    The following content attributes must not be specified and <a>do not apply</a> to the
    element:
    <code>accept</code>,
    <code>autocomplete</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>inputmode</code>,
    <code>list</code>,
    <code>max</code>,
    <code>maxlength</code>,
    <code>min</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>,
    <code>size</code>, and
    <code>step</code>.

    The element's <code>value</code> attribute must be omitted.

    The following IDL attributes and methods <a>do not apply</a> to the element:
    <code>checked</code>,
    <code>files</code>,
    <code>list</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>select()</code>,
    <code>setRangeText()</code>,
    <code>setSelectionRange()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

    The <code>input</code> and <code>change</code> events <a>do not apply</a>.

  </div>

  <p class="note">
    Many aspects of this state's behavior are similar to the behavior of the
  <code>img</code> element. Readers are encouraged to read that section, where many of the same
  requirements are described in more detail.
  </p>

  <div class="example">
    Take the following form:

    <pre highlight="html">
&lt;form action="process.cgi"&gt;
  &lt;input type=image src=map.png name=where alt="Show location list"&gt;
&lt;/form&gt;
    </pre>

    If the user clicked on the image at coordinate (127,40) then the URL used to submit the form
    would be "<code>process.cgi?where.x=127&amp;where.y=40</code>".

    (In this example, it's assumed that for users who don't see the map, and who instead just see
    a button labeled "Show location list", clicking the button will cause the server to show a list
    of locations to pick from instead of the map.)

  </div>

<h6 id="reset-button-state-typereset"><dfn>Reset Button</dfn> state (<code>type=reset</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>button</code></a>
    (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Reset Button</a> state, the rules in this section
  apply.

  </div>

  The <code>input</code> element <a>represents</a> a button that, when activated, resets
  the form. <span class="impl">If the element has a <code>value</code>
  attribute, the button's label must be the value of that attribute; otherwise, it must be an
  implementation-defined string that means "Reset" or some such.</span> The element is a <a>button</a>.
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

  <p class="note">
    Since the default label is implementation-defined, and the width of the button
  typically depends on the button's label, the button's width can leak a few bits of fingerprintable
  information. These bits are likely to be strongly correlated to the identity of the user agent and
  the user's locale.
  </p>

  <div class="impl">

  If the element is <i>mutable</i>, then the element's
  <a>activation behavior</a>, if the element has a <a>form owner</a> and the element's
  <a>node document</a> is <a>fully active</a>, is to <a>reset</a> the <a>form owner</a>; otherwise, it is to do
  nothing.

  If the element is not <i>mutable</i>, it has no <a>activation
  behavior</a>.

  <strong>Constraint validation</strong>: The element is <a>barred from constraint
  validation</a>.

  </div>

  <div class="bookkeeping">

    The <code>value</code> IDL attribute <a>applies</a> to this element and is in mode <a>default</a>.

    The following content attributes must not be specified and <a>do not apply</a> to the
    element:
    <code>accept</code>,
    <code>alt</code>,
    <code>autocomplete</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>list</code>,
    <code>max</code>,
    <code>maxlength</code>,
    <code>min</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>,
    <code>size</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the element:
    <code>checked</code>,
    <code>files</code>,
    <code>list</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>select()</code>,
    <code>setRangeText()</code>,
    <code>setSelectionRange()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

    The <code>input</code> and <code>change</code> events <a>do not apply</a>.

  </div>

<h6 id="button-state-typebutton"><dfn>Button</dfn> state (<code>type=button</code>)</h6>

    <div class="note">
    <dl>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>button</code></a>
    (default - <a><em>do not set</em></a>),
    <a><code>link</code></a>,
      <a><code>menuitem</code></a>,
    <a><code>menuitemcheckbox</code></a>,
      <a><code>menuitemradio</code></a>
    or <a><code>radio</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    </dl>
    </div>

  <div class="impl">

  When an <code>input</code> element's <code>type</code> attribute is in
  the <a>Button</a> state, the rules in this section apply.

  </div>

  The <code>input</code> element <a>represents</a> a button with no default behavior. A
  label for the button must be provided in the <code>value</code>
  attribute, though it may be the empty string. <span class="impl">If the element has a <code>value</code> attribute, the button's label must be the value of that
  attribute; otherwise, it must be the empty string.</span> The element is a <a>button</a>.

  <div class="impl">

  If the element is <i>mutable</i>, the element's <a>activation
  behavior</a> is to do nothing.

  If the element is not <i>mutable</i>, it has no <a>activation
  behavior</a>.

  <strong>Constraint validation</strong>: The element is <a>barred from constraint
  validation</a>.

  </div>

  <div class="bookkeeping">

    The <code>value</code> IDL attribute <a>applies</a> to this element and is in mode <a>default</a>.

    The following content attributes must not be specified and <a>do not apply</a> to the
    element:
    <code>accept</code>,
    <code>alt</code>,
    <code>autocomplete</code>,
    <code>checked</code>,
    <code>dirname</code>,
    <code>formaction</code>,
    <code>formenctype</code>,
    <code>formmethod</code>,
    <code>formnovalidate</code>,
    <code>formtarget</code>,
    <code>height</code>,
    <code>inputmode</code>,
    <code>list</code>,
    <code>max</code>,
    <code>maxlength</code>,
    <code>min</code>,
    <code>minlength</code>,
    <code>multiple</code>,
    <code>pattern</code>,
    <code>placeholder</code>,
    <code>readonly</code>,
    <code>required</code>,
    <code>size</code>,
    <code>src</code>,
    <code>step</code>, and
    <code>width</code>.

    The following IDL attributes and methods <a>do not apply</a> to the element:
    <code>checked</code>,
    <code>files</code>,
    <code>list</code>,
    <code>selectionStart</code>,
    <code>selectionEnd</code>,
    <code>selectionDirection</code>,
    <code>valueAsDate</code>,
    <code>valueAsNumber</code>,
    <code>valueLow</code>, and
    <code>valueHigh</code> IDL attributes;
    <code>select()</code>,
    <code>setRangeText()</code>,
    <code>setSelectionRange()</code>,
    <code>stepDown()</code>, and
    <code>stepUp()</code> methods.

    The <code>input</code> and <code>change</code> events <a>do not apply</a>.

  </div>

  <div class="impl">

<h5 id="implemention-notes-regarding-localization-of-form-controls">Implemention notes regarding localization of form controls</h5>

  <em>This section is non-normative.</em>

  The formats shown to the user in date, time, and number controls is independent of the format
  used for form submission.

  Browsers are encouraged to use user interfaces that present dates, times, and numbers according
  to the conventions of either the locale implied by the <code>input</code> element's
  <a>language</a> or the user's preferred locale. Using the page's locale will ensure
  consistency with page-provided data.

  <p class="example">For example, it would be confusing to users if an American English page claimed
  that a Cirque De Soleil show was going to be showing on 02/03, but their
  browser, configured to use the British English locale, only showed the date 03/02 in the ticket purchase date picker. Using the page's locale would at least ensure that the
  date was presented in the same format everywhere. (There's still a risk that the user would end up
  arriving a month late, of course, but there's only so much that can be done about such cultural
  differences...)

  </p></div>

<h5 id="common-input-element-attributes">Common <code>input</code> element attributes</h5>

  <div class="impl">

  These attributes only <a>apply</a> to an <code>input</code>
  element if its <code>type</code> attribute is in a state whose definition
  declares that the attribute <a>applies</a>. When an attribute
  <a>doesn't apply</a> to an <code>input</code> element, user agents must
  <a>ignore</a> the attribute, regardless of the requirements and definitions below.

  </div>

<h6 id="the-maxlength-and-minlength-attributes">The <code>maxlength</code> and <code>minlength</code> attributes</h6>

  The <dfn><code>maxlength</code></dfn> attribute<span class="impl">, when it <a>applies</a>,</span> is a <a>form control <code>maxlength</code> attribute</a><span class="impl"> controlled by the <code>input</code> element's <a>dirty value flag</a></span>.

  The <dfn><code>minlength</code></dfn> attribute<span class="impl">, when it <a>applies</a>,</span> is a <a>form control <code>minlength</code> attribute</a><span class="impl"> controlled by the <code>input</code> element's <a>dirty value flag</a></span>.

  If the <code>input</code> element has a <a>maximum allowed value length</a>, then the
  <a>code-unit length</a> of the value of the element's <code>value</code> attribute must be equal to or less than the element's
  <a>maximum allowed value length</a>.

  <div class="example">
    The following extract shows how a messaging client's text entry could be arbitrarily
    restricted to a fixed number of characters, thus forcing any conversation through this medium to
    be terse and discouraging intelligent discourse.

    <pre highlight="html">
&lt;label&gt;What are you doing? &lt;input name=status maxlength=140&gt;&lt;/label&gt;
    </pre>

  </div>

  <div class="example">
    Here, a password is given a minimum length:

    <pre highlight="html">
&lt;p&gt;&lt;label&gt;Username: &lt;input name=u required&gt;&lt;/label&gt;
&lt;p&gt;&lt;label&gt;Password: &lt;input name=p required minlength=12&gt;&lt;/label&gt;
    </pre>

  </div>

<h6 id="the-size-attribute">The <code>size</code> attribute</h6>

  The <dfn><code>size</code></dfn> attribute gives the number of
  characters that, in a visual rendering, the user agent is to allow the user to see while editing
  the element's <a>value</a>.

  The <code>size</code> attribute, if specified, must have a value that
  is a <a>valid non-negative integer</a> greater than zero.

  <div class="impl">

  If the attribute is present, then its value must be parsed using the <a>rules for parsing
  non-negative integers</a>, and if the result is a number greater than zero, then the user agent
  should ensure that at least that many characters are visible.

  The <code>size</code> IDL attribute is <a>limited to only
  non-negative numbers greater than zero</a> and has a default value of 20.

  </div>

<h6 id="the-readonly-attribute">The <code>readonly</code> attribute</h6>

  The <dfn><code>readonly</code></dfn> attribute is a <a>boolean
  attribute</a> that controls whether or not the user can edit the form control. <span class="impl">When specified, the element is not <i>mutable</i>.</span>

  <div class="impl">

  <strong>Constraint validation</strong>: If the <code>readonly</code> attribute is specified on an <code>input</code>
  element, the element is <a>barred from constraint validation</a>.

  </div>

  <p class="note">
    The difference between <code>disabled</code> and <code>readonly</code> is that read-only controls are still focusable, so the
  user can still select the text and interact with it, whereas disabled controls are entirely
  non-interactive. (For this reason, only text controls can be made read-only: it wouldn't make
  sense for checkboxes or buttons, for instances.)
  </p>

  <div class="example">
    In the following example, the existing product identifiers cannot be modified, but they are
    still displayed as part of the form, for consistency with the row representing a new product
    (where the identifier is not yet filled in).

    <pre highlight="html">
&lt;form action="products.cgi" method="post" enctype="multipart/form-data"&gt;
  &lt;table&gt;
  &lt;tr&gt; &lt;th&gt; Product ID &lt;th&gt; Product name &lt;th&gt; Price &lt;th&gt; Action
  &lt;tr&gt;
    &lt;td&gt; &lt;input readonly="readonly" name="1.pid" value="H412"&gt;
    &lt;td&gt; &lt;input required="required" name="1.pname" value="Floor lamp Ulke"&gt;
    &lt;td&gt; $&lt;input required="required" type="number" min="0" step="0.01" name="1.pprice" value="49.99"&gt;
    &lt;td&gt; &lt;button formnovalidate="formnovalidate" name="action" value="delete:1"&gt;Delete&lt;/button&gt;
  &lt;tr&gt;
    &lt;td&gt; &lt;input readonly="readonly" name="2.pid" value="FG28"&gt;
    &lt;td&gt; &lt;input required="required" name="2.pname" value="Table lamp Ulke"&gt;
    &lt;td&gt; $&lt;input required="required" type="number" min="0" step="0.01" name="2.pprice" value="24.99"&gt;
    &lt;td&gt; &lt;button formnovalidate="formnovalidate" name="action" value="delete:2"&gt;Delete&lt;/button&gt;
  &lt;tr&gt;
    &lt;td&gt; &lt;input required="required" name="3.pid" value="" pattern="\[A-Z0-9]+"&gt;
    &lt;td&gt; &lt;input required="required" name="3.pname" value=""&gt;
    &lt;td&gt; $&lt;input required="required" type="number" min="0" step="0.01" name="3.pprice" value=""&gt;
    &lt;td&gt; &lt;button formnovalidate="formnovalidate" name="action" value="delete:3"&gt;Delete&lt;/button&gt;
  &lt;/table&gt;
  &lt;p&gt; &lt;button formnovalidate="formnovalidate" name="action" value="add"&gt;Add&lt;/button&gt; &lt;/p&gt;
  &lt;p&gt; &lt;button name="action" value="update"&gt;Save&lt;/button&gt; &lt;/p&gt;
&lt;/form&gt;
    </pre>

  </div>

<h6 id="the-required-attribute">The <code>required</code> attribute</h6>

  The <dfn><code>required</code></dfn> attribute is a <a>boolean
  attribute</a>. When specified, the element is <dfn><i>required</i></dfn>.

  <div class="impl">

  <strong>Constraint validation</strong>: If the element is <i>required</i>, and its <code>value</code>
  IDL attribute <a>applies</a> and is in the mode <a>value</a>, and the element is <i>mutable</i>, and the element's <a>value</a> is the empty string, then the element is <a>suffering
  from being missing</a>.

  </div>

  <div class="example">
    The following form has two required fields, one for an e-mail address and one for a password.
    It also has a third field that is only considered valid if the user types the same password in
    the password field and this third field.

    <pre highlight="html">
&lt;h1&gt;Create new account&lt;/h1&gt;
&lt;form action="/newaccount" method=post
      oninput="up2.setCustomValidity(up2.value != up.value ? 'Passwords do not match.' : '')"&gt;
  &lt;p&gt;
  &lt;label for="username"&gt;E-mail address:&lt;/label&gt;
  &lt;input id="username" type=email required name=un&gt;
  &lt;p&gt;
  &lt;label for="password1"&gt;Password:&lt;/label&gt;
  &lt;input id="password1" type=password required name=up&gt;
  &lt;p&gt;
  &lt;label for="password2"&gt;Confirm password:&lt;/label&gt;
  &lt;input id="password2" type=password name=up2&gt;
  &lt;p&gt;
  &lt;input type=submit value="Create account"&gt;
&lt;/form&gt;
    </pre>

  </div>

  <div class="example">
    For radio buttons, the <code>required</code> attribute is
    satisfied if any of the radio buttons in the <a>group</a> is
    selected. Thus, in the following example, any of the radio buttons can be checked, not just the
    one marked as required:

    <pre highlight="html">
&lt;fieldset&gt;
  &lt;legend&gt;Did the movie pass the Bechdel test?&lt;/legend&gt;
  &lt;p&gt;&lt;label&gt;&lt;input type="radio" name="bechdel" value="no-characters"&gt; No, there are not even two female characters in the movie. &lt;/label&gt;
  &lt;p&gt;&lt;label&gt;&lt;input type="radio" name="bechdel" value="no-names"&gt; No, the female characters never talk to each other. &lt;/label&gt;
  &lt;p&gt;&lt;label&gt;&lt;input type="radio" name="bechdel" value="no-topic"&gt; No, when female characters talk to each other it's always about a male character. &lt;/label&gt;
  &lt;p&gt;&lt;label&gt;&lt;input type="radio" name="bechdel" value="yes" <strong>required</strong>&gt; Yes. &lt;/label&gt;
  &lt;p&gt;&lt;label&gt;&lt;input type="radio" name="bechdel" value="unknown"&gt; I don't know. &lt;/label&gt;
&lt;/fieldset&gt;
    </pre>

    To avoid confusion as to whether a <a>radio button group</a> is required or not, authors
    are encouraged to specify the attribute on all the radio buttons in a group. Indeed, in general,
    authors are encouraged to avoid having radio button groups that do not have any initially checked
    controls in the first place, as this is a state that the user cannot return to, and is therefore
    generally considered a poor user interface.

  </div>

<h6 id="the-multiple-attribute">The <code>multiple</code> attribute</h6>

  The <dfn><code>multiple</code></dfn> attribute is a <a>boolean
  attribute</a> that indicates whether the user is to be allowed to specify more than one
  value.

  <div class="example">
    The following extract shows how an e-mail client's "Cc" field could accept multiple e-mail
    addresses.

    <pre highlight="html">
&lt;label&gt;Cc: &lt;input type=email multiple name=cc&gt;&lt;/label&gt;
    </pre>

    If the user had, amongst many friends in his user contacts database, two friends "Arthur Dent"
    (with address "art@example.net") and "Adam Josh" (with address "adamjosh@example.net"), then,
    after the user has typed "a", the user agent might suggest these two e-mail addresses to the
    user.

    <img src="images/sample-email-1.png" width="500" height="140" alt="Form control group containing 'Send',
    'Save now' and 'Discard' buttons, a 'To:' combo box with an 'a' displayed in the text box and 2 list items below.">

    The page could also link in the user's contacts database from the site:

    <pre highlight="html">
&lt;label&gt;Cc: &lt;input type=email multiple name=cc list=contacts&gt;&lt;/label&gt;
...
&lt;datalist id="contacts"&gt;
  &lt;option value="hedral@damowmow.com"&gt;
  &lt;option value="pillar@example.com"&gt;
  &lt;option value="astrophy@cute.example"&gt;
  &lt;option value="astronomy@science.example.org"&gt;
&lt;/datalist&gt;
    </pre>

    Suppose the user had entered "bob@example.net" into this text field, and then started typing a
    second e-mail address starting with "a". The user agent might show both the two friends mentioned
    earlier, as well as the "astrophy" and "astronomy" values given in the <code>datalist</code>
    element.

    <img src="images/sample-email-2.png" width="500" height="171" alt="Form control group containing 'send',
    'save now' and 'discard' buttons and a 'To:' combo box with 'bob@example.net,a' displayed in the text box and 4 list items below.">

  </div>

  <div class="example">
    The following extract shows how an e-mail client's "Attachments" field could accept multiple
    files for upload.

    <pre highlight="html">
&lt;label&gt;Attachments: &lt;input type=file multiple name=att&gt;&lt;/label&gt;
    </pre>

  </div>

<h6 id="the-pattern-attribute">The <code>pattern</code> attribute</h6>

  The <dfn><code>pattern</code></dfn> attribute specifies a regular
  expression against which the control's <a>value</a>, or, when the
  <code>multiple</code> attribute <a>applies</a> and is set, the control's <a>values</a>, are to be checked.

  If specified, the attribute's value must match the JavaScript <i>Pattern</i>
  production. [[!ECMA-262]]

  <div class="impl">

  If an <code>input</code> element has a <code>pattern</code>
  attribute specified, and the attribute's value, when compiled as a JavaScript regular expression
  with only the "<code>u</code>" flag specified, compiles successfully, then the resulting regular expression is the element's
  <dfn>compiled pattern regular expression</dfn>. If the element has no such attribute, or if the
  value doesn't compile successfully, then the element has no <a>compiled pattern regular
  expression</a>. [[!ECMA-262]]

  <strong>Constraint validation</strong>: If the element's <a>value</a> is not the empty string, and either the element's <code>multiple</code> attribute is not specified or it <a>does not apply</a> to the <code>input</code> element given its <code>type</code> attribute's current state, and the element has a
  <a>compiled pattern regular expression</a> but that regular expression does not match the
  entirety of the element's <a>value</a>, then the element is
  <a>suffering from a pattern mismatch</a>.

  <strong>Constraint validation</strong>: If the element's <a>value</a> is not the empty string, and the element's <code>multiple</code> attribute is specified and <a>applies</a> to the <code>input</code> element, and the element has
  a <a>compiled pattern regular expression</a> but that regular expression does not match the
  entirety of each of the element's <a>values</a>, then the
  element is <a>suffering from a pattern mismatch</a>.

  The <a>compiled pattern regular expression</a>, when matched against a string, must have
  its start anchored to the start of the string and its end anchored to the end of the string.

  <p class="note">
    This implies that the regular expression language used for this attribute is the
  same as that used in JavaScript, except that the <code>pattern</code>
  attribute is matched against the entire value, not just any subset (somewhat as if it implied a
  <code>^(?:</code> at the start of the pattern and a <code>)$</code> at the
  end).
  </p>

  </div>

  When an <code>input</code> element has a <code>pattern</code>
  attribute specified, authors should provide a description of the pattern in text near the
  control. Authors may also include a <code>title</code>
  attribute to give a description of the pattern. User agents may use
  the contents of this attribute, if it is present, when informing the
  user that the pattern is not matched, or at any other suitable time,
  such as in a tooltip or read out by assistive technology when the
  control gains focus.

  <p class="warning">Relying on the <code>title</code> attribute for the visual display
  of text content is currently discouraged as many user agents do not expose the attribute in an accessible manner
  as required by this specification (e.g. requiring a pointing device such as a mouse to cause a tooltip to appear,
  which excludes keyboard-only users and touch-only users, such as anyone with a modern phone or
  tablet).</p>

  <div class="example">
    For example, the following snippet:
    <pre highlight="html">
&lt;label&gt; Part number:
  &lt;input pattern="\[0-9]\[A-Z]{3}" name="part"
        title="A part number is a digit followed by three uppercase letters."/&gt;
&lt;/label&gt;
    </pre>
    ...could cause the UA to display an alert such as:
    <pre><samp>A part number is a digit followed by three uppercase letters.
You cannot submit this form when the field is incorrect.</samp></pre>
  </div>

  When a control has a <code>pattern</code> attribute, the <code>title</code> attribute, if used, must describe the pattern. Additional
  information could also be included, so long as it assists the user in filling in the control.
  Otherwise, assistive technology would be impaired.

  <p class="example">For instance, if the title attribute contained the caption of the control,
  assistive technology could end up saying something like <samp>The text you have entered does not
  match the required pattern. Birthday</samp>, which is not useful.</p>

  UAs may still show the <code>title</code> in non-error situations (for
  example, as a tooltip when hovering over the control), so authors should be careful not to word
  <code>title</code>s as if an error has necessarily occurred.

<h6 id="the-min-and-max-attributes">The <code>min</code> and <code>max</code> attributes</h6>

  Some form controls can have explicit constraints applied limiting the allowed range of values
  that the user can provide. Normally, such a range would be linear and continuous. A form control
  can <dfn>have a periodic domain</dfn>, however, in which case the
  form control's broadest possible range is finite, and authors can specify explicit ranges within
  it that span the boundaries.

  <p class="example">Specifically, the broadest range of a <code>type=time</code> control is midnight to midnight (24 hours), and
  authors can set both continuous linear ranges (such as 9pm to 11pm) and discontinuous ranges
  spanning midnight (such as 11pm to 1am).</p>

  The <dfn><code>min</code></dfn> and <dfn><code>max</code></dfn> attributes indicate the allowed range of values for
  the element.

  <div class="impl">

  Their syntax is defined by the section that defines the <code>type</code> attribute's current state.

  If the element has a <code>min</code> attribute, and the result of
  applying the <a>algorithm to convert a string to a
  number</a> to the value of the <code>min</code> attribute is a number,
  then that number is the element's <dfn>minimum</dfn>; otherwise, if the
  <code>type</code> attribute's current state defines a <dfn>default minimum</dfn>, then that is the <a>minimum</a>; otherwise, the element has no <a>minimum</a>.

  The <code>min</code> attribute also defines the <a>step base</a>.

  If the element has a <code>max</code> attribute, and the result of
  applying the <a>algorithm to convert a string to a
  number</a> to the value of the <code>max</code> attribute is a number,
  then that number is the element's <dfn>maximum</dfn>; otherwise, if the
  <code>type</code> attribute's current state defines a <dfn>default maximum</dfn>, then that is the <a>maximum</a>; otherwise, the element has no <a>maximum</a>.

  </div>

  If the element does not <a>have a periodic domain</a>, the
  <code>max</code> attribute's value (the <a>maximum</a>) must not be less than the <code>min</code> attribute's value (its <a>minimum</a>).

  <div class="impl">

  <p class="note">
    If an element that does not <a>have a periodic
  domain</a> has a <a>maximum</a> that is less than its <a>minimum</a>, then so long as the element has a <a>value</a>, it will either be <a>suffering from an underflow</a>
  or <a>suffering from an overflow</a>.
  </p>

  An element <dfn>has a reversed range</dfn> if it <a>has a periodic domain</a> and its
  <a>maximum</a> is less than its <a>minimum</a>.

  </div>

  An element <dfn>has range limitations</dfn> if it has a defined
  <a>minimum</a> or a defined <a>maximum</a>.

  <div class="impl">

  How these range limitations apply depends on whether the element has a <code>multiple</code> attribute.

  <dl class="switch">

    <dt>If the element does not have a <code>multiple</code> attribute
    specified or if the <code>multiple</code> attribute <a>does not apply</a></dt>

    <dd>

    <strong>Constraint validation</strong>: When the element has a <a>minimum</a> and does not <a>have a
    reversed range</a>, and the result of applying the <a>algorithm to convert a string to a number</a> to
    the string given by the element's <a>value</a> is a number, and
    the number obtained from that algorithm is less than the <a>minimum</a>, the element is <a>suffering from an
    underflow</a>.

    <strong>Constraint validation</strong>: When the element has a <a>maximum</a> and does not <a>have a
    reversed range</a>, and the result of applying the <a>algorithm to convert a string to a number</a> to
    the string given by the element's <a>value</a> is a number, and
    the number obtained from that algorithm is more than the <a>maximum</a>, the element is <a>suffering from an
    overflow</a>.

    <strong>Constraint validation</strong>: When an element <a>has a reversed range</a>,
    and the result of applying the <a>algorithm to
    convert a string to a number</a> to the string given by the element's <a>value</a> is a number, and the number obtained from that algorithm
    is more than the <a>maximum</a> <em>and</em> less than the <a>minimum</a>, the element is simultaneously <a>suffering from an
    underflow</a> and <a>suffering from an overflow</a>.

    </dd>

    <dt>If the element does have a <code>multiple</code> attribute
    specified and the <code>multiple</code> attribute does <a>apply</a></dt>

    <dd>

    <strong>Constraint validation</strong>: When the element has a <a>minimum</a>, and the result of applying the <a>algorithm to convert a string to a number</a> to
    any of the strings in the element's <a>values</a> is a number
    that is less than the <a>minimum</a>, the element is
    <a>suffering from an underflow</a>.

    <strong>Constraint validation</strong>: When the element has a <a>maximum</a>, and the result of applying the <a>algorithm to convert a string to a number</a> to
    any of the strings in the element's <a>values</a> is a number
    that is more than the <a>maximum</a>, the element is
    <a>suffering from an overflow</a>.

    </dd>

  </dl>

  </div>

  <div class="example">
    The following date control limits input to dates that are before the 1980s:

    <pre highlight="html">
&lt;input name=bday type=date max="1979-12-31"&gt;
    </pre>

  </div>

  <div class="example">
    The following number control limits input to whole numbers greater than zero:

    <pre highlight="html">
&lt;input name=quantity required="" type="number" min="1" value="1"&gt;
    </pre>

  </div>

  <div class="example">
    The following time control limits input to those minutes that occur between 9pm and 6am,
    defaulting to midnight:

    <pre highlight="html">
&lt;input name="sleepStart" type=time min="21:00" max="06:00" step="60" value="00:00"&gt;
    </pre>

  </div>

<h6 id="the-step-attribute">The <code>step</code> attribute</h6>

  The <dfn><code>step</code></dfn> attribute indicates the granularity
  that is expected (and required) of the <a>value</a> or <a>values</a>, by limiting the allowed values. <span class="impl">The
  section that defines the <code>type</code> attribute's current state also
  defines the <dfn>default step</dfn>, the <dfn>step scale factor</dfn>, and in some cases the <dfn>default step base</dfn>, which are used in processing the
  attribute as described below.</span>

  The <code>step</code> attribute, if specified, must either have a
  value that is a <a>valid floating-point number</a> that <a>parses</a> to a number that is greater than zero, or must have a
  value that is an <a>ASCII case-insensitive</a> match for the string "<code>any</code>".

  <div class="impl">

  The attribute provides the <dfn>allowed value step</dfn> for the
  element, as follows:

  <ol>

    <li>If the attribute is absent, then the <a>allowed value
    step</a> is the <a>default step</a> multiplied by the
    <a>step scale factor</a>.</li>

    <li>Otherwise, if the attribute's value is an <a>ASCII case-insensitive</a> match for the
    string "<code>any</code>", then there is no <a>allowed
    value step</a>.</li>

    <li>Otherwise, if the <a>rules for parsing floating-point number values</a>, when they are
    applied to the attribute's value, return an error, zero, or a number less than zero, then the
    <a>allowed value step</a> is the <a>default step</a> multiplied by the <a>step scale factor</a>.</li>

    <li>Otherwise, the <a>allowed value step</a> is the number
    returned by the <a>rules for parsing floating-point number values</a> when they are applied
    to the attribute's value, multiplied by the <a>step scale
    factor</a>.</li>

  </ol>

  The <dfn>step base</dfn> is the value returned by the following
  algorithm:

  <ol>

    <li>If the element has a <code>min</code> content attribute, and the
    result of applying the <a>algorithm to convert a
    string to a number</a> to the value of the <code>min</code> content
    attribute is not an error, then return that result and abort these steps.</li>

    <li>

    If the element does not have a <code>multiple</code> attribute
    specified or if the <code>multiple</code> attribute <a>does not apply</a>, then: if the element has a <code>value</code> content attribute, and the result of applying the <a>algorithm to convert a string to a number</a> to
    the value of the <code>value</code> content attribute is not an error,
    then return that result and abort these steps.

    Otherwise, the element's <code>type</code> attribute is in the <a>Range</a> state and the element has a <code>multiple</code> attribute specified: run these substeps:

    <ol>

      <li>If the element does not have a <code>value</code> content
      attribute, skip these substeps.</li>

      <li><a>Split on commas</a> the value of the <code>value</code> content attribute.</li>

      <li>If the result of the previous step was not exactly two values, or if either gets an
      error when you apply the <a>algorithm to convert
      a string to a number</a>, then skip these substeps.</li>

      <li>Return the lower of the two numbers obtained in the previous step, and abort these
      steps.</li>

    </ol>

    </li>

    <li>If a <a>default step base</a> is defined for
    this element given its <code>type</code> attribute's state, then return
    it and abort these steps.

    </li><li>Return zero.</li>

  </ol>

  How these range limitations apply depends on whether the element has a <code>multiple</code> attribute.

  <dl class="switch">

    <dt>If the element does not have a <code>multiple</code> attribute
    specified or if the <code>multiple</code> attribute <a>does not apply</a></dt>

    <dd>

    <strong>Constraint validation</strong>: When the element has an <a>allowed value step</a>, and the result of applying the <a>algorithm to convert a string to a number</a> to
    the string given by the element's <a>value</a> is a number, and
    that number subtracted from the <a>step base</a> is not an
    integral multiple of the <a>allowed value step</a>, the
    element is <a>suffering from a step mismatch</a>.

    </dd>

    <dt>If the element does have a <code>multiple</code> attribute
    specified and the <code>multiple</code> attribute does <a>apply</a></dt>

    <dd>

    <strong>Constraint validation</strong>: When the element has an <a>allowed value step</a>, and the result of applying the <a>algorithm to convert a string to a number</a> to
    any of the strings in the element's <a>values</a> is a number
    that, when subtracted from the <a>step base</a>, is not an
    integral multiple of the <a>allowed value step</a>, the
    element is <a>suffering from a step mismatch</a>.

    </dd>

  </dl>

  </div>

  <div class="example">
    The following range control only accepts values in the range 0..1, and allows 256 steps in
    that range:

    <pre highlight="html">
&lt;input name=opacity type=range min=0 max=1 step=0.00392156863&gt;
    </pre>

  </div>

  <div class="example">
    The following control allows any time in the day to be selected, with any accuracy (e.g.
    thousandth-of-a-second accuracy or more):

    <pre highlight="html">
&lt;input name=favtime type=time step=any&gt;
    </pre>

    Normally, time controls are limited to an accuracy of one minute.

  </div>

<h6 id="the-list-attribute">The <code>list</code> attribute</h6>

  The <dfn><code>list</code></dfn> attribute is used to identify an
  element that lists predefined options suggested to the user.

  If present, its value must be the <a>ID</a> of a <code>datalist</code>
  element in the same document.

  <div class="impl">

  The <dfn>suggestions source element</dfn> is the first element in
  the document in <a>tree order</a> to have an <a>ID</a> equal to the
  value of the <code>list</code> attribute, if that element is a
  <code>datalist</code> element. If there is no <code>list</code> attribute,
  or if there is no element with that <a>ID</a>, or if the first element
  with that <a>ID</a> is not a <code>datalist</code> element, then there is
  no <a>suggestions source element</a>.

  If there is a <a>suggestions source element</a>, then, when
  the user agent is allowing the user to edit the <code>input</code> element's <a>value</a>, the user agent should offer the suggestions represented by
  the <a>suggestions source element</a> to the user in a manner
  suitable for the type of control used. The user agent may use the suggestion's <a>label</a> to identify the suggestion if appropriate.

  User agents are encouraged to filter the suggestions represented by the <a>suggestions source element</a> when the number of suggestions is
  large, including only the most relevant ones (e.g. based on the user's input so far). No precise
  threshold is defined, but capping the list at four to seven values is reasonable.

  How user selections of suggestions are handled depends on whether the element is a control
  accepting a single value only, or whether it accepts multiple values:

  <dl class="switch">

    <dt>If the element does not have a <code>multiple</code> attribute
    specified or if the <code>multiple</code> attribute <a>does not apply</a></dt>

    <dd>

    When the user selects a suggestion, the <code>input</code> element's <a>value</a> must be set to the selected suggestion's <a>value</a>, as if the user had written that value himself.

    </dd>

    <dt>If the element's <code>type</code> attribute is in the <a>Range</a> state and the element has a <code>multiple</code> attribute specified</dt>

    <dd>

    When the user selects a suggestion, the user agent must identify which value in the element's
    <a>values</a> the user intended to update, and must then update
    the element's <a>values</a> so that the relevant value is
    changed to the value given by the selected suggestion's <a>value</a>, as if the user had himself set it to that value.

    </dd>

    <dt>If the element's <code>type</code> attribute is in the <a>Email</a> state and the element has a <code>multiple</code> attribute specified</dt>

    <dd>

    When the user selects a suggestion, the user agent must either add a new entry to the
    <code>input</code> element's <a>values</a>, whose value
    is the selected suggestion's <a>value</a>, or change an
    existing entry in the <code>input</code> element's <a>values</a> to have the value given by the selected
    suggestion's <a>value</a>, as if the user had himself added
    an entry with that value, or edited an existing entry to be that value. Which behavior is to be
    applied depends on the user interface in a user-agent-defined manner.

    </dd>

  </dl>

  <hr />

  If the <code>list</code> attribute <a>does not
  apply</a>, there is no <a>suggestions source element</a>.

  </div>

  <div class="example">
    This URL field offers some suggestions.

    <pre highlight="html">
&lt;label&gt;Homepage: &lt;input name=hp type=url list=hpurls&gt;&lt;/label&gt;
&lt;datalist id=hpurls&gt;
  &lt;option value="http://www.google.com/" label="Google"&gt;
  &lt;option value="http://www.reddit.com/" label="Reddit"&gt;
&lt;/datalist&gt;
    </pre>

    Other URLs from the user's history might show also; this is up to the user agent.

  </div>

  <div class="example">
    This example demonstrates how to design a form that uses the autocompletion list feature while
    still degrading usefully in legacy user agents.

    If the autocompletion list is merely an aid, and is not important to the content, then simply
    using a <code>datalist</code> element with children <code>option</code> elements is enough. To
    prevent the values from being rendered in legacy user agents, they need to be placed inside the
    <code>value</code> attribute instead of inline.

    <pre highlight="html">
&lt;p&gt;
  &lt;label&gt;
  Enter a breed:
  &lt;input type="text" name="breed" list="breeds"&gt;
  &lt;datalist id="breeds"&gt;
    &lt;option value="Abyssinian"&gt;
    &lt;option value="Alpaca"&gt;
    &lt;!-- ... --&gt;
  &lt;/datalist&gt;
  &lt;/label&gt;
&lt;/p&gt;
    </pre>

    However, if the values need to be shown in legacy UAs, then fallback content can be placed
    inside the <code>datalist</code> element, as follows:

    <pre highlight="html">
&lt;p&gt;
  &lt;label&gt;
  Enter a breed:
  &lt;input type="text" name="breed" list="breeds"&gt;
  &lt;/label&gt;
  &lt;datalist id="breeds"&gt;
  &lt;label&gt;
    or select one from the list:
    &lt;select name="breed"&gt;
    &lt;option value=""&gt; (none selected)
    &lt;option&gt;Abyssinian
    &lt;option&gt;Alpaca
    &lt;!-- ... --&gt;
    &lt;/select&gt;
  &lt;/label&gt;
  &lt;/datalist&gt;
&lt;/p&gt;
    </pre>

    The fallback content will only be shown in UAs that don't support <code>datalist</code>. The
    options, on the other hand, will be detected by all UAs, even though they are not children of the
    <code>datalist</code> element.

    Note that if an <code>option</code> element used in a <code>datalist</code> is <code>selected</code>, it will be selected by default by legacy UAs
    (because it affects the <code>select</code>), but it will not have any effect on the
    <code>input</code> element in UAs that support <code>datalist</code>.

  </div>

<h6 id="the-placeholder-attribute">The <code>placeholder</code> attribute</h6>

  The <dfn><code>placeholder</code></dfn> attribute represents a
  <em>short</em> hint (a word or short phrase) intended to aid the user with data entry when the
  control has no value. A hint could be a sample value or a brief description of the expected
  format. The attribute, if specified, must have a value that contains no U+000A LINE FEED (LF) or
  U+000D CARRIAGE RETURN (CR) characters.

  The <code>placeholder</code> attribute should not be used as a
  replacement for a <code>label</code>. For a longer hint or other advisory text, place the text
  next to the control.

    <p class="warning">Use of the <code>placeholder</code>
    attribute as a replacement for a <code>label</code> can reduce the
    accessibility and usability of the control for a range of users including older
    users and users with cognitive, mobility, fine motor skill or vision impairments.
    While the hint given by the control's <code>label</code> is shown at all times, the short
    hint given in the <code>placeholder</code>
    attribute is only shown before the user enters a value. Furthermore,
    <code>placeholder</code> text may be mistaken for
    a pre-filled value, and as commonly implemented the default color of the placeholder text
    provides insufficient contrast and the lack of a separate visible <code>label</code>
    reduces the size of the hit region available for setting focus on the control.</p>

  <div class="impl">

  User agents should present this hint to the user, after having <a>stripped line breaks</a> from it, when the element's <a>value</a> is the empty string, especially if the control is not <a>focused</a>.

  If a user agent normally doesn't show this hint to the user when the control is
  <a>focused</a>, then the user agent should nonetheless show the hint for the control if it
  was focused as a result of the <code>autofocus</code> attribute, since
  in that case the user will not have had an opportunity to examine the control before focusing
  it.

  </div>

  <div class="example">
    Here is an example of a mail configuration user interface that uses the <code>placeholder</code> attribute:

    <pre highlight="html">
&lt;fieldset&gt;
  &lt;legend&gt;Mail Account&lt;/legend&gt;
  &lt;p&gt;&lt;label&gt;Name: &lt;input type="text" name="fullname" placeholder="John Ratzenberger"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Address: &lt;input type="email" name="address" placeholder="john@example.net"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Password: &lt;input type="password" name="password"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Description: &lt;input type="text" name="desc" placeholder="My Email Account"&gt;&lt;/label&gt;&lt;/p&gt;
&lt;/fieldset&gt;
    </pre>

  </div>

  <div class="example">
    In situations where the control's content has one directionality but the placeholder needs to
    have a different directionality, Unicode's bidirectional-algorithm formatting characters can be
    used in the attribute value:

    <pre highlight="html">
&lt;input name=t1 type=tel placeholder="<strong>&amp;#x202B;</strong>â<bdo dir="rtl">Ø±ÙÙ&nbsp;Ø§ÙÙØ§ØªÙ&nbsp;1</bdo>â<strong>&amp;#x202E;</strong>"&gt;
&lt;input name=t2 type=tel placeholder="<strong>&amp;#x202B;</strong>â<bdo dir="rtl">Ø±ÙÙ&nbsp;Ø§ÙÙØ§ØªÙ&nbsp;2</bdo>â<strong>&amp;#x202E;</strong>"&gt;
    </pre>

    For slightly more clarity, here's the same example using numeric character references instead of inline Arabic:

    <pre highlight="html">
&lt;input name=t1 type=tel placeholder="<strong>&amp;#x202B;</strong>&amp;#1585;&amp;#1602;&amp;#1605;&nbsp;&amp;#1575;&amp;#1604;&amp;#1607;&amp;#1575;&amp;#1578;&amp;#1601;&nbsp;1<strong>&amp;#x202E;</strong>"&gt;
&lt;input name=t2 type=tel placeholder="<strong>&amp;#x202B;</strong>&amp;#1585;&amp;#1602;&amp;#1605;&nbsp;&amp;#1575;&amp;#1604;&amp;#1607;&amp;#1575;&amp;#1578;&amp;#1601;&nbsp;2<strong>&amp;#x202E;</strong>"&gt;
    </pre>

  </div>

<h5 id="common-input-element-apis">Common <code>input</code> element APIs</h5>

  <dl class="domintro">

    <dt><var>input</var> . <code>value</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the current <a>value</a> of the form control.

    Can be set, to change the value.

    Throws an <code>InvalidStateError</code> exception if it is set to any value other than the
    empty string when the control is a file upload control.

    </dd>

    <dt><var>input</var> . <code>checked</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the current <a>checkedness</a> of the form
    control.

    Can be set, to change the <a>checkedness</a>.

    </dd>

    <dt><var>input</var> . <code>files</code> </dt>

    <dd>

    Returns a <code>FileList</code> object listing the <a>selected files</a> of the form control.

    Returns null if the control isn't a file control.

    </dd>

    <dt><var>input</var> . <code>valueAsDate</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns a <code>Date</code> object representing the form control's <a>value</a>, if applicable; otherwise, returns null.

    Can be set, to change the value.

    Throws an <code>InvalidStateError</code> exception if the control isn't date- or
    time-based.

    </dd>

    <dt><var>input</var> . <code>valueAsNumber</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns a number representing the form control's <a>value</a>,
    if applicable; otherwise, returns NaN.

    Can be set, to change the value. Setting this to NaN will set the underlying value to the
    empty string.

    Throws an <code>InvalidStateError</code> exception if the control is neither date- or
    time-based nor numeric.

    </dd>

    <dt><var>input</var> . <code>valueLow</code> [ = <var>value</var> ]</dt>
    <dt><var>input</var> . <code>valueHigh</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns a number representing the low and high components of form control's <a>value</a> respectively, if applicable; otherwise, returns NaN.

    Can be set, to change the value.

    Throws an <code>InvalidStateError</code> exception if the control is not a two-handle range
    control.

    </dd>

    <dt><var>input</var> . <code>stepUp</code>( [ <var>n</var> ] )</dt>
    <dt><var>input</var> . <code>stepDown</code>( [ <var>n</var> ] )</dt>

    <dd>

    Changes the form control's <a>value</a> by the value given in
    the <code>step</code> attribute, multiplied by <var>n</var>.
    The default value for <var>n</var> is 1.

    Throws <code>InvalidStateError</code> exception if the control is neither date- or time-based
    nor numeric, or if the <code>step</code> attribute's value is "<code>any</code>".

    </dd>

    <dt><var>input</var> . <code>list</code></dt>

    <dd>

    Returns the <code>datalist</code> element indicated by the <code>list</code> attribute.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>value</code></dfn> IDL attribute allows scripts to
  manipulate the <a>value</a> of an <code>input</code> element. The
  attribute is in one of the following modes, which define its behavior:

  <dl>

    <dt><dfn>value</dfn>

    </dt><dd>

    On getting, it must return the current <a>value</a> of the
    element. On setting, it must set the element's <a>value</a> to
    the new value, set the element's <a>dirty value
    flag</a> to true, invoke the <a>value sanitization algorithm</a>, if the element's
    <code>type</code> attribute's current state defines one, and then, if
    the element has a text entry cursor position, should move the text entry cursor position to the
    end of the text field, unselecting any selected text and resetting the selection direction to
    <i>none</i>.

    </dd>

    <dt><dfn>default</dfn>

    </dt><dd>

    On getting, if the element has a <code>value</code> attribute, it
    must return that attribute's value; otherwise, it must return the empty string. On setting, it
    must set the element's <code>value</code> attribute to the new
    value.

    </dd>

    <dt><dfn>default/on</dfn>

    </dt><dd>

    On getting, if the element has a <code>value</code> attribute, it
    must return that attribute's value; otherwise, it must return the string "<code>on</code>". On setting, it must set the element's <code>value</code> attribute to the new value.

    </dd>

    <dt><dfn>filename</dfn>

    </dt><dd id="fakepath-orly">

    On getting, it must return the string "<code>C:\fakepath\</code>" followed by the
    name of the first file in the list of <a>selected
    files</a>, if any, or the empty string if the list is empty. On setting, if the new value is
    the empty string, it must empty the list of <a>selected files</a>; otherwise, it must throw an
    <code>InvalidStateError</code> exception.

    <p class="note">
    This "fakepath" requirement is a sad accident of history. See <a>the example in the File Upload state section</a> for more
    information.
  </p>

    <p class="note">
    Since <a>path components</a> are not
    permitted in file names in the list of <a>selected
    files</a>, the "\fakepath\" cannot be mistaken for a path component.
  </p>

    </dd>

  </dl>

  <hr />

  The <dfn><code>checked</code></dfn> IDL attribute allows scripts to
  manipulate the <a>checkedness</a> of an <code>input</code>
  element. On getting, it must return the current <a>checkedness</a> of the element; and on setting, it must set the
  element's <a>checkedness</a> to the new value and set the
  element's <a>dirty checkedness flag</a> to
  true.

  <hr />

  The <dfn><code>files</code></dfn> IDL attribute allows scripts to
  access the element's <a>selected files</a>. On
  getting, if the IDL attribute <a>applies</a>, it must return a
  <code>FileList</code> object that represents the current <a>selected files</a>. The same object must be returned
  until the list of <a>selected files</a> changes. If
  the IDL attribute <a>does not apply</a>, then it must instead return
  null. [[!FILEAPI]]

  <hr />

  The <dfn><code>valueAsDate</code></dfn> IDL attribute represents
  the <a>value</a> of the element, interpreted as a date.

  On getting, if the <code>valueAsDate</code> attribute <a>does not apply</a>, as defined for the <code>input</code> element's <code>type</code> attribute's current state, then return null. Otherwise, run
  the <a>algorithm to convert a string to a
  <code>Date</code> object</a> defined for that state to the element's <a>value</a>; if the algorithm returned a <code>Date</code> object, then
  return it, otherwise, return null.

  On setting, if the <code>valueAsDate</code> attribute <a>does not apply</a>, as defined for the <code>input</code> element's <code>type</code> attribute's current state, then throw an
  <code>InvalidStateError</code> exception; otherwise, if the new value is not null and not a <code>Date</code> object throw a <code>TypeError</code> exception; otherwise if the new value is null or a
  <code>Date</code> object representing the NaN time value, then set the <a>value</a> of the element to the empty string; otherwise, run the
  <a>algorithm to convert a <code>Date</code> object to
  a string</a>, as defined for that state, on the new value, and set the <a>value</a> of the element to the resulting string.

  <hr />

  The <dfn><code>valueAsNumber</code></dfn> IDL attribute
  represents the <a>value</a> of the element, interpreted as a
  number.

  On getting, if the <code>valueAsNumber</code> attribute <a>does not apply</a>, as defined for the <code>input</code> element's <code>type</code> attribute's current state, then return a Not-a-Number (NaN)
  value. Otherwise, if the <code>valueAs<em>Date</em></code>
  attribute <a>applies</a>, run the <a>algorithm to convert a string to a <code>Date</code>
  object</a> defined for that state to the element's <a>value</a>; if the algorithm returned a <code>Date</code> object, then
  return the <i>time value</i> of the object (the number of milliseconds from midnight UTC the
  morning of 1970-01-01 to the time represented by the <code>Date</code> object), otherwise, return
  a Not-a-Number (NaN) value. Otherwise, run the <a>algorithm to convert a string to a number</a>
  defined for that state to the element's <a>value</a>; if the
  algorithm returned a number, then return it, otherwise, return a Not-a-Number (NaN) value.

  On setting, if the new value is infinite, then throw a <code>TypeError</code> exception.
  Otherwise, if the <code>valueAsNumber</code> attribute <a>does not apply</a>, as defined for the <code>input</code> element's <code>type</code> attribute's current state, then throw an
  <code>InvalidStateError</code> exception. Otherwise, if the new value is a Not-a-Number (NaN)
  value, then set the <a>value</a> of the element to the empty
  string. Otherwise, if the <code>valueAs<em>Date</em></code>
  attribute <a>applies</a>, run the <a>algorithm to convert a <code>Date</code> object to a
  string</a> defined for that state, passing it a <code>Date</code> object whose <i>time
  value</i> is the new value, and set the <a>value</a> of the
  element to the resulting string. Otherwise, run the <a>algorithm to convert a number to a string</a>, as
  defined for that state, on the new value, and set the <a>value</a>
  of the element to the resulting string.

  <hr />

  The <dfn><code>valueLow</code></dfn> and <dfn><code>valueHigh</code></dfn> IDL attributes represent the <a>value</a> of the element, interpreted as a comma-separated pair of
  numbers.

  On getting, if the attributes <a>do not apply</a>, as defined for the <code>input</code>
  element's <code>type</code> attribute's current state, then return zero;
  otherwise, run the following steps:

  <ol>

    <li>Let <var>values</var> be the <a>values</a> of
    the element, interpreted according to the <a>algorithm to convert a string to a number</a>, as
    defined by the <code>input</code> element's <code>type</code>
    attribute's current state.</li>

    <li>If the attribute in question is <code>valueLow</code>, return
    the lowest of the values in <var>values</var>; otherwise, return the highest of the
    values in <var>values</var>.</li>

  </ol>

  On setting, if the attributes <a>do not apply</a>, as defined for the <code>input</code>
  element's <code>type</code> attribute's current state, then throw an
  <code>InvalidStateError</code> exception. Otherwise, run the following steps:

  <ol>

    <li>Let <var>values</var> be the <a>values</a> of
    the element, interpreted according to the <a>algorithm to convert a string to a number</a>, as
    defined by the <code>input</code> element's <code>type</code>
    attribute's current state.</li>

    <li>Let <var>new value</var> be the result of running the <a>algorithm to convert a number to a string</a>, as
    defined for that state, on the new value.</li>

    <li>If the attribute in question is <code>valueLow</code>, replace
    the lower value in <var>values</var> with <var>new value</var>; otherwise,
    replace the higher value in <var>values</var> with <var>new
    value</var>.</li>

    <li>Sort <var>values</var> in increasing numeric order.</li>

    <li>Let <a>values</a> be the result of running the <a>algorithm to convert a number to a string</a>, as
    defined by the <code>input</code> element's <code>type</code>
    attribute's current state, to the values in <var>values</var>.</li>

    <li>Set the element's <a>value</a> to the concatenation of the
    strings in in <a>values</a>, separating each value from the next
    by a U+002C COMMA character (,).</li>

  </ol>

  <hr />

  The <dfn><code>stepDown(<var>n</var>)</code></dfn> and <dfn><code>stepUp(<var>n</var>)</code></dfn> methods, when invoked,
  must run the following algorithm:

  <ol>

    <li>If the <code>stepDown()</code> and <code>stepUp()</code> methods <a>do not apply</a>, as defined for the
    <code>input</code> element's <code>type</code> attribute's current state,
    then throw an <code>InvalidStateError</code> exception, and abort these steps.</li>

    <li>If the element has no <a>allowed value step</a>, then
    throw an <code>InvalidStateError</code> exception, and abort these steps.</li>

    <li>If the element has a <a>minimum</a> and a <a>maximum</a> and the <a>minimum</a>
    is greater than the <a>maximum</a>, then abort these steps.

    </li><li>If the element has a <a>minimum</a> and a <a>maximum</a> and there is no value greater than or equal to the
    element's <a>minimum</a> and less than or equal to the element's
    <a>maximum</a> that, when subtracted from the <a>step base</a>, is an integral multiple of the <a>allowed value step</a>, then abort these steps.

    </li><li>If applying the <a>algorithm to convert a
    string to a number</a> to the string given by the element's <a>value</a> does not result in an error, then let <var>value</var> be the result of that algorithm. Otherwise, let <var>value</var>
    be zero.</li>

    <li>Let <var>valueBeforeStepping</var> be <var>value</var>.</li>

    <li>

    If <var>value</var> subtracted from the <a>step
    base</a> is not an integral multiple of the <a>allowed value
    step</a>, then set <var>value</var> to the nearest value that, when subtracted from
    the <a>step base</a>, is an integral multiple of the <a>allowed value step</a>, and that is less than <var>value</var> if
    the method invoked was the <code>stepDown()</code> method, and more
    than <var>value</var> otherwise.

    Otherwise (<var>value</var> subtracted from the <a>step base</a> is an integral multiple of the <a>allowed value step</a>), run the following substeps:

    <ol>

      <li>Let <var>n</var> be the argument.</li>

      <li>Let <var>delta</var> be the <a>allowed value
      step</a> multiplied by <var>n</var>.</li>

      <li>If the method invoked was the <code>stepDown()</code> method,
      negate <var>delta</var>.</li>

      <li>Let <var>value</var> be the result of adding <var>delta</var> to <var>value</var>.</li>

    </ol>

    </li>

    <li>If the element has a <a>minimum</a>, and <var>value</var> is less than that <a>minimum</a>, then set
    <var>value</var> to the smallest value that, when subtracted from the <a>step base</a>, is an integral multiple of the <a>allowed value step</a>, and that is more than or equal to <var>minimum</var>.</li>

    <li>If the element has a <a>maximum</a>, and <var>value</var> is greater than that <a>maximum</a>, then
    set <var>value</var> to the largest value that, when subtracted from the <a>step base</a>, is an integral multiple of the <a>allowed value step</a>, and that is less than or equal to <var>maximum</var>.</li>

    <li>
    If either the method invoked was the <code>stepDown()</code>
    method and <var>value</var> is greater than <var>valueBeforeStepping</var>, or the method
    invoked was the <code>stepUp()</code> method and <var>value</var> is
    less than <var>valueBeforeStepping</var>, then abort these steps.

    <div class="example">
      This ensures that invoking the <code>stepUp()</code> method on the
      <code>input</code> element in the following example does not change the <a>value</a> of that element:

      <pre highlight="html">
&lt;input type=number value=1 max=0&gt;
    </pre>
    </div>
    </li>

    <li>Let <var>value as string</var> be the result of running the <a>algorithm to convert a number to a string</a>, as
    defined for the <code>input</code> element's <code>type</code>
    attribute's current state, on <var>value</var>.</li>

    <li>Set the <a>value</a> of the element to <var>value
    as string</var>.</li>

  </ol>

  <hr />

  The <dfn><code>list</code></dfn> IDL attribute must return the current
  <a>suggestions source element</a>, if any, or null otherwise.

  </div>

  <div class="impl">

<h5 id="common-event-behaviors">Common event behaviors</h5>

  When the <code>input</code> and <code>change</code> events <a>apply</a>
  (which is the case for all <code>input</code> controls other than <a>buttons</a> and those with the <code>type</code> attribute in the <a>Hidden</a> state), the events are fired to indicate that the
  user has interacted with the control. The <dfn><code>input</code></dfn>
  event fires whenever the user has modified the data of the control. The <dfn><code>change</code></dfn> event fires when the value is committed, if
  that makes sense for the control, or else when the control <a>loses focus</a>. In all cases, the <code>input</code> event comes before the corresponding <code>change</code> event (if any).

  When an <code>input</code> element has a defined <a>activation behavior</a>, the rules
  for dispatching these events, if they <a>apply</a>, are given
  in the section above that defines the <code>type</code> attribute's
  state. (This is the case for all <code>input</code> controls with the <code>type</code> attribute in the <a>Checkbox</a> state, the <a>Radio Button</a> state, or the <a>File Upload</a> state.)

  For <code>input</code> elements without a defined <a>activation behavior</a>, but to
  which these events <a>apply</a>, and for which the user
  interface involves both interactive manipulation and an explicit commit action, then when the user
  changes the element's <a>value</a>, the user agent must
  <a>queue a task</a> to <a>fire a simple event</a> that bubbles named <code>input</code> at the <code>input</code> element, and any time the user
  commits the change, the user agent must <a>queue a task</a> to <a>fire a simple
  event</a> that bubbles named <code>change</code> at the
  <code>input</code> element.

  <p class="example">An example of a user interface involving both interactive manipulation and a
  commit action would be a <a>Range</a> controls that use a
  slider, when manipulated using a pointing device. While the user is dragging the control's knob,
  <code>input</code> events would fire whenever the position changed,
  whereas the <code>change</code> event would only fire when the user
  let go of the knob, committing to a specific value.</p>

  For <code>input</code> elements without a defined <a>activation behavior</a>, but to
  which these events <a>apply</a>, and for which the user
  interface involves an explicit commit action but no intermediate manipulation, then any time the
  user commits a change to the element's <a>value</a>, the user
  agent must <a>queue a task</a> to first <a>fire a simple event</a> that bubbles named
  <code>input</code> at the <code>input</code> element, and then
  <a>fire a simple event</a> that bubbles named <code>change</code> at the <code>input</code> element.

  <p class="example">An example of a user interface with a commit action would be a <a>Color</a> control that consists of a single button that brings
  up a color wheel: if the <a>value</a> only changes when the dialog
  is closed, then that would be the explicit commit action. On the other hand, if manipulating the
  control changes the color interactively, then there might be no commit action.</p>

  <p class="example">Another example of a user interface with a commit action would be a <a>Date</a> control that allows both text-based user input and user
  selection from a drop-down calendar: while text input might not have an explicit commit step,
  selecting a date from the drop down calendar and then dismissing the drop down would be a commit
  action.</p>

  For <code>input</code> elements without a defined <a>activation behavior</a>, but to
  which these events <a>apply</a>, any time the user causes the
  element's <a>value</a> to change without an explicit commit
  action, the user agent must <a>queue a task</a> to <a>fire a simple event</a> that
  bubbles named <code>input</code> at the <code>input</code> element. The
  corresponding <code>change</code> event, if any, will be fired when
  the control <a>loses focus</a>.

  <p class="example">Examples of a user changing the element's <a>value</a> would include the user typing into a text field, pasting a
  new value into the field, or undoing an edit in that field. Some user interactions do not cause
  changes to the value, e.g. hitting the "delete" key in an empty text field, or replacing some text
  in the field with text from the clipboard that happens to be exactly the same text.</p>

  <p class="example">A <a>Range</a> control in the form of a
  slider that the user has <a>focused</a> and is interacting with using a keyboard would be
  another example of the user changing the element's <a>value</a>
  without a commit step.</p>

  In the case of <a>tasks</a> that just fire an <code>input</code> event, user agents may wait for a suitable break in the
  user's interaction before <a>queuing</a> the tasks; for example, a
  user agent could wait for the user to have not hit a key for 100ms, so as to only fire the event
  when the user pauses, instead of continuously for each keystroke.

  When the user agent is to change an <code>input</code> element's <a>value</a> on behalf of the user (e.g. as part of a form prefilling
  feature), the user agent must <a>queue a task</a> to first update the <a>value</a> accordingly, then <a>fire a simple event</a> that
  bubbles named <code>input</code> at the <code>input</code> element,
  then <a>fire a simple event</a> that bubbles named <code>change</code> at the <code>input</code> element.

  <p class="note">
    These events are not fired in response to changes made to the values of form
  controls by scripts. (This is to make it easier to update the values of form controls in response
  to the user manipulating the controls, without having to then filter out the script's own changes
  to avoid an infinite loop.)
  </p>

  The <a>task source</a> for these <a>tasks</a> is the
  <a>user interaction task source</a>.

  </div>

<h4 id="the-button-element">The <dfn><code>button</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Interactive content</a>.</dd>
    <dd><a>Listed</a>, <a>labelable</a>, <a>submittable</a>, and <a>reassociateable</a> <a>form-associated element</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>, but there must be no <a>interactive content</a> descendant.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>autofocus</code> - Automatically focus the form control when the page is loaded</dd>
    <dd><code>disabled</code> - Whether the form control is disabled</dd>
    <dd><code>form</code> - Associates the control with a <code>form</code> element</dd>
    <dd><code>formaction</code> - <a>URL</a> to use for <a>form submission</a></dd>
    <dd><code>formenctype</code> - Form data set encoding type to use for <a>form submission</a></dd>
    <dd><code>formmethod</code> - HTTP method to use for <a>form submission</a></dd>
    <dd><code>formnovalidate</code> - Bypass form control validation for <a>form submission</a></dd>
    <dd><code>formtarget</code> - <a>Browsing context</a> for <a>form submission</a></dd>
    <dd><code>menu</code> - Specifies the element's <a>designated pop-up menu</a></dd>
    <dd><code>name</code> - Name of form control to use for <a>form submission</a> and in the <code>form.elements</code> API </dd>
    <dd><code>type</code> - Type of button</dd>
    <dd><code>value</code> - Value to be used for <a>form submission</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>button</code></a>
    (default - <a><em>do not set</em></a>),
    <a><code>link</code></a>,
      <a><code>menuitem</code></a>,
    <a><code>menuitemcheckbox</code></a>,
      <a><code>menuitemradio</code></a>
    or <a><code>radio</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLButtonElement : HTMLElement {
  attribute boolean autofocus;
  attribute boolean disabled;
  readonly attribute HTMLFormElement? form;
  attribute DOMString formAction;
  attribute DOMString formEnctype;
  attribute DOMString formMethod;
  attribute boolean formNoValidate;
  attribute DOMString formTarget;
  attribute DOMString name;
  attribute DOMString type;
  attribute DOMString value;
  attribute HTMLMenuElement? menu;

  readonly attribute boolean willValidate;
  readonly attribute ValidityState validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  boolean reportValidity();
  void setCustomValidity(DOMString error);

  [SameObject] readonly attribute NodeList labels;
};
</pre>
    </dd>
  </dl>

  The <code>button</code> element <a>represents</a> a button labeled by its contents.

  The element is a <a>button</a>.

  The <dfn><code>type</code></dfn> attribute controls the behavior of
  the button when it is activated. It is an <a>enumerated attribute</a>. The following table
  lists the keywords and states for the attribute â the keywords in the left column map to the
  states in the cell in the second column on the same row as the keyword.

  <table>
    <thead>
    <tr>
      <th> Keyword
      </th><th> State
      </th><th> Brief description
    </th></tr></thead><tbody>
    <tr>
      <td><dfn><code>submit</code></dfn>
      </td><td><a>Submit Button</a>
      </td><td>Submits the form.
    </td></tr><tr>
      <td><dfn><code>reset</code></dfn>
      </td><td><a>Reset Button</a>
      </td><td>Resets the form.
    </td></tr><tr>
      <td><dfn><code>button</code></dfn>
      </td><td><a>Button</a>
      </td><td>Does nothing.
    </td></tr><tr>
      <td><dfn><code>menu</code></dfn>
      </td><td><a>Menu</a>
      </td><td>Shows a menu.
  </td></tr></tbody></table>

  The <i>missing value default</i> is the <a>Submit
  Button</a> state.

  If the <code>type</code> attribute is in the <a>Submit Button</a> state, the element is specifically a
  <a>submit button</a>.

  <div class="impl">

  <strong>Constraint validation</strong>: If the <code>type</code>
  attribute is in the <a>Reset Button</a> state, the
  <a>Button</a> state, or the <a>Menu</a> state, the element is <a>barred from constraint
  validation</a>.

  When a <code>button</code> element is not <a>disabled</a>,
  its <a>activation behavior</a> element is to run the steps defined in the following list for
  the current state of the element's <code>type</code> attribute:

  <dl>

    <dt> <dfn>Submit Button</dfn> </dt>

    <dd>If the element has a <a>form owner</a> and the element's <a>node document</a> is
    <a>fully active</a>, the element must <a>submit</a> the
    <a>form owner</a> from the <code>button</code> element.</dd>

    <dt> <dfn>Reset Button</dfn> </dt>

    <dd>If the element has a <a>form owner</a> and the element's <a>node document</a> is
    <a>fully active</a>, the element must <a>reset</a> the
    <a>form owner</a>.</dd>

    <dt> <dfn>Button</dfn>

    </dt><dd>Do nothing.</dd>

    <dt> <dfn>Menu</dfn>

    </dt><dd>

    The element must follow these steps:

    <ol>

      <li>If the <code>button</code> is not <a>being rendered</a>, abort these
      steps.</li>

      <li>If the <code>button</code> element's <a>node document</a> is not <a>fully
      active</a>, abort these steps.</li>

      <li>Let <var>menu</var> be the element's <a>designated pop-up menu</a>, if
      any. If there isn't one, then abort these steps.</li>

      <li><a>Fire</a> a <a>trusted</a> event with the name <code>show</code> at <var>menu</var>, using the <code>RelatedEvent</code>
      interface, with the <code>relatedTarget</code> attribute
      initialized to the <code>button</code> element. The event must be cancelable. </li>

      <li>If the event is not canceled, then <a>build and
      show</a> the menu for <var>menu</var>, with the <code>button</code> element as the
      subject.</li>

    </ol>

    </dd>

  </dl>

  </div>

  The <code>form</code> attribute is used to explicitly associate the
  <code>button</code> element with its <a>form owner</a>. The <code>name</code> attribute represents the element's name. The <code>disabled</code> attribute is used to make the control non-interactive and
  to prevent its value from being submitted. The <code>autofocus</code>
  attribute controls focus. The <code>formaction</code>, <code>formenctype</code>, <code>formmethod</code>, <code>formnovalidate</code>, and <code>formtarget</code> attributes are <a>attributes for form
  submission</a>.

  <p class="note">
    The <code>formnovalidate</code> attribute can be
  used to make submit buttons that do not trigger the constraint validation.
  </p>

  The <code>formaction</code>, <code>formenctype</code>, <code>formmethod</code>, <code>formnovalidate</code>, and <code>formtarget</code> must not be specified if the element's <code>type</code> attribute is not in the <a>Submit Button</a> state.

  The <dfn><code>value</code></dfn> attribute gives the element's value
  for the purposes of form submission. The element's <a>value</a> is
  the value of the element's <code>value</code> attribute, if there is
  one, or the empty string otherwise.

  <p class="note">
    A button (and its value) is only included in the form submission if the button
  itself was used to initiate the form submission.
  </p>

  <hr />

  If the element's <code>type</code> attribute is in the <a>Menu</a> state, the <dfn><code>menu</code></dfn> attribute must be specified to give the element's
  menu. The value must be the <a>ID</a> of a <code>menu</code> element in
  the same <a>home subtree</a> whose <code>type</code> attribute is in
  the <a>popup menu</a> state. The attribute must not be specified if
  the element's <code>type</code> attribute is not in the <a>Menu</a> state.

  <div class="impl">

  A <code>button</code> element's <dfn>designated pop-up menu</dfn> is the first element in the
  <code>button</code>'s <a>home subtree</a> whose ID is that given by the <code>button</code>
  element's <code>menu</code> attribute, if there is such an element and
  its <code>type</code> attribute is in the <a>popup menu</a> state; otherwise, the element has no <a>designated pop-up
  menu</a>.

  <hr />

  The <dfn><code>value</code></dfn> and <dfn><code>menu</code></dfn> IDL attributes must <a>reflect</a> the
  content attributes of the same name.

  The <dfn><code>type</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name, <a>limited to only known
  values</a>.

  The <code>willValidate</code>, <code>validity</code>, and <code>validationMessage</code> IDL attributes, and the <code>checkValidity()</code>, <code>reportValidity()</code>, and <code>setCustomValidity()</code> methods, are part of the
  <a>constraint validation API</a>. The <code>labels</code> IDL
  attribute provides a list of the element's <code>label</code>s. The <code>autofocus</code>, <code>disabled</code>, <code>form</code>, and <code>name</code> IDL attributes are
  part of the element's forms API.

  </div>

  <div class="example">
    The following button is labeled "Show hint" and pops up a dialog box when activated:

    <pre highlight="html">
&lt;button type=button
        onclick="alert('This 15-20 minute piece was composed by George Gershwin.')"&gt;
  Show hint
&lt;/button&gt;
    </pre>

  </div>

<h4 id="the-select-element">The <dfn><code>select</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Interactive content</a>.</dd>
    <dd><a>Listed</a>, <a>labelable</a>, <a>submittable</a>, <a>resettable</a>, and <a>reassociateable</a> <a>form-associated element</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Zero or more <code>option</code>, <code>optgroup</code>, and <a>script-supporting</a> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>autofocus</code> - Automatically focus the form control when the page is loaded</dd>
    <dd><code>disabled</code> - Whether the form control is disabled</dd>
    <dd><code>form</code> - Associates the control with a <code>form</code> element</dd>
    <dd><code>multiple</code> - Whether to allow multiple values</dd>
    <dd><code>name</code> - Name of form control to use for <a>form submission</a> and in the <code>form.elements</code> API </dd>
    <dd><code>required</code> - Whether the control is required for <a>form submission</a></dd>
    <dd><code>size</code> - Size of the control</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>listbox</code></a>
    (default - <a><em>do not set</em></a>) or
    <a><code>menu</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLSelectElement : HTMLElement {
  attribute DOMString autocomplete;
  attribute boolean autofocus;
  attribute boolean disabled;
  readonly attribute HTMLFormElement? form;
  attribute boolean multiple;
  attribute DOMString name;
  attribute boolean required;
  attribute unsigned long size;

  readonly attribute DOMString type;

  [SameObject] readonly attribute HTMLOptionsCollection options;
  attribute unsigned long length;
  getter Element? item(unsigned long index);
  HTMLOptionElement? namedItem(DOMString name);
  void add((HTMLOptionElement or HTMLOptGroupElement) element, optional (HTMLElement or long)? before = null);
  void remove(); // ChildNode overload
  void remove(long index);
  setter void (unsigned long index, HTMLOptionElement? option);

  [SameObject] readonly attribute HTMLCollection selectedOptions;
  attribute long selectedIndex;
  attribute DOMString value;

  readonly attribute boolean willValidate;
  readonly attribute ValidityState validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  boolean reportValidity();
  void setCustomValidity(DOMString error);

  [SameObject] readonly attribute NodeList labels;
};
</pre>
    </dd>
  </dl>

  The <code>select</code> element represents a control for selecting amongst a set of
  options.

  The <dfn><code>multiple</code></dfn> attribute is a <a>boolean
  attribute</a>. If the attribute is present, then the <code>select</code> element
  <a>represents</a> a control for selecting zero or more options from the <a>list of options</a>. If the attribute is absent, then the
  <code>select</code> element <a>represents</a> a control for selecting a single option from
  the <a>list of options</a>.

  The <dfn><code>size</code></dfn> attribute gives the number of options
  to show to the user. The <code>size</code> attribute, if specified, must
  have a value that is a <a>valid non-negative integer</a> greater than zero.

  <div class="impl">

  The <dfn>display size</dfn> of a <code>select</code> element is the
  result of applying the <a>rules for parsing non-negative integers</a> to the value of
  element's <code>size</code> attribute, if it has one and parsing it is
  successful. If applying those rules to the attribute's value is not successful, or if the <code>size</code> attribute is absent, then the element's <a>display size</a> is 4 if the element's <code>multiple</code> content attribute is present, and 1 otherwise.

  </div>

  The <dfn>list of options</dfn> for a <code>select</code>
  element consists of all the <code>option</code> element children of the <code>select</code>
  element, and all the <code>option</code> element children of all the <code>optgroup</code> element
  children of the <code>select</code> element, in <a>tree order</a>.

  The <dfn><code>required</code></dfn> attribute is a <a>boolean
  attribute</a>. When specified, the user will be required to select a value before submitting
  the form.

  If a <code>select</code> element has a <code>required</code>
  attribute specified, does not have a <code>multiple</code> attribute
  specified, and has a <a>display size</a> of 1; and if the <a>value</a> of the first <code>option</code> element in the
  <code>select</code> element's <a>list of options</a> (if
  any) is the empty string, and that <code>option</code> element's parent node is the
  <code>select</code> element (and not an <code>optgroup</code> element), then that
  <code>option</code> is the <code>select</code> element's <dfn>placeholder label option</dfn>.

  If a <code>select</code> element has a <code>required</code>
  attribute specified, does not have a <code>multiple</code> attribute
  specified, and has a <a>display size</a> of 1, then the
  <code>select</code> element must have a <a>placeholder label option</a>.

  <p class="note">
    In practice, the requirement stated in the paragraph above can only apply when a
  <code>select</code> element does not have a <code>sizes</code> attribute
  with a value greater than 1.
  </p>

  <strong>Constraint validation</strong>: If the element has its <code>required</code> attribute specified, and either none of the
  <code>option</code> elements in the <code>select</code> element's <a>list of options</a> have their <a>selectedness</a> set to true, or the only
  <code>option</code> element in the <code>select</code> element's <a>list of options</a> with its <a>selectedness</a> set to true is the <a>placeholder label
  option</a>, then the element is <a>suffering from being missing</a>.

  </div>

  <div class="impl">

  If the <code>multiple</code> attribute is absent, and the element
  is not <a>disabled</a>, then the user agent should allow the
  user to pick an <code>option</code> element in its <a>list
  of options</a> that is itself not <a>disabled</a>. Upon
  this <code>option</code> element being <dfn>picked</dfn> (either
  through a click, or through unfocusing the element after changing its value, or through a <a>menu command</a>, or through any other mechanism), and before the
  relevant user interaction event  is queued (e.g. before the
  <code>click</code> event), the user agent must set the <a>selectedness</a> of the picked <code>option</code> element
  to true, set its <a>dirtiness</a> to true, and then
  <a>send <code>select</code> update notifications</a>.

  If the <code>multiple</code> attribute is absent, whenever an
  <code>option</code> element in the <code>select</code> element's <a>list of options</a> has its <a>selectedness</a> set to true, and whenever an
  <code>option</code> element with its <a>selectedness</a> set to true is added to the
  <code>select</code> element's <a>list of options</a>,
  the user agent must set the <a>selectedness</a> of all
  the other <code>option</code> elements in its <a>list of
  options</a> to false.

  If the <code>multiple</code> attribute is absent and the
  element's <a>display size</a> is greater than 1, then the user
  agent should also allow the user to request that the <code>option</code> whose <a>selectedness</a> is true, if any, be unselected. Upon this
  request being conveyed to the user agent, and before the relevant user interaction event  is queued (e.g. before the <code>click</code> event), the user agent must set the <a>selectedness</a> of that <code>option</code> element to
  false, set its <a>dirtiness</a> to true, and then
  <a>send <code>select</code> update notifications</a>.

  If <a>nodes are inserted</a> or <a>nodes are removed</a> causing the <a>list of options</a> to gain or lose one or more
  <code>option</code> elements, or if an <code>option</code> element in the <a>list of options</a> <dfn>asks for
  a reset</dfn>, then, if the <code>select</code> element's <code>multiple</code> attribute is absent, the user agent must run the
  first applicable set of steps from the following list:

  <dl class="switch">

    <dt>If the <code>select</code>
    element's <a>display size</a> is 1, and no <code>option</code>
    elements in the <code>select</code> element's <a>list of
    options</a> have their <a>selectedness</a> set to
    true</dt>

    <dd>Set the <a>selectedness</a> of the first
    <code>option</code> element in the <a>list of
    options</a> in <a>tree order</a> that is not <a>disabled</a>, if any, to true.</dd>

    <dt>If two or more <code>option</code> elements in the <code>select</code> element's <a>list of options</a> have their <a>selectedness</a> set to true</dt>

    <dd>Set the <a>selectedness</a> of all but the last
    <code>option</code> element with its <a>selectedness</a> set to true in the <a>list of options</a> in <a>tree order</a> to
    false.</dd>

  </dl>

  If the <code>multiple</code> attribute is present, and the
  element is not <a>disabled</a>, then the user agent should
  allow the user to <dfn>toggle</dfn> the <a>selectedness</a> of the <code>option</code> elements in
  its <a>list of options</a> that are themselves not <a>disabled</a>. Upon such an element being <a>toggled</a> (either through a click, or through a <a>menu command</a>, or any other mechanism), and before the relevant user
  interaction event  is queued (e.g. before a related <code>click</code> event), the <a>selectedness</a> of the <code>option</code> element must
  be changed (from true to false or false to true), the <a>dirtiness</a> of the element must be set to true, and the
  user agent must <a>send <code>select</code> update notifications</a>.

  When the user agent is to <dfn>send <code>select</code> update notifications</dfn>, <a>queue
  a task</a> to first <a>fire a simple event</a> that bubbles named <code>input</code> at the <code>select</code> element, and then <a>fire a simple
  event</a> that bubbles named <code>change</code> at the
  <code>select</code> element, using the <a>user interaction task source</a> as the task
  source. If the <a>stack of script settings objects</a> was not empty when the user agent was
  to <a>send <code>select</code> update notifications</a>, then the resulting <code>input</code> and <code>change</code> events must not be
  <a>trusted</a>.

  The <a>reset algorithm</a> for <code>select</code>
  elements is to go through all the <code>option</code> elements in the element's <a>list of options</a>, set their <a>selectedness</a> to true if the <code>option</code>
  element has a <code>selected</code> attribute, and false otherwise,
  set their <a>dirtiness</a> to false, and then have the
  <code>option</code> elements <a>ask for a reset</a>.

  </div>

  The <code>form</code> attribute is used to explicitly associate the <code>select</code> element with its <a>form owner</a>.
  The <code>name</code> attribute represents the element's name.
  The <code>disabled</code> attribute is used to make the control non-interactive and to prevent its value from being submitted.
  The <code>autofocus</code> attribute controls focus.
  The <code>autocomplete</code> attribute controls how the user agent provides autofill behavior.

  A <code>select</code> element that is not <a>disabled</a> is
  <i>mutable</i>.

  <dl class="domintro">

    <dt><var>select</var> . <code>type</code></dt>

    <dd>

    Returns "<code>select-multiple</code>" if the element has a <code>multiple</code> attribute, and "<code>select-one</code>"
    otherwise.

    </dd>

    <dt><var>select</var> . <code>options</code></dt>

    <dd>

    Returns an <code>HTMLOptionsCollection</code> of the <a>list of options</a>.

    </dd>

    <dt><var>select</var> . <code>length</code> [ = <var>value</var> ]</dt>
    <dd>

    Returns the number of elements in the <a>list of
    options</a>.

    When set to a smaller number, truncates the number of <code>option</code> elements in the
    <code>select</code>.

    When set to a greater number, adds new blank <code>option</code> elements to the
    <code>select</code>.

    </dd>

    <dt><var>element</var> = <var>select</var> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>select</var>[<var>index</var>]</dt>
    <dd>

    Returns the item with index <var>index</var> from the <a>list of options</a>. The items are sorted in <a>tree
    order</a>.

    </dd>

    <dt><var>element</var> = <var>select</var> . <code>namedItem</code>(<var>name</var>)</dt>
    <dd>

    Returns the first item with <a>ID</a> or <code>name</code> <var>name</var> from the <a>list of options</a>.

    Returns null if no element with that <a>ID</a> could be found.

    </dd>

    <dt><var>select</var> . <code>add</code>(<var>element</var> [, <var>before</var> ] )</dt>
    <dd>

    Inserts <var>element</var> before the node given by <var>before</var>.

    The <var>before</var> argument can be a number, in which case <var>element</var> is inserted before the item with that number, or an element from the
    <a>list of options</a>, in which case <var>element</var> is inserted before that element.

    If <var>before</var> is omitted, null, or a number out of range, then <var>element</var> will be added at the end of the list.

    This method will throw a <code>HierarchyRequestError</code> exception if <var>element</var> is an ancestor of the element into which it is to be inserted.

    </dd>

    <dt><var>select</var> . <code>selectedOptions</code></dt>

    <dd>

    Returns an <code>HTMLCollection</code> of the <a>list
    of options</a> that are selected.

    </dd>

    <dt><var>select</var> . <code>selectedIndex</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the index of the first selected item, if any, or -1 if there is no selected
    item.

    Can be set, to change the selection.

    </dd>

    <dt><var>select</var> . <code>value</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the <a>value</a> of the first selected item, if
    any, or the empty string if there is no selected item.

    Can be set, to change the selection.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>type</code></dfn> IDL attribute, on getting, must
  return the string "<code>select-one</code>" if the <code>multiple</code> attribute is absent, and the string "<code>select-multiple</code>" if the <code>multiple</code>
  attribute is present.

  The <dfn><code>options</code></dfn> IDL attribute must return an
  <code>HTMLOptionsCollection</code> rooted at the <code>select</code> node, whose filter matches
  the elements in the <a>list of options</a>.

  The <code>options</code> collection is also mirrored on the
  <code>HTMLSelectElement</code> object. The <a>supported property indices</a> at any instant
  are the indices supported by the object returned by the <code>options</code> attribute at that instant.

  The <dfn><code>length</code></dfn> IDL attribute must return the
  number of nodes <a>represented</a> by the <code>options</code> collection. On setting, it must act like the attribute
  of the same name on the <code>options</code> collection.

  The <dfn><code>item(<var>index</var>)</code></dfn> method
  must return the value returned by <a>the method of the same
  name</a> on the <code>options</code> collection, when invoked with
  the same argument.

  The <dfn><code>namedItem(<var>name</var>)</code></dfn>
  method must return the value returned by <a>the
  method of the same name</a> on the <code>options</code> collection,
  when invoked with the same argument.

  When the user agent is to <dfn>set the value of a new
  indexed property</dfn> for a given property index <var>index</var> to a new value <var>value</var>, it must instead <a>set the
  value of a new indexed property</a> with the given property index <var>index</var> to
  the new value <var>value</var> on the <code>options</code>
  collection.

  Similarly, the <dfn><code>add()</code></dfn> method must act like its
  namesake method on that same <code>options</code> collection.

  The <dfn><code>remove()</code></dfn> method must act like its
  namesake method on that same <code>options</code> collection when it
  has arguments, and like its namesake method on the <code>ChildNode</code> interface implemented by
  the <code>HTMLSelectElement</code> ancestor interface <code>Element</code> when it has no
  arguments.

  The <dfn><code>selectedOptions</code></dfn> IDL attribute
  must return an <code>HTMLCollection</code> rooted at the <code>select</code> node, whose filter
  matches the elements in the <a>list of options</a> that
  have their <a>selectedness</a> set to true.

  The <dfn><code>selectedIndex</code></dfn> IDL attribute, on
  getting, must return the <a>index</a> of the first
  <code>option</code> element in the <a>list of
  options</a> in <a>tree order</a> that has its <a>selectedness</a> set to true, if any. If there isn't one,
  then it must return -1.

  On setting, the <code>selectedIndex</code> attribute must set
  the <a>selectedness</a> of all the <code>option</code>
  elements in the <a>list of options</a> to false, and
  then the <code>option</code> element in the <a>list of
  options</a> whose <a>index</a> is the given new value, if
  any, must have its <a>selectedness</a> set to true and
  its <a>dirtiness</a> set to true.

  <p class="note">
    This can result in no element having a <a>selectedness</a> set to true even in the case of the
  <code>select</code> element having no <code>multiple</code>
  attribute and a <a>display size</a> of 1.
  </p>

  The <dfn><code>value</code></dfn> IDL attribute, on getting, must
  return the <a>value</a> of the first <code>option</code>
  element in the <a>list of options</a> in <a>tree
  order</a> that has its <a>selectedness</a> set to
  true, if any. If there isn't one, then it must return the empty string.

  On setting, the <code>value</code> attribute must set the <a>selectedness</a> of all the <code>option</code> elements
  in the <a>list of options</a> to false, and then the
  first <code>option</code> element in the <a>list of
  options</a>, in <a>tree order</a>, whose <a>value</a>
  is equal to the given new value, if any, must have its <a>selectedness</a> set to true and its <a>dirtiness</a> set to true.

  <p class="note">
    This can result in no element having a <a>selectedness</a> set to true even in the case of the
  <code>select</code> element having no <code>multiple</code>
  attribute and a <a>display size</a> of 1.
  </p>

  The <dfn><code>multiple</code></dfn>, <dfn><code>required</code></dfn>, and <dfn><code>size</code></dfn> IDL attributes must <a>reflect</a> the
  respective content attributes of the same name. The <code>size</code> IDL
  attribute has a default value of zero.

  <p class="note">
    For historical reasons, the default value of the <code>size</code> IDL attribute does not return the actual size used, which, in
  the absence of the <code>size</code> content attribute, is either 1 or 4
  depending on the presence of the <code>multiple</code>
  attribute.
  </p>

  The <code>willValidate</code>, <code>validity</code>, and <code>validationMessage</code> IDL attributes, and the <code>checkValidity()</code>, <code>reportValidity()</code>, and <code>setCustomValidity()</code> methods, are part of the
  <a>constraint validation API</a>. The <code>labels</code> IDL
  attribute provides a list of the element's <code>label</code>s. The <code>autofocus</code>, <code>disabled</code>, <code>form</code>, and <code>name</code> IDL attributes are
  part of the element's forms API.

  </div>

  <div class="example">
    The following example shows how a <code>select</code> element can be used to offer the user
    with a set of options from which the user can select a single option. The default option is
    preselected.

    <pre highlight="html">
&lt;p&gt;
  &lt;label for="unittype"&gt;Select unit type:&lt;/label&gt;
  &lt;select id="unittype" name="unittype"&gt;
  &lt;option value="1"&gt; Miner &lt;/option&gt;
  &lt;option value="2"&gt; Puffer &lt;/option&gt;
  &lt;option value="3" selected&gt; Snipey &lt;/option&gt;
  &lt;option value="4"&gt; Max &lt;/option&gt;
  &lt;option value="5"&gt; Firebot &lt;/option&gt;
  &lt;/select&gt;
&lt;/p&gt;
    </pre>

    When there is no default option, a placeholder can be used instead:

    <pre highlight="html">
&lt;select name="unittype" <strong>required</strong>&gt;
  <strong>&lt;option value=""&gt; Select unit type &lt;/option&gt;</strong>
  &lt;option value="1"&gt; Miner &lt;/option&gt;
  &lt;option value="2"&gt; Puffer &lt;/option&gt;
  &lt;option value="3"&gt; Snipey &lt;/option&gt;
  &lt;option value="4"&gt; Max &lt;/option&gt;
  &lt;option value="5"&gt; Firebot &lt;/option&gt;
&lt;/select&gt;
    </pre>

  </div>

  <div class="example">
    Here, the user is offered a set of options from which he can select any number. By default,
    all five options are selected.

    <pre highlight="html">
&lt;p&gt;
  &lt;label for="allowedunits"&gt;Select unit types to enable on this map:&lt;/label&gt;
  &lt;select id="allowedunits" name="allowedunits" multiple&gt;
  &lt;option value="1" selected&gt; Miner &lt;/option&gt;
  &lt;option value="2" selected&gt; Puffer &lt;/option&gt;
  &lt;option value="3" selected&gt; Snipey &lt;/option&gt;
  &lt;option value="4" selected&gt; Max &lt;/option&gt;
  &lt;option value="5" selected&gt; Firebot &lt;/option&gt;
  &lt;/select&gt;
&lt;/p&gt;
    </pre>

  </div>

  <div class="example">
    Sometimes, a user has to select one or more items. This example shows such an interface.

    <pre highlight="html">
&lt;p&gt;Select the songs from that you would like on your Act II Mix Tape:&lt;/p&gt;
&lt;select multiple required name="act2"&gt;
  &lt;option value="s1"&gt;It Sucks to Be Me (Reprize)
  &lt;option value="s2"&gt;There is Life Outside Your Apartment
  &lt;option value="s3"&gt;The More You Ruv Someone
  &lt;option value="s4"&gt;Schadenfreude
  &lt;option value="s5"&gt;I Wish I Could Go Back to College
  &lt;option value="s6"&gt;The Money Song
  &lt;option value="s7"&gt;School for Monsters
  &lt;option value="s8"&gt;The Money Song (Reprize)
  &lt;option value="s9"&gt;There's a Fine, Fine Line (Reprize)
  &lt;option value="s10"&gt;What Do You Do With a B.A. in English? (Reprize)
  &lt;option value="s11"&gt;For Now
&lt;/select&gt;
    </pre>

  </div>

<h4 id="the-datalist-element">The <dfn><code>datalist</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Either: <a>phrasing content</a>.</dd>
    <dd>Or: Zero or more <code>option</code> and <a>script-supporting</a> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>listbox</code></a>
    (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLDataListElement : HTMLElement {
  [SameObject] readonly attribute HTMLCollection options;
};
</pre>
    </dd>
  </dl>

  The <code>datalist</code> element represents a set of <code>option</code> elements that
  represent predefined options for other controls. In the rendering, the <code>datalist</code>
  element <a>represents</a> nothing<span class="impl"> and it, along with its children, should
  be hidden</span>.

  The <code>datalist</code> element can be used in two ways. In the simplest case, the
  <code>datalist</code> element has just <code>option</code> element children.

  <div class="example">
    <pre highlight="html">
&lt;label&gt;
  Sex:
  &lt;input name=sex list=sexes&gt;
  &lt;datalist id=sexes&gt;
  &lt;option value="Female"&gt;
  &lt;option value="Male"&gt;
  &lt;/datalist&gt;
&lt;/label&gt;
    </pre>

  </div>

  In the more elaborate case, the <code>datalist</code> element can be given contents that are to
  be displayed for down-level clients that don't support <code>datalist</code>. In this case, the
  <code>option</code> elements are provided inside a <code>select</code> element inside the
  <code>datalist</code> element.

  <div class="example">
    <pre highlight="html">
&lt;label&gt;
  Sex:
  &lt;input name=sex list=sexes&gt;
&lt;/label&gt;
&lt;datalist id=sexes&gt;
  &lt;label&gt;
  or select from the list:
  &lt;select name=sex&gt;
    &lt;option value=""&gt;
    &lt;option&gt;Female
    &lt;option&gt;Male
  &lt;/select&gt;
  &lt;/label&gt;
&lt;/datalist&gt;
    </pre>

  </div>

  The <code>datalist</code> element is hooked up to an <code>input</code> element using the <code>list</code> attribute on the <code>input</code> element.

  Each <code>option</code> element that is a descendant of the <code>datalist</code> element,
  that is not <a>disabled</a>, and whose <a>value</a> is a string that isn't the empty string, represents a
  suggestion. Each suggestion has a <a>value</a> and a <a>label</a>.

  <dl class="domintro">

    <dt><var>datalist</var> . <code>options</code></dt>

    <dd>
    Returns an <code>HTMLCollection</code> of the <code>option</code> elements of the
    <code>datalist</code> element.
    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>options</code></dfn> IDL attribute must return an
  <code>HTMLCollection</code> rooted at the <code>datalist</code> node, whose filter matches
  <code>option</code> elements.

  <strong>Constraint validation</strong>: If an element has a <code>datalist</code> element
  ancestor, it is <a>barred from constraint validation</a>.

  </div>

<h4 id="the-optgroup-element">The <dfn><code>optgroup</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>select</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Zero or more <code>option</code> and <a>script-supporting</a> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>disabled</code> - Whether the form control is disabled</dd>
    <dd><code>label</code> - User-visible label</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>An <code>optgroup</code> element's <a>end tag</a> may be omitted
    if the <code>optgroup</code> element  is
    immediately followed by another <code>optgroup</code> element, or if  there is no more content in
    the parent element.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLOptGroupElement : HTMLElement {
  attribute boolean disabled;
  attribute DOMString label;
};
</pre>
    </dd>
  </dl>

  The <code>optgroup</code> element <a>represents</a> a group of <code>option</code>
  elements with a common label.

  The element's group of <code>option</code> elements consists of the <code>option</code>
  elements that are children of the <code>optgroup</code> element.

  <div class="impl">

  When showing <code>option</code> elements in <code>select</code> elements, user agents should
  show the <code>option</code> elements of such groups as being related to each other and separate
  from other <code>option</code> elements.

  </div>

  The <dfn><code>disabled</code></dfn> attribute is a
  <a>boolean attribute</a> and can be used to <a>disable</a> a group of <code>option</code> elements
  together.

  The <dfn><code>label</code></dfn> attribute must be specified. Its
  value gives the name of the group, for the purposes of the user interface. <span class="impl">User
  agents should use this attribute's value when labeling the group of <code>option</code> elements
  in a <code>select</code> element.</span>

  <div class="impl">

  The <dfn><code>disabled</code></dfn> and <dfn><code>label</code></dfn> attributes must <a>reflect</a> the
  respective content attributes of the same name.

  </div>

  <p class="note">
    There is no way to select an <code>optgroup</code> element. Only
  <code>option</code> elements can be selected. An <code>optgroup</code> element merely provides a
  label for a group of <code>option</code> elements.
  </p>

  <div class="example">
    The following snippet shows how a set of lessons from three courses could be offered in a
    <code>select</code> drop-down widget:

    <pre highlight="html">
&lt;form action="courseselector.dll" method="get"&gt;
  &lt;p&gt;Which course would you like to watch today?
  &lt;p&gt;&lt;label&gt;Course:
  &lt;select name="c"&gt;
    &lt;optgroup label="8.01 Physics I: Classical Mechanics"&gt;
    &lt;option value="8.01.1"&gt;Lecture 01: Powers of Ten
    &lt;option value="8.01.2"&gt;Lecture 02: 1D Kinematics
    &lt;option value="8.01.3"&gt;Lecture 03: Vectors
    &lt;optgroup label="8.02 Electricity and Magnestism"&gt;
    &lt;option value="8.02.1"&gt;Lecture 01: What holds our world together?
    &lt;option value="8.02.2"&gt;Lecture 02: Electric Field
    &lt;option value="8.02.3"&gt;Lecture 03: Electric Flux
    &lt;optgroup label="8.03 Physics III: Vibrations and Waves"&gt;
    &lt;option value="8.03.1"&gt;Lecture 01: Periodic Phenomenon
    &lt;option value="8.03.2"&gt;Lecture 02: Beats
    &lt;option value="8.03.3"&gt;Lecture 03: Forced Oscillations with Damping
  &lt;/select&gt;
  &lt;/label&gt;
  &lt;p&gt;&lt;input type=submit value="â¶ Play"&gt;
&lt;/form&gt;
    </pre>

  </div>

<h4 id="the-option-element">The <dfn><code>option</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>select</code> element.</dd>
    <dd>As a child of a <code>datalist</code> element.</dd>
    <dd>As a child of an <code>optgroup</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>If the element has a <code>label</code> attribute and a <code>value</code> attribute: <a>Nothing</a>.</dd>
    <dd>If the element has a <code>label</code> attribute but no <code>value</code> attribute: <a>Text</a>.</dd>
    <dd>If the element has no <code>label</code> attribute: <a>Text</a> that is not <a>inter-element whitespace</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>disabled</code> - Whether the form control is disabled</dd>
    <dd><code>label</code> - User-visible label</dd>
    <dd><code>selected</code> - Whether the option is selected by default</dd>
    <dd><code>value</code> - Value to be used for <a>form submission</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>An <code>option</code> element's <a>end tag</a> may be omitted if
    the <code>option</code> element is immediately followed by another <code>option</code> element, or
    if it is immediately followed by an <code>optgroup</code> element, or if there is no more content
    in the parent element.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>option</code></a>
    (default - <a><em>do not set</em></a>),
    <a><code>menuitem</code></a>,
    <a><code>menuitemradio</code></a>
    or <a><code>separator</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">[NamedConstructor=Option(optional DOMString text = "", optional DOMString value, optional boolean defaultSelected = false, optional boolean selected = false)]
interface HTMLOptionElement : HTMLElement {
  attribute boolean disabled;
  readonly attribute HTMLFormElement? form;
  attribute DOMString label;
  attribute boolean defaultSelected;
  attribute boolean selected;
  attribute DOMString value;

  attribute DOMString text;
  readonly attribute long index;
};
</pre>
    </dd>
  </dl>

  The <code>option</code> element <a>represents</a> an option in a <code>select</code>
  element or as part of a list of suggestions in a <code>datalist</code> element.

  In certain circumstances described in the definition of the <code>select</code> element, an
  <code>option</code> element can be a <code>select</code> element's <a>placeholder label
  option</a>. A <a>placeholder label option</a> does not represent an actual option, but
  instead represents a label for the <code>select</code> control.

  The <dfn><code>disabled</code></dfn> attribute is a <a>boolean
  attribute</a>. An <code>option</code> element is <dfn>disabled</dfn> if its <code>disabled</code> attribute is present or if it is a child of an
  <code>optgroup</code> element whose <code>disabled</code> attribute
  is present.

  <div class="impl">

  An <code>option</code> element that is <a>disabled</a> must
  prevent any <code>click</code> events that are <a>queued</a> on the <a>user interaction task source</a> from being dispatched on the
  element.

  </div>

  The <dfn><code>label</code></dfn> attribute provides a label for
  element. The <dfn>label</dfn> of an <code>option</code> element is
  the value of the <code>label</code> content attribute, if there is one and its value is not the empty string,
  or, otherwise, the value of the element's <code>text</code> IDL
  attribute.

  The <code>label</code> content attribute, if specified, must not be
  empty.

  The <dfn><code>value</code></dfn> attribute provides a value for
  element. The <dfn>value</dfn> of an <code>option</code> element is
  the value of the <code>value</code> content attribute, if there is one,
  or, if there is not, the value of the element's <code>text</code> IDL
  attribute.

  The <dfn><code>selected</code></dfn> attribute is a <a>boolean
  attribute</a>. It represents the default <a>selectedness</a> of the element.

  <div class="impl">

  The <dfn>dirtiness</dfn> of an <code>option</code> element is
  a boolean state, initially false. It controls whether adding or removing the <code>selected</code> content attribute has any effect.

  The <dfn>selectedness</dfn> of an <code>option</code>
  element is a boolean state, initially false. Except where otherwise specified, when the element is
  created, its <a>selectedness</a> must be set to true if
  the element has a <code>selected</code> attribute. Whenever an
  <code>option</code> element's <code>selected</code> attribute is
  added, if its <a>dirtiness</a> is false, its <a>selectedness</a> must be set to true. Whenever an
  <code>option</code> element's <code>selected</code> attribute is
  <em>removed</em>, if its <a>dirtiness</a> is false, its
  <a>selectedness</a> must be set to false.

  <p class="note">
    The <code>Option()</code> constructor, when called with three
  or fewer arguments, overrides the initial state of the <a>selectedness</a> state to always be false even if the third
  argument is true (implying that a <code>selected</code> attribute is
  to be set). The fourth argument can be used to explicitly set the initial <a>selectedness</a> state when using the constructor.
  </p>

  </div>

  A <code>select</code> element whose <code>multiple</code>
  attribute is not specified must not have more than one descendant <code>option</code> element with
  its <code>selected</code> attribute set.

  <div class="impl">

  An <code>option</code> element's <dfn>index</dfn> is the number of
  <code>option</code> elements that are in the same <a>list of
  options</a> but that come before it in <a>tree order</a>. If the <code>option</code>
  element is not in a <a>list of options</a>, then the
  <code>option</code> element's <a>index</a> is zero.

  </div>

  <dl class="domintro">

    <dt><var>option</var> . <code>selected</code></dt>

    <dd>

    Returns true if the element is selected, and false otherwise.

    Can be set, to override the current state of the element.

    </dd>

    <dt><var>option</var> . <code>index</code></dt>

    <dd>

    Returns the index of the element in its <code>select</code> element's <code>options</code> list.

    </dd>

    <dt><var>option</var> . <code>form</code></dt>

    <dd>

    Returns the element's <code>form</code> element, if any, or null otherwise.

    </dd>

    <dt><var>option</var> . <code>text</code></dt>

    <dd>

    Same as <code>textContent</code>, except that spaces are collapsed and <code>script</code> elements are skipped.

    </dd>

    <dt><var>option</var> = new <code>Option</code>( [ <var>text</var> [, <var>value</var> [, <var>defaultSelected</var> [, <var>selected</var> ] ] ] ] )</dt>

    <dd>

    Returns a new <code>option</code> element.

    The <var>text</var> argument sets the contents of the element.

    The <var>value</var> argument sets the <code>value</code>
    attribute.

    The <var>defaultSelected</var> argument sets the <code>selected</code> attribute.

    The <var>selected</var> argument sets whether or not the element is selected. If it
    is omitted, even if the <var>defaultSelected</var> argument is true, the element is not
    selected.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>disabled</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name. The <dfn><code>defaultSelected</code></dfn> IDL attribute must
  <a>reflect</a> the <code>selected</code> content attribute.

  The <dfn><code>label</code></dfn> IDL attribute, on getting, if there
  is a <code>label</code> content attribute, must return that attribute's
  value; otherwise, it must return the element's <a>label</a>.
  On setting, the element's <code>label</code> content attribute must be
  set to the new value.

  The <dfn><code>value</code></dfn> IDL attribute, on getting, must
  return the element's <a>value</a>. On setting, the element's
  <code>value</code> content attribute must be set to the new value.

  The <dfn><code>selected</code></dfn> IDL attribute, on getting,
  must return true if the element's <a>selectedness</a>
  is true, and false otherwise. On setting, it must set the element's <a>selectedness</a> to the new value, set its <a>dirtiness</a> to true, and then cause the element to
  <a>ask for a reset</a>.

  The <dfn><code>index</code></dfn> IDL attribute must return the
  element's <a>index</a>.

  The <dfn><code>text</code></dfn> IDL attribute, on getting, must
  return the result of <a>stripping and collapsing
  whitespace</a> from the concatenation of <a>data</a> of all the
  <code>Text</code> node descendants of the <code>option</code> element, in <a>tree order</a>,
  excluding any that are descendants of descendants of the <code>option</code> element that are
  themselves <code>script</code> elements in the <a>HTML namespace</a> or <code>script</code> elements in the <a>SVG namespace</a>.

  On setting, the <code>text</code> attribute must act as if the
  <code>textContent</code> IDL attribute on the element had been set to the new value.

  The <dfn><code>form</code></dfn> IDL attribute's behavior depends on
  whether the <code>option</code> element is in a <code>select</code> element or not. If the
  <code>option</code> has a <code>select</code> element as its parent, or has an
  <code>optgroup</code> element as its parent and that <code>optgroup</code> element has a
  <code>select</code> element as its parent, then the <code>form</code> IDL
  attribute must return the same value as the <code>form</code> IDL attribute
  on that <code>select</code> element. Otherwise, it must return null.

  A constructor is provided for creating <code>HTMLOptionElement</code> objects (in addition to
  the factory methods from DOM such as <code>createElement()</code>): <dfn><code>Option(<var>text</var>, <var>value</var>, <var>defaultSelected</var>, <var>selected</var>)</code></dfn>. When invoked as a
  constructor, it must return a new <code>HTMLOptionElement</code> object (a new <code>option</code>
  element). If the first argument is not the empty string, the new object must have as its only
  child a <code>Text</code> node whose data is the value of that argument. Otherwise, it must have
  no children. If the <var>value</var> argument is present, the new object must have a
  <code>value</code> attribute set with the value of the argument as its
  value. If the <var>defaultSelected</var> argument is true, the new object must have a
  <code>selected</code> attribute set with no value. If the <var>selected</var> argument is true, the new object must have its <a>selectedness</a> set to true; otherwise the <a>selectedness</a> must be set to false, even if the <var>defaultSelected</var> argument is true. The element's <a>node document</a> must be the <a>active
  document</a> of the <a>browsing context</a> of the <code>Window</code> object on which
  the interface object of the invoked constructor is found.

  </div>

<h4 id="the-textarea-element">The <dfn><code>textarea</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Interactive content</a>.</dd>
    <dd><a>Listed</a>, <a>labelable</a>, <a>submittable</a>, <a>resettable</a>, and <a>reassociateable</a> <a>form-associated element</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Text</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>autocomplete</code> - - Hint for form autofill feature</dd>
    <dd><code>autofocus</code> - Automatically focus the form control when the page is loaded</dd>
    <dd><code>cols</code> - Maximum number of characters per line</dd>
    <dd><code>dirname</code> - Name of form field to use for sending the element's <a>directionality</a> in <a>form submission</a></dd>
    <dd><code>disabled</code>  - Whether the form control is disabled</dd>
    <dd><code>form</code> - Associates the control with a <code>form</code> element</dd>
    <dd><code>inputmode</code> - Hint for selecting an input modality</dd>
    <dd><code>maxlength</code> - Maximum length of value</dd>
    <dd><code>minlength</code> - Minimum length of value</dd>
    <dd><code>name</code> - Name of form control to use for <a>form submission</a> and in the <code>form.elements</code> API </dd>
    <dd><code>placeholder</code> - User-visible label to be placed within the form control</dd>
    <dd><code>readonly</code> - Whether to allow the value to be edited by the user</dd>
    <dd><code>required</code> - Whether the control is required for <a>form submission</a></dd>
    <dd><code>rows</code> - Number of lines to show</dd>
    <dd><code>wrap</code> - How the value of the form control is to be wrapped for <a>form submission</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>textbox</code></a>
    (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLTextAreaElement : HTMLElement {
  attribute DOMString autocomplete;
  attribute boolean autofocus;
  attribute unsigned long cols;
  attribute DOMString dirName;
  attribute boolean disabled;
  readonly attribute HTMLFormElement? form;
  attribute DOMString inputMode;
  attribute long maxLength;
  attribute long minLength;
  attribute DOMString name;
  attribute DOMString placeholder;
  attribute boolean readOnly;
  attribute boolean required;
  attribute unsigned long rows;
  attribute DOMString wrap;

  readonly attribute DOMString type;
  attribute DOMString defaultValue;
  [TreatNullAs=EmptyString] attribute DOMString value;
  readonly attribute unsigned long textLength;

  readonly attribute boolean willValidate;
  readonly attribute ValidityState validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  boolean reportValidity();
  void setCustomValidity(DOMString error);

  [SameObject] readonly attribute NodeList labels;

  void select();
  attribute unsigned long selectionStart;
  attribute unsigned long selectionEnd;
  attribute DOMString selectionDirection;
  void setRangeText(DOMString replacement);
  void setRangeText(DOMString replacement, unsigned long start, unsigned long end, optional SelectionMode selectionMode = "preserve");
  void setSelectionRange(unsigned long start, unsigned long end, optional DOMString direction);
};
</pre>
    </dd>
  </dl>

  The <code>textarea</code> element <a>represents</a> a multiline plain text edit
  control<span class="impl"> for the element's <dfn>raw
  value</dfn></span>. The contents of the control represent the control's default value.

  <div class="impl">

  The <a>raw value</a> of a <code>textarea</code>
  control must be initially the empty string.

  <p class="note">
    This element <a>has rendering requirements involving the
  bidirectional algorithm</a>.
  </p>

  </div>

  The <dfn><code>readonly</code></dfn> attribute is a
  <a>boolean attribute</a> used to control whether the text can be edited by the user or
  not.

  <div class="example">
    In this example, a text field is marked read-only because it represents a read-only file:

    <pre highlight="html">
Filename: &lt;code&gt;/etc/bash.bashrc&lt;/code&gt;
&lt;textarea name="buffer" readonly&gt;
# System-wide .bashrc file for interactive bash(1) shells.

# To enable the settings / commands in this file for login shells as well,
# this file has to be sourced in /etc/profile.

# If not running interactively, don't do anything
[ -z "$PS1" ] &amp;amp;&amp;amp; return

...&lt;/textarea&gt;
    </pre>

  </div>

  <div class="impl">

  <strong>Constraint validation</strong>: If the <code>readonly</code> attribute is specified on a <code>textarea</code>
  element, the element is <a>barred from constraint validation</a>.

  A <code>textarea</code> element is <a>mutable</a> if it is
  neither <a>disabled</a> nor has a <code>readonly</code> attribute specified.

  When a <code>textarea</code> is <a>mutable</a>, its <a>raw value</a> should be editable by the user: the user agent
  should allow the user to edit, insert, and remove text, and to insert and remove line breaks in
  the form of U+000A LINE FEED (LF) characters. Any time the user causes the element's <a>raw value</a> to change, the user agent must <a>queue a
  task</a> to <a>fire a simple event</a> that bubbles named <code>input</code> at the <code>textarea</code> element. User agents may wait for a
  suitable break in the user's interaction before queuing the task; for example, a user agent could
  wait for the user to have not hit a key for 100ms, so as to only fire the event when the user
  pauses, instead of continuously for each keystroke.

  A <code>textarea</code> element has a <dfn>dirty value
  flag</dfn>, which must be initially set to false, and must be set to true whenever the user
  interacts with the control in a way that changes the <a>raw
  value</a>.

  When the <code>textarea</code> element's <code>textContent</code> IDL attribute changes value,
  if the element's <a>dirty value flag</a> is false, then the
  element's <a>raw value</a> must be set to the value of
  the element's <code>textContent</code> IDL attribute.

  The <a>reset algorithm</a> for <code>textarea</code>
  elements is to set the element's <a>raw value</a> to the
  value of the element's <code>textContent</code> IDL attribute.

  When a <code>textarea</code> element is popped off the <a>stack of open elements</a> of
  an <a>HTML parser</a> or <a>XML parser</a>, then the user agent must invoke the
  element's <a>reset algorithm</a>.

  If the element is <a>mutable</a>, the user agent should allow
  the user to change the writing direction of the element, setting it either to a left-to-right
  writing direction or a right-to-left writing direction. If the user does so, the user agent must
  then run the following steps:

  <ol>

    <li>Set the element's <code>dir</code> attribute to "<code>ltr</code>" if the user selected a left-to-right writing direction, and
    "<code>rtl</code>" if the user selected a right-to-left writing
    direction.</li>

    <li><a>Queue a task</a> to <a>fire a simple event</a> that bubbles named <code>input</code> at the <code>textarea</code> element.</li>

  </ol>

  </div>

  The <dfn><code>cols</code></dfn> attribute specifies the expected
  maximum number of characters per line. If the <code>cols</code>
  attribute is specified, its value must be a <a>valid non-negative integer</a> greater than
  zero. <span class="impl">If applying the <a>rules for parsing non-negative integers</a> to
  the attribute's value results in a number greater than zero, then the element's <dfn>character width</dfn> is that value; otherwise, it is
  20.</span>

  <div class="impl">

  The user agent may use the <code>textarea</code> element's <a>character width</a> as a hint to the user as to how many
  characters the server prefers per line (e.g. for visual user agents by making the width of the
  control be that many characters). In visual renderings, the user agent should wrap the user's
  input in the rendering so that each line is no wider than this number of characters.

  </div>

  The <dfn><code>rows</code></dfn> attribute specifies the number of
  lines to show. If the <code>rows</code> attribute is specified, its
  value must be a <a>valid non-negative integer</a> greater than zero. <span class="impl">If
  applying the <a>rules for parsing non-negative integers</a> to the attribute's value results
  in a number greater than zero, then the element's <dfn>character
  height</dfn> is that value; otherwise, it is 2.</span>

  <div class="impl">

  Visual user agents should set the height of the control to the number of lines given by <a>character height</a>.

  </div>

  The <dfn><code>wrap</code></dfn> attribute is an <a>enumerated
  attribute</a> with two keywords and states: the <dfn><code>soft</code></dfn> keyword which maps to the <a>Soft</a> state, and the <dfn><code>hard</code></dfn> keyword which maps to the <a>Hard</a> state. The <i>missing value default</i> is the
  <a>Soft</a> state.

  The <dfn>Soft</dfn> state indicates that the text in the
  <code>textarea</code> is not to be wrapped when it is submitted (though it can still be wrapped in
  the rendering).

  The <dfn>Hard</dfn> state indicates that the text in the
  <code>textarea</code> is to have newlines added by the user agent so that the text is wrapped when
  it is submitted.

  If the element's <code>wrap</code> attribute is in the <a>Hard</a> state, the <code>cols</code> attribute must be specified.

  <div class="impl">

  For historical reasons, the element's value is normalized in three different ways for three
  different purposes. The <a>raw value</a> is the value as
  it was originally set. It is not normalized. The <a>API
  value</a> is the value used in the <code>value</code> IDL
  attribute. It is normalized so that line breaks use U+000A LINE FEED (LF) characters. Finally,
  there is the <a>value</a>, as used in form submission and other
  processing models in this specification. It is normalized so that line breaks use U+000D CARRIAGE
  RETURN U+000A LINE FEED (CRLF) character pairs, and in addition, if necessary given the element's
  <code>wrap</code> attribute, additional line breaks are inserted to
  wrap the text at the given width.

  The element's <dfn>API value</dfn> is defined to be the
  element's <a>raw value</a> with the following
  transformation applied:

  <ol>

    <li>Replace every U+000D CARRIAGE RETURN U+000A LINE FEED (CRLF) character pair from the <a>raw value</a> with a single U+000A LINE FEED (LF)
    character.</li>

    <li>Replace every remaining U+000D CARRIAGE RETURN character from the <a>raw value</a> with a single U+000A LINE FEED (LF)
    character.</li>

  </ol>

  The element's <a>value</a> is defined to be the element's <a>raw value</a> with the <a>textarea wrapping
  transformation</a> applied. The <dfn>textarea wrapping transformation</dfn> is the following
  algorithm, as applied to a string:

  <ol>

    <li>Replace every occurrence of a U+000D CARRIAGE RETURN (CR) character not followed by a
    U+000A LINE FEED (LF) character, and every occurrence of a U+000A LINE FEED (LF) character not
    preceded by a U+000D CARRIAGE RETURN (CR) character, by a two-character string consisting of a
    U+000D CARRIAGE RETURN U+000A LINE FEED (CRLF) character pair.</li>

    <li>If the element's <code>wrap</code> attribute is in the <a>Hard</a> state, insert U+000D CARRIAGE RETURN U+000A
    LINE FEED (CRLF) character pairs into the string using a UA-defined algorithm so that each line
    has no more than <a>character width</a> characters. For
    the purposes of this requirement, lines are delimited by the start of the string, the end of the
    string, and U+000D CARRIAGE RETURN U+000A LINE FEED (CRLF) character pairs.</li>

  </ol>

  </div>

  The <dfn><code>maxlength</code></dfn> attribute is a <a>form control <code>maxlength</code> attribute</a> controlled
  by the <code>textarea</code> element's <a>dirty value
  flag</a>.

  If the <code>textarea</code> element has a <a>maximum allowed value length</a>, then the
  element's children must be such that the <a>code-unit length</a> of the value of the
  element's <code>textContent</code> IDL attribute with the <a>textarea wrapping
  transformation</a> applied is equal to or less than the element's <a>maximum allowed value
  length</a>.

  The <dfn><code>minlength</code></dfn> attribute is a <a>form control <code>minlength</code> attribute</a>
  controlled by the <code>textarea</code> element's <a>dirty
  value flag</a>.

  The <dfn><code>required</code></dfn> attribute is a
  <a>boolean attribute</a>. When specified, the user will be required to enter a value before
  submitting the form.

  <div class="impl">

  <strong>Constraint validation</strong>: If the element has its <code>required</code> attribute specified, and the element is <a>mutable</a>, and the element's <a>value</a> is the empty string, then the element is <a>suffering
  from being missing</a>.

  </div>

  The <dfn><code>placeholder</code></dfn> attribute represents
  a <em>short</em> hint (a word or short phrase) intended to aid the user with data entry when the
  control has no value. A hint could be a sample value or a brief description of the expected
  format.

  The <code>placeholder</code> attribute
  should not be used as a replacement for a <code>label</code>. For a
  longer hint or other advisory text, place the text next to the control.

    <p class="note">
    Use of the <code>placeholder</code>
    attribute as a replacement for a <code>label</code> can reduce the
    accessibility and usability of the control for a range of users including older
    users and users with cognitive, mobility, fine motor skill or vision impairments.
    While the hint given by the control's <code>label</code> is shown at all times, the short
    hint given in the <code>placeholder</code>
    attribute is only shown before the user enters a value. Furthermore,
    <code>placeholder</code> text may be mistaken for
    a pre-filled value, and as commonly implemented the default color of the placeholder text
    provides insufficient contrast and the lack of a separate visible <code>label</code>
    reduces the size of the hit region available for setting focus on the control.
  </p>

  <div class="impl">

  User agents should present this hint to the user when the element's <a>value</a> is the empty string and the control is not
  <a>focused</a> (e.g. by displaying it inside a blank unfocused control). All U+000D CARRIAGE
  RETURN U+000A LINE FEED character pairs (CRLF) in the hint, as well as all other U+000D CARRIAGE
  RETURN (CR) and U+000A LINE FEED (LF) characters in the hint, must be treated as line breaks when
  rendering the hint.

  </div>

  The <code>name</code> attribute represents the element's name.
  The <code>dirname</code> attribute controls how the element's <a>directionality</a> is submitted.
  The <code>disabled</code> attribute is used to make the control
  non-interactive and to prevent its value from being submitted.
  The <code>form</code> attribute is used to explicitly associate the
  <code>textarea</code> element with its <a>form owner</a>.
  The <code>autofocus</code> attribute controls focus.
  The <code>inputmode</code> attribute controls the user interface's input
  modality for the control.
  The <code>autocomplete</code> attribute controls how the user agent
  provides autofill behavior.

  <dl class="domintro">

    <dt><var>textarea</var> . <code>type</code></dt>

    <dd>

    Returns the string "<code>textarea</code>".

    </dd>

    <dt><var>textarea</var> . <code>value</code></dt>

    <dd>

    Returns the current value of the element.

    Can be set, to change the value.

    </dd>

  </dl>

  <div class="impl">
    The <dfn><code>cols</code></dfn>, <dfn><code>placeholder</code></dfn>,
    <dfn><code>required</code></dfn>, <dfn><code>rows</code></dfn>, and <dfn><code>wrap</code></dfn>
    attributes must <a>reflect</a> the respective content attributes of the same name. The
    <code>cols</code> and <code>rows</code> attributes are <a>limited to only non-negative numbers
    greater than zero</a>. The <code>cols</code> attribute's default value is 20. The
    <code>rows</code> attribute's default value is 2. The <dfn><code>dirName</code></dfn> IDL
    attribute must <a>reflect</a> the <code>dirname</code> content attribute. The
    <dfn><code>inputMode</code></dfn> IDL attribute must <a>reflect</a> the <code>inputmode</code>
    content attribute, <a>limited to only known values</a>. The <dfn><code>maxLength</code></dfn>
    IDL attribute must <a>reflect</a> the <code>maxlength</code> content attribute,
    <a>limited to only non-negative numbers</a>. The <dfn><code>minLength</code></dfn> IDL attribute
    must <a>reflect</a> the <code>minlength</code> content attribute,
    <a>limited to only non-negative numbers</a>. The <dfn><code>readOnly</code></dfn> IDL attribute
    must <a>reflect</a> the <code>readonly</code> content attribute.

    The <dfn><code>type</code></dfn> IDL attribute must return the value "<code>textarea</code>".

    The <dfn><code>defaultValue</code></dfn> IDL attribute must act like the element's
    <code>textContent</code> IDL attribute.

    The <dfn><code>value</code></dfn> attribute must, on getting, return the element's
    <a>API value</a>; on setting, it must set the element's <a>raw value</a> to the new value, set
    the element's <a>dirty value flag</a> to true, and should then move the text entry cursor
    position to the end of the text field, unselecting any selected text and resetting the selection
    direction to <i>none</i>.

    The <dfn><code>textLength</code></dfn> IDL attribute must return the <a>code-unit length</a> of
    the element's <a>API value</a>.

    The <code>willValidate</code>, <code>validity</code>, and <code>validationMessage</code> IDL
    attributes, and the <code>checkValidity()</code>, <code>reportValidity()</code>, and
    <code>setCustomValidity()</code> methods, are part of the <a>constraint validation API</a>. The
    <code>labels</code> IDL attribute provides a list of the element's <code>label</code>s. The
    <code>select()</code>, <code>selectionStart</code>, <code>selectionEnd</code>,
    <code>selectionDirection</code>, <code>setRangeText()</code>, and
    <code>setSelectionRange()</code> methods and IDL attributes expose the element's text selection.
    The <code>autofocus</code>, <code>disabled</code>, <code>form</code>, and <code>name</code> IDL
    attributes are part of the element's forms API.
  </div>

  <div class="example">
    Here is an example of a <code>textarea</code> being used for unrestricted free-form text input
    in a form:

    <pre highlight="html">
&lt;p&gt;If you have any comments, please let us know: &lt;textarea cols=80 name=comments&gt;&lt;/textarea&gt;&lt;/p&gt;
    </pre>

    To specify a maximum length for the comments, one can use the <code>maxlength</code> attribute:

    <pre highlight="html">
&lt;p&gt;If you have any short comments, please let us know: &lt;textarea cols=80 name=comments maxlength=200&gt;&lt;/textarea&gt;&lt;/p&gt;
    </pre>

    To give a default value, text can be included inside the element:

    <pre highlight="html">
&lt;p&gt;If you have any comments, please let us know: &lt;textarea cols=80 name=comments&gt;You rock!&lt;/textarea&gt;&lt;/p&gt;
    </pre>

    You can also give a minimum length. Here, a letter needs to be filled out by the user; a
    template (which is shorter than the minimum length) is provided, but is insufficient to submit
    the form:

    <pre highlight="html">
&lt;textarea required minlength="500"&gt;Dear Madam Speaker,

Regarding your letter dated ...

...

Yours Sincerely,

...&lt;/textarea&gt;
    </pre>

    A placeholder can be given as well, to suggest the basic form to the user, without providing
    an explicit template:

    <pre highlight="html">
&lt;textarea placeholder="Dear Francine,

They closed the parks this week, so we won't be able to
meet your there. Should we just have dinner?

Love,
Daddy"&gt;&lt;/textarea&gt;
    </pre>

    To have the browser submit <a>the directionality</a> of the element along with the
    value, the <code>dirname</code> attribute can be specified:

    <pre highlight="html">
&lt;p&gt;If you have any comments, please let us know (you may use either English or Hebrew for your comments):
&lt;textarea cols=80 name=comments dirname=comments.dir&gt;&lt;/textarea&gt;&lt;/p&gt;
    </pre>

  </div>

<h4 id="the-keygen-element">The <dfn><code>keygen</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Interactive content</a>.</dd>
    <dd><a>Listed</a>, <a>labelable</a>, <a>submittable</a>, <a>resettable</a>, and <a>reassociateable</a> <a>form-associated element</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>autofocus</code> - Automatically focus the form control when the page is loaded</dd>
    <dd><code>challenge</code> - String to package with the generated and signed public key</dd>
    <dd><code>disabled</code> - Whether the form control is disabled</dd>
    <dd><code>form</code> - Associates the control with a <code>form</code> element</dd>
    <dd><code>keytype</code> - The type of cryptographic key to generate</dd>
    <dd><code>name</code> - Name of form control to use for <a>form submission</a> and in the <code>form.elements</code> API </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a>.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLKeygenElement : HTMLElement {
  attribute boolean autofocus;
  attribute DOMString challenge;
  attribute boolean disabled;
  readonly attribute HTMLFormElement? form;
  attribute DOMString keytype;
  attribute DOMString name;

  readonly attribute DOMString type;

  readonly attribute boolean willValidate;
  readonly attribute ValidityState validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  boolean reportValidity();
  void setCustomValidity(DOMString error);

  [SameObject] readonly attribute NodeList labels;
};
</pre>
    </dd>
  </dl>

  <p class="critical">This feature is in the process of being removed from the Web platform. (This
  is a long process that takes many years.) Using the <code>keygen</code> element at this time is
  highly discouraged.</p>

  The <code>keygen</code> element <a>represents</a> a key pair generator control. When the
  control's form is submitted, the private key is stored in the local keystore, and the public key
  is packaged and sent to the server.

  The <dfn><code>challenge</code></dfn> attribute may be specified.
  Its value will be packaged with the submitted key.

  The <dfn><code>keytype</code></dfn> attribute is an
  <a>enumerated attribute</a>. The following table lists the keywords and states for the
  attribute â the keywords in the left column map to the states listed in the cell in the
  second column on the same row as the keyword. User agents are not required to support these
  values, and must only recognize values whose corresponding algorithms they support.

  <table>
    <thead> <tr> <th> Keyword </th><th> State
    </th></tr></thead><tbody>
    <tr>
      <td> <code>rsa</code>
      </td><td> <i>RSA</i>

  </td></tr></tbody></table>

  The <i>invalid value default</i> state is the <i>unknown</i> state. The <i>missing value default</i> state is the <i>RSA</i> state, if it is supported, or the <i>unknown</i> state otherwise.

  <p class="note">
    This specification does not specify what key types user agents are to support
  â it is possible for a user agent to not support any key types at all.
  </p>

  <div class="impl">

  The user agent may expose a user interface for each <code>keygen</code> element to allow the
  user to configure settings of the element's key pair generator, e.g. the key length.

  The <a>reset algorithm</a> for <code>keygen</code>
  elements is to set these various configuration settings back to their defaults.

  The element's <a>value</a> is the string returned from the
  following algorithm:

  <ol>

    <li>

    Use the appropriate step from the following list:

    <dl class="switch">

      <dt>If the <code>keytype</code> attribute is in the <i>RSA</i> state</dt>

      <dd>

      Generate an RSA key pair using the settings given by the user, if appropriate, using the
      <code>md5WithRSAEncryption</code> RSA signature algorithm (the signature algorithm
      with MD5 and the RSA encryption algorithm) referenced in section 2.2.1 ("RSA Signature
      Algorithm") of RFC 3279, and defined in RFC 3447. [[!RFC3279]] [[!RFC3447]]

      </dd>

      <dt>Otherwise, the <code>keytype</code> attribute is in the <i>unknown</i> state</dt>

      <dd>

      The given key type is not supported. Return the empty string and abort this algorithm.

      </dd>

    </dl>

    Let <var>private key</var> be the generated private key.

    Let <var>public key</var> be the generated public key.

    Let <var>signature algorithm</var> be the selected signature algorithm.

    </li>

    <li>

    If the element has a <code>challenge</code> attribute, then let
    <var>challenge</var> be that attribute's value. Otherwise, let <var>challenge</var> be the empty string.

    </li>

    <li>

    Let <var>algorithm</var> be an ASN.1 <code>AlgorithmIdentifier</code>
    structure as defined by RFC 5280, with the <code>algorithm</code> field giving the
    ASN.1 OID used to identify <var>signature algorithm</var>, using the OIDs defined in
    section 2.2 ("Signature Algorithms") of RFC 3279, and the <code>parameters</code> field
    set up as required by RFC 3279 for <code>AlgorithmIdentifier</code> structures for that
    algorithm. [[!X690]] [[!RFC5280]] [[!RFC3279]]

    </li>

    <li>

    Let <var>spki</var> be an ASN.1 <code>SubjectPublicKeyInfo</code> structure
    as defined by RFC 5280, with the <code>algorithm</code> field set to the <var>algorithm</var> structure from the previous step, and the <code>subjectPublicKey</code> field set to the BIT STRING value resulting from ASN.1 DER
    encoding the <var>public key</var>. [[!X690]] [[!RFC5280]]

    </li>

    <li>

    Let <var>publicKeyAndChallenge</var> be an ASN.1 <code>PublicKeyAndChallenge</code>
    structure as defined below, with the <code>spki</code> field set to the <var>spki</var> structure from the previous step, and the <code>challenge</code>
    field set to the string <var>challenge</var> obtained earlier. [[!X690]]

    </li>

    <li>

    Let <var>signature</var> be the BIT STRING value resulting from ASN.1 DER encoding
    the signature generated by applying the <var>signature algorithm</var> to the byte
    string obtained by ASN.1 DER encoding the <var>publicKeyAndChallenge</var> structure,
    using <var>private key</var> as the signing key. [[!X690]]

    </li>

    <li>

    Let <var>signedPublicKeyAndChallenge</var> be an ASN.1
    <code>SignedPublicKeyAndChallenge</code> structure as defined below, with the <code>publicKeyAndChallenge</code> field set to the <var>publicKeyAndChallenge</var>
    structure, the <code>signatureAlgorithm</code> field set to the <var>algorithm</var> structure, and the <code>signature</code> field set to the BIT
    STRING <var>signature</var> from the previous step. [[!X690]]

    </li>

    <li>

    Return the result of base64 encoding the result of ASN.1 DER encoding the <var>signedPublicKeyAndChallenge</var> structure. [[!RFC4648]] [[!X690]]

    </li>

  </ol>

  The data objects used by the above algorithm are defined as follows. These definitions use the
  same "ASN.1-like" syntax defined by RFC 5280. [[!RFC5280]]

  <pre class="asn"><dfn>PublicKeyAndChallenge</dfn> ::= SEQUENCE {
    spki <a>SubjectPublicKeyInfo</a>,
    challenge IA5STRING
}

<dfn>SignedPublicKeyAndChallenge</dfn> ::= SEQUENCE {
    publicKeyAndChallenge <a>PublicKeyAndChallenge</a>,
    signatureAlgorithm <a>AlgorithmIdentifier</a>,
    signature BIT STRING
}</pre>

  <hr />

  <strong>Constraint validation</strong>: The <code>keygen</code> element is <a>barred from
  constraint validation</a>.

  </div>

  The <code>form</code> attribute is used to explicitly associate the
  <code>keygen</code> element with its <a>form owner</a>. The <code>name</code> attribute represents the element's name. The <code>disabled</code> attribute is used to make the control non-interactive and
  to prevent its value from being submitted. The <code>autofocus</code>
  attribute controls focus.

  <dl class="domintro">

    <dt><var>keygen</var> . <code>type</code></dt>

    <dd>

    Returns the string "<code>keygen</code>".

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>challenge</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.

  The <dfn><code>keytype</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name, <a>limited to only known
  values</a>.

  The <dfn><code>type</code></dfn> IDL attribute must return the value
  "<code>keygen</code>".

  The <code>willValidate</code>, <code>validity</code>, and <code>validationMessage</code> IDL attributes, and the <code>checkValidity()</code>, <code>reportValidity()</code>, and <code>setCustomValidity()</code> methods, are part of the
  <a>constraint validation API</a>. The <code>labels</code> IDL
  attribute provides a list of the element's <code>label</code>s. The <code>autofocus</code>, <code>disabled</code>, <code>form</code>, and <code>name</code> IDL attributes are
  part of the element's forms API.

  </div>

  <p class="note">
    This specification does not specify how the private key generated is to be used.
  It is expected that after receiving the <code>SignedPublicKeyAndChallenge</code> (SPKAC)
  structure, the server will generate a client certificate and offer it back to the user for
  download; this certificate, once downloaded and stored in the key store along with the private
  key, can then be used to authenticate to services that use TLS and certificate authentication. For
  more information, see e.g. <a>this MDN article</a>.
  </p>

  <div class="example">
    To generate a key pair, add the private key to the user's key store, and submit the public key
    to the server, markup such as the following can be used:

    <pre highlight="html">
&lt;form action="processkey.cgi" method="post" enctype="multipart/form-data"&gt;
  &lt;p&gt;&lt;keygen name="key"&gt;&lt;/p&gt;
  &lt;p&gt;&lt;input type=submit value="Submit key..."&gt;&lt;/p&gt;
&lt;/form&gt;
    </pre>

    The server will then receive a form submission with a packaged RSA public key as the value of
    "<code>key</code>". This can then be used for various purposes, such as generating a
    client certificate, as mentioned above.

  </div>

<h4 id="the-output-element">The <dfn><code>output</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Listed</a>, <a>labelable</a>, <a>resettable</a>, and <a>reassociateable</a> <a>form-associated element</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>for</code> - Specifies controls from which the output was calculated</dd>
    <dd><code>form</code> - Associates the control with a <code>form</code> element</dd>
    <dd><code>name</code> - Name of form control to use for <a>form submission</a> and in the <code>form.elements</code> API   </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>status</code></a>
    (default - <a><em>do not set</em></a>), <a>any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLOutputElement : HTMLElement {
  [PutForwards=value] readonly attribute DOMSettableTokenList htmlFor;
  readonly attribute HTMLFormElement? form;
  attribute DOMString name;

  readonly attribute DOMString type;
  attribute DOMString defaultValue;
  attribute DOMString value;

  readonly attribute boolean willValidate;
  readonly attribute ValidityState validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  boolean reportValidity();
  void setCustomValidity(DOMString error);

  [SameObject] readonly attribute NodeList labels;
};
</pre>
    </dd>
  </dl>

  The <code>output</code> element <a>represents</a> the result of a calculation performed
  by the application, or the result of a user action.

  <p class="note">
    This element can be contrasted with the <code>samp</code> element, which is the
  appropriate element for quoting the output of other programs run previously.
  </p>

  The <dfn><code>for</code></dfn> content attribute allows an explicit
  relationship to be made between the result of a calculation and the elements that represent the
  values that went into the calculation or that otherwise influenced the calculation. The <code>for</code> attribute, if specified, must contain a string consisting of
  an <a>unordered set of unique space-separated tokens</a> that are
  <a>case-sensitive</a>, each of which must have the value of an <a>ID</a> of an element in the same <code>Document</code>.

  The <code>form</code> attribute is used to explicitly associate the
  <code>output</code> element with its <a>form owner</a>. The <code>name</code> attribute represents the element's name. The <code>output</code>
  element is associated with a form so that it can be easily referenced from the event handlers of
  form controls; the element's value itself is not submitted when the form is submitted.

  <div class="impl">

  The element has a <dfn>value mode flag</dfn> which is either <i>value</i> or <i>default</i>. Initially, the <a>value mode flag</a> must be set to <i>default</i>.

  The element also has a <dfn>default value</dfn>.
  Initially, the <a>default value</a> must be the empty
  string.

  When the <a>value mode flag</a> is in mode <dfn><i>default</i></dfn>, the contents of the element represent both
  the value of the element and its <a>default value</a>.
  When the <a>value mode flag</a> is in mode <dfn><i>value</i></dfn>, the contents of the element represent the
  value of the element only, and the <a>default value</a>
  is only accessible using the <code>defaultValue</code> IDL
  attribute.

  Whenever the element's descendants are changed in any way, if the <a>value mode flag</a> is in mode <i>default</i>, the element's <a>default value</a> must be set to the value of the
  element's <code>textContent</code> IDL attribute.

  The <a>reset algorithm</a> for <code>output</code>
  elements is to set the element's <a>value mode flag</a> to <i>default</i> and then to set the element's
  <code>textContent</code> IDL attribute to the value of the element's <a>default value</a> (thus replacing the element's child
  nodes).

  </div>

  <dl class="domintro">

    <dt><var>output</var> . <code>value</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the element's current value.

    Can be set, to change the value.

    </dd>

    <dt><var>output</var> . <code>defaultValue</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the element's current default value.

    Can be set, to change the default value.

    </dd>

    <dt><var>output</var> . <code>type</code></dt>

    <dd>

    Returns the string "<code>output</code>".

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>value</code></dfn> IDL attribute must act like the
  element's <code>textContent</code> IDL attribute, except that on setting, in addition, before the
  child nodes are changed, the element's <a>value mode flag</a>
  must be set to <i>value</i>.

  The <dfn><code>defaultValue</code></dfn> IDL attribute, on
  getting, must return the element's <a>default
  value</a>. On setting, the attribute must set the element's <a>default value</a>, and, if the element's <a>value mode flag</a> is in the mode <i>default</i>, set the element's <code>textContent</code> IDL
  attribute as well.

  The <dfn><code>type</code></dfn> attribute must return the string
  "<code>output</code>".

  The <dfn><code>htmlFor</code></dfn> IDL attribute must
  <a>reflect</a> the <code>for</code> content attribute.

  The <code>willValidate</code>, <code>validity</code>, and <code>validationMessage</code> IDL attributes, and the <code>checkValidity()</code>, <code>reportValidity()</code>, and <code>setCustomValidity()</code> methods, are part of the
  <a>constraint validation API</a>. The <code>labels</code> IDL
  attribute provides a list of the element's <code>label</code>s. The <code>form</code> and <code>name</code> IDL attributes are
  part of the element's forms API.

  </div>

  <div class="example">
    A simple calculator could use <code>output</code> for its display of calculated results:

    <pre highlight="html">
&lt;form onsubmit="return false" oninput="o.value = a.valueAsNumber + b.valueAsNumber"&gt;
  &lt;input name=a type=number step=any&gt; +
  &lt;input name=b type=number step=any&gt; =
  &lt;output name=o for="a b"&gt;&lt;/output&gt;
&lt;/form&gt;
    </pre>

  </div>

  <div class="example">
    In this example, an <code>output</code> element is used to report the results of a calculation performed by a remote
    server, as they come in:

    <pre highlight="html">
&lt;output id="result"&gt;&lt;/output&gt;
&lt;script&gt;
  var primeSource = new WebSocket('ws://primes.example.net/');
  primeSource.onmessage = function (event) {
    document.getElementById('result').value = event.data;
  }
&lt;/script&gt;
    </pre>

  </div>

<h4 id="the-progress-element">The <dfn><code>progress</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Labelable element</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>, but there must be no <code>progress</code> element descendants.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>value</code> - Current value of the element</dd>
    <dd><code>max</code> - Upper bound of range</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>progressbar</code></a>
    (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLProgressElement : HTMLElement {
  attribute double value;
  attribute double max;
  readonly attribute double position;
  [SameObject] readonly attribute NodeList labels;
};
</pre>
    </dd>
  </dl>

  The <code>progress</code> element <a>represents</a> the completion progress of a task.
  The progress is either indeterminate, indicating that progress is being made but that it is not
  clear how much more work remains to be done before the task is complete (e.g. because the task is
  waiting for a remote host to respond), or the progress is a number in the range zero to a maximum,
  giving the fraction of work that has so far been completed.

  There are two attributes that determine the current task completion represented by the element.
  The <dfn><code>value</code></dfn> attribute specifies how much of the
  task has been completed, and the <dfn><code>max</code></dfn> attribute
  specifies how much work the task requires in total. The units are arbitrary and not specified.

  <p class="note">
    To make a determinate progress bar, add a <code>value</code> attribute with the current progress (either a number from
  0.0 to 1.0, or, if the <code>max</code> attribute is specified, a number
  from 0 to the value of the <code>max</code> attribute). To make an
  indeterminate progress bar, remove the <code>value</code>
  attribute.
  </p>

  Authors are encouraged to also include the current value and the maximum value inline as text
  inside the element, so that the progress is made available to users of legacy user agents.

  <div class="example">
    Here is a snippet of a Web application that shows the progress of some automated task:

    <pre highlight="html">
&lt;section&gt;
  &lt;h2&gt;Task Progress&lt;/h2&gt;
  &lt;p&gt;Progress: &lt;progress id="p" max=100&gt;&lt;span&gt;0&lt;/span&gt;%&lt;/progress&gt;&lt;/p&gt;
  &lt;script&gt;
  var progressBar = document.getElementById('p');
  function updateProgress(newValue) {
    progressBar.value = newValue;
    progressBar.getElementsByTagName('span')[0].textContent = newValue;
  }
  &lt;/script&gt;
&lt;/section&gt;
    </pre>

    (The <code>updateProgress()</code> method in this example would be called by some
    other code on the page to update the actual progress bar as the task progressed.)

  </div>

  The <code>value</code> and <code>max</code> attributes, when present, must have values that are <a>valid floating-point numbers</a>. The <code>value</code> attribute, if present, must have a value equal to or
  greater than zero, and less than or equal to the value of the <code>max</code> attribute, if present, or 1.0, otherwise. The <code>max</code> attribute, if present, must have a value greater than
  zero.

  <p class="note">
    The <code>progress</code> element is the wrong element to use for something that
  is just a gauge, as opposed to task progress. For instance, indicating disk space usage using
  <code>progress</code> would be inappropriate. Instead, the <code>meter</code> element is available
  for such use cases.
  </p>

  <div class="impl">

  <strong>User agent requirements</strong>: If the <code>value</code>
  attribute is omitted, then the progress bar is an indeterminate progress bar. Otherwise, it is a
  determinate progress bar.

  If the progress bar is a determinate progress bar and the element has a <code>max</code> attribute, the user agent must parse the <code>max</code> attribute's value according to the <a>rules for parsing
  floating-point number values</a>. If this does not result in an error, and if the parsed value
  is greater than zero, then the <dfn>maximum value</dfn> of the
  progress bar is that value. Otherwise, if the element has no <code>max</code> attribute, or if it has one but parsing it resulted in an
  error, or if the parsed value was less than or equal to zero, then the <a>maximum value</a> of the progress bar is 1.0.

  If the progress bar is a determinate progress bar, user agents must parse the <code>value</code> attribute's value according to the <a>rules for
  parsing floating-point number values</a>. If this does not result in an error, and if the
  parsed value is less than the <a>maximum value</a> and
  greater than zero, then the <dfn>current value</dfn> of the
  progress bar is that parsed value. Otherwise, if the parsed value was greater than or equal to the
  <a>maximum value</a>, then the <a>current value</a> of the progress bar is the <a>maximum value</a> of the progress bar. Otherwise, if parsing
  the <code>value</code> attribute's value resulted in an error, or a
  number less than or equal to zero, then the <a>current
  value</a> of the progress bar is zero.

  <strong>UA requirements for showing the progress bar</strong>: When representing a
  <code>progress</code> element to the user, the UA should indicate whether it is a determinate or
  indeterminate progress bar, and in the former case, should indicate the relative position of the
  <a>current value</a> relative to the <a>maximum value</a>.

  </div>

  <dl class="domintro">

    <dt><var>progress</var> . <code>position</code></dt>

    <dd>

    For a determinate progress bar (one with known current and maximum values), returns the
    result of dividing the current value by the maximum value.

    For an indeterminate progress bar, returns -1.

    </dd>

  </dl>

  <div class="impl">

  If the progress bar is an indeterminate progress bar, then the <dfn><code>position</code></dfn> IDL attribute must return -1.
  Otherwise, it must return the result of dividing the <a>current
  value</a> by the <a>maximum value</a>.

  If the progress bar is an indeterminate progress bar, then the <dfn><code>value</code></dfn> IDL attribute, on getting, must return 0.
  Otherwise, it must return the <a>current value</a>. On
  setting, the given value must be converted to the <a>best representation of the number as a
  floating-point number</a> and then the <code>value</code> content
  attribute must be set to that string.

  <p class="note">
    Setting the <code>value</code> IDL attribute to itself
  when the corresponding content attribute is absent would change the progress bar from an
  indeterminate progress bar to a determinate progress bar with no progress.
  </p>

  The <dfn><code>max</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name, <a>limited to numbers greater than
  zero</a>. The default value for <code>max</code> is 1.0.

  The <code>labels</code> IDL attribute provides a list of the element's
  <code>label</code>s.

  </div>

<h4 id="the-meter-element">The <dfn><code>meter</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Labelable element</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>, but there must be no <code>meter</code> element descendants.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>value</code> - Current value of the element</dd>
    <dd><code>min</code> - Lower bound of range</dd>
    <dd><code>max</code> - Upper bound of range</dd>
    <dd><code>low</code> - High limit of low range</dd>
    <dd><code>high</code> - Low limit of high range</dd>
    <dd><code>optimum</code> - Optimum value in gauge</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLMeterElement : HTMLElement {
  attribute double value;
  attribute double min;
  attribute double max;
  attribute double low;
  attribute double high;
  attribute double optimum;
  [SameObject] readonly attribute NodeList labels;
};
</pre>
    </dd>
  </dl>

  The <code>meter</code> element <a>represents</a> a scalar measurement within a known
  range, or a fractional value; for example disk usage, the relevance of a query result, or the
  fraction of a voting population to have selected a particular candidate.

  This is also known as a gauge.

  <p class="note">
    The <code>meter</code> element should not be used to indicate progress (as in a
  progress bar). For that role, HTML provides a separate <code>progress</code> element.
  </p>

  <p class="note">
    The <code>meter</code> element also does not represent a scalar value of arbitrary
  range â for example, it would be wrong to use this to report a weight, or height, unless
  there is a known maximum value.
  </p>

  There are six attributes that determine the semantics of the gauge represented by the
  element.

  The <dfn><code>min</code></dfn> attribute specifies the lower bound of
  the range, and the <dfn><code>max</code></dfn> attribute specifies the
  upper bound. The <dfn><code>value</code></dfn> attribute specifies the
  value to have the gauge indicate as the "measured" value.

  The other three attributes can be used to segment the gauge's range into "low", "medium", and
  "high" parts, and to indicate which part of the gauge is the "optimum" part. The <dfn><code>low</code></dfn> attribute specifies the range that is considered to
  be the "low" part, and the <dfn><code>high</code></dfn> attribute
  specifies the range that is considered to be the "high" part. The <dfn><code>optimum</code></dfn> attribute gives the position that is
  "optimum"; if that is higher than the "high" value then this indicates that the higher the value,
  the better; if it's lower than the "low" mark then it indicates that lower values are better, and
  naturally if it is in between then it indicates that neither high nor low values are good.

  <span class="impl"><strong>Authoring requirements</strong>:</span> The <code>value</code> attribute must be specified. The <code>value</code>, <code>min</code>, <code>low</code>, <code>high</code>, <code>max</code>, and <code>optimum</code> attributes,
  when present, must have values that are <a>valid
  floating-point numbers</a>.

  In addition, the attributes' values are further constrained:

  Let <var>value</var> be the <code>value</code> attribute's
  number.

  If the <code>min</code> attribute is specified, then let <var>minimum</var> be that attribute's value; otherwise, let it be zero.

  If the <code>max</code> attribute is specified, then let <var>maximum</var> be that attribute's value; otherwise, let it be 1.0.

  The following inequalities must hold, as applicable:

  <ul class="brief">

    <li><var>minimum</var> â¤ <var>value</var> â¤ <var>maximum</var></li>

    <li><var>minimum</var> â¤ <code>low</code> â¤ <var>maximum</var> (if <code>low</code> is specified)</li>

    <li><var>minimum</var> â¤ <code>high</code> â¤ <var>maximum</var> (if <code>high</code> is specified)</li>

    <li><var>minimum</var> â¤ <code>optimum</code> â¤ <var>maximum</var> (if <code>optimum</code> is specified)</li>

    <li><code>low</code> â¤ <code>high</code> (if
    both <code>low</code> and <code>high</code> are
    specified)</li>

  </ul>

  <p class="note">
    If no minimum or maximum is specified, then the range is assumed to be 0..1, and
  the value thus has to be within that range.
  </p>

  Authors are encouraged to include a textual representation of the gauge's state in the
  element's contents, for users of user agents that do not support the <code>meter</code>
  element.

  When used with <a>microdata</a>, the <code>meter</code> element's <code>value</code> attribute provides the element's machine-readable value.

  <div class="example">
    The following examples show three gauges that would all be three-quarters full:

    <pre highlight="html">
Storage space usage: &lt;meter value=6 max=8&gt;6 blocks used (out of 8 total)&lt;/meter&gt;
Voter turnout: &lt;meter value=0.75&gt;&lt;img alt="75%" src="graph75.png"&gt;&lt;/meter&gt;
Tickets sold: &lt;meter min="0" max="100" value="75"&gt;&lt;/meter&gt;
    </pre>

    The following example is incorrect use of the element, because it doesn't give a range (and
    since the default maximum is 1, both of the gauges would end up looking maxed out):

    <pre class="bad">&lt;p&gt;The grapefruit pie had a radius of &lt;meter value=12&gt;12cm&lt;/meter&gt;
and a height of &lt;meter value=2&gt;2cm&lt;/meter&gt;.&lt;/p&gt; &lt;!-- <strong>BAD!</strong> --&gt;</pre>

    Instead, one would either not include the meter element, or use the meter element with a
    defined range to give the dimensions in context compared to other pies:

    <pre highlight="html">
&lt;p&gt;The grapefruit pie had a radius of 12cm and a height of
2cm.&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;Radius: &lt;dd&gt; &lt;meter min=0 max=20 value=12&gt;12cm&lt;/meter&gt;
  &lt;dt&gt;Height: &lt;dd&gt; &lt;meter min=0 max=10 value=2&gt;2cm&lt;/meter&gt;
&lt;/dl&gt;
    </pre>

  </div>

  There is no explicit way to specify units in the <code>meter</code> element, but the units may
  be specified in the <code>title</code> attribute in free-form text.

  <div class="example">
    The example above could be extended to mention the units:

    <pre highlight="html">
&lt;dl&gt;
  &lt;dt&gt;Radius: &lt;dd&gt; &lt;meter min=0 max=20 value=12 title="centimeters"&gt;12cm&lt;/meter&gt;
  &lt;dt&gt;Height: &lt;dd&gt; &lt;meter min=0 max=10 value=2 title="centimeters"&gt;2cm&lt;/meter&gt;
&lt;/dl&gt;
    </pre>

  </div>

  <div class="impl">

  <strong>User agent requirements</strong>: User agents must parse the <code>min</code>, <code>max</code>, <code>value</code>, <code>low</code>, <code>high</code>, and <code>optimum</code>
  attributes using the <a>rules for parsing floating-point number values</a>.

  User agents must then use all these numbers to obtain values for six points on the gauge, as
  follows. (The order in which these are evaluated is important, as some of the values refer to
  earlier ones.)

  <dl>

    <dt>The <dfn>minimum value</dfn></dt>

    <dd>

    If the <code>min</code> attribute is specified and a value could be
    parsed out of it, then the minimum value is that value. Otherwise, the minimum value is
    zero.

    </dd>

    <dt>The <dfn>maximum value</dfn></dt>

    <dd>

    If the <code>max</code> attribute is specified and a value could be
    parsed out of it, then the candidate maximum value is that value. Otherwise, the candidate
    maximum value is 1.0.

    If the candidate maximum value is greater than or equal to the minimum value, then the
    maximum value is the candidate maximum value. Otherwise, the maximum value is the same as the
    minimum value.

    </dd>

    <dt>The <dfn>actual value</dfn></dt>

    <dd>

    If the <code>value</code> attribute is specified and a value could
    be parsed out of it, then that value is the candidate actual value. Otherwise, the candidate
    actual value is zero.

    If the candidate actual value is less than the minimum value, then the actual value is the
    minimum value.

    Otherwise, if the candidate actual value is greater than the maximum value, then the actual
    value is the maximum value.

    Otherwise, the actual value is the candidate actual value.

    </dd>

    <dt>The <dfn>low boundary</dfn></dt>

    <dd>

    If the <code>low</code> attribute is specified and a value could be
    parsed out of it, then the candidate low boundary is that value. Otherwise, the candidate low
    boundary is the same as the minimum value.

    If the candidate low boundary is less than the minimum value, then the low boundary is the
    minimum value.

    Otherwise, if the candidate low boundary is greater than the maximum value, then the low
    boundary is the maximum value.

    Otherwise, the low boundary is the candidate low boundary.

    </dd>

    <dt>The <dfn>high boundary</dfn></dt>

    <dd>

    If the <code>high</code> attribute is specified and a value could be
    parsed out of it, then the candidate high boundary is that value. Otherwise, the candidate high
    boundary is the same as the maximum value.

    If the candidate high boundary is less than the low boundary, then the high boundary is the
    low boundary.

    Otherwise, if the candidate high boundary is greater than the maximum value, then the high
    boundary is the maximum value.

    Otherwise, the high boundary is the candidate high boundary.

    </dd>

    <dt>The <dfn>optimum point</dfn></dt>

    <dd>

    If the <code>optimum</code> attribute is specified and a value
    could be parsed out of it, then the candidate optimum point is that value. Otherwise, the
    candidate optimum point is the midpoint between the minimum value and the maximum value.

    If the candidate optimum point is less than the minimum value, then the optimum point is the
    minimum value.

    Otherwise, if the candidate optimum point is greater than the maximum value, then the optimum
    point is the maximum value.

    Otherwise, the optimum point is the candidate optimum point.

    </dd>

  </dl>

  All of which will result in the following inequalities all being true:

  <ul class="brief">
    <li>minimum value â¤ actual value â¤ maximum value</li>
    <li>minimum value â¤ low boundary â¤ high boundary â¤ maximum value</li>
    <li>minimum value â¤ optimum point â¤ maximum value</li>
  </ul>

  <strong>UA requirements for regions of the gauge</strong>: If the optimum point is equal to the
  low boundary or the high boundary, or anywhere in between them, then the region between the low
  and high boundaries of the gauge must be treated as the optimum region, and the low and high
  parts, if any, must be treated as suboptimal. Otherwise, if the optimum point is less than the low
  boundary, then the region between the minimum value and the low boundary must be treated as the
  optimum region, the region from the low boundary up to the high boundary must be treated as a
  suboptimal region, and the remaining region must be treated as an even less good region. Finally,
  if the optimum point is higher than the high boundary, then the situation is reversed; the region
  between the high boundary and the maximum value must be treated as the optimum region, the region
  from the high boundary down to the low boundary must be treated as a suboptimal region, and the
  remaining region must be treated as an even less good region.

  <strong>UA requirements for showing the gauge</strong>: When representing a <code>meter</code>
  element to the user, the UA should indicate the relative position of the actual value to the
  minimum and maximum values, and the relationship between the actual value and the three regions of
  the gauge.

  </div>

  <div class="example">
    The following markup:
    <pre highlight="html">
&lt;h3&gt;Suggested groups&lt;/h3&gt;
&lt;menu type="toolbar"&gt;
  &lt;a href="?cmd=hsg" onclick="hideSuggestedGroups()"&gt;Hide suggested groups&lt;/a&gt;
&lt;/menu&gt;
&lt;ul&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;a href="/group/comp.infosystems.www.authoring.stylesheets/view"&gt;comp.infosystems.www.authoring.stylesheets&lt;/a&gt; -
      &lt;a href="/group/comp.infosystems.www.authoring.stylesheets/subscribe"&gt;join&lt;/a&gt;&lt;/p&gt;
  &lt;p&gt;Group description: &lt;strong&gt;Layout/presentation on the WWW.&lt;/strong&gt;&lt;/p&gt;
  &lt;p&gt;<strong>&lt;meter value="0.5"&gt;Moderate activity,&lt;/meter&gt;</strong> Usenet, 618 subscribers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;a href="/group/netscape.public.mozilla.xpinstall/view"&gt;netscape.public.mozilla.xpinstall&lt;/a&gt; -
      &lt;a href="/group/netscape.public.mozilla.xpinstall/subscribe"&gt;join&lt;/a&gt;&lt;/p&gt;
  &lt;p&gt;Group description: &lt;strong&gt;Mozilla XPInstall discussion.&lt;/strong&gt;&lt;/p&gt;
  &lt;p&gt;<strong>&lt;meter value="0.25"&gt;Low activity,&lt;/meter&gt;</strong> Usenet, 22 subscribers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;a href="/group/mozilla.dev.general/view"&gt;mozilla.dev.general&lt;/a&gt; -
      &lt;a href="/group/mozilla.dev.general/subscribe"&gt;join&lt;/a&gt;&lt;/p&gt;
  &lt;p&gt;<strong>&lt;meter value="0.25"&gt;Low activity,&lt;/meter&gt;</strong> Usenet, 66 subscribers&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
    </pre>
    Might be rendered as follows:
    <img src="images/sample-meter.png" width="332" height="178" alt="With the <meter> elements rendered as inline green bars of varying lengths." />
  </div>

  User agents <span class="impl">may</span> combine the value of the <code>title</code> attribute and the other attributes to provide context-sensitive
  help or inline text detailing the actual values.

  <div class="example">
    For example, the following snippet:
    <pre highlight="html">
&lt;meter min=0 max=60 value=23.2 title=seconds&gt;&lt;/meter&gt;
    </pre>
    ...might cause the user agent to display a gauge with a tooltip
    saying "Value: 23.2 out of 60." on one line and "seconds" on a
    second line.
  </div>

  <div class="impl">

  The <dfn><code>value</code></dfn> IDL attribute, on getting, must
  return the <a>actual value</a>. On setting, the given value
  must be converted to the <a>best representation of the number as a floating-point number</a>
  and then the <code>value</code> content attribute must be set to that
  string.

  The <dfn><code>min</code></dfn> IDL attribute, on getting, must return
  the <a>minimum value</a>. On setting, the given value must be
  converted to the <a>best representation of the number as a floating-point number</a> and
  then the <code>min</code> content attribute must be set to that string.

  The <dfn><code>max</code></dfn> IDL attribute, on getting, must return
  the <a>maximum value</a>. On setting, the given value must be
  converted to the <a>best representation of the number as a floating-point number</a> and
  then the <code>max</code> content attribute must be set to that string.

  The <dfn><code>low</code></dfn> IDL attribute, on getting, must return
  the <a>low boundary</a>. On setting, the given value must be
  converted to the <a>best representation of the number as a floating-point number</a> and
  then the <code>low</code> content attribute must be set to that string.

  The <dfn><code>high</code></dfn> IDL attribute, on getting, must return
  the <a>high boundary</a>. On setting, the given value must be
  converted to the <a>best representation of the number as a floating-point number</a> and
  then the <code>high</code> content attribute must be set to that
  string.

  The <dfn><code>optimum</code></dfn> IDL attribute, on getting, must
  return the <a>optimum value</a>. On setting, the given value
  must be converted to the <a>best representation of the number as a floating-point number</a>
  and then the <code>optimum</code> content attribute must be set to that
  string.

  The <code>labels</code> IDL attribute provides a list of the element's
  <code>label</code>s.

  </div>

  <div class="example">
    The following example shows how a gauge could fall back to localized or pretty-printed
    text.

    <pre highlight="html">
&lt;p&gt;Disk usage: &lt;meter min=0 value=170261928 max=233257824&gt;170â261â928 bytes used
out of 233â257â824 bytes available&lt;/meter&gt;&lt;/p&gt;
    </pre>

  </div>

<h4 id="the-fieldset-element">The <dfn><code>fieldset</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning root</a>.</dd>
    <dd><a>Listed</a> and <a>reassociateable</a> <a>form-associated element</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Optionally a <code>legend</code> element, followed by <a>flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>disabled</code> - Whether the form control is disabled</dd>
    <dd><code>form</code> - Associates the control with a <code>form</code> element</dd>
    <dd><code>name</code> - Name of form control to use for <a>form submission</a> and in the <code>form.elements</code> API  </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>group</code></a>
    (default - <a><em>do not set</em></a>)
    or <a><code>presentation</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLFieldSetElement : HTMLElement {
  attribute boolean disabled;
  readonly attribute HTMLFormElement? form;
  attribute DOMString name;

  readonly attribute DOMString type;

  [SameObject] readonly attribute HTMLFormControlsCollection elements;

  readonly attribute boolean willValidate;
  [SameObject] readonly attribute ValidityState validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  boolean reportValidity();
  void setCustomValidity(DOMString error);
};
</pre>
    </dd>
  </dl>

  The <code>fieldset</code> element <a>represents</a> a set of form controls optionally
  grouped under a common name.

  The name of the group is given by the first <code>legend</code> element that is a child of the
  <code>fieldset</code> element, if any. The remainder of the descendants form the group.

  The <dfn><code>disabled</code></dfn> attribute, when specified,
  causes all the form control descendants of the <code>fieldset</code> element, excluding those that
  are descendants of the <code>fieldset</code> element's first <code>legend</code> element child, if
  any, to be <a>disabled</a>.

  A <code>fieldset</code> element is a <dfn>disabled
  fieldset</dfn> if it matches any of the following conditions:

  <ul>

    <li>Its <code>disabled</code> attribute is specified

    </li><li>It is a descendant of another <code>fieldset</code> element whose <code>disabled</code> attribute is specified, and is <em>not</em> a
    descendant of that <code>fieldset</code> element's first <code>legend</code> element child, if
    any.</li>

  </ul>

  The <code>form</code> attribute is used to explicitly associate the
  <code>fieldset</code> element with its <a>form owner</a>. The <code>name</code> attribute represents the element's name.

  <dl class="domintro">

    <dt><var>fieldset</var> . <code>type</code></dt>

    <dd>

    Returns the string "fieldset".

    </dd>

    <dt><var>fieldset</var> . <code>elements</code></dt>

    <dd>

    Returns an <code>HTMLFormControlsCollection</code> of the form controls in the element.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>disabled</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.

  The <dfn><code>type</code></dfn> IDL attribute must return the string
  "<code>fieldset</code>".

  The <dfn><code>elements</code></dfn> IDL attribute must return an
  <code>HTMLFormControlsCollection</code> rooted at the <code>fieldset</code> element, whose filter
  matches <a>listed elements</a>.

  The <code>willValidate</code>, <code>validity</code>, and <code>validationMessage</code> attributes, and the <code>checkValidity()</code>, <code>reportValidity()</code>, and <code>setCustomValidity()</code> methods, are part of the
  <a>constraint validation API</a>. The <code>form</code> and <code>name</code> IDL attributes are part of the element's forms API.

  </div>

  <div class="example">
    This example shows a <code>fieldset</code> element being used to group a set of related
    controls:

    <pre highlight="html">
&lt;fieldset&gt;
  &lt;legend&gt;Display&lt;/legend&gt;
  &lt;p&gt;&lt;label&gt;&lt;input type=radio name=c value=0 checked&gt; Black on White&lt;/label&gt;
  &lt;p&gt;&lt;label&gt;&lt;input type=radio name=c value=1&gt; White on Black&lt;/label&gt;
  &lt;p&gt;&lt;label&gt;&lt;input type=checkbox name=g&gt; Use grayscale&lt;/label&gt;
  &lt;p&gt;&lt;label&gt;Enhance contrast &lt;input type=range name=e list=contrast min=0 max=100 value=0 step=1&gt;&lt;/label&gt;
  &lt;datalist id=contrast&gt;
  &lt;option label=Normal value=0&gt;
  &lt;option label=Maximum value=100&gt;
  &lt;/datalist&gt;
&lt;/fieldset&gt;
    </pre>

  </div>

  <div class="example">
    The following snippet shows a fieldset with a checkbox in the legend that controls whether or
    not the fieldset is enabled. The contents of the fieldset consist of two required text fields and
    an optional year/month control.

    <pre highlight="html">
&lt;fieldset name="clubfields" disabled&gt;
  &lt;legend&gt; &lt;label&gt;
  &lt;input type=checkbox name=club onchange="form.clubfields.disabled = !checked"&gt;
  Use Club Card
  &lt;/label&gt; &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt;Name on card: &lt;input name=clubname required&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Card number: &lt;input name=clubnum required pattern="\[-0-9]+"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Expiry date: &lt;input name=clubexp type=month&gt;&lt;/label&gt;&lt;/p&gt;
&lt;/fieldset&gt;
    </pre>

  </div>

  <div class="example">
    You can also nest <code>fieldset</code> elements. Here is an example expanding on the previous
    one that does so:

    <pre highlight="html">
&lt;fieldset name="clubfields" disabled&gt;
  &lt;legend&gt; &lt;label&gt;
  &lt;input type=checkbox name=club onchange="form.clubfields.disabled = !checked"&gt;
  Use Club Card
  &lt;/label&gt; &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt;Name on card: &lt;input name=clubname required&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;fieldset name="numfields"&gt;
  &lt;legend&gt; &lt;label&gt;
    &lt;input type=radio checked name=clubtype onchange="form.numfields.disabled = !checked"&gt;
    My card has numbers on it
  &lt;/label&gt; &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt;Card number: &lt;input name=clubnum required pattern="\[-0-9]+"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;fieldset name="letfields" disabled&gt;
  &lt;legend&gt; &lt;label&gt;
    &lt;input type=radio name=clubtype onchange="form.letfields.disabled = !checked"&gt;
    My card has letters on it
  &lt;/label&gt; &lt;/legend&gt;
  &lt;p&gt;&lt;label&gt;Card code: &lt;input name=clublet required pattern="[A-Za-z]+"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
&lt;/fieldset&gt;
    </pre>

    In this example, if the outer "Use Club Card" checkbox is not checked, everything inside the
    outer <code>fieldset</code>, including the two radio buttons in the legends of the two nested
    <code>fieldset</code>s, will be disabled. However, if the checkbox is checked, then the radio
    buttons will both be enabled and will let you select which of the two inner
    <code>fieldset</code>s is to be enabled.

  </div>

<h4 id="the-legend-element">The <dfn><code>legend</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As the first child of a <code>fieldset</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
    <pre class="idl" data-highlight="webidl">interface HTMLLegendElement : HTMLElement {
  readonly attribute HTMLFormElement? form;
};
</pre>
    </dd>
  </dl>

  The <code>legend</code> element <a>represents</a> a caption for the rest of the contents
  of the <code>legend</code> element's parent <code>fieldset</code> element<span class="impl">, if
  any</span>.

  <dl class="domintro">

    <dt><var>legend</var> . <code>form</code></dt>

    <dd>

    Returns the element's <code>form</code> element, if any, or null otherwise.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>form</code></dfn> IDL attribute's behavior depends on
  whether the <code>legend</code> element is in a <code>fieldset</code> element or not. If the
  <code>legend</code> has a <code>fieldset</code> element as its parent, then the <code>form</code> IDL attribute must return the same value as the <code>form</code> IDL attribute on that <code>fieldset</code> element. Otherwise,
  it must return null.

  </div>

<h4 id="form-control-infrastructure">Form control infrastructure</h4>

<h5 id="a-form-control-value">A form control value</h5>

  Most form controls have a <dfn>value</dfn> and a <dfn>checkedness</dfn>. (The latter is only used by <code>input</code>
  elements.) These are used to describe how the user interacts with the control.

  A control's <a>value</a> is its internal state. As such, it
  might not match the user's current input.

  <p class="example">For instance, if a user enters the word "<kbd>three</kbd>" into <a>a numeric field</a> that expects digits, the user's input would
  be the string "three" but the control's <a>value</a> would remain
  unchanged.</p>

  To define the behavior of constraint validation in the face of the <code>input</code>
  element's <code>multiple</code> attribute, <code>input</code> elements
  can also have separately defined <dfn>value<em>s</em></dfn>.

  The <code>select</code> element does not have a <a>value</a>;
  the <a>selectedness</a> of its <code>option</code>
  elements is what is used instead.

<h5 id="mutability">Mutability</h5>

  A form control can be designated as <dfn><i>mutable</i></dfn>.

  <p class="note">
    This determines (by means of definitions and requirements in this specification
  that rely on whether an element is so designated) whether or not the user can modify the <a>value</a> or <a>checkedness</a> of a
  form control, or whether or not a control can be automatically prefilled.
  </p>

<h5 id="association-of-controls-and-forms">Association of controls and forms</h5>

  A <a>form-associated element</a> can have a relationship with a <code>form</code>
  element, which is called the element's <dfn>form owner</dfn>. If a <a>form-associated
  element</a> is not associated with a <code>form</code> element, its <a>form owner</a> is
  said to be null.

  A <a>form-associated element</a> is, by default, associated with its <span class="impl">nearest</span> ancestor <code>form</code> element<span class="impl"> (as described
  below)</span>, but, if it is <a>reassociateable</a>, may have a
  <dfn><code>form</code></dfn> attribute specified to override this.

  <p class="note">
    This feature allows authors to work around the lack of support for nested
  <code>form</code> elements.
  </p>

  If a <a>reassociateable</a> <a>form-associated
  element</a> has a <code>form</code> attribute specified, then that
  attribute's value must be the <a>ID</a> of a <code>form</code> element
  in the element's owner <code>Document</code>.

  <div class="impl">

  <p class="note">
    The rules in this section are complicated by the fact that although conforming
  documents will never contain nested <code>form</code> elements, it is quite possible (e.g. using a
  script that performs DOM manipulation) to generate documents that have such nested elements. They
  are also complicated by rules in the HTML parser that, for historical reasons, can result in a
  <a>form-associated element</a> being associated with a <code>form</code> element that is not
  its ancestor.
  </p>

  When a <a>form-associated element</a> is created, its <a>form owner</a> must be
  initialized to null (no owner).

  When a <a>form-associated element</a> is to be <dfn>associated</dfn> with a form, its <a>form owner</a> must
  be set to that form.

  When a <a>form-associated element</a> or one of its ancestors is <a>inserted into a <code>Document</code></a>, then the user agent must
  <a>reset the form owner</a> of that <a>form-associated element</a>. <span class="note">The <a>HTML parser</a> overrides this requirement when inserting form
  controls.</span>

  When an element changes its parent node resulting in a <a>form-associated element</a> and
  its <a>form owner</a> (if any) no longer being in the same <a>home subtree</a>, then
  the user agent must <a>reset the form owner</a> of that <a>form-associated
  element</a>.

  When a <a>reassociateable</a> <a>form-associated
  element</a>'s <code>form</code> attribute is set, changed, or removed,
  then the user agent must <a>reset the form owner</a> of that element.

  When a <a>reassociateable</a> <a>form-associated
  element</a> has a <code>form</code> attribute and the <a>ID</a> of any of the elements in the <code>Document</code> changes, then
  the user agent must <a>reset the form owner</a> of that <a>form-associated
  element</a>.

  When a <a>reassociateable</a> <a>form-associated
  element</a> has a <code>form</code> attribute and an element with an
  <a>ID</a> is <a>inserted
  into</a> or <a>removed from</a> the
  <code>Document</code>, then the user agent must <a>reset the form owner</a> of that
  <a>form-associated element</a>.

  When the user agent is to <dfn>reset the form owner</dfn> of a <a>form-associated
  element</a>, it must run the following steps:

  <ol>

    <li>If the element's <a>form owner</a> is not null, and either the element is not <a>reassociateable</a> or its <code>form</code> content attribute is not present, and the element's <a>form
    owner</a> is its nearest <code>form</code> element ancestor after the change to the ancestor
    chain, then do nothing, and abort these steps.</li>

    <li>Let the element's <a>form owner</a> be null.</li>

    <li>

    If the element is <a>reassociateable</a>, has a <code>form</code> content attribute, and is itself <a>in a <code>Document</code></a>, then run these substeps:

    <ol>

      <li>If the first element <a>in the <code>Document</code></a> to
      have an <a>ID</a> that is <a>case-sensitively</a> equal to the element's <code>form</code> content attribute's value is a <code>form</code> element,
      then <a>associate</a> the <a>form-associated
      element</a> with that <code>form</code> element.</li>

      <li>Abort the "reset the form owner" steps.</li>

    </ol>

    </li>

    <li>Otherwise, if the <a>form-associated element</a> in question has an ancestor
    <code>form</code> element, then <a>associate</a> the
    <a>form-associated element</a> with the nearest such ancestor <code>form</code>
    element.</li>

    <li>Otherwise, the element is left unassociated.</li>

  </ol>

  <div class="example">
    In the following non-conforming snippet:

    <pre class="bad">...
  &lt;form id="a"&gt;
  &lt;div id="b"&gt;&lt;/div&gt;
  &lt;/form&gt;
  &lt;script&gt;
  document.getElementById('b').innerHTML =
      '&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;form id="c"&gt;&lt;input id="d"&gt;&lt;/table&gt;' +
      '&lt;input id="e"&gt;';
  &lt;/script&gt;
...</pre>

    The <a>form owner</a> of "d" would be the inner nested form "c", while the <a>form
    owner</a> of "e" would be the outer form "a".

    This happens as follows: First, the "e" node gets associated with "c" in the <a>HTML
    parser</a>. Then, the <code>innerHTML</code> algorithm moves the nodes
    from the temporary document to the "b" element. At this point, the nodes see their ancestor chain
    change, and thus all the "magic" associations done by the parser are reset to normal ancestor
    associations.

    This example is a non-conforming document, though, as it is a violation of the content models
    to nest <code>form</code> elements.

  </div>

  </div>

  <dl class="domintro">
    <dt><var>element</var> . <code>form</code></dt>
    <dd>
      Returns the element's <a>form owner</a>.

      Returns null if there isn't one.
    </dd>
  </dl>

  <div class="impl">
    <a>Reassociateable</a> <a>form-associated elements</a> have a <dfn><code>form</code></dfn> IDL
    attribute, which, on getting, must return the element's <a>form owner</a>, or null if there
    isn't one.
  </div>

<h4 id="attributes-common-to-form-controls">Attributes common to form controls</h4>

<h5 id="naming-form-controls-the-name-attribute">Naming form controls: the <code>name</code> attribute</h5>

  The <dfn><code>name</code></dfn> content attribute gives the name of the
  form control, as used in <a>form submission</a> and in the <code>form</code> element's <code>elements</code> object. If the attribute is specified, its value must
  not be the empty string.

  Any non-empty value for <code>name</code> is allowed, but the names
  "<code>_charset_</code>" and "<code>isindex</code>" are special:

  <dl>

    <dt><dfn><code>isindex</code></dfn></dt>
    <dd>

    This value, if used as the name of a <a>Text</a> control
    that is the first control in a form that is submitted using the <code>application/x-www-form-urlencoded</code> mechanism, causes
    the submission to only include the value of this control, with no name.

    </dd>

    <dt><dfn><code>_charset_</code></dfn></dt>
    <dd>

    This value, if used as the name of a <a>Hidden</a>
    control with no <code>value</code> attribute, is automatically given a
    value during submission consisting of the submission character encoding.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>name</code></dfn> IDL attribute must <a>reflect</a>
  the <code>name</code> content attribute.

  </div>

<h5 id="submitting-element-directionality-the-dirname-attribute">Submitting element directionality: the <code>dirname</code> attribute</h5>

  The <dfn><code>dirname</code></dfn> attribute on a form control element
  enables the submission of <a>the directionality</a> of the element, and gives the name of
  the field that contains this value during <a>form submission</a>. If such an attribute is
  specified, its value must not be the empty string.

  <div class="example">
    In this example, a form contains a text field and a submission button:

    <pre highlight="html">
&lt;form action="addcomment.cgi" method=post&gt;
  &lt;p&gt;&lt;label&gt;Comment: &lt;input type=text name="comment" dirname="comment.dir" required&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;button name="mode" type=submit value="add"&gt;Post Comment&lt;/button&gt;&lt;/p&gt;
&lt;/form&gt;
    </pre>

    When the user submits the form, the user agent includes three fields, one called "comment",
    one called "comment.dir", and one called "mode"; so if the user types "Hello", the submission
    body might be something like:

    <pre>comment=Hello&amp;<strong>comment.dir=ltr</strong>&amp;mode=add</pre>

    If the user manually switches to a right-to-left writing direction and enters "<span dir="rtl" lang="ar">ÙØ±Ø­Ø¨Ø§</span>", the submission body might be
    something like:

    <pre>comment=%D9%85%D8%B1%D8%AD%D8%A8%D8%A7&amp;<strong>comment.dir=rtl</strong>&amp;mode=add</pre>

  </div>

<h5 id="limiting-user-input-length-the-maxlength-attribute">Limiting user input length: the <code>maxlength</code> attribute</h5>

  A <dfn>form control <code>maxlength</code> attribute</dfn>,
  controlled by a <var>dirty value flag</var>, declares a limit on the number of characters
  a user can input.

  If an element has its <a>form control <code>maxlength</code> attribute</a> specified, the attribute's value must be a <a>valid
  non-negative integer</a>. If the attribute is specified and applying the <a>rules for
  parsing non-negative integers</a> to its value results in a number, then that number is the
  element's <dfn>maximum allowed value length</dfn>. If the attribute is omitted or parsing its
  value results in an error, then there is no <a>maximum allowed value length</a>.

  <div class="impl">

  <strong>Constraint validation</strong>: If an element has a <a>maximum allowed value
  length</a>, its <var>dirty value flag</var> is true, its <a>value</a> was last changed by a user edit (as opposed to a change made
  by a script), and the <a>code-unit length</a> of the element's <a>value</a> is greater than the element's <a>maximum allowed value
  length</a>, then the element is <a>suffering from being too long</a>.

  User agents may prevent the user from causing the element's <a>value</a> to be set to a value whose <a>code-unit length</a> is
  greater than the element's <a>maximum allowed value length</a>.

  <p class="note">
    In the case of <code>textarea</code> elements, this is the <a>value</a>, not the <a>raw
  value</a>, so the <a>textarea wrapping transformation</a> is applied before the
  <a>maximum allowed value length</a> is checked.
  </p>

  </div>

<h5 id="setting-minimum-input-length-requirements-the-minlength-attribute">Setting minimum input length requirements: the <code>minlength</code> attribute</h5>

  A <dfn>form control <code>minlength</code> attribute</dfn>,
  controlled by a <var>dirty value flag</var>, declares a lower bound on the number of
  characters a user can input.

  <p class="note">
    The <code>minlength</code> attribute does not imply the
  <code>required</code> attribute. If the form control has no <code>required</code> attribute, then the value can still be omitted; the
  <code>minlength</code> attribute only kicks in once the user has entered
  a value at all. If the empty string is not allowed, then the <code>required</code>
  attribute also needs to be set.
  </p>

  If an element has its <a>form control <code>minlength</code> attribute</a> specified, the attribute's value must be a <a>valid
  non-negative integer</a>. If the attribute is specified and applying the <a>rules for
  parsing non-negative integers</a> to its value results in a number, then that number is the
  element's <dfn>minimum allowed value length</dfn>. If the attribute is omitted or parsing its
  value results in an error, then there is no <a>minimum allowed value length</a>.

  If an element has both a <a>maximum allowed value length</a> and a <a>minimum allowed
  value length</a>, the <a>minimum allowed value length</a> must be smaller than or equal
  to the <a>maximum allowed value length</a>.

  <div class="impl">

  <strong>Constraint validation</strong>: If an element has a <a>minimum allowed value
  length</a>, its <var>dirty value flag</var> is true, its <a>value</a> was last changed by a user edit (as opposed to a change made
  by a script), its <a>value</a> is not the empty string, and the
  <a>code-unit length</a> of the element's <a>value</a> is less
  than the element's <a>minimum allowed value length</a>, then the element is <a>suffering
  from being too short</a>.

  </div>

  <div class="example">
    In this example, there are four text fields. The first is required, and has to be at least 5
    characters long. The other three are optional, but if the user fills one in, the user has to
    enter at least 10 characters.

    <pre highlight="html">
&lt;form action="/events/menu.cgi" method="post"&gt;
  &lt;p&gt;&lt;label&gt;Name of Event: &lt;input required minlength=5 maxlength=50 name=event&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Describe what you would like for breakfast, if anything:
    &lt;textarea name="breakfast" minlength="10"&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Describe what you would like for lunch, if anything:
    &lt;textarea name="lunch" minlength="10"&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Describe what you would like for dinner, if anything:
    &lt;textarea name="dinner" minlength="10"&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;input type=submit value="Submit Request"&gt;&lt;/p&gt;
&lt;/form&gt;
    </pre>

  </div>

<h5 id="enabling-and-disabling-form-controls-the-disabled-attribute">Enabling and disabling form controls: the <code>disabled</code> attribute</h5>

  The <dfn><code>disabled</code></dfn> content attribute is a
  <a>boolean attribute</a>.

  A form control is <dfn>disabled</dfn> if any of the following
  conditions are met:

  <ol>

    <li>The element is a <code>button</code>, <code>input</code>, <code>select</code>, or
    <code>textarea</code> element, and the <code>disabled</code> attribute
    is specified on this element (regardless of its value).</li>

    <li>The element is a descendant of a <code>fieldset</code> element whose <code>disabled</code> attribute is specified, and is <em>not</em> a
    descendant of that <code>fieldset</code> element's first <code>legend</code> element child, if
    any.</li>

  </ol>

  <div class="impl">

  A form control that is <a>disabled</a> must prevent any <code>click</code> events that are <a>queued</a> on the
  <a>user interaction task source</a> from being dispatched on the element.

  <strong>Constraint validation</strong>: If an element is <a>disabled</a>, it is <a>barred from constraint
  validation</a>.

  The <dfn><code>disabled</code></dfn> IDL attribute must
  <a>reflect</a> the <code>disabled</code> content attribute.

  </div>

<h5 id="form-submission">Form submission</h5>

  <dfn>Attributes for form submission</dfn> can be specified both on <code>form</code> elements
  and on <a>submit buttons</a> (elements that represent buttons
  that submit forms, e.g. an <code>input</code> element whose <code>type</code> attribute is in the <a>Submit Button</a> state).

  The <a>attributes for form submission</a> that may be specified on <code>form</code>
  elements are <code>action</code>, <code>enctype</code>, <code>method</code>, <code>novalidate</code>, and <code>target</code>.

  The corresponding <a>attributes for form submission</a> that may be specified on <a>submit buttons</a> are <code>formaction</code>, <code>formenctype</code>, <code>formmethod</code>, <code>formnovalidate</code>, and <code>formtarget</code>. When omitted, they default to the values given on
  the corresponding attributes on the <code>form</code> element.

  <hr />

  The <dfn><code>action</code></dfn> and <dfn><code>formaction</code></dfn> content attributes, if specified, must
  have a value that is a <a>valid non-empty URL potentially surrounded by spaces</a>.

  The <dfn>action</dfn> of an element is the value of the element's
  <code>formaction</code> attribute, if the element is a <a>submit button</a> and has such an attribute, or the value of its
  <a>form owner</a>'s <code>action</code> attribute, if <em>it</em> has
  one, or else the empty string.

  <hr />

  The <dfn><code>method</code></dfn> and <dfn><code>formmethod</code></dfn> content attributes are <a>enumerated attributes</a> with the following keywords and
  states:

  <ul>

    <li>The keyword <dfn><code>get</code></dfn>, mapping to the
    state <dfn>GET</dfn>, indicating the HTTP GET method.</li>

    <li>The keyword <dfn><code>post</code></dfn>, mapping to the
    state <dfn>POST</dfn>, indicating the HTTP POST method.</li>

    <li>The keyword <dfn><code>dialog</code></dfn>, mapping to
    the state <dfn>dialog</dfn>, indicating that submitting the
    <code>form</code> is intended to close the <code>dialog</code> box in which the form finds
    itself, if any, and otherwise not submit.</li>

  </ul>

  The <i>invalid value default</i> for these attributes is the <a>GET</a> state. The <i>missing value default</i> for the <code>method</code> attribute is also the <a>GET</a> state. (There is no <i>missing value default</i> for the
  <code>formmethod</code> attribute.)

  The <dfn>method</dfn> of an element is one of those states. If the
  element is a <a>submit button</a> and has a <code>formmethod</code> attribute, then the element's <a>method</a> is that attribute's state; otherwise, it is the <a>form
  owner</a>'s <code>method</code> attribute's state.

  <div class="example">
    Here the <code>method</code> attribute is used to explicitly specify
    the default value, "<code>get</code>", so that the search
    query is submitted in the URL:

    <pre highlight="html">
&lt;form method="get" action="/search.cgi"&gt;
  &lt;p&gt;&lt;label&gt;Search terms: &lt;input type=search name=q&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;input type=submit&gt;&lt;/p&gt;
&lt;/form&gt;
    </pre>

  </div>

  <div class="example">
    On the other hand, here the <code>method</code> attribute is used to
    specify the value "<code>post</code>", so that the user's
    message is submitted in the HTTP request's body:

    <pre highlight="html">
&lt;form method="post" action="/post-message.cgi"&gt;
  &lt;p&gt;&lt;label&gt;Message: &lt;input type=text name=m&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;input type=submit value="Submit message"&gt;&lt;/p&gt;
&lt;/form&gt;
    </pre>

  </div>

  <div class="example">
    In this example, a <code>form</code> is used with a <code>dialog</code>. The <code>method</code> attribute's "<code>dialog</code>" keyword is used to have the dialog
    automatically close when the form is submitted.

    <pre lang="en-GB">&lt;dialog id="ship"&gt;
  &lt;form method=dialog&gt;
  &lt;p&gt;A ship has arrived in the harbour.&lt;/p&gt;
  &lt;button type=submit value="board"&gt;Board the ship&lt;/button&gt;
  &lt;button type=submit value="call"&gt;Call to the captain&lt;/button&gt;
  &lt;/form&gt;
&lt;/dialog&gt;
&lt;script&gt;
  var ship = document.getElementById('ship');
  ship.showModal();
  ship.onclose = function (event) {
    if (ship.returnValue == 'board') {
      // ...
    } else {
      // ...
    }
  };
&lt;/script&gt;</pre>

  </div>

  <hr />

  The <dfn><code>enctype</code></dfn> and <dfn><code>formenctype</code></dfn> content attributes are <a>enumerated attributes</a> with the following keywords and
  states:

  <ul>
    <li>The "<dfn><code>application/x-www-form-urlencoded</code></dfn>" keyword and corresponding state.</li>
    <li>The "<dfn><code>multipart/form-data</code></dfn>" keyword and corresponding state.</li>
    <li>The "<dfn><code>text/plain</code></dfn>" keyword and corresponding state.</li>
  </ul>

  The <i>invalid value default</i> for these attributes is the <code>application/x-www-form-urlencoded</code> state. The <i>missing value default</i> for the <code>enctype</code> attribute is also the <code>application/x-www-form-urlencoded</code> state. (There is no
  <i>missing value default</i> for the <code>formenctype</code>
  attribute.)

  The <dfn>enctype</dfn> of an element is one of those three states.
  If the element is a <a>submit button</a> and has a <code>formenctype</code> attribute, then the element's <a>enctype</a> is that attribute's state; otherwise, it is the
  <a>form owner</a>'s <code>enctype</code> attribute's state.

  <hr />

  The <dfn><code>target</code></dfn> and <dfn><code>formtarget</code></dfn> content attributes, if specified, must
  have values that are <a>valid browsing context
  names or keywords</a>.

  The <dfn>target</dfn> of an element is the value of the element's
  <code>formtarget</code> attribute, if the element is a <a>submit button</a> and has such an attribute; or the value of its
  <a>form owner</a>'s <code>target</code> attribute, if <em>it</em> has
  such an attribute; or, if the <code>Document</code> contains a <code>base</code> element with a
  <code>target</code> attribute, then the value of the <code>target</code> attribute of the first such <code>base</code> element; or,
  if there is no such element, the empty string.

  <hr />

  The <dfn><code>novalidate</code></dfn> and <dfn><code>formnovalidate</code></dfn> content attributes are <a>boolean attributes</a>. If present, they indicate that the form is
  not to be validated during submission.

  The <dfn>no-validate state</dfn> of an element is true if the
  element is a <a>submit button</a> and the element's <code>formnovalidate</code> attribute is present, or if the element's
  <a>form owner</a>'s <code>novalidate</code> attribute is present,
  and false otherwise.

  <div class="example">
    This attribute is useful to include "save" buttons on forms that have validation constraints,
    to allow users to save their progress even though they haven't fully entered the data in the
    form. The following example shows a simple form that has two required fields. There are three
    buttons: one to submit the form, which requires both fields to be filled in; one to save the form
    so that the user can come back and fill it in later; and one to cancel the form altogether.

    <pre highlight="html">
&lt;form action="editor.cgi" method="post"&gt;
  &lt;p&gt;&lt;label&gt;Name: &lt;input required name=fn&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Essay: &lt;textarea required name=essay&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;input type=submit name=submit value="Submit essay"&gt;&lt;/p&gt;
  &lt;p&gt;&lt;input type=submit formnovalidate name=save value="Save essay"&gt;&lt;/p&gt;
  &lt;p&gt;&lt;input type=submit formnovalidate name=cancel value="Cancel"&gt;&lt;/p&gt;
&lt;/form&gt;
    </pre>

  </div>

  <div class="impl">

  <hr />

  The <dfn><code>action</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name, except that on getting, when the
  content attribute is missing or its value is the empty string, <a>the document's address</a>
  must be returned instead. The <dfn><code>target</code></dfn> IDL attribute
  must <a>reflect</a> the content attribute of the same name. The <dfn><code>method</code></dfn> and <dfn><code>enctype</code></dfn> IDL attributes must <a>reflect</a> the
  respective content attributes of the same name, <a>limited to only known values</a>. The
  <dfn><code>encoding</code></dfn> IDL attribute must <a>reflect</a>
  the <code>enctype</code> content attribute, <a>limited to only known
  values</a>. The <dfn><code>noValidate</code></dfn> IDL attribute must
  <a>reflect</a> the <code>novalidate</code> content attribute. The
  <dfn><code>formAction</code></dfn> IDL attribute must
  <a>reflect</a> the <code>formaction</code> content attribute,
  except that on getting, when the content attribute is missing or its value is the empty string,
  <a>the document's address</a> must be returned instead. The <dfn><code>formEnctype</code></dfn> IDL attribute must <a>reflect</a>
  the <code>formenctype</code> content attribute, <a>limited to only
  known values</a>. The <dfn><code>formMethod</code></dfn> IDL
  attribute must <a>reflect</a> the <code>formmethod</code> content
  attribute, <a>limited to only known values</a>. The <dfn><code>formNoValidate</code></dfn> IDL attribute must
  <a>reflect</a> the <code>formnovalidate</code> content
  attribute. The <dfn><code>formTarget</code></dfn> IDL attribute must
  <a>reflect</a> the <code>formtarget</code> content attribute.

  </div>

<h6 id="autofocusing-a-form-control-the-autofocus-attribute">Autofocusing a form control: the <code>autofocus</code> attribute</h6>

  The <dfn><code>autofocus</code></dfn> content attribute allows the
  author to indicate that a control is to be focused as soon as the page is loaded or as soon as the
  <code>dialog</code> within which it finds itself is shown, allowing the user to just start typing
  without having to manually focus the main control.

  The <code>autofocus</code> attribute is a <a>boolean
  attribute</a>.

  An element's <dfn>nearest ancestor autofocus scoping root element</dfn> is the element itself
  if the element is a <code>dialog</code> element, or else is the element's nearest ancestor
  <code>dialog</code> element, if any, or else is the element's <a>root element</a>.

  There must not be two elements with the same <a>nearest ancestor autofocus scoping root
  element</a> that both have the <code>autofocus</code> attribute
  specified.

  <div class="impl">

  When an element with the <code>autofocus</code> attribute specified
  is <a>inserted into a document</a>, user agents
  should run the following steps:

  <ol>

    <li>Let <var>target</var> be the element's <a>node document</a>.</li>

    <li>If <var>target</var> has no <a>browsing context</a>, abort these
    steps.</li>

    <li>If <var>target</var>'s <a>browsing context</a> has no <a>top-level
    browsing context</a> (e.g. it is a <a>nested browsing context</a> with no <a>parent
    browsing context</a>), abort these steps.</li>

    <li>If <var>target</var>'s <a>active sandboxing flag set</a> has the
    <a>sandboxed automatic features browsing context flag</a>, abort these steps.</li>

    <li>If <var>target</var>'s <a>origin</a> is not the <a>same</a> as the <a>origin</a> of the <a>node document</a> of the currently
    focused element in <var>target</var>'s <a>top-level browsing context</a>, abort
    these steps.</li>

    <li>If <var>target</var>'s <a>origin</a> is not the <a>same</a> as the <a>origin</a> of the <a>active document</a> of <var>target</var>'s <a>top-level browsing context</a>, abort these steps.</li>

    <li>If the user agent has already reached the last step of this list of steps in response to
    an element being <a>inserted</a> into a
    <code>Document</code> whose <a>top-level browsing context</a>'s <a>active
    document</a> is the same as <var>target</var>'s <a>top-level browsing
    context</a>'s <a>active document</a>, abort these steps.</li>

    <li>If the user has indicated (for example, by starting to type in a form control) that he
    does not wish focus to be changed, then optionally abort these steps.</li>

    <li><a>Queue a task</a> that runs the <a>focusing steps</a> for the element. User
    agents may also change the scrolling position of the document, or perform some other action that
    brings the element to the user's attention. The <a>task source</a> for this task is the
    <a>user interaction task source</a>.</li>

  </ol>

  <p class="note">
    This handles the automatic focusing during document load. The <code>show()</code> and <code>showModal()</code>
  methods of <code>dialog</code> elements also processes the <code>autofocus</code> attribute.
  </p>

  <p class="note">
    Focusing the control does not imply that the user agent must focus the browser
  window if it has lost focus.
  </p>

  The <dfn><code>autofocus</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.

  </div>

  <div class="example">
    In the following snippet, the text control would be focused when
    the document was loaded.
    <pre highlight="html">
&lt;input maxlength="256" name="q" value="" autofocus&gt;
&lt;input type="submit" value="Search"&gt;
    </pre>
  </div>

<h5 id="input-modalities-the-inputmode-attribute">Input modalities: the <code>inputmode</code> attribute</h5>

  The <dfn><code>inputmode</code></dfn> content attribute is an
  <a>enumerated attribute</a> that specifies what kind of input mechanism would be most
  helpful for users entering content into the form control.

  <div class="impl">

  User agents must recognize all the keywords and corresponding states given below, but need not
  support all of the corresponding states. If a keyword's state is not supported, the user agent
  must act as if the keyword instead mapped to the given state's fallback state, as defined below.
  This fallback behavior is transitive.

  <p class="note">
    For example, if a user agent with a QWERTY keyboard layout does not support text
  prediction and automatic capitalization, then it could treat the <code>latin-prose</code> keyword in the same way as the
  <code>verbatim</code> keyword, following the chain
  <a>Latin Prose</a> â <a>Latin Text</a> â <a>Latin Verbatim</a>.
  </p>

  </div>

  The possible keywords and states for the attributes are listed in the following table. The
  keywords are listed in the first column. Each maps to the state given in the cell in the second
  column of that keyword's row, and that state has the fallback state given in the cell in the third
  column of that row.

  <table class="three-column-nowrap">

    <thead>
    <tr>
      <th> Keyword
      </th><th> State
      </th><th> Fallback state
      </th><th> Description

    </th></tr></thead><tbody>

    <tr>
      <td> <dfn><code>verbatim</code></dfn>
      </td><td> <dfn>Latin Verbatim</dfn>
      </td><td> <a>Default</a>
      </td><td> Alphanumeric Latin-script input of non-prose content, e.g. usernames, passwords, product codes.

    </td></tr><tr>
      <td> <dfn><code>latin</code></dfn>
      </td><td> <dfn>Latin Text</dfn>
      </td><td> <a>Latin Verbatim</a>
      </td><td> Latin-script input in the user's preferred language(s), with some typing aids enabled
      (e.g. text prediction). Intended for human-to-computer communications, e.g. free-form text
      search fields.

    </td></tr><tr>
      <td> <dfn><code>latin-name</code></dfn>
      </td><td> <dfn>Latin Name</dfn>
      </td><td> <a>Latin Text</a>
      </td><td> Latin-script input in the user's preferred language(s), with typing aids intended for
      entering human names enabled (e.g. text prediction from the user's contact list and automatic
      capitalisation at every word). Intended for situations such as customer name fields.

    </td></tr><tr>
      <td> <dfn><code>latin-prose</code></dfn>
      </td><td> <dfn>Latin Prose</dfn>
      </td><td> <a>Latin Text</a>
      </td><td> Latin-script input in the user's preferred language(s), with aggressive typing aids
      intended for human-to-human communications enabled (e.g. text prediction and automatic
      capitalisation at the start of sentences). Intended for situations such as e-mails and instant
      messaging.

    </td></tr><tr>
      <td> <dfn><code>full-width-latin</code></dfn>
      </td><td> <dfn>Full-width Latin</dfn>
      </td><td> <a>Latin Prose</a>
      </td><td> Latin-script input in the user's secondary language(s), using full-width characters, with
      aggressive typing aids intended for human-to-human communications enabled (e.g. text prediction
      and automatic capitalisation at the start of sentences). Intended for latin text embedded
      inside CJK text.

    </td></tr><tr>
      <td> <dfn><code>kana</code></dfn>
      </td><td> <dfn>Kana</dfn>
      </td><td> <a>Default</a>
      </td><td> Kana or romaji input, typically hiragana input, using full-width characters, with support
      for converting to kanji. Intended for Japanese text input.

    </td></tr><tr>
      <td> <dfn><code>kana-name</code></dfn>
      </td><td> <dfn>Kana Name</dfn>
      </td><td> <a>Kana</a>
      </td><td> Kana or romaji input, typically hiragana input, using full-width characters, with support
      for converting to kanji, and with typing aids intended for entering human names enabled (e.g.
      text prediction from the user's contact list). Intended for situations such as customer name
      fields.

    </td></tr><tr>
      <td> <dfn><code>katakana</code></dfn>
      </td><td> <dfn>Katakana</dfn>
      </td><td> <a>Kana</a>
      </td><td> Katakana input, using full-width characters, with support for converting to kanji.
      Intended for Japanese text input.

    </td></tr><tr>
      <td> <dfn><code>numeric</code></dfn>
      </td><td> <dfn>Numeric</dfn>
      </td><td> <a>Default</a>
      </td><td> Numeric input, including keys for the digits 0 to 9, the user's preferred thousands
      separator character, and the character for indicating negative numbers. Intended for numeric
      codes, e.g. credit card numbers. (For numbers, prefer "<code>&lt;input type=number&gt;</code>".)

    </td></tr><tr class="rare">
      <td> <dfn><code>tel</code></dfn>
      </td><td> <dfn>Telephone</dfn>
      </td><td> <a>Numeric</a>
      </td><td> Telephone number input, including keys for the digits 0 to 9, the "#" character, and the
      "*" character. In some locales, this can also include alphabetic mnemonic labels (e.g. in the
      US, the key labeled "2" is historically also labeled with the letters A, B, and C). <a>Rarely necessary</a>; use "<code>&lt;input
      type=tel&gt;</code>" instead.

    </td></tr><tr class="rare">
      <td> <dfn><code>email</code></dfn>
      </td><td> <dfn>E-mail</dfn>
      </td><td> <a>Default</a>
      </td><td> Text input in the user's locale, with keys for aiding in the input of e-mail addresses,
      such as that for the "@" character and the "." character. <a>Rarely
      necessary</a>; use "<code>&lt;input type=email&gt;</code>" instead.

    </td></tr><tr class="rare">
      <td> <dfn><code>url</code></dfn>
      </td><td> <dfn>URL</dfn>
      </td><td> <a>Default</a>
      </td><td> Text input in the user's locale, with keys for aiding in the input of Web addresses, such
      as that for the "/" and "." characters and for quick input of strings commonly found in domain
      names such as "www." or ".co.uk". <a>Rarely necessary</a>; use "<code>&lt;input type=url&gt;</code>" instead.

  </td></tr></tbody></table>

  The last three keywords listed above are only provided for completeness,
  and are rarely necessary, as dedicated input controls exist for their usual use cases (as
  described in the table above).

  User agents <span class="impl">must</span> all support the <dfn>Default</dfn> input mode state, which corresponds to the
  user agent's default input modality. <span class="impl">This specification does not define how the
  user agent's default modality is to operate.</span> The <i>missing value default</i> is the <a>default input mode</a> state.

  <div class="impl">

  User agents should use the input modality corresponding to the state of the <code>inputmode</code> attribute when exposing a user interface for editing
  the value of a form control to which the attribute <a>applies</a>. An input modality corresponding to a state is one
  designed to fit the description of the state in the table above. This value can change
  dynamically; user agents should update their interface as the attribute changes state, unless that
  would go against the user's wishes.

  </div>

<h5 id="autofill">Autofill</h5>

<h6 id="autofilling-form-controls-the-autocomplete-attribute">Autofilling form controls: the <code>autocomplete</code> attribute</h6>

  User agents sometimes have features for helping users fill forms in, for example prefilling the
  user's address based on earlier user input. The <dfn><code>autocomplete</code></dfn> content attribute can be used to hint
  to the user agent how to, or indeed whether to, provide such a feature.

  There are two ways this attribute is used. When wearing the <dfn>autofill expectation
  mantle</dfn>, the <code>autocomplete</code> attribute describes what
  input is expected from users. When wearing the <dfn>autofill anchor mantle</dfn>, the <code>autocomplete</code> attribute describes the meaning of the given
  value.

  On an <code>input</code> element whose <code>type</code> attribute is
  in the <a>Hidden</a> state, the <code>autocomplete</code> attribute wears the <a>autofill anchor
  mantle</a>. In all other cases, it wears the <a>autofill expectation mantle</a>.

  When wearing the <a>autofill expectation mantle</a>, the <code>autocomplete</code> attribute, if specified, must have a value that
  is an ordered <a>set of space-separated tokens</a> consisting of either a single token that
  is an <a>ASCII case-insensitive</a> match for the string "<code>off</code>", or a single token that is an <a>ASCII
  case-insensitive</a> match for the string "<code>on</code>",
  or <a>autofill detail tokens</a>.

  When wearing the <a>autofill anchor
  mantle</a>, the <code>autocomplete</code> attribute, if specified, must have a value that is an ordered <a>set of
  space-separated tokens</a> consisting of just <a>autofill detail tokens</a> (i.e. the
  "<code>on</code>" and "<code>off</code>" keywords are not allowed).

  <dfn>Autofill detail tokens</dfn> are the following, in the order given below:

  <ol>

    <li>

    Optionally, a token whose first eight characters are an <a>ASCII case-insensitive</a>
    match for the string "<dfn><code>section-</code></dfn>",
    meaning that the field belongs to the named group.

    <div class="example">
      For example, if there are two shipping addresses in the form, then they could be marked up
      as:

      <pre highlight="html">
&lt;fieldset&gt;
  &lt;legend&gt;Ship the blue gift to...&lt;/legend&gt;
  &lt;p&gt; &lt;label&gt; Address:     &lt;input name=ba autocomplete="section-blue shipping street-address"&gt; &lt;/label&gt;
  &lt;p&gt; &lt;label&gt; City:        &lt;input name=bc autocomplete="section-blue shipping address-level2"&gt; &lt;/label&gt;
  &lt;p&gt; &lt;label&gt; Postal Code: &lt;input name=bp autocomplete="section-blue shipping postal-code"&gt; &lt;/label&gt;
&lt;/fieldset&gt;
&lt;fieldset&gt;
  &lt;legend&gt;Ship the red gift to...&lt;/legend&gt;
  &lt;p&gt; &lt;label&gt; Address:     &lt;input name=ra autocomplete="section-red shipping street-address"&gt; &lt;/label&gt;
  &lt;p&gt; &lt;label&gt; City:        &lt;input name=rc autocomplete="section-red shipping address-level2"&gt; &lt;/label&gt;
  &lt;p&gt; &lt;label&gt; Postal Code: &lt;input name=rp autocomplete="section-red shipping postal-code"&gt; &lt;/label&gt;
&lt;/fieldset&gt;
    </pre>

    </div>

    </li>

    <li>

    Optionally, a token that is an <a>ASCII case-insensitive</a> match for one of the
    following strings:

    <ul class="brief">

      <li>"<dfn><code>shipping</code></dfn>", meaning the field
      is part of the shipping address or contact information

      </li><li>"<dfn><code>billing</code></dfn>", meaning the field
      is part of the billing address or contact information

    </li></ul>

    </li>

    <li>

    Either of the following two options:

    <ul>

      <li>

      A token that is an <a>ASCII case-insensitive</a> match for one of the following
      <a>autofill field</a> names, excluding those that are <a>inappropriate for the
      control</a>:

      <ul class="brief">
        <li>"<code>name</code>"
        </li><li>"<code>honorific-prefix</code>"
        </li><li>"<code>given-name</code>"
        </li><li>"<code>additional-name</code>"
        </li><li>"<code>family-name</code>"
        </li><li>"<code>honorific-suffix</code>"
        </li><li>"<code>nickname</code>"
        </li><li>"<code>username</code>"
        </li><li>"<code>new-password</code>"
        </li><li>"<code>current-password</code>"
        </li><li>"<code>organization-title</code>"
        </li><li>"<code>organization</code>"
        </li><li>"<code>street-address</code>"
        </li><li>"<code>address-line1</code>"
        </li><li>"<code>address-line2</code>"
        </li><li>"<code>address-line3</code>"
        </li><li>"<code>address-level4</code>"
        </li><li>"<code>address-level3</code>"
        </li><li>"<code>address-level2</code>"
        </li><li>"<code>address-level1</code>"
        </li><li>"<code>country</code>"
        </li><li>"<code>country-name</code>"
        </li><li>"<code>postal-code</code>"
        </li><li>"<code>cc-name</code>"
        </li><li>"<code>cc-given-name</code>"
        </li><li>"<code>cc-additional-name</code>"
        </li><li>"<code>cc-family-name</code>"
        </li><li>"<code>cc-number</code>"
        </li><li>"<code>cc-exp</code>"
        </li><li>"<code>cc-exp-month</code>"
        </li><li>"<code>cc-exp-year</code>"
        </li><li>"<code>cc-csc</code>"
        </li><li>"<code>cc-type</code>"
        </li><li>"<code>transaction-currency</code>"
        </li><li>"<code>transaction-amount</code>"
        </li><li>"<code>language</code>"
        </li><li>"<code>bday</code>"
        </li><li>"<code>bday-day</code>"
        </li><li>"<code>bday-month</code>"
        </li><li>"<code>bday-year</code>"
        </li><li>"<code>sex</code>"
        </li><li>"<code>url</code>"
        </li><li>"<code>photo</code>"
      </li></ul>

      (See the table below for descriptions of these values.)

      </li>

      <li>

      The following, in the given order:

      <ol>

        <li>

        Optionally, a token that is an <a>ASCII case-insensitive</a> match for one of the
        following strings:

        <ul class="brief">

          <li>"<dfn><code>home</code></dfn>", meaning the field is
          for contacting someone at their residence

          </li><li>"<dfn><code>work</code></dfn>", meaning the field is
          for contacting someone at their workplace

          </li><li>"<dfn><code>mobile</code></dfn>", meaning the field is for contacting someone regardless of location

          </li><li>"<dfn><code>fax</code></dfn>", meaning the field
          describes a fax machine's contact details

          </li><li>"<dfn><code>pager</code></dfn>", meaning the field
          describes a pager's or beeper's contact details

        </li></ul>

        </li>

        <li>

        A token that is an <a>ASCII case-insensitive</a> match for one of the following
        <a>autofill field</a> names, excluding those that are <a>inappropriate for the
        control</a>:

        <ul class="brief">
          <li>"<code>tel</code>"
          </li><li>"<code>tel-country-code</code>"
          </li><li>"<code>tel-national</code>"
          </li><li>"<code>tel-area-code</code>"
          </li><li>"<code>tel-local</code>"
          </li><li>"<code>tel-local-prefix</code>"
          </li><li>"<code>tel-local-suffix</code>"
          </li><li>"<code>tel-extension</code>"
          </li><li>"<code>email</code>"
          </li><li>"<code>impp</code>"
        </li></ul>

        (See the table below for descriptions of these values.)

        </li>

      </ol>

      </li>

    </ul>

    </li>

  </ol>

  As noted earlier, the meaning of the attribute and its keywords depends on the mantle that the
  attribute is wearing.

  <dl class="switch">

    <dt>When wearing the <a>autofill expectation mantle</a>...

    </dt><dd>

    The "<dfn><code>off</code></dfn>" keyword indicates either
    that the control's input data is particularly sensitive (for example the activation code for a
    nuclear weapon); or that it is a value that will never be reused (for example a one-time-key for a
    bank login) and the user will therefore have to explicitly enter the data each time, instead of
    being able to rely on the UA to prefill the value for him; or that the document provides its own
    autocomplete mechanism and does not want the user agent to provide autocompletion values.

    The "<dfn><code>on</code></dfn>" keyword indicates that the
    user agent is allowed to provide the user with autocompletion values, but does not provide any
    further information about what kind of data the user might be expected to enter. User agents would
    have to use heuristics to decide what autocompletion values to suggest.

    The <a>autofill field</a> listed above indicate that the user agent is allowed to
    provide the user with autocompletion values, and specifies what kind of value is expected. The
    meaning of each such keyword is described in the table below.

    If the <code>autocomplete</code> attribute is omitted, the default
    value corresponding to the state of the element's <a>form owner</a>'s <code>autocomplete</code> attribute is used instead (either "<code>on</code>" or "<code>off</code>"). If there is no <a>form owner</a>, then the
    value "<code>on</code>" is used.

    </dd>

    <dt>When wearing the <a>autofill anchor mantle</a>...

    </dt><dd>

    The <a>autofill field</a> listed above indicate that the value of the particular kind
    of value specified is that value provided for this element. The meaning of each such keyword is
    described in the table below.

    <div class="example">
      In this example the page has explicitly specified the currency and amount of the
      transaction. The form requests a credit card and other billing details. The user agent could
      use this information to suggest a credit card that it knows has sufficient balance and that
      supports the relevant currency.

      <pre highlight="html">
&lt;form method=post action="step2.cgi"&gt;
  &lt;input type=hidden autocomplete=transaction-currency value="CHF"&gt;
  &lt;input type=hidden autocomplete=transaction-amount value="15.00"&gt;
  &lt;p&gt;&lt;label&gt;Credit card number: &lt;input type=text inputmode=numeric autocomplete=cc-number&gt;&lt;/label&gt;
  &lt;p&gt;&lt;label&gt;Expiry Date: &lt;input type=month autocomplete=cc-exp&gt;&lt;/label&gt;
  &lt;p&gt;&lt;input type=submit value="Continue..."&gt;
&lt;/form&gt;
    </pre>

    </div>

    </dd>

  </dl>

  The <dfn>autofill field</dfn> keywords relate to each other as described in the table below. Each field name
  listed on a row of this table corresponds to the meaning given in the cell for that row in the
  column labeled "Meaning". Some fields correspond to subparts of other fields; for example, a
  credit card expiry date can be expressed as one field giving both the month and year of expiry
  ("<code>cc-exp</code>"), or as two fields, one giving the
  month ("<code>cc-exp-month</code>") and one the year
  ("<code>cc-exp-year</code>"). In such cases, the names of
  the broader fields cover multiple rows, in which the narrower fields are defined.

  <p class="note">
    Generally, authors are encouraged to use the broader fields rather than the
  narrower fields, as the narrower fields tend to expose Western biases. For example, while it is
  common in some Western cultures to have a given name and a family name, in that order (and thus
  often referred to as a <i>first name</i> and a <i>surname</i>), many cultures put the family name
  first and the given name second, and many others simply have one name (a <i>mononym</i>). Having a
  single field is therefore more flexible.
  </p>

  Some fields are only appropriate for certain form controls. An <a>autofill field</a> name
  is <dfn>inappropriate for a control</dfn> if the control
  does not belong to the group listed for that <a>autofill field</a> in the fifth column of
  the first row describing that <a>autofill field</a> in the table below. What controls fall
  into each group is described below the table.

  <table>
    <thead>
    <tr>
      <th colspan="4"> Field name
      </th><th> Meaning
      </th><th> Canonical Format
      </th><th> Canonical Format Example
      </th><th> Control group
    </th></tr></thead><tbody>
    <tr>
      <td colspan="4">"<dfn><code>name</code></dfn>"
      </td><td>Full name
      </td><td>Free-form text, no newlines
      </td><td>Sir Timothy John Berners-Lee, OM, KBE, FRS, FREng, FRSA
      </td><td><a>Text</a>
    </td></tr><tr>
      <td rowspan="5" class="non-rectangular-cell-indentation">
      </td><td colspan="3">"<dfn><code>honorific-prefix</code></dfn>"
      </td><td>Prefix or title (e.g. "Mr.", "Ms.", "Dr.", "<span lang="fr">M<sup>lle</sup></span>")
      </td><td>Free-form text, no newlines
      </td><td>Sir
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="3">"<dfn><code>given-name</code></dfn>"
      </td><td>Given name (in some Western cultures, also known as the <i>first name</i>)
      </td><td>Free-form text, no newlines
      </td><td>Timothy
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="3">"<dfn><code>additional-name</code></dfn>"
      </td><td>Additional names (in some Western cultures, also known as <i>middle names</i>, forenames other than the first name)
      </td><td>Free-form text, no newlines
      </td><td>John
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="3">"<dfn><code>family-name</code></dfn>"
      </td><td>Family name (in some Western cultures, also known as the <i>last name</i> or <i>surname</i>)
      </td><td>Free-form text, no newlines
      </td><td>Berners-Lee
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="3">"<dfn><code>honorific-suffix</code></dfn>"
      </td><td>Suffix (e.g. "Jr.", "B.Sc.", "MBASW", "II")
      </td><td>Free-form text, no newlines
      </td><td>OM, KBE, FRS, FREng, FRSA
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>nickname</code></dfn>"
      </td><td>Nickname, screen name, handle: a typically short name used instead of the full name
      </td><td>Free-form text, no newlines
      </td><td>Tim
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>organization-title</code></dfn>"
      </td><td>Job title (e.g. "Software Engineer", "Senior Vice President", "Deputy Managing Director")
      </td><td>Free-form text, no newlines
      </td><td>Professor
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>username</code></dfn>"
      </td><td>A username
      </td><td>Free-form text, no newlines
      </td><td>timbl
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>new-password</code></dfn>"
      </td><td>A new password (e.g. when creating an account or changing a password)
      </td><td>Free-form text, no newlines
      </td><td>GUMFXbadyrS3
      </td><td><a>Password</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>current-password</code></dfn>"
      </td><td>The current password for the account identified by the <code>username</code> field (e.g. when logging in)
      </td><td>Free-form text, no newlines
      </td><td>qwerty
      </td><td><a>Password</a>
    </td></tr></tbody><tbody>
    <tr>
      <td colspan="4">"<dfn><code>organization</code></dfn>"
      </td><td>Company name corresponding to the person, address, or contact information in the other fields associated with this field
      </td><td>Free-form text, no newlines
      </td><td>World Wide Web Consortium
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>street-address</code></dfn>"
      </td><td>Street address (multiple lines, newlines preserved)
      </td><td>Free-form text
      </td><td>32 Vassar Street<br>
MIT Room 32-G524
      </td><td><a>Multiline</a>
    </td></tr><tr>
      <td rowspan="3" class="non-rectangular-cell-indentation">
      </td><td colspan="3">"<dfn><code>address-line1</code></dfn>"
      </td><td rowspan="3">Street address (one line per field)
      </td><td>Free-form text, no newlines
      </td><td>32 Vassar Street
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="3">"<dfn><code>address-line2</code></dfn>"
      </td><td>Free-form text, no newlines
      </td><td>MIT Room 32-G524
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="3">"<dfn><code>address-line3</code></dfn>"
      </td><td>Free-form text, no newlines
      </td><td>
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>address-level4</code></dfn>"
      </td><td>The most fine-grained <a>administrative level</a>, in
      addresses with four administrative levels
      </td><td>Free-form text, no newlines
      </td><td>
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>address-level3</code></dfn>"
      </td><td>The <a>third administrative level</a>, in addresses with
      three or more administrative levels
      </td><td>Free-form text, no newlines
      </td><td>
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>address-level2</code></dfn>"
      </td><td>The <a>second administrative level</a>, in addresses with
      two or more administrative levels; in the countries with two administrative levels, this would
      typically be the city, town, village, or other locality within which the relevant street
      address is found
      </td><td>Free-form text, no newlines
      </td><td>Cambridge
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>address-level1</code></dfn>"
      </td><td>The broadest <a>administrative level</a> in the address,
      i.e. the province within which the locality is found; for example, in the US, this would be the
      state; in Switzerland it would be the canton; in the UK, the post town
      </td><td>Free-form text, no newlines
      </td><td>MA
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>country</code></dfn>"
      </td><td>Country code
      </td><td>Valid <a>ISO 3166-1-alpha-2 country code</a> [[!ISO3166]]
      </td><td>US
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>country-name</code></dfn>"
      </td><td>Country name
      </td><td>Free-form text, no newlines; <a>derived from <code>country</code> in some cases</a>
      </td><td>US
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>postal-code</code></dfn>"
      </td><td>Postal code, post code, ZIP code, CEDEX code (if CEDEX, append "CEDEX", and the <i lang="fr">arrondissement</i>, if relevant, to the <code>address-level2</code> field)
      </td><td>Free-form text, no newlines
      </td><td>02139
      </td><td><a>Text</a>
    </td></tr></tbody><tbody>
    <tr>
      <td colspan="4">"<dfn><code>cc-name</code></dfn>"
      </td><td>Full name as given on the payment instrument
      </td><td>Free-form text, no newlines
      </td><td>Tim Berners-Lee
      </td><td><a>Text</a>
    </td></tr><tr>
      <td rowspan="3" class="non-rectangular-cell-indentation">
      </td><td colspan="3">"<dfn><code>cc-given-name</code></dfn>"
      </td><td>Given name as given on the payment instrument (in some Western cultures, also known as the <i>first name</i>)
      </td><td>Free-form text, no newlines
      </td><td>Tim
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="3">"<dfn><code>cc-additional-name</code></dfn>"
      </td><td>Additional names given on the payment instrument (in some Western cultures, also known as <i>middle names</i>, forenames other than the first name)
      </td><td>Free-form text, no newlines
      </td><td>
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="3">"<dfn><code>cc-family-name</code></dfn>"
      </td><td>Family name given on the payment instrument (in some Western cultures, also known as the <i>last name</i> or <i>surname</i>)
      </td><td>Free-form text, no newlines
      </td><td>Berners-Lee
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>cc-number</code></dfn>"
      </td><td>Code identifying the payment instrument (e.g. the credit card number)
      </td><td><a>ASCII digits</a>
      </td><td>4114360123456785
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>cc-exp</code></dfn>"
      </td><td>Expiration date of the payment instrument
      </td><td><a>Valid month string</a>
      </td><td>2014-12
      </td><td><a>Month</a>
    </td></tr><tr>
      <td rowspan="2" class="non-rectangular-cell-indentation">
      </td><td colspan="3">"<dfn><code>cc-exp-month</code></dfn>"
      </td><td>Month component of the expiration date of the payment instrument
      </td><td><a>Valid integer</a> in the range 1..12
      </td><td>12
      </td><td><a>Numeric</a>
    </td></tr><tr>
      <td colspan="3">"<dfn><code>cc-exp-year</code></dfn>"
      </td><td>Year component of the expiration date of the payment instrument
      </td><td><a>Valid integer</a> greater than zero
      </td><td>2014
      </td><td><a>Numeric</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>cc-csc</code></dfn>"
      </td><td>Security code for the payment instrument (also known as the card security code (CSC), card validation code (CVC), card verification value (CVV), signature panel code (SPC), credit card ID (CCID), etc)
      </td><td><a>ASCII digits</a>
      </td><td>419
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>cc-type</code></dfn>"
      </td><td>Type of payment instrument
      </td><td>Free-form text, no newlines
      </td><td>Visa
      </td><td><a>Text</a>
    </td></tr></tbody><tbody>
    <tr>
      <td colspan="4">"<dfn><code>transaction-currency</code></dfn>"
      </td><td>The currency that the user would prefer the transaction to use
      </td><td>ISO 4217 currency code [[!ISO4217]]
      </td><td>GBP
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>transaction-amount</code></dfn>"
      </td><td>The amount that the user would like for the transaction (e.g. when entering a bid or sale price)
      </td><td><a>Valid floating-point number</a>
      </td><td>401.00
      </td><td><a>Numeric</a>
    </td></tr></tbody><tbody>
    <tr>
      <td colspan="4">"<dfn><code>language</code></dfn>"
      </td><td>Preferred language
      </td><td>Valid BCP 47 language tag [[!BCP47]]
      </td><td>en
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>bday</code></dfn>"
      </td><td>Birthday
      </td><td><a>Valid date string</a>
      </td><td>1955-06-08
      </td><td><a>Date</a>
    </td></tr><tr>
      <td rowspan="3" class="non-rectangular-cell-indentation">
      </td><td colspan="3">"<dfn><code>bday-day</code></dfn>"
      </td><td>Day component of birthday
      </td><td><a>Valid integer</a> in the range 1..31
      </td><td>8
      </td><td><a>Numeric</a>
    </td></tr><tr>
      <td colspan="3">"<dfn><code>bday-month</code></dfn>"
      </td><td>Month component of birthday
      </td><td><a>Valid integer</a> in the range 1..12
      </td><td>6
      </td><td><a>Numeric</a>
    </td></tr><tr>
      <td colspan="3">"<dfn><code>bday-year</code></dfn>"
      </td><td>Year component of birthday
      </td><td><a>Valid integer</a> greater than zero
      </td><td>1955
      </td><td><a>Numeric</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>sex</code></dfn>"
      </td><td>Gender identity (e.g. Female, Fa'afafine)
      </td><td>Free-form text, no newlines
      </td><td>Male
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>url</code></dfn>"
      </td><td>Home page or other Web page corresponding to the company, person, address, or contact information in the other fields associated with this field
      </td><td><a>Valid URL</a>
      </td><td>http://www.w3.org/People/Berners-Lee/
      </td><td><a>URL</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>photo</code></dfn>"
      </td><td>Photograph, icon, or other image corresponding to the company, person, address, or contact information in the other fields associated with this field
      </td><td> <a>Valid URL</a>
      </td><td>http://www.w3.org/Press/Stock/Berners-Lee/2001-europaeum-eighth.jpg
      </td><td> <a>URL</a>
    </td></tr></tbody><tbody>
    <tr>
      <td colspan="4">"<dfn><code>tel</code></dfn>"
      </td><td>Full telephone number, including country code
      </td><td><a>ASCII digits</a> and U+0020 SPACE characters, prefixed by a U+002B PLUS SIGN character (+)
      </td><td>+1 617 253 5702
      </td><td><a>Tel</a>
    </td></tr><tr>
      <td rowspan="6" class="non-rectangular-cell-indentation">
      </td><td colspan="3">"<dfn><code>tel-country-code</code></dfn>"
      </td><td>Country code component of the telephone number
      </td><td><a>ASCII digits</a> prefixed by a U+002B PLUS SIGN character (+)
      </td><td>+1
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="3">"<dfn><code>tel-national</code></dfn>"
      </td><td>Telephone number without the county code component, with a country-internal prefix applied if applicable
      </td><td><a>ASCII digits</a> and U+0020 SPACE characters
      </td><td>617 253 5702
      </td><td><a>Text</a>
    </td></tr><tr>
      <td rowspan="4" class="non-rectangular-cell-indentation">
        </td><td colspan="2">"<dfn><code>tel-area-code</code></dfn>"
        </td><td>Area code component of the telephone number, with a country-internal prefix applied if applicable
        </td><td><a>ASCII digits</a>
        </td><td>617
        </td><td><a>Text</a>
    </td></tr><tr>
        <td colspan="2">"<dfn><code>tel-local</code></dfn>"
        </td><td>Telephone number without the country code and area code components
        </td><td><a>ASCII digits</a>
        </td><td>2535702
        </td><td><a>Text</a>
    </td></tr><tr>
        <td rowspan="2" class="non-rectangular-cell-indentation">
        </td><td>"<dfn><code>tel-local-prefix</code></dfn>"
        </td><td>First part of the component of the telephone number that follows the area code, when that component is split into two components
        </td><td><a>ASCII digits</a>
        </td><td>253
        </td><td><a>Text</a>
    </td></tr><tr>
        <td>"<dfn><code>tel-local-suffix</code></dfn>"
        </td><td>Second part of the component of the telephone number that follows the area code, when that component is split into two components
        </td><td><a>ASCII digits</a>
        </td><td>5702
        </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>tel-extension</code></dfn>"
      </td><td>Telephone number internal extension code
      </td><td><a>ASCII digits</a>
      </td><td>1000
      </td><td><a>Text</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>email</code></dfn>"
      </td><td>E-mail address
      </td><td><a>Valid e-mail address</a>
      </td><td>timbl@w3.org
      </td><td><a>E-mail</a>
    </td></tr><tr>
      <td colspan="4">"<dfn><code>impp</code></dfn>"
      </td><td>URL representing an instant messaging protocol endpoint (for example, "<code>aim:goim?screenname=example</code>" or "<code>xmpp:fred@example.net</code>")
      </td><td><a>Valid URL</a>
      </td><td>irc://example.org/timbl,isuser
      </td><td><a>URL</a>
  </td></tr></tbody></table>

  The groups correspond to controls as follows:

  <dl>

    <dt><dfn>Text</dfn>

    </dt><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Hidden</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Text</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Search</a> state
    </dd><dd><code>textarea</code> elements
    </dd><dd><code>select</code> elements

    </dd><dt><dfn>Multiline</dfn>

    </dt><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Hidden</a> state
    </dd><dd><code>textarea</code> elements
    </dd><dd><code>select</code> elements

    </dd><dt><dfn>Password</dfn>

    </dt><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Hidden</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Text</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Search</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Password</a> state
    </dd><dd><code>textarea</code> elements
    </dd><dd><code>select</code> elements

    </dd><dt><dfn>URL</dfn>

    </dt><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Hidden</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Text</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Search</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>URL</a> state
    </dd><dd><code>textarea</code> elements
    </dd><dd><code>select</code> elements

    </dd><dt><dfn>E-mail</dfn>

    </dt><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Hidden</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Text</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Search</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>E-mail</a> state
    </dd><dd><code>textarea</code> elements
    </dd><dd><code>select</code> elements

    </dd><dt><dfn>Tel</dfn>

    </dt><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Hidden</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Text</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Search</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Telephone</a> state
    </dd><dd><code>textarea</code> elements
    </dd><dd><code>select</code> elements

    </dd><dt><dfn>Numeric</dfn>

    </dt><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Hidden</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Text</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Search</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Number</a> state
    </dd><dd><code>textarea</code> elements
    </dd><dd><code>select</code> elements

    </dd><dt><dfn>Month</dfn>

    </dt><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Hidden</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Text</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Search</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Month</a> state
    </dd><dd><code>textarea</code> elements
    </dd><dd><code>select</code> elements

    </dd><dt><dfn>Date</dfn>

    </dt><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Hidden</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Text</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Search</a> state
    </dd><dd><code>input</code> elements with a <code>type</code> attribute in the <a>Date</a> state
    </dd><dd><code>textarea</code> elements
    </dd><dd><code>select</code> elements

  </dd></dl>

  <strong>Address levels</strong>: The "<code>address-level1</code>" â "<code>address-level4</code>" fields are used to describe
  the locality of the street address. Different locales have different numbers of levels. For
  example, the US uses two levels (state and town), the UK uses one or two depending on the address
  (the post town, and in some cases the locality), and China can use three (province, city,
  district). The "<code>address-level1</code>" field
  represents the widest administrative division. Different locales order the fields in different
  ways; for example, in the US the town (level 2) precedes the state (level 1); while in Japan the
  prefecture (level 1) precedes the city (level 2) which precedes the district (level 3). Authors
  are encouraged to provide forms that are presented in a way that matches the country's conventions
  (hiding, showing, and rearranging fields accordingly as the user changes the country).

  <div class="impl">

<h6 id="processing-model">Processing model</h6>

  Each <code>input</code> element to which the <code>autocomplete</code> attribute <a>applies</a>, each <code>select</code> element, and each <code>textarea</code> element, has an
  <dfn>autofill hint set</dfn>, an <dfn>autofill scope</dfn>, an <dfn>autofill field name</dfn>, and
  an <dfn>IDL-exposed autofill value</dfn>.

  The <a>autofill field name</a> specifies the specific kind of data expected in the field,
  e.g. "<code>street-address</code>" or "<code>cc-exp</code>".

  The <a>autofill hint set</a> identifies what address or contact information type the user
  agent is to look at, e.g. "<code>shipping</code> <code>fax</code>" or "<code>billing</code>".

  The <a>autofill scope</a> identifies the group of fields that are to be filled with the
  information from the same source, and consists of the <a>autofill hint set</a> with, if
  applicable, the "<code>section-*</code>" prefix, e.g. "<code>billing</code>", "<code>section-parent shipping</code>", or "<code>section-child
  shipping home</code>".

  These values are defined as the result of running the following algorithm:

  <ol>

    <li>If the element has no <code>autocomplete</code> attribute,
    then jump to the step labeled <i>default</i>.</li>

    <li>Let <var>tokens</var> be the result of <a>splitting the attribute's value on spaces</a>.</li>

    <li>If <var>tokens</var> is empty, then jump to the step labeled
    <i>default</i>.</li>

    <li>Let <var>index</var> be the index of the last token in <var>tokens</var>.</li>

    <li>

    If the <var>index</var>th token in <var>tokens</var> is not an <a>ASCII
    case-insensitive</a> match for one of the tokens given in the first column of the following
    table, or if the number of tokens in <var>tokens</var> is greater than the maximum
    number given in the cell in the second column of that token's row, then jump to the step labeled
    <i>default</i>. Otherwise, let <var>field</var> be the string given in the cell of the
    first column of the matching row, and let <var>category</var> be the value of the cell
    in the third column of that same row.

    <table>
      <thead>
      <tr>
        <th>Token
        </th><th>Maximum number of tokens
        </th><th>Category
      </th></tr></thead><tbody>
      <tr>
        <td>"<code>off</code>"
        </td><td>1
        </td><td>Off
      </td></tr><tr>
        <td>"<code>on</code>"
        </td><td>1
        </td><td>Automatic
      </td></tr></tbody><tbody>
      <tr>
        <td>"<code>name</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>honorific-prefix</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>given-name</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>additional-name</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>family-name</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>honorific-suffix</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>nickname</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>organization-title</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>username</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>new-password</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>current-password</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>organization</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>street-address</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>address-line1</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>address-line2</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>address-line3</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>address-level4</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>address-level3</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>address-level2</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>address-level1</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>country</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>country-name</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>postal-code</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>cc-name</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>cc-given-name</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>cc-additional-name</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>cc-family-name</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>cc-number</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>cc-exp</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>cc-exp-month</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>cc-exp-year</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>cc-csc</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>cc-type</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>transaction-currency</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>transaction-amount</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>language</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>bday</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>bday-day</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>bday-month</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>bday-year</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>sex</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>url</code>"
        </td><td>3
        </td><td>Normal
      </td></tr><tr>
        <td>"<code>photo</code>"
        </td><td>3
        </td><td>Normal
      </td></tr></tbody><tbody>
      <tr>
        <td>"<code>tel</code>"
        </td><td>4
        </td><td>Contact
      </td></tr><tr>
        <td>"<code>tel-country-code</code>"
        </td><td>4
        </td><td>Contact
      </td></tr><tr>
        <td>"<code>tel-national</code>"
        </td><td>4
        </td><td>Contact
      </td></tr><tr>
        <td>"<code>tel-area-code</code>"
        </td><td>4
        </td><td>Contact
      </td></tr><tr>
        <td>"<code>tel-local</code>"
        </td><td>4
        </td><td>Contact
      </td></tr><tr>
        <td>"<code>tel-local-prefix</code>"
        </td><td>4
        </td><td>Contact
      </td></tr><tr>
        <td>"<code>tel-local-suffix</code>"
        </td><td>4
        </td><td>Contact
      </td></tr><tr>
        <td>"<code>tel-extension</code>"
        </td><td>4
        </td><td>Contact
      </td></tr><tr>
        <td>"<code>email</code>"
        </td><td>4
        </td><td>Contact
      </td></tr><tr>
        <td>"<code>impp</code>"
        </td><td>4
        </td><td>Contact
    </td></tr></tbody></table>

    </li>

    <li>If <var>category</var> is Off or Automatic but the element's <code>autocomplete</code> attribute is wearing the <a>autofill anchor
    mantle</a>, then jump to the step labeled <i>default</i>.</li>

    <li>If <var>category</var> is Off, let the element's <a>autofill field name</a>
    be the string "<code>off</code>", let its <a>autofill hint set</a> be empty, and
    let its <a>IDL-exposed autofill value</a> be the string "<code>off</code>". Then,
    abort these steps.

    </li><li>If <var>category</var> is Automatic, let the element's <a>autofill field
    name</a> be the string "<code>on</code>", let its <a>autofill hint set</a> be
    empty, and let its <a>IDL-exposed autofill value</a> be the string "<code>on</code>". Then, abort these steps.

    </li><li>Let <var>scope tokens</var> be an empty list.</li>

    <li>Let <var>hint tokens</var> be an empty set.</li>

    <li>Let <var>IDL value</var> have the same value as <var>field</var>.</li>

    <li>If the <var>index</var>th token in <var>tokens</var> is the first entry,
    then skip to the step labeled <i>done</i>.</li>

    <li>Decrement <var>index</var> by one.</li>

    <li>

    If <var>category</var> is Contact and the <var>index</var>th token in <var>tokens</var> is an <a>ASCII case-insensitive</a> match for one of the strings in
    the following list, then run the substeps that follow:

    <ul class="brief">
      <li>"<code>home</code>"
      </li><li>"<code>work</code>"
      </li><li>"<code>mobile</code>"
      </li><li>"<code>fax</code>"
      </li><li>"<code>pager</code>"
    </li></ul>

    The substeps are:

    <ol>

      <li>Let <var>contact</var> be the matching string from the list above.</li>

      <li>Insert <var>contact</var> at the start of <var>scope
      tokens</var>.</li>

      <li>Add <var>contact</var> to <var>hint tokens</var>.</li>

      <li>Let <var>IDL value</var> be the concatenation of <var>contact</var>, a
      U+0020 SPACE character, and the previous value of <var>IDL value</var> (which at this
      point will always be <var>field</var>).</li>

      <li>If the <var>index</var>th entry in <var>tokens</var> is the first
      entry, then skip to the step labeled <i>done</i>.</li>

      <li>Decrement <var>index</var> by one.</li>

    </ol>

    </li>

    <li>

    If the <var>index</var>th token in <var>tokens</var> is an <a>ASCII
    case-insensitive</a> match for one of the strings in the following list, then run the
    substeps that follow:

    <ul class="brief">
      <li>"<code>shipping</code>"
      </li><li>"<code>billing</code>"
    </li></ul>

    The substeps are:

    <ol>

      <li>Let <var>mode</var> be the matching string from the list above.</li>

      <li>Insert <var>mode</var> at the start of <var>scope
      tokens</var>.</li>

      <li>Add <var>mode</var> to <var>hint tokens</var>.</li>

      <li>Let <var>IDL value</var> be the concatenation of <var>mode</var>, a
      U+0020 SPACE character, and the previous value of <var>IDL value</var> (which at this
      point will either be <var>field</var> or the concatenation of <var>contact</var>, a space, and <var>field</var>).</li>

      <li>If the <var>index</var>th entry in <var>tokens</var> is the first
      entry, then skip to the step labeled <i>done</i>.</li>

      <li>Decrement <var>index</var> by one.</li>

    </ol>

    </li>

    <li>If the <var>index</var>th entry in <var>tokens</var> is not the first entry, then jump to
    the step labeled <i>default</i>.</li>

    <li>If the first eight characters of the <var>index</var>th token in <var>tokens</var> are not
    an <a>ASCII case-insensitive</a> match for the string "<code>section-</code>", then jump to the step labeled
    <i>default</i>.</li>

    <li>Let <var>section</var> be the <var>index</var>th token in <var>tokens</var>,
    <a>converted to ASCII lowercase</a>.</li>

    <li>Insert <var>section</var> at the start of <var>scope tokens</var>.</li>

    <li>Let <var>IDL value</var> be the concatenation of <var>section</var>, a U+0020 SPACE
    character, and the previous value of <var>IDL value</var>.</li>

    <li><i>Done</i>: Let the element's <a>autofill hint set</a> be <var>hint
    tokens</var>.

    </li><li>Let the element's <a>autofill scope</a> be <var>scope tokens</var>.

    </li><li>Let the element's <a>autofill field name</a> be <var>field</var>.

    </li><li>Let the element's <a>IDL-exposed autofill value</a> be <var>IDL value</var>.

    </li><li>Abort these steps.</li>

    <li><i>Default</i>: Let the element's <a>IDL-exposed autofill value</a> be the empty
    string, and its <a>autofill hint set</a> and <a>autofill scope</a> be empty.</li>

    <li>If the element's <code>autocomplete</code> attribute is
    wearing the <a>autofill anchor mantle</a>, then let the element's <a>autofill field
    name</a> be the empty string and abort these steps.</li>

    <li>Let <var>form</var> be the element's <a>form owner</a>, if any, or null
    otherwise.</li>

    <li>

    If <var>form</var> is not null and <var>form</var>'s <code>autocomplete</code> attribute is in the <a>off</a> state, then let the element's
    <a>autofill field name</a> be "<code>off</code>".

    Otherwise, let the element's <a>autofill field name</a> be "<code>on</code>".

    </li>

  </ol>

  <hr />

  For the purposes of autofill, a <dfn>control's data</dfn> depends on the kind of control:

  <dl>

    <dt>An <code>input</code> element with its <code>type</code> attribute
    in the <a>E-mail</a> state and with the <code>multiple</code> attribute specified</dt>

    <dd>The element's <a>value<em>s</em></a>.</dd>

    <dt>Any other <code>input</code> element</dt>
    <dt>A <code>textarea</code> element</dt>

    <dd>The element's <a>value</a>.</dd>

    <dt>A <code>select</code> element with its <code>multiple</code>
    attribute specified</dt>

    <dd>The <code>option</code> elements in the <code>select</code> element's <a>list of options</a> that have their <a>selectedness</a> set to true.</dd>

    <dt>Any other <code>select</code> element</dt>

    <dd>The <code>option</code> element in the <code>select</code> element's <a>list of options</a> that has its <a>selectedness</a> set to true.</dd>

  </dl>

  <hr />

  How to process the <a>autofill hint set</a>, <a>autofill scope</a>, and
  <a>autofill field name</a> depends on the mantle that the <code>autocomplete</code> attribute is wearing.

  <dl class="switch">

    <dt>When wearing the <a>autofill expectation mantle</a>...

    </dt><dd>

    When an element's <a>autofill field name</a> is "<code>off</code>", the user agent should not remember the <a>control's
    data</a>, and should not offer past values to the user.

    <p class="note">
    In addition, when an element's <a>autofill field name</a> is "<code>off</code>", <a>values are reset</a>
    when <a>traversing the history</a>.
  </p>

    <div class="example">
      Banks frequently do not want UAs to prefill login information:

      <pre highlight="html">
&lt;p&gt;&lt;label&gt;Account: &lt;input type="text" name="ac" autocomplete="off"&gt;&lt;/label&gt;&lt;/p&gt;
&lt;p&gt;&lt;label&gt;PIN: &lt;input type="password" name="pin" autocomplete="off"&gt;&lt;/label&gt;&lt;/p&gt;
    </pre>

    </div>

    When an element's <a>autofill field name</a> is <em>not</em> "<code>off</code>", the user agent may store the <a>control's
    data</a>, and may offer previously stored values to the user.

    <div class="example">
      For example, suppose a user visits a page with this control:

      <pre highlight="html">
&lt;select name="country"&gt;
  &lt;option&gt;Afghanistan
  &lt;option&gt;Albania
  &lt;option&gt;Algeria
  &lt;option&gt;Andorra
  &lt;option&gt;Angola
  &lt;option&gt;Antigua and Barbuda
  &lt;option&gt;Argentina
  &lt;option&gt;Armenia
  &lt;!-- <em>...</em> --&gt;
  &lt;option&gt;Yemen
  &lt;option&gt;Zambia
  &lt;option&gt;Zimbabwe
&lt;/select&gt;
    </pre>

      This might render as follows:

      <img src="images/select-country-1.png" alt="A drop-down control with a long alphabetical list of countries." />

      Suppose that on the first visit to this page, the user selects "Zambia". On the second visit,
      the user agent could duplicate the entry for Zambia at the top of the list, so that the interface
      instead looks like this:

      <img src="images/select-country-2.png" alt="The same drop-down control with the alphabetical list of countries, but with Zambia as an entry at the top." />

    </div>

    When the <a>autofill field name</a> is "<code>on</code>", the user agent should attempt to use heuristics to
    determine the most appropriate values to offer the user, e.g. based on the element's <code>name</code> value, the position of the element in the document's DOM, what
    other fields exist in the form, and so forth.

    When the <a>autofill field name</a> is one of the names of the <a>autofill fields</a> described above, the user agent should provide suggestions that
    match the meaning of the field name as given in the table earlier in this section. The
    <a>autofill hint set</a> should be used to select amongst multiple possible suggestions.

    <p class="example">For example, if a user once entered one address into fields that used the
    "<code>shipping</code>" keyword, and another address into
    fields that used the "<code>billing</code>" keyword, then in
    subsequent forms only the first address would be suggested for form controls whose <a>autofill
    hint set</a> contains the keyword "<code>shipping</code>". Both addresses might be suggested,
    however, for address-related form controls whose <a>autofill hint set</a> does not contain
    either keyword.</p>

    </dd>

    <dt>When wearing the <a>autofill anchor mantle</a>...

    </dt><dd>

    When the <a>autofill field name</a> is not the empty string, then the user agent must
    act as if the user had specified the <a>control's data</a> for the given <a>autofill
    hint set</a>, <a>autofill scope</a>, and <a>autofill field name</a>
    combination.

    </dd>

  </dl>

  When the user agent <dfn>autofills form controls</dfn>, elements
  with the same <a>form owner</a> and the same <a>autofill scope</a> must use data
  relating to the same person, address, payment instrument, and contact details. <span id="autofill-country">When a user agent autofills "<code>country</code>" and "<code>country-name</code>" fields with the same <a>form
  owner</a> and <a>autofill scope</a>, and the user agent has a value for the <code>country</code>" field(s), then the "<code>country-name</code>" field(s) must be filled using a
  human-readable name for the same country.</span> When a user agent fills in multiple fields at
  once, all fields with the same <a>autofill field name</a>, <a>form owner</a> and
  <a>autofill scope</a> must be filled with the same value.

  <p class="example">
    Suppose a user agent knows of two phone numbers, +1 555 123 1234 and +1 555 666 7777. It would
    not be conforming for the user agent to fill a field with
    <code>autocomplete="shipping tel-local-prefix"</code> with the value "123" and another field in
    the same form with <code>autocomplete="shipping tel-local-suffix"</code> with the value "7777".
    The only valid prefilled values given the aforementioned information would be "123" and "1234",
    or "666" and "7777", respectively.</p>

  <p class="example">
    Similarly, if a form for some reason contained both a "<code>cc-exp</code>" field and a
    "<code>cc-exp-month</code>" field, and the user agent prefilled the form, then the month
    component of the former would have to match the latter.
  </p>

  <div class="example">
    This requirement interacts with the <a>autofill anchor mantle</a> also. Consider the
    following markup snippet:

    <pre highlight="html">
&lt;form&gt;
  &lt;input type=hidden autocomplete="nickname" value="TreePlate"&gt;
  &lt;input type=text autocomplete="nickname"&gt;
&lt;/form&gt;
    </pre>

    The only value that a conforming user agent could suggest in the text field is
    "TreePlate", the value given by the hidden <code>input</code> element.

  </div>

  The "<code>section-*</code>" tokens in the <a>autofill scope</a> are opaque;
  user agents must not attempt to derive meaning from the precise values of these tokens.

  <p class="example">For example, it would not be conforming if the user agent decided that it
  should offer the address it knows to be the user's daughter's address for "<code>section-child</code>" and the addresses it knows to be the user's spouses' addresses for
  "<code>section-spouse</code>".</p>

  The autocompletion mechanism must be implemented by the user agent acting as if the user had
  modified the <a>control's data</a>, and must be done at a time where the element is <i>mutable</i> (e.g. just after the element has been inserted into the
  document, or when the user agent <a>stops parsing</a>). User agents
  must only prefill controls using values that the user could have entered.

  <p class="example">For example, if a <code>select</code> element only has <code>option</code>
  elements with values "Steve" and "Rebecca", "Jay", and "Bob", and has an <a>autofill field
  name</a> "<code>given-name</code>", but the user
  agent's only idea for what to prefill the field with is "Evan", then the user agent cannot prefill
  the field. It would not be conforming to somehow set the <code>select</code> element to the value
  "Evan", since the user could not have done so themselves.</p>

  A user agent prefilling a form control's <a>value</a> must not
  cause that control to <a>suffer from a type
  mismatch</a>, <a>suffer from being too long</a>,
  <a>suffer from being too short</a>, <a>suffer from an underflow</a>, <a>suffer from an overflow</a>, or <a>suffer from a step mismatch</a>. Except when <a>autofilling</a> for <code>requestAutocomplete()</code>, a user agent prefilling a form
  control's <a>value</a> must not cause that control to <a>suffer from a pattern mismatch</a> either. Where
  possible given the control's constraints, user agents must use the format given as canonical in
  the aforementioned table. Where it's not possible for the canonical format to be used, user agents
  should use heuristics to attempt to convert values so that they can be used.

  <div class="example">
    For example, if the user agent knows that the user's middle name is "Ines", and attempts to
    prefill a form control that looks like this:

    <pre highlight="html">
&lt;input name=middle-initial maxlength=1 autocomplete="additional-name"&gt;
    </pre>

    ...then the user agent could convert "Ines" to "I" and prefill it that way.

  </div>

  <div class="example">
    A more elaborate example would be with month values. If the user agent knows that the user's
    birthday is the 27th of July 2012, then it might try to prefill all of the following controls
    with slightly different values, all driven from this information:

    <table>
    <tbody><tr>
      <td>
      <pre highlight="html">
&lt;input name=b type=month autocomplete="bday"&gt;
    </pre>
      </td><td>
      2012-07
      </td><td>
      The day is dropped since the <a>Month</a> state only accepts a
      month/year combination.
    </td></tr><tr>
      <td>
      <pre highlight="html">
&lt;select name=c autocomplete="bday"&gt;
  &lt;option&gt;Jan
  &lt;option&gt;Feb
  <em>...</em>
  &lt;option&gt;Jul
  &lt;option&gt;Aug
  <em>...</em>
&lt;/select&gt;
    </pre>
      </td><td>
      July
      </td><td>
      The user agent picks the month from the listed options, either by noticing there are twelve
      options and picking the 7th, or by recognizing that one of the strings (three characters "Jul"
      followed by a newline and a space) is a close match for the name of the month (July) in one of
      the user agent's supported languages, or through some other similar mechanism.
    </td></tr><tr>
      <td>
      <pre highlight="html">
&lt;input name=a type=number min=1 max=12 autocomplete="bday-month"&gt;
    </pre>
      </td><td>
      7
      </td><td>
      User agent converts "July" to a month number in the range 1..12, like the field.
    </td></tr><tr>
      <td>
      <pre highlight="html">
&lt;input name=a type=number min=0 max=11 autocomplete="bday-month"&gt;
    </pre>
      </td><td>
      6
      </td><td>
      User agent converts "July" to a month number in the range 0..11, like the field.
    </td></tr><tr>
      <td>
      <pre highlight="html">
&lt;input name=a type=number min=1 max=11 autocomplete="bday-month"&gt;
    </pre>
      </td><td>
      </td><td>
      User agent doesn't fill in the field, since it can't make a good guess as to what the form expects.
    </td></tr></tbody></table>

  </div>

  A user agent may allow the user to override an element's <a>autofill field name</a>, e.g.
  to change it from "<code>off</code>" to "<code>on</code>" to allow values to be remembered and prefilled despite
  the page author's objections, or to always "<code>off</code>",
  never remembering values.

  More specifically, user agents may in particular consider replacing the <a>autofill field
  name</a> of form controls that match the description given in the first column of the following
  table, when their <a>autofill field name</a> is either "<code>on</code>" or "<code>off</code>", with the value given in the second cell of that
  row. If this table is used, the replacements must be done in <a>tree order</a>, since all
  but the first row references the <a>autofill field name</a> of earlier elements. When the
  descriptions below refer to form controls being preceded or followed by others, they mean in the
  list of <a>listed elements</a> that share the same <a>form owner</a>.

  <table>

    <thead>
    <tr>
      <th>Form control
      </th><th>New <a>autofill field name</a>

    </th></tr></thead><tbody>

    <tr>

      <td>

      an <code>input</code> element whose <code>type</code> attribute is in
      the <a>Text</a> state that is followed by an
      <code>input</code> element whose <code>type</code> attribute is in
      the <a>Password</a> state

      </td><td>

      "<code>username</code>"

    </td></tr><tr>

      <td>

      an <code>input</code> element whose <code>type</code> attribute is in
      the <a>Password</a> state that is preceded by an
      <code>input</code> element whose <a>autofill field name</a> is "<code>username</code>"

      </td><td>

      "<code>current-password</code>"

    </td></tr><tr>

      <td>

      an <code>input</code> element whose <code>type</code> attribute is in
      the <a>Password</a> state that is preceded by an
      <code>input</code> element whose <a>autofill field name</a> is "<code>current-password</code>"

      </td><td>

      "<code>new-password</code>"

    </td></tr><tr>

      <td>

      an <code>input</code> element whose <code>type</code> attribute is in
      the <a>Password</a> state that is preceded by an
      <code>input</code> element whose <a>autofill field name</a> is "<code>new-password</code>"

      </td><td>

      "<code>new-password</code>"

  </td></tr></tbody></table>

  The <dfn><code>autocomplete</code></dfn> IDL attribute, on getting,
  must return the element's <a>IDL-exposed autofill value</a>, and on setting, must
  <a>reflect</a> the content attribute of the same name.

  </div>

  <div class="impl">

<h6 id="user-interface-for-bulk-autofill">User interface for bulk autofill</h6>

  When the <dfn><code>requestAutocomplete()</code></dfn>
  method on a <code>form</code> element is invoked, the user agent must run the following steps:

  <ol>

    <li>Let <var>form</var> be the element on which the method was invoked.</li>

    <li>

    If any of the following conditions are met, then <a>queue a task</a> to <a>fail the
    autofill request</a> on <var>form</var> with the reason "<code>disabled</code>", and abort these steps:

    <ul>

      <li>the algorithm is not <a>allowed to show a popup</a></li>

      <li><var>form</var>'s <a>node document</a> is not <a>fully
      active</a></li>

      <li><var>form</var>'s <code>autocomplete</code>
      attribute is in the <a>off</a> state</li>

      <li>the user has disabled this feature for this <var>form</var>'s
      <a>node document</a>'s <a>origin</a></li>

      <li>the user agent does not support this <var>form</var>'s fields (e.g. the form
      has different fields whose <a>autofill scope</a> use different "<code>section-*</code>" tokens)</li>

      <li>the <var>form</var> was obtained via unencrypted channels and the user agent
      does not support autofill in such situations</li>

      <li>another instance of this algorithm is already being run for <var>form</var></li>

    </ul>

    <p class="note">
    User agents are encouraged to log the precise cause in a developer console, to
    aid debugging.
  </p>

    </li>

    <li>Let <var>pending autofills</var> be an initially empty list of <a>submittable elements</a>, each annotated with a string known as the
    <i>original autocomplete value</i>.</li>

    <li>

    For each element that matches the following criteria, add the element to <var>pending autofills</var>, with the <i>original autocomplete value</i> annotation being
    the value of the element's <code>autocomplete</code>
    attribute:

    <ul>

      <li>the element's <a>form owner</a> is <var>form</var></li>

      <li>the element is <i>mutable</i></li>

      <li>the element is an <code>input</code> element to which the <code>autocomplete</code> attribute currently <a>applies</a>, or, the element is a <code>textarea</code>
      element, or, the element is a <code>select</code> element</li>

      <li>the element's <code>autocomplete</code> attribute is
      wearing the <a>autofill expectation mantle</a></li>

      <li>the element's <a>autofill field name</a> is neither "<code>off</code>" nor "<code>on</code>"</li>

    </ul>

    </li>

    <li>Return, but continue running these steps <a>in parallel</a>.</li>

    <li>Provide an interface for the user to efficiently fill in some or all of the fields listed
    in <var>pending autofills</var>. Await the user's input. The user agent may include additional
    (immutable) information, e.g. <a>data</a> obtained from elements
    with an <code>autocomplete</code> attribute wearing the
    <a>autofill anchor mantle</a>.</li>

    <li>

    <a>Queue a task</a> to run the following steps:

    <ol>

      <li>

      If any of the following conditions are met, then <a>fail the autofill request</a> on
      <var>form</var> with the reason "<code>disabled</code>", and abort these steps:

      <ul>

        <li><var>form</var> is no longer <a>in a <code>Document</code></a></li>

        <li><var>form</var>'s <a>node document</a> is no longer <a>fully
        active</a></li>

        <li><var>form</var>'s <code>autocomplete</code>
        attribute is now in the <a>off</a>
        state</li>

      </ul>

      <p class="note">
    Again, user agents are encouraged to log the precise cause in a developer
      console, to aid debugging.
  </p>

      </li>

      <li>If the user canceled the operation, <a>fail the autofill request</a> on <var>form</var> with the reason "<code>cancel</code>", and abort these steps.</li>

      <li>

      For each element in <var>pending autofills</var>, run the following steps:

      <ol>

        <li>Let <var>candidate</var> be the element in question.</li>

        <li>Let <var>old autocomplete value</var> be the <i>original autocomplete
        value</i> annotation associated with <var>candidate</var> in <var>pending
        autofills</var>.</li>

        <li>

        If all of the following conditions are met, then <a>autofill</a> <var>candidate</var>:

        <ul>

          <li><var>candidate</var>'s <a>form owner</a> is <var>form</var></li>

          <li><var>candidate</var> is still <i>mutable</i></li>

          <li><var>candidate</var> is an <code>input</code> element to which the <code>autocomplete</code> attribute still <a>applies</a>, or, <var>candidate</var> is a
          <code>textarea</code> element, or, <var>candidate</var> is a <code>select</code>
          element</li>

          <li>the element's <code>autocomplete</code> attribute is
          still wearing the <a>autofill expectation mantle</a></li>

          <li><var>candidate</var>'s <a>autofill field name</a> is still equal to
          <var>old autocomplete value</var></li>

          <li>the user provided a value to autofill <var>candidate</var></li>

        </ul>

        </li>

      </ol>

      </li>

      <li>

      <a>Statically validate the constraints</a> of <var>form</var>. If the
      result was negative, then <a>fail the autofill request</a> on <var>form</var>
      with the reason "<code>invalid</code>", and abort
      these steps.

      <p class="note"><a>Statically validating the
      constraints</a> of a <code>form</code> involves firing <code>invalid</code> events to each control that does not <a>satisfy its constraints</a>.</p>

      </li>

      <li><a>Fire a simple event</a> that bubbles named <code>autocomplete</code> at <var>form</var>.</li>

    </ol>

    </li>

  </ol>

  When the user agent is required to <dfn>fail the autofill request</dfn> on a <code>form</code>
  element <var>target</var> with a reason <var>reason</var>, the user agent must
  dispatch an event that uses the <code>AutocompleteErrorEvent</code> interface, with the event type
  <code>autocompleteerror</code>, which bubbles, is not cancelable, has no default action,
  has its <code>reason</code> attribute set to <var>reason</var>, and which is <a>trusted</a>, at <var>target</var>.

  The <a>task source</a> for the <a>tasks</a> mentioned in this
  section is the <a>DOM manipulation task source</a>.

  </div>

<h6 id="the-autocompleteerrorevent-interface">The <code>AutocompleteErrorEvent</code> interface</h6>

  <pre class="idl" data-highlight="webidl">enum AutocompleteErrorReason {
  "" /* empty string */,
  "cancel",
  "disabled",
  "invalid"
};

[Constructor(DOMString type, optional AutocompleteErrorEventInit eventInitDict)]
interface AutocompleteErrorEvent : Event {
  readonly attribute AutocompleteErrorReason reason;
};

dictionary AutocompleteErrorEventInit : EventInit {
  AutocompleteErrorReason reason;
};
</pre>

  <dl class="domintro">

    <dt><var>event</var> . <code>reason</code></dt>

    <dd>

    For the <code>autocompleteerror</code> event, returns the
    general reason for the failure of the <code>requestAutocomplete()</code> method, from the list
    below.

    </dd>

  </dl>

  The defined reason codes are:

  <dl>

    <dt>"" (the empty string)</dt>

    <dd>Reason is unknown.</dd>

    <dt>"<dfn><code>cancel</code></dfn>"</dt>

    <dd>The user canceled the autofill interface.</dd>

    <dt>"<dfn><code>disabled</code></dfn>"</dt>

    <dd>

    The autofill interface is disabled for this form.

    There are many reasons why this might be the case; the precise reason is not given, to
    protect the user's privacy. Amongst these reasons are such factors as:

    <ul class="brief">

      <li>The page being delivered over an unencrypted connection (susceptible to
      man-in-the-middle attacks), when the user agent does not want to risk the user's information
      being provided to an attacker.</li>

      <li>The form having a combination of fields for which the user agent does not have a
      dedicated autofill interface.</li>

      <li>The form's <code>autocomplete</code> attribute being in
      the <a>off</a> state.</li>

      <li>The user having disabled the feature.</li>

    </ul>

    </dd>

    <dt>"<dfn><code>invalid</code></dfn>"</dt>

    <dd>The fields have been prefilled, but at least one of the controls in the form does not
    <a>satisfy its constraints</a>.</dd>

  </dl>

  <div class="impl">

  The <dfn><code>reason</code></dfn> attribute must
  return the value it was initialized to. When the object is created, this attribute must be
  initialized to the <a>empty string</a>. It
  represents the context information for the event.

  </div>

<h4 id="apis-for-the-text-field-selections">APIs for the text field selections</h4>

  The <code>input</code> and <code>textarea</code> elements define the following members in their
  DOM interfaces for handling their selection:

  <pre data-highlight="webidl">
  void <a>select</a>();
  attribute unsigned long <a>selectionStart</a>;
  attribute unsigned long <a>selectionEnd</a>;
  attribute DOMString <a>selectionDirection</a>;
  void <a>setRangeText</a>(DOMString replacement);
  void <a>setRangeText</a>(DOMString replacement, unsigned long start, unsigned long end, optional <a>SelectionMode</a> selectionMode = "preserve");
  void <a>setSelectionRange</a>(unsigned long start, unsigned long end, optional DOMString direction = "preserve");
    </pre>

  The <code>setRangeText</code> method uses the following
  enumeration:

  <pre class="idl" data-highlight="webidl">enum SelectionMode {
  "select",
  "start",
  "end",
  "preserve", // default
};
</pre>

  These methods and attributes expose and control the selection of <code>input</code> and
  <code>textarea</code> text fields.

  <dl class="domintro">

    <dt><var>element</var> . <code>select</code>()</dt>

    <dd>

    Selects everything in the text field.

    </dd>

    <dt><var>element</var> . <code>selectionStart</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the offset to the start of the selection.

    Can be set, to change the start of the selection.

    </dd>

    <dt><var>element</var> . <code>selectionEnd</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the offset to the end of the selection.

    Can be set, to change the end of the selection.

    </dd>

    <dt><var>element</var> . <code>selectionDirection</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the current direction of the selection.

    Can be set, to change the direction of the selection.

    The possible values are "<code>forward</code>", "<code>backward</code>", and "<code>none</code>".

    </dd>

    <dt><var>element</var> . <code>setSelectionRange</code>(<var>start</var>, <var>end</var> [, <var>direction</var>] )</dt>

    <dd>

    Changes the selection to cover the given substring in the given direction. If the direction
    is omitted, it will be reset to be the platform default (none or forward).

    </dd>

    <dt><var>element</var> . <code>setRangeText</code>(<var>replacement</var> [, <var>start</var>, <var>end</var> [, <var>selectionMode</var> ] ] )</dt>

    <dd>

    Replaces a range of text with the new text. If the <var>start</var> and <var>end</var> arguments are not provided, the range is assumed to be the selection.

    The final argument determines how the selection should be set after the text has been
    replaced. The possible values are:

    <dl>

      <dt>"<code>select</code>"</dt>

      <dd>Selects the newly inserted text.</dd>

      <dt>"<code>start</code>"</dt>

      <dd>Moves the selection to just before the inserted text.</dd>

      <dt>"<code>end</code>"</dt>

      <dd>Moves the selection to just after the selected text.</dd>

      <dt>"<code>preserve</code>"</dt>

      <dd>Attempts to preserve the selection. This is the default.</dd>

    </dl>

    </dd>

  </dl>

  <div class="impl">

  For <code>input</code> elements, calling these methods while they <a>don't apply</a>, and getting or setting these attributes while they <a>don't apply</a>, must throw an <code>InvalidStateError</code> exception. Otherwise, they
  must act as described below.

  For <code>input</code> elements, these methods and attributes must operate on the element's
  <a>value</a>. For <code>textarea</code> elements, these methods and
  attributes must operate on the element's <a>raw
  value</a>.

  Where possible, user interface features for changing the text selection in <code>input</code>
  and <code>textarea</code> elements must be implemented in terms of the DOM API described in this
  section, so that, e.g., all the same events fire.

  The selections of <code>input</code> and <code>textarea</code> elements have a
  <i>direction</i>, which is either <i>forward</i>, <i>backward</i>, or <i>none</i>. This direction
  is set when the user manipulates the selection. The exact meaning of the selection direction
  depends on the platform.

  <p class="note">
    On Windows, the direction indicates the position of the caret relative to the
  selection: a <i>forward</i> selection has the caret at the end of the selection and a
  <i>backward</i> selection has the caret at the start of the selection. Windows has no <i>none</i>
  direction. On Mac, the direction indicates which end of the selection is affected when the user
  adjusts the size of the selection using the arrow keys with the Shift modifier: the forward
  direction means the end of the selection is modified, and the backwards direction means the start
  of the selection is modified. The none direction is the default on Mac, it indicates that no
  particular direction has yet been selected. The user sets the direction implicitly when first
  adjusting the selection, based on which directional arrow key was used.
  </p>

  The <dfn><code>select()</code></dfn> method must cause the
  contents of the text field to be fully selected, with the selection direction being none, if the
  platform support selections with the direction <i>none</i>, or otherwise <i>forward</i>. The user
  agent must then <a>queue a task</a> to <a>fire a simple event</a> that bubbles named
  <code>select</code> at the element, using the <a>user interaction task
  source</a> as the task source.

  In the case of <code>input</code> elements, if the control has no text field, then the method
  must do nothing.

  <p class="example">For instance, in a user agent where <code>&lt;input type=color&gt;</code> is rendered as a color well with a
  picker, as opposed to a text field accepting a hexadecimal color code, there would be no text
  field, and thus nothing to select, and thus calls to the method are ignored.</p>

  The <dfn><code>selectionStart</code></dfn> attribute
  must, on getting, return the offset (in logical order) to the character that immediately follows
  the start of the selection. If there is no selection, then it must return the offset (in logical
  order) to the character that immediately follows the text entry cursor.

  On setting, it must act as if the <code>setSelectionRange()</code> method had been called,
  with the new value as the first argument; the current value of the <code>selectionEnd</code> attribute as the second argument,
  unless the current value of the <code>selectionEnd</code>
  is less than the new value, in which case the second argument must also be the new value; and the
  current value of the <code>selectionDirection</code>
  as the third argument.

  The <dfn><code>selectionEnd</code></dfn> attribute
  must, on getting, return the offset (in logical order) to the character that immediately follows
  the end of the selection. If there is no selection, then it must return the offset (in logical
  order) to the character that immediately follows the text entry cursor.

  On setting, it must act as if the <code>setSelectionRange()</code> method had been called,
  with the current value of the <code>selectionStart</code> attribute as the first argument,
  the new value as the second argument, and the current value of the <code>selectionDirection</code> as the third argument.

  The <dfn><code>selectionDirection</code></dfn>
  attribute must, on getting, return the string corresponding to the current selection direction: if
  the direction is <i>forward</i>, "<code>forward</code>"; if the direction is
  <i>backward</i>, "<code>backward</code>"; and otherwise, "<code>none</code>".

  On setting, it must act as if the <code>setSelectionRange()</code> method had been called,
  with the current value of the <code>selectionStart</code> attribute as the first argument,
  the current value of the <code>selectionEnd</code>
  attribute as the second argument, and the new value as the third argument.

  The <dfn><code>setSelectionRange(<var>start</var>, <var>end</var>, <var>direction</var>)</code></dfn> method
  must set the selection of the text field to the sequence of characters starting with the character
  at the <var>start</var>th position (in logical order) and ending with the character at
  the <a>(<var>end</var>-1)</a>th position. Arguments greater than the
  length of the value of the text field must be treated as pointing at the end of the text field. If
  <var>end</var> is less than or equal to <var>start</var> then the start of the
  selection and the end of the selection must both be placed immediately before the character with
  offset <var>end</var>. In UAs where there is no concept of an empty selection, this must
  set the cursor to be just before the character with offset <var>end</var>. The direction
  of the selection must be set to <i>backward</i> if <var>direction</var> is a
  <a>case-sensitive</a> match for the string "<code>backward</code>", <i>forward</i>
  if <var>direction</var> is a <a>case-sensitive</a> match for the string "<code>forward</code>" or if the platform does not support selections with the direction
  <i>none</i>, and <i>none</i> otherwise (including if the argument is omitted). The user agent must
  then <a>queue a task</a> to <a>fire a simple event</a> that bubbles named <code>select</code> at the element, using the <a>user interaction task
  source</a> as the task source.

  The <dfn><code>setRangeText(<var>replacement</var>, <var>start</var>, <var>end</var>, <var>selectMode</var>)</code></dfn> method must run the following steps:

  <ol>

    <li>

    If the method has only one argument, then let <var>start</var> and <var>end</var> have the values of the <code>selectionStart</code> attribute and the <code>selectionEnd</code> attribute respectively.

    Otherwise, let <var>start</var>, <var>end</var> have the values of the
    second and third arguments respectively.

    </li>

    <li>If <var>start</var> is greater than <var>end</var>, then throw an
    <code>IndexSizeError</code> exception and abort these steps.</li>

    <li>If <var>start</var> is greater than the length of the value of the text field,
    then set it to the length of the value of the text field.</li>

    <li>If <var>end</var> is greater than the length of the value of the text field,
    then set it to the length of the value of the text field.</li>

    <li>Let <var>selection start</var> be the current value of the <code>selectionStart</code> attribute.</li>

    <li>Let <var>selection end</var> be the current value of the <code>selectionEnd</code> attribute.</li>

    <li>If <var>start</var> is less than <var>end</var>, delete the sequence of
    characters starting with the character at the <var>start</var>th position (in logical
    order) and ending with the character at the <a>(<var>end</var>-1)</a>th
    position.</li>

    <li>Insert the value of the first argument into the text of the value of the text field,
    immediately before the <var>start</var>th character.</li>

    <li>Let <var>new length</var> be the length of the value of the first argument.</li>

    <li>Let <var>new end</var> be the sum of <var>start</var> and <var>new length</var>.</li>

    <li>

    Run the appropriate set of substeps from the following list:

    <dl class="switch">

      <dt>If the fourth argument's value is "<dfn><code>select</code></dfn>"</dt>

      <dd>

      Let <var>selection start</var> be <var>start</var>.

      Let <var>selection end</var> be <var>new end</var>.

      </dd>

      <dt>If the fourth argument's value is "<dfn><code>start</code></dfn>"</dt>

      <dd>

      Let <var>selection start</var> and <var>selection end</var> be <var>start</var>.

      </dd>

      <dt>If the fourth argument's value is "<dfn><code>end</code></dfn>"</dt>

      <dd>

      Let <var>selection start</var> and <var>selection end</var> be <var>new end</var>.

      </dd>

      <dt>If the fourth argument's value is "<dfn><code>preserve</code></dfn>" (the default)</dt>

      <dd>

      <ol>

        <li>Let <var>old length</var> be <var>end</var> minus <var>start</var>.

        </li><li>Let <var>delta</var> be <var>new length</var> minus <var>old length</var>.

        </li><li>

        If <var>selection start</var> is greater than <var>end</var>, then
        increment it by <var>delta</var>. (If <var>delta</var> is negative, i.e.
        the new text is shorter than the old text, then this will <em>decrease</em> the value of
        <var>selection start</var>.)

        Otherwise: if <var>selection start</var> is greater than <var>start</var>, then set it to <var>start</var>. (This snaps the start of the
        selection to the start of the new text if it was in the middle of the text that it
        replaced.)

        </li>

        <li>

        If <var>selection end</var> is greater than <var>end</var>, then
        increment it by <var>delta</var> in the same way.

        Otherwise: if <var>selection end</var> is greater than <var>start</var>, then set it to <var>new end</var>. (This snaps the end of the
        selection to the end of the new text if it was in the middle of the text that it
        replaced.)

        </li>

      </ol>

      </dd>

    </dl>

    </li>

    <li>

    Set the selection of the text field to the sequence of characters starting with the character
    at the <var>selection start</var>th position (in logical order) and ending with the
    character at the <a>(<var>selection end</var>-1)</a>th position. In UAs
    where there is no concept of an empty selection, this must set the cursor to be just before the
    character with offset <var>end</var>. The direction of the selection must be set to
    <i>forward</i> if the platform does not support selections with the direction <i>none</i>, and
    <i>none</i> otherwise.

    </li>

    <li><a>Queue a task</a> to <a>fire a simple event</a> that bubbles named <code>select</code> at the element, using the <a>user interaction task
    source</a> as the task source.</li>

  </ol>

  All elements to which this API <a>applies</a> have either a
  selection or a text entry cursor position at all times (even for elements that are not <a>being
  rendered</a>). User agents should follow platform conventions to determine their initial
  state.

  </div>

  Characters with no visible rendering, such as U+200D ZERO WIDTH JOINER, still count as
  characters. Thus, for instance, the selection can include just an invisible character, and the
  text insertion cursor can be placed to one side or another of such a character.

  <div class="example">
    To obtain the currently selected text, the following JavaScript suffices:

    <pre highlight="javascript">
var selectionText = control.value.substring(control.selectionStart, control.selectionEnd);
    </pre>

    ...where <var>control</var> is the <code>input</code> or <code>textarea</code>
    element.

  </div>

  <div class="example">
    To add some text at the start of a text control, while maintaining the text selection, the
    three attributes must be preserved:

    <pre highlight="javascript">
var oldStart = control.selectionStart;
var oldEnd = control.selectionEnd;
var oldDirection = control.selectionDirection;
var prefix = "http://";
control.value = prefix + control.value;
control.setSelectionRange(oldStart + prefix.length, oldEnd + prefix.length, oldDirection);
    </pre>

    ...where <var>control</var> is the <code>input</code> or <code>textarea</code>
    element.

  </div>

<h4 id="constraints">Constraints</h4>

<h5 id="definitions">Definitions</h5>

  <div class="impl">

  A <a>submittable element</a> is a <dfn>candidate for constraint
  validation</dfn> except when a condition has <dfn>barred
  the element from constraint validation</dfn>. (For example, an element is <a>barred from
  constraint validation</a> if it is an <code>object</code> element.)

  An element can have a <dfn>custom validity error message</dfn> defined. Initially, an element
  must have its <a>custom validity error message</a> set to the empty string. When its value
  is not the empty string, the element is <a>suffering from a custom error</a>. It can be set
  using the <code>setCustomValidity()</code> method. The user
  agent should use the <a>custom validity error message</a> when alerting the user to the
  problem with the control.

  An element can be constrained in various ways. The following is the list of <dfn>validity
  states</dfn> that a form control can be in, making the control invalid for the purposes of
  constraint validation. (The definitions below are non-normative; other parts of this specification
  define more precisely when each state applies or does not.)

  <dl>

    <dt> <dfn>Suffering from being missing</dfn> </dt>

    <dd> When a control has no <a>value</a> but has a <code>required</code> attribute (<code>input</code> <code>required</code>, <code>textarea</code> <code>required</code>); or, in the case of an element in a <i>radio button group</i>, any of the other elements in the group has a
    <code>required</code> attribute; or, for <code>select</code>
    elements, none of the <code>option</code> elements have their <a>selectedness</a> set (<code>select</code> <code>required</code>).</dd>

    <dt> <dfn>Suffering from a type mismatch</dfn> </dt>

    <dd> When a control that allows arbitrary user input has a <a>value</a> that is not in the correct syntax (<a>E-mail</a>, <a>URL</a>).
    </dd>

    <dt> <dfn>Suffering from a pattern mismatch</dfn> </dt>

    <dd> When a control has a <a>value</a> that doesn't satisfy the
    <code>pattern</code> attribute.</dd>

    <dt> <dfn>Suffering from being too long</dfn> </dt>

    <dd> When a control has a <a>value</a> that is too long for the
    <a>form control <code>maxlength</code> attribute</a>
    (<code>input</code> <code>maxlength</code>, <code>textarea</code>
    <code>maxlength</code>). </dd>

    <dt> <dfn>Suffering from being too short</dfn> </dt>

    <dd> When a control has a <a>value</a> that is too short for the
    <a>form control <code>minlength</code> attribute</a>
    (<code>input</code> <code>minlength</code>, <code>textarea</code>
    <code>minlength</code>). </dd>

    <dt> <dfn>Suffering from an underflow</dfn> </dt>

    <dd> When a control has a <a>value</a> that is not the empty
    string and is too low for the <code>min</code> attribute.</dd>

    <dt> <dfn>Suffering from an overflow</dfn> </dt>

    <dd> When a control has a <a>value</a> that is not the empty
    string and is too high for the <code>max</code> attribute.</dd>

    <dt> <dfn>Suffering from a step mismatch</dfn> </dt>

    <dd> When a control has a <a>value</a> that doesn't fit the
    rules given by the <code>step</code> attribute.</dd>

    <dt> <dfn>Suffering from bad input</dfn> </dt>

    <dd> When a control has incomplete input and the user agent does not think the user ought to
    be able to submit the form in its current state.</dd>

    <dt> <dfn>Suffering from a custom error</dfn> </dt>

    <dd> When a control's <a>custom validity error message</a> (as set by the element's
    <code>setCustomValidity()</code> method) is not the empty
    string. </dd>

  </dl>

  <p class="note">
    An element can still suffer from these states even when the element is <a>disabled</a>; thus these states can be represented in the DOM even
  if validating the form during submission wouldn't indicate a problem to the user.
  </p>

  An element <dfn>satisfies its constraints</dfn> if it is not suffering
  from any of the above <a>validity states</a>.

  </div>

  <div class="impl">

<h5 id="constraint-validation">Constraint validation</h5>

  When the user agent is required to <dfn>statically validate the constraints</dfn> of
  <code>form</code> element <var>form</var>, it must run the following steps, which return
  either a <i>positive</i> result (all the controls in the form are valid) or a <i>negative</i>
  result (there are invalid controls) along with a (possibly empty) list of elements that are
  invalid and for which no script has claimed responsibility:

  <ol>

    <li>Let <var>controls</var> be a list of all the <a>submittable elements</a> whose <a>form owner</a> is <var>form</var>, in <a>tree order</a>.</li>

    <li>Let <var>invalid controls</var> be an initially empty list of elements.</li>

    <li>

    For each element <var>field</var> in <var>controls</var>, in <a>tree
    order</a>, run the following substeps:

    <ol>

      <li>If <var>field</var> is not a <a>candidate for constraint validation</a>,
      then move on to the next element.</li>

      <li>Otherwise, if <var>field</var> <a>satisfies its
      constraints</a>, then move on to the next element.</li>

      <li>Otherwise, add <var>field</var> to <var>invalid
      controls</var>.</li>

    </ol>

    </li>

    <li>If <var>invalid controls</var> is empty, then return a <i>positive</i> result and
    abort these steps.</li>

    <li>Let <var>unhandled invalid controls</var> be an initially empty list of
    elements.</li>

    <li>

    For each element <var>field</var> in <var>invalid controls</var>, if any,
    in <a>tree order</a>, run the following substeps:

    <ol>

      <li><a>Fire a simple event</a> named <code>invalid</code> that
      is cancelable at <var>field</var>.</li>

      <li>If the event was not canceled, then add <var>field</var> to <var>unhandled invalid controls</var>.</li>

    </ol>

    </li>

    <li>Return a <i>negative</i> result with the list of elements in the <var>unhandled
    invalid controls</var> list.</li>

  </ol>

  If a user agent is to <dfn>interactively validate the constraints</dfn> of <code>form</code>
  element <var>form</var>, then the user agent must run the following steps:

  <ol>

    <li><a>Statically validate the constraints</a> of <var>form</var>, and let
    <var>unhandled invalid controls</var> be the list of elements returned if the result was
    <i>negative</i>.</li>

    <li>If the result was <i>positive</i>, then return that result and abort these steps.</li>

    <li>Report the problems with the constraints of at least one of the elements given in
    <var>unhandled invalid controls</var> to the user. User agents may focus one of those elements in
    the process, by running the <a>focusing steps</a> for that element, and may change the
    scrolling position of the document, or perform some other action that brings the element to the
    user's attention. User agents may report more than one constraint violation. User agents may
    coalesce related constraint violation reports if appropriate (e.g. if multiple radio buttons in a
    <a>group</a> are marked as required, only one error need be
    reported). If one of the controls is not <a>being rendered</a> (e.g. it has the <code>hidden</code> attribute set) then user agents may report a script
    error.</li>

    <li>Return a <i>negative</i> result.</li>

  </ol>

  </div>

<h5 id="the-constraint-validation-api">The <dfn>constraint validation API</dfn></h5>

  <dl class="domintro">

    <dt><var>element</var> . <code>willValidate</code></dt>

    <dd>

    Returns true if the element will be validated when the form is submitted; false
    otherwise.

    </dd>

    <dt><var>element</var> . <code>setCustomValidity</code>(<var>message</var>)</dt>

    <dd>

    Sets a custom error, so that the element would fail to validate. The given message is the
    message to be shown to the user when reporting the problem to the user.

    If the argument is the empty string, clears the custom error.

    </dd>

    <dt><var>element</var> . <code>validity</code> . <code>valueMissing</code></dt>

    <dd>

    Returns true if the element has no value but is a required field; false otherwise.

    </dd>

    <dt><var>element</var> . <code>validity</code> . <code>typeMismatch</code></dt>

    <dd>

    Returns true if the element's value is not in the correct syntax; false otherwise.

    </dd>

    <dt><var>element</var> . <code>validity</code> . <code>patternMismatch</code></dt>

    <dd>

    Returns true if the element's value doesn't match the provided pattern; false otherwise.

    </dd>

    <dt><var>element</var> . <code>validity</code> . <code>tooLong</code></dt>

    <dd>

    Returns true if the element's value is longer than the provided maximum length; false otherwise.

    </dd>

    <dt><var>element</var> . <code>validity</code> . <code>tooShort</code></dt>

    <dd>

    Returns true if the element's value, if it is not the empty string, is shorter than the
    provided minimum length; false otherwise.

    </dd>

    <dt><var>element</var> . <code>validity</code> . <code>rangeUnderflow</code></dt>

    <dd>

    Returns true if the element's value is lower than the provided minimum; false otherwise.

    </dd>

    <dt><var>element</var> . <code>validity</code> . <code>rangeOverflow</code></dt>

    <dd>

    Returns true if the element's value is higher than the provided maximum; false otherwise.

    </dd>

    <dt><var>element</var> . <code>validity</code> . <code>stepMismatch</code></dt>

    <dd>

    Returns true if the element's value doesn't fit the rules given by the <code>step</code> attribute; false otherwise.

    </dd>

    <dt><var>element</var> . <code>validity</code> . <code>badInput</code></dt>

    <dd>

    Returns true if the user has provided input in the user interface that the user agent is
    unable to convert to a value; false otherwise.

    </dd>

    <dt><var>element</var> . <code>validity</code> . <code>customError</code></dt>

    <dd>

    Returns true if the element has a custom error; false otherwise.

    </dd>

    <dt><var>element</var> . <code>validity</code> . <code>valid</code></dt>

    <dd>

    Returns true if the element's value has no validity problems; false otherwise.

    </dd>

    <dt><var>valid</var> = <var>element</var> . <code>checkValidity</code>()</dt>

    <dd>

    Returns true if the element's value has no validity problems; false otherwise. Fires an <code>invalid</code> event at the element in the latter case.

    </dd>

    <dt><var>valid</var> = <var>element</var> . <code>reportValidity</code>()</dt>

    <dd>

    Returns true if the element's value has no validity problems; otherwise, returns false, fires
    an <code>invalid</code> event at the element, and (if the event isn't
    canceled) reports the problem to the user.

    </dd>

    <dt><var>element</var> . <code>validationMessage</code></dt>

    <dd>

    Returns the error message that would be shown to the user if the element was to be checked
    for validity.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>willValidate</code></dfn> attribute must return
  true if an element is a <a>candidate for constraint validation</a>, and false otherwise
  (i.e. false if any conditions are <a>barring it from
  constraint validation</a>).

  The <dfn><code>setCustomValidity(<var>message</var>)</code></dfn>, when invoked, must set the <a>custom validity error
  message</a> to the value of the given <var>message</var> argument.

  </div>

  <div class="example">
    In the following example, a script checks the value of a form control each time it is edited,
    and whenever it is not a valid value, uses the <code>setCustomValidity()</code> method to set an appropriate
    message.

    <pre highlight="html">
&lt;label&gt;Feeling: &lt;input name=f type="text" oninput="check(this)"&gt;&lt;/label&gt;
&lt;script&gt;
  function check(input) {
    if (input.value == "good" ||
        input.value == "fine" ||
        input.value == "tired") {
      input.setCustomValidity('"' + input.value + '" is not a feeling.');
   } else {
      // input is fine -- reset the error message
      input.setCustomValidity('');
    }
  }
&lt;/script&gt;
    </pre>

  </div>

  <div class="impl">

  The <dfn><code>validity</code></dfn> attribute must return a
  <code>ValidityState</code> object that represents the <a>validity states</a> of the element.
  This object is <a>live</a>.

<pre class="idl" data-highlight="webidl">interface ValidityState {
  readonly attribute boolean valueMissing;
  readonly attribute boolean typeMismatch;
  readonly attribute boolean patternMismatch;
  readonly attribute boolean tooLong;
  readonly attribute boolean tooShort;
  readonly attribute boolean rangeUnderflow;
  readonly attribute boolean rangeOverflow;
  readonly attribute boolean stepMismatch;
  readonly attribute boolean badInput;
  readonly attribute boolean customError;
  readonly attribute boolean valid;
};
</pre>

  A <code>ValidityState</code> object has the following attributes. On getting, they must return
  true if the corresponding condition given in the following list is true, and false otherwise.

  <dl>
    <dt><dfn><code>valueMissing</code></dfn></dt>
    <dd> The control is <a>suffering from being missing</a>. </dd>

    <dt><dfn><code>typeMismatch</code></dfn></dt>
    <dd> The control is <a>suffering from a type mismatch</a>. </dd>

    <dt><dfn><code>patternMismatch</code></dfn></dt>
    <dd> The control is <a>suffering from a pattern mismatch</a>. </dd>

    <dt><dfn><code>tooLong</code></dfn></dt>
    <dd> The control is <a>suffering from being too long</a>. </dd>

    <dt><dfn><code>tooShort</code></dfn></dt>
    <dd> The control is <a>suffering from being too short</a>. </dd>

    <dt><dfn><code>rangeUnderflow</code></dfn></dt>
    <dd> The control is <a>suffering from an underflow</a>. </dd>

    <dt><dfn><code>rangeOverflow</code></dfn></dt>
    <dd> The control is <a>suffering from an overflow</a>. </dd>

    <dt><dfn><code>stepMismatch</code></dfn></dt>
    <dd> The control is <a>suffering from a step mismatch</a>. </dd>

    <dt><dfn><code>badInput</code></dfn></dt>
    <dd> The control is <a>suffering from bad input</a>. </dd>

    <dt><dfn><code>customError</code></dfn></dt>
    <dd> The control is <a>suffering from a custom error</a>. </dd>

    <dt><dfn><code>valid</code></dfn></dt>
    <dd> None of the other conditions are true. </dd>

  </dl>

  When the <dfn><code>checkValidity()</code></dfn> method is
  invoked, if the element is a <a>candidate for constraint validation</a> and does not <a>satisfy its constraints</a>, the user agent must <a>fire a simple
  event</a> named <code>invalid</code> that is cancelable (but in this case
  has no default action) at the element and return false. Otherwise, it must only return true
  without doing anything else.

  When the <dfn><code>reportValidity()</code></dfn> method is
  invoked, if the element is a <a>candidate for constraint validation</a> and does not <a>satisfy its constraints</a>, the user agent must: <a>fire a simple
  event</a> named <code>invalid</code> that is cancelable at the element,
  and if that event is not canceled, report the problems with the constraints of that element to the
  user; then, return false. Otherwise, it must only return true without doing anything else. When
  reporting the problem with the constraints to the user, the user agent may run the <a>focusing
  steps</a> for that element, and may change the scrolling position of the document, or perform
  some other action that brings the element to the user's attention. User agents may report more
  than one constraint violation, if the element suffers from multiple problems at once. If the
  element is not <a>being rendered</a>, then the user agent may, instead of notifying the
  user, report a script error.

  The <dfn><code>validationMessage</code></dfn> attribute must
  return the empty string if the element is not a <a>candidate for constraint validation</a>
  or if it is one but it <a>satisfies its constraints</a>; otherwise,
  it must return a suitably localized message that the user agent would show the user if this were
  the only form control with a validity constraint problem. If the user agent would not actually
  show a textual message in such a situation (e.g. it would show a graphical cue instead), then the
  attribute must return a suitably localized message that expresses (one or more of) the validity
  constraint(s) that the control does not satisfy. If the element is a <a>candidate for
  constraint validation</a> and is <a>suffering from a custom error</a>, then the
  <a>custom validity error message</a> should be present in the return value.

  </div>

<h5 id="security">Security</h5>

  Servers should not rely on client-side validation. Client-side validation can
  be intentionally bypassed by hostile users, and unintentionally bypassed by users of older user
  agents or automated tools that do not implement these features. The constraint validation features
  are only intended to improve the user experience, not to provide any kind of security
  mechanism.

<h4 id="form-submission"><dfn>Form submission</dfn></h4>

  <div class="impl">

<h5 id="form-submission-introduction">Introduction</h5>

  </div>

  <em>This section is non-normative.</em>

  When a form is submitted, the data in the form is converted into the structure specified by the
  <a>enctype</a>, and then sent to the destination specified by the
  <a>action</a> using the given <a>method</a>.

  For example, take the following form:

  <pre highlight="html">
&lt;form action="/find.cgi" method=get&gt;
  &lt;input type=text name=t&gt;
  &lt;input type=search name=q&gt;
  &lt;input type=submit&gt;
&lt;/form&gt;
    </pre>

  If the user types in "cats" in the first field and "fur" in the second, and then hits the
  submit button, then the user agent will load <code>/find.cgi?t=cats&amp;q=fur</code>.

  On the other hand, consider this form:

  <pre highlight="html">
&lt;form action="/find.cgi" method=post enctype="multipart/form-data"&gt;
  &lt;input type=text name=t&gt;
  &lt;input type=search name=q&gt;
  &lt;input type=submit&gt;
&lt;/form&gt;
    </pre>

  Given the same user input, the result on submission is quite different: the user agent instead
  does an HTTP POST to the given URL, with as the entity body something like the following text:

  <pre>------kYFrd4jNJEgCervE
Content-Disposition: form-data; name="t"

cats
------kYFrd4jNJEgCervE
Content-Disposition: form-data; name="q"

fur
------kYFrd4jNJEgCervE--</pre>

  <div class="impl">

<h5 id="implicit-submission">Implicit submission</h5>

  A <code>form</code> element's <dfn>default button</dfn> is the first <a>submit button</a> in <a>tree order</a> whose <a>form
  owner</a> is that <code>form</code> element.

  If the user agent supports letting the user submit a form implicitly (for example, on some
  platforms hitting the "enter" key while a text field is <a>focused</a> implicitly submits the form), then
  doing so for a form whose <a>default button</a> has a defined <a>activation
  behavior</a> must cause the user agent to <a>run synthetic click activation steps</a> on
  that <a>default button</a>.

  <p class="note">
    Consequently, if the <a>default button</a> is <a>disabled</a>, the form is not submitted when such an implicit
  submission mechanism is used. (A button has no <a>activation behavior</a> when
  disabled.)
  </p>

  <p class="note">
    There are pages on the Web that are only usable if there is a way to implicitly
  submit forms, so user agents are strongly encouraged to support this.
  </p>

  If the form has
  no <a>submit button</a>, then the implicit submission
  mechanism must do nothing if the form has more than one <i>field that blocks implicit
  submission</i>, and must <a>submit</a> the <code>form</code>
  element from the <code>form</code> element itself otherwise.

  For the purpose of the previous paragraph, an element is a <i>field that blocks implicit
  submission</i> of a <code>form</code> element if it is an <code>input</code> element whose
  <a>form owner</a> is that <code>form</code> element and whose <code>type</code> attribute is in one of the following states:
  <a>Text</a>,
  <a>Search</a>,
  <a>URL</a>,
  <a>Telephone</a>,
  <a>E-mail</a>,
  <a>Password</a>,
  <a>Date and Time</a>,
  <a>Date</a>,
  <a>Month</a>,
  <a>Week</a>,
  <a>Time</a>,

  <a>Number</a>

  </div>

  <div class="impl">

<h5 id="form-submission-algorithm">Form submission algorithm</h5>

  When a <code>form</code> element <var>form</var> is <dfn>submitted</dfn> from an element <var>submitter</var>
  (typically a button), optionally with a <var>submitted from <code>submit()</code> method</var> flag set, the user agent must run the
  following steps:

  <ol>

    <li>Let <var>form document</var> be the <var>form</var>'s
    <a>node document</a>.</li>

    <li id="sandboxSubmitBlocked">If <var>form document</var> has no associated
    <a>browsing context</a> or its <a>active sandboxing flag set</a> has its
    <a>sandboxed forms browsing context flag</a> set, then abort these steps without doing
    anything.</li>

    <li>Let <var>form browsing context</var> be the <a>browsing context</a> of <var>form document</var>.</li>

    <li>If the <var>submitted from <code>submit()</code>
    method</var> flag is not set, and the <var>submitter</var> element's <a>no-validate state</a> is false, then <a>interactively
    validate the constraints</a> of <var>form</var> and examine the result: if the result
    is negative (the constraint validation concluded that there were invalid fields and probably
    informed the user of this) then <a>fire a simple event</a> named <code>invalid</code> at the <var>form</var> element and then abort these
    steps.</li>

    <li>If the <var>submitted from <code>submit()</code>
    method</var> flag is not set, then <a>fire a simple event</a> that bubbles and is
    cancelable named <code>submit</code>, at <var>form</var>. If the
    event's default action is prevented (i.e. if the event is canceled) then abort these steps.
    Otherwise, continue (effectively the default action is to perform the submission).</li>

    <li>Let <var>form data set</var> be the result of <a>constructing the form data
    set</a> for <var>form</var> in the context of <var>submitter</var>.</li>

    <li>Let <var>action</var> be the <var>submitter</var> element's <a>action</a>.</li>

    <li>

    If <var>action</var> is the empty string, let <var>action</var> be
    <a>the document's address</a> of the <var>form document</var>.

    </li>

    <li><a>Resolve</a> the <a>URL</a> <var>action</var>, relative to the <var>submitter</var> element. If this fails,
    abort these steps.</li>

    <li>Let <var>action</var> be the resulting <a>absolute URL</a>.</li>

    <li>Let <var>action components</var> be the resulting <a>parsed
    URL</a>.</li>

    <li>Let <var>scheme</var> be the <a>scheme</a> of
    the resulting <a>parsed URL</a>.</li>

    <li>Let <var>enctype</var> be the <var>submitter</var> element's <a>enctype</a>.</li>

    <li>Let <var>method</var> be the <var>submitter</var> element's <a>method</a>.</li>

    <li>Let <var>target</var> be the <var>submitter</var> element's <a>target</a>.</li>

    <li>If the user indicated a specific <a>browsing context</a> to use when submitting the
    form, then let <var>target browsing context</var> be that <a>browsing context</a>.
    Otherwise, apply <a>the rules for choosing a browsing context given a browsing context
    name</a> using <var>target</var> as the name and <var>form browsing
    context</var> as the context in which the algorithm is executed, and let <var>target
    browsing context</var> be the resulting <a>browsing context</a>.</li>

    <li>If <var>target browsing context</var> was created in the previous step, or,
    alternatively, if the <var>form document</var> has not yet <a>completely
    loaded</a> and the <var>submitted from <code>submit()</code>
    method</var> flag is set, then let <var>replace</var> be true. Otherwise, let it be
    false.</li>

    <li>

    If the value of <var>method</var> is <a>dialog</a> then jump to the <a>submit
    dialog</a> steps.

    Otherwise, select the appropriate row in the table below based on the value of <var>scheme</var> as given by the first cell of each row. Then, select the appropriate cell
    on that row based on the value of <var>method</var> as given in the first cell of each
    column. Then, jump to the steps named in that cell and defined below the table.

    <table>
      <thead>
      <tr>
      <td>
      </td><th> <a>GET</a>
      </th><th> <a>POST</a>
      </th></tr></thead><tbody>
      <tr>
      <th> <code>http</code>
      </th><td> <a>Mutate action URL</a>
      </td><td> <a>Submit as entity body</a>
      </td></tr><tr>
      <th> <code>https</code>
      </th><td> <a>Mutate action URL</a>
      </td><td> <a>Submit as entity body</a>
      </td></tr><tr>
      <th> <code>ftp</code>
      </th><td> <a>Get action URL</a>
      </td><td> <a>Get action URL</a>
      </td></tr><tr>
      <th> <code>javascript</code>
      </th><td> <a>Get action URL</a>
      </td><td> <a>Get action URL</a>
      </td></tr><tr>
      <th> <code>data</code>
      </th><td> <a>Get action URL</a>
      </td><td> <a>Post to data:</a>
      </td></tr><tr>
      <th> <code>mailto</code>
      </th><td> <a>Mail with headers</a>
      </td><td> <a>Mail as body</a>
    </td></tr></tbody></table>

    If <var>scheme</var> is not one of those listed in this table, then the behavior is
    not defined by this specification. User agents should, in the absence of another specification
    defining this, act in a manner analogous to that defined in this specification for similar
    schemes.

    Each <code>form</code> element has a <dfn>planned navigation</dfn>, which is either null or a
    <a>task</a>; when the <code>form</code> is first created, its
    <a>planned navigation</a> must be set to null. In the behaviors described below, when the
    user agent is required to <dfn>plan to navigate</dfn> to a particular resource <var>destination</var>, it must run the following steps:

    <ol>

      <li>If the <code>form</code> has a non-null <a>planned navigation</a>, remove it from
      its <a>task queue</a>.</li>

      <li>

      Let the <code>form</code>'s <a>planned navigation</a> be a new <a>task</a> that consists of running the following steps:

      <ol>

        <li>Let the <code>form</code>'s <a>planned navigation</a> be null.</li>

        <li><a>Navigate</a> <var>target browsing context</var> to
        <var>destination</var>. If <var>replace</var> is true, then <var>target browsing
        context</var> must be navigated with <a>replacement enabled</a>.

      </li></ol>

      For the purposes of this task, <var>target browsing context</var> and <var>replace</var> are the variables that were set up when the overall form submission
      algorithm was run, with their values as they stood when this <a>planned navigation</a>
      was <a>queued</a>.

      </li>

      <li>

      <a>Queue the task</a> that is the <code>form</code>'s new
      <a>planned navigation</a>.

      The <a>task source</a> for this task is the <a>DOM manipulation task
      source</a>.

      </li>

    </ol>

    The behaviors are as follows:

    <dl>

      <dt><dfn>Mutate action URL</dfn>
      </dt><dd>

      Let <var>query</var> be the result of encoding the <var>form data
      set</var> using the <a><code>application/x-www-form-urlencoded</code> encoding
      algorithm</a>, interpreted as a US-ASCII string.

      Set <var>parsed action</var>'s <a>query</a>
      component to <var>query</var>.

      Let <var>destination</var> be a new <a>URL</a> formed by applying the
      <a>URL serializer</a> algorithm to <var>parsed action</var>.

      <a>Plan to navigate</a> to <var>destination</var>.

      </dd>

      <dt><dfn>Submit as entity body</dfn>
      </dt><dd>

      Let <var>entity body</var> be the result of encoding the <var>form data
      set</var> using the <a>appropriate form encoding algorithm</a>.

      Let <var>MIME type</var> be determined as follows:

      <dl>

        <dt>If <var>enctype</var> is <code>application/x-www-form-urlencoded</code></dt>

        <dd>Let <var>MIME type</var> be "<code>application/x-www-form-urlencoded</code>".</dd>

        <dt>If <var>enctype</var> is <code>multipart/form-data</code></dt>

        <dd>Let <var>MIME type</var> be the concatenation of the string "<code>multipart/form-data;</code>", a U+0020 SPACE character, the string "<code>boundary=</code>", and the <a><code>multipart/form-data</code> boundary
        string</a> generated by the <a><code>multipart/form-data</code> encoding
        algorithm</a>.</dd>

        <dt>If <var>enctype</var> is <code>text/plain</code></dt>

        <dd>Let <var>MIME type</var> be "<code>text/plain</code>".</dd>

      </dl>

      Otherwise, <a>plan to navigate</a> to a new <a>request</a> whose <a>url</a> is
      <var>action</var>, <a>method</a> is <var>method</var>,
      <a>header list</a> consists of <code>Content-Type</code>/<var>MIME type</var>, and <a>body</a> is <var>entity body</var>.

      </dd>

      <dt><dfn>Get action URL</dfn>
      </dt><dd>

      <a>Plan to navigate</a> to <var>action</var>.

      <p class="note">
    The <var>form data set</var> is discarded.
  </p>

      </dd>

      <dt><dfn>Post to data:</dfn>
      </dt><dd>

      Let <var>data</var> be the result of encoding the <var>form data
      set</var> using the <a>appropriate form encoding algorithm</a>.

      If <var>action</var> contains the string "<code>%%%%</code>" (four U+0025
      PERCENT SIGN characters), then <a>percent encode</a> all bytes in <var>data</var> that, if interpreted as US-ASCII, are not characters in the URL
      <a>default encode set</a>, and then, treating the result as a US-ASCII string,
      <a>UTF-8 percent encode</a> all the U+0025 PERCENT SIGN characters in the resulting
      string and replace the first occurrence of "<code>%%%%</code>" in <var>action</var> with the resulting doubly-escaped string. [[!URL]]

      Otherwise, if <var>action</var> contains the string "<code>%%</code>"
      (two U+0025 PERCENT SIGN characters in a row, but not four), then <a>UTF-8 percent
      encode</a> all characters in <var>data</var> that, if interpreted as US-ASCII, are
      not characters in the URL <a>default encode set</a>, and then, treating the result as a
      US-ASCII string, replace the first occurrence of "<code>%%</code>" in <var>action</var> with the resulting escaped string. [[!URL]]

      <a>Plan to navigate</a> to the potentially modified <var>action</var> (which
      will be a <a><code>data:</code> URL</a>).

      </dd>

      <dt><dfn>Mail with headers</dfn>
      </dt><dd>

      Let <var>headers</var> be the resulting encoding the <var>form data
      set</var> using the <a><code>application/x-www-form-urlencoded</code> encoding
      algorithm</a>, interpreted as a US-ASCII string.

      Replace occurrences of U+002B PLUS SIGN characters (+) in <var>headers</var> with
      the string "<code>%20</code>".

      Let <var>destination</var> consist of all the characters from the first character
      in <var>action</var> to the character immediately before the first U+003F QUESTION
      MARK character (?), if any, or the end of the string if there are none.

      Append a single U+003F QUESTION MARK character (?) to <var>destination</var>.

      Append <var>headers</var> to <var>destination</var>.

      <a>Plan to navigate</a> to <var>destination</var>.

      </dd>

      <dt><dfn>Mail as body</dfn>
      </dt><dd>

      Let <var>body</var> be the resulting of encoding the <var>form data
      set</var> using the <a>appropriate form encoding algorithm</a> and then <a>percent encoding</a> all the bytes in the resulting byte string
      that, when interpreted as US-ASCII, are not characters in the URL <a>default encode
      set</a>. [[!URL]]

      Let <var>destination</var> have the same value as <var>action</var>.

      If <var>destination</var> does not contain a U+003F QUESTION MARK character (?),
      append a single U+003F QUESTION MARK character (?) to <var>destination</var>.
      Otherwise, append a single U+0026 AMPERSAND character (&amp;).

      Append the string "<code>body=</code>" to <var>destination</var>.

      Append <var>body</var>, interpreted as a US-ASCII string, to <var>destination</var>.

      <a>Plan to navigate</a> to <var>destination</var>.

      </dd>

      <dt><dfn>Submit dialog</dfn>
      </dt><dd>

      Let <var>subject</var> be the nearest ancestor <code>dialog</code> element of <var>form</var>, if any.

      If there isn't one, or if it does not have an <code>open</code>
      attribute, do nothing. Otherwise, proceed as follows:

      If <var>submitter</var> is an <code>input</code> element whose <code>type</code> attribute is in the <a>Image Button</a> state, then let <var>result</var>
      be the string formed by concatenating the <a>selected coordinate</a>'s <var>x</var>-component, expressed as a base-ten number using <a>ASCII digits</a>, a
      U+002C COMMA character (,), and the <a>selected
      coordinate</a>'s <var>y</var>-component, expressed in the same way as the <var>x</var>-component.

      Otherwise, if <var>submitter</var> has a <a>value</a>, then let <var>result</var> be that <a>value</a>.

      Otherwise, there is no <var>result</var>.

      Then, <a>close the dialog</a> <var>subject</var>. If there is a <var>result</var>, let that be the return value.

      </dd>

    </dl>

    The <dfn>appropriate form encoding algorithm</dfn> is
    determined as follows:

    <dl>

      <dt>If <var>enctype</var> is <code>application/x-www-form-urlencoded</code></dt>

      <dd>Use the <a><code>application/x-www-form-urlencoded</code> encoding
      algorithm</a>.</dd>

      <dt>If <var>enctype</var> is <code>multipart/form-data</code></dt>

      <dd>Use the <a><code>multipart/form-data</code> encoding algorithm</a>.</dd>

      <dt>If <var>enctype</var> is <code>text/plain</code></dt>

      <dd>Use the <a><code>text/plain</code> encoding algorithm</a>.</dd>

    </dl>

    </li>

  </ol>

<h5 id="constructing-the-form-data-set">Constructing the form data set</h5>

  The algorithm to <dfn>construct the form data set</dfn>
  for a form <var>form</var> optionally in the context of a submitter <var>submitter</var> is as follows. If not specified otherwise, <var>submitter</var>
  is null.

  <ol>

    <li>Let <var>controls</var> be a list of all the <a>submittable elements</a> whose <a>form owner</a> is <var>form</var>, in <a>tree order</a>.</li>

    <li>Let the <var>form data set</var> be a list of name-value-type tuples, initially
    empty.</li>

    <li>

    <i>Loop</i>: For each element <var>field</var> in <var>controls</var>, in
    <a>tree order</a>, run the following substeps:

    <ol>

      <li>

      If any of the following conditions are met, then skip these substeps for this element:

      <ul>

        <li>The <var>field</var> element has a <code>datalist</code> element ancestor.</li>

        <li>The <var>field</var> element is <a>disabled</a>.</li>

        <li>The <var>field</var> element is a <a>button</a> but
        it is not <var>submitter</var>.</li>

        <li>The <var>field</var> element is an <code>input</code> element whose <code>type</code> attribute is in the <a>Checkbox</a> state and whose <a>checkedness</a> is false.</li>

        <li>The <var>field</var> element is an <code>input</code> element whose <code>type</code> attribute is in the <a>Radio Button</a> state and whose <a>checkedness</a> is false.</li>

        <li>The <var>field</var> element is not an <code>input</code> element whose <code>type</code> attribute is in the <a>Image Button</a> state, and either the <var>field</var> element does not have a <code>name</code> attribute
        specified, or its <code>name</code> attribute's value is the empty
        string.</li>

        <li>The <var>field</var> element is an <code>object</code> element that is not using
        a <a>plugin</a>.</li>

      </ul>

      Otherwise, process <var>field</var> as follows:

      </li>

      <li>Let <var>type</var> be the value of the <code>type</code> IDL
      attribute of <var>field</var>.</li>

      <li>

      If the <var>field</var> element is an <code>input</code> element whose <code>type</code> attribute is in the <a>Image Button</a> state, then run these further nested
      substeps:

      <ol>

        <li>If the <var>field</var> element has a <code>name</code>
        attribute specified and its value is not the empty string, let <var>name</var> be
        that value followed by a single U+002E FULL STOP character (.). Otherwise, let <var>name</var> be the empty string.</li>

        <li>Let <var>name<sub>x</sub></var> be the string consisting of the
        concatenation of <var>name</var> and a single U+0078 LATIN SMALL LETTER X character
        (x).</li>

        <li>Let <var>name<sub>y</sub></var> be the string consisting of the
        concatenation of <var>name</var> and a single U+0079 LATIN SMALL LETTER Y character
        (y).</li>

        <li>The <var>field</var> element is <var>submitter</var>, and before
        this algorithm was invoked the user <a>indicated a coordinate</a>. Let <var>x</var> be the <var>x</var>-component of the coordinate selected by the
        user, and let <var>y</var> be the <var>y</var>-component of the coordinate
        selected by the user.</li>

        <li>Append an entry to the <var>form data set</var> with the name <var>name<sub>x</sub></var>, the value <var>x</var>, and the type <var>type</var>.</li>

        <li>Append an entry to the <var>form data set</var> with the name <var>name<sub>y</sub></var> and the value <var>y</var>, and the type
        <var>type</var>.</li>

        <li>Skip the remaining substeps for this element: if there are any more elements in <var>controls</var>, return to the top of the <i>loop</i> step, otherwise, jump to the
        <i>end</i> step below.</li>

      </ol>

      </li>

      <li>Let <var>name</var> be the value of the <var>field</var> element's
      <code>name</code> attribute.</li>

      <li>If the <var>field</var> element is a <code>select</code> element, then for each
      <code>option</code> element in the <code>select</code> element's <a>list of options</a> whose <a>selectedness</a> is true and that is not <a>disabled</a>, append an entry to the <var>form data
      set</var> with the <var>name</var> as the name, the <a>value</a> of the <code>option</code> element as the value, and
      <var>type</var> as the type.</li>

      <li>

      Otherwise, if the <var>field</var> element is an <code>input</code> element whose
      <code>type</code> attribute is in the <a>Checkbox</a> state or the <a>Radio Button</a> state, then run these further nested
      substeps:

      <ol>

        <li>If the <var>field</var> element has a <code>value</code> attribute specified, then let <var>value</var>
        be the value of that attribute; otherwise, let <var>value</var> be the string "<code>on</code>".</li>

        <li>Append an entry to the <var>form data set</var> with <var>name</var>
        as the name, <var>value</var> as the value, and <var>type</var> as the
        type.</li>

      </ol>

      </li>

      <li>Otherwise, if the <var>field</var> element is an <code>input</code> element
      whose <code>type</code> attribute is in the <a>File Upload</a> state, then for each file <a>selected</a> in the <code>input</code> element,
      append an entry to the <var>form data set</var> with the <var>name</var> as
      the name, the file (consisting of the name, the type, and the body) as the value, and <var>type</var> as the type. If there are no <a>selected files</a>, then append an entry to the
      <var>form data set</var> with the <var>name</var> as the name, the empty
      string as the value, and <code>application/octet-stream</code> as the type.</li>

      <li>Otherwise, if the <var>field</var> element is an <code>object</code> element:
      try to obtain a form submission value from the <a>plugin</a>, and if that is successful,
      append an entry to the <var>form data set</var> with <var>name</var> as the
      name, the returned form submission value as the value, and the string "<code>object</code>" as the type.</li>

      <li>Otherwise, append an entry to the <var>form data set</var> with <var>name</var> as the name, the <a>value</a> of the <var>field</var> element as the value, and <var>type</var> as the type.</li>

      <li>

      If the element has a <code>dirname</code> attribute, and that
      attribute's value is not the empty string, then run these substeps:

      <ol>

        <li>Let <var>dirname</var> be the value of the element's <code>dirname</code> attribute.</li>

        <li>Let <var>dir</var> be the string "<code>ltr</code>" if <a>the
        directionality</a> of the element is '<a>ltr</a>', and "<code>rtl</code>" otherwise (i.e. when <a>the directionality</a> of the element is
        '<a>rtl</a>').</li>

        <li>Append an entry to the <var>form data set</var> with <var>dirname</var> as the name, <var>dir</var> as the value, and the string
        "<code>direction</code>" as the type.</li>

      </ol>

      <p class="note">
    An element can only have a <code>dirname</code>
      attribute if it is a <code>textarea</code> element or an <code>input</code> element whose
      <code>type</code> attribute is in either the <a>Text</a> state or the <a>Search</a> state.
  </p>

      </li>

    </ol>

    </li>

    <li>

    <i>End</i>: For the name of each entry in the <var>form data set</var>, and for the
    value of each entry in the <var>form data set</var> whose type is not "<code>file</code>" or "<code>textarea</code>", replace every occurrence of a U+000D
    CARRIAGE RETURN (CR) character not followed by a U+000A LINE FEED (LF) character, and every
    occurrence of a U+000A LINE FEED (LF) character not preceded by a U+000D CARRIAGE RETURN (CR)
    character, by a two-character string consisting of a U+000D CARRIAGE RETURN U+000A LINE FEED
    (CRLF) character pair.

    <p class="note">
    In the case of the <a>value</a> of
    <code>textarea</code> elements, this newline normalization is already performed during the
    conversion of the control's <a>raw value</a> into the
    control's <a>value</a> (which also performs any necessary line
    wrapping). In the case of <code>input</code> elements <code>type</code>
    attributes in the <a>File Upload</a> state, the value is not
    normalized.
  </p>

    </li>

    <li>Return the <var>form data set</var>.</li>

  </ol>

  </div>

  <div class="impl">

<h5 id="selecting-a-form-submission-encoding">Selecting a form submission encoding</h5>

  If the user agent is to <dfn>pick an encoding for a
  form</dfn>, optionally with an <i>allow non-ASCII-compatible encodings</i> flag set, it must run
  the following substeps:

  <ol>

    <li>Let <var>input</var> be the value of the <code>form</code> element's <code>accept-charset</code> attribute.</li>

    <li>Let <var>candidate encoding labels</var> be the result of <a>splitting <var>input</var> on spaces</a>.</li>

    <li>Let <var>candidate encodings</var> be an empty list of <a>character encodings</a>.</li>

    <li>For each token in <var>candidate encoding labels</var> in turn (in the order in
    which they were found in <var>input</var>), <a>get an
    encoding</a> for the token and, if this does not result in failure, append the
    <a>encoding</a> to <var>candidate encodings</var>.</li>

    <li>If the <i>allow non-ASCII-compatible encodings</i> flag is not set, remove any encodings
    that are not <a>ASCII-compatible encodings</a> from
    <var>candidate encodings</var>.</li>

    <li>If <var>candidate encodings</var> is empty, return UTF-8 and abort these
    steps.</li>

    <li>

    Each character encoding in <var>candidate encodings</var> can represent a finite
    number of characters. (For example, UTF-8 can represent all 1.1 million or so Unicode code
    points, while Windows-1252 can only represent 256.)

    For each encoding in <var>candidate encodings</var>, determine how many of the
    characters in the names and values of the entries in the <var>form data set</var> the
    encoding can represent (without ignoring duplicates). Let <var>max</var> be the
    highest such count. (For UTF-8, <var>max</var> would equal the number of characters
    in the names and values of the entries in the <var>form data set</var>.)

    Return the first encoding in <var>candidate encodings</var> that can encode <var>max</var> characters in the names and values of the entries in the <var>form
    data set</var>.

    </li>

  </ol>

  </div>

<h5 id="urlencoded-form-data">URL-encoded form data</h5>

  <p class="note">
    This form data set encoding is in many ways an aberrant monstrosity, the result of
  many years of implementation accidents and compromises leading to a set of requirements necessary
  for interoperability, but in no way representing good design practices. In particular, readers are
  cautioned to pay close attention to the twisted details involving repeated (and in some cases
  nested) conversions between character encodings and byte sequences.
  </p>

  <div class="impl">

  The <dfn><code>application/x-www-form-urlencoded</code> encoding algorithm</dfn> is as
  follows:

  <ol>

    <li>Let <var>result</var> be the empty string.</li>

    <li>

    If the <code>form</code> element has an <code>accept-charset</code> attribute, let the selected character
    encoding be the result of <a>picking an encoding for the form</a>.

    Otherwise, if the <code>form</code> element has no <code>accept-charset</code> attribute, but the <a>document's
    character encoding</a> is an <a>ASCII-compatible encoding</a>, then that is the
    selected character encoding.

    Otherwise, let the selected character encoding be UTF-8.

    </li>

    <li>Let <var>charset</var> be the <a>name</a> of the
    selected <a>character encoding</a>.</li>

    <li>

    For each entry in the <var>form data set</var>, perform these substeps:

    <ol>

      <li>If the entry's name is "<code>_charset_</code>" and its
      type is "<code>hidden</code>", replace its value with <var>charset</var>.</li>

      <li>If the entry's type is "<code>file</code>", replace its value with the file's
      name only.</li>

      <li>For each character in the entry's name and value that cannot be expressed using the
      selected character encoding, replace the character by a string consisting of a U+0026 AMPERSAND
      character (&amp;), a U+0023 NUMBER SIGN character (#), one or more <a>ASCII digits</a>
      representing the Unicode code point of the character in base ten, and finally a U+003B
      SEMICOLON character (;).</li>

      <li>

      Encode the entry's name and value using the <a>encoder</a> for the selected character
      encoding. The entry's name and value are now byte strings.

      </li>

      <li>

      For each byte in the entry's name and value, apply the appropriate subsubsteps from the
      following list:

      <dl class="switch">

        <dt>If the byte is 0x20 (U+0020 SPACE if interpreted as ASCII)</dt>

        <dd>Replace the byte with a single 0x2B byte (U+002B PLUS SIGN character (+) if interpreted
        as ASCII).</dd>

        <dt>If the byte is in the range 0x2A, 0x2D, 0x2E, 0x30 to 0x39, 0x41 to 0x5A, 0x5F, 0x61 to
        0x7A</dt>

        <dd>Leave the byte as is.</dd>

        <dt>Otherwise</dt>

        <dd>

        <ol>

          <li>Let <var>s</var> be a string consisting of a U+0025 PERCENT SIGN character
          (%) followed by <a>uppercase ASCII hex digits</a> representing the hexadecimal value
          of the byte in question (zero-padded if necessary).</li>

          <li>Encode the string <var>s</var> as US-ASCII, so that it is now a byte
          string.

          </li><li>Replace the byte in question in the name or value being processed by the bytes in
          <var>s</var>, preserving their relative order.</li>

        </ol>

        </dd>

      </dl>

      </li>

      <li>

      Interpret the entry's name and value as Unicode strings encoded in US-ASCII. (All of the
      bytes in the string will be in the range 0x00 to 0x7F; the high bit will be zero throughout.)
      The entry's name and value are now Unicode strings again.

      </li>

      <li>If the entry's name is "<code>isindex</code>", its type is
      "<code>text</code>", and this is the first entry in the <var>form data
      set</var>, then append the value to <var>result</var> and skip the rest of the
      substeps for this entry, moving on to the next entry, if any, or the next step in the overall
      algorithm otherwise.</li>

      <li>If this is not the first entry, append a single U+0026 AMPERSAND character (&amp;) to
      <var>result</var>.</li>

      <li>Append the entry's name to <var>result</var>.</li>

      <li>Append a single U+003D EQUALS SIGN character (=) to <var>result</var>.</li>

      <li>Append the entry's value to <var>result</var>.</li>

    </ol>

    </li>

    <li>Encode <var>result</var> as US-ASCII and return the resulting byte
    stream.</li>

  </ol>

  </div>

  To <dfn>decode
  <code>application/x-www-form-urlencoded</code> payloads</dfn>, the following algorithm should be
  used. This algorithm uses as inputs the payload itself, <var>payload</var>, consisting of
  a Unicode string using only characters in the range U+0000 to U+007F; a default character encoding
  <var>encoding</var>; and optionally an <var>isindex</var> flag indicating that
  the payload is to be processed as if it had been generated for a form containing an <code>isindex</code> control. The output of this algorithm is a sorted list
  of name-value pairs. If the <var>isindex</var> flag is set and the first control really
  was an <code>isindex</code> control, then the first name-value pair
  will have as its name the empty string.

  Which default character encoding to use can only be determined on a case-by-case basis, but
  generally the best character encoding to use as a default is the one that was used to encode the
  page on which the form used to create the payload was itself found. In the absence of a better
  default, UTF-8 is suggested.

  The <var>isindex</var> flag is for legacy use only. Forms in conforming HTML documents
  will not generate payloads that need to be decoded with this flag set.

  <ol>

    <li>Let <var>strings</var> be the result of <a>strictly splitting the string</a> <var>payload</var> on U+0026 AMPERSAND
    characters (&amp;).</li>

    <li>If the <var>isindex</var> flag is set and the first string in <var>strings</var> does not contain a U+003D EQUALS SIGN character (=), insert a U+003D
    EQUALS SIGN character (=) at the start of the first string in <var>strings</var>.</li>

    <li>Let <var>pairs</var> be an empty list of name-value pairs.</li>

    <li>

    For each string <var>string</var> in <var>strings</var>, run these
    substeps:

    <ol>

      <li>

      If <var>string</var> contains a U+003D EQUALS SIGN character (=), then let <var>name</var> be the substring of <var>string</var> from the start of <var>string</var> up to but excluding its first U+003D EQUALS SIGN character (=), and let
      <var>value</var> be the substring from the first character, if any, after the first
      U+003D EQUALS SIGN character (=) up to the end of <var>string</var>. If the first
      U+003D EQUALS SIGN character (=) is the first character, then <var>name</var> will be
      the empty string. If it is the last character, then <var>value</var> will be the
      empty string.

      Otherwise, <var>string</var> contains no U+003D EQUALS SIGN characters (=). Let
      <var>name</var> have the value of <var>string</var> and let <var>value</var> be the empty string.

      </li>

      <li>

      Replace any U+002B PLUS SIGN characters (+) in <var>name</var> and <var>value</var> with U+0020 SPACE characters.

      </li>

      <li>

      Replace any escape in <var>name</var> and <var>value</var> with the
      character represented by the escape. This replacement must not be recursive.

      An escape is a U+0025 PERCENT SIGN character (%) followed by two <a>ASCII hex
      digits</a>.

      The character represented by an escape is the Unicode character whose code point is equal
      to the value of the two characters after the U+0025 PERCENT SIGN character (%), interpreted as
      a hexadecimal number (in the range 0..255).

      <p class="example">So for instance the string "<code>A%2BC</code>" would become
      "<code>A+C</code>". Similarly, the string "<code>100%25AA%21</code>" becomes
      the string "<code>100%AA!</code>".</p>

      </li>

      <li>Convert the <var>name</var> and <var>value</var> strings to their byte
      representation in ISO-8859-1 (i.e. convert the Unicode string to a byte string, mapping code
      points to byte values directly).</li>

      <li>Add a pair consisting of <var>name</var> and <var>value</var> to <var>pairs</var>.</li>

    </ol>

    </li>

    <li>If any of the name-value pairs in <var>pairs</var> have a name component
    consisting of the string "<code>_charset_</code>" encoded in US-ASCII, and the value
    component of the first such pair, when decoded as US-ASCII, is the name of a supported character
    encoding, then let <var>encoding</var> be that character encoding (replacing the default
    passed to the algorithm).</li>

    <li>Convert the name and value components of each name-value pair in <var>pairs</var>
    to Unicode by interpreting the bytes according to the encoding <var>encoding</var>.</li>

    <li>Return <var>pairs</var>.</li>

  </ol>

  <p class="note">
    Parameters on the <code>application/x-www-form-urlencoded</code> MIME type are
  ignored. In particular, this MIME type does not support the <code>charset</code>
  parameter.
  </p>

<h5 id="multipart-form-data">Multipart form data</h5>

  <div class="impl">

  The <dfn><code>multipart/form-data</code> encoding algorithm</dfn> is as follows:

  <ol>

    <li>Let <var>result</var> be the empty string.</li>

    <li>

    If the algorithm was invoked with an explicit character encoding, let the selected character
    encoding be that encoding. (This algorithm is used by other specifications, which provide an
    explicit character encoding to avoid the dependency on the <code>form</code> element described
    in the next paragraph.)

    Otherwise, if the <code>form</code> element has an <code>accept-charset</code> attribute, let the selected character
    encoding be the result of <a>picking an encoding for the form</a>.

    Otherwise, if the <code>form</code> element has no <code>accept-charset</code> attribute, but the <a>document's
    character encoding</a> is an <a>ASCII-compatible encoding</a>, then that is
    the selected character encoding.

    Otherwise, let the selected character encoding be UTF-8.

    </li>

    <li>Let <var>charset</var> be the <a>name</a> of the
    selected <a>character encoding</a>.</li>

    <li>

    For each entry in the <var>form data set</var>, perform these substeps:

    <ol>

      <li>If the entry's name is "<code>_charset_</code>" and its
      type is "<code>hidden</code>", replace its value with <var>charset</var>.</li>

      <li>For each character in the entry's name and value that cannot be expressed using the
      selected character encoding, replace the character by a string consisting of a U+0026 AMPERSAND
      character (&amp;), a U+0023 NUMBER SIGN character (#), one or more <a>ASCII digits</a>
      representing the Unicode code point of the character in base ten, and finally a U+003B
      SEMICOLON character (;).</li>

    </ol>

    </li>

    <li>

    Encode the (now mutated) <var>form data set</var> using the rules described by RFC 2388,
    <cite>Returning Values from Forms: <code>multipart/form-data</code></cite>, and return
    the resulting byte stream. [[!RFC2388]]

    Each entry in the <var>form data set</var> is a <i>field</i>, the name of the entry is the
    <i>field name</i> and the value of the entry is the <i>field value</i>.

    The order of parts must be the same as the order of fields in the <var>form data set</var>.
    Multiple entries with the same name must be treated as distinct fields.

    <p class="note">
    In particular, this means that multiple files submitted as part of a single
    <code>&lt;input&nbsp;type=file&nbsp;multiple&gt;</code> element will result in each file
    having its own field; the "sets of files" feature ("<code>multipart/mixed</code>") of RFC 2388
    is not used.
  </p>

    The parts of the generated <code>multipart/form-data</code> resource that correspond to
    non-file fields must not have a <code>Content-Type</code> header specified. Their names and
    values must be encoded using the character encoding selected above (field names in particular do
    not get converted to a 7-bit safe encoding as suggested in RFC 2388).

    File names included in the generated <code>multipart/form-data</code> resource (as part of
    file fields) must use the character encoding selected above, though the precise name may be
    approximated if necessary (e.g. newlines could be removed from file names, quotes could be
    changed to "%22", and characters not expressible in the selected character encoding could be
    replaced by other characters). User agents must not use the RFC 2231 encoding suggested by RFC
    2388.

    The boundary used by the user agent in generating the return value of this algorithm is the
    <dfn><code>multipart/form-data</code> boundary string</dfn>. (This value is used to generate the
    MIME type of the form submission payload generated by this algorithm.)

    </li>

  </ol>

  </div>

  For details on how to interpret <code>multipart/form-data</code> payloads, see RFC 2388. [[!RFC2388]]

<h5 id="plain-text-form-data">Plain text form data</h5>

  <div class="impl">

  The <dfn><code>text/plain</code> encoding algorithm</dfn> is as follows:

  <ol>

    <li>Let <var>result</var> be the empty string.</li>

    <li>

    If the <code>form</code> element has an <code>accept-charset</code> attribute, let the selected character
    encoding be the result of <a>picking an encoding for the form</a>, with the <i>allow
    non-ASCII-compatible encodings</i> flag unset.

    Otherwise, if the <code>form</code> element has no <code>accept-charset</code> attribute, then that is the selected
    character encoding.

    </li>

    <li>Let <var>charset</var> be the <a>name</a> of the
    selected <a>character encoding</a>.</li>

    <li>If the entry's name is "<code>_charset_</code>" and its type
    is "<code>hidden</code>", replace its value with <var>charset</var>.</li>

    <li>If the entry's type is "<code>file</code>", replace its value with the file's
    name only.</li>

    <li>

    For each entry in the <var>form data set</var>, perform these substeps:

    <ol>

      <li>Append the entry's name to <var>result</var>.</li>

      <li>Append a single U+003D EQUALS SIGN character (=) to <var>result</var>.</li>

      <li>Append the entry's value to <var>result</var>.</li>

      <li>Append a U+000D CARRIAGE RETURN (CR) U+000A LINE FEED (LF) character pair to <var>result</var>.</li>

    </ol>

    </li>

    <li>Encode <var>result</var> using the <a>encoder</a> for the selected
    character encoding and return the resulting byte stream.</li>

  </ol>

  </div>

  Payloads using the <code>text/plain</code> format are intended to be human readable. They are
  not reliably interpretable by computer, as the format is ambiguous (for example, there is no way
  to distinguish a literal newline in a value from the newline at the end of the value).

  <div class="impl">

<h4 id="resetting-a-form">Resetting a form</h4>

  When a <code>form</code> element <var>form</var> is <dfn>reset</dfn>, the user agent must <a>fire a simple event</a> named
  <code>reset</code>, that bubbles and is cancelable, at <var>form</var>, and then, if that event is not canceled, must invoke the <a>reset algorithm</a> of each <a>resettable element</a> whose <a>form owner</a> is <var>form</var>.

  When the <a>reset</a> algorithm is invoked by the <code>reset()</code> method, the <code>reset</code> event
  fired by the <a>reset</a> algorithm must not be <a>trusted</a>.

  Each <a>resettable element</a> defines its own <dfn>reset algorithm</dfn>. Changes made to form controls as part of
  these algorithms do not count as changes caused by the user (and thus, e.g., do not cause <code>input</code> events to fire).

  </div>

<h3 id="interactive-elements">Interactive elements</h3>

<h4 id="the-details-element">The <dfn><code>details</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning root</a>.</dd>
    <dd><a>Interactive content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>One <code>summary</code> element followed by <a>flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>open</code> - Whether the details are visible</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role</a> that supports
    <code>aria-expanded</code>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLDetailsElement : HTMLElement {
  attribute boolean open;
};
</pre>
    </dd>
  </dl>

  The <code>details</code> element <a>represents</a> a disclosure widget from which the
  user can obtain additional information or controls.

  <p class="note">
    The <code>details</code> element is not appropriate for footnotes. Please see <a>the section on footnotes</a> for details on how to mark up footnotes.
  </p>

  The <span class="impl">first</span> <code>summary</code> element child of the element, if any,
  <a>represents</a> the summary or legend of the details. <span class="impl">If there is no
  child <code>summary</code> element, the user agent should provide its own legend (e.g.
  "Details").</span>

  The rest of the element's contents <a>represents</a> the additional information or
  controls.

  The <dfn><code>open</code></dfn> content attribute is a <a>boolean
  attribute</a>. If present, it indicates that both the summary and the additional information is
  to be shown to the user. If the attribute is absent, only the summary is to be shown.

  <div class="impl">

  When the element is created, if the attribute is absent, the additional information should be
  hidden; if the attribute is present, that information should be shown. Subsequently, if the
  attribute is removed, then the information should be hidden; if the attribute is added, the
  information should be shown.

  The user agent should allow the user to request that the additional information be shown or
  hidden. To honor a request for the details to be shown, the user agent must set the <code>open</code> attribute on the element to the value <code>open</code>. To honor a request for the information to be hidden, the user agent must
  remove the <code>open</code> attribute from the element.

  Whenever the <code>open</code> attribute is added to or removed from
  a <code>details</code> element, the user agent must <a>queue a task</a> that runs the
  following steps, which are known as the <dfn>details notification task steps</dfn>, for this
  <code>details</code> element:

  <ol>

    <li>

    If another <a>task</a> has been <a>queued</a> to run the <a>details notification task steps</a> for this
    <code>details</code> element, then abort these steps.

    <p class="note">
    When the <code>open</code> attribute is toggled
    several times in succession, these steps essentially get coalesced so that only one event is
    fired.
  </p>

    </li>

    <li><a>Fire a simple event</a> named <code>toggle</code> at the
    <code>details</code> element.</li>

  </ol>

  The <a>task source</a> for this task must be the <a>DOM manipulation task
  source</a>.

  The <dfn><code>open</code></dfn> IDL attribute must
  <a>reflect</a> the <code>open</code> content attribute.

  </div>

  <div class="example">
    The following example shows the <code>details</code> element being used to hide technical
    details in a progress report.

    <pre highlight="html">
&lt;section class="progress window"&gt;
  &lt;h1&gt;Copying "Really Achieving Your Childhood Dreams"&lt;/h1&gt;
  &lt;details&gt;
  &lt;summary&gt;Copying... &lt;progress max="375505392" value="97543282"&gt;&lt;/progress&gt; 25%&lt;/summary&gt;
  &lt;dl&gt;
    &lt;dt&gt;Transfer rate:&lt;/dt&gt; &lt;dd&gt;452KB/s&lt;/dd&gt;
    &lt;dt&gt;Local filename:&lt;/dt&gt; &lt;dd&gt;/home/rpausch/raycd.m4v&lt;/dd&gt;
    &lt;dt&gt;Remote filename:&lt;/dt&gt; &lt;dd&gt;/var/www/lectures/raycd.m4v&lt;/dd&gt;
    &lt;dt&gt;Duration:&lt;/dt&gt; &lt;dd&gt;01:16:27&lt;/dd&gt;
    &lt;dt&gt;Color profile:&lt;/dt&gt; &lt;dd&gt;SD (6-1-6)&lt;/dd&gt;
    &lt;dt&gt;Dimensions:&lt;/dt&gt; &lt;dd&gt;320&times;240&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;/details&gt;
&lt;/section&gt;
    </pre>

  </div>

  <div class="example">
    The following shows how a <code>details</code> element can be used to hide some controls by
    default:

    <pre highlight="html">
&lt;details&gt;
  &lt;summary&gt;&lt;label for=fn&gt;Name &amp; Extension:&lt;/label&gt;&lt;/summary&gt;
  &lt;p&gt;&lt;input type=text id=fn name=fn value="Pillar Magazine.pdf"&gt;
  &lt;p&gt;&lt;label&gt;&lt;input type=checkbox name=ext checked&gt; Hide extension&lt;/label&gt;
&lt;/details&gt;
    </pre>

    One could use this in conjunction with other <code>details</code> in a list to allow the user
    to collapse a set of fields down to a small set of headings, with the ability to open each
    one.

    <p class="details-example"><img src="images/sample-details-1.png" width="345" height="611" alt=" /><img src="images/sample-details-2.png" width="345" height="666" alt=" /></p>

    In these examples, the summary really just summarizes what the controls can change, and not
    the actual values, which is less than ideal.

  </div>

  <div class="example">
    Because the <code>open</code> attribute is added and removed
    automatically as the user interacts with the control, it can be used in CSS to style the element
    differently based on its state. Here, a stylesheet is used to animate the color of the summary
    when the element is opened or closed:

    <pre highlight="html">
&lt;style&gt;
  details &gt; summary { transition: color 1s; color: black; }
  details[open] &gt; summary { color: red; }
&lt;/style&gt;
&lt;details&gt;
  &lt;summary&gt;Automated Status: Operational&lt;/summary&gt;
  &lt;p&gt;Velocity: 12m/s&lt;/p&gt;
  &lt;p&gt;Direction: North&lt;/p&gt;
&lt;/details&gt;
    </pre>

  </div>

<h4 id="the-summary-element">The <dfn><code>summary</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As the first child of a <code>details</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Either: <a>phrasing content</a>.</dd>
    <dd>Or: one element of <a>heading content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>button</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>summary</code> element <a>represents</a> a summary, caption, or legend for the
  rest of the contents of the <code>summary</code> element's parent <code>details</code>
  element<span class="impl">, if any</span>.

<h4 id="the-menu-element">The <dfn><code>menu</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd>If the element's <code>type</code> attribute is in the <a>toolbar</a> state: <a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dd>If the element's <code>type</code> attribute is in the <a>popup menu</a> state: as the child of a <code>menu</code> element whose <code>type</code> attribute is in the <a>popup menu</a> state.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>If the element's <code>type</code> attribute is in the <a>toolbar</a> state: either zero or more <code>li</code> and <a>script-supporting</a> elements, or, <a>flow content</a>.</dd>
    <dd>If the element's <code>type</code> attribute is in the <a>popup menu</a> state: in any order, zero or more <code>menuitem</code> elements, zero or more <code>hr</code> elements, zero or more <code>menu</code> elements whose <code>type</code> attributes are in the <a>popup menu</a> state, and zero or more <a>script-supporting</a> elements.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>type</code> - Type of menu</dd>
    <dd><code>label</code> - User-visible label</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>menu</code></a>
    (default - <a><em>do not set</em></a>),
    <a><code>directory</code></a>,
    <a><code>list</code></a>,
    <a><code>listbox</code></a>,
    <a><code>menubar</code></a>,
    <a><code>tablist</code></a>,
    <a><code>tabpanel</code></a>
    or <a><code>tree</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLMenuElement : HTMLElement {
  attribute DOMString type;
  attribute DOMString label;
};
</pre>
  </dd></dl>

  The <code>menu</code> element represents a list of commands.

  The <dfn><code>type</code></dfn> attribute is an <a>enumerated
  attribute</a> indicating the kind of menu being declared. The attribute has two states. The
  "<dfn><code>context</code></dfn>" keyword maps to the <dfn>popup menu</dfn> state, in which the element is declaring a context menu
  or the menu for a <a>menu button</a>. The "<dfn><code>toolbar</code></dfn>" keyword maps to the <dfn>toolbar</dfn> state, in which the element is declaring a toolbar. The attribute may also be
  omitted. The <i>missing value default</i> is the <a>popup menu</a>
  state if the parent element is a <code>menu</code> element whose <code>type</code> attribute is in the <a>popup
  menu</a> state; otherwise, it is the <a>toolbar</a> state.

  If a <code>menu</code> element's <code>type</code> attribute is in the
  <a>popup menu</a> state, then the element <a>represents</a>
  the commands of a popup menu, and the user can only examine and interact with the commands if that
  popup menu is activated through some other element, either via the <code>contextmenu</code> attribute or the <code>button</code> element's <code>menu</code> attribute.

  If a <code>menu</code> element's <code>type</code> attribute is in the
  <a>toolbar</a> state, then the element <a>represents</a> a
  toolbar consisting of its contents, in the form of either an unordered list of items (represented
  by <code>li</code> elements), each of which represents a command that the user can perform or
  activate, or, if the element has no <code>li</code> element children, <a>flow content</a>
  describing available commands.

  The <dfn><code>label</code></dfn> attribute gives the label of the
  menu. It is used by user agents to display nested menus in the UI: a context menu containing
  another menu would use the nested menu's <code>label</code> attribute for
  the submenu's menu label. The <code>label</code> attribute must only be
  specified on <code>menu</code> elements whose parent element is a <code>menu</code> element whose
  <code>type</code> attribute is in the <a>popup
  menu</a> state.

  <div class="impl">

  <hr />

  A <code>menu</code> is a <dfn>currently relevant <code>menu</code> element</dfn> if it is the
  child of a <a>currently relevant <code>menu</code> element</a>, or if it is the
  <a>designated pop-up menu</a> of a <code>button</code> element that is not
  <a>inert</a>, does not have a <code>hidden</code> attribute, and is not
  the descendant of an element with a <code>hidden</code> attribute.

  <hr />

  A <dfn>menu construct</dfn> consists of an ordered list of zero or more <dfn>menu item constructs</dfn>, which can be any of:

  <ul class="brief">
    <li><a>Commands</a>, which can be marked as <dfn>default commands</dfn> (<code>menuitem</code>)</li>
    <li><dfn>Separators</dfn> (<code>hr</code>)</li>
    <li>Other <a>menu constructs</a>, each with an associated <dfn>submenu label</dfn>, which allows the list to be nested (<code>menu</code>)</li>
  </ul>

  To <dfn>build and show a menu</dfn> for a particular <code>menu</code> element
  <var>source</var> and with a particular element <var>subject</var> as a subject, the user agent
  must run the following steps:

  <ol>

    <li>Let <var>pop-up menu</var> be the <a>menu construct</a> created by the <a>build a
    menu construct</a> algorithm when passed the <var>source</var> element.

    </li><li>

    Display <var>pop-up menu</var> to the user, and let the algorithm that invoked this one continue.

    If the user selects a <a>menu item construct</a> that corresponds to an element that still represents a <a>command</a> when the user selects it, then the UA must invoke that
    command's <a>Action</a>. If the command's <a>Action</a> is defined as <a>firing
    a <code>click</code> event</a>, either directly or via the <a>run
    synthetic click activation steps</a> algorithm, then the <code>relatedTarget</code> attribute of that <code>click</code> event must be initialized to <var>subject</var>.

    Pop-up menus must not, while being shown, reflect changes in the DOM. The menu is constructed
    from the DOM before being shown, and is then immutable.

    </li>

  </ol>

  To <dfn>build a menu construct</dfn> for an element <var>source</var>, the user agent must run
  the following steps, which return a <a>menu construct</a>:

  <ol>

    <li>Let <var>generated menu</var> be an empty <a>menu construct</a>.</li>

    <li>

    Run the <a>menu item generator</a> steps for the <code>menu</code> element using <var>generated menu</var>
    as the output.

    The <dfn>menu item generator</dfn> steps for a <code>menu</code> element using a specific <a>menu construct</a> <var>output</var> as
    output are as follows: For each child node of the <code>menu</code> in <a>tree order</a>,
    run the appropriate steps from the following list:

    <dl class="switch">

      <dt>If the child is a <code>menuitem</code> element that <a>defines
      a command</a></dt>

      <dd>Append the <a>command</a> to <var>output</var>, respecting the command's <a>facets</a>. If the <code>menuitem</code> element has a <code>default</code> attribute, mark the <a>command</a> as being a <a>default
      command</a>.</dd>

      <dt>If the child is an <code>hr</code> element</dt>

      <dd>Append a <a>separator</a> to <var>output</var>.</dd>

      <dt>If the child is a <code>menu</code> element with no <code>label</code> attribute</dt>

      <dd>Append a <a>separator</a> to <var>output</var>, then run
      the <a>menu item generator</a> steps for this child <code>menu</code> element, using
      <var>output</var> as the output, then append another <a>separator</a> to <var>output</var>.</dd>

      <dt>If the child is a <code>menu</code> element with a <code>label</code> attribute</dt>

      <dd>Let <var>submenu</var> be the result of running the <a>build a menu construct</a> steps for the child <code>menu</code> element. Then, append <var>submenu</var> to <var>output</var>, using the value of the child
      <code>menu</code> element's <code>label</code> attribute as the <a>submenu label</a>.</dd>

      <dt>Otherwise</dt>

      <dd><a>Ignore</a> the child node.</dd>

    </dl>

    </li>

    <li>Remove from <var>output</var> any <a>menu construct</a> whose <a>submenu
    label</a> is the empty string.</li>

    <li>Remove from <var>output</var> any <a>menu item construct</a> representing a <a>command</a> whose <a>Label</a> is
    the empty string.</li>

    <li>Collapse all sequences of two or more adjacent <a>separators</a> in <var>output</var> to a single <a>separator</a>.</li>

    <li>If the first <a>menu item construct</a> in <var>output</var> is a <a>separator</a>, then remove it.</li>

    <li>If the last <a>menu item construct</a> in <var>output</var> is a <a>separator</a>, then remove it.</li>

    <li>Return <var>output</var>.</li>

  </ol>

  <hr />

  The <dfn><code>type</code></dfn> IDL attribute must <a>reflect</a>
  the content attribute of the same name, <a>limited to only known values</a>.

  The <dfn><code>label</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.

  </div>

  <div class="example">
    In this example, the <code>menu</code> element is used to describe a toolbar with three menu
    buttons on it, each of which has a dropdown menu with a series of options:

  <pre highlight="html">
&lt;menu&gt;
  &lt;li&gt;
  &lt;button type=menu value="File" menu="filemenu"&gt;
  &lt;menu id="filemenu" type="context"&gt;
    &lt;menuitem onclick="fnew()" label="New..."&gt;
    &lt;menuitem onclick="fopen()" label="Open..."&gt;
    &lt;menuitem onclick="fsave()" label="Save"&gt;
    &lt;menuitem onclick="fsaveas()" label="Save as..."&gt;
  &lt;/menu&gt;
  &lt;/li&gt;
  &lt;li&gt;
  &lt;button type=menu value="Edit" menu="editmenu"&gt;
  &lt;menu id="editmenu" type="context"&gt;
    &lt;menuitem onclick="ecopy()" label="Copy"&gt;
    &lt;menuitem onclick="ecut()" label="Cut"&gt;
    &lt;menuitem onclick="epaste()" label="Paste"&gt;
  &lt;/menu&gt;
  &lt;/li&gt;
  &lt;li&gt;
  &lt;button type=menu value="Help" menu="helpmenu"&gt;
  &lt;menu id="helpmenu" type="context"&gt;
    &lt;menuitem onclick="location='help.html'" label="Help"&gt;
    &lt;menuitem onclick="location='about.html'" label="About"&gt;
  &lt;/menu&gt;
  &lt;/li&gt;
&lt;/menu&gt;
    </pre>

    In a supporting user agent, this might look like this (assuming the user has just activated the
    second button):

    <img src="images/sample-toolbar-1.png" width="303" height="101" alt="A toolbar with three buttons, labeled 'File', 'Edit', and 'Help'; where if you select the 'Edit' button you get a drop-down menu with three more options, 'Copy', 'Cut', and 'Paste'." />

  </div>

<h4 id="the-menuitem-element">The <dfn><code>menuitem</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>menu</code> element whose <code>type</code> attribute is in the <a>popup menu</a> state.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>type</code> - Type of command</dd>
    <dd><code>label</code> - User-visible label</dd>
    <dd><code>icon</code> - Icon for the command</dd>
    <dd><code>disabled</code> Whether the command or control is disabled</dd>
    <dd><code>checked</code> Whether the command or control is checked</dd>
    <dd><code>radiogroup</code> Name of group of commands to treat as a radio button group</dd>
    <dd><code>default</code> - Mark the command as being a default command</dd>
    <dd><code>command</code> - Command definition</dd>
    <dd>Also, the <code>title</code> attribute <a>has special semantics</a> on this element.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a>.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>menuitem</code></a>
    (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLMenuItemElement : HTMLElement {
  attribute DOMString type;
  attribute DOMString label;
  attribute DOMString icon;
  attribute boolean disabled;
  attribute boolean checked;
  attribute DOMString radiogroup;
  attribute boolean default;
};
</pre>
    </dd>
  </dl>

  The <code>menuitem</code> element represents a command that the user can invoke from a popup
  menu (either a <a>context menu</a> or the menu of a <a>menu button</a>).

  A <code>menuitem</code> element that uses one or more of the
    <code>type</code>,
    <code>label</code>,
    <code>icon</code>,
    <code>disabled</code>,
    <code>checked</code>, and
    <code>radiogroup</code>
  attributes defines a new command.

  <hr />

  The <dfn><code>type</code></dfn> attribute indicates the kind of
  command: either a normal command with an associated action, or a state or option that can be
  toggled, or a selection of one item from a list of items.

  The attribute is an <a>enumerated attribute</a> with three keywords and states. The
  "<dfn><code>command</code></dfn>" keyword maps to the
  <a>Command</a> state, the "<dfn><code>checkbox</code></dfn>" keyword maps to the <a>Checkbox</a> state, and the "<dfn><code>radio</code></dfn>" keyword maps to the <a>Radio</a> state. The <i>missing value default</i> is the <a>Command</a> state.

  <dl>

    <dt>The <dfn>Command</dfn> state</dt>

    <dd>The element <a>represents</a> a normal command with an associated action.</dd>

    <dt>The <dfn>Checkbox</dfn> state</dt>

    <dd>The element <a>represents</a> a state or option that can be toggled.</dd>

    <dt>The <dfn>Radio</dfn> state</dt>

    <dd>The element <a>represents</a> a selection of one item from a list of items.</dd>

  </dl>

  The <dfn><code>label</code></dfn> attribute gives the name of the
  command, as shown to the user. The <code>label</code> attribute must
  be specified if the element is in the <a>explicit command</a> mode. If the attribute is
  specified, it must have a value that is not the empty string.

  The <dfn><code>icon</code></dfn> attribute gives a picture that
  represents the command. If the attribute is specified, the attribute's value must contain a
  <a>valid non-empty URL potentially surrounded by spaces</a>. <span class="impl">To obtain
  the <a>absolute URL</a> of the icon when the attribute's value is not the empty string, the
  attribute's value must be <a>resolved</a> relative to the element.
  When the attribute is absent, or its value is the empty string, or <a>resolving</a> its value fails, there is no icon.</span>

  The <dfn><code>disabled</code></dfn> attribute is a
  <a>boolean attribute</a> that, if present, indicates that the command is not available in
  the current state.

  <p class="note">
    The distinction between <code>disabled</code> and
  <code>hidden</code> is subtle. A command would be disabled if, in the same
  context, it could be enabled if only certain aspects of the situation were changed. A command
  would be marked as hidden if, in that situation, the command will never be enabled. For example,
  in the context menu for a water faucet, the command "open" might be disabled if the faucet is
  already open, but the command "eat" would be marked hidden since the faucet could never be
  eaten.
  </p>

  The <dfn><code>checked</code></dfn> attribute is a <a>boolean
  attribute</a> that, if present, indicates that the command is selected. The attribute must be
  omitted unless the <code>type</code> attribute is in either the <a>Checkbox</a> state or the <a>Radio</a> state.

  The <dfn><code>radiogroup</code></dfn> attribute gives the
  name of the group of commands that will be toggled when the command itself is toggled, for
  commands whose <code>type</code> attribute has the value "<code>radio</code>". The scope of the name is the child list of the parent element. The
  attribute must be omitted unless the <code>type</code> attribute is in
  the <a>Radio</a> state. When specified, the
  attribute's value must be a non-empty string.

  <hr />

  The <dfn><code>title</code></dfn> attribute gives a hint describing
  the command, which might be shown to the user to help him.

  The <dfn><code>default</code></dfn> attribute indicates, if
  present, that the command is the one that would have been invoked if the user had directly
  activated the menu's subject instead of using the menu. The <code>default</code> attribute is a <a>boolean attribute</a>.

  <div class="impl">

  <hr />

  The <dfn><code>type</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name, <a>limited to only known
  values</a>.

  The <dfn><code>label</code></dfn>, <dfn><code>icon</code></dfn>, <dfn><code>disabled</code></dfn>, <dfn><code>checked</code></dfn>, and <dfn><code>radiogroup</code></dfn>, and <dfn><code>default</code></dfn> IDL attributes must <a>reflect</a>
  the respective content attributes of the same name.

  <hr />

  If the element's <a>Disabled State</a> is false
  (enabled) then the element's <a>activation behavior</a> depends on the element's <code>type</code> attribute, as follows:

  <dl class="switch">

    <dt>If the <code>type</code> attribute is in the <a>Checkbox</a> state</dt>

    <dd>If the element has a <code>checked</code> attribute, the UA
    must remove that attribute. Otherwise, the UA must add a <code>checked</code> attribute, with the literal value "<code>checked</code>".</dd>

    <dt>If the <code>type</code> attribute is in the <a>Radio</a> state</dt>

    <dd>If the element has a parent, then the UA must walk the list of child nodes of that parent
    element, and for each node that is a <code>menuitem</code> element, if that element has a <code>radiogroup</code> attribute whose value exactly matches the
    current element's (treating missing <code>radiogroup</code>
    attributes as if they were the empty string), and has a <code>checked</code> attribute, must remove that attribute.

    Then, the element's <code>checked</code> attribute must be set
    to the literal value "<code>checked</code>".</dd>

    <dt>Otherwise</dt>

    <dd>The element's <a>activation behavior</a> is to do nothing.</dd>

  </dl>

  <p class="note">
    Firing a synthetic <code>click</code> event at the element
  does not cause any of the actions described above to happen.
  </p>

  If the element's <a>Disabled State</a> is true
  (disabled) then the element has no <a>activation behavior</a>.

  </div>

  <p class="note">
    The <code>menuitem</code> element is not rendered except as <a>part of a popup menu</a>.
  </p>

  <div class="example">
    Here is an example of a pop-up menu button with three options that let the user toggle between
    left, center, and right alignment. One could imagine such a toolbar as part of a text editor. The
    menu also has a separator followed by another menu item labeled "Publish", though that menu item
    is disabled.

    <pre highlight="html">
&lt;button type=menu menu=editmenu&gt;Commands...&lt;/button&gt;
&lt;menu type="context" id="editmenu"&gt;
  &lt;menuitem type="radio" radiogroup="alignment" checked="checked"
          label="Left" icon="icons/alL.png" onclick="setAlign('left')"&gt;
  &lt;menuitem type="radio" radiogroup="alignment"
          label="Center" icon="icons/alC.png" onclick="setAlign('center')"&gt;
  &lt;menuitem type="radio" radiogroup="alignment"
          label="Right" icon="icons/alR.png" onclick="setAlign('right')"&gt;
  &lt;hr&gt;
  &lt;menuitem type="command" disabled
          label="Publish" icon="icons/pub.png" onclick="publish()"&gt;
&lt;/menu&gt;
    </pre>

  </div>

<h4 id="context-menus">Context menus</h4>

<h5 id="declaring-a-context-menu">Declaring a context menu</h5>

  The <dfn><code>contextmenu</code></dfn> attribute gives the element's
  context menu. The value must be the <a>ID</a> of a <code>menu</code>
  element in the same <a>home subtree</a> whose <code>type</code>
  attribute is in the <a>popup menu</a> state.

  <p class="note">
    When a user right-clicks on an element with a <code>contextmenu</code> attribute, the user agent will first fire a <code>contextmenu</code> event at the element, and then, if that event is not
  canceled, a <code>show</code> event at the <code>menu</code> element.
  </p>

  <div class="example">
    Here is an example of a context menu for an input control:

    <pre highlight="html">
&lt;form name="npc"&gt;
  &lt;label&gt;Character name: &lt;input name=char type=text contextmenu=namemenu required&gt;&lt;/label&gt;
  &lt;menu type=context id=namemenu&gt;
  &lt;menuitem label="Pick random name" onclick="document.forms.npc.elements.char.value = getRandomName()"&gt;
  &lt;menuitem label="Prefill other fields based on name" onclick="prefillFields(document.forms.npc.elements.char.value)"&gt;
  &lt;/menu&gt;
&lt;/form&gt;
    </pre>

    This adds two items to the control's context menu, one called "Pick random name", and one
    called "Prefill other fields based on name". They invoke scripts that are not shown in the
    example above.

  </div>

  <div class="impl">

<h5 id="processing-model">Processing model</h5>

  Each element has an <dfn>assigned context menu</dfn>, which can be null. If an element <var>A</var> has a <code>contextmenu</code> attribute, and there is
  an element with the ID given by <var>A</var>'s <code>contextmenu</code> attribute's value in <var>A</var>'s
  <a>home subtree</a>, and the first such element in <a>tree order</a> is a
  <code>menu</code> element whose <code>type</code> attribute is in the <a>popup menu</a> state, then <var>A</var>'s <a>assigned
  context menu</a> is that element. Otherwise, if <var>A</var> has a parent element,
  then <var>A</var>'s <a>assigned context menu</a> is the <a>assigned context
  menu</a> of its parent element. Otherwise, <var>A</var>'s <a>assigned context
  menu</a> is null.

  When an element's context menu is requested (e.g. by the user right-clicking the element, or
  pressing a context menu key), the user agent must apply the appropriate rules from the following
  list:

  <dl class="switch">

    <dt>If the user requested a context menu using a pointing device</dt>

    <dd>The user agent must <a>fire</a> a <a>trusted</a> event with the name <code>contextmenu</code>, that bubbles and is cancelable, and that uses the
    <code>MouseEvent</code> interface, at the element for which the menu was requested. The context
    information of the event must be initialized to the same values as the last
    <code>MouseEvent</code> user interaction event that was fired as part of the gesture that was
    interpreted as a request for the context menu.</dd>

    <dt>Otherwise</dt>

    <dd>The user agent must <a>fire a synthetic mouse
    event named <code>contextmenu</code></a> that bubbles and is
    cancelable at the element for which the menu was requested.</dd>

  </dl>

  <p class="note">
    Typically, therefore, the firing of the <code>contextmenu</code> event will be the default action of a <code>mouseup</code> or <code>keyup</code> event. The exact
  sequence of events is UA-dependent, as it will vary based on platform conventions.
  </p>

  The default action of the <code>contextmenu</code> event depends on
  whether or not the element for which the menu was requested has a non-null <a>assigned context
  menu</a> when the event dispatch has completed, as follows.

  If the <a>assigned context menu</a> of the element for which the menu was requested is
  null, the default action must be for the user agent to show its default context menu, if it has
  one.

  Otherwise, let <var>subject</var> be the element for which the menu was requested, and let
  <var>menu</var> be the <a>assigned context menu</a> of <var>target</var> immediately after
  the <code>contextmenu</code> event's dispatch has completed. The user
  agent must <a>fire</a> a <a>trusted</a> event with the name <code>show</code> at <var>menu</var>, using the <code>RelatedEvent</code> interface,
  with the <code>relatedTarget</code> attribute initialized
  to <var>subject</var>. The event must be cancelable.

  If <em>this</em> event (the <code>show</code> event) is not canceled, then
  the user agent must <a>build and show</a> the menu for
  <var>menu</var> with <var>subject</var> as the subject.

  The user agent may also provide access to its default context menu, if any, with the context
  menu shown. For example, it could merge the menu items from the two menus together, or provide the
  page's context menu as a submenu of the default menu. In general, user agents are encouraged to
  de-emphasize their own contextual menu items, so as to give the author's context menu the
  appearance of legitimacy â to allow documents to feel like "applications" rather than "mere
  Web pages".

  User agents may provide means for bypassing the context menu processing model, ensuring that
  the user can always access the UA's default context menus. For example, the user agent could
  handle right-clicks that have the Shift key depressed in such a way that it does not fire the
  <code>contextmenu</code> event and instead always shows the default
  context menu.

  <hr />

  The <dfn><code>contextMenu</code></dfn> IDL attribute must
  <a>reflect</a> the <code>contextmenu</code> content attribute.

  </div>

  <div class="example">
    In this example, an image of cats is given a context menu with four possible commands:

    <pre highlight="html">
&lt;img src="cats.jpeg" alt="Cats" contextmenu=catsmenu&gt;
&lt;menu type="context" id="catsmenu"&gt;
  &lt;menuitem label="Pet the kittens" onclick="kittens.pet()"&gt;
  &lt;menuitem label="Cuddle with the kittens" onclick="kittens.cuddle()"&gt;
  &lt;menu label="Feed the kittens"&gt;
  &lt;menuitem label="Fish" onclick="kittens.feed(fish)"&gt;
  &lt;menuitem label="Chicken" onclick="kittens.feed(chicken)"&gt;
  &lt;/menu&gt;
&lt;/menu&gt;
    </pre>

    When a user of a mouse-operated visual Web browser right-clicks on the image, the browser
    might pop up a context menu like this:

    <img src="images/contextmenu-collapsed.png" alt="A context menu, shown over a picture of cats, with four lines: the first two offering the menu items described in the markup above ('Pet the kittens' and 'Cuddle with the kittens'), the third giving a submenu labeled 'Feed the kittens', and the fourth, after a horizontal splitter, consisting of only a downwards-pointing disclosure triangle." />

    When the user clicks the disclosure triangle, such a user agent would expand the context menu
    in place, to show the browser's own commands:

    <img src="images/contextmenu-expanded.png" alt="This would result in the same basic interface, but with a longer menu; the disclosure triangle having been replaced by items such as 'View Image', 'Copy Image', 'Copy Image Location', and so forth." />

  </div>

<h5 id="the-relatedevent-interfaces">The <code>RelatedEvent</code> interfaces</h5>

  <pre class="idl" data-highlight="webidl">[Constructor(DOMString type, optional RelatedEventInit eventInitDict)]
interface RelatedEvent : Event {
  readonly attribute EventTarget? relatedTarget;
};

dictionary RelatedEventInit : EventInit {
  EventTarget? relatedTarget;
};
</pre>

  <dl class="domintro">

    <dt><var>event</var> . <code>relatedTarget</code></dt>

    <dd>

    Returns the other event target involved in this event. For example, when a <code>show</code> event fires on a <code>menu</code> element, the other event
    target involved in the event would be the element for which the menu is being shown.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>relatedTarget</code></dfn> attribute must
  return the value it was initialized to. When the object is created, this attribute must be
  initialized to null. It represents the other event target that is related to the event.

  </div>

<h4 id="commands">Commands</h4>

<h5 id="facets">Facets</h5>

  A <dfn>command</dfn> is the abstraction behind menu items, buttons, and
  links. Once a command is defined, other parts of the interface can refer to the same command,
  allowing many access points to a single feature to share facets such as the <a>Disabled State</a>.

  Commands are defined to have the following <dfn>facets</dfn>:

  <dl>

    <dt><dfn>Label</dfn></dt>

    <dd>The name of the command as seen by the user.</dd>

    <dt><dfn>Access Key</dfn></dt>

    <dd>A key combination selected by the user agent that triggers the command. A command might not
    have an Access Key.</dd>

    <dt><dfn>Hidden State</dfn></dt>

    <dd>Whether the command is hidden or not (basically, whether it should be shown in menus).</dd>

    <dt><dfn>Disabled State</dfn></dt>

    <dd>Whether the command is relevant and can be triggered or not.</dd>

    <dt><dfn>Action</dfn></dt>

    <dd>The actual effect that triggering the command will have. This could be a scripted event
    handler, a <a>URL</a> to which to <a>navigate</a>, or a form submission.</dd>

  </dl>

  User agents may expose the <a>commands</a> that match the following criteria:

  <ul class="brief">

    <li>The <a>Hidden State</a> facet is false (visible)</li>

    <li>The element is <a>in a <code>Document</code></a> that has an associated <a>browsing
    context</a>.</li>

    <li>Neither the element nor any of its ancestors has a <code>hidden</code>
    attribute specified.</li>

    <li>The element is not a <code>menuitem</code> element, or it is a child of a <a>currently
    relevant <code>menu</code> element</a>, or it has an <a>Access Key</a>.</li>

  </ul>

  User agents are encouraged to do this especially for commands that have <a>Access Keys</a>, as a way to advertise those keys to the
  user.

  <p class="example">For example, such commands could be listed in the user agent's menu bar.</p>

  <div class="impl">

<h5 id="using-the-a-element-to-define-a-command"><dfn>Using the <code>a</code> element to define a command</dfn></h5>

  An <code>a</code> element with an <code>href</code> attribute <a>defines a command</a>.

  The <a>Label</a> of the command is the string given by the
  element's <code>textContent</code> IDL attribute.

  The <a>AccessKey</a> of the command is the element's
  <a>assigned access key</a>, if any.

  The <a>Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a>Disabled State</a> facet of the command is
  true if the element or one of its ancestors is <a>inert</a>, and false otherwise.

  The <a>Action</a> of the command, if the element has a
  defined <a>activation behavior</a>, is to <a>run synthetic click activation steps</a>
  on the element. Otherwise, it is just to <a>fire a <code>click</code>
  event</a> at the element.

<h5 id="using-the-button-element-to-define-a-command"><dfn>Using the <code>button</code> element to define a command</dfn></h5>

  A <code>button</code> element always <a>defines a
  command</a>.

  The <a>Label</a>, <a>Access Key</a>, <a>Hidden State</a>, and <a>Action</a> facets of the command are determined <a>as for <code>a</code> elements</a> (see the previous section).

  The <a>Disabled State</a> of the command is true if
  the element or one of its ancestors is <a>inert</a>, or if the element's <a>disabled</a> state is set, and false otherwise.

<h5 id="using-the-input-element-to-define-a-command"><dfn>Using the <code>input</code> element to define a command</dfn></h5>

  An <code>input</code> element whose <code>type</code> attribute is in
  one of the <a>Submit Button</a>, <a>Reset Button</a>, <a>Image
  Button</a>, <a>Button</a>, <a>Radio Button</a>, or <a>Checkbox</a> states <a>defines a
  command</a>.

  The <a>Label</a> of the command is determined as
  follows:

  <ul>

    <li>If the <code>type</code> attribute is in one of the
    <a>Submit Button</a>, <a>Reset Button</a>, <a>Image
    Button</a>, or <a>Button</a> states, then the
    <a>Label</a> is the string given by the
    <code>value</code> attribute, if any, and a UA-dependent,
    locale-dependent value that the UA uses to label the button itself if the attribute is
    absent.</li>

    <li>Otherwise, if the element is a <a>labeled control</a>, then the
    <a>Label</a> is the string given by the
    <code>textContent</code> of the first <code>label</code> element in <a>tree order</a>
    whose <a>labeled control</a> is the element in question. (In DOM terms, this is the
    string given by <code><var>element</var>.labels[0].textContent</code>.)</li>

    <li>Otherwise, if the <code>value</code> attribute is present, then
    the <a>Label</a> is the value of that attribute.</li>

    <li>Otherwise, the <a>Label</a> is the empty string.</li>

  </ul>

  The <a>AccessKey</a> of the command is the element's
  <a>assigned access key</a>, if any.

  The <a>Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a>Disabled State</a> of the command is true if
  the element or one of its ancestors is <a>inert</a>, or if the element's <a>disabled</a> state is set, and false otherwise.

  The <a>Action</a> of the command, if the element has a
  defined <a>activation behavior</a>, is to <a>run synthetic click activation steps</a>
  on the element. Otherwise, it is just to <a>fire a <code>click</code>
  event</a> at the element.

<h5 id="using-the-option-element-to-define-a-command"><dfn>Using the <code>option</code> element to define a command</dfn></h5>

  An <code>option</code> element with an ancestor <code>select</code> element and either no <code>value</code> attribute or a <code>value</code>
  attribute that is not the empty string <a>defines a command</a>.

  The <a>Label</a> of the command is the value of the
  <code>option</code> element's <code>label</code> attribute, if there is
  one, or else the value of <code>option</code> element's <code>textContent</code> IDL attribute,
  with <a>leading and trailing whitespace
  stripped</a>, and with any sequences of two or more <a>space
  characters</a> replaced by a single U+0020 SPACE character.

  The <a>AccessKey</a> of the command is the element's
  <a>assigned access key</a>, if any.

  The <a>Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a>Disabled State</a> of the command is true if
  the element is <a>disabled</a>, or if its nearest ancestor
  <code>select</code> element is <a>disabled</a>, or if it or one
  of its ancestors is <a>inert</a>, and false otherwise.

  If the <code>option</code>'s nearest ancestor <code>select</code> element has a <code>multiple</code> attribute, the <a>Action</a> of the command is to <a>pick</a> the <code>option</code> element. Otherwise, the <a>Action</a> is to <a>toggle</a> the <code>option</code> element.

<h5 id="using-the-menuitem-element-to-define-a-command">Using the <dfn><code>menuitem</code></dfn> element to define a
  command</h5>

  A <code>menuitem</code> element always <a>defines a
  command</a>.

  The <a>Label</a> of the command is the value of the element's
  <code>label</code> attribute, if there is one, or the empty string if
  it doesn't.

  The <a>AccessKey</a> of the command is the element's
  <a>assigned access key</a>, if any.

  The <a>Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a>Disabled State</a> of the command is true if
  the element or one of its ancestors is <a>inert</a>, or if the element has a <code>disabled</code> attribute, and false otherwise.

  The <a>Action</a> of the command, if the element has a
  defined <a>activation behavior</a>, is to
  <a>run synthetic click activation steps</a> on the element. Otherwise, it is just to
  <a>fire a <code>click</code> event</a> at the element.

<h5 id="using-the-accesskey-attribute-on-a-label-element-to-define-a-command"><dfn>Using the <code>accesskey</code> attribute
  on a <code>label</code> element to define a command</dfn></h5>

  A <code>label</code> element that has an <a>assigned access key</a> and a <a>labeled
  control</a> and whose <a>labeled control</a> <a>defines a
  command</a>, itself <a>defines a command</a>.

  The <a>Label</a> of the command is the string given by the
  element's <code>textContent</code> IDL attribute.

  The <a>AccessKey</a> of the command is the element's
  <a>assigned access key</a>.

  The <a>Hidden State</a>, <a>Disabled State</a>, and <a>Action</a> facets of the command are the same as the respective
  facets of the element's <a>labeled control</a>.

<h5 id="using-the-accesskey-attribute-on-a-legend-element-to-define-a-command"><dfn>Using the <code>accesskey</code> attribute
  on a <code>legend</code> element to define a command</dfn></h5>

  A <code>legend</code> element that has an <a>assigned access key</a> and is a child of a
  <code>fieldset</code> element that has a descendant that is not a descendant of the
  <code>legend</code> element and is neither a <code>label</code> element nor a <code>legend</code>
  element but that <a>defines a command</a>, itself <a>defines a command</a>.

  The <a>Label</a> of the command is the string given by the
  element's <code>textContent</code> IDL attribute.

  The <a>AccessKey</a> of the command is the element's
  <a>assigned access key</a>.

  The <a>Hidden State</a>, <a>Disabled State</a>, and <a>Action</a> facets of the command are the same as the respective
  facets of the first element in <a>tree order</a> that is a descendant of the parent of the
  <code>legend</code> element that <a>defines a command</a> but is not
  a descendant of the <code>legend</code> element and is neither a <code>label</code> nor a
  <code>legend</code> element.

<h5 id="using-the-accesskey-attribute-to-define-a-command-on-other-elements"><dfn>Using the <code>accesskey</code>
  attribute to define a command on other elements</dfn></h5>

  An element that has an <a>assigned access key</a> <a>defines a
  command</a>.

  If one of the earlier sections that define elements that <a>define
  commands</a> define that this element <a>defines a command</a>,
  then that section applies to this element, and this section does not. Otherwise, this section
  applies to that element.

  The <a>Label</a> of the command depends on the element. If
  the element is a <a>labeled control</a>, the <code>textContent</code> of the first
  <code>label</code> element in <a>tree order</a> whose <a>labeled control</a> is the
  element in question is the <a>Label</a> (in DOM terms, this is
  the string given by <code><var>element</var>.labels[0].textContent</code>). Otherwise,
  the <a>Label</a> is the <code>textContent</code> of the element
  itself.

  The <a>AccessKey</a> of the command is the element's
  <a>assigned access key</a>.

  The <a>Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a>Disabled State</a> of the command is true if
  the element or one of its ancestors is <a>inert</a>, and false otherwise.

  The <a>Action</a> of the command is to run the following
  steps:

  <ol>

    <li>Run the <a>focusing steps</a> for the element.</li>

    <li>If the element has a defined <a>activation behavior</a>, <a>run synthetic click
    activation steps</a> on the element.</li>

    <li>Otherwise, if the element does not have a defined <a>activation behavior</a>,
    <a>fire a <code>click</code> event</a> at the element.</li>

  </ol>
  </div>

<h4 id="the-dialog-element">The <dfn><code>dialog</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning root</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>open</code> - Whether the dialog box is showing</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>dialog</code></a>
    (default - <a><em>do not set</em></a>),
    <a><code>alert</code></a>,
    <a><code>alertdialog</code></a>,
    <a><code>application</code></a>,
    <a><code>log</code></a>,
    <a><code>marquee</code></a>
    or <a><code>status</code></a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLDialogElement : HTMLElement {
  attribute boolean open;
  attribute DOMString returnValue;
  void show(optional (MouseEvent or Element) anchor);
  void showModal(optional (MouseEvent or Element) anchor);
  void close(optional DOMString returnValue);
};
</pre>
    </dd>
  </dl>

  The <code>dialog</code> element represents a part of an application that a user interacts with
  to perform a task, for example a dialog box, inspector, or window.

  The <dfn><code>open</code></dfn> attribute is a <a>boolean
  attribute</a>. When specified, it indicates that the <code>dialog</code> element is active and
  that the user can interact with it.

  <div class="impl">

  A <code>dialog</code> element without an <code>open</code> attribute
  specified should not be shown to the user. This requirement may be implemented indirectly through
  the style layer. For example, user agents that <a>support the suggested
  default rendering</a> implement this requirement using the CSS rules described in the <a>rendering section</a>.

  </div>

  The <code>tabindex</code> attribute must not be specified on
  <code>dialog</code> elements.

  <dl class="domintro">

    <dt><var>dialog</var> . <code>show</code>( [ <var>anchor</var> ] )</dt>

    <dd>

    Displays the <code>dialog</code> element.

    The argument, if provided, provides an anchor point to which the element will be fixed.

    </dd>

    <dt><var>dialog</var> . <code>showModal</code>( [ <var>anchor</var> ] )</dt>

    <dd>

    Displays the <code>dialog</code> element and makes it the top-most modal dialog.

    The argument, if provided, provides an anchor point to which the element will be fixed.

    This method honors the <code>autofocus</code> attribute.

    </dd>

    <dt><var>dialog</var> . <code>close</code>( [ <var>result</var> ] )</dt>

    <dd>

    Closes the <code>dialog</code> element.

    The argument, if provided, provides a return value.

    </dd>

    <dt><var>dialog</var> . <code>returnValue</code> [ = <var>result</var> ]</dt>

    <dd>

    Returns the <code>dialog</code>'s return value.

    Can be set, to update the return value.

    </dd>

  </dl>

  <div class="impl">

  When the <dfn><code>show()</code></dfn> method is invoked, the user
  agent must run the following steps:

  <ol>

    <li>If the element already has an <code>open</code> attribute, then
    abort these steps.</li>

    <li>Add an <code>open</code> attribute to the <code>dialog</code>
    element, whose value is the empty string.</li>

    <li>If the <code>show()</code> method was invoked with an argument,
    <a>set up the position</a> of the <code>dialog</code> element, using that argument as the
    anchor. Otherwise, set the <code>dialog</code> to the <a>normal alignment</a> mode.</li>

    <li>Run the <a>dialog focusing steps</a> for the <code>dialog</code> element.</li>

  </ol>

  <hr />

  Each <code>Document</code> has a stack of <code>dialog</code> elements known as the
  <dfn>pending dialog stack</dfn>. When a <code>Document</code> is created, this stack must be
  initialized to be empty.

  When an element is added to the <a>pending dialog stack</a>, it must also be added to the
  <a>top layer</a> layer. When an element is removed from the <a>pending dialog
  stack</a>, it must be removed from the <a>top layer</a>. [[!FULLSCREEN]]

  When the <dfn><code>showModal()</code></dfn> method is invoked,
  the user agent must run the following steps:

  <ol>

    <li>Let <var>subject</var> be the <code>dialog</code> element on which the method was
    invoked.</li>

    <li>If <var>subject</var> already has an <code>open</code>
    attribute, then throw an <code>InvalidStateError</code> exception and abort these steps.</li>

    <li>If <var>subject</var> is not <a>in a <code>Document</code></a>, then throw
    an <code>InvalidStateError</code> exception and abort these steps.</li>

    <li>Add an <code>open</code> attribute to <var>subject</var>, whose value is the empty string.</li>

    <li>If the <code>showModal()</code> method was invoked with an
    argument, <a>set up the position</a> of <var>subject</var>, using that argument
    as the anchor. Otherwise, set the <code>dialog</code> to the <a>centered alignment</a>
    mode.</li>

    <li>Let <var>subject</var>'s <a>node document</a> be <a>blocked by the modal dialog</a> <var>subject</var>.</li>

    <li>Push <var>subject</var> onto <var>subject</var>'s
    <a>node document</a>'s <a>pending dialog stack</a>.</li>

    <li>Run the <a>dialog focusing steps</a> for <var>subject</var>.</li>

  </ol>

  The <dfn>dialog focusing steps</dfn> for a <code>dialog</code> element <var>subject</var> are as follows:

  <ol>

    <li>If for some reason <var>subject</var> is not a <a>control group owner</a>
    at this point, or if it is <a>inert</a>, abort these steps.</li>

    <li>

    Let <var>control</var> be the first non-<a>inert</a> <a>focusable area</a> in
    <var>subject</var>'s <a>control group</a> whose <a>DOM anchor</a> has an <code>autofocus</code> attribute specified.

    If there isn't one, then let <var>control</var> be the first non-<a>inert</a>
    <a>focusable area</a> in <var>subject</var>'s <a>control group</a>.

    If there isn't one of those either, then let <var>control</var> be <var>subject</var>.

    </li>

    <li>Run the <a>focusing steps</a> for <var>control</var>.</li>

  </ol>

  If at any time a <code>dialog</code> element is <a>removed from a <code>Document</code></a>, then if that <code>dialog</code> is in that
  <code>Document</code>'s <a>pending dialog stack</a>, the following steps must be run:

  <ol>

    <li>Let <var>subject</var> be that <code>dialog</code> element and <var>document</var> be the <code>Document</code> from which it is being removed.</li>

    <li>Remove <var>subject</var> from <var>document</var>'s <a>pending
    dialog stack</a>.</li>

    <li>If <var>document</var>'s <a>pending dialog stack</a> is not empty, then let
    <var>document</var> be <a>blocked by the modal
    dialog</a> that is at the top of <var>document</var>'s <a>pending dialog
    stack</a>. Otherwise, let <var>document</var> be no longer <a>blocked by a modal
    dialog</a> at all.</li>

  </ol>

  When the <dfn><code>close()</code></dfn> method is invoked, the user
  agent must <a>close the dialog</a> that the method was invoked on. If the method was invoked
  with an argument, that argument must be used as the return value; otherwise, there is no return
  value.

  When a <code>dialog</code> element <var>subject</var> is to be <dfn>closed</dfn>, optionally with a return value <var>result</var>, the user agent
  must run the following steps:

  <ol>

    <li>If <var>subject</var> does not have an <code>open</code>
    attribute, then abort these steps.</li>

    <li>Remove <var>subject</var>'s <code>open</code>
    attribute.</li>

    <li>If the argument <var>result</var> was provided, then set the <code>returnValue</code> attribute to the value of <var>result</var>.</li>

    <li>

    If <var>subject</var> is in its <code>Document</code>'s <a>pending dialog
    stack</a>, then run these substeps:

    <ol>

      <li>Remove <var>subject</var> from that <a>pending dialog stack</a>.</li>

      <li>If that <a>pending dialog stack</a> is not empty, then let <var>subject</var>'s <a>node document</a> be <a>blocked by the modal dialog</a> that is at the top of the <a>pending dialog
      stack</a>. Otherwise, let <var>document</var> be no longer <a>blocked by a modal
      dialog</a> at all.</li>

    </ol>

    </li>

    <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>close</code> at <var>subject</var>.</li>

  </ol>

  The <dfn><code>returnValue</code></dfn> IDL attribute, on
  getting, must return the last value to which it was set. On setting, it must be set to the new
  value. When the element is created, it must be set to the empty string.

  <hr />

  <strong>Canceling dialogs</strong>: When a <code>Document</code>'s <a>pending dialog
  stack</a> is not empty, user agents may provide a user interface that, upon activation, <a>queues a task</a> to <a>fire a simple event</a> named <code>cancel</code> that is cancelable at the top <code>dialog</code> element on
  the <code>Document</code>'s <a>pending dialog stack</a>. The default action of this event
  must be to check if that element has an <code>open</code> attribute, and
  if it does, <a>close the dialog</a> with no return value.

  <p class="note">
    An example of such a UI mechanism would be the user pressing the "Escape" key.
  </p>

  <hr />

  All <code>dialog</code> elements are always in one of three modes: <dfn>normal alignment</dfn>,
  <dfn>centered alignment</dfn>, and <dfn>magic alignment</dfn>. When a <code>dialog</code> element
  is created, it must be placed in the <a>normal alignment</a> mode. In this mode, normal CSS
  requirements apply to the element. The <a>centered alignment</a> mode is only used for
  <code>dialog</code> elements that are in the <a>top layer</a>. [[!FULLSCREEN]] [[!CSS-2015]]

  When an element <var>subject</var> is placed in <a>centered alignment</a> mode,
  and when it is in that mode and has new rendering boxes created, the user agent must set up the
  element such that its top static position, for the purposes of calculating the used value of the
  'top' property, is the value that would place the element's top margin edge as far from the top of
  the viewport as the element's bottom margin edge from the bottom of the viewport, if the element's
  height is less than the height of the viewport, and otherwise is the value that would place the
  element's top margin edge at the top of the viewport.

  If there is a <code>dialog</code> element with <a>centered alignment</a> and that is
  <a>being rendered</a> when its <a>browsing context</a> changes viewport width (as
  measured in CSS pixels), then the user agent must recreate the element's boxes, recalculating its
  top static position as in the previous paragraph.

  This top static position of a <code>dialog</code> element with <a>centered alignment</a>
  must remain the element's top static position until its boxes are recreated. (The element's static
  position is only used in calculating the used value of the 'top' property in certain situations;
  it's not used, for instance, to position the element if its 'position' property is set to
  'static'.)

  When a user agent is to <dfn>set up the position</dfn> of an element <var>subject</var> using an anchor <var>anchor</var>, it must run the following
  steps:

  <ol>

    <li>

    If <var>anchor</var> is a <code>MouseEvent</code> object, then run these
    substeps:

    <ol>

      <li>If <var>anchor</var>'s target element does not have a rendered box, or is in a
      different document than <var>subject</var>, then let <var>subject</var> be
      in the <a>centered alignment</a> mode, and abort the <a>set up the position</a>
      steps.</li>

      <li>Let <var>anchor element</var> be an anonymous element rendered as a box with
      zero height and width (so its margin and border boxes both just form a point), positioned so
      that its top and left are at the coordinate identified by the event, and whose properties all
      compute to their initial values.</li>

    </ol>

    Otherwise, let <var>anchor element</var> be <var>anchor</var>.

    </li>

    <li>Put <var>subject</var> in the <a>magic alignment</a> mode, aligned to <var>anchor element</var>.</li>

  </ol>

  While an element <var>A</var> has <a>magic alignment</a>, aligned to an element
  <var>B</var>, the following requirements apply:

  <ul>

    <li>

    If at any time either <var>A</var> or <var>B</var> cease having rendered
    boxes, <var>A</var> and <var>B</var> cease being in the same
    <code>Document</code>, or <var>B</var> ceases being earlier than <var>A</var> in <a>tree order</a>, then, if <var>subject</var> is in the
    <a>pending dialog stack</a>, let <var>subject</var>'s mode become <a>centered
    alignment</a>, otherwise, let <var>subject</var>'s mode become <a>normal
    alignment</a>.

    </li>

    <li>

    <var>A</var>'s 'position' property must compute to the keyword '<a>absolute-anchored</a>' rather than whatever it would
    otherwise compute to (i.e. the 'position' property's specified value is ignored).

    <p class="note">
    The '<a>absolute-anchored</a>'
    keyword's requirements are described below.
  </p>

    </li>

    <li>

    The anchor points for <var>A</var> and <var>B</var> are defined as per the
    appropriate entry in the following list:

    <dl class="switch">

      <dt>If the computed value of 'anchor-point' is 'none' on both <var>A</var> and <var>B</var>

      </dt><dd>
      The anchor points of <var>A</var> and <var>B</var> are the center points
      of their respective first boxes' border boxes.

      </dd><dt>If the computed value of 'anchor-point' is 'none' on <var>A</var> and a specific
      point on <var>B</var>

      </dt><dd>
      The anchor point of <var>B</var> is the point given by its 'anchor-point'
      property.

      If the anchor point of <var>B</var> is the center point of <var>B</var>'s
      first box's border box, then <var>A</var>'s anchor point is the center point of its
      first box's margin box.

      Otherwise, <var>A</var>'s anchor point is on one of its margin edges. Consider
      four hypothetical half-infinite lines L1, L2, L3, and L4 that each start in the center of <var>B</var>'s first box's border box, and that extend respectively through the top left
      corner, top right corner, bottom right corner, and bottom left corner of <var>B</var>'s first box's border box. <var>A</var>'s anchor point is determined
      by the location of <var>B</var>'s anchor point relative to these four hypothetical
      lines, as follows:

      If the anchor point of <var>B</var> lies on L1 or L2, or inside the area bounded
      by L1 and L2 that also contains the points above <var>B</var>'s first box's border
      box, then let <var>A</var>'s anchor point be the horizontal center of <var>A</var>'s bottom margin edge.

      Otherwise, if the anchor point of <var>B</var> lies on L3 or L4, or inside the
      area bounded by L4 and L4 that also contains the points below <var>B</var>'s first
      box's border box, then let <var>A</var>'s anchor point be the horizontal center of
      <var>A</var>'s top margin edge.

      Otherwise, if the anchor point of <var>B</var> lies inside the area bounded by L4
      and L1 that also contains the points to the left of <var>B</var>'s first box's border
      box, then let <var>A</var>'s anchor point be the vertical center of <var>A</var>'s right margin edge.

      Otherwise, the anchor point of <var>B</var> lies inside the area bounded by L2 and
      L3 that also contains the points to the right of <var>B</var>'s first box's border
      box; let <var>A</var>'s anchor point be the vertical center of <var>A</var>'s left margin edge.

      </dd><dt>If the computed value of 'anchor-point' is a specific point on <var>A</var> and
      'none' on <var>B</var>

      </dt><dd>
      The anchor point of <var>A</var> is the point given by its 'anchor-point'
      property.

      If the anchor point of <var>A</var> is the center point of <var>A</var>'s
      first box's margin box, then <var>B</var>'s anchor point is the center point of its
      first box's border box.

      Otherwise, <var>B</var>'s anchor point is on one of its border edges. Consider
      four hypothetical half-infinite lines L1, L2, L3, and L4 that each start in the center of <var>A</var>'s first box's margin box, and that extend respectively through the top left
      corner, top right corner, bottom right corner, and bottom left corner of <var>A</var>'s first box's margin box. <var>B</var>'s anchor point is determined
      by the location of <var>A</var>'s anchor point relative to these four hypothetical
      lines, as follows:

      If the anchor point of <var>A</var> lies on L1 or L2, or inside the area bounded
      by L1 and L2 that also contains the points above <var>A</var>'s first box's margin
      box, then let <var>B</var>'s anchor point be the horizontal center of <var>B</var>'s bottom border edge.

      Otherwise, if the anchor point of <var>A</var> lies on L3 or L4, or inside the
      area bounded by L4 and L4 that also contains the points below <var>A</var>'s first
      box's margin box, then let <var>B</var>'s anchor point be the horizontal center of
      <var>B</var>'s top border edge.

      Otherwise, if the anchor point of <var>A</var> lies inside the area bounded by L4
      and L1 that also contains the points to the left of <var>A</var>'s first box's margin
      box, then let <var>B</var>'s anchor point be the vertical center of <var>B</var>'s right border edge.

      Otherwise, the anchor point of <var>A</var> lies inside the area bounded by L2 and
      L3 that also contains the points to the right of <var>A</var>'s first box's margin
      box; let <var>B</var>'s anchor point be the vertical center of <var>B</var>'s left border edge.

      </dd><dt>If the computed value of 'anchor-point' is a specific point on both <var>A</var>
      and <var>B</var>

      </dt><dd>
      The anchor points of <var>A</var> and <var>B</var> are the points given
      by their respective 'anchor-point' properties.

    </dd></dl>

    <p class="note">
    The rules above generally use <var>A</var>'s <em>margin</em> box, but
    <var>B</var>'s <em>border</em> box. This is because while <var>A</var> always
    has a margin box, and using the margin box allows for the dialog to be positioned offset from
    the box it is annotating, <var>B</var> sometimes does not have a margin box (e.g. if it
    is a table-cell), or has a margin box whose position may be not entirely clear (e.g. in the face
    of margin collapsing and 'clear' handling of in-flow blocks).

    In cases where <var>B</var> does not have a border box but its border box is used by
    the algorithm above, user agents must use its first box's content area instead. (This is in
    particular an issue with boxes in tables that have 'border-collapse' set to 'collapse'.)

  </p></li>

    <li>

    When an element's 'position' property computes to '<dfn>absolute-anchored</dfn>', the 'float' property does not
    apply and must compute to 'none', the 'display' property must compute to a value as described by
    the table in <a>the section of CSS
    2.1 describing the <cite>relationships between 'display', 'position', and 'float'</cite></a>,
    and the element's box must be positioned using the rules for absolute positioning but with its
    static position set such that if the box is positioned in its static position, its anchor point
    is exactly aligned over the anchor point of the element to which it is <a>magically aligned</a>. Elements aligned in this way are <i>absolutely
    positioned</i>. For the purposes of determining the containing block of other elements, the
    '<a>absolute-anchored</a>' keyword must be treated
    like the 'absolute' keyword.

    </li>

  </ul>

  <p class="note">
    The trivial example of an element that does not have a rendered box is one whose
  'display' property computes to 'none'. However, there are many other cases; e.g. table columns do
  not have boxes (their properties merely affect other boxes).
  </p>

  <p class="note">
    If an element to which another element is anchored changes rendering, the anchored
  element will be be repositioned accordingly. (In other words, the requirements above are live,
  they are not just calculated once per anchored element.)
  </p>

  <p class="note">
    The '<a>absolute-anchored</a>'
  keyword is not a keyword that can be specified in CSS; the 'position' property can only compute to
  this value if the <code>dialog</code> element is positioned via the APIs described above.
  </p>

  User agents in visual interactive media should allow the user to pan the viewport to access all
  parts of a <code>dialog</code> element's border box, even if the element is larger than the
  viewport and the viewport would otherwise not have a scroll mechanism (e.g. because the viewport's
  'overflow' property is set to 'hidden').

  <hr />

  The <dfn><code>open</code></dfn> IDL attribute must
  <a>reflect</a> the <code>open</code> content attribute.

  </div>

  <div class="example">
    This dialog box has some small print. The <code>main</code> element is used to draw the user's
    attention to the more important parts.

    <pre highlight="html">
&lt;dialog&gt;
  &lt;h2&gt;Add to Wallet&lt;/h2&gt;
  &lt;main&gt;
  &lt;p&gt;How many gold coins do you want to add to your wallet?&lt;/p&gt;
  &lt;p&gt;&lt;input name=amt type=number min=0 step=0.01 value=100&gt;&lt;/p&gt;
  &lt;/main&gt;
  &lt;p&gt;&lt;small&gt;You add coins at your own risk.&lt;/small&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;&lt;input name=round type=checkbox&gt; Only add perfectly round coins &lt;/label&gt;
  &lt;p&gt;&lt;input type=button onclick="submit()" value="Add Coins"&gt;&lt;/p&gt;
&lt;/dialog&gt;
    </pre>

  </div>

<h5 id="anchor-points">Anchor points</h5>

  <p class="critical">This section will eventually be moved to a CSS specification; it is specified
  here only on an interim basis until an editor can be found to own this.</p>

  <table class="css-property">
    <caption>'anchor-point'</caption>
    <tbody><tr>
    <th>Value:
    </th><td> none | &lt;position&gt;
    </td></tr><tr>
    <th>Initial:
    </th><td> none
    </td></tr><tr>
    <th>Applies to:
    </th><td> all elements
    </td></tr><tr>
    <th>Inherited:
    </th><td> no
    </td></tr><tr>
    <th>Percentages:
    </th><td> refer to width or height of box; see prose
    </td></tr><tr>
    <th>Media:
    </th><td> visual
    </td></tr><tr>
    <th>Computed value:
    </th><td> The specified value, but with any lengths replaced by their corresponding absolute length
    </td></tr><tr>
    <th>Animatable:
    </th><td> no
    </td></tr><tr>
    <th>Canonical order:
    </th><td> per grammar
  </td></tr></tbody></table>

  The 'anchor-point' property specifies a point to which dialog boxes are to be aligned.

  If the value is a &lt;position&gt;, the anchor point is the point given by the value, which
  must be interpreted relative to the element's first rendered box's margin box. Percentages must be
  calculated relative to the element's first rendered box's margin box (specifically, its width for
  the horizontal position and its height for the vertical position). [[!CSS-VALUES]] [[!CSS-2015]]

  If the value is the keyword 'none', then no explicit anchor point is defined. The user agent
  will pick an anchor point automatically if necessary (as described in the definition of the
  <code>open()</code> method above).

<h3 id="scripting">Scripting</h3>

  Scripts allow authors to add interactivity to their documents.

  Authors are encouraged to use declarative alternatives to scripting where possible, as
  declarative mechanisms are often more maintainable, and many users disable scripting.

  <div class="example">
    For example, instead of using script to show or hide a section to show more details, the
    <code>details</code> element could be used.

  </div>

  Authors are also encouraged to make their applications degrade gracefully in the absence of
  scripting support.

  <div class="example">
    For example, if an author provides a link in a table header to dynamically resort the table,
    the link could also be made to function without scripts by requesting the sorted table from the
    server.

  </div>

<h4 id="the-script-element">The <dfn><code>script</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Script-supporting element</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>metadata content</a> is expected.</dd>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dd>Where <a>script-supporting elements</a> are expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>If there is no <code>src</code>
    attribute, depends on the value of the <code>type</code> attribute, but must match
    <a>script content restrictions</a>.</dd>
    <dd>If there <em>is</em> a <code>src</code>
    attribute, the element must be either empty or contain only
    <a>script documentation</a> that also matches <a>script
    content restrictions</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>type</code> - Type of embedded resource</dd>
    <dd><code>charset</code> - Character encoding of the external script resource</dd>
    <dd><code>async</code> - Execute script <a>in parallel</a></dd>
    <dd><code>defer</code> - Defer script execution</dd>
    <dd><code>crossorigin</code> - How the element handles crossorigin requests</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
<pre class="idl" data-highlight="webidl">interface HTMLScriptElement : HTMLElement {
  attribute DOMString src;
  attribute DOMString type;
  attribute DOMString charset;
  attribute boolean async;
  attribute boolean defer;
  attribute DOMString? crossOrigin;
  attribute DOMString text;
};
</pre>
    </dd>
  </dl>

  The <code>script</code> element allows authors to include dynamic script and data blocks in
  their documents. The element does not <a>represent</a> content for the
  user.

  When used to include dynamic scripts, the scripts may either be embedded inline or may be
  imported from an external file using the <code>src</code> attribute. If
  the language is not that described by "<code>text/javascript</code>", then the <code>type</code> attribute must be present, as described below. Whatever
  language is used, the contents of the <code>script</code> element must conform with the
  requirements of that language's specification.

  When used to include data blocks (as opposed to scripts), the data must be embedded inline, the
  format of the data must be given using the <code>type</code> attribute,
  the <code>src</code> attribute must not be specified, and the contents of
  the <code>script</code> element must conform to the requirements defined for the format used.

  The <dfn><code>type</code></dfn> attribute gives the language of the
  script or format of the data. If the attribute is present, its value must be a <a>valid MIME
  type</a>. The <code>charset</code> parameter must not be specified. The default, which
  is used if the attribute is absent, is "<code>text/javascript</code>".

  The <dfn><code>src</code></dfn> attribute, if specified, gives the
  address of the external script resource to use. The value of the attribute must be a <a>valid
  non-empty URL potentially surrounded by spaces</a> identifying a script resource of the type
  given by the <code>type</code> attribute, if the attribute is present, or
  of the type "<code>text/javascript</code>", if the attribute is absent. A resource is a
  script resource of a given type if that type identifies a scripting language and the resource
  conforms with the requirements of that language's specification.

  The <dfn><code>charset</code></dfn> attribute gives the character
  encoding of the external script resource. The attribute must not be specified if the <code>src</code> attribute is not present. If the attribute is set, its value
  must be an <a>ASCII case-insensitive</a> match for one of the <a>labels</a> of an <a>encoding</a>, and must specify the same <a>encoding</a> as
  the <code>charset</code> parameter of the <a>Content-Type
  metadata</a> of the external file, if any. [[!ENCODING]]

  The <dfn><code>async</code></dfn> and <dfn><code>defer</code></dfn> attributes are <a>boolean attributes</a> that indicate how the script should be executed. The <code>defer</code> and <code>async</code> attributes
  must not be specified if the <code>src</code> attribute is not
  present.

  There are three possible modes that can be selected using these attributes. If the <code>async</code> attribute is present, then the script will be executed
  as soon as it is available, but without blocking further parsing of the page. If the <code>async</code>
  attribute is not present but the <code>defer</code> attribute is
  present, then the script is executed when the page has finished parsing. If neither attribute is
  present, then the script is fetched and executed immediately, before the user agent continues
  parsing the page. This is summarized in the following schematic diagram:

  <img src="images/asyncdefer.svg" style="width: 80%; min-width: 690px;" alt="With <script>, parsing is interrupted by fetching and execution; with <script defer>, fetching is parallel to parsing and execution takes place after all parsing has finished; and with <script async>, fetching is parallel to parsing but once it finishes parsing is interrupted to execute the script." />

  <p class="note">
    The exact processing details for these attributes are, for mostly historical
  reasons, somewhat non-trivial, involving a number of aspects of HTML. The implementation
  requirements are therefore by necessity scattered throughout the specification. The algorithms
  below (in this section) describe the core of this processing, but these algorithms reference and
  are referenced by the parsing rules for <code>script</code> <a>start</a> and <a>end</a> tags in HTML, <a>in foreign content</a>,
  and <a>in XML</a>, the rules for the <code>document.write()</code> method, the handling of <a>scripting</a>, etc.
  </p>

  The <code>defer</code> attribute may be specified even if the <code>async</code> attribute is specified, to cause legacy Web browsers that
  only support <code>defer</code> (and not <code>async</code>) to fall back to the <code>defer</code> behavior instead of the blocking behavior that
  is the default.

  The <dfn><code>crossorigin</code></dfn> attribute is a
  <a>CORS settings attribute</a>. It controls, for scripts that are obtained from other <a>origins</a>, whether error information will be exposed.

  Changing the <code>src</code>, <code>type</code>, <code>charset</code>, <code>async</code>, <code>defer</code>, and <code>crossorigin</code> attributes dynamically has no direct effect;
  these attribute are only used at specific times described below.

  <div class="impl">

  A <code>script</code> element has several associated pieces of state.

  The first is a flag indicating whether or not the script block has been <dfn>"already
  started"</dfn>. Initially, <code>script</code> elements must have this flag unset (script blocks,
  when created, are not "already started"). The <a>cloning
  steps</a> for <code>script</code> elements must set the "already started" flag on the copy if
  it is set on the element being cloned.

  The second is a flag indicating whether the element was <dfn>"parser-inserted"</dfn>.
  Initially, <code>script</code> elements must have this flag unset. It is set by the <a>HTML
  parser</a> and the <a>XML parser</a> on <code>script</code> elements they insert and
  affects the processing of those elements.

  The third is a flag indicating whether the element will <dfn>"non-blocking"</dfn>. Initially,
  <code>script</code> elements must have this flag set. It is unset by the <a>HTML parser</a>
  and the <a>XML parser</a> on <code>script</code> elements they insert. In addition, whenever
  a <code>script</code> element whose <a>"non-blocking"</a> flag is set has a <code>async</code> content attribute added, the element's
  <a>"non-blocking"</a> flag must be unset.

  The fourth is a flag indicating whether or not the script block is <dfn>"ready to be
  parser-executed"</dfn>. Initially, <code>script</code> elements must have this flag unset (script
  blocks, when created, are not "ready to be parser-executed"). This flag is used only for elements
  that are also <a>"parser-inserted"</a>, to let the parser know when to execute the
  script.

  The last few pieces of state are <dfn><var>the script block
  type</var></dfn>, <dfn><var>the script block character
  encoding</var></dfn>, and <dfn><var>the script block
  fallback character encoding</var></dfn>. They are determined when the script is prepared, based on
  the attributes on the element at that time, and the
  <code>script</code> element's <a>node document</a>.

  When a <code>script</code> element that is not marked as being <a>"parser-inserted"</a>
  experiences one of the events listed in the following list, the user agent must <a>immediately</a>
  <a>prepare</a> the <code>script</code> element:

  <ul>

    <li>The <code>script</code> element gets <a>inserted
    into a document</a>, at the time the <a>node is inserted</a>
    according to the DOM, after any other <code>script</code> elements inserted at the same time that
    are earlier in the <code>Document</code> in <a>tree order</a>.</li>

    <li>The <code>script</code> element is <a>in a <code>Document</code></a> and a node or
    document fragment is <a>inserted</a> into the
    <code>script</code> element, after any <code>script</code> elements <a>inserted</a> at that time.</li>

    <li>The <code>script</code> element is <a>in a <code>Document</code></a> and has a <code>src</code> attribute set where previously the element had no such
    attribute.</li>

  </ul>

  To <dfn>prepare a script</dfn>, the user agent must act as
  follows:

  <ol>

    <li>

    If the <code>script</code> element is marked as having <a>"already started"</a>, then
    the user agent must abort these steps at this point. The script is not executed.

    </li>

    <li>

    If the element has its <a>"parser-inserted"</a> flag set, then set <var>was-parser-inserted</var> to true and unset the element's
    <a>"parser-inserted"</a> flag. Otherwise, set <var>was-parser-inserted</var> to
    false.

    <p class="note">
    This is done so that if parser-inserted <code>script</code> elements fail to run
    when the parser tries to run them, e.g. because they are empty or specify an unsupported
    scripting language, another script can later mutate them and cause them to run again.
  </p>

    </li>

    <li>

    If <var>was-parser-inserted</var> is true and the element does not have an <code>async</code> attribute, then set the element's
    <a>"non-blocking"</a> flag to true.

    <p class="note">
    This is done so that if a parser-inserted <code>script</code> element fails to
    run when the parser tries to run it, but it is later executed after a script dynamically updates
    it, it will execute in a non-blocking fashion even if the <code>async</code>
    attribute isn't set.
  </p>

    </li>

    <li id="script-processing-empty">

    If the element has no <code>src</code> attribute, and its child
    nodes, if any, consist only of comment nodes and empty <code>Text</code> nodes, then the user
    agent must abort these steps at this point. The script is not executed.

    </li>

    <li>

    If the element is not <a>in a <code>Document</code></a>, then the user agent must abort
    these steps at this point. The script is not executed.

    </li>

    <li id="script-processing-prepare">

    If either:

    <ul class="brief">

      <li>the <code>script</code> element has a <code>type</code> attribute
      and its value is the empty string, or</li>

      <li>the <code>script</code> element has no <code>type</code> attribute
      but it has a <code>language</code> attribute and <em>that</em>
      attribute's value is the empty string, or</li>

      <li>the <code>script</code> element has neither a <code>type</code>
      attribute nor a <code>language</code> attribute, then</li>

    </ul>

    ...let <var>the script block's type</var> for this
    <code>script</code> element be "<code>text/javascript</code>".

    Otherwise, if the <code>script</code> element has a <code>type</code> attribute, let <var>the
    script block's type</var> for this <code>script</code> element be the value of that attribute
    with any leading or trailing sequences of <a>space characters</a>
    removed.

    Otherwise, the element has a non-empty <code>language</code>
    attribute; let <var>the script block's type</var> for this
    <code>script</code> element be the concatenation of the string "<code>text/</code>"
    followed by the value of the <code>language</code> attribute.

    <p class="note">
    The <code>language</code> attribute is never
    conforming, and is always ignored if there is a <code>type</code>
    attribute present.
  </p>

    </li>

    <li>

    If the user agent does not <a>support the scripting language</a> given by <var>the script block's type</var> for this <code>script</code> element,
    then the user agent must abort these steps at this point. The script is not executed.

    </li>

    <li>

    If <var>was-parser-inserted</var> is true, then flag the element as
    <a>"parser-inserted"</a> again, and set the element's <a>"non-blocking"</a> flag to
    false.

    </li>

    <li id="script-processing-start">

    The user agent must set the element's <a>"already started"</a> flag.

    <p class="note">
    The state of the element at this moment <a>is later used</a> to determine the script source.
  </p>

    </li>

    <li>

    If the element is flagged as <a>"parser-inserted"</a>, but the element's
    <a>node document</a> is not the <code>Document</code> of the parser that created the element,
    then abort these steps.

    </li>

    <li id="script-processing-noscript">

    If <a>scripting is disabled</a> for the <code>script</code>
    element, then the user agent must abort these steps at this point. The script is not
    executed.

    <p class="note">
    The definition of <a>scripting is disabled</a>
    means that, amongst others, the following scripts will not execute: scripts in
    <code>XMLHttpRequest</code>'s <code>responseXML</code>
    documents, scripts in <code>DOMParser</code>-created documents, scripts in documents created by
    <code>XSLTProcessor</code>'s <code>transformToDocument</code> feature, and scripts
    that are first inserted by a script into a <code>Document</code> that was created using the
    <code>createDocument()</code> API. [[!XHR]] [[!DOMPARSING]]  [[!DOM]]
  </p>

    </li>

    <li id="script-processing-for">

    If the <code>script</code> element has an <code>event</code>
    attribute and a <code>for</code> attribute, then run these substeps:

    <ol>

      <li>Let <var>for</var> be the value of the <code>for</code>
      attribute.</li>

      <li>Let <var>event</var> be the value of the <code>event</code> attribute.</li>

      <li><a>Strip leading and trailing whitespace</a> from <var>event</var> and
      <var>for</var>.</li>

      <li>If <var>for</var> is not an <a>ASCII case-insensitive</a> match for the
      string "<code>window</code>", then the user agent must abort these steps at this
      point. The script is not executed.</li>

      <li>If <var>event</var> is not an <a>ASCII case-insensitive</a> match for
      either the string "<code>onload</code>" or the string "<code>onload()</code>", then the user agent must abort these steps at this point. The script
      is not executed.</li>

    </ol>

    </li>

    <li id="script-processing-encoding">

    If the <code>script</code> element has a <code>charset</code>
    attribute, then let <var>the script block's character
    encoding</var> for this <code>script</code> element be the result of <a>getting an
    encoding</a> from the value of the <code>charset</code>
    attribute.

    Otherwise, let <var>the script block's fallback
    character encoding</var> for this <code>script</code> element be the same as <a>the encoding of the document itself</a>.

    <p class="note">
    Only one of these two pieces of state is set.
  </p>

    </li>

    <li id="script-processing-src-prepare">

    If the element has a <code>src</code> content attribute, run these
    substeps:

    <ol>

      <li>Let <var>src</var> be the value of the element's <code>src</code> attribute.</li>

      <li>If <var>src</var> is the empty string, <a>queue a task</a> to <a>fire
      a simple event</a> named <code>error</code> at the element, and abort
      these steps.</li>

      <li><a>Resolve</a> <var>src</var> relative to the
      element.</li>

      <li>If the previous step failed, <a>queue a task</a> to <a>fire a simple
      event</a> named <code>error</code> at the element, and abort these
      steps.</li>

      <li>Let <var>request</var> be the result of <a>creating a potential-CORS request</a> given the
      resulting <a>absolute URL</a> and the current state of the element's
      <code>crossorigin</code> content attribute.</li>

      <li>Set <var>request</var>'s <a>client</a> to the
      element's <a>node document</a>'s <code>Window</code> object's <a>environment settings
      object</a> and <a>type</a> to "<code>script</code>".</li>

      <li>
      <a>Fetch</a> <var>request</var>.

      The resource obtained in this fashion can be either <a>CORS-same-origin</a> or
      <a>CORS-cross-origin</a>. This only affects how error reporting happens.

      For performance reasons, user agents may start fetching the script (as defined above) as
      soon as the <code>src</code> attribute is set, instead, in the hope
      that the element will be inserted into the document (and that the <code>crossorigin</code> attribute won't change value in the
      meantime). Either way, once the element is <a>inserted into the document</a>, the load must have started as described in this
      step. If the UA performs such prefetching, but the element is never inserted in the document,
      or the <code>src</code> attribute is dynamically changed, or the <code>crossorigin</code> attribute is dynamically changed, then the
      user agent will not execute the script so obtained, and the fetching process will have been
      effectively wasted.

      </li>

    </ol>

    </li>

    <li>

    Then, the first of the following options that describes the situation must be followed:

    <dl class="switch">

      <dt id="script-processing-defer">If the element has a <code>src</code>
      attribute, and the element has a <code>defer</code> attribute, and
      the element has been flagged as <a>"parser-inserted"</a>, and the element does not have
      an <code>async</code> attribute</dt>

      <dd>

      The element must be added to the end of the <dfn>list of scripts that will execute when the
      document has finished parsing</dfn> associated with the <code>Document</code> of the parser
      that created the element.

      The <a>task</a> that the <a>networking task source</a>
      places on the <a>task queue</a> once fetching has completed must set the element's
      <a>"ready to be parser-executed"</a> flag. The parser will handle executing the
      script.

      </dd>

      <dt id="script-processing-parser-inserted">If the element has a <code>src</code> attribute, and the element has been flagged as
      <a>"parser-inserted"</a>, and the element does not have an <code>async</code> attribute</dt>

      <dd>

      The element is the <a>pending parsing-blocking script</a> of the
      <code>Document</code> of the parser that created the element. (There can only be one such
      script per <code>Document</code> at a time.)

      The <a>task</a> that the <a>networking task source</a>
      places on the <a>task queue</a> once fetching has completed must set the element's
      <a>"ready to be parser-executed"</a> flag. The parser will handle executing the
      script.

      </dd>

      <dt id="script-processing-style-delayed">If the element does not have a <code>src</code> attribute, and the element has been flagged as
      <a>"parser-inserted"</a>, and either the parser that created the <code>script</code> is
      an <a>XML parser</a> or it's an <a>HTML parser</a> whose <a>script nesting
      level</a> is not greater than one, and the <code>Document</code> of the <a>HTML
      parser</a> or <a>XML parser</a> that created the <code>script</code> element <a>has
      a style sheet that is blocking scripts</a></dt>

      <dd>

      The element is the <a>pending parsing-blocking script</a> of the
      <code>Document</code> of the parser that created the element. (There can only be one such
      script per <code>Document</code> at a time.)

      Set the element's <a>"ready to be parser-executed"</a> flag. The parser will handle
      executing the script.

      </dd>

      <dt id="script-processing-src-sync">If the element has a <code>src</code> attribute, does not have an <code>async</code> attribute, and does not have the
      <a>"non-blocking"</a> flag set</dt>

      <dd>

      The element must be added to the end of the <dfn>list of scripts that will execute in order
      as soon as possible</dfn> associated with the <a>node document</a> of the <code>script</code>
      element at the time the <a>prepare a script</a> algorithm started.

      The <a>task</a> that the <a>networking task source</a>
      places on the <a>task queue</a> once fetching has completed must run the following
      steps:

      <ol>

        <li>If the element is not now the first element in the <a>list of scripts that will
        execute in order as soon as possible</a> to which it was added above, then mark the
        element as ready but abort these steps without executing the script yet.</li>

        <li><i>Execution</i>: <a>Execute the script block</a> corresponding to the first
        script element in this <a>list of scripts that will execute in order as soon as
        possible</a>.</li>

        <li>Remove the first element from this <a>list of scripts that will execute in order as
        soon as possible</a>.</li>

        <li>If this <a>list of scripts that will execute in order as soon as possible</a> is
        still not empty and the first entry has already been marked as ready, then jump back to the
        step labeled <i>execution</i>.</li>

      </ol>

      </dd>

      <dt id="script-processing-src">If the element has a <code>src</code>
      attribute</dt>

      <dd>

      The element must be added to the <dfn>set of scripts that will execute as soon as
      possible</dfn> of the <a>node document</a> of the <code>script</code> element at the time the
      <a>prepare a script</a> algorithm started.

      The <a>task</a> that the <a>networking task source</a>
      places on the <a>task queue</a> once fetching has completed must <a>execute the
      script block</a> and then remove the element from the <a>set of scripts that will
      execute as soon as possible</a>.

      </dd>

      <dt id="script-processing-inline">Otherwise</dt>

      <dd>The user agent must <a>immediately</a> <a>execute the script block</a>, even if other
      scripts are already executing.</dd>

    </dl>

    </li>

  </ol>

  Fetching an external script must <a>delay the load event</a> of the element's <a>node document</a>
  until the <a>task</a> that is <a>queued</a>
  by the <a>networking task source</a> once the resource has been fetched (defined above) has
  been run.

  The <dfn>pending parsing-blocking script</dfn> of a <code>Document</code> is used by the
  <code>Document</code>'s parser(s).

  <p class="note">
    If a <code>script</code> element that blocks a parser gets moved to another
  <code>Document</code> before it would normally have stopped blocking that parser, it nonetheless
  continues blocking that parser until the condition that causes it to be blocking the parser no
  longer applies (e.g. if the script is a <a>pending parsing-blocking script</a> because there
  was <a>a style sheet that is blocking scripts</a> when it was parsed, but then the script is
  moved to another <code>Document</code> before the style sheet loads, the script still blocks the
  parser until the style sheets are all loaded, at which time the script executes and the parser is
  unblocked).
  </p>

  When the user agent is required to <dfn>execute a script
  block</dfn>, it must run the following steps:

  <ol>

    <li>

    If the element is flagged as <a>"parser-inserted"</a>, but the element's
    <a>node document</a> is not the <code>Document</code> of the parser that created the element,
    then abort these steps.

    </li>

    <li>

    Jump to the appropriate set of steps from the list below:

    <dl class="switch">

      <dt>If the load resulted in an error (for example a DNS error, or an HTTP 404 error)</dt>

      <dd>Executing the script block must just consist of <a>firing
      a simple event</a> named <code>error</code> at the element.</dd>

      <dt>If the load was successful</dt>

      <dd>

      Executing the script block must consist of running the following steps. For the purposes of
      these steps, the script is considered to be from an <i>external file</i> if, while the
      <a>prepare a script</a> algorithm above was running for this script, the
      <code>script</code> element had a <code>src</code> attribute
      specified.

      <ol>

        <li id="establish-script-block-source">

        Initialize <dfn><var>the script block's source</var></dfn>
        as follows:

        <dl class="switch">

          <dt>If the script is from an external file and <var>the script
          block's type</var> is a text-based language</dt>

          <dd>

          The contents of that file, interpreted as a Unicode string, are the script source.

          To obtain the Unicode string, the user agent run the following steps:

          <ol>

            <li>If the resource's <a>Content Type metadata</a>, if any,
            specifies a character encoding, and the user agent supports that encoding, then let <var>character encoding</var> be that encoding, and jump to the bottom step in this
            series of steps.</li>

            <li>If the algorithm above set <var>the script
            block's character encoding</var>, then let <var>character encoding</var> be
            that encoding, and jump to the bottom step in this series of steps.</li>

            <li>Let <var>character encoding</var> be <var>the script block's fallback character
            encoding</var>.</li>

            <li>

            If the specification for <var>the script block's
            type</var> gives specific rules for decoding files in that format to Unicode, follow
            them, using <var>character encoding</var> as the character encoding specified by
            higher-level protocols, if necessary.

            Otherwise, <a>decode</a> the file to Unicode, using <var>character
            encoding</var> as the fallback encoding.

            <p class="note">
    The <a>decode</a> algorithm overrides <var>character
            encoding</var> if the file contains a BOM.
  </p>

            </li>

          </ol>

          </dd>

          <dt>If the script is from an external file and <var>the script
          block's type</var> is an XML-based language</dt>

          <dd>

          The external file is the script source. When it is later executed, it must be
          interpreted in a manner consistent with the specification defining the language given by
          <var>the script block's type</var>.

          </dd>

          <dt>If the script is inline and <var>the script block's
          type</var> is a text-based language</dt>

          <dd>

          The value of the <code>text</code> IDL attribute at the time
          the element's <a>"already started"</a> flag was last set is the script source.

          </dd>

          <dt>If the script is inline and <var>the script block's
          type</var> is an XML-based language</dt>

          <dd>

          The child nodes of the <code>script</code> element at the time the element's
          <a>"already started"</a> flag was last set are the script source.

          </dd>

        </dl>

        </li>

        <li>

        <a>Fire a simple event</a> named <code>beforescriptexecute</code> that bubbles and is cancelable
        at the <code>script</code> element.

        If the event is canceled, then abort these steps.

        </li>

        <li>

        If the script is from an external file, then increment the
        <a>ignore-destructive-writes counter</a> of the <code>script</code> element's
        <a>node document</a>. Let <var>neutralized doc</var> be that
        <code>Document</code>.

        </li>

        <li>

        Let <var>old script element</var> be the value to which the <code>script</code>
        element's <a>node document</a>'s <code>currentScript</code> object was most recently
        initialized.

        </li>

        <li>

        Initialize the <code>script</code> element's <a>node document</a>'s <code>currentScript</code> object to the <code>script</code>
        element.

        </li>

        <li>

        <a>Create a script</a>, using <var>the script
        block's source</var>, the <a>URL</a> from which the script was obtained, <var>the script block's type</var> as the scripting language, and
        the <a>environment settings object</a> of the <code>script</code> element's
        <a>node document</a>'s <code>Window</code> object.

        If the script came from a resource that was fetched in the steps above, and the resource
        was <a>CORS-cross-origin</a>, then pass the <var>muted errors</var> flag to the
        <a>create a script</a> algorithm as well.

        <p class="note">
    This is where the script is compiled and actually executed.
  </p>

        </li>

        <li>

        Initialize the <code>script</code> element's <a>node document</a>'s <code>currentScript</code> object to <var>old script
        element</var>.

        </li>

        <li>

        Decrement the <a>ignore-destructive-writes counter</a> of <var>neutralized doc</var>, if it was incremented in the earlier step.

        </li>

        <li>

        <a>Fire a simple event</a> named <code>afterscriptexecute</code> that bubbles (but is not
        cancelable) at the <code>script</code> element.

        </li>

        <li>

        If the script is from an external file, <a>fire a simple event</a> named <code>load</code> at the <code>script</code> element.

        Otherwise, the script is internal; <a>queue a task</a> to <a>fire a simple
        event</a> named <code>load</code> at the <code>script</code>
        element.

        </li>

      </ol>

      </dd>

    </dl>

    </li>

  </ol>

  The IDL attributes <dfn><code>src</code></dfn>, <dfn><code>type</code></dfn>, <dfn><code>charset</code></dfn>, and <dfn><code>defer</code></dfn>, must each <a>reflect</a> the respective
  content attributes of the same name.

  The <dfn><code>crossOrigin</code></dfn> IDL attribute must
  <a>reflect</a> the <code>crossorigin</code> content attribute.

  The <dfn><code>async</code></dfn> IDL attribute controls whether the
  element will execute <a>in parallel</a> or not. If the element's <a>"non-blocking"</a> flag is
  set, then, on getting, the <code>async</code> IDL attribute must return
  true, and on setting, the <a>"non-blocking"</a> flag must first be unset, and then the
  content attribute must be removed if the IDL attribute's new value is false, and must be set to
  the empty string if the IDL attribute's new value is true. If the element's
  <a>"non-blocking"</a> flag is <em>not</em> set, the IDL attribute must <a>reflect</a>
  the <code>async</code> content attribute.

  </div>

  <dl class="domintro">

    <dt><var>script</var> . <code>text</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the contents of the element, ignoring child nodes that aren't <code>Text</code>
    nodes.

    Can be set, to replace the element's children with the given value.

    </dd>

  </dl>

  <div class="impl">

  The IDL attribute <dfn><code>text</code></dfn> must return a
  concatenation of the contents of all the <code>Text</code> nodes that are children of the
  <code>script</code> element (ignoring any other nodes such as comments or elements), in tree
  order. On setting, it must act the same way as the <code>textContent</code> IDL attribute.

  </div>

  <p class="note">
    When inserted using the <code>document.write()</code>
  method, <code>script</code> elements execute (typically blocking further script execution or HTML parsing), but when inserted using
  <code>innerHTML</code> and <code>outerHTML</code>
  attributes, they do not execute at all.
  </p>

  <div class="example">
    In this example, two <code>script</code> elements are used. One embeds an external script, and
    the other includes some data.

    <pre highlight="html">
&lt;script src="game-engine.js"&gt;&lt;/script&gt;
&lt;script type="text/x-game-map"&gt;
........U.........e
o............A....e
.....A.....AAA....e
.A..AAA...AAAAA...e
&lt;/script&gt;
    </pre>

    The data in this case might be used by the script to generate the map of a video game. The
    data doesn't have to be used that way, though; maybe the map data is actually embedded in other
    parts of the page's markup, and the data block here is just used by the site's search engine to
    help users who are looking for particular features in their game maps.

  </div>

  <div class="example">
    The following sample shows how a script element can be used to define a function that is then
    used by other parts of the document. It also shows how a <code>script</code> element can be used
    to invoke script while the document is being parsed, in this case to initialize the form's
    output.

    <pre highlight="html">
&lt;script&gt;
  function calculate(form) {
    var price = 52000;
    if (form.elements.brakes.checked)
      price += 1000;
    if (form.elements.radio.checked)
      price += 2500;
    if (form.elements.turbo.checked)
      price += 5000;
    if (form.elements.sticker.checked)
      price += 250;
    form.elements.result.value = price;
  }
&lt;/script&gt;
&lt;form name="pricecalc" onsubmit="return false" onchange="calculate(this)"&gt;
  &lt;fieldset&gt;
  &lt;legend&gt;Work out the price of your car&lt;/legend&gt;
  &lt;p&gt;Base cost: Â£52000.&lt;/p&gt;
  &lt;p&gt;Select additional options:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;label&gt;&lt;input type=checkbox name=brakes&gt; Ceramic brakes (Â£1000)&lt;/label&gt;&lt;/li&gt;
    &lt;li&gt;&lt;label&gt;&lt;input type=checkbox name=radio&gt; Satellite radio (Â£2500)&lt;/label&gt;&lt;/li&gt;
    &lt;li&gt;&lt;label&gt;&lt;input type=checkbox name=turbo&gt; Turbo charger (Â£5000)&lt;/label&gt;&lt;/li&gt;
    &lt;li&gt;&lt;label&gt;&lt;input type=checkbox name=sticker&gt; "XZ" sticker (Â£250)&lt;/label&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;Total: Â£&lt;output name=result&gt;&lt;/output&gt;&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;script&gt;
  calculate(document.forms.pricecalc);
  &lt;/script&gt;
&lt;/form&gt;
    </pre>

  </div>

<h5 id="scripting-languages">Scripting languages</h5>

  <div class="impl">

  A user agent is said to <dfn>support the scripting language</dfn> if each component of <var>the script block's type</var> is an <a>ASCII
  case-insensitive</a> match for the corresponding component in the <a>MIME type</a> string
  of a scripting language that the user agent implements.

  </div>

  A <dfn>JavaScript MIME type</dfn> is a <a>MIME type</a> string that is one of the
  following and refers to JavaScript: [[!ECMA-262]]

  <ul class="brief">
    <li><code>application/ecmascript</code>
    </li><li><code>application/javascript</code>
    </li><li><code>application/x-ecmascript</code>
    </li><li><code>application/x-javascript</code>
    </li><li><code>text/ecmascript</code>
    </li><li><code>text/javascript</code>
    </li><li><code>text/javascript1.0</code>
    </li><li><code>text/javascript1.1</code>
    </li><li><code>text/javascript1.2</code>
    </li><li><code>text/javascript1.3</code>
    </li><li><code>text/javascript1.4</code>
    </li><li><code>text/javascript1.5</code>
    </li><li><code>text/jscript</code>
    </li><li><code>text/livescript</code>
    </li><li><code>text/x-ecmascript</code>
    </li><li><code>text/x-javascript</code>
  </li></ul>

  User agents must recognize all <a>JavaScript MIME
  types</a>.

  <div class="impl">

  User agents may support other <a>MIME types</a> for other languages,
  but must not support other <a>MIME types</a> for the languages in the list
  above. User agents are not required to support the languages listed above.

  The following <a>MIME types</a> (with or without parameters) must not
  be interpreted as scripting languages:

  <ul class="brief">

    <li><code>text/plain</code>
    </li><li><code>text/xml</code>

    </li><li><code>application/octet-stream</code>
    </li><li><code>application/xml</code>

  </li></ul>

  <p class="note">
    These types are explicitly listed here because they are poorly-defined types that
  are nonetheless likely to be used as formats for data blocks, and it would be problematic if they
  were suddenly to be interpreted as script by a user agent.
  </p>

  When examining types to determine if they represent supported languages, user agents must not
  ignore MIME parameters. Types are to be compared including all parameters.

  <p class="note">
    For example, types that include the <code>charset</code> parameter will
  not be recognized as referencing any of the scripting languages listed above.
  </p>

  </div>

<h5 id="restrictions-for-contents-of-script-elements"><dfn>Restrictions for contents of <code>script</code> elements</dfn></h5>

  <p class="note">
    The easiest and safest way to avoid the rather strange restrictions described in
  this section is to always escape "<code>&lt;!--</code>" as "<code>&lt;\!--</code>", "<code>&lt;script</code>" as "<code>&lt;\script</code>", and "<code>&lt;/script</code>" as "<code>&lt;\/script</code>" when these sequences appear in literals in scripts (e.g. in
  strings, regular expressions, or comments), and to avoid writing code that uses such constructs in
  expressions. Doing so avoids the pitfalls that the restrictions in this section are prone to
  triggering: namely, that, for historical reasons, parsing of <code>script</code> blocks in HTML is
  a strange and exotic practice that acts unintuitively in the face of these sequences.
  </p>

  The <code>textContent</code> of a <code>script</code> element must match the <code>script</code> production in the following ABNF, the character set for which is Unicode.
  [[!ABNF]]

  <pre data-highlight="abnf">
    script        = outer *( comment-open inner comment-close outer )

    outer         = &lt; any string that doesn't contain a substring that matches not-in-outer &gt;
    not-in-outer  = comment-open
    inner         = &lt; any string that doesn't contain a substring that matches not-in-inner &gt;
    not-in-inner  = comment-close / script-open

    comment-open  = "&lt;!--"
    comment-close = "--&gt;"
    script-open   = "&lt;" s c r i p t tag-end

    s             =  %x0053 ; U+0053 LATIN CAPITAL LETTER S
    s             =/ %x0073 ; U+0073 LATIN SMALL LETTER S
    c             =  %x0043 ; U+0043 LATIN CAPITAL LETTER C
    c             =/ %x0063 ; U+0063 LATIN SMALL LETTER C
    r             =  %x0052 ; U+0052 LATIN CAPITAL LETTER R
    r             =/ %x0072 ; U+0072 LATIN SMALL LETTER R
    i             =  %x0049 ; U+0049 LATIN CAPITAL LETTER I
    i             =/ %x0069 ; U+0069 LATIN SMALL LETTER I
    p             =  %x0050 ; U+0050 LATIN CAPITAL LETTER P
    p             =/ %x0070 ; U+0070 LATIN SMALL LETTER P
    t             =  %x0054 ; U+0054 LATIN CAPITAL LETTER T
    t             =/ %x0074 ; U+0074 LATIN SMALL LETTER T

    tag-end       =  %x0009 ; U+0009 CHARACTER TABULATION (tab)
    tag-end       =/ %x000A ; U+000A LINE FEED (LF)
    tag-end       =/ %x000C ; U+000C FORM FEED (FF)
    tag-end       =/ %x0020 ; U+0020 SPACE
    tag-end       =/ %x002F ; U+002F SOLIDUS (/)
    tag-end       =/ %x003E ; U+003E GREATER-THAN SIGN (&gt;)
  </pre>

  When a <code>script</code> element contains <a>script documentation</a>, there are
  further restrictions on the contents of the element, as described in the section below.

  <div class="example">
    The following script illustrates this issue. Suppose you have a script that contains a string,
    as in:

    <pre highlight="javascript">
      var example = 'Consider this string: &lt;!-- &lt;script&gt;';
      console.log(example);
    </pre>

    If one were to put this string directly in a <code>script</code> block, it would violate the
    restrictions above:

    <pre highlight="html">
      &lt;script&gt;
        var example = 'Consider this string: &lt;!-- &lt;script&gt;';
        console.log(example);
      &lt;/script&gt;
    </pre>

    The bigger problem, though, and the reason why it would violate those restrictions, is that
    actually the script would get parsed weirdly: <em>the script block above is not terminated</em>.
    That is, what looks like a "<code>&lt;/script&gt;</code>" end tag in this snippet is
    actually still part of the <code>script</code> block. The script doesn't execute (since it's not
    terminated); if it somehow were to execute, as it might if the markup looked as follows, it would
    fail because the script (highlighted here) is not valid JavaScript:

    <pre highlight="html">
      &lt;script&gt;<mark>
        var example = 'Consider this string: &lt;!-- &lt;script&gt;';
        console.log(example);
      &lt;/script&gt;
      &lt;!-- despite appearances, this is actually part of the script still! --&gt;
      &lt;script&gt;
        ... // this is the same script block still...
      </mark>&lt;/script&gt;
    </pre>

    What is going on here is that for legacy reasons, "<code>&lt;!--</code>" and "<code>&lt;script</code>" strings in <code>script</code> elements in HTML need to be balanced
    in order for the parser to consider closing the block.

    By escaping the problematic strings as mentioned at the top of this section, the problem is
    avoided entirely:

    <pre highlight="html">
      &lt;script&gt;<mark>
        var example = 'Consider this string: &lt;\!-- &lt;\script&gt;';
        console.log(example);
      </mark>&lt;/script&gt;
      &lt;!-- this is just a comment between script blocks --&gt;
      &lt;script&gt;<mark>
        ... // this is a new script block
      </mark>&lt;/script&gt;
    </pre>

    It is possible for these sequences to naturally occur in script expressions, as in the
    following examples:

    <pre highlight="javascript">
      if (x&lt;!--y) { ... }
      if ( player&lt;script ) { ... }
    </pre>

    In such cases the characters cannot be escaped, but the expressions can be rewritten so that
    the sequences don't occur, as in:

    <pre highlight="javascript">
      if (x &lt; !--y) { ... }
      if (!--y &gt; x) { ... }
      if (!(--y) &gt; x) { ... }
      if (player &lt; script) { ... }
      if (script &gt; player) { ... }
    </pre>

    Doing this also avoids a different pitfall as well: for related historical reasons, the string
    "&lt;!--" in JavaScript is actually treated as a line comment start, just like "//".

  </div>

<h5 id="inline-documentation-for-external-scripts"><dfn>Inline documentation for external scripts</dfn></h5>

  If a <code>script</code> element's <code>src</code> attribute is
  specified, then the contents of the <code>script</code> element, if any, must be such that the
  value of the <code>text</code> IDL attribute, which is derived from the
  element's contents, matches the <code>documentation</code> production in the following
  ABNF, the character set for which is Unicode. [[!ABNF]]

  <pre data-highlight="abnf">
    documentation = *( *( space / tab / comment ) [ line-comment ] newline )
    comment       = slash star *( not-star / star not-slash ) 1*star slash
    line-comment  = slash slash *not-newline

    ; characters
    tab           = %x0009 ; U+0009 CHARACTER TABULATION (tab)
    newline       = %x000A ; U+000A LINE FEED (LF)
    space         = %x0020 ; U+0020 SPACE
    star          = %x002A ; U+002A ASTERISK (*)
    slash         = %x002F ; U+002F SOLIDUS (/)
    not-newline   = %x0000-0009 / %x000B-10FFFF
                    ; a <a>Unicode character</a> other than U+000A LINE FEED (LF)
    not-star      = %x0000-0029 / %x002B-10FFFF
                    ; a <a>Unicode character</a> other than U+002A ASTERISK (*)
    not-slash     = %x0000-002E / %x0030-10FFFF
                    ; a <a>Unicode character</a> other than U+002F SOLIDUS (/)
  </pre>

  <p class="note">
    This corresponds to putting the contents of the element in JavaScript
  comments.
  </p>

  <p class="note">
    This requirement is in addition to the earlier restrictions on the syntax of
  contents of <code>script</code> elements.
  </p>

  <div class="example">
    This allows authors to include documentation, such as license information or API information,
    inside their documents while still referring to external script files. The syntax is constrained
    so that authors don't accidentally include what looks like valid script while also providing a
    <code>src</code> attribute.

    <pre highlight="html">
      &lt;script src="cool-effects.js"&gt;
        // create new instances using:
        //    var e = new Effect();
        // start the effect using .play, stop using .stop:
        //    e.play();
        //    e.stop();
      &lt;/script&gt;
    </pre>
  </div>

  <div class="impl">

<h5 id="interaction-of-script-elements-and-xslt">Interaction of <code>script</code> elements and XSLT</h5>

  <em>This section is non-normative.</em>

  This specification does not define how XSLT interacts with the <code>script</code> element.
  However, in the absence of another specification actually defining this, here are some guidelines
  for implementors, based on existing implementations:

  <ul>

    <li>When an XSLT transformation program is triggered by an <code>&lt;?xml-stylesheet?&gt;</code> processing instruction and the browser implements a
    direct-to-DOM transformation, <code>script</code> elements created by the XSLT processor need to
    be marked <a>"parser-inserted"</a> and run in document order (modulo scripts marked <code>defer</code> or <code>async</code>),
    <a>immediately</a>, as the transformation is occurring.</li>

    <li>The <code>XSLTProcessor.transformToDocument()</code> method
    adds elements to a <code>Document</code> that is not in a <a>browsing context</a>, and,
    accordingly, any <code>script</code> elements they create need to have their <a>"already
    started"</a> flag set in the <a>prepare a script</a> algorithm and never get executed
    (<a>scripting is disabled</a>). Such <code>script</code>
    elements still need to be marked <a>"parser-inserted"</a>, though, such that their <code>async</code> IDL attribute will return false in the absence of an <code>async</code> content attribute.</li>

    <li>The <code>XSLTProcessor.transformToFragment()</code> method
    needs to create a fragment that is equivalent to one built manually by creating the elements
    using <code>document.createElementNS()</code>. For instance,
    it needs to create <code>script</code> elements that aren't <a>"parser-inserted"</a> and
    that don't have their <a>"already started"</a> flag set, so that they will execute when the
    fragment is inserted into a document.</li>

  </ul>

  The main distinction between the first two cases and the last case is that the first two
  operate on <code>Document</code>s and the last operates on a fragment.

  </div>

<h4 id="the-noscript-element">The <dfn><code>noscript</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>In a <code>head</code> element of an <a>HTML document</a>, if there are no ancestor <code>noscript</code> elements.</dd>
    <dd>Where <a>phrasing content</a> is expected in <a>HTML documents</a>, if there are no ancestor <code>noscript</code> elements.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>When <a>scripting is disabled</a>, in a <code>head</code> element: in any order, zero or more <code>link</code> elements, zero or more <code>style</code> elements, and zero or more <code>meta</code> elements.</dd>
    <dd>When <a>scripting is disabled</a>, not in a <code>head</code> element: <a>transparent</a>, but there must be no <code>noscript</code> element descendants.</dd>
    <dd>Otherwise: text that conforms to the requirements given in the prose.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>noscript</code> element <a>represents</a> nothing if <a>scripting is enabled</a>, and <a>represents</a> its children if
  <a>scripting is disabled</a>. It is used to present different
  markup to user agents that support scripting and those that don't support scripting, by affecting
  how the document is parsed.

  When used in <a>HTML documents</a>, the allowed content model is as follows:

  <dl>

    <dt>In a <code>head</code> element, if <a>scripting is
    disabled</a> for the <code>noscript</code> element</dt>

    <dd>The <code>noscript</code> element must contain only <code>link</code>, <code>style</code>,
    and <code>meta</code> elements.</dd>

    <dt>In a <code>head</code> element, if <a>scripting is enabled</a>
    for the <code>noscript</code> element</dt>

    <dd>The <code>noscript</code> element must contain only text, except that invoking the
    <a>HTML fragment parsing algorithm</a>  with
    the <code>noscript</code> element as the <var>context</var>
    element and the text contents as the <var>input</var> must result in a list of nodes
    that consists only of <code>link</code>, <code>style</code>, and <code>meta</code> elements that
    would be conforming if they were children of the <code>noscript</code> element, and no <a>parse errors</a>.</dd>

    <dt>Outside of <code>head</code> elements, if <a>scripting is
    disabled</a> for the <code>noscript</code> element</dt>

    <dd>The <code>noscript</code> element's content model is <a>transparent</a>, with the
    additional restriction that a <code>noscript</code> element must not have a <code>noscript</code>
    element as an ancestor (that is, <code>noscript</code> can't be nested).</dd>

    <dt>Outside of <code>head</code> elements, if <a>scripting is
    enabled</a> for the <code>noscript</code> element</dt>

    <dd>

    The <code>noscript</code> element must contain only text, except that the text must be such
    that running the following algorithm results in a conforming document with no
    <code>noscript</code> elements and no <code>script</code> elements, and such that no step in the
    algorithm throws an exception or causes an <a>HTML parser</a> to flag a <a>parse
    error</a>:

    <ol>

      <li>Remove every <code>script</code> element from the document.</li>

      <li>Make a list of every <code>noscript</code> element in the document. For every
      <code>noscript</code> element in that list, perform the following steps:

      <ol>

        <li>Let <var>s</var> be the concatenation of all the <code>Text</code> node
        children of the <code>noscript</code> element.</li>

        <li>Set the <code>outerHTML</code> attribute of the
        <code>noscript</code> element to the value of <var>s</var>. (This, as a
        side-effect, causes the <code>noscript</code> element to be removed from the document.) [[!DOMPARSING]]</li>

      </ol>

      </li>

    </ol>

    </dd>

  </dl>

  <p class="note">
    All these contortions are required because, for historical reasons, the
  <code>noscript</code> element is handled differently by the <a>HTML parser</a> based on
  whether <a>scripting was enabled or not</a> when the parser was
  invoked.
  </p>

  The <code>noscript</code> element must not be used in <a>XML documents</a>.

  <p class="note">
    The <code>noscript</code> element is only effective in <a>the HTML
  syntax</a>, it has no effect in <a>the XHTML syntax</a>. This is because the way it works
  is by essentially "turning off" the parser when scripts are enabled, so that the contents of the
  element are treated as pure text and not as real elements. XML does not define a mechanism by
  which to do this.
  </p>

  <div class="impl">

  The <code>noscript</code> element has no other requirements. In particular, children of the
  <code>noscript</code> element are not exempt from <a>form submission</a>, scripting, and so
  forth, even when <a>scripting is enabled</a> for the element.

  </div>

  <div class="example">
    In the following example, a <code>noscript</code> element is
    used to provide fallback for a script.

    <pre highlight="html">
&lt;form action="calcSquare.php"&gt;
  &lt;p&gt;
  &lt;label for=x&gt;Number&lt;/label&gt;:
  &lt;input id="x" name="x" type="number"&gt;
  &lt;/p&gt;
  &lt;script&gt;
  var x = document.getElementById('x');
  var output = document.createElement('p');
  output.textContent = 'Type a number; it will be squared right then!';
  x.form.appendChild(output);
  x.form.onsubmit = function () { return false; }
  x.oninput = function () {
    var v = x.valueAsNumber;
    output.textContent = v + ' squared is ' + v * v;
  };
  &lt;/script&gt;
  &lt;noscript&gt;
  &lt;input type=submit value="Calculate Square"&gt;
  &lt;/noscript&gt;
&lt;/form&gt;
    </pre>

    When script is disabled, a button appears to do the calculation on the server side. When
    script is enabled, the value is computed on-the-fly instead.

    The <code>noscript</code> element is a blunt instrument. Sometimes, scripts might be enabled,
    but for some reason the page's script might fail. For this reason, it's generally better to avoid
    using <code>noscript</code>, and to instead design the script to change the page from being a
    scriptless page to a scripted page on the fly, as in the next example:

    <pre highlight="html">
&lt;form action="calcSquare.php"&gt;
  &lt;p&gt;
  &lt;label for=x&gt;Number&lt;/label&gt;:
  &lt;input id="x" name="x" type="number"&gt;
  &lt;/p&gt;
  <strong>&lt;input id="submit" type=submit value="Calculate Square"&gt;</strong>
  &lt;script&gt;
  var x = document.getElementById('x');
  var output = document.createElement('p');
  output.textContent = 'Type a number; it will be squared right then!';
  x.form.appendChild(output);
  x.form.onsubmit = function () { return false; }
  x.oninput = function () {
    var v = x.valueAsNumber;
    output.textContent = v + ' squared is ' + v * v;
  };
<strong>  var submit = document.getElementById('submit');
  submit.parentNode.removeChild(submit);</strong>
  &lt;/script&gt;
&lt;/form&gt;
    </pre>

    The above technique is also useful in XHTML, since <code>noscript</code> is not supported in
    <a>the XHTML syntax</a>.

  </div>

<h4 id="the-template-element">The <dfn><code>template</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Script-supporting element</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>metadata content</a> is expected.</dd>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dd>Where <a>script-supporting elements</a> are expected.</dd>
    <dd>As a child of a <code>colgroup</code> element that doesn't have a <code>span</code> attribute.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Either: <a>Metadata content</a>.</dd>
    <dd>Or: <a>Flow content</a>.</dd>
    <dd>Or: The content model of <code>ol</code> and <code>ul</code> elements.</dd>
    <dd>Or: The content model of <code>dl</code> elements.</dd>
    <dd>Or: The content model of <code>figure</code> elements.</dd>
    <dd>Or: The content model of <code>ruby</code> elements.</dd>
    <dd>Or: The content model of <code>object</code> elements.</dd>
    <dd>Or: The content model of <code>video</code> and <code>audio</code> elements.</dd>
    <dd>Or: The content model of <code>table</code> elements.</dd>
    <dd>Or: The content model of <code>colgroup</code> elements.</dd>
    <dd>Or: The content model of <code>thead</code>, <code>tbody</code>, and <code>tfoot</code> elements.</dd>
    <dd>Or: The content model of <code>tr</code> elements.</dd>
    <dd>Or: The content model of <code>fieldset</code> elements.</dd>
    <dd>Or: The content model of <code>select</code> elements.</dd>
    <dd>Or: The content model of <code>details</code> elements.</dd>
    <dd>Or: The content model of <code>menu</code> elements whose <code>type</code> attribute is in the <a>popup menu state</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLTemplateElement : HTMLElement {
          readonly attribute DocumentFragment content;
        };
      </pre>
    </dd>
  </dl>

  The <code>template</code> element is used to declare fragments of HTML that can be cloned and
  inserted in the document by script.

  <p class="note">
    Templates provide a method for declaring inert DOM subtrees and manipulating them to
  instantiate document fragments with identical contents.
  </p>

  <p class="note">
    When web pages dynamically alter the contents of their documents (e.g. in response to user
  interaction or new data arriving from the server), it is common that they require fragments of
  HTML which may require further modification before use, such as the insertion of values
  appropriate for the usage context.
  </p>

  <p class="note">
    The <code>template</code> element allows for the declaration of document fragments which are
  unused by the document when loaded, but are parsed as HTML and are available at runtime for use by
  the web page.
  </p>

  In a rendering, the <code>template</code> element <a>represents</a> nothing.

  <dl class="domintro">

    <dt><var>template</var> . <code>content</code></dt>

    <dd>

    Returns the contents of the <code>template</code>, which are stored in a
    <code>DocumentFragment</code> associated with a different <code>Document</code> so as to avoid
    the <code>template</code> contents interfering with the main <code>Document</code>. (For
    example, this avoids form controls from being submitted, scripts from executing, and so
    forth.)

    </dd>

  </dl>

  <div class="impl">

  Each <code>template</code> element has an associated <code>DocumentFragment</code> object that
  is its <dfn>template contents</dfn>. When a <code>template</code> element is created, the user
  agent must run the following steps to establish the <a>template contents</a>:

  <ol>

    <li>Let <var>doc</var> be the <code>template</code> element's <a>node document</a>'s <a>appropriate template contents owner
    document</a>.</li>

    <li>Create a <code>DocumentFragment</code> object whose <a>node document</a> is <var>doc</var>.</li>

    <li>Set the <code>template</code> element's <a>template contents</a> to the newly
    created <code>DocumentFragment</code> object.</li>

  </ol>

  A <code>Document</code> <var>doc</var>'s <dfn>appropriate template contents owner
  document</dfn> is the <code>Document</code> returned by the following algorithm:

  <ol>

    <li>

    If <var>doc</var> is not a <code>Document</code> created by this algorithm, run
    these substeps:

    <ol>

      <li>

      If <var>doc</var> does not yet have an <dfn>associated inert template
      document</dfn> then run these substeps:

      <ol>

        <li>Let <var>new doc</var> be a new <code>Document</code> (that does not have a
        <a>browsing context</a>). This is "a <code>Document</code> created by this algorithm"
        for the purposes of the step above.</li>

        <li>If <var>doc</var> is an <a>HTML document</a>, mark
        <var>new doc</var> as an <a>HTML document</a>
        also.</li>

        <li>Let <var>doc</var>'s <a>associated inert template document</a> be <var>new doc</var>.</li>

      </ol>

      </li>

      <li>Set <var>doc</var> to <var>doc</var>'s <a>associated inert
      template document</a>.</li>

    </ol>

    <p class="note">
    Each <code>Document</code> not created by this algorithm thus gets a single
    <code>Document</code> to act as its proxy for owning the <a>template contents</a> of all
    its <code>template</code> elements, so that they aren't in a <a>browsing context</a> and
    thus remain inert (e.g. scripts do not run). Meanwhile, <code>template</code> elements inside
    <code>Document</code> objects that <em>are</em> created by this algorithm just reuse the same
    <code>Document</code> owner for their contents.
  </p>

    </li>

    <li>Return <var>doc</var>.</li>

  </ol>

  The <a>adopting steps</a>
  (with <var>node</var> and <var>oldDocument</var> as parameters) for <code>template</code> elements
  are the following:

  <ol>

    <li>

    Let <var>doc</var> be <var>node</var>'s <a>node document</a>'s
    <a>appropriate template contents owner document</a>.

    <p class="note"><var>node</var>'s <a>node document</a> is the <code>Document</code> object
    that <var>node</var> was just adopted <em>into</em>.</p>

    </li>

    <li><a>Adopt</a> <var>node</var>'s
    <a>template contents</a> (a <code>DocumentFragment</code> object) into <var>doc</var>.</li>

  </ol>

  The <dfn><code>content</code></dfn> IDL attribute must return the
  <code>template</code> element's <a>template contents</a>.

  <hr />

  The <a>cloning steps</a> for a <code>template</code>
  element <var>node</var> being cloned to a copy <var>copy</var> must run the
  following steps:

  <ol>

    <li>If the <var>clone children flag</var> is not set in the calling <a>clone</a> algorithm, abort these steps.</li>

    <li>Let <var>copied contents</var> be the result of <a>cloning</a> all the children of <var>node</var>'s
    <a>template contents</a>, with <var>document</var> set to <var>copy</var>'s <a>template contents</a>'s <a>node
    document</a>, and with the <var>clone children
    flag</var> set.</li>

    <li>Append <var>copied contents</var> to <var>copy</var>'s <a>template
    contents</a>.</li>

  </ol>

  </div>

  <div class="example">
    In this example, a script populates a table four-column with data from a data structure, using
    a <code>template</code> to provide the element structure instead of manually generating the
    structure from markup.

    <pre highlight="html">
      &lt;!DOCTYPE html&gt;
      &lt;title&gt;Cat data&lt;/title&gt;
      &lt;script&gt;
        // Data is hard-coded here, but could come from the server
        var data = [
          { name: 'Pillar', color: 'Ticked Tabby', sex: 'Female (neutered)', legs: 3 },
          { name: 'Hedral', color: 'Tuxedo', sex: 'Male (neutered)', legs: 4 },
        ];
      &lt;/script&gt;
      &lt;table&gt;
        &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;Name &lt;th&gt;Color &lt;th&gt;Sex &lt;th&gt;Legs
        &lt;tbody&gt;
        &lt;template id="row"&gt;
          &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;
        &lt;/template&gt;
      &lt;/table&gt;
      &lt;script&gt;
        var template = document.querySelector('#row');
        for (var i = 0; i &lt; data.length; i += 1) {
          var cat = data[i];
          var clone = template.content.cloneNode(true);
          var cells = clone.querySelectorAll('td');
          cells[0].textContent = cat.name;
          cells[1].textContent = cat.color;
          cells[2].textContent = cat.sex;
          cells[3].textContent = cat.legs;
          template.parentNode.appendChild(clone);
        }
      &lt;/script&gt;
    </pre>

    This example uses <code>cloneNode()</code> on the <code>template</code>'s contents; it could
    equivalently have used <code>document.importNode()</code>, which does the same thing. The only
    difference between these two APIs is when the <a>node document</a> is updated: with
    <code>cloneNode()</code> it is updated when the nodes are appended with
    <code>appendChild()</code>, with <code>document.importNode()</code> it is updated when the nodes
    are cloned.
  </div>

  <div class="impl">

<h5 id="interaction-of-template-elements-with-xslt-and-xpath">Interaction of <code>template</code> elements with XSLT and XPath</h5>

  <em>This section is non-normative.</em>

  This specification does not define how XSLT and XPath interact with the <code>template</code>
  element. However, in the absence of another specification actually defining this, here are some
  guidelines for implementors, which are intended to be consistent with other processing described
  in this specification:

  <ul>

    <li>An XSLT processor based on an XML parser that acts <a>as described
    in this specification</a> needs to act as if <code>template</code> elements contain as
    descendants their <a>template contents</a> for the purposes of the transform.</li>

    <li>An XSLT processor that outputs a DOM needs to ensure that nodes that would go into a
    <code>template</code> element are instead placed into the element's <a>template
    contents</a>.</li>

    <li>XPath evaluation using the XPath DOM API when applied to a <code>Document</code> parsed
    using the <a>HTML parser</a> or the <a>XML parser</a> described in this specification
    needs to ignore <a>template contents</a>.

  </li></ul>

  </div>

<h4 id="the-canvas-element">The <dfn><code>canvas</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Transparent</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>width</code> - Horizontal dimension</dd>
    <dd><code>height</code> - Vertical dimension</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a>Any role value</a>.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a>applicable to the allowed roles</a>.</dd>

    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        typedef (CanvasRenderingContext2D or WebGLRenderingContext) RenderingContext;

        interface HTMLCanvasElement : HTMLElement {
          attribute unsigned long width;
          attribute unsigned long height;

          RenderingContext? getContext(DOMString contextId, any... arguments);
          boolean probablySupportsContext(DOMString contextId, any... arguments);

          void setContext(RenderingContext context);
          CanvasProxy transferControlToProxy();

          DOMString toDataURL(optional DOMString type, any... arguments);
          void toBlob(FileCallback? _callback, optional DOMString type, any... arguments);
        };
      </pre>
    </dd>
  </dl>

  The <code>canvas</code> element provides scripts with a resolution-dependent bitmap canvas,
  which can be used for rendering graphs, game graphics, art, or other visual images on the fly.

  Authors should not use the <code>canvas</code> element in a document when a more suitable
  element is available. For example, it is inappropriate to use a <code>canvas</code> element to
  render a page heading: if the desired presentation of the heading is graphically intense, it
  should be marked up using appropriate elements (typically <code>h1</code>) and then styled using
  CSS and supporting technologies such as Web Components.

  When authors use the <code>canvas</code> element, they must also provide content that, when
  presented to the user, conveys essentially the same function or purpose as the
  <code>canvas</code>' bitmap. This content may be placed as content of the <code>canvas</code>
  element. The contents of the <code>canvas</code> element, if any, are the element's <a>fallback
  content</a>.

  <hr />

  In interactive visual media, if <a>scripting is enabled</a> for
  the <code>canvas</code> element, and if support for <code>canvas</code> elements has been enabled,
  the <code>canvas</code> element <a>represents</a> <a>embedded content</a> consisting
  of a dynamically created image, the element's bitmap.

  In non-interactive, static, visual media, if the <code>canvas</code> element has been
  previously associated with a rendering context (e.g. if the page was viewed in an interactive
  visual medium and is now being printed, or if some script that ran during the page layout process
  painted on the element), then the <code>canvas</code> element <a>represents</a>
  <a>embedded content</a> with the element's current bitmap and size. Otherwise, the element
  represents its <a>fallback content</a> instead.

  In non-visual media, and in visual media if <a>scripting is
  disabled</a> for the <code>canvas</code> element or if support for <code>canvas</code> elements
  has been disabled, the <code>canvas</code> element <a>represents</a> its <a>fallback
  content</a> instead.

  When a <code>canvas</code> element <a>represents</a> <a>embedded content</a>, the
  user can still focus descendants of the <code>canvas</code> element (in the <a>fallback
  content</a>). When an element is <a>focused</a>, it is the target of keyboard interaction
  events (even though the element itself is not visible). This allows authors to make an interactive
  canvas keyboard-accessible: authors should have a one-to-one mapping of interactive regions to <i>focusable areas</i> in the <a>fallback content</a>. (Focus has no
  effect on mouse interaction events.) [[!UIEVENTS]]

  An element whose nearest <code>canvas</code> element ancestor is <a>being rendered</a>
  and <a>represents</a> <a>embedded content</a> is an element that is <dfn>being used as
  relevant canvas fallback content</dfn>.

  <hr />

  The <code>canvas</code> element has two attributes to control the size of the element's bitmap:
  <dfn><code>width</code></dfn> and <dfn><code>height</code></dfn>. These attributes, when specified, must have
  values that are <a>valid non-negative integers</a>. <span class="impl">The <a>rules for parsing non-negative integers</a> must be used to obtain their
  numeric values. If an attribute is missing, or if parsing its value returns an error, then the
  default value must be used instead.</span> The <code>width</code>
  attribute defaults to 300, and the <code>height</code> attribute
  defaults to 150.

  The <a>intrinsic dimensions</a> of the <code>canvas</code> element when it
  <a>represents</a> <a>embedded content</a> are equal to the dimensions of the
  element's bitmap.

  The user agent must use a square pixel density consisting of one pixel of image data per
  coordinate space unit for the bitmaps of a <code>canvas</code> and its rendering contexts.

  <p class="note">
    A <code>canvas</code> element can be sized arbitrarily by a style sheet, its
  bitmap is then subject to the 'object-fit' CSS property. [[!CSS3-IMAGES]]
  </p>

  <div class="impl">

  <hr />

  The bitmaps of <code>canvas</code> elements, as well as some of the bitmaps of rendering
  contexts, such as those described in the HTML Canvas 2D Context specification
  [[!CANVAS-2D]],
  have an <dfn>origin-clean</dfn> flag, which can
  be set to true or false. Initially, when the <code>canvas</code> element is created, its bitmap's
  <a>origin-clean</a> flag must be set to true.

  A <code>canvas</code> bitmap can also have a <a>hit region list</a>, as described in the
  <code>CanvasRenderingContext2D</code> section below.

  A <code>canvas</code> element can have a rendering context bound to it. Initially, it does not
  have a bound rendering context. To keep track of whether it has a rendering context or not, and
  what kind of rendering context it is, a <code>canvas</code> also has a <dfn>canvas context mode</dfn>, which is initially <dfn>none</dfn> but can be changed to either <dfn>direct-2d</dfn>, <dfn>direct-webgl</dfn>, <dfn>indirect</dfn>, or <dfn>proxied</dfn> by algorithms defined in this specification.

  When its <a>canvas context mode</a> is <a>none</a>, a <code>canvas</code> element has no rendering context,
  and its bitmap must be fully transparent black with an <a>intrinsic width</a> equal to the numeric value
  of the element's <code>width</code> attribute and an <a>intrinsic height</a>
  equal to the numeric value of the element's <code>height</code>
  attribute, those values being interpreted in CSS pixels, and being updated as the attributes are
  set, changed, or removed.

  When a <code>canvas</code> element represents <a>embedded content</a>, it <a>provides
  a paint source</a> whose width is the element's <a>intrinsic width</a>, whose height is
  the element's <a>intrinsic height</a>, and whose appearance is the element's bitmap.

  Whenever the <code>width</code> and <code>height</code> content attributes are set, removed, changed, or
  redundantly set to the value they already have, if the <a>canvas context mode</a> is <a>direct-2d</a>, the user agent must <a>set bitmap dimensions</a> to the numeric values of
  the <code>width</code> and <code>height</code> content attributes.

  The <dfn><code>width</code></dfn> and <dfn><code>height</code></dfn> IDL attributes must <a>reflect</a> the
  respective content attributes of the same name, with the same defaults.

  </div>

  <hr />

  <dl class="domintro">

    <dt><var>context</var> = <var>canvas</var> . <code>getContext</code>(<var>contextId</var> [, ... ] )</dt>

    <dd>

    Returns an object that exposes an API for drawing on the canvas. The first argument specifies
    the desired API, either "<code>2d</code>" or "<code>webgl</code>". Subsequent arguments are handled by that API.

    The list of defined contexts is given on the <a>WHATWG Wiki CanvasContexts page</a>. [[!WHATWGWIKI]]

    Example contexts are the "<code>2d</code>" [[!CANVAS-2D]] and the "<code>webgl</code>" context [[!WEBGL]].

    Returns null if the given context ID is not supported or if the canvas has already been
    initialized with some other (incompatible) context type (e.g. trying to get a "<code>2d</code>" context after getting a "<code>webgl</code>" context).

    Throws an <code>InvalidStateError</code> exception if the <code>setContext()</code> or <code>transferControlToProxy()</code> methods have been
    used.

    </dd>

    <dt><var>supported</var> = <var>canvas</var> . <code>probablySupportsContext</code>(<var>contextId</var> [, ... ] )</dt>

    <dd>

    Returns false if calling <code>getContext()</code> with the
    same arguments would definitely return null, and true otherwise.

    This return value is not a guarantee that <code>getContext()</code> will or will not return an object, as
    conditions (e.g. availability of system resources) can vary over time.

    Throws an <code>InvalidStateError</code> exception if the <code>setContext()</code> or <code>transferControlToProxy()</code> methods have been
    used.

    </dd>

    <dt><var>canvas</var> . <code>setContext</code>(<var>context</var>)</dt>

    <dd>

    Sets the <code>canvas</code>' rendering context to the given object.

    Throws an <code>InvalidStateError</code> exception if the <code>getContext()</code> or <code>transferControlToProxy()</code> methods have been
    used.

    </dd>

  </dl>

  <div class="impl">

  There are two ways for a <code>canvas</code> element to acquire a rendering context: the
  <code>canvas</code> element can provide one via the <code>getContext()</code> method, and one can be assigned to it via the
  <code>setContext()</code> method. In addition, the whole issue of a
  rendering context can be taken out of the <code>canvas</code> element's hands and passed to a
  <code>CanvasProxy</code> object, which itself can then be assigned a rendering context using its
  <code>setContext()</code> method.

  These three methods are mutually exclusive; calling any of the three makes the other two start
  throwing <code>InvalidStateError</code> exceptions when called.

  Each rendering context has a <dfn>context bitmap
  mode</dfn>, which is one of <dfn>fixed</dfn>, <dfn>unbound</dfn>, or <dfn>bound</dfn>.
  Initially, rendering contexts must be in the <a>unbound</a>
  mode.

  <hr />

  The <dfn><code>getContext(<var>contextId</var>, <var>arguments...</var>)</code></dfn> method of the <code>canvas</code> element, when invoked,
  must run the steps in the cell of the following table whose column header describes the
  <code>canvas</code> element's <a>canvas context mode</a>
  and whose row header describes the method's first argument.

  <table>
    <thead>
    <tr>
      <td>
      </td><th><a>none</a>
      </th><th><a>direct-2d</a>
      </th><th><a>direct-webgl</a>
      </th><th><a>indirect</a>
      </th><th><a>proxied</a>
    </th></tr></thead><tbody>
    <tr>
      <th>"<dfn><code>2d</code></dfn>"
      </th><td>

      Set the <code>canvas</code> element's <a>context
      mode</a> to <a>direct-2d</a>, obtain a
      <code>CanvasRenderingContext2D</code> object as defined in the HTML Canvas 2D Context
      specification [[!CANVAS-2D]], set the obtained
      <code>CanvasRenderingContext2D</code> object's
      <a>context bitmap mode</a> to
      <a>fixed</a>, and return the
      <code>CanvasRenderingContext2D</code> object
      </td><td>
      Return the same object as was return the last time the method was invoked with this same
      first argument.
      </td><td>
      Return null.
      </td><td>
      Throw an <code>InvalidStateError</code> exception.
      </td><td>
      Throw an <code>InvalidStateError</code> exception.

    </td></tr><tr>
      <th>"<dfn><code>webgl</code></dfn>", if the user agent supports the WebGL feature in its current configuration
      </th><td>
      Follow the instructions given in the WebGL specification's <i>Context Creation</i> section to
      obtain either a <code>WebGLRenderingContext</code> or null; if the returned value is null,
      then return null and abort these steps, otherwise, set the <code>canvas</code> element's <a>context mode</a> to <a>direct-webgl</a>, set the new
      <code>WebGLRenderingContext</code> object's <a>context bitmap mode</a> to <a>fixed</a>, and return the <code>WebGLRenderingContext</code>
      objectâ¡ [[!WEBGL]]
      </td><td>
      Return null.
      </td><td>
      Return the same object as was return the last time the method was invoked with this same
      first argument.
      </td><td>
      Throw an <code>InvalidStateError</code> exception.
      </td><td>
      Throw an <code>InvalidStateError</code> exception.

    </td></tr><tr>
      <th>A vendor-specific extension*
      </th><td>
      Behave as defined for the extension.
      </td><td>
      Behave as defined for the extension.
      </td><td>
      Behave as defined for the extension.
      </td><td>
      Throw an <code>InvalidStateError</code> exception.
      </td><td>
      Throw an <code>InvalidStateError</code> exception.

    </td></tr><tr>
      <th>An unsupported valueâ 
      </th><td>
      Return null.
      </td><td>
      Return null.
      </td><td>
      Return null.
      </td><td>
      Throw an <code>InvalidStateError</code> exception.
      </td><td>
      Throw an <code>InvalidStateError</code> exception.

  </td></tr></tbody></table>

  <small>* Vendors may define experimental contexts using the syntax <code><var>vendorname</var>-<var>context</var></code>, for example, <code>moz-3d</code>.</small>

  <small>â  For example, the "<code>webgl</code>" value in the case of a user agent having exhausted the
  graphics hardware's abilities and having no software fallback implementation.</small>

  <small>â¡ The second (and subsequent) argument(s) to the method, if
  any, are ignored in all cases except this one. See the WebGL specification for
  details.</small>

  <hr />

  The <dfn><code>probablySupportsContext(<var>contextId</var>,
  <var>arguments...</var>)</code></dfn> method of the <code>canvas</code> element, when
  invoked, must return false if calling <code>getContext()</code> on
  the same object and with the same arguments would definitely return null at this time, and true
  otherwise.

  <hr />

  The <dfn><code>setContext(<var>context</var>)</code></dfn> method of the <code>canvas</code> element, when invoked, must
  run the following steps:

  <ol>

    <li>If the <code>canvas</code> element's <a>canvas
    context mode</a> is neither <a>none</a> nor <a>indirect</a>, throw an <code>InvalidStateError</code>
    exception and abort these steps.</li>

    <li>If <var>context</var>'s <a>context
    bitmap mode</a> is <a>fixed</a>, then throw an
    <code>InvalidStateError</code> exception and abort these steps.</li>

    <li>If <var>context</var>'s <a>context
    bitmap mode</a> is <a>bound</a>, then run <var>context</var>'s <a>unbinding steps</a> and
    set its <var>context</var>'s <a>context
    bitmap mode</a> to <a>unbound</a>.</li>

    <li>Run <var>context</var>'s <a>binding
    steps</a> to bind it to this <code>canvas</code> element.</li>

    <li>Set the <code>canvas</code> element's <a>context
    mode</a> to <a>indirect</a> and the <var>context</var>'s <a>context bitmap
    mode</a> to <a>bound</a>.</li>

  </ol>

  <hr />

  </div>

  <dl class="domintro">

    <dt><var>url</var> = <var>canvas</var> . <code>toDataURL</code>( [ <var>type</var>, ... ] )</dt>

    <dd>

    Returns a <a><code>data:</code> URL</a> for the image in the
    canvas.

    The first argument, if provided, controls the type of the image to be returned (e.g. PNG or
    JPEG). The default is <code>image/png</code>; that type is also used if the given type
    isn't supported. The other arguments are specific to the type, and control the way that the
    image is generated, as given <a>in the table
    below</a>.

    When trying to use types other than "<code>image/png</code>", authors can check if the image
    was really returned in the requested format by checking to see if the returned string starts
    with one of the exact strings "<code>data:image/png,</code>" or "<code>data:image/png;</code>". If it does, the image is PNG, and thus the requested type was
    not supported. (The one exception to this is if the canvas has either no height or no width, in
    which case the result might simply be "<code>data:,</code>".)

    </dd>

    <dt><var>canvas</var> . <code>toBlob</code>(<var>callback</var> [, <var>type</var>, ... ] )</dt>

    <dd>

    Creates a <code>Blob</code> object representing a file containing the image in the canvas,
    and invokes a callback with a handle to that object.

    The second argument, if provided, controls the type of the image to be returned (e.g. PNG or
    JPEG). The default is <code>image/png</code>; that type is also used if the given type
    isn't supported. The other arguments are specific to the type, and control the way that the
    image is generated, as given <a>in the table
    below</a>.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>toDataURL()</code></dfn> method must run the
  following steps:

  <ol>

    <li>If the <code>canvas</code> element's bitmap's <a>origin-clean</a> flag is set to false, throw a
    <code>SecurityError</code> exception and abort these steps.

    </li><li>If the <code>canvas</code> element's bitmap has no pixels (i.e. either its horizontal
    dimension or its vertical dimension is zero) then return the string "<code>data:,</code>" and abort these steps. (This is the shortest <a><code>data:</code> URL</a>; it represents the empty string in a <code>text/plain</code> resource.)</li>

    <li>Let <var>file</var> be <a>a
    serialization of the <code>canvas</code> element's bitmap as a file</a>, using the method's
    arguments (if any) as the <var>arguments</var>.</li>

    <li>Return a <a><code>data:</code> URL</a> representing
    <var>file</var>. [[!RFC2397]]

  </li></ol>

  The <dfn><code>toBlob()</code></dfn> method must run the following
  steps:

  <ol>

    <li>If the <code>canvas</code> element's bitmap's <a>origin-clean</a> flag is set to false, throw a
    <code>SecurityError</code> exception and abort these steps.

    </li><li>Let <var>callback</var> be the first argument.</li>

    <li>Let <var>arguments</var> be the second and subsequent arguments to the method, if
    any.</li>

    <li>

    If the <code>canvas</code> element's bitmap has no pixels (i.e. either its horizontal
    dimension or its vertical dimension is zero) then let <var>result</var> be null.

    Otherwise, let <var>result</var> be a <code>Blob</code> object representing <a>a serialization of the <code>canvas</code> element's
    bitmap as a file</a>, using <var>arguments</var>. [[!FILEAPI]]

    </li>

    <li>Return, but continue running these steps <a>in parallel</a>.</li>

    <li>If <var>callback</var> is null, abort these steps.</li>

    <li><a>Queue a task</a> to invoke the <code>FileCallback</code> <var>callback</var> with
    <var>result</var> as its argument. The <a>task source</a> for this task is the <dfn>canvas
    blob serialization task source</dfn>.</li>

  </ol>

  </div>

<h5 id="proxying-canvases-to-workers">Proxying canvases to workers</h5>

  Since DOM nodes cannot be accessed across worker boundaries, a proxy object is needed to enable
  workers to render to <code>canvas</code> elements in <code>Document</code>s.

  <pre class="idl" data-highlight="webidl">[Exposed=(Window, Worker)]
interface CanvasProxy {
  void setContext(RenderingContext context);
};
// CanvasProxy implements Transferable;
</pre>

  <dl class="domintro">

    <dt><var>canvasProxy</var> = <var>canvas</var> . <code>transferControlToProxy</code>()</dt>

    <dd>

    Returns a <code>CanvasProxy</code> object that can be used to transfer control for this
    canvas over to another document (e.g. an <code>iframe</code> from another <a>origin</a>)
    or to a worker.

    Throws an <code>InvalidStateError</code> exception if the <code>getContext()</code> or <code>setContext()</code> methods have been used.

    </dd>

    <dt><var>canvasProxy</var> . <code>setContext</code>(<var>context</var>)</dt>

    <dd>

    Sets the <code>CanvasProxy</code> object's <code>canvas</code> element's rendering context to
    the given object.

    Throws an <code>InvalidStateError</code> exception if the <code>CanvasProxy</code> has been
    <a>transferred</a>.

    </dd>

  </dl>

  <hr />

  The <dfn><code>transferControlToProxy()</code></dfn>
  method of the <code>canvas</code> element, when invoked, must run the following steps:

  <ol>

    <li>If the <code>canvas</code> element's <a>canvas
    context mode</a> is not <a>none</a>, throw an
    <code>InvalidStateError</code> exception and abort these steps.</li>

    <li>Set the <code>canvas</code> element's <a>context
    mode</a> to <a>proxied</a>.</li>

    <li>Return a <code>CanvasProxy</code> object bound to this <code>canvas</code>
    element.</li>

  </ol>

  A <code>CanvasProxy</code> object can be <a>neutered</a> (like any <code>Transferable</code> object),
  meaning it can no longer be <a>transferred</a>, and
  can be <dfn>disabled</dfn>, meaning it can no longer be bound
  to rendering contexts. When first created, a <code>CanvasProxy</code> object must be neither.

  A <code>CanvasProxy</code> is created with a link to a <code>canvas</code> element. A
  <code>CanvasProxy</code> object that has not been <a>disabled</a> must have a strong reference to its canvas
  element.

  The <dfn><code>setContext(<var>context</var>)</code></dfn> method of <code>CanvasProxy</code> objects, when invoked,
  must run the following steps:

  <ol>

    <li>If the <code>CanvasProxy</code> object has been <a>disabled</a>, throw an <code>InvalidStateError</code>
    exception and abort these steps.</li>

    <li>If the <code>CanvasProxy</code> object has not been <a>neutered</a>, then <a>neuter</a> it.</li>

    <li>If <var>context</var>'s <a>context
    bitmap mode</a> is <a>fixed</a>, then throw an
    <code>InvalidStateError</code> exception and abort these steps.</li>

    <li>If <var>context</var>'s <a>context
    bitmap mode</a> is <a>bound</a>, then run <var>context</var>'s <a>unbinding steps</a> and
    set its <var>context</var>'s <a>context
    bitmap mode</a> to <a>unbound</a>.</li>

    <li>Run <var>context</var>'s <a>binding
    steps</a> to bind it to this <code>CanvasProxy</code> object's <code>canvas</code>
    element.</li>

    <li>Set the <var>context</var>'s <a>context bitmap mode</a> to <a>bound</a>.</li>

  </ol>

  To <a>transfer</a> a
  <code>CanvasProxy</code> object <var>old</var> to a new owner <var>owner</var>,
  a user agent must create a new <code>CanvasProxy</code> object linked to the same
  <code>canvas</code> element as <var>old</var>, thus obtaining <var>new</var>,
  must <a>neuter</a> and <a>disable</a> the <var>old</var> object, and must
  finally return <var>new</var>.

  <div class="example">
    Here is a clock implemented on a worker. First, the main page:

    <pre highlight="html">
&lt;!DOCTYPE HTML&gt;
&lt;title&gt;Clock&lt;/title&gt;
&lt;canvas&gt;&lt;/canvas&gt;
&lt;script&gt;
  var canvas = document.getElementsByTagName('canvas')[0];
  var proxy = canvas.transferControlToProxy();
  var worker = new Worker('clock.js');
  worker.postMessage(proxy, [proxy]);
&lt;/script&gt;
    </pre>

    Second, the worker:

    <pre highlight="javascript">
onmessage = function (event) {
  var context = new CanvasRenderingContext2D();
  event.data.setContext(context); // event.data is the CanvasProxy object
  setInterval(function () {
    context.clearRect(0, 0, context.width, context.height);
    context.fillText(new Date(), 0, 100);
    context.commit();
  }, 1000);
};
    </pre>

  </div>

  <div class="impl">

<h5 id="color-spaces-and-color-correction">Color spaces and color correction</h5>

  The <code>canvas</code> APIs must perform color correction at only two points: when rendering
  images with their own gamma correction and color space information onto a bitmap, to convert the
  image to the color space used by the bitmaps (e.g. using the 2D Context's <code>drawImage()</code> method with an <code>HTMLImageElement</code>
  object), and when rendering the actual canvas bitmap to the output device.

  <p class="note">
    Thus, in the 2D context, colors used to draw shapes onto the canvas will exactly
  match colors obtained through the <code>getImageData()</code> method.
  </p>

  The <code>toDataURL()</code> method must not include color space
  information in the resources they return. Where the output format allows it, the color of pixels
  in resources created by <code>toDataURL()</code> must match those
  returned by the <code>getImageData()</code> method.

  In user agents that support CSS, the color space used by a <code>canvas</code> element must
  match the color space used for processing any colors for that element in CSS.

  The gamma correction and color space information of images must be handled in such a way that
  an image rendered directly using an <code>img</code> element would use the same colors as one
  painted on a <code>canvas</code> element that is then itself rendered. Furthermore, the rendering
  of images that have no color correction information (such as those returned by the <code>toDataURL()</code> method) must be rendered with no color
  correction.

  <p class="note">
    Thus, in the 2D context, calling the <code>drawImage()</code> method to render the output of the <code>toDataURL()</code> method to the canvas, given the appropriate
  dimensions, has no visible effect.
  </p>

  </div>

  <div class="impl">

  <div class="impl">

  When a user agent is to create <dfn>a serialization of the bitmap as a file</dfn>, optionally
  with some given <var>arguments</var>, and optionally with a <var>native</var> flag set, it must
  create an image file in the format given by the first value of <var>arguments</var>, or, if there
  are no <var>arguments</var>, in the PNG format. [[!PNG]]

  If the <var>native</var> flag is set, or if the bitmap has one pixel per coordinate space unit,
  then the image file must have the same pixel data (before compression, if applicable) as the
  bitmap, and if the file format used supports encoding resolution metadata, the resolution of that
  bitmap (device pixels per coordinate space units being interpreted as image pixels per CSS pixel)
  must be given as well.

  Otherwise, the image file's pixel data must be the bitmap's pixel data scaled to one image
  pixel per coordinate space unit, and if the file format used supports encoding resolution
  metadata, the resolution must be given as 96dpi (one image pixel per CSS pixel).

  If <var>arguments</var> is not empty, the first value must be interpreted as a <a>MIME type</a> giving the format to use. If the type has any parameters, it
  must be treated as not supported.

  <p class="example">For example, the value "<code>image/png</code>" would mean to generate a PNG
  image, the value "<code>image/jpeg</code>" would mean to generate a JPEG image, and the value
  "<code>image/svg+xml</code>" would mean to generate an SVG image (which would require that the
  user agent track how the bitmap was generated, an unlikely, though potentially awesome,
  feature).</p>

  User agents must support PNG ("<code>image/png</code>"). User agents may support other types.
  If the user agent does not support the requested type, it must create the file using the PNG
  format. [[!PNG]]

  User agents must <a>convert the provided type to ASCII
  lowercase</a> before establishing if they support that type.

  For image types that do not support an alpha channel, the serialized image must be the bitmap
  image composited onto a solid black background using the source-over operator.

  If the first argument in <var>arguments</var> gives a type corresponding to one of the
  types given in the first column of the following table, and the user agent supports that type,
  then the subsequent arguments, if any, must be treated as described in the second cell of that
  row.

  </div>

  <table id="canvas-serialization-arguments">
    <caption>Arguments for serialization methods</caption>
    <thead>
    <tr> <th> Type </th><th> Other arguments </th><th> Reference
    </th></tr></thead><tbody>
    <tr>
      <td> <code>image/jpeg</code>
      </td><td> The second argument<span class="impl">, if it</span> is a number in the range 0.0 to 1.0
      inclusive<span class="impl">, must be</span> treated as the desired quality level. <span class="impl">If it is not a number or is outside that range, the user agent must use its
      default value, as if the argument had been omitted.</span>
      </td><td> [[!JPEG]]
  </td></tr></tbody></table>

  <div class="impl">

  For the purposes of these rules, an argument is considered to be a number if it is converted to
  an IDL double value by the rules for handling arguments of type <code>any</code> in the
  Web IDL specification. [[!WEBIDL]]

  Other arguments must be ignored and must not cause the user agent to throw an exception. A
  future version of this specification will probably define other parameters to be passed to these
  methods to allow authors to more carefully control compression settings, image metadata, etc.

  </div>

  <div class="impl">

<h5 id="security-with-canvas-elements">Security with <code>canvas</code> elements</h5>

  <em>This section is non-normative.</em>

  <strong>Information leakage</strong> can occur if scripts from one <a>origin</a> can
  access information (e.g. read pixels) from images from another origin (one that isn't the <a>same</a>).

  To mitigate this, bitmaps used with <code>canvas</code> elements are defined to have a flag
  indicating whether they are <a>origin-clean</a>. All
  bitmaps start with their <a>origin-clean</a> set to
  true. The flag is set to false when cross-origin images or fonts are used.

  The <code>toDataURL()</code>, <code>toBlob()</code>, and <code>getImageData()</code> methods check the flag and will
  throw a <code>SecurityError</code> exception rather than leak cross-origin data.

  The flag can be reset in certain situations; for example, when a
  <code>CanvasRenderingContext2D</code> is bound to a new <code>canvas</code>, the bitmap is cleared
  and its flag reset.

  </div>

<h3 id="common-idioms-without-dedicated-elements">Common idioms without dedicated elements</h3>

<h4 id="subheadings-subtitles-alternative-titles-and-taglines">Subheadings, subtitles, alternative titles and taglines</h4>
  HTML does not have a dedicated mechanism for marking up subheadings, alternative titles or taglines. Here are the suggested alternatives.
  <code>h1</code>â<code>h6</code> elements must not be used to markup subheadings, subtitles, alternative titles and taglines unless intended to be the heading for a new section or subsection.
  <div class="example">
    In the following example the title and subtitles of a web page are grouped using a <code>header</code> element.
    As the author does not want the subtitles to be included the table of contents and they are not intended to signify
    the start of a new section, they are marked up using <code>p</code> elements. A sample CSS styled rendering of the
    title and subtitles is provided below the code example.
    <pre highlight="html">
  &lt;header&gt;
    &lt;h1&gt;HTML 5.1 Nightly&lt;/h1&gt;
    &lt;p&gt;A vocabulary and associated APIs for HTML and XHTML&lt;/p&gt;
    &lt;p&gt;Editor's Draft 9 May 2013&lt;/p&gt;
  &lt;/header&gt;
    </pre>
    <img src="images/htmlheading.png" alt="Title:'HTML 5.1 Nightly' in a mid blue Sans Serif font.
    Subtitle 1:'A vocabulary and associated APIs for HTML and XHTML' on a new line, same style smaller font size.
    Subtitle 2:'Editor's Draft 9 May 2013' on a new line, same style and size as subtitle 1." />

  </div>
  <div class="example">
    In the following example the subtitle of a book is on the same line as the title separated by a colon. A sample CSS styled rendering of the
    title and subtitle is provided below the code example.

    <pre highlight="html">
&lt;h1&gt;The Lord of the Rings: The Two Towers&lt;/h1&gt;
    </pre>
    <img src="images/lotr.PNG" alt="Title and subtitle:'The Lord of the Rings: The Two Towers' in a gold colored Gothic style Serif font on a black background." width="414" height="43" />
  </div>
<div class="example">
    In the following example part of an album title is included in a <code>span</code> element,
    allowing it to be styled differently from the rest of the title. A <code>br</code> element is used to
    place the album title on a new line. A sample CSS styled rendering of the heading is provided
    below the code example.

    <pre highlight="html">
    &lt;h1&gt;Ramones &lt;br&gt;
    &lt;span&gt;Hey! Ho! Let's Go&lt;/span&gt;
    &lt;/h1&gt;
    </pre>
    <img src="images/ramones.png" alt=" Line 1:'Ramones' displayed in a large bold angular hand writing style font with a spray can paint effect. Line 2:'Hey! Ho! Let's Go' displayed in a smaller, standard sans serif style font." width="255" height="93" />
  </div>
  <div class="example">
    In the following example the title and tagline for a news article are grouped using a <code>header</code> element.
    The title is marked up using a <code>h2</code> element and the tagline is in a <code>p</code> element. A sample CSS styled rendering of the
    title and tagline is provided below the code example.

    <pre highlight="html">
  &lt;header&gt;
    &lt;h2&gt;3D films set for popularity slide &lt;/h2&gt;
    &lt;p&gt;First drop in 3D box office projected for this year despite hotly tipped summer blockbusters,
    according to Fitch Ratings report&lt;/p&gt;
  &lt;/header&gt;
    </pre>
    <img src="images/title-tagline.PNG" alt=" Title:'3D films set for popularity slide' in a large, bold, dark blue Serif font style. Paragraph: 'First drop in 3D box office projected for this year despite...' in a smaller, dark grey, Sans Serif font style." width="454" height="74" />
  </div>
  <div class="example">
  In this last example the title and taglines for a news magazine are grouped using a <code>header</code> element.
    The title is marked up using a <code>h1</code> element and the taglines are each in a <code>p</code> element. A sample CSS styled rendering of the
    title and taglines is provided below the code example.

    <pre highlight="html">
      &lt;header&gt;
        &lt;p&gt;Magazine of the Decade&lt;/p&gt;
        &lt;h1&gt;THE MONTH&lt;/h1&gt;
        &lt;p&gt;The Best of UK and Foreign Media&lt;/p&gt;
      &lt;/header&gt;
    </pre>
    <img src="images/themonth.png" alt="Tagline above the heading:'Magazine of the Decade'. Tagline below the heading 'The Best of UK and Foreign Media' both in a small,all caps, sans-serif font style. Heading:'The Month' in a large, Serif font style. All text is black against a red background." width="378" height="84" />
  </div>

<h4 id="bread-crumb-navigation">Bread crumb navigation</h4>

  This specification does not provide a machine-readable way of describing bread-crumb navigation
  menus. Authors are encouraged to markup bread-crumb navigation as a list. The <code>nav</code> element can be used to mark the
  list containing links as being a navigation block.

  <div class="example">
    In the following example, the current page can be reached via the path indicated. The path is indicated using the right arrow symbol "â". A text label is provided to give the user context. The links are structured as a list, which provides users with an indication of item number.

    <pre highlight="html">
      &lt;nav&gt;
        &lt;h2&gt;You are here:&lt;/h2&gt;
        &lt;ul id="navlist"&gt;
          &lt;li&gt;&lt;a href="/"&gt;Main&lt;/a&gt; â&lt;/li&gt;
          &lt;li&gt;&lt;a href="/products/"&gt;Products&lt;/a&gt; â&lt;/li&gt;
          &lt;li&gt;&lt;a href="/products/dishwashers/"&gt;Dishwashers&lt;/a&gt; â&lt;/li&gt;
          &lt;li&gt;&lt;a&gt;Second hand&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/nav&gt;
    </pre>
    The breadcrumb code example could be styled as a horizonatal list using CSS:
    <img src="images/breadcrumb.png" width="423" height="30" alt="The heading and the links are displayed on one line." />
  <p class="note">
    The use of the right angle bracket symbol "&gt;" to indicate path direction
  is discouraged as its meaning, in the context used, is not clearly conveyed to all users.
  </p>
  </div>

<h4 id="tag-clouds">Tag clouds</h4>

  This specification does not define any markup specifically for marking up lists
  of keywords that apply to a group of pages (also known as <i>tag clouds</i>). In general, authors
  are encouraged to either mark up such lists using <code>ul</code> elements with explicit inline
  counts that are then hidden and turned into a presentational effect using a style sheet, or to use
  SVG.

  <div class="example">
    Here, three tags are included in a short tag cloud:

    <pre highlight="html">
      &lt;style&gt;
      @media screen, print, handheld, tv {
        /* should be ignored by non-visual browsers */
        .tag-cloud &gt; li &gt; span { display: none; }
        .tag-cloud &gt; li { display: inline; }
        .tag-cloud-1 { font-size: 0.7em; }
        .tag-cloud-2 { font-size: 0.9em; }
        .tag-cloud-3 { font-size: 1.1em; }
        .tag-cloud-4 { font-size: 1.3em; }
        .tag-cloud-5 { font-size: 1.5em; }
      }
      &lt;/style&gt;
      ...
      &lt;ul class="tag-cloud"&gt;
        &lt;li class="tag-cloud-4"&gt;&lt;a title="28 instances" href="/t/apple"&gt;apple&lt;/a&gt; &lt;span&gt;(popular)&lt;/span&gt;
        &lt;li class="tag-cloud-2"&gt;&lt;a title="6 instances"  href="/t/kiwi"&gt;kiwi&lt;/a&gt; &lt;span&gt;(rare)&lt;/span&gt;
        &lt;li class="tag-cloud-5"&gt;&lt;a title="41 instances" href="/t/pear"&gt;pear&lt;/a&gt; &lt;span&gt;(very popular)&lt;/span&gt;
      &lt;/ul&gt;
    </pre>

    The actual frequency of each tag is given using the <code>title</code>
    attribute. A CSS style sheet is provided to convert the markup into a cloud of differently-sized
    words, but for user agents that do not support CSS or are not visual, the markup contains
    annotations like "(popular)" or "(rare)" to categorize the various tags by frequency, thus
    enabling all users to benefit from the information.

    The <code>ul</code> element is used (rather than <code>ol</code>) because the order is not
    particularly important: while the list is in fact ordered alphabetically, it would convey the
    same information if ordered by, say, the length of the tag.

    The <code>tag</code> <code>rel</code>-keyword is
    <em>not</em> used on these <code>a</code> elements because they do not represent tags that apply
    to the page itself; they are just part of an index listing the tags themselves.

  </div>

<h4 id="conversations">Conversations</h4>

  This specification does not define a specific element for marking up conversations, meeting
  minutes, chat transcripts, dialogs in screenplays, instant message logs, and other situations
  where different players take turns in discourse.

  Instead, authors are encouraged to mark up conversations using <code>p</code> elements and
  punctuation. Authors who need to mark the speaker for styling purposes are encouraged to use
  <code>span</code> or <code>b</code>. Paragraphs with their text wrapped in the <code>i</code>
  element can be used for marking up stage directions.

  <div class="example">
    This example demonstrates this using an extract from Abbot and Costello's famous sketch,
    <cite>Who's on first</cite>:

<pre highlight="html">
&lt;p&gt; Costello: Look, you gotta first baseman?
&lt;p&gt; Abbott: Certainly.
&lt;p&gt; Costello: Who's playing first?
&lt;p&gt; Abbott: That's right.
&lt;p&gt; Costello becomes exasperated.
&lt;p&gt; Costello: When you pay off the first baseman every month, who gets the money?
&lt;p&gt; Abbott: Every dollar of it.
    </pre>

  </div>

  <div class="example">
    The following extract shows how an IM conversation log could be marked up, using the
    <code>data</code> element to provide Unix timestamps for each line. Note that the timestamps are
    provided in a format that the <code>time</code> element does not support, so the
    <code>data</code> element is used instead (namely, Unix <code>time_t</code> timestamps).
    Had the author wished to mark up the data using one of the date and time formats supported by the
    <code>time</code> element, that element could have been used instead of <code>data</code>. This
    could be advantageous as it would allow data analysis tools to detect the timestamps
    unambiguously, without coordination with the page author.

    <pre highlight="html">
&lt;p&gt; &lt;data value="1319898155"&gt;14:22&lt;/data&gt; &lt;b&gt;egof&lt;/b&gt; I'm not that nerdy, I've only seen 30% of the star trek episodes
&lt;p&gt; &lt;data value="1319898192"&gt;14:23&lt;/data&gt; &lt;b&gt;kaj&lt;/b&gt; if you know what percentage of the star trek episodes you have seen, you are inarguably nerdy
&lt;p&gt; &lt;data value="1319898200"&gt;14:23&lt;/data&gt; &lt;b&gt;egof&lt;/b&gt; it's unarguably
&lt;p&gt; &lt;data value="1319898228"&gt;14:23&lt;/data&gt; &lt;i&gt;* kaj blinks&lt;/i&gt;
&lt;p&gt; &lt;data value="1319898260"&gt;14:24&lt;/data&gt; &lt;b&gt;kaj&lt;/b&gt; you are not helping your case
    </pre>

  </div>

  <div class="example">
    HTML does not have a good way to mark up graphs, so descriptions of interactive conversations
    from games are more difficult to mark up. This example shows one possible convention using
    <code>dl</code> elements to list the possible responses at each point in the conversation.
    Another option to consider is describing the conversation in the form of a DOT file, and
    outputting the result as an SVG image to place in the document. [[!DOT]]

    <pre highlight="html">
&lt;p&gt; Next, you meet a fisherman. You can say one of several greetings:
&lt;dl&gt;
  &lt;dt&gt; "Hello there!"
  &lt;dd&gt;
  &lt;p&gt; He responds with "Hello, how may I help you?"; you can respond with:
  &lt;dl&gt;
    &lt;dt&gt; "I would like to buy a fish."
    &lt;dd&gt; &lt;p&gt; He sells you a fish and the conversation finishes.
    &lt;dt&gt; "Can I borrow your boat?"
    &lt;dd&gt;
    &lt;p&gt; He is surprised and asks "What are you offering in return?".
    &lt;dl&gt;
      &lt;dt&gt; "Five gold." (if you have enough)
      &lt;dt&gt; "Ten gold." (if you have enough)
      &lt;dt&gt; "Fifteen gold." (if you have enough)
      &lt;dd&gt; &lt;p&gt; He lends you his boat. The conversation ends.
      &lt;dt&gt; "A fish." (if you have one)
      &lt;dt&gt; "A newspaper." (if you have one)
      &lt;dt&gt; "A pebble." (if you have one)
      &lt;dd&gt; &lt;p&gt; "No thanks", he replies. Your conversation options
      at this point are the same as they were after asking to borrow
      his boat, minus any options you've suggested before.
    &lt;/dl&gt;
    &lt;/dd&gt;
  &lt;/dl&gt;
  &lt;/dd&gt;
  &lt;dt&gt; "Vote for me in the next election!"
  &lt;dd&gt; &lt;p&gt; He turns away. The conversation finishes.
  &lt;dt&gt; "Sir, are you aware that your fish are running away?"
  &lt;dd&gt;
  &lt;p&gt; He looks at you skeptically and says "Fish cannot run, sir".
  &lt;dl&gt;
    &lt;dt&gt; "You got me!"
    &lt;dd&gt; &lt;p&gt; The fisherman sighs and the conversation ends.
    &lt;dt&gt; "Only kidding."
    &lt;dd&gt; &lt;p&gt; "Good one!" he retorts. Your conversation options at this
    point are the same as those following "Hello there!" above.
    &lt;dt&gt; "Oh, then what are they doing?"
    &lt;dd&gt; &lt;p&gt; He looks at his fish, giving you an opportunity to steal
    his boat, which you do. The conversation ends.
  &lt;/dl&gt;
  &lt;/dd&gt;
&lt;/dl&gt;
    </pre>

  </div>

  <div class="example">
    In some games, conversations are simpler: each character merely has a fixed set of lines that
    they say. In this example, a game FAQ/walkthrough lists some of the known possible responses for
    each character:

    <pre highlight="html">
&lt;section&gt;
  &lt;h1&gt;Dialog&lt;/h1&gt;
  &lt;p&gt;&lt;small&gt;Some characters repeat their lines in order each time you interact
  with them, others randomly pick from amongst their lines. Those who respond in
  order have numbered entries in the lists below.&lt;/small&gt;
  &lt;h2&gt;The Shopkeeper&lt;/h2&gt;
  &lt;ul&gt;
  &lt;li&gt;How may I help you?
  &lt;li&gt;Fresh apples!
  &lt;li&gt;A loaf of bread for madam?
  &lt;/ul&gt;
  &lt;h2&gt;The pilot&lt;/h2&gt;
  &lt;p&gt;Before the accident:
  &lt;ul&gt;
  &lt;/li&gt;I'm about to fly out, sorry!
  &lt;/li&gt;Sorry, I'm just waiting for flight clearance and then I'll be off!
  &lt;/ul&gt;
  &lt;p&gt;After the accident:
  &lt;ol&gt;
  &lt;li&gt;I'm about to fly out, sorry!
  &lt;li&gt;Ok, I'm not leaving right now, my plane is being cleaned.
  &lt;li&gt;Ok, it's not being cleaned, it needs a minor repair first.
  &lt;li&gt;Ok, ok, stop bothering me! Truth is, I had a crash.
  &lt;/ol&gt;
  &lt;h2&gt;Clan Leader&lt;/h2&gt;
  &lt;p&gt;During the first clan meeting:
  &lt;ul&gt;
  &lt;li&gt;Hey, have you seen my daughter? I bet she's up to something nefarious again...
  &lt;li&gt;Nice weather we're having today, eh?
  &lt;li&gt;The name is Bailey, Jeff Bailey. How can I help you today?
  &lt;li&gt;A glass of water? Fresh from the well!
  &lt;/ul&gt;
  &lt;p&gt;After the earthquake:
  &lt;ol&gt;
  &lt;li&gt;Everyone is safe in the shelter, we just have to put out the fire!
  &lt;li&gt;I'll go and tell the fire brigade, you keep hosing it down!
  &lt;/ol&gt;
&lt;/section&gt;
    </pre>

  </div>

<h4 id="footnotes">Footnotes</h4>

  HTML does not have a dedicated mechanism for marking up footnotes. Here are the suggested
  alternatives.

  <hr />

  For short inline annotations, the <code>title</code> attribute could  be used.

  <div class="example">
    In this example, two parts of a dialog are annotated with footnote-like content using the
    <code>title</code> attribute.

    <pre highlight="html">
&lt;p&gt; &lt;b&gt;Customer&lt;/b&gt;: Hello! I wish to register a complaint. Hello. Miss?
&lt;p&gt; &lt;b&gt;Shopkeeper&lt;/b&gt;: <strong>&lt;span title="Colloquial pronunciation of 'What do you'"</strong>
&gt;Watcha&lt;/span&gt; mean, miss?
&lt;p&gt; &lt;b&gt;Customer&lt;/b&gt;: Uh, I'm sorry, I have a cold. I wish to make a complaint.
&lt;p&gt; &lt;b&gt;Shopkeeper&lt;/b&gt;: Sorry, &lt;span <strong>title="This is, of course, a lie."</strong>&gt;we're
closing for lunch&lt;/span&gt;.
    </pre>

  </div>

    <p class="warning">Relying on the <code>title</code> attribute for the visual display
  of text content is currently discouraged as many user agents do not expose the attribute in an accessible manner
  as required by this specification (e.g. requiring a pointing device such as a mouse to cause a tooltip to appear,
  which excludes keyboard-only users and touch-only users, such as anyone with a modern phone or
  tablet).</p>

  <p class="note">
    If the <code>title</code> attribute is used, CSS can be used to
  draw the reader's attention to the elements with the attribute.
  </p>

  <div class="example">
    For example, the following CSS places a dashed line below elements that have a <code>title</code> attribute.

    <pre highlight="css">
[title] { border-bottom: thin dashed; }
    </pre>

  </div>

  <hr />

  For
  annotations, the <code>a</code> element should be used, pointing to
  an element later in the document. The convention is that the
  contents of the link be a number in square brackets.

  <div class="example">
    In this example, a footnote in the dialog links to a paragraph below the dialog. The
    paragraph then reciprocally links back to the dialog, allowing the user to return to the
    location of the footnote.

    <pre highlight="html">
&lt;p&gt; Announcer: Number 16: The &lt;i&gt;hand&lt;/i&gt;.
&lt;p&gt; Interviewer: Good evening. I have with me in the studio tonight
Mr Norman St John Polevaulter, who for the past few years has been
contradicting people. Mr Polevaulter, why &lt;em&gt;do&lt;/em&gt; you
contradict people?
&lt;p&gt; Norman: I don't. &lt;sup&gt;&lt;a href="#fn1" id="r1"&gt;[1]&lt;/a&gt;&lt;/sup&gt;
&lt;p&gt; Interviewer: You told me you did!
<em>...</em>
&lt;section&gt;
  &lt;p id="fn1"&gt;&lt;a href="#r1"&gt;[1]&lt;/a&gt; This is, naturally, a lie,
  but paradoxically if it were true he could not say so without
  contradicting the interviewer and thus making it false.&lt;/p&gt;
&lt;/section&gt;
    </pre>

  </div>

  <hr />

  For side notes, longer annotations that apply to entire sections of the text rather than just
  specific words or sentences, the <code>aside</code> element should be used.

  <div class="example">
    In this example, a sidebar is given after a dialog, giving it some context.

    <pre highlight="html">
&lt;p&gt; &lt;span class="speaker"&gt;Customer&lt;/span&gt;: I will not buy this record, it is scratched.
&lt;p&gt; &lt;span class="speaker"&gt;Shopkeeper&lt;/span&gt;: I'm sorry?
&lt;p&gt; &lt;span class="speaker"&gt;Customer&lt;/span&gt;: I will not buy this record, it is scratched.
&lt;p&gt; &lt;span class="speaker"&gt;Shopkeeper&lt;/span&gt;: No no no, this's'a tobacconist's.
&lt;aside role="note"&gt;
  &lt;p&gt;In 1970, the British Empire lay in ruins, and foreign
  nationalists frequented the streets â many of them Hungarians
  (not the streets â the foreign nationals). Sadly, Alexander
  Yalt has been publishing incompetently-written phrase books.
&lt;/aside&gt;
    </pre>

<p class="note">
    In the example above an ARIA <code>role="note"</code>, permitted for use on <code>aside</code>,
has been added to override the default semantics of the <code>aside</code> element, as the use of the
element in this context, more closely matches the <a>note</a> role.
  </p>

  </div>

  <hr />

  For figures or tables, footnotes can be included in the relevant <code>figcaption</code> or
  <code>caption</code> element, or in surrounding prose.

  <div class="example">
    In this example, a  table has cells with footnotes that are given in prose. A
    <code>figure</code> element is used to give a single legend to the combination of the table and
    its footnotes.

    <pre highlight="html">
&lt;figure&gt;
  &lt;figcaption&gt;Table 1. Alternative activities for knights.&lt;/figcaption&gt;
  &lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt; Activity
    &lt;th&gt; Location
    &lt;th&gt; Cost
  &lt;tr&gt;
    &lt;td&gt; Dance
    &lt;td&gt; Wherever possible
    &lt;td&gt; Â£0&lt;sup&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;
  &lt;tr&gt;
    &lt;td&gt; Routines, chorus scenes&lt;sup&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;
    &lt;td&gt; Undisclosed
    &lt;td&gt; Undisclosed
  &lt;tr&gt;
    &lt;td&gt; Dining&lt;sup&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt;
    &lt;td&gt; Camelot
    &lt;td&gt; Cost of ham, jam, and spam&lt;sup&gt;&lt;a href="#fn4"&gt;4&lt;/a&gt;&lt;/sup&gt;
  &lt;/table&gt;
  &lt;p id="fn1"&gt;1. Assumed.&lt;/p&gt;
  &lt;p id="fn2"&gt;2. Footwork impeccable.&lt;/p&gt;
  &lt;p id="fn3"&gt;3. Quality described as "well".&lt;/p&gt;
  &lt;p id="fn4"&gt;4. A lot.&lt;/p&gt;
&lt;/figure&gt;
    </pre>

  </div>

<h3 id="disabled-elements">Disabled elements</h3>

  An element is said to be <dfn>actually disabled</dfn> if it
  falls into one of the following categories:

  <ul>

    <li>a <code>button</code> element that is <a>disabled</a></li>

    <li>an <code>input</code> element that is <a>disabled</a></li>

    <li>a <code>select</code> element that is <a>disabled</a></li>

    <li>a <code>textarea</code> element that is <a>disabled</a></li>

    <li>an <code>optgroup</code> element that has a <code>disabled</code> attribute</li>

    <li>an <code>option</code> element that is <a>disabled</a></li>

    <li>a <code>menuitem</code> element that has a <code>disabled</code> attribute</li>

    <li>a <code>fieldset</code> element that is a <a>disabled fieldset</a></li>

  </ul>

  <p class="note">
    This definition is used to determine what elements <a>can be focused</a> and which elements match the <code>:disabled</code> pseudo-class.
  </p>

  <div class="impl">

<h3 id="matching-html-elements-using-selectors">Matching HTML elements using selectors</h3>

<h4 id="casesensitivity">Case-sensitivity</h4>

  The Selectors specification leaves the case-sensitivity of element names, attribute names, and
  attribute values to be defined by the host language. [[!CSS3-SELECTORS]]

  <p class="note"><cite>Selectors</cite> defines that ID and class selectors, when matched against
  elements in documents that are in <a>quirks mode</a>, will be matched in an <a>ASCII
  case-insensitive</a> manner.</p>

  When comparing a CSS element type selector to the names of <a>HTML elements</a> in
  <a>HTML documents</a>, the CSS element type selector must first be <a>converted to ASCII
  lowercase</a>. The same selector when compared to other elements must be compared according to
  its original case. In both cases, the comparison is <a>case-sensitive</a>.

  When comparing the name part of a CSS attribute selector to the names of namespace-less
  attributes on <a>HTML elements</a> in <a>HTML documents</a>, the name part of the CSS
  attribute selector must first be <a>converted to ASCII lowercase</a>. The same selector when
  compared to other attributes must be compared according to its original case. In both cases, the
  comparison is <a>case-sensitive</a>.

  Attribute selectors on an <a>HTML element</a> in an
  <a>HTML document</a> must treat the <em>values</em> of attributes
  with the following names as <a>ASCII case-insensitive</a>, with one
  exception as noted <a>in the rendering section</a>:

  <ul class="brief">
    <li><code>accept</code>
    </li><li><code>accept-charset</code>
    </li><li><code>align</code>
    </li><li><code>alink</code>
    </li><li><code>axis</code>
    </li><li><code>bgcolor</code>
    </li><li><code>charset</code>
    </li><li><code>checked</code>
    </li><li><code>clear</code>
    </li><li><code>codetype</code>
    </li><li><code>color</code>
    </li><li><code>compact</code>
    </li><li><code>declare</code>
    </li><li><code>defer</code>
    </li><li><code>dir</code>
    </li><li><code>direction</code>
    </li><li><code>disabled</code>
    </li><li><code>enctype</code>
    </li><li><code>face</code>
    </li><li><code>frame</code>
    </li><li><code>hreflang</code>
    </li><li><code>http-equiv</code>
    </li><li><code>lang</code>
    </li><li><code>language</code>
    </li><li><code>link</code>
    </li><li><code>media</code>
    </li><li><code>method</code>
    </li><li><code>multiple</code>
    </li><li><code>nohref</code>
    </li><li><code>noresize</code>
    </li><li><code>noshade</code>
    </li><li><code>nowrap</code>
    </li><li><code>readonly</code>
    </li><li><code>rel</code>
    </li><li><code>rev</code>
    </li><li><code>rules</code>
    </li><li><code>scope</code>
    </li><li><code>scrolling</code>
    </li><li><code>selected</code>
    </li><li><code>shape</code>
    </li><li><code>target</code>
    </li><li><code>text</code>
    </li><li><code>type</code> (except as specified in the rendering section)
    </li><li><code>valign</code>
    </li><li><code>valuetype</code>
    </li><li><code>vlink</code>
  </li></ul>

  All other attribute values and everything else must be treated as entirely <a>case-sensitive</a>
  for the purposes of selector matching. This includes:

  <ul class="brief">
    <li> IDs and classes in <a>no-quirks mode</a> and <a>limited-quirks mode</a>
    </li><li> the names of elements not in the <a>HTML namespace</a>
    </li><li> the names of <a>HTML elements</a> in <a>XML documents</a>
    </li><li> the names of attributes of elements not in the <a>HTML namespace</a>
    </li><li> the names of attributes of <a>HTML elements</a> in <a>XML documents</a>
    </li><li> the names of attributes that themselves have namespaces
  </li></ul>

<h4 id="pseudoclasses">Pseudo-classes</h4>

  There are a number of dynamic selectors that can be used with HTML. This section defines when
  these selectors match HTML elements. [[!CSS3-SELECTORS]] [[!CSSUI]]

  <dl>

    <dt><dfn><code>:link</code></dfn></dt>
    <dt><dfn><code>:visited</code></dfn></dt>

    <dd>

    All <code>a</code> elements that have an <code>href</code>
    attribute, all <code>area</code> elements that have an <code>href</code> attribute, and all <code>link</code> elements that have
    an <code>href</code> attribute, must match one of <code>:link</code> and <code>:visited</code>.

    Other specifications might apply more specific rules regarding how these elements are to
    match these pseudo-classes, to mitigate some privacy concerns that apply with straightforward
    implementations of this requirement.

    </dd>

    <dt><dfn><code>:active</code></dfn></dt>

    <dd>

    The <code>:active</code> pseudo-class is defined to match an element
    <q cite="https://drafts.csswg.org/selectors3/#the-user-action-pseudo-classes-hover-act">while an
    element is <dfn><i>being activated</i></dfn> by the user</q>.

    To determine whether a particular element is <i>being activated</i> for the purposes of
    defining the <code>:active</code> pseudo-class only, an HTML user agent
    must use the first relevant entry in the following list.

    <dl>

      <dt>If the element has a descendant that is currently matching the <code>:active</code> pseudo-class</dt>

      <dd>The element is <i>being activated</i>.</dd>

      <dt>If the element is the <a>labeled control</a> of a <code>label</code> element that is
      currently matching <a>:active</a></dt>

      <dd>The element is <i>being activated</i>.</dd>

      <dt>If the element is a <code>button</code> element</dt>

      <dt>If the element is an <code>input</code> element whose <code>type</code> attribute is in the <a>Submit Button</a>, <a>Image Button</a>, <a>Reset
      Button</a>, or <a>Button</a> state</dt>

      <dd>

      The element is <i>being activated</i> if it is <a>in a formal activation state</a>
      and it is not <a>disabled</a>.

      <p class="example">For example, if the user is using a keyboard to push a <code>button</code>
      element by pressing the space bar, the element would match this pseudo-class in between the
      time that the element received the <code>keydown</code> event and the
      time the element received the <code>keyup</code> event.</p>

      </dd>

      <dt>If the element is a <code>menuitem</code> element</dt>

      <dd>The element is <i>being activated</i> if it is <a>in a formal activation state</a>
      and it does not have a <code>disabled</code>
      attribute.</dd>

      <dt>If the element is an <code>a</code> element that has an <code>href</code> attribute</dt>

      <dt>If the element is an <code>area</code> element that has an <code>href</code> attribute</dt>

      <dt>If the element is a <code>link</code> element that has an <code>href</code> attribute</dt>

      <dt>If the element has its <a>tabindex focus flag</a> set</dt>

      <dd>The element is <i>being activated</i> if it is <a>in a formal activation
      state</a>.</dd>

      <dt>If the element is <a>being actively pointed at</a></dt>

      <dd>The element is <i>being activated</i>.</dd>

    </dl>

    An element is said to be <dfn>in a formal activation state</dfn> between the time the user
    begins to indicate an intent to trigger the element's <a>activation behavior</a> and
    either the time the user stops indicating an intent to trigger the element's <a>activation
    behavior</a>, or the time the element's <a>activation behavior</a> has finished
    running, which ever comes first.

    An element is said to be <dfn>being actively pointed at</dfn> while the user indicates the
    element using a pointing device while that pointing device is in the "down" state (e.g. for a
    mouse, between the time the mouse button is pressed and the time it is depressed; for a finger
    in a multitouch environment, while the finger is touching the display surface).

    </dd>

    <dt><dfn><code>:hover</code></dfn></dt>

    <dd>

    The <code>:hover</code> pseudo-class is defined to match an element <q cite="https://drafts.csswg.org/selectors3/#the-user-action-pseudo-classes-hover-act">while the
    user <i>designates</i> an element with a pointing device</q>. For the purposes of defining the
    <code>:hover</code> pseudo-class only, an HTML user agent must consider
    an element as being one that the user <i>designates</i> if it is:

    <ul>

      <li>

      An element that the user indicates using a pointing device.

      </li>

      <li>

      An element that has a descendant that the user indicates using a pointing device.

      </li>

      <li>

      An element that is the <a>labeled control</a> of a <code>label</code> element that is
      currently matching <a>:hover</a>.

      </li>

    </ul>

    <div class="example">
      Consider in particular a fragment such as:

      <pre highlight="html">
&lt;p&gt; &lt;label for=c&gt; &lt;input id=a&gt; &lt;/label&gt; &lt;span id=b&gt; &lt;input id=c&gt; &lt;/span&gt; &lt;/p&gt;
    </pre>

      If the user designates the element with ID "<code>a</code>" with their pointing
      device, then the <code>p</code> element (and all its ancestors not shown in the snippet above),
      the <code>label</code> element, the element with ID "<code>a</code>", and the element
      with ID "<code>c</code>" will match the <a>:hover</a>
      pseudo-class. The element with ID "<code>a</code>" matches it from condition 1, the
      <code>label</code> and <code>p</code> elements match it because of condition 2 (one of their
      descendants is designated), and the element with ID "<code>c</code>" matches it
      through condition 3 (its <code>label</code> element matches <a>:hover</a>). However, the element with ID "<code>b</code>"
      does <em>not</em> match <a>:hover</a>: its descendant is not
      designated, even though it matches <a>:hover</a>.

    </div>

    </dd>

    <dt><dfn><code>:focus</code></dfn></dt>

    <dd>

    For the purposes of the CSS ':focus' pseudo-class, an <dfn>element has the focus</dfn> when
    its <a>top-level browsing context</a> has the system focus, it is not itself a
    <a>browsing context container</a>, and it is one of the elements listed in the <a>focus
    chain</a> of the <a>currently focused area of the top-level browsing context</a>.

    </dd>

    <dt><dfn><code>:enabled</code></dfn></dt>

    <dd>

    The <code>:enabled</code> pseudo-class must match any element
    that is one of the following:

    <ul>

      <li>a <code>button</code> element that is not <a>disabled</a></li>

      <li>an <code>input</code> element that is not <a>disabled</a></li>

      <li>a <code>select</code> element that is not <a>disabled</a></li>

      <li>a <code>textarea</code> element that is not <a>disabled</a></li>

      <li>an <code>optgroup</code> element that does not have a <code>disabled</code> attribute</li>

      <li>an <code>option</code> element that is not <a>disabled</a></li>

      <li>a <code>menuitem</code> element that does not have a <code>disabled</code> attribute</li>

      <li>a <code>fieldset</code> element that is not a <a>disabled fieldset</a></li>

    </ul>

    </dd>

    <dt><dfn><code>:disabled</code></dfn></dt>

    <dd>

    The <code>:disabled</code> pseudo-class must match any element that
    is <a>actually disabled</a>.

    </dd>

    <dt><dfn><code>:checked</code></dfn></dt>

    <dd>

    The <code>:checked</code> pseudo-class must match any element
    falling into one of the following categories:

    <ul>

      <li><code>input</code> elements whose <code>type</code> attribute is in
      the <a>Checkbox</a> state and whose <a>checkedness</a> state is true</li>

      <li><code>input</code> elements whose <code>type</code> attribute is in
      the <a>Radio Button</a> state and whose <a>checkedness</a> state is true</li>

      <li><code>option</code> elements whose <a>selectedness</a> is true</li>

      <li><code>menuitem</code> elements whose <code>type</code> attribute
      is in the <a>Checkbox</a> state and that have a
      <code>checked</code> attribute</li>

      <li><code>menuitem</code> elements whose <code>type</code> attribute
      is in the <a>Radio</a> state and that have a <code>checked</code> attribute</li>

    </ul>

    </dd>

    <dt><dfn><code>:indeterminate</code></dfn></dt>

    <dd>

    The <code>:indeterminate</code> pseudo-class must match any
    element falling into one of the following categories:

    <ul>

      <li><code>input</code> elements whose <code>type</code> attribute is in
      the <a>Checkbox</a> state and whose <code>indeterminate</code> IDL attribute is set to true</li>

      <li><code>input</code> elements whose <code>type</code> attribute is in
      the <a>Radio Button</a> state and whose <a>radio button
      group</a> contains no <code>input</code> elements whose <a>checkedness</a> state is true.</li>

      <li><code>progress</code> elements with no <code>value</code>
      content attribute</li>

    </ul>

    </dd>

    <dt><dfn><code>:default</code></dfn></dt>

    <dd>

    The <code>:default</code> pseudo-class must match any element
    falling into one of the following categories:

    <ul>

      <li><code>button</code> elements that are their form's <a>default button</a></li>

      <li><code>input</code> elements whose <code>type</code> attribute is in
      the <a>Submit Button</a> or <a>Image Button</a> state, and that are their form's
      <a>default button</a></li>

      <li><code>input</code> elements to which the <code>checked</code>
      attribute applies and that have a <code>checked</code>
      attribute</li>

      <li><code>option</code> elements that have a <code>selected</code>
      attribute</li>

    </ul>

    </dd>

    <dt><dfn><code>:valid</code></dfn></dt>

    <dd>

    The <code>:valid</code> pseudo-class must match any element falling
    into one of the following categories:

    <ul>

      <li>elements that are <a>candidates for
      constraint validation</a> and that <a>satisfy their
      constraints</a></li>

      <li><code>form</code> elements that are not the <a>form owner</a> of any elements that
      themselves are <a>candidates for constraint
      validation</a> but do not <a>satisfy their
      constraints</a></li>

      <li><code>fieldset</code> elements that have no descendant elements that themselves are <a>candidates for constraint validation</a> but do
      not <a>satisfy their constraints</a></li>

    </ul>

    </dd>

    <dt><dfn><code>:invalid</code></dfn></dt>

    <dd>

    The <code>:invalid</code> pseudo-class must match any element
    falling into one of the following categories:

    <ul>

      <li>elements that are <a>candidates for
      constraint validation</a> but that do not <a>satisfy their
      constraints</a></li>

      <li><code>form</code> elements that are the <a>form owner</a> of one or more elements
      that themselves are <a>candidates for constraint
      validation</a> but do not <a>satisfy their
      constraints</a></li>

      <li><code>fieldset</code> elements that have of one or more descendant elements that themselves
      are <a>candidates for constraint
      validation</a> but do not <a>satisfy their
      constraints</a></li>

    </ul>

    </dd>

    <dt><dfn><code>:in-range</code></dfn></dt>

    <dd>

    The <code>:in-range</code> pseudo-class must match all elements
    that are <a>candidates for constraint
    validation</a>, <a>have range limitations</a>, and that are neither <a>suffering
    from an underflow</a> nor <a>suffering from an overflow</a>.

    </dd>

    <dt><dfn><code>:out-of-range</code></dfn></dt>

    <dd>

    The <code>:out-of-range</code> pseudo-class must match all
    elements that are <a>candidates for constraint
    validation</a>, <a>have range limitations</a>, and that are either <a>suffering from
    an underflow</a> or <a>suffering from an overflow</a>.

    </dd>

    <dt><dfn><code>:required</code></dfn></dt>

    <dd>

    The <code>:required</code> pseudo-class must match any element
    falling into one of the following categories:

    <ul>

      <li><code>input</code> elements that are <i>required</i></li>

      <li><code>select</code> elements that have a <code>required</code>
      attribute</li>

      <li><code>textarea</code> elements that have a <code>required</code> attribute</li>

    </ul>

    </dd>

    <dt><dfn><code>:optional</code></dfn></dt>

    <dd>

    The <code>:optional</code> pseudo-class must match any element
    falling into one of the following categories:

    <ul>

      <li><code>input</code> elements to which the <code>required</code>
      attribute applies that are not <i>required</i></li>

      <li><code>select</code> elements that do not have a <code>required</code> attribute</li>

      <li><code>textarea</code> elements that do not have a <code>required</code> attribute</li>

    </ul>

    </dd>

    <dt><dfn><code>:read-only</code></dfn></dt>
    <dt><dfn><code>:read-write</code></dfn></dt>

    <dd>

    The <code>:read-write</code> pseudo-class must match any element
    falling into one of the following categories, which for the purposes of Selectors are thus
    considered <i>user-alterable</i>: [[!CSS3-SELECTORS]]

    <ul>

      <li><code>input</code> elements to which the <code>readonly</code>
      attribute applies, and that are <i>mutable</i> (i.e. that do not
      have the <code>readonly</code> attribute specified and that are not
      <a>disabled</a>)</li>

      <li><code>textarea</code> elements that do not have a <code>readonly</code> attribute, and that are not <a>disabled</a></li>

      <li>elements that are <a>editing hosts</a> or <a>editable</a>
      and are neither <code>input</code> elements nor <code>textarea</code> elements</li>

    </ul>

    The <code>:read-only</code> pseudo-class must match all other
    <a>HTML elements</a>.

    </dd>

    <dt><dfn><code>:dir(ltr)</code></dfn></dt>

    <dd>

    The <code>:dir(ltr)</code> pseudo-class must match all elements whose
    <a>directionality</a> is '<a>ltr</a>'.

    </dd>

    <dt><dfn><code>:dir(rtl)</code></dfn></dt>

    <dd>

    The <code>:dir(rtl)</code> pseudo-class must match all elements whose
    <a>directionality</a> is '<a>rtl</a>'.

    </dd>

  </dl>

  <p class="note">
    Another section of this specification defines the <i>target element</i> used with the
    <code>:target</code> pseudo-class.
  </p>

  <p class="note">
    This specification does not define when an element matches the <code>:lang()</code> dynamic
    pseudo-class, as it is defined in sufficient detail in a language-agnostic fashion in the
    Selectors specification. [[!CSS3-SELECTORS]]
  </p>

<!-- Big Text: Editing -->

<h2 id="editing"><dfn>User interaction</dfn></h2>

<h3 id="the-hidden-attribute"><dfn>The <dfn><code>hidden</code></dfn> attribute</dfn></h3>

  All <a>HTML elements</a> may have the <code>hidden</code> content attribute set. The
  <code>hidden</code> attribute is a <a>boolean attribute</a>. When specified on an element, it
  indicates that the element is not yet, or is no longer, directly relevant to the page's current
  state, or that it is being used to declare content to be reused by other parts of the page as
  opposed to being directly accessed by the user. <span class="impl">User agents should not render
  elements that have the <code>hidden</code> attribute specified. This requirement may be
  implemented indirectly through the style layer. For example, an HTML+CSS user agent could
  implement these requirements <a>using the rules suggested in the Rendering section</a>.</span>

  <p class="note">
    Because this attribute is typically implemented using CSS, it's also possible to override it
    using CSS. For instance, a rule that applies 'display: block' to all elements will cancel the
    effects of the <code>hidden</code> attribute. Authors therefore have to take care when writing
    their style sheets to make sure that the attribute is still styled as expected.
  </p>

  <div class="example">
    In the following skeletal example, the attribute is used to hide the Web game's main screen
    until the user logs in:

    <pre highlight="html">
      &lt;h1>The Example Game&lt;/h1>
      &lt;section>
        &lt;h2>Login&lt;/h2>
        &lt;form>
        ...
        &lt;!-- calls login() once the user's credentials have been checked -->
        &lt;/form>
        &lt;script>
        function login() {
          // switch screens
          document.getElementById('login').hidden = true;
          document.getElementById('game').hidden = false;
        }
        &lt;/script>
      &lt;/section>
      &lt;section hidden>
        ...
      &lt;/section>
    </pre>
  </div>

  The <code>hidden</code> attribute must not be used to hide content that
  could legitimately be shown in another presentation. For example, it is incorrect to use <code>hidden</code> to hide panels in a tabbed dialog, because the tabbed interface
  is merely a kind of overflow presentation &mdash; one could equally well just show all the form
  controls in one big page with a scrollbar. It is similarly incorrect to use this attribute to hide
  content just from one presentation &mdash; if something is marked <code>hidden</code>, it is hidden from all presentations, including, for instance,
  screen readers.

  Elements that are not themselves <code>hidden</code> must not
  <a>hyperlink</a> to elements that are <code>hidden</code>. The <code>for</code> attributes of <code>label</code> and <code>output</code> elements that are not
  themselves <code>hidden</code> must similarly not refer to elements that are
  <code>hidden</code>. In both cases, such references would cause user
  confusion.

  Elements and scripts may, however, refer to elements that are <code>hidden</code> in other contexts.

  <div class="example">
    For example, it would be incorrect to use the <code>href</code> attribute to link to a
    section marked with the <code>hidden</code>
    attribute. If the content is not applicable or relevant, then there
    is no reason to link to it.

    It would be fine, however, to use the ARIA <code>aria-describedby</code> attribute to
    refer to descriptions that are themselves <code>hidden</code>. While hiding the descriptions
    implies that they are not useful alone, they could be written in
    such a way that they are useful in the specific context of being
    referenced from the images that they describe.

    Similarly, a <code>canvas</code> element with the <code>hidden</code> attribute could be used by a
    scripted graphics engine as an off-screen buffer, and a form
    control could refer to a hidden <code>form</code> element using its
    <code>form</code> attribute.
  </div>

  Accessibility APIs are encouraged to provide a way to expose
  structured content while marking it as hidden in the default view.
  Such content should not be perceivable to users in the normal document
  flow in any modality, whether using Assistive Technology (AT) or
  mainstream User Agents.

  When such features are available, User Agents may use them to
  expose the full semantics of <code>hidden</code>
  elements to AT when appropriate, if such content is referenced
  indirectly by an <a>ID reference</a> or
  <a>valid hash-name reference</a>. This allows ATs to access the
  structure of these <code>hidden</code> elements
  upon user request, while keeping the content hidden in all
  presentations of the normal document flow. Authors who wish to prevent
  user-initiated viewing of a <code>hidden</code>
  element should not reference the element with such a mechanism.

  Because some User Agents have flattened hidden content when
  exposing such content to AT, authors should not reference <code>hidden</code> content which would lose essential
  meaning when flattened.

  <div class="example">
    For example, it would be incorrect to use the <code>href</code>
    attribute to link to a section marked with the <code>hidden</code> attribute.
    If the content is not applicable or relevant, then there is no reason to link to it.

    It would be fine, however, to use the ARIA <code>aria-describedby</code> attribute to refer to descriptions that are
    themselves <code>hidden</code>. While hiding the descriptions implies that
    they are not useful alone, they could be written in such a way that they are useful in the
    specific context of being referenced from the images that they describe.

    Similarly, a <code>canvas</code> element with the <code>hidden</code>
    attribute could be used by a scripted graphics engine as an off-screen buffer, and a form control
    could refer to a hidden <code>form</code> element using its <code>form</code> attribute.
  </div>

  Elements in a section hidden by the <code>hidden</code> attribute are still
  active, e.g. scripts and form controls in such sections still execute and submit respectively.
  Only their presentation to the user changes.

  <div class="impl">

  The <dfn><code>hidden</code></dfn> IDL attribute must <a>reflect</a>
  the content attribute of the same name.

  </div>

<h3 id="inert-subtrees"><dfn>Inert subtrees</dfn></h3>

  <p class="note">
  This section <strong>does not</strong> define or create any content attribute
  named "inert". This section merely defines an abstract <em>concept</em> of
  <a>inertness</a>.
  </p>

  A node (in particular elements and text nodes) can be marked as <dfn>inert</dfn>. When a node
  is <a>inert</a>, then the user agent must act as if the node was absent for the purposes of
  targeting user interaction events, may ignore the node for the purposes of text search user
  interfaces (commonly known as "find in page"), and may prevent the user from selecting text in
  that node. User agents should allow the user to override the restrictions on search and text
  selection, however.

  <p class="example">
  For example, consider a page that consists of just a single <a>inert</a>
  paragraph positioned in the middle of a <code>body</code>. If a user moves their pointing device
  from the <code>body</code> over to the <a>inert</a> paragraph and clicks on the paragraph,
  no <code>mouseover</code> event would be fired, and the <code>mousemove</code> and <code>click</code> events would
  be fired on the <code>body</code> element rather than the paragraph.
  </p>

  <p class="note">
  When a node is inert, it generally cannot be focused. Inert nodes that are <a>commands</a> will also get disabled.
  </p>

  While a <a>browsing context container</a> is marked as <a>inert</a>, its
  <a>nested browsing context</a>'s <a>active document</a>, and all nodes in that
  <code>Document</code>, must be marked as <a>inert</a>.

  An entire <code>Document</code> can be marked as <dfn>blocked by a modal dialog</dfn>
  <var>subject</var>. While a <code>Document</code> is so marked, every node that is <a>in the
  <code>Document</code></a>, with the exception of the <var>subject</var> element and its
  descendants, must be marked <a>inert</a>. (The elements excepted by this paragraph can
  additionally be marked <a>inert</a> through other means; being part of a modal dialog does not
  "protect" a node from being marked <a>inert</a>.)

  Only one element at a time can mark a <code>Document</code> as being <a>blocked by a modal
  dialog</a>. When a new <code>dialog</code> is made to <a>block</a> a <code>Document</code>, the previous element, if any, stops blocking the
  <code>Document</code>.

  <p class="note">
    The <code>dialog</code> element's <code>showModal()</code> method makes use of this mechanism.
  </p>

<h3 id="activation"><dfn>Activation</dfn></h3>

  Certain elements in HTML have an <a>activation behavior</a>, which means that the user
  can activate them. This triggers a sequence of events dependent on the activation mechanism, and
  normally culminating in a <code>click</code> event<span class="impl">, as described below</span>.

  <div class="impl">

  The user agent should allow the user to manually trigger elements that have an <a>activation
  behavior</a>, for instance using keyboard or voice input, or through mouse clicks. When the
  user triggers an element with a defined <a>activation behavior</a> in a manner other than
  clicking it, the default action of the interaction event must be to <a>run synthetic click
  activation steps</a> on the element.

  Each element has a <var>click in progress</var> flag, initially set to false.

  When a user agent is to <dfn>run synthetic click activation steps</dfn> on an element, the user
  agent must run the following steps:

  <ol>

    <li>If the element's <var>click in progress</var> flag is set to true, then abort
    these steps.</li>

    <li>Set the <var>click in progress</var> flag on the element to true.</li>

    <li><a>Run pre-click activation steps</a> on the element.</li>

    <li><a>Fire a <code>click</code> event</a> at the element. If the
    <a>run synthetic click activation steps</a> algorithm was invoked because the <code>click()</code> method was invoked, then the <code>isTrusted</code> attribute must be initialized to false.</li>

    <li>

    If this <code>click</code> event is not canceled, <a>run post-click
    activation steps</a> on the element.

    If the event <em>is</em> canceled, the user agent must <a>run canceled activation
    steps</a> on the element instead.

    </li>

    <li>Set the <var>click in progress</var> flag on the element to false.</li>

  </ol>

  When a pointing device is clicked, the user agent must <a>run authentic click activation
  steps</a> instead of firing the <code>click</code>
  event. When a user agent is to
  <dfn>run authentic click activation steps</dfn> for a given event <var>event</var>, it must
  follow these steps:

  <ol>

    <li>Let <var>target</var> be the element designated by the user (the target of <var>event</var>).</li>

    <li>If <var>target</var> is a <code>canvas</code> element, run the <a>canvas
    <code>MouseEvent</code> rerouting steps</a>. If this changes <var>event</var>'s
    target, then let <var>target</var> be the new target.</li>

    <li>Set the <var>click in progress</var> flag on <var>target</var> to
    true.</li>

    <li>Let <var>e</var> be the <a>nearest activatable element</a> of <var>target</var> (defined below), if any.</li>

    <li>If there is an element <var>e</var>, <a>run pre-click activation steps</a>
    on it.</li>

    <li>

    <a>Dispatch</a> <var>event</var> (the
    required <code>click</code> event) at <var>target</var>.

    If there is an element <var>e</var> and the <code>click</code>
    event is not canceled, <a>run post-click activation steps</a> on element <var>e</var>.

    If there is an element <var>e</var> and the event <em>is</em> canceled, <a>run
    canceled activation steps</a> on element <var>e</var>.

    </li>

    <li>Set the <var>click in progress</var> flag on <var>target</var> to
    false.</li>

  </ol>

  <p class="note">
    The algorithms above don't run for arbitrary synthetic events dispatched by author script. The
    <code>click()</code> method can be used to make the <a>run synthetic click activation steps</a>
    algorithm happen programmatically.
  </p>

  <p class="note">
    Click-focusing behavior (e.g. the focusing of a text field when user clicks in one) typically
    happens before the click, when the mouse button is first depressed, and is therefore not
    discussed here.
  </p>

  Given an element <var>target</var>, the <dfn>nearest activatable element</dfn> is the element
  returned by the following algorithm:

  <ol>

    <li>If <var>target</var> has a defined <a>activation behavior</a>, then return
    <var>target</var> and abort these steps.</li>

    <li>If <var>target</var> has a parent element, then set <var>target</var> to
    that parent element and return to the first step.</li>

    <li>Otherwise, there is no <a>nearest activatable element</a>.</li>

  </ol>

  When a user agent is to <dfn>run pre-click activation steps</dfn> on an element, it must run
  the <dfn>pre-click activation steps</dfn> defined for that element, if any.

  When a user agent is to <dfn>run canceled activation steps</dfn> on an element, it must run the
  <dfn>canceled activation steps</dfn> defined for that element, if any.

  When a user agent is to <dfn>run post-click activation steps</dfn> on an element, it must run
  the <dfn>activation behavior</dfn> defined for that element, if any. Activation behaviors can
  refer to the <code>click</code> event that was fired by the steps above
  leading up to this point.

  </div>

  <dl class="domintro">
    <dt><var>element</var> . <code>click</code>()</dt>
    <dd>Acts as if the element was clicked.</dd>
  </dl>

  <div class="impl">
    The <dfn><code>click()</code></dfn> method must run the following steps:

    1. If the element is a form control that is <a>disabled</a>, abort these steps.
    2. <a>Run synthetic click activation steps</a> on the element.
  </div>

<h3 id="focus"><dfn>Focus</dfn></h3>

<h4 id="focus-introduction"><dfn>Introduction</dfn></h4>

  <em>This section is non-normative.</em>

  An HTML user interface typically consists of multiple interactive widgets, such as form
  controls, scrollable regions, links, dialog boxes, browser tabs, and so forth. These widgets form
  a hierarchy, with some (e.g. browser tabs, dialog boxes) containing others (e.g. links, form
  controls).

  When interacting with an interface using a keyboard, key input is channeled from the system,
  through the hierarchy of interactive widgets, to an active widget, which is said to be
  <a>focused</a>.

  <div class="example">
    Consider an HTML application running in a browser tab running in a graphical environment.
    Suppose this application had a page with some text fields and links, and was currently showing a
    modal dialog, which itself had a text field and a button.

    The hierarchy of focusable widgets, in this scenario, would include the browser window, which
    would have, amongst its children, the browser tab containing the HTML application. The tab itself
    would have as its children the various links and text fields, as well as the dialog. The dialog
    itself would have as its children the text field and the button.

    <img src="images/focus-tree.png" alt="" width="800" height="450" />

    If the widget with <a>focus</a> in this example was the text field in the dialog box, then key
    input would be channeled from the graphical system to &#x2460; the Web browser, then to &#x2461;
    the tab, then to &#x2462; the dialog, and finally to &#x2463; the text field.
  </div>

  Keyboard <em>events</em> are always targeted at this <a>focused</a> element.

<h4 id="data-model"><dfn>Data model</dfn></h4>

  The term <dfn>focusable area</dfn> is used to refer to regions of the interface that can become
  the target of keyboard input. Focusable areas can be elements, parts of elements, or other regions
  managed by the user agent.

  Each <a>focusable area</a> has a <dfn>DOM anchor</dfn>, which is a <code>Node</code> object
  that represents the position of the <a>focusable area</a> in the DOM. (When the <a>focusable
  area</a> is itself a <code>Node</code>, it is its own <a>DOM anchor</a>.) The <a>DOM anchor</a> is
  used in some APIs as a substitute for the <a>focusable area</a> when there is no other DOM object
  to represent the <a>focusable area</a>.

  The following table describes what objects can be <a>focusable
  areas</a>. The cells in the left column describe objects that can be <a>focusable areas</a>; the cells in the right column describe the <a>DOM
  anchors</a> for those elements. (The cells that span both columns are non-normative examples.)

  <table>
    <thead>
    <tr>
      <th><a>Focusable area</a>
      <th><a>DOM anchor</a>
    <tr>
      <th colspan="2">Examples

    <tbody>
    <tr>
      <th class="data-header" headers="th-fa-area">
      Elements that have their <a>tabindex focus flag</a> set, that are not <a>actually disabled</a>, that are not <a>expressly inert</a>, and that are either <a>being
      rendered</a> or <a>being used as relevant canvas fallback content</a>.
      <td headers="td-fa-1 th-fa-dom-rep">
      The element itself.
    <tr>
      <td headers="td-fa-1 th-fa-examples" colspan="2">
      <p class="example">

  <code>iframe</code>, <code>&lt;input
      type=text></code>, sometimes <code>&lt;a href=""></code> (depending on platform
      conventions).
  </p>
    <tbody>
    <tr>
      <th class="data-header" headers="th-fa-area">
      The shapes of <code>area</code> elements in an <a>image map</a> associated with an
      <code>img</code> element that is <a>being rendered</a> and is not <a>expressly inert</a>.
      <td headers="td-fa-2 th-fa-dom-rep">
      The <code>img</code> element.
    <tr>
      <td headers="td-fa-2 th-fa-examples" colspan="2">
      <div class="example">
      In the following example, the <code>area</code> element creates two shapes, one on each
      image. The <a>DOM anchor</a> of the first shape is the first <code>img</code> element, and the
      <a>DOM anchor</a> of the second shape is the second <code>img</code> element.
      <pre highlight="html">
  &lt;map id=wallmap>&lt;area alt="Enter Door" coords="10,10,100,200" href="door.html">&lt;/map>
  ...
  &lt;img src="images/innerwall.jpeg" alt="There is a white wall here, with a door." usemap="#wallmap">
  ...
  &lt;img src="images/outerwall.jpeg" alt="There is a red wall here, with a door." usemap="#wallmap">
  </pre>
      </div>

    <tbody>
    <tr>
      <th class="data-header" headers="th-fa-area">
      The user-agent provided subwidgets of elements that are <a>being rendered</a> and are not
      <a>actually disabled</a> or <a>expressly inert</a>.
      <td headers="td-fa-3 th-fa-dom-rep">
      The element for which the <a>focusable area</a> is a subwidget.
    <tr>
      <td headers="td-fa-3 th-fa-examples" colspan=2>
      <p class="example">The <a>controls in the user
      interface that is exposed to the user</a> for a <code>video</code> element, the up and down
      buttons in a spin-control version of <code>&lt;input
      type=number></code>, the two range control widgets in a <code>&lt;input type=range multiple></code>, the part of a
      <code>details</code> element's rendering that enabled the element to be opened or closed using
      keyboard input.
  </p>


    <tbody>
    <tr>
      <th class="data-header" headers="th-fa-area">
      The scrollable regions of elements that are <a>being rendered</a> and are not <a>expressly inert</a>.
      <td headers="td-fa-4 th-fa-dom-rep">
      The element for which the box that the scrollable region scrolls was created.
    <tr>
      <td headers="td-fa-4 th-fa-examples" colspan="2">
      <p class="example">
  The CSS 'overflow' property's 'scroll' value typically creates a scrollable
      region.
  </p>

    <tbody>
    <tr>
      <th class="data-header" headers="th-fa-area">
      The viewport of a <code>Document</code> that is in a <a>browsing context</a> and is not
      <a>inert</a>.
      <td headers="td-fa-5 th-fa-dom-rep">
      The <code>Document</code> for which the viewport was created.
    <tr>
      <td headers="td-fa-5 th-fa-examples" colspan="2">
      <p class="example">
  The contents of an <code>iframe</code>.
  </p>

    <tbody>
    <tr>
      <th class="data-header" headers="th-fa-area">
      Any other element or part of an element, especially to aid with accessibility or to better
      match platform conventions.
      <td headers="td-fa-6 th-fa-dom-rep">
      The element.
    <tr>
      <td headers="td-fa-6 th-fa-examples" colspan="2">
      <p class="example">
  A user agent could make all list item bullets focusable, so that a user can
      more easily navigate lists.
  </p>
      <p class="example">
  Similarly, a user agent could make all elements with <code>title</code> attributes focusable, so that their advisory information can
      be accessed.
  </p>

  </table>

  <p class="note">
    A <a>browsing context container</a> (e.g. an
    <code>iframe</code>) is a <a>focusable area</a>, but key events routed to a <a>browsing context
    container</a> get immediately routed to the <a>nested browsing context</a>'s <a>active
    document</a>. Similarly, in sequential focus navigation a <a>browsing context
    container</a> essentially acts merely as a placeholder for its <a>nested browsing
    context</a>'s <a>active document</a>.
  </p>

  Each <a>focusable area</a> belongs to a <dfn>control group</dfn>. Each <a>control group</a> has
  an <dfn>owner</dfn>. <a>Control group
  owners</a> are <dfn>control group owner objects</dfn>. The
  following are <a>control group owner objects</a>:

  <ul class="brief">
    <li><code>Document</code> object in <a>browsing contexts</a>.</li>

    <li><code>dialog</code> elements that have an <code>open</code>
    attribute specified and that are <a>being rendered</a>.</li>
  </ul>

  Each <a>control group owner object</a> owns one <a>control group</a> (though that group might be
  empty).

  If the <a>DOM anchor</a> of a <a>focusable area</a> is a <a>control group owner
  object</a>, then that <a>focusable area</a> belongs to that <a>control group owner
  object</a>'s <a>control group</a>. Otherwise, the <a>focusable area</a> belongs to its
  <a>DOM anchor</a>'s nearest ancestor <a>control group owner object</a>.

  <div class="example">
    Thus, a viewport always belongs to the <a>control group</a> of the <code>Document</code>
    for which the viewport was created, an <code>input</code> control belongs to the <a>control
    group</a> of its nearest ancestor <code>dialog</code> or <code>Document</code>, and an image
    map's shapes belong to the nearest ancestor <code>dialog</code> or <code>Document</code> of the
    <code>img</code> elements (not the <code>area</code> elements &mdash; this means one
    <code>area</code> element might create multiple shapes in different <a>control groups</a>).
  </div>

  An element is <dfn>expressly inert</dfn> if it is
  <a>inert</a> but it is not a <a>control group owner object</a> and its nearest
  ancestor <a>control group owner object</a> is not <a>inert</a>.

  One <a>focusable area</a> in each non-empty <a>control group</a> is designated the
  <dfn>focused area of the control group</dfn>. Which control is so designated changes over time,
  based on algorithms in this specification. If a <a>control group</a> is empty, it has no <a>focused area</a>.

  Each <a>control group owner object</a> can also act as the <dfn>manager</dfn> of a <dfn>dialog group</dfn>.

  Each <code>dialog</code> element that has an <code>open</code>
  attribute specified and that is <a>being rendered</a> (i.e. that is a <a>control group
  owner object</a>) and is not <a>expressly inert</a>
  belongs to the <a>dialog group</a> whose <a>manager</a> is
  the <code>dialog</code> element's nearest ancestor <a>control group owner object</a>.

  A <code>dialog</code> is <dfn>expressly inert</dfn> if it is
  <a>inert</a> but its nearest ancestor <a>control group owner object</a> is not.

  If no <code>dialog</code> element has a particular <a>control group owner object</a> as
  its nearest ancestor <a>control group owner object</a>, then that <a>control group owner
  object</a> has no <a>dialog group</a>.

  Each <a>dialog group</a> can have a <code>dialog</code> designated as the <dfn>focused
  dialog of the dialog group</dfn>. Which <code>dialog</code> is so designated changes over time,
  based on algorithms in this specification.

  <hr />

  <a>Focusable areas</a> in <a>control groups</a>
  are ordered relative to the <a>tree order</a> of their <a>DOM
  anchors</a>. <a>Focusable areas</a> with the same <a>DOM anchor</a> in a
  <a>control group</a> are ordered relative to their CSS box's relative positions in a pre-order,
  depth-first traversal of the box tree. [[!CSS-2015]]

  Elements in <a>dialog groups</a> are ordered in <a>tree
  order</a>.

  <hr />

  The <dfn>currently focused area of a top-level browsing context</dfn> at any particular time is
  the <a>focusable area</a> or <code>dialog</code> returned by this algorithm:

  <ol>

    <li>Let <var>candidate</var> be the <code>Document</code> of the <a>top-level
    browsing context</a>.</li>

    <li>

    If <var>candidate</var> has a <a>dialog group</a> with a designated
    <a>focused dialog of the dialog group</a>, then let <var>candidate</var> be the
    designated <a>focused dialog of the dialog group</a>, and redo this step.

    Otherwise, if <var>candidate</var> has a non-empty <a>control group</a>, and the
    designated <a>focused area of the control group</a> is a <a>browsing context
    container</a>, then let <var>candidate</var> be the <a>active document</a> of
    that <a>browsing context container</a>'s <a>nested browsing context</a>, and redo
    this step.

    Otherwise, if <var>candidate</var> has a non-empty <a>control group</a>, let
    <var>candidate</var> be the designated <a>focused area of the control
    group</a>.

    </li>

    <li>Return <var>candidate</var>.</li>

  </ol>

  An element that is the <a>DOM anchor</a> of a <a>focusable area</a> is said to
  <dfn>gain focus</dfn> when that <a>focusable area</a> becomes the <a>currently focused area of a
  top-level browsing context</a>. When an element is the <a>DOM anchor</a> of a
  <a>focusable area</a> of the <a>currently focused area of a top-level browsing context</a>, it is
  <dfn>focused</dfn>.

  <div class="impl">
    The <dfn>focus chain</dfn> of a <a>focusable area</a> or <a>control group owner object</a>
    <var>subject</var> is the ordered list constructed as follows:

  <ol>

    <li>Let <var>current object</var> be <var>subject</var>.</li>

    <li>Let <var>output</var> be an empty list.</li>

    <li><i>Loop</i>: Append <var>current object</var> to <var>output</var>.</li>

    <li>

    If <var>current object</var> is an <code>area</code> element's shape, append
    that <code>area</code> element to <var>output</var>.

    Otherwise, if <var>current object</var> is a <a>focusable area</a> whose <a>DOM
    anchor</a> is an element that is not <var>current object</var> itself, append that
    <a>DOM anchor</a> element to <var>output</var>.

    </li>

    <li>

    If <var>current object</var> is a <code>dialog</code> object in a <a>dialog group</a>,
    let <var>current object</var> be that <a>dialog group</a>'s <a>manager</a>, and return to the step labeled <i>loop</i>.

    Otherwise, if <var>current object</var> is a <a>focusable area</a>, let <var>current
    object</var> be that <a>focusable area</a>'s <a>control group</a>'s <a>owner</a>, and return to the step labeled <i>loop</i>.

    Otherwise, if <var>current object</var> is a <code>Document</code> in a <a>nested browsing
    context</a>, let <var>current object</var> be its <a>browsing context container</a>,
    and return to the step labeled <i>loop</i>.

    </li>

    <li>

    Return <var>output</var>.

    <p class="note">
      The chain starts with <var>subject</var> and (if <var>subject</var> is or can be the
      <a>currently focused area of a top-level browsing context</a>) continues up the focus
      hierarchy up to the <code>Document</code> of the <a>top-level browsing context</a>.
    </p>

    </li>

  </ol>

  </div>

<h4 id="the-tabindex-attribute"><dfn>The <code>tabindex</code> attribute</dfn></h4>

  The <dfn><code>tabindex</code></dfn> content attribute allows authors to
  indicate that an element is supposed to be <a>focusable</a>, and
  whether it is supposed to be reachable using <a>sequential focus navigation</a> and, if so,
  what is to be the relative order of the element for the purposes of sequential focus navigation.
  The name "tab index" comes from the common use of the "tab" key to navigate through the focusable
  elements. The term "tabbing" refers to moving forward through the focusable elements that can be
  reached using sequential focus navigation.

  When the attribute is omitted, the user agent applies defaults. (There is no way to make an
  element that is <a>being rendered</a> be not focusable at all without <a>disabling</a> it or making it <a>inert</a>.)

  The <code>tabindex</code> attribute, if specified, must have a value
  that is a <a>valid integer</a>. Positive numbers specify the relative position of the
  element's <a>focusable areas</a> in the <a>sequential focus
  navigation order</a>, and negative numbers indicate that the control is to be unreachable by
  <a>sequential focus navigation</a>.

  <div class="impl">

  Each element can have a <dfn>tabindex focus flag</dfn> set, as defined
  below. This flag is a factor that contributes towards determining whether an element is a
  <a>focusable area</a>, as described in the previous section.

  If the <code>tabindex</code> attribute is specified on an element, it
  must be parsed using the <a>rules for parsing integers</a>. The attribute's values, or lack
  thereof, must be interpreted as follows:

  <dl>

    <dt>If the attribute is omitted or parsing the value returns an error</dt>

    <dd>

    The user agent should follow platform conventions to determine if the element's
    <a>tabindex focus flag</a> is set and, if so, whether the element and any <a>focusable areas</a> that have the element as their <a>DOM anchor</a> can
    be reached using <a>sequential focus navigation</a>, and if so, what their relative
    position in the <a>sequential focus navigation order</a> is to be.

    Modulo platform conventions, it is suggested that for the following elements, the
    <a>tabindex focus flag</a> be set:

    <ul>

      <li><code>a</code> elements that have an <code>href</code>
      attribute</li>

      <li><code>link</code> elements that have an <code>href</code> attribute</li>

      <li><code>button</code> elements</li>

      <li><code>input</code> elements whose <code>type</code> attribute are
      not in the <a>Hidden</a> state</li>

      <li><code>select</code> elements</li>

      <li><code>textarea</code> elements</li>

      <li><code>menuitem</code> elements</li>

      <li>Elements with a <code>draggable</code> attribute set, if that would
      enable the user agent to allow the user to begin a drag operations for those elements without
      the use of a pointing device</li>

      <li><a>Editing hosts</a></li>

      <li><a>Browsing context containers</a></li>

      <li><a>Sorting interface <code>th</code>
      elements</a></li>

    </ul>

    <p class="note">
  One valid reason to ignore the platform conventions and always allow an element
    to be focused (by setting its <a>tabindex focus flag</a>) would be if the user's only
    mechanism for activating an element is through a keyboard action that triggers the focused
    element.
  </p>

    </dd>

    <dt>If the value is a negative integer</dt>

    <dd>

    The user agent must set the element's <a>tabindex focus flag</a>, but should omit the
    element from the <a>sequential focus navigation order</a>.

    <p class="note">
  One valid reason to ignore the requirement that sequential focus navigation not
    allow the author to lead to the element would be if the user's only mechanism for moving the
    focus is sequential focus navigation. For instance, a keyboard-only user would be unable to
    click on a text field with a negative <code>tabindex</code>, so that
    user's user agent would be well justified in allowing the user to tab to the control
    regardless.
  </p>

    </dd>

    <dt>If the value is a zero</dt>

    <dd>

    The user agent must set the element's <a>tabindex focus flag</a>, should allow the
    element and any <a>focusable areas</a> that have the element as their
    <a>DOM anchor</a> to be reached using <a>sequential focus navigation</a>, following
    platform conventions to determine the element's relative position in the <a>sequential focus
    navigation order</a>.

    </dd>

    <dt>If the value is greater than zero</dt>

    <dd>

    The user agent must set the element's <a>tabindex focus flag</a>, should allow the
    element and any <a>focusable areas</a> that have the element as their
    <a>DOM anchor</a> to be reached using sequential focus navigation, and should place the element
    &mdash; referenced as <var>candidate</var> below &mdash; and the aforementioned <a>focusable areas</a> in the <a>sequential focus navigation</a>
    order so that, relative to other <a>focusable areas</a> in the
    <a>sequential focus navigation order</a>, they are:

    <ul>

      <li>before any <a>focusable area</a> whose <a>DOM anchor</a> is an element whose <code>tabindex</code> attribute has been omitted or whose value, when parsed,
      returns an error,</li>

      <li>before any <a>focusable area</a> whose <a>DOM anchor</a> is an element whose <code>tabindex</code> attribute has a value equal to or less than zero,</li>

      <li>after any <a>focusable area</a> whose <a>DOM anchor</a> is an element whose <code>tabindex</code> attribute has a value greater than zero but less than
      the value of the <code>tabindex</code> attribute on <var>candidate</var>,</li>

      <li>after any <a>focusable area</a> whose <a>DOM anchor</a> is an element whose <code>tabindex</code> attribute has a value equal to the value of the <code>tabindex</code> attribute on <var>candidate</var> but that is
      earlier in the document in <a>tree order</a> than <var>candidate</var>,</li>

      <li>before any <a>focusable area</a> whose <a>DOM anchor</a> is an element whose <code>tabindex</code> attribute has a value equal to the value of the <code>tabindex</code> attribute on <var>candidate</var> but that is
      later in the document in <a>tree order</a> than <var>candidate</var>, and</li>

      <li>before any <a>focusable area</a> whose <a>DOM anchor</a> is an element whose <code>tabindex</code> attribute has a value greater than the value of the
      <code>tabindex</code> attribute on <var>candidate</var>.</li>

    </ul>

    </dd>

  </dl>

  An element that has its <a>tabindex focus flag</a> set but does not otherwise have an
  <a>activation behavior</a> defined has an <a>activation behavior</a> that does
  nothing.

  <p class="note">
  This means that an element that is only focusable because of its <code>tabindex</code> attribute will fire a <code>click</code> event in response to a non-mouse activation (e.g. hitting the
  "enter" key while the element is <a>focused</a>).
  </p>

  An element with the <code>tabindex</code> attribute specified is
  <a>interactive content</a>.

  The <dfn><code>tabIndex</code></dfn> IDL attribute must
  <a>reflect</a> the value of the <code>tabindex</code> content
  attribute. Its default value is 0 for elements that are focusable and -1 for elements that
  are not focusable.

  </div>

  <div class="impl">

<h4 id="processing-model"><dfn>Processing model</dfn></h4>

  The <dfn>focusing steps</dfn> for an object <var>new focus target</var> that is
  either a <a>focusable area</a>, or an element that is not a <a>focusable area</a>, or a
  <a>browsing context</a>, are as follows. They can optionally be run with a <i>fallback target</i>.

  <ol>

    <li>

    If <var>new focus target</var> is neither a <code>dialog</code> element that has an
    <code>open</code> attribute specified and that is <a>being
    rendered</a> (i.e. that is a <a>control group owner object</a>), nor a <a>focusable
    area</a>, then run the first matching set of steps from the following list:

    <dl class="switch">

      <dt>If <var>new focus target</var> is an <code>area</code> element with one or more
      shapes that are <a>focusable areas</a></dt>

      <dd>

      Let <var>new focus target</var> be the shape corresponding to the first
      <code>img</code> element in <a>tree order</a> that uses the image map to which the <code>area</code>
      element belongs.

      </dd>

      <dt>If <var>new focus target</var> is an element with one or more scrollable regions
      that are <a>focusable areas</a></dt>

      <dd>

      Let <var>new focus target</var> be the element's first scrollable region,
      according to a pre-order, depth-first traversal of the box tree. [[!CSS-2015]]

      </dd>

      <dt>If <var>new focus target</var> is the <a>root element</a> of its
      <code>Document</code></dt>

      <dd>

      Let <var>new focus target</var> be the <code>Document</code>'s viewport.

      </dd>

      <dt>If <var>new focus target</var> is a <a>browsing context</a></dt>

      <dd>

      Let <var>new focus target</var> be the <a>browsing context</a>'s
      <a>active document</a>.

      </dd>

      <dt>If <var>new focus target</var> is a <a>browsing context container</a></dt>

      <dd>

      Let <var>new focus target</var> be the <a>browsing context container</a>'s <a>nested browsing context</a>'s
      <a>active document</a>.

      </dd>

      <dt>Otherwise</dt>

      <dd>

      If no <i>fallback target</i> was specified, abort the <a>focusing steps</a>.

      Otherwise, let <var>new focus target</var> be the <i>fallback target</i>.

      </dd>

    </dl>

    </li>

    <li>

    If <var>new focus target</var> is a <a>control group owner object</a> that is
    not a <a>focusable area</a>, but does have a <a>dialog group</a>, and that <a>dialog group</a>
    has a designated <a>focused dialog</a>, then
    let <var>new focus target</var> be the <a>focused dialog of the dialog
    group</a>, and redo this step.

    Otherwise, if <var>new focus target</var> is a <a>control group owner
    object</a> that is not a <a>focusable area</a>, and its <a>control group</a> is not empty,
    then designate <var>new focus target</var> as the <a>focused area of the control
    group</a>, and redo this step.

    Otherwise, if <var>new focus target</var> is a <a>browsing context
    container</a>, then let <var>new focus target</var> be the <a>nested browsing
    context</a>'s <a>active document</a>, and redo this step.

    <p class="note">
  A <code>dialog</code> element can be both a <a>control group owner
    object</a> and a <a>focusable area</a>, if it has both an <code>open</code> attribute specified and a <code>tabindex</code> attribute specified and is <a>being
    rendered</a>.
  </p>

    </li>

    <li>If <var>new focus target</var> is a <a>focusable area</a> and its <a>DOM
    anchor</a> is <a>inert</a>, then abort these steps.</li>

    <li>If <var>new focus target</var> is the <a>currently focused area of a
    top-level browsing context</a>, then abort these steps.</li>

    <li>Let <var>old chain</var> be the <a>focus chain</a> of the <a>currently focused area of the
    top-level browsing context</a> in which <var>new focus target</var> finds
    itself.</li>

    <li>Let <var>new chain</var> be the <a>focus chain</a> of <var>new
    focus target</var>.</li>

    <li>Run the <a>focus update steps</a> with <var>old chain</var>, <var>new chain</var>, and <var>new focus target</var> respectively.</li>

  </ol>

  User agents must <a>immediately</a> run the <a>focusing steps</a> for a <a>focusable area</a>,
  <code>dialog</code>, or <a>browsing context</a> <var>candidate</var> whenever the
  user attempts to move the focus to <var>candidate</var>.

  The <dfn>unfocusing steps</dfn> for an object <var>old focus target</var> that is
  either a <a>focusable area</a> or an element that is not a <a>focusable area</a> are as
  follows:

  <ol>

    <li>If <var>old focus target</var> is <a>inert</a>, then abort these
    steps.</li>

    <li>

    If <var>old focus target</var> is an <code>area</code> element and one of its shapes is the
    <a>currently focused area of a top-level browsing context</a>, or, if <var>old focus
    target</var> is an element with one or more scrollable regions, and one of them is the
    <a>currently focused area of a top-level browsing context</a>, then let <var>old focus
    target</var> be that <a>currently focused area of a top-level browsing context</a>.

    </li>

    <li>Let <var>old chain</var> be the <a>focus chain</a> of the <a>currently
    focused area of a top-level browsing context</a>.</li>

    <li>If <var>old focus target</var> is not one of the entries in <var>old
    chain</var>, then abort these steps.</li>

    <li>

    If <var>old focus target</var> is a <code>dialog</code> in a <a>dialog group</a>, and
    the <a>dialog group manager</a> has a non-empty <a>control group</a>, then let
    <var>new focus target</var> be the designated <a>focused area of that focus group</a>.

    Otherwise, if <var>old focus target</var> is a <a>focusable area</a>, then let <var>new
    focus target</var> be the first <a>focusable area</a> of its <a>control group</a>
    (if the <a>control group owner</a> is a <code>Document</code>, this will always be a
    viewport).

    Otherwise, let <var>new focus target</var> be null.

    </li>

    <li>If <var>new focus target</var> is not null, then run the <a>focusing
    steps</a> for <var>new focus target</var>.</li>

  </ol>

  When the <a>currently focused area of a top-level browsing context</a> is somehow
  unfocused without another element being explicitly focused in its stead, the user agent must
  <a>immediately</a> run the <a>unfocusing steps</a> for that object.

  <p class="note">
  The <a>unfocusing steps</a> do not always result in the focus changing, even
  when applied to the <a>currently focused area of a top-level browsing context</a>. For
  example, if the <a>currently focused area of a top-level browsing context</a> is a viewport,
  then it will usually keep its focus regardless until another <a>focusable area</a> is explicitly
  focused with the <a>focusing steps</a>.
  </p>

  <hr />

  When a <a>focusable area</a> is added to an empty <a>control group</a>, it must be designated
  the <a>focused area of the control group</a>.

  When a <a>dialog group</a> is formed, if the <a>dialog group manager</a> has an empty
  <a>control group</a>, the first non-<a>inert</a> <code>dialog</code> in the <a>dialog
  group</a>, if any, or else the first <code>dialog</code> in the <a>dialog group</a> regardless of
  <a>inertness</a>, must be designated the <a>focused dialog of the dialog
  group</a>.

  <dfn>Focus fixup rule one</dfn>: When the designated <a>focused area of a control group</a> is removed from that <a>control group</a> in
  some way (e.g. it stops being a <a>focusable area</a>, it is removed from the DOM, it
  becomes <a>expressly inert</a>, etc), and the <a>control
  group</a> is still not empty: designate the first non-<a>inert</a> <a>focused area</a> in that <a>control group</a> to be the new
  <a>focused area of the control group</a>, if any; if they are all <a>inert</a>, then
  designate the first <a>focused area</a> in that
  <a>control group</a> to be the new <a>focused area of the control group</a> regardless
  of <a>inertness</a>. If such a removal instead results in the <a>control
  group</a> being empty, then there is simply no longer a <a>focused area of the control
  group</a>.

  <p class="example">
  For example, this might happen because an element is removed from its
  <code>Document</code>, or has a <code>hidden</code> attribute added. It might
  also happen to an <code>input</code> element when the element gets <a>disabled</a>.
  </p>

  <dfn>Focus fixup rule two</dfn>: When a <a>dialog group</a> has no designed <a>focused
  dialog of the dialog group</a>, and its <a>dialog group manager</a>'s <a>control
  group</a> changes from being non-empty to being empty, the first non-<a>inert</a>
  <code>dialog</code> in the <a>dialog group</a>, if any, or else the first <code>dialog</code> in
  the <a>dialog group</a> regardless of <a>inertness</a>, must be designated
  the <a>focused dialog of the dialog group</a>.

  <dfn>Focus fixup rule three</dfn>: When the designated <a>focused dialog of a dialog group</a> is removed from that <a>dialog group</a> in
  some way (e.g. it stops <a>being rendered</a>, it loses its <code>open</code> attribute, it becomes <a>expressly inert</a>, etc), and there is still a <a>dialog group</a> (because the
  <code>dialog</code> in question was not the last <code>dialog</code> in that <a>dialog group</a>):
  if the <a>dialog group</a>'s <a>manager</a>'s <a>control
  group</a> is non-empty, let there be no designated <a>focused dialog of the dialog group</a>
  any more; otherwise (in the case that the <a>control group</a> is empty), designate the first
  non-<a>inert</a> <code>dialog</code> in the <a>dialog group</a> to be the <a>focused
  dialog of the dialog group</a>, or, if they are all <a>inert</a>, designate the first
  <code>dialog</code> in the <a>dialog group</a> to be the <a>focused dialog of the dialog
  group</a> regardless of <a>inertness</a>.

  When the <a>currently focused area of a top-level browsing context</a> was a <a>focusable
  area</a> but stops being a <a>focusable area</a>, or when it was a <code>dialog</code> in a
  <a>dialog group</a> and stops being part of that <a>dialog group</a>, or when it
  starts being <a>inert</a>, the user agent must run the following steps:

  <ol>

    <li>Let <var>old focus target</var> be whatever the <a>currently focused area of the top-level browsing
    context</a> was immediately before this algorithm became applicable (e.g. before the element
    was disabled, or the dialog was closed, or whatever caused this algorithm to run).</li>

    <li>Let <var>old chain</var> be the <a>focus chain</a> of the <a>currently focused area of the
    top-level browsing context</a> at the same time.</li>

    <li>Make sure that the changes implied by the focus fixup rules <a>one</a>, <a>two</a>, and <a>three</a> above are applied.</li>

    <li>Let <var>new focus target</var> be the <a>currently focused area of a
    top-level browsing context</a>.</li>

    <li>If <var>old focus target</var> and <var>new focus target</var> are the
    same, abort these steps.</li>

    <li>Let <var>new chain</var> be the <a>focus chain</a> of <var>new
    focus target</var>.</li>

    <li>Run the <a>focus update steps</a> with <var>old chain</var>, <var>new chain</var>, and <var>new focus target</var> respectively.</li>

  </ol>

  <hr />

  The <dfn>focus update steps</dfn>, given an <var>old chain</var>, a <var>new chain</var>, and a <var>new focus target</var> respectively, are as
  follows:

  <ol>

    <li>Unset the <a>sequential focus navigation starting point</a>.</li>

    <li>If the last entry in <var>old chain</var> and the last entry in <var>new chain</var> are the same, pop the last entry from <var>old chain</var>
    and the last entry from <var>new chain</var> and redo this step.</li>

    <li>

    For each entry <var>entry</var> in <var>old chain</var>, in order, run
    these substeps:

    <ol>

      <li>If <var>entry</var> is an <code>input</code>
      element, and the <code>change</code> event <a>applies</a> to the element, and the element does not have a
      defined <a>activation behavior</a>, and the user has changed the element's <a>value</a> or its list of <a>selected files</a> while the control was focused
      without committing that change, then <a>fire a simple event</a> that bubbles named <code>change</code> at the element.

      <li>

      If <var>entry</var> is an element, let <var>blur event target</var> be
      <var>entry</var>.

      If <var>entry</var> is a <code>Document</code> object, let <var>blur
      event target</var> be that <code>Document</code> object's <code>Window</code> object.

      Otherwise, let <var>blur event target</var> be null.

      </li>

      <li>If <var>entry</var> is the last entry in <var>old chain</var>, and
      <var>entry</var> is an <code>Element</code>, and the last entry in <var>new
      chain</var> is also an <code>Element</code>, then let <var>related blur target</var>
      be the last entry in <var>new chain</var>. Otherwise, let <var>related blur
      target</var> be null.</li>

      <li>

      If <var>blur event target</var> is not null, <a>fire a focus event</a>
      named <code>blur</code> at <var>blur event target</var>, with
      <var>related blur target</var> as the related target.

      <p class="note">
  In some cases, e.g. if <var>entry</var> is an <code>area</code>
      element's shape, a scrollable region, or a viewport, no event is fired.
  </p>

      </li>

    </ol>

    </li>

    <li>Apply any relevant platform-specific conventions for focusing <var>new focus
    target</var>. (For example, some platforms select the contents of a text field when that field is
    focused.)</li>

    <li>

    For each entry <var>entry</var> in <var>new chain</var>, in reverse
    order, run these substeps:

    <ol>

      <li>If <var>entry</var> is a <code>dialog</code> element: Let <var>entry</var> be the designated <a>focused dialog of its dialog group</a>.</li>

      <li>

      If <var>entry</var> is a <a>focusable area</a>: Designate <var>entry</var> as the <a>focused area of the control group</a>. If its <a>control
      group</a>'s <a>owner</a> is also a <a>dialog group
      manager</a>, then let there be no designated <a>focused dialog</a> in that <a>dialog group</a>.

      <p class="note">
  It is possible for <var>entry</var> to be both a <code>dialog</code>
      element and a <a>focusable area</a>, in which case it is its own <a>control group
      owner</a>.
  </p>

      </li>

      <li>

      If <var>entry</var> is an element, let <var>focus event target</var> be
      <var>entry</var>.

      If <var>entry</var> is a <code>Document</code> object, let <var>focus
      event target</var> be that <code>Document</code> object's <code>Window</code> object.

      Otherwise, let <var>focus event target</var> be null.

      </li>

      <li>If <var>entry</var> is the last entry in <var>new chain</var>, and
      <var>entry</var> is an <code>Element</code>, and the last entry in <var>old
      chain</var> is also an <code>Element</code>, then let <var>related focus target</var>
      be the last entry in <var>old chain</var>. Otherwise, let <var>related
      focus target</var> be null.</li>

      <li>

      If <var>focus event target</var> is not null, <a>fire a focus event</a>
      named <code>focus</code> at <var>focus event target</var>, with
      <var>related focus target</var> as the related target.

      <p class="note">
  In some cases, e.g. if <var>entry</var> is an <code>area</code>
      element's shape, a scrollable region, or a viewport, no event is fired.
  </p>

      </li>

    </ol>

    </li>

  </ol>

  When a user agent is required to <dfn>fire a focus event</dfn> named <var>e</var> at
  an element <var>t</var> and with a given related target <var>r</var>, the user
  agent must create a <a>trusted</a> <code>FocusEvent</code>
  object, initialize it to have the given name <var>e</var>, to not bubble, to not be
  cancelable, and to have the <code>relatedTarget</code>
  attribute initialized to <var>r</var>, the <code>view</code> attribute initialized to the <code>Window</code> object of the <code>Document</code> object of <var>t</var>, and the <code>detail</code> attribute initialized to 0, and must then <a>dispatch</a> the newly created <code>FocusEvent</code> object
  at the specified target element <var>t</var>.

  <hr />

  When a key event is to be routed in a <a>top-level browsing context</a>, the user agent
  must run the following steps:

  <ol>

    <li>Let <var>target area</var> be the <a>currently focused area of the top-level browsing
    context</a>.</li>

    <li>If <var>target area</var> is a <a>focusable area</a>, let <var>target
    node</var> be <var>target area</var>'s <a>DOM anchor</a>. Otherwise, <var>target area</var> is a <code>dialog</code>; let <var>target node</var> be
    <var>target area</var>.</li>

    <li>

    If <var>target node</var> is a <code>Document</code> that has a <a>body element</a>, then let <var>target node</var> be <a>the body
    element</a> of that <code>Document</code>.

    Otherwise, if <var>target node</var> is a <code>Document</code> that has a
    <a>root element</a>, then let <var>target node</var> be the <a>root
    element</a> of that <code>Document</code>.

    </li>

    <li>

    If <var>target node</var> is not <a>inert</a>, fire the event at <var>target node</var>.

    <p class="note">
  It is possible for the <a>currently focused area of a top-level browsing
    context</a> to be <a>inert</a>, for example if a <a>modal dialog is shown</a>, and then that <code>dialog</code>
    element is made <a>inert</a>. It is likely to be the result of a logic error in the
    application, though.
  </p>

    </li>

    <li>If the event was not canceled, then let <var>target area</var> handle the key
    event. This might include <a>running synthetic
    click activation steps</a> for <var>target node</var>.</li>

  </ol>

  <hr />

  The <dfn>has focus steps</dfn>, given a <code>Document</code> object <var>target</var>, are
  as follows:

  <ol>

    <li>Let <var>candidate</var> be the <code>Document</code> of the <a>top-level browsing
    context</a>.</li>

    <li>If <var>candidate</var> is <var>target</var>, return true and abort these steps.</li>

    <li>

    If <var>candidate</var> has a <a>dialog group</a> with a designated <a>focused
    dialog of the dialog group</a>, then let <var>candidate</var> be the designated
    <a>focused dialog of the dialog group</a>, and redo this step.

    Otherwise, if <var>candidate</var> has a non-empty <a>control group</a>, and the
    designated <a>focused area of the control group</a> is a <a>browsing context
    container</a>, and the <a>active document</a> of that <a>browsing context
    container</a>'s <a>nested browsing context</a> is <var>target</var>, then
    return true and abort these steps.

    Otherwise, if <var>candidate</var> has a non-empty <a>control group</a>, and the
    designated <a>focused area of the control group</a> is a <a>browsing context
    container</a>, then let <var>candidate</var> be the <a>active document</a> of
    that <a>browsing context container</a>'s <a>nested browsing context</a>, and redo
    this step.

    Otherwise, return false and abort these steps.

    </li>

  </ol>

<h4 id="sequential-focus-navigation"><dfn>Sequential focus navigation</dfn></h4>

  Each <a>control group</a> has a <dfn>sequential focus navigation order</dfn>, which orders some
  or all of the <a>focusable areas</a> in the <a>control group</a>
  relative to each other. The order in the <a>sequential focus navigation order</a> does not
  have to be related to the order in the <a>control group</a> itself. If a <a>focusable area</a> is
  omitted from the <a>sequential focus navigation order</a> of its <a>control group</a>, then
  it is unreachable via <a>sequential focus navigation</a>.

  There can also be a <dfn>sequential focus navigation starting point</dfn>. It is initially
  unset. The user agent may set it when the user indicates that it should be moved.

  <p class="example">
  For example, the user agent could set it to the position of the user's click if
  the user clicks on the document contents.
  </p>

  When the user requests that focus move from the <a>currently focused area of a top-level
  browsing context</a> to the next or previous <a>focusable area</a> (e.g. as the default action
  of pressing the <kbd>tab</kbd> key), or when the user requests that focus sequentially move to a
  <a>top-level browsing context</a> in the first place (e.g. from the browser's location bar),
  the user agent must use the following algorithm:

  <ol>

    <li>Let <var>starting point</var> be the <a>currently focused area of a top-level
    browsing context</a>, if the user requested to move focus sequentially from there, or else the
    <a>top-level browsing context</a> itself, if the user instead requested to move focus from
    outside the <a>top-level browsing context</a>.</li>

    <li>If there is a <a>sequential focus navigation starting point</a> defined and it is
    inside <var>starting point</var>, then let <var>starting point</var> be the <a>sequential
    focus navigation starting point</a> instead.</li>

    <li>

    Let <var>direction</var> be <i>forward</i> if the user requested the <em>next</em>
    control, and <i>backward</i> if the user requested the previous control.

    <p class="note">
  Typically, pressing <kbd>tab</kbd> requests the next control, and pressing
    <kbd><kbd>shift</kbd>+<kbd>tab</kbd></kbd> requests the previous control.
  </p>

    </li>

    <li>

    <i>Loop</i>: Let <var>selection mechanism</var> be <i>sequential</i> if the <var>starting
    point</var> is a <a>browsing context</a> or if <var>starting point</var> is in its
    <a>control group</a>'s <a>sequential focus navigation order</a>.

    Otherwise, <var>starting point</var> is not in its <a>control group</a>'s
    <a>sequential focus navigation order</a>; let <var>selection mechanism</var> be
    <i>DOM</i>.

    </li>

    <li>Let <var>candidate</var> be the result of running the <a>sequential navigation search
    algorithm</a> with <var>starting point</var>, <var>direction</var>, and <var>selection
    mechanism</var> as the arguments.</li>

    <li>If <var>candidate</var> is not null, then run the <a>focusing steps</a> for
    <var>candidate</var> and abort these steps.</li>

    <li>Otherwise, unset the <a>sequential focus navigation starting point</a>.</li>

    <li>

    If <var>starting point</var> is the <a>top-level browsing context</a>, or a
    <a>focusable area</a> in the <a>top-level browsing context</a>, the user agent
    should transfer focus to its own controls appropriately (if any), honouring
    <var>direction</var>, and then abort these steps.

    <p class="example">
  For example, if <var>direction</var> is <i>backward</i>, then the last
    focusable control before the browser's rendering area would be the control to focus.
  </p>

    If the user agent has no focusable controls &mdash; a kiosk-mode browser, for instance
    &mdash;
    then the user agent may instead restart these steps with the <var>starting point</var> being the
    <a>top-level browsing context</a> itself.

    </li>

    <li>Otherwise, <var>starting point</var> is a <a>focusable area</a> in a
    <a>nested browsing context</a>. Let <var>starting point</var> be that
    <a>nested browsing context</a>'s <a>browsing context container</a>, and return to the
    step labeled <i>loop</i>.

    </li>

  </ol>

  The <dfn>sequential navigation search algorithm</dfn> consists of the following steps. This
  algorithm takes three arguments: <var>starting point</var>, <var>direction</var>,
  and <var>selection mechanism</var>.

  <ol>

    <li>

    Pick the appropriate cell from the following table, and follow the instructions in that cell.

    The appropriate cell is the one that is from the column whose header describes
    <var>direction</var> and from the first row whose header describes <var>starting point</var> and
    <var>selection mechanism</var>.

    <table>
      <thead>
        <tr>
          <th></th>
          <th><var>direction</var> is <i>forward</i></th>
          <th><var>direction</var> is <i>backward</i></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th><var>starting point</var> is a <a>browsing context</a></th>
          <td>
            Let <var>candidate</var> be the first <a>suitable sequentially focusable area</a> in
            <var>starting point</var>'s <a>active document</a>'s <a>primary control group</a>, if
            any; or else null
          </td>
          <td>
            Let <var>candidate</var> be the last <a>suitable sequentially focusable area</a> in
            <var>starting point</var>'s <a>active document</a>'s <a>primary control group</a>, if
            any; or else null
          </td>
        </tr>
        <tr>
          <th><var>selection mechanism</var> is <i>DOM</i></th>
          <td>
            Let <var>candidate</var> be the first <a>suitable sequentially focusable area</a> in the
            <a>home control group</a> following <var>starting point</var>, if any; or else null
          </td>
          <td>
            Let <var>candidate</var> be the last <a>suitable sequentially focusable area</a> in the
            <a>home control group</a> preceding <var>starting point</var>, if any; or else null
          </td>
        </tr>
        <tr>
          <th><var>selection mechanism</var> is <i>sequential</i></th>
          <td>
            Let <var>candidate</var> be the first <a>suitable sequentially focusable area</a> in the
            <a>home sequential focus navigation order</a> following <var>starting point</var>, if
            any; or else null
          </td>
          <td>
            Let <var>candidate</var> be the last <a>suitable sequentially focusable area</a> in the
            <a>home sequential focus navigation order</a> preceding <var>starting point</var>, if
            any; or else null
          </td>
        </tr>
      </tbody>
    </table>

    A <dfn>suitable sequentially focusable area</dfn> is a <a>focusable area</a> whose <a>DOM
    anchor</a> is not <a>inert</a> and that is in its <a>control group</a>'s <a>sequential
    focus navigation order</a>.

    The <dfn>primary control group</dfn> of a <a>control group owner object</a> <var>X</var> is the <a>control group</a> of <var>X</var> if <var>X</var> has no <a>dialog group</a> or if its <a>dialog group</a> has no
    designated <a>focused dialog of the dialog group</a>, otherwise, it is the <a>primary
    control group</a> of <var>X</var>'s <a>dialog group</a>'s designated
    <a>focused dialog of the dialog group</a>.

    The <dfn>home control group</dfn> is the <a>control group</a> to which <var>starting point</var> belongs.

    The <dfn>home sequential focus navigation order</dfn> is the <a>sequential focus
    navigation order</a> to which <var>starting point</var> belongs.

    <p class="note">
  The <a>home sequential focus navigation order</a> is the <a>home
    control group</a>'s <a>sequential focus navigation order</a>, but is only used when the
    <var>starting point</var> is in that <a>sequential focus navigation order</a>
    (when it's not, <var>selection mechanism</var> will be <i>DOM</i>).
  </p>

    </li>

    <li>

    If <var>candidate</var> is a <a>browsing context container</a>, then let <var>new candidate</var> be the result of running the <a>sequential navigation search
    algorithm</a> with <var>candidate</var>'s <a>nested browsing context</a> as
    the first argument, <var>direction</var> as the second, and <i>sequential</i>
    as the third.

    If <var>new candidate</var> is null, then let <var>starting point</var>
    be <var>candidate</var>, and return to the top of this algorithm. Otherwise, let <var>candidate</var> be <var>new candidate</var>.

    </li>

    <li>Return <var>candidate</var>.</li>

  </ol>

  </div>

<h4 id="focus-management-apis"><dfn>Focus management APIs</dfn></h4>

  <dl class="domintro">

    <dt><var>document</var> . <code>activeElement</code></dt>

    <dd>

    Returns the deepest element in the document through which or to which key events are being
    routed. This is, roughly speaking, the focused element in the document.

    For the purposes of this API, when a <a>child browsing context</a> is focused, its
    <a>browsing context container</a> is <a>focused</a> in the
    <a>parent browsing context</a>. For example, if the user moves the focus to a text field
    in an <code>iframe</code>, the <code>iframe</code> is the element returned by the <code>activeElement</code> API in the <code>iframe</code>'s
    <a>node document</a>.

    </dd>

    <dt><var>document</var> . <code>hasFocus</code>()</dt>

    <dd>

    Returns true if key events are being routed through or to the document; otherwise, returns
    false. Roughly speaking, this corresponds to the document, or a document nested inside this
    one, being focused.

    </dd>

    <dt><var>window</var> . <code>focus</code>()</dt>

    <dd>

    Moves the focus to the window's <a>browsing context</a>, if any.

    </dd>

    <dt><var>element</var> . <code>focus</code>()</dt>

    <dd>

    Moves the focus to the element.

    If the element is a <a>browsing context container</a>, moves the focus to the <a>nested browsing context</a> instead.

    </dd>

    <dt><var>element</var> . <code>blur</code>()</dt>

    <dd>

    Moves the focus to the viewport. Use of this method is discouraged; if you want to focus the
    viewport, call the <code>focus()</code> method on the <code>Document</code>'s root element.

    Do not use this method to hide the focus ring if you find the focus ring unsightly. Instead,
    use a CSS rule to override the 'outline' property, and provide a different way to show what
    element is focused. Be aware that if an alternative focusing style isn't made available, the
    page will be significantly less usable for people who primarily navigate pages using a keyboard,
    or those with reduced vision who use focus outlines to help them navigate the page.

    <div class="example">
      For example, to hide the outline from links and instead use a yellow background to indicate
      focus, you could use:

      <pre highlight="css">:link:focus, :visited:focus { outline: none; background: yellow; color: black; }</pre>
    </div>

    Do not use this method to hide the focus ring. Do not use any
    other method that hides the focus ring from keyboard users, in
    particular do not use a CSS rule to override the 'outline'
    property. Removal of the focus ring leads to serious accessibility
    issues for users who navigate and interact with interactive
    content using the keyboard.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>activeElement</code></dfn> attribute on
  <code>Document</code> objects must return the value returned by the following steps:

  <ol>

    <li>Let <var>candidate</var> be the <code>Document</code> on which the method was
    invoked.</li>

    <li>If <var>candidate</var> has a <a>dialog group</a> with a designated
    <a>focused dialog of the dialog group</a>, then let <var>candidate</var> be the
    designated <a>focused dialog of the dialog group</a>, and redo this step.</li>

    <li>If <var>candidate</var> has a non-empty <a>control group</a>, let <var>candidate</var> be the designated <a>focused area of the control
    group</a>.

    </li>

    <li>If <var>candidate</var> is a <a>focusable area</a>, let <var>candidate</var> be <var>candidate</var>'s <a>DOM anchor</a>.</li>

    <li>

    If <var>candidate</var> is a <code>Document</code> that has a <a>body element</a>, then let <var>candidate</var> be <a>the body
    element</a> of that <code>Document</code>.

    Otherwise, if <var>candidate</var> is a <code>Document</code> that has a <a>root
    element</a>, then let <var>candidate</var> be the <a>root element</a> of that
    <code>Document</code>.

    Otherwise, if <var>candidate</var> is a <code>Document</code>, then let <var>candidate</var> be null.

    </li>

    <li>Return <var>candidate</var>.</li>

  </ol>

  The <dfn><code>hasFocus()</code></dfn> method on the
  <code>Document</code> object, when invoked, must return the result of running the <a>has focus
  steps</a> with the <code>Document</code> object as the argument.

  The <dfn><code>focus()</code></dfn> method on the <code>Window</code>
  object, when invoked, must run the <a>focusing steps</a> with the <code>Window</code>
  object's <a>browsing context</a>. Additionally, if this <a>browsing context</a> is a
  <a>top-level browsing context</a>, user agents are encouraged to trigger some sort of
  notification to indicate to the user that the page is attempting to gain focus.

  The <dfn><code>blur()</code></dfn> method on the <code>Window</code>
  object, when invoked, provides a hint to the user agent that the script believes the user probably
  is not currently interested in the contents of the <a>browsing context</a> of the
  <code>Window</code> object on which the method was invoked, but that the contents might become
  interesting again in the future.

  User agents are encouraged to ignore calls to this <code>blur()</code>
  method entirely.

  <p class="note">
  Historically, the <code>focus()</code> and <code>blur()</code> methods actually affected the system-level focus of the
  system widget (e.g. tab or window) that contained the <a>browsing context</a>, but hostile
  sites widely abuse this behavior to the user's detriment.
  </p>

  The <dfn><code>focus()</code></dfn> method on elements, when invoked, must
  run the following algorithm:

  <ol>

    <li>If the element is marked as <i>locked for focus</i>, then abort these steps.</li>

    <li>Mark the element as <dfn>locked for focus</dfn>.</li>

    <li>Run the <a>focusing steps</a> for the element.</li>

    <li>Unmark the element as <i>locked for focus</i>.</li>

  </ol>

  The <dfn><code>blur()</code></dfn> method, when invoked, should run the
  <a>unfocusing steps</a> for the element on which the method was called. User agents may
  selectively or uniformly ignore calls to this method for usability reasons.

  <p class="example">
  For example, if the <code>blur()</code> method is unwizely
  being used to remove the focus ring for aesthetics reasons, the page would become unusable by
  keyboard users. Ignoring calls to this method would thus allow keyboard users to interact with the
  page.
  </p>

  </div>

<h3 id="assigning-keyboard-shortcuts"><dfn>Assigning keyboard shortcuts</dfn></h3>

<h4 id="assigning-keyboard-shortcuts-introduction"><dfn>Introduction</dfn></h4>

  <em>This section is non-normative.</em>

  Each element that can be activated or focused can be assigned a single key combination to
  activate it, using the <code>accesskey</code> attribute.

  The exact shortcut is determined by the user agent, based on information about the user's
  keyboard, what keyboard shortcuts already exist on the platform, and what other shortcuts have
  been specified on the page, using the information provided in the <code>accesskey</code> attribute as a guide.

  In order to ensure that a relevant keyboard shortcut is available on a wide variety of input
  devices, the author can provide a number of alternatives in the <code>accesskey</code> attribute.

  Each alternative consists of a single character, such as a letter or digit.

  User agents can provide users with a list of the keyboard shortcuts, but authors are encouraged
  to do so also. The <code>accessKeyLabel</code> IDL attribute returns a
  string representing the actual key combination assigned by the user agent.

  <div class="example">
    In this example, an author has provided a button that can be invoked using a shortcut key. To
    support full keyboards, the author has provided "C" as a possible key. To support devices
    equipped only with numeric keypads, the author has provided "1" as another possibly key.

    <pre highlight="html">
      &lt;input type=button value=Collect onclick="collect()" accesskey="C 1" id=c>
    </pre>
  </div>

  <div class="example">
    To tell the user what the shortcut key is, the author has this script here opted to explicitly
    add the key combination to the button's label:

    <pre highlight="javascript">
      function addShortcutKeyLabel(button) {
        if (button.accessKeyLabel != '')
          button.value += ' (' + button.accessKeyLabel + ')';
      }

      addShortcutKeyLabel(document.getElementById('c'));
    </pre>

    Browsers on different platforms will show different labels, even for the same key combination,
    based on the convention prevalent on that platform. For example, if the key combination is the
    Control key, the Shift key, and the letter C, a Windows browser might display
    "<samp>Ctrl+Shift+C</samp>", whereas a Mac browser might display "<samp>^&#x21E7;C</samp>", while
    an Emacs browser might just display "<samp>C-C</samp>". Similarly, if the key combination is the
    Alt key and the Escape key, Windows might use "<samp>Alt+Esc</samp>", Mac might use
    "<samp>&#x2325;&#x238B;</samp>", and an Emacs browser might use "<samp>M-ESC</samp>" or
    "<samp>ESC ESC</samp>".

    In general, therefore, it is unwize to attempt to parse the value returned from the <code>accessKeyLabel</code> IDL attribute.
  </div>

<h4 id="the-accesskey-attribute"><dfn>The <dfn><code>accesskey</code></dfn> attribute</dfn></h4>

  All <a>HTML elements</a> may have the <code>accesskey</code>
  content attribute set. The <code>accesskey</code> attribute's value is used
  by the user agent as a guide for creating a keyboard shortcut that activates or focuses the
  element.

  If specified, the value must be an <a>ordered set of unique space-separated tokens</a>
  that are <a>case-sensitive</a>, each of which must be exactly one Unicode code point in
  length.

  <div class="example">
    In the following example, a variety of links are given with access keys so that keyboard users
    familiar with the site can more quickly navigate to the relevant pages:

    <pre highlight="html">
      &lt;nav>
        &lt;p>
          &lt;a title="Consortium Activities" accesskey="A" href="/Consortium/activities">Activities&lt;/a> |
          &lt;a title="Technical Reports and Recommendations" accesskey="T" href="/TR/">Technical Reports&lt;/a> |
          &lt;a title="Alphabetical Site Index" accesskey="S" href="/Consortium/siteindex">Site Index&lt;/a> |
          &lt;a title="About This Site" accesskey="B" href="/Consortium/">About Consortium&lt;/a> |
          &lt;a title="Contact Consortium" accesskey="C" href="/Consortium/contact">Contact&lt;/a>
        &lt;/p>
      &lt;/nav>
    </pre>
  </div>

  <div class="example">
    In the following example, the search field is given two possible access keys, "s" and "0" (in
    that order). A user agent on a device with a full keyboard might pick <kbd><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd></kbd> as the shortcut key,
    while a user agent on a small device with just a numeric keypad might pick just the plain
    unadorned key <kbd><kbd>0</kbd></kbd>:

    <pre highlight="html">
      &lt;form action="/search">
        &lt;label>Search: &lt;input type="search" name="q" accesskey="s 0">&lt;/label>
        &lt;input type="submit">
      &lt;/form>
    </pre>
  </div>

  <div class="example">
    In the following example, a button has possible access keys described. A script then tries to
    update the button's label to advertise the key combination the user agent selected.

    <pre highlight="html">
      &lt;input type=submit accesskey="N @ 1" value="Compose">
      ...
      &lt;script>
      function labelButton(button) {
        if (button.accessKeyLabel)
          button.value += ' (' + button.accessKeyLabel + ')';
      }
      var inputs = document.getElementsByTagName('input');
      for (var i = 0; i &lt; inputs.length; i += 1) {
        if (inputs[i].type == "submit")
          labelButton(inputs[i]);
      }
      &lt;/script>
    </pre>

    On one user agent, the button's label might become "<samp>Compose (&#x2318;N)</samp>". On
    another, it might become "<samp>Compose (Alt+&#x21E7;+1)</samp>". If the user agent doesn't
    assign a key, it will be just "<samp>Compose</samp>". The exact string depends on what the
    <a>assigned access key</a> is, and on how the user agent represents that key
    combination.
  </div>

  <div class="impl">

<h4 id="processing-model"><dfn>Processing model</dfn></h4>

  An element's <dfn>assigned access key</dfn> is a key combination derived from the element's
  <code>accesskey</code> content attribute. Initially, an element must not
  have an <a>assigned access key</a>.

  Whenever an element's <code>accesskey</code> attribute is set, changed,
  or removed, the user agent must update the element's <a>assigned access key</a> by running
  the following steps:

  <ol>

    <li>If the element has no <code>accesskey</code> attribute, then skip
    to the <i>fallback</i> step below.</li>

    <li>Otherwise, <a>split the attribute's value on
    spaces</a>, and let <var>keys</var> be the resulting tokens.</li>

    <li>

    For each value in <var>keys</var> in turn, in the order the tokens appeared in the
    attribute's value, run the following substeps:

    <ol>

      <li>If the value is not a string exactly one Unicode code point in length, then skip the
      remainder of these steps for this value.</li>

      <li>If the value does not correspond to a key on the system's keyboard, then skip the
      remainder of these steps for this value.</li>

      <li>If the user agent can find a mix of zero or more modifier keys that, combined with the
      key that corresponds to the value given in the attribute, can be used as the access key, then
      the user agent may assign that combination of keys as the element's <a>assigned access
      key</a> and abort these steps.

      </li>

    </ol>

    </li>

    <li><i>Fallback</i>: Optionally, the user agent may assign a key combination of its choosing
    as the element's <a>assigned access key</a> and then abort these steps.</li>

    <li>If this step is reached, the element has no <a>assigned access key</a>.</li>

  </ol>

  Once a user agent has selected and assigned an access key for an element, the user agent should
  not change the element's <a>assigned access key</a> unless the <code>accesskey</code> content attribute is changed or the element is moved to
  another <code>Document</code>.

  When the user presses the key combination corresponding to the <a>assigned access key</a>
  for an element, if the element <a>defines a command</a>, the
  command's <a>Hidden State</a> facet is false (visible),
  the command's <a>Disabled State</a> facet is also false
  (enabled), the element is <a>in a <code>Document</code></a> that has an associated
  <a>browsing context</a>, and neither the element nor any of its ancestors has a <code>hidden</code> attribute specified, then the user agent must trigger the <a>Action</a> of the command.

  <p class="note">
  User agents <a>might expose</a> elements that have
  an <code>accesskey</code> attribute in other ways as well, e.g. in a menu
  displayed in response to a specific key combination.
  </p>

  <hr />

  The <dfn><code>accessKey</code></dfn> IDL attribute must
  <a>reflect</a> the <code>accesskey</code> content attribute.

  The <dfn><code>accessKeyLabel</code></dfn> IDL attribute must return
  a string that represents the element's <a>assigned access key</a>, if any. If the element
  does not have one, then the IDL attribute must return the empty string.

  </div>

<h3 id="editing"><dfn>Editing</dfn></h3>

<h4 id="making-document-regions-editable-the-contenteditable-content-attribute"><dfn>Making document regions editable: The <code>contenteditable</code> content attribute</dfn></h4>

  <pre class="idl" data-highlight="webidl">
    [NoInterfaceObject]
    interface <dfn>ElementContentEditable</dfn> {
      attribute DOMString <a>contentEditable</a>;
      readonly attribute boolean <a>isContentEditable</a>;
    };
  </pre>

  The <dfn><code>contenteditable</code></dfn> content attribute is an
  <a>enumerated attribute</a> whose keywords are the empty string, <code>true</code>,
  and <code>false</code>. The empty string and the <code>true</code> keyword map
  to the <i>true</i> state. The <code>false</code> keyword maps to the <i>false</i> state.
  In addition, there is a third state, the <i>inherit</i> state, which is the <i>missing value default</i> (and the <i>invalid value default</i>).

  The <i>true</i> state indicates that the element is editable. The <i>inherit</i> state
  indicates that the element is editable if its parent is. The <i>false</i> state indicates that the
  element is not editable.

  <dl class="domintro">

    <dt><var>element</var> . <code>contentEditable</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns "<code>true</code>", "<code>false</code>", or "<code>inherit</code>", based on the state of the <code>contenteditable</code> attribute.

    Can be set, to change that state.

    Throws a <code>SyntaxError</code> exception if the new value isn't one of those strings.

    </dd>

    <dt><var>element</var> . <code>isContentEditable</code></dt>

    <dd>

    Returns true if the element is editable; otherwise, returns false.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>contentEditable</code></dfn> IDL attribute, on
  getting, must return the string "<code>true</code>" if the content attribute is set to
  the true state, "<code>false</code>" if the content attribute is set to the false state,
  and "<code>inherit</code>" otherwise. On setting, if the new value is an <a>ASCII
  case-insensitive</a> match for the string "<code>inherit</code>" then the content
  attribute must be removed, if the new value is an <a>ASCII case-insensitive</a> match for
  the string "<code>true</code>" then the content attribute must be set to the string
  "<code>true</code>", if the new value is an <a>ASCII case-insensitive</a> match for
  the string "<code>false</code>" then the content attribute must be set to the string
  "<code>false</code>", and otherwise the attribute setter must throw a
  <code>SyntaxError</code> exception.

  The <dfn><code>isContentEditable</code></dfn> IDL attribute, on
  getting, must return true if the element is either an <a>editing host</a> or
  <a>editable</a>, and false otherwise.

  </div>

<h4 id="making-entire-documents-editable-the-designmode-idl-attribute"><dfn>Making entire documents editable: The <code>designMode</code> IDL attribute</dfn></h4>

  <div class="impl">

  Documents have a <dfn
  ><code>designMode</code></dfn>, which can be either enabled or
  disabled.

  </div>

  <dl class="domintro">

    <dt><var>document</var> . <code>designMode</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns "<code>on</code>" if the document is editable, and "<code>off</code>" if it isn't.

    Can be set, to change the document's current state. This focuses the document and resets the
    selection in that document.

    </dd>

  </dl>

  <div class="impl">

  The <code>designMode</code> IDL attribute on the
  <code>Document</code> object takes two values, "<code>on</code>" and "<code>off</code>". On setting, the new value must be compared in an <a>ASCII
  case-insensitive</a> manner to these two values; if it matches the "<code>on</code>"
  value, then <code>designMode</code> must be enabled, and if it
  matches the "<code>off</code>" value, then <code>designMode</code> must be disabled. Other values must be
  ignored.

  On getting, if <code>designMode</code> is enabled, the IDL
  attribute must return the value "<code>on</code>"; otherwise it is disabled, and the
  attribute must return the value "<code>off</code>".

  The last state set must persist until the document is destroyed or the state is changed.
  Initially, documents must have their <code>designMode</code>
  disabled.

  When the <code>designMode</code> changes from being disabled to
  being enabled, the user agent must <a>immediately</a> reset the document's <a>active range</a>'s
  start and end boundary points to be at the start of the <code>Document</code> and then run the
  <a>focusing steps</a> for the root element of the <code>Document</code>, if any.

  </div>

<h4 id="best-practices-for-in-page-editors"><dfn>Best practices for in-page editors</dfn></h4>

  Authors are encouraged to set the 'white-space' property on <a>editing
  hosts</a> and on markup that was originally created through these editing mechanisms to the
  value 'pre-wrap'. Default HTML whitespace handling is not well suited to WYSIWYG editing, and line
  wrapping will not work correctly in some corner cases if 'white-space' is left at its default
  value.

  <div class="example">
    As an example of problems that occur if the default 'normal' value is used instead, consider
    the case of the user typing "<kbd>yellow&#x2423;&#x2423;ball</kbd>", with two spaces (here
    represented by "&#x2423;") between the words. With the editing rules in place for the default
    value of 'white-space' ('normal'), the resulting markup will either consist of
    "<samp>yellow&amp;nbsp;&nbsp;ball</samp>" or "<samp>yellow&nbsp;&amp;nbsp;ball</samp>"; i.e.,
    there will be a non-breaking space between the two words in addition to the regular space. This
    is necessary because the 'normal' value for 'white-space' requires adjacent regular spaces to be
    collapsed together.

    In the former case, "<samp>yellow&#x237D;</samp>" might wrap to the next line ("&#x237D;"
    being used here to represent a non-breaking space) even though "<samp>yellow</samp>" alone might
    fit at the end of the line; in the latter case, "<samp>&#x237D;ball</samp>", if wrapped to the
    start of the line, would have visible indentation from the non-breaking space.

    When 'white-space' is set to 'pre-wrap', however, the editing rules will instead simply put
    two regular spaces between the words, and should the two words be split at the end of a line, the
    spaces would be neatly removed from the rendering.
  </div>

<h4 id="editing-apis"><dfn>Editing APIs</dfn></h4>

  The definition of the terms <dfn>active range</dfn>, <dfn>editing host</dfn>, and
  <dfn>editable</dfn>, the user interface requirements of elements that are <a>editing hosts</a> or <a>editable</a>, the

  <dfn><code>execCommand()</code></dfn>,
  <dfn><code>queryCommandEnabled()</code></dfn>,
  <dfn><code>queryCommandIndeterm()</code></dfn>,
  <dfn><code>queryCommandState()</code></dfn>,
  <dfn><code>queryCommandSupported()</code></dfn>, and
  <dfn><code>queryCommandValue()</code></dfn>

  methods, text selections, and the <dfn>delete the selection</dfn> algorithm are defined in the
  HTML Editing APIs specification. The interaction of editing and the undo/redo features in user
  agents is defined by the UndoManager and DOM Transaction specification. [[!EDITING]] [[!UNDO]]

<h4 id="spelling-and-grammar-checking"><dfn>Spelling and grammar checking</dfn></h4>

  <div class="impl">

  User agents can support the checking of spelling and grammar of editable text, either in form
  controls (such as the value of <code>textarea</code> elements), or in elements in an <a>editing
  host</a> (e.g. using <code>contenteditable</code>).

  For each element, user agents must establish a <dfn>default
  behavior</dfn>, either through defaults or through preferences expressed by the user. There are
  three possible default behaviors for each element:

  <dl>

    <dt><dfn>true-by-default</dfn>

    <dd>The element will be checked for spelling and grammar if its contents are editable.

    <dt><dfn>false-by-default</dfn>

    <dd>The element will never be checked for spelling and grammar.

    <dt><dfn>inherit-by-default</dfn>

    <dd>The element's default behavior is the same as its parent element's. Elements that have no
    parent element cannot have this as their default behavior.

  </dl>

  <hr />

  </div>

  The <dfn><code>spellcheck</code></dfn> attribute is an <a>enumerated
  attribute</a> whose keywords are the empty string, <code>true</code> and <code>false</code>. The empty string and the <code>true</code> keyword map to the
  <i>true</i> state. The <code>false</code> keyword maps to the <i>false</i> state. In
  addition, there is a third state, the <i>default</i> state, which is the <i>missing value default</i> (and the <i>invalid value default</i>).

  <p class="note">
  The <i>true</i> state indicates that the element is to have its spelling and
  grammar checked. The <i>default</i> state indicates that the element is to act according to a
  default behavior, possibly based on the parent element's own <code>spellcheck</code> state, as defined below. The <i>false</i> state
  indicates that the element is not to be checked.
  </p>

  <div class="impl">

  <hr />

  </div>

  <dl class="domintro">

    <dt><var>element</var> . <code>spellcheck</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns true if the element is to have its spelling and grammar checked; otherwise, returns
    false.

    Can be set, to override the default and set the <code>spellcheck</code> content attribute.

    </dd>

    <dt><var>element</var> . <code>forceSpellCheck</code>()</dt>

    <dd>

    Forces the user agent to report spelling and grammar errors on the element (if checking is
    enabled), even if the user has never focused the element. (If the method is not invoked, user
    agents can hide errors in text that wasn't just entered by the user.)

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>spellcheck</code></dfn> IDL attribute, on getting, must
  return true if the element's <code>spellcheck</code> content attribute is
  in the <i>true</i> state, or if the element's <code>spellcheck</code>
  content attribute is in the <i>default</i> state and the element's <a>default behavior</a> is <a>true-by-default</a>, or if the element's <code>spellcheck</code> content attribute is in the <i>default</i> state and the
  element's <a>default behavior</a> is <a>inherit-by-default</a> and the element's parent
  element's <code>spellcheck</code> IDL attribute would return true;
  otherwise, if none of those conditions applies, then the attribute must instead return false.

  <p class="note">
  The <code>spellcheck</code> IDL attribute is not affected
  by user preferences that override the <code>spellcheck</code> content
  attribute, and therefore might not reflect the actual spellchecking state.
  </p>

  On setting, if the new value is true, then the element's <code>spellcheck</code> content attribute must be set to the literal string
  "<code>true</code>", otherwise it must be set to the literal string "<code>false</code>".

  <hr />

  User agents must only consider the following pieces of text as checkable for the purposes of
  this feature:

  <ul>

    <li>The <a>value</a> of <code>input</code> elements whose <code>type</code> attributes are in the <a>Text</a>, <a>Search</a>,
    <a>URL</a>, or <a>E-mail</a> states and that are <i>mutable</i> (i.e. that do not have the <code>readonly</code> attribute specified and that are not <a>disabled</a>).</li>

    <li>The <a>value</a> of <code>textarea</code> elements that do not
    have a <code>readonly</code> attribute and that are not <a>disabled</a>.</li>

    <li>Text in <code>Text</code> nodes that are children of <a>editing
    hosts</a> or <a>editable</a> elements.</li>

    <li>Text in attributes of <a>editable</a> elements.</li>

  </ul>

  For text that is part of a <code>Text</code> node, the element with which the text is
  associated is the element that is the immediate parent of the first character of the word,
  sentence, or other piece of text. For text in attributes, it is the attribute's element. For the
  values of <code>input</code> and <code>textarea</code> elements, it is the element itself.

  To determine if a word, sentence, or other piece of text in an applicable element (as defined
  above) is to have spelling- and grammar-checking enabled, the UA must use the following
  algorithm:

  <ol>

    <li>If the user has disabled the checking for this text, then the checking is disabled.</li>

    <li>Otherwise, if the user has forced the checking for this text to always be enabled, then the
    checking is enabled.</li>

    <li>Otherwise, if the element with which the text is associated has a <code>spellcheck</code> content attribute, then: if that attribute is in the
    <i>true</i> state, then checking is enabled; otherwise, if that attribute is in the <i>false</i>
    state, then checking is disabled.</li>

    <li>Otherwise, if there is an ancestor element with a <code>spellcheck</code> content attribute that is not in the <i>default</i>
    state, then: if the nearest such ancestor's <code>spellcheck</code>
    content attribute is in the <i>true</i> state, then checking is enabled; otherwise, checking is
    disabled.</li>

    <li>Otherwise, if the element's <a>default behavior</a>
    is <a>true-by-default</a>, then checking is
    enabled.</li>

    <li>Otherwise, if the element's <a>default behavior</a>
    is <a>false-by-default</a>, then checking is
    disabled.</li>

    <li>Otherwise, if the element's parent element has <em>its</em> checking enabled, then checking
    is enabled.</li>

    <li>Otherwise, checking is disabled.</li>

  </ol>

  If the checking is enabled for a word/sentence/text, the user agent should indicate spelling
  and grammar errors in that text. User agents should take into account the other semantics given in
  the document when suggesting spelling and grammar corrections. User agents may use the language of
  the element to determine what spelling and grammar rules to use, or may use the user's preferred
  language settings. UAs should use <code>input</code> element attributes such as <code>pattern</code> to ensure that the resulting value is valid, where
  possible.

  If checking is disabled, the user agent should not indicate spelling or grammar errors for that
  text.

  Even when checking is enabled, user agents may opt to not report spelling or grammar errors in
  text that the user agent deems the user has no interest in having checked (e.g. text that was
  already present when the page was loaded, or that the user did not type, or text in controls that
  the user has not focused, or in parts of e-mail addresses that the user agent is not confident
  were misspelt). The <dfn><code>forceSpellCheck()</code></dfn> method,
  when invoked on an element, must override this behavior, forcing the user agent to consider all
  spelling and grammar errors in text in that element for which checking is enabled to be of
  interest to the user.

  <div class="example">
    The element with ID "a" in the following example would be the one used to determine if the
    word "Hello" is checked for spelling errors. In this example, it would not be.

    <pre highlight="html">
  &lt;div contenteditable="true">
  &lt;span spellcheck="false">Hell&lt;/span>&lt;em>o!&lt;/em>
  &lt;/div>
  </pre>

    The element with ID "b" in the following example would have checking enabled (the leading
    space character in the attribute's value on the <code>input</code> element causes the attribute
    to be ignored, so the ancestor's value is used instead, regardless of the default).

    <pre class="bad">&lt;p spellcheck="true">
  &lt;label>Name: &lt;input spellcheck=" false">&lt;/label>
  &lt;/p></pre>
  </div>

  </div>

  <p class="note">
  This specification does not define the user interface for spelling and grammar
  checkers. A user agent could offer on-demand checking, could perform continuous checking while the
  checking is enabled, or could use other interfaces.
  </p>

<h3 id="drag-and-drop"><dfn>Drag and drop</dfn></h3>

  This section defines an event-based drag-and-drop mechanism.

  This specification does not define exactly what a <em>drag-and-drop operation</em> actually
  is.

  On a visual medium with a pointing device, a drag operation could be the default action of a
  <code>mousedown</code> event that is followed by a series of <code>mousemove</code> events, and the drop could be triggered by the mouse
  being released.

  When using an input modality other than a pointing device, users would probably have to
  explicitly indicate their intention to perform a drag-and-drop operation, stating what they wish
  to drag and where they wish to drop it, respectively.

  <div class="impl">

  However it is implemented, drag-and-drop operations must have a starting point (e.g. where the
  mouse was clicked, or the start of the selection or element that was selected for the drag), may
  have any number of intermediate steps (elements that the mouse moves over during a drag, or
  elements that the user picks as possible drop points as he cycles through possibilities), and must
  either have an end point (the element above which the mouse button was released, or the element
  that was finally selected), or be canceled. The end point must be the last element selected as a
  possible drop point before the drop occurs (so if the operation is not canceled, there must be at
  least one element in the middle step).

  </div>

<h4 id="drag-and-drop-introduction"><dfn>Introduction</dfn></h4>

  <em>This section is non-normative.</em>

  To make an element draggable is simple: give the element a <code>draggable</code> attribute, and set an event listener for <code>dragstart</code> that stores the data being dragged.

  The event handler typically needs to check that it's not a text selection that is being
  dragged, and then needs to store data into the <code>DataTransfer</code> object and set the
  allowed effects (copy, move, link, or some combination).

  For example:

  <pre highlight="html">
  &lt;p>What fruits do you like?&lt;/p>
  &lt;ol ondragstart="dragStartHandler(event)">
  &lt;li draggable="true">Apples&lt;/li>
  &lt;li draggable="true">Oranges&lt;/li>
  &lt;li draggable="true">Pears&lt;/li>
  &lt;/ol>
  &lt;script>
  var internalDNDType = 'text/x-example'; // set this to something specific to your site
  function dragStartHandler(event) {
    if (event.target instanceof HTMLLIElement) {
      // use the element's>
  </pre>

  <hr />

  To accept a drop, the drop target has to have a <code>dropzone</code>
  attribute and listen to the <code>drop</code> event.

  The value of the <code>dropzone</code> attribute specifies what kind of
  data to accept (e.g. "<code>string:text/plain</code>" to accept any text strings, or
  "<code>file:image/png</code>" to accept a PNG image file) and what kind of feedback to
  give (e.g. "<code>move</code>" to indicate that the data will be moved).

  <p class="note">
  Instead of using the <code>dropzone</code> attribute, a drop
  target can handle the <code>dragenter</code> event (to report whether or
  not the drop target is to accept the drop) and the <code>dragover</code>
  event (to specify what feedback is to be shown to the user).
  </p>

  The <code>drop</code> event allows the actual drop to be performed. This
  event needs to be canceled, so that the <code>dropEffect</code> attribute's value can be used by the source
  (otherwise it's reset).

  For example:

  <pre highlight="html">
    &lt;p>Drop your favorite fruits below:&lt;/p>
    &lt;ol dropzone="move string:text/x-example" ondrop="dropHandler(event)">
    &lt;!-- don't forget to change the "text/x-example" type to something
    specific to your site -->
    &lt;/ol>
    &lt;script>
    var internalDNDType = 'text/x-example'; // set this to something specific to your site
    function dropHandler(event) {
      var li = document.createElement('li');
      var data = event.dataTransfer.getData(internalDNDType);
      if (data == 'fruit-apple') {
        li.textContent = 'Apples';
      } else if (data == 'fruit-orange') {
        li.textContent = 'Oranges';
      } else if (data == 'fruit-pear') {
        li.textContent = 'Pears';
      } else {
        li.textContent = 'Unknown Fruit';
      }
      event.target.appendChild(li);
    }
    &lt;/script>
  </pre>

  <hr />

  To remove the original element (the one that was dragged) from the display, the <code>dragend</code> event can be used.

  For our example here, that means updating the original markup to handle that event:

  <pre highlight="html">
    &lt;p>What fruits do you like?&lt;/p>
    &lt;ol ondragstart="dragStartHandler(event)" ondragend="dragEndHandler(event)">
    <em>...as before...</em>
    &lt;/ol>
    &lt;script>
    function dragStartHandler(event) {
      // <em>...as before...</em>
    }
    function dragEndHandler(event) {
      if (event.dataTransfer.dropEffect == 'move') {
        // remove the dragged element
        event.target.parentNode.removeChild(event.target);
      }
    }
    &lt;/script>
  </pre>

<h4 id="the-drag-data-store"><dfn>The drag data store</dfn></h4>

  The data that underlies a drag-and-drop operation, known as the <dfn>drag data store</dfn>,
  consists of the following information:

  <ul>

    <li>A <dfn>drag data store item list</dfn>, which is a list of items representing the dragged
    data, each consisting of the following information:

    <dl>

      <dt><dfn>The drag data item kind</dfn></dt>

      <dd>

      The kind of data:

      <dl>

        <dt><i>Plain Unicode string</i></dt>
        <dd>
        Text.
        </dd>

        <dt><i>File</i></dt>
        <dd>
        Binary data with a file name.
        </dd>

      </dl>

      </dd>

      <dt><dfn>The drag data item type string</dfn></dt>

      <dd>

      A Unicode string giving the type or format of the data, generally given by a <a>MIME
      type</a>. Some values that are not <a>MIME types</a> are
      special-cased for legacy reasons. The API does not enforce the use of <a>MIME types</a>; other values can be used as well. In all cases, however, the values
      are all <a>converted to ASCII lowercase</a> by the API.

      <p class="note">
  Strings that contain <a>space characters</a>
      cannot be used with the <code>dropzone</code> attribute, so authors are
      encouraged to use only <a>MIME types</a> or custom strings (without
      spaces).
  </p>

      There is a limit of one <i>Plain Unicode string</i> item per <a>item type string</a>.

      </dd>

      <dt>The actual data</dt>

      <dd>A Unicode or binary string, in some cases with a file name (itself a Unicode string),
      as per <a>the drag data item kind</a>.</dd>

    </dl>

    The <a>drag data store item list</a> is ordered in the order that the items were added
    to the list; most recently added last.

    </li>

    <li>

    The following information, used to generate the UI feedback during the drag:

    <ul>

      <li>User-agent-defined default feedback information, known as the <dfn>drag data store default
      feedback</dfn>.</li>

      <li>Optionally, a bitmap image and the coordinate of a point within that image, known as the
      <dfn>drag data store bitmap</dfn> and <dfn>drag data store hot spot coordinate</dfn>.</li>

    </ul>

    </li>

    <li>

    A <dfn>drag data store mode</dfn>, which is one of the following:

    <dl>

      <dt><dfn>Read/write mode</dfn></dt>
      <dd>

      For the <code>dragstart</code> event. New data can be added to the
      <a>drag data store</a>.

      </dd>

      <dt><dfn>Read-only mode</dfn></dt>
      <dd>

      For the <code>drop</code> event. The list of items representing dragged
      data can be read, including the data. No new data can be added.

      </dd>

      <dt><dfn>Protected mode</dfn></dt>
      <dd>

      For all other events. The formats and kinds in the <a>drag data store</a> list of
      items representing dragged data can be enumerated, but the data itself is unavailable and no
      new data can be added.

      </dd>

    </dl>

    </li>

    <li>

    A <dfn>drag data store allowed effects state</dfn>, which is a string.

    </li>

  </ul>

  When a <a>drag data store</a> is <dfn>created</dfn>, it
  must be initialized such that its <a>drag data store item list</a> is empty, it has no
  <a>drag data store default feedback</a>, it has no <a>drag data store bitmap</a> and
  <a>drag data store hot spot coordinate</a>, its <a>drag data store mode</a> is <a>protected mode</a>, and its <a>drag data store allowed effects
  state</a> is the string "<code>uninitialized</code>".

<h4 id="the-datatransfer-interface"><dfn>The <code>DataTransfer</code> interface</dfn></h4>

  <code>DataTransfer</code> objects are used to expose the <a>drag data store</a> that
  underlies a drag-and-drop operation.

  <pre class="idl" data-highlight="webidl">
    interface <dfn>DataTransfer</dfn> {
      attribute DOMString <a>dropEffect</a>;
      attribute DOMString <a>effectAllowed</a>;

      [SameObject] readonly attribute <a>DataTransferItemList</a> <a>items</a>;

      void <a>setDragImage</a>(Element image, long x, long y);

      /* old interface */
      [SameObject] readonly attribute DOMString[] <a>types</a>;
      DOMString <a>getData</a>(DOMString format);
      void <a>setData</a>(DOMString format, DOMString data);
      void <a>clearData</a>(optional DOMString format);
      [SameObject] readonly attribute <a>FileList</a> <a>files</a>;
    };
  </pre>

  <dl class="domintro">

    <dt><var>dataTransfer</var> . <code>dropEffect</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the kind of operation that is currently selected. If the kind of operation isn't one
    of those that is allowed by the <code>effectAllowed</code> attribute, then the operation will
    fail.

    Can be set, to change the selected operation.

    The possible values are "<code>none</code>", "<code>copy</code>", "<code>link</code>", and "<code>move</code>".

    </dd>

    <dt><var>dataTransfer</var> . <code>effectAllowed</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the kinds of operations that are to be allowed.

    Can be set (during the <code>dragstart</code> event), to change
    the allowed operations.

    The possible values are "<code>none</code>",
    "<code>copy</code>", "<code>copyLink</code>", "<code>copyMove</code>", "<code>link</code>", "<code>linkMove</code>", "<code>move</code>", "<code>all</code>", and "<code>uninitialized</code>",

    </dd>

    <dt><var>dataTransfer</var> . <code>items</code></dt>

    <dd>

    Returns a <code>DataTransferItemList</code> object, with the drag data.

    </dd>

    <dt><var>dataTransfer</var> . <code>setDragImage</code>(<var>element</var>, <var>x</var>, <var>y</var>)</dt>

    <dd>

    Uses the given element to update the drag feedback, replacing any previously specified
    feedback.

    </dd>

    <dt><var>dataTransfer</var> . <code>types</code></dt>

    <dd>

    Returns an array listing the formats that were set in the <code>dragstart</code> event. In addition, if any files are being dragged,
    then one of the types will be the string "<code>Files</code>".

    </dd>

    <dt><var>data</var> = <var>dataTransfer</var> . <code>getData</code>(<var>format</var>)</dt>

    <dd>

    Returns the specified data. If there is no such data, returns the empty string.

    </dd>

    <dt><var>dataTransfer</var> . <code>setData</code>(<var>format</var>, <var>data</var>)</dt>

    <dd>

    Adds the specified data.

    </dd>

    <dt><var>dataTransfer</var> . <code>clearData</code>( [ <var>format</var> ] )</dt>

    <dd>

    Removes the data of the specified formats. Removes all data if the argument is omitted.

    </dd>

    <dt><var>dataTransfer</var> . <code>files</code></dt>

    <dd>

    Returns a <code>FileList</code> of the files being dragged, if any.

    </dd>

  </dl>

  <code>DataTransfer</code> objects are used during the <a>drag-and-drop
  events</a>, and are only valid while those events are being fired.

  <div class="impl">

  A <code>DataTransfer</code> object is associated with a <a>drag data store</a> while it
  is valid.

  The <dfn><code>dropEffect</code></dfn> attribute controls
  the drag-and-drop feedback that the user is given during a drag-and-drop operation. When the
  <code>DataTransfer</code> object is created, the <code>dropEffect</code> attribute is set to a string value. On
  getting, it must return its current value. On setting, if the new value is one of "<dfn><code>none</code></dfn>", "<dfn><code>copy</code></dfn>", "<dfn><code>link</code></dfn>", or "<dfn><code>move</code></dfn>", then the attribute's current value must be
  set to the new value. Other values must be ignored.

  The <dfn><code>effectAllowed</code></dfn> attribute is
  used in the drag-and-drop processing model to initialize the <code>dropEffect</code> attribute during the <code>dragenter</code> and <code>dragover</code> events. When the <code>DataTransfer</code> object is
  created, the <code>effectAllowed</code> attribute is set
  to a string value. On getting, it must return its current value. On setting, if <a>drag data
  store</a>'s <a>mode</a> is the <a>read/write mode</a> and the new value is one of "<dfn><code>none</code></dfn>", "<dfn><code>copy</code></dfn>", "<dfn><code>copyLink</code></dfn>", "<dfn><code>copyMove</code></dfn>", "<dfn><code>link</code></dfn>", "<dfn><code>linkMove</code></dfn>", "<dfn><code>move</code></dfn>", "<dfn><code>all</code></dfn>", or "<dfn><code>uninitialized</code></dfn>", then the attribute's
  current value must be set to the new value. Otherwise it must be left unchanged.

  The <dfn><code>items</code></dfn> attribute must return a
  <code>DataTransferItemList</code> object associated with the <code>DataTransfer</code> object.

  The <dfn><code>setDragImage(<var>element</var>,
  <var>x</var>, <var>y</var>)</code></dfn> method must run the following steps:

  <ol>

    <li>If the <code>DataTransfer</code> object is no longer associated with a <a>drag data
    store</a>, abort these steps. Nothing happens.</li>

    <li>If the <a>drag data store</a>'s <a>mode</a> is
    not the <a>read/write mode</a>, abort these steps. Nothing
    happens.</li>

    <li>If the <var>element</var> argument is an <code>img</code> element, then set the <a>drag
    data store bitmap</a> to the element's image (at its
    <a>intrinsic size</a>); otherwise, set the
    <a>drag data store bitmap</a> to an image generated from the given element (the exact
    mechanism for doing so is not currently specified).</li>

    <li>Set the <a>drag data store hot spot coordinate</a> to the given <var>x</var>,
    <var>y</var> coordinate.</li>

  </ol>

  The <dfn><code>types</code></dfn> attribute must return a
  <a>live</a> <a>read only</a> array giving the strings
  that the following steps would produce.

  <ol>

    <li>Start with an empty list <var>L</var>.</li>

    <li>If the <code>DataTransfer</code> object is no longer associated with a <a>drag data
    store</a>, the array is empty. Abort these steps; return the empty list <var>L</var>.</li>

    <li>For each item in the <a>drag data store item list</a>
    whose <a>kind</a> is <i>Plain Unicode string</i>, add an
    entry to the list <var>L</var> consisting of the item's <a>type string</a>.</li>

    <li>If there are any items in the <a>drag data store item list</a> whose <a>kind</a> is <i>File</i>, then add an entry to the list
    <var>L</var> consisting of the string "<code>Files</code>". (This value can be
    distinguished from the other values because it is not lowercase.)</li>

    <li>The strings produced by these steps are those in the list <var>L</var>.</li>

  </ol>

  The <dfn><code>getData(<var>format</var>)</code></dfn> method
  must run the following steps:

  <ol>

    <li>If the <code>DataTransfer</code> object is no longer associated with a <a>drag data
    store</a>, return the empty string and abort these steps.</li>

    <li>If the <a>drag data store</a>'s <a>mode</a> is
    the <a>protected mode</a>, return the empty string and abort these
    steps.</li>

    <li>Let <var>format</var> be the first argument, <a>converted to ASCII
    lowercase</a>.</li>

    <li>Let <var>convert-to-URL</var> be false.</li>

    <li>If <var>format</var> equals "<code>text</code>", change it to "<code>text/plain</code>".</li>

    <li>If <var>format</var> equals "<code>url</code>", change it to "<code>text/uri-list</code>" and set <var>convert-to-URL</var> to true.</li>

    <li>If there is no item in the <a>drag data store item list</a> whose <a>kind</a> is <i>Plain Unicode string</i> and whose <a>type string</a> is equal to <var>format</var>, return the empty string
    and abort these steps.</li>

    <li>Let <var>result</var> be the data of the item in the <a>drag data store item
    list</a> whose <a>kind</a> is <i>Plain Unicode
    string</i> and whose <a>type string</a> is equal to
    <var>format</var>.</li>

    <li>If <var>convert-to-URL</var> is true, then parse <var>result</var> as appropriate for
    <code>text/uri-list</code> data, and then set <var>result</var> to the first URL from
    the list, if any, or the empty string otherwise. [[!RFC2483]]</li>

    <li>Return <var>result</var>.</li>

  </ol>

  The <dfn><code>setData(<var>format</var>,
  <var>data</var>)</code></dfn> method must run the following steps:

  <ol>

    <li>If the <code>DataTransfer</code> object is no longer associated with a <a>drag data
    store</a>, abort these steps. Nothing happens.</li>

    <li>If the <a>drag data store</a>'s <a>mode</a> is
    not the <a>read/write mode</a>, abort these steps. Nothing
    happens.</li>

    <li>Let <var>format</var> be the first argument, <a>converted to ASCII
    lowercase</a>.</li>

    <li>

    If <var>format</var> equals "<code>text</code>", change it to "<code>text/plain</code>".

    If <var>format</var> equals "<code>url</code>", change it to "<code>text/uri-list</code>".

    </li>

    <li>Remove the item in the <a>drag data store item list</a> whose <a>kind</a> is <i>Plain Unicode string</i> and whose <a>type string</a> is equal to <var>format</var>, if there is
    one.</li>

    <li>Add an item to the <a>drag data store item list</a> whose <a>kind</a> is <i>Plain Unicode string</i>, whose <a>type string</a> is equal to <var>format</var>, and whose data is the string
    given by the method's second argument.</li>

  </ol>

  The <dfn><code>clearData()</code></dfn> method must run the
  following steps:

  <ol>

    <li>If the <code>DataTransfer</code> object is no longer associated with a <a>drag data
    store</a>, abort these steps. Nothing happens.</li>

    <li>If the <a>drag data store</a>'s <a>mode</a> is
    not the <a>read/write mode</a>, abort these steps. Nothing
    happens.</li>

    <li>If the method was called with no arguments, remove each item in the <a>drag data store
    item list</a> whose <a>kind</a> is <i>Plain Unicode
    string</i>, and abort these steps.</li>

    <li>Let <var>format</var> be the first argument, <a>converted to ASCII
    lowercase</a>.</li>

    <li>

    If <var>format</var> equals "<code>text</code>", change it to "<code>text/plain</code>".

    If <var>format</var> equals "<code>url</code>", change it to "<code>text/uri-list</code>".

    </li>

    <li>Remove the item in the <a>drag data store item list</a> whose <a>kind</a> is <i>Plain Unicode string</i> and whose <a>type string</a> is equal to <var>format</var>, if there is
    one.</li>

  </ol>

  <p class="note">
  The <code>clearData()</code> method does not
  affect whether any files were included in the drag, so the <code>types</code> attribute's list might still not be empty after
  calling <code>clearData()</code> (it would still contain the
  "<code>Files</code>" string if any files were included in the drag).
  </p>

  The <dfn><code>files</code></dfn> attribute must return a
  <a>live</a> <code>FileList</code> sequence consisting of <code>File</code> objects
  representing the files found by the following steps.
  Furthermore, for a given <code>FileList</code> object and a given underlying file, the same
  <code>File</code> object must be used each time.

  <ol>

    <li>Start with an empty list <var>L</var>.</li>

    <li>If the <code>DataTransfer</code> object is no longer associated with a <a>drag data
    store</a>, the <code>FileList</code> is empty. Abort these steps; return the empty list <var>L</var>.</li>

    <li>If the <a>drag data store</a>'s <a>mode</a> is
    the <a>protected mode</a>, abort these steps; return the empty list
    <var>L</var>.</li>

    <li>For each item in the <a>drag data store item list</a>
    whose <a>kind</a> is <i>File</i> , add the item's data (the file, in particular its name and contents, as well as
    its <a>type</a>) to the list <var>L</var>.</li>

    <li>The files found by these steps are those in the list <var>L</var>.</li>

  </ol>

  <p class="note">
  This version of the API does not expose the types of the files during the
  drag.
  </p>

  </div>

<h5 id="the-datatransferitemlist-interface"><dfn>The <code>DataTransferItemList</code> interface</dfn></h5>

  Each <code>DataTransfer</code> object is associated with a <code>DataTransferItemList</code>
  object.

  <pre class="idl" data-highlight="webidl">
    interface <dfn>DataTransferItemList</dfn> {
      readonly attribute unsigned long <a>length</a>;
      <a>getter</a> <a>DataTransferItem</a> (unsigned long index);
      <a>DataTransferItem</a>? <a>add</a>(DOMString data, DOMString type);
      <a>DataTransferItem</a>? <a>add</a>(<a>File</a> data);
      void <a>remove</a>(unsigned long index);
      void <a>clear</a>();
    };
  </pre>

  <dl class="domintro">

    <dt><var>items</var> . <code>length</code></dt>

    <dd>Returns the number of items in the <a>drag data store</a>.</dd>

    <dt><var>items</var>[<var>index</var>]</dt>

    <dd>

    Returns the <code>DataTransferItem</code> object representing the <var>index</var>th
    entry in the <a>drag data store</a>.

    </dd>

    <dt><var>items</var> . <code>remove</code>(<var>index</var>)</dt>

    <dd>

    Removes the <var>index</var>th entry in the <a>drag data store</a>.

    </dd>

    <dt><var>items</var> . <code>clear</code>()</dt>

    <dd>

    Removes all the entries in the <a>drag data store</a>.

    </dd>

    <dt><var>items</var> . <code>add</code>(<var>data</var>)</dt>
    <dt><var>items</var> . <code>add</code>(<var>data</var>, <var>type</var>)</dt>

    <dd>

    Adds a new entry for the given data to the <a>drag data store</a>. If the data is plain
    text  then a <var>type</var> string has to be provided
    also.

    </dd>

  </dl>

  <div class="impl">

  While the <code>DataTransferItemList</code> object's <code>DataTransfer</code> object is
  associated with a <a>drag data store</a>, the <code>DataTransferItemList</code> object's
  <i>mode</i> is the same as the <a>drag data store mode</a>. When the
  <code>DataTransferItemList</code> object's <code>DataTransfer</code> object is <em>not</em>
  associated with a <a>drag data store</a>, the <code>DataTransferItemList</code> object's
  <i>mode</i> is the <i>disabled mode</i>. The <a>drag data store</a> referenced in this
  section (which is used only when the <code>DataTransferItemList</code> object is not in the
  <i>disabled mode</i>) is the <a>drag data store</a> with which the
  <code>DataTransferItemList</code> object's <code>DataTransfer</code> object is associated.

  The <dfn><code>length</code></dfn> attribute must
  return zero if the object is in the <i>disabled mode</i>; otherwise it must return the number of
  items in the <a>drag data store item list</a>.

  When a <code>DataTransferItemList</code> object is not in the <i>disabled mode</i>, its
  <a>supported property indices</a> are the numbers in the range

    <a>0 .. <var>n</var>-1</a>,

  where <var>n</var> is the number of items in the <a>drag data store item
  list</a>.

  To <dfn>determine the value of an indexed property</dfn>
  <var>i</var> of a <code>DataTransferItemList</code> object, the user agent must return a
  <code>DataTransferItem</code> object representing the <var>i</var>th item in the
  <a>drag data store</a>. The same object must be returned each time a particular item is
  obtained from this <code>DataTransferItemList</code> object. The <code>DataTransferItem</code>
  object must be associated with the same <code>DataTransfer</code> object as the
  <code>DataTransferItemList</code> object when it is first created.

  The <dfn><code>add()</code></dfn> method must run the
  following steps:

  <ol>

    <li>If the <code>DataTransferItemList</code> object is not in the <i>read/write mode</i>, return null and abort these steps.</li>

    <li>

    Jump to the appropriate set of steps from the following list:

    <dl class="switch">

      <dt>If the first argument to the method is a string</dt>

      <dd>

      If there is already an item in the <a>drag data store item list</a> whose <a>kind</a> is <i>Plain Unicode string</i> and whose <a>type string</a> is equal to the value of the
      method's second argument, <a>converted to ASCII lowercase</a>, then throw a
      <code>NotSupportedError</code> exception and abort these steps.

      Otherwise, add an item to the <a>drag data store item list</a> whose <a>kind</a> is <i>Plain Unicode string</i>, whose <a>type string</a> is equal to the value of the method's second
      argument, <a>converted to ASCII lowercase</a>, and whose data is the string given by the
      method's first argument.

      </dd>

      <dt>If the first argument to the method is a <code>File</code></dt>

      <dd>

      Add an item to the <a>drag data store item list</a> whose <a>kind</a> is <i>File</i>, whose <a>type
      string</a> is the <code>type</code> of the <code>File</code>,
      <a>converted to ASCII lowercase</a>, and whose data is the same as the
      <code>File</code>'s data.

      </dd>

    </dl>

    </li>

    <li><a>Determine the value of the indexed
    property</a> corresponding to the newly added item, and return that value (a newly created
    <code>DataTransferItem</code> object).</li>

  </ol>

  The <dfn><code>remove()</code></dfn> method, when
  invoked with the argument <var>i</var>, must run these steps:

  <ol>

    <li>If the <code>DataTransferItemList</code> object is not in the <i>read/write mode</i>, throw an <code>InvalidStateError</code> exception and
    abort these steps.</li>

    <li>Remove the <var>i</var>th item from the <a>drag data store</a>.</li>

  </ol>

  The <dfn><code>clear</code></dfn> method, if the
  <code>DataTransferItemList</code> object is in the <i>read/write mode</i>,
  must remove all the items from the <a>drag data store</a>. Otherwise, it must do
  nothing.

  </div>

<h5 id="the-datatransferitem-interface"><dfn>The <code>DataTransferItem</code> interface</dfn></h5>

  Each <code>DataTransferItem</code> object is associated with a <code>DataTransfer</code>
  object.

  <pre class="idl" data-highlight="webidl">
    interface <dfn>DataTransferItem</dfn> {
      readonly attribute DOMString <a>kind</a>;
      readonly attribute DOMString <a>type</a>;
      void <a>getAsString</a>(<a>FunctionStringCallback</a>? _callback);
      <a>File</a>? <a>getAsFile</a>();
    };

    callback <dfn>FunctionStringCallback</dfn> = void (DOMString data);
  </pre>

  <dl class="domintro">

    <dt><var>item</var> . <code>kind</code></dt>
    <dd>

    Returns <a>the drag data item kind</a>, one of: "string",
      "file".

    </dd>

    <dt><var>item</var> . <code>type</code></dt>
    <dd>

    Returns <a>the drag data item type string</a>.

    </dd>

    <dt><var>item</var> . <code>getAsString</code>(<var>callback</var>)</dt>
    <dd>

    Invokes the callback with the string data as the argument, if <a>the drag data item
    kind</a> is <i>Plain Unicode string</i>.

    </dd>

    <dt><var>file</var> = <var>item</var> . <code>getAsFile</code>()</dt>
    <dd>

    Returns a <code>File</code> object, if <a>the drag data item kind</a> is <i>File</i>.

    </dd>

  </dl>

  <div class="impl">

  While the <code>DataTransferItem</code> object's <code>DataTransfer</code> object is associated
  with a <a>drag data store</a> and that <a>drag data store</a>'s <a>drag data store
  item list</a> still contains the item that the <code>DataTransferItem</code> object represents,
  the <code>DataTransferItem</code> object's <i>mode</i> is the same as the <a>drag data store
  mode</a>. When the <code>DataTransferItem</code> object's <code>DataTransfer</code> object is
  <em>not</em> associated with a <a>drag data store</a>, or if the item that the
  <code>DataTransferItem</code> object represents has been removed from the relevant <a>drag data
  store item list</a>, the <code>DataTransferItem</code> object's <i>mode</i> is the <i>disabled
  mode</i>. The <a>drag data store</a> referenced in this section (which is used only when the
  <code>DataTransferItem</code> object is not in the <i>disabled mode</i>) is the <a>drag data
  store</a> with which the <code>DataTransferItem</code> object's <code>DataTransfer</code>
  object is associated.

  The <dfn><code>kind</code></dfn> attribute must return the
  empty string if the <code>DataTransferItem</code> object is in the <i>disabled mode</i>; otherwise
  it must return the string given in the cell from the second column of the following table from the
  row whose cell in the first column contains <a>the drag data item kind</a> of the item
  represented by the <code>DataTransferItem</code> object:

  <table>
    <thead>
    <tr> <th> Kind <th> String
    <tbody>
    <tr> <td> <i>Plain Unicode string</i> <td> "<code>string</code>"

    <tr> <td> <i>File</i> <td> "<code>file</code>"

  </table>

  The <dfn><code>type</code></dfn> attribute must return the
  empty string if the <code>DataTransferItem</code> object is in the <i>disabled mode</i>; otherwise
  it must return <a>the drag data item type string</a> of the item represented by the
  <code>DataTransferItem</code> object.

  The <dfn><code>getAsString(<var>callback</var>)</code></dfn> method must run the following steps:

  <ol>

    <li>If the <var>callback</var> is null, abort these steps.</li>

    <li>If the <code>DataTransferItem</code> object is not in the <i>read/write mode</i> or the <i>read-only mode</i>,
    abort these steps. The callback is never invoked.</li>

    <li>If <a>the drag data item kind</a> is not <i>Plain Unicode string</i>, abort these
    steps. The callback is never invoked.</li>

    <li>Otherwise, <a>queue a task</a> to invoke <var>callback</var>, passing the
    actual data of the item represented by the <code>DataTransferItem</code> object as the
    argument.</li>

  </ol>

  The <dfn><code>getAsFile()</code></dfn>
  method must run the following steps:

  <ol>

    <li>If the <code>DataTransferItem</code> object is not in the <i>read/write mode</i> or the <i>read-only mode</i>,
    return null and abort these steps.</li>

    <li>If <a>the drag data item kind</a> is not <i>File</i>, then return null and abort
    these steps.</li>

    <li>Return a new <code>File</code> object representing the actual data of the item represented
    by the <code>DataTransferItem</code> object.

  </ol>

  </div>

<h4 id="the-dragevent-interface"><dfn>The <code>DragEvent</code> interface</dfn></h4>

  The drag-and-drop processing model involves several events. They all use the
  <code>DragEvent</code> interface.

  <pre class="idl" data-highlight="webidl">
    [Constructor(DOMString type, optional <a>DragEventInit</a> eventInitDict)]
    interface <dfn>DragEvent</dfn> : <a>MouseEvent</a> {
      readonly attribute <a>DataTransfer</a>? <a>dataTransfer</a>;
    };

    dictionary <dfn>DragEventInit</dfn> : <a>MouseEventInit</a> {
      <a>DataTransfer</a>? dataTransfer = null;
    };
  </pre>

  <dl class="domintro">

    <dt><var>event</var> . <code>dataTransfer</code></dt>

    <dd>

    Returns the <code>DataTransfer</code> object for the event.

    </dd>

  </dl>

  <p class="note">
  Although, for consistency with other event interfaces, the <code>DragEvent</code>
  interface has a constructor, it is not particularly useful. In particular, there's no way to
  create a useful <code>DataTransfer</code> object from script, as <code>DataTransfer</code> objects
  have a processing and security model that is coordinated by the browser during drag-and-drops.
  </p>

  <div class="impl">

  The <dfn><code>dataTransfer</code></dfn> attribute of the
  <code>DragEvent</code> interface must return the value it was initialized to. It represents the
  context information for the event.

  </div>

  <div class="impl">

  When a user agent is required to <dfn>fire a DND event</dfn> named <var>e</var> at an element,
  using a particular <a>drag data store</a>, and optionally with a specific <var>related
  target</var>, the user agent must run the following steps:

  <ol>

    <li>If no specific <var>related target</var> was provided, set <var>related target</var> to
    null.</li>

    <li>Let <var>window</var> be the <code>Window</code> object of the <code>Document</code>
    object of the specified target element.</li>

    <li>

    If <var>e</var> is <code>dragstart</code>, set the <a>drag
    data store mode</a> to the <a>read/write mode</a>.

    If <var>e</var> is <code>drop</code>, set the <a>drag data store
    mode</a> to the <a>read-only mode</a>.

    </li>

    <li>Let <var>dataTransfer</var> be a newly created <code>DataTransfer</code> object
    associated with the given <a>drag data store</a>.</li>

    <li>Set the <code>effectAllowed</code> attribute to the <a>drag data
    store</a>'s <a>drag data store allowed effects state</a>.</li>

    <li>

    Set the <code>dropEffect</code> attribute to "<code>none</code>" if <var>e</var> is <code>dragstart</code>, <code>drag</code>, <code>dragexit</code>, or <code>dragleave</code>; to the value corresponding to the <a>current
    drag operation</a> if <var>e</var> is <code>drop</code> or
    <code>dragend</code>; and to a value based on the <code>effectAllowed</code> attribute's value and the
    drag-and-drop source, as given by the following table, otherwise (i.e. if <var>e</var>
    is <code>dragenter</code> or <code>dragover</code>):

    <table>
      <thead>
      <tr>
        <th><code>effectAllowed</code></th>
        <th><code>dropEffect</code></th>
      </tr>
      </thead>
      <tr>
      <td>"<code>none</code>"</td>
      <td>"<code>none</code>"</td>
      </tr>
      <tr>
      <td>"<code>copy</code>"</td>
      <td>"<code>copy</code>"</td>
      </tr>
      <tr>
      <td>"<code>copyLink</code>"</td>
      <td>"<code>copy</code>", or, <a>if appropriate</a>, "<code>link</code>"</td>
      </tr>
      <tr>
      <td>"<code>copyMove</code>"</td>
      <td>"<code>copy</code>", or, <a>if appropriate</a>, "<code>move</code>"</td>
      </tr>
      <tr>
      <td>"<code>all</code>"</td>
      <td>"<code>copy</code>", or, <a>if appropriate</a>, either "<code>link</code>" or "<code>move</code>"</td>
      </tr>
      <tr>
      <td>"<code>link</code>"</td>
      <td>"<code>link</code>"</td>
      </tr>
      <tr>
      <td>"<code>linkMove</code>"</td>
      <td>"<code>link</code>", or, <a>if appropriate</a>, "<code>move</code>"</td>
      </tr>
      <tr>
      <td>"<code>move</code>"</td>
      <td>"<code>move</code>"</td>
      </tr>
      <tr>
      <td>"<code>uninitialized</code>" when what is being dragged is a selection from a text field</td>
      <td>"<code>move</code>", or, <a>if appropriate</a>, either "<code>copy</code>" or "<code>link</code>"</td>
      </tr>
      <tr>
      <td>"<code>uninitialized</code>" when what is being dragged is a selection</td>
      <td>"<code>copy</code>", or, <a>if appropriate</a>, either "<code>link</code>" or "<code>move</code>"</td>
      </tr>
      <tr>
      <td>"<code>uninitialized</code>" when what is being dragged is an <code>a</code> element with an <code>href</code> attribute</td>
      <td>"<code>link</code>", or, <a>if appropriate</a>, either "<code>copy</code>" or "<code>move</code>"</td>
      </tr>
      <tr>
      <td>Any other case</td>
      <td>"<code>copy</code>", or, <a>if appropriate</a>, either "<code>link</code>" or "<code>move</code>"</td>
      </tr>
    </table>

    Where the table above provides <dfn>possibly
    appropriate alternatives</dfn>, user agents may instead use the listed alternative values if
    platform conventions dictate that the user has requested those alternate effects.

    <p class="example">
  For example, Windows platform conventions are such that dragging while
    holding the "alt" key indicates a preference for linking the data, rather than moving or copying
    it. Therefore, on a Windows system, if "<code>link</code>" is an option according to
    the table above while the "alt" key is depressed, the user agent could select that instead of
    "<code>copy</code>" or "<code>move</code>".
  </p>

    </li>

    <li>

    Create a <a>trusted</a> <code>DragEvent</code> object
    and initialize it to have the given name <var>e</var>, to bubble, to be cancelable unless
    <var>e</var> is <code>dragexit</code>, <code>dragleave</code>, or <code>dragend</code>, and to have the <code>view</code> attribute initialized to <var>window</var>, the <code>detail</code> attribute initialized to zero, the mouse and key
    attributes initialized according to the state of the input devices as they would be for user
    interaction events, the <code>relatedTarget</code>
    attribute initialized to <var>related target</var>, and the <code>dataTransfer</code> attribute initialized to
    <var>dataTransfer</var>, the <code>DataTransfer</code> object created above.

    If there is no relevant pointing device, the object must have its <code>screenX</code>, <code>screenY</code>, <code>clientX</code>, <code>clientY</code>, and <code>button</code> attributes set to 0.

    </li>

    <li><a>Dispatch</a> the newly created
    <code>DragEvent</code> object at the specified target element.</li>

    <li>Set the <a>drag data store allowed effects state</a> to the current value of
    <var>dataTransfer</var>'s <code>effectAllowed</code>
    attribute. (It can only have changed value if <var>e</var> is <code>dragstart</code>.)</li>

    <li>Set the <a>drag data store mode</a> back to the <a>protected mode</a> if it was changed in the first step.</li>

    <li>Break the association between <var>dataTransfer</var> and the <a>drag data
    store</a>.</li>

  </ol>

  </div>

  <div class="impl">

<h4 id="drag-and-drop-processing-model"><dfn>Drag-and-drop processing model</dfn></h4>

  When the user attempts to begin a drag operation, the user agent must run the following steps.
  User agents must act as if these steps were run even if the drag actually started in another
  document or application and the user agent was not aware that the drag was occurring until it
  intersected with a document under the user agent's purview.

  <ol>

    <li>

    Determine what is being dragged, as follows:

    If the drag operation was invoked on a selection, then it is the selection that is being
    dragged.

    Otherwise, if the drag operation was invoked on a <code>Document</code>, it is the first
    element, going up the ancestor chain, starting at the node that the user tried to drag, that has
    the IDL attribute <code>draggable</code> set to true. If there is no such
    element, then nothing is being dragged; abort these steps, the drag-and-drop operation is never
    started.

    Otherwise, the drag operation was invoked outside the user agent's purview. What is being
    dragged is defined by the document or application where the drag was started.

    <p class="note">
  <code>img</code> elements and <code>a</code> elements with an <code>href</code> attribute have their <code>draggable</code> attribute set to true by default.
  </p>

    </li>

    <li><a>Create a drag data store</a>. All the DND events fired subsequently by the steps
    in this section must use this <a>drag data store</a>.</li>

    <li>

    Establish which DOM node is the <dfn>source node</dfn>, as follows:

    If it is a selection that is being dragged, then the <a>source node</a> is the
    <code>Text</code> node that the user started the drag on (typically the <code>Text</code> node
    that the user originally clicked). If the user did not specify a particular node, for example if
    the user just told the user agent to begin a drag of "the selection", then the <a>source
    node</a> is the first <code>Text</code> node containing a part of the selection.

    Otherwise, if it is an element that is being dragged, then the <a>source node</a> is
    the element that is being dragged.

    Otherwise, the <a>source node</a> is part of another document or application. When this
    specification requires that an event be dispatched at the <a>source node</a> in this case,
    the user agent must instead follow the platform-specific conventions relevant to that
    situation.

    <p class="note">
      Multiple events are fired on the <a>source node</a> during the course of the drag-and-drop
      operation.
  </p>

    </li>

    <li>

    Determine the <dfn>list of dragged nodes</dfn>, as follows:

    If it is a selection that is being dragged, then the <a>list of dragged nodes</a>
    contains, in <a>tree order</a>, every node that is partially or completely included in the
    selection (including all their ancestors).

    Otherwise, the <a>list of dragged nodes</a> contains only the <a>source node</a>,
    if any.

    </li>

    <li>

    If it is a selection that is being dragged, then add an item to the <a>drag data store
    item list</a>, with its properties set as follows:

    <dl>

      <dt><a>The drag data item type string</a>
      <dd>"<code>text/plain</code>"</dd>

      <dt><a>The drag data item kind</a>
      <dd><i>Plain Unicode string</i></dd>

      <dt>The actual data</dt>
      <dd>The text of the selection</dd>

    </dl>

    Otherwise, if any files are being dragged, then add one item per file to the <a>drag data
    store item list</a>, with their properties set as follows:

    <dl>

      <dt><a>The drag data item type string</a>
      <dd>The MIME type of the file, if known, or "<code>application/octet-stream</code>" otherwise.</dd>

      <dt><a>The drag data item kind</a>
      <dd><i>File</i></dd>

      <dt>The actual data</dt>
      <dd>The file's contents and name.</dd>

    </dl>

    <p class="note">
  Dragging files can currently only happen from outside a <a>browsing
    context</a>, for example from a file system manager application.
  </p>

    If the drag initiated outside of the application, the user agent must add items to the
    <a>drag data store item list</a> as appropriate for the data being dragged, honoring
    platform conventions where appropriate; however, if the platform conventions do not use <a>MIME types</a> to label dragged data, the user agent must make a
    best-effort attempt to map the types to MIME types, and, in any case, all the <a>drag data item type strings</a> must be <a>converted to ASCII
    lowercase</a>.

    User agents may also add one or more items representing the selection or dragged element(s)
    in other forms, e.g. as HTML.

    </li>

    <li>

    If the <a>list of dragged nodes</a> is not empty, then <a>extract the microdata from those nodes into a JSON form</a>, and add one item to the
    <a>drag data store item list</a>, with its properties set as follows:

    <dl>

      <dt><a>The drag data item type string</a>
      <dd><code>application/microdata+json</code></dd>

      <dt><a>The drag data item kind</a>
      <dd><i>Plain Unicode string</i></dd>

      <dt>The actual data</dt>
      <dd>The resulting JSON string.</dd>

    </dl>

    </li>

    <li>

    Run the following substeps:

    <ol>

      <li>Let <var>urls</var> be an empty list of <a>absolute
      URLs</a>.</li>

      <li>

      For each <var>node</var> in the <a>list of dragged nodes</a>:

      <dl>

        <dt>If the node is an <code>a</code> element with an <code>href</code> attribute</dt>

        <dd>Add to <var>urls</var> the result of <a>resolving</a> the element's <code>href</code> content
        attribute relative to the element.</dd>

        <dt>If the node is an <code>img</code> element with a <code>src</code>
        attribute</dt>

        <dd>Add to <var>urls</var> the result of <a>resolving</a> the element's <code>src</code> content attribute
        relative to the element.</dd>

      </dl>

      </li>

      <li>If <var>urls</var> is still empty, abort these substeps.</li>

      <li>Let <var>url string</var> be the result of concatenating the strings in <var>urls</var>,
      in the order they were added, separated by a U+000D CARRIAGE RETURN U+000A LINE FEED character
      pair (CRLF).</li>

      <li>Add one item to the <a>drag data store item list</a>, with its properties set as
      follows:

      <dl>

        <dt><a>The drag data item type string</a>
        <dd><code>text/uri-list</code></dd>

        <dt><a>The drag data item kind</a>
        <dd><i>Plain Unicode string</i></dd>

        <dt>The actual data</dt>
        <dd><var>url string</var></dd>

      </dl>

      </li>

    </ol>

    </li>

    <li>

    Update the <a>drag data store default feedback</a> as appropriate for the user agent
    (if the user is dragging the selection, then the selection would likely be the basis for this
    feedback; if the user is dragging an element, then that element's rendering would be used; if
    the drag began outside the user agent, then the platform conventions for determining the drag
    feedback should be used).

    </li>

    <li>

    <a>Fire a DND event</a> named <code>dragstart</code> at the
    <a>source node</a>.

    If the event is canceled, then the drag-and-drop operation should not occur; abort these
    steps.

    <p class="note">
  Since events with no event listeners registered are, almost by definition, never
    canceled, drag-and-drop is always available to the user if the author does not specifically
    prevent it.
  </p>

    </li>

    <li>

    <a>Initiate the drag-and-drop operation</a> in a manner consistent with platform
    conventions, and as described below.

    The drag-and-drop feedback must be generated from the first of the
    following sources that is available:

    <ol>

      <li>The <a>drag data store bitmap</a>, if any. In this case, the <a>drag data store
      hot spot coordinate</a> should be used as hints for where to put the cursor relative to the
      resulting image. The values are expressed as distances in CSS pixels from the left side and
      from the top side of the image respectively. [[!CSS-2015]]</li>

      <li>The <a>drag data store default feedback</a>.</li>

    </ol>

    </li>

  </ol>

  From the moment that the user agent is to <dfn>initiate the drag-and-drop operation</dfn>,
  until the end of the drag-and-drop operation, device input events (e.g. mouse and keyboard events)
  must be suppressed.

  During the drag operation, the element directly indicated by the user as the drop target is
  called the <dfn>immediate user selection</dfn>. (Only elements can be selected by the user; other
  nodes must not be made available as drop targets.) However, the <a>immediate user
  selection</a> is not necessarily the <dfn>current target element</dfn>, which is the element
  currently selected for the drop part of the drag-and-drop operation.

  The <a>immediate user selection</a> changes as the user selects different elements
  (either by pointing at them with a pointing device, or by selecting them in some other way). The
  <a>current target element</a> changes when the <a>immediate user selection</a>
  changes, based on the results of event listeners in the document, as described below.

  Both the <a>current target element</a> and the <a>immediate user selection</a> can
  be null, which means no target element is selected. They can also both be elements in other
  (DOM-based) documents, or other (non-Web) programs altogether. (For example, a user could drag
  text to a word-processor.) The <a>current target element</a> is initially null.

  In addition, there is also a <dfn>current drag operation</dfn>, which can take on the values
  "<dfn><code>none</code></dfn>", "<dfn><code>copy</code></dfn>", "<dfn><code>link</code></dfn>", and "<dfn><code>move</code></dfn>". Initially, it has the value
  "<code>none</code>". It is updated by the user agent
  as described in the steps below.

  User agents must, as soon as the drag operation is <a>initiated</a> and every 350ms (&#xB1;200ms) thereafter for as long as the drag
  operation is ongoing, <a>queue a task</a> to perform the following steps in sequence:

  <ol>

    <li>

    If the user agent is still performing the previous iteration of the sequence (if any) when
    the next iteration becomes due, abort these steps for this iteration (effectively "skipping
    missed frames" of the drag-and-drop operation).

    </li>

    <li>

    <a>Fire a DND event</a> named <code>drag</code> at the
    <a>source node</a>. If this event is canceled, the user agent must set the <a>current
    drag operation</a> to "<code>none</code>" (no
    drag operation).

    </li>

    <li>

    If the <code>drag</code> event was not canceled and the user has not
    ended the drag-and-drop operation, check the state of the drag-and-drop operation, as
    follows:

    <ol>

      <li>

      If the user is indicating a different <a>immediate user selection</a> than during the
      last iteration (or if this is the first iteration), and if this <a>immediate user
      selection</a> is not the same as the <a>current target element</a>, then <a>fire a
      DND event</a> named <code>dragexit</code> at the <a>current
      target element</a>, and then update the <a>current target element</a> as follows:

      <dl class="switch">

        <dt>If the new <a>immediate user selection</a> is null</dt>

        <dd>Set the <a>current target element</a> to null also.</dd>

        <dt>If the new <a>immediate user selection</a> is in a non-DOM document or
        application</dt>

        <dd>Set the <a>current target element</a> to the <a>immediate user
        selection</a>.</dd>

        <dt>Otherwise</dt>

        <dd>

        <a>Fire a DND event</a> named <code>dragenter</code>
        at the <a>immediate user selection</a>.

        If the event is canceled, then set the <a>current target element</a> to the
        <a>immediate user selection</a>.

        Otherwise, run the appropriate step from the following list:

        <dl class="switch">

          <dt>If the <a>immediate user selection</a> is a text field (e.g.
          <code>textarea</code>, or an <code>input</code> element whose <code>type</code> attribute is in the <a>Text</a> state) or an <a>editing host</a> or
          <a>editable</a> element, and the <a>drag data store item list</a> has an item
          with <a>the drag data item type string</a> "<code>text/plain</code>" and <a>the
          drag data item kind</a> <i>Plain Unicode string</i></dt>

          <dd>Set the <a>current target element</a> to the <a>immediate user
          selection</a> anyway.</dd>

          <dt>If the <a>immediate user selection</a> is an element with a <code>dropzone</code> attribute that <a>matches</a> the <a>drag data store</a></dt>

          <dd>Set the <a>current target element</a> to the <a>immediate user
          selection</a> anyway.</dd>

          <dt>If the <a>immediate user selection</a> is an element that itself has an ancestor
          element with a <code>dropzone</code> attribute that <a>matches</a> the <a>drag data store</a></dt>

          <dd>

          Let <var>new target</var> be the nearest (deepest) such ancestor element.

          If the <a>immediate user selection</a> is <var>new target</var>, then leave the
          <a>current target element</a> unchanged.

          Otherwise, <a>fire a DND event</a> named <code>dragenter</code> at <var>new target</var>, with the current
          <a>current target element</a> as the specific <var>related target</var>. Then, set
          the <a>current target element</a> to <var>new target</var>, regardless of whether
          that event was canceled or not.

          </dd>

          <dt>If the <a>immediate user selection</a> is <a>the body element</a></dt>

          <dd>Leave the <a>current target element</a> unchanged.</dd>

          <dt>Otherwise</dt>

          <dd>

          <a>Fire a DND event</a> named <code>dragenter</code>
          at <a>the body element</a>, if there is one, or at the <code>Document</code> object,
          if not. Then, set the <a>current target element</a> to <a>the body
          element</a>, regardless of whether that event was canceled or not.

          </dd>

        </dl>

        </dd>

      </dl>

      </li>

      <li>

      If the previous step caused the <a>current target element</a> to change, and if the
      previous target element was not null or a part of a non-DOM document, then <a>fire a DND
      event</a> named <code>dragleave</code> at the previous target
      element, with the new <a>current target element</a> as the specific <var>related
      target</var>.

      </li>

      <li>

      If the <a>current target element</a> is a DOM element, then <a>fire a DND
      event</a> named <code>dragover</code> at this <a>current
      target element</a>.

      If the <code>dragover</code> event is not canceled, run the
      appropriate step from the following list:

      <dl class="switch">

        <dt>If the <a>current target element</a> is a text field (e.g. <code>textarea</code>,
        or an <code>input</code> element whose <code>type</code> attribute
        is in the <a>Text</a> state) or an <a>editing
        host</a> or <a>editable</a> element, and the <a>drag data store item list</a>
        has an item with <a>the drag data item type string</a> "<code>text/plain</code>" and
        <a>the drag data item kind</a> <i>Plain Unicode string</i></dt>

        <dd>Set the <a>current drag operation</a> to either "<code>copy</code>" or "<code>move</code>", as appropriate given the platform
        conventions.</dd>

        <dt>If the <a>current target element</a> is an element with a <code>dropzone</code> attribute that <a>matches</a> the <a>drag data store</a> and <a>specifies an operation</a></dt>

        <dd>Set the <a>current drag operation</a> to the operation <a>specified</a> by the <code>dropzone</code> attribute of the <a>current target
        element</a>.

        <dt>If the <a>current target element</a> is an element with a <code>dropzone</code> attribute that <a>matches</a> the <a>drag data store</a> and does not
        <a>specify an operation</a></dt>

        <dd>Set the <a>current drag operation</a> to "<code>copy</code>".

        <dt>Otherwise</dt>

        <dd>Reset the <a>current drag operation</a> to "<code>none</code>".</dd>

      </dl>

      Otherwise (if the <code>dragover</code> event <em>is</em>
      canceled), set the <a>current drag operation</a> based on the values of the <code>effectAllowed</code> and <code>dropEffect</code> attributes of the
      <code>DragEvent</code> object's <code>dataTransfer</code>
      object as they stood after the event <a>dispatch</a>
      finished, as per the following table:

      <table>
        <thead>
          <tr>
            <th><code>effectAllowed</code></th>
            <th><code>dropEffect</code></th>
            <th>Drag operation</th>
          </tr>
        </thead>
        <tr>
          <td>"<code>uninitialized</code>", "<code>copy</code>", "<code>copyLink</code>", "<code>copyMove</code>", or "<code>all</code>"</td>
          <td>"<code>copy</code>"</td>
          <td>"<code>copy</code>"</td>
        </tr>
        <tr>
          <td>"<code>uninitialized</code>", "<code>link</code>", "<code>copyLink</code>", "<code>linkMove</code>", or "<code>all</code>"</td>
          <td>"<code>link</code>"</td>
          <td>"<code>link</code>"</td>
        </tr>
        <tr>
          <td>"<code>uninitialized</code>", "<code>move</code>", "<code>copyMove</code>", "<code>linkMove</code>", or "<code>all</code>"</td>
          <td>"<code>move</code>"</td>
          <td>"<code>move</code>"</td>
        </tr>
        <tr>
          <td colspan="2">Any other case</td>
          <td>"<code>none</code>"</td>
        </tr>
      </table>

      </li>

      <li>

      Otherwise, if the <a>current target element</a> is not a DOM element, use
      platform-specific mechanisms to determine what drag operation is being performed (none, copy,
      link, or move), and set the <a>current drag operation</a> accordingly.

      </li>

      <li>

      Update the drag feedback (e.g. the mouse cursor) to match the <a>current drag
      operation</a>, as follows:

      <table>
        <thead>
          <tr>
            <th>Drag operation</th>
            <th>Feedback</th>
          </tr>
        </thead>
        <tr>
          <td>"<code>copy</code>"</td>
          <td>Data will be copied if dropped here.</td>
        </tr>
        <tr>
          <td>"<code>link</code>"</td>
          <td>Data will be linked if dropped here.</td>
        </tr>
        <tr>
          <td>"<code>move</code>"</td>
          <td>Data will be moved if dropped here.</td>
        </tr>
        <tr>
          <td>"<code>none</code>"</td>
          <td>No operation allowed, dropping here will cancel the drag-and-drop operation.</td>
        </tr>
      </table>

      </li>

    </ol>

    </li>

    <li>

    Otherwise, if the user ended the drag-and-drop operation (e.g. by releasing the mouse button
    in a mouse-driven drag-and-drop interface), or if the <code>drag</code>
    event was canceled, then this will be the last iteration. Run the following steps, then stop the
    drag-and-drop operation:

    <ol>

      <li>

      If the <a>current drag operation</a> is "<code>none</code>" (no drag operation), or, if the user
      ended the drag-and-drop operation by canceling it (e.g. by hitting the <kbd>Escape</kbd> key),
      or if the <a>current target element</a> is null, then the drag operation failed. Run
      these substeps:

      <ol>

        <li>Let <var>dropped</var> be false.</li>

        <li>If the <a>current target element</a> is a DOM element, <a>fire a DND
        event</a> named <code>dragleave</code> at it; otherwise, if
        it is not null, use platform-specific conventions for drag cancelation.</li>

        <li>Set the <a>current drag operation</a> to "<code>none</code>".</li>

      </ol>

      Otherwise, the drag operation might be a success; run these substeps:

      <ol>

        <li>Let <var>dropped</var> be true.</li>

        <li>If the <a>current target element</a> is a DOM element, <a>fire a DND
        event</a> named <code>drop</code> at it; otherwise, use
        platform-specific conventions for indicating a drop.</li>

        <li>

        If the event is canceled, set the <a>current drag operation</a> to the value of the
        <code>dropEffect</code> attribute of the
        <code>DragEvent</code> object's <code>dataTransfer</code>
        object as it stood after the event <a>dispatch</a>
        finished.

        Otherwise, the event is not canceled; perform the event's default action, which depends
        on the exact target as follows:

        <dl class="switch">

          <dt>If the <a>current target element</a> is a text field (e.g. <code>textarea</code>,
          or an <code>input</code> element whose <code>type</code> attribute
          is in the <a>Text</a> state) or an <a>editing
          host</a> or <a>editable</a> element, and the <a>drag data store item
          list</a> has an item with <a>the drag data item type string</a>
          "<code>text/plain</code>" and <a>the drag data item kind</a> <i>Plain Unicode
          string</i></dt>

          <dd>Insert the actual data of the first item in the <a>drag data store item
          list</a> to have <a>a drag data item type
          string</a> of "<code>text/plain</code>" and <a>a drag
          data item kind</a> that is <i>Plain Unicode string</i> into the text field or
          <a>editing host</a> or <a>editable</a> element in a manner consistent with
          platform-specific conventions (e.g. inserting it at the current mouse cursor position, or
          inserting it at the end of the field).</dd>

          <dt>Otherwise</dt>

          <dd>Reset the <a>current drag operation</a> to "<code>none</code>".</dd>

        </dl>

        </li>

      </ol>

      </li>

      <li>

      <a>Fire a DND event</a> named <code>dragend</code> at the
      <a>source node</a>.

      </li>

      <li>

      Run the appropriate steps from the following list as the default action of the <code>dragend</code> event:

      <dl class="switch">

        <dt>If <var>dropped</var> is true, the <a>current target element</a> is a <i>text
        field</i> (see below), the <a>current drag operation</a> is "<code>move</code>", and the source of the
        drag-and-drop operation is a selection in the DOM that is entirely contained within an
        <a>editing host</a></dt>

        <dd><a>Delete the selection</a>.</dd>

        <dt>If <var>dropped</var> is true, the <a>current target element</a> is a <i>text
        field</i> (see below), the <a>current drag operation</a> is "<code>move</code>", and the source of the
        drag-and-drop operation is a selection in a text field</dt>

        <dd>The user agent should delete the dragged selection from the relevant text
        field.</dd>

        <dt>If <var>dropped</var> is false or if the <a>current drag operation</a> is "<code>none</code>"</dt>

        <dd>The drag was canceled. If the platform conventions dictate that this be represented to
        the user (e.g. by animating the dragged selection going back to the source of the
        drag-and-drop operation), then do so.</dd>

        <dt>Otherwise</dt>

        <dd>The event has no default action.</dd>

      </dl>

      For the purposes of this step, a <i>text field</i> is a <code>textarea</code> element or an
      <code>input</code> element whose <code>type</code> attribute is in
      one of the
      <a>Text</a>,
      <a>Search</a>,
      <a>Tel</a>,
      <a>URL</a>,
      <a>E-mail</a>,
      <a>Password</a>, or
      <a>Number</a>
      states.

      </li>

    </ol>

    </li>

  </ol>

    <p class="note">
      User agents are encouraged to consider how to react to drags near the edge of scrollable
      regions. For example, if a user drags a link to the bottom of the viewport on a long page, it
      might make sense to scroll the page so that the user can drop the link lower on the page.
    </p>

    <p class="note">
      This model is independent of which <code>Document</code> object the nodes involved are from;
      the events are fired as described above and the rest of the processing model runs as described
      above, irrespective of how many documents are involved in the operation.
    </p>
  </div>

<h4 id="events-summary"><dfn>Events summary</dfn></h4>

  <em>This section is non-normative.</em>

  The following events are involved in the drag-and-drop model.

  <table>
    <thead>
      <tr>
        <th>Event Name</th>
        <th>Target</th>
        <th>Cancelable?</th>
        <th><a>Drag data store mode</a></th>
        <th><code>dropEffect</code></th>
        <th>Default Action</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><dfn><code>dragstart</code></dfn></td>
        <td><a>Source node</a></td>
        <td>&#x2713; Cancelable</td>
        <td><a>Read/write mode</a>
        <td>"<code>none</code>"</td>
        <td>Initiate the drag-and-drop operation</td>
      </tr>
      <tr>
        <td><dfn><code>drag</code></dfn></td>
        <td><a>Source node</a></td>
        <td>&#x2713; Cancelable</td>
        <td><a>Protected mode</a>
        <td>"<code>none</code>"</td>
        <td>Continue the drag-and-drop operation</td>
      </tr>
      <tr>
        <td><dfn><code>dragenter</code></dfn></td>
        <td><a>Immediate user selection</a> or <a>the body element</a></td>
        <td>&#x2713; Cancelable</td>
        <td><a>Protected mode</a>
        <td><a>Based on <code>effectAllowed</code> value</a></td>
        <td>Reject <a>immediate user selection</a> as potential <a>target element</a></td>
      </tr>
      <tr>
        <td><dfn><code>dragexit</code></dfn></td>
        <td><a>Previous target element</a></td>
        <td>&mdash;</td>
        <td><a>Protected mode</a>
        <td>"<code>none</code>"</td>
        <td>None</td>
      </tr>
      <tr>
        <td><dfn><code>dragleave</code></dfn></td>
        <td><a>Previous target element</a></td>
        <td>&mdash;</td>
        <td><a>Protected mode</a>
        <td>"<code>none</code>"</td>
        <td>None</td>
      </tr>
      <tr>
        <td><dfn><code>dragover</code></dfn></td>
        <td><a>Current target element</a></td>
        <td>&#x2713; Cancelable</td>
        <td><a>Protected mode</a>
        <td><a>Based on <code>effectAllowed</code> value</a></td>
        <td>Reset the <a>current drag operation</a> to "none"</td>
      </tr>
      <tr>
        <td><dfn><code>drop</code></dfn></td>
        <td><a>Current target element</a></td>
        <td>&#x2713; Cancelable</td>
        <td><a>Read-only mode</a>
        <td><a>Current drag operation</a></td>
        <td>Varies</td>
      </tr>
      <tr>
        <td><dfn><code>dragend</code></dfn></td>
        <td><a>Source node</a></td>
        <td>&mdash;</td>
        <td><a>Protected mode</a>
        <td><a>Current drag operation</a></td>
        <td>Varies</td>
      </tr>
    </tbody>
  </table>

  Not shown in the above table: all these events bubble, and the <code>effectAllowed</code>
  attribute always has the value it had after the <code>dragstart</code> event, defaulting to
  "<code>uninitialized</code>" in the <code>dragstart</code> event.

<h4 id="the-draggable-attribute"><dfn>The <dfn><code>draggable</code></dfn> attribute</dfn></h4>

  All <a>HTML elements</a> may have the <code>draggable</code> content attribute set. The
  <code>draggable</code> attribute is an <a>enumerated attribute</a>. It has three states. The first
  state is <i>true</i> and it has the keyword <code>true</code>. The second state is <i>false</i>
  and it has the keyword <code>false</code>. The third state is <i>auto</i>; it has no keywords but
  it is the <i>missing value default</i>.

  The <i>true</i> state means the element is draggable; the <i>false</i> state means that it is not.
  The <i>auto</i> state uses the default behavior of the user agent.

  An element with a <code>draggable</code> attribute should also have a <code>title</code> attribute
  that names the element for the purpose of non-visual interactions.

  <dl class="domintro">
    <dt><var>element</var> . <code>draggable</code> [ = <var>value</var> ]</dt>
    <dd>
    Returns true if the element is draggable; otherwise, returns false.

    Can be set, to override the default and set the <code>draggable</code>
    content attribute.
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>draggable</code></dfn> IDL attribute, whose value depends on the content
    attribute's in the way described below, controls whether or not the element is draggable.
    Generally, only text selections are draggable, but elements whose <code>draggable</code> IDL
    attribute is true become draggable as well.

    If an element's <code>draggable</code> content attribute has the state <i>true</i>, the
    <code>draggable</code> IDL attribute must return true.

    Otherwise, if the element's <code>draggable</code> content attribute has the state <i>false</i>,
    the <code>draggable</code> IDL attribute must return false.

    Otherwise, the element's <code>draggable</code> content attribute has the state <i>auto</i>. If
    the element is an <code>img</code> element, an <code>object</code> element that
    <a>represents</a> an image, or an <code>a</code> element with an <code>href</code> content
    attribute, the <code>draggable</code> IDL attribute must return true; otherwise, the
    <code>draggable</code> IDL attribute must return false.

    If the <code>draggable</code> IDL attribute is set to the value false, the
    <code>draggable</code> content attribute must be set to the literal value "<code>false</code>".
    If the <code>draggable</code> IDL attribute is set to the value true, the <code>draggable</code>
    content attribute must be set to the literal value "<code>true</code>".
  </div>

<h4 id="the-dropzone-attribute"><dfn>The <dfn><code>dropzone</code></dfn> attribute</dfn></h4>

  All <a>HTML elements</a> may have the <code>dropzone</code> content attribute set. When specified,
  its value must be an <a>unordered set of unique space-separated tokens</a> that are
  <a>ASCII case-insensitive</a>. The allowed values are the following:

  : <dfn><code>copy</code></dfn>
  :: Indicates that dropping an accepted item on the element will result in a copy of the dragged
      data.
  : <dfn><code>move</code></dfn>
  :: Indicates that dropping an accepted item on the element will result in the dragged data being
      moved to the new location.
  : <dfn><code>link</code></dfn>
  :: Indicates that dropping an accepted item on the element will result in a link to the original
      data.
  : Any keyword with eight characters or more, beginning with the an <a>ASCII case-insensitive</a>
      match for the string "<code>string:</code>"
  :: Indicates that items with <a>the drag data item kind</a> <i>Plain Unicode string</i> and
      <a>the drag data item type string</a> set to a value that matches the remainder of the keyword
      are accepted.
  : Any keyword with six characters or more, beginning with an <a>ASCII case-insensitive</a> match
      for the string "<code>file:</code>"
  :: Indicates that items with <a>the drag data item kind</a> <i>File</i> and <a>the drag data item
      type string</a> set to a value that matches the remainder of the keyword are accepted.

  The <code>dropzone</code> content attribute's values must not have more than one of the three
  feedback values (<code>copy</code>, <code>move</code>, and <code>link</code>) specified. If none
  are specified, the <code>copy</code> value is implied.

  An element with a <code>dropzone</code> attribute should also have a <code>title</code> attribute
  that names the element for the purpose of non-visual interactions.

  <div class="impl">
    A <code>dropzone</code> attribute <dfn>matches a drag data store</dfn> if the
    <a><code>dropzone</code> processing steps</a> result in a match.

    A <code>dropzone</code> attribute <dfn>specifies an operation</dfn> if the
    <a><code>dropzone</code> processing steps</a> result in a specified operation. The specified
    operation is as given by those steps.

    The <dfn><code>dropzone</code> processing steps</dfn> are as follows. They either result in a
    match or not, and separate from this result either in a specified operation or not, as defined
    below.

    1. Let <var>value</var> be the value of the <code>dropzone</code> attribute.
    2. Let <var>keywords</var> be the result of <a>splitting <var>value</var> on spaces</a>.
    3. Let <var>matched</var> be false.
    4. Let <var>operation</var> be unspecified.
    5. For each value in <var>keywords</var>, if any, in the order that they were found in
        <var>value</var>, run the following steps.
        1. Let <var>keyword</var> be the keyword.
        2. If <var>keyword</var> is one of "<code>copy</code>", "<code>move</code>", or
            "<code>link</code>", then: run the following substeps:
            1. If <var>operation</var> is still unspecified, then let <var>operation</var> be the
                string given by <var>keyword</var>.
            2. Skip to the step labeled <i>end of keyword</i> below.
        3. If <var>keyword</var> does not contain a U+003A COLON character (:), or if the first such
            character in <var>keyword</var> is either the first character or the last character in
            the string, then skip to the step labeled <i>end of keyword</i> below.
        4. Let <var>kind code</var> be the substring of <var>keyword</var> from the first character
            in the string to the last character in the string that is before the first U+003A COLON
            character (:) in the string, <a>converted to ASCII lowercase</a>.
        5. Jump to the appropriate step from the list below, based on the value of
            <var>kind code</var>:
            <dl class="switch">
              <dt>If <var>kind code</var> is the string "<code>string</code>"</dt>
              <dd>Let <var>kind</var> be <i>Plain Unicode string</i>.</dd>
              <dt>If <var>kind code</var> is the string "<code>file</code>"</dt>
              <dd>Let <var>kind</var> be <i>File</i>.</dd>
              <dt>Otherwise</dt>
              <dd>Skip to the step labeled <i>end of keyword</i> below.</dd>
            </dl>
        6. Let <var>type</var> be the substring of <var>keyword</var> from the first character after
            the first U+003A COLON character (:) in the string, to the last character in the string,
            <a>converted to ASCII lowercase</a>.
        7. If there exist any items in the <a>drag data store item list</a> whose
            <a>drag data item kind</a> is  the kind given in <var>kind</var> and whose
            <a>drag data item type string</a> is <var>type</var>, then let <var>matched</var> be
            true.
        8. <i>End of keyword</i>: Go on to the next keyword, if any, or the next step in the overall
            algorithm, if there are no more.
    6. The algorithm results in a match if <var>matched</var> is true, and does not otherwise.

        The algorithm results in a specified operation if <var>operation</var> is not unspecified.
        The specified operation, if one is specified, is the one given by <var>operation</var>.

    The <dfn><code>dropzone</code></dfn> IDL attribute must <a>reflect</a> the content attribute of
    the same name.
  </div>

  <div class="example">
    In this example, a <code>div</code> element is made into a drop target for image files using the
    <code>dropzone</code> attribute. Images dropped into the target are then displayed.

    <pre highlight="html">
      &lt;div dropzone="copy file:image/png file:image/gif file:image/jpeg" ondrop="receive(event, this)">
      &lt;p>Drop an image here to have it displayed.&lt;/p>
      &lt;/div>
      &lt;script>
      function receive(event, element) {
        var data = event.dataTransfer.items;
        for (var i = 0; i &lt; data.length; i += 1) {
          if ((data[i].kind == 'file') && (data[i].type.match('^image/'))) {
            var img = new Image();
            img.src = window.createObjectURL(data[i].getAsFile());
            element.appendChild(img);
          }
        }
      }
      &lt;/script>
    </pre>
  </div>

  <div class="impl">
    <h4 id="security-risks-in-the-drag-and-drop-model">
      <dfn>Security risks in the drag-and-drop model</dfn>
    </h4>

    User agents must not make the data added to the <code>DataTransfer</code> object during the
    <code>dragstart</code> event available to scripts until the <code>drop</code> event, because
    otherwise, if a user were to drag sensitive information from one document to a second document,
    crossing a hostile third document in the process, the hostile document could intercept the data.

    For the same reason, user agents must consider a drop to be successful only if the user
    specifically ended the drag operation &mdash; if any scripts end the drag operation, it must be
    considered unsuccessful (canceled) and the <code>drop</code> event must not be fired.

    User agents should take care to not start drag-and-drop operations in response to script
    actions. For example, in a mouse-and-window environment, if a script moves a window while the
    user has his mouse button depressed, the UA would not consider that to start a drag. This is
    important because otherwise UAs could cause data to be dragged from sensitive sources and
    dropped into hostile documents without the user's consent.

    User agents should filter potentially active (scripted) content (e.g. HTML) when it is dragged
    and when it is dropped, using a safelist of known-safe features. Similarly, <a>relative URLs</a>
    should be turned into absolute URLs to avoid references changing in unexpected ways. This
    specification does not specify how this is performed.

    <div class="example">
      Consider a hostile page providing some content and getting the user to select and drag and
      drop (or indeed, copy and paste) that content to a victim page's <code>contenteditable</code>
      region. If the browser does not ensure that only safe content is dragged, potentially unsafe
      content such as scripts and event handlers in the selection, once dropped (or pasted) into the
      victim site, get the privileges of the victim site. This would thus enable a cross-site
      scripting attack.
    </div>
  </div>

<!-- Big Text: Browsers -->

<h2 id="browsers"><dfn>Loading Web pages</dfn></h2>

  <div class="impl">

  This section describes features that apply most directly to Web browsers. Having said that,
  except where specified otherwise, the requirements defined in this section <em>do</em> apply to
  all user agents, whether they are Web browsers or not.

  </div>

<h3 id="browsing-contexts"><dfn>Browsing contexts</dfn></h3>

  A <dfn>browsing context</dfn> is an environment in which <code>Document</code> objects are
  presented to the user.

  <p class="note">
  A tab or window in a Web browser typically contains a <a>browsing
  context</a>, as does an <code>iframe</code><span class="impl"> or <code>frame</code>s in a
  <code>frameset</code></span>.
  </p>

  Each <a>browsing context</a> has a corresponding <code>WindowProxy</code> object.

  A <a>browsing context</a> has a <a>session history</a>, which lists the
  <code>Document</code> objects that that <a>browsing context</a> has presented, is
  presenting, or will present. At any time, one <code>Document</code> in each <a>browsing
  context</a> is designated the <dfn>active document</dfn>. A <code>Document</code>'s
  <a>browsing context</a> is that <a>browsing context</a> whose <a>session
  history</a> contains the <code>Document</code>, if any. (A <code>Document</code> created using
  an API such as <code>createDocument()</code> has no
  <a>browsing context</a>.)

  Each <code>Document</code> in a <a>browsing context</a> is <dfn>associated</dfn> with a <code>Window</code> object. A
  <a>browsing context</a>'s <code>WindowProxy</code> object forwards everything to the
  <a>browsing context</a>'s <a>active document</a>'s <code>Window</code> object.

  <p class="note">
  In general, there is a 1-to-1 mapping from the <code>Window</code> object to the
  <code>Document</code> object. There are two exceptions. First, a <code>Window</code> can be reused
  for the presentation of a second <code>Document</code> in the same <a>browsing context</a>,
  such that the mapping is then 1-to-2. This occurs when a <a>browsing context</a> is <a>navigated</a> from the initial <code>about:blank</code> <code>Document</code>
  to another, with <a>replacement enabled</a>. Second, a <code>Document</code> can end up
  being reused for several <code>Window</code> objects when the <code>document.open()</code> method is used, such that the mapping is then
  many-to-1.
  </p>

  <p class="note">
  A <code>Document</code> does not necessarily have a <a>browsing context</a>
  associated with it. In particular, data mining tools are likely to never instantiate browsing
  contexts.
  </p>

  <hr />

  A <a>browsing context</a> can have a <dfn>creator browsing context</dfn>, the
  <a>browsing context</a> that was responsible for its creation. If a <a>browsing
  context</a> has a <a>parent browsing context</a>, then that is its <a>creator browsing
  context</a>. Otherwise, if the <a>browsing context</a> has an <a>opener browsing
  context</a>, then <em>that</em> is its <a>creator browsing context</a>. Otherwise, the
  <a>browsing context</a> has no <a>creator browsing context</a>.

  If a <a>browsing context</a> <var>A</var> has a <a>creator browsing
  context</a>, then the <code>Document</code> that was the <a>active document</a> of that
  <a>creator browsing context</a> at the time <var>A</var> was created is the
  <dfn>creator <code>Document</code></dfn>.

  <div class="impl">

  <dfn>Creating a browsing context</dfn>: When a <a>browsing context</a> is first created, it must be created with a single
  <code>Document</code> in its session history, whose <a>address</a> is <code>about:blank</code>, which is marked as being an <a>HTML document</a>, whose <a>character encoding</a> is UTF-8, and which is both <a>ready for post-load
  tasks</a> and <a>completely loaded</a> immediately, along with a new <code>Window</code>
  object that the <code>Document</code> is associated with. The <code>Document</code> must have a
  single child <code>html</code> node, which itself has two empty child nodes: a <code>head</code>
  element, and a <code>body</code> element. As soon as this <code>Document</code> is created, the
  user agent must <a>implement the sandboxing</a> for it. If the <a>browsing context</a>
  has a <a>creator <code>Document</code></a>, then the <a>browsing context</a>'s
  <code>Document</code>'s <a>referrer</a> must be set to
  <a>the address</a> of that <a>creator
  <code>Document</code></a> at the time of the <a>browsing context</a>'s creation.

  <p class="note">
  If the <a>browsing context</a> is created specifically to be immediately
  navigated, then that initial navigation will have <a>replacement enabled</a>.
  </p>

  The <a>origin</a> and <a>effective script origin</a> of the
  <code>about:blank</code> <code>Document</code> are set when the <code>Document</code> is created.
  If the new <a>browsing context</a> has a <a>creator browsing context</a>, then the
  <a>origin</a> of the <code>about:blank</code> <code>Document</code> is an <a>alias</a> to the <a>origin</a> of the <a>creator
  <code>Document</code></a> and the <a>effective script origin</a> of the
  <code>about:blank</code> <code>Document</code> is initially an <a>alias</a> to the <a>effective script origin</a> of the
  <a>creator <code>Document</code></a>. Otherwise, the <a>origin</a> of the
  <code>about:blank</code> <code>Document</code> is a globally unique identifier assigned when the
  new <a>browsing context</a> is created and the <a>effective script origin</a> of the
  <code>about:blank</code> <code>Document</code> is initially an <a>alias</a> to its <a>origin</a>.

  </div>

<h4 id="nested-browsing-contexts"><dfn>Nested browsing contexts</dfn></h4>

  Certain elements (for example, <code>iframe</code> elements) can instantiate further <a>browsing contexts</a>. These are called <dfn>nested browsing contexts</dfn>. If a browsing context <var>P</var> has a
  <code>Document</code> <var>D</var> with an element <var>E</var> that nests
  another browsing context <var>C</var> inside it, then <var>C</var> is said to be
  <dfn>nested through</dfn> <var>D</var>, and <var>E</var> is said to be the <dfn>browsing context container</dfn> of <var>C</var>.
  If the <a>browsing context container</a> element <var>E</var> is <a>in</a> the <code>Document</code> <var>D</var>, then <var>P</var> is
  said to be the <dfn>parent browsing context</dfn> of <var>C</var> and <var>C</var> is said to be a <dfn>child browsing context</dfn> of <var>P</var>.
  Otherwise, the <a>nested browsing context</a> <var>C</var> has no <a>parent
  browsing context</a>.

  A browsing context <var>A</var> is said to be an <dfn>ancestor</dfn> of a browsing context <var>B</var> if there exists a browsing
  context <var>A</var> that is a <a>child browsing context</a> of <var>A</var> and that is itself an <a>ancestor</a> of
  <var>B</var>, or if the browsing context <var>A</var> is the
  <a>parent browsing context</a> of <var>B</var>.

  A browsing context that is not a <a>nested browsing context</a> has no <a>parent
  browsing context</a>, and is the <dfn>top-level browsing context</dfn> of all the browsing
  contexts for which it is an <a>ancestor browsing context</a>.

  The transitive closure of <a>parent browsing contexts</a>
  for a <a>nested browsing context</a> gives the list of <a>ancestor browsing contexts</a>.

  The <dfn>list of the descendant browsing contexts</dfn> of a <code>Document</code> <var>d</var> is the (ordered) list returned by the following algorithm:

  <ol>

    <li>Let <var>list</var> be an empty list.</li>

    <li>

    For each <a>child browsing context</a> of <var>d</var> that is <a>nested through</a> an element that is <a>in the <code>Document</code></a> <var>d</var>, in the <a>tree
    order</a> of the elements nesting those <a>browsing
    contexts</a>, run these substeps:

    <ol>

      <li>Append that <a>child browsing context</a> to the list <var>list</var>.

      <li>Append the <a>list of the descendant browsing contexts</a> of the <a>active
      document</a> of that <a>child browsing context</a> to the list <var>list</var>.</li>

    </ol>

    </li>

    <li>Return the constructed <var>list</var>.</li>

  </ol>

  A <code>Document</code> is said to be <dfn>fully active</dfn> when it is the <a>active
  document</a> of its <a>browsing context</a>, and either its browsing context is a
  <a>top-level browsing context</a>, or it has a <a>parent browsing context</a> and the
  <code>Document</code> <a>through which</a> it is
  <a>nested</a> is itself <a>fully active</a>.

  Because they are nested through an element, <a>child browsing
  contexts</a> are always tied to a specific <code>Document</code> in their <a>parent browsing
  context</a>. User agents must not allow the user to interact with <a>child browsing contexts</a> of elements that are in <code>Document</code>s that are
  not themselves <a>fully active</a>.

  A <a>nested browsing context</a> can have a <a>seamless browsing context flag</a>
  set, if it is embedded through an <code>iframe</code> element with a <code>seamless</code> attribute.

  A <a>nested browsing context</a> can be put into a <dfn>delaying <code>load</code> events mode</dfn>. This is used when it is <a>navigated</a>, to <a>delay the load event</a> of the <a>browsing
  context container</a> before the new <code>Document</code> is created.

  The <dfn>document family</dfn> of a <a>browsing context</a> consists of the union of all
  the <code>Document</code> objects in that <a>browsing context</a>'s <a>session
  history</a> and the <a>document families</a> of all those
  <code>Document</code> objects. The <a>document family</a> of a <code>Document</code> object
  consists of the union of all the <a>document families</a> of the
  <a>browsing contexts</a> that are <a>nested through</a> the <code>Document</code> object.

<h5 id="navigating-nested-browsing-contexts-in-the-dom"><dfn>Navigating nested browsing contexts in the DOM</dfn></h5>

  <dl class="domintro">

    <dt><var>window</var> . <code>top</code></dt>

    <dd>

    Returns the <code>WindowProxy</code> for the <a>top-level browsing context</a>.

    </dd>

    <dt><var>window</var> . <code>parent</code></dt>

    <dd>

    Returns the <code>WindowProxy</code> for the <a>parent browsing context</a>.

    </dd>

    <dt><var>window</var> . <code>frameElement</code></dt>

    <dd>

    Returns the <code>Element</code> for the <a>browsing context container</a>.

    Returns null if there isn't one, and in cross-origin situations.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>top</code></dfn> IDL attribute on the <code>Window</code> object
  of a <code>Document</code> in a <a>browsing context</a> <var>b</var> must return
  the <code>WindowProxy</code> object of its <a>top-level browsing context</a> (which would be
  its own <code>WindowProxy</code> object if it was a <a>top-level browsing context</a>
  itself), if it has one, or its own <code>WindowProxy</code> object otherwise (e.g. if it was a
  detached <a>nested browsing context</a>).

  The <dfn><code>parent</code></dfn> IDL attribute on the <code>Window</code>
  object of a <code>Document</code> in a <a>browsing context</a> <var>b</var> must
  return the <code>WindowProxy</code> object of the <a>parent browsing context</a>, if there
  is one (i.e. if <var>b</var> is a <a>child browsing context</a>), or the
  <code>WindowProxy</code> object of the <a>browsing context</a> <var>b</var> itself,
  otherwise (i.e. if it is a <a>top-level browsing context</a> or a detached <a>nested
  browsing context</a>).

  The <dfn><code>frameElement</code></dfn> IDL attribute on the
  <code>Window</code> object of a <code>Document</code> <var>d</var>, on getting, must run
  the following algorithm:

  <ol>

    <li>If <var>d</var> is not a <code>Document</code> in a <a>nested browsing
    context</a>, return null and abort these steps.</li>

    <li>If the <a>browsing context container</a>'s <a>node document</a> does not have the
    <a>same</a> <a>effective script origin</a> as the
    <a>effective script origin</a> specified by the <a>entry settings object</a>, then
    return null and abort these steps.</li>

    <li>Return the <a>browsing context container</a> for <var>b</var>.</li>

  </ol>

  </div>

<h4 id="auxiliary-browsing-contexts"><dfn>Auxiliary browsing contexts</dfn></h4>

  It is possible to create new browsing contexts that are related to a <a>top-level browsing
  context</a> without being nested through an element. Such browsing contexts are called <dfn>auxiliary browsing contexts</dfn>. Auxiliary browsing contexts
  are always <a>top-level browsing contexts</a>.

  An <a>auxiliary browsing context</a> has an <dfn>opener browsing context</dfn>, which is
  the <a>browsing context</a> from which the <a>auxiliary browsing context</a> was
  created.

<h5 id="navigating-auxiliary-browsing-contexts-in-the-dom"><dfn>Navigating auxiliary browsing contexts in the DOM</dfn></h5>

  The <dfn><code>opener</code></dfn> IDL attribute on the <code>Window</code>
  object, on getting, must return the <code>WindowProxy</code> object of the <a>browsing
  context</a> from which the current <a>browsing context</a> was created (its <a>opener
  browsing context</a>), if there is one, if it is still available, and if the current
  <a>browsing context</a> has not <i>disowned its opener</i>;
  otherwise, it must return null. On setting, if the new value is null then the current
  <a>browsing context</a> must <dfn>disown its opener</dfn>; if
  the new value is anything else then the user agent must

    call the \[[DefineOwnProperty]] internal method of the <code>Window</code> object, passing the
    property name "<code>opener</code>" as the property key, and the Property Descriptor {
    \[[Value]]: <var>value</var>, \[[Writable]]: true, \[[Enumerable]]: true,
    \[[Configurable]]: true } as the property descriptor,

  where <var>value</var> is the new value.

<h4 id="secondary-browsing-contexts"><dfn>Secondary browsing contexts</dfn></h4>

  User agents may support <dfn>secondary browsing
  contexts</dfn>, which are <a>browsing contexts</a> that form part
  of the user agent's interface, apart from the main content area.

  <div class="impl">

<h4 id="security"><dfn>Security</dfn></h4>

  A <a>browsing context</a> <var>A</var> is <dfn>familiar
  with</dfn> a second <a>browsing context</a> <var>B</var> if one of the following
  conditions is true:

  <ul>

    <li>Either the <a>origin</a> of the <a>active document</a> of <var>A</var>
    is the <a>same</a> as the <a>origin</a> of the <a>active
    document</a> of <var>B</var>, or</li>

    <li>The browsing context <var>A</var> is a <a>nested browsing context</a> with a
    <a>top-level browsing context</a>, and its <a>top-level browsing context</a> is <var>B</var>, or</li>

    <li>The browsing context <var>B</var> is an <a>auxiliary browsing context</a> and
    <var>A</var> is <a>familiar with</a> <var>B</var>'s <a>opener
    browsing context</a>, or</li>

    <li>The browsing context <var>B</var> is not a <a>top-level browsing context</a>,
    but there exists an <a>ancestor browsing context</a> of <var>B</var> whose
    <a>active document</a> has the <a>same</a> <a>origin</a> as
    the <a>active document</a> of <var>A</var> (possibly in fact being <var>A</var> itself).</li>

  </ul>

  <hr />

  A <a>browsing context</a> <var>A</var> is <dfn>allowed to navigate</dfn> a
  second <a>browsing context</a> <var>B</var> if the following algorithm terminates
  positively:

  <ol>

    <li>If <var>A</var> is not the same <a>browsing context</a> as <var>B</var>, and <var>A</var> is not one of the <a>ancestor browsing contexts</a> of <var>B</var>, and <var>B</var>
    is not a <a>top-level browsing context</a>, and <var>A</var>'s <a>active
    document</a>'s <a>active sandboxing flag set</a> has its <a>sandboxed navigation
    browsing context flag</a> set, then abort these steps negatively.</li>

    <li>Otherwise, if <var>B</var> is a <a>top-level browsing context</a>, and is
    one of the <a>ancestor browsing contexts</a> of <var>A</var>, and <var>A</var>'s <a>node document</a>'s <a>active sandboxing
    flag set</a> has its <a>sandboxed top-level navigation browsing context flag</a> set,
    then abort these steps negatively.</li>

    <li>Otherwise, if <var>B</var> is a <a>top-level browsing context</a>, and is
    neither <var>A</var> nor one of the <a>ancestor
    browsing contexts</a> of <var>A</var>, and <var>A</var>'s
    <code>Document</code>'s <a>active sandboxing flag set</a> has its <a>sandboxed
    navigation browsing context flag</a> set, and <var>A</var> is not the <a>one
    permitted sandboxed navigator</a> of <var>B</var>, then abort these steps
    negatively.</li>

    <li>Otherwise, terminate positively!</li>

  </ol>

  <hr />

  An element has a <dfn>browsing context scope origin</dfn> if its <code>Document</code>'s
  <a>browsing context</a> is a <a>top-level browsing context</a> or if all of its
  <code>Document</code>'s <a>ancestor browsing contexts</a>
  all have <a>active documents</a> whose <a>origin</a> are the
  <a>same origin</a> as the element's <a>node document</a>'s <a>origin</a>. If an
  element has a <a>browsing context scope origin</a>, then its value is the
  <a>origin</a> of the element's <a>node document</a>.

  </div>

  <div class="impl">

<h4 id="groupings-of-browsing-contexts"><dfn>Groupings of browsing contexts</dfn></h4>

  Each <a>browsing context</a> is defined as having a list of one or more <dfn>directly
  reachable browsing contexts</dfn>. These are:

  <ul>

    <li>The <a>browsing context</a> itself.</li>

    <li>All the <a>browsing context</a>'s <a>child browsing
    contexts</a>.</li>

    <li>The <a>browsing context</a>'s <a>parent browsing context</a>.</li>

    <li>All the <a>browsing contexts</a> that have the <a>browsing
    context</a> as their <a>opener browsing context</a>.</li>

    <li>The <a>browsing context</a>'s <a>opener browsing context</a>.</li>

  </ul>

  The transitive closure of all the <a>browsing contexts</a> that
  are <a>directly reachable browsing contexts</a> forms a <dfn>unit of related browsing
  contexts</dfn>.

  Each <a>unit of related browsing contexts</a> is then further divided into the smallest
  number of groups such that every member of each group has an <a>active document</a> with an
  <a>effective script origin</a> that, through appropriate manipulation of the <code>document.domain</code> attribute, could be made to be the same as
  other members of the group, but could not be made the same as members of any other group. Each
  such group is a <dfn>unit of related similar-origin browsing contexts</dfn>.

  <p class="note">
  There is also at most one <a>event loop</a> per <a>unit of related
  similar-origin browsing contexts</a> (though several <a>units of related similar-origin browsing contexts</a> can
  have a shared <a>event loop</a>).
  </p>

  </div>

<h4 id="browsing-context-names"><dfn>Browsing context names</dfn></h4>

  Browsing contexts can have a <dfn>browsing context name</dfn>. By default, a browsing context
  has no name (its name is not set).

  A <dfn>valid browsing context name</dfn> is any string with at least one character that does
  not start with a U+005F LOW LINE character. (Names starting with an underscore are reserved for
  special keywords.)

  A <dfn>valid browsing context name or keyword</dfn> is any string that is either a <a>valid
  browsing context name</a> or that is an <a>ASCII case-insensitive</a> match for one of:
  <code>_blank</code>, <code>_self</code>, <code>_parent</code>, or <code>_top</code>.

  These values have different meanings based on whether the page is sandboxed or not, as
  summarized in the following (non-normative) table. In this table, "current" means the
  <a>browsing context</a> that the link or script is in, "parent" means the <a>parent
  browsing context</a> of the one the link or script is in, "master" means the nearest
  <a>ancestor browsing context</a> of the one the link or script is in that is not itself in a
  <a>seamless iframe</a>, "top" means the <a>top-level
  browsing context</a> of the one the link or script is in, "new" means a new <a>top-level
  browsing context</a> or <a>auxiliary browsing context</a> is to be created, subject to
  various user preferences and user agent policies, "none" means that nothing will happen, and
  "maybe new" means the same as "new" if the "<code>allow-popups</code>" keyword is also specified on the
  <code>sandbox</code> attribute (or if the user overrode the
  sandboxing), and the same as "none" otherwise.

  <table>
    <thead>
    <tr>
      <th rowspan=2>Keyword
      <th rowspan=2>Ordinary effect
      <th colspan=5>Effect in an <code>iframe</code> with...
    <tr>
      <th><code>seamless=""</code>
      <th><code>sandbox=""</code>
      <th><code>sandbox="" seamless=""</code>
      <th><code>sandbox="allow-top-navigation"</code>
      <th><code>sandbox="allow-top-navigation" seamless=""</code>

    <tbody>
    <tr>
      <td>none specified, for links and form submissions
      <td>current
      <td>master
      <td>current
      <td>master
      <td>current
      <td>master

    <tr>
      <td>empty string
      <td>current
      <td>master
      <td>current
      <td>master
      <td>current
      <td>master

    <tr>
      <td><code>_blank</code>
      <td>new
      <td>new
      <td>maybe new
      <td>maybe new
      <td>maybe new
      <td>maybe new

    <tr>
      <td><code>_self</code>
      <td>current
      <td>current
      <td>current
      <td>current
      <td>current
      <td>current

    <tr>
      <td><code>_parent</code> if there isn't a parent
      <td>current
      <td>current
      <td>current
      <td>current
      <td>current
      <td>current

    <tr>
      <td><code>_parent</code> if parent is also top
      <td>parent/top
      <td>parent/top
      <td>none
      <td>none
      <td>parent/top
      <td>parent/top

    <tr>
      <td><code>_parent</code> if there is one and it's not top
      <td>parent
      <td>parent
      <td>none
      <td>none
      <td>none
      <td>none

    <tr>
      <td><code>_top</code> if top is current
      <td>current
      <td>current
      <td>current
      <td>current
      <td>current
      <td>current

    <tr>
      <td><code>_top</code> if top is not current
      <td>top
      <td>top
      <td>none
      <td>none
      <td>top
      <td>top

    <tr>
      <td>name that doesn't exist
      <td>new
      <td>new
      <td>maybe new
      <td>maybe new
      <td>maybe new
      <td>maybe new

    <tr>
      <td>name that exists and is a descendant
      <td>specified descendant
      <td>specified descendant
      <td>specified descendant
      <td>specified descendant
      <td>specified descendant
      <td>specified descendant

    <tr>
      <td>name that exists and is current
      <td>current
      <td>current
      <td>current
      <td>current
      <td>current
      <td>current

    <tr>
      <td>name that exists and is an ancestor that is top
      <td>specified ancestor
      <td>specified ancestor
      <td>none
      <td>none
      <td>specified ancestor/top
      <td>specified ancestor/top

    <tr>
      <td>name that exists and is an ancestor that is not top
      <td>specified ancestor
      <td>specified ancestor
      <td>none
      <td>none
      <td>none
      <td>none

    <tr>
      <td>other name that exists with common top
      <td>specified
      <td>specified
      <td>none
      <td>none
      <td>none
      <td>none

    <tr>
      <td>name that exists with different top, if <a>familiar</a> and <a>one permitted sandboxed navigator</a>
      <td>specified
      <td>specified
      <td>specified
      <td>specified
      <td>specified
      <td>specified

    <tr>
      <td>name that exists with different top, if <a>familiar</a> but not <a>one permitted sandboxed navigator</a>
      <td>specified
      <td>specified
      <td>none
      <td>none
      <td>none
      <td>none

    <tr>
      <td>name that exists with different top, not <a>familiar</a>
      <td>new
      <td>new
      <td>maybe new
      <td>maybe new
      <td>maybe new
      <td>maybe new

  </table>

  <small>Most of the restrictions on sandboxed browsing contexts are applied by
  other algorithms, e.g. the <a>navigation</a> algorithm, not <a>the rules
  for choosing a browsing context given a browsing context name</a> given below.</small>

  <div class="impl">

  <hr />

  An algorithm is <dfn>allowed to show a popup</dfn> if any of the following conditions is
  true:

  <ul>

    <li>The <a>task</a> in which the algorithm is running is currently
    processing an <a>activation behavior</a> whose <code>click</code> event
    was <a>trusted</a>.</li>

    <li>

    The <a>task</a> in which the algorithm is running is currently
    running the event listener for a <a>trusted</a> event whose
    type is in the following list:

    <ul class="brief">
      <li><code>change</code></li>
      <li><code>click</code></li>
      <li><code>dblclick</code></li>
      <li><code>mouseup</code></li>
      <li><code>reset</code></li>
      <li><code>submit</code></li>
    </ul>

    </li>

    <li>

    The <a>task</a> in which the algorithm is running was <a>queued</a> by an algorithm that was <a>allowed to show a popup</a>,
    and the chain of such algorithms started within a user-agent defined timeframe.

    <p class="example">
  For example, if a user clicked a button, it might be acceptable for a popup
    to result from that after 4 seconds, but it would likely not be acceptable for a popup to result
    from that after 4 hours.
  </p>

    </li>

  </ul>

  <hr />

  <dfn>The rules for choosing a browsing context given a browsing context name</dfn> are as
  follows. The rules assume that they are being applied in the context of a <a>browsing
  context</a>, as part of the execution of a <a>task</a>.

  <ol>

    <li>

    If the given browsing context name is the empty string or <code>_self</code>, then
    the chosen browsing context must be the current one.

    If the given browsing context name is <code>_self</code>, then this is an
    <a>explicit self-navigation override</a>, which overrides the behavior of the
    <a>seamless browsing context flag</a> set by the <code>seamless</code> attribute on <code>iframe</code> elements.

    </li>

    <li>If the given browsing context name is <code>_parent</code>, then the chosen
    browsing context must be the <a><em>parent</em> browsing context</a> of the current one,
    unless there isn't one, in which case the chosen browsing context must be the current browsing
    context.</li>

    <li>If the given browsing context name is <code>_top</code>, then the chosen browsing
    context must be the <a>top-level browsing context</a> of the current one, if there is one,
    or else the current browsing context.</li>

    <li>

    If the given browsing context name is not <code>_blank</code> and there exists a
    browsing context whose <a>name</a> is the same as the given
    browsing context name, and the current browsing context is <a>familiar with</a> that
    browsing context, and the user agent determines that the two browsing contexts are related
    enough that it is ok if they reach each other, then that browsing context must be the chosen
    one. If there are multiple matching browsing contexts, the user agent should select one in some
    arbitrary consistent manner, such as the most recently opened, most recently focused, or more
    closely related.

    If the browsing context is chosen by this step to be the current browsing context, then this
    is also an <a>explicit self-navigation override</a>.

    </li>

    <li>

    Otherwise, a new browsing context is being requested, and what happens depends on the user
    agent's configuration and abilities &mdash; it is determined by the rules given for the first
    applicable option from the following list:

    <dl class="switch">

      <dt>If the algorithm is not <a>allowed to show a popup</a> and the
      user agent has been configured to not show popups (i.e. the user agent has a "popup blocker"
      enabled)</dt>

      <dd>

      There is no chosen browsing context. The user agent may inform the user that a popup has
      been blocked.

      </dd>

      <dt>If the current browsing context's <a>active document</a>'s
      <a>active sandboxing flag set</a> has the <a>sandboxed auxiliary navigation browsing
      context flag</a> set.</dt>

      <dd>

      Typically, there is no chosen browsing context.

      The user agent may offer to <a>create</a> a new <a>top-level browsing context</a> or reuse
      an existing <a>top-level browsing context</a>. If the user picks one of those options,
      then the designated browsing context must be the chosen one (the browsing context's name isn't
      set to the given browsing context name). The default behavior (if the user agent doesn't
      offer the option to the user, or if the user declines to allow a browsing context to be used)
      must be that there must not be a chosen browsing context.

      <p class="warning">If this case occurs, it means that an author has explicitly sandboxed the
      document that is trying to open a link.</p>

      </dd>

      <dt>If the user agent has been configured such that in this instance it will
      create a new browsing context, and the browsing context is being requested as part of <a>following a hyperlink</a> whose <a>link
      types</a> include the <code>noreferrer</code> keyword</dt>

      <dd>A new <a>top-level browsing context</a> must be <a>created</a>. If the given browsing
      context name is not <code>_blank</code>, then the new top-level browsing context's
      name must be the given browsing context name (otherwise, it has no name). The chosen browsing
      context must be this new browsing context. The creation of such a <a>browsing context</a>
      is <dfn>a new start for session storage</dfn>.

      <p class="note">
  If it is immediately <a>navigated</a>, then the
      navigation will be done with <a>replacement enabled</a>.
  </p></dd>

      <dt>If the user agent has been configured such that in this instance it will create a new
      browsing context, and the <code>noreferrer</code> keyword doesn't
      apply</dt>

      <dd>A new <a>auxiliary browsing context</a> must be created, with the <a>opener
      browsing context</a> being the current one. If the given browsing context name is not <code>_blank</code>, then the new auxiliary browsing context's name must be the given
      browsing context name (otherwise, it has no name). The chosen browsing context must be this new
      browsing context.

      <p class="note">
  If it is immediately <a>navigated</a>, then the
      navigation will be done with <a>replacement enabled</a>.
  </p></dd>

      <dt>If the user agent has been configured such that in this instance it will reuse the current
      browsing context</dt>

      <dd>The chosen browsing context is the current browsing context.</dd>

      <dt>If the user agent has been configured such that in this instance it will not find a
      browsing context</dt>

      <dd>There must not be a chosen browsing context.</dd>

    </dl>

    User agent implementors are encouraged to provide a way for users to configure the user agent
    to always reuse the current browsing context.

    If the current browsing context's <a>active document</a>'s <a>active sandboxing flag
    set</a> has both the <a>sandboxed navigation browsing context flag</a> and
    <a>sandbox propagates to auxiliary browsing contexts flag</a> set, and the chosen browsing
    context picked above, if any, is a new browsing context, then all the flags that are set in the
    current browsing context's <a>active document</a>'s <a>active sandboxing flag
    set</a> when the new browsing context is created must be set in the new browsing context's
    <a>popup sandboxing flag set</a>, and the current browsing context must be set as the new
    browsing context's <a>one permitted sandboxed navigator</a>.

    </li>

  </ol>

  </div>

<h3 id="the-window-object"><dfn>The <code>Window</code> object</dfn></h3>

  <pre class="idl" data-highlight="webidl">
    [PrimaryGlobal]
    /*sealed*/ interface <dfn>Window</dfn> : <a>EventTarget</a> {
    // the current browsing context
    [Unforgeable] readonly attribute <a>WindowProxy</a> <a>window</a>;
    [Replaceable] readonly attribute <a>WindowProxy</a> <a>self</a>;
    [Unforgeable] readonly attribute <a>Document</a> <a>document</a>;
    attribute DOMString <a>name</a>;
    [PutForwards=<a>href</a>, Unforgeable] readonly attribute <a>Location</a> <a>location</a>;
    readonly attribute <a>History</a> <a>history</a>;
    [Replaceable] readonly attribute <a>BarProp</a> <a>locationbar</a>;
    [Replaceable] readonly attribute <a>BarProp</a> <a>menubar</a>;
    [Replaceable] readonly attribute <a>BarProp</a> <a>personalbar</a>;
    [Replaceable] readonly attribute <a>BarProp</a> <a>scrollbars</a>;
    [Replaceable] readonly attribute <a>BarProp</a> <a>statusbar</a>;
    [Replaceable] readonly attribute <a>BarProp</a> <a>toolbar</a>;
    attribute DOMString <a>status</a>;
    void <a>close</a>();
    readonly attribute boolean <a>closed</a>;
    void <a>stop</a>();
    void <a>focus</a>();
    void <a>blur</a>();

    // other browsing contexts
    [Replaceable] readonly attribute <a>WindowProxy</a> <a>frames</a>;
    [Replaceable] readonly attribute unsigned long <a>length</a>;
    [Unforgeable] readonly attribute <a>WindowProxy</a> <a>top</a>;
    attribute any <a>opener</a>;
    [Replaceable] readonly attribute <a>WindowProxy</a> <a>parent</a>;
    readonly attribute <a>Element</a>? <a>frameElement</a>;
    <a>WindowProxy</a> <a>open</a>(optional DOMString url = "about:blank", optional DOMString target = "_blank", [TreatNullAs=EmptyString] optional DOMString features = "", optional boolean replace = false);
    <a>getter</a> <a>WindowProxy</a> (unsigned long index);
    <a>getter</a> object (DOMString name);

    // the user agent
    readonly attribute <a>Navigator</a> <a>navigator</a>;
    [Replaceable, SameObject] readonly attribute <a>External</a> <a>external</a>;
    readonly attribute <a>ApplicationCache</a> <a>applicationCache</a>;

    // user prompts
    void <a>alert</a>();
    void <a>alert</a>(DOMString message);
    boolean <a>confirm</a>(optional DOMString message = "");
    DOMString? <a>prompt</a>(optional DOMString message = "", optional DOMString default = "");
    void <a>print</a>();
    any <a>showModalDialog</a>(DOMString url, optional any argument); // deprecated
    };
    <a>Window</a> implements <a>GlobalEventHandlers</a>;
    <a>Window</a> implements <a>WindowEventHandlers</a>;

    callback <dfn>FrameRequestCallback</dfn> = void (<a>DOMHighResTimeStamp</a> time);
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>window</code></dt>
    <dt><var>window</var> . <code>frames</code></dt>
    <dt><var>window</var> . <code>self</code></dt>

    <dd>

    These attributes all return <var>window</var>.

    </dd>

    <dt><var>window</var> . <code>document</code></dt>

    <dd>

    Returns the <code>Document</code> associated with <var>window</var>.

    </dd>

    <dt><var>document</var> . <code>defaultView</code></dt>

    <dd>

    Returns the <code>Window</code> object of the <a>active document</a>.

    </dd>

  </dl>

  <div class="impl">

  The <code>Window</code> has an <dfn>HTTPS state</dfn>,
  which represents the security properties of the network channel used to deliver the
  <code>Document</code> with which the <code>Window</code> is associated. The value will be one of
  "<code>modern</code>", "<code>deprecated</code>", or "<code>none</code>". If it is not explicitly set, then its value is "<code>none</code>".

  The <dfn><code>window</code></dfn>, <dfn><code>frames</code></dfn>, and <dfn><code>self</code></dfn>
  IDL attributes must all return the <code>Window</code> object's <a>browsing context</a>'s
  <code>WindowProxy</code> object.

  The <dfn><code>document</code></dfn> IDL attribute must return
  <a>the <code>Window</code> object's newest <code>Document</code> object</a>.

  <p class="note">
  The <code>Document</code> object associated with a <code>Window</code> object can
  change in exactly one case: when the <a>navigate</a> algorithm <a>initializes a new <code>Document</code> object</a> for the first page loaded
  in a <a>browsing context</a>. In that specific case, the <code>Window</code> object of the
  original <code>about:blank</code> page is reused and gets a new <code>Document</code> object.
  </p>

  The <dfn><code>defaultView</code></dfn> IDL attribute of the
  <code>Document</code> interface must return the <code>Document</code>'s <a>browsing
  context</a>'s <code>WindowProxy</code> object, if there is one, or null otherwise.

  <hr />

  For historical reasons, <code>Window</code> objects must also have a writable, configurable,
  non-enumerable property named <dfn><code>HTMLDocument</code></dfn> whose value is the
  <code>Document</code> interface object.

  </div>

  <div class="impl">

<h4 id="security"><dfn>Security</dfn></h4>

  <p class="critical">This section describes a security model that is underdefined, imperfect, and
  does not match implementations. Work is ongoing to attempt to resolve this, but in the meantime,
  please do not rely on this section for precision. Implementors are urged to send their feedback on
  how cross-origin cross-global access to <code>Window</code> and <code>Location</code> objects
  should work. See <a>bug 20701</a>.

  User agents must throw a <code>SecurityError</code> exception whenever any
  properties of a <code>Window</code> object are accessed when the <a>incumbent settings
  object</a> specifies an <a>effective script origin</a> that is not the <a>same</a> as <a>the <code>Window</code> object's
  <code>Document</code></a>'s <a>effective script origin</a>, with the following
  exceptions:

  <ul>

    <li>The <code>location</code> attribute

    <li>The <code>postMessage()</code> method

    <li>The <code>window</code> attribute

    <li>The <code>frames</code> attribute

    <li>The <code>self</code> attribute

    <li>The <code>top</code> attribute

    <li>The <code>parent</code> attribute

    <li>The <code>opener</code> attribute

    <li>The <code>closed</code> attribute

    <li>The <code>close()</code> method

    <li>The <code>blur()</code> method

    <li>The <code>focus()</code> method

    <li>The <a>dynamic nested browsing context properties</a>

  </ul>

  When the <a>incumbent settings object</a> specifies an <a>effective script
  origin</a> that is different than a <a><code>Window</code>
  object's <code>Document</code></a>'s <a>effective script origin</a>, the user agent must
  act as if any changes to that <code>Window</code> object's properties, getters, setters, etc, were
  not present, and as if all the properties of that <code>Window</code> object had their \[[Enumerable]] attribute set to false.

  For members that return objects (including function objects), each distinct <a>effective
  script origin</a> that is not the same as the <code>Window</code> object's
  <code>Document</code>'s <a>effective script origin</a> must be provided with a separate set
  of objects. These objects must have the prototype chain appropriate for the script for which the
  objects are created (not those that would be appropriate for scripts whose <a>global
  object</a>, as specified by their <a>settings object</a>, is the <code>Window</code>
  object in question).

  <div class="example">
    For instance, if two frames containing <code>Document</code>s from different <a>origins</a> access the same <code>Window</code> object's <code>postMessage()</code> method, they will get distinct objects that
    are not equal.
  </div>

  </div>

<h4 id="apis-for-creating-and-navigating-browsing-contexts-by-name"><dfn>APIs for creating and navigating browsing contexts by name</dfn></h4>

  <dl class="domintro">

    <dt><var>window</var> = <var>window</var> . <code>open</code>( [ <var>url</var> [, <var>target</var> [, <var>features</var> [, <var>replace</var> ] ] ] ] )</dt>

    <dd>

    Opens a window to show <var>url</var> (defaults to <code>about:blank</code>), and
    returns it. The <var>target</var> argument gives the name of the new window. If a
    window exists with that name already, it is reused. The <var>replace</var> attribute,
    if true, means that whatever page is currently open in that window will be removed from the
    window's session history. The <var>features</var> argument can be used to influence the rendering of the new window.

    </dd>

    <dt><var>window</var> . <code>name</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the name of the window.

    Can be set, to change the name.

    </dd>

    <dt><var>window</var> . <code>close</code>()</dt>

    <dd>

    Closes the window.

    </dd>

    <dt><var>window</var> . <code>closed</code></dt>

    <dd>

    Returns true if the window has been closed, false otherwise.

    </dd>

    <dt><var>window</var> . <code>stop</code>()</dt>

    <dd>

    Cancels the document load.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>open()</code></dfn> method on <code>Window</code> objects
  provides a mechanism for <a>navigating</a> an existing <a>browsing
  context</a> or opening and navigating an <a>auxiliary browsing context</a>.

  When the method is invoked, the user agent must run the following steps:

  <ol>

    <li>Let <var>entry settings</var> be the <a>entry settings object</a> when the method
    was invoked.</li>

    <li>Let <var>url</var> be the first argument.</li>

    <li>Let <var>target</var> be the second argument.</li>

    <li>Let <var>features</var> be the third argument.</li>

    <li>Let <var>replace</var> be the fourth argument.</li>

    <li>Let <var>source browsing context</var> be the <a>responsible browsing context</a>
    specified by <var>entry settings</var>.</li>

    <li>If <var>target</var> is the empty string, let it be the string "<code>_blank</code>" instead.</li>

    <li>

    If the user has indicated a preference for which <a>browsing context</a> to navigate,
    follow these substeps:

    <ol>

      <li>Let <var>target browsing context</var> be the <a>browsing context</a> indicated by
      the user.</li>

      <li>If <var>target browsing context</var> is a new <a>top-level browsing context</a>,
      let the <var>source browsing context</var> be set as <var>target browsing context</var>'s
      <a>one permitted sandboxed navigator</a>.</li>

    </ol>

    <p class="example">
  For example, suppose there is a user agent that supports control-clicking a
    link to open it in a new tab. If a user clicks in that user agent on an element whose <code>onclick</code> handler uses the <code>window.open()</code> API to open a page in an iframe, but, while doing so,
    holds the control key down, the user agent could override the selection of the target browsing
    context to instead target a new tab.
  </p>

    Otherwise, apply <a>the rules for choosing a browsing context given a browsing context
    name</a> using <var>target</var> as the name and <var>source browsing context</var> as the
    context in which the algorithm is executed. If this results in there not being a chosen browsing
    context, then throw an <code>InvalidAccessError</code> exception and abort these steps.
    Otherwise, let <var>target browsing context</var> be the <a>browsing context</a> so
    obtained.

    </li>

    <li>If <var>target browsing context</var> was just created, either as part of <a>the rules
    for choosing a browsing context given a browsing context name</a> or due to the user
    indicating a preference for navigating a new <a>top-level browsing context</a>, then let
    <var>new</var> be true. Otherwise, let it be false.</li>

    <li>Interpret <var>features</var> as defined in the CSSOM View specification. [[!CSSOM-VIEW]]</li>

    <li>

    If <var>url</var> is the empty string, run the appropriate steps from the following list:

    <dl>

      <dt>If <var>new</var> is false</dt>

      <dd>Jump to the step labeled <i>end</i>.</dd>

      <dt>If <var>new</var> is true</dt>

      <dd>Let <var>resource</var> be the <a>URL</a> "<code>about:blank</code>".</dd>

    </dl>

    Otherwise, <a>resolve</a> <var>url</var> relative to the
    <a>API base URL</a> specified by <var>entry settings</var>, and let <var>resource</var> be
    the <a>resulting absolute URL</a>, if any. If the <a>resolve a URL</a> algorithm
    failed, then run one of the following two steps instead:

    <ul>

      <li>Let <var>resource</var> be a resource representing an inline error page.</li>

      <li>If <var>new</var> is false, jump to the step labeled <i>end</i>, otherwise, let
      <var>resource</var> be the <a>URL</a> "<code>about:blank</code>".</li>

    </ul>

    </li>

    <li>

    If <var>resource</var> is "<code>about:blank</code>" and <var>new</var> is true, <a>queue
    a task</a> to <a>fire a simple event</a> named <code>load</code> at
    <var>target browsing context</var>'s <code>Window</code> object, with <i>target override</i> set to <var>target browsing
    context</var>'s <a><code>Window</code> object's
    <code>Document</code></a> object.

    Otherwise, <a>navigate</a> <var>target browsing context</var>
    to <var>resource</var>, with <a>exceptions enabled</a>. If <var>new</var> is true, then
    <a>replacement must be enabled</a> also. The <a>source
    browsing context</a> is <var>source browsing context</var>.

    </li>

    <li><i>End</i>: Return the <code>WindowProxy</code> object of <var>target browsing
    context</var>.</li>

  </ol>

  <hr />

  The <dfn><code>name</code></dfn> attribute of the <code>Window</code> object
  must, on getting, return the current <a>name</a> of the
  <a>browsing context</a>, if one is set, or the empty string otherwise; and, on setting, set
  the <a>name</a> of the <a>browsing context</a> to the
  new value.

  <p class="note">
  The name <a>gets reset</a> when the browsing context is
  navigated to another domain.
  </p>

  <hr />

  The <dfn><code>close()</code></dfn> method on <code>Window</code>
  objects should, if all the following conditions are met, <a>close</a> the <a>browsing context</a> <var>A</var>:

  <ul class="brief">

    <li>The corresponding <a>browsing context</a> <var>A</var> is
    <a>script-closable</a>.</li>

    <li>The <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> is <a>familiar with</a> the <a>browsing context</a> <var>A</var>.</li>

    <li>The <a>responsible browsing context</a> specified by the
    <a>incumbent settings object</a> is <a>allowed to navigate</a> the <a>browsing
    context</a> <var>A</var>.</li>

  </ul>

  A <a>browsing context</a> is <dfn>script-closable</dfn> if it is an <a>auxiliary
  browsing context</a> that was created by a script (as opposed to by an action of the user), or
  if it is a <a>top-level browsing context</a> whose <a>session history</a> contains
  only one <code>Document</code>.

  The <dfn><code>closed</code></dfn> attribute on <code>Window</code>
  objects must return true if the <code>Window</code> object's <a>browsing context</a> has
  been <a>discarded</a>, and false otherwise.

  The <dfn><code>stop()</code></dfn> method on <code>Window</code>
  objects should, if there is an existing attempt to <a>navigate</a> the <a>browsing
  context</a> and that attempt is not currently running the <a>unload a document</a>
  algorithm, cancel that <a>navigation</a>; then, it must <a>abort</a> the <a>active document</a> of the <a>browsing
  context</a> of the <code>Window</code> object on which it was invoked.

  </div>

<h4 id="accessing-other-browsing-contexts"><dfn>Accessing other browsing contexts</dfn></h4>

  <dl class="domintro">

    <dt><var>window</var> . <code>length</code></dt>

    <dd>

    Returns the number of <a>child browsing
    contexts</a>.

    </dd>

    <dt><var>window</var>[<var>index</var>]</dt>

    <dd>

    Returns the indicated <a>child browsing context</a>.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>length</code></dfn> IDL attribute on the <code>Window</code>
  interface must return the number of <a>child browsing
  contexts</a> that are <a>nested through</a>
  elements that are <a>in the <code>Document</code></a> that is the
  <a>active document</a> of that <code>Window</code> object, if that <code>Window</code>'s
  <a>browsing context</a> shares the same <a>event loop</a> as the <a>responsible
  document</a> specified by the <a>entry settings object</a> accessing the IDL attribute;
  otherwise, it must return zero.

  The <a>supported property indices</a> on the <code>Window</code> object at any instant
  are the numbers in the range 0 .. <a><var>n</var>-1</a>, where <var>n</var> is the number returned by the <code>length</code> IDL
  attribute. If <var>n</var> is zero then there are no <a>supported property
  indices</a>.

  To <dfn>determine the value of an indexed property</dfn> <var>index</var> of a <code>Window</code> object, the user agent must return the
  <code>WindowProxy</code> object of the <var>index</var>th <a>child browsing
  context</a> of the <code>Document</code> that is <a>nested through</a> an element that is <a>in the
  <code>Document</code></a>, sorted in the order that the elements nesting those <a>browsing contexts</a> were most recently inserted into the
  <code>Document</code>, the <code>WindowProxy</code> object of the most recently inserted
  <a>browsing context container</a>'s <a>nested browsing context</a> being last.

  These properties are the <dfn>dynamic nested browsing context properties</dfn>.

  </div>

<h4 id="named-access-on-the-window-object"><dfn>Named access on the <code>Window</code> object</dfn></h4>

  <dl class="domintro">

    <dt><var>window</var>[<var>name</var>]</dt>

    <dd>

    Returns the indicated element or collection of elements.

    As a general rule, relying on this will lead to brittle code. Which IDs end up mapping to
    this API can vary over time, as new features are added to the Web platform, for example. Instead
    of this, use <code>document.getElementById()</code> or <code>document.querySelector()</code>.

    </dd>

  </dl>

  <div class="impl">

  The <code>Window</code> interface <a>supports named
  properties</a>. The <a>supported property names</a> at any moment consist of the
  following, in <a>tree order</a>, ignoring later duplicates:

  <ul>

    <li>the <a>browsing context name</a> of any <a>child browsing context</a> of the
    <a>active document</a> whose name is not the empty string,</li>

    <li>the value of the <code>name</code> content attribute for all <code>a</code>,
    <code>applet</code>, <code>area</code>, <code>embed</code>, <code>form</code>,
    <code>frameset</code>, <code>img</code>, and <code>object</code> elements in the <a>active
    document</a> that have a non-empty <code>name</code> content attribute, and</li>

    <li>the value of the <code>id</code> content attribute of any <a>HTML element</a> in the <a>active document</a> with a non-empty <code>id</code> content attribute.</li>

  </ul>

  The properties exposed in this way must be <a>unenumerable</a>.

  To <a>determine the value of a named property</a> <var>name</var> when <dfn>the <code>Window</code> object is indexed for property
  retrieval</dfn>, the user agent must return the value obtained using the following steps:

  <ol>

    <li>

    Let <var>objects</var> be the list of <a>named objects</a> with the name <var>name</var>
    in the <a>active document</a>.

    <p class="note">
  There will be at least one such object, by definition.

    </li>

    <li>

    If <var>objects</var> contains a <a>nested browsing context</a>, then return
    the <code>WindowProxy</code> object of the <a>nested browsing context</a> corresponding to
    the first <a>browsing context container</a> in <a>tree order</a> whose
    <a>browsing context</a> is in <var>objects</var>, and abort these steps.

    </li>

    <li>

    Otherwise, if <var>objects</var> has only one element, return that element and
    abort these steps.

    </li>

    <li>

    Otherwise return an <code>HTMLCollection</code> rooted at the <code>Document</code> node,
    whose filter matches only <a>named objects</a> with
    the name <var>name</var>. (By definition, these will all be elements.)

    </li>

  </ol>

  <dfn>Named objects</dfn> with the name <var>name</var>, for the purposes of the above algorithm, are those that are either:

  <ul>

    <li><a>child browsing contexts</a> of the <a>active
    document</a> whose name is <var>name</var>,</li>

    <li><code>a</code>, <code>applet</code>, <code>area</code>, <code>embed</code>,
    <code>form</code>, <code>frameset</code>, <code>img</code>, or <code>object</code> elements that
    have a <code>name</code> content attribute whose value is <var>name</var>, or</li>

    <li><a>HTML elements</a> that have an <code>id</code> content attribute
    whose value is <var>name</var>.</li>

  </ul>

  </div>

  <div class="impl">

<h4 id="garbage-collection-and-browsing-contexts"><dfn>Garbage collection and browsing contexts</dfn></h4>

  A <a>browsing context</a> has a strong reference to each of its <code>Document</code>s
  and its <code>WindowProxy</code> object, and the user agent itself has a strong reference to its
  <a>top-level browsing contexts</a>.

  A <code>Document</code> has a strong reference to its <code>Window</code> object.

  <p class="note">A <code>Window</code> object <a>has a strong
  reference</a> to its <code>Document</code> object through its <code>document</code> attribute. Thus, references from other scripts to either of
  those objects will keep both alive. Similarly, both <code>Document</code> and <code>Window</code>
  objects have <a>implied strong references</a> to the
  <code>WindowProxy</code> object.
  </p>

  Each <a>script</a> has a strong reference to its <a>settings
  object</a>, and each <a>environment settings object</a> has strong references to its
  <a>global object</a>, <a>responsible browsing context</a>, and <a>responsible
  document</a> (if any).

  When a <a>browsing context</a> is to <dfn>discard a <code>Document</code></dfn>, the user
  agent must run the following steps:

  <ol>

    <li>Set the <code>Document</code>'s <i>salvageable</i> state to false.</li>

    <li>Run any <a>unloading document cleanup steps</a> for the <code>Document</code> that
    are defined by this specification and <a>other applicable specifications</a>.</li>

    <li><a>Abort the <code>Document</code></a>.</li>

    <li>Remove any <a>tasks</a> associated with the
    <code>Document</code> in any <a>task source</a>, without running those tasks.</li>

    <li><a>Discard</a> all the <a>child browsing contexts</a> of the <code>Document</code>.</li>

    <li>Lose the strong reference from the <code>Document</code>'s <a>browsing context</a>
    to the <code>Document</code>.</li>

  </ol>

  <p class="note">
  Whenever a <code>Document</code> object is <a>discarded</a>, it is also removed from the list of <a>the worker's
  <code>Document</code>s</a> of each worker whose list contains that <code>Document</code>.
  </p>

  When <dfn>a <em>browsing context</em> is discarded</dfn>, the strong reference from the user
  agent itself to the <a>browsing context</a> must be severed, and all the
  <code>Document</code> objects for all the entries in the <a>browsing context</a>'s session
  history must be <a>discarded</a> as well.

  User agents may <a>discard</a> <a>top-level browsing contexts</a> at any time (typically, in
  response to user requests, e.g. when a user force-closes a window containing one or more <a>top-level browsing contexts</a>). Other <a>browsing contexts</a> must be discarded once their
  <code>WindowProxy</code> object is eligible for garbage collection.

  </div>

<h4 id="closing-browsing-contexts"><dfn>Closing browsing contexts</dfn></h4>

  When the user agent is required to <dfn>close a browsing context</dfn>, it must run the
  following steps:

  <ol>

    <li>Let <var>specified browsing context</var> be the <a>browsing context</a>
    being closed.</li>

    <li><a>Prompt to unload</a> the <a>active
    document</a> of the <var>specified browsing context</var>. If the user <a>refused
    to allow the document to be unloaded</a>, then abort these steps.</li>

    <li><a>Unload</a> the <a>active document</a> of the <var>specified browsing context</var> with the <var>recycle</var> parameter set to
    false.</li>

    <li>Remove the <var>specified browsing context</var> from the user interface (e.g.
    close or hide its tab in a tabbed browser).</li>

    <li><a>Discard</a> the <var>specified
    browsing context</var>.</li>

  </ol>

  User agents should offer users the ability to arbitrarily <a>close</a> any <a>top-level browsing context</a>.

<h4 id="browser-interface-elements"><dfn>Browser interface elements</dfn></h4>

  To allow Web pages to integrate with Web browsers, certain Web browser interface elements are
  exposed in a limited way to scripts in Web pages.

  Each interface element is represented by a <code>BarProp</code> object:

  <pre class="idl" data-highlight="webidl">
  interface <dfn>BarProp</dfn> {
  readonly attribute boolean <a>visible</a>;
  };
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>locationbar</code> . <code>visible</code></dt>
    <dd>
    Returns true if the location bar is visible; otherwise, returns false.
    </dd>

    <dt><var>window</var> . <code>menubar</code> . <code>visible</code></dt>
    <dd>
    Returns true if the menu bar is visible; otherwise, returns false.
    </dd>

    <dt><var>window</var> . <code>personalbar</code> . <code>visible</code></dt>

    <dd>
    Returns true if the personal bar is visible; otherwise, returns false.
    </dd>

    <dt><var>window</var> . <code>scrollbars</code> . <code>visible</code></dt>
    <dd>
    Returns true if the scroll bars are visible; otherwise, returns false.
    </dd>

    <dt><var>window</var> . <code>statusbar</code> . <code>visible</code></dt>
    <dd>
    Returns true if the status bar is visible; otherwise, returns false.
    </dd>

    <dt><var>window</var> . <code>toolbar</code> . <code>visible</code></dt>
    <dd>
    Returns true if the toolbar is visible; otherwise, returns false.
    </dd>

  </dl>

  <div class="impl">

  The <dfn>visible</dfn> attribute, on getting, must return either
  true or a value determined by the user agent to most accurately represent the visibility state of
  the user interface element that the object represents, as described below.

  The following <code>BarProp</code> objects exist for each <code>Document</code> object in a
  <a>browsing context</a>. Some of the user interface elements represented by these objects
  might have no equivalent in some user agents; for those user agents, except when otherwise
  specified, the object must act as if it was present and visible (i.e. its <code>visible</code> attribute must return true).

  <dl>

    <dt><dfn>The location bar <code>BarProp</code> object</dfn></dt>

    <dd>Represents the user interface element that contains a control that displays the
    <a>URL</a> of the <a>active document</a>, or some similar interface concept.</dd>

    <dt><dfn>The menu bar <code>BarProp</code> object</dfn></dt>

    <dd>Represents the user interface element that contains a list of commands in menu form, or some
    similar interface concept.</dd>

    <dt><dfn>The personal bar <code>BarProp</code> object</dfn></dt>

    <dd>Represents the user interface element that contains links to the user's favorite pages, or
    some similar interface concept.</dd>

    <dt><dfn>The scrollbar <code>BarProp</code> object</dfn></dt>

    <dd>Represents the user interface element that contains a scrolling mechanism, or some similar
    interface concept.</dd>

    <dt><dfn>The status bar <code>BarProp</code> object</dfn></dt>

    <dd>Represents a user interface element found immediately below or after the document, as
    appropriate for the user's media, which typically provides information about ongoing network
    activity or information about elements that the user's pointing device is current indicating. If
    the user agent has no such user interface element, then the object may act as if the
    corresponding user interface element was absent (i.e. its <code>visible</code> attribute may return false).</dd>

    <dt><dfn>The toolbar <code>BarProp</code> object</dfn></dt>

    <dd>Represents the user interface element found immediately above or before the document, as
    appropriate for the user's media, which typically provides <a>session history</a> traversal
    controls (back and forward buttons, reload buttons, etc). If the user agent has no such user
    interface element, then the object may act as if the corresponding user interface element was
    absent (i.e. its <code>visible</code> attribute may return
    false).</dd>

  </dl>

  The <dfn><code>locationbar</code></dfn> attribute must return
  <a>the location bar <code>BarProp</code> object</a>.

  The <dfn><code>menubar</code></dfn> attribute must return <a>the
  menu bar <code>BarProp</code> object</a>.

  The <dfn><code>personalbar</code></dfn> attribute must return
  <a>the personal bar <code>BarProp</code> object</a>.

  The <dfn><code>scrollbars</code></dfn> attribute must return
  <a>the scrollbar <code>BarProp</code> object</a>.

  The <dfn><code>statusbar</code></dfn> attribute must return
  <a>the status bar <code>BarProp</code> object</a>.

  The <dfn><code>toolbar</code></dfn> attribute must return <a>the
  toolbar <code>BarProp</code> object</a>.

  <hr />

  For historical reasons, the <dfn><code>status</code></dfn> attribute
  on the <code>Window</code> object must, on getting, return the last string it was set to, and on
  setting, must set itself to the new value. When the <code>Window</code> object is created, the
  attribute must be set to the empty string. It does not do anything else.

  </div>

  <div class="impl">

<h4 id="the-windowproxy-object"><dfn>The <code>WindowProxy</code> object</dfn></h4>

  <pre class="idl" data-highlight="webidl">
    [NoInterfaceObject]
    interface <a>WindowProxy</a> : <a>Window</a> {};
  </pre>

  As mentioned earlier, each <a>browsing context</a> has a
  <dfn><code>WindowProxy</code></dfn> object. This object is unusual in that all operations that
  would be performed on it must be performed on the <code>Window</code> object of the <a>browsing
  context</a>'s <a>active document</a> instead. It is thus indistinguishable from that
  <code>Window</code> object in every way until the <a>browsing context</a> is navigated.

  There is no <code>WindowProxy</code> interface object.

  <p class="note">
  The <code>WindowProxy</code> object allows scripts to act as if each
  <a>browsing context</a> had a single <code>Window</code> object, while still keeping
  separate <code>Window</code> objects for each <code>Document</code>.
  </p>

  <div class="example">
    In the following example, the variable <var>x</var> is set to the
    <code>WindowProxy</code> object returned by the <code>window</code> accessor
    on the global object. All of the expressions following the assignment return true, because in
    every respect, the <code>WindowProxy</code> object acts like the underlying <code>Window</code>
    object.

    <pre highlight="javascript">
      var x = window;
      x instanceof Window; // true
      x === this; // true
    </pre>
  </div>

  </div>

<h3 id="origin"><dfn>Origin</dfn></h3>

  Origins are the fundamental currency of the Web's security model. Two actors in the Web
  platform that share an origin are assumed to trust each other and to have the same authority.
  Actors with differing origins are considered potentially hostile versus each other, and are
  isolated from each other to varying degrees.

  <p class="example">
  For example, if Example Bank's Web site, hosted at <code>bank.example.com</code>, tries to examine the DOM of Example Charity's Web site, hosted
  at <code>charity.example.org</code>, a <code>SecurityError</code> exception will be
  raised.
  </p>

  <hr />

  The <dfn>origin</dfn> of a resource and the
  <dfn>effective script origin</dfn> of a resource are each one of the
  following:

  <dl>

    <dt>Opaque identifiers

    <dd>

    Internal values, with no serialization, for which the only meaningful operation is testing
    for equality.

    <dt>Tuples

    <dd>

    Tuples consisting of a scheme component, a host component, a port component, and optionally
    extra data.

    <p class="note">
  The extra data could include the certificate of the site when using encrypted
    connections, to ensure that if the site's secure certificate changes, the origin is considered to
    change as well.
  </p>

    <dt>Aliases

    <dd>

    A reference to another <a>origin</a> or <a>effective script origin</a>.

  </dl>

  <div class="impl">

  An <a>origin</a> or <a>effective script origin</a> can be defined as an <dfn>alias</dfn> to another <a>origin</a> or <a>effective script
  origin</a>. The value of the <a>origin</a> or <a>effective script origin</a> is
  then the value of the <a>origin</a> or <a>effective script origin</a> to which it is
  an alias.

  These characteristics are defined as follows:

  <dl>

    <dt>For URLs</dt>

    <dd>

    The <a>origin</a> and <a>effective script origin</a> of the <a>URL</a> are
    the origin defined in <cite>The Web Origin Concept</cite>. [[!ORIGIN]]

    </dd>

    <dt>For <code>Document</code> objects</dt>

    <dd>

    <dl class="switch">

      <dt>If a <code>Document</code>'s <a>active sandboxing flag set</a> has
      its <a>sandboxed origin browsing context flag</a> set</dt>

      <dd>

      The <a>origin</a> is a globally unique identifier assigned when the
      <code>Document</code> is created.

      The <a>effective script origin</a> is initially an <a>alias</a> to the <a>origin</a> of the
      <code>Document</code>.

      </dd>

      <dt>If a <code>Document</code> was served over the network and has an address that uses a URL
      scheme with a server-based naming authority</dt>

      <dd>

      The <a>origin</a> is an <a>alias</a> to the
      <a>origin</a> of <a>the <code>Document</code>'s address</a>.

      The <a>effective script origin</a> is initially an <a>alias</a> to the <a>origin</a> of the
      <code>Document</code>.

      </dd>

      <dt>If a <code>Document</code> was generated from a <a><code>data:</code> URL</a> found in another <code>Document</code> or in a
      script</dt>

      <dd>

      The <a>origin</a> is an <a>alias</a> to the
      <a>origin</a> specified by the <a>incumbent settings object</a> when the <a>navigate</a>
      algorithm was invoked, or, if no <a>script</a> was involved, of
      the <a>node document</a> of the element that initiated the <a>navigation</a> to that <a>URL</a>.

      The <a>effective script origin</a> is initially an <a>alias</a> to the <a>effective script origin</a> of that
      same <a>environment settings object</a> or <code>Document</code>.

      </dd>

      <dt>If a <code>Document</code> is the initial "<code>about:blank</code>" document</dt>

      <dd>

      The <a>origin</a> and <a>effective script origin</a> of the
      <code>Document</code> are <a>those it was assigned when its
      browsing context was created</a>.

      </dd>

      <dt>If a <code>Document</code> was created as part of the processing for <a><code>javascript:</code> URLs</a></dt>

      <dd>

      The <a>origin</a> is an <a>alias</a> to the
      <a>origin</a> of the <a>active document</a> of the <a>browsing context</a>
      being navigated when the <a>navigate</a> algorithm was invoked.

      The <a>effective script origin</a> is initially an <a>alias</a> to the <a>effective script origin</a> of that
      same <code>Document</code>.

      </dd>

      <dt>If a <code>Document</code> is <a>an <code>iframe</code> <code>srcdoc</code> document</a></dt>

      <dd>

      The <a>origin</a> of the <code>Document</code> is an <a>alias</a> to the <a>origin</a> of the
      <code>Document</code>'s <a>browsing context</a>'s <a>browsing context
      container</a>'s <a>node document</a>.

      The <a>effective script origin</a> is initially an <a>alias</a> to the <a>effective script origin</a> of the
      <code>Document</code>'s <a>browsing context</a>'s <a>browsing context
      container</a>'s <a>node document</a>.

      </dd>

      <dt>If a <code>Document</code> was obtained in some other manner (e.g. a <a><code>data:</code> URL</a> typed in by the user or that was returned as the
      location of a redirect, a <code>Document</code> created using the <code>createDocument()</code> API, etc)</dt>

      <dd>

      The default behavior as defined in the DOM standard applies. [[!DOM]].

      <p class="note">
  The <a>origin</a> is a globally unique identifier assigned when the
      <code>Document</code> is created, and the <a>effective script origin</a> is initially an
      <a>alias</a> to the <a>origin</a> of the
      <code>Document</code>.
  </p>

      </dd>

    </dl>

    <p class="note">
  The <a>effective script origin</a> of a <code>Document</code> can be
    manipulated using the <code>document.domain</code> IDL
    attribute.
  </p>

    </dd>

    <dt>For images of <code>img</code> elements</dt>

    <dd>

    <dl class="switch">

      <dt>If the image data is <a>CORS-cross-origin</a></dt>

      <dd>The <a>origin</a> is a globally unique identifier assigned when the image is
      created.</dd>

      <dt>If the image data is <a>CORS-same-origin</a></dt>

      <dd>The <a>origin</a> is an <a>alias</a> to the
      <a>origin</a> of the <code>img</code> element's <a>node document</a>.</dd>

    </dl>

    Images do not have an <a>effective script origin</a>.

    </dd>

    <dt>For <code>audio</code> and <code>video</code> elements</dt>

    <dd>

    <dl class="switch">

      <dt>If the <a>media data</a> is <a>CORS-cross-origin</a></dt>

      <dd>The <a>origin</a> is a globally unique identifier assigned when the <a>media
      data</a> is fetched.</dd>

      <dt>If the <a>media data</a> is <a>CORS-same-origin</a></dt>

      <dd>The <a>origin</a> is an <a>alias</a> to the
      <a>origin</a> of the <a>media element</a>'s <a>node document</a>.</dd>

    </dl>

    <a>Media elements</a> do not have an <a>effective script
    origin</a>.

    </dd>

    <dt>For fonts</dt>

    <dd>

    The <a>origin</a> of a downloadable Web font is an <a>alias</a> to the <a>origin</a> of the <a>absolute
    URL</a> used to obtain the font (after any redirects). [[!CSS-FONTS-3]]
    [[!CSS-FONT-LOADING-3]]

    The <a>origin</a> of a locally installed system font is an <a>alias</a> to the <a>origin</a> of the
    <code>Document</code> in which that font is being used.

    Fonts do not have an <a>effective script origin</a>.

    </dd>

  </dl>

  Other specifications can override the above definitions by themselves specifying the origin of
  a particular <a>URL</a>, <code>Document</code>, image, <a>media element</a>, or
  font.

  <hr />

  The <dfn>Unicode serialization of an origin</dfn> is the string obtained by applying the
  following algorithm to the given <a>origin</a>:

  <ol>

    <li>If the <a>origin</a> in question is not a scheme/host/port tuple, then return the
    literal string "<code>null</code>" and abort these steps.</li>

    <li>Otherwise, let <var>result</var> be the scheme part of the <a>origin</a>
    tuple.</li>

    <li>Append the string "<code>://</code>" to <var>result</var>.</li>

    <li>Apply the <a>domain to Unicode</a> algorithm to each component of the host
    part of the <a>origin</a> tuple, and append the results &mdash; each component, in the same
    order, separated by U+002E FULL STOP characters (.) &mdash; to <var>result</var>. [[!URL]]</li>

    <li>If the port part of the <a>origin</a> tuple gives a port that is different from the
    default port for the protocol given by the scheme part of the <a>origin</a> tuple, then
    append a U+003A COLON character (:) and the given port, in base ten, to <var>result</var>.</li>

    <li>Return <var>result</var>.</li>

  </ol>

  The <dfn>ASCII serialization of an origin</dfn> is the string obtained by applying the
  following algorithm to the given <a>origin</a>:

  <ol>

    <li>If the <a>origin</a> in question is not a scheme/host/port tuple, then return the
    literal string "<code>null</code>" and abort these steps.</li>

    <li>Otherwise, let <var>result</var> be the scheme part of the <a>origin</a>
    tuple.</li>

    <li>Append the string "<code>://</code>" to <var>result</var>.</li>

    <li>

    Apply the <a>domain to ASCII</a> algorithm to each component of the host part of
    the <a>origin</a> tuple, and append the results &mdash; each component, in the same order,
    separated by U+002E FULL STOP characters (.) &mdash; to <var>result</var>. [[!URL]]

    If the <a>domain to ASCII</a> algorithm returns failure, e.g. because a component is too long or because it contains
    invalid characters, then throw a <code>SecurityError</code> exception and abort these steps.

    </li>

    <li>If the port part of the <a>origin</a> tuple gives a port that is different from the
    default port for the protocol given by the scheme part of the <a>origin</a> tuple, then
    append a U+003A COLON character (:) and the given port, in base ten, to <var>result</var>.</li>

    <li>Return <var>result</var>.</li>

  </ol>

  Two <a>origins</a> are said to be the <dfn>same origin</dfn> if the
  following algorithm returns true:

  <ol>

    <li>Let <var>A</var> be the first <a>origin</a> being compared, and <var>B</var> be the second <a>origin</a> being compared.</li>

    <li>If <var>A</var> and <var>B</var> are both opaque identifiers, and their
    value is equal, then return true.</li>

    <li>Otherwise, if either <var>A</var> or <var>B</var> or both are opaque
    identifiers, return false.</li>

    <li>If <var>A</var> and <var>B</var> have scheme components that are not
    identical, return false.</li>

    <li>If <var>A</var> and <var>B</var> have host components that are not
    identical, return false.</li>

    <li>If <var>A</var> and <var>B</var> have port components that are not
    identical, return false.</li>

    <li>If either <var>A</var> or <var>B</var> have additional data, but that
    data is not identical for both, return false.</li>

    <li>Return true.</li>

  </ol>

  </div>

<h4 id="relaxing-the-same-origin-restriction"><dfn>Relaxing the same-origin restriction</dfn></h4>

  <dl class="domintro">

    <dt><var>document</var> . <code>domain</code> [ = <var>domain</var> ]</dt>

    <dd>

    Returns the current domain used for security checks.

    Can be set to a value that removes subdomains, to change the <a>effective script
    origin</a> to allow pages on other subdomains of the same domain (if they do the same thing)
    to access each other. (Can't be set in sandboxed <code>iframe</code>s.)

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>domain</code></dfn> attribute on
  <code>Document</code> objects must be initialized to <a>the document's domain</a>, if it has
  one, and the empty string otherwise. If <a>the document's domain</a> starts with a U+005B
  LEFT SQUARE BRACKET character ([) and ends with a U+005D RIGHT SQUARE BRACKET character (]), it is
  an IPv6 address; these square brackets must be omitted when initializing the attribute's
  value.

  On getting, the attribute must return its current value, unless the <code>Document</code> has
  no <a>browsing context</a>, in which case it must return the empty string.

  On setting, the user agent must run the following algorithm:

  <ol>

    <li>

    If the <code>Document</code> has no <a>browsing context</a>, throw a
    <code>SecurityError</code> exception and abort these steps.

    </li>

    <li>

    If the <code>Document</code>'s <a>active sandboxing flag set</a> has its
    <a>sandboxed <code>document.domain</code> browsing context
    flag</a> set, throw a <code>SecurityError</code> exception and abort these steps.

    </li>

    <li>

    If the new value is an IPv4 or IPv6 address, let <var>new value</var> be the new
    value.

    Otherwise, <a>strictly split</a> the new value on
    U+002E FULL STOP characters (.), apply the <a>domain to ASCII</a> algorithm to each
    returned token, and let <var>new value</var> be the result of concatenating the
    results of applying that algorithm to each token, in the same order, separated by U+002E FULL
    STOP characters (.). [[!URL]]

    If the <a>domain to ASCII</a> algorithm returns failure, e.g. because a component is too long or because it contains
    invalid characters, then throw a <code>SecurityError</code> exception and abort these steps.

    </li>

    <li>

    If <var>new value</var> is not exactly equal to the current value of the <code>document.domain</code> attribute, then run these substeps:

    <ol>

      <li>

      If the current value is an IPv4 or IPv6 address, throw a <code>SecurityError</code>
      exception and abort these steps.

      </li>

      <li>

      If <var>new value</var>, prefixed by a U+002E FULL STOP (.), does not exactly
      match the end of the current value, throw a <code>SecurityError</code> exception and abort
      these steps.

      <p class="note">
  If the <var>new value</var> is an IPv4 or IPv6 address, it cannot
      match the <var>new value</var> in this way and thus an exception will be thrown
      here.
  </p>

      </li>

      <li>

      If <var>new value</var> matches a suffix in the Public Suffix List, or, if <var>new value</var>, prefixed by a U+002E FULL STOP (.), matches the end of a suffix in
      the Public Suffix List, then throw a <code>SecurityError</code> exception and abort these
      steps. [[!PSL]]

      Suffixes must be compared in an <a>ASCII case-insensitive</a> manner, after applying
      the <a>domain to ASCII</a> algorithm to their individual components, . [[!URL]]

      </li>

    </ol>

    </li>

    <li>Release the <a>storage mutex</a>.</li>

    <li>

    Set the attribute's value to <var>new value</var>.

    </li>

    <li>

    If the <a>effective script origin</a> of the <code>Document</code> is an <a>alias</a>, set it to the value of the <a>effective script
    origin</a> (essentially de-aliasing the <a>effective script origin</a>).

    </li>

    <li>

    If <var>new value</var> is not the empty string, then run these substeps:

    <ol>

      <li>

      Set the host part of the <a>effective script origin</a> tuple of the
      <code>Document</code> to <var>new value</var>.

      </li>

      <li>

      Set the port part of the <a>effective script origin</a> tuple of the
      <code>Document</code> to "manual override" (a value that, for the purposes of <a>comparing origins</a>, is identical to "manual override" but not
      identical to any other value).

      </li>

    </ol>

    </li>

  </ol>

  The <dfn>domain</dfn> of a <code>Document</code> is the host part
  of the document's <a>origin</a>, if the value of that <a>origin</a> is a
  scheme/host/port tuple. If it isn't, then the document does not have a domain.

  </div>

  <p class="note">
  The <code>domain</code> attribute is used to enable
  pages on different hosts of a domain to access each others' DOMs.
  </p>

  <p class="warning">Do not use the <code>document.domain</code>
  attribute when using shared hosting. If an untrusted third party is able to host an HTTP server at
  the same IP address but on a different port, then the same-origin protection that normally
  protects two different sites on the same host will fail, as the ports are ignored when comparing
  origins after the <code>document.domain</code> attribute has been
  used.</p>

<h3 id="sandboxing"><dfn>Sandboxing</dfn></h3>

  A <dfn>sandboxing flag set</dfn> is a set of zero or more of the following flags, which are
  used to restrict the abilities that potentially untrusted resources have:

  <dl>

    <dt>The <dfn>sandboxed navigation browsing context flag</dfn></dt>

    <dd>

    This flag <a>prevents content from navigating browsing contexts other
    than the sandboxed browsing context itself</a> (or browsing contexts further nested inside it),
    <a>auxiliary browsing contexts</a> (which are protected
    by the <a>sandboxed auxiliary navigation browsing context flag</a> defined next), and the
    <a>top-level browsing context</a> (which is protected by the <a>sandboxed top-level
    navigation browsing context flag</a> defined below).

    If the <a>sandboxed auxiliary navigation browsing context flag</a> is not set, then in
    certain cases the restrictions nonetheless allow popups (new <a>top-level browsing contexts</a>) to be opened. These <a>browsing contexts</a> always have <dfn>one permitted sandboxed navigator</dfn>, set
    when the browsing context is created, which allows the <a>browsing context</a> that
    created them to actually navigate them. (Otherwise, the <a>sandboxed navigation browsing
    context flag</a> would prevent them from being navigated even if they were opened.)

    </dd>

    <dt>The <dfn>sandboxed auxiliary navigation browsing context flag</dfn></dt>

    <dd>

    This flag <a>prevents content from creating new auxiliary browsing
    contexts</a>, e.g. using the <code>target</code> attribute, the
    <code>window.open()</code> method, or the <code>showModalDialog()</code> method.

    </dd>

    <dt>The <dfn>sandboxed top-level navigation browsing context flag</dfn></dt>

    <dd>

    This flag <a>prevents content from navigating their <a>top-level
    browsing context</a></a> and <a>prevents content from closing their
    <a>top-level browsing context</a></a>.

    When the <a>sandboxed top-level navigation browsing context flag</a> is <em>not</em>
    set, content can navigate its <a>top-level browsing context</a>, but other <a>browsing contexts</a> are still protected by the <a>sandboxed
    navigation browsing context flag</a> and possibly the <a>sandboxed auxiliary navigation
    browsing context flag</a>.

    </dd>

    <dt>The <dfn>sandboxed plugins browsing context flag</dfn></dt>

    <dd>

    This flag prevents content from instantiating <a>plugins</a>, whether
    using <a>the <code>embed</code> element</a>, <a>the <code>object</code> element</a>, <a>the <code>applet</code> element</a>, or through <a>navigation</a> of a <a>nested browsing context</a>, unless
    those <a>plugins</a> can be <a>secured</a>.

    </dd>

    <dt>The <dfn>sandboxed seamless iframes flag</dfn></dt>

    <dd>

    This flag prevents content from using the <code>seamless</code>
    attribute on descendant <code>iframe</code> elements.

    <p class="note">
  This prevents a page inserted using the <code>allow-same-origin</code> keyword from using a
    CSS-selector-based method of probing the DOM of other pages on the same site (in particular,
    pages that contain user-sensitive information).
  </p>

    </dd>

    <dt>The <dfn>sandboxed origin browsing context flag</dfn></dt>

    <dd>

    This flag <a>forces content into a unique origin</a>, thus preventing
    it from accessing other content from the same <a>origin</a>.

    This flag also <a>prevents script from reading from or writing to the
    <code>document.cookie</code> IDL attribute</a>, and blocks access to
    <code>localStorage</code>.

    [[!WEBSTORAGE]]

    </dd>

    <dt>The <dfn>sandboxed forms browsing context flag</dfn></dt>

    <dd>

    This flag <a>blocks form submission</a>.

    </dd>

    <dt>The <dfn>sandboxed pointer lock browsing context flag</dfn></dt>

    <dd>

    This flag disables the Pointer Lock API. [[!POINTERLOCK]]

    </dd>

    <dt>The <dfn>sandboxed scripts browsing context flag</dfn></dt>

    <dd>

    This flag <a>blocks script execution</a>.

    </dd>

    <dt>The <dfn>sandboxed automatic features browsing context flag</dfn></dt>

    <dd>

    This flag blocks features that trigger automatically, such as <a>automatically playing a video</a> or <a>automatically focusing a form control</a>.

    </dd>

    <dt>The <dfn>sandboxed storage area URLs flag</dfn></dt>

    <dd>

    This flag prevents URL schemes that use storage areas from being able to access the origin's
    data.

    </dd>

    <dt>The <dfn>sandboxed fullscreen browsing context flag</dfn></dt>

    <dd>

    This flag prevents content from using the <code>requestFullscreen()</code> method.

    </dd>

    <dt>The <dfn>sandboxed <code>document.domain</code> browsing context flag</dfn></dt>

    <dd>

    This flag prevents content from using the <code>document.domain</code> feature to change the <a>effective script
    origin</a>.

    </dd>

    <dt>The <dfn>sandbox propagates to auxiliary browsing contexts flag</dfn></dt>

    <dd>

    This flag prevents content from escaping the sandbox by ensuring that any
    <a>auxiliary browsing context</a> it creates inherits the content's
    <a>active sandboxing flag set</a>.

    </dd>

    <dt>The <dfn>sandboxed modals flag</dfn></dt>

    <dd>

    This flag prevents content from using any of the following features to produce modal
    dialogs:

    <ul>
      <li><code>window.alert()</code></li>
      <li><code>window.confirm()</code></li>
      <li><code>window.print()</code></li>
      <li><code>window.prompt()</code></li>
      <li><code>window.showModalDialog()</code></li>
      <li>the <code>beforeunload</code> event</li>
    </ul>

    </dd>

  </dl>

  When the user agent is to <dfn>parse a sandboxing directive</dfn>, given a string <var>input</var>, a <a>sandboxing flag set</a> <var>output</var>, and
  optionally an <var>allow fullscreen flag</var>, it must run the following steps:

  <ol>

    <li><a>Split <var>input</var> on spaces</a>,
    to obtain <var>tokens</var>.</li>

    <li>Let <var>output</var> be empty.</li>

    <li>

    Add the following flags to <var>output</var>:

    <ul>

      <li>The <a>sandboxed navigation browsing context flag</a>.</li>

      <li>The <a>sandboxed auxiliary navigation browsing context flag</a>, unless <var>tokens</var> contains the <dfn><code>allow-popups</code></dfn> keyword.</li>

      <li>The <a>sandboxed top-level navigation browsing context flag</a>, unless <var>tokens</var> contains the <dfn><code>allow-top-navigation</code></dfn>
      keyword.</li>

      <li>The <a>sandboxed plugins browsing context flag</a>.</li>

      <li>The <a>sandboxed seamless iframes flag</a>.</li>

      <li>

      The <a>sandboxed origin browsing context flag</a>, unless the <var>tokens</var> contains the <dfn><code>allow-same-origin</code></dfn>
      keyword.

      <div class="note">

        The <code>allow-same-origin</code> keyword
        is intended for two cases.

        First, it can be used to allow content from the same site to be sandboxed to disable
        scripting, while still allowing access to the DOM of the sandboxed content.

        Second, it can be used to embed content from a third-party site, sandboxed to prevent that
        site from opening pop-up windows, etc, without preventing the embedded page from
        communicating back to its originating site, using the database APIs to store data, etc.

      </div>

      </li>

      <li>The <a>sandboxed forms browsing context flag</a>, unless <var>tokens</var> contains the <dfn><code>allow-forms</code></dfn> keyword.</li>

      <li>The <a>sandboxed pointer lock browsing context flag</a>, unless <var>tokens</var> contains the <dfn><code>allow-pointer-lock</code></dfn>
      keyword.</li>

      <li>The <a>sandboxed scripts browsing context flag</a>, unless <var>tokens</var> contains the <dfn><code>allow-scripts</code></dfn> keyword.</li>

      <li>

      The <a>sandboxed automatic features browsing context flag</a>, unless <var>tokens</var> contains the <code>allow-scripts</code> keyword (defined above).

      <p class="note">
  This flag is relaxed by the same keyword as scripts, because when scripts are
      enabled these features are trivially possible anyway, and it would be unfortunate to force
      authors to use script to do them when sandboxed rather than allowing them to use the
      declarative features.
  </p>

      </li>

      <li>The <a>sandboxed storage area URLs flag</a>.</li>

      <li>The <a>sandboxed fullscreen browsing context flag</a>, unless the <var>allow fullscreen flag</var> was passed to the <a>parse a sandboxing
      directive</a> flag.</li>

      <li>The <a>sandboxed <code>document.domain</code> browsing
      context flag</a>.</li>

      <li>The <a>sandbox propagates to auxiliary browsing contexts flag</a>, unless
      <var>tokens</var> contains the <dfn><code>allow-popups-to-escape-sandbox</code></dfn>
      keyword.</li>

      <li>The <a>sandboxed modals flag</a>, unless <var>tokens</var> contains the <dfn><code>allow-modals</code></dfn> keyword.</li>

    </ul>

    </li>

  </ol>

  <hr />

  Every <a>top-level browsing context</a> has a <dfn>popup sandboxing flag set</dfn>, which
  is a <a>sandboxing flag set</a>. When a <a>browsing context</a> is created, its
  <a>popup sandboxing flag set</a> must be empty. It is populated by <a>the rules for
  choosing a browsing context given a browsing context name</a>.

  Every <a>nested browsing context</a> has an <dfn><code>iframe</code> sandboxing flag
  set</dfn>, which is a <a>sandboxing flag set</a>. Which flags in a <a>nested browsing
  context</a>'s <a><code>iframe</code> sandboxing flag set</a> are set at any particular
  time is determined by the <code>iframe</code> element's <code>sandbox</code> attribute.

  Every <code>Document</code> has an <dfn>active sandboxing flag set</dfn>, which is a
  <a>sandboxing flag set</a>. When the <code>Document</code> is created, its <a>active
  sandboxing flag set</a> must be empty. It is populated by the <a>navigation
  algorithm</a>.

  Every resource that is obtained by the <a>navigation algorithm</a> has a
  <dfn>forced sandboxing flag set</dfn>, which is a <a>sandboxing flag set</a>. A resource by
  default has no flags set in its <a>forced sandboxing flag set</a>, but other specifications
  can define that certain flags are set.

  <p class="note">
  In particular, the <a>forced sandboxing flag set</a> is used by the Content
  Security Policy specification. [[!CSP]]
  </p>

  <hr />

  When a user agent is to <dfn>implement the sandboxing</dfn> for a <code>Document</code>, it
  must populate <code>Document</code>'s <a>active sandboxing flag set</a> with the union of
  the flags that are present in the following <a>sandboxing flag
  sets</a> at the time the <code>Document</code> object is created:

  <ul>

    <li>If the <code>Document</code>'s <a>browsing context</a> is a <a>top-level browsing
    context</a>, then: the flags set on the <a>browsing context</a>'s <a>popup sandboxing
    flag set</a>.</li>

    <li>If the <code>Document</code>'s <a>browsing context</a> is a <a>nested browsing
    context</a>, then: the flags set on the <a>browsing context</a>'s
    <a><code>iframe</code> sandboxing flag set</a>.</li>

    <li>If the <code>Document</code>'s <a>browsing context</a> is a <a>nested browsing
    context</a>, then: the flags set on the <a>browsing context</a>'s <a>parent browsing
    context</a>'s <a>active document</a>'s <a>active sandboxing flag set</a>.</li>

    <li>The flags set on the <code>Document</code>'s resource's <a>forced sandboxing flag
    set</a>, if it has one.</li>

  </ul>

<h3 id="session-history-and-navigation"><dfn>Session history and navigation</dfn></h3>

<h4 id="the-session-history-of-browsing-contexts"><dfn>The session history of browsing contexts</dfn></h4>

  The sequence of <code>Document</code>s in a <a>browsing context</a> is its <dfn>session
  history</dfn>. Each <a>browsing context</a>, including <a>nested browsing contexts</a>, has a distinct session history. A <a>browsing
  context</a>'s session history consists of a flat list of <a>session history entries</a>. Each <dfn>session history entry</dfn> consists, at a
  minimum, of a <a>URL</a>, and each entry may in addition have a <a>state object</a>, a
  title, a <code>Document</code> object, form data, a scroll position, and other information
  associated with it.

  <p class="note">
  Each entry, when first created, has a <code>Document</code>. However, when a
  <code>Document</code> is not <a>active</a>, it's possible for it to be
  <a>discarded</a> to free resources. The <a>URL</a> and
  other data in a <a>session history entry</a> is then used to bring a new
  <code>Document</code> into being to take the place of the original, should the user agent find
  itself having to reactivate that <code>Document</code>.
  </p>

  <p class="note">
  Titles associated with <a>session history
  entries</a> need not have any relation with the current <code>title</code> of the
  <code>Document</code>. The title of a <a>session history entry</a> is intended to explain
  the state of the document at that point, so that the user can navigate the document's history.
  </p>

  URLs without associated <a>state objects</a> are added to the
  session history as the user (or script) navigates from page to page.

  <hr />

  Each <code>Document</code> object in a <a>browsing context</a>'s <a>session
  history</a> is associated with a unique <code>History</code> object which must all model the
  same underlying <a>session history</a>.

  <div class="impl">
    The <dfn><code>history</code></dfn> attribute of the <code>Window</code> interface must return
    the object implementing the <code>History</code> interface for that <a><code>Window</code>
    object's newest <code>Document</code></a>.
  </div>

  <hr />

  A <dfn>state object</dfn> is an object representing a user interface state.

  Pages can <a>add</a> <a>state
  objects</a> to the session history. These are then <a>returned to the
  script</a> when the user (or script) goes back in the history, thus enabling authors to use the
  "navigation" metaphor even in one-page applications.

  <div class="note">
    <a>State objects</a> are intended to be used for two main purposes:
    first, storing a preparsed description of the state in the <a>URL</a> so that in the simple
    case an author doesn't have to do the parsing (though one would still need the parsing for
    handling <a>URLs</a> passed around by users, so it's only a minor
    optimization), and second, so that the author can store state that one wouldn't store in the URL
    because it only applies to the current <code>Document</code> instance and it would have to be
    reconstructed if a new <code>Document</code> were opened.

    An example of the latter would be something like keeping track of the precise coordinate from
    which a pop-up <code>div</code> was made to animate, so that if the user goes back, it can be
    made to animate to the same location. Or alternatively, it could be used to keep a pointer into a
    cache of data that would be fetched from the server based on the information in the
    <a>URL</a>, so that when going back and forward, the information doesn't have to be fetched
    again.
  </div>

  <hr />

  At any point, one of the entries in the session history is the <dfn>current entry</dfn>. This
  is the entry representing the <a>active document</a> of the <a>browsing context</a>.
  Which entry is the <a>current entry</a> is changed by the algorithms defined in this
  specification, e.g. during <a>session history
  traversal</a>.

  <p class="note">
    The <a>current entry</a> is usually an entry for the <a>address</a> of the
    <code>Document</code>. However, it can also be one of the entries for <a>state objects</a> added
    to the history by that document.
  </p>

  <dfn>An entry with persisted user state</dfn> is one that also has user-agent defined state.
  This specification does not specify what kind of state can be stored.

  <p class="example">
  For example, some user agents might want to persist the scroll position, or the
  values of form controls.
  </p>

  <p class="note">
  User agents that persist the value of form controls are encouraged to also persist
  their directionality (the value of the element's <code>dir</code> attribute).
  This prevents values from being displayed incorrectly after a history traversal when the user had
  originally entered the values with an explicit, non-default directionality.
  </p>

  Entries that consist of <a>state objects</a> share the same
  <code>Document</code> as the entry for the page that was active when they were added.

  Contiguous entries that differ just by fragment identifier also share the same
  <code>Document</code>.

  <p class="note">
  All entries that share the same <code>Document</code> (and that are therefore
  merely different states of one particular document) are contiguous by definition.
  </p>

  Each <code>Document</code> in a <a>browsing context</a> can also have a <dfn>latest
  entry</dfn>. This is the entry for that <code>Document</code> to which the <a>browsing
  context</a>'s <a>session history</a> was most recently traversed. When a
  <code>Document</code> is created, it initially has no <a>latest entry</a>.

  <div class="impl">

  User agents may <a>discard</a> the <code>Document</code>
  objects of entries other than the <a>current entry</a> that are not referenced from any
  script, reloading the pages afresh when the user or script navigates back to such pages. This
  specification does not specify when user agents should discard <code>Document</code> objects and
  when they should cache them.

  Entries that have had their <code>Document</code> objects discarded must, for the purposes of
  the algorithms given below, act as if they had not. When the user or script navigates back or
  forwards to a page which has no in-memory DOM objects, any other entries that shared the same
  <code>Document</code> object with it must share the new object as well.

  </div>

<h4 id="the-history-interface"><dfn>The <code>History</code> interface</dfn></h4>

  <pre class="idl" data-highlight="webidl">
  interface <dfn>History</dfn> {
  readonly attribute unsigned long <a>length</a>;
  readonly attribute any <a>state</a>;
  void <a>go</a>(optional long delta = 0);
  void <a>back</a>();
  void <a>forward</a>();
  void <a>pushState</a>(any data, DOMString title, optional DOMString? url = null);
  void <a>replaceState</a>(any data, DOMString title, optional DOMString? url = null);
  };
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>history</code> . <code>length</code></dt>

    <dd>

    Returns the number of entries in the <a>joint session history</a>.

    </dd>

    <dt><var>window</var> . <code>history</code> . <code>state</code></dt>

    <dd>

    Returns the current <a>state object</a>.

    </dd>

    <dt><var>window</var> . <code>history</code> . <code>go</code>( [ <var>delta</var> ] )</dt>

    <dd>

    Goes back or forward the specified number of steps in the <a>joint session history</a>.

    A zero delta will reload the current page.

    If the delta is out of range, does nothing.

    </dd>

    <dt><var>window</var> . <code>history</code> . <code>back</code>()</dt>

    <dd>

    Goes back one step in the <a>joint session history</a>.

    If there is no previous page, does nothing.

    </dd>

    <dt><var>window</var> . <code>history</code> . <code>forward</code>()</dt>

    <dd>

    Goes forward one step in the <a>joint session history</a>.

    If there is no next page, does nothing.

    </dd>

    <dt><var>window</var> . <code>history</code> . <code>pushState</code>(<var>data</var>, <var>title</var> [, <var>url</var> ] )</dt>

    <dd>

    Pushes the given data onto the session history, with the given title, and, if provided and
    not null, the given URL.

    </dd>

    <dt><var>window</var> . <code>history</code> . <code>replaceState</code>(<var>data</var>, <var>title</var> [, <var>url</var> ] )</dt>

    <dd>

    Updates the current entry in the session history to have the given data, title, and, if
    provided and not null, URL.

    </dd>

  </dl>

  The <dfn>joint session history</dfn> of a <a>top-level browsing context</a> is the union
  of all the <a>session histories</a> of all <a>browsing contexts</a> of all the <a>fully active</a> <code>Document</code>
  objects that share that <a>top-level browsing context</a>, with all the entries that are
  <a>current entries</a> in their respective <a>session histories</a> removed except for the <a>current entry of the joint session
  history</a>.

  The <dfn>current entry of the joint session history</dfn> is the entry that most recently
  became a <a>current entry</a> in its <a>session history</a>.

  Entries in the <a>joint session history</a> are ordered chronologically by the time they
  were added to their respective <a>session histories</a>. Each entry
  has an index; the earliest entry has index 0, and the subsequent entries are numbered with
  consecutively increasing integers (1, 2, 3, etc).

  <p class="note">
  Since each <code>Document</code> in a <a>browsing context</a> might have a
  different <a>event loop</a>, the actual state of the <a>joint session history</a> can
  be somewhat nebulous. For example, two sibling <code>iframe</code> elements could both <a>traverse</a> from one unique origin to another at the same time,
  so their precise order might not be well-defined; similarly, since they might only find out about
  each other later, they might disagree about the length of the <a>joint session
  history</a>.
  </p>

  <div class="impl">

  All the getters and setters for attributes, and all the methods, defined on the
  <code>History</code> interface, when invoked on a <code>History</code> object associated with a
  <code>Document</code> that is not <a>fully active</a>, must throw a
  <code>SecurityError</code> exception instead of operating as described below.

  The <dfn><code>length</code></dfn> attribute of the
  <code>History</code> interface must return the number of entries in the <a>top-level browsing
  context</a>'s <a>joint session history</a>.

  The actual entries are not accessible from script.

  The <dfn><code>state</code></dfn> attribute of the
  <code>History</code> interface must return the last value it was set to by the user agent.
  Initially, its value must be null.

  When the <dfn><code>go(<var>delta</var>)</code></dfn> method is
  invoked, if <var>delta</var> is zero, the user agent must act as if the
  <code>location.reload()</code> method was called instead. Otherwise,
  the user agent must <a>traverse the history by a delta</a> whose value is
  <var>delta</var>.

  When the <dfn><code>back()</code></dfn> method is invoked, the user
  agent must <a>traverse the history by a delta</a> -1.

  When the <dfn><code>forward()</code></dfn>method is invoked, the
  user agent must <a>traverse the history by a delta</a> +1.

  <hr />

  Each <a>top-level browsing context</a> has a <dfn>session history traversal queue</dfn>,
  initially empty, to which <a>tasks</a> can be added.

  Each <a>top-level browsing context</a>, when created, must begin running
  the following algorithm, known as the <dfn>session history event loop</dfn> for that
  <a>top-level browsing context</a>, <a>in parallel</a>:

  <ol>

    <li>Wait until this <a>top-level browsing context</a>'s <a>session history traversal
    queue</a> is not empty.</li>

    <li>Pull the first <a>task</a> from this <a>top-level browsing
    context</a>'s <a>session history traversal queue</a>, and execute it.</li>

    <li>Return to the first step of this algorithm.

  </ol>

  The <a>session history event loop</a> helps coordinate cross-browsing-context transitions
  of the <a>joint session history</a>: since each <a>browsing context</a> might, at any
  particular time, have a different <a>event loop</a> (this can happen if the user agent has
  more than one <a>event loop</a> per <a>unit of related browsing contexts</a>),
  transitions would otherwise have to involve cross-event-loop synchronisation.

  <hr />

  To <dfn>traverse the history by a delta</dfn> <var>delta</var>, the user agent must
  append a <a>task</a> to this <a>top-level browsing context</a>'s
  <a>session history traversal queue</a>, the <a>task</a>
  consisting of running the following steps:

  <ol>

    <li>Let <var>delta</var> be the argument to the method.</li>

    <li>If the index of the <a>current entry of the joint session history</a> plus <var>delta</var> is less than zero or greater than or equal to the number of items in the
    <a>joint session history</a>, then abort these steps.

    <li>Let <var>specified entry</var> be the entry in the <a>joint session
    history</a> whose index is the sum of <var>delta</var> and the index of the
    <a>current entry of the joint session history</a>.</li>

    <li>Let <var>specified browsing context</var> be the <a>browsing context</a> of
    the <var>specified entry</var>.</li>

    <li>If the <var>specified browsing context</var>'s <a>active document</a>'s
    <a>unload a document</a> algorithm is currently running, abort these steps.</li>

    <li>

    <a>Queue a task</a> that consists of running the following substeps. The relevant
    <a>event loop</a> is that of the <var>specified browsing context</var>'s
    <a>active document</a>. The <a>task source</a> for the queued task is the
    <a>history traversal task source</a>.

    <ol>

      <li>If there is an ongoing attempt to navigate <var>specified browsing context</var>
      that has not yet <a>matured</a> (i.e. it has not passed the
      point of making its <code>Document</code> the <a>active document</a>), then cancel that
      attempt to navigate the <a>browsing context</a>.</li>

      <li>

      If the <var>specified browsing context</var>'s <a>active document</a> is not
      the same <code>Document</code> as the <code>Document</code> of the <var>specified
      entry</var>, then run these substeps:

      <ol>

        <li><a>Prompt to unload</a> the <a>active
        document</a> of the <var>specified browsing context</var>. If the user
        <a>refused to allow the document to be unloaded</a>, then abort these steps.</li>

        <li><a>Unload</a> the <a>active document</a> of the
        <var>specified browsing context</var> with the <var>recycle</var> parameter
        set to false.</li>

      </ol>

      </li>

      <li><a>Traverse the history</a> of the <var>specified browsing context</var> to
      the <var>specified entry</var>.

    </ol>

    </li>

  </ol>

  When the user navigates through a <a>browsing context</a>, e.g. using a browser's back
  and forward buttons, the user agent must <a>traverse the history by a delta</a> equivalent
  to the action specified by the user.

  <hr />

  The <dfn><code>pushState(<var>data</var>, <var>title</var>, <var>url</var>)</code></dfn> method adds a state object entry to
  the history.

  The <dfn><code>replaceState(<var>data</var>, <var>title</var>, <var>url</var>)</code></dfn> method updates the state object,
  title, and optionally the <a>URL</a> of the <a>current entry</a> in the history.

  When either of these methods is invoked, the user agent must run the following steps:

  <ol>

    <li>Let <var>cloned data</var> be a <a>structured clone</a> of the specified
    <var>data</var>. If this throws an exception, then rethrow that exception and abort
    these steps.</li>

    <li>

    If the third argument is not null, run these substeps:

    <ol>

      <li><a>Resolve</a> the value of the third argument, relative to
      the <a>API base URL</a> specified by the <a>entry settings object</a>.</li>

      <li>If that fails, throw a <code>SecurityError</code> exception and abort these steps.</li>

      <li>Compare the resulting <a>parsed URL</a> to the result of applying the <a>URL
      parser</a> algorithm to <a>the document's address</a>. If any component of these two
      <a>URLs</a> differ other than the <a>path</a>, <a>query</a>, and <a>fragment</a> components, then throw a
      <code>SecurityError</code> exception and abort these steps.</li>

      <li>If the <a>origin</a> of the resulting <a>absolute URL</a> is not the same as
      the <a>origin</a> of the <a>responsible document</a> specified by the <a>entry
      settings object</a>, and either the <a>path</a> or <a>query</a> components of the two <a>parsed
      URLs</a> compared in the previous step differ, throw a <code>SecurityError</code> exception
      and abort these steps. (This prevents sandboxed content from spoofing other pages on the same
      origin.)</li>

      <li>Let <var>new URL</var> be the resulting <a>absolute URL</a>.</li>

    </ol>

    For the purposes of the comparisons in the above substeps, the <a>path</a> and <a>query</a> components
    can only be the same if the <a>scheme</a> component of both
    <a>parsed URLs</a> are <a>relative schemes</a>.

    </li>

    <li>

    If the third argument is null, then let <var>new URL</var> be the <a>URL</a>
    of the <a>current entry</a>.

    <li>

    If the method invoked was the <code>pushState()</code>
    method:

    <ol>

      <li>

      Remove all the entries in the <a>browsing context</a>'s <a>session history</a>
      after the <a>current entry</a>. If the <a>current entry</a> is the last entry in
      the session history, then no entries are removed.

      <p class="note">
  This <a>doesn't necessarily have to affect</a> the user
      agent's user interface.
  </p>

      </li>

      <li>Remove any <a>tasks</a> queued by the <a>history traversal
      task source</a> that are associated with any <code>Document</code> objects in the
      <a>top-level browsing context</a>'s <a>document family</a>.</li>

      <li>If appropriate, update the <a>current entry</a> to reflect any state that the user
      agent wishes to persist. The entry is then said to be <a>an entry with persisted user
      state</a>.</li>

      <li>Add a <a>state object</a> entry to the session history, after the <a>current
      entry</a>, with <var>cloned data</var> as the <a>state object</a>, the given
      <var>title</var> as the title, and <var>new URL</var> as the <a>URL</a>
      of the entry.</li>

      <li>Update the <a>current entry</a> to be this newly added entry.</li>

    </ol>

    Otherwise, if the method invoked was the <code>replaceState()</code> method:

    <ol>

      <li>Update the <a>current entry</a> in the session history so that <var>cloned data</var> is the entry's new state object, the given <var>title</var>
      is the new title, and <var>new URL</var> is the entry's new <a>URL</a>.</li>

    </ol>

    </li>

    <li>If the <a>current entry</a> in the session history represents a non-GET request
    (e.g. it was the result of a POST submission) then update it to instead represent a GET
    request.</li>

    <li>

    Set <a>the document's address</a> to <var>new URL</var>.

    <p class="note">
  Since this is neither a <a>navigation</a> of the
    <a>browsing context</a> nor a <a>history traversal</a>,
    it does not cause a <code>hashchange</code> event to be fired.
  </p>

    </li>

    <li>

    Set <code>history.state</code> to a <a>structured clone</a>
    of <var>cloned data</var>.

    </li>

    <li>

    Let the <a>latest entry</a> of the <code>Document</code> of the <a>current
    entry</a> be the <a>current entry</a>.

    </li>

  </ol>

  <p class="note">
  The <var>title</var> is purely advisory. User agents might use the title
  in the user interface.
  </p>

  User agents may limit the number of state objects added to the session history per page. If a
  page hits the UA-defined limit, user agents must remove the entry immediately after the first
  entry for that <code>Document</code> object in the session history after having added the new
  entry. (Thus the state history acts as a FIFO buffer for eviction, but as a LIFO buffer for
  navigation.)

  </div>

  <div class="example">
    Consider a game where the user can navigate along a line, such that the user is always at some
    coordinate, and such that the user can bookmark the page corresponding to a particular
    coordinate, to return to it later.

    A static page implementing the x=5 position in such a game could look like the following:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  &lt;!-- this is http://example.com/line?x=5 -->
  &lt;title>Line Game - 5&lt;/title>
  &lt;p>You are at coordinate 5 on the line.&lt;/p>
  &lt;p>
  &lt;a href="?x=6">Advance to 6&lt;/a> or
  &lt;a href="?x=4">retreat to 4&lt;/a>?
  &lt;/p>
  </pre>

    The problem with such a system is that each time the user clicks, the whole page has to be
    reloaded. Here instead is another way of doing it, using script:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  &lt;!-- this starts off as http://example.com/line?x=5 -->
  &lt;title>Line Game - 5&lt;/title>
  &lt;p>You are at coordinate &lt;span>5&lt;/span> on the line.&lt;/p>
  &lt;p>
  &lt;a href="?x=6" onclick="go(1); return false;">Advance to 6&lt;/a> or
  &lt;a href="?x=4" onclick="go(-1); return false;">retreat to 4&lt;/a>?
  &lt;/p>
  &lt;script>
  var currentPage = 5; // prefilled by server
  function go(d) {
    setupPage(currentPage + d);
    history.pushState(currentPage, document.title, '?x=' + currentPage);
  }
  onpopstate = function(event) {
    setupPage(event.state);
  }
  function setupPage(page) {
    currentPage = page;
    document.title = 'Line Game - ' + currentPage;
    document.getElementById('coord').textContent = currentPage;
    document.links[0].href = '?x=' + (currentPage+1);
    document.links[0].textContent = 'Advance to ' + (currentPage+1);
    document.links[1].href = '?x=' + (currentPage-1);
    document.links[1].textContent = 'retreat to ' + (currentPage-1);
  }
  &lt;/script>
  </pre>

    In systems without script, this still works like the previous example. However, users that
    <em>do</em> have script support can now navigate much faster, since there is no network access
    for the same experience. Furthermore, contrary to the experience the user would have with just a
    na&iuml;ve script-based approach, bookmarking and navigating the session history still work.

    In the example above, the <var>data</var> argument to the <code>pushState()</code> method is the same information as would be sent
    to the server, but in a more convenient form, so that the script doesn't have to parse the URL
    each time the user navigates.
  </div>

  <div class="example">
    Applications might not use the same title for a <a>session history entry</a> as the
    value of the document's <code>title</code> element at that time. For example, here is a simple
    page that shows a block in the <code>title</code> element. Clearly, when navigating backwards to
    a previous state the user does not go back in time, and therefore it would be inappropriate to
    put the time in the session history title.

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  &lt;TITLE>Line&lt;/TITLE>
  &lt;SCRIPT>
  setInterval(function () { document.title = 'Line - ' + new Date(); }, 1000);
  var i = 1;
  function inc() {
    set(i+1);
    history.pushState(i, 'Line - ' + i);
  }
  function set(newI) {
    i = newI;
    document.forms.F.I.value = newI;
  }
  &lt;/SCRIPT>
  &lt;BODY ONPOPSTATE="set(event.state)">
  &lt;FORM NAME=F>
  State: &lt;OUTPUT NAME=I>1&lt;/OUTPUT> &lt;INPUT VALUE="Increment" TYPE=BUTTON ONCLICK="inc()">
  &lt;/FORM>
  </pre>
  </div>

<h4 id="the-location-interface"><dfn>The <code>Location</code> interface</dfn></h4>

  Each <code>Document</code> object in a <a>browsing context</a>'s session history is
  associated with a unique instance of a <code>Location</code> object.

  <dl class="domintro">

    <dt><var>document</var> . <code>location</code> [ = <var>value</var> ]</dt>
    <dt><var>window</var> . <code>location</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns a <code>Location</code> object with the current page's location.

    Can be set, to navigate to another page.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>location</code></dfn> attribute of the
  <code>Document</code> interface must return the <code>Location</code> object for that
  <code>Document</code> object, if it is in a <a>browsing context</a>, and null otherwise.

  The <dfn><code>location</code></dfn> attribute of the <code>Window</code>
  interface must return the <code>Location</code> object for that <code>Window</code> object's
  <code>Document</code>.

  </div>

  <code>Location</code> objects provide a representation of <a>the address</a> of the <a>active document</a> of their <code>Document</code>'s
  <a>browsing context</a>, and allow the <a>current entry</a> of the <a>browsing
  context</a>'s session history to be changed, by adding or replacing entries in the <code>history</code> object.

  <pre class="idl" data-highlight="webidl">
  [Unforgeable] interface <dfn>Location</dfn> {
  stringifier attribute USVString <a>href</a>;
  attribute USVString <a>origin</a>;
  attribute USVString <a>protocol</a>;
  attribute USVString <a>host</a>;
  attribute USVString <a>hostname</a>;
  attribute USVString <a>port</a>;
  attribute USVString <a>pathname</a>;
  attribute USVString <a>search</a>;
  attribute USVString <a>hash</a>;

  void <a>assign</a>(USVString url);
  void <a>replace</a>(USVString url);
  void <a>reload</a>();

  [SameObject] readonly attribute <a>USVString</a>[] <a>ancestorOrigins</a>;
  };
  </pre>

  <dl class="domintro">
    <dt><var>location</var> . <code>toString()</code></dt>
    <dt><var>location</var> . <code>href</code></dt>
    <dd>
    Returns the <code>Location</code> object's URL.
    Can be set, to navigate to the given URL.
    </dd>

    <dt><var>location</var> . <code>origin</code></dt>
    <dd>
    Returns the <code>Location</code> object's URL's origin.
    </dd>

    <dt><var>location</var> . <code>protocol</code></dt>
    <dd>
    Returns the <code>Location</code> object's URL's scheme.
    Can be set, to navigate to the same URL with a changed scheme.
    </dd>

    <dt><var>location</var> . <code>host</code></dt>
    <dd>
    Returns the <code>Location</code> object's URL's host and port (if different from the default
    port for the scheme).
    Can be set, to navigate to the same URL with a changed host and port.
    </dd>

    <dt><var>location</var> . <code>hostname</code></dt>
    <dd>
    Returns the <code>Location</code> object's URL's host.
    Can be set, to navigate to the same URL with a changed host.
    </dd>

    <dt><var>location</var> . <code>port</code></dt>
    <dd>
    Returns the <code>Location</code> object's URL's port.
    Can be set, to navigate to the same URL with a changed port.
    </dd>

    <dt><var>location</var> . <code>pathname</code></dt>
    <dd>
    Returns the <code>Location</code> object's URL's path.
    Can be set, to navigate to the same URL with a changed path.
    </dd>

    <dt><var>location</var> . <code>search</code></dt>
    <dd>
    Returns the <code>Location</code> object's URL's query (includes leading "<code>?</code>" if non-empty).
    Can be set, to navigate to the same URL with a changed query (ignores leading "<code>?</code>").
    </dd>

    <dt><var>location</var> . <code>hash</code></dt>
    <dd>
    Returns the <code>Location</code> object's URL's fragment (includes leading "<code>#</code>" if non-empty).
    Can be set, to navigate to the same URL with a changed fragment (ignores leading "<code>#</code>").
    </dd>

    <dt><var>location</var> . <code>assign</code>(<var>url</var>)</dt>
    <dd>
    Navigates to the given URL.
    </dd>

    <dt><var>location</var> . <code>replace</code>(<var>url</var>)</dt>
    <dd>
    Removes the current page from the session history and navigates to the given URL.
    </dd>

    <dt><var>location</var> . <code>reload</code>()</dt>

    <dd>
    Reloads the current page.
    </dd>

    <dt><var>location</var> . <code>ancestorOrigins</code></dt>
    <dd>
    Returns an array whose values are the origins of the ancestor <a>browsing contexts</a>, from the <a>parent browsing context</a> to the
    <a>top-level browsing context</a>.
    </dd>
  </dl>

  <div class="impl">

  A <code>Location</code> object has an associated <dfn>relevant
  <code>Document</code></dfn>, which is this <code>Location</code> object's associated
  <code>Document</code> object's <a>browsing context</a>'s <a>active document</a>.

  A <code>Location</code> object has an associated <dfn>url</dfn>, which is this <code>Location</code> object's
  <a>relevant <code>Document</code></a>'s <a>address</a>.

  A <code>Location</code> object has an associated <dfn><code>Location</code>-object-setter
  navigate</dfn> algorithm, which given a <var>url</var>, runs these steps:

  <ol>
    <li>
    If any of the following conditions are met, let <var>replacement flag</var> be unset;
    otherwise, let it be set:

    <ul class="brief">
      <li>This <code>Location</code> object's <a>relevant <code>Document</code></a> has
      <a>completely loaded</a>, or</li>

      <li>In the <a>task</a> in which the algorithm is running, an
      <a>activation behavior</a> is currently being processed whose <code>click</code> event was <a>trusted</a>, or</li>

      <li>In the <a>task</a> in which the algorithm is running, the event
      listener for a <a>trusted</a> <code>click</code> event is being handled.</li>
    </ul>
    </li>

    <li><a><code>Location</code>-object navigate</a>, given <var>url</var> and
    <var>replacement flag</var>.</li>
  </ol>

  To <dfn><code>Location</code>-object navigate</dfn>, given a <var>url</var> and
  <var>replacement flag</var>, run these steps:

  <ol>
    <li>The <a>source browsing context</a> is the <a>responsible browsing context</a>
    specified by the <a>incumbent settings object</a>.</li>

    <li>
    <a>Navigate</a> the <a>browsing context</a> to
    <var>url</var>, with <a>exceptions enabled</a>.

    If the <var>replacement flag</var> is set or the <a>browsing context</a>'s
    <a>session history</a> contains only one <code>Document</code>, and that was the
    <code>about:blank</code> <code>Document</code> created when the <a>browsing context</a>
    was created, then the navigation must be done with <a>replacement enabled</a>.

    </li>
  </ol>

  The <dfn><code>href</code></dfn> attribute's getter must return this
  <code>Location</code> object's <a>url</a>, <a>serialized</a>.

  The <code>href</code> attribute's setter must run these steps:

  <ol>
    <li>Let <var>newURL</var> be the <a>resulting parsed URL</a> of <a>resolving</a> the given value relative to the <a>entry settings object</a>'s
    <a>API base URL</a>.</li>

    <li>If that aborted with an error, throw a <code>TypeError</code> exception.</li>

    <li><a><code>Location</code>-object-setter navigate</a> to <var>newURL</var>.</li>
  </ol>

  The <dfn><code>origin</code></dfn> attribute's getter must return
  the <a>Unicode serialization</a> of this
  <code>Location</code> object's <a>url</a>'s <a>origin</a>.

  <p class="note no-backref">It returns the Unicode rather than the ASCII serialization for
  compatibility with <code>MessageEvent</code>.

  The <dfn><code>protocol</code></dfn> attribute's getter must
  return this <code>Location</code> object's <a>url</a>'s <a>scheme</a>, followed by "<code>:</code>".

  The <code>protocol</code> attribute's setter must run these
  steps:

  <ol>
    <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

    <li>Let <var>possibleFailure</var> be the result of <a>basic URL
    parsing</a> the given value, followed by "<code>:</code>", with <var>copyURL</var>
    as <var>url</var> and <a>scheme start state</a> as <var>state override</var>.</li>

    <li>If <var>possibleFailure</var> is failure, throw a <code>TypeError</code>
    exception.</li>

    <li>If <var>copyURL</var>'s <a>scheme</a> is not "<code>http</code>" or "<code>https</code>", terminate these steps.</li>

    <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  The <dfn><code>host</code></dfn> attribute's getter must run these
  steps:

  <ol>
    <li>Let <var>url</var> be this <code>Location</code> object's <a>url</a>.</li>

    <li>If <var>url</var>'s <a>host</a> is null, return the empty
    string.</li>

    <li>If <var>url</var>'s <a>port</a> is null, return
    <var>url</var>'s <a>host</a>, <span >serialized</span>.</li>

    <li>Return <var>url</var>'s <a>host</a>, <a>serialized</a>, followed by "<code>:</code>" and <var>url</var>'s <a>port</a>, <a>serialized</a>.</li>
  </ol>

  The <code>host</code> attribute's setter must run these steps:

  <ol>
    <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

    <li>If <var>copyURL</var>'s <a>non-relative flag</a> is set, terminate these
    steps.</li>

    <li><a>Basic URL parse</a> the given value, with
    <var>copyURL</var> as <var>url</var> and <a>host state</a> as <var>state
    override</var>.</li>

    <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  The <dfn><code>hostname</code></dfn> attribute's getter must
  run these steps:

  <ol>
    <li>If this <code>Location</code> object's <a>url</a>'s
    <a>host</a> is null, return the empty string.</li>

    <li>Return this <code>Location</code> object's <a>url</a>'s <a>host</a>, <a>serialized</a>.</li>
  </ol>

  The <code>hostname</code> attribute's setter must run these
  steps:

  <ol>
    <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

    <li>If <var>copyURL</var>'s <a>non-relative flag</a> is set, terminate these
    steps.</li>

    <li><a>Basic URL parse</a> the given value, with
    <var>copyURL</var> as <var>url</var> and <a>hostname state</a> as <var>state
    override</var>.</li>

    <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  The <dfn><code>port</code></dfn> attribute's getter must run these
  steps:

  <ol>
    <li>If this <code>Location</code> object's <a>url</a>'s
    <a>port</a> is null, return the empty string.</li>

    <li>Return this <code>Location</code> object's <a>url</a>'s <a>port</a>, <a>serialized</a>.</li>
  </ol>

  The <code>port</code> attribute's setter must run these steps:

  <ol>
    <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

    <li>If <var>copyURL</var>'s <a>host</a> is null,
    <var>copyURL</var>'s <a>non-relative flag</a> is set, or <var>copyURL</var>'s <a>scheme</a> is "<code>file</code>", terminate these
    steps.</li>

    <li><a>Basic URL parse</a> the given value, with
    <var>copyURL</var> as <var>url</var> and <a>port state</a> as <var>state
    override</var>.</li>

    <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  The <dfn><code>pathname</code></dfn> attribute's getter must
  run these steps:

  <ol>
    <li>Let <var>url</var> be this <code>Location</code> object's <a>url</a>.</li>

    <li>If <var>url</var>'s <a>non-relative flag</a> is set, return the first string in
    <var>url</var>'s <a>path</a>.</li>

    <li>Return "<code>/</code>", followed by the strings in <var>url</var>'s <a>path</a> (including empty strings), separated from each other by
    "<code>/</code>".</li>
  </ol>

  The <code>pathname</code> attribute's setter must run these
  steps:

  <ol>
    <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

    <li>If <var>copyURL</var>'s <a>non-relative flag</a> is set, terminate these
    steps.</li>

    <li>Set <var>copyURL</var>'s <a>path</a> to the empty
    list.</li>

    <li><a>Basic URL parse</a> the given value, with
    <var>copyURL</var> as <var>url</var> and <a>path start state</a> as <var>state
    override</var>.</li>

    <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  The <dfn><code>search</code></dfn> attribute's getter must run
  these steps:

  <ol>
    <li>If this <code>Location</code> object's <a>url</a>'s
    <a>query</a> is either null or the empty string, return the
    empty string.</li>

    <li>Return "<code>?</code>", followed by this <code>Location</code> object's <a>url</a>'s <a>query</a>.</li>
  </ol>

  The <code>search</code> attribute's setter must run these
  steps:

  <ol>
    <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

    <li>If the given value is the empty string, set <var>copyURL</var>'s <a>query</a> to null.

    <li>
    Otherwise, run these substeps:

    <ol>
      <li>Let <var>input</var> be the given value with a single leading "<code>?</code>"
      removed, if any.</li>

      <li>Set <var>copyURL</var>'s <a>query</a> to the empty
      string.</li>

      <li><a>Basic URL parse</a> <var>input</var>, with
      <var>copyURL</var> as <var>url</var> and <a>query state</a> as <var>state override</var>,
      and the <a>relevant <code>Document</code></a>'s <a>document's character
      encoding</a> as <var>encoding override</var>.</li>
    </ol>
    </li>

    <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  The <dfn><code>hash</code></dfn> attribute's getter must run these
  steps:

  <ol>
    <li>If this <code>Location</code> object's <a>url</a>'s
    <a>fragment</a> is either null or the empty string, return
    the empty string.</li>

    <li>Return "<code>#</code>", followed by this <code>Location</code> object's <a>url</a>'s <a>fragment</a>.</li>
  </ol>

  The <code>hash</code> attribute's setter must run these steps:

  <ol>
    <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

    <li>If <var>copyURL</var>'s <a>scheme</a> is "<code>javascript</code>", terminate these steps.</li>

    <li>If the given value is the empty string, set <var>copyURL</var>'s <a>fragment</a> to null.

    <li>
    Otherwise, run these substeps:

    <ol>
      <li>Let <var>input</var> be the given value with a single leading "<code>#</code>"
      removed, if any.</li>

      <li>Set <var>copyURL</var>'s <a>fragment</a> to the
      empty string.</li>

      <li><a>Basic URL parse</a> <var>input</var>, with
      <var>copyURL</var> as <var>url</var> and <a>fragment state</a> as <var>state
      override</var>.</li>
    </ol>
    </li>

    <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  <hr />

  When the <dfn><code>assign(<var>url</var>)</code></dfn>
  method is invoked, the user agent must run the following steps:

  <ol>

    <li>

    <a>Resolve</a> <var>url</var>, relative to the
    <a>API base URL</a> specified by the <a>entry settings object</a> and let
    <var>parsedURL</var> be the <a>resulting parsed URL</a>.

    If this is not successful, throw a <code>SyntaxError</code> exception and abort these
    steps.

    </li>

    <li><a><code>Location</code>-object navigate</a> to <var>parsedURL</var>.</li>

  </ol>

  When the <dfn><code>replace(<var>url</var>)</code></dfn>
  method is invoked, the user agent must run the following steps:

  <ol>

    <li>

    <a>Resolve</a> <var>url</var>, relative to the
    <a>API base URL</a> specified by the <a>entry settings object</a> and let
    <var>parsedURL</var> be the <a>resulting parsed URL</a>.

    If this is not successful, throw a <code>SyntaxError</code> exception and abort these
    steps.

    </li>

    <li><a><code>Location</code>-object navigate</a> to <var>parsedURL</var> with the
    <var>replacement flag</var> set.</li>

  </ol>

  When the <dfn><code>reload()</code></dfn> method is invoked, the
  user agent must run the appropriate steps from the following list:

  <dl class="switch">

    <dt>If the currently executing <a>task</a> is the dispatch of a <code>resize</code> event in response to the user resizing the <a>browsing
    context</a></dt>

    <dd>Repaint the <a>browsing context</a> and abort these steps.</dd>

    <dt>If the <a>browsing context</a>'s <a>active document</a> is <a>an
    <code>iframe</code> <code>srcdoc</code> document</a></dt>

    <dd><a>Reprocess the <code>iframe</code>
    attributes</a> of the <a>browsing context</a>'s <a>browsing context
    container</a>.</dd>

    <dt>If the <a>browsing context</a>'s <a>active document</a> has its <a>reload
    override flag</a> set</dt>

    <dd>Perform <a>an overridden reload</a>, with the <a>browsing context</a> being
    navigated as the <a>responsible browsing context</a>.</dd>

    <dt>Otherwise</dt>

    <dd><a>Navigate</a> the <a>browsing context</a> to
    <a>the document's address</a> with <a>replacement enabled</a> and <a>exceptions
    enabled</a>. The <a>source browsing context</a> must be the <a>browsing
    context</a> being navigated. This is a <a>reload-triggered navigation</a>.</dd>

  </dl>

  When a user requests that the <a>active document</a> of a <a>browsing context</a>
  be reloaded through a user interface element, the user agent should <a>navigate</a> the <a>browsing context</a> to the same resource as that
  <code>Document</code>, with <a>replacement enabled</a>. In the case of non-idempotent
  methods (e.g. HTTP POST), the user agent should prompt the user to confirm the operation first,
  since otherwise transactions (e.g. purchases or database modifications) could be repeated. User
  agents may allow the user to explicitly override any caches when reloading. If <a>browsing
  context</a>'s <a>active document</a>'s <a>reload override flag</a> is set, then the
  user agent may instead perform <a>an overridden reload</a> rather than the navigation
  described in this paragraph (with the <a>browsing context</a> being reloaded as the
  <a>source browsing context</a>).

  <hr />

  The <dfn><code>ancestorOrigins</code></dfn> attribute, on
  getting, must return a <a>read only</a> array whose values are
  determined as follows. The same object must be returned each time the attribute's value is
  obtained for any particular <code>Location</code> object.

  <ol>

    <li>Let <var>output</var> be an empty ordered list of strings.

    <li>Let <var>current</var> be the <a>browsing context</a> of the <code>Document</code>
    with which the <code>Location</code> object is associated.</li>

    <li><i>Loop</i>: If <var>current</var> has no <a>parent browsing context</a>, jump to
    the step labeled <i>end</i>.</li>

    <li>Let <var>current</var> be <var>current</var>'s <a>parent browsing
    context</a>.</li>

    <li>Append the <a>Unicode serialization</a>
    of <var>current</var>'s <a>active document</a>'s <a>origin</a> to <var>output</var>
    as a new value.</li>

    <li>Return to the step labeled <i>loop</i>.</li>

    <li><i>End</i>: Let <var>output</var> be the values of the array, in the same order.</li>

  </ol>

  </div>

  <div class="impl">

<h5 id="security"><dfn>Security</dfn></h5>

  <p class="critical">This section describes a security model that is underdefined, imperfect, and
  does not match implementations. Work is ongoing to attempt to resolve this, but in the meantime,
  please do not rely on this section for precision. Implementors are urged to send their feedback on
  how cross-origin cross-global access to <code>Window</code> and <code>Location</code> objects
  should work. See <a>bug 20701</a>.

  User agents must throw a <code>SecurityError</code> exception whenever any
  properties of a <code>Location</code> object are accessed when the <a>entry settings
  object</a> specifies an <a>effective script origin</a> that is not the <a>same</a> as the <code>Location</code> object's associated <code>Document</code>'s
  <a>browsing context</a>'s <a>active document</a>'s <a>effective script
  origin</a>, with the following exceptions:

  <ul>

    <li>The <code>href</code> setter, if the <a>responsible browsing
    context</a> specified by the <a>entry settings object</a> is <a>familiar with</a>
    the <a>browsing context</a> with which the <code>Location</code> object is associated

    <li>The <code>replace()</code> method, if the <a>responsible
    browsing context</a> specified by the <a>entry settings object</a> is <a>familiar
    with</a> the <a>browsing context</a> with which the <code>Location</code> object is
    associated

    <li>Any properties not defined in the IDL for the <code>Location</code> object or indirectly via
    one of those properties (e.g. <code>toString()</code>, which is defined via the <code>stringifier</code> keyword), if the <a>effective script origin</a> specified by
    the <a>entry settings object</a> is the <a>same origin</a> as the
    <code>Location</code> object's associated <code>Document</code>'s <a>effective script
    origin</a>

  </ul>

  When the <a>effective script origin</a> specified by the <a>entry settings
  object</a> is different than a <code>Location</code> object's associated
  <code>Document</code>'s <a>effective script origin</a>, the user agent must act as if any
  changes to that <code>Location</code> object's properties, getters, setters, etc, were not
  present, and as if all the properties of that <code>Location</code> object had their \[[Enumerable]] attribute set to false.

  For members that return objects (including function objects), each distinct <a>effective
  script origin</a> that is not the <a>same origin</a> as the <code>Location</code>
  object's <code>Document</code>'s <a>effective script origin</a> must be provided with a
  separate set of objects. These objects must have the prototype chain appropriate for the script
  for which the objects are created (not those that would be appropriate for scripts whose
  <a>settings object</a> specifies a <a>global object</a> that is the
  <code>Location</code> object's <code>Document</code>'s <code>Window</code> object).

  </div>

  <div class="impl">

<h4 id="implementation-notes-for-session-history"><dfn>Implementation notes for session history</dfn></h4>

  <em>This section is non-normative.</em>

  The <code>History</code> interface is not meant to place restrictions on how implementations
  represent the session history to the user.

  For example, session history could be implemented in a tree-like manner, with each page having
  multiple "forward" pages. This specification doesn't define how the linear list of pages in the
  <code>history</code> object are derived from the actual session history as
  seen from the user's perspective.

  Similarly, a page containing two <code>iframe</code>s has a <code>history</code> object distinct from the <code>iframe</code>s' <code>history</code> objects, despite the fact that typical Web browsers present the
  user with just one "Back" button, with a session history that interleaves the navigation of the
  two inner frames and the outer page.

  <strong>Security</strong>: It is suggested that to avoid letting a page "hijack" the history
  navigation facilities of a UA by abusing <code>pushState()</code>,
  the UA provide the user with a way to jump back to the previous page (rather than just going back
  to the previous state). For example, the back button could have a drop down showing just the pages
  in the session history, and not showing any of the states. Similarly, an aural browser could have
  two "back" commands, one that goes back to the previous state, and one that jumps straight back to
  the previous page.

  In addition, a user agent could ignore calls to <code>pushState()</code> that are invoked on a timer, or from event
  listeners that are not triggered in response to a clear user action, or that are invoked in rapid
  succession.

  </div>

<h3 id="browsing-the-web"><dfn>Browsing the Web</dfn></h3>

  <div class="impl">

<h4 id="navigating-across-documents"><dfn>Navigating across documents</dfn></h4>

  Certain actions cause the <a>browsing context</a> to <i>navigate</i> to
  a new resource. A user agent may provide various ways for the user to explicitly cause a browsing
  context to navigate, in addition to those defined in this specification.

  <p class="example">
  For example, <a>following a hyperlink</a>,
  <a>form submission</a>, and the <code>window.open()</code> and <code>location.assign()</code> methods can all cause a browsing context to
  navigate.
  </p>

  <p class="note">
  A <i>resource</i> has a URL, but that might not be the only information necessary
  to identify it. For example, a form submission that uses HTTP POST would also have the HTTP method
  and payload. Similarly, <a>an <code>iframe</code> <code>srcdoc</code> document</a> needs to know the data it is to use.
  </p>

  Navigation always involves <dfn>source browsing context</dfn>, which is the browsing context which
  was responsible for starting the navigation.

  When a browsing context is <dfn>navigated</dfn> to a new resource, the user
  agent must run the following steps:

  <ol>

    <li>Release the <a>storage mutex</a>.</li>

    <li>

    If the <a>source browsing context</a> is not <a>allowed to navigate</a> the
    <a>browsing context</a> being navigated, then abort these steps.

    If these steps are aborted here, the user agent may instead offer to open the new resource in
    a new <a>top-level browsing context</a> or in the <a>top-level browsing context</a>
    of the <a>source browsing context</a>, at the user's option, in which case the user agent
    must <a>navigate</a> that designated <a>top-level
    browsing context</a> to the new resource as if the user had requested it independently.

    <p class="note">
  Doing so, however, can be dangerous, as it means that the user is overriding the
    author's explicit request to sandbox the content.
  </p>

    If the <a>navigate</a> algorithm was invoked with <dfn>exceptions enabled</dfn>, and it
    is aborted on this step, then in addition to aborting this algorithm, the user agent must also
    throw a <code>SecurityError</code> exception.

    </li>

    <li>If the <a>source browsing context</a> is the same as the
    <a>browsing context</a> being navigated, and this browsing context has its <a>seamless
    browsing context flag</a> set, and the <a>browsing context</a> being navigated was not
    chosen using an <dfn>explicit self-navigation override</dfn>, then find the nearest
    <a>ancestor browsing context</a> that does not have its <a>seamless browsing context
    flag</a> set, and continue these steps as if <em>that</em> <a>browsing context</a> was
    the one that was going to be <a>navigated</a> instead.</li>

    <li>If there is a preexisting attempt to navigate the <a>browsing context</a>, and the
    <a>source browsing context</a> is the same as the <a>browsing context</a> being
    navigated, and that attempt is currently running the <a>unload a document</a> algorithm,
    and the <a>origin</a> of the <a>URL</a> of the resource being loaded in that
    navigation is not the <a>same origin</a> as the <a>origin</a> of the <a>URL</a>
    of the resource being loaded in <em>this</em> navigation, then abort these steps without
    affecting the preexisting attempt to navigate the <a>browsing context</a>.</li>

    <li>If a <a>task</a> queued by the <a>traverse the history by a
    delta</a> algorithm is running the <a>unload a document</a> algorithm for the
    <a>active document</a> of the <a>browsing context</a> being navigated, then abort
    these steps without affecting the <a>unload a document</a> algorithm or the aforementioned
    history traversal task.</li>

    <li>If the <a>prompt to unload a document</a> algorithm is being run for the
    <a>active document</a> of the <a>browsing context</a> being navigated, then abort
    these steps without affecting the <a>prompt to unload a document</a> algorithm.</li>

    <li>

    Let <var>gone async</var> be false.

    <p class="note">
  The <a><i>handle redirects</i></a> step later in
    this algorithm can in certain cases jump back to the step labeled <a><i>fragment identifiers</i></a>. Since, between those two steps,
    this algorithm goes from operating immediately in the context of the calling <a>task</a> to operating <a>in parallel</a> independent of the <a>event
    loop</a>, some of the intervening steps need to be able to handle both being run as part of a <a>task</a> and
    running <a>in parallel</a>. The <var>gone async</var> flag is thus used to make these steps
    aware of which mode they are operating in.
  </p>

    </li>

    <li><i>Fragment identifiers</i>: If this is not a
    <dfn>reload-triggered navigation</dfn>: apply the <a>URL parser</a> algorithm to the
    <a>absolute URL</a> of the new resource and the <a>address</a> of the <a>active document</a> of the <a>browsing context</a>
    being navigated; if all the components of the resulting <a>parsed
    URLs</a>, ignoring any <a>fragment</a> components, are
    identical, and the new resource is to be fetched using <code>GET</code>, and the
    <a>parsed URL</a> of the new resource has a <a>fragment</a> component that is not null (even if it is empty),
    then <a>navigate to that fragment identifier</a> and abort these
    steps.</li>

    <li>If <var>gone async</var> is false, cancel any preexisting but not yet <a>mature</a> attempt to navigate the <a>browsing
    context</a>, including canceling any instances of the <a>fetch</a> algorithm started by those attempts. If one of those attempts
    has already created and <a>initialized a new
    <code>Document</code> object</a>, <a>abort</a> that
    <code>Document</code> also. (Navigation attempts that have <a>matured</a> already have session history entries, and are
    therefore handled during the <a>update the session history with the new page</a> algorithm,
    later.)</li>

    <li>If the new resource is to be handled using a mechanism that does not affect the browsing
    context, e.g. ignoring the navigation request altogether because the specified scheme is not one
    of the supported protocols, then abort these steps and <a>proceed with that mechanism instead</a>.</li>

    <li>

    If <var>gone async</var> is false, <a>prompt
    to unload</a> the <code>Document</code> object. If the user <a>refused to allow the
    document to be unloaded</a>, then abort these steps.

    If this instance of the <a>navigation</a> algorithm gets canceled
    while this step is running, the <a>prompt to unload a document</a> algorithm must
    nonetheless be run to completion.

    </li>

    <li>If <var>gone async</var> is false, <a>abort</a>
    the <a>active document</a> of the <a>browsing context</a>.</li>

    <li>

    If the new resource is to be handled by displaying some sort of inline content, e.g. an error
    message because the specified scheme is not one of the supported protocols, or an inline prompt
    to allow the user to select <a>a registered
    handler</a> for the given scheme, then <a>display the inline
    content</a> and abort these steps.

    <p class="note">
  In the case of a registered handler being used, the algorithm will be reinvoked
    with a new URL to handle the request.
  </p>

    </li>

    <li>

    If the <a>browsing context</a> being navigated is a <a>nested browsing
    context</a>, then put it in the <a>delaying <code>load</code> events
    mode</a>.

    The user agent must take this <a>nested browsing context</a> out of the <a>delaying
    <code>load</code> events mode</a> when this <a>navigation</a> algorithm later <a>matures</a>, or when it terminates (whether due to having
    run all the steps, or being canceled, or being aborted), whichever happens first.

    </li>

    <li>

    This is the step that attempts to obtain the resource, if necessary. Jump to the first
    appropriate substep:

    <dl>

      <dt>If the resource has already been obtained (e.g. because it is being used to populate an
      <code>object</code> element's new <a>child browsing context</a>)</dt>

      <dd>Skip this step. The data is already available.</dd>

      <dt>If the new resource is a <a>URL</a> whose <a>scheme</a> is <code>javascript</code></dt>

      <dd>

      <a>Queue a task</a> to run <dfn>these
      "<code>javascript:</code> URL" steps</dfn>, associated with the <a>active document</a>
      of the <a>browsing context</a> being navigated:

      <ol>

        <li>If the <a>origin</a> of the <a>source browsing context</a> is not the
        <a>same origin</a> as the <a>origin</a> of the <a>active document</a> of
        the <a>browsing context</a> being navigated, then act as if the result of evaluating
        the script was the void value, and jump to the step labeled <i>process results</i>
        below.</li>

        <li>Apply the <a>URL parser</a> to the <a>URL</a> being navigated.</li>

        <li>Let <var>parsed URL</var> be the result of the <a>URL
        parser</a>.</li>

        <li>Let <var>script source</var> be the empty string.</li>

        <li>Append <var>parsed URL</var>'s <a>scheme
        data</a> component to <var>script source</var>.</li>

        <li>If <var>parsed URL</var>'s <a>query</a>
        component is not null, then first append a U+003F QUESTION MARK character (?) to <var>script source</var>, and then append <var>parsed URL</var>'s <a>query</a> component to <var>script
        source</var>.</li>

        <li>If <var>parsed URL</var>'s <a>fragment</a> component is not null, then first append a
        U+0023 NUMBER SIGN character (#) to <var>script source</var>, and then append <var>parsed URL</var>'s <a>fragment</a> component to
        <var>script source</var>.</li>

        <li>Replace <var>script source</var> with the result of applying the
        <a>percent decode</a> algorithm to <var>script source</var>.</li>

        <li>Replace <var>script source</var> with the result of applying the <a>UTF-8
        decode</a> algorithm to <var>script source</var>.</li>

        <li>Let <var>address</var> be the <a>address</a> of the <a>active document</a> of the <a>browsing
        context</a> being navigated.</li>

        <li>

        <a>Create a script</a>, using <var>script source</var> as the script
        source, <var>address</var> as the script source URL, JavaScript as the scripting
        language, and the <a>environment settings object</a> of the <code>Window</code> object of
        the <a>active document</a> of the <a>browsing context</a> being navigated.

        Let <var>result</var> be the return value of the <a>code entry-point</a>
        of this <a>script</a>. If an exception was thrown, let <var>result</var> be void instead. (The result will be void also if <a>scripting is disabled</a>.)

        </li>

        <li>

        <i>Process results</i>: If the result of executing the script is void (there is no return
        value), then the result of obtaining the resource for the URL is a <a>response</a> whose
        <a>status</a> is <code>204</code>.

        Otherwise, the result of obtaining the resource for the URL is a <a>response</a> whose <a>header list</a> consists of <code>Content-Type</code>/<code>text/html</code> and whose <a>body</a> is the return value converted to a string
        value.

        When it comes time to <a>set the document's address</a> in the <a>navigation algorithm</a>, use <var>address</var> as the
        <a>override URL</a>.

        </li>

      </ol>

      The <a>task source</a> for this <a>task</a> is the
      <a>DOM manipulation task source</a>.

      <div class="example">
        So for example a <a><code>javascript:</code> URL</a> in
        an <code>href</code> attribute of an <code>a</code> element
        would only be evaluated when the link was <a>followed</a>, while such a URL in the <code>src</code> attribute of an <code>iframe</code> element would be
        evaluated in the context of the <code>iframe</code>'s own <a>nested browsing
        context</a> when the <code>iframe</code> is being set up; once evaluated, its return value
        (if it was not void) would replace that <a>browsing context</a>'s <code>Document</code>, thus also
        changing the <code>Window</code> object of that <a>browsing context</a>.
      </div>

      </dd>

      <dt>If the new resource is to be fetched using <code>GET</code>, and there are
      <a>relevant application caches</a> that are
      identified by a URL with the <a>same origin</a> as the URL in question, and that have
      this URL as one of their entries, excluding entries marked as <a>foreign</a>, and whose <a>mode</a> is <a>fast</a>, and the user agent is not in a mode where it
      will avoid using <a>application caches</a></dt>

      <dd>

      Fetch the resource from the <a>most appropriate
      application cache</a> of those that match.

      <p class="example">
  For example, imagine an HTML page with an associated application cache
      displaying an image and a form, where the image is also used by several other application
      caches. If the user right-clicks on the image and chooses "View Image", then the user agent
      could decide to show the image from any of those caches, but it is likely that the most useful
      cache for the user would be the one that was used for the aforementioned HTML page. On the
      other hand, if the user submits the form, and the form does a POST submission, then the user
      agent will not use an application cache at all; the submission will be made to the
      network.
  </p>

      </dd>

      <dt>Otherwise</dt>

      <dd>

      <ol>
        <li>Let <var>request</var> be the new resource.</li>

        <li>If <var>request</var> is a URL, set <var>request</var> to a new <a>request</a> whose <a>url</a>
        is <var>request</var>.</li>

        <li>Set <var>request</var>'s <a>client</a> to the
        <a>source browsing context</a>'s <a>active document</a>'s <code>Window</code>
        object's <a>environment settings object</a>, <a>target browsing context</a> to the
        <a>browsing context</a> being navigated, <a>destination</a> to "<code>document</code>",
        <a>mode</a> to "<code>navigate</code>", <a>credentials mode</a> to "<code>include</code>", <a>use-URL-credentials flag</a>, and <a>redirect mode</a> to "<code>manual</code>".</li>

        <li>Set <var>request</var>'s <a>omit-<code>Origin</code>-header flag</a>.

        <li>If <var>request</var>'s <a>method</a> is not
        <code>GET</code>, or, if the <a>navigation algorithm</a>
        was invoked as a result of the <a>form submission
        algorithm</a>, then if there is an <a>origin</a> of the <a>active document</a>
        of the <a>source browsing context</a>, unset <var>request</var>'s
        <a>omit-<code>Origin</code>-header flag</a>.</li>

        <li>Otherwise, if the <a>browsing context</a> being navigated is a <a>child
        browsing context</a>, and the <a>browsing context container</a> of the
        <a>browsing context</a> being navigated has a <a>browsing context scope
        origin</a>, set <var>request</var>'s <a>origin</a>
        to that <a>browsing context scope origin</a> and unset <var>request</var>'s
        <a>omit-<code>Origin</code>-header flag</a>.</li>

        <li><a>Fetch</a> <var>request</var>.</li>
      </ol>

      </dd>

    </dl>

    </li>

    <li>

    If <var>gone async</var> is false, return to whatever algorithm invoked the
    navigation steps and continue running these steps <a>in parallel</a>.

    </li>

    <li>Let <var>gone async</var> be true.</li>

    <li>Wait for one or more bytes to be available or for the user agent to establish that the
    resource in question is empty. During this time, the user agent may allow the user to cancel this
    navigation attempt or start other navigation attempts.</li>

    <li>

    <i>Handle redirects</i>: If fetching the resource results in a redirect, and either the
    <a>URL</a> of the target of the redirect has the <a>same origin</a> as the original
    resource, or the resource is being obtained using the POST method or a safe method (in HTTP
    terms), return to <a>the step labeled <i>fragment
    identifiers</i></a> with the new resource, except that if the <a>URL</a> of the target of
    the redirect does not have a fragment identifier and the <a>URL</a> of the resource that
    led to the redirect does, then the fragment identifier of the resource that led to the redirect
    must be propagated to the <a>URL</a> of the target of the redirect.

    <p class="example">
  So for instance, if the original URL was "<code>http://example.com/#!sample</code>" and "<code>http://example.com/</code>" is
    found to redirect to "<code>https://example.com/</code>", the URL of the new resource
    will be "<code>https://example.com/#!sample</code>".
  </p>

    Otherwise, if fetching the resource results in a redirect but the <a>URL</a> of the
    target of the redirect does not have the <a>same origin</a> as the original resource and
    the resource is being obtained using a method that is neither the POST method nor a safe method
    (in HTTP terms), then abort these steps. The user agent may indicate to the user that the
    navigation has been aborted for security reasons.

    </li>

    <li>

    <strong>Fallback in prefer-online mode</strong>: If the resource was not fetched from an
    <a>application cache</a>, and was to be fetched using <code>GET</code>, and
    there are <a>relevant application caches</a> that are
    identified by a URL with the <a>same origin</a> as the URL in question, and that have this
    URL as one of their entries, excluding entries marked as <a>foreign</a>, and whose <a>mode</a> is <a>prefer-online</a>, and the user didn't cancel the
    navigation attempt during the earlier step, and the navigation attempt failed (e.g. the server
    returned a 4xx or 5xx status, or there was a DNS error), then:

    Let <var>candidate</var> be the resource identified by the URL in question from the
    <a>most appropriate application cache</a> of those that
    match.

    If <var>candidate</var> is not marked as <a>foreign</a>, then the user agent must discard the failed
    load and instead continue along these steps using <var>candidate</var> as the resource.
    The user agent may indicate to the user that the original page load failed, and that the page
    used was a previously cached resource.

    <p class="note">
  This does not affect the <i>address of the resource from which Request-URIs are
    obtained</i>, as used to set <a>the document's referrer</a> in the <a>initialize the
    <code>Document</code> object</a> steps below; they still use the value as computed by the
    original fetch algorithm.
  </p>

    </li>

    <li>

    <strong>Fallback for fallback entries</strong>: If the resource was not fetched from an
    <a>application cache</a>, and was to be fetched using <code>GET</code>, and
    its URL <a>matches the fallback namespace</a>
    of one or more <a>relevant application caches</a>, and
    the <a>most appropriate application cache</a> of those
    that match does not have an entry in its <a>online
    safelist</a> that has the <a>same origin</a> as the resource's URL and that is a
    <a>prefix match</a> for the resource's URL, and the user didn't cancel the navigation
    attempt during the earlier step, and the navigation attempt failed (e.g. the server returned a
    4xx or 5xx status, or there was a DNS error), then:

    Let <var>candidate</var> be the <a>fallback
    resource</a> specified for the <a>fallback
    namespace</a> in question. If multiple application caches match, the user agent must use the
    fallback of the <a>most appropriate application
    cache</a> of those that match.

    If <var>candidate</var> is not marked as <a>foreign</a>, then the user agent must discard the failed
    load and instead continue along these steps using <var>candidate</var> as the resource.
    <a>The document's address</a>, if appropriate, will still be the originally requested URL,
    not the fallback URL, but the user agent may indicate to the user that the original page load
    failed, that the page used was a fallback resource, and what the URL of the fallback resource
    actually is.

    <p class="note">
  This does not affect the <i>address of the resource from which Request-URIs are
    obtained</i>, as used to set <a>the document's referrer</a> in the <a>initialize the
    <code>Document</code> object</a> steps below; they still use the value as computed by the
    original fetch algorithm.
  </p>

    </li>

    <li>

    <i>Resource handling</i>: If the resource's out-of-band metadata (e.g. HTTP headers), not
    counting any <a>type information</a> (such as the Content-Type HTTP
    header), requires some sort of processing that will not affect the browsing context, then
    perform that processing and abort these steps.

    <div class="note">
      Such processing might be triggered by, amongst other things, the following:
      <ul class="brief">
      <li>HTTP status codes (e.g. 204 No Content or 205 Reset Content)</li>
      <li>Network errors (e.g. the network interface being unavailable)</li>
      <li>Cryptographic protocol failures (e.g. an incorrect TLS certificate)</li>

      </ul>
    </div>

    Responses with HTTP <code>Content-Disposition</code>
    headers specifying the <code>attachment</code> disposition type must be handled
    <a>as a download</a>.

    HTTP 401 responses that do not include a challenge recognized by the user agent must be
    processed as if they had no challenge, e.g. rendering the entity body as if the response had
    been 200 OK.

    User agents may show the entity body of an HTTP 401 response even when the response does
    include a recognized challenge, with the option to login being included in a non-modal fashion,
    to enable the information provided by the server to be used by the user before authenticating.
    Similarly, user agents should allow the user to authenticate (in a non-modal fashion) against
    authentication challenges included in other responses such as HTTP 200 OK responses, effectively
    allowing resources to present HTTP login forms without requiring their use.

    </li>

    <li>Let <var>type</var> be <a>the sniffed type of
    the resource</a>.</li>

    <li>If the user agent has been configured to process resources of the given <var>type</var> using some mechanism other than rendering the content in a <a>browsing
    context</a>, then skip this step. Otherwise, if the <var>type</var> is one of the
    following types, jump to the appropriate entry in the following list, and process the resource as
    described there:

    <dl class="switch">

      <dt>an <a>HTML MIME type</a></dt>
      <dd>Follow the steps given in the <a>HTML document</a> section,
      and then, once they have completed, abort this <a>navigate</a> algorithm.</dd>

      <dt>an <a>XML MIME type</a> that is not an <a>explicitly supported XML
      type</a></dt>

      <dd>Follow the steps given in the <a>XML document</a> section. If
      that section determines that the content is <em>not</em> to be displayed as a generic XML
      document, then proceed to the next step in this overall set of steps. Otherwise, once the steps
      given in the <a>XML document</a> section have completed, abort this
      <a>navigate</a> algorithm.</dd>

      <dt>a <a>JavaScript MIME type</a></dt>
      <dt>a <a>JSON MIME type</a> that is not an <a>explicitly supported JSON
      type</a></dt>
      <dt>"<code>text/cache-manifest</code>"</dt>
      <dt>"<code>text/css</code>"</dt>
      <dt>"<code>text/plain</code>"</dt>
      <dt>"<code>text/vtt</code>"</dt>
      <dd>Follow the steps given in the <a>plain text file</a> section,
      and then, once they have completed, abort this <a>navigate</a> algorithm.</dd>

      <dt>"<code>multipart/x-mixed-replace</code>"</dt>
      <dd>Follow the steps given in the <a>multipart/x-mixed-replace</a> section, and then,
      once they have completed, abort this <a>navigate</a> algorithm.</dd>

      <dt>A supported image, video, or audio type</dt>
      <dd>Follow the steps given in the <a>media</a> section, and then,
      once they have completed, abort this <a>navigate</a> algorithm.</dd>

      <dt>A type that will use an external application to render the content in the <a>browsing
      context</a></dt>
      <dd>Follow the steps given in the <a>plugin</a> section, and then,
      once they have completed, abort this <a>navigate</a> algorithm.</dd>

    </dl>

    An <dfn>explicitly supported XML type</dfn> is one for which the user agent is configured to
    use an external application to render the content (either a <a>plugin</a> rendering
    directly in the <a>browsing context</a>, or a separate application), or one for which the
    user agent has dedicated processing rules (e.g. a Web browser with a built-in Atom feed viewer
    would be said to explicitly support the <code>application/atom+xml</code> MIME type), or one for
    which the user agent has a dedicated handler (e.g. one registered using <code>registerContentHandler()</code>).

    The term <dfn>JSON MIME type</dfn> is used to refer to the <a>MIME
    types</a> <code>application/json</code>, <code>text/json</code>, and any <a>MIME
    type</a> whose subtype ends with the five characters "<code>+json</code>".

    An <dfn>explicitly supported JSON type</dfn> is one for which the user agent is configured to
    use an external application to render the content (either a <a>plugin</a> rendering
    directly in the <a>browsing context</a>, or a separate application), or one for which the
    user agent has dedicated processing rules, or one for which the user agent has a dedicated
    handler (e.g. one registered using <code>registerContentHandler()</code>).

    <dfn>Setting the document's address</dfn>: If there is no
    <dfn>override URL</dfn>, then any <code>Document</code> created by these steps must have its
    <a>address</a> set to the <a>URL</a> that was
    originally to be fetched, ignoring any other data that was used to obtain the resource. However,
    if there <em>is</em> an <a>override URL</a>, then any <code>Document</code> created by
    these steps must have its <a>address</a> set to that
    <a>URL</a> instead.

    <p class="note">
  An <a>override URL</a> is set when <a>dereferencing a <code>javascript:</code> URL</a> and when
    performing <a>an overridden reload</a>.
  </p>

    <dfn>Initializing a new <code>Document</code>
    object</dfn>: when a <code>Document</code> is created as part of the above steps, the user agent
    will be required to additionally run the following algorithm after creating the new object:

    <ol>

      <li>Create a new <code>Window</code> object, and associate it with the
      <code>Document</code>, with one exception: if the <a>browsing context</a>'s only entry in
      its <a>session history</a> is the <code>about:blank</code> <code>Document</code> that was
      added when the <a>browsing context</a> was created, and navigation is occurring with
      <a>replacement enabled</a>, and that <code>Document</code> has the <a>same
      origin</a> as the new <code>Document</code>, then use the <code>Window</code> object of that
      <code>Document</code> instead, and change the <code>document</code>
      attribute of the <code>Window</code> object to point to the new <code>Document</code>.

      <li>Set the <code>Window</code> object's <a>HTTPS
      state</a> to the <a>HTTPS state</a> of the
      resource used to generate the document.</li>

      <li>Set <a>the document's referrer</a> to the <i>address of the resource from which
      Request-URIs are obtained</i> as determined when the fetch algorithm obtained the resource, if
      that algorithm was used and determined such a value; otherwise, set it to the empty
      string.</li>

      <li><a>Implement the sandboxing</a> for the <code>Document</code>.</li>

      <li>

      If the <a>active sandboxing flag set</a> of the <code>Document</code>'s
      <a>browsing context</a> or any of its <a>ancestor
      browsing contexts</a> (if any) have the <a>sandboxed fullscreen browsing context
      flag</a> set, then skip this step.

      If the <code>Document</code>'s <a>browsing context</a> has a <a>browsing context
      container</a> and either it is not an <code>iframe</code> element, or it does not have the
      <code>allowfullscreen</code> attribute specified, or its
      <code>Document</code> does not have the <a>fullscreen enabled flag</a> set, then also
      skip this step.

      Otherwise, set the <code>Document</code>'s <a>fullscreen enabled flag</a>.

    </ol>

    </li>

    <li>

    <i>Non-document content</i>: If, given <var>type</var>, the new resource is to be
    handled by displaying some sort of inline content, e.g. a native rendering of the content, an
    error message because the specified type is not supported, or an inline prompt to allow the user
    to select <a>a registered handler</a> for
    the given type, then <a>display the inline content</a>, and
    then abort these steps.

    <p class="note">
  In the case of a registered handler being used, the algorithm will be reinvoked
    with a new URL to handle the request.
  </p>

    </li>

    <li>Otherwise, the document's <var>type</var> is such that the resource will not
    affect the browsing context, e.g. because the resource is to be handed to an external application
    or because it is an unknown type that will be processed <a>as a download</a>. <a>Process the resource appropriately</a>.

  </ol>

  When a resource is handled by <dfn>passing its URL or
  data to an external software package</dfn> separate from the user agent (e.g. handing a <code>mailto:</code> URL to a mail client, or a Word document to a word
  processor), user agents should attempt to mitigate the risk that this is an attempt to exploit the
  target software, e.g. by prompting the user to confirm that the <a>source browsing
  context</a>'s <a>active document</a>'s <a>origin</a> is to be allowed to invoke the
  specified software. In particular, if the <a>navigate</a> algorithm, when it was invoked,
  was not <a>allowed to show a popup</a>, the user agent should not invoke the external
  software package without prior user confirmation.

  <p class="example">
  For example, there could be a vulnerability in the target software's URL
  handler which a hostile page would attempt to exploit by tricking a user into clicking a link.
  </p>

  <hr />

  Some of the sections below, to which the above algorithm defers in certain cases, require the
  user agent to <dfn>update the session history with the new page</dfn>. When a user agent is
  required to do this, it must <a>queue a task</a> (associated with the <code>Document</code>
  object of the <a>current entry</a>, not the new one) to run the following steps:

  <ol>

    <li>

    <a>Unload</a> the <code>Document</code> object of the
    <a>current entry</a>, with the <var>recycle</var> parameter set to false.

    If this instance of the <a>navigation</a> algorithm is canceled while
    this step is running the <a>unload a document</a> algorithm, then the <a>unload a
    document</a> algorithm must be allowed to run to completion, but this instance of the <a>navigation</a> algorithm must not run beyond this step. (In particular, for
    instance, the cancelation of this algorithm does not abort any event dispatch or script
    execution occurring as part of unloading the document or its descendants.)

    </li>

    <li>

    <dl>

      <dt>If the navigation was initiated for <dfn>entry update</dfn> of an entry</dt>

      <dd>

      <ol>

        <li>Replace the <code>Document</code> of the entry being updated, and any other entries
        that referenced the same document as that entry, with the new <code>Document</code>.</li>

        <li><a>Traverse the history</a> to the new entry.</li>

      </ol>

      <p class="note">
  This can only happen if the entry being updated is not the <a>current
      entry</a>, and can never happen with <a>replacement enabled</a>. (It happens when the
      user tried to traverse to a session history entry that no longer had a <code>Document</code>
      object.)
  </p>

      </dd>

      <dt>Otherwise</dt>

      <dd>

      <ol>

        <li>

        Remove all the entries in the <a>browsing context</a>'s <a>session
        history</a> after the <a>current entry</a>. If the <a>current entry</a> is
        the last entry in the session history, then no entries are removed.

        <p class="note">
  This <a>doesn't necessarily have to affect</a> the
        user agent's user interface.
  </p>

        </li>

        <li>Append a new entry at the end of the <code>History</code> object representing the new
        resource and its <code>Document</code> object and related state.</li>

        <li><a>Traverse the history</a> to the new entry. If the navigation was initiated
        with <a>replacement enabled</a>, then the traversal must itself be initiated with
        <a>replacement enabled</a>.

        </li>

      </ol>

      </dd>

    </dl>

    </li>

    <li>The <a>navigation algorithm</a> has now <dfn>matured</dfn>.</li>

    <li><i>Fragment identifier loop</i>: <a>Spin the event loop</a> for a user-agent-defined
    amount of time, as desired by the user agent implementor. (This is intended to allow the user
    agent to optimize the user experience in the face of performance concerns.)</li>

    <li>If the <code>Document</code> object has no parser, or its parser has <a>stopped parsing</a>, or the user agent has reason to believe the user is no longer
    interested in scrolling to the fragment identifier, then abort these steps.</li>

    <li><a>Scroll to the fragment identifier</a> given in <a>the document's
    address</a>. If this fails to find <a>an
    indicated part of the document</a>, then return to the <i>fragment identifier loop</i>
    step.</li>

  </ol>

  The <a>task source</a> for this <a>task</a> is the
  <a>networking task source</a>.

<h4 id="page-load-processing-model-for-html-files"><dfn>Page load processing model for HTML files</dfn></h4>

  When an HTML document is to be loaded in a <a>browsing context</a>, the user agent must
  <a>queue a task</a> to create a <code>Document</code> object, mark it as being an <a>HTML document</a>, set its <a>content type</a> to "<code>text/html</code>",
  <a>initialize the <code>Document</code> object</a>, and finally create an <a>HTML
  parser</a> and associate it with the <code>Document</code>. Each <a>task</a> that the <a>networking task source</a> places on the
  <a>task queue</a> while fetching runs must then fill the parser's <a>input byte
  stream</a> with the fetched bytes and cause the <a>HTML parser</a> to perform the
  appropriate processing of the input stream.

  <p class="note">
  The <a>input byte stream</a> converts bytes into characters for use in the
  <a>tokenizer</a>. This process relies, in part, on character encoding
  information found in the real <a>Content-Type metadata</a> of the
  resource; the "sniffed type" is not used for this purpose.
  </p>

  When no more bytes are available, the user agent must <a>queue a task</a> for the parser
  to process the implied EOF character, which eventually causes a <code>load</code> event to be fired.

  After creating the <code>Document</code> object, but before any script execution, certainly
  before the parser <a>stops</a>, the user agent must <a>update the
  session history with the new page</a>.

  <p class="note">
  <a>Application cache selection</a> happens <a>in the HTML parser</a>.
  </p>

  The <a>task source</a> for the two tasks mentioned in this section must be the
  <a>networking task source</a>.

<h4 id="page-load-processing-model-for-xml-files"><dfn>Page load processing model for XML files</dfn></h4>

  When faced with displaying an XML file inline, user agents must follow the requirements defined
  in the XML and Namespaces in XML recommendations, RFC 7303, DOM, and other relevant specifications
  to create a <code>Document</code> object and a corresponding <a>XML parser</a>. [[!XML]] [[!XML-NAMES]] [[!RFC7303]] [[!DOM]]

  <p class="note">
  At the time of writing, the XML specification community had not actually yet
  specified how XML and the DOM interact.
  </p>

  After the <code>Document</code> is created, the user agent must <a>initialize the
  <code>Document</code> object</a>.

  The actual HTTP headers and other metadata, not the headers as mutated or implied by the
  algorithms given in this specification, are the ones that must be used when determining the
  character encoding according to the rules given in the above specifications. Once the character
  encoding is established, the <a>document's character encoding</a> must be set to that
  character encoding.

  If the root element, as parsed according to the XML specifications cited above, is found to be
  an <code>html</code> element with an attribute <code>manifest</code>
  whose value is not the empty string, then, as soon as the element is <a>inserted into the document</a>, the user agent must <a>resolve</a> the value of that attribute relative to that element, and if
  that is successful, must apply the <a>URL serializer</a>
  algorithm to the resulting <a>parsed URL</a> with the <i>exclude fragment flag</i> set to
  obtain <var>manifest URL</var>, and then run the <a>application
  cache selection algorithm</a> with <var>manifest URL</var> as the manifest URL, passing in the
  newly-created <code>Document</code>. Otherwise, if the attribute is absent, its value is the empty
  string, or resolving its value fails, then as soon as the root element is <a>inserted into the document</a>, the user agent must run the <a>application cache selection algorithm</a> with no manifest, and
  passing in the <code>Document</code>.

  <p class="note">
  Because the processing of the <code>manifest</code>
  attribute happens only once the root element is parsed, any URLs referenced by processing
  instructions before the root element (such as <code>&lt;?xml-stylesheet?></code> PIs)
  will be fetched from the network and cannot be cached.
  </p>

  User agents may examine the namespace of the root <code>Element</code> node of this
  <code>Document</code> object to perform namespace-based dispatch to alternative processing tools,
  e.g. determining that the content is actually a syndication feed and passing it to a feed handler.
  If such processing is to take place, abort the steps in this section, and jump to <a>the next step</a> (labeled <i>non-document content</i>) in the
  <a>navigate</a> steps above.

  Otherwise, then, with the newly created <code>Document</code>, the user agent must <a>update
  the session history with the new page</a>. User agents may do this before the complete document
  has been parsed (thus achieving <i>incremental rendering</i>), and must do this before any scripts
  are to be executed.

  Error messages from the parse process (e.g. XML namespace well-formedness errors) may be
  reported inline by mutating the <code>Document</code>.

<h4 id="page-load-processing-model-for-text-files"><dfn>Page load processing model for text files</dfn></h4>

  When a plain text document is to be loaded in a <a>browsing context</a>, the user agent
  must <a>queue a task</a> to create a <code>Document</code> object, mark it as being an <a>HTML document</a>, set its <a>content type</a> to the sniffed MIME type of the
  resource (<var>type</var> in the <a>navigate</a> algorithm), <a>initialize the
  <code>Document</code> object</a>, create an <a>HTML parser</a>, associate it with the
  <code>Document</code>, act as if the tokenizer had emitted a start tag token with the tag name
  "pre" followed by a single U+000A LINE FEED (LF) character, and switch the <a>HTML parser</a>'s
  tokenizer to the <a>PLAINTEXT state</a>. Each <a>task</a> that
  the <a>networking task source</a> places on the <a>task queue</a> while fetching runs
  must then fill the parser's <a>input byte stream</a> with the fetched bytes and cause the
  <a>HTML parser</a> to perform the appropriate processing of the input stream.

  The rules for how to convert the bytes of the plain text document into actual characters, and
  the rules for actually rendering the text to the user, are defined by the specifications for the
  sniffed MIME type of the resource (<var>type</var> in the <a>navigate</a> algorithm).

  The <a>document's character encoding</a> must be set to the character encoding used to
  decode the document.

  Upon creation of the <code>Document</code> object, the user agent must run the <a>application cache selection algorithm</a> with no manifest, and
  passing in the newly-created <code>Document</code>.

  When no more bytes are available, the user agent must <a>queue a task</a> for the parser
  to process the implied EOF character, which eventually causes a <code>load</code> event to be fired.

  After creating the <code>Document</code> object, but potentially before the page has finished
  parsing, the user agent must <a>update the session history with the new page</a>.

  User agents may add content to the <code>head</code> element of the <code>Document</code>, e.g.
  linking to a style sheet or a binding, providing script, giving the document a
  <code>title</code>, etc.

  <p class="note">
  In particular, if the user agent supports the <code>Format=Flowed</code>
  feature of RFC 3676 then the user agent would need to apply extra styling to cause the text to
  wrap correctly and to handle the quoting feature. This could be performed using, e.g., a
  binding or a CSS extension.
  </p>

  The <a>task source</a> for the two tasks mentioned in this section must be the
  <a>networking task source</a>.

<h4 id="page-load-processing-model-for-multipartx-mixed-replace-resources"><dfn>Page load processing model for <code>multipart/x-mixed-replace</code> resources</dfn></h4>

  When a resource with the type <code>multipart/x-mixed-replace</code> is to be loaded in a
  <a>browsing context</a>, the user agent must parse the resource using the rules for
  multipart types. [[!RFC2046]]

  For each body part obtained from the resource, the user agent must run a new instance of the
  <a>navigate</a> algorithm, starting from the <i>resource handling</i> step, using the new
  body part as the resource being navigated, with <a>replacement enabled</a> if a previous
  body part from the same resource resulted in a <code>Document</code> object being created and
  <a>initialized</a>, and otherwise using the same
  setup as the <a>navigate</a> attempt that caused this section to be invoked in the first
  place.

  For the purposes of algorithms processing these body parts as if they were complete stand-alone
  resources, the user agent must act as if there were no more bytes for those resources whenever the
  boundary following the body part is reached.

  <p class="note">
  Thus, <code>load</code> events (and for that matter <code>unload</code> events) do fire for each body part loaded.
  </p>

<h4 id="page-load-processing-model-for-media"><dfn>Page load processing model for media</dfn></h4>

  When an image, video, or audio resource is to be loaded in a <a>browsing context</a>, the
  user agent should create a <code>Document</code> object, mark it as being an <a>HTML document</a>, set its <a>content
  type</a> to the sniffed MIME type of the resource (<var>type</var> in the
  <a>navigate</a> algorithm), <a>initialize the <code>Document</code> object</a>, append
  an <code>html</code> element to the <code>Document</code>, append a <code>head</code> element and
  a <code>body</code> element to the <code>html</code> element, append an element <var>host element</var> for the media, as described below, to the <code>body</code> element,
  and set the appropriate attribute of the element <var>host element</var>, as described
  below, to the address of the image, video, or audio resource.

  The element <var>host element</var> to create for the media is the element given in
  the table below in the second cell of the row whose first cell describes the media. The
  appropriate attribute to set is the one given by the third cell in that same row.

  <table>
    <thead>
    <tr> <th> Type of media
          <th> Element for the media
          <th> Appropriate attribute
    <tr> <td> Image
          <td> <code>img</code>
          <td> <code>src</code>
    <tr> <td> Video
          <td> <code>video</code>
          <td> <code>src</code>
    <tr> <td> Audio
          <td> <code>audio</code>
          <td> <code>src</code>
  </table>

  Then, the user agent must act as if it had <a>stopped
  parsing</a>.

  Upon creation of the <code>Document</code> object, the user agent must run the <a>application cache selection algorithm</a> with no manifest, and
  passing in the newly-created <code>Document</code>.

  After creating the <code>Document</code> object, but potentially before the page has finished
  fully loading, the user agent must <a>update the session history with the new page</a>.

  User agents may add content to the <code>head</code> element of the <code>Document</code>, or
  attributes to the element <var>host element</var>, e.g. to link to a style sheet or a
  binding, to provide a script, to give the document a <code>title</code>, to make the media
  <a>autoplay</a>, etc.

<h4 id="page-load-processing-model-for-content-that-uses-plugins"><dfn>Page load processing model for content that uses plugins</dfn></h4>

  When a resource that requires an external resource to be rendered is to be loaded in a
  <a>browsing context</a>, the user agent should create a <code>Document</code> object, mark
  it as being an <a>HTML document</a> and mark it as being a
  <dfn>plugin document</dfn>, set its <a>content
  type</a> to the sniffed MIME type of the resource (<var>type</var> in the
  <a>navigate</a> algorithm), <a>initialize the <code>Document</code> object</a>, append
  an <code>html</code> element to the <code>Document</code>, append a <code>head</code> element and
  a <code>body</code> element to the <code>html</code> element, append an <code>embed</code> to the
  <code>body</code> element, and set the <code>src</code> attribute of the
  <code>embed</code> element to the address of the resource.

  <p class="note">
  The term <a>plugin document</a> is used by
  <cite>Content Security Policy</cite> as part of the mechanism that ensures <code>iframe</code>s
  can't be used to evade <code>plugin-types</code> directives. [[!CSP]]
  </p>

  Then, the user agent must act as if it had <a>stopped
  parsing</a>.

  Upon creation of the <code>Document</code> object, the user agent must run the <a>application cache selection algorithm</a> with no manifest, and
  passing in the newly-created <code>Document</code>.

  After creating the <code>Document</code> object, but potentially before the page has finished
  fully loading, the user agent must <a>update the session history with the new page</a>.

  User agents may add content to the <code>head</code> element of the <code>Document</code>, or
  attributes to the <code>embed</code> element, e.g. to link to a style sheet or a binding, or
  to give the document a <code>title</code>.

  <p class="note">
  If the <code>Document</code>'s <a>active sandboxing
  flag set</a> has its <a>sandboxed plugins browsing context flag</a> set, the synthesized
  <code>embed</code> element will <a>fail to render the content</a> if
  the relevant <a>plugin</a> cannot be <a>secured</a>.
  </p>

<h4 id="page-load-processing-model-for-inline-content-that-doesnt-have-a-dom"><dfn>Page load processing model for inline content that doesn't have a DOM</dfn></h4>

  When the user agent is to display a user agent page inline in a <a>browsing context</a>,
  the user agent should create a <code>Document</code> object, mark it as being an <a>HTML document</a>, set its <a>content type</a> to "<code>text/html</code>",
  <a>initialize the <code>Document</code> object</a>, and then either associate that
  <code>Document</code> with a custom rendering that is not rendered using the normal
  <code>Document</code> rendering rules, or mutate that <code>Document</code> until it represents
  the content the user agent wants to render.

  Once the page has been set up, the user agent must act as if it had <a>stopped parsing</a>.

  Upon creation of the <code>Document</code> object, the user agent must run the <a>application cache selection algorithm</a> with no manifest,
  passing in the newly-created <code>Document</code>.

  After creating the <code>Document</code> object, but potentially before the page has been
  completely set up, the user agent must <a>update the session history with the new
  page</a>.

<h4 id="navigating-to-a-fragment-identifier"><dfn>Navigating to a fragment identifier</dfn></h4>

  When a user agent is supposed to navigate to a fragment identifier, then the user agent must
  run the following steps:

  <ol>

    <li>

    Remove all the entries in the <a>browsing context</a>'s <a>session history</a>
    after the <a>current entry</a>. If the <a>current entry</a> is the last entry in the
    session history, then no entries are removed.

    <p class="note">
  This <a>doesn't necessarily have to affect</a> the user
    agent's user interface.
  </p>

    </li>

    <li>Remove any <a>tasks</a> queued by the <a>history traversal
    task source</a> that are associated with any <code>Document</code> objects in the
    <a>top-level browsing context</a>'s <a>document family</a>.</li>

    <li>Append a new entry at the end of the <code>History</code> object representing the new
    resource and its <code>Document</code> object and related state. Its <a>URL</a> must be set
    to the address to which the user agent was <a>navigating</a>. The title
    must be left unset.</li>

    <li><a>Traverse the history</a> to the new entry, with the <i>non-blocking events</i> flag
    set. This will <a>scroll to the fragment
    identifier</a> given in what is now <a>the document's address</a>.</li>

  </ol>

  <p class="note">
  If the scrolling fails because the relevant <a>ID</a> has
  not yet been parsed, then the original <a>navigation</a> algorithm will
  take care of the scrolling instead, as the last few steps of its <a>update the session history
  with the new page</a> algorithm.
  </p>

  <hr />

  When the user agent is required to <dfn>scroll to the fragment identifier</dfn> and <a>the
  indicated part of the document</a>, if any, is <a>being rendered</a>, the user agent must
  either change the scrolling position of the document using the following algorithm, or perform
  some other action such that <a>the indicated part of the document</a> is brought to the
  user's attention. If there is no indicated part, or if the indicated part is not <a>being
  rendered</a>, then the user agent must do nothing. The aforementioned algorithm is as
  follows:

  <ol>

    <li>Let <var>target</var> be <a>the indicated part of the
    document</a>, as defined below.</li>

    <li>If <var>target</var> is the top of the document, then <a>scroll to the
    beginning of the document</a> for the <code>Document</code>, and abort these steps. [[!CSSOM-VIEW]]</li>

    <li>Use the <a>scroll an element into view</a> algorithm to scroll <var>target</var> into view, with the <var>align to top flag</var> set. [[!CSSOM-VIEW]]</li>

    <li>Run the <a>focusing steps</a> for that element, with the <code>Document</code>'s
    viewport as the <i>fallback target</i>.</li>

    <li>Optionally, move the <a>sequential focus navigation starting point</a> to
    <var>target</var>.

  </ol>

  <dfn>The indicated part of the document</dfn> is the one that the fragment identifier, if any,
  identifies. The semantics of the fragment identifier in terms of mapping it to a specific DOM Node
  is defined by the specification that defines the <a>MIME type</a> used by the
  <code>Document</code> (for example, the processing of fragment identifiers for <a>XML MIME types</a> is the responsibility of RFC7303). [[!RFC7303]]

  For HTML documents (and <a>HTML MIME types</a>), the following
  processing model must be followed to determine what <a>the indicated part of the
  document</a> is.

  <ol>

    <li>Apply the <a>URL parser</a> algorithm to the <a>URL</a>, and let <var>fragid</var> be the <a>fragment</a> component of the
    resulting <a>parsed URL</a>.</li>

    <li>If <var>fragid</var> is the empty string, then <a>the indicated part of the
    document</a> is the top of the document; stop the algorithm here.</li>

    <li>Let <var>fragid bytes</var> be the result of <a>percent-decoding</a> <var>fragid</var>.</li>

    <li>Let <var>decoded fragid</var> be the result of applying the <a>UTF-8
    decoder</a> algorithm to <var>fragid bytes</var>. If the <a>UTF-8 decoder</a>
    emits a <a>decoder error</a>, abort the decoder and instead jump to the step labeled <i>no
    decoded fragid</i>.</li>

    <li>If there is an element in the DOM that has an <a>ID</a> exactly
    equal to <var>decoded fragid</var>, then the first such element in <a>tree order</a> is
    <a>the indicated part of the document</a>; stop the algorithm here.</li>

    <li><i>No decoded fragid</i>: If there is an <code>a</code> element in the DOM that has a <code>name</code> attribute whose value is exactly equal to <var>fragid</var> (<em>not</em> <var>decoded fragid</var>), then the first such
    element in <a>tree order</a> is <a>the indicated part of the document</a>; stop the algorithm
    here.</li>

    <li>If <var>fragid</var> is an <a>ASCII case-insensitive</a> match for the
    string <code>top</code>, then <a>the indicated part of the document</a> is the top
    of the document; stop the algorithm here.</li>

    <li>Otherwise, there is no <a>indicated part of
    the document</a>.</li>

  </ol>

  For the purposes of the interaction of HTML with Selectors' <dfn><code>:target</code></dfn> pseudo-class, the <dfn><i>target element</i></dfn>
  is <a>the indicated part of the document</a>, if that is an element; otherwise there is no
  <i>target element</i>. [[!CSS3-SELECTORS]]

  The <a>task source</a> for the task mentioned in this section must be the <a>DOM
  manipulation task source</a>.

  </div>

<h4 id="history-traversal"><dfn>History traversal</dfn></h4>

  <div class="impl">

  When a user agent is required to <dfn>traverse the history</dfn> to a <var>specified
  entry</var>, optionally with <a>replacement enabled</a>, and optionally with the
  <i>non-blocking events</i> flag set, the user agent must act as follows.

  <p class="note">
  This algorithm is not just invoked when <a>explicitly going back or forwards in the session history</a> &mdash; it is also invoked
  in other situations, for example when <a>navigating a browsing context</a>,
  as part of <a>updating the session history
  with the new page</a>.
  </p>

  <ol>

    <li>

    If there is no longer a <code>Document</code> object for the entry in question,
    <a>navigate</a> the <a>browsing
    context</a> to the resource for that entry to perform an <a>entry update</a> of that
    entry, and abort these steps. The "<a>navigate</a>" algorithm reinvokes this "traverse"
    algorithm to complete the traversal, at which point there <em>is</em> a <code>Document</code>
    object and so this step gets skipped. The navigation must be done using the same <a>source
    browsing context</a> as was used the first time this entry was created. (This can never
    happen with <a>replacement enabled</a>.)

    <p class="note">
  If the resource was obtained using a non-idempotent action, for example a POST
    form submission, or if the resource is no longer available, for example because the computer is
    now offline and the page wasn't cached, navigating to it again might not be possible. In this
    case, the navigation will result in a different page than previously; for example, it might be
    an error message explaining the problem or offering to resubmit the form.
  </p>

    </li>

    <li>If the <a>current entry</a>'s title was not set by the <code>pushState()</code> or <code>replaceState()</code> methods, then set its title to the value
    returned by the <code>document.title</code> IDL attribute.</li>

    <li>If appropriate, update the <a>current entry</a> in the <a>browsing
    context</a>'s <code>Document</code> object's <code>History</code> object to reflect any state
    that the user agent wishes to persist. The entry is then said to be <a>an entry with persisted
    user state</a>.</li>

    <li>If the <var>specified entry</var> has a different <code>Document</code> object
    than the <a>current entry</a>, then run the following substeps:

    <ol>

      <li>Remove any <a>tasks</a> queued by the <a>history traversal
      task source</a> that are associated with any <code>Document</code> objects in the
      <a>top-level browsing context</a>'s <a>document family</a>.</li>

      <li>

      If the <a>origin</a> of the <code>Document</code> of the <var>specified
      entry</var> is not the <a>same</a> as the <a>origin</a> of the
      <code>Document</code> of the <a>current entry</a>, then run the following
      sub-sub-steps:

      <ol>

        <li>The current <a>browsing context name</a> must be stored with all the entries in
        the history that are associated with <code>Document</code> objects with the <a>same
        origin</a> as the <a>active document</a> <em>and</em> that are contiguous with the
        <a>current entry</a>.</li>

        <li>If the browsing context is a <a>top-level browsing context</a>,
        but not an <a>auxiliary browsing context</a>, then the browsing context's
        <a>browsing context name</a> must be unset.</li>

      </ol>

      </li>

      <li>Make the <var>specified entry</var>'s
      <code>Document</code> object the <a>active document</a> of the <a>browsing
      context</a>.</li>

      <li>

      If the <var>specified entry</var> has a <a>browsing context name</a> stored
      with it, then run the following sub-sub-steps:

      <ol>

        <li>Set the browsing context's <a>browsing context name</a> to the name stored with
        the specified entry.</li>

        <li>Clear any <a>browsing context names</a> stored
        with all entries in the history that are associated with <code>Document</code> objects with
        the <a>same origin</a> as the new <a>active document</a> and that are contiguous
        with the specified entry.</li>

      </ol>

      </li>

      <li>If the <var>specified entry</var>'s
      <code>Document</code> has any form controls whose <a>autofill field name</a> is "<code>off</code>", invoke the <a>reset algorithm</a> of each of those elements.</li>

      <li>

      If the <a>current document readiness</a> of the <var>specified entry</var>'s
      <code>Document</code> is "<code>complete</code>", <a>queue a task</a> to run
      the following sub-sub-steps:

      <ol>

        <li>If the <code>Document</code>'s <a>page showing</a> flag is true, then abort this
        task (i.e. don't fire the event below).</li>

        <li>Set the <code>Document</code>'s <a>page showing</a> flag to true.</li>

        <li>

        Run any <dfn>session history document visibility change steps</dfn> for <code>Document</code> that
        are defined by <a>other applicable specifications</a>.

        <p class="note">
  This is specifically intended for use by the Page Visibility specification. [[!PAGEVIS]]
  </p>

        </li>

        <li><a>Fire</a> a <a>trusted</a> event with the name <code>pageshow</code> at the <code>Window</code> object of that
        <code>Document</code>, with <i>target override</i> set to the <code>Document</code>
        object,
        using the <code>PageTransitionEvent</code> interface, with the <code>persisted</code> attribute initialized to true.
        This event must not bubble, must not be cancelable, and has no default action.</li>

      </ol>

      </li>

    </ol>

    </li>

    <li>Set <a>the document's address</a> to the URL of the <var>specified
    entry</var>.</li>

    <li>If the <var>specified entry</var> has a URL whose fragment identifier differs
    from that of the <a>current entry</a>'s when compared in a <a>case-sensitive</a>
    manner, and the two share the same <code>Document</code> object, then let <var>hash
    changed</var> be true, and let <var>old URL</var> be the URL of the <a>current
    entry</a> and <var>new URL</var> be the URL of the <var>specified
    entry</var>. Otherwise, let <var>hash changed</var> be false.</li>

    <li>If the traversal was initiated with <dfn>replacement enabled</dfn>, remove the entry
    immediately before the <var>specified entry</var> in the session history.

    <li>If the <var>specified entry</var> is not <a>an entry with persisted user
    state</a>, but its URL has a fragment identifier, <a>scroll to the fragment
    identifier</a>.</li>

    <li>

    If the entry is <a>an entry with persisted user state</a>, the user agent may update
    aspects of the document and its rendering, for instance the scroll position or values of form
    fields, that it had previously recorded.

    <p class="note">
  This can even include updating the <code>dir</code> attribute
    of <code>textarea</code> elements or <code>input</code> elements whose <code>type</code> attribute is in either the <a>Text</a> state or the <a>Search</a> state, if the persisted state includes the
    directionality of user input in such controls.
  </p>

    </li>

    <li>If the entry is a <a>state object</a> entry, let <var>state</var> be a
    <a>structured clone</a> of that state object. Otherwise, let <var>state</var> be
    null.</li>

    <li>Set <code>history.state</code> to <var>state</var>.</li>

    <li>Let <var>state changed</var> be true if the <code>Document</code> of the <var>specified entry</var> has a <a>latest entry</a>, and that entry is not the <var>specified entry</var>; otherwise let it be false.

    <li>Let the <a>latest entry</a> of the <code>Document</code> of the <var>specified entry</var> be the <var>specified entry</var>.</li>

    <li>

    If the <i>non-blocking events</i> flag is not set, then run the following steps
    <a>immediately</a>. Otherwise, the <i>non-blocking events</i> flag is set; <a>queue a task</a>
    to run the following substeps instead.

    <ol>

      <li>If <var>state changed</var> is true, <a>fire</a> a <a>trusted</a>
      event with the name <code>popstate</code> at the <code>Window</code>
      object of the <code>Document</code>, using the <code>PopStateEvent</code> interface, with the
      <code>state</code> attribute initialized to the value of <var>state</var>. This event must bubble but not be cancelable and has no default
      action.</li>

      <li>If <var>hash changed</var> is true, then <a>fire</a> a <a>trusted</a>
      event with the name <code>hashchange</code> at the <a>browsing
      context</a>'s <code>Window</code> object, using the <code>HashChangeEvent</code> interface,
      with the <code>oldURL</code> attribute initialized to <var>old URL</var> and the <code>newURL</code> attribute
      initialized to <var>new URL</var>. This event must bubble but not be cancelable and
      has no default action.</li>

    </ol>

    </li>

    <li>The <a>current entry</a> is now the <var>specified entry</var>.</li>

  </ol>

  The <a>task source</a> for the tasks mentioned above is the <a>DOM manipulation task
  source</a>.

  </div>

<h5 id="the-popstateevent-interface"><dfn>The <code>PopStateEvent</code> interface</dfn></h5>

  <pre class="idl" data-highlight="webidl">
  [Constructor(DOMString type, optional <a>PopStateEventInit</a> eventInitDict), Exposed=(Window,Worker)]
  interface <dfn>PopStateEvent</dfn> : <a>Event</a> {
  readonly attribute any <a>state</a>;
  };

  dictionary <dfn>PopStateEventInit</dfn> : <a>EventInit</a> {
  any state;
  };
  </pre>

  <dl class="domintro">

    <dt><var>event</var> . <code>state</code></dt>

    <dd>

    Returns a copy of the information that was provided to <code>pushState()</code> or <code>replaceState()</code>.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>state</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to
  null. It represents the context information for the event, or null, if the state represented is
  the initial state of the <code>Document</code>.

  </div>

<h5 id="the-hashchangeevent-interface"><dfn>The <code>HashChangeEvent</code> interface</dfn></h5>

  <pre class="idl" data-highlight="webidl">
  [Constructor(DOMString type, optional <a>HashChangeEventInit</a> eventInitDict), Exposed=(Window,Worker)]
  interface <dfn>HashChangeEvent</dfn> : <a>Event</a> {
  readonly attribute DOMString <a>oldURL</a>;
  readonly attribute DOMString <a>newURL</a>;
  };

  dictionary <dfn>HashChangeEventInit</dfn> : <a>EventInit</a> {
  DOMString oldURL;
  DOMString newURL;
  };
  </pre>

  <dl class="domintro">

    <dt><var>event</var> . <code>oldURL</code></dt>

    <dd>

    Returns the <a>URL</a> of the <a>session history entry</a> that was previously
    current.

    </dd>

    <dt><var>event</var> . <code>newURL</code></dt>

    <dd>

    Returns the <a>URL</a> of the <a>session history entry</a> that is now
    current.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>oldURL</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to
  null. It represents context information for the event, specifically the URL of the <a>session
  history entry</a> that was traversed from.

  The <dfn><code>newURL</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to
  null. It represents context information for the event, specifically the URL of the <a>session
  history entry</a> that was traversed to.

  </div>

<h5 id="the-pagetransitionevent-interface"><dfn>The <code>PageTransitionEvent</code> interface</dfn></h5>

  <pre class="idl" data-highlight="webidl">
  [Constructor(DOMString type, optional <a>PageTransitionEventInit</a> eventInitDict), Exposed=(Window,Worker)]
  interface <dfn>PageTransitionEvent</dfn> : <a>Event</a> {
  readonly attribute boolean <a>persisted</a>;
  };

  dictionary <dfn>PageTransitionEventInit</dfn> : <a>EventInit</a> {
  boolean persisted;
  };
  </pre>

  <dl class="domintro">

    <dt><var>event</var> . <code>persisted</code></dt>

    <dd>

    For the <code>pageshow</code> event, returns false if the page is
    newly being loaded (and the <code>load</code> event will fire). Otherwise,
    returns true.

    For the <code>pagehide</code> event, returns false if the page is
    going away for the last time. Otherwise, returns true, meaning that (if nothing conspires to
    make the page unsalvageable) the page might be reused if the user navigates back to this
    page.

    Things that can cause the page to be unsalvageable include:

    <ul class="brief">
      <li><code>document.open()</code>
      <li>Listening for <code>beforeunload</code> events
      <li>Listening for <code>unload</code> events
      <li>Having <code>iframe</code>s that are not salvageable
      <li>Active <code>WebSocket</code> objects
      <li><a>Aborting a <code>Document</code></a>
    </ul>

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>persisted</code></dfn> attribute must
  return the value it was initialized to. When the object is created, this attribute must be
  initialized to false. It represents the context information for the event.

  </div>

<h4 id="unloading-documents"><dfn>Unloading documents</dfn></h4>

  <div class="impl">

  A <code>Document</code> has a <dfn><i>salvageable</i></dfn> state, which must initially be
  true, a <dfn>fired unload</dfn> flag, which must initially be false, and a <dfn>page showing</dfn>
  flag, which must initially be false. The <a>page showing</a> flag is used to ensure that
  scripts receive <code>pageshow</code> and <code>pagehide</code> events in a consistent manner (e.g. that they never
  receive two <code>pagehide</code> events in a row without an intervening
  <code>pageshow</code>, or vice versa).

  <a>Event loops</a> have a <dfn>termination nesting level</dfn>
  counter, which must initially be zero.

  When a user agent is to <dfn>prompt to unload a document</dfn>, it must run the following
  steps.

  <ol>

    <li>Increase the <a>event loop</a>'s <a>termination nesting level</a> by
    one.</li>

    <li>Increase the <code>Document</code>'s <a>ignore-opens-during-unload counter</a> by
    one.</li>

    <li>Let <var>event</var> be a new <a>trusted</a>
    <code>BeforeUnloadEvent</code> event object with the name <code>beforeunload</code>, which does not bubble but is cancelable.</li>

    <li><i>Dispatch</i>: <a>Dispatch</a> <var>event</var> at the <code>Document</code>'s <code>Window</code> object.</li>

    <li>Decrease the <a>event loop</a>'s <a>termination nesting level</a> by
    one.</li>

    <li>Release the <a>storage mutex</a>.</li>

    <li>If any event listeners were triggered by the earlier <i>dispatch</i> step, then set the
    <code>Document</code>'s <i>salvageable</i> state to
    false.</li>

    <li>

    If the <code>Document</code>'s <a>active sandboxing flag set</a> does not have its
    <a>sandboxed modals flag</a> set, and the <code>returnValue</code> attribute of the <var>event</var>
    object is not the empty string, or if the event was canceled, then the user agent should ask the
    user to confirm that they wish to unload the document.

    The prompt shown by the user agent may include the string of the <code>returnValue</code> attribute, or some leading subset
    thereof. (A user agent may want to truncate the string to 1024 characters for display, for
    instance.)

    The user agent must <a>pause</a> while waiting for the user's response.

    If the user did not confirm the page navigation, then the user agent <dfn>refused to allow
    the document to be unloaded</dfn>.

    </li>

    <li>If this algorithm was invoked by another instance of the "prompt to unload a document"
    algorithm (i.e. through the steps below that invoke this algorithm for all descendant browsing
    contexts), then jump to the step labeled <i>end</i>.</li>

    <li>Let <var>descendants</var> be the <a>list of the descendant browsing
    contexts</a> of the <code>Document</code>.</li>

    <li>

    If <var>descendants</var> is not an empty list, then for each <a>browsing
    context</a> <var>b</var> in <var>descendants</var> run the following
    substeps:

    <ol>

      <li><a>Prompt to unload</a> the <a>active
      document</a> of the <a>browsing context</a> <var>b</var>. If the user
      <a>refused to allow the document to be unloaded</a>, then the user implicitly also <a>refused to allow <em>this</em> document to
      be unloaded</a>; jump to the step labeled <i>end</i>.

      <li>If the <i>salvageable</i> state of the <a>active
      document</a> of the <a>browsing context</a> <var>b</var> is false, then set
      the <i>salvageable</i> state of <em>this</em> document to
      false also.</li>

    </ol>

    </li>

    <li><i>End</i>: Decrease the <code>Document</code>'s <a>ignore-opens-during-unload
    counter</a> by one.</li>

  </ol>

  When a user agent is to <dfn>unload a document</dfn>, it must run the following steps. These
  steps are passed an argument, <var>recycle</var>, which is either true or false,
  indicating whether the <code>Document</code> object is going to be re-used. (This is set by the
  <code>document.open()</code> method.)

  <ol>

    <li>Increase the <a>event loop</a>'s <a>termination nesting level</a> by
    one.</li>

    <li>Increase the <code>Document</code>'s <a>ignore-opens-during-unload counter</a> by
    one.</li>

    <li>If the <code>Document</code>'s <a>page showing</a> flag is false, then jump to the
    step labeled <i>unload event</i> below (i.e. skip firing the <code>pagehide</code> event and don't rerun the <a>unloading document
    visibility change steps</a>).</li>

    <li>Set the <code>Document</code>'s <a>page showing</a> flag to false.</li>

    <li><a>Fire</a> a <a>trusted</a> event with the name <code>pagehide</code> at the <code>Window</code> object of the
    <code>Document</code>, with <i>target override</i> set to the <code>Document</code>
    object, using the <code>PageTransitionEvent</code> interface,
    with the <code>persisted</code> attribute initialized
    to true if the <code>Document</code> object's <i>salvageable</i> state is true, and false otherwise. This
    event must not bubble, must not be cancelable, and has no default action.</li>

    <li>

    Run any <dfn>unloading document visibility change steps</dfn> for <code>Document</code> that
    are defined by <a>other applicable specifications</a>.

    <p class="note">
  This is specifically intended for use by the Page Visibility specification. [[!PAGEVIS]]
  </p>

    </li>

    <li><i>Unload event</i>: If the <code>Document</code>'s <a>fired unload</a> flag is
    false, <a>fire a simple event</a> named <code>unload</code> at the
    <code>Document</code>'s <code>Window</code> object, with <i>target override</i> set to the
    <code>Document</code> object.</li>

    <li>Decrease the <a>event loop</a>'s <a>termination nesting level</a> by
    one.</li>

    <li>Release the <a>storage mutex</a>.</li>

    <li>If any event listeners were triggered by the earlier <i>unload event</i> step, then set
    the <code>Document</code> object's <i>salvageable</i> state
    to false and set the <code>Document</code>'s <a>fired unload</a> flag to true.</li>

    <li>Run any <a>unloading document cleanup steps</a> for <code>Document</code> that are
    defined by this specification and <a>other applicable specifications</a>.</li>

    <li>If this algorithm was invoked by another instance of the "unload a document" algorithm
    (i.e. by the steps below that invoke this algorithm for all descendant browsing contexts), then
    jump to the step labeled <i>end</i>.</li>

    <li>Let <var>descendants</var> be the <a>list of the descendant browsing
    contexts</a> of the <code>Document</code>.</li>

    <li>

    If <var>descendants</var> is not an empty list, then for each <a>browsing
    context</a> <var>b</var> in <var>descendants</var> run the following
    substeps:

    <ol>

      <li><a>Unload</a> the <a>active document</a> of the
      <a>browsing context</a> <var>b</var> with the <var>recycle</var>
      parameter set to false.</li>

      <li>If the <i>salvageable</i> state of the <a>active
      document</a> of the <a>browsing context</a> <var>b</var> is false, then set
      the <i>salvageable</i> state of <em>this</em> document to
      false also.</li>

    </ol>

    </li>

    <li>If both the <code>Document</code>'s <i>salvageable</i> state and <var>recycle</var> are
    false, then the <code>Document</code>'s <a>browsing context</a> must <a>discard the <code>Document</code></a>.</li>

    <li><i>End</i>: Decrease the <code>Document</code>'s <a>ignore-opens-during-unload
    counter</a> by one.</li>

  </ol>

  This specification defines the following <dfn>unloading document cleanup steps</dfn>. Other
  specifications can define more.

  <ol>

    <li>

    <a>Make disappear</a> any <code>WebSocket</code> objects that were created by the <code>WebSocket()</code> constructor from the
    <code>Document</code>'s <code>Window</code> object.

    If this affected any <code>WebSocket</code> objects, then set <code>Document</code>'s <i>salvageable</i> state to false.

    </li>

    <li>If the <code>Document</code>'s <i>salvageable</i>
    state is false, <a>forcibly close</a> any
    <code>EventSource</code> objects that whose constructor was invoked from the
    <code>Document</code>'s <code>Window</code> object.</li>

    <li>If the <code>Document</code>'s <i>salvageable</i>
    state is false, empty the <code>Document</code>'s <code>Window</code>'s <a>list of active
    timers</a>.</li>

  </ol>

  </div>

<h5 id="the-beforeunloadevent-interface"><dfn>The <code>BeforeUnloadEvent</code> interface</dfn></h5>

  <pre class="idl" data-highlight="webidl">
  interface <dfn>BeforeUnloadEvent</dfn> : <a>Event</a> {
  attribute DOMString <a>returnValue</a>;
  };
  </pre>

  <dl class="domintro">

    <dt><var>event</var> . <code>returnValue</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the current return value of the event (the message to show the user).

    Can be set, to update the message.

    </dd>

  </dl>

  <p class="note">
  There are no <code>BeforeUnloadEvent</code>-specific initialisation methods.
  </p>

  <div class="impl">

  The <dfn><code>returnValue</code></dfn> attribute
  represents the message to show the user. When the event is created, the attribute must be set to
  the empty string. On getting, it must return the last value it was set to. On setting, the
  attribute must be set to the new value.

  </div>

  <div class="impl">

<h4 id="aborting-a-document-load"><dfn>Aborting a document load</dfn></h4>

  If a <code>Document</code> is <dfn>aborted</dfn>, the user agent must
  run the following steps:

  <ol>

    <li><a>Abort</a> the <a>active
    documents</a> of every <a>child browsing context</a>. If this results in any of those
    <code>Document</code> objects having their <i>salvageable</i> state set to false, then set this
    <code>Document</code>'s <i>salvageable</i> state to false
    also.</li>

    <li>Cancel any instances of the <a>fetch</a> algorithm in the
    context of this <code>Document</code>, discarding any <a>tasks</a>
    <a>queued</a> for them, and discarding any further data received from
    the network for them. If this resulted in any instances of the <a>fetch</a> algorithm being canceled or any <a>queued</a> <a>tasks</a> or any network data getting
    discarded, then set the <code>Document</code>'s <i>salvageable</i> state to false.</li>

    <li>If the <code>Document</code> has an <a>active parser</a>, then <a>abort that parser</a> and set the <code>Document</code>'s <i>salvageable</i> state to false.</li>

  </ol>

  User agents may allow users to explicitly invoke the <a>abort a
  document</a> algorithm for a <code>Document</code>. If the user does so, then, if that
  <code>Document</code> is an <a>active document</a>, the user agent should <a>queue a
  task</a> to <a>fire a simple event</a> named <code>abort</code> at
  that <code>Document</code>'s <code>Window</code> object before invoking the <a>abort</a> algorithm.

  </div>

<h3 id="offline-web-applications"><dfn>Offline Web applications</dfn></h3>

  <p class="critical">This feature is in the process of being removed from the Web platform. (This
  is a long process that takes many years.) Using any of the offline Web application features at
  this time is highly discouraged. Use service workers instead. [[!SERVICE-WORKERS]]

<h4 id="offline-web-applications-introduction"><dfn>Introduction</dfn></h4>

  <em>This section is non-normative.</em>

  In order to enable users to continue interacting with Web applications and documents even when
  their network connection is unavailable &mdash; for instance, because they are traveling outside
  of their ISP's coverage area &mdash; authors can provide a manifest which lists the files that are
  needed for the Web application to work offline and which causes the user's browser to keep a copy
  of the files for use offline.

  To illustrate this, consider a simple clock applet consisting of an HTML page "<code>clock.html</code>", a CSS style sheet "<code>clock.css</code>", and a JavaScript
  script "<code>clock.js</code>".

  Before adding the manifest, these three files might look like this:

  <pre>EXAMPLE offline/clock/clock1.html</pre>
  <pre>EXAMPLE offline/clock/clock1.css</pre>
  <pre>EXAMPLE offline/clock/clock1.js</pre>

  If the user tries to open the "<code>clock.html</code>" page while offline, though,
  the user agent (unless it happens to have it still in the local cache) will fail with an
  error.

  The author can instead provide a manifest of the three files, say "<code>clock.appcache</code>":

  <pre>EXAMPLE offline/clock/clock2.appcache</pre>

  With a small change to the HTML file, the manifest (served as <code>text/cache-manifest</code>)
  is linked to the application:

  <pre>EXAMPLE offline/clock/clock2.html</pre>

  Now, if the user goes to the page, the browser will cache the files and make them available
  even when the user is offline.

  <p class="note">
  Authors are encouraged to include the main page in the manifest also, but in
  practice the page that referenced the manifest is automatically cached even if it isn't explicitly
  mentioned.
  </p>

  <p class="note">
  With the exception of "no-store" directive, HTTP cache headers and restrictions on
  caching pages served over TLS (encrypted, using <code>https:</code>) are
  overridden by manifests. Thus, pages will not expire from an application cache before the user
  agent has updated it, and even applications served over TLS can be made to work offline.
  </p>

  <a>View this example online</a>.

<h5 id="supporting-offline-caching-for-legacy-applications"><dfn>Supporting offline caching for legacy applications</dfn></h5>

  <em>This section is non-normative.</em>

  The application cache feature works best if the application logic is separate from the
  application and user data, with the logic (markup, scripts, style sheets, images, etc) listed in
  the manifest and stored in the application cache, with a finite number of static HTML pages for
  the application, and with the application and user data stored in Web Storage or a client-side
  Indexed Database, updated dynamically using Web Sockets, <code>XMLHttpRequest</code>, server-sent
  events, or some other similar mechanism.

  This model results in a fast experience for the user: the application immediately loads, and
  fresh data is obtained as fast as the network will allow it (possibly while stale data shows).

  Legacy applications, however, tend to be designed so that the user data and the logic are mixed
  together in the HTML, with each operation resulting in a new HTML page from the server.

  <div class="example">
    For example, consider a news application. The typical architecture of such an application,
    when not using the application cache feature, is that the user fetches the main page, and the
    server returns a dynamically-generated page with the current headlines and the user interface
    logic mixed together.

    A news application designed for the application cache feature, however, would instead have the
    main page just consist of the logic, and would then have the main page fetch the data separately
    from the server, e.g. using <code>XMLHttpRequest</code>.
  </div>

  The mixed-content model does not work well with the application cache feature: since the
  content is cached, it would result in the user always seeing the stale data from the previous time
  the cache was updated.

  While there is no way to make the legacy model work as fast as the separated model, it
  <em>can</em> at least be retrofitted for offline use using the <a>prefer-online</a> <a>application cache mode</a>. To do so, list all the static
  resources used by the HTML page you want to have work offline in an <a>application cache manifest</a>, use the <code>manifest</code> attribute to select that manifest from the HTML file,
  and then add the following line at the bottom of the manifest:

  <pre>SETTINGS:
  prefer-online
  NETWORK:
  *</pre>

  This causes the <a>application cache</a> to only be used for <a>master entries</a> when the user is offline, and causes the
  application cache to be used as an atomic HTTP cache (essentially pinning resources listed in the
  manifest), while allowing all resources not listed in the manifest to be accessed normally when
  the user is online.

<h5 id="event-summary"><dfn>Event summary</dfn></h5>

  <em>This section is non-normative.</em>

  When the user visits a page that declares a manifest, the browser will try to update the cache.
  It does this by fetching a copy of the manifest and, if the manifest has changed since the user
  agent last saw it, redownloading all the resources it mentions and caching them anew.

  As this is going on, a number of events get fired on the <code>ApplicationCache</code> object
  to keep the script updated as to the state of the cache update, so that the user can be notified
  appropriately. The events are as follows:

  <table>
    <thead>
    <tr>
      <th> Event name
      <th> Interface
      <th> Fired when...
      <th> Next events
    <tbody>

    <tr>
      <td> <dfn><code>checking</code></dfn>
      <td> <code>Event</code>
      <td> The user agent is checking for an update, or attempting to download the manifest for the
          first time. <strong>This is always the first event in the sequence.</strong>
      <td> <code>noupdate</code>, <code>downloading</code>, <code>obsolete</code>, <code>error</code>

    <tr>
      <td> <dfn><code>noupdate</code></dfn>
      <td> <code>Event</code>
      <td> The manifest hadn't changed.
      <td> Last event in sequence.

    <tr>
      <td> <dfn><code>downloading</code></dfn>
      <td> <code>Event</code>
      <td> The user agent has found an update and is fetching it, or is downloading the resources
          listed by the manifest for the first time.
      <td> <code>progress</code>, <code>error</code>, <code>cached</code>, <code>updateready</code>

    <tr>
      <td> <dfn><code>progress</code></dfn>
      <td> <code>ProgressEvent</code>
      <td> The user agent is downloading resources listed by the manifest.
          The event object's <code>total</code> attribute returns the total number of files to be downloaded.
          The event object's <code>loaded</code> attribute returns the number of files processed so far.
      <td> <code>progress</code>, <code>error</code>, <code>cached</code>, <code>updateready</code>

    <tr>
      <td> <dfn><code>cached</code></dfn>
      <td> <code>Event</code>
      <td> The resources listed in the manifest have been downloaded, and the application is now cached.
      <td> Last event in sequence.

    <tr>
      <td> <dfn><code>updateready</code></dfn>
      <td> <code>Event</code>
      <td> The resources listed in the manifest have been newly redownloaded, and the script can use
          <code>swapCache()</code> to switch to the new cache.
      <td> Last event in sequence.

    <tr>
      <td> <dfn><code>obsolete</code></dfn>
      <td> <code>Event</code>
      <td> The manifest was found to have become a 404 or 410 page, so the application cache is being deleted.
      <td> Last event in sequence.

    <tr>
      <td rowspan=4> <dfn><code>error</code></dfn>
      <td rowspan=4> <code>Event</code>
      <td> The manifest was a 404 or 410 page, so the attempt to cache the application has been aborted.
      <td rowspan=3> Last event in sequence.

    <tr>
      <td> The manifest hadn't changed, but the page referencing the manifest failed to download properly.

    <tr>
      <td> A fatal error occurred while fetching the resources listed in the manifest.

    <tr>
      <td> The manifest changed while the update was being run.
      <td> The user agent will try fetching the files again momentarily.

  </table>

  These events are cancelable; their default action is for the user agent to show download
  progress information. If the page shows its own update UI, canceling the events will prevent the
  user agent from showing redundant progress information.

  <div class="impl">

<h4 id="application-caches"><dfn>Application caches</dfn></h4>

  An <dfn>application cache</dfn> is a set of cached resources consisting of:

  <ul>

    <li>

    One or more resources (including their out-of-band metadata, such as HTTP headers, if any),
    identified by URLs, each falling into one (or more) of the following categories:

    <dl>

      <dt><dfn>Master entries</dfn>

      <dd><p class="note">
  These are documents that were added to the cache because a <a>browsing
      context</a> was <a>navigated</a> to that document and the document
      indicated that this was its cache, using the <code>manifest</code>
      attribute.
  </p>

      <dt><dfn>The manifest</dfn>

      <dd><p class="note">
  This is the resource corresponding to the URL that was given in a master
      entry's <code>html</code> element's <code>manifest</code> attribute.
      The manifest is fetched and processed during the <a>application cache download
      process</a>. All the <a>master entries</a> have the
      <a>same origin</a> as the manifest.
  </p>

      <dt><dfn>Explicit entries</dfn>

      <dd><p class="note">
  These are the resources that were listed in the cache's <a>manifest</a> in an <a>explicit section</a>.
  </p>

      <dt><dfn>Fallback entries</dfn>

      <dd><p class="note">
  These are the resources that were listed in the cache's <a>manifest</a> in a <a>fallback section</a>.
  </p>

    </dl>

    <a>Explicit entries</a> and <a>Fallback entries</a> can be marked as <dfn>foreign</dfn>, which means that they have a <code>manifest</code> attribute but that it doesn't point at this cache's
    <a>manifest</a>.

    <p class="note">
  A URL in the list can be flagged with multiple different types, and thus an
    entry can end up being categorized as multiple entries. For example, an entry can be a manifest
    entry and an explicit entry at the same time, if the manifest is listed within the manifest.
  </p>

    </li>

    <li>

    Zero or more <dfn>fallback namespaces</dfn>, each of
    which is mapped to a <a>fallback entry</a>.

    <p class="note">
  These are URLs used as <a>prefix
    match patterns</a> for resources that are to be fetched from the network if possible, or to
    be replaced by the corresponding <a>fallback entry</a>
    if not. Each namespace URL has the <a>same origin</a> as <a>the manifest</a>.
  </p>

    </li>

    <li>

    Zero or more URLs that form the <dfn>online
    safelist namespaces</dfn>.

    <p class="note">
  These are used as prefix match patterns, and declare URLs for which the user
    agent will ignore the application cache, instead fetching them normally (i.e. from the network
    or local HTTP cache as appropriate).
  </p>

    </li>

    <li>

    An <dfn>online safelist wildcard
    flag</dfn>, which is either <i>open</i> or <i>blocking</i>.

    <p class="note">
  The <i>open</i> state indicates that any URL not listed as cached is to
    be implicitly treated as being in the <a>online
    safelist namespaces</a>; the <i>blocking</i> state indicates that URLs not listed
    explicitly in the manifest are to be treated as unavailable.
  </p>

    </li>

    <li>

    A <dfn>cache mode flag</dfn>, which is either in the <dfn><i>fast</i></dfn> state or the <dfn><i>prefer-online</i></dfn> state.

    </li>

  </ul>

  Each <a>application cache</a> has a <dfn>completeness flag</dfn>, which is either <i>complete</i> or
  <i>incomplete</i>.

  <hr />

  An <dfn>application cache group</dfn> is a group of <a>application
  caches</a>, identified by the <a>absolute URL</a> of a resource <a>manifest</a> which is used to populate the caches in the
  group.

  An <a>application cache</a> is <dfn>newer</dfn> than
  another if it was created after the other (in other words, <a>application caches</a> in an <a>application cache group</a> have a chronological
  order).

  Only the newest <a>application cache</a> in an <a>application cache group</a> can
  have its <a>completeness flag</a> set to
  <i>incomplete</i>; the others are always all <i>complete</i>.

  Each <a>application cache group</a> has an <dfn>update
  status</dfn>, which is one of the following: <i>idle</i>, <i>checking</i>, <i>downloading</i>.

  A <dfn>relevant application cache</dfn> is an <a>application cache</a> that is the <a>newest</a> in its <a>group</a> to be <i>complete</i>.

  Each <a>application cache group</a> has a <dfn>list of pending master entries</dfn>. Each entry in this
  list consists of a resource and a corresponding <code>Document</code> object. It is used during
  the <a>application cache download process</a> to ensure that new master entries are cached
  even if the <a>application cache download process</a> was already running for their
  <a>application cache group</a> when they were loaded.

  An <a>application cache group</a> can be marked as <dfn>obsolete</dfn>, meaning that it must be ignored when looking at
  what <a>application cache groups</a> exist.

  <hr />

  A <dfn>cache host</dfn> is a <code>Document</code> or a <code>SharedWorkerGlobalScope</code>
  object. A <a>cache host</a> can be associated with an <a>application cache</a>.

  [[!WEBWORKERS]]

  A <code>Document</code> initially is not associated with an <a>application cache</a>, but
  can become associated with one early during the page load process, when steps <a>in the parser</a> and in the <a>navigation</a>
  sections cause <a>cache selection</a> to occur.

  A <code>SharedWorkerGlobalScope</code> can be associated with an <a>application cache</a>
  when it is created.

  [[!WEBWORKERS]]

  Each <a>cache host</a> has an associated <code>ApplicationCache</code> object.

  <hr />

  Multiple <a>application caches</a> in different <a>application cache groups</a> can contain the same resource,
  e.g. if the manifests all reference that resource. If the user agent is to <dfn>select an application cache</dfn> from a list of <a>relevant application caches</a> that contain a resource, the
  user agent must use the application cache that the user most likely wants to see the resource
  from, taking into account the following:

  <ul>

    <li>which application cache was most recently updated,

    <li>which application cache was being used to display the resource from which the user decided to
    look at the new resource, and

    <li>which application cache the user prefers.

  </ul>

  <hr />

  A URL <dfn>matches a fallback namespace</dfn> if
  there exists a <a>relevant application cache</a> whose <a>manifest</a>'s URL has the <a>same origin</a> as the
  URL in question, and that has a <a>fallback
  namespace</a> that is a <a>prefix match</a> for the URL being examined. If multiple
  fallback namespaces match the same URL, the longest one is the one that matches. A URL looking for
  a fallback namespace can match more than one application cache at a time, but only matches one
  namespace in each cache.

  <div class="example">
    If a manifest <code>http://example.com/app1/manifest</code> declares that <code>http://example.com/resources/images</code> is a fallback namespace, and the user
    navigates to <code>HTTP://EXAMPLE.COM:80/resources/images/cat.png</code>, then the user
    agent will decide that the application cache identified by <code>http://example.com/app1/manifest</code> contains a namespace with a match for that
    URL.
  </div>

  </div>

<h4 id="the-cache-manifest-syntax"><dfn>The cache manifest syntax</dfn></h4>

<h5 id="some-sample-manifests"><dfn>Some sample manifests</dfn></h5>

  <em>This section is non-normative.</em>

  <div class="example">
    This example manifest requires two images and a style sheet to be cached and safelists a CGI
    script.

    <pre>CACHE MANIFEST
  # the above line is required

  # this is a comment
  # there can be as many of these anywhere in the file
  # they are all ignored
  # comments can have spaces before them
  # but must be alone on the line

  # blank lines are ignored too

  # these are files that need to be cached they can either be listed
  # first, or a "CACHE:" header could be put before them, as is done
  # lower down.
  images/sound-icon.png
  images/background.png
  # note that each file has to be put on its own line

  # here is a file for the online safelist -- it isn't cached, and
  # references to this file will bypass the cache, always hitting the
  # network (or trying to, if the user is offline).
  NETWORK:
  comm.cgi

  # here is another set of files to cache, this time just the CSS file.
  CACHE:
  style/default.css</pre>

    It could equally well be written as follows:

    <pre>CACHE MANIFEST
  NETWORK:
  comm.cgi
  CACHE:
  style/default.css
  images/sound-icon.png
  images/background.png</pre>
  </div>

  <div class="example">
    Offline application cache manifests can use absolute paths or even absolute URLs:

    <pre>CACHE MANIFEST

  /main/home
  /main/app.js
  /settings/home
  /settings/app.js
  http://img.example.com/logo.png
  http://img.example.com/check.png
  http://img.example.com/cross.png</pre>
  </div>

  <div class="example">
    The following manifest defines a catch-all error page that is displayed for any page on the
    site while the user is offline. It also specifies that the <a>online safelist wildcard flag</a> is <i>open</i>, meaning that accesses to resources on other sites will not be blocked.
    (Resources on the same site are already not blocked because of the catch-all fallback
    namespace.)

    So long as all pages on the site reference this manifest, they will get cached locally as they
    are fetched, so that subsequent hits to the same page will load the page immediately from the
    cache. Until the manifest is changed, those pages will not be fetched from the server again. When
    the manifest changes, then all the files will be redownloaded.

    Subresources, such as style sheets, images, etc, would only be cached using the regular HTTP
    caching semantics, however.

    <pre>CACHE MANIFEST
  FALLBACK:
  / /offline.html
  NETWORK:
  *</pre>
  </div>

<h5 id="writing-cache-manifests"><dfn>Writing cache manifests</dfn></h5>

  Manifests must be served using the <code>text/cache-manifest</code> <a>MIME type</a>. All
  resources served using the <code>text/cache-manifest</code> <a>MIME type</a> must follow the
  syntax of application cache manifests, as described in this section.

  An application cache manifest is a text file, whose text is encoded using UTF-8. Data in
  application cache manifests is line-based. Newlines must be represented by U+000A LINE FEED (LF)
  characters, U+000D CARRIAGE RETURN (CR) characters, or U+000D CARRIAGE RETURN (CR) U+000A LINE
  FEED (LF) pairs. [[!ENCODING]]

  <p class="note">
  This is a <a>willful violation</a> of RFC 2046, which requires all <code>text/*</code> types to only allow CRLF line breaks. This requirement, however, is
  outdated; the use of CR, LF, and CRLF line breaks is commonly supported and indeed sometimes CRLF
  is <em>not</em> supported by text editors. [[!RFC2046]]
  </p>

  The first line of an application cache manifest must consist of the string "CACHE", a single
  U+0020 SPACE character, the string "MANIFEST", and either a U+0020 SPACE character, a U+0009
  CHARACTER TABULATION (tab) character, a U+000A LINE FEED (LF) character, or a U+000D CARRIAGE
  RETURN (CR) character. The first line may optionally be preceded by a U+FEFF BYTE ORDER MARK (BOM)
  character. If any other text is found on the first line, it is ignored.

  Subsequent lines, if any, must all be one of the following:

  <dl>
    <dt>A blank line
    <dd>
    Blank lines must consist of zero or more U+0020 SPACE and
    U+0009 CHARACTER TABULATION (tab) characters only.

    <dt>A comment
    <dd>
    Comment lines must consist of zero or more U+0020 SPACE and U+0009 CHARACTER TABULATION (tab)
    characters, followed by a single U+0023 NUMBER SIGN character (#), followed by zero or more
    characters other than U+000A LINE FEED (LF) and U+000D CARRIAGE RETURN (CR) characters.

    <p class="note">
  Comments must be on a line on their own. If they were to be included on a line
    with a URL, the "#" would be mistaken for part of a fragment identifier.
  </p>

    <dt>A section header
    <dd>

    Section headers change the current section. There are four possible section headers:

    <dl>

      <dt><code>CACHE:</code>
      <dd>Switches to the <dfn>explicit section</dfn>.

      <dt><code>FALLBACK:</code>
      <dd>Switches to the <dfn>fallback section</dfn>.

      <dt><code>NETWORK:</code>
      <dd>Switches to the <dfn>online safelist section</dfn>.

      <dt><code>SETTINGS:</code>
      <dd>Switches to the <dfn>settings section</dfn>.

    </dl>

    Section header lines must consist of zero or more U+0020 SPACE and U+0009 CHARACTER
    TABULATION (tab) characters, followed by one of the names above (including the U+003A COLON
    character (:)) followed by zero or more U+0020 SPACE and U+0009 CHARACTER TABULATION (tab)
    characters.

    Ironically, by default, the current section is the <a>explicit section</a>.

    <dt>Data for the current section
    <dd>

    The format that data lines must take depends on the current section.

    When the current section is the <a>explicit
    section</a>, data lines must consist of zero or more U+0020 SPACE and U+0009 CHARACTER
    TABULATION (tab) characters, a <a>valid URL</a> identifying a resource other than the
    manifest itself, and then zero or more U+0020 SPACE and U+0009 CHARACTER TABULATION (tab)
    characters.

    When the current section is the <a>fallback
    section</a>, data lines must consist of zero or more U+0020 SPACE and U+0009 CHARACTER
    TABULATION (tab) characters, a <a>valid URL</a> identifying a resource other than the
    manifest itself, one or more U+0020 SPACE and U+0009 CHARACTER TABULATION (tab) characters,
    another <a>valid URL</a> identifying a resource other than the manifest itself, and then
    zero or more U+0020 SPACE and U+0009 CHARACTER TABULATION (tab) characters.

    When the current section is the <a>online
    safelist section</a>, data lines must consist of zero or more U+0020 SPACE and U+0009
    CHARACTER TABULATION (tab) characters, either a single U+002A ASTERISK character (*)  or a <a>valid URL</a> identifying a resource
    other than the manifest itself, and then zero or more U+0020 SPACE and U+0009 CHARACTER
    TABULATION (tab) characters.

    When the current section is the <a>settings
    section</a>, data lines must consist of zero or more U+0020 SPACE and U+0009 CHARACTER
    TABULATION (tab) characters, a <a>setting</a>,
    and then zero or more U+0020 SPACE and U+0009 CHARACTER TABULATION (tab) characters.

    Currently only one <dfn>setting</dfn> is
    defined:

    <dl>

      <dt>The cache mode setting</dt>

      <dd>This consists of the string "<code>prefer-online</code>". It sets the <a>cache mode</a> to <a>prefer-online</a>. (The <a>cache mode</a> defaults to <a>fast</a>.)</dd>

    </dl>

    Within a <a>settings section</a>, each <a>setting</a> must occur no more than once.

  </dl>

  Manifests may contain sections more than once. Sections may be empty.

  URLs that are to be fallback pages associated with <a>fallback namespaces</a>, and those namespaces themselves,
  must be given in <a>fallback sections</a>, with
  the namespace being the first URL of the data line, and the corresponding fallback page being the
  second URL. All the other pages to be cached must be listed in <a>explicit sections</a>.

  <a>Fallback namespaces</a> and <a>fallback entries</a> must have the <a>same origin</a>
  as the manifest itself. <a>Fallback namespaces</a>
  must also be <a>in the same path</a> as the manifest's URL.

  A <a>fallback namespace</a> must not be listed more
  than once.

  Namespaces that the user agent is to put into the <a>online safelist</a> must all be specified in <a>online safelist sections</a>. (This is needed for
  any URL that the page is intending to use to communicate back to the server.) To specify that all
  URLs are automatically safelisted in this way, a U+002A ASTERISK character (*) may be specified
  as one of the URLs.

  Authors should not include namespaces in the <a>online safelist</a> for which another namespace in
  the <a>online safelist</a> is a <a>prefix
  match</a>.

  <a>Relative URLs</a> must be given relative to the manifest's own
  URL. All URLs in the manifest must have the same <a>scheme</a> as
  the manifest itself (either explicitly or implicitly, through the use of <a>relative URLs</a>). [[!URL]]

  URLs in manifests must not have fragment identifiers (i.e. the U+0023 NUMBER SIGN character
  isn't allowed in URLs in manifests).

  <a>Fallback namespaces</a> and namespaces in the
  <a>online safelist</a> are matched by <a>prefix
  match</a>.

  <div class="impl">

<h5 id="parsing-cache-manifests"><dfn>Parsing cache manifests</dfn></h5>

  When a user agent is to <dfn>parse a manifest</dfn>, it means that the user agent must run the
  following steps:

  <ol>

    <li>

    <a>UTF-8 decode</a> the byte stream corresponding with the manifest to be parsed.

    <p class="note">
  The <a>UTF-8 decode</a> algorithm strips a leading BOM, if any.
  </p>

    </li>

    <li>Let <var>base URL</var> be the <a>absolute URL</a> representing the
    manifest.</li>

    <li>Apply the <a>URL parser</a> to <var>base URL</var>, and let <var>manifest path</var>
    be the <a>path</a> component thus obtained.</li>

    <li>Remove all the characters in <var>manifest path</var> after the last U+002F SOLIDUS
    character (/), if any. (The first character and the last character in <var>manifest path</var>
    after this step will both be slashes, the URL path separator character.)</li>

    <li>Apply the <a>URL parser</a> steps to the <var>base URL</var>, so that the
    components from its <a>parsed URL</a> can be used by the subseqent steps of this
    algorithm.</li>

    <li>Let <var>explicit URLs</var> be an initially empty list of <a>absolute URLs</a> for <a>explicit
    entries</a>.</li>

    <li>Let <var>fallback URLs</var> be an initially empty mapping of <a>fallback namespaces</a> to <a>absolute URLs</a> for <a>fallback
    entries</a>.</li>

    <li>Let <var>online safelist namespaces</var> be an initially empty list of <a>absolute URLs</a> for an <a>online safelist</a>.</li>

    <li>Let <var>online safelist wildcard flag</var> be <i>blocking</i>. </li>

    <li>Let <var>cache mode flag</var> be <i>fast</i>. </li>

    <li>Let <var>input</var> be the decoded text of the manifest's byte stream.</li>

    <li>Let <var>position</var> be a pointer into <var>input</var>, initially
    pointing at the first character.</li>

    <li>If the characters starting from <var>position</var> are "CACHE", followed by a
    U+0020 SPACE character, followed by "MANIFEST", then advance <var>position</var> to the
    next character after those. Otherwise, this isn't a cache manifest; abort this algorithm with a
    failure while checking for the magic signature.</li>

    <li>If the character at <var>position</var> is neither a U+0020 SPACE character, a
    U+0009 CHARACTER TABULATION (tab) character, U+000A LINE FEED (LF) character, nor a U+000D
    CARRIAGE RETURN (CR) character, then this isn't a cache manifest; abort this algorithm with a
    failure while checking for the magic signature.</li>

    <li>This is a cache manifest. The algorithm cannot fail beyond
    this point (though bogus lines can get ignored).</li>

    <li><a>Collect a sequence of characters</a> that are <em>not</em> U+000A LINE FEED (LF)
    or U+000D CARRIAGE RETURN (CR) characters, and ignore those characters. (Extra text on the first
    line, after the signature, is ignored.)</li>

    <li>Let <var>mode</var> be "explicit".</li>

    <li><i>Start of line</i>: If <var>position</var> is past the end of <var>input</var>, then jump to the last step. Otherwise, <a>collect a sequence of
    characters</a> that are U+000A LINE FEED (LF), U+000D CARRIAGE RETURN (CR), U+0020 SPACE, or
    U+0009 CHARACTER TABULATION (tab) characters.</li>

    <li>Now, <a>collect a sequence of characters</a> that are <em>not</em> U+000A LINE FEED
    (LF) or U+000D CARRIAGE RETURN (CR) characters, and let the result be <var>line</var>.</li>

    <li>Drop any trailing U+0020 SPACE and U+0009 CHARACTER TABULATION (tab) characters at the end
    of <var>line</var>.</li>

    <li>If <var>line</var> is the empty string, then jump back to the step labeled <i>start
    of line</i>.</li>

    <li>If the first character in <var>line</var> is a U+0023 NUMBER SIGN character (#),
    then jump back to the step labeled <i>start of line</i>.</li>

    <li>If <var>line</var> equals "CACHE:" (the word "CACHE" followed by a U+003A COLON
    character (:)), then set <var>mode</var> to "explicit" and jump back to the step labeled
    <i>start of line</i>.</li>

    <li>If <var>line</var> equals "FALLBACK:" (the word "FALLBACK" followed by a U+003A
    COLON character (:)), then set <var>mode</var> to "fallback" and jump back to the step
    labeled <i>start of line</i>.</li>

    <li>If <var>line</var> equals "NETWORK:" (the word "NETWORK" followed by a U+003A
    COLON character (:)), then set <var>mode</var> to "online safelist" and jump back to
    the step labeled <i>start of line</i>.</li>

    <li>If <var>line</var> equals "SETTINGS:" (the word "SETTINGS" followed by a U+003A
    COLON character (:)), then set <var>mode</var> to "settings" and jump back to the step
    labeled <i>start of line</i>.</li>

    <li>If <var>line</var> ends with a U+003A COLON character (:), then set <var>mode</var> to "unknown" and jump back to the step labeled <i>start of line</i>.</li>

    <li>This is either a data line or it is syntactically incorrect.</li>

    <li>Let <var>position</var> be a pointer into <var>line</var>, initially
    pointing at the start of the string.</li>

    <li>Let <var>tokens</var> be a list of strings, initially empty.</li>

    <li>

    While <var>position</var> doesn't point past the end of <var>line</var>:

    <ol>

      <li>Let <var>current token</var> be an empty string.</li>

      <li>While <var>position</var> doesn't point past the end of <var>line</var> and the character at <var>position</var> is neither a U+0020 SPACE
      nor a U+0009 CHARACTER TABULATION (tab) character, add the character at <var>position</var> to <var>current token</var> and advance <var>position</var> to the next character in <var>input</var>.</li>

      <li>Add <var>current token</var> to the <var>tokens</var> list.</li>

      <li>While <var>position</var> doesn't point past the end of <var>line</var> and the character at <var>position</var> is either a U+0020 SPACE
      or a U+0009 CHARACTER TABULATION (tab) character, advance <var>position</var> to the
      next character in <var>input</var>.</li>

    </ol>

    </li>

    <li>

    Process <var>tokens</var> as follows:

    <dl class="switch">

      <dt>If <var>mode</var> is "explicit"</dt>

      <dd>

      <a>Resolve</a> the first item in <var>tokens</var>,
      relative to <var>base URL</var>, with the URL character encoding set to UTF-8;
      ignore the rest.

      If this fails, then jump back to the step labeled <i>start of line</i>.

      If the resulting <a>parsed URL</a> has a different <a>scheme</a> component than <var>base URL</var> (the
      manifest's URL), then jump back to the step labeled <i>start of line</i>.

      Let <var>new URL</var> be the result of applying the <a>URL serializer</a> algorithm to the resulting <a>parsed
      URL</a>, with the <i>exclude fragment flag</i> set.

      Add <var>new URL</var> to the <var>explicit URLs</var>.

      </dd>

      <dt>If <var>mode</var> is "fallback"</dt>

      <dd>

      Let <var>part one</var> be the first token in <var>tokens</var>, and let
      <var>part two</var> be the second token in <var>tokens</var>.

      <a>Resolve</a> <var>part one</var> and <var>part two</var>, relative to <var>base URL</var>, with the URL character
      encoding set to UTF-8.

      If either fails, then jump back to the step labeled <i>start of line</i>.

      If the <a>absolute URL</a> corresponding to either <var>part one</var> or
      <var>part two</var> does not have the <a>same origin</a> as the manifest's URL,
      then jump back to the step labeled <i>start of line</i>.

      Let <var>part one path</var> be the <a>path</a> component
      of the <a>resulting parsed URL</a> for <var>part one</var>.

      If <var>manifest path</var> is not a <a>prefix match</a> for <var>part one
      path</var>, then jump back to the step labeled <i>start of line</i>.

      Let <var>part one</var> be the result of applying the <a>URL serializer</a> algorithm to the first resulting
      <a>parsed URL</a>, with the <i>exclude fragment flag</i> set.

      Let <var>part two</var> be the result of applying the <a>URL serializer</a> algorithm to the second resulting
      <a>parsed URL</a>, with the <i>exclude fragment flag</i> set.

      If <var>part one</var> is already in the <var>fallback URLs</var> mapping
      as a <a>fallback namespace</a>, then jump back to
      the step labeled <i>start of line</i>.

      Otherwise, add <var>part one</var> to the <var>fallback URLs</var>
      mapping as a <a>fallback namespace</a>, mapped to
      <var>part two</var> as the <a>fallback
      entry</a>.

      </dd>

      <dt>If <var>mode</var> is "online safelist"</dt>

      <dd>

      If the first item in <var>tokens</var> is a U+002A ASTERISK character (*), then
      set <var>online safelist wildcard flag</var> to <i>open</i> and jump back
      to the step labeled <i>start of line</i>.

      Otherwise, <a>resolve</a> the first item in <var>tokens</var>, relative to <var>base URL</var>, with the URL character
      encoding set to UTF-8; ignore the rest.

      If this fails, then jump back to the step labeled <i>start of line</i>.

      If the resulting <a>parsed URL</a> has a different <a>scheme</a> component than <var>base URL</var> (the
      manifest's URL), then jump back to the step labeled <i>start of line</i>.

      Let <var>new URL</var> be the result of applying the <a>URL serializer</a> algorithm to the resulting <a>parsed
      URL</a>, with the <i>exclude fragment flag</i> set.

      Add <var>new URL</var> to the <var>online safelist namespaces</var>.

      </dd>

      <dt>If <var>mode</var> is "settings"</dt>

      <dd>

      If <var>tokens</var> contains a single token, and that token is a
      <a>case-sensitive</a> match for the string "<code>prefer-online</code>", then
      set <var>cache mode flag</var> to <i>prefer-online</i> and jump back to the
      step labeled <i>start of line</i>.

      Otherwise, the line is an unsupported setting: do nothing; the line is ignored.

      </dd>

      <dt>If <var>mode</var> is "unknown"</dt>

      <dd>

      Do nothing. The line is ignored.

      </dd>

    </dl>

    </li>

    <li>Jump back to the step labeled <i>start of line</i>. (That step jumps to the next, and last,
    step when the end of the file is reached.)</li>

    <li>Return the <var>explicit URLs</var> list, the <var>fallback URLs</var>
    mapping, the <var>online safelist namespaces</var>, the <var>online safelist
    wildcard flag</var>, and the <var>cache mode flag</var>.</li>

  </ol>

  <div class="note">

    The resource that declares the manifest (with the <code>manifest</code> attribute) will always get taken from the cache,
    whether it is listed in the cache or not, even if it is listed in an <a>online safelist namespace</a>.

    If a resource is listed in the <a>explicit
    section</a> or as a <a>fallback entry</a> in the <a>fallback section</a>, the resource will always be
    taken from the cache, regardless of any other matching entries in the <a>fallback namespaces</a> or <a>online safelist namespaces</a>.

    When a <a>fallback namespace</a> and an <a>online safelist namespace</a> overlap, the <a>online safelist namespace</a> has priority.

    The <a>online safelist wildcard
    flag</a> is applied last, only for URLs that match neither the <a>online safelist namespace</a> nor the <a>fallback namespace</a> and that are not listed in the
    <a>explicit section</a>.

  </div>

<h4 id="downloading-or-updating-an-application-cache"><dfn>Downloading or updating an application cache</dfn></h4>

  When the user agent is required (by other parts of this specification) to start the
  <dfn>application cache download process</dfn> for an <a>absolute URL</a> purported to
  identify a <a>manifest</a>, or for an <a>application
  cache group</a>, potentially given a particular <a>cache host</a>, and potentially given
  a <a>master</a> resource, the user agent must run the steps
  below. These steps are always run <a>in parallel</a> with the <a>event loop</a>
  <a>tasks</a>.

  Some of these steps have requirements that only apply if the user agent <dfn>shows caching
  progress</dfn>. Support for this is optional. Caching progress UI could consist of a progress bar
  or message panel in the user agent's interface, or an overlay, or something else. Certain events
  fired during the <a>application cache download process</a> allow the script to override the
  display of such an interface. (Such events are delayed until after the <code>load</code> event has fired.)

  The goal of this is to allow Web applications to provide more
  seamless update mechanisms, hiding from the user the mechanics of the application cache mechanism.
  User agents may display user interfaces independent of this, but are encouraged to not show
  prominent update progress notifications for applications that cancel the relevant events.

  The <a>application cache download process</a> steps are as follows:

  <ol>

    <li>Optionally, wait until the permission to start the <a>application cache download
    process</a> has been obtained from the user and until the user agent is confident that the
    network is available. This could include doing nothing until the user explicitly opts-in to
    caching the site, or could involve prompting the user for permission. The algorithm might never
    get past this point. (This step is particularly intended to be used by user agents running on
    severely space-constrained devices or in highly privacy-sensitive environments).</li>

    <li>

    Atomically, so as to avoid race conditions, perform the following substeps:

    <ol>

      <li>

      Pick the appropriate substeps:

      <dl class="switch">

        <dt>If these steps were invoked with an <a>absolute URL</a> purported to identify a
        <a>manifest</a></dt>

        <dd>

        Let <var>manifest URL</var> be that <a>absolute URL</a>.

        If there is no <a>application cache group</a> identified by <var>manifest
        URL</var>, then create a new <a>application cache group</a> identified by <var>manifest URL</var>. Initially, it has no <a>application caches</a>. One will be created later in this algorithm.

        </dd>

        <dt>If these steps were invoked with an <a>application cache group</a></dt>

        <dd>

        Let <var>manifest URL</var> be the <a>absolute URL</a> of the <a>manifest</a> used to identify the <a>application
        cache group</a> to be updated.

        If that <a>application cache group</a> is <a>obsolete</a>, then abort this instance of the
        <a>application cache download process</a>. This can happen if another instance of this
        algorithm found the manifest to be 404 or 410 while this algorithm was waiting in the first
        step above.

        </dd>

      </dl>

      </li>

      <li>Let <var>cache group</var> be the <a>application cache group</a>
      identified by <var>manifest URL</var>.</li>

      <li>If these steps were invoked with a <a>master</a>
      resource, then add the resource, along with the resource's <code>Document</code>, to <var>cache group</var>'s <a>list of pending
      master entries</a>.</li>

      <li>If these steps were invoked with a <a>cache host</a>, and the <a>status</a> of <var>cache group</var> is
      <i>checking</i> or <i>downloading</i>, then <a>queue a post-load task</a> to <a>fire a
      simple event</a> named <code>checking</code> that is
      cancelable at the <code>ApplicationCache</code> singleton of that <a>cache host</a>. The
      default action of this event must be, if the user agent <a>shows caching progress</a>,
      the display of some sort of user interface indicating to the user that the user agent is
      checking to see if it can download the application.</li>

      <li>If these steps were invoked with a <a>cache host</a>, and the <a>status</a> of <var>cache group</var> is
      <i>downloading</i>, then also <a>queue a post-load task</a> to <a>fire a simple
      event</a> named <code>downloading</code> that is
      cancelable at the <code>ApplicationCache</code> singleton of that <a>cache host</a>. The
      default action of this event must be, if the user agent <a>shows caching progress</a>,
      the display of some sort of user interface indicating to the user the application is being
      downloaded.</li>

      <li>If the <a>status</a> of the <var>cache
      group</var> is either <i>checking</i> or <i>downloading</i>, then abort this instance of the
      <a>application cache download process</a>, as an update is already in progress.</li>

      <li>Set the <a>status</a> of <var>cache
      group</var> to <i>checking</i>.

      <li>For each <a>cache host</a> associated with an <a>application cache</a> in
      <var>cache group</var>, <a>queue a post-load task</a> to <a>fire a simple
      event</a> that is cancelable named <code>checking</code> at
      the <code>ApplicationCache</code> singleton of the <a>cache host</a>. The default action
      of these events must be, if the user agent <a>shows caching progress</a>, the display of
      some sort of user interface indicating to the user that the user agent is checking for the
      availability of updates.</li>

    </ol>

    <p class="note">
  The remainder of the steps run <a>in parallel</a>.
  </p>

    If <var>cache group</var> already has an <a>application cache</a> in it, then
    this is an <dfn>upgrade attempt</dfn>. Otherwise, this is a
    <dfn>cache attempt</dfn>.

    </li>

    <li>If this is a <a>cache attempt</a>, then this
    algorithm was invoked with a <a>cache host</a>; <a>queue a post-load task</a> to
    <a>fire a simple event</a> named <code>checking</code> that
    is cancelable at the <code>ApplicationCache</code> singleton of that <a>cache host</a>. The
    default action of this event must be, if the user agent <a>shows caching progress</a>, the
    display of some sort of user interface indicating to the user that the user agent is checking for
    the availability of updates.</li>

    <li>Let <var>request</var> be a new <a>request</a> whose
    <a>url</a> is <var>manifest URL</var>, <a>client</a> is null, <a>destination</a> is "<code>subresource</code>",
    <a>omit-<code>Origin</code>-header flag</a> is set, <a>referrer</a> is "<code>no-referrer</code>",
    <a>synchronous flag</a> is set, <a>credentials
    mode</a> is "<code>include</code>", and whose <a>use-URL-credentials
    flag</a> is set.</li>

    <li>

    <i>Fetching the manifest</i>: Let <var>manifest</var> be the result of <a>fetching</a> <var>request</var>. HTTP caching semantics should be
    honored for this request.

    Parse <var>manifest</var>'s <a>body</a> according to the
    <a>rules for parsing manifests</a>, obtaining a list of
    <a>explicit entries</a>, <a>fallback entries</a> and the <a>fallback namespaces</a> that map to them, entries for
    the <a>online safelist</a>, and values for the
    <a>online safelist wildcard flag</a>
    and the <a>cache mode flag</a>.

    <p class="note">
  The <a>MIME type</a> of the resource is ignored &mdash; it is assumed to
    be <code>text/cache-manifest</code>. In the future, if new manifest formats are supported, the
    different types will probably be distinguished on the basis of the file signatures (for the
    current format, that is the "<code>CACHE&nbsp;MANIFEST</code>" string at the top of the
    file).
  </p>

    </li>

    <li>

    If <i>fetching the manifest</i> fails due to a 404 or 410 response status, then run these
    substeps:

    <ol>

      <li>Mark <var>cache group</var> as <a>obsolete</a>. This <var>cache group</var> no
      longer exists for any purpose other than the processing of <code>Document</code> objects
      already associated with an <a>application cache</a> in the <var>cache
      group</var>.</li>

      <li>Let <var>task list</var> be an empty list of <a>tasks</a>.

      <li>For each <a>cache host</a> associated with an <a>application cache</a> in
      <var>cache group</var>, create a <a>task</a> to <a>fire
      a simple event</a> named <code>obsolete</code> that is
      cancelable at the <code>ApplicationCache</code> singleton of the <a>cache host</a>, and
      append it to <var>task list</var>. The default action of these events must be, if the
      user agent <a>shows caching progress</a>, the display of some sort of user interface
      indicating to the user that the application is no longer available for offline use.</li>

      <li>For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, create a <a>task</a> to <a>fire a simple event</a> that is cancelable named
      <code>error</code> (not <code>obsolete</code>!) at the <code>ApplicationCache</code>
      singleton of the <code>Document</code> for this entry, if there still is one, and append it to
      <var>task list</var>. The default action of this event must be, if the user agent
      <a>shows caching progress</a>, the display of some sort of user interface indicating to
      the user that the user agent failed to save the application for offline use.</li>

      <li>If <var>cache group</var> has an <a>application cache</a> whose <a>completeness flag</a> is <i>incomplete</i>, then
      discard that <a>application cache</a>.

      <li>If appropriate, remove any user interface indicating that an update for this cache is in
      progress.</li>

      <li>Let the <a>status</a> of <var>cache
      group</var> be <i>idle</i>.</li>

      <li>For each <a>task</a> in <var>task list</var>, <a>queue that task as a post-load task</a>.</li>

      <li>Abort the <a>application cache download process</a>.</li>

    </ol>

    </li>

    <li>

    Otherwise, if <i>fetching the manifest</i> fails in some other way (e.g. the server returns
    another 4xx or 5xx response, or there is a DNS error, or the connection times out, or the user
    cancels the download, or the parser for manifests fails when checking the magic signature), or
    if the server returned a redirect, then run the <a>cache failure steps</a>. [[!HTTP11]]

    </li>

    <li>

    If this is an <a>upgrade attempt</a> and the newly
    downloaded <var>manifest</var> is byte-for-byte identical to the manifest found in the
    <a>newest</a> <a>application cache</a> in <var>cache
    group</var>, or the response status is <code>304</code>, then run these substeps:

    <ol>

      <li>Let <var>cache</var> be the <a>newest</a>
      <a>application cache</a> in <var>cache group</var>.</li>

      <li>Let <var>task list</var> be an empty list of <a>tasks</a>.

      <li>

      For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, wait for the
      resource for this entry to have either completely downloaded or failed.

      If the download failed (e.g. the server returns a 4xx or 5xx response, or there is a DNS
      error, the connection times out, or the user cancels the download), or if the resource is
      labeled with the "no-store" cache directive, then create a <a>task</a> to <a>fire a simple event</a> that is cancelable named
      <code>error</code> at the <code>ApplicationCache</code>
      singleton of the <code>Document</code> for this entry, if there still is one, and append it to
      <var>task list</var>. The default action of this event must be, if the user agent <a>shows
      caching progress</a>, the display of some sort of user interface indicating to the user
      that the user agent failed to save the application for offline use.

      Otherwise, associate the <code>Document</code> for this entry with <var>cache</var>; store the resource for this entry in <var>cache</var>, if it
      isn't already there, and categorize its entry as a <a>master entry</a>. If applying the <a>URL parser</a>
      algorithm to the resource's <a>URL</a> results in a <a>parsed URL</a> that has a
      non-null <a>fragment</a> component, the <a>URL</a>
      used for the entry in <var>cache</var> must instead be the <a>absolute URL</a>
      obtained from applying the <a>URL serializer</a>
      algorithm to the <a>parsed URL</a> with the <i>exclude fragment flag</i> set
      (application caches never include fragment identifiers).

      </li>

      <li>For each <a>cache host</a> associated with an <a>application cache</a> in
      <var>cache group</var>, create a <a>task</a> to <a>fire
      a simple event</a> that is cancelable named <code>noupdate</code> at the <code>ApplicationCache</code> singleton
      of the <a>cache host</a>, and append it to <var>task list</var>. The default
      action of these events must be, if the user agent <a>shows caching progress</a>, the
      display of some sort of user interface indicating to the user that the application is up to
      date.</li>

      <li>Empty <var>cache group</var>'s <a>list of pending master entries</a>.</li>

      <li>If appropriate, remove any user interface indicating that an update for this cache is in
      progress.</li>

      <li>Let the <a>status</a> of <var>cache
      group</var> be <i>idle</i>.</li>

      <li>For each <a>task</a> in <var>task list</var>, <a>queue that task as a post-load task</a>.</li>

      <li>Abort the <a>application cache download process</a>.</li>

    </ol>

    </li>

    <li>Let <var>new cache</var> be a newly created <a>application cache</a> in
    <var>cache group</var>. Set its <a>completeness
    flag</a> to <i>incomplete</i>.</li>

    <li>For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, associate the
    <code>Document</code> for this entry with <var>new cache</var>.</li>

    <li>Set the <a>status</a> of <var>cache
    group</var> to <i>downloading</i>.</li>

    <li>For each <a>cache host</a> associated with an <a>application cache</a> in <var>cache group</var>, <a>queue a post-load task</a> to <a>fire a simple
    event</a> that is cancelable named <code>downloading</code>
    at the <code>ApplicationCache</code> singleton of the <a>cache host</a>. The default action
    of these events must be, if the user agent <a>shows caching progress</a>, the display of
    some sort of user interface indicating to the user that a new version is being
    downloaded.</li>

    <li>Let <var>file list</var> be an empty list of URLs with flags.</li>

    <li>Add all the URLs in the list of <a>explicit
    entries</a> obtained by parsing <var>manifest</var> to <var>file list</var>,
    each flagged with "explicit entry".</li>

    <li>Add all the URLs in the list of <a>fallback
    entries</a> obtained by parsing <var>manifest</var> to <var>file list</var>,
    each flagged with "fallback entry".</li>

    <li>If this is an <a>upgrade attempt</a>, then add all
    the URLs of <a>master entries</a> in the <a>newest</a> <a>application cache</a> in <var>cache group</var> whose <a>completeness
    flag</a> is <i>complete</i> to <var>file list</var>, each flagged with "master
    entry".</li>

    <li>If any URL is in <var>file list</var> more than once, then merge the entries into
    one entry for that URL, that entry having all the flags that the original entries had.</li>

    <li>

    For each URL in <var>file list</var>, run the following steps. These steps may be
    run in parallel for two or more of the URLs at a time. If, while running these steps, the
    <code>ApplicationCache</code> object's <code>abort()</code> method
    <a>sends a signal</a> to this instance of the <a>application
    cache download process</a> algorithm, then run the <a>cache failure steps</a>
    instead.

    <ol>

      <li>

      If the resource URL being processed was flagged as neither an "explicit entry" nor or a
      "fallback entry", then the user agent may skip this URL.

      <p class="note">
  This is intended to allow user agents to expire resources not listed in the
      manifest from the cache. Generally, implementors are urged to use an approach that expires
      lesser-used resources first.
  </p>

      </li>

      <li>For each <a>cache host</a> associated with an <a>application cache</a> in
      <var>cache group</var>, <a>queue a progress post-load task</a> to <a>fire</a> a <a>trusted</a>
      event with the name <code>progress</code>, which does not
      bubble, which is cancelable, and which uses the <code>ProgressEvent</code> interface, at the
      <code>ApplicationCache</code> singleton of the <a>cache host</a>. The <code>lengthComputable</code> attribute must be set to
      true, the <code>total</code> attribute must be set to the
      number of files in <var>file list</var>, and the <code>loaded</code> attribute must be set to the number of files in
      <var>file list</var> that have been either downloaded or skipped so far. The default
      action of these events must be, if the user agent <a>shows caching progress</a>, the
      display of some sort of user interface indicating to the user that a file is being downloaded
      in preparation for updating the application. [[!XHR]]</li>

      <li>Let <var>request</var> be a new <a>request</a> whose
      <a>url</a> is URL, <a>client</a> is null, <a>destination</a> is "<code>subresource</code>", <a>origin</a> is
      <var>manifest URL</var>'s <a>origin</a>, <a>referrer</a> is "<code>no-referrer</code>",
      <a>synchronous flag</a> is set, <a>credentials mode</a> is "<code>include</code>", <a>use-URL-credentials flag</a> is set, and <a>redirect mode</a> is "<code>manual</code>".</li>

      <li><a>Fetch</a> <var>request</var>. If this is an
      <a>upgrade attempt</a>, then use the <a>newest</a> <a>application cache</a> in <var>cache
      group</var> as an HTTP cache, and honor HTTP caching semantics (such as expiration, ETags, and
      so forth) with respect to that cache. User agents may also have other caches in place that are
      also honored.</li>

      <li>

      If the previous step fails (e.g. the server returns a 4xx or 5xx response, or there is a
      DNS error, or the connection times out, or the user cancels the download), or if the server
      returned a redirect, or if the resource is labeled with the "no-store" cache directive, then
      run the first appropriate step from the following list: [[!HTTP11]]

      <dl class="switch">

        <dt>If the URL being processed was flagged as an "explicit entry" or a "fallback entry"</dt>

        <dd>

        If these steps are being run in parallel for any other URLs in <var>file
        list</var>, then abort these steps for those other URLs. Run the <a>cache failure
        steps</a>.

        <p class="note">
  Redirects are fatal because they are either indicative of a network problem
        (e.g. a captive portal); or would allow resources to be added to the cache under URLs that
        differ from any URL that the networking model will allow access to, leaving orphan entries;
        or would allow resources to be stored under URLs different than their true URLs. All of
        these situations are bad.
  </p>

        </dd>

        <dt>If the error was a 404 or 410 HTTP response</dt>

        <dt>If the resource was labeled with the "no-store" cache directive</dt>

        <dd>

        Skip this resource. It is dropped from the cache.

        </dd>

        <dt>Otherwise</dt>

        <dd>

        Copy the resource and its metadata from the <a>newest</a> <a>application cache</a> in <var>cache group</var> whose <a>completeness
        flag</a> is <i>complete</i>, and act as if that was the fetched resource, ignoring the
        resource obtained from the network.

        </dd>

      </dl>

      User agents may warn the user of these errors as an aid to development.

      <p class="note">
  These rules make errors for resources listed in the manifest fatal, while
      making it possible for other resources to be removed from caches when they are removed from
      the server, without errors, and making non-manifest resources survive server-side errors.
  </p>

      <p class="note">
  Except for the "no-store" directive, HTTP caching rules that would cause a
      file to be expired or otherwise not cached are ignored for the purposes of the
      <a>application cache download process</a>.
  </p>

      </li>

      <li>

      Otherwise, the fetching succeeded. Store the resource in the <var>new
      cache</var>.

      If the user agent is not able to store the resource (e.g. because of quota restrictions),
      the user agent may prompt the user or try to resolve the problem in some other manner (e.g.
      automatically pruning content in other caches). If the problem cannot be resolved, the user
      agent must run the <a>cache failure steps</a>.

      </li>

      <li>If the URL being processed was flagged as an "explicit entry" in <var>file
      list</var>, then categorize the entry as an <a>explicit
      entry</a>.</li>

      <li>If the URL being processed was flagged as a "fallback entry" in <var>file
      list</var>, then categorize the entry as a <a>fallback
      entry</a>.</li>

      <li>If the URL being processed was flagged as an "master entry" in <var>file
      list</var>, then categorize the entry as a <a>master
      entry</a>.</li>

      <li>As an optimization, if the resource is an HTML or XML file whose root element is an
      <code>html</code> element with a <code>manifest</code> attribute
      whose value doesn't match the manifest URL of the application cache being processed, then the
      user agent should mark the entry as being <a>foreign</a>.

    </ol>

    </li>

    <li>For each <a>cache host</a> associated with an <a>application cache</a> in <var>cache group</var>, <a>queue a progress post-load task</a> to <a>fire</a> a <a>trusted</a>
    event with the name <code>progress</code>, which does not bubble,
    which is cancelable, and which uses the <code>ProgressEvent</code> interface, at the
    <code>ApplicationCache</code> singleton of the <a>cache host</a>. The <code>lengthComputable</code> attribute must be set to
    true, the <code>total</code> and the <code>loaded</code> attributes must be set to the number of files in
    <var>file list</var>. The default action of these events must be, if the user agent
    <a>shows caching progress</a>, the display of some sort of user interface indicating to the
    user that all the files have been downloaded. [[!XHR]]</li>

    <li>Store the list of <a>fallback namespaces</a>,
    and the URLs of the <a>fallback entries</a> that they map
    to, in <var>new cache</var>.</li>

    <li>Store the URLs that form the new <a>online
    safelist</a> in <var>new cache</var>.</li>

    <li>Store the value of the new <a>online
    safelist wildcard flag</a> in <var>new cache</var>.</li>

    <li>Store the value of the new <a>cache mode flag</a> in
    <var>new cache</var>.</li>

    <li>

    For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, wait for the
    resource for this entry to have either completely downloaded or failed.

    If the download failed (e.g. the server returns a 4xx or 5xx response, or there is a DNS
    error, the connection times out, or the user cancels the download), or if the resource is
    labeled with the "no-store" cache directive, then run these substeps:

    <ol>

      <li>Unassociate the <code>Document</code> for this entry from <var>new
      cache</var>.</li>

      <li><a>Queue a post-load task</a> to <a>fire a simple event</a> that is
      cancelable named <code>error</code> at the
      <code>ApplicationCache</code> singleton of the <code>Document</code> for this entry, if there
      still is one. The default action of this event must be, if the user agent <a>shows caching
      progress</a>, the display of some sort of user interface indicating to the user that the
      user agent failed to save the application for offline use.

      <li>

      If this is a <a>cache attempt</a> and this entry is
      the last entry in <var>cache group</var>'s <a>list of pending master entries</a>, then run these
      further substeps:

      <ol>

        <li>Discard <var>cache group</var> and its only <a>application cache</a>,
        <var>new cache</var>.

        <li>If appropriate, remove any user interface indicating that an update for this cache is
        in progress.</li>

        <li>Abort the <a>application cache download process</a>.</li>

      </ol>

      </li>

      <li>Otherwise, remove this entry from <var>cache group</var>'s <a>list of pending master entries</a>.</li>

    </ol>

    Otherwise, store the resource for this entry in <var>new cache</var>, if it isn't
    already there, and categorize its entry as a <a>master
    entry</a>.

    </li>

    <li>Let <var>request</var> be a new <a>request</a> whose
    <a>url</a> is <var>manifest URL</var>, <a>client</a> is null, <a>destination</a> is "<code>subresource</code>",
    <a>referrer</a> is "<code>no-referrer</code>",
    <a>synchronous flag</a> is set, <a>credentials
    mode</a> is "<code>include</code>", and whose <a>use-URL-credentials
    flag</a> is set.</li>

    <li>

    Let <var>second manifest</var> be the result of <a>fetching</a> <var>request</var>. HTTP caching semantics should again
    be honored for this request.

    <p class="note">
  Since caching can be honored, authors are encouraged to avoid setting the cache
    headers on the manifest in such a way that the user agent would simply not contact the network
    for this second request; otherwise, the user agent would not notice if the cache had changed
    during the cache update process.
  </p>

    </li>

    <li>

    If the previous step failed for any reason, or if the fetching attempt involved a redirect,
    or if <var>second manifest</var> and <var>manifest</var> are not byte-for-byte
    identical, then schedule a rerun of the entire algorithm with the same parameters after a short
    delay, and run the <a>cache failure steps</a>.

    </li>

    <li>

    Otherwise, store <var>manifest</var> in <var>new cache</var>, if it's not
    there already, and categorize its entry as <a>the
    manifest</a>.

    </li>

    <li>Set the <a>completeness flag</a> of <var>new cache</var> to <i>complete</i>.</li>

    <li>Let <var>task list</var> be an empty list of <a>tasks</a>.

    <li>

    If this is a <a>cache attempt</a>, then for each
    <a>cache host</a> associated with an <a>application cache</a> in <var>cache
    group</var>, create a <a>task</a> to <a>fire a simple event</a>
    that is cancelable named <code>cached</code> at the
    <code>ApplicationCache</code> singleton of the <a>cache host</a>, and append it to <var>task list</var>. The default action of these events must be, if the user agent
    <a>shows caching progress</a>, the display of some sort of user interface indicating to
    the user that the application has been cached and that they can now use it offline.

    Otherwise, it is an <a>upgrade attempt</a>. For each
    <a>cache host</a> associated with an <a>application cache</a> in <var>cache
    group</var>, create a <a>task</a> to <a>fire a simple event</a>
    that is cancelable named <code>updateready</code> at the
    <code>ApplicationCache</code> singleton of the <a>cache host</a>, and append it to <var>task list</var>. The default action of these events must be, if the user agent
    <a>shows caching progress</a>, the display of some sort of user interface indicating to
    the user that a new version is available and that they can activate it by reloading the
    page.

    </li>

    <li>If appropriate, remove any user interface indicating that an update for this cache is in
    progress.</li>

    <li>Set the <a>update status</a> of <var>cache
    group</var> to <i>idle</i>.</li>

    <li>For each <a>task</a> in <var>task list</var>, <a>queue that task as a post-load task</a>.</li>

  </ol>

  The <dfn>cache failure steps</dfn> are as follows:

  <ol>

    <li>Let <var>task list</var> be an empty list of <a>tasks</a>.

    <li>

    For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, run the
    following further substeps. These steps may be run in parallel for two or more entries at a
    time.

    <ol>

      <li>Wait for the resource for this entry to have either completely downloaded or failed.

      <li>Unassociate the <code>Document</code> for this entry from its <a>application
      cache</a>, if it has one.</li>

      <li>Create a <a>task</a> to <a>fire a simple event</a> that
      is cancelable named <code>error</code> at the
      <code>ApplicationCache</code> singleton of the <code>Document</code> for this entry, if there
      still is one, and append it to <var>task list</var>. The default action of these
      events must be, if the user agent <a>shows caching progress</a>, the display of some sort
      of user interface indicating to the user that the user agent failed to save the application for
      offline use.

    </ol>

    </li>

    <li>For each <a>cache host</a> still associated with an <a>application cache</a>
    in <var>cache group</var>, create a <a>task</a> to <a>fire
    a simple event</a> that is cancelable named <code>error</code> at
    the <code>ApplicationCache</code> singleton of the <a>cache host</a>, and append it to <var>task list</var>. The default action of these events must be, if the user agent
    <a>shows caching progress</a>, the display of some sort of user interface indicating to the
    user that the user agent failed to save the application for offline use.</li>

    <li>Empty <var>cache group</var>'s <a>list of pending master entries</a>.</li>

    <li>If <var>cache group</var> has an <a>application cache</a> whose <a>completeness flag</a> is <i>incomplete</i>, then discard
    that <a>application cache</a>.

    <li>If appropriate, remove any user interface indicating that an update for this cache is in
    progress.</li>

    <li>Let the <a>status</a> of <var>cache
    group</var> be <i>idle</i>.</li>

    <li>If this was a <a>cache attempt</a>, discard <var>cache group</var> altogether.

    <li>For each <a>task</a> in <var>task list</var>, <a>queue that task as a post-load task</a>.</li>

    <li>Abort the <a>application cache download process</a>.</li>

  </ol>

  Attempts to fetch resources as part of the <a>application cache download process</a> may
  be done with cache-defeating semantics, to avoid problems with stale or inconsistent intermediary
  caches.

  <hr />

  User agents may invoke the <a>application cache download process</a>, in the background,
  for any <a>application cache group</a>, at any time (with no <a>cache host</a>). This
  allows user agents to keep caches primed and to update caches even before the user visits a
  site.

  <hr />

  Each <code>Document</code> has a list of <dfn>pending application cache download process
  tasks</dfn> that is used to delay events fired by the algorithm above until the document's <code>load</code> event has fired. When the <code>Document</code> is created, the
  list must be empty.

  When the steps above say to <dfn>queue a post-load task</dfn> <var>task</var>, where
  <var>task</var> is a <a>task</a> that dispatches an event on a
  target <code>ApplicationCache</code> object <var>target</var>, the user agent must run
  the appropriate steps from the following list:

  <dl>

    <dt>If <var>target</var>'s <a>node document</a> is
    <a>ready for post-load tasks</a></dt>

    <dd><a>Queue</a> the task <var>task</var>.</dd>

    <dt>Otherwise</dt>

    <dd>Add <var>task</var> to <var>target</var>'s <a>node document</a>'s list
    of <a>pending application cache download process tasks</a>.</dd>

  </dl>

  When the steps above say to <dfn>queue a progress post-load task</dfn> <var>task</var>, where
  <var>task</var> is a <a>task</a> that dispatches an event on a
  target <code>ApplicationCache</code> object <var>target</var>, the user agent must run
  the following steps:

  <ol>

    <li>If there is a <var>task</var> in <var>target</var>'s <a>node document</a>'s list
    of <a>pending application cache download process tasks</a> that is labeled as a
    <i>progress task</i>, then remove that task from the list.</li>

    <li>Label <var>task</var> as a <i>progress task</i>.</li>

    <li><a>Queue a post-load task</a> <var>task</var>.</li>

  </ol>

  The <a>task source</a> for these <a>tasks</a> is the
  <a>networking task source</a>.

<h4 id="the-application-cache-selection-algorithm"><dfn>The application cache selection algorithm</dfn></h4>

  When the <dfn>application cache selection algorithm</dfn>
  algorithm is invoked with a <code>Document</code> <var>document</var> and optionally a
  manifest <a>URL</a> <var>manifest URL</var>, the user agent must run the first
  applicable set of steps from the following list:

  <dl class="switch">

    <dt>If there is a <var>manifest URL</var>, and <var>document</var> was loaded
    from an <a>application cache</a>, and the URL of the <a>manifest</a> of that cache's <a>application cache
    group</a> is <em>not</em> the same as <var>manifest URL</var></dt>

    <dd>

    Mark the entry for the resource from which <var>document</var> was taken in the
    <a>application cache</a> from which it was loaded as <a>foreign</a>.

    Restart the current navigation from the top of the <a>navigation
    algorithm</a>, undoing any changes that were made as part of the initial load (changes can be
    avoided by ensuring that the step to <a>update the session history with the new page</a>
    is only ever completed <em>after</em> this <a>application cache
    selection algorithm</a> is run, though this is not required).

    <p class="note">
  The navigation will not result in the same resource being loaded, because
    "foreign" entries are never picked during navigation.
  </p>

    User agents may notify the user of the inconsistency between the cache manifest and the
    document's own metadata, to aid in application development.

    </dd>

    <dt>If <var>document</var> was loaded from an <a>application cache</a>, and that
    <a>application cache</a> still exists (it is not now <a>obsolete</a>)</dt>

    <dd>

    Associate <var>document</var> with the <a>application cache</a> from which it
    was loaded. Invoke, in the background, the <a>application cache download process</a> for
    that <a>application cache</a>'s <a>application cache group</a>, with <var>document</var> as the <a>cache host</a>.

    </dd>

    <dt>If <var>document</var>  was loaded using <code>GET</code>, and, there is a
    <var>manifest URL</var>, and <var>manifest URL</var> has the <a>same origin</a> as
    <var>document</var></dt>

    <dd>

    Invoke, in the background, the <a>application cache download process</a> for <var>manifest URL</var>, with <var>document</var> as the <a>cache host</a>
    and with the resource from which <var>document</var> was parsed as the <a>master</a> resource.

    If there are <a>relevant application caches</a> that
    are identified by a URL with the <a>same origin</a> as the URL of <var>document</var>, and that have this URL as one of their entries, excluding entries
    marked as <a>foreign</a>, then the user agent should use
    the <a>most appropriate application cache</a> of those
    that match as an HTTP cache for any subresource loads. User agents may also have other caches in
    place that are also honored.

    </dd>

    <dt>Otherwise</dt>

    <dd>

    The <code>Document</code> is not associated with any <a>application cache</a>.

    If there was a <var>manifest URL</var>, the user agent may report to the user that
    it was ignored, to aid in application development.

    </dd>

  </dl>

<h4 id="changes-to-the-networking-model"><dfn>Changes to the networking model</dfn></h4>

  When a <a>cache host</a> is associated with an <a>application cache</a> whose <a>completeness flag</a> is <i>complete</i>, any and all
  loads for resources related to that <a>cache host</a> other than those for <a>child browsing contexts</a> must go through the following steps
  instead of immediately invoking the mechanisms appropriate to that resource's scheme:

  <ol>

    <li>If the resource is not to be fetched using the GET method, or if applying the <a>URL
    parser</a> algorithm to both its <a>URL</a> and the <a>application cache</a>'s
    <a>manifest</a>'s URL results in two <a>parsed URLs</a> with different <a>scheme</a> components,
    then fetch the resource normally and abort these steps.</li>

    <li>If the resource's URL is <a>a master entry</a>,
    <a>the manifest</a>, <a>an explicit entry</a>, or <a>a fallback entry</a> in the <a>application cache</a>,
    then get the resource from the cache (instead of fetching it), and abort these steps.</li>

    <li>If there is an entry in the <a>application cache</a>'s <a>online safelist</a> that has the <a>same
    origin</a> as the resource's URL and that is a <a>prefix match</a> for the resource's
    URL, then fetch the resource normally and abort these steps.</li>

    <li>

    If the resource's URL has the <a>same origin</a> as the manifest's URL, and there is a
    <a>fallback namespace</a> <var>f</var> in
    the <a>application cache</a> that is a <a>prefix match</a> for the resource's URL,
    then:

    Fetch the resource normally. If this results in a redirect to a resource with another
    <a>origin</a> (indicative of a captive portal), or a 4xx or 5xx status code, or if there
    were network errors (but not if the user canceled the download), then instead get, from the
    cache, the resource of the <a>fallback entry</a>
    corresponding to the <a>fallback namespace</a>
    <var>f</var>. Abort these steps.

    </li>

    <li>If the <a>application cache</a>'s <a>online safelist wildcard flag</a> is
    <i>open</i>, then fetch the resource normally and abort these steps.</li>

    <li>Fail the resource load as if there had been a generic network error.</li>

  </ol>

  <p class="note">
  The above algorithm ensures that so long as the <a>online safelist wildcard flag</a> is
  <i>blocking</i>, resources that are not present in the <a>manifest</a> will always fail to load (at least, after the
  <a>application cache</a> has been primed the first time), making the testing of offline
  applications simpler.
  </p>

  </div>

  <div class="impl">

<h4 id="expiring-application-caches"><dfn>Expiring application caches</dfn></h4>

  As a general rule, user agents should not expire application caches, except on request from the
  user, or after having been left unused for an extended period of time.

  Application caches and cookies have similar implications with respect to privacy (e.g. if the
  site can identify the user when providing the cache, it can store data in the cache that can be
  used for cookie resurrection). Implementors are therefore encouraged to expose application caches
  in a manner related to HTTP cookies, allowing caches to be expunged together with cookies and
  other origin-specific data.

  <p class="example">
  For example, a user agent could have a "delete site-specific data" feature that
  clears all cookies, application caches, local storage, databases, etc, from an origin all at
  once.
  </p>

  </div>

  <div class="impl">

<h4 id="disk-space"><dfn>Disk space</dfn></h4>

  User agents should consider applying constraints on disk usage of <a>application caches</a>, and care should be taken to ensure that the restrictions cannot
  be easily worked around using subdomains.

  User agents should allow users to see how much space each domain is using, and may offer the
  user the ability to delete specific <a>application caches</a>.

  For predictability, quotas should be based on the uncompressed size of data stored.

  <p class="note">
  How quotas are presented to the user is not defined by this specification. User
  agents are encouraged to provide features such as allowing a user to indicate that certain sites
  are trusted to use more than the default quota, e.g. by presenting a non-modal user interface
  while a cache is being updated, or by having an explicit safelist in the user agent's
  configuration interface.
  </p>

  </div>

<h4 id="security-concerns-with-offline-applications-caches"><dfn>Security concerns with offline applications caches</dfn></h4>

  <em>This section is non-normative.</em>

  The main risk introduced by offline application caches is that an injection attack can be
  elevated into persistent site-wide page replacement. This attack involves using an injection
  vulnerability to upload two files to the victim site. The first file is an application cache
  manifest consisting of just a fallback entry pointing to the second file, which is an HTML page
  whose manifest is declared as that first file. Once the user has been directed to that second
  file, all subsequent accesses to any file covered by the given fallback namespace while either the
  user or the site is offline will instead show that second file. Targeted denial-of-service
  attacks or cookie bombing attacks (where the client is made to send so many cookies that the
  server refuses to process the request) can be used to ensure that the site appears offline.

  To mitigate this, manifests can only specify fallbacks that are in the same path as the
  manifest itself. This means that a content injection upload vulnerability in a particular
  directory on a server can only be escalated to a take-over of that directory and its
  subdirectories. If there is no way to inject a file into the root directory, the entire site
  cannot be taken over.

  If a site has been attacked in this way, simply removing the offending manifest might eventually
  clear the problem, since the next time the manifest is updated, a 404 error will be seen, and the
  user agent will clear the cache. "Eventually" is the key word here, however; while the attack on
  the user or server is ongoing, such that connections from an affected user to the affected site
  are blocked, the user agent will simply assume that the user is offline and will continue to use
  the hostile manifest. Unfortunately, if a cookie bombing attack has also been used, merely
  removing the manifest is insufficient; in addition, the server has to be configured to return a
  404 or 410 response instead of the 413 "Request Entity Too Large" response.

  TLS does not inherently protect a site from this attack, since the attack relies on content
  being served from the server itself. Not using application caches also does not prevent this
  attack, since the attack relies on an attacker-provided manifest.

<h4 id="application-cache-api"><dfn>Application cache API</dfn></h4>

  <pre class="idl" data-highlight="webidl">
  [Exposed=(Window, SharedWorker)]
  interface <dfn>ApplicationCache</dfn> : <a>EventTarget</a> {

  // <a>update status</a>
  const unsigned short <a>UNCACHED</a> = 0;
  const unsigned short <a>IDLE</a> = 1;
  const unsigned short <a>CHECKING</a> = 2;
  const unsigned short <a>DOWNLOADING</a> = 3;
  const unsigned short <a>UPDATEREADY</a> = 4;
  const unsigned short <a>OBSOLETE</a> = 5;
  readonly attribute unsigned short <a>status</a>;

  // updates
  void <a>update</a>();
  void <a>abort</a>();
  void <a>swapCache</a>();

  // events
  attribute <a>EventHandler</a> <a>onchecking</a>;
  attribute <a>EventHandler</a> <a>onerror</a>;
  attribute <a>EventHandler</a> <a>onnoupdate</a>;
  attribute <a>EventHandler</a> <a>ondownloading</a>;
  attribute <a>EventHandler</a> <a>onprogress</a>;
  attribute <a>EventHandler</a> <a>onupdateready</a>;
  attribute <a>EventHandler</a> <a>oncached</a>;
  attribute <a>EventHandler</a> <a>onobsolete</a>;
  };
  </pre>

  <dl class="domintro">

    <dt><var>cache</var> = <var>window</var> . <code>applicationCache</code></dt>
    <dd>

    (In a window.) Returns the <code>ApplicationCache</code> object that applies to the
    <a>active document</a> of that <code>Window</code>.

    </dd>

    <dt><var>cache</var> = <var>self</var> . <code>applicationCache</code></dt> <dd>

    (In a shared worker.) Returns the <code>ApplicationCache</code> object that applies to the
    current shared worker.

    </dd>

    <dt><var>cache</var> . <code>status</code></dt>
    <dd>

    Returns the current status of the application cache, as given by the constants defined
    below.

    </dd>

    <dt><var>cache</var> . <code>update</code>()</dt>
    <dd>

    Invokes the <a>application cache download process</a>.

    Throws an <code>InvalidStateError</code> exception if there is no application cache to
    update.

    Calling this method is not usually necessary, as user agents will generally take care of
    updating <a>application caches</a> automatically.

    The method can be useful in situations such as long-lived applications. For example, a Web
    mail application might stay open in a browser tab for weeks at a time. Such an application could
    want to test for updates each day.

    </dd>

    <dt><var>cache</var> . <code>abort</code>()</dt>
    <dd>

    Cancels the <a>application cache download process</a>.

    This method is intended to be used by Web application showing their own caching progress UI,
    in case the user wants to stop the update (e.g. because bandwidth is limited).

    </dd>

    <dt><var>cache</var> . <code>swapCache</code>()</dt>
    <dd>

    Switches to the most recent application cache, if there is a newer one. If there isn't,
    throws an <code>InvalidStateError</code> exception.

    This does not cause previously-loaded resources to be reloaded; for example, images do not
    suddenly get reloaded and style sheets and scripts do not get reparsed or reevaluated. The only
    change is that subsequent requests for cached resources will obtain the newer copies.

    The <code>updateready</code> event will fire before this
    method can be called. Once it fires, the Web application can, at its leisure, call this method
    to switch the underlying cache to the one with the more recent updates. To make proper use of
    this, applications have to be able to bring the new features into play; for example, reloading
    scripts to enable new features.

    An easier alternative to <code>swapCache()</code> is just to
    reload the entire page at a time suitable for the user, using <code>location.reload()</code>.

    </dd>

  </dl>

  <div class="impl">

  There is a one-to-one mapping from <a>cache hosts</a> to
  <code>ApplicationCache</code> objects. The <dfn><code>applicationCache</code></dfn> attribute on <code>Window</code>
  objects must return the <code>ApplicationCache</code> object associated with the
  <code>Window</code> object's <a>active document</a>. The <dfn><code>applicationCache</code></dfn> attribute
  on <code>SharedWorkerGlobalScope</code> objects must return the <code>ApplicationCache</code>
  object associated with the worker.

  <p class="note">
  A <code>Window</code> or <code>SharedWorkerGlobalScope</code> object has an
  associated <code>ApplicationCache</code> object even if that <a>cache host</a> has no actual
  <a>application cache</a>.
  </p>

  <hr />

  The <dfn><code>status</code></dfn> attribute, on getting, must
  return the current state of the <a>application cache</a> that the
  <code>ApplicationCache</code> object's <a>cache host</a> is associated with, if any. This
  must be the appropriate value from the following list:

  </div>

  <dl>

    <dt><dfn><code>UNCACHED</code></dfn> (numeric value 0)</dt>

    <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is not associated with
    an <a>application cache</a> at this time.</dd>

    <dt><dfn><code>IDLE</code></dfn> (numeric value 1)</dt>

    <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
    <a>application cache</a> whose <a>application cache group</a>'s <a>update status</a> is <i>idle</i>, and that <a>application
    cache</a> is the <a>newest</a> cache in its
    <a>application cache group</a>, and the <a>application cache group</a> is not marked
    as <a>obsolete</a>.</dd>

    <dt><dfn><code>CHECKING</code></dfn> (numeric value 2)</dt>

    <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
    <a>application cache</a> whose <a>application cache group</a>'s <a>update status</a> is <i>checking</i>.</dd>

    <dt><dfn><code>DOWNLOADING</code></dfn> (numeric value 3)</dt>

    <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
    <a>application cache</a> whose <a>application cache group</a>'s <a>update status</a> is <i>downloading</i>.</dd>

    <dt><dfn><code>UPDATEREADY</code></dfn> (numeric value 4)</dt>

    <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
    <a>application cache</a> whose <a>application cache group</a>'s <a>update status</a> is <i>idle</i>, and whose <a>application
    cache group</a> is not marked as <a>obsolete</a>, but
    that <a>application cache</a> is <em>not</em> the <a>newest</a> cache in its group.</dd>

    <dt><dfn><code>OBSOLETE</code></dfn> (numeric value 5)</dt>

    <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
    <a>application cache</a> whose <a>application cache group</a> is marked as <a>obsolete</a>.</dd>

  </dl>

  <div class="impl">

  <hr />

  If the <dfn><code>update()</code></dfn> method is invoked, the user
  agent must invoke the <a>application cache download process</a>, in the background, for the
  <a>application cache group</a> of the <a>application cache</a> with which the
  <code>ApplicationCache</code> object's <a>cache host</a> is associated, but without giving
  that <a>cache host</a> to the algorithm. If there is no such <a>application cache</a>,
  or if its <a>application cache group</a> is marked as <a>obsolete</a>, then the method must throw an
  <code>InvalidStateError</code> exception instead.

  If the <dfn><code>abort()</code></dfn> method is invoked, the user
  agent must <dfn>send a signal</dfn> to the current <a>application cache download process</a>
  for the <a>application cache group</a> of the <a>application cache</a> with which the
  <code>ApplicationCache</code> object's <a>cache host</a> is associated, if any. If there is
  no such <a>application cache</a>, or it does not have a current <a>application cache
  download process</a>, then do nothing.

  If the <dfn><code>swapCache()</code></dfn> method is invoked,
  the user agent must run the following steps:

  <ol>

    <li>Check that <code>ApplicationCache</code> object's <a>cache host</a> is associated
    with an <a>application cache</a>. If it is not, then throw an
    <code>InvalidStateError</code> exception and abort these steps.</li>

    <li>Let <var>cache</var> be the <a>application cache</a> with which the
    <code>ApplicationCache</code> object's <a>cache host</a> is associated. (By definition,
    this is the same as the one that was found in the previous step.)</li>

    <li>If <var>cache</var>'s <a>application cache group</a> is marked as <a>obsolete</a>, then unassociate the
    <code>ApplicationCache</code> object's <a>cache host</a> from <var>cache</var> and
    abort these steps. (Resources will now load from the network instead of the cache.)</li>

    <li>Check that there is an application cache in the same <a>application cache group</a>
    as <var>cache</var> whose <a>completeness
    flag</a> is <i>complete</i> and that is <a>newer</a> than
    <var>cache</var>. If there is not, then throw an <code>InvalidStateError</code>
    exception and abort these steps.</li>

    <li>Let <var>new cache</var> be the <a>newest</a> <a>application cache</a> in the same
    <a>application cache group</a> as <var>cache</var> whose <a>completeness flag</a> is <i>complete</i>.</li>

    <li>Unassociate the <code>ApplicationCache</code> object's <a>cache host</a> from <var>cache</var> and instead associate it with <var>new cache</var>.</li>

  </ol>

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported, as <a>event handler IDL attributes</a>, by all objects implementing the
  <code>ApplicationCache</code> interface:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn><code>onchecking</code></dfn> <td> <code>checking</code>
    <tr><td><dfn><code>onerror</code></dfn> <td> <code>error</code>
    <tr><td><dfn><code>onnoupdate</code></dfn> <td> <code>noupdate</code>
    <tr><td><dfn><code>ondownloading</code></dfn> <td> <code>downloading</code>
    <tr><td><dfn><code>onprogress</code></dfn> <td> <code>progress</code>
    <tr><td><dfn><code>onupdateready</code></dfn> <td> <code>updateready</code>
    <tr><td><dfn><code>oncached</code></dfn> <td> <code>cached</code>
    <tr><td><dfn><code>onobsolete</code></dfn> <td> <code>obsolete</code>
  </table>

  </div>

<h4 id="browser-state"><dfn><a>Browser state</a></dfn></h4>

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject, Exposed=(Window, Worker)]
  interface <dfn>NavigatorOnLine</dfn> {
  readonly attribute boolean <a>onLine</a>;
  };
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>onLine</code></dt>

    <dd>

    Returns false if the user agent is definitely offline (disconnected from the network).
    Returns true if the user agent might be online.

    The events <code>online</code> and <code>offline</code> are fired when the value of this attribute changes.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>navigator.onLine</code></dfn> attribute must return
  false if the user agent will not contact the network when the user follows links or when a script
  requests a remote page (or knows that such an attempt would fail), and must return true
  otherwise.

  When the value that would be returned by the <code>navigator.onLine</code> attribute of a <code>Window</code> or
  <code>WorkerGlobalScope</code> changes from true to false, the user agent must <a>queue a
  task</a> to <a>fire a simple event</a> named <code>offline</code>
  at the <code>Window</code> or <code>WorkerGlobalScope</code> object.

  On the other hand, when the value that would be returned by the <code>navigator.onLine</code> attribute of a <code>Window</code> or
  <code>WorkerGlobalScope</code> changes from false to true, the user agent must <a>queue a
  task</a> to <a>fire a simple event</a> named <code>online</code> at
  the <code>Window</code> or <code>WorkerGlobalScope</code> object.

  The <a>task source</a> for these <a>tasks</a> is the
  <a>networking task source</a>.

  </div>

  <p class="note">
  This attribute is inherently unreliable. A computer can be connected to a network
  without having Internet access.
  </p>

  <div class="example">
    In this example, an indicator is updated as the browser goes online and offline.

    <pre highlight="html">
      &lt;!DOCTYPE HTML>
      &lt;html>
        &lt;head>
          &lt;title>Online status&lt;/title>
          &lt;script>
            function updateIndicator() {
              document.getElementById('indicator').textContent = navigator.onLine ? 'online' : 'offline';
            }
          &lt;/script>
        &lt;/head>
        &lt;body onload="updateIndicator()" ononline="updateIndicator()" onoffline="updateIndicator()">
          &lt;p>The network is: &lt;span>(state unknown)&lt;/span>
        &lt;/body>
      &lt;/html>
    </pre>
  </div>

<!-- Big Text: Web App Apis -->

<h2 id="webappapis"><dfn>Web application APIs</dfn></h2>

<h3 id="scripting"><dfn>Scripting</dfn></h3>

<h4 id="introduction"><dfn>Introduction</dfn></h4>

  Various mechanisms can cause author-provided executable code to run in the context of a
  document. These mechanisms include, but are probably not limited to:

  <ul>

    <li>Processing of <code>script</code> elements.</li>

    <li>Navigating to <a><code>javascript:</code> URLs</a>.</li>

    <li>Event handlers, whether registered through the DOM using <code>addEventListener()</code>, by explicit <a>event handler content attributes</a>, by
    <a>event handler IDL attributes</a>, or otherwise.</li>

    <li>Processing of technologies like SVG that have their own scripting features.</li>

  </ul>

  <div class="impl">

<h4 id="enabling-and-disabling-scripting"><dfn>Enabling and disabling scripting</dfn></h4>

  <dfn>Scripting is enabled</dfn> in a <em><a>browsing
  context</a></em> when all of the following conditions are true:

  <ul>

    <li>The user agent supports scripting.</li>

    <li>The user has not disabled scripting for this <a>browsing context</a> at this time.
    (User agents may provide users with the option to disable scripting globally, or in a
    finer-grained manner, e.g. on a per-origin basis.)

    </li>

    <li>The <a>browsing context</a>'s <a>active document</a>'s
    <a>active sandboxing flag set</a> does not have its <a>sandboxed scripts browsing
    context flag</a> set.</li>

  </ul>

  <dfn>Scripting is disabled</dfn> in a <a>browsing context</a>
  when any of the above conditions are false (i.e. when scripting is not <a>enabled</a>).

  <hr />

  <dfn>Scripting is enabled</dfn> for a <em>node</em> if the
  <code>Document</code> object of the node (the node itself, if it is itself a <code>Document</code>
  object) has an associated <a>browsing context</a>, and <a>scripting is enabled</a> in that <a>browsing context</a>.

  <dfn>Scripting is disabled</dfn> for a node if there is no such
  <a>browsing context</a>, or if <a>scripting is
  disabled</a> in that <a>browsing context</a>.

  </div>

  <div class="impl">

<h4 id="processing-model"><dfn>Processing model</dfn></h4>

<h5 id="definitions"><dfn>Definitions</dfn></h5>

  This specification describes three kinds of <a>JavaScript global environments</a>: the <dfn>document environment</dfn>, the
  <dfn>dedicated worker environment</dfn>, and the <dfn>shared worker environment</dfn>. The
  <a>dedicated worker environment</a> and the <a>shared worker environment</a> are both
  types of <dfn>worker environments</dfn>.

  Except where otherwise specified, a <a>JavaScript global environment</a> is a
  <a>document environment</a>.

  <hr />

  A <dfn>script</dfn> has:

  <dl>

    <dt>A <dfn>code entry-point</dfn></dt>

    <dd>

    A code entry-point represents a block of executable code that the script exposes to other
    scripts and to the user agent. Typically, the code corresponding to the code entry-point is
    executed immediately after the script is parsed, but for event handlers, it is called each time
    the handler is invoked.

    <p class="example">
  In JavaScript <code>script</code> blocks, this corresponds to the execution
    context of the global code.
  </p>

    </dd>

    <dt>Optionally, a <dfn>muted errors</dfn> flag</dt>

    <dd>

    A flag which, if set, means that error information will not be provided for errors in this
    script (used to mute errors for cross-origin scripts, since that can leak private
    information).

    </dd>

    <dt>A <dfn>settings object</dfn></dt>

    <dd>

    An <a>environment settings object</a>, various settings that are shared with other scripts in
    the same context.

    </dd>

  </dl>

  <hr />

  An <dfn>environment settings object</dfn> specifies algorithms for obtaining the following:

  <dl>

    <dt>A <dfn>script execution environment</dfn> for each language supported by the user agent</dt>

    <dd>

    The characteristics of the script execution environment depend on the language, and are not
    defined by this specification.

    <p class="example">
  In JavaScript, the script execution environment consists of the interpreter,
    the stack of <i>execution contexts</i>, the <i>global code</i> and <i>function code</i> and the
    <code>Function</code> objects resulting, and so forth.
  </p>

    </dd>

    <dt>A <dfn>global object</dfn></dt>
    <dd>

    An object that provides the APIs that can be called by the code in scripts that use this
    <a>settings object</a>.

    <p class="note">
  This is typically a <code>Window</code> object or a
    <code>WorkerGlobalScope</code> object. When a <a>global object</a> is an empty object, it
    can't do anything that interacts with the environment.
  </p>

    If the <a>global object</a> is a <code>Window</code> object, then, in JavaScript, the
    ThisBinding of the global execution context for this script must be the <code>Window</code>
    object's <code>WindowProxy</code> object, rather than the global object. [[!ECMA-262]]

    <p class="note">
  This is a <a>willful violation</a> of the JavaScript specification current
    at the time of writing (ECMAScript edition 5, as defined in section 10.4.1.1 Initial Global
    Execution Context, step 3). The JavaScript specification requires that the <code>this</code> keyword in the global scope return the global object, but this is not
    compatible with the security design prevalent in implementations as specified herein. [[!ECMA-262]]
  </p>

    </dd>

    <dt>A <dfn>responsible browsing context</dfn></dt>

    <dd>

    A <a>browsing context</a> that is assigned responsibility for actions taken by the
    scripts that use this <a>environment settings object</a>.

    <p class="example">
  When a script creates and <a>navigates</a> a new
    <a>top-level browsing context</a>, the <code>opener</code> attribute
    of the new <a>browsing context</a>'s <code>Window</code> object will be set to the
    <a>responsible browsing context</a>'s <code>WindowProxy</code> object.
  </p>

    </dd>

    <dt>A <dfn>responsible event loop</dfn></dt>

    <dd>

    An <a>event loop</a> that is used when it would not be immediately clear what event
    loop to use.

    </dd>

    <dt>A <dfn>responsible document</dfn></dt>

    <dd>

    A <code>Document</code> that is assigned responsibility for actions taken by the scripts that
    use this <a>environment settings object</a>.

    <p class="example">
  For example, the <a>address</a> of the
    <a>responsible document</a> is used to set the <a>address</a> of the <code>Document</code> after it has been reset using <code>document.open()</code>.
  </p>

    If the <a>responsible event loop</a> is not a <a>browsing context</a> <a>event loop</a>,
    then the <a>environment settings object</a> has no <a>responsible document</a>.

    </dd>

    <dt>An <dfn>API URL character encoding</dfn></dt>

    <dd>

    A character encoding used to encode URLs by APIs called by scripts that use this <a>environment
    settings object</a>.

    </dd>

    <dt>An <dfn>API base URL</dfn></dt>

    <dd>

    An <a>absolute URL</a> used by APIs called by scripts that use this <a>environment
    settings object</a> to resolve <a>relative URLs</a>.

    </dd>

    <dt>An <a>origin</a> and an <a>effective script origin</a></dt>

    <dd>

    An instrument used in security checks.

    </dd>

    <dt>A <dfn>creation URL</dfn></dt>

    <dd>
    An <a>absolute URL</a> representing the location of the resource with which the
    <a>environment settings object</a> is associated. Note that this URL might be distinct
    from the resource's current URL, due to mechanisms such as <code>history.pushState()</code>.
    </dd>

    <dt>An <dfn>HTTPS state</dfn></dt>

    <dd>
    A value representing the security properties of the network channel used to deliver the
    resource with which the <a>environment settings object</a> is associated. The value will
    be one of "<code>modern</code>", "<code>deprecated</code>", or
    "<code>none</code>".

    <p class="note">
  Resources delivered over HTTPS will generally have an <a>HTTPS state</a>
    of "<code>modern</code>". A user agent can use "<code>deprecated</code>"
    during transitional periods where rejecting the response entirely would be inappropriate (e.g.,
    while removing support for a hash function or cypher suite).
  </p>
    </dd>

  </dl>

  The <dfn>relevant settings object for a global object</dfn> <var>o</var> is the
  <a>environment settings object</a> whose <a>global object</a> is <var>o</var>.
  (There is always a 1:1 mapping of global objects to environment settings objects.)

  The <dfn>relevant settings object for a script</dfn> <var>s</var> is the
  <a>settings object</a> of <var>s</var>.

<h5 id="script-settings-for-browsing-contexts"><dfn>Script settings for browsing contexts</dfn></h5>

  Whenever a new <code>Window</code> object is created, the user agent must:

  <ol>
    <li>Let <var>url</var> be a copy of the <a>address</a>
    of the <code>Document</code> with which the <code>Window</code> is associated.</li>

    <li>
    Create an <a>environment settings object</a> whose algorithms are defined as
    follows:

    <dl>

      <dt>The <a>script execution environments</a></dt>
      <dd>

      When the <a>environment settings object</a> is created, for each language supported by the
      user agent, create an appropriate execution environment as defined by the relevant
      specification.

      When a <a>script execution environment</a> is needed, return the appropriate one from
      those created when the <a>environment settings object</a> was created.

      </dd>

      <dt>The <a>global object</a></dt>
      <dd>

      Return the <code>Window</code> object itself.

      </dd>

      <dt>The <a>responsible browsing context</a></dt>
      <dd>

      Return the <a>browsing context</a> with which the <code>Window</code> object is
      associated.

      </dd>

      <dt>The <a>responsible event loop</a></dt>
      <dd>

      Return the <a>event loop</a> that is associated with the <a>unit of related
      similar-origin browsing contexts</a> to which the <code>Window</code> object's <a>browsing
      context</a> belongs.

      </dd>

      <dt>The <a>responsible document</a></dt>
      <dd>

      Return the <code>Document</code> with which the <code>Window</code> is currently
      associated.

      </dd>

      <dt>The <a>API URL character encoding</a></dt>
      <dd>

      Return the current <a>character encoding</a> of
      the <code>Document</code> with which the <code>Window</code> is currently associated.

      </dd>

      <dt>The <a>API base URL</a></dt>
      <dd>

      Return the current <a>base URL</a> of the
      <code>Document</code> with which the <code>Window</code> is currently associated.

      </dd>

      <dt>The <a>origin</a></dt>
      <dd>

      Return the <a>origin</a> of the <code>Document</code> with which the
      <code>Window</code> is currently associated.

      </dd>

      <dt>The <a>effective script origin</a></dt>
      <dd>

      Return the <a>effective script origin</a> of the <code>Document</code> with which the
      <code>Window</code> is currently associated.

      </dd>

      <dt>The <a>creation URL</a></dt>
      <dd>

      Return <var>url</var>.

      </dd>

      <dt>The <a>HTTPS state</a></dt>
      <dd>

      Return the <a>HTTPS state</a> of the
      <code>Window</code> object.

      </dd>

    </dl>
    </li>
  </ol>

<h5 id="calling-scripts"><dfn>Calling scripts</dfn></h5>

  Each <a>unit of related similar-origin browsing contexts</a> has a <dfn>stack of script
  settings objects</dfn>, which must be initially empty. When a new <a>environment settings
  object</a> is <i>pushed</i> onto this stack, the specified <a>environment settings object</a>
  is to be added to the stack; when the <a>environment settings object</a> on this stack that was
  most recently pushed onto it is to be <i>popped</i> from the stack, it must be removed. Entries on
  this stack can be labeled as <dfn>candidate entry
  settings objects</dfn>.

  When a user agent is to <dfn>jump to a code entry-point</dfn> for a <a>script</a> <var>s</var>, the user agent must run the
  following steps:

  <ol>

    <li>Let <var>context</var> be the <a>settings object</a> of <var>s</var>.</li>

    <li><a>Prepare to run a callback</a> with <var>context</var> as the
    <a>environment settings object</a>. If this returns "do not run" then abort these
    steps.</li>

    <li>Make the appropriate <a>script execution environment</a> specified by <var>context</var> execute the <var>s</var>'s <a>code
    entry-point</a>.</li>

    <li><a>Clean up after running a callback</a>.</li>

  </ol>

  The steps to <dfn>prepare to run a callback</dfn> with an <a>environment settings object</a>
  <var>o</var> are as follows. They return either "run" or "do not run".

  <ol>

    <li>If the <a>global object</a> specified by <var>o</var> is a
    <code>Window</code> object whose <code>Document</code> object is not <a>fully active</a>,
    then return "do not run" and abort these steps.

    <li>If <a>scripting is disabled</a> for the
    <a>responsible browsing context</a> specified by <var>o</var>, then return "do
    not run" and abort these steps.

    <li>Push <var>o</var> onto the <a>stack of script settings objects</a>, and
    label it as a <a>candidate entry settings object</a>.</li>

    <li>Return "run".</li>

  </ol>

  The steps to <dfn>clean up after running a callback</dfn> are as follows:

  <ol>

    <li>Pop the current <a>incumbent settings object</a> from the <a>stack of script
    settings objects</a>.</li>

    <li>If the <a>stack of script settings objects</a> is now empty, <a>run the global
    script clean-up jobs</a>. (These cannot run scripts.)</li>

    <li>If the <a>stack of script settings objects</a> is now empty, <a>perform a
    microtask checkpoint</a>. (If this runs scripts, these algorithms will be invoked
    reentrantly.)</li>

  </ol>

  <p class="note">
  These algorithms are not invoked by one script directly calling another, but they
  can be invoked reentrantly in an indirect manner, e.g. if a script dispatches an event which has
  event listeners registered.
  </p>

  When a JavaScript <i>SourceElements</i> production is to be evaluated, the <a>settings
  object</a> of the <a>script</a> corresponding to that
  <i>SourceElements</i> must be pushed onto the <a>stack of script settings objects</a> before
  the evaluation begins, and popped when the evaluation ends (regardless of whether it's an abrupt
  completion or not).

  The <dfn>entry settings object</dfn> is the most-recently added <a>environment settings
  object</a> in the <a>stack of script settings objects</a> that is labeled as a
  <a>candidate entry settings object</a>. If the stack is empty, or has no entries labeled as
  such, then there is no <a>entry settings object</a>. It is used to obtain, amongst other
  things, the <a>API base URL</a> to <a>resolve</a> relative
  <a>URLs</a> used in scripts running in that <a>unit of related
  similar-origin browsing contexts</a>.

  The <dfn>incumbent settings object</dfn> is the <a>environment settings object</a> in the
  <a>stack of script settings objects</a> that was most-recently added (i.e. the last one on
  the stack). If the stack is empty, then there is no <a>incumbent settings object</a>. It is
  used in some security checks.

  <p class="note">
  The Web IDL specification also uses these algorithms. [[!WEBIDL]]
  </p>

  <div class="example">
    Consider the following two pages, with the first being loaded in a browser window and the
    second being loaded in the <code>iframe</code> of the first:

    <pre highlight="html">
  &lt;!-- a/a.html -->
  &lt;!DOCTYPE HTML>
  &lt;title>Outer page&lt;/title>
  &lt;iframe src="../b/b.html">&lt;/iframe>
  &lt;input type=button onclick="frames[0].hello()" value="Hello">
  </pre>

    <pre highlight="html">
  &lt;!-- b/b.html -->
  &lt;!DOCTYPE HTML>
  &lt;title>Inner page&lt;/title>
  &lt;script>
  function hello() {
    location.assign('c.html');
  }
  &lt;/script>
  </pre>

    When the button is pressed in the inner frame, the outer page runs script in the inner page.
    While the <code>hello()</code> function is running, the <a>entry settings
    object</a> is that of the outer file (<code>a/a.html</code>), and the
    <a>incumbent settings object</a> is that of the inner file (<code>b/b.html</code>). The <code>assign()</code> method uses
    the <a>entry settings object</a> to resolve the URL, so we end up loading <code>a/c.html</code>, but it uses the <a>incumbent settings object</a> to establish
    the <a>source browsing context</a>, from which the referrer is established, so the <code>Referer</code> header sent with the request for <code>a/c.html</code> specifies the inner file's URL (the one ending with <code>b/b.html</code>).
  </div>

  <hr />

  Each <a>unit of related similar-origin browsing contexts</a> has a <dfn>global script
  clean-up jobs list</dfn>, which must initially be empty. A global script clean-up job cannot run
  scripts, and cannot be sensitive to the order in which other clean-up jobs are executed. The File
  API uses this to release <code>blob:</code> URLs. [[!FILEAPI]]

  When the user agent is to <dfn>run the global script clean-up jobs</dfn>, the user agent must
  perform each of the jobs in the <a>global script clean-up jobs list</a> and then empty the
  list.

  </div>

  <div class="impl">

<h5 id="creating-scripts"><dfn>Creating scripts</dfn></h5>

  When the specification says that a <a>script</a> is to be <dfn>created</dfn>, given some script source, a script source URL, its
  scripting language, an <a>environment settings object</a>, and optionally a <var>muted
  errors</var> flag, the user agent must run the following steps:

  <ol>

    <li>Let <var>script</var> be a new <a>script</a> that
    this algorithm will subsequently initialize.</li>

    <li>If <a>scripting is disabled</a> for <a>browsing
    context</a> passed to this algorithm, then abort these steps, as if the script source
    described a program that did nothing but return void.

    <li>Obtain the appropriate <a>script execution environment</a> for the given scripting
    language from the <a>environment settings object</a> provided.</li>

    <li>Parse/compile/initialize the source of the script using the <a>script execution
    environment</a>, as appropriate for the scripting language, and thus obtain <var>script</var>'s <a>code entry-point</a>.</li>

    <li>Let <var>script</var>'s <a>settings object</a> be the <a>environment
    settings object</a> provided.</li>

    <li>If the <var>muted errors</var> flag was set, then set <var>script</var>'s <a>muted errors</a> flag.</li>

    <li>

    If all the steps above succeeded (in particular, if the script was compiled successfully),
    <a>Jump</a> to <var>script</var>'s <a>code
    entry-point</a>.

    Otherwise, <a>report the error</a> for <var>script</var>, with the
    problematic position (line number and column number), using the <a>global object</a>
    specified by the <a>environment settings object</a> as the target. If the error is still <i>not handled</i> after this, then the error may be reported to
    the user.

    </li>

  </ol>

  </div>

  <div class="impl">

<h5 id="killing-scripts"><dfn>Killing scripts</dfn></h5>

  User agents may impose resource limitations on scripts, for example CPU quotas, memory limits,
  total execution time limits, or bandwidth limitations. When a script exceeds a limit, the user
  agent may either throw a <code>QuotaExceededError</code> exception, abort the script without an
  exception, prompt the user, or throttle script execution.

  <div class="example">
    For example, the following script never terminates. A user agent could, after waiting for a
    few seconds, prompt the user to either terminate the script or let it continue.

    <pre highlight="html">
  &lt;script>
  while (true) { /* loop */ }
  &lt;/script>
  </pre>
  </div>

  User agents are encouraged to allow users to disable scripting whenever the user is prompted
  either by a script (e.g. using the <code>window.alert()</code> API) or because
  of a script's actions (e.g. because it has exceeded a time limit).

  If scripting is disabled while a script is executing, the script should be terminated
  immediately.

  User agents may allow users to specifically disable scripts just for the purposes of closing a
  <a>browsing context</a>.

  <p class="example">
  For example, the prompt mentioned in the example above could also offer the
  user with a mechanism to just close the page entirely, without running any <code>unload</code> event handlers.
  </p>

  </div>

<h5 id="runtime-script-errors"><dfn>Runtime script errors</dfn></h5>

  <div class="impl">

  When the user agent is required to <dfn>report an error</dfn> for a
  particular <a>script</a> <var>script</var> with a particular
  position <var>line</var>:<var>col</var>, using a particular target <var>target</var>, it must run these steps, after which the error is either <dfn><i>handled</i></dfn> or <dfn><i>not
  handled</i></dfn>:

  <ol>

    <li>If <var>target</var> is <a>in error reporting mode</a>, then abort these
    steps; the error is <i>not handled</i>.</li>

    <li>Let <var>target</var> be <dfn>in error reporting mode</dfn>.</li>

    <li>Let <var>message</var> be a user-agent-defined string describing the error in a
    helpful manner.

    </li>

    <li>Let <var>error object</var> be the object that represents the error: in the case of an
    uncaught exception, that would be the object that was thrown; in the case of a JavaScript error
    that would be an <code>Error</code> object. If there is no corresponding
    object, then the null value must be used instead.</li>

    <li>

    Let <var>location</var> be an <a>absolute URL</a> that corresponds to the
    resource from which <var>script</var> was obtained.

    <p class="note">
  The resource containing the script will typically be the file from which the
    <code>Document</code> was parsed, e.g. for inline <code>script</code> elements or <a>event
    handler content attributes</a>; or the JavaScript file that the script was in, for external
    scripts. Even for dynamically-generated scripts, user agents are strongly encouraged to attempt
    to keep track of the original source of a script. For example, if an external script uses the
    <code>document.write()</code> API to insert an inline
    <code>script</code> element during parsing, the URL of the resource containing the script would
    ideally be reported as being the external script, and the line number might ideally be reported
    as the line with the <code>document.write()</code> call or where the
    string passed to that call was first constructed. Naturally, implementing this can be somewhat
    non-trivial.
  </p>

    <p class="note">
  User agents are similarly encouraged to keep careful track of the original line
    numbers, even in the face of <code>document.write()</code> calls
    mutating the document as it is parsed, or <a>event handler content attributes</a> spanning
    multiple lines.
  </p>

    </li>

    <li>If <var>script</var> has <a>muted errors</a>, then set <var>message</var> to "<code>Script error.</code>", set <var>location</var>
    to the empty string, set <var>line</var> and <var>col</var> to 0, and set <var>error object</var> to null.</li>

    <li>Let <var>event</var> be a new <a>trusted</a>
    <code>ErrorEvent</code> object that does not bubble but is cancelable, and which has the event
    name <code>error</code>.</li>

    <li>Initialize <var>event</var>'s <code>message</code>
    attribute to <var>message</var>.</li>

    <li>Initialize <var>event</var>'s <code>filename</code> attribute to <var>location</var>.</li>

    <li>Initialize <var>event</var>'s <code>lineno</code>
    attribute to <var>line</var>.</li>

    <li>Initialize <var>event</var>'s <code>colno</code>
    attribute to <var>col</var>.</li>

    <li>Initialize <var>event</var>'s <code>error</code>
    attribute to <var>error object</var>.</li>

    <li><a>Dispatch</a> <var>event</var> at <var>target</var>.</li>

    <li>Let <var>target</var> no longer be <a>in error reporting mode</a>.</li>

    <li>If <var>event</var> was canceled, then the error is <i>handled</i>. Otherwise, the error is <i>not handled</i>.

  </ol>

<h6 id="runtime-script-errors-in-documents"><dfn>Runtime script errors in documents</dfn></h6>

  When the user agent is to <dfn>report an exception</dfn>
  <var>E</var>, the user agent must <a>report the error</a> for the relevant <a>script</a>, with the problematic position (line number and column
  number) in the resource containing the script, using the <a>global object</a> specified by
  the script's <a>settings object</a> as the target. If the error is still <i>not handled</i> after this, then the error may be reported to
  the user.

  When an exception is thrown during the execution of one of the scripts associated with a
  <code>Document</code>, and the exception is not caught, the user agent must <a>report the
  exception</a>.

<h6 id="the-errorevent-interface"><dfn>The <code>ErrorEvent</code> interface</dfn></h6>

  </div>

  <pre class="idl" data-highlight="webidl">
  [Constructor(DOMString type, optional <a>ErrorEventInit</a> eventInitDict), Exposed=(Window, Worker)]
  interface <dfn>ErrorEvent</dfn> : <a>Event</a> {
  readonly attribute DOMString <a>message</a>;
  readonly attribute DOMString <a>filename</a>;
  readonly attribute unsigned long <a>lineno</a>;
  readonly attribute unsigned long <a>colno</a>;
  readonly attribute any <a>error</a>;
  };

  dictionary <dfn>ErrorEventInit</dfn> : <a>EventInit</a> {
  DOMString message;
  DOMString filename;
  unsigned long lineno;
  unsigned long colno;
  any error;
  };
  </pre>

  The <dfn><code>message</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to the
  empty string. It represents the error message.

  The <dfn><code>filename</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to the
  empty string. It represents the <a>absolute URL</a> of the script in which the error
  originally occurred.

  The <dfn><code>lineno</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to
  zero. It represents the line number where the error occurred in the script.

  The <dfn><code>colno</code></dfn> attribute must return the value
  it was initialized to. When the object is created, this attribute must be initialized to zero. It
  represents the column number where the error occurred in the script.

  The <dfn><code>error</code></dfn> attribute must return the value
  it was initialized to. When the object is created, this attribute must be initialized to null.
  Where appropriate, it is set to the object representing the error (e.g. the exception object in
  the case of an uncaught DOM exception).

  <div class="impl">

<h4 id="event-loops"><dfn>Event loops</dfn></h4>

<h5 id="definitions"><dfn>Definitions</dfn></h5>

  To coordinate events, user interaction, scripts, rendering, networking, and so forth, user
  agents must use <dfn>event loops</dfn> as described in this section. There are
  two kinds of event loops: those for <a>browsing contexts</a>, and
  those for <a>workers</a>.

  There must be at least one <a>browsing context</a> <a>event loop</a> per user
  agent, and at most one per <a>unit of related similar-origin browsing contexts</a>.

  <p class="note">
  When there is more than one <a>event loop</a> for a <a>unit of related
  browsing contexts</a>, complications arise when a <a>browsing context</a> in that group
  is <a>navigated</a> such that it switches from one <a>unit of related
  similar-origin browsing contexts</a> to another. This specification does not currently describe
  how to handle these complications.
  </p>

  A <a>browsing context</a> <a>event loop</a> always has at least one <a>browsing
  context</a>. If such an <a>event loop</a>'s <a>browsing
  contexts</a> all go away, then the <a>event loop</a> goes away as well. A <a>browsing
  context</a> always has an <a>event loop</a> coordinating its activities.

  <a>Worker event loops</a> are simpler: each worker has one
  <a>event loop</a>, and the <a>worker processing model</a>
  manages the <a>event loop</a>'s lifetime.

  <hr />

  An <a>event loop</a> has one or more <dfn>task queues</dfn>. A
  <a>task queue</a> is an ordered list of <dfn>tasks</dfn>, which are
  algorithms that are responsible for such work as:

  <dl>

    <dt>Events</dt>

    <dd>

    Dispatching an <code>Event</code> object at a particular
    <code>EventTarget</code> object is often done by a dedicated task.

    <p class="note">
  Not all events are dispatched using the <a>task queue</a>, many are
    dispatched during other tasks.
  </p>

    </dd>

    <dt>Parsing</dt>

    <dd>The <a>HTML parser</a> tokenizing one or more bytes, and then processing any
    resulting tokens, is typically a task.</dd>

    <dt>Callbacks</dt>

    <dd>Calling a callback is often done by a dedicated task.</dd>

    <dt>Using a resource</dt>

    <dd>When an algorithm <a>fetches</a> a resource, if the fetching
    occurs in a non-blocking fashion then the processing of the resource once some or all of the
    resource is available is performed by a task.</dd>

    <dt>Reacting to DOM manipulation</dt>

    <dd>Some elements have tasks that trigger in response to DOM manipulation, e.g. when that
    element is <a>inserted into the document</a>.

  </dl>

  Each <a>task</a> in a <a>browsing context</a> <a>event
  loop</a> is associated with a <code>Document</code>; if the task was queued in the context of
  an element, then it is the element's <a>node document</a>; if the task was queued in the context
  of a <a>browsing context</a>, then it is the <a>browsing context</a>'s <a>active
  document</a> at the time the task was queued; if the task was queued by or for a <a>script</a> then the document is the <a>responsible document</a>
  specified by the script's <a>settings object</a>.

  A <a>task</a> is intended for a specific <a>event loop</a>:
  the <a>event loop</a> that is handling <a>tasks</a> for the
  <a>task</a>'s associated <code>Document</code> or <span
  title="workers">worker</span>.

  When a user agent is to <dfn>queue a task</dfn>, it must add the given task to one of the <a>task queues</a> of the relevant <a>event loop</a>.

  Each <a>task</a> is defined as coming from a specific <dfn>task
  source</dfn>. All the tasks from one particular <a>task source</a> and destined to a
  particular <a>event loop</a> (e.g. the callbacks generated by timers of a
  <code>Document</code>, the events fired for mouse movements over that <code>Document</code>, the
  tasks queued for the parser of that <code>Document</code>) must always be added to the same
  <a>task queue</a>, but <a>tasks</a> from different <a>task sources</a> may be placed in different <a>task
  queues</a>.

  <p class="example">
  For example, a user agent could have one <a>task queue</a> for mouse and
  key events (the <a>user interaction task source</a>), and another for everything else. The
  user agent could then give keyboard and mouse events preference over other tasks three quarters of
  the time, keeping the interface responsive but not starving other task queues, and never
  processing events from any one <a>task source</a> out of order.
  </p>

  Each <a>event loop</a> has a <dfn>currently running task</dfn>. Initially, this is null.
  It is used to handle reentrancy. Each <a>event loop</a> also has a <dfn>performing a
  microtask checkpoint</dfn> flag, which must initially be false. It is used to prevent reentrant
  invocation of the <a>perform a microtask checkpoint</a> algorithm.

  <hr />

  A user agent may have one <dfn>storage mutex</dfn>. This mutex is used to control access to
  shared state like cookies. At any one point, the <a>storage mutex</a> is either free, or
  owned by a particular <a>event loop</a> or instance of the <a>fetching</a> algorithm.

  If a user agent does not implement a <a>storage mutex</a>, it is exempt from implementing
  the requirements that require it to acquire or release it.

  <p class="note">
  User agent implementors have to make a choice between two evils. On the one hand,
  not implementing the storage mutex means that there is a risk of data corruption: a site could,
  for instance, try to read a cookie, increment its value, then write it back out, using the new
  value of the cookie as a unique identifier for the session; if the site does this twice in two
  different browser windows at the same time, it might end up using the same "unique" identifier for
  both sessions, with potentially disastrous effects. On the other hand, implementing the storage
  mutex has potentially serious performance implications: whenever a site uses Web Storage or
  cookies, all other sites that try to use Web Storage or cookies are blocked until the first site
  finishes.
  </p>

  <p class="warning">So far, all browsers faced with this decision have opted to not implement the
  <a>storage mutex</a>.</p>

  Whenever a <a>script</a> calls into a <a>plugin</a>, and
  whenever a <a>plugin</a> calls into a <a>script</a>, the user
  agent must release the <a>storage mutex</a>.

<h5 id="processing-model"><dfn>Processing model</dfn></h5>

  An <a>event loop</a> must continually run through the following steps for as long as it
  exists:

  <ol>

    <li>

    Select the oldest <a>task</a> on one of the <a>event
    loop</a>'s <a>task queues</a>, if any, ignoring, in the case of a
    <a>browsing context</a> <a>event loop</a>, tasks whose associated
    <code>Document</code>s are not <a>fully active</a>. The user agent may pick any <a>task
    queue</a>. If there is no task to select, then jump to the <i>microtasks</i> step below.

    </li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> to the <a>task</a> selected in the previous step.</li>

    <li><i>Run</i>: Run the selected <a>task</a>.</li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> back to
    null.</li>

    <li>If the <a>storage mutex</a> is now owned by the <a>event loop</a>, release it
    so that it is once again free.</li>

    <li>Remove the task that was run in the <i>run</i> step above from its <a>task
    queue</a>.</li>

    <li><i>Microtasks</i>: <a>Perform a microtask checkpoint</a>.</li>

    <li>

    <i>Update the rendering</i>: If this <a>event loop</a> is a <a>browsing
    context</a> <a>event loop</a> (as opposed to a <span title='workers'>worker</span>
    <a>event loop</a>), then run the following substeps.

    <ol>

      <li>Let <var>now</var> be the value that would be returned by the <code>Performance</code>
      object's <code>now()</code> method. [[!HR-TIME-2]]

      <li>

      Let <var>docs</var> be the list of <code>Document</code> objects associated with the
      <a>event loop</a> in question, sorted arbitrarily except that the following conditions
      must be met:

      <ul>

        <li>Any <code>Document</code> <var>B</var> that is <a>nested through</a> a
        <code>Document</code> <var>A</var> must be listed after <var>A</var> in the list.</li>

        <li>If there are two documents <var>A</var> and <var>B</var> whose <a>browsing contexts</a> are both <a>nested
        browsing contexts</a> and their <a>browsing context
        containers</a> are both elements in the same <code>Document</code> <var>C</var>, then the
        order of <var>A</var> and <var>B</var> in the list must match the relative <a>tree
        order</a> of their respective <a>browsing context
        containers</a> in <var>C</var>.</li>

      </ul>

      In the steps below that iterate over <var>docs</var>, each <code>Document</code> must be
      processed in the order it is found in the list.

      </li>

      <li>

      If there is a <a>top-level browsing context</a> <var>B</var> that the user agent
      believes would not benefit from having its rendering updated at this time, then remove from
      <var>docs</var> all <code>Document</code> objects whose <a>browsing context</a>'s
      <a>top-level browsing context</a> is <var>B</var>.

      <p class="note">
  Whether a <a>top-level browsing context</a> would benefit from having
      its rendering updated depends on various factors, such as the update frequency. For example,
      if the browser is attempting to achieve a 60 Hz refresh rate, then these steps are only
      necessary every 60th of a second (about 16.7ms). If the browser finds that a <a>top-level
      browsing context</a> is not able to sustain this rate, it might drop to a more sustainable
      30Hz for that set of <code>Document</code>s, rather than occasionally dropping frames. (This
      specification does not mandate any particular model for when to update the rendering.)
      Similarly, if a <a>top-level browsing context</a> is in the background, the user agent
      might decide to drop that page to a much slower 4Hz, or even less.
  </p>

      </li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run the resize steps</dfn> for
      that <code>Document</code>, passing in <var>now</var> as the timestamp. [[!CSSOM-VIEW]]</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run the scroll steps</dfn> for
      that <code>Document</code>, passing in <var>now</var> as the timestamp. [[!CSSOM-VIEW]]</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>evaluate media queries and
      report changes</dfn> for that <code>Document</code>, passing in <var>now</var> as the
      timestamp. [[!CSSOM-VIEW]]</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run CSS animations and send
      events</dfn> for that <code>Document</code>, passing in <var>now</var> as the timestamp. [[!CSS3-ANIMATIONS]]</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run the fullscreen rendering
      steps</dfn> for that <code>Document</code>, passing in <var>now</var> as the timestamp. [[!FULLSCREEN]]</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <a>run the animation frame
      callbacks</a> for that <code>Document</code>, passing in <var>now</var> as the
      timestamp.</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, update the rendering or user
      interface of that <code>Document</code> and its <a>browsing context</a> to reflect the
      current state.</li>

    </ol>

    </li>

    <li>If this is a <span title='workers'>worker</span> <a>event loop</a> (i.e. one running for a
    <code>WorkerGlobalScope</code>), but there are no <a>tasks</a> in the
    <a>event loop</a>'s <a>task queues</a> and the
    <code>WorkerGlobalScope</code> object's <a>closing</a> flag is true, then destroy the <a>event
    loop</a>, aborting these steps, resuming the <a>run a worker</a> steps described in the
    <span title='workers'>Web Worker</span> section below.</li>

    <li>Return to the <a>first step</a> of the <a>event loop</a>.</li>

  </ol>

  <hr />

  Each <a>event loop</a> has a <dfn>microtask queue</dfn>. A <dfn>microtask</dfn> is a
  <a>task</a> that is originally to be queued on the <a>microtask
  queue</a> rather than a <a>task queue</a>. There are two kinds of <a>microtasks</a>: <dfn>solitary callback
  microtasks</dfn>, and <dfn>compound microtasks</dfn>.

  <p class="note">
  This specification only has <a>solitary
  callback microtasks</a>. Specifications that use <a>compound
  microtasks</a> have to take extra care to <a>wrap callbacks</a> to handle <a>spinning the event
  loop</a>.
  </p>

  When an algorithm requires a <a>microtask</a> to be <dfn>queued</dfn>, it must be appended to the relevant <a>event loop</a>'s
  <a>microtask queue</a>; the <a>task source</a> of such a <a>microtask</a> is the
  <dfn>microtask task source</dfn>.

  <p class="note">
  It is possible for a <a>microtask</a> to be moved to a regular <a>task
  queue</a>, if, during its initial execution, it <a>spins the
  event loop</a>. In that case, the <a>microtask task source</a> is the <a>task
  source</a> used. Normally, the <a>task source</a> of a <a>microtask</a> is
  irrelevant.
  </p>

  When a user agent is to <dfn>perform a microtask checkpoint</dfn>, if the <a>performing a
  microtask checkpoint</a> flag is false, then the user agent must run the following steps:

  <ol>

    <li>Let the <a>performing a microtask checkpoint</a> flag be true.</li>

    <li><i>Microtask queue handling</i>: If the <a>event loop</a>'s <a>microtask
    queue</a> is empty, jump to the <i>done</i> step below.</li>

    <li>Select the oldest <a>microtask</a> on the <a>event loop</a>'s <a>microtask
    queue</a>.</li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> to the <a>task</a> selected in the previous step.</li>

    <li>

    <i>Run</i>: Run the selected <a>task</a>.

    <p class="note">
  This might involve invoking scripted callbacks, which eventually calls the
    <a>clean up after running a callback</a> steps, which call this <a>perform a microtask
    checkpoint</a> algorithm again, which is why we use the <a>performing a microtask
    checkpoint</a> flag to avoid reentrancy.
  </p>

    </li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> back to
    null.</li>

    <li>If the <a>storage mutex</a> is now owned by the <a>event loop</a>, release it
    so that it is once again free.</li>

    <li>Remove the <a>microtask</a> run in the step above from the <a>microtask
    queue</a>, and return to the <i>microtask queue handling</i> step.</li>

    <li><i>Done</i>: Let the <a>performing a microtask checkpoint</a> flag be
    false.</li>

  </ol>

  If, while a <a>compound microtask</a> is running, the user agent is required to
  <dfn>execute a compound microtask subtask</dfn> to run a series of steps, the user agent must run
  the following steps:

  <ol>

    <li>Let <var>parent</var> be the <a>event loop</a>'s <a>currently running
    task</a> (the currently running <a>compound microtask</a>).</li>

    <li>Let <var>subtask</var> be a new <a>task</a> that
    consists of running the given series of steps. The <a>task source</a> of such a
    <a>microtask</a> is the <a>microtask task source</a>. This is a <dfn>compound
    microtask subtask</dfn>.</li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> to <var>subtask</var>.</li>

    <li>Run <var>subtask</var>.</li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> back to <var>parent</var>.</li>

  </ol>

  <hr />

  When an algorithm running <a>in parallel</a> is to <dfn>await a stable state</dfn>, the
  user agent must <a>queue a microtask</a> that runs the following steps, and must then stop
  executing (execution of the algorithm resumes when the microtask is run, as described in the
  following steps):

  <ol>

    <li>Run the algorithm's <dfn>synchronous section</dfn>.</li>

    <li>Resumes execution of the algorithm <a>in parallel</a>, if appropriate, as described
    in the algorithm's steps.</li>

  </ol>

  <p class="note">
  Steps in <a>synchronous sections</a> are marked
  with &#x231B;.
  </p>

  <hr />

  When an algorithm says to <dfn>spin the event loop</dfn> until a condition <var>goal</var> is met, the user agent must run the following steps:

  <ol>

    <li>

    Let <var>task</var> be the <a>event loop</a>'s <a>currently running
    task</a>.

    <p class="note">
  This might be a <a>microtask</a>, in which case it is a <a>solitary
    callback microtask</a>. It could also be a <a>compound microtask subtask</a>, or a
    regular <a>task</a> that is not a <a>microtask</a>. It will
    <em>not</em> be a <a>compound microtask</a>.
  </p>

    </li>

    <li>Let <var>task source</var> be <var>task</var>'s <a>task
    source</a>.</li>

    <li>Let <var>old stack of script settings objects</var> be a copy of the <a>stack
    of script settings objects</a>.</li>

    <li>Empty the <a>stack of script settings objects</a>.</li>

    <li><a>Run the global script clean-up jobs</a>.</li>

    <li><a>Perform a microtask checkpoint</a>.</li>

    <li>

    Stop <var>task</var>, allowing whatever algorithm that invoked it to resume, but
    continue these steps <a>in parallel</a>.

    <p class="note">
  This causes one of the following algorithms to continue: the <a>event
    loop</a>'s main set of steps, the <a>perform a microtask checkpoint</a> algorithm, or
    the <a>execute a compound microtask subtask</a> algorithm to continue.
  </p>

    </li>

    <li>Wait until the condition <var>goal</var> is met.</li>

    <li><a>Queue a task</a> to continue running these steps, using the <a>task
    source</a> <var>task source</var>. Wait until this new task runs before continuing
    these steps.</li>

    <li>Replace the <a>stack of script settings objects</a> with the <var>old
    stack of script settings objects</var>.</li>

    <li>Return to the caller.</li>

  </ol>

  <hr />

  Some of the algorithms in this specification, for historical reasons, require the user agent to
  <dfn>pause</dfn> while running a <a>task</a> until a condition <var>goal</var> is met. This means running the following steps:

  <ol>

    <li>If necessary, update the rendering or user interface of any <code>Document</code> or
    <a>browsing context</a> to reflect the current state.</li>

    <li>Wait until the condition <var>goal</var> is met. While a user agent has a paused
    <a>task</a>, the corresponding <a>event loop</a> must not run
    further <a>tasks</a>, and any script in the currently running <a>task</a> must block. User agents should remain responsive to user input
    while paused, however, albeit in a reduced capacity since the <a>event loop</a> will not be
    doing anything.</li>

  </ol>

  <hr />

  When a user agent is to <dfn>obtain the storage mutex</dfn> as part of running a <a>task</a>, it must run through the following steps:

  <ol>

    <li>If the <a>storage mutex</a> is already owned by this <a>task</a>'s <a>event loop</a>, then abort these steps.</li>

    <li>Otherwise, <a>pause</a> until the <a>storage mutex</a> can be taken by the
    <a>event loop</a>.</li>

    <li>Take ownership of the <a>storage mutex</a>.</li>

  </ol>

  </div>

  <div class="impl">

<h5 id="generic-task-sources"><dfn>Generic task sources</dfn></h5>

  The following <a>task sources</a> are used by a number of mostly
  unrelated features in this and other specifications.

  <dl>

    <dt>The <dfn>DOM manipulation task source</dfn></dt>

    <dd>

    This <a>task source</a> is used for features that react to DOM manipulations, such as
    things that happen in a non-blocking fashion when an element is <a>inserted into the document</a>.

    </dd>

    <dt>The <dfn>user interaction task source</dfn></dt>

    <dd>

    This <a>task source</a> is used for features that react to user interaction, for
    example keyboard or mouse input.

    Events sent in response to user input (e.g. <code>click</code> events) must be fired using <a>tasks</a> <a>queued</a> with the <a>user
    interaction task source</a>. [[!UIEVENTS]]

    </dd>

    <dt>The <dfn>networking task source</dfn></dt>

    <dd>

    This <a>task source</a> is used for features that trigger in response to network
    activity.

    </dd>

    <dt>The <dfn>history traversal task source</dfn></dt>

    <dd>

    This <a>task source</a> is used to queue calls to <code>history.back()</code> and similar APIs.

    </dd>

  </dl>

  </div>

<h4 id="events"><dfn>Events</dfn></h4>

<h5 id="event-handlers"><dfn>Event handlers</dfn></h5>

  Many objects can have <dfn>event handlers</dfn> specified. These act as non-capture event
  listeners for the object on which they are specified. [[!DOM]]

  An <a>event handler</a> has a name, which always starts with
  "<code>on</code>" and is followed by the name of the event for which it is intended.

  An <a>event handler</a> can either have the value null, or be set
  to a callback object<span class="impl">, or be set to an <a>internal raw uncompiled
  handler</a></span>. The <code>EventHandler</code> callback function type describes how this is
  exposed to scripts. <span class="impl">Initially, event handlers must be set to null.</span>

  Event handlers are exposed in one of two ways.

  The first way, common to all event handlers, is as an <a>event handler IDL attribute</a>.

  The second way is as an <a>event handler content
  attribute</a>. Event handlers on <a>HTML elements</a> and some of the event handlers on
  <code>Window</code> objects are exposed in this way.

  <div class="impl">

  <hr />

  An <dfn>event handler IDL attribute</dfn> is an IDL
  attribute for a specific <a>event handler</a>. The name of the IDL
  attribute is the same as the name of the <a>event handler</a>.

  <a>Event handler IDL attributes</a>, on setting, must set the corresponding <a>event handler</a> to their new value, and on getting, must return the
  result of <a>getting the current value of the event handler</a> in question (this can throw
  an exception, in which case the getting propagates it to the caller, it does not catch it).

  If an <a>event handler IDL attribute</a> exposes an
  <a>event handler</a> of an object that doesn't exist, it must always
  return null on getting and must do nothing on setting.

  <p class="note">
  This can happen in particular for <a>event
  handler IDL attribute</a> on <code>body</code> elements that do not have corresponding
  <code>Window</code> objects.
  </p>

  <p class="note">
  Certain event handler IDL attributes have additional requirements, in particular
  the <code>onmessage</code> attribute of
  <code>MessagePort</code> objects.
  </p>

  <hr />

  </div>

  An <dfn>event handler content attribute</dfn> is a
  content attribute for a specific <a>event handler</a>. The name of
  the content attribute is the same as the name of the <a>event
  handler</a>.

  <a>Event handler content attributes</a>, when specified, must contain valid JavaScript
  code which, when parsed, would match the <code>FunctionBody</code> production after
  automatic semicolon insertion. [[!ECMA-262]]

  <div class="impl">

  When an <a>event handler content attribute</a>
  is set, the user agent must set the corresponding <a>event
  handler</a> to an <a>internal raw uncompiled handler</a> consisting of the attribute's
  new value and the script location where the attribute was set to this value

  When an event handler content attribute is removed, the user agent must set the corresponding
  <a>event handler</a> to null.

  <hr />

  When an <a>event handler</a> <var>H</var> of an element
  or object <var>T</var> implementing the <code>EventTarget</code> interface is first set
  to a non-null value, the user agent must append an <a>event
  listener</a> to the list of <a>event listeners</a>
  associated with <var>T</var> with <i>type</i> set to the <dfn>event handler event
  type</dfn> corresponding to <var>H</var>, <i>capture</i> set to false, and
  <i>listener</i> set to <a>the event handler processing algorithm</a> defined below. [[!DOM]]

  <p class="note">
  The <i>listener</i> is emphatically <em>not</em> the <a>event handler</a> itself. Every event handler ends up registering the same
  <i>listener</i>, the algorithm defined below, which takes care of invoking the right callback, and
  processing the callback's return value.
  </p>

  <p class="note">
  This only happens the first time the <a>event
  handler</a>'s value is set. Since listeners are called in the order they were registered, the
  order of event listeners for a particular event type will always be first the event listeners
  registered with <code>addEventListener()</code> before
  the first time the <a>event handler</a> was set to a non-null value,
  then the callback to which it is currently set, if any, and finally the event listeners registered
  with <code>addEventListener()</code> <em>after</em> the
  first time the <a>event handler</a> was set to a non-null value.
  </p>

  </div>

  <div class="example">
    This example demonstrates the order in which event listeners are invoked. If the button in
    this example is clicked by the user, the page will show four alerts, with the text "ONE", "TWO",
    "THREE", and "FOUR" respectively.

    <pre highlight="html">
  &lt;button>Start Demo&lt;/button>
  &lt;script>
  var button = document.getElementById('test');
  button.addEventListener('click', function () { alert('ONE') }, false);
  button.setAttribute('onclick', "alert('NOT CALLED')"); // event handler listener is registered here
  button.addEventListener('click', function () { alert('THREE') }, false);
  button.onclick = function () { alert('TWO'); };
  button.addEventListener('click', function () { alert('FOUR') }, false);
  &lt;/script>
  </pre>
  </div>

  <div class="impl">

  <p class="note">
  The interfaces implemented by the event object do not influence whether an <a>event handler</a> is triggered or not.
  </p>

  <dfn>The event handler processing algorithm</dfn> for an <a>event
  handler</a> <var>H</var> and an <code>Event</code> object <var>E</var> is as
  follows:

  <ol>

    <li>

    Let <var>callback</var> be the result of <a>getting the current value of the
    event handler</a> <var>H</var>.

    </li>

    <li>If <var>callback</var> is null, then abort these steps.</li>

    <li>

    Process the <code>Event</code> object <var>E</var> as follows:

    <dl class="switch">

      <dt>If <var>E</var> is an <code>ErrorEvent</code> object and the <a>event handler IDL attribute</a>'s type is
      <code>OnErrorEventHandler</code></dt>

      <dd>

      <a>Invoke</a> <var>callback</var> with five
      arguments, the first one having the value of <var>E</var>'s <code>message</code> attribute, the second having the value of
      <var>E</var>'s <code>filename</code> attribute, the third
      having the value of <var>E</var>'s <code>lineno</code>
      attribute, the fourth having the value of <var>E</var>'s <code>colno</code> attribute, the fifth having the value of
      <var>E</var>'s <code>error</code> attribute, and with the <i>callback this value</i> set to <var>E</var>'s <code>currentTarget</code>. Let <var>return value</var> be the
      callback's return value. [[!WEBIDL]]

      </dd>

      <dt>Otherwise</dt>

      <dd>

      <a>Invoke</a> <var>callback</var>
      with one argument, the value of which is the <code>Event</code> object <var>E</var>,
      with the <i>callback this value</i> set to <var>E</var>'s <code>currentTarget</code>. Let <var>return value</var> be the callback's return value. [[!WEBIDL]]

      </dd>

    </dl>

    In this step, <dfn>invoke</dfn> means to <a>invoke the Web IDL callback function</a>.

    If an exception gets thrown by the callback, end these steps and allow the exception to
    propagate. (It will propagate to the <a>DOM event dispatch
    logic</a>, which will then <a>report the exception</a>.)

    </li>

    <li>

    Process <var>return value</var> as follows:

    <dl class="switch">

      <dt>If the event type is <code>mouseover</code></dt>
      <dt>If the event type is <code>error</code> and <var>E</var> is an <code>ErrorEvent</code> object</dt>

      <dd>If <var>return value</var> is a Web IDL boolean true value, then cancel the event.</dd>

      <dt>If the event type is <code>beforeunload</code></dt>

      <dd>

      <p class="note">
  The <a>event handler IDL
      attribute</a>'s type is <code>OnBeforeUnloadEventHandler</code>, and the <var>return value</var> will therefore have been coerced into either the value null or a
      DOMString.
  </p>

      If the <var>return value</var> is null, then cancel the event.

      Otherwise, If the <code>Event</code> object <var>E</var> is a
      <code>BeforeUnloadEvent</code> object, and the <code>Event</code> object <var>E</var>'s <code>returnValue</code>
      attribute's value is the empty string, then set the <code>returnValue</code> attribute's value to <var>return value</var>.

      </dd>

      <dt>Otherwise</dt>

      <dd>If <var>return value</var> is a Web IDL boolean false value, then cancel the
      event.</dd>

    </dl>

    </li>

  </ol>

  </div>

  <hr />

  The <code>EventHandler</code> callback function type represents a callback used for event
  handlers. It is represented in Web IDL as follows:

  <pre class="idl" data-highlight="webidl">
  [TreatNonObjectAsNull]
  callback <dfn>EventHandlerNonNull</dfn> = any (<a>Event</a> event);
  typedef <a>EventHandlerNonNull</a>? <dfn>EventHandler</dfn>;
  </pre>

  <p class="note">
  In JavaScript, any <code>Function</code> object implements
  this interface.
  </p>

  <div class="example">
    For example, the following document fragment:

    <pre highlight="javascript">&lt;body onload="alert(this)" onclick="alert(this)"></pre>

    ...leads to an alert saying "<code>[object&nbsp;Window]</code>" when the document is
    loaded, and an alert saying "<code>[object&nbsp;HTMLBodyElement]</code>" whenever the
    user clicks something in the page.
  </div>

  <p class="note">
  The return value of the function affects whether the event is canceled or not:
  <span class="impl">as described above,</span> if the return value is false, the event is canceled
  (except for <code>mouseover</code> events, where the return value has to
  be true to cancel the event). With <code>beforeunload</code> events,
  the value is instead used to determine the message to show the user.
  </p>

  For historical reasons, the <code>onerror</code> handler has different
  arguments:

  <pre class="idl" data-highlight="webidl">
  [TreatNonObjectAsNull]
  callback <dfn>OnErrorEventHandlerNonNull</dfn> = any ((<a>Event</a> or DOMString) event, optional DOMString source, optional unsigned long lineno, optional unsigned long column, optional any error);
  typedef <a>OnErrorEventHandlerNonNull</a>? <dfn>OnErrorEventHandler</dfn>;
  </pre>

  Similarly, the <code>onbeforeunload</code> handler has a
  different return value:

  <pre class="idl" data-highlight="webidl">
  [TreatNonObjectAsNull]
  callback <dfn>OnBeforeUnloadEventHandlerNonNull</dfn> = DOMString? (<a>Event</a> event);
  typedef <a>OnBeforeUnloadEventHandlerNonNull</a>? <dfn>OnBeforeUnloadEventHandler</dfn>;
  </pre>

  <div class="impl">

  <hr />

  An <dfn>internal raw uncompiled handler</dfn> is a tuple with the following information:

  <ul class="brief">

    <li>An uncompiled script body

    <li>A location where the script body originated, in case an error needs to be reported

  </ul>

  When the user agent is to <dfn>get the
  current value of the event handler</dfn> <var>H</var>, it must run these steps:

  <ol>

    <li>

    If <var>H</var>'s value is an <a>internal raw uncompiled handler</a>, run these
    substeps:

    <ol>

      <li>

      If <var>H</var> is an element's <a>event
      handler</a>, then let <var>element</var> be the element, and <var>document</var> be the element's <a>node document</a>.

      Otherwise, <var>H</var> is a <code>Window</code> object's <a>event handler</a>: let <var>element</var> be null, and let <var>document</var> be the <code>Document</code> most recently associated with that
      <code>Window</code> object.

      </li>

      <li>If  <var>document</var> is
      not in a <a>browsing context</a>, or if <a>scripting is
      enabled</a> for <var>document</var>'s <a>browsing context</a>, then return
      null and abort the algorithm for <a>getting the current value of the event
      handler</a>.</li>

      <li>Let <var>body</var> be the uncompiled script body in the <a>internal raw
      uncompiled handler</a>.</li>

      <li>Let <var>location</var> be the location where the script body originated, as
      given by the <a>internal raw uncompiled handler</a>.</li>

      <li>If <var>element</var> is not null and <var>element</var> has a
      <a>form owner</a>, let <var>form owner</var> be that <a>form owner</a>.
      Otherwise, let <var>form owner</var> be null.</li>

      <li>Let <var>script settings</var> be the <a>environment settings object</a>
      created for the <code>Window</code> object with which <var>document</var> is
      currently associated.</li>

      <li>Obtain the <a>script execution environment</a> for JavaScript from <var>script settings</var>.</li>

      <li>

      If <var>body</var> is not parsable as <i>FunctionBody</i> or if parsing detects
      an <i>early error</i>, then follow these substeps:

      <ol>

        <li>Set <var>H</var>'s value to null.</li>

        <li><a>Report the error</a> for the appropriate <a>script</a> and with the appropriate position (line number and
        column number) given by <var>location</var>, using the <a>global object</a>
        specified by <var>script settings</var> as the target. If the error is still <i>not handled</i> after this, then the error may be reported
        to the user.</li>

        <li>Jump to the step labeled <i>end</i> below.</li>

      </ol>

      <p class="note">
  <i>FunctionBody</i> is defined in ECMAScript edition 5 section 13 Function
      Definition. <i>Early error</i> is defined in ECMAScript edition 5 section 16 Errors. [[!ECMA-262]]
  </p>

      </li>

      <li>

      If <var>body</var> begins with a Directive Prolog that contains a Use Strict
      Directive then let <var>strict</var> be true, otherwise let <var>strict</var> be false.

      <p class="note">
  The terms "Directive Prolog" and "Use Strict Directive" are defined in
      ECMAScript edition 5 section 14.1 Directive Prologs and the Use Strict Directive. [[!ECMA-262]]
  </p>

      </li>

      <li>

      Using the <a>script execution environment</a> obtained above, create a function
      object (as defined in ECMAScript edition 5 section 13.2 Creating Function Objects), with:

      <dl>

        <dt>Parameter list <var>FormalParameterList</var></dt>

        <dd>

        <dl class="switch">

          <dt>If <var>H</var> is an <code>onerror</code> <a>event handler</a> of a <code>Window</code> object</dt>

          <dd>Let the function have five arguments, named <code>event</code>, <code>source</code>, <code>lineno</code>, <code>colno</code>, and
          <code>error</code>.</dd>

          <dt>Otherwise</dt>

          <dd>Let the function have a single argument called <code>event</code>.</dd>

        </dl>

        </dd>

        <dt>Function body <var>FunctionBody</var></dt>

        <dd>The result of parsing <var>body</var> above.</dd>

        <dt>Lexical Environment <var>Scope</var></dt>

        <dd>

        <ol>

          <li>

          If <var>H</var> is an element's <a>event
          handler</a>, then let <var>Scope</var> be the result of
          NewObjectEnvironment(<var>document</var>, the <var>global
          environment</var>).

          Otherwise, <var>H</var> is a <code>Window</code> object's <a>event handler</a>: let <var>Scope</var> be the <var>global environment</var>.

          </li>

          <li>If <var>form owner</var> is not null, let <var>Scope</var> be
          the result of NewObjectEnvironment(<var>form owner</var>, <var>Scope</var>).</li>

          <li>If <var>element</var> is not null, let <var>Scope</var> be the
          result of NewObjectEnvironment(<var>element</var>, <var>Scope</var>).</li>

        </ol>

        <p class="note">
  NewObjectEnvironment() is defined in ECMAScript edition 5 section 10.2.2.3
        NewObjectEnvironment (O, E). [[!ECMA-262]]
  </p>

        </dd>

        <dt>Boolean flag <var>Strict</var></dt>

        <dd>The value of <var>strict</var>.</dd>

      </dl>

      Let <var>function</var> be this new function.

      </li>

      <li>Let <var>script</var> be a new <a>script</a>.</li>

      <li>Let <var>script</var>'s <a>code entry-point</a> be <var>function</var>.</li>

      <li>Let <var>script</var>'s <a>settings object</a> be <var>script
      settings</var>.</li>

      <li>Set <var>H</var> to <var>function</var>.</li>

    </ol>

    </li>

    <li><i>End</i>: Return <var>H</var>'s value.</li>

  </ol>

  </div>

<h5 id="event-handlers-on-elements-document-objects-and-window-objects"><dfn>Event handlers on elements, <code>Document</code> objects, and <code>Window</code> objects</dfn></h5>

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported by all <a>HTML elements</a>, as both <a>event handler content attributes</a>
  and <a>event handler IDL attributes</a>; and <span class="impl">that must be</span>
  supported by all <code>Document</code> and <code>Window</code> objects, as <a>event handler IDL
  attributes</a>:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn><code>onabort</code></dfn> <td> <code>abort</code>
    <tr><td><dfn><code>onautocomplete</code></dfn> <td> <code>autocomplete</code>
    <tr><td><dfn><code>onautocompleteerror</code></dfn> <td> <code>autocompleteerror</code>
    <tr><td><dfn><code>oncancel</code></dfn> <td> <code>cancel</code>
    <tr><td><dfn><code>oncanplay</code></dfn> <td> <code>canplay</code>
    <tr><td><dfn><code>oncanplaythrough</code></dfn> <td> <code>canplaythrough</code>
    <tr><td><dfn><code>onchange</code></dfn> <td> <code>change</code>
    <tr><td><dfn><code>onclick</code></dfn> <td> <code>click</code>
    <tr><td><dfn><code>onclose</code></dfn> <td> <code>close</code>
    <tr><td><dfn><code>oncontextmenu</code></dfn> <td> <code>contextmenu</code>
    <tr><td><dfn><code>oncuechange</code></dfn> <td> <code>cuechange</code>
    <tr><td><dfn><code>ondblclick</code></dfn> <td> <code>dblclick</code>
    <tr><td><dfn><code>ondrag</code></dfn> <td> <code>drag</code>
    <tr><td><dfn><code>ondragend</code></dfn> <td> <code>dragend</code>
    <tr><td><dfn><code>ondragenter</code></dfn> <td> <code>dragenter</code>
    <tr><td><dfn><code>ondragexit</code></dfn> <td> <code>dragexit</code>
    <tr><td><dfn><code>ondragleave</code></dfn> <td> <code>dragleave</code>
    <tr><td><dfn><code>ondragover</code></dfn> <td> <code>dragover</code>
    <tr><td><dfn><code>ondragstart</code></dfn> <td> <code>dragstart</code>
    <tr><td><dfn><code>ondrop</code></dfn> <td> <code>drop</code>
    <tr><td><dfn><code>ondurationchange</code></dfn> <td> <code>durationchange</code>
    <tr><td><dfn><code>onemptied</code></dfn> <td> <code>emptied</code>
    <tr><td><dfn><code>onended</code></dfn> <td> <code>ended</code>
    <tr><td><dfn><code>oninput</code></dfn> <td> <code>input</code>
    <tr><td><dfn><code>oninvalid</code></dfn> <td> <code>invalid</code>
    <tr><td><dfn><code>onkeydown</code></dfn> <td> <code>keydown</code>
    <tr><td><dfn><code>onkeypress</code></dfn> <td> <code>keypress</code>
    <tr><td><dfn><code>onkeyup</code></dfn> <td> <code>keyup</code>
    <tr><td><dfn><code>onloadeddata</code></dfn> <td> <code>loadeddata</code>
    <tr><td><dfn><code>onloadedmetadata</code></dfn> <td> <code>loadedmetadata</code>
    <tr><td><dfn><code>onloadstart</code></dfn> <td> <code>loadstart</code>
    <tr><td><dfn><code>onmousedown</code></dfn> <td> <code>mousedown</code>
    <tr><td><dfn><code>onmouseenter</code></dfn> <td> <code>mouseenter</code>
    <tr><td><dfn><code>onmouseleave</code></dfn> <td> <code>mouseleave</code>
    <tr><td><dfn><code>onmousemove</code></dfn> <td> <code>mousemove</code>
    <tr><td><dfn><code>onmouseout</code></dfn> <td> <code>mouseout</code>
    <tr><td><dfn><code>onmouseover</code></dfn> <td> <code>mouseover</code>
    <tr><td><dfn><code>onmouseup</code></dfn> <td> <code>mouseup</code>
    <tr><td><dfn><code>onmousewheel</code></dfn> <td> <code>mousewheel</code>
    <tr><td><dfn><code>onpause</code></dfn> <td> <code>pause</code>
    <tr><td><dfn><code>onplay</code></dfn> <td> <code>play</code>
    <tr><td><dfn><code>onplaying</code></dfn> <td> <code>playing</code>
    <tr><td><dfn><code>onprogress</code></dfn> <td> <code>progress</code>
    <tr><td><dfn><code>onratechange</code></dfn> <td> <code>ratechange</code>
    <tr><td><dfn><code>onreset</code></dfn> <td> <code>reset</code>
    <tr><td><dfn><code>onseeked</code></dfn> <td> <code>seeked</code>
    <tr><td><dfn><code>onseeking</code></dfn> <td> <code>seeking</code>
    <tr><td><dfn><code>onselect</code></dfn> <td> <code>select</code>
    <tr><td><dfn><code>onshow</code></dfn> <td> <code>show</code>
    <tr><td><dfn><code>onsort</code></dfn> <td> <code>sort</code>
    <tr><td><dfn><code>onstalled</code></dfn> <td> <code>stalled</code>
    <tr><td><dfn><code>onsubmit</code></dfn> <td> <code>submit</code>
    <tr><td><dfn><code>onsuspend</code></dfn> <td> <code>suspend</code>
    <tr><td><dfn><code>ontimeupdate</code></dfn> <td> <code>timeupdate</code>
    <tr><td><dfn><code>ontoggle</code></dfn> <td> <code>toggle</code>
    <tr><td><dfn><code>onvolumechange</code></dfn> <td> <code>volumechange</code>
    <tr><td><dfn><code>onwaiting</code></dfn> <td> <code>waiting</code>

  </table>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported by all <a>HTML elements</a> other than <code>body</code> and <code>frameset</code>
  elements, as both <a>event handler content attributes</a> and <a>event handler IDL
  attributes</a>; <span class="impl">that must be</span> supported by all <code>Document</code>
  objects, as <a>event handler IDL attributes</a>; and <span class="impl">that must be</span>
  supported by all <code>Window</code> objects, as <a>event handler IDL attributes</a> on the
  <code>Window</code> objects themselves, and with corresponding <a>event handler content
  attributes</a> and <a>event handler IDL attributes</a> exposed on all <code>body</code>
  and <code>frameset</code> elements that are owned by <a>that
  <code>Window</code> object's <code>Document</code>s</a>:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn><code>onblur</code></dfn> <td> <code>blur</code>
    <tr><td><dfn><code>onerror</code></dfn> <td> <code>error</code>
    <tr><td><dfn><code>onfocus</code></dfn> <td> <code>focus</code>
    <tr><td><dfn><code>onload</code></dfn> <td> <code>load</code>
    <tr><td><dfn><code>onresize</code></dfn> <td> <code>resize</code>
    <tr><td><dfn><code>onscroll</code></dfn> <td> <code>scroll</code>
  </table>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported by <code>Window</code> objects, as <a>event handler IDL attributes</a> on the
  <code>Window</code> objects themselves, and with corresponding <a>event handler content
  attributes</a> and <a>event handler IDL attributes</a> exposed on all <code>body</code>
  and <code>frameset</code> elements that are owned by <a>that
  <code>Window</code> object's <code>Document</code>s</a>:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn><code>onafterprint</code></dfn> <td> <code>afterprint</code>
    <tr><td><dfn><code>onbeforeprint</code></dfn> <td> <code>beforeprint</code>
    <tr><td><dfn><code>onbeforeunload</code></dfn> <td> <code>beforeunload</code>
    <tr><td><dfn><code>onhashchange</code></dfn> <td> <code>hashchange</code>
    <tr><td><dfn><code>onlanguagechange</code></dfn> <td> <code>languagechange</code>
    <tr><td><dfn><code>onmessage</code></dfn> <td> <code>message</code>
    <tr><td><dfn><code>onoffline</code></dfn> <td> <code>offline</code>
    <tr><td><dfn><code>ononline</code></dfn> <td> <code>online</code>
    <tr><td><dfn><code>onpagehide</code></dfn> <td> <code>pagehide</code>
    <tr><td><dfn><code>onpageshow</code></dfn> <td> <code>pageshow</code>
    <tr><td><dfn><code>onpopstate</code></dfn> <td> <code>popstate</code>
    <tr><td><dfn><code>onstorage</code></dfn> <td> <code>storage</code>
    <tr><td><dfn><code>onunload</code></dfn> <td> <code>unload</code>
  </table>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported on <code>Document</code> objects as <a>event handler IDL attributes</a>:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn><code>onreadystatechange</code></dfn> <td> <code>readystatechange</code>
  </table>

<h6 id="idl-definitions"><dfn>IDL definitions</dfn></h6>

  <pre class="idl" data-highlight="webidl">
    [NoInterfaceObject]
    interface <dfn>GlobalEventHandlers</dfn> {
      attribute <a>EventHandler</a> <a>onabort</a>;
      attribute <a>EventHandler</a> <a>onautocomplete</a>;
      attribute <a>EventHandler</a> <a>onautocompleteerror</a>;
      attribute <a>EventHandler</a> <a>onblur</a>;
      attribute <a>EventHandler</a> <a>oncancel</a>;
      attribute <a>EventHandler</a> <a>oncanplay</a>;
      attribute <a>EventHandler</a> <a>oncanplaythrough</a>;
      attribute <a>EventHandler</a> <a>onchange</a>;
      attribute <a>EventHandler</a> <a>onclick</a>;
      attribute <a>EventHandler</a> <a>onclose</a>;
      attribute <a>EventHandler</a> <a>oncontextmenu</a>;
      attribute <a>EventHandler</a> <a>oncuechange</a>;
      attribute <a>EventHandler</a> <a>ondblclick</a>;
      attribute <a>EventHandler</a> <a>ondrag</a>;
      attribute <a>EventHandler</a> <a>ondragend</a>;
      attribute <a>EventHandler</a> <a>ondragenter</a>;
      attribute <a>EventHandler</a> <a>ondragexit</a>;
      attribute <a>EventHandler</a> <a>ondragleave</a>;
      attribute <a>EventHandler</a> <a>ondragover</a>;
      attribute <a>EventHandler</a> <a>ondragstart</a>;
      attribute <a>EventHandler</a> <a>ondrop</a>;
      attribute <a>EventHandler</a> <a>ondurationchange</a>;
      attribute <a>EventHandler</a> <a>onemptied</a>;
      attribute <a>EventHandler</a> <a>onended</a>;
      attribute <a>OnErrorEventHandler</a> <a>onerror</a>;
      attribute <a>EventHandler</a> <a>onfocus</a>;
      attribute <a>EventHandler</a> <a>oninput</a>;
      attribute <a>EventHandler</a> <a>oninvalid</a>;
      attribute <a>EventHandler</a> <a>onkeydown</a>;
      attribute <a>EventHandler</a> <a>onkeypress</a>;
      attribute <a>EventHandler</a> <a>onkeyup</a>;
      attribute <a>EventHandler</a> <a>onload</a>;
      attribute <a>EventHandler</a> <a>onloadeddata</a>;
      attribute <a>EventHandler</a> <a>onloadedmetadata</a>;
      attribute <a>EventHandler</a> <a>onloadstart</a>;
      attribute <a>EventHandler</a> <a>onmousedown</a>;
      [LenientThis] attribute <a>EventHandler</a> <a>onmouseenter</a>;
      [LenientThis] attribute <a>EventHandler</a> <a>onmouseleave</a>;
      attribute <a>EventHandler</a> <a>onmousemove</a>;
      attribute <a>EventHandler</a> <a>onmouseout</a>;
      attribute <a>EventHandler</a> <a>onmouseover</a>;
      attribute <a>EventHandler</a> <a>onmouseup</a>;
      attribute <a>EventHandler</a> <a>onmousewheel</a>;
      attribute <a>EventHandler</a> <a>onpause</a>;
      attribute <a>EventHandler</a> <a>onplay</a>;
      attribute <a>EventHandler</a> <a>onplaying</a>;
      attribute <a>EventHandler</a> <a>onprogress</a>;
      attribute <a>EventHandler</a> <a>onratechange</a>;
      attribute <a>EventHandler</a> <a>onreset</a>;
      attribute <a>EventHandler</a> <a>onresize</a>;
      attribute <a>EventHandler</a> <a>onscroll</a>;
      attribute <a>EventHandler</a> <a>onseeked</a>;
      attribute <a>EventHandler</a> <a>onseeking</a>;
      attribute <a>EventHandler</a> <a>onselect</a>;
      attribute <a>EventHandler</a> <a>onshow</a>;
      attribute <a>EventHandler</a> <a>onsort</a>;
      attribute <a>EventHandler</a> <a>onstalled</a>;
      attribute <a>EventHandler</a> <a>onsubmit</a>;
      attribute <a>EventHandler</a> <a>onsuspend</a>;
      attribute <a>EventHandler</a> <a>ontimeupdate</a>;
      attribute <a>EventHandler</a> <a>ontoggle</a>;
      attribute <a>EventHandler</a> <a>onvolumechange</a>;
      attribute <a>EventHandler</a> <a>onwaiting</a>;
    };

    [NoInterfaceObject]
    interface <dfn>WindowEventHandlers</dfn> {
      attribute <a>EventHandler</a> <a>onafterprint</a>;
      attribute <a>EventHandler</a> <a>onbeforeprint</a>;
      attribute <a>OnBeforeUnloadEventHandler</a> <a>onbeforeunload</a>;
      attribute <a>EventHandler</a> <a>onhashchange</a>;
      attribute <a>EventHandler</a> <a>onlanguagechange</a>;
      attribute <a>EventHandler</a> <a>onmessage</a>;
      attribute <a>EventHandler</a> <a>onoffline</a>;
      attribute <a>EventHandler</a> <a>ononline</a>;
      attribute <a>EventHandler</a> <a>onpagehide</a>;
      attribute <a>EventHandler</a> <a>onpageshow</a>;
      attribute <a>EventHandler</a> <a>onpopstate</a>;
      attribute <a>EventHandler</a> <a>onstorage</a>;
      attribute <a>EventHandler</a> <a>onunload</a>;
    };
  </pre>

  <div class="impl">

<h5 id="event-firing"><dfn>Event firing</dfn></h5>

  Certain operations and methods are defined as firing events on elements. For example, the <code>click()</code> method on the <code>HTMLElement</code> interface is defined as
  firing a <code>click</code> event on the element. [[!UIEVENTS]]

  <dfn>Firing a simple event named <var>e</var></dfn>
  means that a <a>trusted</a> event with the name <var>e</var>, which does not bubble (except where otherwise stated) and is not cancelable
  (except where otherwise stated), and which uses the <code>Event</code> interface, must be created
  and <a>dispatched</a> at the given target.

  <dfn>Firing a synthetic mouse event named <var>e</var></dfn> means that an event with the name <var>e</var>, which is <a>trusted</a> (except where otherwise stated), does not bubble
  (except where otherwise stated), is not cancelable (except where otherwise stated), and which uses
  the <code>MouseEvent</code> interface, must be created and dispatched at the given target. The
  event object must have its <code>screenX</code>, <code>screenY</code>, <code>clientX</code>, <code>clientY</code>, and <code>button</code>
  attributes initialized to 0, its <code>ctrlKey</code>, <code>shiftKey</code>,
  <code>altKey</code>, and <code>metaKey</code> attributes initialized according
  to the current state of the key input device, if any (false for any keys that are not available),
  its <code>detail</code> attribute initialized to 1, its <code>relatedTarget</code> attribute initialized to null (except
  where otherwise stated), and its <code>view</code> attribute initialized to the <code>Window</code> object of the <code>Document</code> object of the given target node, if any, or else null. The <code>getModifierState()</code> method on the object must
  return values appropriately describing the state of the key input device at the time the event is
  created.

  <dfn>Firing a <code>click</code> event</dfn>
  means <a>firing a synthetic mouse event named <code>click</code></a>, which bubbles and is cancelable.

  The default action of these events is to do nothing except where otherwise stated.

  </div>

  <div class="impl">

<h5 id="events-and-the-window-object"><dfn>Events and the <code>Window</code> object</dfn></h5>

  When an event is dispatched at a DOM node in a <code>Document</code> in a <a>browsing
  context</a>, if the event is not a <code>load</code> event, the user agent
  must act as if, for the purposes of <a>event dispatching</a>,
  the <code>Window</code> object is the parent of the <code>Document</code> object. [[!DOM]]

  </div>

<h3 id="base64-utility-methods"><dfn>Base64 utility methods</dfn></h3>

  The <code>atob()</code> and <code>btoa()</code> methods allow authors to transform content to and from
  the base64 encoding.

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject, Exposed=(Window, Worker)]
  interface <dfn>WindowBase64</dfn> {
  DOMString <a>btoa</a>(DOMString btoa);
  DOMString <a>atob</a>(DOMString atob);
  };
  <a>Window</a> implements <a>WindowBase64</a>;
  <a>WorkerGlobalScope</a> implements <a>WindowBase64</a>;
  </pre>

  <p class="note">
  In these APIs, for mnemonic purposes, the "b" can be considered to stand for
  "binary", and the "a" for "ASCII". In practice, though, for primarily historical reasons, both the
  input and output of these functions are Unicode strings.
  </p>

  <dl class="domintro">

    <dt><var>result</var> = <var>window</var> . <code>btoa</code>( <var>data</var> )</dt>

    <dd>

    Takes the input data, in the form of a Unicode string containing only characters in the range
    U+0000 to U+00FF, each representing a binary byte with values 0x00 to 0xFF respectively, and
    converts it to its base64 representation, which it returns.

    Throws an <code>InvalidCharacterError</code> exception if the input string contains any
    out-of-range characters.

    </dd>

    <dt><var>result</var> = <var>window</var> . <code>atob</code>( <var>data</var> )</dt>

    <dd>

    Takes the input data, in the form of a Unicode string containing base64-encoded binary data,
    decodes it, and returns a string consisting of characters in the range U+0000 to U+00FF, each
    representing a binary byte with values 0x00 to 0xFF respectively, corresponding to that binary
    data.

    Throws an <code>InvalidCharacterError</code> exception if the input string is not valid
    base64 data.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>btoa()</code></dfn> method must throw an
  <code>InvalidCharacterError</code> exception if the method's first argument contains any character
  whose code point is greater than U+00FF. Otherwise, the user agent must convert that argument to a
  sequence of octets whose <var>n</var>th octet is the eight-bit representation of the code
  point of the <var>n</var>th character of the argument, and then must apply the base64
  algorithm to that sequence of octets, and return the result. [[!RFC4648]]

  The <dfn><code>atob()</code></dfn> method must run the following
  steps to parse the string passed in the method's first argument:

  <ol>

    <li>Let <var>input</var> be the string being parsed.</li>

    <li>Let <var>position</var> be a pointer into <var>input</var>, initially
    pointing at the start of the string.</li>

    <li>Remove all <a>space characters</a> from <var>input</var>.</li>

    <li>If the length of <var>input</var> divides by 4 leaving no remainder, then: if
    <var>input</var> ends with one or two U+003D EQUALS SIGN (=) characters, remove them
    from <var>input</var>.</li>

    <li>If the length of <var>input</var> divides by 4 leaving a remainder of 1, throw an
    <code>InvalidCharacterError</code> exception and abort these steps.

    <li>

    If <var>input</var> contains a character that is not in the following list of
    characters and character ranges, throw an <code>InvalidCharacterError</code> exception and abort
    these steps:

    <ul class="brief">
      <li>U+002B PLUS SIGN (+)
      <li>U+002F SOLIDUS (/)
      <li><a>Alphanumeric ASCII characters</a>
    </ul>

    </li>

    <li>Let <var>output</var> be a string, initially empty.</li>

    <li>Let <var>buffer</var> be a buffer that can have bits appended to it, initially
    empty.</li>

    <li>

    While <var>position</var> does not point past the end of <var>input</var>,
    run these substeps:

    <ol>

      <li>

      Find the character pointed to by <var>position</var> in the first column of the
      following table. Let <var>n</var> be the number given in the second cell of the same
      row.

      <div>
        <table>
        <thead>
          <tr>
          <th>Character
          <th>Number
        <tbody>
          <tr><td>A<td>0
          <tr><td>B<td>1
          <tr><td>C<td>2
          <tr><td>D<td>3
          <tr><td>E<td>4
          <tr><td>F<td>5
          <tr><td>G<td>6
          <tr><td>H<td>7
          <tr><td>I<td>8
          <tr><td>J<td>9
          <tr><td>K<td>10
          <tr><td>L<td>11
          <tr><td>M<td>12
          <tr><td>N<td>13
          <tr><td>O<td>14
          <tr><td>P<td>15
          <tr><td>Q<td>16
          <tr><td>R<td>17
          <tr><td>S<td>18
          <tr><td>T<td>19
          <tr><td>U<td>20
          <tr><td>V<td>21
          <tr><td>W<td>22
          <tr><td>X<td>23
          <tr><td>Y<td>24
          <tr><td>Z<td>25
          <tr><td>a<td>26
          <tr><td>b<td>27
          <tr><td>c<td>28
          <tr><td>d<td>29
          <tr><td>e<td>30
          <tr><td>f<td>31
          <tr><td>g<td>32
          <tr><td>h<td>33
          <tr><td>i<td>34
          <tr><td>j<td>35
          <tr><td>k<td>36
          <tr><td>l<td>37
          <tr><td>m<td>38
          <tr><td>n<td>39
          <tr><td>o<td>40
          <tr><td>p<td>41
          <tr><td>q<td>42
          <tr><td>r<td>43
          <tr><td>s<td>44
          <tr><td>t<td>45
          <tr><td>u<td>46
          <tr><td>v<td>47
          <tr><td>w<td>48
          <tr><td>x<td>49
          <tr><td>y<td>50
          <tr><td>z<td>51
          <tr><td>0<td>52
          <tr><td>1<td>53
          <tr><td>2<td>54
          <tr><td>3<td>55
          <tr><td>4<td>56
          <tr><td>5<td>57
          <tr><td>6<td>58
          <tr><td>7<td>59
          <tr><td>8<td>60
          <tr><td>9<td>61
          <tr><td>+<td>62
          <tr><td>/<td>63
        </table>
      </div>

      </li>

      <li>Append to <var>buffer</var> the six bits corresponding to <var>number</var>, most significant bit first.</li>

      <li>If <var>buffer</var> has accumulated 24 bits, interpret them as three 8-bit
      big-endian numbers. Append the three characters with code points equal to those numbers to <var>output</var>, in the same order, and then empty <var>buffer</var>.</li>

      <li>Advance <var>position</var> by one character.</li>

    </ol>

    </li>

    <li>

    If <var>buffer</var> is not empty, it contains either 12 or 18 bits. If it contains
    12 bits, discard the last four and interpret the remaining eight as an 8-bit big-endian number.
    If it contains 18 bits, discard the last two and interpret the remaining 16 as two 8-bit
    big-endian numbers. Append the one or two characters with code points equal to those one or two
    numbers to <var>output</var>, in the same order.

    <p class="note">
  The discarded bits mean that, for instance, <code>atob("YQ")</code> and
    <code>atob("YR")</code> both return "<code>a</code>".
  </p>

    </li>

    <li>Return <var>output</var>.</li>

  </ol>

  </div>

<h3 id="dynamic-markup-insertion"><dfn>Dynamic markup insertion</dfn></h3>

  <p class="note">
  APIs for dynamically inserting markup into the document interact with the parser,
  and thus their behavior varies depending on whether they are used with <a>HTML documents</a>
  (and the <a>HTML parser</a>) or XHTML in <a>XML documents</a> (and the <a>XML
  parser</a>).
  </p>

<h4 id="opening-the-input-stream"><dfn>Opening the input stream</dfn></h4>

  The <dfn><code>open()</code></dfn> method comes in several variants
  with different numbers of arguments.

  <dl class="domintro">

    <dt><var>document</var> = <var>document</var> . <code>open</code>( [ <var>type</var> [, <var>replace</var> ] ] )</dt>

    <dd>

    Causes the <code>Document</code> to be replaced in-place, as if it was a new
    <code>Document</code> object, but reusing the previous object, which is then returned.

    If the <var>type</var> argument is omitted or has the value
    "<code>text/html</code>", then the resulting <code>Document</code> has an HTML parser associated
    with it, which can be given data to parse using <code>document.write()</code>. Otherwise, all content passed to <code>document.write()</code> will be parsed as plain text.

    If the <var>replace</var> argument is present and has the value "<code>replace</code>", the existing entries in the session history for the
    <code>Document</code> object are removed.

    The method has no effect if the <code>Document</code> is still being parsed.

    Throws an <code>InvalidStateError</code> exception if the <code>Document</code> is an <a>XML document</a>.

    </dd>

    <dt><var>window</var> = <var>document</var> . <code>open</code>( <var>url</var>, <var>name</var>, <var>features</var> [, <var>replace</var> ] )</dt>

    <dd>

    Works like the <code>window.open()</code> method.

    </dd>

  </dl>

  <div class="impl">

  <code>Document</code> objects have an <dfn>ignore-opens-during-unload counter</dfn>, which is
  used to prevent scripts from invoking the <code>document.open()</code>
  method (directly or indirectly) while the document is <a>being
  unloaded</a>. Initially, the counter must be set to zero.

  When called with two arguments (or fewer), the <code>document.open()</code>
  method must act as follows:

  <ol>

    <li>If the <code>Document</code> object is not flagged as an <a>HTML
    document</a>, throw an <code>InvalidStateError</code> exception and abort these steps.</li>

    <li>If the <code>Document</code> object is not an <a>active document</a>, then abort
    these steps.</li>

    <li>Let <var>type</var> be the value of the first argument.</li>

    <li>

    If the second argument is an <a>ASCII case-insensitive</a> match for the value
    "replace", then let <var>replace</var> be true.

    Otherwise, if the <a>browsing context</a>'s <a>session history</a> contains only
    one <code>Document</code>, and that was the <code>about:blank</code> <code>Document</code>
    created when the <a>browsing context</a> was <a>created</a>, and that <code>Document</code> has
    never had the <a>unload a document</a> algorithm invoked on it (e.g. by a previous call to
    <code>document.open()</code>), then let <var>replace</var> be
    true.

    Otherwise, let <var>replace</var> be false.

    </li>

    <li>

    If the <code>Document</code> has an <a>active parser</a> whose <a>script nesting
    level</a> is greater than zero, then the method does nothing. Abort these steps and return
    the <code>Document</code> object on which the method was invoked.

    <p class="note">
  This basically causes <code>document.open()</code> to
    be ignored when it's called in an inline script found during parsing, while still letting it
    have an effect when called from a non-parser task such as a timer callback or event handler.
  </p>

    </li>

    <li>

    Similarly, if the <code>Document</code>'s <a>ignore-opens-during-unload counter</a> is
    greater than zero, then the method does nothing. Abort these steps and return the
    <code>Document</code> object on which the method was invoked.

    <p class="note">
  This basically causes <code>document.open()</code> to
    be ignored when it's called from a <code>beforeunload</code> <code>pagehide</code>, or <code>unload</code> event
    handler while the <code>Document</code> is being unloaded.
  </p>

    </li>

    <li>Release the <a>storage mutex</a>.</li>

    <li>Set the <code>Document</code>'s <i>salvageable</i> state to false.</li>

    <li><a>Prompt to unload</a> the
    <code>Document</code> object. If the user <a>refused to allow the document to be
    unloaded</a>, then abort these steps and return the <code>Document</code> object on which the
    method was invoked.</li>

    <li><a>Unload</a> the <code>Document</code> object, with the
    <var>recycle</var> parameter set to true.</li>

    <li><a>Abort</a> the <code>Document</code>.</li>

    <li>Unregister all event listeners registered on the <code>Document</code> node and its
    descendants.

    <li>Remove any <a>tasks</a> associated with the
    <code>Document</code> in any <a>task source</a>.</li>

    <li>Remove all child nodes of the document, without firing any mutation events.</li>

    <li>

    Replace the <code>Document</code>'s singleton objects with new instances of those objects.
    (This includes in particular the <code>Window</code>, <code>Location</code>,
    <code>History</code>, <code>ApplicationCache</code>, and <code>Navigator</code>, objects, the
    various <code>BarProp</code> objects, the two <code>Storage</code> objects, the various
    <code>HTMLCollection</code> objects, and objects defined by other specifications, like
    <code>Selection</code>. It also includes all the Web
    IDL prototypes in the JavaScript binding, including the <code>Document</code> object's
    prototype.)

    <p class="note">
  The new <code>Window</code> object has a new <a>environment settings
    object</a>.
  </p>

    </li>

    <li>Set the new <code>Window</code> object's <a>HTTPS
    state</a> to the <a>HTTPS state</a> of the
    <code>Window</code> object of the <a>responsible document</a> specified by the <a>entry
    settings object</a>.</li>

    <li>Change the <a>document's character encoding</a> to UTF-8.</li>

    <li>If the <code>Document</code> is <a>ready for post-load tasks</a>, then set the
    <code>Document</code> object's <a>reload override flag</a> and set the
    <code>Document</code>'s <a>reload override buffer</a> to the empty string.</li>

    <li>Set the <code>Document</code>'s <i>salvageable</i> state back to true.</li>

    <li>Change <a>the document's address</a> to the <a>address</a> of the <a>responsible document</a> specified by the <a>entry
    settings object</a>.</li>

    <li>If the <code>Document</code>'s <a>iframe load in progress</a> flag is set, set the
    <code>Document</code>'s <a>mute iframe load</a> flag.</li>

    <li>Create a new <a>HTML parser</a> and associate it with the document. This is a
    <dfn>script-created parser</dfn> (meaning that it can be closed by the <code>document.open()</code> and <code>document.close()</code> methods, and that the tokenizer will wait for
    an explicit call to <code>document.close()</code> before emitting an
    end-of-file token). The encoding <a>confidence</a> is
    <i>irrelevant</i>.</li>

    <li>Set the <a>current document readiness</a> of the document to "<code>loading</code>".</li>

    <li>

    If <var>type</var> is an <a>ASCII case-insensitive</a> match for the string
    "<code>replace</code>", then, for historical reasons, set it to the string "<code>text/html</code>".

    Otherwise:

    If the <var>type</var> string contains a U+003B SEMICOLON character (;), remove the
    first such character and all characters from it up to the end of the string.

    <a>Strip leading and trailing whitespace</a> from <var>type</var>.

    </li>

    <li>

    If <var>type</var> is <em>not</em> now an <a>ASCII case-insensitive</a> match
    for the string "<code>text/html</code>", then act as if the tokenizer had emitted a start tag
    token with the tag name "pre" followed by a single U+000A LINE FEED (LF) character, then switch the
    <a>HTML parser</a>'s tokenizer to the <a>PLAINTEXT state</a>.

    </li>

    <li>

    Remove all the entries in the <a>browsing context</a>'s <a>session history</a>
    after the <a>current entry</a>. If the <a>current entry</a> is the last entry in the
    session history, then no entries are removed.

    <p class="note">
  This <a>doesn't necessarily have to affect</a> the user
    agent's user interface.
  </p>

    </li>

    <li>Remove any <a>tasks</a> queued by the <a>history traversal
    task source</a> that are associated with any <code>Document</code> objects in the
    <a>top-level browsing context</a>'s <a>document family</a>.</li>

    <li>Remove any earlier entries that share the same <code>Document</code>.</li>

    <li>If <var>replace</var> is false, then add a new entry, just before the last entry,
    and associate with the new entry the text that was parsed by the previous parser associated with
    the <code>Document</code> object, as well as the state of the document at the start of these
    steps. This allows the user to step backwards in the session history to see the page before it
    was blown away by the <code>document.open()</code> call. This new entry
    does not have a <code>Document</code> object, so a new one will be created if the session history
    is traversed to that entry.</li>

    <li>Finally, set the <a>insertion point</a> to point at just before the end of the
    <a>input stream</a> (which at this point will be empty).</li>

    <li>Return the <code>Document</code> on which the method was invoked.</li>

  </ol>

  <p class="note">
  The <code>document.open()</code> method does not affect
  whether a <code>Document</code> is <a>ready for post-load tasks</a> or <a>completely
  loaded</a>.
  </p>

  When called with four arguments, the <code>open()</code> method on
  the <code>Document</code> object must call the <code>open()</code> method on the
  <code>Window</code> object of the <code>Document</code> object, with the same arguments as the
  original call to the <code>open()</code> method, and return whatever
  that method returned. If the <code>Document</code> object has no <code>Window</code> object, then
  the method must throw an <code>InvalidAccessError</code> exception.

  </div>

<h4 id="closing-the-input-stream"><dfn>Closing the input stream</dfn></h4>

  <dl class="domintro">

    <dt><var>document</var> . <code>close</code>()</dt>

    <dd>

    Closes the input stream that was opened by the <code>document.open()</code> method.

    Throws an <code>InvalidStateError</code> exception if the
    <code>Document</code> is an <a>XML
    document</a>.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>close()</code></dfn> method must run the following
  steps:

  <ol>

    <li>If the <code>Document</code> object is not flagged as an <a>HTML
    document</a>, throw an <code>InvalidStateError</code> exception and abort these
    steps.</li>

    <li>If there is no <a>script-created parser</a> associated with the document, then abort
    these steps.</li>

    <li>Insert an <a>explicit "EOF" character</a> at the end of the parser's <a>input
    stream</a>.</li>

    <li>If there is a <a>pending parsing-blocking script</a>, then abort these
    steps.</li>

    <li>Run the tokenizer, processing resulting tokens as they are emitted, and stopping when the
    tokenizer reaches the <a>explicit "EOF" character</a> or <a>spins the event loop</a>.</li>

  </ol>

  </div>

<h4 id="documentwrite"><dfn><code>document.write()</code></dfn></h4>

  <dl class="domintro">

    <dt><var>document</var> . <code>write</code>(<var>text</var>...)</dt>

    <dd>

    In general, adds the given string(s) to the <code>Document</code>'s input stream.

    <p class="warning">This method has very idiosyncratic behavior. In some cases, this method can
    affect the state of the <a>HTML parser</a> while the parser is running, resulting in a DOM
    that does not correspond to the source of the document (e.g. if the string written is the string
    "<code>&lt;plaintext&gt;</code>" or "<code>&lt;!--</code>"). In other cases,
    the call can clear the current page first, as if <code>document.open()</code> had been called. In yet more cases, the method
    is simply ignored, or throws an exception. To make matters worse, the exact behavior of this
    method can in some cases be dependent on network latency, which can lead to failures that are very hard to debug. <strong>For all these reasons, use
    of this method is strongly discouraged.</strong></p>

    This method throws an <code>InvalidStateError</code> exception when invoked on <a>XML
    documents</a>.

    </dd>

  </dl>

  <div class="impl">

  <code>Document</code> objects have an <dfn>ignore-destructive-writes counter</dfn>, which is
  used in conjunction with the processing of <code>script</code> elements to prevent external
  scripts from being able to use <code>document.write()</code> to blow
  away the document by implicitly calling <code>document.open()</code>.
  Initially, the counter must be set to zero.

  The <dfn><code>document.write(...)</code></dfn> method must act as
  follows:

  <ol>

    <li>

    If the method was invoked on an <a>XML document</a>, throw an
    <code>InvalidStateError</code> exception and abort these steps.

    </li>

    <li>If the <code>Document</code> object is not an <a>active document</a>, then abort
    these steps.</li>

    <li>

    If the <a>insertion point</a> is undefined and either the <code>Document</code>'s
    <a>ignore-opens-during-unload counter</a> is greater than zero or the
    <code>Document</code>'s <a>ignore-destructive-writes counter</a> is greater than zero,
    abort these steps.

    </li>

    <li>

    If the <a>insertion point</a> is undefined, call the <code>open()</code> method on the <code>document</code>
    object (with no arguments). If the user <a>refused to allow the document to be
    unloaded</a>, then abort these steps. Otherwise, the <a>insertion point</a> will point
    at just before the end of the (empty) <a>input stream</a>.

    </li>

    <li>

    Insert the string consisting of the concatenation of all the arguments to the method into the
    <a>input stream</a> just before the <a>insertion point</a>.

    </li>

    <li>

    If the <code>Document</code> object's <a>reload override flag</a> is set, then append
    the string consisting of the concatenation of all the arguments to the method to the
    <code>Document</code>'s <a>reload override buffer</a>.

    </li>

    <li>

    If there is no <a>pending parsing-blocking script</a>, have the <a>HTML
    parser</a> process the characters that were inserted, one at a time, processing resulting
    tokens as they are emitted, and stopping when the tokenizer reaches the insertion point or when
    the processing of the tokenizer is aborted by the tree construction stage (this can happen if a
    <code>script</code> end tag token is emitted by the tokenizer).

    <p class="note">
  If the <code>document.write()</code> method was
    called from script executing inline (i.e. executing because the parser parsed a set of
    <code>script</code> tags), then this is a <a>reentrant invocation of the
    parser</a>.

    </li>

    <li>

    Finally, return from the method.

    </li>

  </ol>

  </div>

<h4 id="documentwriteln"><dfn><code>document.writeln()</code></dfn></h4>

  <dl class="domintro">

    <dt><var>document</var> . <code>writeln</code>(<var>text</var>...)</dt>

    <dd>

    Adds the given string(s) to the <code>Document</code>'s input stream, followed by a newline
    character. If necessary, calls the <code>open()</code> method
    implicitly first.

    This method throws an <code>InvalidStateError</code> exception when invoked on <a>XML
    documents</a>.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>document.writeln(...)</code></dfn> method, when
  invoked, must act as if the <code>document.write()</code> method had
  been invoked with the same argument(s), plus an extra argument consisting of a string containing a
  single line feed character (U+000A).

  </div>

<h3 id="timers"><dfn>Timers</dfn></h3>

  The <code>setTimeout()</code>
  and <code>setInterval()</code>
  methods allow authors to schedule timer-based callbacks.

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject, Exposed=(Window,Worker)]
  interface <dfn>WindowTimers</dfn> {
  long <a>setTimeout</a>(<a>Function</a> handler, optional long timeout = 0, any... arguments);
  long <a>setTimeout</a>(DOMString handler, optional long timeout = 0, any... arguments);
  void <a>clearTimeout</a>(optional long handle = 0);
  long <a>setInterval</a>(<a>Function</a> handler, optional long timeout = 0, any... arguments);
  long <a>setInterval</a>(DOMString handler, optional long timeout = 0, any... arguments);
  void <a>clearInterval</a>(optional long handle = 0);
  };
  <a>Window</a> implements <a>WindowTimers</a>;
  <a>WorkerGlobalScope</a> implements <a>WindowTimers</a>;
  </pre>

  <dl class="domintro">

    <dt><var>handle</var> = <var>window</var> . <code>setTimeout</code>( <var>handler</var> [, <var>timeout</var> [, <var>arguments</var>... ] ] )</dt>

    <dd>

    Schedules a timeout to run <var>handler</var> after <var>timeout</var>
    milliseconds. Any <var>arguments</var> are passed straight through to the <var>handler</var>.

    </dd>

    <dt><var>handle</var> = <var>window</var> . <code>setTimeout</code>( <var>code</var> [, <var>timeout</var> ] )</dt>

    <dd>

    Schedules a timeout to compile and run <var>code</var> after <var>timeout</var> milliseconds.

    </dd>

    <dt><var>window</var> . <code>clearTimeout</code>( <var>handle</var> )</dt>

    <dd>

    Cancels the timeout set with <code>setTimeout()</code>
    or <code>setInterval()</code> identified by
    <var>handle</var>.

    </dd>

    <dt><var>handle</var> = <var>window</var> . <code>setInterval</code>( <var>handler</var> [, <var>timeout</var> [, <var>arguments</var>... ] ] )</dt>

    <dd>

    Schedules a timeout to run <var>handler</var> every <var>timeout</var>
    milliseconds. Any <var>arguments</var> are passed straight through to the <var>handler</var>.

    </dd>

    <dt><var>handle</var> = <var>window</var> . <code>setInterval</code>( <var>code</var> [, <var>timeout</var> ] )</dt>

    <dd>

    Schedules a timeout to compile and run <var>code</var> every <var>timeout</var> milliseconds.

    </dd>

    <dt><var>window</var> . <code>clearInterval</code>( <var>handle</var> )</dt>

    <dd>

    Cancels the timeout set with <code>setInterval()
    </code> or <code>setTimeout()</code> identified by <var>
    handle</var>.

    </dd>

  </dl>

  <p class="note">Timers can be nested; after five such nested timers, however, the interval is
  forced to be at least four milliseconds.
  </p>

  <p class="note">
  This API does not guarantee that timers will run exactly on schedule. Delays due
  to CPU load, other tasks, etc, are to be expected.
  </p>

  <div class="impl">

  Each object that implements the <code>WindowTimers</code> interface has a <dfn>list of active
  timers</dfn>. Each entry in this lists is identified by a number, which must be unique within the
  list for the lifetime of the object that implements the <code>WindowTimers</code> interface.

  <hr />

  The <dfn><code>setTimeout()</code></dfn> method must return
  the value returned by the <a>timer initialisation steps</a>, passing them the method's
  arguments, the object on which the method for which the algorithm is running is implemented (a
  <code>Window</code> or <code>WorkerGlobalScope</code> object) as the <var>method
  context</var>, and the <var>repeat</var> flag set to false.

  The <dfn><code>setInterval()</code></dfn> method must
  return the value returned by the <a>timer initialisation steps</a>, passing them the
  method's arguments, the object on which the method for which the algorithm is running is
  implemented (a <code>Window</code> or <code>WorkerGlobalScope</code> object) as the <var>method context</var>, and the <var>repeat</var> flag set to true.

  The <dfn><code>clearTimeout()</code></dfn> and <dfn><code>clearInterval()</code></dfn> methods must clear the
  entry identified as <var>handle</var> from the <a>list of active timers</a> of the
  <code>WindowTimers</code> object on which the method was invoked, if any, where <var>handle</var> is the argument passed to the method. (If <var>handle</var> does
  not identify an entry in the <a>list of active timers</a> of the <code>WindowTimers</code>
  object on which the method was invoked, the method does nothing.)

  <p class="note">
  Because <code>clearTimeout()</code> and
  <code>clearInterval()</code> clear entries from the same
  list, either method can be used to clear timers created by
  <code>setTimeout()</code> or
  <code>setInterval()</code>.
  </p>

  <hr />

  The <dfn>timer initialisation steps</dfn>, which are invoked with some method arguments, a <var>method context</var>, a <var>repeat</var> flag which can be true or false, and
  optionally (and only if the <var>repeat</var> flag is true) a <var>previous
  handle</var>, are as follows:

  <ol>

    <li>Let <var>method context proxy</var> be <var>method context</var> if that
    is a <code>WorkerGlobalScope</code> object, or else the <code>WindowProxy</code> that corresponds
    to <var>method context</var>.</li>

    <li>If <var>previous handle</var> was provided, let <var>handle</var> be
    <var>previous handle</var>; otherwise, let <var>handle</var> be a
    user-agent-defined integer that is greater than zero that will identify the timeout to be set by
    this call in the <a>list of active timers</a>.</li>

    <li>If <var>previous handle</var> was not provided, add an entry to the <a>list of
    active timers</a> for <var>handle</var>.</li>

    <li>

    Let <var>task</var> be a <a>task</a> that runs the
    following substeps:

    <ol>

      <li>If the entry for <var>handle</var> in the <a>list of active timers</a>
      has been cleared, then abort this <a>task</a>'s substeps.</li>

      <li>

      Run the appropriate set of steps from the following list:

      <dl class="switch">

        <dt>If the first method argument is a <code>Function</code></dt>

        <dd>

        <a>Invoke</a> the <code>Function</code>. Use the third and subsequent method
        arguments (if any) as the arguments for invoking the <code>Function</code>. Use <var>method context proxy</var> as the
        <var>thisArg</var> for invoking the <code>Function</code>. [[!ECMA-262]]

        </dd>

        <dt>Otherwise</dt>

        <dd>

        <ol>

          <li>Let <var>script source</var> be the first method argument.</li>

          <li>Let <var>script language</var> be JavaScript.</li>

          <li>Let <var>settings object</var> be <var>method context</var>'s <a>environment settings
          object</a>.</li>

          <li><a>Create a script</a> using <var>script source</var> as the script source,
          the <a>URL</a> where <var>script source</var> can be found, <var>scripting
          language</var> as the scripting language, and <var>settings object</var> as the
          <a>environment settings object</a>.</li>

        </ol>

        </dd>

      </dl>

      </li>

      <li>If the <var>repeat</var> flag is true, then call <a>timer initialisation
      steps</a> again, passing them the same method arguments, the same <var>method
      context</var>, with the <var>repeat</var> flag still set to true, and with the <var>previous handle</var> set to <var>handler</var>.</li>

    </ol>

    </li>

    <li>Let <var>timeout</var> be the second method argument.</li>

    <li>If the currently running <a>task</a> is a task that was created
    by this algorithm, then let <var>nesting level</var> be the <a>task</a>'s <a>timer nesting level</a>. Otherwise, let <var>nesting level</var> be zero.</li>

    <li>If <var>nesting level</var> is greater than 5, and <var>timeout</var> is
    less than 4, then increase <var>timeout</var> to 4.</li>

    <li>Increment <var>nesting level</var> by one.</li>

    <li>Let <var>task</var>'s <dfn>timer nesting level</dfn> be <var>nesting
    level</var>.</li>

    <li>Return <var>handle</var>, and then continue running this algorithm
    <a>in parallel</a>.</li>

    <li>

    If <var>method context</var> is a <code>Window</code> object, wait until the
    <code>Document</code> associated with <var>method context</var> has been <a>fully
    active</a> for a further <var>timeout</var> milliseconds (not necessarily
    consecutively).

    Otherwise, <var>method context</var> is a <code>WorkerGlobalScope</code> object;
    wait until <var>timeout</var> milliseconds have passed with the worker not suspended
    (not necessarily consecutively).

    </li>

    <li>

    Wait until any invocations of this algorithm that had the same <var>method
    context</var>, that started before this one, and whose <var>timeout</var> is equal to
    or less than this one's, have completed.

    <p class="note">
  Argument conversion as defined by Web IDL (for example, invoking <code>toString()</code> methods on objects passed as the first argument) happens in the
    algorithms defined in Web IDL, before this algorithm is invoked.
  </p>

    <div class="example">
      So for example, the following rather silly code will result in the log containing "<code>ONE&nbsp;TWO&nbsp;</code>":

      <pre highlight="javascript">var log = '';
  function logger(s) { log += s + ' '; }

  setTimeout({ toString: function () {
  setTimeout("logger('ONE')", 100);
  return "logger('TWO')";
  } }, 100);</pre>
    </div>

    </li>

    <li>

    Optionally, wait a further user-agent defined length of time.

    <p class="note">
  This is intended to allow user agents to pad timeouts as needed to optimize the
    power usage of the device. For example, some processors have a low-power mode where the
    granularity of timers is reduced; on such platforms, user agents can slow timers down to fit
    this schedule instead of requiring the processor to use the more accurate mode with its
    associated higher power usage.
  </p>

    </li>

    <li>

    <a>Queue</a> the <a>task</a> <var>task</var>.

    <p class="note">
  Once the task has been processed, if the <var>repeat</var> flag is
    false, it is safe to remove the entry for <var>handle</var> from the <a>list of
    active timers</a> (there is no way for the entry's existence to be detected past this point,
    so it does not technically matter one way or the other).
  </p>

    </li>

  </ol>

  The <a>task source</a> for these <a>tasks</a> is the
  <dfn>timer task source</dfn>.

  </div>

  <div class="example">
    To run tasks of several milliseconds back to back without any delay, while still yielding back
    to the browser to avoid starving the user interface (and to avoid the browser killing the script
    for hogging the CPU), simply queue the next timer before performing work:

    <pre highlight="javascript">function doExpensiveWork() {
  var done = false;
  // ...
  // this part of the function takes up to five milliseconds
  // set done to true if we're done
  // ...
  return done;
  }

  function rescheduleWork() {
  var handle = setTimeout(rescheduleWork, 0); // preschedule next iteration
  if (doExpensiveWork())
    clearTimeout(handle); // clear the timeout if we don't need it
  }

  function scheduleWork() {
  setTimeout(rescheduleWork, 0);
  }

  scheduleWork(); // queues a task to do lots of work</pre>
  </div>

<h3 id="user-prompts"><dfn>User prompts</dfn></h3>

<h4 id="simple-dialogs"><dfn>Simple dialogs</dfn></h4>

  <dl class="domintro">

    <dt><var>window</var> . <code>alert</code>(<var>message</var>)</dt>
    <dd>

    Displays a modal alert with the given message, and waits for the user to dismiss it.

    A call to the <code>navigator.{{yieldForStorageUpdates()}}</code> method is
    implied when this method is invoked.

    </dd>

    <dt><var>result</var> = <var>window</var> . <code>confirm</code>(<var>message</var>)</dt>
    <dd>

    Displays a modal OK/Cancel prompt with the given message, waits for the user to dismiss it,
    and returns true if the user clicks OK and false if the user clicks Cancel.

    A call to the <code>navigator.{{yieldForStorageUpdates()}}</code> method is
    implied when this method is invoked.

    </dd>

    <dt><var>result</var> = <var>window</var> . <code>prompt</code>(<var>message</var> [, <var>default</var>] )</dt>
    <dd>

    Displays a modal text field prompt with the given message, waits for the user to dismiss it,
    and returns the value that the user entered. If the user cancels the prompt, then returns null
    instead. If the second argument is present, then the given value is used as a default.

    A call to the <code>navigator.{{yieldForStorageUpdates()}}</code> method is
    implied when this method is invoked.

    </dd>

  </dl>

  <p class="note">
  Logic that depends on <a>tasks</a> or <a>microtasks</a>, such as <a>media elements</a>
  loading their <a>media data</a>, are stalled when these methods are invoked.
  </p>

  <div class="impl">

  The <dfn><code>alert(<var>message</var>)</code></dfn> method, when
  invoked, must run the following steps:

  <ol>

    <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
    optionally abort these steps.</li>

    <li>Release the <a>storage mutex</a>.</li>

    <li>If the <a>active sandboxing flag set</a> of the <a>active document</a> of
    the <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> has the <a>sandboxed modals flag</a> set, then abort these
    steps.</li>

    <li>Optionally, abort these steps. (For example, the user agent might give the user the option
    to ignore all alerts, and would thus abort at this step whenever the method was
    invoked.)</li>

    <li>If the method was invoked with no arguments, then let <var>message</var> be the
    empty string; otherwise, let <var>message</var> be the method's first
    argument.</li>

    <li>Show the given <var>message</var> to the user.</li>

    <li>Optionally, <a>pause</a> while waiting for the user to acknowledge the
    message.</li>

  </ol>

  The <dfn><code>confirm(<var>message</var>)</code></dfn> method,
  when invoked, must run the following steps:

  <ol>

    <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
    optionally abort these steps, returning false.</li>

    <li>Release the <a>storage mutex</a>.</li>

    <li>If the <a>active sandboxing flag set</a> of the <a>active document</a> of
    the <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> has the <a>sandboxed modals flag</a> set, then return false and abort these
    steps.</li>

    <li>Optionally, return false and abort these steps. (For example, the user agent might give
    the user the option to ignore all prompts, and would thus abort at this step whenever the method
    was invoked.)</li>

    <li>Show the given <var>message</var> to the user, and ask the user to respond with a
    positive or negative response.</li>

    <li><a>Pause</a> until the user responds either positively or negatively.</li>

    <li>If the user responded positively, return true; otherwise, the user responded negatively:
    return false.</li>

  </ol>

  The <dfn><code>prompt(<var>message</var>, <var>default</var>)</code></dfn> method, when invoked, must run the following steps:

  <ol>

    <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
    optionally abort these steps, returning null.</li>

    <li>Release the <a>storage mutex</a>.</li>

    <li>If the <a>active sandboxing flag set</a> of the <a>active document</a> of
    the <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> has the <a>sandboxed modals flag</a> set, then return null and abort these
    steps.</li>

    <li>Optionally, return null and abort these steps. (For example, the user agent might give the
    user the option to ignore all prompts, and would thus abort at this step whenever the method was
    invoked.)</li>

    <li>Show the given <var>message</var> to the user, and ask the user to either respond
    with a string value or abort. The response must be defaulted to the value given by
    <var>default</var>.</li>

    <li><a>Pause</a> while waiting for the user's response.</li>

    <li>If the user aborts, then return null; otherwise, return the string that the user responded
    with.</li>

  </ol>

  </div>

<h4 id="printing"><dfn>Printing</dfn></h4>

  <dl class="domintro">

    <dt><var>window</var> . <code>print</code>()</dt>

    <dd>

    Prompts the user to print the page.

    A call to the <code>navigator.{{yieldForStorageUpdates()}}</code> method is
    implied when this method is invoked.

    </dd>

  </dl>

  <div class="impl">

  When the <dfn><code>print()</code></dfn> method is invoked, if the
  <code>Document</code> is <a>ready for post-load tasks</a>, then the user agent must
  run the <a>printing steps</a> <a>in parallel</a>. Otherwise, the user agent must only set the
  <dfn>print when loaded</dfn> flag on the <code>Document</code>.

  User agents should also run the <a>printing steps</a> whenever the user asks for the
  opportunity to <a>obtain a physical form</a> (e.g. printed copy), or the representation of a
  physical form (e.g. PDF copy), of a document.

  The <dfn>printing steps</dfn> are as follows:

  <ol>

    <li>

    The user agent may display a message to the user or abort these steps (or both).

    <p class="example">
  For instance, a kiosk browser could silently ignore any invocations of the
    <code>print()</code> method.
  </p>

    <p class="example">
  For instance, a browser on a mobile device could detect that there are no
    printers in the vicinity and display a message saying so before continuing to offer a "save to
    PDF" option.
  </p>

    </li>

    <li>

      If the <a>active sandboxing flag set</a> of the <a>active document</a> of
      the <a>responsible browsing context</a> specified by the <a>incumbent settings
      object</a> has the <a>sandboxed modals flag</a> set, then abort these
      steps.

      <p class="note">
  If the printing dialog is blocked by a <code>Document</code>'s sandbox,
      then neither the <code>beforeprint</code> nor <code>afterprint</code> events will be fired.
  </p>

    </li>

    <li>

    The user agent must <a>fire a simple event</a> named <code>beforeprint</code> at the <code>Window</code> object of the
    <code>Document</code> that is being printed, as well as any <a>nested browsing contexts</a> in it.

    <p class="example">
  The <code>beforeprint</code> event can be used to
    annotate the printed copy, for instance adding the time at which the document was printed.
  </p>

    </li>

    <li>

    The user agent must release the <a>storage mutex</a>.

    </li>

    <li>

    The user agent should offer the user the opportunity to <a>obtain a physical form</a>
    (or the representation of a physical form) of the document. The user agent may wait for the user
    to either accept or decline before returning; if so, the user agent must <a>pause</a>
    while the method is waiting. Even if the user agent doesn't wait at this point, the user agent
    must use the state of the relevant documents as they are at this point in the algorithm if and
    when it eventually creates the alternate form.

    </li>

    <li>

    The user agent must <a>fire a simple event</a> named <code>afterprint</code> at the <code>Window</code> object of the
    <code>Document</code> that is being printed, as well as any <a>nested browsing contexts</a> in it.

    <p class="example">
  The <code>afterprint</code> event can be used to
    revert annotations added in the earlier event, as well as showing post-printing UI. For
    instance, if a page is walking the user through the steps of applying for a home loan, the
    script could automatically advance to the next step after having printed a form or other.
  </p>

    </li>

  </ol>

  </div>

<h4 id="dialogs-implemented-using-separate-documents-with-showmodaldialog"><dfn>Dialogs implemented using separate documents with <code>showModalDialog()</code></dfn></h4>

  <p class="critical">This feature is in the process of being removed from the Web platform. (This
  is a long process that takes many years.) Using the <code>showModalDialog()</code> API at this time is highly discouraged.

  <div class="impl">

  The <dfn><code>showModalDialog(<var>url</var>, <var>argument</var>)</code></dfn> method, when invoked,
  must cause the user agent to run the following steps:

  <ol>

    <li>

    <a>Resolve</a> <var>url</var> relative to the
    <a>API base URL</a> specified by the <a>entry settings object</a>.

    If this fails, then throw a <code>SyntaxError</code> exception and abort these steps.

    </li>

    <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
    optionally abort these steps, returning the empty string.</li>

    <li>

    Release the <a>storage mutex</a>.

    </li>

    <li>

    If the user agent is configured such that this invocation of <code>showModalDialog()</code> is somehow disabled, then return the empty
    string and abort these steps.

    <p class="note">
  User agents are expected to disable this method in certain cases to avoid user
    annoyance (e.g. as part of their popup blocker feature). For instance, a user agent could
    require that a site be safelisted before enabling this method, or the user agent could be
    configured to only allow one modal dialog at a time.
  </p>

    </li>

    <li>

    If the <a>active sandboxing flag set</a> of the <a>active document</a> of the
    <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> has either the <a>sandboxed auxiliary navigation browsing context flag</a>
    or <a>sandboxed modals flag</a> set, then return the empty string and abort these
    steps.

    </li>

    <li>

    Let <var>incumbent origin</var> be the <a>effective script origin</a>
    specified by the <a>incumbent settings object</a> at the time the <code>showModalDialog()</code> method was called.

    </li>

    <li>

    Let <var>the list of background browsing contexts</var> be a list of all the
    browsing contexts that:

    <ul>

      <li>are part of the same <a>unit of related browsing contexts</a> as the browsing context
      of the <code>Window</code> object on which the <code>showModalDialog()</code> method was called, and that</li>

      <li>have an <a>active document</a> whose <a>origin</a> is the <a>same</a> as <var>incumbent origin</var>,</li>

    </ul>

    ...as well as any browsing contexts that are nested inside any of the browsing contexts
    matching those conditions.

    </li>

    <li>

    Disable the user interface for all the browsing contexts in <var>the list of
    background browsing contexts</var>. This should prevent the user from navigating those browsing
    contexts, causing events to be sent to those browsing context, or editing any content in those
    browsing contexts. However, it does not prevent those browsing contexts from receiving events
    from sources other than the user, from running scripts, from running animations, and so
    forth.

    </li>

    <li>

    <a>Create</a> a new <a>auxiliary browsing context</a>, with the <a>opener browsing
    context</a> being the browsing context of the <code>Window</code> object on which the <code>showModalDialog()</code> method was called. The new auxiliary
    browsing context has no name.

    <p class="note">
  This <a>browsing context</a>'s <code>Document</code>s' <code>Window</code>
    objects all implement the <code>WindowModal</code> interface.
  </p>

    </li>

    <li>

    Set all the flags in the new browsing context's <a>popup sandboxing flag set</a> that
    are set in the <a>active sandboxing flag set</a> of the <a>active document</a> of
    the <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a>. The <a>responsible browsing context</a> specified by the <a>incumbent
    settings object</a> must be set as the new browsing context's <a>one permitted sandboxed
    navigator</a>.

    </li>

    <li>

    Let the <a>dialog arguments</a> of the new browsing context be set to the value of <var>argument</var>, or the <i>undefined</i> value if the argument was omitted.

    </li>

    <li>

    Let the <a>dialog arguments' origin</a> be <var>incumbent origin</var>.

    </li>

    <li>

    Let the <a>return value</a> of the new browsing context be the <i>undefined</i> value.

    </li>

    <li>

    Let the <a>return value origin</a> be <var>incumbent origin</var>.

    </li>

    <li>

    <a>Navigate</a> the new <a>browsing context</a> to
    the <a>absolute URL</a> that resulted from <a>resolving</a>
    <var>url</var> earlier, with <a>replacement enabled</a>, and with the
    <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> as the <a>source browsing context</a>.

    </li>

    <li>

    <a>Spin the event loop</a> until the new <a>browsing context</a> is <a>closed</a>. The user agent must allow the user to indicate
    that the <a>browsing context</a> is to be closed.

    </li>

    <li>

    Reenable the user interface for all the browsing contexts in <var>the list of
    background browsing contexts</var>.

    </li>

    <li>

    If the <a>auxiliary browsing context</a>'s <a>return value origin</a> at the time
    the browsing context was <a>closed</a> was the <a>same</a> as <var>incumbent origin</var>, then let <var>return value</var> be the <a>auxiliary browsing context</a>'s <a>return
    value</a> as it stood when the browsing context was <a>closed</a>.

    Otherwise, let <var>return value</var> be undefined.

    </li>

    <li>

    Return <var>return value</var>.

    </li>

  </ol>

  The <code>Window</code> objects of <code>Document</code>s hosted by <a>browsing contexts</a> created by the above algorithm must also implement the
  <code>WindowModal</code> interface.

  <p class="note">
  When this happens, the members of the <code>WindowModal</code> interface, in
  JavaScript environments, appear to actually be part of the <code>Window</code> interface (e.g.
  they are on the same prototype chain as the <code>window.alert()</code>
  method).
  </p>

  </div>

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject]
  interface <dfn>WindowModal</dfn> {
  readonly attribute any <a>dialogArguments</a>;
  attribute any <a>returnValue</a>;
  };
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>dialogArguments</code></dt>

    <dd>

    Returns the <var>argument</var> argument that was passed to the <code>showModalDialog()</code> method.

    </dd>

    <dt><var>window</var> . <code>returnValue</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the current return value for the window.

    Can be set, to change the value that will be returned by the <code>showModalDialog()</code> method.

    </dd>

  </dl>

  <div class="impl">

  Such browsing contexts have associated <dfn>dialog arguments</dfn>, which are stored along with
  the <dfn>dialog arguments' origin</dfn>. These values are set by the <code>showModalDialog()</code> method in the algorithm above, when the
  browsing context is created, based on the arguments provided to the method.

  The <dfn><code>dialogArguments</code></dfn> IDL
  attribute, on getting, must check whether its browsing context's <a>active document</a>'s
  <a>effective script origin</a> is the <a>same</a> as the <a>dialog arguments'
  origin</a>. If it is, then the browsing context's <a>dialog arguments</a> must be
  returned unchanged. Otherwise, the IDL attribute must return <i>undefined</i>.

  These browsing contexts also have an associated <dfn>return value</dfn> and <dfn>return value
  origin</dfn>. As with the previous two values, these values are set by the <code>showModalDialog()</code> method in the algorithm above, when the
  browsing context is created.

  The <dfn><code>returnValue</code></dfn> IDL attribute, on
  getting, must check whether its browsing context's <a>active document</a>'s <a>effective
  script origin</a> is the <a>same</a> as the current <a>return
  value origin</a>. If it is, then the browsing context's <a>return value</a> must be
  returned unchanged. Otherwise, the IDL attribute must return <i>undefined</i>. On setting, the
  attribute must set the <a>return value</a> to the given new value, and the <a>return
  value origin</a> to the browsing context's <a>active document</a>'s <a>effective
  script origin</a>.

  </div>

  <p class="note">
  The <code>window.close()</code> method can be used to
  close the browsing context.
  </p>

<h3 id="system-state-and-capabilities"><dfn>System state and capabilities</dfn></h3>

<h4 id="the-navigator-object"><dfn>The <code>Navigator</code> object</dfn></h4>

  <div class="impl">

  The <dfn><code>navigator</code></dfn> attribute of the
  <code>Window</code> interface must return an instance of the <code>Navigator</code> interface,
  which represents the identity and state of the user agent (the client), and allows Web pages to
  register themselves as potential protocol and content handlers:

  </div>

  <pre class="idl" data-highlight="webidl">
  interface <dfn>Navigator</dfn> {
  // objects implementing this interface also implement the interfaces given below
  };
  <a>Navigator</a> implements <a>NavigatorID</a>;
  <a>Navigator</a> implements <a>NavigatorLanguage</a>;
  <a>Navigator</a> implements <a>NavigatorOnLine</a>;
  <a>Navigator</a> implements <a>NavigatorContentUtils</a>;
  <a>Navigator</a> implements <a>NavigatorStorageUtils</a>;
  <a>Navigator</a> implements <a>NavigatorPlugins</a>;
  </pre>

  <div class="impl">

  These interfaces are defined separately so that other specifications can re-use parts of the
  <code>Navigator</code> interface.

  </div>

<h5 id="client-identification"><dfn>Client identification</dfn></h5>

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject, Exposed=(Window, Worker)]
  interface <dfn>NavigatorID</dfn> {
  [Exposed=Window] readonly attribute DOMString <a>appCodeName</a>; // constant "Mozilla"
  readonly attribute DOMString <a>appName</a>; // constant "Netscape"
  readonly attribute DOMString <a>appVersion</a>;
  readonly attribute DOMString <a>platform</a>;
  [Exposed=Window]readonly attribute DOMString <a>product</a>; // constant "Gecko"
  readonly attribute DOMString <a>userAgent</a>;
  };
  </pre>

  In certain cases, despite the best efforts of the entire industry, Web browsers have bugs and
  limitations that Web authors are forced to work around.

  This section defines a collection of attributes that can be used to determine, from script, the
  kind of user agent in use, in order to work around these issues.

  Client detection should always be limited to detecting known current versions; future versions
  and unknown versions should always be assumed to be fully compliant.

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>appCodeName</code></dt>
    <dd>
    Returns the string "<code>Mozilla</code>".
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>appName</code></dt>
    <dd>
    Returns the string "<code>Netscape</code>".
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>appVersion</code></dt>
    <dd>
    Returns the version of the browser.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>platform</code></dt>
    <dd>
    Returns the name of the platform.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>product</code></dt>
    <dd>
    Returns the string "<code>Gecko</code>".
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>taintEnabled</code>()</dt>
    <dd>
    Returns either the string "<code>20030107</code>", or the string "<code>20100101</code>".
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>userAgent</code></dt>
    <dd>
    Returns the complete User-Agent header.
    </dd>

  </dl>

  <div class="impl">

  <dl>

    <dt><dfn><code>appCodeName</code></dfn></dt>
    <dd>Must return the string "<code>Mozilla</code>".</dd>

    <dt><dfn><code>appName</code></dfn></dt>
    <dd>Must return the string "<code>Netscape</code>".</dd>

    <dt><dfn><code>appVersion</code></dfn></dt>
    <dd>Must return either the string "<code>4.0</code>" or a string representing the
    version of the browser in detail, e.g. "<code>1.0 (VMS; en-US)
    Mellblomenator/9000</code>".</dd>

    <dt><dfn><code>platform</code></dfn></dt>
    <dd>Must return either the empty string or a string representing the platform on which the
    browser is executing, e.g. "<code>MacIntel</code>", "<code>Win32</code>",
    "<code>FreeBSD i386</code>", "<code>WebTV OS</code>".</dd>

    <dt><dfn><code>product</code></dfn></dt>
    <dd>Must return the string "<code>Gecko</code>".</dd>

    <dt><dfn><code>taintEnabled()</code></dfn></dt>
    <dd>Must return false.</dd>

    <dt><dfn><code>userAgent</code></dfn></dt>
    <dd>Must return the string used for the value of the "<code>User-Agent</code>" header
    in HTTP requests, or the empty string if no such header is ever sent.</dd>

    </dl>

  <p class="warning">Any information in this API that varies from user to user can be used to
  profile the user. In fact, if enough such information is available, a user can actually be
  uniquely identified. For this reason, user agent implementors are strongly urged to include as
  little information in this API as possible.
  </p>


  </div>

<h5 id="language-preferences"><dfn>Language preferences</dfn></h5>

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject, Exposed=(Window, Worker)]
  interface <dfn>NavigatorLanguage</dfn> {
  readonly attribute DOMString? <a>language</a>;
  readonly attribute DOMString[] <a>languages</a>;
  };
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>language</code></dt>
    <dd>
    Returns a language tag representing the user's preferred language.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>languages</code></dt>
    <dd>
    Returns an array of language tags representing the user's preferred languages, with the most preferred language first.
    The most preferred language is the one returned by <code>navigator.language</code>.
    </dd>

  </dl>

  <p class="note">
  A <code>languagechange</code> event is fired at the
  <code>Window</code> or <code>WorkerGlobalScope</code> object when the user agent's understanding
  of what the user's preferred languages are changes.
  </p>

  <div class="impl">

  <dl>

    <dt><dfn><code>language</code></dfn></dt>
    <dd>Must return a valid BCP 47 language tag representing either <a>a plausible
    language</a> or the user's most preferred language. [[!BCP47]]</dd>

    <dt><dfn><code>languages</code></dfn></dt>
    <dd>

    Must return a <a>read only</a> array of valid BCP 47
    language tags representing either one or more <a>plausible
    languages</a>, or the user's preferred languages, ordered by preference with the most
    preferred language first. The same object must be returned until the user agent needs to return
    different values, or values in a different order. [[!BCP47]]

    Whenever the user agent needs to make the <code>navigator.languages</code> attribute of a <code>Window</code>
    or <code>WorkerGlobalScope</code> object return a new set of language tags, the user agent must
    <a>queue a task</a> to <a>fire a simple event</a> named <code>languagechange</code> at the <code>Window</code> or
    <code>WorkerGlobalScope</code> object and wait until that task begins to be executed before
    actually returning a new value.

    The <a>task source</a> for this <a>task</a> is the
    <a>DOM manipulation task source</a>.

    </dd>

  </dl>

  To determine <dfn>a plausible language</dfn>, the user agent should bear in mind the following:

  <ul>

    <li>Any information in this API that varies from user to user can be used to profile or identify
    the user.

    </li>

    <li>If the user is not using a service that obfuscates the user's point of origin (e.g. the Tor
    anonymity network), then the value that is least likely to distinguish the user from other users
    with similar origins (e.g. from the same IP address block) is the language used by the majority
    of such users. [[!TOR]]</li>

    <li>If the user is using an anonymizing service, then the value "<code>en-US</code>" is
    suggested; if all users of the service use that same value, that reduces the possibility of
    distinguishing the users from each other.</li>

  </ul>

  To avoid introducing any more fingerprinting vectors, user agents should use the same list for
  the APIs defined in this function as for the HTTP <code>Accept-Language</code> header.

  </div>

<h5 id="custom-scheme-and-content-handlers-the-registerprotocolhandler-and-registercontenthandler-methods"><dfn>Custom scheme and content handlers: the <code>registerProtocolHandler()</code> and <code>registerContentHandler()</code> methods</dfn></h5>

  <pre class="idl" data-highlight="webidl">
    [NoInterfaceObject]
    interface <dfn>NavigatorContentUtils</dfn> {
      // content handler registration
      void <a>registerProtocolHandler</a>(DOMString scheme, DOMString url, DOMString title);
      void <a>registerContentHandler</a>(DOMString mimeType, DOMString url, DOMString title);
      DOMString <a>isProtocolHandlerRegistered</a>(DOMString scheme, DOMString url);
      DOMString <a>isContentHandlerRegistered</a>(DOMString mimeType, DOMString url);
      void <a>unregisterProtocolHandler</a>(DOMString scheme, DOMString url);
      void <a>unregisterContentHandler</a>(DOMString mimeType, DOMString url);
    };
  </pre>

  The <dfn><code>registerProtocolHandler()</code></dfn> method
  allows Web sites to register themselves as possible handlers for particular schemes. For example,
  an online telephone messaging service could register itself as a handler of the <code>sms:</code> scheme, so that if the user clicks on such a link, he is given the
  opportunity to use that Web site. Analogously, the <dfn><code>registerContentHandler()</code></dfn> method allows
  Web sites to register themselves as possible handlers for content in a particular <a>MIME
  type</a>. For example, the same online telephone messaging service could register itself as a
  handler for <code>text/vcard</code> files, so that if the user has no native application capable
  of handling vCards, his Web browser can instead suggest he use that site to view contact
  information stored on vCards that he opens. [[!RFC5724]] [[!RFC6350]]

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>registerProtocolHandler</code>(<var>scheme</var>, <var>url</var>, <var>title</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>registerContentHandler</code>(<var>mimeType</var>, <var>url</var>, <var>title</var>)</dt>

    <dd>

    Registers a handler for the given scheme or content type, at the given URL, with the given
    title.

    The string "<code>%s</code>" in the URL is used as a placeholder for where to put
    the URL of the content to be handled.

    Throws a <code>SecurityError</code> exception if the user agent blocks the registration (this
    might happen if trying to register as a handler for "http", for instance).

    Throws a <code>SyntaxError</code> exception if the "<code>%s</code>" string is
    missing in the URL.

    </dd>

  </dl>

  <div class="impl">

  User agents may, within the constraints described in this section, do whatever they like when
  the methods are called. A UA could, for instance, prompt the user and offer the user the
  opportunity to add the site to a shortlist of handlers, or make the handlers his default, or
  cancel the request. UAs could provide such a UI through modal UI or through a non-modal transient
  notification interface. UAs could also simply silently collect the information, providing it only
  when relevant to the user.

  User agents should keep track of which sites have registered handlers (even if the user has
  declined such registrations) so that the user is not repeatedly prompted with the same
  request.

  The arguments to the methods have the following meanings and corresponding implementation
  requirements. The requirements that involve throwing exceptions must be processed in the order
  given below, stopping at the first exception thrown. (So the exceptions for the first argument
  take precedence over the exceptions for the second argument.)

  <dl>

    <dt><var>scheme</var> (<code>registerProtocolHandler()</code> only)</dt>

    <dd>

    A scheme, such as "<code>mailto</code>" or "<code>web+auth</code>". The
    scheme must be compared in an <a>ASCII case-insensitive</a> manner by user agents for the
    purposes of comparing with the scheme part of URLs that they consider against the list of
    registered handlers.

    The <var>scheme</var> value, if it contains a colon (as in "<code>mailto:</code>"),
    will never match anything, since schemes don't contain colons.

    If the <code>registerProtocolHandler()</code>
    method is invoked with a scheme that is neither a <a>safelisted scheme</a> nor a scheme
    whose value starts with the substring "<code>web+</code>" and otherwise contains only
    <a>lowercase ASCII letters</a>, and whose length is at least five characters (including
    the "<code>web+</code>" prefix), the user agent must throw a <code>SecurityError</code>
    exception.

    The following schemes are the <dfn>safelisted schemes</dfn>:

    <ul class="brief">
      <li><code>bitcoin</code></li>
      <li><code>geo</code></li>
      <li><code>im</code></li>
      <li><code>irc</code></li>
      <li><code>ircs</code></li>
      <li><code>magnet</code></li>
      <li><code>mailto</code></li>
      <li><code>mms</code></li>
      <li><code>news</code></li>
      <li><code>nntp</code></li>
      <li><code>openpgp4fpr</code></li>
      <li><code>sip</code></li>
      <li><code>sms</code></li>
      <li><code>smsto</code></li>
      <li><code>ssh</code></li>
      <li><code>tel</code></li>
      <li><code>urn</code></li>
      <li><code>webcal</code></li>
      <li><code>wtai</code></li>
      <li><code>xmpp</code></li>
    </ul>

    <p class="note">
      This list can be changed. If there are schemes that should be added, please send feedback.
    </p>

    <p class="note">
  This list excludes any schemes that could reasonably be expected to be supported
    inline, e.g. in an <code>iframe</code>, such as <code>http</code> or (more
    theoretically) <code>gopher</code>. If those were supported, they could potentially be
    used in man-in-the-middle attacks, by replacing pages that have frames with such content with
    content under the control of the protocol handler. If the user agent has native support for the
    schemes, this could further be used for cookie-theft attacks.
  </p>

    </dd>

    <dt><var>mimeType</var> (<code>registerContentHandler()</code> only)</dt>

    <dd>

    A <a>MIME type</a>, such as <code>model/vnd.flatland.3dml</code> or <code>application/vnd.google-earth.kml+xml</code>. The <a>MIME type</a> must be
    compared in an <a>ASCII case-insensitive</a> manner by user agents for the purposes of
    comparing with MIME types of documents that they consider against the list of registered
    handlers.

    User agents must compare the given values only to the MIME type/subtype parts of content
    types, not to the complete type including parameters. Thus, if <var>mimeType</var>
    values passed to this method include characters such as commas or whitespace, or include MIME
    parameters, then the handler being registered will never be used.

    <p class="note">
  The type is compared to the <a>MIME type</a> used by the user agent
    <em>after</em> the sniffing algorithms have been applied.
  </p>

    If the <code>registerContentHandler()</code>
    method is invoked with a <a>MIME type</a> that is in the <a>type blocklist</a> or
    that the user agent has deemed a privileged type, the user agent must throw a
    <code>SecurityError</code> exception.

    The following <a>MIME types</a> are in the <dfn>type
    blocklist</dfn>:

    <ul class="brief">

      <li><code>application/x-www-form-urlencoded</code></li>
      <li><code>application/xhtml+xml</code></li>
      <li><code>application/xml</code></li>
      <li><code>image/gif</code></li>
      <li><code>image/jpeg</code></li>
      <li><code>image/png</code></li>
      <li><code>image/svg+xml</code></li>
      <li><code>multipart/x-mixed-replace</code></li>
      <li><code>text/cache-manifest</code></li>
      <li><code>text/css</code></li>
      <li><code>text/html</code></li>
      <li><code>text/ping</code></li>
      <li><code>text/plain</code></li>
      <li><code>text/vtt</code></li>
      <li><code>text/xml</code></li>
      <li>All types that the user agent supports displaying natively in a <a>browsing context</a> during <a>navigation</a>, except for <code>application/rss+xml</code> and <code>application/atom+xml</code></li>

    </ul>

    <p class="note">
  This list can be changed. If there are MIME types that should be added, please
    send feedback.
  </p>

    </dd>

    <dt><var>url</var></dt>

    <dd>

    A string used to build the <a>URL</a> of the page that will handle the requests.

    User agents must throw a <code>SyntaxError</code> exception if the <var>url</var>
    argument passed to one of these methods does not contain the exact literal string
    "<code>%s</code>".

    User agents must throw a <code>SyntaxError</code> exception if <a>resolving</a> the <var>url</var> argument relative to the <a>API base
    URL</a> specified by the <a>entry settings object</a> is not successful.

    <p class="note">
  The resulting <a>absolute URL</a> would by definition not be a <a>valid
    URL</a> as it would include the string "<code>%s</code>" which is not a valid
    component in a URL.
  </p>

    User agents must throw a <code>SecurityError</code> exception if the resulting <a>absolute
    URL</a> has an <a>origin</a> that differs from the <a>origin</a> specified by the
    <a>entry settings object</a>.

    <p class="note">
  This is forcibly the case if the <code>%s</code> placeholder is in the
    scheme, host, or port parts of the URL.
  </p>

    The resulting <a>absolute URL</a> is the <dfn>proto-URL</dfn>. It identifies the
    handler for the purposes of the methods described below.

    When the user agent uses this handler, it must replace the first occurrence of the exact
    literal string "<code>%s</code>" in the <var>url</var> argument with an
    escaped version of the <a>absolute URL</a> of the content in question (as defined below),
    then <a>resolve</a> the resulting URL, relative to the <a>API
    base URL</a> specified by the <a>entry settings object</a> at the time the <code>registerContentHandler()</code> or <code>registerProtocolHandler()</code> methods were
    invoked, and then <a>navigate</a> an appropriate <a>browsing
    context</a> to the resulting URL.

    To get the escaped version of the <a>absolute URL</a> of the content in question, the
    user agent must replace every character in that <a>absolute URL</a> that is not a
    character in the URL <a>default encode set</a> with the result of <a>UTF-8 percent encoding</a> that character.

    <div class="example">
      If the user had visited a site at <code>http://example.com/</code> that made the
      following call:

      <pre highlight="javascript">navigator.registerContentHandler('application/x-soup', 'soup?url=%s', 'SoupWeb&trade;')</pre>

      ...and then, much later, while visiting <code>http://www.example.net/</code>,
      clicked on a link such as:

      <pre highlight="html">
  &lt;a href="chickenk&#xEF;wi.soup">Download our Chicken K&#xEF;wi soup!&lt;/a>
  </pre>

      ...then, assuming this <code>chickenk&#xEF;wi.soup</code> file was served with the
      <a>MIME type</a> <code>application/x-soup</code>, the UA might navigate to the
      following URL:

      <pre>http://example.com/soup?url=http://www.example.net/chickenk%C3%AFwi.soup</pre>

      This site could then fetch the <code>chickenk&#xEF;wi.soup</code> file and do
      whatever it is that it does with soup (synthesize it and ship it to the user, or whatever).
    </div>

    </dd>

    <dt><var>title</var></dt>

    <dd>

    A descriptive title of the handler, which the UA might use to remind the user what the site
    in question is.

    </dd>

  </dl>

  This section does not define how the pages registered by these methods are used, beyond the
  requirements on how to process the <var>url</var> value (see above). To some extent, the
  <a>processing model for navigating across documents</a> defines some cases
  where these methods are relevant, but in general UAs may use this information wherever they would
  otherwise consider handing content to native plugins or helper applications.

  UAs must not use registered content handlers to handle content that was returned as part of a
  non-GET transaction (or rather, as part of any non-idempotent transaction), as the remote site
  would not be able to fetch the same data.

  <hr />

  </div>

  In addition to the registration methods, there are also methods for determining if particular
  handlers have been registered, and for unregistering handlers.

  <dl class="domintro">

    <dt><var>state</var> = <var>window</var> . <code>navigator</code> . <code>isProtocolHandlerRegistered</code>(<var>scheme</var>, <var>url</var>)</dt>
    <dt><var>state</var> = <var>window</var> . <code>navigator</code> . <code>isContentHandlerRegistered</code>(<var>mimeType</var>, <var>url</var>)</dt>

    <dd>

    Returns one of the following strings describing the state of the handler given by the
    arguments:

    <dl>

      <dt><code>new</code>

      <dd>Indicates that no attempt has been made to register the given handler (or that the handler
      has been unregistered). It would be appropriate to promote the availability of the handler or
      to just automatically register the handler.

      <dt><code>registered</code>

      <dd>Indicates that the given handler has been registered or that the site is blocked from
      registering the handler. Trying to register the handler again would have no effect.

      <dt><code>declined</code>

      <dd>Indicates that the given handler has been offered but was rejected. Trying to register the
      handler again may prompt the user again.

    </dl>

    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>unregisterProtocolHandler</code>(<var>scheme</var>, <var>url</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>unregisterContentHandler</code>(<var>mimeType</var>, <var>url</var>)</dt>

    <dd>

    Unregisters the handler given by the arguments.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>isProtocolHandlerRegistered()</code></dfn>
  method must return the <a>handler state string</a> that most closely describes the current
  state of the handler described by the two arguments to the method, where the first argument gives
  the scheme and the second gives the string used to build the <a>URL</a> of the page that
  will handle the requests.

  The first argument must be compared to the schemes for which custom protocol handlers are
  registered in an <a>ASCII case-insensitive</a> manner to find the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The <dfn><code>isContentHandlerRegistered()</code></dfn>
  method must return the <a>handler state string</a> that most closely describes the current
  state of the handler described by the two arguments to the method, where the first argument gives
  the <a>MIME type</a> and the second gives the string used to build the <a>URL</a> of
  the page that will handle the requests.

  The first argument must be compared to the <a>MIME types</a> for which
  custom content handlers are registered in an <a>ASCII case-insensitive</a> manner to find
  the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The <dfn>handler state strings</dfn> are the following strings.
  Each string describes several situations, as given by the following list.

  <dl>

    <dt><code>new</code>

    <dd>The described handler has never been registered for the given scheme or type.

    <dd>The described handler was once registered for the given scheme or type, but the site has
    since unregistered it. If the handler were to be reregistered, the user would be notified
    accordingly.

    <dd>The described handler was once registered for the given scheme or type, but the site has
    since unregistered it, but the user has indicated that the site is to be blocked from registering
    the type again, so the user agent would ignore further registration attempts.

    <dt><code>registered</code>

    <dd>An attempt was made to register the described handler for the given scheme or type, but the
    user has not yet been notified, and the user agent would ignore further registration attempts.
    (Maybe the user agent batches registration requests to display them when the user requests to be
    notified about them, and the user has not yet requested that the user agent notify it of the
    previous registration attempt.)

    <dd>The described handler is registered for the given scheme or type (maybe, or maybe not, as the
    default handler).

    <dd>The described handler is permanently blocked from being (re)registered. (Maybe the user
    marked the registration attempt as spam, or blocked the site for other reasons.)

    <dt><code>declined</code>

    <dd>An attempt was made to register the described handler for the given scheme or type, but the
    user has not yet been notified; however, the user might be notified if another registration
    attempt were to be made. (Maybe the last registration attempt was made while the page was in the
    background and the user closed the page without looking at it, and the user agent requires
    confirmation for this registration attempt.)

    <dd>An attempt was made to register the described handler for the given scheme or type, but the
    user has not yet responded.

    <dd>An attempt was made to register the described handler for the given scheme or type, but the
    user declined the offer. The user has not indicated that the handler is to be permanently
    blocked, however, so another attempt to register the described handler might result in the user
    being prompted again.

    <dd>The described handler was once registered for the given scheme or type, but the user has
    since removed it. The user has not indicated that the handler is to be permanently blocked,
    however, so another attempt to register the described handler might result in the user being
    prompted again.

  </dl>

  <hr />

  The <dfn><code>unregisterProtocolHandler()</code></dfn>
  method must unregister the handler described by the two arguments to the method, where the first
  argument gives the scheme and the second gives the string used to build the <a>URL</a> of
  the page that will handle the requests.

  The first argument must be compared to the schemes for which custom protocol handlers are
  registered in an <a>ASCII case-insensitive</a> manner to find the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The <dfn><code>unregisterContentHandler()</code></dfn>
  method must unregister the handler described by the two arguments to the method, where the first
  argument gives the <a>MIME type</a> and the second gives the string used to build the
  <a>URL</a> of the page that will handle the requests.

  The first argument must be compared to the <a>MIME types</a> for which
  custom content handlers are registered in an <a>ASCII case-insensitive</a> manner to find
  the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The second argument of the four methods described above must be preprocessed as follows:

  <ol>

    <li>If the string does not contain the substring "<code>%s</code>", abort these
    steps. There's no matching handler.</li>

    <li><a>Resolve</a> the string relative to the <a>API base
    URL</a> specified by the <a>entry settings object</a>.</li>

    <li>If this fails, then throw a <code>SyntaxError</code> exception, aborting the
    method.</li>

    <li>If the resulting <a>absolute URL</a>'s <a>origin</a> is not the <a>same
    origin</a> as the <a>origin</a> specified by the <a>entry settings object</a>,
    throw a <code>SecurityError</code> exception, aborting the method.</li>

    <li>Return the resulting <a>absolute URL</a> as the result of preprocessing the
    argument.</li>

  </ol>

  </div>

  <div class="impl">

<h6 id="security-and-privacy"><dfn>Security and privacy</dfn></h6>

  These mechanisms can introduce a number of concerns, in particular privacy concerns.

  <strong>Hijacking all Web usage.</strong> User agents should not allow schemes that are key to
  its normal operation, such as <code>http</code> or <code>https</code>, to be
  rerouted through third-party sites. This would allow a user's activities to be trivially tracked,
  and would allow user information, even in secure connections, to be collected.

  <strong>Hijacking defaults.</strong> User agents are strongly urged to not automatically change
  any defaults, as this could lead the user to send data to remote hosts that the user is not
  expecting. New handlers registering themselves should never automatically cause those sites to be
  used.

  <strong>Registration spamming.</strong> User agents should consider the possibility that a site
  will attempt to register a large number of handlers, possibly from multiple domains (e.g. by
  redirecting through a series of pages each on a different domain, and each registering a handler
  for <code>video/mpeg</code> &mdash; analogous practices abusing other Web browser features have
  been used by pornography Web sites for many years). User agents should gracefully handle such
  hostile attempts, protecting the user.

  <strong>Misleading titles.</strong> User agents should not rely wholly on the <var>title</var>
  argument to the methods when presenting the registered handlers to the user, since sites could
  easily lie. For example, a site <code>hostile.example.net</code> could claim that it was
  registering the "Cuddly Bear Happy Content Handler". User agents should therefore use the
  handler's domain in any UI along with any title.

  <strong>Hostile handler metadata.</strong> User agents should protect against typical attacks
  against strings embedded in their interface, for example ensuring that markup or escape characters
  in such strings are not executed, that null bytes are properly handled, that over-long strings do
  not cause crashes or buffer overruns, and so forth.

  <strong>Leaking Intranet URLs.</strong> The mechanism described in this section can result in
  secret Intranet URLs being leaked, in the following manner:

  <ol>

    <li>The user registers a third-party content handler as the default handler for a content
    type.</li>

    <li>The user then browses his corporate Intranet site and accesses a document that uses that
    content type.</li>

    <li>The user agent contacts the third party and hands the third party the URL to the Intranet
    content.</li>

  </ol>

  No actual confidential file data is leaked in this manner, but the URLs themselves could
  contain confidential information. For example, the URL could be <code>http://www.corp.example.com/upcoming-aquisitions/the-sample-company.egf</code>, which
  might tell the third party that Example Corporation is intending to merge with The Sample Company.
  Implementors might wish to consider allowing administrators to disable this feature for certain
  subdomains, content types, or schemes.

  <strong>Leaking secure URLs.</strong> User agents should not send HTTPS URLs to third-party
  sites registered as content handlers without the user's informed consent, for the same reason that
  user agents sometimes avoid sending <code>Referer</code> (sic) HTTP
  headers from secure sites to third-party sites.

  <strong>Leaking credentials.</strong> User agents must never send username or password
  information in the URLs that are escaped and included sent to the handler sites. User agents may
  even avoid attempting to pass to Web-based handlers the URLs of resources that are known to
  require authentication to access, as such sites would be unable to access the resources in
  question without prompting the user for credentials themselves (a practice that would require the
  user to know whether to trust the third-party handler, a decision many users are unable to make or
  even understand).

  <strong>Interface interference.</strong> User agents should be prepared to handle intentionally
  long arguments to the methods. For example, if the user interface exposed consists of an "accept"
  button and a "deny" button, with the "accept" binding containing the name of the handler, it's
  important that a long name not cause the "deny" button to be pushed off the screen.

  <strong>Fingerprinting users.</strong> Since a site can detect if it has attempted to register
  a particular handler or not, whether or not the user responds, the mechanism can be used to store
  data. User agents are therefore strongly urged to treat registrations in the same manner as
  cookies: clearing cookies for a site should also clear all registrations for that site, and
  disabling cookies for a site should also disable registrations.

  </div>

  <div class="impl">

<h6 id="sample-user-interface"><dfn>Sample user interface</dfn></h6>

  <em>This section is non-normative.</em>

  A simple implementation of this feature for a desktop Web browser might work as follows.

  The <code>registerContentHandler()</code> method
  could display a modal dialog box:

  <img src="images/sample-content-handler-registration.png" width="534" height="374" alt="The modal dialog box could have the title 'Content Handler Registration', and could say 'This Web page: Kittens at work http://kittens.example.org/ ...would like permission to handle files of type: application/x-meowmeow using the following Web-based application: Kittens-at-work displayer http://kittens.example.org/?show=%s Do you trust the administrators of the &quot;kittens.example.org&quot; domain?' with two buttons, 'Trust kittens.example.org' and 'Cancel'." />

  In this dialog box, "Kittens at work" is the title of the page that invoked the method,
  "http://kittens.example.org/" is the URL of that page, "application/x-meowmeow" is the string that
  was passed to the <code>registerContentHandler()</code> method as its first
  argument (<var>mimeType</var>), "http://kittens.example.org/?show=%s" was the second
  argument (<var>url</var>), and "Kittens-at-work displayer" was the third argument (<var>title</var>).

  If the user clicks the Cancel button, then nothing further happens. If the user clicks the
  "Trust" button, then the handler is remembered.

  When the user then attempts to fetch a URL that uses the "application/x-meowmeow" <a>MIME
  type</a>, then it might display a dialog as follows:

  <img src="images/sample-content-handler.png" width="577" height="428" alt="The dialog box could have the title 'Unknown File Type' and could say 'You have attempted to access:' followed by a URL, followed by a prompt such as 'How would you like FerretBrowser to handle this resource?' with three radio buttons, one saying 'Contact the FerretBrowser plugin registry to see if there is an official way to handle this resource.', one saying 'Pass this URL to a local application' with an application selector, and one saying 'Pass this URL to the &quot;Kittens-at-work displayer&quot; application at &quot;kittens.example.org&quot;', with a checkbox labeled 'Always do this for resources using the &quot;application/x-meowmeow&quot; type in future.', and with two buttons, 'Ok' and 'Cancel'." />

  In this dialog, the third option is the one that was primed by the site registering itself
  earlier.

  If the user does select that option, then the browser, in accordance with the requirements
  described in the previous two sections, will redirect the user to
  "http://kittens.example.org/?show=data%3Aapplication/x-meowmeow;base64,S2l0dGVucyBhcmUgdGhlIGN1dGVzdCE%253D".

  The <code>registerProtocolHandler()</code> method
  would work equivalently, but for schemes instead of unknown content types.

  </div>

<h5 id="manually-releasing-the-storage-mutex"><dfn>Manually releasing the storage mutex</dfn></h5>

  <pre class="idl" data-highlight="webidl">
    [NoInterfaceObject]
    interface NavigatorStorageUtils {
      readonly attribute boolean cookieEnabled;
      void yieldForStorageUpdates();
    };
  </pre>

  <dl class="domintro">
    <dt><var>window</var> . <code>navigator</code> . <code>cookieEnabled</code></dt>
    <dd>Returns false if setting a cookie will be ignored, and true otherwise.</dd>
    <dt><var>window</var> . <code>navigator</code> . <code>yieldForStorageUpdates</code>()</dt>
    <dd>
      If a script uses the <code>document.cookie</code> API, or the
      <code>localStorage</code> API, the browser will block other scripts
      from accessing cookies or storage until the first script finishes. [[!WEBSTORAGE]]

      Calling the <code>navigator.{{yieldForStorageUpdates()}}</code> method
      tells the user agent to unblock any other scripts that may be blocked, even though the script
      hasn't returned.

      Values of cookies and items in the <code>Storage</code> objects of <code>localStorage</code> attributes can change after calling this method,
      whence its name. [[!WEBSTORAGE]]
    </dd>
  </dl>

  <div class="impl">

    The <dfn><code>cookieEnabled</code></dfn> attribute must
    return true if the user agent attempts to handle cookies according to the cookie specification,
    and false if it ignores cookie change requests. [[!COOKIES]]

    The <dfn><code>yieldForStorageUpdates()</code></dfn> method,
    when invoked, must, if the <a>storage mutex</a> is owned by the <a>event loop</a> of
    the <a>task</a> that resulted in the method being called, release the
    <a>storage mutex</a> so that it is once again free. Otherwise, it must do nothing.

  </div>

<h5 id="plugins"><dfn>Plugins</dfn></h5>

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject]
  interface <dfn>NavigatorPlugins</dfn> {
  [SameObject] readonly attribute <a>PluginArray</a> <a>plugins</a>;
  [SameObject] readonly attribute <a>MimeTypeArray</a> <a>mimeTypes</a>;
  readonly attribute boolean <a>javaEnabled</a>;
  };

  interface <dfn>PluginArray</dfn> {
  void <a>refresh</a>(optional boolean reload = false);
  readonly attribute unsigned long <a>length</a>;
  getter <a>Plugin</a>? <a>item</a>(unsigned long index);
  getter <a>Plugin</a>? <a>namedItem</a>(DOMString name);
  };

  interface <dfn>MimeTypeArray</dfn> {
  readonly attribute unsigned long <a>length</a>;
  getter <a>MimeType</a>? <a>item</a>(unsigned long index);
  getter <a>MimeType</a>? <a>namedItem</a>(DOMString name);
  };

  interface <dfn>Plugin</dfn> {
  readonly attribute DOMString <a>name</a>;
  readonly attribute DOMString <a>description</a>;
  readonly attribute DOMString <a>filename</a>;
  readonly attribute unsigned long <a>length</a>;
  getter <a>MimeType</a>? <a>item</a>(unsigned long index);
  getter <a>MimeType</a>? <a>namedItem</a>(DOMString name);
  };

  interface <dfn>MimeType</dfn> {
  readonly attribute DOMString <a>type</a>;
  readonly attribute DOMString <a>description</a>;
  readonly attribute DOMString <a>suffixes</a>; // comma-separated
  readonly attribute <a>Plugin</a> <a>enabledPlugin</a>;
  };
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>refresh</code>( [ <var>refresh</var> ] )</dt>
    <dd>
    Updates the lists of supported plugins and MIME types for this page, and reloads the page if the lists have changed.

    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>length</code></dt>
    <dd>
    Returns the number of plugins, represented by <code>Plugin</code> objects, that the user agent reports.
    </dd>

    <dt><var>plugin</var> = <var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>plugins</code>[<var>index</var>]</dt>
    <dd>
    Returns the specified <code>Plugin</code> object.
    </dd>

    <dt><var>plugin</var> = <var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>item</code>(<var>name</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>plugins</code>[<var>name</var>]</dt>
    <dd>
    Returns the <code>Plugin</code> object for the plugin with the given name.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>mimeTypes</code> . <code>length</code></dt>
    <dd>
    Returns the number of MIME types, represented by <code>MimeType</code> objects, supported by the plugins that the user agent reports.
    </dd>

    <dt><var>mimeType</var> = <var>window</var> . <code>navigator</code> . <code>mimeTypes</code> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>mimeTypes</code>[<var>index</var>]</dt>
    <dd>
    Returns the specified <code>MimeType</code> object.
    </dd>

    <dt><var>mimeType</var> = <var>window</var> . <code>navigator</code> . <code>mimeTypes</code> . <code>item</code>(<var>name</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>mimeTypes</code>[<var>name</var>]</dt>
    <dd>
    Returns the <code>MimeType</code> object for the given MIME type.
    </dd>

    <dt><var>plugin</var> . <code>name</code>
    <dd>
    Returns the plugin's name.
    </dd>

    <dt><var>plugin</var> . <code>description</code>
    <dd>
    Returns the plugin's description.
    </dd>

    <dt><var>plugin</var> . <code>filename</code>
    <dd>
    Returns the plugin library's filename, if applicable on the current platform.
    </dd>

    <dt><var>plugin</var> . <code>length</code></dt>
    <dd>
    Returns the number of MIME types, represented by <code>MimeType</code> objects, supported by the plugin.
    </dd>

    <dt><var>mimeType</var> = <var>plugin</var> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>plugin</var>[<var>index</var>]</dt>
    <dd>
    Returns the specified <code>MimeType</code> object.
    </dd>

    <dt><var>mimeType</var> = <var>plugin</var> . <code>item</code>(<var>name</var>)</dt>
    <dt><var>plugin</var>[<var>name</var>]</dt>
    <dd>
    Returns the <code>MimeType</code> object for the given MIME type.
    </dd>

    <dt><var>mimeType</var> . <code>type</code>
    <dd>
    Returns the MIME type.
    </dd>

    <dt><var>mimeType</var> . <code>description</code>
    <dd>
    Returns the MIME type's description.
    </dd>

    <dt><var>mimeType</var> . <code>suffixes</code>
    <dd>
    Returns the MIME type's typical file extensions, in a comma-separated list.
    </dd>

    <dt><var>mimeType</var> . <code>enabledPlugin</code>
    <dd>
    Returns the <code>Plugin</code> object that implements this MIME type.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>javaEnabled</code></dt>
    <dd>
    Returns true if there's a plugin that supports the MIME type "<code>application/x-java-vm</code>".
    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>navigator.plugins</code></dfn> attribute must
  return a <code>PluginArray</code> object.

  The <dfn><code>navigator.mimeTypes</code></dfn> attribute must
  return a <code>MimeTypeArray</code> object.

  <hr />

  A <code>PluginArray</code> object represents none, some, or all of the <a>plugins</a> supported by the user agent, each of which is represented by a <code>Plugin</code> object. Each of these <code>Plugin</code>
  objects may be <dfn>hidden plugins</dfn>. A <a>hidden plugin</a> can't
  be enumerated, but can still be inspected by using its name.

  <p class="note">
  The fewer <a>plugins</a> are represented by the
  <code>PluginArray</code> object, and of those, the more that are <a>hidden</a>, the more the user's privacy will be protected. Each exposed plugin
  increases the number of bits that can be derived for fingerprinting. Hiding a plugin helps, but
  unless it is an extremely rare plugin, it is likely that a site attempting to derive the list of
  plugins can still determine whether the plugin is supported or not by probing for it by name (the
  names of popular plugins are widely known). Therefore not exposing a plugin at all is preferred.
  Unfortunately, many legacy sites use this feature to determine, for example, which plugin to use
  to play video. Not exposing any plugins at all might therefore not be entirely plausible.
  </p>

  The <code>PluginArray</code> objects created by a user agent must not be <a>live</a>. The
  set of plugins represented by the objects must not change once an object is created, except when
  it is updated by the <code>refresh()</code> method.

  Each <a>plugin</a> represented by a <code>PluginArray</code> can support a number of
  <a>MIME types</a>. For each such <a>plugin</a>, the user agent must
  pick one or more of these <a>MIME types</a> to be those that are
  <dfn>explicitly supported</dfn>.

  <p class="note">
  The <a>explicitly supported</a> <a>MIME types</a> of
  a <a>plugin</a> are those that are exposed through the <code>Plugin</code> and <code>MimeTypeArray</code> interfaces. As with <a>plugins</a> themselves, any variation between users regarding what is exposed
  allows sites to fingerprint users. User agents are therefore encouraged to expose the same <a>MIME types</a> for all users of a <a>plugin</a>, regardless of the
  actual types supported... at least, within the constraints imposed by compatibility with legacy
  content.
  </p>

  The <a>supported property indices</a> of a <code>PluginArray</code> object are the
  numbers from zero to the number of non-<a>hidden</a> <a>plugins</a> represented by the object, if any.

  The <dfn><code>length</code></dfn> attribute must return the
  number of non-<a>hidden</a> <a>plugins</a>
  represented by the object.

  The <dfn><code>item()</code></dfn> method of a
  <code>PluginArray</code> object must return null if the argument is not one of the object's
  <a>supported property indices</a>, and otherwise must return the result of running the
  following steps, using the method's argument as <var>index</var>:

  <ol>

    <li>Let <var>list</var> be the <code>Plugin</code> objects
    representing the non-<a>hidden</a> <a>plugins</a> represented by the <code>PluginArray</code> object.</li>

    <li>Sort <var>list</var> alphabetically by the <code>name</code> of each <code>Plugin</code>.</li>

    <li>Return the <var>index</var>th entry in <var>list</var>.</li>

  </ol>

  <p class="note">
  It is important <span class="no-backref">for
  privacy</span> that the order of plugins not leak additional information, e.g. the order in which
  plugins were installed.
  </p>

  The <a>supported property names</a> of a <code>PluginArray</code> object are the values
  of the <code>name</code> attributes of all the <code>Plugin</code> objects represented by the <code>PluginArray</code> object. The
  properties exposed in this way must be <a>unenumerable</a>.

  The <dfn><code>namedItem()</code></dfn> method of a
  <code>PluginArray</code> object must return null if the argument is not one of the object's
  <a>supported property names</a>, and otherwise must return the <code>Plugin</code> object, of those represented by the <code>PluginArray</code>
  object, that has a <code>name</code> equal to the method's argument.

  The <dfn><code>refresh()</code></dfn> method of the
  <code>PluginArray</code> object of a <code>Navigator</code> object, when invoked, must check to
  see if any <a>plugins</a> have been installed or reconfigured since the user
  agent created the <code>PluginArray</code> object. If so, and the method's argument is true, then
  the user agent must act as if the <code>location.reload()</code>
  method was called instead. Otherwise, the user agent must update the <code>PluginArray</code>
  object and <code>MimeTypeArray</code> object created for attributes of that <code>Navigator</code>
  object, and the <code>Plugin</code> and <code>MimeType</code> objects created
  for those <code>PluginArray</code> and <code>MimeTypeArray</code> objects, using the same <code>Plugin</code> objects for cases where the <code>name</code> is the same, and the same <code>MimeType</code> objects for
  cases where the <code>type</code> is the same, and creating new objects
  for cases where there were no matching objects immediately prior to the <code>refresh()</code> call. Old <code>Plugin</code>
  and <code>MimeType</code> objects must continue to return the same values that they had prior to
  the update, though naturally now the data is stale and may appear inconsistent (for example, an
  old <code>MimeType</code> entry might list as its <code>enabledPlugin</code> a <code>Plugin</code>
  object that no longer lists that <code>MimeType</code> as a supported <code>MimeType</code>).

  <hr />

  A <code>MimeTypeArray</code> object represents the <a>MIME types</a>
  <a>explicitly supported</a> by <a>plugins</a> supported by the user
  agent, each of which is represented by a <code>MimeType</code> object.

  The <code>MimeTypeArray</code> objects created by a user agent must not be <a>live</a>.
  The set of MIME types represented by the objects must not change once an object is created, except
  when it is updated by the <code>PluginArray</code> object's <code>refresh()</code> method.

  The <a>supported property indices</a> of a <code>MimeTypeArray</code> object are the
  numbers from zero to the number of <a>MIME types</a> <a>explicitly
  supported</a> by non-<a>hidden</a> <a>plugins</a> represented by the corresponding <code>PluginArray</code> object, if
  any.

  The <dfn><code>length</code></dfn> attribute must return the
  number of <a>MIME types</a> <a>explicitly supported</a> by non-<a>hidden</a> <a>plugins</a> represented by the
  corresponding <code>PluginArray</code> object, if any.

  The <dfn><code>item()</code></dfn> method of a
  <code>MimeTypeArray</code> object must return null if the argument is not one of the object's
  <a>supported property indices</a>, and otherwise must return the result of running the
  following steps, using the method's argument as <var>index</var>:

  <ol>

    <li>Let <var>list</var> be the <code>MimeType</code> objects representing the <a>MIME types</a> <a>explicitly supported</a> by non-<a>hidden</a> <a>plugins</a> represented by the corresponding
    <code>PluginArray</code> object, if any.</li>

    <li>Sort <var>list</var> alphabetically by the <code>type</code> of each <code>MimeType</code>.</li>

    <li>Return the <var>index</var>th entry in <var>list</var>.</li>

  </ol>

  <p class="note">
  It is important <a>for
  privacy</a> that the order of MIME types not leak additional information, e.g. the order in
  which plugins were installed.
  </p>

  The <a>supported property names</a> of a <code>MimeTypeArray</code> object are the values
  of the <code>type</code> attributes of all the <code>MimeType</code>
  objects represented by the <code>MimeTypeArray</code> object. The properties exposed in this way
  must be <a>unenumerable</a>.

  The <dfn><code>namedItem()</code></dfn> method of a
  <code>MimeTypeArray</code> object must return null if the argument is not one of the object's
  <a>supported property names</a>, and otherwise must return the <code>MimeType</code> object
  that has a <code>type</code> equal to the method's argument.

  <hr />

  A <code>Plugin</code> object represents a <a>plugin</a>. It has
  several attributes to provide details about the plugin, and can be enumerated to obtain the list
  of <a>MIME types</a> that it <a>explicitly
  supports</a>.

  The <code>Plugin</code> objects created by a user agent must not be
  <a>live</a>. The set of MIME types represented by the objects, and the values of the
  objects' attributes, must not change once an object is created, except when updated by the
  <code>PluginArray</code> object's <code>refresh()</code>
  method.

  The <dfn>reported MIME types</dfn> for a <code>Plugin</code> object are the
  <a>MIME types</a> <a>explicitly supported</a> by the corresponding
  <a>plugin</a> when this object was last created or updated by <code>PluginArray.refresh()</code>, whichever happened most
  recently.

  The <a>supported property indices</a> of a <code>Plugin</code> object
  are the numbers from zero to the number of <a>reported MIME types</a>.

  The <dfn><code>length</code></dfn> attribute must return the number
  of <a>reported MIME types</a>.

  The <dfn><code>item()</code></dfn> method of a <code>Plugin</code> object must return null if the argument is not one of the
  object's <a>supported property indices</a>, and otherwise must return the result of running
  the following steps, using the method's argument as <var>index</var>:

  <ol>

    <li>Let <var>list</var> be the <code>MimeType</code> objects representing the
    <a>reported MIME types</a>.</li>

    <li>Sort <var>list</var> alphabetically by the <code>type</code> of each <code>MimeType</code>.</li>

    <li>Return the <var>index</var>th entry in <var>list</var>.</li>

  </ol>

  <p class="note">
  It is important <a>for
  privacy</a> that the order of MIME types not leak additional information, e.g. the order in
  which plugins were installed.
  </p>

  The <a>supported property names</a> of a <code>Plugin</code> object
  are the values of the <code>type</code> attributes of the
  <code>MimeType</code> objects representing the <a>reported MIME types</a>. The properties
  exposed in this way must be <a>unenumerable</a>.

  The <dfn><code>namedItem()</code></dfn> method of a <code>Plugin</code> object must return null if the argument is not one of the
  object's <a>supported property names</a>, and otherwise must return the
  <code>MimeType</code> object that has a <code>type</code> equal to the
  method's argument.

  The <dfn><code>name</code></dfn> attribute must return the
  <a>plugin</a>'s name.

  The <dfn><code>description</code></dfn> and <dfn><code>filename</code></dfn> attributes must return user-agent-defined
  (or, in all likelihood, <a>plugin</a>-defined) strings. In each case, the same string must
  be returned each time, except that the strings returned may change when the <code>PluginArray.refresh()</code> method updates the object.

  <p class="warning">If the values returned by the <code>description</code> or <code>filename</code> attributes vary between versions of a
  <a>plugin</a>, they can be used both as a fingerprinting vector and, even more importantly,
  as a trivial way to determine what security vulnerabilities a <a>plugin</a> (and thus a
  browser) may have. It is thus highly recommended that the <code>description</code> attribute just return the same value as the
  <code>name</code> attribute, and that the <code>filename</code> attribute return the empty string.
  </p>


  <hr />

  A <code>MimeType</code> object represents a <a>MIME type</a> that is, or was,
  <a>explicitly supported</a> by a <a>plugin</a>.

  The <code>MimeType</code> objects created by a user agent must not be <a>live</a>. The
  values of the objects' attributes must not change once an object is created, except when updated
  by the <code>PluginArray</code> object's <code>refresh()</code>
  method.

  The <dfn><code>type</code></dfn> attribute must return the
  <a>valid MIME type with no parameters</a> describing the <a>MIME type</a>.

  The <dfn><code>description</code></dfn> and <dfn><code>suffixes</code></dfn> attributes must return
  user-agent-defined (or, in all likelihood, <a>plugin</a>-defined) strings. In each case, the
  same string must be returned each time, except that the strings returned may change when the <code>PluginArray.refresh()</code> method updates the object.

  <p class="warning">If the values returned by the <code>description</code> or <code>suffxies</code> attributes vary between versions of a
  <a>plugin</a>, they can be used both as a fingerprinting vector and, even more importantly,
  as a trivial way to determine what security vulnerabilities a <a>plugin</a> (and thus a
  browser) may have. It is thus highly recommended that the <code>description</code> attribute just return the same value as the
  <code>type</code> attribute, and that the <code>suffixes</code> attribute return the empty string.
  </p>


  <p class="note">
  Commas in the <code>suffixes</code> attribute are
  interpreted as separating subsequent filename extensions, as in "<code>htm,html</code>".
  </p>

  The <dfn><code>enabledPlugin</code></dfn> attribute must
  return the <code>Plugin</code> object that represents the <a>plugin</a>
  that <a>explicitly supported</a> the <a>MIME type</a> that this <code>MimeType</code>
  object represents when this object was last created or updated by <code>PluginArray.refresh()</code>, whichever happened most
  recently.

  <hr />

  The <dfn><code>navigator.javaEnabled</code></dfn> attribute
  must return true if the user agent supports a <a>plugin</a> that supports the <a>MIME
  type</a> "<code>application/x-java-vm</code>"; otherwise it must return false.

  </div>

<h4 id="the-external-interface"><dfn>The <code>External</code> interface</dfn></h4>

  <div class="impl">

  The <dfn><code>external</code></dfn> attribute of the <code>Window</code>
  interface must return an instance of the <code>External</code> interface.

  </div>

  <pre class="idl" data-highlight="webidl">
  interface <dfn>External</dfn> {
  void <a>AddSearchProvider</a>(DOMString engineURL);
  unsigned long <a>IsSearchProviderInstalled</a>(DOMString engineURL);
  };
  </pre>

  <p class="note">
  For historical reasons, members on this interface are capitalized.
  </p>

  <dl class="domintro">

    <dt><var>window</var> . <code>external</code> . <code>AddSearchProvider</code>( <var>url</var> )</dt>
    <dd>

    Adds the search engine described by the OpenSearch description document at <var>url</var>. [[!OPENSEARCH]]

    The OpenSearch description document has to be on the same server as the script that calls
    this method.

    </dd>

    <dt><var>installed</var> = <var>window</var> . <code>external</code> . <code>IsSearchProviderInstalled</code>( <var>url</var> )</dt>
    <dd>

    Returns a value based on comparing <var>url</var> to the URLs of the results pages
    of the installed search engines.

    <dl>
      <dt>0 <dd>None of the installed search engines match <var>url</var>.
      <dt>1 <dd>One or more installed search engines match <var>url</var>, but none are the user's default search engine.
      <dt>2 <dd>The user's default search engine matches <var>url</var>.
    </dl>

    The <var>url</var> is compared to the URLs of the results pages of the installed
    search engines using a prefix match. Only results pages on the same domain as the script that
    calls this method are checked.

    </dd>

  </dl>

  <p class="note">
  Another way of exposing search engines using OpenSearch description documents is
  using a <code>link</code> element with the <code>search</code> link type.
  </p>

  <div class="impl">

    The <dfn><code>AddSearchProvider()</code></dfn> method,
    when invoked, must run the following steps:

    <ol>

    <li>Optionally, abort these steps. User agents may implement the method as a stub method that
    never does anything, or may arbitrarily ignore invocations with particular arguments for
    security, privacy, or usability reasons.</li>

    <li><a>Resolve</a> the value of the method's first argument
    relative to the <a>API base URL</a> specified by the <a>entry settings
    object</a>.</li>

    <li>If this fails, abort these steps.</li>

    <li>Process the resulting <a>absolute URL</a> as the <a>URL</a> to an OpenSearch
    description document. [[!OPENSEARCH]]</li>

    </ol>

    The <dfn><code>IsSearchProviderInstalled()</code></dfn>
    method, when invoked, must run the following steps:

    <ol>

    <li>Optionally, return 0 and abort these steps. User agents may implement the method as a
    stub method that never returns a non-zero value, or may arbitrarily ignore invocations with
    particular arguments for security, privacy, or usability reasons.</li>

    <li>If the <a>origin</a> specified by the <a>entry settings object</a> is an
    opaque identifier (i.e. it has no host component), then return 0 and abort these steps.</li>

    <li>Let <var>host1</var> be the host component of the <a>origin</a> specified
    by the <a>entry settings object</a>.</li>

    <li><a>Resolve</a> the <var>scriptURL</var> argument
    relative to the <a>API base URL</a> specified by the <a>entry settings
    object</a>.</li>

    <li>If this fails, return 0 and abort these steps.</li>

    <li>Let <var>host2</var> be the <a>host</a> component
    of the resulting <a>parsed URL</a>.</li>

    <li>

      If the longest suffix in the Public Suffix List that matches the end of <var>host1</var> is different than the longest suffix in the Public Suffix List that
      matches the end of <var>host2</var>, then return 0 and abort these steps. [[!PSL]]

      If the next domain component of <var>host1</var> and <var>host2</var>
      after their common suffix are not the same, then return 0 and abort these steps.

    </li>

    <li>Let <var>search engines</var> be the list of search engines known by the user
    agent and made available to the user by the user agent for which the resulting <a>absolute
    URL</a> is a <a>prefix match</a> of the search engine's <a>URL</a>, if any. For
    search engines registered using OpenSearch description documents, the <a>URL</a> of the
    search engine corresponds to the URL given in a <code>Url</code> element whose <code>rel</code> attribute is "<code>results</code>" (the default). [[!OPENSEARCH]]</li>

    <li>If <var>search engines</var> is empty, return 0 and abort these steps.</li>

    <li>If the user's default search engine (as determined by the user agent) is one of the
    search engines in <var>search engines</var>, then return 2 and abort these
    steps.</li>

    <li>Return 1.</li>

    </ol>

  </div>

<h3 id="images"><dfn>Images</dfn></h3>

  <pre class="idl" data-highlight="webidl">
  [Exposed=(Window, Worker)]
  interface <dfn>ImageBitmap</dfn> {
  readonly attribute unsigned long <a>width</a>;
  readonly attribute unsigned long <a>height</a>;
  };

  typedef (<a>HTMLImageElement</a> or
          <a>HTMLVideoElement</a> or
          <a>HTMLCanvasElement</a> or
          <a>Blob</a> or
          <a>ImageData</a> or
          <a>CanvasRenderingContext2D</a> or
          <a>ImageBitmap</a>) <dfn>ImageBitmapSource</dfn>;

  [NoInterfaceObject, Exposed=(Window, Worker)]
  interface <dfn>ImageBitmapFactories</dfn> {
  Promise&lt;ImageBitmap&gt; <a>createImageBitmap</a>(<a>ImageBitmapSource</a> image);
  Promise&lt;ImageBitmap&gt; <a>createImageBitmap</a>(<a>ImageBitmapSource</a> image, long sx, long sy, long sw, long sh);
  };
  <a>Window</a> implements <a>ImageBitmapFactories</a>;
  <a>WorkerGlobalScope</a> implements <a>ImageBitmapFactories</a>;
  </pre>

  An <code>ImageBitmap</code> object represents a bitmap image that can be painted to a canvas
  without undue latency.

  <p class="note">
  The exact judgement of what is undue latency of this is left up to the
  implementer, but in general if making use of the bitmap requires network I/O, or even local disk
  I/O, then the latency is probably undue; whereas if it only requires a blocking read from a GPU or
  system RAM, the latency is probably acceptable.
  </p>

  <dl class="domintro">

    <dt><var>promise</var> = <var>Window</var> . <code>createImageBitmap</code>(<var>image</var> [, <var>sx</var>, <var>sy</var>, <var>sw</var>, <var>sh</var> ] )</dt>

    <dd>

    Takes <var>image</var>, which can be an <code>img</code> element,
    <code>video</code>, or <code>canvas</code> element, a <code>Blob</code> object, an
    <code>ImageData</code> object, a <code>CanvasRenderingContext2D</code> object, or another
    <code>ImageBitmap</code> object, and returns a promise that is resolved when a new
    <code>ImageBitmap</code> is created.

    If no <code>ImageBitmap</code> object can be constructed, for example because the provided
    <var>image</var> data is not actually an image, then the promise is rejected instead.

    If <var>sx</var>, <var>sy</var>, <var>sw</var>, and <var>sh</var> arguments are provided, the source image is cropped to the given pixels, with
    any pixels missing in the original replaced by transparent black. These coordinates are in the
    source image's pixel coordinate space, <em>not</em> in CSS pixels.

    Rejects the promise with an <code>InvalidStateError</code> exception if the source image is not in a valid
    state (e.g. an <code>img</code> element that hasn't finished loading, or a
    <code>CanvasRenderingContext2D</code> object whose bitmap data has zero length along one or both
    dimensions, or an <code>ImageData</code> object whose data is <code>data</code> attribute has been <a>neutered</a>). Rejects the promise with a <code>SecurityError</code>
    exception if the script is not allowed to access the image data of the source image (e.g. a
    <code>video</code> that is <a>CORS-cross-origin</a>, or a <code>canvas</code> being drawn
    on by a script in a worker from another <a>origin</a>).

    </dd>

    <dt><var>imageBitmap</var> . <code>width</code></dt>

    <dd>

    Returns the <a>intrinsic width</a> of the image, in CSS pixels.

    </dd>

    <dt><var>imageBitmap</var> . <code>height</code></dt>

    <dd>

    Returns the <a>intrinsic height</a> of the image, in CSS pixels.

    </dd>

  </dl>

  <div class="impl">
    An <code>ImageBitmap</code> object always has associated bitmap data, with a width and a height.
    However, it is possible for this data to be corrupted. If an <code>ImageBitmap</code> object's
    media data can be decoded without errors, it is said to be <dfn>fully decodable</dfn>.

    An <code>ImageBitmap</code> object can be obtained from a variety of different objects, using
    the <dfn><code>createImageBitmap()</code></dfn> method. When invoked, the method must act as
    follows:

    <dl>
    <dt>If <var>image</var> is an <code>img</code> element
    <dd>
    <ol>

      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <code>img</code> element is not <a>completely
      available</a>, then return a promise rejected with an <code>InvalidStateError</code> exception and abort these
      steps.</li>

      <li>If the <a>origin</a> of the <code>img</code> element's image is not the <a>same
      origin</a> as the <a>origin</a> specified by the <a>entry settings object</a>,
      then return a promise rejected with a <code>SecurityError</code> exception and abort these steps.</li>

      <li>If the <code>img</code> element's media data is not a bitmap (e.g. it's a vector
      graphic), then return a promise rejected with an <code>InvalidStateError</code> exception and abort these
      steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the <code>img</code>
      element's media data, <a>cropped to the source rectangle</a>. If this is an animated
      image, the <code>ImageBitmap</code> object's bitmap data must only be taken from the default
      image of the animation (the one that the format defines is to be used when animation is not
      supported or is disabled), or, if there is no such image, the first frame of the
      animation.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    <dt>If <var>image</var> is a <code>video</code> element
    <dd>
    <ol>
      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <code>video</code> element's <code>networkState</code> attribute is <code>NETWORK_EMPTY</code>, then return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>If the <a>origin</a> of the <code>video</code> element is not the <a>same
      origin</a> as the <a>origin</a> specified by the <a>entry settings object</a>,
      then return a promise rejected with a <code>SecurityError</code> exception and abort these steps.</li>

      <li>If the <code>video</code> element's <code>readyState</code> attribute is either <code>HAVE_NOTHING</code> or <code>HAVE_METADATA</code>, then return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the frame at the
      <a>current playback position</a>, at the <a>media resource</a>'s <a>intrinsic width</a> and <a>intrinsic height</a> (i.e. after any aspect-ratio
      correction has been applied), <a>cropped to the source rectangle</a>.

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    <dt>If <var>image</var> is a <code>canvas</code> element
    <dd>
    <ol>
      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <code>canvas</code> element's bitmap data does not have its <a>origin-clean</a> flag set, then return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>If the <code>canvas</code> element's bitmap has either a horizontal dimension or a
      vertical dimension equal to zero, then return a promise rejected with an <code>InvalidStateError</code> exception and
      abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the
      <code>canvas</code> element's bitmap data, <a>cropped to the source
      rectangle</a>.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    <dt>If <var>image</var> is a <code>Blob</code> object
    <dd>
    <ol>
      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <code>Blob</code> object has been disabled through the <code>close()</code> method, then return a promise rejected with an <code>InvalidStateError</code>
      exception and abort these steps.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Read the <code>Blob</code> object's data. If an <a>error
      occurs during reading of the object</a>, then reject the promise with null, and abort these
      steps.</li>

      <li>Apply the <a>image sniffing rules</a> to
      determine the file format of the image data, with MIME type of the <code>Blob</code> (as given
      by the <code>Blob</code> object's <code>type</code> attribute) giving the
      official type.</li>

      <li>If the image data is not in a supported file format (e.g. it's not actually an image at
      all), or if the image data is corrupted in some fatal way such that the image dimensions cannot
      be obtained, then reject the promise with null, and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be the image data read from the
      <code>Blob</code> object, <a>cropped to the source rectangle</a>. If this is an animated
      image, the <code>ImageBitmap</code> object's bitmap data must only be taken from the default
      image of the animation (the one that the format defines is to be used when animation is not
      supported or is disabled), or, if there is no such image, the first frame of the
      animation.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    <dt>If <var>image</var> is an <code>ImageData</code> object
    <dd>
    <ol>
      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <var>image</var> object's <code>data</code>
      attribute has been <a>neutered</a>, return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be the image data given by the
      <code>ImageData</code> object, <a>cropped to the source rectangle</a>.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    <dt>If <var>image</var> is a <code>CanvasRenderingContext2D</code> object
    <dd>
    <ol>
      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <code>CanvasRenderingContext2D</code> object's <a>scratch bitmap</a> does
      not have its <a>origin-clean</a> flag set, then return a promise rejected with
      an <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>If the <code>CanvasRenderingContext2D</code> object's <a>scratch bitmap</a> has
      either a horizontal dimension or a vertical dimension equal to zero, then return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the
      <code>CanvasRenderingContext2D</code> object's <a>scratch bitmap</a>, <a>cropped to
      the source rectangle</a>.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    <dt>If <var>image</var> is an <code>ImageBitmap</code> object
    <dd>
    <ol>
      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the <var>image</var> argument's bitmap data, <a>cropped to the source
      rectangle</a>.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    </dl>
    When the steps above require that the user agent <dfn>crop bitmap data to the source rectangle</dfn>, the user agent must run the following
    steps:
    <ol>
      <li>Let <var>input</var> be the image data being cropped.</li>
      <li>If the <var>sx</var>, <var>sy</var>, <var>sw</var>, and <var>sh</var> arguments are omitted, return <var>input</var>.</li>
      <li>Place <var>input</var> on an infinite transparent black grid plane, positioned so
      that it's top left corner is at the origin of the plane, with the <var>x</var>-coordinate increasing to the right, and the <var>y</var>-coordinate
      increasing down, and with each pixel in the <var>input</var> image data occupying a cell
      on the plane's grid.</li>
      <li>
      Let <var>output</var> be the rectangle on the plane denoted by the rectangle whose
      corners are the four points (<var>sx</var>, <var>sy</var>), (<a><var>sx</var>+<var>sw</var></a>, <var>sy</var>), (<a><var>sx</var>+<var>sw</var></a>, <a><var>sy</var>+<var>sh</var></a>), (<var>sx</var>, <a><var>sy</var>+<var>sh</var></a>).

      <p class="note">
    If either <var>sw</var> or <var>sh</var> are negative, then
      the top-left corner of this rectangle will be to the left or above the (<var>sx</var>,
      <var>sy</var>) point. If any of the pixels on this rectangle are outside the area where
      the <var>input</var> bitmap was placed, then they will be transparent black in <var>output</var>.
    </p>
      </li>
      <li>Return <var>output</var>.</li>
    </ol>

    The <dfn><code>width</code></dfn> attribute must return the <code>ImageBitmap</code> object's
    width, in CSS pixels.

    The <dfn><code>height</code></dfn> attribute must return the <code>ImageBitmap</code> object's
    height, in CSS pixels.
  </div>

  <div class="example">
    Using this API, a sprite sheet can be precut and prepared:

    <pre highlight="javascript">
      var sprites = {};
      function loadMySprites() {
      var image = new Image();
      image.src = 'mysprites.png';
      var resolver;
      var promise = new Promise(function (arg) { resolver = arg });
      image.onload = function () {
        resolver(Promise.all(
          createImageBitmap(image,  0,  0, 40, 40).then(function (image) { sprites.woman = image }),
          createImageBitmap(image, 40,  0, 40, 40).then(function (image) { sprites.man   = image }),
          createImageBitmap(image, 80,  0, 40, 40).then(function (image) { sprites.tree  = image }),
          createImageBitmap(image,  0, 40, 40, 40).then(function (image) { sprites.hut   = image }),
          createImageBitmap(image, 40, 40, 40, 40).then(function (image) { sprites.apple = image }),
          createImageBitmap(image, 80, 40, 40, 40).then(function (image) { sprites.snake = image }),
        ));
      };
      return promise;
      }

      function runDemo() {
      var canvas = document.querySelector('canvas#demo');
      var context = canvas.getContext('2d');
      context.drawImage(sprites.tree, 30, 10);
      context.drawImage(sprites.snake, 70, 10);
      }

      loadMySprites().then(runDemo);
    </pre>
  </div>

<!-- Big Text: HTML Syntax -->

<h2 id="the-html-syntax"><dfn>The HTML syntax</dfn></h2>

  <p class="note">
  This section only describes the rules for resources labeled with an <a>HTML
  MIME type</a>. Rules for XML resources are discussed in the section below entitled "<a>The
  XHTML syntax</a>".
  </p>

<h3 id="writing-html-documents"><dfn>Writing HTML documents</dfn></h3>

  <div class="impl">

  <i>This section only applies to documents, authoring tools, and markup generators. In
  particular, it does not apply to conformance checkers; conformance checkers must use the
  requirements given in the next section ("parsing HTML documents").</i>

  </div>

  Documents must consist of the following parts, in the given
  order:

  <ol>

    <li>Optionally, a single U+FEFF BYTE ORDER MARK (BOM) character.</li>

    <li>Any number of <a>comments</a> and <a>space characters</a>.</li>

    <li>A <a>DOCTYPE</a>.

    <li>Any number of <a>comments</a> and <a>space characters</a>.</li>

    <li>The root element, in the form of an <code>html</code> <a>element</a>.</li>

    <li>Any number of <a>comments</a> and <a>space characters</a>.</li>

  </ol>

  The various types of content mentioned above are described in the next few sections.

  In addition, there are some restrictions on how <a>character encoding declarations</a> are to be serialized, as discussed in the
  section on that topic.

  <div class="note">

    Space characters before the root <code>html</code> element, and space characters at the start
    of the <code>html</code> element and before the <code>head</code> element, will be dropped when
    the document is parsed; space characters <em>after</em> the root <code>html</code> element will
    be parsed as if they were at the end of the <code>body</code> element. Thus, space characters
    around the root element do not round-trip.

    It is suggested that newlines be inserted after the DOCTYPE, after any comments that are
    before the root element, after the <code>html</code> element's start tag (if it is not <a>omitted</a>), and after any comments that are inside the
    <code>html</code> element but before the <code>head</code> element.

  </div>

  Many strings in the HTML syntax (e.g. the names of elements and their attributes) are
  case-insensitive, but only for <a>uppercase ASCII letters</a> and <a>lowercase ASCII
  letters</a>. For convenience, in this section this is just referred to as
  "case-insensitive".

<h4 id="the-doctype"><dfn>The DOCTYPE</dfn></h4>

  A <dfn>DOCTYPE</dfn> is a
  required preamble.

  <p class="note">
  DOCTYPEs are required for legacy reasons. When omitted, browsers tend to use a
  different rendering mode that is incompatible with some specifications. Including the DOCTYPE in a
  document ensures that the browser makes a best-effort attempt at following the relevant
  specifications.
  </p>

  A DOCTYPE must consist of the following components, in this order:

  <ol class="brief">
    <li>A string that is an <a>ASCII case-insensitive</a> match for the string "<code>&lt;!DOCTYPE</code>".</li>
    <li>One or more <a>space characters</a>.</li>
    <li>A string that is an <a>ASCII case-insensitive</a> match for the string "<code>html</code>".</li>
    <li>Optionally, a <a>DOCTYPE legacy string</a> or an <a>obsolete permitted DOCTYPE string</a> (defined below).</li>
    <li>Zero or more <a>space characters</a>.</li>
    <li>A U+003E GREATER-THAN SIGN character (&gt;).</li>
  </ol>

  <p class="note">
  In other words, <code>&lt;!DOCTYPE html></code>, case-insensitively.
  </p>

  <hr />

  For the purposes of HTML generators that cannot output HTML markup with the short DOCTYPE
  "<code>&lt;!DOCTYPE html></code>", a <dfn>DOCTYPE legacy string</dfn> may be inserted
  into the DOCTYPE (in the position defined above). This string must consist of:

  <ol class="brief">
    <li>One or more <a>space characters</a>.</li>
    <li>A string that is an <a>ASCII case-insensitive</a> match for the string "<code>SYSTEM</code>".</li>
    <li>One or more <a>space characters</a>.</li>
    <li>A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the <i>quote mark</i>).</li>
    <li>The literal string "<code>about:legacy-compat</code>".</li>
    <li>A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the same character as in the earlier step labeled <i>quote mark</i>).</li>
  </ol>

  <p class="note">
  In other words, <code>&lt;!DOCTYPE html SYSTEM "about:legacy-compat"></code> or
  <code>&lt;!DOCTYPE html SYSTEM 'about:legacy-compat'></code>, case-insensitively except for the
  part in single or double quotes.
  </p>

  The <a>DOCTYPE legacy string</a> should not be used unless the document is generated from
  a system that cannot output the shorter string.

  <hr />

  To help authors transition from HTML4 and XHTML1, an <dfn>obsolete permitted DOCTYPE
  string</dfn> can be inserted into the DOCTYPE (in the position defined above). This string must
  consist of:

  <ol class="brief">
    <li>One or more <a>space characters</a>.</li>
    <li>A string that is an <a>ASCII case-insensitive</a> match for the string "<code>PUBLIC</code>".</li>
    <li>One or more <a>space characters</a>.</li>
    <li>A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the <i>first quote mark</i>).</li>
    <li>The string from one of the cells in the first column of the table below. The row to which this cell belongs is the <i>selected row</i>.</li>
    <li>A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the same character as in the earlier step labeled <i>first quote mark</i>).</li>

    <li>If a system identifier is used,
      <ol>
        <li>One or more <a>space characters</a>.</li>
        <li>A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the <i>third quote mark</i>).</li>
        <li>The string from the cell in the second column of the <i>selected row</i>.</li>
        <li>A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the same character as in the earlier step labeled <i>third quote mark</i>).</li>
  </ol>
    </li>

  </ol>

  <table>
    <caption>
    Allowed values for public and system identifiers in an <a>obsolete permitted DOCTYPE string</a>.
    </caption>
    <thead>
    <tr>
      <th> Public identifier
      <th> System identifier
      <th> System identifier optional?
    <tbody>
    <tr>
      <td> <code>-//W3C//DTD&nbsp;HTML&nbsp;4.0//EN</code>
      <td> <code>http://www.w3.org/TR/REC-html40/strict.dtd</code>
      <td> Yes
    <tr>
      <td> <code>-//W3C//DTD&nbsp;HTML&nbsp;4.01//EN</code>
      <td> <code>http://www.w3.org/TR/html4/strict.dtd</code>
      <td> Yes
    <tr>
      <td> <code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Strict//EN</code>
      <td> <code>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</code>
      <td> No
    <tr>
      <td> <code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1//EN</code>
      <td> <code>http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</code>
      <td> No
  </table>

  A <a>DOCTYPE</a> containing an <a>obsolete permitted DOCTYPE
  string</a> is an <dfn>obsolete permitted DOCTYPE</dfn>. Authors should not use <a>obsolete permitted DOCTYPEs</a>, as they are unnecessarily
  long.

<h4 id="elements"><dfn>Elements</dfn></h4>

  There are five different kinds of <dfn>elements</dfn>: <a>void
  elements</a>, <a>raw text elements</a>, <a>escapable raw text elements</a>,
  <a>foreign elements</a>, and <a>normal elements</a>.

  <dl>

    <dt><dfn>Void elements</dfn></dt>

    <dd><code>area</code>, <code>base</code>, <code>br</code>, <code>col</code>, <code>embed</code>,
    <code>hr</code>, <code>img</code>, <code>input</code>, <code>keygen</code>, <code>link</code>,
    <code>menuitem</code>, <code>meta</code>, <code>param</code>, <code>source</code>,
    <code>track</code>, <code>wbr</code></dd>

    <dt><dfn>Raw text elements</dfn></dt>

    <dd><code>script</code>, <code>style</code></dd>

    <dt><dfn>escapable raw text elements</dfn></dt>

    <dd><code>textarea</code>, <code>title</code></dd>

    <dt><dfn>Foreign elements</dfn></dt>

    <dd>Elements from the <a>MathML namespace</a> and the <a>SVG namespace</a>.</dd>

    <dt><dfn>Normal elements</dfn></dt>

    <dd>All other allowed <a>HTML elements</a> are normal elements.</dd>

  </dl>

  <dfn>Tags</dfn> are used to delimit the start and end of elements in the
  markup. <a>Raw text</a>, <a>escapable raw text</a>, and <a>normal</a> elements have
  a <a>start tag</a> to indicate where they begin, and an <a>end tag</a> to indicate where they end. The start and end tags of
  certain <a>normal elements</a> can be <a>omitted</a>, as
  described below in the section on <a>optional tags</a>. Those
  that cannot be omitted must not be omitted. <a>Void elements</a> only have a start tag; end
  tags must not be specified for <a>void elements</a>. <a>Foreign elements</a> must
  either have a start tag and an end tag, or a start tag that is marked as self-closing, in which
  case they must not have an end tag.

  The <a>contents</a> of the element must be placed between
  just after the start tag (which <a>might be implied, in certain
  cases</a>) and just before the end tag (which again, <a>might be
  implied in certain cases</a>). The exact allowed contents of each individual element depend on
  the <a>content model</a> of that element, as described earlier in
  this specification. Elements must not contain content that their content model disallows. In
  addition to the restrictions placed on the contents by those content models, however, the five
  types of elements have additional <em>syntactic</em> requirements.

  <a>Void elements</a> can't have any contents (since there's no end tag, no content can be
  put between the start tag and the end tag).

  <a>Raw text elements</a> can have <a>text</a>, though it has <a>restrictions</a> described below.

  <a>Escapable raw text elements</a> can have <a>text</a> and
  <a>character references</a>, but the text must not contain an <a>ambiguous ampersand</a>. There are also <a>further restrictions</a> described below.

  <a>Foreign elements</a> whose start tag is marked as self-closing can't have any contents
  (since, again, as there's no end tag, no content can be put between the start tag and the end
  tag). <a>Foreign elements</a> whose start tag is <em>not</em> marked as self-closing can
  have <a>text</a>, <a>character
  references</a>, <a>CDATA sections</a>, other <a>elements</a>, and <a>comments</a>, but
  the text must not contain the character U+003C LESS-THAN SIGN (&lt;) or an <a>ambiguous ampersand</a>.

  <div class="note">

    The HTML syntax does not support namespace declarations, even in <a>foreign
    elements</a>.

    For instance, consider the following HTML fragment:

    <pre highlight="html">
  &lt;p>
  &lt;svg>
  &lt;metadata>
    &lt;!-- this is invalid -->
    &lt;cdr:license xmlns:cdr="http://www.example.com/cdr/metadata" name="MIT"/>
  &lt;/metadata>
  &lt;/svg>
  &lt;/p>
  </pre>

    The innermost element, <code>cdr:license</code>, is actually in the SVG namespace, as
    the "<code>xmlns:cdr</code>" attribute has no effect (unlike in XML). In fact, as the
    comment in the fragment above says, the fragment is actually non-conforming. This is because the
    SVG specification does not define any elements called "<code>cdr:license</code>" in the
    SVG namespace.

  </div>

  <a>Normal elements</a> can have <a>text</a>, <a>character references</a>, other <a>elements</a>, and <a>comments</a>, but
  the text must not contain the character U+003C LESS-THAN SIGN (&lt;) or an <a>ambiguous ampersand</a>. Some <a>normal elements</a>
  also have <a>yet more restrictions</a> on what content they are
  allowed to hold, beyond the restrictions imposed by the content model and those described in this
  paragraph. Those restrictions are described below.

  Tags contain a <dfn>tag name</dfn>, giving the element's name. HTML
  elements all have names that only use <a>alphanumeric ASCII characters</a>. In the HTML
  syntax, tag names, even those for <a>foreign elements</a>, may be written with any mix of
  lower- and uppercase letters that, when converted to all-lowercase, matches the element's tag
  name; tag names are case-insensitive.

<h5 id="start-tags"><dfn>Start tags</dfn></h5>

  <dfn>Start tags</dfn> must have the following format:

  <ol>

    <li>The first character of a start tag must be a U+003C LESS-THAN SIGN character (&lt;).</li>

    <li>The next few characters of a start tag must be the element's <a>tag name</a>.</li>

    <li>If there are to be any attributes in the next step, there must first be one or more <a>space characters</a>.</li>

    <li>Then, the start tag may have a number of attributes, the <a>syntax for which</a> is described below. Attributes must be
    separated from each other by one or more <a>space
    characters</a>.</li>

    <li>After the attributes, or after the <a>tag name</a> if there are
    no attributes, there may be one or more <a>space characters</a>.
    (Some attributes are required to be followed by a space. See the <a>attributes section</a> below.)</li>

    <li>Then, if the element is one of the <a>void elements</a>, or if the element is a <a>foreign element</a>, then there may be a single U+002F SOLIDUS
    character (/). This character has no effect on <a>void elements</a>, but on <a>foreign
    elements</a> it marks the start tag as self-closing.</li>

    <li>Finally, start tags must be closed by a U+003E GREATER-THAN SIGN character (&gt;).</li>

  </ol>

<h5 id="end-tags"><dfn>End tags</dfn></h5>

  <dfn>End tags</dfn> must have the following format:

  <ol>

    <li>The first character of an end tag must be a U+003C LESS-THAN SIGN character (&lt;).</li>

    <li>The second character of an end tag must be a U+002F SOLIDUS character (/).</li>

    <li>The next few characters of an end tag must be the element's <a>tag
    name</a>.</li>

    <li>After the tag name, there may be one or more <a>space
    characters</a>.</li>

    <li>Finally, end tags must be closed by a U+003E GREATER-THAN SIGN character (&gt;).</li>

  </ol>

<h5 id="attributes"><dfn>Attributes</dfn></h5>

  <dfn>Attributes</dfn> for an element are expressed inside the
  element's start tag.

  Attributes have a name and a value. <dfn>Attribute names</dfn>
  must consist of one or more characters other than the <a>space
  characters</a>, U+0000 NULL, U+0022 QUOTATION MARK (&#x22;), U+0027 APOSTROPHE (&#x27;), U+003E
  GREATER-THAN SIGN (&gt;), U+002F SOLIDUS (/), and U+003D EQUALS SIGN (=) characters, the <a>control
  characters</a>, and any characters that are not defined by Unicode. In the HTML syntax, attribute
  names, even those for <a>foreign elements</a>, may be written with any mix of lower- and
  uppercase letters that are an <a>ASCII case-insensitive</a> match for the attribute's
  name.

  <dfn>Attribute values</dfn> are a mixture of <a>text</a> and <a>character references</a>,
  except with the additional restriction that the text cannot contain an <a>ambiguous ampersand</a>.

  Attributes can be specified in four different ways:

  <dl>

    <dt>Empty attribute syntax</dt>

    <dd>

    Just the <a>attribute name</a>. The value is implicitly
    the empty string.

    <div class="example">
      In the following example, the <code>disabled</code> attribute is
      given with the empty attribute syntax:

      <pre highlight="html">
  &lt;input <em>disabled</em>&gt;
  </pre>
    </div>

    If an attribute using the empty attribute syntax is to be followed by another attribute, then
    there must be a <a>space character</a> separating the two.

    </dd>

    <dt>Unquoted attribute value syntax</dt>

    <dd>

    The <a>attribute name</a>, followed by zero or more <a>space characters</a>, followed by a single U+003D EQUALS SIGN
    character, followed by zero or more <a>space characters</a>,
    followed by the <a>attribute value</a>, which, in addition
    to the requirements given above for attribute values, must not contain any literal <a>space characters</a>, any U+0022 QUOTATION MARK characters (&#x22;),
    U+0027 APOSTROPHE characters (&#x27;), U+003D EQUALS SIGN characters (=), U+003C LESS-THAN SIGN
    characters (&lt;), U+003E GREATER-THAN SIGN characters (&gt;), or U+0060 GRAVE ACCENT characters
    (`), and must not be the empty string.

    <div class="example">
      In the following example, the <code>value</code> attribute is given
      with the unquoted attribute value syntax:

      <pre highlight="html">
  &lt;input <em>value=yes</em>&gt;
  </pre>
    </div>

    If an attribute using the unquoted attribute syntax is to be followed by another attribute or
    by the optional U+002F SOLIDUS character (/) allowed in step 6 of the <a>start tag</a> syntax above, then there must be a <a>space
    character</a> separating the two.

    </dd>

    <dt>Single-quoted attribute value syntax</dt>

    <dd>

    The <a>attribute name</a>, followed by zero or more <a>space characters</a>, followed by a single U+003D EQUALS SIGN
    character, followed by zero or more <a>space characters</a>,
    followed by a single U+0027 APOSTROPHE character ('), followed by the <a>attribute value</a>, which, in addition to the requirements
    given above for attribute values, must not contain any literal U+0027 APOSTROPHE characters ('),
    and finally followed by a second single U+0027 APOSTROPHE character (').

    <div class="example">
      In the following example, the <code>type</code> attribute is given
      with the single-quoted attribute value syntax:

      <pre highlight="html">
  &lt;input <em>type='checkbox'</em>&gt;
  </pre>
    </div>

    If an attribute using the single-quoted attribute syntax is to be followed by another
    attribute, then there must be a <a>space character</a> separating the two.

    </dd>

    <dt>Double-quoted attribute value syntax</dt>

    <dd>

    The <a>attribute name</a>, followed by zero or more <a>space characters</a>, followed by a single U+003D EQUALS SIGN
    character, followed by zero or more <a>space characters</a>,
    followed by a single U+0022 QUOTATION MARK character ("), followed by the <a>attribute value</a>, which, in addition to the requirements
    given above for attribute values, must not contain any literal U+0022 QUOTATION MARK characters
    ("), and finally followed by a second single U+0022 QUOTATION MARK character (").

    <div class="example">
      In the following example, the <code>name</code> attribute is given with
      the double-quoted attribute value syntax:

      <pre highlight="html">
  &lt;input <em>name="be evil"</em>&gt;
  </pre>
    </div>

    If an attribute using the double-quoted attribute syntax is to be followed by another
    attribute, then there must be a <a>space character</a> separating the two.

    </dd>

  </dl>

  There must never be two or more attributes on the same start tag whose names are an <a>ASCII
  case-insensitive</a> match for each other.

  <hr />

  When a <a>foreign element</a> has one of the namespaced
  attributes given by the local name and namespace of the first and second cells of a row from the
  following table, it must be written using the name given by the third cell from the same row.

  <table>
    <thead>
    <tr> <th> Local name <th> Namespace <th> Attribute name
    <tbody>
    <tr> <td> <code>actuate</code> <td> <a>XLink namespace</a> <td> <code>xlink:actuate</code>
    <tr> <td> <code>arcrole</code> <td> <a>XLink namespace</a> <td> <code>xlink:arcrole</code>
    <tr> <td> <code>href</code> <td> <a>XLink namespace</a> <td> <code>xlink:href</code>
    <tr> <td> <code>role</code> <td> <a>XLink namespace</a> <td> <code>xlink:role</code>
    <tr> <td> <code>show</code> <td> <a>XLink namespace</a> <td> <code>xlink:show</code>
    <tr> <td> <code>title</code> <td> <a>XLink namespace</a> <td> <code>xlink:title</code>
    <tr> <td> <code>type</code> <td> <a>XLink namespace</a> <td> <code>xlink:type</code>
    <tr> <td> <code>base</code> <td> <a>XML namespace</a>  <td> <code>xml:base</code>
    <tr> <td> <code>lang</code> <td> <a>XML namespace</a> <td> <code>xml:lang</code>
    <tr> <td> <code>space</code> <td> <a>XML namespace</a> <td> <code>xml:space</code>
    <tr> <td> <code>xmlns</code> <td> <a>XMLNS namespace</a> <td> <code>xmlns</code>
    <tr> <td> <code>xlink</code> <td> <a>XMLNS namespace</a> <td> <code>xmlns:xlink</code>
  </table>

  No other namespaced attribute can be expressed in <a>the HTML syntax</a>.

  <p class="note">
  Whether the attributes in the table above are conforming or not is defined by
  other specifications (e.g. the SVG and MathML specifications); this section only describes the
  syntax rules if the attributes are serialized using the HTML syntax.
  </p>

<h5 id="optional-tags"><dfn>Optional tags</dfn></h5>

  Certain tags can be <dfn>omitted</dfn>.

  <p class="note">
  Omitting an element's <a>start tag</a> in the
  situations described below does not mean the element is not present; it is implied, but it is
  still there. For example, an HTML document always has a root <code>html</code> element, even if
  the string <code>&lt;html></code> doesn't appear anywhere in the markup.
  </p>

  An <code>html</code> element's <a>start tag</a> may be omitted
  if the first thing inside the <code>html</code> element is not a <a>comment</a>.

  <div class="example">
    For example, in the following case it's ok to remove the "<code>&lt;html></code>"
    tag:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  <strong>&lt;html></strong>
  &lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
  &lt;/html>
  </pre>

    Doing so would make the document look like this:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>

  &lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
  &lt;/html>
  </pre>

    This has the exact same DOM. In particular, note that white space around the root element is
    ignored by the parser. The following example would also have the exact same DOM:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>&lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
  &lt;/html>
  </pre>

    However, in the following example, removing the start tag moves the comment to before the
    <code>html</code> element:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  &lt;html>
  <strong>&lt;!-- where is this comment in the DOM? --></strong>
  &lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
  &lt;/html>
  </pre>

    With the tag removed, the document actually turns into the same as this:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  &lt;!-- where is this comment in the DOM? -->
  <small>&lt;html></small>
  &lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
  &lt;/html>
  </pre>

    This is why the tag can only be removed if it is not followed by a comment: removing the tag
    when there is a comment there changes the document's resulting parse tree. Of course, if the
    position of the comment does not matter, then the tag can be omitted, as if the comment had been
    moved to before the start tag in the first place.
  </div>

  An <code>html</code> element's <a>end tag</a> may be omitted if
  the <code>html</code> element is not immediately followed by a <a>comment</a>.

  A <code>head</code> element's <a>start tag</a> may be omitted if
  the element is empty, or if the first thing inside the <code>head</code> element is an
  element.

  A <code>head</code> element's <a>end tag</a> may be omitted if the
  <code>head</code> element is not immediately followed by a <a>space character</a> or a <a>comment</a>.

  A <code>body</code> element's <a>start tag</a> may be omitted
  if the element is empty, or if the first thing inside the <code>body</code> element is not a
  <a>space character</a> or a <a>comment</a>, except if the
  first thing inside the <code>body</code> element is a <code>meta</code>, <code>link</code>,
  <code>script</code>, <code>style</code>, or <code>template</code> element.

  A <code>body</code> element's <a>end tag</a> may be omitted if the
  <code>body</code> element is not immediately followed by a <a>comment</a>.

  <div class="example">
    Note that in the example above, the <code>head</code> element start and end tags, and the
    <code>body</code> element start tag, can't be omitted, because they are surrounded by white
    space:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  &lt;html><strong>
  </strong>&lt;head><strong>
    </strong>&lt;title>Hello&lt;/title><strong>
  </strong>&lt;/head><strong>
  </strong>&lt;body><strong>
    </strong>&lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
  &lt;/html>
  </pre>

    (The <code>body</code> and <code>html</code> element end tags could be omitted without
    trouble; any spaces after those get parsed into the <code>body</code> element anyway.)

    Usually, however, white space isn't an issue. If we first remove the white space we don't care
    about:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>&lt;html>&lt;head>&lt;title>Hello&lt;/title>&lt;/head>&lt;body>&lt;p>Welcome to this example.&lt;/p>&lt;/body>&lt;/html>
  </pre>

    Then we can omit a number of tags without affecting the DOM:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>&lt;title>Hello&lt;/title>&lt;p>Welcome to this example.&lt;/p>
  </pre>

    At that point, we can also add some white space back:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  &lt;title>Hello&lt;/title>
  &lt;p>Welcome to this example.&lt;/p>
  </pre>

    This would be equivalent to this document, with the omitted tags shown in their
    parser-implied positions; the only white space text node that results from this is the newline at
    the end of the <code>head</code> element:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  <small>&lt;html>&lt;head></small>&lt;title>Hello&lt;/title>
  <small>&lt;/head>&lt;body></small>&lt;p>Welcome to this example.&lt;/p><small>&lt;/body>&lt;/html></small>
  </pre>
  </div>

  An <code>li</code> element's <a>end tag</a> may be omitted if the
  <code>li</code> element is immediately followed by another <code>li</code> element or if there is
  no more content in the parent element.

  A <code>dt</code> element's <a>end tag</a> may be omitted if the
  <code>dt</code> element is immediately followed by another <code>dt</code> element or a
  <code>dd</code> element.

  A <code>dd</code> element's <a>end tag</a> may be omitted if the
  <code>dd</code> element is immediately followed by another <code>dd</code> element or a
  <code>dt</code> element, or if there is no more content in the parent element.

  A <code>p</code> element's <a>end tag</a> may be omitted if the
  <code>p</code> element is immediately followed by an <code>address</code>, <code>article</code>,
  <code>aside</code>, <code>blockquote</code>, <code>details</code>, <code>div</code>, <code>dl</code>,
  <code>fieldset</code>, <code>figcaption</code>, <code>figure</code>, <code>footer</code>, <code>form</code>, <code>h1</code>, <code>h2</code>,
  <code>h3</code>, <code>h4</code>, <code>h5</code>, <code>h6</code>, <code>header</code>,
  <code>hr</code>, <code>main</code>, <code>menu</code>, <code>nav</code>,
  <code>ol</code>, <code>p</code>, <code>pre</code>, <code>section</code>, <code>table</code>, or
  <code>ul</code> element, or if there is no more content in the parent element and the parent
  element is an <a>HTML element</a> that is not an <code>a</code>, <code>audio</code>, <code>del</code>,
  <code>ins</code>, <code>map</code>, <code>noscript</code>, or <code>video</code> element.

  <div class="example">
    We can thus simplify the earlier example further:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>&lt;title>Hello&lt;/title>&lt;p>Welcome to this example.<small>&lt;/p></small>
  </pre>
  </div>

  An <code>rt</code> element's <a>end tag</a> may be omitted if the
  <code>rt</code> element is immediately followed by an <code>rt</code> or <code>rp</code> element,
  or if there is no more content in the parent element.

  An <code>rp</code> element's <a>end tag</a> may be omitted if the
  <code>rp</code> element is immediately followed by an <code>rt</code> or <code>rp</code> element,
  or if there is no more content in the parent element.

  An <code>optgroup</code> element's <a>end tag</a> may be omitted
  if the <code>optgroup</code> element  is
  immediately followed by another <code>optgroup</code> element, or if  there is no more content in
  the parent element.

  An <code>option</code> element's <a>end tag</a> may be omitted if
  the <code>option</code> element is immediately followed by another <code>option</code> element, or
  if it is immediately followed by an <code>optgroup</code> element, or if there is no more content
  in the parent element.

  A <code>colgroup</code> element's <a>start tag</a> may be
  omitted if the first thing inside the <code>colgroup</code> element is a <code>col</code> element,
  and if the element is not immediately preceded by another <code>colgroup</code> element whose
  <a>end tag</a> has been omitted. (It can't be omitted if the element
  is empty.)

  A <code>colgroup</code> element's <a>end tag</a> may be omitted if
  the <code>colgroup</code> element is not immediately followed by a <a>space character</a> or
  a <a>comment</a>.

  A <code>caption</code> element's <a>end tag</a> may be omitted if
  the <code>caption</code> element is not immediately followed by a <a>space character</a> or
  a <a>comment</a>.

  A <code>thead</code> element's <a>end tag</a> may be omitted if
  the <code>thead</code> element is immediately followed by a <code>tbody</code> or
  <code>tfoot</code> element.

  A <code>tbody</code> element's <a>start tag</a> may be omitted
  if the first thing inside the <code>tbody</code> element is a <code>tr</code> element, and if the
  element is not immediately preceded by a <code>tbody</code>, <code>thead</code>, or
  <code>tfoot</code> element whose <a>end tag</a> has been omitted. (It
  can't be omitted if the element is empty.)

  A <code>tbody</code> element's <a>end tag</a> may be omitted if
  the <code>tbody</code> element is immediately followed by a <code>tbody</code> or
  <code>tfoot</code> element, or if there is no more content in the parent element.

  A <code>tfoot</code> element's <a>end tag</a> may be omitted if
  the <code>tfoot</code> element is immediately followed by a <code>tbody</code> element, or if
  there is no more content in the parent element.

  A <code>tr</code> element's <a>end tag</a> may be omitted if the
  <code>tr</code> element is immediately followed by another <code>tr</code> element, or if there is
  no more content in the parent element.

  A <code>td</code> element's <a>end tag</a> may be omitted if the
  <code>td</code> element is immediately followed by a <code>td</code> or <code>th</code> element,
  or if there is no more content in the parent element.

  A <code>th</code> element's <a>end tag</a> may be omitted if the
  <code>th</code> element is immediately followed by a <code>td</code> or <code>th</code> element,
  or if there is no more content in the parent element.

  <div class="example">
    The ability to omit all these table-related tags makes table markup much terser.

    Take this example:

    <pre highlight="html">
  &lt;table>
  &lt;caption>37547 TEE Electric Powered Rail Car Train Functions (Abbreviated)&lt;/caption>
  &lt;colgroup>&lt;col>&lt;col>&lt;col>&lt;/colgroup>
  &lt;thead>
  &lt;tr>
    &lt;th>Function&lt;/th>
    &lt;th>Control Unit&lt;/th>
    &lt;th>Central Station&lt;/th>
  &lt;/tr>
  &lt;/thead>
  &lt;tbody>
  &lt;tr>
    &lt;td>Headlights&lt;/td>
    &lt;td>&#x2714;&lt;/td>
    &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;tr>
    &lt;td>Interior Lights&lt;/td>
    &lt;td>&#x2714;&lt;/td>
    &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;tr>
    &lt;td>Electric locomotive operating sounds&lt;/td>
    &lt;td>&#x2714;&lt;/td>
    &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;tr>
    &lt;td>Engineer's cab lighting&lt;/td>
    &lt;td>&lt;/td>
    &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;tr>
    &lt;td>Station Announcements - Swiss&lt;/td>
    &lt;td>&lt;/td>
    &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;/tbody>
  &lt;/table>
  </pre>

    The exact same table, modulo some white space differences, could be marked up as follows:

    <pre highlight="html">
  &lt;table>
  &lt;caption>37547 TEE Electric Powered Rail Car Train Functions (Abbreviated)
  &lt;colgroup>&lt;col>&lt;col>&lt;col>
  &lt;thead>
  &lt;tr>
    &lt;th>Function
    &lt;th>Control Unit
    &lt;th>Central Station
  &lt;tbody>
  &lt;tr>
    &lt;td>Headlights
    &lt;td>&#x2714;
    &lt;td>&#x2714;
  &lt;tr>
    &lt;td>Interior Lights
    &lt;td>&#x2714;
    &lt;td>&#x2714;
  &lt;tr>
    &lt;td>Electric locomotive operating sounds
    &lt;td>&#x2714;
    &lt;td>&#x2714;
  &lt;tr>
    &lt;td>Engineer's cab lighting
    &lt;td>
    &lt;td>&#x2714;
  &lt;tr>
    &lt;td>Station Announcements - Swiss
    &lt;td>
    &lt;td>&#x2714;
  &lt;/table>
  </pre>

    Since the cells take up much less room this way, this can be made even terser by having each
    row on one line:

    <pre highlight="html">
  &lt;table>
  &lt;caption>37547 TEE Electric Powered Rail Car Train Functions (Abbreviated)
  &lt;colgroup>&lt;col>&lt;col>&lt;col>
  &lt;thead>
  &lt;tr> &lt;th>Function                              &lt;th>Control Unit     &lt;th>Central Station
  &lt;tbody>
  &lt;tr> &lt;td>Headlights                            &lt;td>&#x2714;                &lt;td>&#x2714;
  &lt;tr> &lt;td>Interior Lights                       &lt;td>&#x2714;                &lt;td>&#x2714;
  &lt;tr> &lt;td>Electric locomotive operating sounds  &lt;td>&#x2714;                &lt;td>&#x2714;
  &lt;tr> &lt;td>Engineer's cab lighting               &lt;td>                 &lt;td>&#x2714;
  &lt;tr> &lt;td>Station Announcements - Swiss         &lt;td>                 &lt;td>&#x2714;
  &lt;/table>
  </pre>

    The only differences between these tables, at the DOM level, is with the precise position of
    the (in any case semantically-neutral) white space.
  </div>

  <strong>However</strong>, a <a>start tag</a> must never be
  omitted if it has any attributes.

  <div class="example">
    Returning to the earlier example with all the white space removed and then all the optional
    tags removed:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>&lt;title>Hello&lt;/title>&lt;p>Welcome to this example.
  </pre>

    If the <code>body</code> element in this example had to have a <code>class</code> attribute and the <code>html</code> element had to have a <code>lang</code> attribute, the markup would have to become:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>&lt;html lang="en">&lt;title>Hello&lt;/title>&lt;body class="demo">&lt;p>Welcome to this example.
  </pre>
  </div>

  <p class="note">
  This section assumes that the document is conforming, in particular, that there
  are no <a>content model</a> violations. Omitting tags in the fashion
  described in this section in a document that does not conform to the <a>content models</a>
  described in this specification is likely to result in unexpected DOM differences (this is, in
  part, what the content models are designed to avoid).
  </p>

<h5 id="restrictions-on-content-models"><dfn>Restrictions on content models</dfn></h5>

  For historical reasons, certain elements have extra restrictions beyond even the restrictions
  given by their content model.

  A <code>table</code> element must not contain <code>tr</code> elements, even though these
  elements are technically allowed inside <code>table</code> elements according to the content
  models described in this specification. (If a <code>tr</code> element is put inside a
  <code>table</code> in the markup, it will in fact imply a <code>tbody</code> start tag before
  it.)

  A single <a>newline</a> may be placed immediately after the <a>start tag</a> of <code>pre</code> and <code>textarea</code> elements.
  This does not affect the processing of the element. The otherwise optional <a>newline</a> <em>must</em> be included if the element's contents
  themselves start with a <a>newline</a> (because otherwise the
  leading newline in the contents would be treated like the optional newline, and ignored).

  <div class="example">
    The following two <code>pre</code> blocks are equivalent:
    <pre highlight="html">
  &lt;pre>Hello&lt;/pre>
  </pre>
    <pre highlight="html">
  &lt;pre><br>Hello&lt;/pre>
  </pre>
  </div>

<h5 id="restrictions-on-the-contents-of-raw-text-and-escapable-raw-text-elements"><dfn>Restrictions on the contents of raw text and escapable raw text elements</dfn></h5>

  The text in <a>raw text</a> and <a>escapable raw text
  elements</a> must not contain any occurrences of the string "<code>&lt;/</code>"
  (U+003C LESS-THAN SIGN, U+002F SOLIDUS) followed by characters that case-insensitively match the
  tag name of the element followed by one of U+0009 CHARACTER TABULATION (tab), U+000A LINE FEED
  (LF), U+000C FORM FEED (FF), U+000D CARRIAGE RETURN (CR), U+0020 SPACE, U+003E GREATER-THAN SIGN
  (>), or U+002F SOLIDUS (/).

<h4 id="text"><dfn>Text</dfn></h4>

  <dfn>Text</dfn> is allowed inside elements, attribute values, and comments.
  Extra constraints are placed on what is and what is not allowed in text based on where the text is
  to be put, as described in the other sections.

<h5 id="newlines"><dfn>Newlines</dfn></h5>

  <dfn>Newlines</dfn> in HTML may be represented either as U+000D
  CARRIAGE RETURN (CR) characters, U+000A LINE FEED (LF) characters, or pairs of U+000D CARRIAGE
  RETURN (CR), U+000A LINE FEED (LF) characters in that order.

  Where <a>character references</a> are allowed, a character
  reference of a U+000A LINE FEED (LF) character (but not a U+000D CARRIAGE RETURN (CR) character)
  also represents a <a>newline</a>.

<h4 id="character-references"><dfn>Character references</dfn></h4>

  In certain cases described in other sections, <a>text</a> may be
  mixed with <dfn>character references</dfn>. These can be used to escape
  characters that couldn't otherwise legally be included in <a>text</a>.

  Character references must start with a U+0026 AMPERSAND character (&amp;). Following this,
  there are three possible kinds of character references:

  <dl>

    <dt>Named character references</dt>

    <dd>The ampersand must be followed by one of the names given in the <a>named character
    references</a> section, using the same case. <span class="impl">The name must be one that is
    terminated by a U+003B SEMICOLON character (;).</span></dd>

    <dt>Decimal numeric character reference</dt>

    <dd>The ampersand must be followed by a U+0023 NUMBER SIGN character (#), followed by one or more
    <a>ASCII digits</a>, representing a base-ten integer that corresponds to a Unicode code
    point that is allowed according to the definition below. The digits must then be followed by a
    U+003B SEMICOLON character (;).</dd>

    <dt>Hexadecimal numeric character reference</dt>

    <dd>The ampersand must be followed by a U+0023 NUMBER SIGN character (#), which must be followed
    by either a U+0078 LATIN SMALL LETTER X character (x) or a U+0058 LATIN CAPITAL LETTER X
    character (X), which must then be followed by one or more <a>ASCII hex digits</a>,
    representing a hexadecimal integer that corresponds to a Unicode code point that is allowed
    according to the definition below. The digits must then be followed by a U+003B SEMICOLON
    character (;).</dd>

  </dl>

  The numeric character reference forms described above are allowed to reference any Unicode code
  point other than U+0000, U+000D, permanently undefined Unicode characters (noncharacters),
  surrogates (U+D800&ndash;U+DFFF), and <a>control characters</a> other than <a>space characters</a>.

  An <dfn>ambiguous ampersand</dfn> is a U+0026 AMPERSAND
  character (&amp;) that is followed by one or more <a>alphanumeric ASCII characters</a>,
  followed by a U+003B SEMICOLON character (;), where these characters do not match any of the names
  given in the <a>named character references</a> section.

<h4 id="cdata-sections"><dfn>CDATA sections</dfn></h4>

  <dfn>CDATA sections</dfn> must consist of the following components, in
  this order:

  <ol>

    <li>The string "<code>&lt;![CDATA[</code>".</li>

    <li>Optionally, <a>text</a>, with the additional restriction that the
    text must not contain the string "<code>]]&gt;</code>".</li>

    <li>The string "<code>]]&gt;</code>".</li>

  </ol>

  <div class="example">
    CDATA sections can only be used in foreign content (MathML or SVG). In this example, a CDATA
    section is used to escape the contents of an <code>ms</code> element:

    <pre highlight="html">
  &lt;p>You can add a string to a number, but this stringifies the number:&lt;/p>
  &lt;math>
  &lt;ms>&lt;![CDATA[x&lt;y]]>&lt;/ms>
  &lt;mo>+&lt;/mo>
  &lt;mn>3&lt;/mn>
  &lt;mo>=&lt;/mo>
  &lt;ms>&lt;![CDATA[x&lt;y3]]>&lt;/ms>
  &lt;/math>
  </pre>
  </div>

<h4 id="comments"><dfn>Comments</dfn></h4>

  <dfn>Comments</dfn> must start with the four character sequence U+003C
  LESS-THAN SIGN, U+0021 EXCLAMATION MARK, U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS (<code>&lt;!--</code>). Following this sequence, the comment may have <a>text</a>, with the additional restriction that the text must not start with
  a single U+003E GREATER-THAN SIGN character (&gt;), nor start with a U+002D HYPHEN-MINUS character
  (-) followed by a U+003E GREATER-THAN SIGN (&gt;) character, nor contain two consecutive U+002D
  HYPHEN-MINUS characters (<code>--</code>), nor end with a U+002D HYPHEN-MINUS character
  (-). Finally, the comment must be ended by the three character sequence U+002D HYPHEN-MINUS,
  U+002D HYPHEN-MINUS, U+003E GREATER-THAN SIGN (<code>--&gt;</code>).

  <div class="impl">

<h3 id="parsing-html-documents"><dfn>Parsing HTML documents</dfn></h3>

  <i>This section only applies to user agents, data mining tools, and conformance
  checkers.</i>

  <p class="note">
  The rules for parsing XML documents into DOM trees are covered by the next
  section, entitled "<a>The XHTML syntax</a>".
  </p>

  User agents must use the parsing rules described in this section to generate the DOM trees from
  <code>text/html</code> resources. Together, these rules define what is referred to as the
  <dfn>HTML parser</dfn>.

  <div class="note">

    While the HTML syntax described in this specification bears a close resemblance to SGML and
    XML, it is a separate language with its own parsing rules.

    Some earlier versions of HTML (in particular from HTML2 to HTML4) were based on SGML and used
    SGML parsing rules. However, few (if any) web browsers ever implemented true SGML parsing for
    HTML documents; the only user agents to strictly handle HTML as an SGML application have
    historically been validators. The resulting confusion &mdash; with validators claiming documents
    to have one representation while widely deployed Web browsers interoperably implemented a
    different representation &mdash; has wasted decades of productivity. This version of HTML thus
    returns to a non-SGML basis.

    Authors interested in using SGML tools in their authoring pipeline are encouraged to use XML
    tools and the XML serialization of HTML.

  </div>

  This specification defines the parsing rules for HTML documents, whether they are syntactically
  correct or not. Certain points in the parsing algorithm are said to be <dfn>parse errors</dfn>. The error handling for parse errors is well-defined (that's the
  processing rules described throughout this specification), but user agents, while parsing an HTML
  document, may <a>abort the parser</a> at the first <a>parse
  error</a> that they encounter for which they do not wish to apply the rules described in this
  specification.

  Conformance checkers must report at least one parse error condition to the user if one or more
  parse error conditions exist in the document and must not report parse error conditions if none
  exist in the document. Conformance checkers may report more than one parse error condition if more
  than one parse error condition exists in the document.

  <p class="note">
  Parse errors are only errors with the <em>syntax</em> of HTML. In addition to
  checking for parse errors, conformance checkers will also verify that the document obeys all the
  other conformance requirements described in this specification.
  </p>

  For the purposes of conformance checkers, if a resource is determined to be in <a>the HTML
  syntax</a>, then it is an <a>HTML document</a>.

  <p class="note">
  As stated <span class="no-backref">in the terminology
  section</span>, references to <a>element types</a> that do not
  explicitly specify a namespace always refer to elements in the <a>HTML namespace</a>. For
  example, if the spec talks about "a <code>menuitem</code> element", then that is an element with
  the local name "<code>menuitem</code>", the namespace "<code>http://www.w3.org/1999/xhtml</code>", and the interface <code>HTMLMenuItemElement</code>.
  Where possible, references to such elements are hyperlinked to their definition.
  </p>

  </div>

  <div class="impl">

<h4 id="overview-of-the-parsing-model"><dfn>Overview of the parsing model</dfn></h4>

  <object data="images/parsing-model-overview.svg" width="345" height="535"><img src="images/parsing-model-overview.png" width="345" height="450" alt="" /></object>

  The input to the HTML parsing process consists of a stream of <a>Unicode code points</a>, which is passed through a <a>tokenization</a> stage
  followed by a <a>tree construction</a> stage. The output is a <code>Document</code>
  object.

  <p class="note">
  Implementations that <a>do not support scripting</a> do not
  have to actually create a DOM <code>Document</code> object, but the DOM tree in such cases is
  still used as the model for the rest of the specification.
  </p>

  In the common case, the data handled by the tokenization stage comes from the network, but
  <a>it can also come from script</a> running in the user
  agent, e.g. using the <code>document.write()</code> API.

  There is only one set of states for the tokenizer stage and the tree
  construction stage, but the tree construction stage is reentrant, meaning that while the tree
  construction stage is handling one token, the tokenizer might be resumed, causing further tokens
  to be emitted and processed before the first token's processing is complete.

  <div class="example">
    In the following example, the tree construction stage will be called upon to handle a "p"
    start tag token while handling the "script" end tag token:

    <pre highlight="html">
  ...
  &lt;script>
  document.write('&lt;p>');
  &lt;/script>
  ...
  </pre>
  </div>

  To handle these cases, parsers have a <dfn>script nesting level</dfn>, which must be initially
  set to zero, and a <dfn>parser pause flag</dfn>, which must be initially set to false.

  </div>

  <div class="impl">

<h4 id="the-input-byte-stream"><dfn>The <dfn>input byte stream</dfn></dfn></h4>

  The stream of Unicode code points that comprizes the input to the tokenization stage will be
  initially seen by the user agent as a stream of bytes (typically coming over the network or from
  the local file system). The bytes encode the actual characters according to a particular
  <i>character encoding</i>, which the user agent uses to decode the bytes into characters.

  <p class="note">
  For XML documents, the algorithm user agents are required to use to determine the
  character encoding is given by the XML specification. This section does not apply to XML
  documents. [[!XML]]
  </p>

  Usually, the <a>encoding sniffing algorithm</a> defined below is used to determine the
  character encoding.

  Given a character encoding, the bytes in the <a>input byte stream</a> must be converted
  to Unicode code points for the tokenizer's <a>input stream</a>, as described by the rules
  for that encoding's <a>decoder</a>.

  <p class="note">
  Bytes or sequences of bytes in the original byte stream that did not conform to
  the Encoding standard (e.g. invalid UTF-8 byte sequences in a UTF-8 input byte stream) are errors
  that conformance checkers are expected to report. [[!ENCODING]]
  </p>

  <p class="note">
  Leading Byte Order Marks (BOMs) are not stripped by the decoder algorithms, they
  are stripped by the algorithm below.
  </p>

  <p class="warning">The decoder algorithms describe how to handle invalid input; for security
  reasons, it is imperative that those rules be followed precisely. Differences in how invalid byte
  sequences are handled can result in, amongst other problems, script injection vulnerabilities
  ("XSS").</p>

  When the HTML parser is decoding an input byte stream, it uses a character encoding and a <dfn>confidence</dfn>. The confidence is either <i>tentative</i>,
  <i>certain</i>, or <i>irrelevant</i>. The encoding used, and whether the confidence in that
  encoding is <i>tentative</i> or <i>certain</i>, is <a>used
  during the parsing</a> to determine whether to <a>change the encoding</a>. If no encoding is
  necessary, e.g. because the parser is operating on a Unicode stream and doesn't have to use a
  character encoding at all, then the <a>confidence</a> is
  <i>irrelevant</i>.

  <p class="note">
  Some algorithms feed the parser by directly adding characters to the <a>input
  stream</a> rather than adding bytes to the <a>input byte stream</a>.
  </p>

<h5 id="parsing-with-a-known-character-encoding"><dfn>Parsing with a known character encoding</dfn></h5>

  When the HTML parser is to operate on an input byte stream that has <dfn>a known definite
  encoding</dfn>, then the character encoding is that encoding and the <a>confidence</a> is <i>certain</i>.

<h5 id="determining-the-character-encoding"><dfn>Determining the character encoding</dfn></h5>

  In some cases, it might be impractical to unambiguously determine the encoding before parsing
  the document. Because of this, this specification provides for a two-pass mechanism with an
  optional pre-scan. Implementations are allowed, as described below, to apply a simplified parsing
  algorithm to whatever bytes they have available before beginning to parse the document. Then, the
  real parser is started, using a tentative encoding derived from this pre-parse and other
  out-of-band metadata. If, while the document is being loaded, the user agent discovers a character
  encoding declaration that conflicts with this information, then the parser can get reinvoked to
  perform a parse of the document with the real encoding.

  User agents must use the following algorithm, called the <dfn>encoding
  sniffing algorithm</dfn>, to determine the character encoding to use when decoding a document in
  the first pass. This algorithm takes as input any out-of-band metadata available to the user agent
  (e.g. the <a>Content-Type metadata</a> of the document) and all the
  bytes available so far, and returns a character encoding and a <a>confidence</a> that is either <i>tentative</i> or
  <i>certain</i>.

  <ol>

    <li>

    If the user has explicitly instructed the user agent to override the document's character
    encoding with a specific encoding, optionally return that encoding with the <a>confidence</a> <i>certain</i> and abort these steps.

    <p class="note">
  Typically, user agents remember such user requests across sessions, and in some
    cases apply them to documents in <code>iframe</code>s as well.
  </p>

    </li>

    <li>

    The user agent may wait for more bytes of the resource to be available, either in this step
    or at any later step in this algorithm. For instance, a user agent might wait 500ms or 1024
    bytes, whichever came first. In general preparsing the source to find the encoding improves
    performance, as it reduces the need to throw away the data structures used when parsing upon
    finding the encoding information. However, if the user agent delays too long to obtain data to
    determine the encoding, then the cost of the delay could outweigh any performance improvements
    from the preparse.

    <p class="note">
  The authoring conformance requirements for character encoding declarations limit
    them to only appearing <a>in the first 1024 bytes</a>. User agents are
    therefore encouraged to use the prescan algorithm below (as invoked by these steps) on the first
    1024 bytes, but not to stall beyond that.
  </p>

    </li>

    <li>

    For each of the rows in the following table, starting with the first one and going down, if
    there are as many or more bytes available than the number of bytes in the first column, and the
    first bytes of the file match the bytes given in the first column, then return the encoding
    given in the cell in the second column of that row, with the <a>confidence</a> <i>certain</i>, and abort these steps:

    <table>
      <thead>
      <tr>
        <th>Bytes in Hexadecimal
        <th>Encoding
      <tbody>

      <tr>
        <td>FE FF
        <td>Big-endian UTF-16
      <tr>
        <td>FF FE
        <td>Little-endian UTF-16
      <tr>
        <td>EF BB BF
        <td>UTF-8

    </table>

    <p class="note">
  This step looks for Unicode Byte Order Marks (BOMs).
  </p>

    <p class="note">
  That this step happens before the next one honoring the HTTP
    <code>Content-Type</code> header is a <a>willful violation</a> of the HTTP specification,
    motivated by a desire to be maximally compatible with legacy content. [[HTTP11]]
  </p>

    </li>

    <li>If the transport layer specifies a character encoding, and it is supported, return that
    encoding with the <a>confidence</a> <i>certain</i>, and
    abort these steps.</li>

    <li>

    Optionally <a>prescan the byte
    stream to determine its encoding</a>. The <var>end condition</var> is that the user
    agent decides that scanning further bytes would not be efficient. User agents are encouraged to
    only prescan the first 1024 bytes. User agents may decide that scanning <em>any</em> bytes is
    not efficient, in which case these substeps are entirely skipped.

    The aforementioned algorithm either aborts unsuccessfully or returns a character encoding. If
    it returns a character encoding, then this algorithm must be aborted, returning the same
    encoding, with <a>confidence</a> <i>tentative</i>.

    </li>

    <li>

    If the <a>HTML parser</a> for which this algorithm is being run is associated with a
    <code>Document</code> that is itself in a <a>nested browsing context</a>, run these
    substeps:

    <ol>

      <li>Let <var>new document</var> be the <code>Document</code> with which the
      <a>HTML parser</a> is associated.</li>

      <li>Let <var>parent document</var> be the <code>Document</code> <a>through which <var>new document</var> is
      nested</a> (the <a>active document</a> of the <a>parent browsing context</a> of
      <var>new document</var>).</li>

      <li>If <var>parent document</var>'s <a>origin</a> is not the <a>same
      origin</a> as <var>new document</var>'s <a>origin</a>, then abort these
      substeps.</li>

      <li>If <var>parent document</var>'s <a>character encoding</a> is not an <a>ASCII-compatible encoding</a>, then
      abort these substeps.</li>

      <li>Return <var>parent document</var>'s <a>character encoding</a>, with the <a>confidence</a> <i>tentative</i>, and abort the
      <a>encoding sniffing algorithm</a>'s steps.</li>

    </ol>

    </li>

    <li>Otherwise, if the user agent has information on the likely encoding for this page, e.g.
    based on the encoding of the page when it was last visited, then return that encoding, with the
    <a>confidence</a> <i>tentative</i>, and abort these
    steps.</li>

    <li>

    The user agent may attempt to autodetect the character encoding from applying frequency
    analysis or other algorithms to the data stream. Such algorithms may use information about the
    resource other than the resource's contents, including the address of the resource. If
    autodetection succeeds in determining a character encoding, and that encoding is a supported
    encoding, then return that encoding, with the <a>confidence</a> <i>tentative</i>, and abort these steps.
    [[!UNIVCHARDET]]

    <p class="note">
  User agents are generally discouraged from attempting to autodetect encodings
    for resources obtained over the network, since doing so involves inherently non-interoperable
    heuristics. Attempting to detect encodings based on an HTML document's preamble is especially
    tricky since HTML markup typically uses only ASCII characters, and HTML documents tend to begin
    with a lot of markup rather than with text content.
  </p>

    <p class="note">
  The UTF-8 encoding has a highly detectable bit pattern. Files from the local
    file system that contain bytes with values greater than 0x7F which match the UTF-8 pattern are
    very likely to be UTF-8, while documents with byte sequences that do not match it are very
    likely not. When a user agent can examine the whole file, rather than just the preamble,
    detecting for UTF-8 specifically can be especially effective. [[!PPUTF8]] [[!UTF8DET]]
  </p>

    </li>

    <li>

    Otherwise, return an implementation-defined or user-specified default character encoding,
    with the <a>confidence</a> <i>tentative</i>.

    In controlled environments or in environments where the encoding of documents can be
    prescribed (for example, for user agents intended for dedicated use in new networks), the
    comprehensive <code>UTF-8</code> encoding is suggested.

    In other environments, the default encoding is typically dependent on the user's locale (an
    approximation of the languages, and thus often encodings, of the pages that the user is likely
    to frequent). The following table gives suggested defaults based on the user's locale, for
    compatibility with legacy content. Locales are identified by BCP 47 language tags. [[!BCP47]] [[!ENCODING]]

    <table>
      <thead>
      <tr>
        <th colspan="2">Locale language
        <th>Suggested default encoding
      <tbody>

      <tr>
        <td>ar
        <td>Arabic
        <td>windows-1256

      <tr>
        <td>ba
        <td>Bashkir
        <td>windows-1251

      <tr>
        <td>be
        <td>Belarusian
        <td>windows-1251

      <tr>
        <td>bg
        <td>Bulgarian
        <td>windows-1251

      <tr>
        <td>cs
        <td>Czech
        <td>windows-1250

      <tr>
        <td>el
        <td>Greek
        <td>ISO-8859-7

      <tr>
        <td>et
        <td>Estonian
        <td>windows-1257

      <tr>
        <td>fa
        <td>Persian
        <td>windows-1256

      <tr>
        <td>he
        <td>Hebrew
        <td>windows-1255

      <tr>
        <td>hr
        <td>Croatian
        <td>windows-1250

      <tr>
        <td>hu
        <td>Hungarian
        <td>ISO-8859-2

      <tr>
        <td>ja
        <td>Japanese
        <td>Shift_JIS

      <tr>
        <td>kk
        <td>Kazakh
        <td>windows-1251

      <tr>
        <td>ko
        <td>Korean
        <td>euc-kr

      <tr>
        <td>ku
        <td>Kurdish
        <td>windows-1254

      <tr>
        <td>ky
        <td>Kyrgyz
        <td>windows-1251

      <tr>
        <td>lt
        <td>Lithuanian
        <td>windows-1257

      <tr>
        <td>lv
        <td>Latvian
        <td>windows-1257

      <tr>
        <td>mk
        <td>Macedonian
        <td>windows-1251

      <tr>
        <td>pl
        <td>Polish
        <td>ISO-8859-2

      <tr>
        <td>ru
        <td>Russian
        <td>windows-1251

      <tr>
        <td>sah
        <td>Yakut
        <td>windows-1251

      <tr>
        <td>sk
        <td>Slovak
        <td>windows-1250

      <tr>
        <td>sl
        <td>Slovenian
        <td>ISO-8859-2

      <tr>
        <td>sr
        <td>Serbian
        <td>windows-1251

      <tr>
        <td>tg
        <td>Tajik
        <td>windows-1251

      <tr>
        <td>th
        <td>Thai
        <td>windows-874

      <tr>
        <td>tr
        <td>Turkish
        <td>windows-1254

      <tr>
        <td>tt
        <td>Tatar
        <td>windows-1251

      <tr>
        <td>uk
        <td>Ukrainian
        <td>windows-1251

      <tr>
        <td>vi
        <td>Vietnamese
        <td>windows-1258

      <tr>
        <td>zh-CN
        <td>Chinese (People's Republic of China)
        <td>GB18030

      <tr>
        <td>zh-TW
        <td>Chinese (Taiwan)
        <td>Big5

      <tr>
        <td colspan="2">All other locales
        <td>windows-1252

    </table>

    <small>The contents of this table are derived from the intersection of
    Windows, Chrome, and Firefox defaults.</small>

    </li>

  </ol>

  The <a>document's character encoding</a> must immediately be set to the value returned
  from this algorithm, at the same time as the user agent uses the returned value to select the
  decoder to use for the input byte stream.

  <hr />

  When an algorithm requires a user agent to <dfn>prescan a byte stream to determine its
  encoding</dfn>, given some defined <var>end condition</var>, then it must run the
  following steps. These steps either abort unsuccessfully or return a character encoding. If at any
  point during these steps (including during instances of the <a>get an attribute</a> algorithm invoked by this
  one) the user agent either runs out of bytes (meaning the <var>position</var> pointer
  created in the first step below goes beyond the end of the byte stream obtained so far) or reaches
  its <var>end condition</var>, then abort the <a>prescan a byte stream to determine its
  encoding</a> algorithm unsuccessfully.

  <ol>

    <li>

    Let <var>position</var> be a pointer to a byte in the input byte stream, initially
    pointing at the first byte.

    </li>

    <li>

    <i>Loop</i>: If <var>position</var> points to:

    <dl class="switch">

      <dt>A sequence of bytes starting with: 0x3C 0x21 0x2D 0x2D (ASCII '&lt;!--')</dt>
      <dd>

      Advance the <var>position</var> pointer so that it points at the first 0x3E byte
      which is preceded by two 0x2D bytes (i.e. at the end of an ASCII '-->' sequence) and comes
      after the 0x3C byte that was found. (The two 0x2D bytes can be the same as the those in the
      '&lt;!--' sequence.)

      </dd>

      <dt>A sequence of bytes starting with: 0x3C, 0x4D or 0x6D, 0x45 or 0x65, 0x54 or 0x74, 0x41 or 0x61, and one of 0x09, 0x0A, 0x0C, 0x0D, 0x20, 0x2F (case-insensitive ASCII '&lt;meta' followed by a space or slash)</dt>
      <dd>

      <ol>

        <li>Advance the <var>position</var> pointer so that it points at the next 0x09,
        0x0A, 0x0C, 0x0D, 0x20, or 0x2F byte (the one in sequence of characters matched
        above).</li>

        <li>Let <var>attribute list</var> be an empty list of strings.</li>

        <li>Let <var>got pragma</var> be false.</li>

        <li>Let <var>need pragma</var> be null.</li>

        <li>Let <var>charset</var> be the null value (which, for the purposes of this
        algorithm, is distinct from an unrecognized encoding or the empty string).</li>

        <li><i>Attributes</i>: <a>Get an
        attribute</a> and its value. If no attribute was sniffed, then jump to the
        <i>processing</i> step below.</li>

        <li>If the attribute's name is already in <var>attribute list</var>, then return
        to the step labeled <i>attributes</i>.

        <li>Add the attribute's name to <var>attribute list</var>.

        <li>

        Run the appropriate step from the following list, if one applies:

        <dl class="switch">

          <dt>If the attribute's name is "<code>http-equiv</code>"</dt>

          <dd>If the attribute's value is "<code>content-type</code>", then set <var>got pragma</var> to true.</dd>

          <dt>If the attribute's name is "<code>content</code>"</dt>

          <dd>Apply the <a>algorithm for extracting a character encoding from a
          <code>meta</code> element</a>, giving the attribute's value as the string to parse. If a
          character encoding is returned, and if <var>charset</var> is still set to null,
          let <var>charset</var> be the encoding returned, and set <var>need
          pragma</var> to true.</dd>

          <dt>If the attribute's name is "<code>charset</code>"</dt>

          <dd>Let <var>charset</var> be the result of <a>getting an encoding</a>
          from the attribute's value, and set <var>need pragma</var> to false.</dd>

        </dl>

        </li>

        <li>Return to the step labeled <i>attributes</i>.</li>

        <li><i>Processing</i>: If <var>need pragma</var> is null, then jump to the step
        below labeled <i>next byte</i>.</li>

        <li>If <var>need pragma</var> is true but <var>got pragma</var> is
        false, then jump to the step below labeled <i>next byte</i>.</li>

        <li>If <var>charset</var> is a <a>UTF-16 encoding</a>, change the value of
        <var>charset</var> to UTF-8.</li>

        <li>If <var>charset</var> is the x-user-defined encoding, change the value of
        <var>charset</var> to Windows-1252. [[!ENCODING]]</li>

        <li>If <var>charset</var> is not a supported character encoding, then jump to the
        step below labeled <i>next byte</i>.</li>

        <li>Abort the <a>prescan a byte stream to determine its encoding</a> algorithm,
        returning the encoding given by <var>charset</var>.</li>

      </ol>

      </dd>

      <dt>A sequence of bytes starting with a 0x3C byte (ASCII &lt;), optionally a 0x2F byte (ASCII /), and finally a byte in the range 0x41-0x5A or 0x61-0x7A (an ASCII letter)</dt>
      <dd>

      <ol>

        <li>Advance the <var>position</var> pointer so that it points at the next 0x09
        (ASCII TAB), 0x0A (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), 0x20 (ASCII space), or 0x3E
        (ASCII >) byte.</li>

        <li>Repeatedly <a>get an attribute</a>
        until no further attributes can be found, then jump to the step below labeled <i>next
        byte</i>.</li>

      </ol>

      </dd>

      <dt>A sequence of bytes starting with: 0x3C 0x21 (ASCII '&lt;!')</dt>
      <dt>A sequence of bytes starting with: 0x3C 0x2F (ASCII '&lt;/')</dt>
      <dt>A sequence of bytes starting with: 0x3C 0x3F (ASCII '&lt;?')</dt>
      <dd>

      Advance the <var>position</var> pointer so that it points at the first 0x3E byte
      (ASCII >) that comes after the 0x3C byte that was found.

      </dd>

      <dt>Any other byte</dt>
      <dd>

      Do nothing with that byte.

      </dd>

    </dl>

    </li>

    <li><i>Next byte</i>: Move <var>position</var> so it points at the next byte in the
    input byte stream, and return to the step above labeled <i>loop</i>.</li>

  </ol>

  When the <a>prescan a byte stream to determine its encoding</a> algorithm says to <dfn>get an attribute</dfn>, it means doing this:

  <ol>

    <li>If the byte at <var>position</var> is one of 0x09 (ASCII TAB), 0x0A (ASCII LF),
    0x0C (ASCII FF), 0x0D (ASCII CR), 0x20 (ASCII space), or 0x2F (ASCII /) then advance <var>position</var> to the next byte and redo this step.</li>

    <li>If the byte at <var>position</var> is 0x3E (ASCII >), then abort the <a>get an attribute</a> algorithm. There isn't
    one.</li>

    <li>Otherwise, the byte at <var>position</var> is the start of the attribute name.
    Let <var>attribute name</var> and <var>attribute value</var> be the empty
    string.</li>

    <li>Process the byte at <var>position</var> as follows:

    <dl class="switch">

      <dt>If it is 0x3D (ASCII =), and the <var>attribute name</var> is longer than the
      empty string</dt>

      <dd>Advance <var>position</var> to the next byte and jump to the step below labeled
      <i>value</i>.</dd>

      <dt>If it is 0x09 (ASCII TAB), 0x0A (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20
      (ASCII space)</dt>

      <dd>Jump to the step below labeled <i>spaces</i>.</dd>

      <dt>If it is 0x2F (ASCII /) or 0x3E (ASCII >)</dt>

      <dd>Abort the <a>get an attribute</a>
      algorithm. The attribute's name is the value of <var>attribute name</var>, its value
      is the empty string.</dd>

      <dt>If it is in the range 0x41 (ASCII A) to 0x5A (ASCII Z)</dt>

      <dd>Append the Unicode character with code point <a><var>b</var>+0x20</a> to <var>attribute name</var> (where <var>b</var>
      is the value of the byte at <var>position</var>). (This converts the input to
      lowercase.)</dd>

      <dt>Anything else</dt>

      <dd>Append the Unicode character with the same code point as the value of the byte at <var>position</var> to <var>attribute name</var>. (It doesn't actually matter how
      bytes outside the ASCII range are handled here, since only ASCII characters can contribute to
      the detection of a character encoding.)</dd>

    </dl>

    </li>

    <li>Advance <var>position</var> to the next byte and return to the previous
    step.</li>

    <li><i>Spaces</i>: If the byte at <var>position</var> is one of 0x09 (ASCII TAB),
    0x0A (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20 (ASCII space) then advance <var>position</var> to the next byte, then, repeat this step.</li>

    <li>If the byte at <var>position</var> is <em>not</em> 0x3D (ASCII =), abort the
    <a>get an attribute</a> algorithm. The
    attribute's name is the value of <var>attribute name</var>, its value is the empty
    string.</li>

    <li>Advance <var>position</var> past the 0x3D (ASCII =) byte.</li>

    <li><i>Value</i>: If the byte at <var>position</var> is one of 0x09 (ASCII TAB), 0x0A
    (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20 (ASCII space) then advance <var>position</var> to the next byte, then, repeat this step.</li>

    <li>Process the byte at <var>position</var> as follows:

    <dl class="switch">

      <dt>If it is 0x22 (ASCII ") or 0x27 (ASCII ')</dt>

      <dd>

      <ol>

        <li>Let <var>b</var> be the value of the byte at <var>position</var>.</li>

        <li><i>Quote loop</i>: Advance <var>position</var> to the next byte.</li>

        <li>If the value of the byte at <var>position</var> is the value of <var>b</var>, then advance <var>position</var> to the next byte and abort the
        "get an attribute" algorithm. The attribute's name is the value of <var>attribute
        name</var>, and its value is the value of <var>attribute value</var>.</li>

        <li>Otherwise, if the value of the byte at <var>position</var> is in the range 0x41
        (ASCII A) to 0x5A (ASCII Z), then append a Unicode character to <var>attribute
        value</var> whose code point is 0x20 more than the value of the byte at <var>position</var>.</li>

        <li>Otherwise, append a Unicode character to <var>attribute value</var> whose code
        point is the same as the value of the byte at <var>position</var>.</li>

        <li>Return to the step above labeled <i>quote loop</i>.</li>

      </ol>

      </dd>

      <dt>If it is 0x3E (ASCII >)</dt>

      <dd>Abort the <a>get an attribute</a>
      algorithm. The attribute's name is the value of <var>attribute name</var>, its value
      is the empty string.</dd>

      <dt>If it is in the range 0x41 (ASCII A) to 0x5A (ASCII Z)</dt>

      <dd>Append the Unicode character with code point <a><var>b</var>+0x20</a> to <var>attribute value</var> (where <var>b</var> is the value of the byte at <var>position</var>). Advance <var>position</var> to the next byte.</dd>

      <dt>Anything else</dt>

      <dd>Append the Unicode character with the same code point as the value of the byte at <var>position</var> to <var>attribute value</var>. Advance <var>position</var> to the next byte.</dd>

    </dl>

    </li>

    <li>Process the byte at <var>position</var> as
    follows:

    <dl class="switch">

      <dt>If it is 0x09 (ASCII TAB), 0x0A (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), 0x20 (ASCII
      space), or 0x3E (ASCII >)</dt>

      <dd>Abort the <a>get an attribute</a>
      algorithm. The attribute's name is the value of <var>attribute name</var> and its
      value is the value of <var>attribute value</var>.</dd>

      <dt>If it is in the range 0x41 (ASCII A) to 0x5A (ASCII Z)</dt>

      <dd>Append the Unicode character with code point <a><var>b</var>+0x20</a> to <var>attribute value</var> (where <var>b</var> is the value of the byte at <var>position</var>).</dd>

      <dt>Anything else</dt>

      <dd>Append the Unicode character with the same code point as the value of the byte at <var>position</var> to <var>attribute value</var>.</dd>

    </dl>

    </li>

    <li>Advance <var>position</var> to the next byte and return to the previous
    step.</li>

  </ol>

  For the sake of interoperability, user agents should not use a pre-scan algorithm that returns
  different results than the one described above. (But, if you do, please at least let us know, so
  that we can improve this algorithm and benefit everyone...)

<h5 id="character-encodings"><dfn>Character encodings</dfn></h5>

  User agents must support the encodings defined in the WHATWG Encoding standard. User agents
  must not support other encodings.

  <p class="note">
  The above prohibits supporting, for example, CESU-8, UTF-7, BOCU-1, SCSU, EBCDIC,
  and UTF-32. This specification does not make any attempt to support prohibited encodings in its
  algorithms; support and use of prohibited encodings would thus lead to unexpected behavior. [[!CESU8]] [[!UTF7]] [[!BOCU1]] [[!SCSU]]
  </p>

<h5 id="changing-the-encoding-while-parsing"><dfn>Changing the encoding while parsing</dfn></h5>

  When the parser requires the user agent to <dfn>change the encoding</dfn>, it must run the
  following steps. This might happen if the <a>encoding sniffing algorithm</a> described above
  failed to find a character encoding, or if it found a character encoding that was not the actual
  encoding of the file.

  <ol>

    <li>If the encoding that is already being used to interpret the input stream is a <a>UTF-16
    encoding</a>, then set the <a>confidence</a> to
    <i>certain</i> and abort these steps. The new encoding is ignored; if it was anything but the
    same encoding, then it would be clearly incorrect.</li>

    <li>If the new encoding is a <a>UTF-16 encoding</a>, change it to UTF-8.</li>

    <li>If the new encoding is the x-user-defined encoding, change it to Windows-1252. [[!ENCODING]]</li>

    <li>If the new encoding is identical or equivalent to the encoding that is already being used
    to interpret the input stream, then set the <a>confidence</a> to <i>certain</i> and abort these steps.
    This happens when the encoding information found in the file matches what the <a>encoding
    sniffing algorithm</a> determined to be the encoding, and in the second pass through the
    parser if the first pass found that the encoding sniffing algorithm described in the earlier
    section failed to find the right encoding.</li>

    <li>If all the bytes up to the last byte converted by the current decoder have the same
    Unicode interpretations in both the current encoding and the new encoding, and if the user agent
    supports changing the converter on the fly, then the user agent may change to the new converter
    for the encoding on the fly. Set the <a>document's character encoding</a> and the encoding
    used to convert the input stream to the new encoding, set the <a>confidence</a> to <i>certain</i>, and abort these
    steps.</li>

    <li>Otherwise, <a>navigate</a> to the document again, with
    <a>replacement enabled</a>, and using the same <a>source browsing context</a>, but
    this time skip the <a>encoding sniffing algorithm</a> and instead just set the encoding to
    the new encoding and the <a>confidence</a> to
    <i>certain</i>. Whenever possible, this should be done without actually contacting the network
    layer (the bytes should be re-parsed from memory), even if, e.g., the document is marked as not
    being cacheable. If this is not possible and contacting the network layer would involve repeating
    a request that uses a method other than <code>GET</code>), then instead set the <a>confidence</a> to <i>certain</i> and ignore the new
    encoding. The resource will be misinterpreted. User agents may notify the user of the situation,
    to aid in application development.</li>

  </ol>

  <p class="note">
  This algorithm is only invoked when a new encoding is found declared on a
  <code>meta</code> element.
  </p>

<h5 id="preprocessing-the-input-stream"><dfn>Preprocessing the input stream</dfn></h5>

  The <dfn>input stream</dfn> consists of the characters pushed into it as the <a>input byte
  stream</a> is decoded or from the various APIs that directly manipulate the input stream.

  One leading U+FEFF BYTE ORDER MARK character must be ignored if any are present in the
  <a>input stream</a>.

  <p class="note">
  The requirement to strip a U+FEFF BYTE ORDER MARK character regardless of whether
  that character was used to determine the byte order is a <a>willful violation</a> of
  Unicode, motivated by a desire to increase the resilience of user agents in the face of na&iuml;ve
  transcoders.
  </p>

  Any occurrences of any characters in the ranges U+0001 to U+0008,    U+000E to U+001F,
  U+007F  to U+009F, U+FDD0 to U+FDEF, and
  characters U+000B, U+FFFE, U+FFFF, U+1FFFE, U+1FFFF, U+2FFFE, U+2FFFF, U+3FFFE, U+3FFFF, U+4FFFE,
  U+4FFFF, U+5FFFE, U+5FFFF, U+6FFFE, U+6FFFF, U+7FFFE, U+7FFFF, U+8FFFE, U+8FFFF, U+9FFFE, U+9FFFF,
  U+AFFFE, U+AFFFF, U+BFFFE, U+BFFFF, U+CFFFE, U+CFFFF, U+DFFFE, U+DFFFF, U+EFFFE, U+EFFFF, U+FFFFE,
  U+FFFFF, U+10FFFE, and U+10FFFF are <a>parse errors</a>. These are all
  <a>control characters</a> or permanently undefined Unicode characters (noncharacters).

  Any <a>character</a> that is a not a <a>Unicode character</a>, i.e. any isolated
  surrogate, is a <a>parse error</a>. (These can only find their way into the input stream via
  script APIs such as <code>document.write()</code>.)

  U+000D CARRIAGE RETURN (CR) characters and U+000A LINE FEED (LF) characters are treated
  specially. Any LF character that immediately follows a CR character must be ignored, and all CR
  characters must then be converted to LF characters. Thus, newlines in HTML DOMs are represented by
  LF characters, and there are never any CR characters in the input to the <a>tokenization</a>
  stage.

  The <dfn>next input character</dfn> is the first character in the <a>input stream</a>
  that has not yet been <dfn>consumed</dfn> or explicitly ignored by the requirements in
  this section. Initially, the <i>next input character</i> is the
  first character in the input. The <dfn>current input character</dfn> is the last character to have
  been <i>consumed</i>.

  The <dfn>insertion point</dfn> is the position (just before a character or just before the end
  of the input stream) where content inserted using <code>document.write()</code> is actually inserted. The insertion point is
  relative to the position of the character immediately after it, it is not an absolute offset into
  the input stream. Initially, the insertion point is undefined.

  The "EOF" character in the tables below is a conceptual character representing the end of the
  <a>input stream</a>. If the parser is a <a>script-created parser</a>, then the end of
  the <a>input stream</a> is reached when an <dfn>explicit "EOF" character</dfn> (inserted by
  the <code>document.close()</code> method) is consumed. Otherwise, the
  "EOF" character is not a real character in the stream, but rather the lack of any further
  characters.

  <p class="note">
  The handling of U+0000 NULL characters varies based on where the characters are
  found. In general, they are ignored except where doing so could plausibly introduce an attack
  vector. This handling is, by necessity, spread across both the tokenization stage and the tree
  construction stage.
  </p>

  </div>

  <div class="impl">

<h4 id="parse-state"><dfn>Parse state</dfn></h4>

<h5 id="the-insertion-mode"><dfn>The insertion mode</dfn></h5>

  The <dfn>insertion mode</dfn> is a state variable that controls the primary operation of the
  tree construction stage.

  Initially, the <a>insertion mode</a> is "<a>initial</a>". It can change to "<a>before
  html</a>", "<a>before head</a>", "<a>in head</a>", "<a>in head noscript</a>", "<a>after head</a>",
  "<a>in body</a>", "<a>text</a>", "<a>in table</a>", "<a>in table text</a>", "<a>in caption</a>", "<a>in column
  group</a>", "<a>in table body</a>", "<a>in row</a>", "<a>in
  cell</a>", "<a>in select</a>", "<a>in select in table</a>", "<a>in template</a>", "<a>after body</a>",
  "<a>in frameset</a>", "<a>after frameset</a>", "<a>after
  after body</a>", and "<a>after after
  frameset</a>" during the course of the parsing, as described in the <a>tree
  construction</a> stage. The insertion mode affects how tokens are processed and whether CDATA
  sections are supported.

  Several of these modes, namely "<a>in head</a>", "<a>in body</a>", "<a>in
  table</a>", and "<a>in select</a>", are special, in
  that the other modes defer to them at various times. When the algorithm below says that the user
  agent is to do something "<dfn>using the rules for</dfn> the <var>m</var> insertion
  mode", where <var>m</var> is one of these modes, the user agent must use the rules
  described under the <var>m</var> <a>insertion mode</a>'s section, but must leave
  the <a>insertion mode</a> unchanged unless the rules in <var>m</var> themselves
  switch the <a>insertion mode</a> to a new value.

  When the insertion mode is switched to "<a>text</a>" or
  "<a>in table text</a>", the <dfn>original insertion
  mode</dfn> is also set. This is the insertion mode to which the tree construction stage will
  return.

  Similarly, to parse nested <code>template</code> elements, a <dfn>stack of template insertion
  modes</dfn> is used. It is initially empty. The <dfn>current template insertion mode</dfn> is the
  insertion mode that was most recently added to the <a>stack of template insertion modes</a>.
  The algorithms in the sections below will <i>push</i> insertion modes onto this stack, meaning
  that the specified insertion mode is to be added to the stack, and <i>pop</i> insertion modes from
  the stack, which means that the most recently added insertion mode must be removed from the
  stack.

  <hr />

  When the steps below require the UA to <dfn>reset the insertion mode appropriately</dfn>, it
  means the UA must follow these steps:

  <ol>

    <li>Let <var>last</var> be false.</li>

    <li>Let <var>node</var> be the last node in the <a>stack of open
    elements</a>.</li>

    <li><i>Loop</i>: If <var>node</var> is the first node in the stack of open elements,
    then set <var>last</var> to true, and, if the parser was originally created as part of
    the <a>HTML fragment parsing algorithm</a> (<a>fragment case</a>), set <var>node</var> to the <var>context</var>
    element passed to that algorithm.</li>

    <li>

    If <var>node</var> is a <code>select</code> element, run these substeps:

    <ol>

      <li>If <var>last</var> is true, jump to the step below labeled
      <i>done</i>.</li>

      <li>Let <var>ancestor</var> be <var>node</var>.</li>

      <li><i>Loop</i>: If <var>ancestor</var> is the first node in the <a>stack of
      open elements</a>, jump to the step below labeled <i>done</i>.</li>

      <li>Let <var>ancestor</var> be the node before <var>ancestor</var> in the
      <a>stack of open elements</a>.</li>

      <li>If <var>ancestor</var> is a <code>template</code> node, jump to the step below
      labeled <i>done</i>.</li>

      <li>If <var>ancestor</var> is a <code>table</code> node, switch the <a>insertion
      mode</a> to "<a>in select in table</a>" and
      abort these steps.</li>

      <li>Jump back to the step labeled <i>loop</i>.</li>

      <li><i>Done</i>: Switch the <a>insertion mode</a> to "<a>in select</a>" and abort these steps.</li>

    </ol>

    </li>

    <li>If <var>node</var> is a <code>td</code> or <code>th</code> element and <var>last</var> is false, then switch the <a>insertion mode</a> to "<a>in cell</a>" and abort these steps.</li>

    <li>If <var>node</var> is a <code>tr</code> element, then switch the <a>insertion
    mode</a> to "<a>in row</a>" and abort these
    steps.</li>

    <li>If <var>node</var> is a <code>tbody</code>, <code>thead</code>, or
    <code>tfoot</code> element, then switch the <a>insertion mode</a> to "<a>in table body</a>" and abort these steps.</li>

    <li>If <var>node</var> is a <code>caption</code> element, then switch the
    <a>insertion mode</a> to "<a>in caption</a>" and
    abort these steps.</li>

    <li>If <var>node</var> is a <code>colgroup</code> element, then switch the
    <a>insertion mode</a> to "<a>in column
    group</a>" and abort these steps.</li>

    <li>If <var>node</var> is a <code>table</code> element, then switch the
    <a>insertion mode</a> to "<a>in table</a>" and abort
    these steps.</li>

    <li>If <var>node</var> is a <code>template</code> element, then switch the
    <a>insertion mode</a> to the <a>current template insertion mode</a> and abort these
    steps.</li>

    <li>If <var>node</var> is a <code>head</code> element and <var>last</var> is
    false, then switch the <a>insertion mode</a> to "<a>in
    head</a>" and abort these steps.</li>

    <li>If <var>node</var> is a <code>body</code> element, then switch the
    <a>insertion mode</a> to "<a>in body</a>" and abort
    these steps.</li>

    <li>If <var>node</var> is a <code>frameset</code> element, then switch the
    <a>insertion mode</a> to "<a>in frameset</a>" and
    abort these steps. (<a>fragment case</a>)</li>

    <li>

    If <var>node</var> is an <code>html</code> element, run these substeps:

    <ol>

      <li>If the <a><code>head</code> element pointer</a> is null, switch the
      <a>insertion mode</a> to "<a>before head</a>"
      and abort these steps. (<a>fragment case</a>)</li>

      <li>Otherwise, the <a><code>head</code> element pointer</a> is not null, switch the
      <a>insertion mode</a> to "<a>after head</a>" and
      abort these steps.</li>

    </ol>

    </li>

    <li>If <var>last</var> is true, then switch the <a>insertion mode</a> to "<a>in body</a>" and abort these steps. (<a>fragment
    case</a>)</li>

    <li>Let <var>node</var> now be the node before <var>node</var> in the
    <a>stack of open elements</a>.</li>

    <li>Return to the step labeled <i>loop</i>.</li>

  </ol>

<h5 id="the-stack-of-open-elements"><dfn>The stack of open elements</dfn></h5>

  Initially, the <dfn>stack of open elements</dfn> is empty. The stack grows downwards; the
  topmost node on the stack is the first one added to the stack, and the bottommost node of the
  stack is the most recently added node in the stack (notwithstanding when the stack is manipulated
  in a random access fashion as part of <a>the handling for misnested
  tags</a>).

  <p class="note">
  The "<a>before html</a>" <a>insertion
  mode</a> creates the <code>html</code> root element node, which is then added to the stack.
  </p>

  <p class="note">
  In the <a>fragment case</a>, the <a>stack of open elements</a> is
  initialized to contain an <code>html</code> element that is created as part of <a>that algorithm</a>. (The <a>fragment case</a> skips the
  "<a>before html</a>" <a>insertion mode</a>.)
  </p>

  The <code>html</code> node, however it is created, is the topmost node of the stack. It only
  gets popped off the stack when the parser <a>finishes</a>.

  The <dfn>current node</dfn> is the bottommost node in this <a>stack of open
  elements</a>.

  The <dfn>adjusted current node</dfn> is the <i>context</i>
  element if the parser was created by the <a>HTML fragment parsing algorithm</a> and the
  <a>stack of open elements</a> has only one element in it (<a>fragment case</a>);
  otherwise, the <a>adjusted current node</a> is the <a>current node</a>.

  Elements in the <a>stack of open elements</a> fall into the following categories:

  <dl>

    <dt><dfn>Special</dfn></dt>

    <dd>The following elements have varying levels of special parsing rules: HTML's
    <code>address</code>, <code>applet</code>, <code>area</code>, <code>article</code>,
    <code>aside</code>, <code>base</code>, <code>basefont</code>, <code>bgsound</code>,
    <code>blockquote</code>, <code>body</code>, <code>br</code>, <code>button</code>,
    <code>caption</code>, <code>center</code>, <code>col</code>, <code>colgroup</code>,
    <code>dd</code>, <code>details</code>, <code>dir</code>, <code>div</code>, <code>dl</code>,
    <code>dt</code>, <code>embed</code>, <code>fieldset</code>, <code>figcaption</code>,
    <code>figure</code>, <code>footer</code>, <code>form</code>, <code>frame</code>,
    <code>frameset</code>, <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>,
    <code>h5</code>, <code>h6</code>, <code>head</code>, <code>header</code>,
    <code>hr</code>, <code>html</code>, <code>iframe</code>,
    <code>img</code>, <code>input</code>, <code>isindex</code>, <code>li</code>, <code>link</code>,
    <code>listing</code>, <code>main</code>, <code>marquee</code>, <code>menu</code>,
    <code>menuitem</code>, <code>meta</code>, <code>nav</code>, <code>noembed</code>,
    <code>noframes</code>, <code>noscript</code>, <code>object</code>, <code>ol</code>,
    <code>p</code>, <code>param</code>, <code>plaintext</code>, <code>pre</code>,
    <code>script</code>, <code>section</code>, <code>select</code>, <code>source</code>,
    <code>style</code>, <code>summary</code>, <code>table</code>, <code>tbody</code>,
    <code>td</code>, <code>template</code>, <code>textarea</code>, <code>tfoot</code>,
    <code>th</code>, <code>thead</code>, <code>title</code>, <code>tr</code>, <code>track</code>,
    <code>ul</code>, <code>wbr</code>, and <code>xmp</code>; MathML's <code>mi</code>, <code>mo</code>, <code>mn</code>,
    <code>ms</code>, <code>mtext</code>, and <code>annotation-xml</code>; and SVG's <code>foreignObject</code>, <code>desc</code>, and <code>title</code>.</dd>

    <dt><dfn>Formatting</dfn></dt>
    <dd>The following HTML elements are those that end up in the <a>list of active formatting
    elements</a>: <code>a</code>, <code>b</code>, <code>big</code>, <code>code</code>,
    <code>em</code>, <code>font</code>, <code>i</code>, <code>nobr</code>, <code>s</code>,
    <code>small</code>, <code>strike</code>, <code>strong</code>, <code>tt</code>, and
    <code>u</code>.</dd>

    <dt><dfn>Ordinary</dfn></dt>
    <dd>All other elements found while parsing an HTML document.</dd>

  </dl>

  The <a>stack of open elements</a> is said to <dfn>have an element <var>target node</var> in a specific scope</dfn> consisting of a
  list of element types <var>list</var> when the following algorithm terminates in a match
  state:

  <ol>

    <li>Initialize <var>node</var> to be the <a>current node</a> (the bottommost
    node of the stack).</li>

    <li>If <var>node</var> is the target node, terminate in a match state.</li>

    <li>Otherwise, if <var>node</var> is one of the element types in <var>list</var>, terminate in a failure state.</li>

    <li>Otherwise, set <var>node</var> to the previous entry in the <a>stack of open
    elements</a> and return to step 2. (This will never fail, since the loop will always terminate
    in the previous step if the top of the stack &mdash; an <code>html</code> element &mdash; is
    reached.)</li>

  </ol>

  The <a>stack of open elements</a> is said to <dfn>have a
  particular element in scope</dfn> when it <a>has
  that element in the specific scope</a> consisting of the following element types:

  <ul class="brief">
    <li><code>applet</code> in the <a>HTML namespace</a></li>
    <li><code>caption</code> in the <a>HTML namespace</a></li>
    <li><code>html</code> in the <a>HTML namespace</a></li>
    <li><code>table</code> in the <a>HTML namespace</a></li>
    <li><code>td</code> in the <a>HTML namespace</a></li>
    <li><code>th</code> in the <a>HTML namespace</a></li>
    <li><code>marquee</code> in the <a>HTML namespace</a></li>
    <li><code>object</code> in the <a>HTML namespace</a></li>
    <li><code>template</code> in the <a>HTML namespace</a></li>
    <li><code>mi</code> in the <a>MathML namespace</a></li>
    <li><code>mo</code> in the <a>MathML namespace</a></li>
    <li><code>mn</code> in the <a>MathML namespace</a></li>
    <li><code>ms</code> in the <a>MathML namespace</a></li>
    <li><code>mtext</code> in the <a>MathML namespace</a></li>
    <li><code>annotation-xml</code> in the <a>MathML namespace</a></li>
    <li><code>foreignObject</code> in the <a>SVG namespace</a></li>
    <li><code>desc</code> in the <a>SVG namespace</a></li>
    <li><code>title</code> in the <a>SVG namespace</a></li>
  </ul>

  The <a>stack of open elements</a> is said to <dfn>have a particular element in list item scope</dfn> when it <a>has that element in the specific scope</a> consisting of the following
  element types:

  <ul class="brief">
    <li>All the element types listed above for the <i>has an element in scope</i> algorithm.</li>
    <li><code>ol</code> in the <a>HTML namespace</a></li>
    <li><code>ul</code> in the <a>HTML namespace</a></li>
  </ul>

  The <a>stack of open elements</a> is said to <dfn>have a particular element in button scope</dfn> when it <a>has that element in the specific scope</a> consisting of the following element
  types:

  <ul class="brief">
    <li>All the element types listed above for the <i>has an element in scope</i> algorithm.</li>
    <li><code>button</code> in the <a>HTML namespace</a></li>
  </ul>

  The <a>stack of open elements</a> is said to <dfn>have a particular element in table scope</dfn> when it <a>has that element in the specific scope</a> consisting of the following element
  types:

  <ul class="brief">
    <li><code>html</code> in the <a>HTML namespace</a></li>
    <li><code>table</code> in the <a>HTML namespace</a></li>
    <li><code>template</code> in the <a>HTML namespace</a></li>
  </ul>

  The <a>stack of open elements</a> is said to <dfn>have a particular element in select scope</dfn> when it <a>has that element in the specific scope</a> consisting of all element types
  <em>except</em> the following:

  <ul class="brief">

    <li><code>optgroup</code> in the <a>HTML namespace</a></li>
    <li><code>option</code> in the <a>HTML namespace</a></li>
  </ul>

  Nothing happens if at any time any of the elements in the <a>stack of open elements</a>
  are moved to a new location in, or removed from, the <code>Document</code> tree. In particular,
  the stack is not changed in this situation. This can cause, amongst other strange effects, content
  to be appended to nodes that are no longer in the DOM.

  <p class="note">
  In some cases (namely, when <a>closing misnested formatting
  elements</a>), the stack is manipulated in a random-access fashion.
  </p>

<h5 id="the-list-of-active-formatting-elements"><dfn>The list of active formatting elements</dfn></h5>

  Initially, the <dfn>list of active formatting elements</dfn> is empty. It is used to handle
  mis-nested <a>formatting element tags</a>.

  The list contains elements in the <a>formatting</a> category, and <a>markers</a>. The <dfn>markers</dfn> are inserted when entering <code>applet</code>
  elements, buttons, <code>object</code> elements, marquees, table cells, and table captions, and
  are used to prevent formatting from "leaking" <em>into</em> <code>applet</code> elements, buttons,
  <code>object</code> elements, marquees, and tables.

  In addition, each element in the <a>list of active formatting elements</a> is associated
  with the token for which it was created, so that further elements can be created for that token if
  necessary.

  When the steps below require the UA to <dfn>push onto the list of active formatting
  elements</dfn> an element <var>element</var>, the UA must perform the following
  steps:

  <ol>

    <li>If there are already three elements in the <a>list of active formatting elements</a>
    after the last <a>marker</a>, if any, or anywhere in the
    list if there are no <a>markers</a>, that have the same tag
    name, namespace, and attributes as <var>element</var>, then remove the earliest such
    element from the <a>list of active formatting elements</a>. For these purposes, the
    attributes must be compared as they were when the elements were created by the parser; two
    elements have the same attributes if all their parsed attributes can be paired such that the two
    attributes in each pair have identical names, namespaces, and values (the order of the attributes
    does not matter).

    <p class="note">
  This is the Noah's Ark clause. But with three per family instead of two.
  </p></li>

    <li>Add <var>element</var> to the <a>list of active formatting
    elements</a>.</li>

  </ol>

  When the steps below require the UA to <dfn>reconstruct the active formatting elements</dfn>,
  the UA must perform the following steps:

  <ol>

    <li>If there are no entries in the <a>list of active formatting elements</a>, then there
    is nothing to reconstruct; stop this algorithm.</li>

    <li>If the last (most recently added) entry in the <a>list of active formatting
    elements</a> is a <a>marker</a>, or if it is an element
    that is in the <a>stack of open elements</a>, then there is nothing to reconstruct; stop
    this algorithm.</li>

    <li>Let <var>entry</var> be the last (most recently added) element in the <a>list
    of active formatting elements</a>.</li>

    <li><i>Rewind</i>: If there are no entries before <var>entry</var> in the <a>list
    of active formatting elements</a>, then jump to the step labeled <i>create</i>.</li>

    <li>Let <var>entry</var> be the entry one earlier than <var>entry</var> in
    the <a>list of active formatting elements</a>.</li>

    <li>If <var>entry</var> is neither a <a>marker</a> nor an element that is also in the <a>stack of
    open elements</a>, go to the step labeled <i>rewind</i>.</li>

    <li><i>Advance</i>: Let <var>entry</var> be the element one later than <var>entry</var> in the <a>list of active formatting elements</a>.</li>

    <li><i>Create</i>: <a>Insert an HTML element</a> for the token for which the element
    <var>entry</var> was created, to obtain <var>new element</var>.</li>

    <li>Replace the entry for <var>entry</var> in the list with an entry for <var>new element</var>.</li>

    <li>If the entry for <var>new element</var> in the <a>list of active formatting
    elements</a> is not the last entry in the list, return to the step labeled
    <i>advance</i>.</li>

  </ol>

  This has the effect of reopening all the formatting elements that were opened in the current
  body, cell, or caption (whichever is youngest) that haven't been explicitly closed.

  <p class="note">
  The way this specification is written, the <a>list of active formatting
  elements</a> always consists of elements in chronological order with the least recently added
  element first and the most recently added element last (except for while steps 8 to 10 of the
  above algorithm are being executed, of course).
  </p>

  When the steps below require the UA to <dfn>clear the list of active formatting elements up to
  the last marker</dfn>, the UA must perform the following steps:

  <ol>

    <li>Let <var>entry</var> be the last (most recently added) entry in the <a>list of
    active formatting elements</a>.</li>

    <li>Remove <var>entry</var> from the <a>list of active formatting
    elements</a>.</li>

    <li>If <var>entry</var> was a <a>marker</a>,
    then stop the algorithm at this point. The list has been cleared up to the last <a>marker</a>.</li>

    <li>Go to step 1.</li>

  </ol>

<h5 id="the-element-pointers"><dfn>The element pointers</dfn></h5>

  Initially, the <dfn><code>head</code> element pointer</dfn> and the <dfn><code>form</code> element pointer</dfn> are both null.

  Once a <code>head</code> element has been parsed (whether implicitly or explicitly) the
  <a><code>head</code> element pointer</a> gets set to point to this node.

  The <a><code>form</code> element pointer</a> points to the last
  <code>form</code> element that was opened and whose end tag has not yet been seen. It is used to
  make form controls associate with forms in the face of dramatically bad markup, for historical
  reasons. It is ignored inside <code>template</code> elements.

<h5 id="other-parsing-state-flags"><dfn>Other parsing state flags</dfn></h5>

  The <dfn>scripting flag</dfn> is set to "enabled" if <a>scripting
  was enabled</a> for the <code>Document</code> with which the parser is associated when the
  parser was created, and "disabled" otherwise.

  <p class="note">
  The <a>scripting flag</a> can be enabled even when the parser was originally
  created for the <a>HTML fragment parsing algorithm</a>, even though <code>script</code>
  elements don't execute in that case.
  </p>

  The <dfn>frameset-ok flag</dfn> is set to "ok" when the parser is created. It is set to "not
  ok" after certain tokens are seen.

  </div>

  <div class="impl">

<h4 id="tokenization"><dfn>Tokenization</dfn></h4>

  Implementations must act as if they used the following state machine to tokenize HTML. The
  state machine must start in the <a>data state</a>. Most states consume a single character,
  which may have various side-effects, and either switches the state machine to a new state to
  <i>reconsume</i> the same character, or switches it to a new state to consume the next character,
  or stays in the same state to consume the next character. Some states have more complicated
  behavior and can consume several characters before switching to another state. In some cases, the
  tokenizer state is also changed by the tree construction stage.

  The exact behavior of certain states depends on the <a>insertion mode</a> and the
  <a>stack of open elements</a>. Certain states also use a <dfn><var>temporary buffer</var></dfn> to track progress.

  The output of the tokenization step is a series of zero or more of the following tokens:
  DOCTYPE, start tag, end tag, comment, character, end-of-file. DOCTYPE tokens have a name, a public
  identifier, a system identifier, and a <dfn><i>force-quirks flag</i></dfn>. When a DOCTYPE token
  is created, its name, public identifier, and system identifier must be marked as missing (which is
  a distinct state from the empty string), and the <i>force-quirks flag</i> must be set to
  <i>off</i> (its other state is <i>on</i>). Start and end tag tokens have a tag name, a <dfn>self-closing flag</dfn>, and a list of attributes, each of which has a
  name and a value. When a start or end tag token is created, its <i>self-closing flag</i> must be unset (its other state is that it be set), and its attributes
  list must be empty. Comment and character tokens have data.

  When a token is emitted, it must immediately be handled by the <a>tree construction</a>
  stage. The tree construction stage can affect the state of the tokenization stage, and can insert
  additional characters into the stream. (For example, the <code>script</code> element can result in
  scripts executing and using the <a>dynamic markup insertion</a> APIs to insert characters
  into the stream being tokenized.)

  <p class="note">
  Creating a token and emitting it are distinct actions. It is possible for a token
  to be created but implicitly abandoned (never emitted), e.g. if the file ends unexpectedly while
  processing the characters that are being parsed into a start tag token.
  </p>

  When a start tag token is emitted with its <i>self-closing flag</i> set, if the flag is not
  <dfn>acknowledged</dfn> when it is processed by the tree
  construction stage, that is a <a>parse error</a>.

  When an end tag token is emitted with attributes, that is a <a>parse error</a>.

  When an end tag token is emitted with its <i>self-closing flag</i> set, that is a <a>parse
  error</a>.

  An <dfn>appropriate end tag token</dfn> is an end tag token whose tag name matches the tag name
  of the last start tag to have been emitted from this tokenizer, if any. If no start tag has been
  emitted from this tokenizer, then no end tag token is appropriate.

  Before each step of the tokenizer, the user agent must first check the <a>parser pause
  flag</a>. If it is true, then the tokenizer must abort the processing of any nested invocations
  of the tokenizer, yielding control back to the caller.

  The tokenizer state machine consists of the states defined in the following subsections.

<h5 id="data-state"><dfn>Data state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0026 AMPERSAND (&amp;)</dt>
    <dd>Switch to the <a>character reference in data state</a>.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>tag open state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit the <a>current input character</a> as a character
    token.</dd>

    <dt>EOF</dt>
    <dd>Emit an end-of-file token.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="character-reference-in-data-state"><dfn>Character reference in data state</dfn></h5>

  Switch to the <a>data state</a>.

  Attempt to <a>consume a character reference</a>, with no <a>additional allowed
  character</a>.

  If nothing is returned, emit a U+0026 AMPERSAND character (&amp;) token.

  Otherwise, emit the character tokens that were returned.

<h5 id="rcdata-state"><dfn>RCDATA state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0026 AMPERSAND (&amp;)</dt>
    <dd>Switch to the <a>character reference in RCDATA state</a>.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>RCDATA less-than sign state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd>Emit an end-of-file token.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="character-reference-in-rcdata-state"><dfn>Character reference in RCDATA state</dfn></h5>

  Switch to the <a>RCDATA state</a>.

  Attempt to <a>consume a character reference</a>, with no <a>additional allowed
  character</a>.

  If nothing is returned, emit a U+0026 AMPERSAND character (&amp;) token.

  Otherwise, emit the character tokens that were returned.

<h5 id="rawtext-state"><dfn>RAWTEXT state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>RAWTEXT less-than sign state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd>Emit an end-of-file token.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-state"><dfn>Script data state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data less-than sign state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd>Emit an end-of-file token.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="plaintext-state"><dfn>PLAINTEXT state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd>Emit an end-of-file token.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="tag-open-state"><dfn>Tag open state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0021 EXCLAMATION MARK (!)</dt>
    <dd>Switch to the <a>markup declaration open state</a>.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Switch to the <a>end tag open state</a>.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new start tag token, set its tag name to the lowercase version of the <a>current
    input character</a> (add 0x0020 to the character's code point), then switch to the <a>tag
    name state</a>. (Don't emit the token yet; further details will be filled in before it is
    emitted.)</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Create a new start tag token, set its tag name to the <a>current input character</a>,
    then switch to the <a>tag name state</a>. (Don't emit the token yet; further details will
    be filled in before it is emitted.)</dd>

    <dt>U+003F QUESTION MARK (?)</dt>
    <dd><a>Parse error</a>. Switch to the <a>bogus comment state</a>.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit a U+003C LESS-THAN SIGN
    character token. Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="end-tag-open-state"><dfn>End tag open state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new end tag token, set its tag name to the lowercase version of the <a>current
    input character</a> (add 0x0020 to the character's code point), then switch to the <a>tag
    name state</a>. (Don't emit the token yet; further details will be filled in before it is
    emitted.)</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Create a new end tag token, set its tag name to the <a>current input character</a>,
    then switch to the <a>tag name state</a>. (Don't emit the token yet; further details will
    be filled in before it is emitted.)</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit a U+003C LESS-THAN SIGN
    character token and a U+002F SOLIDUS character token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Switch to the <a>bogus comment state</a>.</dd>

  </dl>

<h5 id="tag-name-state"><dfn>Tag name state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>before attribute name state</a>.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Switch to the <a>self-closing start tag state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current tag token's tag name.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current tag
    token's tag name.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current tag token's tag name.</dd>

  </dl>

<h5 id="rcdata-less-than-sign-state"><dfn>RCDATA less-than sign state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
    the <a>RCDATA end tag open state</a>.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>RCDATA state</a>. Emit a U+003C LESS-THAN SIGN character token.
    Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="rcdata-end-tag-open-state"><dfn>RCDATA end tag open state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the lowercase version of the
    <a>current input character</a> (add 0x0020 to the character's code point). Append the
    <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>RCDATA end tag name state</a>. (Don't emit the
    token yet; further details will be filled in before it is emitted.)</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the <a>current input character</a>.
    Append the <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>RCDATA end tag name state</a>. (Don't emit the
    token yet; further details will be filled in before it is emitted.)</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>RCDATA state</a>. Emit a U+003C LESS-THAN SIGN character token and a
    U+002F SOLIDUS character token. Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="rcdata-end-tag-name-state"><dfn>RCDATA end tag name state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>before attribute name state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>self-closing start tag state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>data state</a> and emit the current tag token. Otherwise, treat it as per the "anything
    else" entry below.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current tag token's tag name. Append the <a>current input
    character</a> to the <var>temporary buffer</var>.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Append the <a>current input character</a> to the current tag token's tag name. Append
    the <a>current input character</a> to the <var>temporary
    buffer</var>.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>RCDATA state</a>. Emit a U+003C LESS-THAN SIGN character token, a
    U+002F SOLIDUS character token, and a character token for each of the characters in the <var>temporary buffer</var> (in the order they were added to the buffer).
    Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="rawtext-less-than-sign-state"><dfn>RAWTEXT less-than sign state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
    the <a>RAWTEXT end tag open state</a>.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>RAWTEXT state</a>. Emit a U+003C LESS-THAN SIGN character token.
    Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="rawtext-end-tag-open-state"><dfn>RAWTEXT end tag open state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the lowercase version of the
    <a>current input character</a> (add 0x0020 to the character's code point). Append the
    <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>RAWTEXT end tag name state</a>. (Don't emit the
    token yet; further details will be filled in before it is emitted.)</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the <a>current input character</a>.
    Append the <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>RAWTEXT end tag name state</a>. (Don't emit the
    token yet; further details will be filled in before it is emitted.)</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>RAWTEXT state</a>. Emit a U+003C LESS-THAN SIGN character token and a
    U+002F SOLIDUS character token. Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="rawtext-end-tag-name-state"><dfn>RAWTEXT end tag name state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>before attribute name state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>self-closing start tag state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>data state</a> and emit the current tag token. Otherwise, treat it as per the "anything
    else" entry below.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current tag token's tag name. Append the <a>current input
    character</a> to the <var>temporary buffer</var>.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Append the <a>current input character</a> to the current tag token's tag name. Append
    the <a>current input character</a> to the <var>temporary
    buffer</var>.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>RAWTEXT state</a>. Emit a U+003C LESS-THAN SIGN character token, a
    U+002F SOLIDUS character token, and a character token for each of the characters in the <var>temporary buffer</var> (in the order they were added to the buffer).
    Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="script-data-less-than-sign-state"><dfn>Script data less-than sign state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
    the <a>script data end tag open state</a>.</dd>

    <dt>U+0021 EXCLAMATION MARK (!)</dt>
    <dd>Switch to the <a>script data escape start state</a>. Emit a U+003C LESS-THAN SIGN
    character token and a U+0021 EXCLAMATION MARK character token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data state</a>. Emit a U+003C LESS-THAN SIGN character token.
    Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="script-data-end-tag-open-state"><dfn>Script data end tag open state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the lowercase version of the
    <a>current input character</a> (add 0x0020 to the character's code point). Append the
    <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>script data end tag name state</a>. (Don't emit the
    token yet; further details will be filled in before it is emitted.)</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the <a>current input character</a>.
    Append the <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>script data end tag name state</a>. (Don't emit the
    token yet; further details will be filled in before it is emitted.)</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data state</a>. Emit a U+003C LESS-THAN SIGN character token
    and a U+002F SOLIDUS character token. Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="script-data-end-tag-name-state"><dfn>Script data end tag name state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>before attribute name state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>self-closing start tag state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>data state</a> and emit the current tag token. Otherwise, treat it as per the "anything
    else" entry below.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current tag token's tag name. Append the <a>current input
    character</a> to the <var>temporary buffer</var>.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Append the <a>current input character</a> to the current tag token's tag name. Append
    the <a>current input character</a> to the <var>temporary
    buffer</var>.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data state</a>. Emit a U+003C LESS-THAN SIGN character token, a
    U+002F SOLIDUS character token, and a character token for each of the characters in the <var>temporary buffer</var> (in the order they were added to the buffer).
    Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="script-data-escape-start-state"><dfn>Script data escape start state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>script data escape start dash state</a>. Emit a U+002D HYPHEN-MINUS
    character token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data state</a>. Reconsume the <a>current input
    character</a>.</dd>

  </dl>

<h5 id="script-data-escape-start-dash-state"><dfn>Script data escape start dash state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>script data escaped dash dash state</a>. Emit a U+002D HYPHEN-MINUS
    character token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data state</a>. Reconsume the <a>current input
    character</a>.</dd>

  </dl>

<h5 id="script-data-escaped-state"><dfn>Script data escaped state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>script data escaped dash state</a>. Emit a U+002D HYPHEN-MINUS
    character token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data escaped less-than sign state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd>Switch to the <a>data state</a>. <a>Parse error</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-escaped-dash-state"><dfn>Script data escaped dash state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>script data escaped dash dash state</a>. Emit a U+002D HYPHEN-MINUS
    character token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data escaped less-than sign state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Switch to the <a>script data escaped state</a>. Emit a U+FFFD
    REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data escaped state</a>. Emit the <a>current input
    character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-escaped-dash-dash-state"><dfn>Script data escaped dash dash state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Emit a U+002D HYPHEN-MINUS character token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data escaped less-than sign state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>script data state</a>. Emit a U+003E GREATER-THAN SIGN character
    token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Switch to the <a>script data escaped state</a>. Emit a U+FFFD
    REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data escaped state</a>. Emit the <a>current input
    character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-escaped-less-than-sign-state"><dfn>Script data escaped less-than sign state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
    the <a>script data escaped end tag open state</a>.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Append the
    lowercase version of the <a>current input character</a> (add 0x0020 to the character's code
    point) to the <var>temporary buffer</var>. Switch to the <a>script
    data double escape start state</a>. Emit a U+003C LESS-THAN SIGN character token and the
    <a>current input character</a> as a character token.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Append the
    <a>current input character</a> to the <var>temporary
    buffer</var>. Switch to the <a>script data double escape start state</a>. Emit a U+003C
    LESS-THAN SIGN character token and the <a>current input character</a> as a character
    token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data escaped state</a>. Emit a U+003C LESS-THAN SIGN character
    token. Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="script-data-escaped-end-tag-open-state"><dfn>Script data escaped end tag open state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the lowercase version of the
    <a>current input character</a> (add 0x0020 to the character's code point). Append the
    <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>script data escaped end tag name state</a>. (Don't
    emit the token yet; further details will be filled in before it is emitted.)</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the <a>current input character</a>.
    Append the <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>script data escaped end tag name state</a>. (Don't
    emit the token yet; further details will be filled in before it is emitted.)</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data escaped state</a>. Emit a U+003C LESS-THAN SIGN character
    token and a U+002F SOLIDUS character token. Reconsume the <a>current input
    character</a>.</dd>

  </dl>

<h5 id="script-data-escaped-end-tag-name-state"><dfn>Script data escaped end tag name state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>before attribute name state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>self-closing start tag state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>data state</a> and emit the current tag token. Otherwise, treat it as per the "anything
    else" entry below.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current tag token's tag name. Append the <a>current input
    character</a> to the <var>temporary buffer</var>.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Append the <a>current input character</a> to the current tag token's tag name. Append
    the <a>current input character</a> to the <var>temporary
    buffer</var>.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data escaped state</a>. Emit a U+003C LESS-THAN SIGN character
    token, a U+002F SOLIDUS character token, and a character token for each of the characters in the
    <var>temporary buffer</var> (in the order they were added to the
    buffer). Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="script-data-double-escape-start-state"><dfn>Script data double escape start state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dt>U+002F SOLIDUS (/)</dt>
    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>If the <var>temporary buffer</var> is the string "<code>script</code>", then switch to the <a>script data double escaped state</a>.
    Otherwise, switch to the <a>script data escaped state</a>. Emit the <a>current input
    character</a> as a character token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the <var>temporary buffer</var>. Emit the
    <a>current input character</a> as a character token.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Append the <a>current input character</a> to the <var>temporary buffer</var>. Emit the <a>current input character</a> as a character
    token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data escaped state</a>. Reconsume the <a>current input
    character</a>.</dd>

  </dl>

<h5 id="script-data-double-escaped-state"><dfn>Script data double escaped state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>script data double escaped dash state</a>. Emit a U+002D HYPHEN-MINUS
    character token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data double escaped less-than sign state</a>. Emit a U+003C
    LESS-THAN SIGN character token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-double-escaped-dash-state"><dfn>Script data double escaped dash state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>script data double escaped dash dash state</a>. Emit a U+002D
    HYPHEN-MINUS character token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data double escaped less-than sign state</a>. Emit a U+003C
    LESS-THAN SIGN character token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Switch to the <a>script data double escaped state</a>. Emit a
    U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data double escaped state</a>. Emit the <a>current input
    character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-double-escaped-dash-dash-state"><dfn>Script data double escaped dash dash state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Emit a U+002D HYPHEN-MINUS character token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data double escaped less-than sign state</a>. Emit a U+003C
    LESS-THAN SIGN character token.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>script data state</a>. Emit a U+003E GREATER-THAN SIGN character
    token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Switch to the <a>script data double escaped state</a>. Emit a
    U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data double escaped state</a>. Emit the <a>current input
    character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-double-escaped-less-than-sign-state"><dfn>Script data double escaped less-than sign state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
    the <a>script data double escape end state</a>. Emit a U+002F SOLIDUS character token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data double escaped state</a>. Reconsume the <a>current
    input character</a>.</dd>

  </dl>

<h5 id="script-data-double-escape-end-state"><dfn>Script data double escape end state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dt>U+002F SOLIDUS (/)</dt>
    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>If the <var>temporary buffer</var> is the string "<code>script</code>", then switch to the <a>script data escaped state</a>. Otherwise,
    switch to the <a>script data double escaped state</a>. Emit the <a>current input
    character</a> as a character token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the <var>temporary buffer</var>. Emit the
    <a>current input character</a> as a character token.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Append the <a>current input character</a> to the <var>temporary buffer</var>. Emit the <a>current input character</a> as a character
    token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data double escaped state</a>. Reconsume the <a>current
    input character</a>.</dd>

  </dl>

<h5 id="before-attribute-name-state"><dfn>Before attribute name state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Switch to the <a>self-closing start tag state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Start a new attribute in the current tag token. Set that attribute's name to the lowercase
    version of the <a>current input character</a> (add 0x0020 to the character's code point),
    and its value to the empty string. Switch to the <a>attribute name state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Start a new attribute in the current tag token. Set that
    attribute's name to a U+FFFD REPLACEMENT CHARACTER character, and its value to the empty string.
    Switch to the <a>attribute name state</a>.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dt>U+0027 APOSTROPHE (')</dt>
    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dt>U+003D EQUALS SIGN (=)</dt>
    <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Start a new attribute in the current tag token. Set that attribute's name to the
    <a>current input character</a>, and its value to the empty string. Switch to the
    <a>attribute name state</a>.</dd>

  </dl>

<h5 id="attribute-name-state"><dfn>Attribute name state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>after attribute name state</a>.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Switch to the <a>self-closing start tag state</a>.</dd>

    <dt>U+003D EQUALS SIGN (=)</dt>
    <dd>Switch to the <a>before attribute value state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current attribute's name.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    attribute's name.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dt>U+0027 APOSTROPHE (')</dt>
    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current attribute's name.</dd>

  </dl>

  When the user agent leaves the attribute name state (and before emitting the tag token, if
  appropriate), the complete attribute's name must be compared to the other attributes on the same
  token; if there is already an attribute on the token with the exact same name, then this is a
  <a>parse error</a> and the new attribute must be removed from the token.

  <p class="note">
  If an attribute is so removed from a token, it, and the value that gets associated
  with it, if any, are never subsequently used by the parser, and are therefore effectively
  discarded. Removing the attribute in this way does not change its status as the "current
  attribute" for the purposes of the tokenizer, however.
  </p>

<h5 id="after-attribute-name-state"><dfn>After attribute name state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Switch to the <a>self-closing start tag state</a>.</dd>

    <dt>U+003D EQUALS SIGN (=)</dt>
    <dd>Switch to the <a>before attribute value state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Start a new attribute in the current tag token. Set that attribute's name to the lowercase
    version of the <a>current input character</a> (add 0x0020 to the character's code point),
    and its value to the empty string. Switch to the <a>attribute name state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Start a new attribute in the current tag token. Set that
    attribute's name to a U+FFFD REPLACEMENT CHARACTER character, and its value to the empty string.
    Switch to the <a>attribute name state</a>.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dt>U+0027 APOSTROPHE (')</dt>
    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Start a new attribute in the current tag token. Set that attribute's name to the
    <a>current input character</a>, and its value to the empty string. Switch to the
    <a>attribute name state</a>.</dd>

  </dl>

<h5 id="before-attribute-value-state"><dfn>Before attribute value state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Switch to the <a>attribute value (double-quoted) state</a>.</dd>

    <dt>U+0026 AMPERSAND (&amp;)</dt>
    <dd>Switch to the <a>attribute value (unquoted) state</a>. Reconsume the <a>current
    input character</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Switch to the <a>attribute value (single-quoted) state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    attribute's value. Switch to the <a>attribute value (unquoted) state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the current tag
    token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dt>U+003D EQUALS SIGN (=)</dt>
    <dt>U+0060 GRAVE ACCENT (`)</dt>
    <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current attribute's value. Switch to
    the <a>attribute value (unquoted) state</a>.</dd>

  </dl>

<h5 id="attribute-value-(double-quoted)-state"><dfn>Attribute value (double-quoted) state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Switch to the <a>after attribute value (quoted) state</a>.</dd>

    <dt>U+0026 AMPERSAND (&amp;)</dt>
    <dd>Switch to the <a>character reference in attribute value state</a>, with the
    <a>additional allowed character</a> being U+0022 QUOTATION MARK (&quot;).</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    attribute's value.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current attribute's value.</dd>

  </dl>

<h5 id="attribute-value-(single-quoted)-state"><dfn>Attribute value (single-quoted) state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Switch to the <a>after attribute value (quoted) state</a>.</dd>

    <dt>U+0026 AMPERSAND (&amp;)</dt>
    <dd>Switch to the <a>character reference in attribute value state</a>, with the
    <a>additional allowed character</a> being U+0027 APOSTROPHE (').</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    attribute's value.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current attribute's value.</dd>

  </dl>

<h5 id="attribute-value-(unquoted)-state"><dfn>Attribute value (unquoted) state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>before attribute name state</a>.</dd>

    <dt>U+0026 AMPERSAND (&amp;)</dt>
    <dd>Switch to the <a>character reference in attribute value state</a>, with the
    <a>additional allowed character</a> being U+003E GREATER-THAN SIGN (&gt;).</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    attribute's value.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dt>U+0027 APOSTROPHE (')</dt>
    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dt>U+003D EQUALS SIGN (=)</dt>
    <dt>U+0060 GRAVE ACCENT (`)</dt>
    <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current attribute's value.</dd>

  </dl>

<h5 id="character-reference-in-attribute-value-state"><dfn>Character reference in attribute value state</dfn></h5>

  Attempt to <a>consume a character reference</a>.

  If nothing is returned, append a U+0026 AMPERSAND character (&amp;) to the current attribute's
  value.

  Otherwise, append the returned character tokens to the current attribute's value.

  Finally, switch back to the attribute value state that switched into this state.

<h5 id="after-attribute-value-(quoted)-state"><dfn>After attribute value (quoted) state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>before attribute name state</a>.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Switch to the <a>self-closing start tag state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Switch to the <a>before attribute name state</a>. Reconsume
    the character.</dd>

  </dl>

<h5 id="self-closing-start-tag-state"><dfn>Self-closing start tag state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Set the <i>self-closing flag</i> of the current tag token. Switch to the <a>data
    state</a>. Emit the current tag token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Switch to the <a>before attribute name state</a>. Reconsume
    the character.</dd>

  </dl>

<h5 id="bogus-comment-state"><dfn>Bogus comment state</dfn></h5>

  Consume every character up to and including the first U+003E GREATER-THAN SIGN character (&gt;)
  or the end of the file (EOF), whichever comes first.
  If more than one character was consumed, then emit a comment token whose data is the
  concatenation of all the characters starting from and including the character that caused the
  state machine to switch into the bogus comment state, up to and including the character
  immediately before the last consumed character (i.e. up to the character just before the U+003E or
  EOF character), but with any U+0000 NULL characters replaced by U+FFFD REPLACEMENT CHARACTER
  characters. (If the comment was started by the end of the file (EOF), the token is empty.
  Similarly, the token is empty if it was generated by the string "<code>&lt;!></code>".)

  Switch to the <a>data state</a>.

  If the end of the file was reached, reconsume the EOF character.

<h5 id="markup-declaration-open-state"><dfn>Markup declaration open state</dfn></h5>

  If the next two characters are both U+002D HYPHEN-MINUS characters (-), consume those two
  characters, create a comment token whose data is the empty string, and switch to the <a>comment
  start state</a>.

  Otherwise, if the next seven characters are an <a>ASCII case-insensitive</a> match for
  the word "DOCTYPE", then consume those characters and switch to the <a>DOCTYPE
  state</a>.

  Otherwise, if there is an <a>adjusted current node</a> and it is not an element in the
  <a>HTML namespace</a> and the next seven characters are a <a>case-sensitive</a> match
  for the string "[CDATA[" (the five uppercase letters "CDATA" with a U+005B LEFT SQUARE BRACKET
  character before and after), then consume those characters and switch to the <a>CDATA section
  state</a>.

  Otherwise, this is a <a>parse error</a>. Switch to the <a>bogus comment state</a>.
  The next character that is consumed, if any, is the first character that will be in the
  comment.

<h5 id="comment-start-state"><dfn>Comment start state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>comment start dash state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the comment
    token's data. Switch to the <a>comment state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
    Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the comment token's data. Switch to the
    <a>comment state</a>.</dd>

  </dl>

<h5 id="comment-start-dash-state"><dfn>Comment start dash state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>comment end state</a></dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+002D HYPHEN-MINUS character (-) and a U+FFFD REPLACEMENT
    CHARACTER character to the comment token's data. Switch to the <a>comment state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
    Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append a U+002D HYPHEN-MINUS character (-) and the <a>current input character</a> to
    the comment token's data. Switch to the <a>comment state</a>.</dd>

  </dl>

<h5 id="comment-state"><dfn>Comment state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>comment end dash state</a></dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the comment
    token's data.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
    Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the comment token's data.</dd>

  </dl>

<h5 id="comment-end-dash-state"><dfn>Comment end dash state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>comment end state</a></dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+002D HYPHEN-MINUS character (-) and a U+FFFD REPLACEMENT
    CHARACTER character to the comment token's data. Switch to the <a>comment state</a>.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
    Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append a U+002D HYPHEN-MINUS character (-) and the <a>current input character</a> to
    the comment token's data. Switch to the <a>comment state</a>.</dd>

  </dl>

<h5 id="comment-end-state"><dfn>Comment end state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the comment token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append two U+002D HYPHEN-MINUS characters (-) and a U+FFFD
    REPLACEMENT CHARACTER character to the comment token's data. Switch to the <a>comment
    state</a>.</dd>

    <dt>U+0021 EXCLAMATION MARK (!)</dt>
    <dd><a>Parse error</a>. Switch to the <a>comment end bang state</a>.</dd>

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd><a>Parse error</a>. Append a U+002D HYPHEN-MINUS character (-) to the comment token's
    data.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
    Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Append two U+002D HYPHEN-MINUS characters (-) and the <a>current
    input character</a> to the comment token's data. Switch to the <a>comment
    state</a>.</dd>

  </dl>

<h5 id="comment-end-bang-state"><dfn>Comment end bang state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Append two U+002D HYPHEN-MINUS characters (-) and a U+0021 EXCLAMATION MARK character (!) to
    the comment token's data. Switch to the <a>comment end dash state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the comment token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append two U+002D HYPHEN-MINUS characters (-), a U+0021 EXCLAMATION
    MARK character (!), and a U+FFFD REPLACEMENT CHARACTER character to the comment token's data.
    Switch to the <a>comment state</a>.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
    Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append two U+002D HYPHEN-MINUS characters (-), a U+0021 EXCLAMATION MARK character (!), and
    the <a>current input character</a> to the comment token's data. Switch to the <a>comment
    state</a>.</dd>

  </dl>

<h5 id="doctype-state"><dfn>DOCTYPE state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>before DOCTYPE name state</a>.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Create a new DOCTYPE token.
    Set its <i>force-quirks flag</i> to <i>on</i>. Emit the token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Switch to the <a>before DOCTYPE name state</a>. Reconsume the
    character.</dd>

  </dl>

<h5 id="before-doctype-name-state"><dfn>Before DOCTYPE name state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new DOCTYPE token. Set the token's name to the lowercase version of the
    <a>current input character</a> (add 0x0020 to the character's code point). Switch to the
    <a>DOCTYPE name state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Create a new DOCTYPE token. Set the token's name to a U+FFFD
    REPLACEMENT CHARACTER character. Switch to the <a>DOCTYPE name state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Create a new DOCTYPE token. Set its <i>force-quirks flag</i> to
    <i>on</i>. Switch to the <a>data state</a>. Emit the token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Create a new DOCTYPE token.
    Set its <i>force-quirks flag</i> to <i>on</i>. Emit the token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Create a new DOCTYPE token. Set the token's name to the <a>current input character</a>.
    Switch to the <a>DOCTYPE name state</a>.</dd>

  </dl>

<h5 id="doctype-name-state"><dfn>DOCTYPE name state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>after DOCTYPE name state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current DOCTYPE token's name.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    DOCTYPE token's name.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current DOCTYPE token's name.</dd>

  </dl>

<h5 id="after-doctype-name-state"><dfn>After DOCTYPE name state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>

    If the six characters starting from the <a>current input character</a> are an
    <a>ASCII case-insensitive</a> match for the word "PUBLIC", then consume those characters
    and switch to the <a>after DOCTYPE public keyword state</a>.

    Otherwise, if the six characters starting from the <a>current input character</a> are
    an <a>ASCII case-insensitive</a> match for the word "SYSTEM", then consume those
    characters and switch to the <a>after DOCTYPE system keyword state</a>.

    Otherwise, this is a <a>parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>. Switch to the <a>bogus DOCTYPE state</a>.

    </dd>

  </dl>

<h5 id="after-doctype-public-keyword-state"><dfn>After DOCTYPE public keyword state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>before DOCTYPE public identifier state</a>.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's public identifier to the empty string (not
    missing), then switch to the <a>DOCTYPE public identifier (double-quoted) state</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's public identifier to the empty string (not
    missing), then switch to the <a>DOCTYPE public identifier (single-quoted) state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

<h5 id="before-doctype-public-identifier-state"><dfn>Before DOCTYPE public identifier state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to
    the <a>DOCTYPE public identifier (double-quoted) state</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to
    the <a>DOCTYPE public identifier (single-quoted) state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

<h5 id="doctype-public-identifier-double-quoted-state"><dfn>DOCTYPE public identifier (double-quoted) state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Switch to the <a>after DOCTYPE public identifier state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    DOCTYPE token's public identifier.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current DOCTYPE token's public
    identifier.</dd>

  </dl>

<h5 id="doctype-public-identifier-single-quoted-state"><dfn>DOCTYPE public identifier (single-quoted) state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Switch to the <a>after DOCTYPE public identifier state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    DOCTYPE token's public identifier.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current DOCTYPE token's public
    identifier.</dd>

  </dl>

<h5 id="after-doctype-public-identifier-state"><dfn>After DOCTYPE public identifier state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>between DOCTYPE public and system identifiers state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's system identifier to the empty string (not
    missing), then switch to the <a>DOCTYPE system identifier (double-quoted) state</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's system identifier to the empty string (not
    missing), then switch to the <a>DOCTYPE system identifier (single-quoted) state</a>.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

<h5 id="between-doctype-public-and-system-identifiers-state"><dfn>Between DOCTYPE public and system identifiers state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to
    the <a>DOCTYPE system identifier (double-quoted) state</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to
    the <a>DOCTYPE system identifier (single-quoted) state</a>.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

<h5 id="after-doctype-system-keyword-state"><dfn>After DOCTYPE system keyword state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>before DOCTYPE system identifier state</a>.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's system identifier to the empty string (not
    missing), then switch to the <a>DOCTYPE system identifier (double-quoted) state</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's system identifier to the empty string (not
    missing), then switch to the <a>DOCTYPE system identifier (single-quoted) state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

<h5 id="before-doctype-system-identifier-state"><dfn>Before DOCTYPE system identifier state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to
    the <a>DOCTYPE system identifier (double-quoted) state</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to
    the <a>DOCTYPE system identifier (single-quoted) state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

<h5 id="doctype-system-identifier-double-quoted-state"><dfn>DOCTYPE system identifier (double-quoted) state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Switch to the <a>after DOCTYPE system identifier state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    DOCTYPE token's system identifier.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current DOCTYPE token's system
    identifier.</dd>

  </dl>

<h5 id="doctype-system-identifier-single-quoted-state"><dfn>DOCTYPE system identifier (single-quoted) state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Switch to the <a>after DOCTYPE system identifier state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    DOCTYPE token's system identifier.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current DOCTYPE token's system
    identifier.</dd>

  </dl>

<h5 id="after-doctype-system-identifier-state"><dfn>After DOCTYPE system identifier state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Switch to the <a>bogus DOCTYPE state</a>. (This does
    <em>not</em> set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.)</dd>

  </dl>

<h5 id="bogus-doctype-state"><dfn>Bogus DOCTYPE state</dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd>Switch to the <a>data state</a>. Emit the DOCTYPE token. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Ignore the character.</dd>

  </dl>

<h5 id="cdata-section-state"><dfn>CDATA section state</dfn></h5>

  Switch to the <a>data state</a>.

  Consume every character up to the next occurrence of the three character sequence U+005D RIGHT
  SQUARE BRACKET U+005D RIGHT SQUARE BRACKET U+003E GREATER-THAN SIGN (<code>]]&gt;</code>),
  or the end of the file (EOF), whichever comes first. Emit a series of character tokens consisting
  of all the characters consumed except the matching three character sequence at the end (if one was
  found before the end of the file).

  If the end of the file was reached, reconsume the EOF character.

<h5 id="tokenizing-character-references"><dfn>Tokenizing character references</dfn></h5>

  This section defines how to <dfn>consume a character reference</dfn>, optionally with an
  <dfn>additional allowed character</dfn>, which, if specified where the algorithm is invoked, adds
  a character to the list of characters that cause there to not be a character reference.

  This definition is used when parsing character references <a>in text</a> and <a>in
  attributes</a>.

  The behavior depends on the identity of the next character (the one immediately after the
  U+0026 AMPERSAND character), as follows:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dt>U+003C LESS-THAN SIGN</dt>
    <dt>U+0026 AMPERSAND</dt>
    <dt>EOF</dt>
    <dt>The <a>additional allowed character</a>, if there is one</dt>

    <dd>Not a character reference. No characters are consumed, and nothing is returned. (This is not
    an error, either.)</dd>

    <dt>U+0023 NUMBER SIGN (#)</dt>

    <dd>

    Consume the U+0023 NUMBER SIGN.

    The behavior further depends on the character after the U+0023 NUMBER SIGN:

    <dl class="switch">

      <dt>U+0078 LATIN SMALL LETTER X</dt>
      <dt>U+0058 LATIN CAPITAL LETTER X</dt>

      <dd>

      Consume the X.

      Follow the steps below, but using <a>ASCII hex digits</a>.

      When it comes to interpreting the number, interpret it as a hexadecimal number.

      </dd>

      <dt>Anything else</dt>

      <dd>

      Follow the steps below, but using <a>ASCII digits</a>.

      When it comes to interpreting the number, interpret it as a decimal number.

      </dd>

    </dl>

    Consume as many characters as match the range of characters given above (<a>ASCII hex
    digits</a> or <a>ASCII digits</a>).

    If no characters match the range, then don't consume any characters (and unconsume the U+0023
    NUMBER SIGN character and, if appropriate, the X character). This is a <a>parse error</a>;
    nothing is returned.

    Otherwise, if the next character is a U+003B SEMICOLON, consume that too. If it isn't, there
    is a <a>parse error</a>.

    If one or more characters match the range, then take them all and interpret the string of
    characters as a number (either hexadecimal or decimal as appropriate).

    If that number is one of the numbers in the first column of the following table, then this is
    a <a>parse error</a>. Find the row with that number in the first column, and return a
    character token for the Unicode character given in the second column of that row.

    <table>
      <thead>
      <tr><th>Number <th colspan=2>Unicode character
      <tbody>
      <tr><td>0x00 <td>U+FFFD <td>REPLACEMENT CHARACTER

      <tr><td>0x80 <td>U+20AC <td>EURO SIGN (&#x20AC;)

      <tr><td>0x82 <td>U+201A <td>SINGLE LOW-9 QUOTATION MARK (&#x201A;)
      <tr><td>0x83 <td>U+0192 <td>LATIN SMALL LETTER F WITH HOOK (&#x0192;)
      <tr><td>0x84 <td>U+201E <td>DOUBLE LOW-9 QUOTATION MARK (&#x201E;)
      <tr><td>0x85 <td>U+2026 <td>HORIZONTAL ELLIPSIS (&#x2026;)
      <tr><td>0x86 <td>U+2020 <td>DAGGER (&#x2020;)
      <tr><td>0x87 <td>U+2021 <td>DOUBLE DAGGER (&#x2021;)
      <tr><td>0x88 <td>U+02C6 <td>MODIFIER LETTER CIRCUMFLEX ACCENT (&#x02C6;)
      <tr><td>0x89 <td>U+2030 <td>PER MILLE SIGN (&#x2030;)
      <tr><td>0x8A <td>U+0160 <td>LATIN CAPITAL LETTER S WITH CARON (&#x0160;)
      <tr><td>0x8B <td>U+2039 <td>SINGLE LEFT-POINTING ANGLE QUOTATION MARK (&#x2039;)
      <tr><td>0x8C <td>U+0152 <td>LATIN CAPITAL LIGATURE OE (&#x0152;)

      <tr><td>0x8E <td>U+017D <td>LATIN CAPITAL LETTER Z WITH CARON (&#x017D;)

      <tr><td>0x91 <td>U+2018 <td>LEFT SINGLE QUOTATION MARK (&#x2018;)
      <tr><td>0x92 <td>U+2019 <td>RIGHT SINGLE QUOTATION MARK (&#x2019;)
      <tr><td>0x93 <td>U+201C <td>LEFT DOUBLE QUOTATION MARK (&#x201C;)
      <tr><td>0x94 <td>U+201D <td>RIGHT DOUBLE QUOTATION MARK (&#x201D;)
      <tr><td>0x95 <td>U+2022 <td>BULLET (&#x2022;)
      <tr><td>0x96 <td>U+2013 <td>EN DASH (&#x2013;)
      <tr><td>0x97 <td>U+2014 <td>EM DASH (&#x2014;)
      <tr><td>0x98 <td>U+02DC <td>SMALL TILDE (&#x02DC;)
      <tr><td>0x99 <td>U+2122 <td>TRADE MARK SIGN (&#x2122;)
      <tr><td>0x9A <td>U+0161 <td>LATIN SMALL LETTER S WITH CARON (&#x0161;)
      <tr><td>0x9B <td>U+203A <td>SINGLE RIGHT-POINTING ANGLE QUOTATION MARK (&#x203A;)
      <tr><td>0x9C <td>U+0153 <td>LATIN SMALL LIGATURE OE (&#x0153;)

      <tr><td>0x9E <td>U+017E <td>LATIN SMALL LETTER Z WITH CARON (&#x017E;)
      <tr><td>0x9F <td>U+0178 <td>LATIN CAPITAL LETTER Y WITH DIAERESIS (&#x0178;)
    </table>

    Otherwise, if the number is in the range 0xD800 to 0xDFFF or is greater
    than 0x10FFFF, then this is a <a>parse error</a>. Return a U+FFFD REPLACEMENT CHARACTER
    character token.

    Otherwise, return a character token for the Unicode character whose code point is that
    number.

      Additionally, if the number is in the range 0x0001 to 0x0008,    0x000D to 0x001F,  0x007F  to 0x009F, 0xFDD0 to 0xFDEF, or is
    one of 0x000B, 0xFFFE, 0xFFFF, 0x1FFFE, 0x1FFFF, 0x2FFFE, 0x2FFFF, 0x3FFFE, 0x3FFFF, 0x4FFFE,
    0x4FFFF, 0x5FFFE, 0x5FFFF, 0x6FFFE, 0x6FFFF, 0x7FFFE, 0x7FFFF, 0x8FFFE, 0x8FFFF, 0x9FFFE,
    0x9FFFF, 0xAFFFE, 0xAFFFF, 0xBFFFE, 0xBFFFF, 0xCFFFE, 0xCFFFF, 0xDFFFE, 0xDFFFF, 0xEFFFE,
    0xEFFFF, 0xFFFFE, 0xFFFFF, 0x10FFFE, or 0x10FFFF, then this is a <a>parse error</a>.

    </dd>

    <dt>Anything else</dt>

    <dd>

    Consume the maximum number of characters possible, with the consumed characters matching one
    of the identifiers in the first column of the <a>named character references</a> table (in
    a <a>case-sensitive</a> manner).

    If no match can be made, then no characters are consumed, and nothing is returned. In this
    case, if the characters after the U+0026 AMPERSAND character (&amp;) consist of a sequence of
    one or more <a>alphanumeric ASCII characters</a> followed by a U+003B SEMICOLON character
    (;), then this is a <a>parse error</a>.

    If the character reference is being consumed <a>as part of an attribute</a>, and the last character matched is not a U+003B
    SEMICOLON character (;), and the next character is either a U+003D EQUALS SIGN character (=) or
    an <a>alphanumeric ASCII character</a>, then, for
    historical reasons, all the characters that were matched after the U+0026 AMPERSAND character
    (&amp;) must be unconsumed, and nothing is returned.

    However, if this next character is in fact a U+003D EQUALS SIGN character (=), then this is a
    <a>parse error</a>, because some legacy user agents  will
    misinterpret the markup in those cases.

    Otherwise, a character reference is parsed. If the last character matched is not a U+003B
    SEMICOLON character (;), there is a <a>parse error</a>.

    Return one or two character tokens for the character(s) corresponding to the character
    reference name (as given by the second column of the <a>named character references</a>
    table).

    <div class="example">
      If the markup contains (not in an attribute) the string <code>I'm &amp;notit; I
      tell you</code>, the character reference is parsed as "not", as in, <code>I'm &not;it;
      I tell you</code> (and this is a parse error). But if the markup was <code>I'm
      &amp;notin; I tell you</code>, the character reference would be parsed as "notin;", resulting
      in <code>I'm &notin; I tell you</code> (and no parse error).
    </div>

    </dd>

  </dl>

  </div>

  <div class="impl">

<h4 id="tree-construction"><dfn>Tree construction</dfn></h4>

  The input to the tree construction stage is a sequence of tokens from the
  <a>tokenization</a> stage. The tree construction stage is associated with a DOM
  <code>Document</code> object when a parser is created. The "output" of this stage consists of
  dynamically modifying or extending that document's DOM tree.

  This specification does not define when an interactive user agent has to render the
  <code>Document</code> so that it is available to the user, or when it has to begin accepting user
  input.

  <hr />

  As each token is emitted from the tokenizer, the user agent must follow the appropriate steps
  from the following list, known as the <dfn>tree construction dispatcher</dfn>:

  <dl class="switch">

    <dt>If the <a>stack of open elements</a> is empty</dt>
    <dt>If the <a>adjusted current node</a> is an element in the <a>HTML namespace</a></dt>
    <dt>If the <a>adjusted current node</a> is a <a>MathML text integration point</a> and the token is a start tag whose tag name is neither "mglyph" nor "malignmark"</dt>
    <dt>If the <a>adjusted current node</a> is a <a>MathML text integration point</a> and the token is a character token</dt>
    <dt>If the <a>adjusted current node</a> is an <code>annotation-xml</code> element in the <a>MathML namespace</a> and the token is a start tag whose tag name is "svg"</dt>
    <dt>If the <a>adjusted current node</a> is an <a>HTML integration point</a> and the token is a start tag</dt>
    <dt>If the <a>adjusted current node</a> is an <a>HTML integration point</a> and the token is a character token</dt>
    <dt>If the token is an end-of-file token</dt>

    <dd>Process the token according to the rules given in the section corresponding to the current
    <a>insertion mode</a> in HTML content.</dd>

    <dt>Otherwise</dt>

    <dd>Process the token according to the rules given in the section for parsing tokens <a>in foreign content</a>.</dd>

  </dl>

  The <dfn>next token</dfn> is the token that is about to be processed by the <a>tree
  construction dispatcher</a> (even if the token is subsequently just ignored).

  A node is a <dfn>MathML text integration point</dfn> if it is one of the following
  elements:

  <ul class="brief">
    <li>An <code>mi</code> element in the <a>MathML namespace</a></li>
    <li>An <code>mo</code> element in the <a>MathML namespace</a></li>
    <li>An <code>mn</code> element in the <a>MathML namespace</a></li>
    <li>An <code>ms</code> element in the <a>MathML namespace</a></li>
    <li>An <code>mtext</code> element in the <a>MathML namespace</a></li>
  </ul>

  A node is an <dfn>HTML integration point</dfn> if it is one of the following elements:

  <ul class="brief">
    <li>An <code>annotation-xml</code> element in the <a>MathML
    namespace</a> whose start tag token had an attribute with the name "encoding" whose value was
    an <a>ASCII case-insensitive</a> match for the string "<code>text/html</code>"</li>
    <li>An <code>annotation-xml</code> element in the <a>MathML
    namespace</a> whose start tag token had an attribute with the name "encoding" whose value was
    an <a>ASCII case-insensitive</a> match for the string "<code>application/xhtml+xml</code>"</li>
    <li>A <code>foreignObject</code> element in the <a>SVG namespace</a></li>
    <li>A <code>desc</code> element in the <a>SVG namespace</a></li>
    <li>A <code>title</code> element in the <a>SVG namespace</a></li>
  </ul>

  <p class="note">
  If the node in question is the <var>context</var> element passed to the <a>HTML fragment
  parsing algorithm</a>, then the start tag token for that element is the "fake" token created
  during by that <a>HTML fragment parsing algorithm</a>.
  </p>

  <hr />

  <p class="note">
  Not all of the tag names mentioned below are conformant tag names in this
  specification; many are included to handle legacy content. They still form part of the algorithm
  that implementations are required to implement to claim conformance.
  </p>

  <p class="note">
  The algorithm described below places no limit on the depth of the DOM tree
  generated, or on the length of tag names, attribute names, attribute values, <code>Text</code>
  nodes, etc. While implementors are encouraged to avoid arbitrary limits, it is recognized that <a>practical concerns</a> will likely force user agents to impose nesting
  depth constraints.
  </p>

<h5 id="creating-and-inserting-nodes"><dfn>Creating and inserting nodes</dfn></h5>

  While the parser is processing a token, it can enable or disable <dfn>foster parenting</dfn>. This affects the following algorithm.

  The <dfn>appropriate place for inserting a node</dfn>, optionally using a particular
  <i>override target</i>, is the position in an element returned by running the following steps:

  <ol>

    <li>

    If there was an <i>override target</i> specified, then let <var>target</var> be the
    <i>override target</i>.

    Otherwise, let <var>target</var> be the <a>current node</a>.

    </li>

    <li>

    Determine the <var>adjusted insertion location</var> using the first matching steps
    from the following list:

    <dl class="switch">

      <dt>If <a>foster parenting</a> is enabled and <var>target</var> is a <code>table</code>, <code>tbody</code>, <code>tfoot</code>,
      <code>thead</code>, or <code>tr</code> element</dt>

      <dd>

      <p class="note">
  Foster parenting happens when content is misnested in tables.
  </p>

      Run these substeps:

      <ol>

        <li>Let <var>last template</var> be the last <code>template</code> element in the
        <a>stack of open elements</a>, if any.

        <li>Let <var>last table</var> be the last <code>table</code> element in the
        <a>stack of open elements</a>, if any.

        <li>If there is a <var>last template</var> and either there is no <var>last table</var>, or there is one, but <var>last template</var> is lower
        (more recently added) than <var>last table</var> in the <a>stack of open
        elements</a>, then: let <var>adjusted insertion location</var> be inside <var>last template</var>'s <a>template contents</a>, after its last child (if any),
        and abort these substeps.</li>

        <li>If there is no <var>last table</var>,  then let <var>adjusted insertion
        location</var> be inside the first element in the <a>stack of open elements</a> (the
        <code>html</code> element), after its last child (if any), and abort these substeps.
        (<a>fragment case</a>)

        <li>If <var>last table</var> has a parent node, then let <var>adjusted insertion location</var> be inside <var>last table</var>'s parent
        node, immediately before <var>last table</var>, and abort these
        substeps.</li>

        <li>Let <var>previous element</var> be the element immediately above <var>last table</var> in the <a>stack of open elements</a>.</li>

        <li>Let <var>adjusted insertion location</var> be inside <var>previous
        element</var>, after its last child (if any).</li>

      </ol>

      <p class="note">
  These steps are involved in part because it's possible for elements, the
      <code>table</code> element in this case in particular, to have been moved by a script around
      in the DOM, or indeed removed from the DOM entirely, after the element was inserted by the
      parser.
  </p>

      </dd>

      <dt>Otherwise</dt>

      <dd>

      Let <var>adjusted insertion location</var> be inside <var>target</var>,
      after its last child (if any).

      </dd>

    </dl>

    </li>

    <li>

    If the <var>adjusted insertion location</var> is inside a <code>template</code>
    element, let it instead be inside the <code>template</code> element's <a>template
    contents</a>, after its last child (if any).

    </li>

    <li>

    Return the <var>adjusted insertion location</var>.

    </li>

  </ol>

  <hr />

  When the steps below require the UA to <dfn>create an
  element for a token</dfn> in a particular <var>given namespace</var> and with a
  particular <var>intended parent</var>, the UA must run the following steps:

  <ol>

    <li>

    Create a node implementing the interface appropriate for the element type corresponding to
    the tag name of the token in <var>given namespace</var> (as given in the specification
    that defines that element, e.g. for an <code>a</code> element in the <a>HTML
    namespace</a>, this specification defines it to be the <code>HTMLAnchorElement</code>
    interface), with the tag name being the name of that element, with the node being in the given
    namespace, and with the attributes on the node being those given in the given token.

    The interface appropriate for an element in the <a>HTML namespace</a> that is not
    defined in this specification (or <a>other applicable specifications</a>) is
    <code>HTMLUnknownElement</code>. Elements in other namespaces whose interface is not defined by
    that namespace's specification must use the interface <code>Element</code>.

    The <a>node document</a> of the newly created element
    must be the <a>node document</a> of the <var>intended parent</var>.

    </li>

    <li>If the newly created element has an <code>xmlns</code> attribute <em>in the
    <a>XMLNS namespace</a></em> whose value is not exactly the same as the element's namespace,
    that is a <a>parse error</a>. Similarly, if the newly created element has an <code>xmlns:xlink</code> attribute in the <a>XMLNS namespace</a> whose value is not the
    <a>XLink Namespace</a>, that is a <a>parse error</a>.</li>

    <li>If the newly created element is a <a>resettable element</a>,
    invoke its <a>reset algorithm</a>. (This initializes the
    element's <a>value</a> and <a>checkedness</a> based on the element's attributes.)</li>

    <li>If the element is a <a>form-associated element</a>, and the <a><code>form</code> element pointer</a> is not null, and there is no <code>template</code>
    element on the <a>stack of open elements</a>, and the newly created element is either not
    <a>reassociateable</a> or doesn't have a <code>form</code> attribute, and the <var>intended parent</var> is in
    the same <a>home subtree</a> as the element pointed to by the <a><code>form</code> element pointer</a>, <a>associate</a> the newly created element with the
    <code>form</code> element pointed to by the <a><code>form</code> element
    pointer</a>, and suppress the running of the <a>reset the form owner</a> algorithm when
    the parser subsequently attempts to insert the element.</li>

    <li>Return the newly created element.</li>

  </ol>

  <hr />

  When the steps below require the user agent to <dfn>insert a foreign element</dfn> for a token
  in a given namespace, the user agent must run these steps:

  <ol>

    <li>Let the <var>adjusted insertion location</var> be the <a>appropriate place for
    inserting a node</a>.</li>

    <li><a>Create an element for the token</a> in the given namespace, with the intended
    parent being the element in which the <var>adjusted insertion location</var> finds
    itself.</li>

    <li>

    If it is possible to insert an element at the <var>adjusted insertion
    location</var>, then insert the newly created element at the <var>adjusted insertion
    location</var>.

    <p class="note">
  If the <var>adjusted insertion location</var> cannot accept more
    elements, e.g. because it's a <code>Document</code> that already has an element child, then the
    newly created element is dropped on the floor.
  </p>

    </li>

    <li>Push the element onto the <a>stack of open elements</a> so that it is the new
    <a>current node</a>.</li>

    <li>Return the newly created element.</li>

  </ol>

  When the steps below require the user agent to <dfn>insert an HTML element</dfn> for a token,
  the user agent must <a>insert a foreign element</a> for the token, in the <a>HTML
  namespace</a>.

  <hr />

  When the steps below require the user agent to <dfn>adjust MathML attributes</dfn> for a token,
  then, if the token has an attribute named <code>definitionurl</code>, change its name to
  <code>definitionURL</code> (note the case difference).

  When the steps below require the user agent to <dfn>adjust SVG attributes</dfn> for a token,
  then, for each attribute on the token whose attribute name is one of the ones in the first column
  of the following table, change the attribute's name to the name given in the corresponding cell in
  the second column. (This fixes the case of SVG attributes that are not all lowercase.)

  <table>
    <thead>
    <tr> <th> Attribute name on token <th> Attribute name on element
    <tbody>
    <tr> <td> <code>attributename</code> <td> <code>attributeName</code>
    <tr> <td> <code>attributetype</code> <td> <code>attributeType</code>
    <tr> <td> <code>basefrequency</code> <td> <code>baseFrequency</code>
    <tr> <td> <code>baseprofile</code> <td> <code>baseProfile</code>
    <tr> <td> <code>calcmode</code> <td> <code>calcMode</code>
    <tr> <td> <code>clippathunits</code> <td> <code>clipPathUnits</code>
    <tr> <td> <code>diffuseconstant</code> <td> <code>diffuseConstant</code>
    <tr> <td> <code>edgemode</code> <td> <code>edgeMode</code>
    <tr> <td> <code>filterunits</code> <td> <code>filterUnits</code>
    <tr> <td> <code>glyphref</code> <td> <code>glyphRef</code>
    <tr> <td> <code>gradienttransform</code> <td> <code>gradientTransform</code>
    <tr> <td> <code>gradientunits</code> <td> <code>gradientUnits</code>
    <tr> <td> <code>kernelmatrix</code> <td> <code>kernelMatrix</code>
    <tr> <td> <code>kernelunitlength</code> <td> <code>kernelUnitLength</code>
    <tr> <td> <code>keypoints</code> <td> <code>keyPoints</code>
    <tr> <td> <code>keysplines</code> <td> <code>keySplines</code>
    <tr> <td> <code>keytimes</code> <td> <code>keyTimes</code>
    <tr> <td> <code>lengthadjust</code> <td> <code>lengthAdjust</code>
    <tr> <td> <code>limitingconeangle</code> <td> <code>limitingConeAngle</code>
    <tr> <td> <code>markerheight</code> <td> <code>markerHeight</code>
    <tr> <td> <code>markerunits</code> <td> <code>markerUnits</code>
    <tr> <td> <code>markerwidth</code> <td> <code>markerWidth</code>
    <tr> <td> <code>maskcontentunits</code> <td> <code>maskContentUnits</code>
    <tr> <td> <code>maskunits</code> <td> <code>maskUnits</code>
    <tr> <td> <code>numoctaves</code> <td> <code>numOctaves</code>
    <tr> <td> <code>pathlength</code> <td> <code>pathLength</code>
    <tr> <td> <code>patterncontentunits</code> <td> <code>patternContentUnits</code>
    <tr> <td> <code>patterntransform</code> <td> <code>patternTransform</code>
    <tr> <td> <code>patternunits</code> <td> <code>patternUnits</code>
    <tr> <td> <code>pointsatx</code> <td> <code>pointsAtX</code>
    <tr> <td> <code>pointsaty</code> <td> <code>pointsAtY</code>
    <tr> <td> <code>pointsatz</code> <td> <code>pointsAtZ</code>
    <tr> <td> <code>preservealpha</code> <td> <code>preserveAlpha</code>
    <tr> <td> <code>preserveaspectratio</code> <td> <code>preserveAspectRatio</code>
    <tr> <td> <code>primitiveunits</code> <td> <code>primitiveUnits</code>
    <tr> <td> <code>refx</code> <td> <code>refX</code>
    <tr> <td> <code>refy</code> <td> <code>refY</code>
    <tr> <td> <code>repeatcount</code> <td> <code>repeatCount</code>
    <tr> <td> <code>repeatdur</code> <td> <code>repeatDur</code>
    <tr> <td> <code>requiredextensions</code> <td> <code>requiredExtensions</code>
    <tr> <td> <code>requiredfeatures</code> <td> <code>requiredFeatures</code>
    <tr> <td> <code>specularconstant</code> <td> <code>specularConstant</code>
    <tr> <td> <code>specularexponent</code> <td> <code>specularExponent</code>
    <tr> <td> <code>spreadmethod</code> <td> <code>spreadMethod</code>
    <tr> <td> <code>startoffset</code> <td> <code>startOffset</code>
    <tr> <td> <code>stddeviation</code> <td> <code>stdDeviation</code>
    <tr> <td> <code>stitchtiles</code> <td> <code>stitchTiles</code>
    <tr> <td> <code>surfacescale</code> <td> <code>surfaceScale</code>
    <tr> <td> <code>systemlanguage</code> <td> <code>systemLanguage</code>
    <tr> <td> <code>tablevalues</code> <td> <code>tableValues</code>
    <tr> <td> <code>targetx</code> <td> <code>targetX</code>
    <tr> <td> <code>targety</code> <td> <code>targetY</code>
    <tr> <td> <code>textlength</code> <td> <code>textLength</code>
    <tr> <td> <code>viewbox</code> <td> <code>viewBox</code>
    <tr> <td> <code>viewtarget</code> <td> <code>viewTarget</code>
    <tr> <td> <code>xchannelselector</code> <td> <code>xChannelSelector</code>
    <tr> <td> <code>ychannelselector</code> <td> <code>yChannelSelector</code>
    <tr> <td> <code>zoomandpan</code> <td> <code>zoomAndPan</code>
  </table>

  When the steps below require the user agent to <dfn>adjust foreign attributes</dfn> for a
  token, then, if any of the attributes on the token match the strings given in the first column of
  the following table, let the attribute be a namespaced attribute, with the prefix being the string
  given in the corresponding cell in the second column, the local name being the string given in the
  corresponding cell in the third column, and the namespace being the namespace given in the
  corresponding cell in the fourth column. (This fixes the use of namespaced attributes, in
  particular <a><code>lang</code> attributes in the <span>XML
  namespace</a></span>.)

  <table>
    <thead>
    <tr> <th> Attribute name <th> Prefix <th> Local name <th> Namespace
    <tbody>
    <tr> <td> <code>xlink:actuate</code> <td> <code>xlink</code> <td> <code>actuate</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:arcrole</code> <td> <code>xlink</code> <td> <code>arcrole</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:href</code> <td> <code>xlink</code> <td> <code>href</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:role</code> <td> <code>xlink</code> <td> <code>role</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:show</code> <td> <code>xlink</code> <td> <code>show</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:title</code> <td> <code>xlink</code> <td> <code>title</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:type</code> <td> <code>xlink</code> <td> <code>type</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xml:lang</code> <td> <code>xml</code> <td> <code>lang</code> <td> <a>XML namespace</a>
    <tr> <td> <code>xml:space</code> <td> <code>xml</code> <td> <code>space</code> <td> <a>XML namespace</a>
    <tr> <td> <code>xmlns</code> <td> (none) <td> <code>xmlns</code> <td> <a>XMLNS namespace</a>
    <tr> <td> <code>xmlns:xlink</code> <td> <code>xmlns</code> <td> <code>xlink</code> <td> <a>XMLNS namespace</a>
  </table>

  <hr />

  When the steps below require the user agent to <dfn>insert a character</dfn> while processing a
  token, the user agent must run the following steps:

  <ol>

    <li>Let <var>data</var> be the characters passed to the algorithm, or, if no
    characters were explicitly specified, the character of the character token being
    processed.</li>

    <li>Let the <var>adjusted insertion location</var> be the <a>appropriate
    place for inserting a node</a>.</li>

    <li>

    If the <var>adjusted insertion location</var> is in a <code>Document</code> node,
    then abort these steps.

    <p class="note">
  The DOM will not let <code>Document</code> nodes have <code>Text</code> node
    children, so they are dropped on the floor.

    </li>

    <li>

    If there is a <code>Text</code> node immediately before the <var>adjusted insertion
    location</var>, then append <var>data</var> to that <code>Text</code> node's data.

    Otherwise, create a new <code>Text</code> node whose data is <var>data</var> and
    whose <a>node document</a> is the same as that of the
    element in which the <var>adjusted insertion location</var> finds itself, and insert
    the newly created node at the <var>adjusted insertion location</var>.

    </li>

  </ol>

  <div class="example">
    Here are some sample inputs to the parser and the corresponding number of <code>Text</code>
    nodes that they result in, assuming a user agent that executes scripts.

    <table>
    <thead>
      <tr>
      <th>Input <th>Number of <code>Text</code> nodes
    <tbody>
      <tr>
      <td><pre highlight="html">
  A&lt;script>
  var&nbsp;script&nbsp;=&nbsp;document.getElementsByTagName('script')[0];
  document.body.removeChild(script);
  &lt;/script>B
  </pre>
      <td>One <code>Text</code> node in the document, containing "AB".
      <tr>
      <td><pre highlight="html">
  A&lt;script>
  var&nbsp;text&nbsp;=&nbsp;document.createTextNode('B');
  document.body.appendChild(text);
  &lt;/script>C
  </pre>
      <td>Three <code>Text</code> nodes; "A" before the script, the script's contents, and "BC" after the script (the parser appends to the <code>Text</code> node created by the script).
      <tr>
      <td><pre highlight="html">
  A&lt;script>
  var&nbsp;text&nbsp;=&nbsp;document.getElementsByTagName('script')[0].firstChild;
  text.data&nbsp;=&nbsp;'B';
  document.body.appendChild(text);
  &lt;/script>C
  </pre>
      <td>Two adjacent <code>Text</code> nodes in the document, containing "A" and "BC".
      <tr>
      <td><pre highlight="html">
  A&lt;table>B&lt;tr>C&lt;/tr>D&lt;/table>
  </pre>
      <td>One <code>Text</code> node before the table, containing "ABCD". (This is caused by <a>foster parenting</a>.)
      <tr>
      <td><pre highlight="html">
  A&lt;table>&lt;tr>&nbsp;B&lt;/tr>&nbsp;C&lt;/table>
  </pre>
      <td>One <code>Text</code> node before the table, containing "A&nbsp;B&nbsp;C" (A-space-B-space-C). (This is caused by <a>foster parenting</a>.)
      <tr>
      <td><pre highlight="html">
  A&lt;table>&lt;tr>&nbsp;B&lt;/tr>&nbsp;&lt;/em>C&lt;/table>
  </pre>
      <td>One <code>Text</code> node before the table, containing "A&nbsp;BC" (A-space-B-C), and one <code>Text</code> node inside the table (as a child of a <code>tbody</code>) with a single space character. (Space characters separated from non-space characters by non-character tokens are not affected by <a>foster parenting</a>, even if those other tokens then get ignored.)
    </table>
  </div>

  <hr />

  When the steps below require the user agent to <dfn>insert a comment</dfn> while processing a
  comment token, optionally with an explicitly insertion position <var>position</var>, the
  user agent must run the following steps:

  <ol>

    <li>Let <var>data</var> be the data given in the comment token being
    processed.</li>

    <li>If <var>position</var> was specified, then let the <var>adjusted
    insertion location</var> be <var>position</var>. Otherwise, let <var>adjusted
    insertion location</var> be the <a>appropriate place for inserting a node</a>.</li>

    <li>Create a <code>Comment</code> node whose <code>data</code> attribute is set to
    <var>data</var> and whose <a>node document</a> is
    the same as that of the node in which the <var>adjusted insertion location</var> finds
    itself.

    <li>Insert the newly created node at the <var>adjusted insertion
    location</var>.</li>

  </ol>

  <hr />

  DOM mutation events must not fire for changes caused by the UA
  parsing the document. This includes the parsing of any content inserted using <code>document.write()</code> and <code>document.writeln()</code> calls. [[!UIEVENTS]]

  However, <a>mutation observers</a> <em>do</em> fire, as required by the DOM specification.

<h5 id="parsing-elements-that-contain-only-text"><dfn>Parsing elements that contain only text</dfn></h5>

  The <dfn>generic raw text element parsing algorithm</dfn> and the <dfn>generic RCDATA element
  parsing algorithm</dfn> consist of the following steps. These algorithms are always invoked in
  response to a start tag token.

  <ol>

    <li><a>Insert an HTML element</a> for the token.</li>

    <li>If the algorithm that was invoked is the <a>generic raw text element parsing
    algorithm</a>, switch the tokenizer to the <a>RAWTEXT state</a>; otherwise the algorithm
    invoked was the <a>generic RCDATA element parsing algorithm</a>, switch the tokenizer to
    the <a>RCDATA state</a>.</li>

    <li>Let the <a>original insertion mode</a> be the current <a>insertion
    mode</a>.

    <li>Then, switch the <a>insertion mode</a> to "<a>text</a>".</li>

  </ol>

<h5 id="closing-elements-that-have-implied-end-tags"><dfn>Closing elements that have implied end tags</dfn></h5>

  When the steps below require the UA to <dfn>generate implied end
  tags</dfn>, then, while the <a>current node</a> is a
  <code>dd</code> element, a <code>dt</code> element, an
  <code>li</code> element, an <code>option</code> element, an
  <code>optgroup</code> element, a <code>p</code> element, an
  <code>rb</code> element, an <code>rp</code> element, an <code>rt</code>
  element, or an <code>rtc</code> element, the UA must
  pop the <a>current node</a> off the <a>stack of open
  elements</a>.

  If a step requires the UA to generate implied end tags but lists
  an element to exclude from the process, then the UA must perform the
  above steps as if that element was not in the above list.

  When the steps below require the UA to <dfn>generate all implied end tags thoroughly</dfn>,
  then, while the <a>current node</a> is a <code>caption</code> element, a
  <code>colgroup</code> element, a <code>dd</code> element, a <code>dt</code> element, an
  <code>li</code> element, an <code>optgroup</code> element, an <code>option</code> element, a
  <code>p</code> element, an <code>rb</code> element, an <code>rp</code> element, an <code>rt</code>
  element, an <code>rtc</code> element, a <code>tbody</code> element, a <code>td</code> element, a
  <code>tfoot</code> element, a <code>th</code> element, a <code>thead</code> element, or a
  <code>tr</code> element, the UA must pop the <a>current node</a> off the
  <a>stack of open elements</a>.

<h5 id="the-rules-for-parsing-tokens-in-html-content"><dfn>The rules for parsing tokens in HTML content</dfn></h5>

<h6 id="the-initial-insertion-mode"><dfn>The "<dfn>initial</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>initial</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER
    TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
    U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    Ignore the token.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a> as the last child of the <code>Document</code> object.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>

    If the DOCTYPE token's name is not a <a>case-sensitive</a> match for the string "<code>html</code>", or the token's public identifier is not missing, or the token's system
    identifier is neither missing nor a <a>case-sensitive</a> match for the string
    "<code>about:legacy-compat</code>", and none of the sets of conditions in the following list are
    matched, then there is a <a>parse error</a>.

    <ul>

      <li>The DOCTYPE token's name is a <a>case-sensitive</a> match for the string "<code>html</code>", the token's public identifier is the <a>case-sensitive</a> string
      "<code>-//W3C//DTD&nbsp;HTML&nbsp;4.0//EN</code>", and the token's system identifier
      is either missing or the <a>case-sensitive</a> string "<code>http://www.w3.org/TR/REC-html40/strict.dtd</code>".</li>

      <li>The DOCTYPE token's name is a <a>case-sensitive</a> match for the string "<code>html</code>", the token's public identifier is the <a>case-sensitive</a> string
      "<code>-//W3C//DTD&nbsp;HTML&nbsp;4.01//EN</code>", and the token's system identifier
      is either missing or the <a>case-sensitive</a> string "<code>http://www.w3.org/TR/html4/strict.dtd</code>".</li>

      <li>The DOCTYPE token's name is a <a>case-sensitive</a> match for the string "<code>html</code>", the token's public identifier is the <a>case-sensitive</a> string
      "<code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Strict//EN</code>", and the token's system
      identifier is the <a>case-sensitive</a> string "<code>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</code>".</li>

      <li>The DOCTYPE token's name is a <a>case-sensitive</a> match for the string "<code>html</code>", the token's public identifier is the <a>case-sensitive</a> string
      "<code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1//EN</code>", and the token's system identifier
      is the <a>case-sensitive</a> string "<code>http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</code>".</li>

    </ul>

    Conformance checkers may, based on the values (including presence or lack thereof) of the
    DOCTYPE token's name, public identifier, or system identifier, switch to a conformance checking
    mode for another language (e.g. based on the DOCTYPE token a conformance checker could recognize
    that the document is an HTML4-era document, and defer to an HTML4 conformance checker.)

    Append a <code>DocumentType</code> node to the <code>Document</code> node, with the <code>name</code> attribute set to the name given in the DOCTYPE token, or the empty string
    if the name was missing; the <code>publicId</code> attribute set to the public
    identifier given in the DOCTYPE token, or the empty string if the public identifier was missing;
    the <code>systemId</code> attribute set to the system identifier given in the DOCTYPE
    token, or the empty string if the system identifier was missing; and the other attributes
    specific to <code>DocumentType</code> objects set to null and empty lists as appropriate.
    Associate the <code>DocumentType</code> node with the <code>Document</code> object so that it is
    returned as the value of the <code>doctype</code> attribute of the
    <code>Document</code> object.

    Then, if the document is <em>not</em> <a>an <code>iframe</code>
    <code>srcdoc</code> document</a>, and the DOCTYPE token matches
    one of the conditions in the following list, then set the <code>Document</code> to <a>quirks
    mode</a>:

    <ul class="brief">
      <li> The <i>force-quirks flag</i> is set to <i>on</i>. </li>
      <li> The name is set to anything other than "<code>html</code>" (compared <a>case-sensitively</a>). </li>
      <li> The public identifier is set to: "<code>-//W3O//DTD W3 HTML Strict 3.0//EN//</code>" </li>
      <li> The public identifier is set to: "<code>-/W3C/DTD HTML 4.0 Transitional/EN</code>" </li>
      <li> The public identifier is set to: "<code>HTML</code>" </li>
      <li> The system identifier is set to: "<code>http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd</code>" </li>
      <li> The public identifier starts with: "<code>+//Silmaril//dtd html Pro v0r11 19970101//</code>" </li>
      <li> The public identifier starts with: "<code>-//AS//DTD HTML 3.0 asWedit + extensions//</code>" </li>
      <li> The public identifier starts with: "<code>-//AdvaSoft Ltd//DTD HTML 3.0 asWedit + extensions//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Level 1//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Level 2//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Strict Level 1//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Strict Level 2//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Strict//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.1E//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 3.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 3.2 Final//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 3.2//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 3//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Level 0//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Level 1//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Level 2//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Level 3//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict Level 0//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict Level 1//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict Level 2//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict Level 3//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//Metrius//DTD Metrius Presentational//</code>" </li>
      <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 2.0 HTML Strict//</code>" </li>
      <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 2.0 HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 2.0 Tables//</code>" </li>
      <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 3.0 HTML Strict//</code>" </li>
      <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 3.0 HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 3.0 Tables//</code>" </li>
      <li> The public identifier starts with: "<code>-//Netscape Comm. Corp.//DTD HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//Netscape Comm. Corp.//DTD Strict HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//O'Reilly and Associates//DTD HTML 2.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//O'Reilly and Associates//DTD HTML Extended 1.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//O'Reilly and Associates//DTD HTML Extended Relaxed 1.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//SQ//DTD HTML 2.0 HoTMetaL + extensions//</code>" </li>
      <li> The public identifier starts with: "<code>-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::extensions to HTML 4.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//SoftQuad//DTD HoTMetaL PRO 4.0::19971010::extensions to HTML 4.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//Spyglass//DTD HTML 2.0 Extended//</code>" </li>
      <li> The public identifier starts with: "<code>-//Sun Microsystems Corp.//DTD HotJava HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//Sun Microsystems Corp.//DTD HotJava Strict HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3 1995-03-24//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3.2 Draft//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3.2 Final//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3.2//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3.2S Draft//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 4.0 Frameset//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 4.0 Transitional//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML Experimental 19960712//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML Experimental 970421//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD W3 HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3O//DTD W3 HTML 3.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//WebTechs//DTD Mozilla HTML 2.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//WebTechs//DTD Mozilla HTML//</code>" </li>
      <li> The system identifier is missing and the public identifier starts with: "<code>-//W3C//DTD HTML 4.01 Frameset//</code>" </li>
      <li> The system identifier is missing and the public identifier starts with: "<code>-//W3C//DTD HTML 4.01 Transitional//</code>" </li>
    </ul>

    Otherwise, if the document is <em>not</em> <a>an <code>iframe</code> <code>srcdoc</code> document</a>, and the DOCTYPE token matches one of
    the conditions in the following list, then set the <code>Document</code> to <a>limited-quirks
    mode</a>:

    <ul class="brief">
      <li> The public identifier starts with: "<code>-//W3C//DTD XHTML 1.0 Frameset//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD XHTML 1.0 Transitional//</code>" </li>
      <li> The system identifier is not missing and the public identifier starts with: "<code>-//W3C//DTD HTML 4.01 Frameset//</code>" </li>
      <li> The system identifier is not missing and the public identifier starts with: "<code>-//W3C//DTD HTML 4.01 Transitional//</code>" </li>
    </ul>

    The system identifier and public identifier strings must be compared to the values given in
    the lists above in an <a>ASCII case-insensitive</a> manner. A system identifier whose
    value is the empty string is not considered missing for the purposes of the conditions
    above.

    Then, switch the <a>insertion mode</a> to "<a>before html</a>".

    </dd>

    <dt>Anything else</dt>
    <dd>

    If the document is <em>not</em> <a>an <code>iframe</code> <code>srcdoc</code> document</a>, then this is a <a>parse
    error</a>; set the <code>Document</code> to <a>quirks mode</a>.

    In any case, switch the <a>insertion mode</a> to "<a>before html</a>", then reprocess the token.

    </dd>

  </dl>

<h6 id="the-before-html-insertion-mode"><dfn>The "<dfn>before html</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>before html</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a> as the last child of the <code>Document</code> object.
    </dd>

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    <a>Create an element for the token</a> in the <a>HTML namespace</a>, with the
    <code>Document</code> as the intended parent. Append it to the <code>Document</code> object. Put
    this element in the <a>stack of open elements</a>.

    If the <code>Document</code> is being loaded as part of <a>navigation</a> of a <a>browsing context</a>, run these steps:

    <ol>

      <li>If the result of running <a>match service worker
      registration</a> for <a>the <code>Document</code>'s address</a> is non-null, run the
      <a>application cache selection algorithm</a> passing the
      <code>Document</code> object with no manifest.</li>

      <li>

      Otherwise, run these substeps:

      <ol>

        <li>If the newly created element has a <code>manifest</code>
        attribute whose value is not the empty string, then <a>resolve</a> the value of that attribute to an <a>absolute URL</a>, relative to
        the newly created element, and if that is  successful, run the <a>application cache selection algorithm</a> passing the
        <code>Document</code> object with the result of applying the <a>URL serializer</a> algorithm to the resulting <a>parsed
        URL</a> with the <i>exclude fragment flag</i> set.</li>

        <li>Otherwise, run the <a>application cache selection
        algorithm</a> passing the <code>Document</code> object with no manifest.</li>

      </ol>

      </li>

    </ol>

    Switch the <a>insertion mode</a> to "<a>before
    head</a>".

    </dd>

    <dt>An end tag whose tag name is one of: "head", "body", "html", "br"</dt>
    <dd>
    Act as described in the "anything else" entry below.
    </dd>

    <dt>Any other end tag</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>

    Create an <code>html</code> element whose <a>node document</a> is the <code>Document</code> object. Append
    it to the <code>Document</code> object. Put this element in the <a>stack of open
    elements</a>.

    If the <code>Document</code> is being loaded as part of <a>navigation</a> of a <a>browsing context</a>, then: run the <a>application cache selection algorithm</a> with no manifest,
    passing it the <code>Document</code> object.

    Switch the <a>insertion mode</a> to "<a>before
    head</a>", then reprocess the token.

    </dd>

  </dl>

  The root element can end up being removed from the <code>Document</code> object, e.g. by
  scripts; nothing in particular happens in such cases, content continues being appended to the
  nodes as described in the next section.

<h6 id="the-before-head-insertion-mode"><dfn>The "<dfn>before head</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>before head</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER
    TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
    U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    Ignore the token.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>
    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.
    </dd>

    <dt>A start tag whose tag name is "head"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token.

    Set the <a><code>head</code> element pointer</a> to the newly created
    <code>head</code> element.

    Switch the <a>insertion mode</a> to "<a>in
    head</a>".

    </dd>

    <dt>An end tag whose tag name is one of: "head", "body", "html", "br"</dt>
    <dd>

    Act as described in the "anything else" entry below.

    </dd>

    <dt>Any other end tag</dt>
    <dd>

    <a>Parse error</a>. Ignore the token.

    </dd>

    <dt>Anything else</dt>
    <dd>

    <a>Insert an HTML element</a> for a "head" start tag token with no attributes.

    Set the <a><code>head</code> element pointer</a> to the newly created
    <code>head</code> element.

    Switch the <a>insertion mode</a> to "<a>in
    head</a>".

    Reprocess the current token.

    </dd>

  </dl>

<h6 id="the-in-head-insertion-mode"><dfn>The "<dfn>in head</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  head</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER
    TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
    U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    <a>Insert the character</a>.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>
    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.
    </dd>

    <dt>A start tag whose tag name is one of: "base", "basefont",
    "bgsound", "link"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    </dd>

    <dt>A start tag whose tag name is "meta"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    If the element has a <code>charset</code> attribute, and <a>getting an encoding</a> from
    its value results in an <a>encoding</a>, and the
    <a>confidence</a> is currently <i>tentative</i>, then
    <a>change the encoding</a> to the resulting encoding.

    Otherwise, if the element has an <code>http-equiv</code>
    attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>Content-Type</code>", and the element has a <code>content</code> attribute, and applying the <a>algorithm for
    extracting a character encoding from a <code>meta</code> element</a> to that attribute's
    value returns an <a>encoding</a>, and the
    <a>confidence</a> is currently <i>tentative</i>, then
    <a>change the encoding</a> to the extracted encoding.

    </dd>

    <dt>A start tag whose tag name is "title"</dt>
    <dd>
    Follow the <a>generic RCDATA element parsing algorithm</a>.
    </dd>

    <dt>A start tag whose tag name is "noscript", if the <a>scripting flag</a> is enabled</dt>
    <dt>A start tag whose tag name is one of: "noframes", "style"</dt>
    <dd>
    Follow the <a>generic raw text element parsing algorithm</a>.
    </dd>

    <dt>A start tag whose tag name is "noscript", if the <a>scripting flag</a> is disabled</dt>
    <dd>

    <a>Insert an HTML element</a> for the token.

    Switch the <a>insertion mode</a> to "<a>in
    head noscript</a>".

    </dd>

    <dt>A start tag whose tag name is "script"</dt>
    <dd>

    Run these steps:

    <ol>

      <li>Let the <var>adjusted insertion location</var> be the <a>appropriate place
      for inserting a node</a>.</li>

      <li><a>Create an element for the token</a> in the <a>HTML namespace</a>, with
      the intended parent being the element in which the <var>adjusted insertion
      location</var> finds itself.</li>

      <li>

      Mark the element as being <a>"parser-inserted"</a> and unset the element's
      <a>"non-blocking"</a> flag.

      <p class="note">This ensures that, if the script is external, any <code>document.write()</code> calls in the script will execute in-line,
      instead of blowing the document away, as would happen in most other cases. It also prevents
      the script from executing until the end tag is seen.
  </p>

      </li>

      <li>If the parser was originally created for the <a>HTML fragment parsing
      algorithm</a>, then mark the <code>script</code> element as <a>"already started"</a>.
      (<a>fragment case</a>)</li>

      <li>Insert the newly created element at the <var>adjusted insertion
      location</var>.</li>

      <li>Push the element onto the <a>stack of open elements</a> so that it is the new
      <a>current node</a>.</li>

      <li>Switch the tokenizer to the <a>script data state</a>.</li>

      <li>Let the <a>original insertion mode</a> be the current <a>insertion
      mode</a>.

      <li>Switch the <a>insertion mode</a> to "<a>text</a>".</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is "head"</dt>
    <dd>

    Pop the <a>current node</a> (which will be the <code>head</code> element) off the
    <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to "<a>after
    head</a>".

    </dd>

    <dt>An end tag whose tag name is one of: "body", "html", "br"</dt>
    <dd>
    Act as described in the "anything else" entry below.
    </dd>

    <dt>A start tag whose tag name is "template"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token.

    Insert a <a>marker</a> at the end of the <a>list of
    active formatting elements</a>.

    Set the <a>frameset-ok flag</a> to "not ok".

    Switch the <a>insertion mode</a> to "<a>in
    template</a>".

    Push "<a>in template</a>" onto the <a>stack of
    template insertion modes</a> so that it is the new <a>current template insertion
    mode</a>.

    </dd>

    <dt>An end tag whose tag name is "template"</dt>
    <dd>

    If there is no <code>template</code> element on the <a>stack of open elements</a>, then
    this is a <a>parse error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

      <li><a>Generate all implied end tags thoroughly</a>.</li>

      <li>If the <a>current node</a> is not a <code>template</code> element, then this is a
      <a>parse error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until a <code>template</code>
      element has been popped from the stack.</li>

      <li><a>Clear the list of active formatting elements up to the last marker</a>.</li>

      <li>Pop the <a>current template insertion mode</a> off the <a>stack of template
      insertion modes</a>.

      <li><a>Reset the insertion mode appropriately</a>.</li>

    </ol>

    </dd>

    <dt>A start tag whose tag name is "head"</dt>
    <dt>Any other end tag</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>

    Pop the <a>current node</a> (which will be the <code>head</code> element) off the
    <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to "<a>after
    head</a>".

    Reprocess the token.

    </dd>

  </dl>

<h6 id="the-in-head-noscript-insertion-mode"><dfn>The "<dfn>in head noscript</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in head noscript</a>" <a>insertion mode</a>, the user agent must handle the
  token as follows:

  <dl class="switch">

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end tag whose tag name is "noscript"</dt>
    <dd>

    Pop the <a>current node</a> (which will be a <code>noscript</code> element) from the
    <a>stack of open elements</a>; the new <a>current node</a> will be a
    <code>head</code> element.

    Switch the <a>insertion mode</a> to "<a>in
    head</a>".

    </dd>

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dt>A comment token</dt>
    <dt>A start tag whose tag name is one of: "basefont", "bgsound", "link", "meta", "noframes",
    "style"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end tag whose tag name is "br"</dt>
    <dd>
    Act as described in the "anything else" entry below.
    </dd>

    <dt>A start tag whose tag name is one of: "head", "noscript"</dt>
    <dt>Any other end tag</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>

    <a>Parse error</a>.

    Pop the <a>current node</a> (which will be a <code>noscript</code> element) from the
    <a>stack of open elements</a>; the new <a>current node</a> will be a
    <code>head</code> element.

    Switch the <a>insertion mode</a> to "<a>in
    head</a>".

    Reprocess the token.

    </dd>

  </dl>

<h6 id="the-after-head-insertion-mode"><dfn>The "<dfn>after head</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after head</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER
    TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
    U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    <a>Insert the character</a>.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>A start tag whose tag name is "body"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token.

    Set the <a>frameset-ok flag</a> to "not ok".

    Switch the <a>insertion mode</a> to "<a>in
    body</a>".

    </dd>

    <dt>A start tag whose tag name is "frameset"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token.

    Switch the <a>insertion mode</a> to "<a>in
    frameset</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "base", "basefont", "bgsound", "link", "meta",
    "noframes", "script", "style", "template", "title"</dt>
    <dd>

    <a>Parse error</a>.

    Push the node pointed to by the <a><code>head</code> element pointer</a> onto
    the <a>stack of open elements</a>.

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    Remove the node pointed to by the <a><code>head</code> element pointer</a>
    from the <a>stack of open elements</a>. (It might not be the <a>current node</a> at
    this point.)

    <p class="note">
  The <a><code>head</code> element pointer</a> cannot be null at
    this point.
  </p>

    </dd>

    <dt>An end tag whose tag name is "template"</dt>
    <dd>
    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.
    </dd>

    <dt>An end tag whose tag name is one of: "body", "html", "br"</dt>
    <dd>
    Act as described in the "anything else" entry below.
    </dd>

    <dt>A start tag whose tag name is "head"</dt>
    <dt>Any other end tag</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>

    <a>Insert an HTML element</a> for a "body" start tag token with no attributes.

    Switch the <a>insertion mode</a> to "<a>in
    body</a>".

    Reprocess the current token.

    </dd>

  </dl>

<h6 id="the-in-body-insertion-mode"><dfn>The "<dfn>in body</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  body</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token that is U+0000 NULL</dt>
    <dd>

    <a>Parse error</a>. Ignore the token.

    </dd>

    <dt>A character token that is one of U+0009 CHARACTER TABULATION,
    U+000A LINE FEED (LF), U+000C FORM FEED (FF), U+000D CARRIAGE
    RETURN (CR), or U+0020 SPACE</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert the token's character</a>.

    </dd>

    <dt>Any other character token</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert the token's character</a>.

    Set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    <a>Parse error</a>.

    If there is a <code>template</code> element on the <a>stack of open elements</a>, then
    ignore the token.

    Otherwise, for each attribute on the token, check to see if the attribute is already present
    on the top element of the <a>stack of open elements</a>. If it is not, add the attribute
    and its corresponding value to that element.

    </dd>

    <dt>A start tag whose tag name is one of: "base", "basefont", "bgsound", "link", "meta",
    "noframes", "script", "style", "template", "title"</dt>
    <dt>An end tag whose tag name is "template"</dt>
    <dd>
    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.
    </dd>

    <dt>A start tag whose tag name is "body"</dt>
    <dd>

    <a>Parse error</a>.

    If the second element on the <a>stack of open elements</a> is not a <code>body</code>
    element, if the <a>stack of open elements</a> has only one node on it, or if there is a
    <code>template</code> element on the <a>stack of open elements</a>, then ignore the token.
    (<a>fragment case</a>)

    Otherwise, set the <a>frameset-ok flag</a> to "not ok"; then, for each attribute on the
    token, check to see if the attribute is already present on the <code>body</code> element (the
    second element) on the <a>stack of open elements</a>, and if it is not, add the attribute
    and its corresponding value to that element.

    </dd>

    <dt>A start tag whose tag name is "frameset"</dt>
    <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> has only one node on it, or if the second element
    on the <a>stack of open elements</a> is not a <code>body</code> element, then ignore the
    token. (<a>fragment case</a>)

    If the <a>frameset-ok flag</a> is set to "not ok", ignore the token.

    Otherwise, run the following steps:

    <ol>

      <li>Remove the second element on the <a>stack of open elements</a> from its parent
      node, if it has one.</li>

      <li>Pop all the nodes from the bottom of the <a>stack of open elements</a>, from the
      <a>current node</a> up to, but not including, the root <code>html</code> element.

      <li><a>Insert an HTML element</a> for the token.</li>

      <li>Switch the <a>insertion mode</a> to "<a>in
      frameset</a>".

    </ol>

    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    If the <a>stack of template insertion modes</a> is not empty, then process the token
    <a>using the rules for</a> the "<a>in
    template</a>" <a>insertion mode</a>.

    Otherwise, follow these steps:

    <ol>

      <li>If there is a node in the <a>stack of open elements</a> that is not either a
      <code>dd</code> element, a <code>dt</code> element, an <code>li</code> element, an
      <code>optgroup</code> element, an <code>option</code> element, a <code>p</code> element, an
      <code>rb</code> element, an <code>rp</code> element, an <code>rt</code> element, an
      <code>rtc</code> element, a <code>tbody</code> element, a <code>td</code> element, a
      <code>tfoot</code> element, a <code>th</code> element, a <code>thead</code> element, a
      <code>tr</code> element, the <code>body</code> element, or the <code>html</code> element, then
      this is a <a>parse error</a>.</li>

      <li><a>Stop parsing</a>.</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is "body"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>body</code> element in scope</a>, this is a <a>parse error</a>;
    ignore the token.

    Otherwise, if there is a node in the <a>stack of open elements</a> that is not either a
    <code>dd</code> element, a <code>dt</code> element, an <code>li</code> element, an
    <code>optgroup</code> element, an <code>option</code> element, a <code>p</code> element, an
    <code>rb</code> element, an <code>rp</code> element, an <code>rt</code> element, an
    <code>rtc</code> element, a <code>tbody</code> element, a <code>td</code> element, a
    <code>tfoot</code> element, a <code>th</code> element, a <code>thead</code> element, a
    <code>tr</code> element, the <code>body</code> element, or the <code>html</code> element, then
    this is a <a>parse error</a>.

    Switch the <a>insertion mode</a> to "<a>after
    body</a>".

    </dd>

    <dt>An end tag whose tag name is "html"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>body</code> element in scope</a>, this is a <a>parse error</a>;
    ignore the token.

    Otherwise, if there is a node in the <a>stack of open elements</a> that is not either a
    <code>dd</code> element, a <code>dt</code> element, an <code>li</code> element, an
    <code>optgroup</code> element, an <code>option</code> element, a <code>p</code> element, an
    <code>rb</code> element, an <code>rp</code> element, an <code>rt</code> element, an
    <code>rtc</code> element, a <code>tbody</code> element, a <code>td</code> element, a
    <code>tfoot</code> element, a <code>th</code> element, a <code>thead</code> element, a
    <code>tr</code> element, the <code>body</code> element, or the <code>html</code> element, then
    this is a <a>parse error</a>.

    Switch the <a>insertion mode</a> to "<a>after
    body</a>".

    Reprocess the token.

    </dd>

    <dt>A start tag whose tag name is one of: "address", "article", "aside", "blockquote", "center",
    "details", "dialog", "dir", "div", "dl", "fieldset", "figcaption", "figure", "footer", "header",
    "main", "menu", "nav", "ol", "p", "section", "summary", "ul"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token.

    </dd>

    <dt>A start tag whose tag name is one of: "h1", "h2", "h3", "h4",
    "h5", "h6"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    If the <a>current node</a> is an <a>HTML element</a> whose
    tag name is one of "h1", "h2", "h3", "h4", "h5", or "h6", then this is a <a>parse
    error</a>; pop the <a>current node</a> off the <a>stack of open elements</a>.

    <a>Insert an HTML element</a> for the token.

    </dd>

    <dt>A start tag whose tag name is one of: "pre", "listing"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has
    a <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token.

    If the <a>next token</a> is a U+000A LINE FEED (LF) character token, then ignore that
    token and move on to the next one. (Newlines at the start of <code>pre</code> blocks are ignored
    as an authoring convenience.)

    Set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>A start tag whose tag name is "form"</dt>
    <dd>

    If the <a><code>form</code> element pointer</a> is not null, and there is
    no <code>template</code> element on the <a>stack of open elements</a>, then this is a
    <a>parse error</a>; ignore the token.

    Otherwise:

    If the <a>stack of open elements</a> <a>has
    a <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token, and, if there is no <code>template</code>
    element on the <a>stack of open elements</a>, set the <a><code>form</code> element pointer</a> to point to the element created.

    </dd>

    <dt>A start tag whose tag name is "li"</dt>
    <dd>

    Run these steps:

    <ol>

      <li>Set the <a>frameset-ok flag</a> to "not ok".</li>

      <li>Initialize <var>node</var> to be the <a>current
      node</a> (the bottommost node of the stack).</li>

      <li>

      <i>Loop</i>: If <var>node</var> is an <code>li</code> element, then run these
      substeps:

      <ol>

        <li><a>Generate implied end tags</a>, except for <code>li</code> elements.</li>

        <li>If the <a>current node</a> is not an <code>li</code> element, then this is a
        <a>parse error</a>.</li>

        <li>Pop elements from the <a>stack of open elements</a> until an <code>li</code>
        element has been popped from the stack.</li>

        <li>Jump to the step labeled <i>done</i> below.</li>

      </ol>

      </li>

      <li>If <var>node</var> is in the <a>special</a> category, but is not an
      <code>address</code>, <code>div</code>, or <code>p</code> element, then jump to the step
      labeled <i>done</i> below.</li>

      <li>Otherwise, set <var>node</var> to the previous entry in the <a>stack of open
      elements</a> and return to the step labeled <i>loop</i>.</li>

      <li><i>Done</i>: If the <a>stack of open elements</a> <a>has a <code>p</code> element in button scope</a>, then <a>close a
      <code>p</code> element</a>.</li>

      <li>Finally, <a>insert an HTML element</a> for the token.</li>

    </ol>

    </dd>

    <dt>A start tag whose tag name is one of: "dd", "dt"</dt>
    <dd>

    Run these steps:

    <ol>

      <li>Set the <a>frameset-ok flag</a> to "not ok".</li>

      <li>Initialize <var>node</var> to be the <a>current
      node</a> (the bottommost node of the stack).</li>

      <li>

      <i>Loop</i>: If <var>node</var> is a <code>dd</code> element, then run these
      substeps:

      <ol>

        <li><a>Generate implied end tags</a>, except for <code>dd</code> elements.</li>

        <li>If the <a>current node</a> is not a <code>dd</code> element, then this is a
        <a>parse error</a>.</li>

        <li>Pop elements from the <a>stack of open elements</a> until a <code>dd</code>
        element has been popped from the stack.</li>

        <li>Jump to the step labeled <i>done</i> below.</li>

      </ol>

      </li>

      <li>

      If <var>node</var> is a <code>dt</code> element, then run these substeps:

      <ol>

        <li><a>Generate implied end tags</a>, except for <code>dt</code> elements.</li>

        <li>If the <a>current node</a> is not a <code>dt</code> element, then this is a
        <a>parse error</a>.</li>

        <li>Pop elements from the <a>stack of open elements</a> until a <code>dt</code>
        element has been popped from the stack.</li>

        <li>Jump to the step labeled <i>done</i> below.</li>

      </ol>

      </li>

      <li>If <var>node</var> is in the <a>special</a> category, but is not an
      <code>address</code>, <code>div</code>, or <code>p</code> element, then jump to the step
      labeled <i>done</i> below.</li>

      <li>Otherwise, set <var>node</var> to the previous entry in the <a>stack of open
      elements</a> and return to the step labeled <i>loop</i>.</li>

      <li><i>Done</i>: If the <a>stack of open elements</a> <a>has a <code>p</code> element in button scope</a>, then <a>close a
      <code>p</code> element</a>.</li>

      <li>Finally, <a>insert an HTML element</a> for the token.</li>

    </ol>

    </dd>

    <dt>A start tag whose tag name is "plaintext"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token.

    Switch the tokenizer to the <a>PLAINTEXT state</a>.

    <p class="note">
  Once a start tag with the tag name "plaintext" has been seen, that will be the
    last token ever seen other than character tokens (and the end-of-file token), because there is
    no way to switch out of the <a>PLAINTEXT state</a>.
  </p>

    </dd>

    <dt>A start tag whose tag name is "button"</dt>
    <dd>

    <ol>

      <li>

      If the <a>stack of open elements</a> <a>has a
      <code>button</code> element in scope</a>, then run these substeps:

      <ol>

        <li><a>Parse error</a>.</li>

        <li><a>Generate implied end tags</a>.</li>

        <li>Pop elements from the <a>stack of open elements</a> until a <code>button</code>
        element has been popped from the stack.</li>

      </ol>

      </li>

      <li><a>Reconstruct the active formatting elements</a>, if any.</li>

      <li><a>Insert an HTML element</a> for the token.</li>

      <li>Set the <a>frameset-ok flag</a> to "not ok".</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is one of: "address", "article", "aside", "blockquote", "button",
    "center", "details", "dialog", "dir", "div", "dl", "fieldset", "figcaption", "figure", "footer",
    "header", "listing", "main", "menu", "nav", "ol", "pre", "section", "summary",
    "ul"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

      <li><a>Generate implied end tags</a>.</li>

      <li>If the <a>current node</a> is not an <a>HTML element</a> with
      the same tag name as that of the token, then this is a
      <a>parse error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until an <a>HTML element</a> with the same tag name as the token has been popped from the
      stack.</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is "form"</dt>
    <dd>

    If there is no <code>template</code> element on the <a>stack of open elements</a>, then
    run these substeps:

    <ol>

      <li>Let <var>node</var> be the element that the <a><code>form</code>
      element pointer</a> is set to, or null if it is not set to an element.</li>

      <li>Set the <a><code>form</code> element pointer</a> to null.</li>

      <li>If <var>node</var> is null or if the <a>stack of open elements</a> does
      not <a>have <var>node</var> in scope</a>, then
      this is a <a>parse error</a>; abort these steps and ignore the token.</li>

      <li><a>Generate implied end tags</a>.</li>

      <li>If the <a>current node</a> is not <var>node</var>, then this is a
      <a>parse error</a>.</li>

      <li>Remove <var>node</var> from the <a>stack of open elements</a>.</li>

    </ol>

    If there <em>is</em> a <code>template</code> element on the <a>stack of open
    elements</a>, then run these substeps instead:

    <ol>

      <li>If the <a>stack of open elements</a> does not <a>have a <code>form</code> element in scope</a>, then this is a <a>parse
      error</a>; abort these steps and ignore the token.</li>

      <li><a>Generate implied end tags</a>.</li>

      <li>If the <a>current node</a> is not a <code>form</code> element, then this is a
      <a>parse error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until a <code>form</code>
      element has been popped from the stack.</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is "p"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>p</code> element in button scope</a>, then this is a <a>parse
    error</a>; <a>insert an HTML element</a> for a "p" start tag token with no
    attributes.

    <a>Close a <code>p</code> element</a>.

    </dd>

    <dt>An end tag whose tag name is "li"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an <code>li</code> element in list item scope</a>, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

      <li><a>Generate implied end tags</a>, except for <code>li</code> elements.</li>

      <li>If the <a>current node</a> is not an <code>li</code> element, then this is a
      <a>parse error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until an <code>li</code>
      element has been popped from the stack.</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is one of: "dd", "dt"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

      <li><a>Generate implied end tags</a>, except for <a>HTML elements</a> with the
      same tag name as the token.</li>

      <li>If the <a>current node</a> is not an <a>HTML
      element</a> with the same tag name as that of the token, then this is a <a>parse
      error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until an <a>HTML element</a> with the same tag name as the token has been popped from the
      stack.</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is one of: "h1", "h2", "h3", "h4", "h5", "h6"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in scope</a> that is an <a>HTML
    element</a> and whose tag name is one of "h1", "h2", "h3", "h4", "h5", or "h6", then this is
    a <a>parse error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

      <li><a>Generate implied end tags</a>.</li>

      <li>If the <a>current node</a> is not an <a>HTML
      element</a> with the same tag name as that of the token, then this is a <a>parse
      error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until an <a>HTML element</a> whose tag name is one of "h1", "h2", "h3", "h4", "h5", or "h6"
      has been popped from the stack.</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is "sarcasm"</dt>
    <dd>
    Take a deep breath, then act as described in the "any other end
    tag" entry below.
    </dd>

    <dt>A start tag whose tag name is "a"</dt>
    <dd>

    If the <a>list of active formatting elements</a> contains an <code>a</code> element
    between the end of the list and the last <a>marker</a> on
    the list (or the start of the list if there is no <a>marker</a> on the list), then this is a <a>parse
    error</a>; run the <a>adoption agency algorithm</a> for the tag name "a", then remove
    that element from the <a>list of active formatting elements</a> and the <a>stack of
    open elements</a> if the <a>adoption agency algorithm</a> didn't already remove it (it
    might not have if the element is not <a>in table
    scope</a>).

    <p class="example">
  In the non-conforming stream
    <code>&lt;a&nbsp;href="a">a&lt;table>&lt;a&nbsp;href="b">b&lt;/table>x</code>, the first
    <code>a</code> element would be closed upon seeing the second one, and the "x" character would
    be inside a link to "b", not to "a". This is despite the fact that the outer <code>a</code>
    element is not in table scope (meaning that a regular <code>&lt;/a></code> end tag at the start
    of the table wouldn't close the outer <code>a</code> element). The result is that the two
    <code>a</code> elements are indirectly nested inside each other &mdash; non-conforming markup
    will often result in non-conforming DOMs when parsed.
  </p>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. <a>Push onto the list of active
    formatting elements</a> that element.

    </dd>

    <dt>A start tag whose tag name is one of: "b", "big", "code", "em",
    "font", "i", "s", "small", "strike", "strong", "tt", "u"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. <a>Push onto the list of active
    formatting elements</a> that element.

    </dd>

    <dt>A start tag whose tag name is "nobr"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    If the <a>stack of open elements</a> <a>has a
    <code>nobr</code> element in scope</a>, then this is a <a>parse error</a>; run the
    <a>adoption agency algorithm</a> for the tag name "nobr", then once again
    <a>reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. <a>Push onto the list of active
    formatting elements</a> that element.

    </dd>

    <dt>An end tag whose tag name is one of: "a",
    "b", "big", "code", "em", "font", "i", "nobr", "s", "small",
    "strike", "strong", "tt", "u"</dt>
    <dd>

    Run the <a>adoption agency algorithm</a> for the token's tag name.

    </dd>

    <dt>A start tag whose tag name is one of: "applet", "marquee", "object"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token.

    Insert a <a>marker</a> at the end of the <a>list of
    active formatting elements</a>.

    Set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>An end tag token whose tag name is one of: "applet", "marquee", "object"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

      <li><a>Generate implied end tags</a>.</li>

      <li>If the <a>current node</a> is not an <a>HTML
      element</a> with the same tag name as that of the token, then this is a <a>parse
      error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until an <a>HTML element</a> with the same tag name as the token has been popped from the
      stack.</li>

      <li><a>Clear the list of active formatting elements up to the last marker</a>.</li>

    </ol>

    </dd>

    <dt>A start tag whose tag name is "table"</dt>
    <dd>

    If the <code>Document</code> is <em>not</em> set to <a>quirks mode</a>, and the
    <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token.

    Set the <a>frameset-ok flag</a> to "not ok".

    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

    </dd>

    <dt>An end tag whose tag name is "br"</dt>
    <dd>

    <a>Parse error</a>. Drop the attributes from the token, and act as described in the
    next entry; i.e. act as if this was a "br" start tag token with no attributes, rather than the
    end tag token that it actually is.

    </dd>

    <dt>A start tag whose tag name is one of: "area", "br", "embed",
    "img", "keygen", "wbr"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    Set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>A start tag whose tag name is "input"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    If the token does not have an attribute with the name "type", or if it does, but that
    attribute's value is not an <a>ASCII case-insensitive</a> match for the string "<code>hidden</code>", then: set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>A start tag whose tag name is one of: "menuitem", "param", "source", "track"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    </dd>

    <dt>A start tag whose tag name is "hr"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    Set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>A start tag whose tag name is "image"</dt>
    <dd>

    <a>Parse error</a>. Change the token's tag name to "img" and reprocess it. (Don't
    ask.)
    </dd>

    <dt>A start tag whose tag name is "isindex"</dt>
    <dd>

    <a>Parse error</a>.

    If there is no <code>template</code> element on the <a>stack of open elements</a> and
    the <a><code>form</code> element pointer</a> is not null, then ignore the
    token.

    Otherwise:

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    Set the <a>frameset-ok flag</a> to "not ok".

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for a "form" start tag token with no attributes, and, if
    there is no <code>template</code> element on the <a>stack of open elements</a>, set the
    <a><code>form</code> element pointer</a> to point to the element
    created.

    If the token has an attribute called "action", set the <code>action</code> attribute on the resulting <code>form</code> element to the
    value of the "action" attribute of the token.

    <a>Insert an HTML element</a> for an "hr" start tag token with no attributes.
    Immediately pop the <a>current node</a> off the <a>stack of open elements</a>.

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for a "label" start tag token with no attributes.

    <a>Insert characters</a> (see below for <a>what they should say</a>).

    <a>Insert an HTML element</a> for an "input" start tag token with all the attributes
    from the "isindex" token except "name", "action", and "prompt", and with an attribute named
    "name" with the value "isindex". (This creates an <code>input</code> element with the <code>name</code> attribute set to the magic value "<code>isindex</code>".) Immediately pop the <a>current node</a> off
    the <a>stack of open elements</a>.

    <a>Insert more characters</a> (see below for <a>what they should say</a>).

    Pop the <a>current node</a> (which will be the <code>label</code> element created
    earlier) off the <a>stack of open elements</a>.

    <a>Insert an HTML element</a> for an "hr" start tag token with no attributes.
    Immediately pop the <a>current node</a> off the <a>stack of open elements</a>.

    Pop the <a>current node</a> (which will be the <code>form</code> element created
    earlier) off the <a>stack of open elements</a>, and, if there is no <code>template</code>
    element on the <a>stack of open elements</a>, set the <a><code>form</code> element pointer</a> back to null.

    <dfn><strong>Prompt</strong></dfn>: If the token has an attribute
    with the name "prompt", then the first stream of characters must be the same string as given in
    that attribute, and the second stream of characters must be empty. Otherwise, the two streams of
    character tokens together should, together with the <code>input</code> element, express the
    equivalent of "This is a searchable index. Enter search keywords: (input field)" in the user's
    preferred language.

    </dd>

    <dt>A start tag whose tag name is "textarea"</dt>
    <dd>

    Run these steps:

    <ol>

      <li><a>Insert an HTML element</a> for the token.</li>

      <li>If the <a>next token</a> is a U+000A LINE FEED (LF) character token, then ignore
      that token and move on to the next one. (Newlines at the start of <code>textarea</code>
      elements are ignored as an authoring convenience.)</li>

      <li>Switch the tokenizer to the <a>RCDATA state</a>.</li>

      <li>Let the <a>original insertion mode</a> be the current <a>insertion
      mode</a>.

      <li>Set the <a>frameset-ok flag</a> to "not ok".</li>

      <li>Switch the <a>insertion mode</a> to "<a>text</a>".</li>

    </ol>

    </dd>

    <dt>A start tag whose tag name is "xmp"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Reconstruct the active formatting elements</a>, if any.

    Set the <a>frameset-ok flag</a> to "not ok".

    Follow the <a>generic raw text element parsing algorithm</a>.

    </dd>

    <dt>A start tag whose tag name is "iframe"</dt>
    <dd>

    Set the <a>frameset-ok flag</a> to "not ok".

    Follow the <a>generic raw text element parsing algorithm</a>.

    </dd>

    <dt>A start tag whose tag name is "noembed"</dt>
    <dt>A start tag whose tag name is "noscript", if the <a>scripting flag</a> is enabled</dt>
    <dd>

    Follow the <a>generic raw text element parsing algorithm</a>.

    </dd>

    <dt>A start tag whose tag name is "select"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token.

    Set the <a>frameset-ok flag</a> to "not ok".

    If the <a>insertion mode</a> is one of "<a>in
    table</a>", "<a>in caption</a>", "<a>in table body</a>", "<a>in row</a>", or "<a>in cell</a>", then switch the
    <a>insertion mode</a> to "<a>in select in
    table</a>". Otherwise, switch the <a>insertion mode</a> to "<a>in select</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "optgroup", "option"</dt>
    <dd>

    If the <a>current node</a> is an <code>option</code> element, then pop the
    <a>current node</a> off the <a>stack of open elements</a>.

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token.

    </dd>

    <dt>A start tag whose tag name is one of: "rb", "rtc"</dt>
    <dd>
    If the <a>stack of open elements</a> <a>has a
    <code>ruby</code> element in scope</a>, then <a>generate implied end tags</a>. If the
    <a>current node</a> is not now a <code>ruby</code> element, this is a
    <a>parse error</a>.

    <a>Insert an HTML element</a> for the token.

    </dd>

    <dt>A start tag whose tag name is one of: "rp", "rt"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>ruby</code> element in scope</a>, then <a>generate implied end tags</a>, except
    for <code>rtc</code> elements. If the <a>current node</a> is not then a <code>ruby</code>
    element or an <code>rtc</code> element, this is a <a>parse error</a>.

    <a>Insert an HTML element</a> for the token.
    </dd>

    <dt>A start tag whose tag name is "math"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Adjust MathML attributes</a> for the token. (This fixes the case of MathML
    attributes that are not all lowercase.)

    <a>Adjust foreign attributes</a> for the token. (This fixes the use of namespaced
    attributes, in particular XLink.)

    <a>Insert a foreign element</a> for the token, in the <a>MathML
    namespace</a>.

    If the token has its <i>self-closing flag</i> set, pop the <a>current node</a> off the
    <a>stack of open elements</a> and <a>acknowledge
    the token's <i>self-closing flag</i></a>.

    </dd>

    <dt>A start tag whose tag name is "svg"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Adjust SVG attributes</a> for the token. (This fixes the case of SVG attributes that
    are not all lowercase.)

    <a>Adjust foreign attributes</a> for the token. (This fixes the use of namespaced
    attributes, in particular XLink in SVG.)

    <a>Insert a foreign element</a> for the token, in the <a>SVG namespace</a>.

    If the token has its <i>self-closing flag</i> set, pop the <a>current node</a> off the
    <a>stack of open elements</a> and <a>acknowledge
    the token's <i>self-closing flag</i></a>.

    </dd>

    <dt>A start  tag whose tag name is one of: "caption", "col", "colgroup", "frame",
    "head", "tbody", "td", "tfoot", "th", "thead", "tr"</dt>

    <dd>

    <a>Parse error</a>. Ignore the token.

    </dd>

    <dt>Any other start tag</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token.

    <p class="note">
  This element will be an <a>ordinary</a>
    element.
  </p>

    </dd>

    <dt>Any other end tag</dt>
    <dd>

    Run these steps:

    <ol>

      <li>Initialize <var>node</var> to be the <a>current node</a> (the bottommost
      node of the stack).</li>

      <li><i>Loop</i>: If <var>node</var> is an <a>HTML
      element</a> with the same tag name as the token, then:

      <ol>

        <li><a>Generate implied end tags</a>, except for <a>HTML elements</a> with the
        same tag name as the token.</li>

        <li>If <var>node</var> is not the <a>current node</a>, then this is a
        <a>parse error</a>.</li>

        <li>Pop all the nodes from the <a>current node</a> up to <var>node</var>,
        including <var>node</var>, then stop these steps.</li>

      </ol>

      </li>

      <li>Otherwise, if <var>node</var> is in the <a>special</a> category, then
      this is a <a>parse error</a>; ignore the token, and abort these steps.</li>

      <li>Set <var>node</var> to the previous entry in the <a>stack of open
      elements</a>.</li>

      <li>Return to the step labeled <i>loop</i>.</li>

    </ol>

    </dd>

  </dl>

  When the steps above say the user agent is to <dfn>close a <code>p</code> element</dfn>, it
  means that the user agent must run the following steps:

  <ol>

    <li><a>Generate implied end tags</a>, except for <code>p</code> elements.</li>

    <li>If the <a>current node</a> is not a <code>p</code> element, then this is a
    <a>parse error</a>.</li>

    <li>Pop elements from the <a>stack of open elements</a> until a <code>p</code> element
    has been popped from the stack.</li>

  </ol>

  The <dfn>adoption agency algorithm</dfn>, which takes as its only argument
  a tag name <var>subject</var> for which the algorithm is being run, consists of the
  following steps:

  <ol>

    <li>If the <a>current node</a> is an <a>HTML element</a>
    whose tag name is <var>subject</var>, and the <a>current node</a> is not in the
    <a>list of active formatting elements</a>, then pop the <a>current node</a> off the
    <a>stack of open elements</a>, and abort these steps.</li>

    <li>Let <var>outer loop counter</var> be zero.</li>

    <li><i>Outer loop</i>: If <var>outer loop counter</var> is greater than or equal to
    eight, then abort these steps.</li>

    <li>Increment <var>outer loop counter</var> by one.</li>

    <li>

    Let <var>formatting element</var> be the last element in the <a>list of active
    formatting elements</a> that:

    <ul>

      <li>is between the end of the list and the last <a>marker</a> in the list, if any, or the start of the list
      otherwise, and</li>

      <li>has the tag name <var>subject</var>.</li>

    </ul>

    If there is no such element, then abort these steps and instead act as described in the "any
    other end tag" entry above.

    </li>

    <li>If <var>formatting element</var> is not in the <a>stack of open
    elements</a>, then this is a <a>parse error</a>; remove the element from the list, and
    abort these steps.</li>

    <li>If <var>formatting element</var> is in the <a>stack of open elements</a>,
    but the element is not <a>in scope</a>, then this is a
    <a>parse error</a>; abort these steps.</li>

    <li>If <var>formatting element</var> is not the <a>current node</a>, this is a
    <a>parse error</a>. (But do not abort these steps.)</li>

    <li>Let <var>furthest block</var> be the topmost node in the <a>stack of open
    elements</a> that is lower in the stack than <var>formatting element</var>, and is an
    element in the <a>special</a> category. There might not be one.</li>

    <li>If there is no <var>furthest block</var>, then the UA must first pop all the
    nodes from the bottom of the <a>stack of open elements</a>, from the <a>current
    node</a> up to and including <var>formatting element</var>, then remove <var>formatting element</var> from the <a>list of active formatting elements</a>, and
    finally abort these steps.</li>

    <li>Let <var>common ancestor</var> be the element immediately above <var>formatting element</var> in the <a>stack of open elements</a>.</li>

    <li>Let a bookmark note the position of <var>formatting element</var> in the
    <a>list of active formatting elements</a> relative to the elements on either side of it in
    the list.</li>

    <li>

    Let <var>node</var> and <var>last node</var> be <var>furthest
    block</var>. Follow these steps:

    <ol>

      <li>Let <var>inner loop counter</var> be zero.</li>

      <li><i>Inner loop</i>: Increment <var>inner loop counter</var> by one.</li>

      <li>Let <var>node</var> be the element immediately above <var>node</var>
      in the <a>stack of open elements</a>, or if <var>node</var> is no longer in the
      <a>stack of open elements</a> (e.g. because it got removed by this algorithm), the element that was immediately above <var>node</var> in the <a>stack of open elements</a> before <var>node</var>
      was removed.</li>

      <li>If <var>node</var> is <var>formatting element</var>, then go to the
      next step in the overall algorithm.</li>

      <li>If <var>inner loop counter</var> is greater than three and <var>node</var> is in the <a>list of active formatting elements</a>, then remove <var>node</var> from the <a>list of active formatting elements</a>.</li>

      <li>If <var>node</var> is not in the <a>list of active
      formatting elements</a>, then remove <var>node</var> from the <a>stack of open
      elements</a> and then go back to the step labeled <i>inner loop</i>.</li>

      <li><a>Create an element for the token</a> for which the element <var>node</var> was created, in the <a>HTML namespace</a>, with <var>common
      ancestor</var> as the intended parent; replace the entry for <var>node</var> in the
      <a>list of active formatting elements</a> with an entry for the new element, replace the
      entry for <var>node</var> in the <a>stack of open elements</a> with an entry for
      the new element, and let <var>node</var> be the new element.</li>

      <li>If <var>last node</var> is <var>furthest block</var>, then move the
      aforementioned bookmark to be immediately after the new <var>node</var> in the
      <a>list of active formatting elements</a>.</li>

      <li>Insert <var>last node</var> into <var>node</var>, first removing it
      from its previous parent node if any.</li>

      <li>Let <var>last node</var> be <var>node</var>.</li>

      <li>Return to the step labeled <i>inner loop</i>.</li>

    </ol>

    </li>

    <li>Insert whatever <var>last node</var> ended up being in the previous step at the
    <a>appropriate place for inserting a node</a>, but using <var>common
    ancestor</var> as the <i>override target</i>.</li>

    <li><a>Create an element for the token</a> for which <var>formatting
    element</var> was created, in the <a>HTML namespace</a>, with <var>furthest
    block</var> as the intended parent.</li>

    <li>Take all of the child nodes of <var>furthest block</var> and append them to the
    element created in the last step.</li>

    <li>Append that new element to <var>furthest block</var>.</li>

    <li>Remove <var>formatting element</var> from the <a>list of active formatting
    elements</a>, and insert the new element into the <a>list of active formatting
    elements</a> at the position of the aforementioned bookmark.</li>

    <li>Remove <var>formatting element</var> from the <a>stack of open
    elements</a>, and insert the new element into the <a>stack of open elements</a>
    immediately below the position of <var>furthest block</var> in that stack.</li>

    <li>Jump back to the step labeled <i>outer loop</i>.</li>

  </ol>

  <p class="note">
  This algorithm's name, the "adoption agency algorithm", comes from the way it
  causes elements to change parents, and is in contrast with other possible algorithms for dealing
  with misnested content, which included the "incest algorithm", the "secret affair algorithm", and
  the "Heizenberg algorithm".
  </p>

<h6 id="the-text-insertion-mode"><dfn>The "<dfn>text</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>text</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A character token</dt>
    <dd>

    <a>Insert the token's character</a>.

    <p class="note">
  This can never be a U+0000 NULL character; the tokenizer converts those to
    U+FFFD REPLACEMENT CHARACTER characters.
  </p>

    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    <a>Parse error</a>.

    If the <a>current node</a> is a <code>script</code> element, mark the
    <code>script</code> element as <a>"already started"</a>.

    Pop the <a>current node</a> off the <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to the <a>original insertion mode</a> and
    reprocess the token.

    </dd>

    <dt>An end tag whose tag name is "script"</dt>
    <dd>

    If the <a>stack of script settings objects</a> is empty, <a>perform a microtask checkpoint</a>.

    Let <var>script</var> be the <a>current node</a> (which will be a
    <code>script</code> element).

    Pop the <a>current node</a> off the <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to the <a>original insertion mode</a>.

    Let the <var>old insertion point</var> have the same value as the current
    <a>insertion point</a>. Let the <a>insertion point</a> be just before the <a>next
    input character</a>.

    Increment the parser's <a>script nesting level</a> by one.

    <a>Prepare</a> the <var>script</var>. This might
    cause some script to execute, which might cause <a>new characters
    to be inserted into the tokenizer</a>, and might cause the tokenizer to output more tokens,
    resulting in a <a>reentrant invocation of the parser</a>.

    Decrement the parser's <a>script nesting level</a> by one. If the parser's <a>script
    nesting level</a> is zero, then set the <a>parser pause flag</a> to false.

    Let the <a>insertion point</a> have the value of the <var>old insertion
    point</var>. (In other words, restore the <a>insertion point</a> to its previous value.
    This value might be the "undefined" value.)

    At this stage, if there is a <a>pending parsing-blocking
    script</a>, then:

    <dl class="switch">

      <dt>If the <a>script nesting level</a> is not zero:</dt>

      <dd>

      Set the <a>parser pause flag</a> to true, and abort the processing of any nested
      invocations of the tokenizer, yielding control back to the caller. (Tokenization will resume
      when the caller returns to the "outer" tree construction stage.)

      <p class="note">
  The tree construction stage of this particular parser is <a>being called reentrantly</a>, say from a call to <code>document.write()</code>.
  </p>

      </dd>

      <dt>Otherwise:</dt>

      <dd>

      Run these steps:

      <ol>

        <li>Let <var>the script</var> be the <a>pending parsing-blocking
        script</a>. There is no longer a <a>pending parsing-blocking script</a>.</li>

        <li>Block the <a>tokenizer</a> for this instance of the
        <a>HTML parser</a>, such that the <a>event loop</a> will not run <a>tasks</a> that invoke the <a>tokenizer</a>.</li>

        <li>If the parser's <code>Document</code> <a>has a style sheet that is blocking
        scripts</a> or <var>the script</var>'s <a>"ready to be parser-executed"</a>
        flag is not set: <a>spin the event loop</a> until the parser's <code>Document</code>
        <a>has no style sheet that is blocking scripts</a> and <var>the script</var>'s
        <a>"ready to be parser-executed"</a> flag is set.</li>

        <li>

        If this <a>parser has been aborted</a> in the meantime,
        abort these steps.

        <p class="note">
  This could happen if, e.g., while the <a>spin the event loop</a>
        algorithm is running, the <a>browsing context</a> gets closed, or the <code>document.open()</code> method gets invoked on the
        <code>Document</code>.
  </p>

        </li>

        <li>Unblock the <a>tokenizer</a> for this instance of the
        <a>HTML parser</a>, such that <a>tasks</a> that invoke the
        <a>tokenizer</a> can again be run.</li>

        <li>Let the <a>insertion point</a> be just before the <a>next input
        character</a>.</li>

        <li>Increment the parser's <a>script nesting level</a> by one (it should be zero
        before this step, so this sets it to one).</li>

        <li><a>Execute</a> <var>the
        script</var>.</li>

        <li>Decrement the parser's <a>script nesting level</a> by one. If the parser's
        <a>script nesting level</a> is zero (which it always should be at this point), then set
        the <a>parser pause flag</a> to false.

        <li>Let the <a>insertion point</a> be undefined again.</li>

        <li>If there is once again a <a>pending parsing-blocking script</a>, then repeat
        these steps from step 1.</li>

      </ol>

      </dd>

    </dl>

    </dd>

    <dt>Any other end tag</dt>
    <dd>

    Pop the <a>current node</a> off the <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to the <a>original insertion mode</a>.

    </dd>

  </dl>

<h6 id="the-in-table-insertion-mode"><dfn>The "<dfn>in table</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  table</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token, if the <a>current node</a> is <code>table</code>, <code>tbody</code>, <code>tfoot</code>, <code>thead</code>, or <code>tr</code> element</dt>
    <dd>

      Let the <dfn><var>pending table character
      tokens</var></dfn> be an empty list of tokens.

      Let the <a>original insertion mode</a> be the current <a>insertion mode</a>.

      Switch the <a>insertion mode</a> to "<a>in
      table text</a>" and reprocess the token.

    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "caption"</dt>
    <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    Insert a <a>marker</a> at the end of the <a>list of
    active formatting elements</a>.

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in caption</a>".

    </dd>

    <dt>A start tag whose tag name is "colgroup"</dt>
    <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in column group</a>".

    </dd>

    <dt>A start tag whose tag name is "col"</dt>
    <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    <a>Insert an HTML element</a> for a "colgroup" start tag token with no attributes, then
    switch the <a>insertion mode</a> to "<a>in
    column group</a>".

    Reprocess the current token.

    </dd>

    <dt>A start tag whose tag name is one of: "tbody", "tfoot", "thead"</dt>
    <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in table body</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "td", "th", "tr"</dt>
    <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    <a>Insert an HTML element</a> for a "tbody" start tag token with no attributes, then
    switch the <a>insertion mode</a> to "<a>in table
    body</a>".

    Reprocess the current token.

    </dd>

    <dt>A start tag whose tag name is "table"</dt>
    <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> does not <a>have a <code>table</code> element in table scope</a>, ignore the token.

    Otherwise:

    Pop elements from this stack until a <code>table</code> element has been popped from the
    stack.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

    </dd>

    <dt>An end tag whose tag name is "table"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>table</code> element in table scope</a>, this is a <a>parse
    error</a>; ignore the token.

    Otherwise:

    Pop elements from this stack until a <code>table</code> element has been popped from the
    stack.

    <a>Reset the insertion mode appropriately</a>.

    </dd>

    <dt>An end tag whose tag name is one of: "body", "caption", "col", "colgroup", "html", "tbody",
    "td", "tfoot", "th", "thead", "tr"</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is one of: "style", "script", "template"</dt>
    <dt>An end tag whose tag name is "template"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion
    mode</a>.

    </dd>

    <dt>A start tag whose tag name is "input"</dt>
    <dd>

    If the token does not have an attribute with the name "type", or if it does, but that
    attribute's value is not an <a>ASCII case-insensitive</a> match for the string "<code>hidden</code>", then: act as described in the "anything else" entry below.

    Otherwise:

    <a>Parse error</a>.

    <a>Insert an HTML element</a> for the token.

    Pop that <code>input</code> element off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    </dd>

    <dt>A start tag whose tag name is "form"</dt>
    <dd>

    <a>Parse error</a>.

    If there is a <code>template</code> element on the <a>stack of open elements</a>, or if
    the <a><code>form</code> element pointer</a> is not null, ignore the
    token.

    Otherwise:

    <a>Insert an HTML element</a> for the token, and set the <a><code>form</code> element pointer</a> to point to the element created.

    Pop that <code>form</code> element off the <a>stack of open elements</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>Anything else</dt>
    <dd>

    <a>Parse error</a>. Enable <a>foster parenting</a>, process
    the token <a>using the rules for</a> the "<a>in
    body</a>" <a>insertion mode</a>, and then disable <a>foster
    parenting</a>.

    </dd>

  </dl>

  When the steps above require the UA to <dfn>clear the stack back to a table context</dfn>, it
  means that the UA must, while the <a>current node</a> is not a <code>table</code>,
  <code>template</code>, or <code>html</code> element, pop elements from the <a>stack of open
  elements</a>.

  <p class="note">
  This is the same list of elements as used in the <i>has an element in table scope</i> steps.
  </p>

  <p class="note">
  The <a>current node</a> being an <code>html</code> element after this
  process is a <a>fragment case</a>.
  </p>

<h6 id="the-in-table-text-insertion-mode"><dfn>The "<dfn>in table text</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in table text</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A character token that is U+0000 NULL</dt>
    <dd>

    <a>Parse error</a>. Ignore the token.

    </dd>

    <dt>Any other character token</dt>
    <dd>

    Append the character token to the <var>pending
    table character tokens</var> list.

    </dd>

    <dt>Anything else</dt>
    <dd>

    If any of the tokens in the <var>pending table
    character tokens</var> list are character tokens that are not <a>space characters</a>, then this is a <a>parse error</a>: reprocess the
    character tokens in the <var>pending table character
    tokens</var> list using the rules given in the "anything else" entry in the "<a>in table</a>" insertion mode.

    Otherwise, <a>insert the characters</a> given by the <var>pending table character tokens</var> list.

    Switch the <a>insertion mode</a> to the <a>original insertion mode</a> and
    reprocess the token.

    </dd>

  </dl>

<h6 id="the-in-caption-insertion-mode"><dfn>The "<dfn>in caption</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  caption</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>An end tag whose tag name is "caption"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>caption</code> element in table scope</a>, this is a <a>parse
    error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise:

    <a>Generate implied end tags</a>.

    Now, if the <a>current node</a> is not a <code>caption</code> element, then this is a
    <a>parse error</a>.

    Pop elements from this stack until a <code>caption</code> element has been popped from the
    stack.

    <a>Clear the list of active formatting elements up to the last marker</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "caption", "col", "colgroup", "tbody", "td", "tfoot",
    "th", "thead", "tr"</dt> <dt>An end tag whose tag name is "table"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>caption</code> element in table scope</a>, this is a <a>parse
    error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise:

    <a>Generate implied end tags</a>.

    Now, if the <a>current node</a> is not a <code>caption</code> element, then this is a
    <a>parse error</a>.

    Pop elements from this stack until a <code>caption</code> element has been popped from the
    stack.

    <a>Clear the list of active formatting elements up to the last marker</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

    Reprocess the token.

    </dd>

    <dt>An end tag whose tag name is one of: "body", "col", "colgroup", "html", "tbody", "td",
    "tfoot", "th", "thead", "tr"</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

  </dl>

<h6 id="the-in-column-group-insertion-mode"><dfn>The "<dfn>in column group</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in column group</a>" <a>insertion mode</a>, the user agent must handle the token
  as follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    <a>Insert the character</a>.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>A start tag whose tag name is "col"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.
    </dd>

    <dt>An end tag whose tag name is "colgroup"</dt>
    <dd>

    If the <a>current node</a> is not a <code>colgroup</code> element, then this is a
    <a>parse error</a>; ignore the token.

    Otherwise, pop the <a>current node</a> from the <a>stack of open elements</a>.
    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

    </dd>

    <dt>An end tag whose tag name is "col"</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "template"</dt>
    <dt>An end tag whose tag name is "template"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>Anything else</dt>
    <dd>

    If the <a>current node</a> is not a <code>colgroup</code> element, then this is a
    <a>parse error</a>; ignore the token.

    Otherwise, pop the <a>current node</a> from the <a>stack of open
    elements</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

    Reprocess the token.

    </dd>

  </dl>

<h6 id="the-in-table-body-insertion-mode"><dfn>The "<dfn>in table body</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in table body</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A start tag whose tag name is "tr"</dt>
    <dd>

    <a>Clear the stack back to a table body context</a>. (See below.)

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in row</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "th", "td"</dt>
    <dd>

    <a>Parse error</a>.

    <a>Clear the stack back to a table body context</a>. (See below.)

    <a>Insert an HTML element</a> for a "tr" start tag token with no attributes, then
    switch the <a>insertion mode</a> to "<a>in
    row</a>".

    Reprocess the current token.

    </dd>

    <dt>An end tag whose tag name is one of: "tbody", "tfoot",
    "thead"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as the token, this is a <a>parse error</a>;
    ignore the token.

    Otherwise:

    <a>Clear the stack back to a table body context</a>. (See below.)

    Pop the <a>current node</a> from the <a>stack of open elements</a>. Switch the
    <a>insertion mode</a> to "<a>in table</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "caption", "col",
    "colgroup", "tbody", "tfoot", "thead"</dt>
    <dt>An end tag whose tag name is "table"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>tbody</code>, <code>thead</code>, or <code>tfoot</code> element in table
    scope</a>, this is a <a>parse error</a>; ignore the token.

    Otherwise:

    <a>Clear the stack back to a table body context</a>. (See below.)

    Pop the <a>current node</a> from the <a>stack of open elements</a>. Switch the
    <a>insertion mode</a> to "<a>in table</a>".

    Reprocess the token.

    </dd>

    <dt>An end tag whose tag name is one of: "body", "caption", "col", "colgroup", "html", "td",
    "th", "tr"</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>
    Process the token <a>using the rules for</a> the "<a>in table</a>" <a>insertion mode</a>.
    </dd>

  </dl>

  When the steps above require the UA to <dfn>clear the stack back to a table body context</dfn>,
  it means that the UA must, while the <a>current node</a> is not a <code>tbody</code>,
  <code>tfoot</code>, <code>thead</code>, <code>template</code>, or <code>html</code> element, pop
  elements from the <a>stack of open elements</a>.

  <p class="note">
  The <a>current node</a> being an <code>html</code> element after this
  process is a <a>fragment case</a>.
  </p>

<h6 id="the-in-row-insertion-mode"><dfn>The "<dfn>in row</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  row</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A start tag whose tag name is one of: "th", "td"</dt>
    <dd>

    <a>Clear the stack back to a table row context</a>. (See below.)

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in cell</a>".

    Insert a <a>marker</a> at the end of the <a>list of
    active formatting elements</a>.

    </dd>

    <dt>An end tag whose tag name is "tr"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>tr</code> element in table scope</a>, this is a <a>parse error</a>;
    ignore the token.

    Otherwise:

    <a>Clear the stack back to a table row context</a>. (See below.)

    Pop the <a>current node</a> (which will be a <code>tr</code> element) from the
    <a>stack of open elements</a>. Switch the <a>insertion mode</a> to "<a>in table body</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "caption", "col", "colgroup", "tbody", "tfoot",
    "thead", "tr"</dt>
    <dt>An end tag whose tag name is "table"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>tr</code> element in table scope</a>, this is a <a>parse error</a>;
    ignore the token.

    Otherwise:

    <a>Clear the stack back to a table row context</a>. (See below.)

    Pop the <a>current node</a> (which will be a <code>tr</code> element) from the
    <a>stack of open elements</a>. Switch the <a>insertion mode</a> to "<a>in table body</a>".

    Reprocess the token.

    </dd>

    <dt>An end tag whose tag name is one of: "tbody", "tfoot", "thead"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as the token, this is a <a>parse error</a>;
    ignore the token.

    If the <a>stack of open elements</a> does not <a>have a <code>tr</code> element in table scope</a>, ignore the token.

    Otherwise:

    <a>Clear the stack back to a table row context</a>. (See below.)

    Pop the <a>current node</a> (which will be a <code>tr</code> element) from the
    <a>stack of open elements</a>. Switch the <a>insertion mode</a> to "<a>in table body</a>".

    Reprocess the token.

    </dd>

    <dt>An end tag whose tag name is one of: "body", "caption", "col", "colgroup", "html", "td",
    "th"</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in table</a>" <a>insertion mode</a>.

    </dd>

  </dl>

  When the steps above require the UA to <dfn>clear the stack back to a table row context</dfn>,
  it means that the UA must, while the <a>current node</a> is not a <code>tr</code>,
  <code>template</code>, or <code>html</code> element, pop elements from the <a>stack of open
  elements</a>.

  <p class="note">
  The <a>current node</a> being an <code>html</code> element after this
  process is a <a>fragment case</a>.
  </p>

<h6 id="the-in-cell-insertion-mode"><dfn>The "<dfn>in cell</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in cell</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>An end tag whose tag name is one of: "td", "th"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise:

    <a>Generate implied end tags</a>.

    Now, if the <a>current node</a> is not an <a>HTML
    element</a> with the same tag name as the token, then this is a <a>parse error</a>.

    Pop elements from the <a>stack of open elements</a> stack until an <a>HTML element</a> with the same tag name as the token has been popped from the
    stack.

    <a>Clear the list of active formatting elements up to the last marker</a>.

    Switch the <a>insertion mode</a> to "<a>in
    row</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "caption", "col",
    "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"</dt>
    <dd>

    If the <a>stack of open elements</a> does <em>not</em> <a>have a <code>td</code> or <code>th</code> element in table scope</a>, then this
    is a <a>parse error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise, <a>close the cell</a> (see below) and reprocess the token.

    </dd>

    <dt>An end tag whose tag name is one of: "body", "caption",
    "col", "colgroup", "html"</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>An end tag whose tag name is one of: "table", "tbody",
    "tfoot", "thead", "tr"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, <a>close the cell</a> (see below) and reprocess the token.

    </dd>

    <dt>Anything else</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

  </dl>

  Where the steps above say to <dfn>close the cell</dfn>, they mean to run the following
  algorithm:

  <ol>

    <li><a>Generate implied end tags</a>.</li>

    <li>If the <a>current node</a> is not now a <code>td</code> element or a <code>th</code>
    element, then this is a <a>parse error</a>.</li>

    <li>Pop elements from the <a>stack of open elements</a> stack until a <code>td</code>
    element or a <code>th</code> element has been popped from the stack.</li>

    <li><a>Clear the list of active formatting elements up to the last marker</a>.</li>

    <li>Switch the <a>insertion mode</a> to "<a>in
    row</a>".</li>

  </ol>

  <p class="note">
  The <a>stack of open elements</a> cannot have both a <code>td</code> and a
  <code>th</code> element <a>in table scope</a> at the
  same time, nor can it have neither when the <a>close the cell</a> algorithm is invoked.
  </p>

<h6 id="the-in-select-insertion-mode"><dfn>The "<dfn>in select</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  select</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token that is U+0000 NULL</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Any other character token</dt>
    <dd>

    <a>Insert the token's character</a>.

    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>A start tag whose tag name is "option"</dt>
    <dd>

    If the <a>current node</a> is an <code>option</code> element, pop that node from the
    <a>stack of open elements</a>.

    <a>Insert an HTML element</a> for the token.

    </dd>

    <dt>A start tag whose tag name is "optgroup"</dt>
    <dd>

    If the <a>current node</a> is an <code>option</code> element, pop that node from the
    <a>stack of open elements</a>.

    If the <a>current node</a> is an <code>optgroup</code> element, pop that node from the
    <a>stack of open elements</a>.

    <a>Insert an HTML element</a> for the token.

    </dd>

    <dt>An end tag whose tag name is "optgroup"</dt>
    <dd>

    First, if the <a>current node</a> is an <code>option</code> element, and the node
    immediately before it in the <a>stack of open elements</a> is an <code>optgroup</code>
    element, then pop the <a>current node</a> from the <a>stack of open
    elements</a>.

    If the <a>current node</a> is an <code>optgroup</code> element, then pop that node from
    the <a>stack of open elements</a>. Otherwise, this is a <a>parse error</a>; ignore
    the token.

    </dd>

    <dt>An end tag whose tag name is "option"</dt>
    <dd>

    If the <a>current node</a> is an <code>option</code> element, then pop that node from
    the <a>stack of open elements</a>. Otherwise, this is a <a>parse error</a>; ignore
    the token.

    </dd>

    <dt>An end tag whose tag name is "select"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>select</code> element in select scope</a>, this is a <a>parse
    error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise:

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    </dd>

    <dt>A start tag whose tag name is "select"</dt>
    <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> does not <a>have a <code>select</code> element in select scope</a>, ignore the token.
    (<a>fragment case</a>)

    Otherwise:

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    <p class="note">
  It just gets treated like an end tag.
  </p>

    </dd>

    <dt>A start tag whose tag name is one of: "input", "keygen", "textarea"</dt>
    <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> does not <a>have a <code>select</code> element in select scope</a>, ignore the token.
    (<a>fragment case</a>)

    Otherwise:

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

    </dd>

    <dt>A start tag whose tag name is one of: "script", "template"</dt>
    <dt>An end tag whose tag name is "template"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>Anything else</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

  </dl>

<h6 id="the-in-select-in-table-insertion-mode"><dfn>The "<dfn>in select in table</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in select in table</a>" <a>insertion mode</a>, the user agent must handle the
  token as follows:

  <dl class="switch">

    <dt>A start tag whose tag name is one of: "caption", "table", "tbody", "tfoot", "thead", "tr",
    "td", "th"</dt>
    <dd>

    <a>Parse error</a>.

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

    </dd>

    <dt>An end tag whose tag name is one of: "caption", "table", "tbody", "tfoot", "thead", "tr",
    "td", "th"</dt>
    <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then ignore the token.

    Otherwise:

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

    </dd>

    <dt>Anything else</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in select</a>" <a>insertion mode</a>.

    </dd>

  </dl>

<h6 id="the-in-template-insertion-mode"><dfn>The "<dfn>in template</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  template</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token</dt>
    <dt>A comment token</dt>
    <dt>A DOCTYPE token</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>A start tag whose tag name is one of: "base", "basefont", "bgsound", "link", "meta", "noframes", "script", "style", "template", "title"</dt>
    <dt>An end tag whose tag name is "template"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>A start tag whose tag name is one of: "caption", "colgroup", "tbody", "tfoot", "thead"</dt>
    <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in table</a>" onto the <a>stack of
    template insertion modes</a> so that it is the new <a>current template insertion
    mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table</a>", and reprocess the token.

    </dd>

    <dt>A start tag whose tag name is "col"</dt>
    <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in column group</a>" onto the
    <a>stack of template insertion modes</a> so that it is the new <a>current template
    insertion mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    column group</a>", and reprocess the token.

    </dd>

    <dt>A start tag whose tag name is "tr"</dt>
    <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in table body</a>" onto the <a>stack
    of template insertion modes</a> so that it is the new <a>current template insertion
    mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table body</a>", and reprocess the token.

    </dd>

    <dt>A start tag whose tag name is one of: "td", "th"</dt>
    <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in row</a>" onto the <a>stack of template
    insertion modes</a> so that it is the new <a>current template insertion mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    row</a>", and reprocess the token.

    </dd>

    <dt>Any other start tag</dt>
    <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in body</a>" onto the <a>stack of template
    insertion modes</a> so that it is the new <a>current template insertion mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    body</a>", and reprocess the token.

    </dd>

    <dt>Any other end tag</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    If there is no <code>template</code> element on the <a>stack of open elements</a>, then
    <a>stop parsing</a>. (<a>fragment case</a>)

    Otherwise, this is a <a>parse error</a>.

    Pop elements from the <a>stack of open elements</a> until a <code>template</code>
    element has been popped from the stack.

    <a>Clear the list of active formatting elements up to the last marker</a>.

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

    </dd>

  </dl>

<h6 id="the-after-body-insertion-mode"><dfn>The "<dfn>after body</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after body</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>A comment token</dt>
    <dd>

    <a>Insert a comment</a> as the last child of the first element in the <a>stack of
    open elements</a> (the <code>html</code> element).

    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end tag whose tag name is "html"</dt>
    <dd>

    If the parser was originally created as part of the <a>HTML fragment parsing
    algorithm</a>, this is a <a>parse error</a>; ignore the token. (<a>fragment
    case</a>)

    Otherwise, switch the <a>insertion mode</a> to "<a>after after body</a>".

    </dd>

    <dt>An end-of-file token</dt>
    <dd>
    <a>Stop parsing</a>.
    </dd>

    <dt>Anything else</dt>
    <dd>

    <a>Parse error</a>. Switch the <a>insertion mode</a> to "<a>in body</a>" and reprocess the token.

    </dd>

  </dl>

<h6 id="the-in-frameset-insertion-mode"><dfn>The "<dfn>in frameset</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  frameset</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    <a>Insert the character</a>.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>A start tag whose tag name is "frameset"</dt>
    <dd>
    <a>Insert an HTML element</a> for the token.
    </dd>

    <dt>An end tag whose tag name is "frameset"</dt>
    <dd>

    If the <a>current node</a> is the root <code>html</code> element, then this is a
    <a>parse error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise, pop the <a>current node</a> from the <a>stack of open
    elements</a>.

    If the parser was <em>not</em> originally created as part of the <a>HTML fragment parsing
    algorithm</a> (<a>fragment case</a>), and the <a>current node</a> is no longer a
    <code>frameset</code> element, then switch the <a>insertion mode</a> to "<a>after frameset</a>".

    </dd>

    <dt>A start tag whose tag name is "frame"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    </dd>

    <dt>A start tag whose tag name is "noframes"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    If the <a>current node</a> is not the root <code>html</code> element, then this is a
    <a>parse error</a>.

    <p class="note">
  The <a>current node</a> can only be the root
    <code>html</code> element in the <a>fragment case</a>.
  </p>

    <a>Stop parsing</a>.

    </dd>

    <dt>Anything else</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

  </dl>

<h6 id="the-after-frameset-insertion-mode"><dfn>The "<dfn>after frameset</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after frameset</a>" <a>insertion mode</a>, the user agent must handle the token
  as follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    <a>Insert the character</a>.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end tag whose tag name is "html"</dt>
    <dd>

    Switch the <a>insertion mode</a> to "<a>after after frameset</a>".

    </dd>

    <dt>A start tag whose tag name is "noframes"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>
    <a>Stop parsing</a>.
    </dd>

    <dt>Anything else</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

  </dl>

<h6 id="the-after-after-body-insertion-mode"><dfn>The "<dfn>after after body</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after after body</a>" <a>insertion mode</a>, the user agent must handle the token
  as follows:

  <dl class="switch">

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a> as the last child of the <code>Document</code> object.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>
    <a>Stop parsing</a>.
    </dd>

    <dt>Anything else</dt>
    <dd>

    <a>Parse error</a>. Switch the <a>insertion mode</a> to "<a>in body</a>" and reprocess the token.

    </dd>

  </dl>

<h6 id="the-after-after-frameset-insertion-mode"><dfn>The "<dfn>after after frameset</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after after frameset</a>" <a>insertion mode</a>, the user agent must handle the
  token as follows:

  <dl class="switch">

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a> as the last child of the <code>Document</code> object.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>
    <a>Stop parsing</a>.
    </dd>

    <dt>A start tag whose tag name is "noframes"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>Anything else</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

  </dl>

<h5 id="the-rules-for-parsing-tokens-in-foreign-content"><dfn>The rules for parsing tokens <dfn>in foreign content</dfn></dfn></h5>

  When the user agent is to apply the rules for parsing tokens in foreign content, the user agent
  must handle the token as follows:

  <dl class="switch">

    <dt>A character token that is U+0000 NULL</dt>
    <dd>

    <a>Parse error</a>. <a>Insert a U+FFFD REPLACEMENT
    CHARACTER character</a>.

    </dd>

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>

    <a>Insert the token's character</a>.

    </dd>

    <dt>Any other character token</dt>
    <dd>

    <a>Insert the token's character</a>.

    Set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>A comment token</dt>
    <dd>

    <a>Insert a comment</a>.

    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is one of:  "b", "big", "blockquote", "body", "br", "center", "code", "dd", "div", "dl", "dt", "em", "embed", "h1", "h2", "h3", "h4", "h5", "h6", "head", "hr", "i", "img",
    "li", "listing",
    "menu", "meta", "nobr", "ol", "p", "pre", "ruby", "s",  "small", "span", "strong", "strike",  "sub",
    "sup", "table", "tt", "u", "ul", "var"</dt>
    <dt>A start tag whose tag name is "font", if the token has any attributes named "color", "face",
    or "size"</dt>

    <dd>

    <a>Parse error</a>.

    If the parser was originally created for the <a>HTML fragment parsing algorithm</a>,
    then act as described in the "any other start tag" entry below. (<a>fragment case</a>)

    Otherwise:

    Pop an element from the <a>stack of open elements</a>, and then keep popping more
    elements from the <a>stack of open elements</a> until the <a>current node</a> is a
    <a>MathML text integration point</a>, an <a>HTML integration point</a>, or an
    element in the <a>HTML namespace</a>.

    Then, reprocess the token.

    </dd>

    <dt>Any other start tag</dt>
    <dd>

    If the <a>adjusted current node</a> is an element in the <a>MathML namespace</a>,
    <a>adjust MathML attributes</a> for the token. (This fixes the case of MathML attributes
    that are not all lowercase.)

    If the <a>adjusted current node</a> is an element in the <a>SVG namespace</a>, and the
    token's tag name is one of the ones in the first column of the following table, change the tag
    name to the name given in the corresponding cell in the second column. (This fixes the case of
    SVG elements that are not all lowercase.)

    <table>
      <thead>
      <tr> <th> Tag name <th> Element name
      <tbody>
      <tr> <td> <code>altglyph</code> <td> <code>altGlyph</code>
      <tr> <td> <code>altglyphdef</code> <td> <code>altGlyphDef</code>
      <tr> <td> <code>altglyphitem</code> <td> <code>altGlyphItem</code>
      <tr> <td> <code>animatecolor</code> <td> <code>animateColor</code>
      <tr> <td> <code>animatemotion</code> <td> <code>animateMotion</code>
      <tr> <td> <code>animatetransform</code> <td> <code>animateTransform</code>
      <tr> <td> <code>clippath</code> <td> <code>clipPath</code>
      <tr> <td> <code>feblend</code> <td> <code>feBlend</code>
      <tr> <td> <code>fecolormatrix</code> <td> <code>feColorMatrix</code>
      <tr> <td> <code>fecomponenttransfer</code> <td> <code>feComponentTransfer</code>
      <tr> <td> <code>fecomposite</code> <td> <code>feComposite</code>
      <tr> <td> <code>feconvolvematrix</code> <td> <code>feConvolveMatrix</code>
      <tr> <td> <code>fediffuselighting</code> <td> <code>feDiffuseLighting</code>
      <tr> <td> <code>fedisplacementmap</code> <td> <code>feDisplacementMap</code>
      <tr> <td> <code>fedistantlight</code> <td> <code>feDistantLight</code>
      <tr> <td> <code>fedropshadow</code> <td> <code>feDropShadow</code>
      <tr> <td> <code>feflood</code> <td> <code>feFlood</code>
      <tr> <td> <code>fefunca</code> <td> <code>feFuncA</code>
      <tr> <td> <code>fefuncb</code> <td> <code>feFuncB</code>
      <tr> <td> <code>fefuncg</code> <td> <code>feFuncG</code>
      <tr> <td> <code>fefuncr</code> <td> <code>feFuncR</code>
      <tr> <td> <code>fegaussianblur</code> <td> <code>feGaussianBlur</code>
      <tr> <td> <code>feimage</code> <td> <code>feImage</code>
      <tr> <td> <code>femerge</code> <td> <code>feMerge</code>
      <tr> <td> <code>femergenode</code> <td> <code>feMergeNode</code>
      <tr> <td> <code>femorphology</code> <td> <code>feMorphology</code>
      <tr> <td> <code>feoffset</code> <td> <code>feOffset</code>
      <tr> <td> <code>fepointlight</code> <td> <code>fePointLight</code>
      <tr> <td> <code>fespecularlighting</code> <td> <code>feSpecularLighting</code>
      <tr> <td> <code>fespotlight</code> <td> <code>feSpotLight</code>
      <tr> <td> <code>fetile</code> <td> <code>feTile</code>
      <tr> <td> <code>feturbulence</code> <td> <code>feTurbulence</code>
      <tr> <td> <code>foreignobject</code> <td> <code>foreignObject</code>
      <tr> <td> <code>glyphref</code> <td> <code>glyphRef</code>
      <tr> <td> <code>lineargradient</code> <td> <code>linearGradient</code>
      <tr> <td> <code>radialgradient</code> <td> <code>radialGradient</code>

      <tr> <td> <code>textpath</code> <td> <code>textPath</code>
    </table>

    If the <a>adjusted current node</a> is an element in the <a>SVG namespace</a>,
    <a>adjust SVG attributes</a> for the token. (This fixes the case of SVG attributes that
    are not all lowercase.)

    <a>Adjust foreign attributes</a> for the token. (This fixes the use of namespaced
    attributes, in particular XLink in SVG.)

    <a>Insert a foreign element</a> for the token, in the same namespace as the
    <a>adjusted current node</a>.

    If the token has its <i>self-closing flag</i> set, then run the appropriate steps from the
    following list:

    <dl class="switch">

      <dt>If the token's tag name is "script", and the new <a>current node</a> is in the <a>SVG namespace</a></dt>

      <dd>

      <a>Acknowledge the token's <i>self-closing
      flag</i></a>, and then act as described in the steps for a "script" end tag below.

      </dd>

      <dt>Otherwise</dt>

      <dd>

      Pop the <a>current node</a> off the <a>stack of open elements</a> and <a>acknowledge the token's <i>self-closing
      flag</i></a>.

      </dd>

    </dl>

    </dd>

    <dt>An end tag whose tag name is "script", if the <a>current node</a> is a <code>script</code> element in the <a>SVG namespace</a></dt>
    <dd>

    Pop the <a>current node</a> off the <a>stack of open elements</a>.

    Let the <var>old insertion point</var> have the same value as the current
    <a>insertion point</a>. Let the <a>insertion point</a> be just before the <a>next
    input character</a>.

    Increment the parser's <a>script nesting level</a> by one. Set the <a>parser pause
    flag</a> to true.

    <a>Process the
    <code>script</code> element</a> according to the SVG rules, if the user agent supports
    SVG. [[!SVG]]

    <p class="note">
  Even if this causes <a>new characters to be
    inserted into the tokenizer</a>, the parser will not be executed reentrantly, since the
    <a>parser pause flag</a> is true.
  </p>

    Decrement the parser's <a>script nesting level</a> by one. If the parser's <a>script
    nesting level</a> is zero, then set the <a>parser pause flag</a> to false.

    Let the <a>insertion point</a> have the value of the <var>old insertion
    point</var>. (In other words, restore the <a>insertion point</a> to its previous value.
    This value might be the "undefined" value.)

    </dd>

    <dt>Any other end tag</dt>

    <dd>

    Run these steps:

    <ol>

      <li>Initialize <var>node</var> to be the <a>current node</a> (the bottommost
      node of the stack).</li>

      <li>If <var>node</var>'s tag name, <a>converted to ASCII lowercase</a>, is
      not the same as the tag name of the token, then this is a <a>parse error</a>.</li>

      <li><i>Loop</i>: If <var>node</var> is the topmost element in the <a>stack of
      open elements</a>, abort these steps. (<a>fragment case</a>)</li>

      <li>If <var>node</var>'s tag name, <a>converted to ASCII lowercase</a>, is
      the same as the tag name of the token, pop elements from the <a>stack of open
      elements</a> until <var>node</var> has been popped from the stack, and then abort
      these steps.</li>

      <li>Set <var>node</var> to the previous entry in the <a>stack of open
      elements</a>.</li>

      <li>If <var>node</var> is not an element in the <a>HTML namespace</a>, return
      to the step labeled <i>loop</i>.</li>

      <li>Otherwise, process the token according to the rules given in the section corresponding
      to the current <a>insertion mode</a> in HTML content.</li>

    </ol>

    </dd>

  </dl>

  </div>

  <div class="impl">

<h4 id="the-end"><dfn>The end</dfn></h4>

  Once the user agent <dfn>stops parsing</dfn> the document, the user agent
  must run the following steps:

  <ol>

    <li>Set the <a>current document readiness</a> to "<code>interactive</code>"
    and the <a>insertion point</a> to
    undefined.</li>

    <li>Pop <em>all</em> the nodes off the <a>stack of open elements</a>.</li>

    <li>If the <a>list of scripts that will execute when the document has finished
    parsing</a> is not empty, run these substeps:

    <ol>

      <li><a>Spin the event loop</a> until the first <code>script</code> in the <a>list
      of scripts that will execute when the document has finished parsing</a> has its <a>"ready
      to be parser-executed"</a> flag set <em>and</em> the parser's <code>Document</code>
      <a>has no style sheet that is blocking scripts</a>.</li>

      <li><a>Execute</a> the first <code>script</code> in
      the <a>list of scripts that will execute when the document has finished
      parsing</a>.</li>

      <li>Remove the first <code>script</code> element from the <a>list of scripts that will
      execute when the document has finished parsing</a> (i.e. shift out the first entry in the
      list).</li>

      <li>If the <a>list of scripts that will execute when the document has finished
      parsing</a> is still not empty, repeat these substeps again from substep 1.

    </ol>

    </li>

    <li><a>Queue a task</a> to <a>fire a simple event</a> that bubbles named <code>DOMContentLoaded</code> at the <code>Document</code>.</li>

    <li><a>Spin the event loop</a> until the <a>set of scripts that will execute as soon
    as possible</a> and the <a>list of scripts that will execute in order as soon as
    possible</a> are empty.</li>

    <li><a>Spin the event loop</a> until there is nothing that <dfn>delays the load event</dfn> in the <code>Document</code>.</li>

    <li>

    <a>Queue a task</a> to run the following substeps:

    <ol>

      <li>Set the <a>current document readiness</a> to "<code>complete</code>".</li>

      <li><i>Load event</i>: If the <code>Document</code> is in a <a>browsing context</a>,
      <a>fire a simple event</a> named <code>load</code> at the
      <code>Document</code>'s <code>Window</code> object, with <i>target override</i> set to the <code>Document</code>
      object.</li>

    </ol>

    </li>

    <li>

    If the <code>Document</code> is in a <a>browsing context</a>, then <a>queue a
    task</a> to run the following substeps:

    <ol>

      <li>If the <code>Document</code>'s <a>page showing</a> flag is true, then abort this
      task (i.e. don't fire the event below).</li>

      <li>Set the <code>Document</code>'s <a>page showing</a> flag to true.</li>

      <li><a>Fire</a> a <a>trusted</a> event with the name <code>pageshow</code> at the <code>Window</code> object of the
      <code>Document</code>, with <i>target override</i> set to the <code>Document</code>
      object,
      using the <code>PageTransitionEvent</code> interface, with the <code>persisted</code> attribute initialized to false. This
      event must not bubble, must not be cancelable, and has no default action.</li>

    </ol>

    </li>

    <li>If the <code>Document</code> has any <a>pending application cache download process
    tasks</a>, then <a>queue</a> each such <a>task</a> in the order they were added to the list of <a>pending
    application cache download process tasks</a>, and then empty the list of <a>pending
    application cache download process tasks</a>. The <a>task source</a> for these <a>tasks</a> is the <a>networking task source</a>.</li>

    <li>If the <code>Document</code>'s <a>print when loaded</a> flag is set, then run the
    <a>printing steps</a>.</li>

    <li>The <code>Document</code> is now <dfn>ready for post-load tasks</dfn>.</li>

    <li><a>Queue a task</a> to mark the <code>Document</code> as <dfn>completely
    loaded</dfn>.</li>

  </ol>

  When the user agent is to <dfn>abort a parser</dfn>, it must run the following steps:

  <ol>

    <li>Throw away any pending content in the <a>input stream</a>, and discard any future
    content that would have been added to it.</li>

    <li>Set the <a>current document readiness</a> to "<code>interactive</code>".</li>

    <li>Pop <em>all</em> the nodes off the <a>stack of open elements</a>.</li>

    <li>Set the <a>current document readiness</a> to "<code>complete</code>".</li>

  </ol>

  Except where otherwise specified, the <a>task source</a> for the <a>tasks</a> mentioned in this section is the <a>DOM manipulation task
  source</a>.

  </div>

  <div class="impl">

<h4 id="coercing-an-html-dom-into-an-infoset"><dfn>Coercing an HTML DOM into an infoset</dfn></h4>

  When an application uses an <a>HTML parser</a> in conjunction with an XML pipeline, it is
  possible that the constructed DOM is not compatible with the XML tool chain in certain subtle
  ways. For example, an XML toolchain might not be able to represent attributes with the name <code>xmlns</code>, since they conflict with the Namespaces in XML syntax. There is also some
  data that the <a>HTML parser</a> generates that isn't included in the DOM itself. This
  section specifies some rules for handling these issues.

  If the XML API being used doesn't support DOCTYPEs, the tool may drop DOCTYPEs altogether.

  If the XML API doesn't support attributes in no namespace that are named "<code>xmlns</code>", attributes whose names start with "<code>xmlns:</code>", or
  attributes in the <a>XMLNS namespace</a>, then the tool may drop such attributes.

  The tool may annotate the output with any namespace declarations required for proper
  operation.

  If the XML API being used restricts the allowable characters in the local names of elements and
  attributes, then the tool may map all element and attribute local names that the API wouldn't
  support to a set of names that <em>are</em> allowed, by replacing any character that isn't
  supported with the uppercase letter U and the six digits of the character's Unicode code point
  when expressed in hexadecimal, using digits 0-9 and capital letters A-F as the symbols, in
  increasing numeric order.

  <p class="example">
  For example, the element name <code>foo&lt;bar</code>, which can be
  output by the <a>HTML parser</a>, though it is neither a legal HTML element name nor a
  well-formed XML element name, would be converted into <code>fooU00003Cbar</code>, which
  <em>is</em> a well-formed XML element name (though it's still not legal in HTML by any means).
  </p>

  <p class="example">
  As another example, consider the attribute <code>xlink:href</code>.
  Used on a MathML element, it becomes, after being <a>adjusted</a>, an attribute with a prefix "<code>xlink</code>" and a local
  name "<code>href</code>". However, used on an HTML element, it becomes an attribute with
  no prefix and the local name "<code>xlink:href</code>", which is not a valid NCName, and
  thus might not be accepted by an XML API. It could thus get converted, becoming "<code>xlinkU00003Ahref</code>".
  </p>

  <p class="note">
  The resulting names from this conversion conveniently can't clash with any
  attribute generated by the <a>HTML parser</a>, since those are all either lowercase or those
  listed in the <a>adjust foreign attributes</a> algorithm's table.
  </p>

  If the XML API restricts comments from having two consecutive U+002D HYPHEN-MINUS characters
  (--), the tool may insert a single U+0020 SPACE character between any such offending
  characters.

  If the XML API restricts comments from ending in a U+002D HYPHEN-MINUS character (-), the tool
  may insert a single U+0020 SPACE character at the end of such comments.

  If the XML API restricts allowed characters in character data, attribute values, or comments,
  the tool may replace any U+000C FORM FEED (FF) character with a U+0020 SPACE character, and any
  other literal non-XML character with a U+FFFD REPLACEMENT CHARACTER.

  If the tool has no way to convey out-of-band information, then the tool may drop the following
  information:

  <ul>

    <li>Whether the document is set to <i>no-quirks mode</i>, <i>limited-quirks mode</i>, or
    <i>quirks mode</i></li>

    <li>The association between form controls and forms that aren't their nearest <code>form</code>
    element ancestor (use of the <a><code>form</code> element pointer</a> in the parser)</li>

    <li>The <a>template contents</a> of any <code>template</code> elements.</li>

  </ul>

  <p class="note">
  The mutations allowed by this section apply <em>after</em> the <a>HTML
  parser</a>'s rules have been applied. For example, a <code>&lt;a::></code> start tag
  will be closed by a <code>&lt;/a::></code> end tag, and never by a <code>&lt;/aU00003AU00003A></code> end tag, even if the user agent is using the rules above to
  then generate an actual element in the DOM with the name <code>aU00003AU00003A</code> for
  that start tag.
  </p>

  </div>

  <div class="impl">

<h4 id="an-introduction-to-error-handling-and-strange-cases-in-the-parser"><dfn>An introduction to error handling and strange cases in the parser</dfn></h4>

  <em>This section is non-normative.</em>

  This section examines some erroneous markup and discusses how the <a>HTML parser</a>
  handles these cases.

<h5 id="misnested-tags-b-i-b-i"><dfn>Misnested tags: &lt;b>&lt;i>&lt;/b>&lt;/i></dfn></h5>

  <em>This section is non-normative.</em>

  The most-often discussed example of erroneous markup is as follows:

  <pre highlight="html">
  &lt;p>1&lt;b>2&lt;i>3&lt;/b>4&lt;/i>5&lt;/p>
  </pre>

  The parsing of this markup is straightforward up to the "3". At this point, the DOM looks like
  this:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>1</a></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <a>3</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>

  Here, the <a>stack of open elements</a> has five elements on it: <code>html</code>,
  <code>body</code>, <code>p</code>, <code>b</code>, and <code>i</code>. The <a>list of active
  formatting elements</a> just has two: <code>b</code> and <code>i</code>. The <a>insertion
  mode</a> is "<a>in body</a>".

  Upon receiving the end tag token with the tag name "b", the "<a>adoption
  agency algorithm</a>" is invoked. This is a simple case, in that the <var>formatting
  element</var> is the <code>b</code> element, and there is no <var>furthest block</var>.
  Thus, the <a>stack of open elements</a> ends up with just three elements: <code>html</code>,
  <code>body</code>, and <code>p</code>, while the <a>list of active formatting elements</a>
  has just one: <code>i</code>. The DOM tree is unmodified at this point.

  The next token is a character ("4"), triggers the <a>reconstruction of the active formatting elements</a>, in this case just
  the <code>i</code> element. A new <code>i</code> element is thus created for the "4"
  <code>Text</code> node. After the end tag token for the "i" is also received, and the "5"
  <code>Text</code> node is inserted, the DOM looks as follows:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>1</a></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <a>3</a></li></ul></li></ul></li><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <a>4</a></li></ul></li><li class="t3"><code>#text</code>: <a>5</a></li></ul></li></ul></li></ul></li></ul>

<h5 id="misnested-tags-b-p-b-p"><dfn>Misnested tags: &lt;b>&lt;p>&lt;/b>&lt;/p></dfn></h5>

  <em>This section is non-normative.</em>

  A case similar to the previous one is the following:

  <pre highlight="html">
  &lt;b>1&lt;p>2&lt;/b>3&lt;/p>
  </pre>

  Up to the "2" the parsing here is straightforward:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li></ul></li></ul></li></ul></li></ul>

  The interesting part is when the end tag token with the tag name "b" is parsed.

  Before that token is seen, the <a>stack of open elements</a> has four elements on it:
  <code>html</code>, <code>body</code>, <code>b</code>, and <code>p</code>. The <a>list of active
  formatting elements</a> just has the one: <code>b</code>. The <a>insertion mode</a> is
  "<a>in body</a>".

  Upon receiving the end tag token with the tag name "b", the "<a>adoption
  agency algorithm</a>" is invoked, as in the previous example. However, in this case, there
  <em>is</em> a <var>furthest block</var>, namely the <code>p</code> element. Thus, this
  time the adoption agency algorithm isn't skipped over.

  The <var>common ancestor</var> is the <code>body</code> element. A conceptual
  "bookmark" marks the position of the <code>b</code> in the <a>list of active formatting
  elements</a>, but since that list has only one element in it, the bookmark won't have much
  effect.

  As the algorithm progresses, <var>node</var> ends up set to the formatting element
  (<code>b</code>), and <var>last node</var> ends up set to the <var>furthest
  block</var> (<code>p</code>).

  The <var>last node</var> gets appended (moved) to the <var>common
  ancestor</var>, so that the DOM looks like:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li></ul></li><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li></ul></li></ul></li></ul>

  A new <code>b</code> element is created, and the children of the <code>p</code> element are
  moved to it:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li></ul></li><li class="t1"><code>p</code></li></ul></li></ul></li></ul>
  <ul class="domTree"><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li></ul>

  Finally, the new <code>b</code> element is appended to the <code>p</code> element, so that the
  DOM looks like:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li></ul></li></ul></li></ul></li></ul>

  The <code>b</code> element is removed from the <a>list of active formatting elements</a>
  and the <a>stack of open elements</a>, so that when the "3" is parsed, it is appended to the
  <code>p</code> element:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li><li class="t3"><code>#text</code>: <a>3</a></li></ul></li></ul></li></ul></li></ul>

<h5 id="unexpected-markup-in-tables"><dfn>Unexpected markup in tables</dfn></h5>

  <em>This section is non-normative.</em>

  Error handling in tables is, for historical reasons, especially strange. For example, consider
  the following markup:

  <pre highlight="html">
  &lt;table><strong>&lt;b></strong>&lt;tr>&lt;td>aaa&lt;/td>&lt;/tr><strong>bbb</strong>&lt;/table>ccc
  </pre>

  The highlighted <code>b</code> element start tag is not allowed directly inside a table like
  that, and the parser handles this case by placing the element <em>before</em> the table. (This is
  called <i>foster parenting</i>.) This can be seen by examining the DOM tree
  as it stands just after the <code>table</code> element's start tag has been seen:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>table</code></li></ul></li></ul></li></ul>

  ...and then immediately after the <code>b</code> element start tag has been seen:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code></li></ul></li></ul></li></ul>

  At this point, the <a>stack of open elements</a> has on it the elements
  <code>html</code>, <code>body</code>, <code>table</code>, and <code>b</code> (in that order,
  despite the resulting DOM tree); the <a>list of active formatting elements</a> just has the
  <code>b</code> element in it; and the <a>insertion mode</a> is "<a>in table</a>".

  The <code>tr</code> start tag causes the <code>b</code> element to be popped off the stack and
  a <code>tbody</code> start tag to be implied; the <code>tbody</code> and <code>tr</code> elements
  are then handled in a rather straight-forward manner, taking the parser through the "<a>in table body</a>" and "<a>in row</a>" insertion modes, after which the DOM looks as follows:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code></li></ul></li></ul></li></ul></li></ul></li></ul>

  Here, the <a>stack of open elements</a> has on it the elements <code>html</code>,
  <code>body</code>, <code>table</code>, <code>tbody</code>, and <code>tr</code>; the <a>list of
  active formatting elements</a> still has the <code>b</code> element in it; and the
  <a>insertion mode</a> is "<a>in row</a>".

  The <code>td</code> element start tag token, after putting a <code>td</code> element on the
  tree, puts a <a>marker</a> on the <a>list of active
  formatting elements</a> (it also switches to the "<a>in
  cell</a>" <a>insertion mode</a>).

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>

  The <a>marker</a> means that when the "aaa" character
  tokens are seen, no <code>b</code> element is created to hold the resulting <code>Text</code>
  node:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code><ul><li class="t3"><code>#text</code>: <a>aaa</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>

  The end tags are handled in a straight-forward manner; after handling them, the <a>stack of
  open elements</a> has on it the elements <code>html</code>, <code>body</code>,
  <code>table</code>, and <code>tbody</code>; the <a>list of active formatting elements</a>
  still has the <code>b</code> element in it (the <a>marker</a>
  having been removed by the "td" end tag token); and the <a>insertion mode</a> is "<a>in table body</a>".

  Thus it is that the "bbb" character tokens are found. These trigger the "<a>in table text</a>" insertion mode to be used (with the <a>original
  insertion mode</a> set to "<a>in table body</a>").
  The character tokens are collected, and when the next token (the <code>table</code> element end
  tag) is seen, they are processed as a group. Since they are not all spaces, they are handled as
  per the "anything else" rules in the "<a>in table</a>"
  insertion mode, which defer to the "<a>in body</a>"
  insertion mode but with <a>foster parenting</a>.

  When <a>the active formatting elements
  are reconstructed</a>, a <code>b</code> element is created and <a>foster parented</a>, and then the "bbb" <code>Text</code> node is appended to it:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>bbb</a></li></ul></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code><ul><li class="t3"><code>#text</code>: <a>aaa</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>

  The <a>stack of open elements</a> has on it the elements <code>html</code>,
  <code>body</code>, <code>table</code>, <code>tbody</code>, and the new <code>b</code> (again, note
  that this doesn't match the resulting tree!); the <a>list of active formatting elements</a>
  has the new <code>b</code> element in it; and the <a>insertion mode</a> is still "<a>in table body</a>".

  Had the character tokens been only <a>space characters</a>
  instead of "bbb", then those <a>space characters</a> would just be
  appended to the <code>tbody</code> element.

  Finally, the <code>table</code> is closed by a "table" end tag. This pops all the nodes from
  the <a>stack of open elements</a> up to and including the <code>table</code> element, but it
  doesn't affect the <a>list of active formatting elements</a>, so the "ccc" character tokens
  after the table result in yet another <code>b</code> element being created, this time after the
  table:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>bbb</a></li></ul></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code><ul><li class="t3"><code>#text</code>: <a>aaa</a></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>ccc</a></li></ul></li></ul></li></ul></li></ul>

<h5 id="scripts-that-modify-the-page-as-it-is-being-parsed"><dfn>Scripts that modify the page as it is being parsed</dfn></h5>

  <em>This section is non-normative.</em>

  Consider the following markup, which for this example we will assume is the document with
  <a>URL</a> <code>http://example.com/inner</code>, being rendered as the content of
  an <code>iframe</code> in another document with the <a>URL</a> <code>http://example.com/outer</code>:

  <pre highlight="html">
  &lt;div id=a>
  &lt;script>
  var div = document.getElementById('a');
  parent.document.body.appendChild(div);
  &lt;/script>
  &lt;script>
  alert(document.URL);
  &lt;/script>
  &lt;/div>
  &lt;script>
  alert(document.URL);
  &lt;/script>
  </pre>

  Up to the first "script" end tag, before the script is parsed, the result is relatively
  straightforward:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>div</code> <span class="t2"><code class="attribute name">id</code>="<code class="attribute value">a</code>"</span><ul><li class="t3"><code>#text</code>: <a>
  </a></li><li class="t1"><code>script</code><ul><li class="t3"><code>#text</code>: var div = document.getElementById('a'); &#x23CE; parent.document.body.appendChild(div);</li></ul></li></ul></li></ul></li></ul></li></ul>

  After the script is parsed, though, the <code>div</code> element and its child
  <code>script</code> element are gone:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code></li></ul></li></ul>

  They are, at this point, in the <code>Document</code> of the aforementioned outer
  <a>browsing context</a>. However, the <a>stack of open elements</a> <em>still contains
  the <code>div</code> element</em>.

  Thus, when the second <code>script</code> element is parsed, it is inserted <em>into the outer
  <code>Document</code> object</em>.

  Those parsed into different <code>Document</code>s than the one the parser was created for do
  not execute, so the first alert does not show.

  Once the <code>div</code> element's end tag is parsed, the <code>div</code> element is popped
  off the stack, and so the next <code>script</code> element is in the inner
  <code>Document</code>:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>script</code><ul><li class="t3"><code>#text</code>: <a>alert(document.URL);</a></li></ul></li></ul></li></ul></li></ul>

  This script does execute, resulting in an alert that says "http://example.com/inner".

<h5 id="the-execution-of-scripts-that-are-moving-across-multiple-documents"><dfn>The execution of scripts that are moving across multiple documents</dfn></h5>

  <em>This section is non-normative.</em>

  Elaborating on the example in the previous section, consider the case where the second
  <code>script</code> element is an external script (i.e. one with a <code>src</code> attribute). Since the element was not in the parser's
  <code>Document</code> when it was created, that external script is not even downloaded.

  In a case where a <code>script</code> element with a <code>src</code>
  attribute is parsed normally into its parser's <code>Document</code>, but while the external
  script is being downloaded, the element is moved to another document, the script continues to
  download, but does not execute.

  <p class="note">
  In general, moving <code>script</code> elements between <code>Document</code>s is
  considered a bad practice.
  </p>

<h5 id="unclosed-formatting-elements"><dfn>Unclosed formatting elements</dfn></h5>

  <em>This section is non-normative.</em>

  The following markup shows how nested formatting elements (such as <code>b</code>) get
  collected and continue to be applied even as the elements they are contained in are closed, but
  that excessive duplicates are thrown away.

  <pre highlight="html">
  &lt;!DOCTYPE html>
  &lt;p>&lt;b class=x>&lt;b class=x>&lt;b>&lt;b class=x>&lt;b class=x>&lt;b>X
  &lt;p>X
  &lt;p>&lt;b>&lt;b class=x>&lt;b>X
  &lt;p>&lt;/b>&lt;/b>&lt;/b>&lt;/b>&lt;/b>&lt;/b>X
  </pre>

  The resulting DOM tree is as follows:

  <ul class="domTree"><li class="t10">DOCTYPE: <code>html</code></li><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>p</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: X&#x23CE;</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: X&#x23CE;</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: X&#x23CE;</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: X&#x23CE;</li></ul></li></ul></li></ul></li></ul>

  Note how the second <code>p</code> element in the markup has no explicit <code>b</code>
  elements, but in the resulting DOM, up to three of each kind of formatting element (in this case
  three <code>b</code> elements with the class attribute, and two unadorned <code>b</code> elements)
  get reconstructed before the element's "X".

  Also note how this means that in the final paragraph only six <code>b</code> end tags are
  needed to completely clear the <a>list of active formatting elements</a>, even though nine <code>b</code> start
  tags have been seen up to this point.

<h3 id="serializing-html-fragments"><dfn>Serializing HTML fragments</dfn></h3>

  The following steps form the <dfn>HTML fragment serialization algorithm</dfn>. The algorithm
  takes as input a DOM <code>Element</code>, <code>Document</code>, or <code>DocumentFragment</code>
  referred to as <var>the node</var>, and either returns a string or throws an
  exception.

  <p class="note">
  This algorithm serializes the <em>children</em> of the node being serialized, not
  the node itself.
  </p>

  <ol>

    <li>Let <var>s</var> be a string, and initialize it to the empty string.</li>

    <li>If <var>the node</var> is a <code>template</code> element, then let <var>the node</var> instead be the <code>template</code> element's <a>template
    contents</a> (a <code>DocumentFragment</code> node).</li>

    <li>

    For each child node of <var>the node</var>, in <a>tree order</a>, run the
    following steps:

    <ol>

      <li>Let <var>current node</var> be the child node being processed.</li>

      <li>

      Append the appropriate string from the following list to <var>s</var>:

      <dl class="switch">

        <dt>If <var>current node</var> is an <code>Element</code></dt>

        <dd>

        If <var>current node</var> is an element in the <a>HTML namespace</a>, the
        <a>MathML namespace</a>, or the <a>SVG namespace</a>, then let <var>tagname</var> be <var>current node</var>'s local name. Otherwise, let <var>tagname</var> be <var>current node</var>'s qualified name.

        Append a U+003C LESS-THAN SIGN character (&lt;), followed by <var>tagname</var>.

        <p class="note">
  For <a>HTML elements</a> created by the <a>HTML parser</a> or
        <code>Document.createElement()</code>, <var>tagname</var> will be
        lowercase.
  </p>

        For each attribute that the element has, append a U+0020 SPACE character, the <a>attribute's serialized name as described below</a>, a
        U+003D EQUALS SIGN character (=), a U+0022 QUOTATION MARK character (&quot;), the
        attribute's value, <a>escaped as described below</a> in
        <i>attribute mode</i>, and a second U+0022 QUOTATION MARK character (&quot;).

        An <dfn>attribute's serialized name</dfn> for the purposes of the previous paragraph must
        be determined as follows:

        <dl class="switch">

          <dt>If the attribute has no namespace</dt>

          <dd>

          The attribute's serialized name is the attribute's local name.

          <p class="note">
  For attributes on <a>HTML elements</a> set by the <a>HTML
          parser</a> or by <code>Element.setAttribute()</code>, the local name will be
          lowercase.
  </p>

          </dd>

          <dt>If the attribute is in the <a>XML namespace</a></dt>

          <dd>The attribute's serialized name is the string "<code>xml:</code>" followed
          by the attribute's local name.</dd>

          <dt>If the attribute is in the <a>XMLNS namespace</a> and the attribute's local name
          is <code>xmlns</code></dt>

          <dd>The attribute's serialized name is the string "<code>xmlns</code>".</dd>

          <dt>If the attribute is in the <a>XMLNS namespace</a> and the attribute's local name
          is not <code>xmlns</code></dt>

          <dd>The attribute's serialized name is the string "<code>xmlns:</code>"
          followed by the attribute's local name.</dd>

          <dt>If the attribute is in the <a>XLink namespace</a></dt>

          <dd>The attribute's serialized name is the string "<code>xlink:</code>"
          followed by the attribute's local name.</dd>

          <dt>If the attribute is in some other namespace</dt>

          <dd>The attribute's serialized name is the attribute's qualified name.</dd>

        </dl>

        While the exact order of attributes is UA-defined, and may depend on factors such as the
        order that the attributes were given in the original markup, the sort order must be stable,
        such that consecutive invocations of this algorithm serialize an element's attributes in the
        same order.

        Append a U+003E GREATER-THAN SIGN character (&gt;).

        If <var>current node</var> is an <code>area</code>, <code>base</code>,
        <code>basefont</code>, <code>bgsound</code>, <code>br</code>, <code>col</code>,
        <code>embed</code>, <code>frame</code>, <code>hr</code>, <code>img</code>,
        <code>input</code>, <code>keygen</code>, <code>link</code>, <code>menuitem</code>,
        <code>meta</code>, <code>param</code>, <code>source</code>, <code>track</code> or
        <code>wbr</code> element, then continue on to the next child node at this point.

        If <var>current node</var> is a <code>pre</code>, <code>textarea</code>, or
        <code>listing</code> element, and the first child node of the element, if any, is a
        <code>Text</code> node whose character data has as its first character a U+000A LINE FEED
        (LF) character, then append a U+000A LINE FEED (LF) character.

        Append the value of running the <a>HTML fragment serialization algorithm</a> on the
        <var>current node</var> element (thus recursing into this algorithm for that
        element), followed by a U+003C LESS-THAN SIGN character (&lt;), a U+002F SOLIDUS character
        (/), <var>tagname</var> again, and finally a U+003E GREATER-THAN SIGN character
        (&gt;).

        </dd>

        <dt>If <var>current node</var> is a <code>Text</code> node</dt>

        <dd>

        If the parent of <var>current node</var> is a <code>style</code>,
        <code>script</code>, <code>xmp</code>, <code>iframe</code>, <code>noembed</code>,
        <code>noframes</code>, or <code>plaintext</code> element, or if the parent of <var>current node</var> is a <code>noscript</code> element and <a>scripting is enabled</a> for the node, then append the value of
        <var>current node</var>'s <code>data</code> IDL attribute literally.

        Otherwise, append the value of <var>current node</var>'s <code>data</code> IDL attribute, <a>escaped as described
        below</a>.

        </dd>

        <dt>If <var>current node</var> is a <code>Comment</code></dt>

        <dd>

        Append the literal string "<code>&lt;!--</code>" (U+003C LESS-THAN SIGN, U+0021
        EXCLAMATION MARK, U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS), followed by the value of <var>current node</var>'s <code>data</code> IDL attribute, followed by the
        literal string "<code>--&gt;</code>" (U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS,
        U+003E GREATER-THAN SIGN).

        </dd>

        <dt>If <var>current node</var> is a <code>ProcessingInstruction</code></dt>

        <dd>

        Append the literal string "<code>&lt;?</code>" (U+003C LESS-THAN SIGN, U+003F
        QUESTION MARK), followed by the value of <var>current node</var>'s <code>target</code> IDL attribute, followed by a single U+0020 SPACE character, followed
        by the value of <var>current node</var>'s <code>data</code> IDL
        attribute, followed by a single U+003E GREATER-THAN SIGN character (>).

        </dd>

        <dt>If <var>current node</var> is a <code>DocumentType</code></dt>

        <dd>

        Append the literal string "<code>&lt;!DOCTYPE</code>" (U+003C LESS-THAN SIGN, U+0021
        EXCLAMATION MARK, U+0044 LATIN CAPITAL LETTER D, U+004F LATIN CAPITAL LETTER O, U+0043 LATIN
        CAPITAL LETTER C, U+0054 LATIN CAPITAL LETTER T, U+0059 LATIN CAPITAL LETTER Y, U+0050 LATIN
        CAPITAL LETTER P, U+0045 LATIN CAPITAL LETTER E), followed by a space (U+0020 SPACE),
        followed by the value of <var>current node</var>'s <code>name</code> IDL
        attribute, followed by the literal string "<code>&gt;</code>" (U+003E GREATER-THAN SIGN).

        </dd>

      </dl>

      </li>

    </ol>

    </li>

    <li>The result of the algorithm is the string <var>s</var>.</li>

  </ol>

  <p class="warning">It is possible that the output of this algorithm, if parsed with an <a>HTML
  parser</a>, will not return the original tree structure.</p>

  <div class="example">
    For instance, if a <code>textarea</code> element to which a <code>Comment</code> node
    has been appended is serialized and the output is then reparsed, the comment will end up being
    displayed in the text field. Similarly, if, as a result of DOM manipulation, an element contains
    a comment that contains the literal string "<code>--&gt;</code>", then when the result
    of serializing the element is parsed, the comment will be truncated at that point and the rest of
    the comment will be interpreted as markup. More examples would be making a <code>script</code>
    element contain a <code>Text</code> node with the text string "<code>&lt;/script></code>", or
    having a <code>p</code> element that contains a <code>ul</code> element (as the <code>ul</code>
    element's <a>start tag</a> would imply the end tag for the
    <code>p</code>).

    This can enable cross-site scripting attacks. An example of this would be a page that lets the
    user enter some font family names that are then inserted into a CSS <code>style</code> block via
    the DOM and which then uses the <code>innerHTML</code> IDL attribute to get
    the HTML serialization of that <code>style</code> element: if the user enters
    "<code>&lt;/style>&lt;script>attack&lt;/script></code>" as a font family name, <code>innerHTML</code> will return markup that, if parsed in a different context,
    would contain a <code>script</code> node, even though no <code>script</code> node existed in the
    original DOM.
  </div>

  <dfn>Escaping a string</dfn> (for the purposes of the algorithm above)
  consists of running the following steps:

  <ol>

    <li>Replace any occurrence of the "<code>&amp;</code>" character by the string "<code>&amp;amp;</code>".</li>

    <li>Replace any occurrences of the U+00A0 NO-BREAK SPACE character by the string "<code>&amp;nbsp;</code>".</li>

    <li>If the algorithm was invoked in the <i>attribute mode</i>, replace any occurrences of the
    "<code>&quot;</code>" character by the string "<code>&amp;quot;</code>".</li>

    <li>If the algorithm was <em>not</em> invoked in the <i>attribute mode</i>, replace any
    occurrences of the "<code>&lt;</code>" character by the string "<code>&amp;lt;</code>", and any occurrences of the "<code>&gt;</code>" character by
    the string "<code>&amp;gt;</code>".</li>

  </ol>

<h3 id="parsing-html-fragments"><dfn>Parsing HTML fragments</dfn></h3>

  The following steps form the <dfn>HTML fragment parsing algorithm</dfn>. The algorithm
  takes as input an <code>Element</code> node, referred to as the <dfn><var>context</var></dfn> element, which gives the context for
  the parser, as well as <var>input</var>, a string to parse, and returns a list of zero or
  more nodes.

  <p class="note">
  Parts marked <dfn>fragment case</dfn> in algorithms in the parser section are
  parts that only occur if the parser was created for the purposes of this algorithm. The algorithms have been annotated
  with such markings for informational purposes only; such markings have no normative weight. If it
  is possible for a condition described as a <a>fragment case</a> to occur even when the
  parser wasn't created for the purposes of handling this algorithm, then that is an error in the
  specification.
  </p>

  <ol>

    <li>

    Create a new <code>Document</code> node, and mark it as being an <a>HTML document</a>.

    </li>

    <li>

    If the
    <a>node document</a> of the <var>context</var> element is in
    <a>quirks mode</a>, then let the <code>Document</code> be in <a>quirks mode</a>.
    Otherwise, the
    <a>node document</a> of the <var>context</var> element is in
    <a>limited-quirks mode</a>, then let the <code>Document</code> be in <a>limited-quirks
    mode</a>. Otherwise, leave the <code>Document</code> in <a>no-quirks mode</a>.

    </li>

    <li>

    Create a new <a>HTML parser</a>, and associate it with the just created
    <code>Document</code> node.

    </li>

    <li>

    Set the state of the <a>HTML parser</a>'s <a>tokenization</a> stage as
    follows:

    <dl class="switch">

      <dt>If it is a <code>title</code> or <code>textarea</code> element</dt>

      <dd>Switch the tokenizer to the <a>RCDATA state</a>.</dd>

      <dt>If it is a <code>style</code>, <code>xmp</code>, <code>iframe</code>,
      <code>noembed</code>, or <code>noframes</code> element</dt>

      <dd>Switch the tokenizer to the <a>RAWTEXT state</a>.</dd>

      <dt>If it is a <code>script</code> element</dt>

      <dd>Switch the tokenizer to the <a>script data state</a>.</dd>

      <dt>If it is a <code>noscript</code> element</dt>

      <dd>If the <a>scripting flag</a> is enabled, switch the tokenizer to the <a>RAWTEXT
      state</a>. Otherwise, leave the tokenizer in the <a>data state</a>.</dd>

      <dt>If it is a <code>plaintext</code> element</dt>

      <dd>Switch the tokenizer to the <a>PLAINTEXT state</a>.</dd>

      <dt>Otherwise</dt>

      <dd>Leave the tokenizer in the <a>data state</a>.</dd>

    </dl>

    <p class="note">
  For performance reasons, an implementation that does not report errors and
    that uses the actual state machine described in this specification directly could use the
    PLAINTEXT state instead of the RAWTEXT and script data states where those are mentioned in the
    list above. Except for rules regarding parse errors, they are equivalent, since there is no
    <a>appropriate end tag token</a> in the fragment case, yet they involve far fewer state
    transitions.
  </p>

    </li>

    <li>

    Let <var>root</var> be a new <code>html</code> element with no attributes.

    </li>

    <li>

    Append the element <var>root</var> to the <code>Document</code> node created
    above.

    </li>

    <li>

    Set up the parser's <a>stack of open elements</a> so that it contains just the single
    element <var>root</var>.

    </li>

    <li>

    If the <var>context</var> element is a
    <code>template</code> element, push "<a>in
    template</a>" onto the <a>stack of template insertion modes</a> so that it is the new
    <a>current template insertion mode</a>.

    </li>

    <li>

    Create a start tag token whose name is the local name of <var>context</var> and whose attributes are the attributes of
    <var>context</var>.

    Let this start tag token be the start tag token of the <var>context</var> node, e.g. for the purposes of determining
    if it is an <a>HTML integration point</a>.

    </li>

    <li>

    <a>Reset the parser's insertion mode
    appropriately</a>.

    <p class="note">
  The parser will reference the <var>context</var> element as part of that algorithm.
  </p>

    </li>

    <li>

    Set the parser's <a><code>form</code> element pointer</a> to the nearest node to the
    <var>context</var> element that is a <code>form</code>
    element (going straight up the ancestor chain, and including the element itself, if it is a
    <code>form</code> element), if any. (If there is no such <code>form</code> element, the
    <a><code>form</code> element pointer</a> keeps its initial value, null.)

    </li>

    <li>

    Place the <var>input</var> into the <a>input stream</a> for the <a>HTML
    parser</a> just created. The encoding <a>confidence</a> is <i>irrelevant</i>.

    </li>

    <li>

    Start the parser and let it run until it has consumed all the characters just inserted into
    the input stream.

    </li>

    <li>

    Return the child
    nodes of <var>root</var>, in <a>tree order</a>.

    </li>

  </ol>

  </div>

<h3 id="named-character-references"><dfn>Named character references</dfn></h3>

  This table lists the character reference names that are supported by HTML, and the code points
  to which they refer. It is referenced by the previous sections.

  <div>
    <table>
    <thead>
      <tr> <th> Name </th> <th> Character(s) </th> <th> Glyph </th> </tr>
    </thead>

    </table>

  </div>

  This data is also available <a>as a JSON file</a>.

  <i>The glyphs displayed above are non-normative. Refer to the Unicode specifications for formal
  definitions of the characters listed above.</i>

<!-- Big Text: XHTML Syntax -->

<h2 id="the-xhtml-syntax"><dfn>The XHTML syntax</dfn></h2>

  <p class="note">
  This section only describes the rules for XML resources. Rules for
  <code>text/html</code> resources are discussed in the section above entitled "<a>The HTML
  syntax</a>".
  </p>

  <div class="impl">

<h3 id="writing-xhtml-documents"><dfn>Writing XHTML documents</dfn></h3>

  </div>

  The syntax for using HTML with XML, whether in XHTML documents or embedded in other XML
  documents, is defined in the XML and Namespaces in XML specifications. [[!XML]] [[!XML-NAMES]]

  This specification does not define any syntax-level requirements beyond those defined for XML
  proper.

  XML documents may contain a <code>DOCTYPE</code> if desired, but this is not required
  to conform to this specification. This specification does not define a public or system
  identifier, nor provide a formal DTD.

  <p class="note">
  According to the XML specification, XML processors are not guaranteed to process
  the external DTD subset referenced in the DOCTYPE. This means, for example, that using <a>entity references</a> for characters in XHTML documents
  is unsafe if they are defined in an external file (except for <code>&amp;lt;</code>,
  <code>&amp;gt;</code>, <code>&amp;amp;</code>, <code>&amp;quot;</code>
  and <code>&amp;apos;</code>).
  </p>

  <div class="impl">

<h3 id="parsing-xhtml-documents"><dfn>Parsing XHTML documents</dfn></h3>

  This section describes the relationship between XML and the DOM, with a particular emphasis on
  how this interacts with HTML.

  An <dfn>XML parser</dfn>, for the purposes of this specification, is a construct that follows
  the rules given in the XML specification to map a string of bytes or characters into a
  <code>Document</code> object.

  <p class="note">
  At the time of writing, no such rules actually exist.
  </p>

  An <a>XML parser</a> is either associated with a <code>Document</code> object when it is
  created, or creates one implicitly.

  This <code>Document</code> must then be populated with DOM nodes that represent the tree
  structure of the input passed to the parser, as defined by the XML specification, the Namespaces
  in XML specification, and the DOM specification. DOM mutation events must not fire for the
  operations that the <a>XML parser</a> performs on the <code>Document</code>'s tree, but the
  user agent must act as if elements and attributes were individually appended and set respectively
  so as to trigger rules in this specification regarding what happens when an element is inserted
  into a document or has its attributes set, and the DOM specification's requirements regarding
  mutation observers mean that mutation observers <em>are</em> fired (unlike mutation events). [[!XML]] [[!XML-NAMES]] [[!DOM]] [[!UIEVENTS]]

  Between the time an element's start tag is parsed and the time either the element's end tag is
  parsed or the parser detects a well-formedness error, the user agent must act as if the element
  was in a <a>stack of open elements</a>.

  <p class="note">
  This is used, e.g. by the <code>object</code> element to avoid instantiating plugins
  before the <code>param</code> element children have been parsed.
  </p>

  This specification provides the following additional information that user agents should use
  when retrieving an external entity: the public identifiers given in the following list all
  correspond to <a>">the URL given by this link</a>. (This
  URL is a DTD containing the <a>entity
  declarations</a> for the names listed in the <a>named character references</a> section.) [[!XML]]

  <ul class="brief">
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Transitional//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Strict//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Frameset//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;Basic&nbsp;1.0//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1&nbsp;plus&nbsp;MathML&nbsp;2.0//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1&nbsp;plus&nbsp;MathML&nbsp;2.0&nbsp;plus&nbsp;SVG&nbsp;1.1//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;MathML&nbsp;2.0//EN</code></li>
    <li><code>-//WAPFORUM//DTD&nbsp;XHTML&nbsp;Mobile&nbsp;1.0//EN</code></li>
  </ul>

  Furthermore, user agents should attempt to retrieve the above external entity's content when
  one of the above public identifiers is used, and should not attempt to retrieve any other external
  entity's content.

  <p class="note">
  This is not strictly a <a>violation</a> of the XML
  specification, but it does contradict the spirit of the XML specification's requirements. This is
  motivated by a desire for user agents to all handle entities in an interoperable fashion without
  requiring any network access for handling external subsets. [[!XML]]
  </p>

  XML parsers can be invoked with <dfn>XML scripting support enabled</dfn> or <dfn>disabled</dfn>. Except where otherwise specified, XML parsers are
  invoked with <a>XML scripting support enabled</a>.

  When an <a>XML parser</a> with <a>XML scripting support enabled</a>
  creates a <code>script</code> element, it
  must be marked as being <a>"parser-inserted"</a> and its <a>"non-blocking"</a> flag
  must be unset. If the parser was originally created for the <a>XML fragment parsing
  algorithm</a>, then the element must be marked as <a>"already started"</a> also. When the
  element's end tag is subsequently parsed, the user agent must <a>perform a microtask checkpoint</a>, and
  then <a>prepare</a> the <code>script</code> element. If this
  causes there to be a <a>pending parsing-blocking script</a>, then the user agent must run
  the following steps:

  <ol>

    <li>Block this instance of the <a>XML parser</a>, such that the <a>event loop</a>
    will not run <a>tasks</a> that invoke it.</li>

    <li><a>Spin the event loop</a> until the parser's <code>Document</code> <a>has no
    style sheet that is blocking scripts</a> and the <a>pending parsing-blocking
    script</a>'s <a>"ready to be parser-executed"</a> flag is set.</li>

    <li>Unblock this instance of the <a>XML parser</a>, such that <a>tasks</a> that invoke it can again be run.</li>

    <li><a>Execute</a> the <a>pending parsing-blocking
    script</a>.</li>

    <li>There is no longer a <a>pending parsing-blocking script</a>.</li>

  </ol>

  <p class="note">
  Since the <code>document.write()</code> API is not
  available for <a>XML documents</a>, much of the complexity in the <a>HTML parser</a>
  is not needed in the <a>XML parser</a>.
  </p>

  <p class="note">
  When the <a>XML parser</a> has <a>XML scripting support disabled</a>,
  none of this happens.
  </p>

  When an <a>XML parser</a> would append a node to a
  <code>template</code> element, it must instead append it to the <code>template</code> element's
  <a>template contents</a> (a <code>DocumentFragment</code> node).

  <p class="note">
  This is a <a>willful violation</a> of the XML specification; unfortunately,
  XML is not formally extensible in the manner that is needed for <code>template</code> processing.
  [[!XML]]
  </p>

  When an <a>XML parser</a> creates a <code>Node</code> object, its <a>node document</a>
  must be set to the <a>node document</a> of
  the node into which the newly created node is to be inserted.

  Certain algorithms in this specification <dfn>spoon-feed the
  parser</dfn> characters one string at a time. In such cases, the <a>XML parser</a> must act
  as it would have if faced with a single string consisting of the concatenation of all those
  characters.

  When an <a>XML parser</a> reaches the end of its input, it must <a>stop
  parsing</a>, following the same rules as the <a>HTML parser</a>. An <a>XML
  parser</a> can also be <a>aborted</a>, which must again be done in
  the same way as for an <a>HTML parser</a>.

  For the purposes of conformance checkers, if a resource is determined to be in <a>the XHTML
  syntax</a>, then it is an <a>XML document</a>.

<h3 id="serializing-xhtml-fragments"><dfn>Serializing XHTML fragments</dfn></h3>

  The <dfn>XML fragment serialization algorithm</dfn> for a <code>Document</code> or
  <code>Element</code> node either returns a fragment of XML that represents that node or throws an
  exception.

  For <code>Document</code>s, the algorithm must return a string in the form of a <a>document entity</a>, if none of the error cases
  below apply.

  For <code>Element</code>s, the algorithm must return a string in the form of an <a>internal general parsed entity</a>, if none of the
  error cases below apply.

  In both cases, the string returned must be XML namespace-well-formed and must be an isomorphic
  serialization of all of that node's <a>relevant child nodes</a>, in <a>tree order</a>.
  User agents may adjust prefixes and namespace declarations in the serialization (and indeed might
  be forced to do so in some cases to obtain namespace-well-formed XML). User agents may use a
  combination of regular text and character references to represent <code>Text</code> nodes in the
  DOM.

  A node's <dfn>relevant child nodes</dfn> are those that apply given the following rules:

  <dl>

    <dt>For <code>template</code> elements</dt>

    <dd>The <a>relevant child nodes</a> are the child nodes of the <code>template</code>
    element's <a>template contents</a>, if any.</dd>

    <dt>For all other nodes</dt>

    <dd>The <a>relevant child nodes</a> are the child nodes of node itself, if any.</dd>

  </dl>

  For <code>Element</code>s, if any of the elements in the serialization are in no namespace, the
  default namespace in scope for those elements must be explicitly declared as the empty string. (This doesn't apply in the <code>Document</code> case.) [[!XML]]
  [[!XML-NAMES]]

  For the purposes of this section, an internal general parsed entity is considered XML
  namespace-well-formed if a document consisting of an element with no namespace declarations whose
  contents are the internal general parsed entity would itself be XML namespace-well-formed.

  If any of the following error cases are found in the DOM subtree being serialized, then the
  algorithm must throw an <code>InvalidStateError</code> exception instead of returning a
  string:

  <ul>

    <li>A <code>Document</code> node with no child element nodes.</li>

    <li>A <code>DocumentType</code> node that has an external subset public identifier that contains
    characters that are not matched by the XML <code>PubidChar</code> production. [[!XML]]</li>

    <li>A <code>DocumentType</code> node that has an external subset system identifier that contains
    both a U+0022 QUOTATION MARK (") and a U+0027 APOSTROPHE (') or that contains characters that are
    not matched by the XML <code>Char</code> production. [[!XML]]</li>

    <li>A node with a  local name containing a U+003A COLON (:).</li>

    <li>A node with a  local name that does not match the XML <code>Name</code> production. [[!XML]]</li>

    <li>An <code>Attr</code> node with no namespace whose local name is the lowercase string "<code>xmlns</code>". [[!XML-NAMES]]</li>

    <li>An <code>Element</code> node with two or more attributes with the same local name and
    namespace.</li>

    <li>An <code>Attr</code> node, <code>Text</code> node, <code>Comment</code> node, or
    <code>ProcessingInstruction</code> node whose data contains characters that are not matched by
    the XML <code>Char</code> production. [[!XML]]</li>

    <li>A <code>Comment</code> node whose data contains two adjacent U+002D HYPHEN-MINUS characters
    (-) or ends with such a character.</li>

    <li>A <code>ProcessingInstruction</code> node whose target name is an <a>ASCII
    case-insensitive</a> match for the string "<code>xml</code>".</li>

    <li>A <code>ProcessingInstruction</code> node whose target name contains a U+003A COLON (:).</li>

    <li>A <code>ProcessingInstruction</code> node whose data contains the string "<code>?></code>".</li>

  </ul>

  <p class="note">
  These are the only ways to make a DOM unserialisable. The DOM enforces all the
  other XML constraints; for example, trying to append two elements to a <code>Document</code> node
  will throw a <code>HierarchyRequestError</code> exception.
  </p>

<h3 id="parsing-xhtml-fragments"><dfn>Parsing XHTML fragments</dfn></h3>

  The <dfn>XML fragment parsing algorithm</dfn> either returns a <code>Document</code> or throws
  a <code>SyntaxError</code> exception. Given a string <var>input</var> and a
  context element <var>context</var>, the algorithm is as
  follows:

  <ol>

    <li>

    Create a new <a>XML parser</a>.

    </li>

    <li>

    <a>Feed the
    parser</a> just created the string corresponding to the start tag of the <var>context</var> element, declaring
    all the namespace prefixes that are in scope on that element in the DOM, as well as declaring
    the default namespace (if any) that is in scope on that element in the DOM.

    A namespace prefix is in scope if the DOM <code>lookupNamespaceURI()</code> method
    on the element would return a non-null value for that prefix.

    The default namespace is the namespace for which the DOM <code>isDefaultNamespace()</code> method on the element would return true.

    <p class="note">
  No
    <code>DOCTYPE</code> is passed to the parser, and therefore no external subset is
    referenced, and therefore no entities will be recognized.
  </p>

    </li>

    <li>

    <a>Feed the parser</a> just created the string <var>input</var>.

    </li>

    <li>

    <a>Feed the parser</a> just created the string corresponding to the end tag of the <var>context</var> element.

    </li>

    <li>

    If there is an XML well-formedness or XML namespace well-formedness error, then throw a
    <code>SyntaxError</code> exception and abort these steps.

    </li>

    <li>

    If the root
    element of the resulting <code>Document</code> has any sibling nodes, then throw a
    <code>SyntaxError</code> exception and abort these steps.

    </li>

    <li>

    Return the
    child nodes of the root element of the resulting <code>Document</code>, in <a>tree
    order</a>.

    </li>

  </ol>

  </div>

<!-- Big Text: Rendering -->

  <div class="impl">

<h2 id="rendering"><dfn>Rendering</dfn></h2>

  <i>User agents are not required to present HTML documents in any particular way. However, this
  section provides a set of suggestions for rendering HTML documents that, if followed, are likely
  to lead to a user experience that closely resembles the experience intended by the documents'
  authors. So as to avoid confusion regarding the normativity of this section, RFC2119 terms have
  not been used. Instead, the term "expected" is used to indicate behavior that will lead to this
  experience. For the purposes of conformance for user agents designated as <a>supporting the suggested default rendering</a>, the term "expected" in this
  section has the same conformance implications as the RFC2119-defined term "must".</i>

<h3 id="rendering-introduction"><dfn>Introduction</dfn></h3>

  In general, user agents are expected to support CSS, and many of the suggestions in this
  section are expressed in CSS terms. User agents that use other presentation mechanisms can derive
  their expected behavior by translating from the CSS rules given in this section.

  In the absence of style-layer rules to the contrary (e.g. author style sheets), user agents are
  expected to render an element so that it conveys to the user the meaning that the element
  <a>represents</a>, as described by this specification.

  The suggestions in this section generally assume a visual output medium with a resolution of
  96dpi or greater, but HTML is intended to apply to multiple media (it is a
  <i>media-independent</i> language). User agent implementors are encouraged to adapt the
  suggestions in this section to their target media.

  <hr />

  An element is <dfn>being rendered</dfn> if it has any associated CSS layout boxes, SVG layout
  boxes, or some equivalent in other styling languages.

  <p class="note">
  Just being off-screen does not mean the element is not <a>being
  rendered</a>. The presence of the <code>hidden</code> attribute normally
  means the element is not <a>being rendered</a>, though this might be overridden by the style
  sheets.
  </p>

  <hr />

  User agents that do not honor author-level CSS style sheets are nonetheless expected to act as
  if they applied the CSS rules given in these sections in a manner consistent with this
  specification and the relevant CSS and Unicode specifications. [[!CSS-2015]] [[!UNICODE]] [[!BIDI]]

  <p class="note">
  This is especially important for issues relating to the 'display', 'unicode-bidi',
  and 'direction' properties.
  </p>

<h3 id="the-css-user-agent-style-sheet-and-presentational-hints"><dfn>The CSS user agent style sheet and presentational hints</dfn></h3>

  The CSS rules given in these subsections are, except where otherwise specified, expected to be
  used as part of the user-agent level style sheet defaults for all documents that contain
  <a>HTML elements</a>.

  Some rules are intended for the author-level zero-specificity presentational hints part of the
  CSS cascade; these are explicitly called out as <dfn>presentational hints</dfn>.

  Some of the rules regarding left and right margins are given here as appropriate for elements
  whose 'direction' property is 'ltr', and are expected to be flipped around on elements whose
  'direction' property is 'rtl'. These are marked "<dfn>LTR-specific</dfn>".

  <p class="note">
  These markings only affect the handling of attribute <em>values</em>, not
  attribute names or element names.
  </p>

  <hr />

  When the text below says that an attribute <var>attribute</var> on an element
  <var>element</var> <dfn>maps to the pixel length property</dfn> (or properties)
  <var>properties</var>, it means that if <var>element</var> has an attribute <var>attribute</var>
  set, and parsing that attribute's value using the <a>rules for parsing non-negative
  integers</a> doesn't generate an error, then the user agent is expected to use the parsed value
  as a pixel length for a <a>presentational hint</a> for
  <var>properties</var>.

  When the text below says that an attribute <var>attribute</var> on an element
  <var>element</var> <dfn>maps to the dimension property</dfn> (or properties)
  <var>properties</var>, it means that if <var>element</var> has an attribute <var>attribute</var>
  set, and parsing that attribute's value using the <a>rules for parsing dimension values</a>
  doesn't generate an error, then the user agent is expected to use the parsed dimension as the
  value for a <a>presentational hint</a> for
  <var>properties</var>, with the value given as a pixel length if the dimension was a length, and
  with the value given as a percentage if the dimension was a percentage.

  When the text below says that an attribute <var>attribute</var> on an element
  <var>element</var> <dfn>maps to the dimension property (ignoring zero)</dfn> (or properties)
  <var>properties</var>, it means that if <var>element</var> has an attribute <var>attribute</var>
  set, and parsing that attribute's value using the <a>rules for parsing non-zero dimension
  values</a> doesn't generate an error, then the user agent is expected to use the parsed
  dimension as the value for a <a>presentational hint</a> for
  <var>properties</var>, with the value given as a pixel length if the dimension was a length, and
  with the value given as a percentage if the dimension was a percentage.

  When a user agent is to <dfn>align descendants</dfn> of a node, the user agent is expected to
  align only those descendants that have both their 'margin-left' and 'margin-right' properties
  computing to a value other than 'auto', that are over-constrained and that have one of those two
  margins with a used value forced to a greater value, and that do not themselves have an applicable
  <code>align</code> attribute. When multiple elements are to <a>align</a> a particular descendant, the most deeply nested such
  element is expected to override the others. Aligned elements are expected to be aligned by having
  the used values of their left and right margins be set accordingly.

<h3 id="non-replaced-elements"><dfn>Non-replaced elements</dfn></h3>

<h4 id="hidden-elements"><dfn>Hidden elements</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    [hidden], area, base, basefont, datalist, head, link, menu[type=context i], meta,
    noembed, noframes, param, rp, script, source, style, template, track, title {
      display: none;
    }

    embed[hidden] { display: inline; height: 0; width: 0; }

    input[type=hidden i] { display none ! important; }

    @media (scripting) {
      noscript { display: none !important; }
    }
  </pre>

<h4 id="the-page"><dfn>The page</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    html, body { display: block; }
  </pre>

  For each property in the table below, given a <code>body</code> element, the first attribute
  that exists <a>maps to the pixel length property</a> on the <code>body</code> element. If
  none of the attributes for a property are found, or if the value of the attribute that was found
  cannot be parsed successfully, then, if the <code>body</code> element's <a>node document</a>'s
  <a>browsing context</a> does not have its <a>seamless browsing context flag</a> set, a
  default value of 8px is expected to be used for that property instead.

  <table>
    <thead>
    <tr>
      <th>Property
      <th>Source
    <tbody>
    <tr>
      <td rowspan="3">'margin-top'
      <td><code>body</code> element's <code>marginheight</code> attribute
    <tr>
      <td>The <code>body</code> element's <a>container frame element</a>'s <code>marginheight</code> attribute
    <tr>
      <td><code>body</code> element's <code>topmargin</code> attribute
    <tbody>
    <tr>
      <td rowspan="3">'margin-right'
      <td><code>body</code> element's <code>marginwidth</code> attribute
    <tr>
      <td>The <code>body</code> element's <a>container frame element</a>'s <code>marginwidth</code> attribute
    <tr>
      <td><code>body</code> element's <code>rightmargin</code> attribute
    <tbody>
    <tr>
      <td rowspan="3">'margin-bottom'
      <td><code>body</code> element's <code>marginheight</code> attribute
    <tr>
      <td>The <code>body</code> element's <a>container frame element</a>'s <code>marginheight</code> attribute
    <tr>
      <td><code>body</code> element's <code>bottommargin</code> attribute
    <tbody>
    <tr>
      <td rowspan="3">'margin-left'
      <td><code>body</code> element's <code>marginwidth</code> attribute
    <tr>
      <td>The <code>body</code> element's <a>container frame element</a>'s <code>marginwidth</code> attribute
    <tr>
      <td><code>body</code> element's <code>leftmargin</code> attribute
  </table>

  If the <code>body</code> element's <a>node document</a>'s <a>browsing context</a> is a
  <a>nested browsing context</a>, and the <a>browsing context container</a> of that
  <a>nested browsing context</a> is a <code>frame</code> or <code>iframe</code> element, then
  the <dfn>container frame element</dfn> of the <code>body</code> element is that <code>frame</code>
  or <code>iframe</code> element. Otherwise, there is no <a>container frame element</a>.

  <p class="warning">The above requirements imply that a page can change the margins of another page
  (including one from another <a>origin</a>) using, for example, an <code>iframe</code>. This
  is potentially a security risk, as it might in some cases allow an attack to contrive a situation
  in which a page is rendered not as the author intended, possibly for the purposes of phishing or
  otherwise misleading the user.</p>

  <hr />

  If a <code>Document</code> is in a <a>nested browsing context</a>, it is expected to be
  positioned and sized to fit inside the content box of its <a>browsing context container</a>.
  If a <a>browsing context</a> is not <a>being rendered</a>, it is expected to have a
  viewport with zero width and zero height.

  If the <code>Document</code> is in a <a>nested browsing context</a>, and the
  <a>browsing context container</a> of that <a>nested browsing context</a> is a
  <code>frame</code> or <code>iframe</code> element, and that element has a <code>scrolling</code> attribute, and that attribute's value is an <a>ASCII
  case-insensitive</a> match for the string "<code>off</code>", "<code>noscroll</code>", or "<code>no</code>", then the user agent is expected to
  prevent any scroll bars from being shown for the viewport of the <a>nested browsing
  context</a>, regardless of the 'overflow' property that applies to that viewport.

  <hr />

  When a <code>body</code> element has a <code>background</code>
  attribute set to a non-empty value, the new value is expected to be <a>resolved</a> relative to the element, and if this is successful, the user agent is
  expected to treat the attribute as a <a>presentational hint</a>
  setting the element's 'background-image' property to the resulting <a>absolute URL</a>.

  When a <code>body</code> element has a <code>bgcolor</code> attribute
  set, the new value is expected to be parsed using the <a>rules for parsing a legacy color
  value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the element's
  'background-color' property to the resulting color.

  When a <code>body</code> element has a <code>text</code> attribute, its
  value is expected to be parsed using the <a>rules for parsing a legacy color value</a>, and
  if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'color' property to
  the resulting color.

  When a <code>body</code> element has a <code>link</code> attribute, its
  value is expected to be parsed using the <a>rules for parsing a legacy color value</a>, and
  if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the 'color' property of any
  element in the <code>Document</code> matching the ':link' pseudo-class to the resulting color.

  When a <code>body</code> element has a <code>vlink</code> attribute,
  its value is expected to be parsed using the <a>rules for parsing a legacy color value</a>,
  and if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the 'color' property of any
  element in the <code>Document</code> matching the ':visited' pseudo-class to the resulting
  color.

  When a <code>body</code> element has an <code>alink</code> attribute,
  its value is expected to be parsed using the <a>rules for parsing a legacy color value</a>,
  and if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the 'color' property of any
  element in the <code>Document</code> matching the ':active' pseudo-class and either the ':link'
  pseudo-class or the ':visited' pseudo-class to the resulting color.

<h4 id="flow-content"><dfn>Flow content</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    address, blockquote, center, div, figure, figcaption, footer, form, header, hr,
    legend, listing, main, p, plaintext, pre, summary, xmp {
      display: block;
    }

    blockquote, figure, listing, p, plaintext, pre, xmp {
      margin-top: 1em; margin-bottom: 1em;
    }

    blockquote, figure { margin-left: 40px; margin-right: 40px; }

    address { font-style: italic; }
    listing, plaintext, pre, xmp {
      font-family: monospace; white-space: pre;
    }

    dialog:not([open]) { display: none; }
    dialog {
      position: absolute;
      left: 0; right: 0;
      width: fit-content;
      height: fit-content;
      margin: auto;
      border: solid;
      padding: 1em;
      background: white;
      color: black;
    }
    dialog::backdrop {
      position: fixed;
      top: 0; right: 0; bottom: 0; left: 0;
      background: rgba(0,0,0,0.1);
    }

    /* for small devices, modal dialogs go full-screen */
    @media screen and (max-width: 540px) {
      dialog:modal {
        top: 0;
        width: auto;
        margin: 1em;
      }
    }
  </pre>

  The following rules are also expected to apply, as <a>presentational hints</a>:

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    pre[wrap] { white-space: pre-wrap; }
  </pre>

  In <a>quirks mode</a>, the following rules are also expected to apply:

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    form { margin-bottom: 1em; }
  </pre>

  <hr />

  The <code>center</code> element, and the <code>div</code> element when it has an <code>align</code> attribute whose value is an <a>ASCII
  case-insensitive</a> match for either the string "<code>center</code>" or the string
  "<code>middle</code>", are expected to center text within themselves, as if they had
  their 'text-align' property set to 'center' in a <a>presentational hint</a>, and to <a>align descendants</a> to the center.

  The <code>div</code> element, when it has an <code>align</code>
  attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>left</code>", is expected to left-align text within itself, as if it had its
  'text-align' property set to 'left' in a <a>presentational
  hint</a>, and to <a>align descendants</a> to the left.

  The <code>div</code> element, when it has an <code>align</code>
  attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>right</code>", is expected to right-align text within itself, as if it had its
  'text-align' property set to 'right' in a <a>presentational
  hint</a>, and to <a>align descendants</a> to the right.

  The <code>div</code> element, when it has an <code>align</code>
  attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>justify</code>", is expected to full-justify text within itself, as if it had its
  'text-align' property set to 'justify' in a <a>presentational
  hint</a>, and to <a>align descendants</a> to the left.

<h4 id="phrasing-content"><dfn>Phrasing content</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  cite, dfn, em, i, var { font-style: italic; }
  b, strong { font-weight: bolder; }
  code, kbd, samp, tt { font-family: monospace; }
  big { font-size: larger; }
  small { font-size: smaller; }

  sub { vertical-align: sub; }
  sup { vertical-align: super; }
  sub, sup { line-height: normal; font-size: smaller; }

  ruby { display: ruby; }
  rb   { display: ruby-base; white-space: nowrap; }
  rt   {
    display: ruby-text;
    white-space: nowrap;
    font-size: 50%;
    font-variant-east-asian: ruby;
    text-emphasis: none;
  }
  rbc  { display: ruby-base-container; }
  rtc  { display: ruby-text-container; }
  ruby, rb, rt, rbc, rtc { unicode-bidi: isolate; }

  :link { color: #0000EE; }
  :visited { color: #551A8B; }
  :link:active, :visited:active { color: #FF0000; }
  :link, :visited { text-decoration: underline; cursor: pointer; }
  a:link[rel~=help], a:visited[rel~=help],
  area:link[rel~=help], area:visited[rel~=help] { cursor: help; }

  :focus { outline: auto; }

  mark { background: yellow; color: black; } /* this color is just a suggestion and can be changed based on implementation feedback */

  abbr[title], acronym[title] { text-decoration: dotted underline; }
  ins, u { text-decoration: underline; }
  del, s, strike { text-decoration: line-through; }
  blink { text-decoration: blink; }

  q::before { content: open-quote; }
  q::after { content: close-quote; }

  <a>br { display-outside: newline; } /* <a>this also has bidi implications</a> */
  nobr { white-space: nowrap; }
  wbr { display-outside: break-opportunity; } /* <a>this also has bidi implications</a> */
  nobr wbr { white-space: normal; }</a>
  </pre>

  The following rules are also expected to apply, as
  <a>presentational hints</a>:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  br[clear=left i] { clear: left; }
  br[clear=right i] { clear: right; }
  br[clear=all i], br[clear=both i] { clear: both; }
  </pre>

  User agents that do not support correct ruby rendering are expected to render parentheses
  around the text of <code>rt</code> elements in the absence of <code>rp</code> elements.
  [[!CSS3-RUBY]]

  <hr />

  User agents are expected to support the 'clear' property on inline elements (in order to render
  <code>br</code> elements with <code>clear</code> attributes) in the manner
  described in the non-normative note to this effect in CSS2.1.

  The initial value for the 'color' property is expected to be black. The initial value for the
  'background-color' property is expected to be 'transparent'. The canvas' background is expected to
  be white.

  <hr />

  When a <code>font</code> element has a <code>color</code>
  attribute, its value is expected to be parsed using the <a>rules for parsing a legacy color
  value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the
  element's 'color' property to the resulting color.

  The <code>font</code> element is expected to
  override the color of any text decoration that spans the text of the element to the used value of
  the element's 'color' property.

  When a <code>font</code> element has a <code>face</code>
  attribute, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'font-family' property to the attribute's
  value.

  When a <code>font</code> element has a <code>size</code>
  attribute, the user agent is expected to use the following steps, known as the <dfn>rules for
  parsing a legacy font size</dfn>, to treat the attribute as a <a>presentational hint</a> setting the element's 'font-size' property:

  <ol>

    <li>Let <var>input</var> be the attribute's value.</li>

    <li>Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the
    start of the string.</li>

    <li><a>Skip whitespace</a>.</li>

    <li>If <var>position</var> is past the end of <var>input</var>, there is no <a>presentational hint</a>. Abort these steps.</li>

    <li>If the character at <var>position</var> is a U+002B PLUS SIGN character (+), then let
    <var>mode</var> be <i>relative-plus</i>, and advance <var>position</var> to the next character.
    Otherwise, if the character at <var>position</var> is a U+002D HYPHEN-MINUS character (-), then
    let <var>mode</var> be <i>relative-minus</i>, and advance <var>position</var> to the next
    character. Otherwise, let <var>mode</var> be <i>absolute</i>.</li>

    <li><a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and let
    the resulting sequence be <var>digits</var>.</li>

    <li>If <var>digits</var> is the empty string, there is no <a>presentational hint</a>. Abort these steps.</li>

    <li>Interpret <var>digits</var> as a base-ten integer. Let <var>value</var> be the resulting
    number.</li>

    <li>

    If <var>mode</var> is <i>relative-plus</i>, then increment <var>value</var> by 3. If
    <var>mode</var> is <i>relative-minus</i>, then let <var>value</var> be the result of subtracting
    <var>value</var> from 3.

    </li>

    <li>If <var>value</var> is greater than 7, let it be 7.</li>

    <li>If <var>value</var> is less than 1, let it be 1.</li>

    <li>

    Set 'font-size' to the keyword corresponding to the value of <var>value</var> according to
    the following table:

    <table>
      <thead>
      <tr>
        <th><var>value</var>
        <th>'font-size' keyword
        <th>Notes
      <tbody>
      <tr>
        <td>1
        <td>x-small
        <td>
      <tr>
        <td>2
        <td>small
        <td>
      <tr>
        <td>3
        <td>medium
        <td>
      <tr>
        <td>4
        <td>large
        <td>
      <tr>
        <td>5
        <td>x-large
        <td>
      <tr>
        <td>6
        <td>xx-large
        <td>
      <tr>
        <td>7
        <td>xxx-large
        <td><i>see below</i>
    </table>

    <small>The 'xxx-large' value is a non-CSS value used here to
    indicate a font size 50% larger than 'xx-large'.</small>

    </li>

  </ol>

<h4 id="bidirectional-text"><dfn>Bidirectional text</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    [dir]:dir(ltr), bdi:dir(ltr), input[type=tel i]:dir(ltr) { direction: ltr; }
    [dir]:dir(rtl), bdi:dir(rtl) { direction: rtl; }

    address, blockquote, center, div, figure, figcaption, footer, form, header, hr,
    legend, listing, main, p, plaintext, pre, summary, xmp, article, aside, h1, h2,
    h3, h4, h5, h6, nav, section, table, caption, colgroup, col, thead,
    tbody, tfoot, tr, td, th, dir, dd, dl, dt, menu, ol, ul, li, bdi, output,
    [dir=ltr i], [dir=rtl i], [dir=auto i] {
      unicode-bidi: isolate;
    }

    bdo, bdo[dir] { unicode-bidi: isolate-override; }

    input[dir=auto i]:matches([type=search i], [type=tel i], [type=url i],
    [type=email i]), textarea[dir=auto i], pre[dir=auto i] {
      unicode-bidi: plaintext;
    }
    /* see prose for input elements whose type attribute is in the Text state */

    /* the rules setting the 'content' property on br and wbr elements also has bidi implications */
  </pre>

  When an <code>input</code> element's <code>dir</code> attribute is in the
  <a>auto</a> state and its <code>type</code>
  attribute is in the <a>Text</a> state, then the user agent is
  expected to act as if it had a user-agent-level style sheet rule setting the 'unicode-bidi'
  property to 'plaintext'.

  Input fields (i.e. <code>textarea</code> elements, and <code>input</code> elements when their
  <code>type</code> attribute is in the <a>Text</a>, <a>Search</a>,
  <a>Telephone</a>, <a>URL</a>,
  or <a>E-mail</a> state) are expected to present an editing
  user interface with a directionality that matches the element's 'direction' property.

  When the document's character encoding is ISO-8859-8, the following rules are additionally
  expected to apply, following those above: [[!ENCODING]]

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    address, blockquote, center, div, figure, figcaption, footer, form, header, hr,
    legend, listing, main, p, plaintext, pre, summary, xmp, article, aside, h1, h2,
    h3, h4, h5, h6, nav, section, table, caption, colgroup, col, thead,
    tbody, tfoot, tr, td, th, dir, dd, dl, dt, menu, ol, ul, li, [dir=ltr i],
    [dir=rtl i], [dir=auto i], *|* {
      unicode-bidi: bidi-override;
    }
    input:not([type=submit i]):not([type=reset i]):not([type=button i]),
    textarea, keygen {
      unicode-bidi: normal;
    }
  </pre>

<h4 id="quotes"><dfn>Quotes</dfn></h4>

  This block is automatically generated from the Unicode Common Locale Data Repository. [[!CLDR]]

  User agents are expected to use either the block below (which will be regularly updated) or to
  automatically generate their own copy directly from the source material. The language codes are
  derived from the CLDR file names. The quotes are derived from the <code>delimiter</code>
  blocks, with fallback handled as specified in the CLDR documentation.

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);
  </pre>

<h4 id="sections-and-headings"><dfn>Sections and headings</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    article, aside, h1, h2, h3, h4, h5, h6, nav, section {
      display: block;
    }

    h1 { margin-top: 0.67em; margin-bottom: 0.67em; font-size: 2.00em; font-weight: bold; }
    h2 { margin-top: 0.83em; margin-bottom: 0.83em; font-size: 1.50em; font-weight: bold; }
    h3 { margin-top: 1.00em; margin-bottom: 1.00em; font-size: 1.17em; font-weight: bold; }
    h4 { margin-top: 1.33em; margin-bottom: 1.33em; font-size: 1.00em; font-weight: bold; }
    h5 { margin-top: 1.67em; margin-bottom: 1.67em; font-size: 0.83em; font-weight: bold; }
    h6 { margin-top: 2.33em; margin-bottom: 2.33em; font-size: 0.67em; font-weight: bold; }
  </pre>

  In the following CSS block, <var>x</var> is shorthand for the following selector:
  <code>:matches(article, aside, nav, section)</code>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    <var>x</var> h1 { margin-top: 0.83em; margin-bottom: 0.83em; font-size: 1.50em; }
    <var>x</var> <var>x</var> h1 { margin-top: 1.00em; margin-bottom: 1.00em; font-size: 1.17em; }
    <var>x</var> <var>x</var> <var>x</var> h1 { margin-top: 1.33em; margin-bottom: 1.33em; font-size: 1.00em; }
    <var>x</var> <var>x</var> <var>x</var> <var>x</var> h1 { margin-top: 1.67em; margin-bottom: 1.67em; font-size: 0.83em; }
    <var>x</var> <var>x</var> <var>x</var> <var>x</var> <var>x</var> h1 { margin-top: 2.33em; margin-bottom: 2.33em; font-size: 0.67em; }
  </pre>

  <p class="note">
  The shorthand is used to keep this block at least mildly readable.
  </p>

<h4 id="lists"><dfn>Lists</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    dir, dd, dl, dt, menu, ol, ul { display: block; }
    li { display: list-item; }

    dir, dl, menu, ol, ul { margin-top: 1em; margin-bottom: 1em; }

    :matches(dir, dl, menu, ol, ul) :matches(dir, dl, menu, ol, ul) {
      margin-top: 0; margin-bottom: 0;
    }

    dd { margin-left: 40px; } /* <a>LTR-specific</a>: use 'margin-right' for rtl elements */
    dir, menu, ol, ul { padding-left: 40px; } /* <a>LTR-specific</a>: use 'padding-right' for rtl elements */

    ol { list-style-type: decimal; }

    dir, menu, ul {
      list-style-type: disc;
    }
    :matches(dir, menu, ol, ul) :matches(dir, menu, ul) {
      list-style-type: circle;
    }
    :matches(dir, menu, ol, ul) :matches(dir, menu, ol, ul) :matches(dir, menu, ul) {
      list-style-type: square;
    }
  </pre>

  The following rules are also expected to apply, as <a>presentational
  hints</a>:

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    ol[type=1], li[type=1] { list-style-type: decimal; }
    ol[type=a], li[type=a] { list-style-type: lower-alpha; }
    ol[type=A], li[type=A] { list-style-type: upper-alpha; }
    ol[type=i], li[type=i] { list-style-type: lower-roman; }
    ol[type=I], li[type=I] { list-style-type: upper-roman; }
    ul[type=none i], li[type=none i] { list-style-type: none; }
    ul[type=disc i], li[type=disc i] { list-style-type: disc; }
    ul[type=circle i], li[type=circle i] { list-style-type: circle; }
    ul[type=square i], li[type=square i] { list-style-type: square; }
  </pre>

  In the above stylesheet, the attribute selectors for the
  <code>ol</code> and <code>li</code> elements are expected to be treated as
  <a>case-sensitive</a>.

  When rendering <code>li</code> elements, non-CSS user agents are expected to use the
  <a>ordinal value</a> of the <code>li</code> element to render the counter in the list item
  marker.

  <p class="critical">This specification does not yet define the
  CSS-specific rules for rendering <code>li</code> elements, because CSS doesn't yet provide
  sufficient hooks for this purpose.

<h4 id="tables"><dfn>Tables</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    table { display: table; }
    caption { display: table-caption; }
    colgroup, colgroup[hidden] { display: table-column-group; }
    col, col[hidden] { display: table-column; }
    thead, thead[hidden] { display: table-header-group; }
    tbody, tbody[hidden] { display: table-row-group; }
    tfoot, tfoot[hidden] { display: table-footer-group; }
    tr, tr[hidden] { display: table-row; }
    td, th, td[hidden], th[hidden] { display: table-cell; }

    colgroup[hidden], col[hidden], thead[hidden], tbody[hidden],
    tfoot[hidden], tr[hidden], td[hidden], th[hidden] {
      visibility: collapse;
    }

    table {
      box-sizing: border-box;
      border-spacing: 2px;
      border-collapse: separate;
      text-indent: initial;
    }
    td, th { padding: 1px; }
    th { font-weight: bold; }

    thead, tbody, tfoot, table > tr { vertical-align: middle; }
    tr, td, th { vertical-align: inherit; }

    table, td, th { border-color: gray; }
    thead, tbody, tfoot, tr { border-color: inherit; }
    table[rules=none i], table[rules=groups i], table[rules=rows i],
    table[rules=cols i], table[rules=all i], table[frame=void i],
    table[frame=above i], table[frame=below i], table[frame=hsides i],
    table[frame=lhs i], table[frame=rhs i], table[frame=vsides i],
    table[frame=box i], table[frame=border i],
    table[rules=none i] > tr > td, table[rules=none i] > tr > th,
    table[rules=groups i] > tr > td, table[rules=groups i] > tr > th,
    table[rules=rows i] > tr > td, table[rules=rows i] > tr > th,
    table[rules=cols i] > tr > td, table[rules=cols i] > tr > th,
    table[rules=all i] > tr > td, table[rules=all i] > tr > th,
    table[rules=none i] > thead > tr > td, table[rules=none i] > thead > tr > th,
    table[rules=groups i] > thead > tr > td, table[rules=groups i] > thead > tr > th,
    table[rules=rows i] > thead > tr > td, table[rules=rows i] > thead > tr > th,
    table[rules=cols i] > thead > tr > td, table[rules=cols i] > thead > tr > th,
    table[rules=all i] > thead > tr > td, table[rules=all i] > thead > tr > th,
    table[rules=none i] > tbody > tr > td, table[rules=none i] > tbody > tr > th,
    table[rules=groups i] > tbody > tr > td, table[rules=groups i] > tbody > tr > th,
    table[rules=rows i] > tbody > tr > td, table[rules=rows i] > tbody > tr > th,
    table[rules=cols i] > tbody > tr > td, table[rules=cols i] > tbody > tr > th,
    table[rules=all i] > tbody > tr > td, table[rules=all i] > tbody > tr > th,
    table[rules=none i] > tfoot > tr > td, table[rules=none i] > tfoot > tr > th,
    table[rules=groups i] > tfoot > tr > td, table[rules=groups i] > tfoot > tr > th,
    table[rules=rows i] > tfoot > tr > td, table[rules=rows i] > tfoot > tr > th,
    table[rules=cols i] > tfoot > tr > td, table[rules=cols i] > tfoot > tr > th,
    table[rules=all i] > tfoot > tr > td, table[rules=all i] > tfoot > tr > th {
      border-color: black;
    }
  </pre>

  The following rules are also expected to apply, as <a>presentational hints</a>:

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    table[align=left i] { float: left; }
    table[align=right i] { float: right; }
    table[align=center i] { margin-left: auto; margin-right: auto; }
    thead[align=absmiddle i], tbody[align=absmiddle i], tfoot[align=absmiddle i],
    tr[align=absmiddle i], td[align=absmiddle i], th[align=absmiddle i] {
      text-align: center;
    }

    caption[align=bottom i] { caption-side: bottom; }
    p[align=left i], h1[align=left i], h2[align=left i], h3[align=left i],
    h4[align=left i], h5[align=left i], h6[align=left i] {
      text-align: left;
    }
    p[align=right i], h1[align=right i], h2[align=right i], h3[align=right i],
    h4[align=right i], h5[align=right i], h6[align=right i] {
      text-align: right;
    }
    p[align=center i], h1[align=center i], h2[align=center i], h3[align=center i],
    h4[align=center i], h5[align=center i], h6[align=center i] {
      text-align: center;
    }
    p[align=justify i], h1[align=justify i], h2[align=justify i], h3[align=justify i],
    h4[align=justify i], h5[align=justify i], h6[align=justify i] {
      text-align: justify;
    }
    thead[valign=top i], tbody[valign=top i], tfoot[valign=top i],
    tr[valign=top i], td[valign=top i], th[valign=top i] {
      vertical-align: top;
    }
    thead[valign=middle i], tbody[valign=middle i], tfoot[valign=middle i],
    tr[valign=middle i], td[valign=middle i], th[valign=middle i] {
      vertical-align: middle;
    }
    thead[valign=bottom i], tbody[valign=bottom i], tfoot[valign=bottom i],
    tr[valign=bottom i], td[valign=bottom i], th[valign=bottom i] {
      vertical-align: bottom;
    }
    thead[valign=baseline i], tbody[valign=baseline i], tfoot[valign=baseline i],
    tr[valign=baseline i], td[valign=baseline i], th[valign=baseline i] {
      vertical-align: baseline;
    }

    td[nowrap], th[nowrap] { white-space: nowrap; }

    table[rules=none i], table[rules=groups i], table[rules=rows i],
    table[rules=cols i], table[rules=all i] {
    border-style: hidden;
      border-collapse: collapse;
    }
    table[border] { border-style: outset; } /* only if border is not equivalent to zero */
    table[frame=void i] { border-style: hidden; }
    table[frame=above i] { border-style: outset hidden hidden hidden; }
    table[frame=below i] { border-style: hidden hidden outset hidden; }
    table[frame=hsides i] { border-style: outset hidden outset hidden; }
    table[frame=lhs i] { border-style: hidden hidden hidden outset; }
    table[frame=rhs i] { border-style: hidden outset hidden hidden; }
    table[frame=vsides i] { border-style: hidden outset; }
    table[frame=box i], table[frame=border i] { border-style: outset; }

    table[border] > tr > td, table[border] > tr > th,
    table[border] > thead > tr > td, table[border] > thead > tr > th,
    table[border] > tbody > tr > td, table[border] > tbody > tr > th,
    table[border] > tfoot > tr > td, table[border] > tfoot > tr > th {
    /* only if border is not equivalent to zero */
      border-width: 1px;
      border-style: inset;
    }
    table[rules=none i] > tr > td, table[rules=none i] > tr > th,
    table[rules=none i] > thead > tr > td, table[rules=none i] > thead > tr > th,
    table[rules=none i] > tbody > tr > td, table[rules=none i] > tbody > tr > th,
    table[rules=none i] > tfoot > tr > td, table[rules=none i] > tfoot > tr > th,
    table[rules=groups i] > tr > td, table[rules=groups i] > tr > th,
    table[rules=groups i] > thead > tr > td, table[rules=groups i] > thead > tr > th,
    table[rules=groups i] > tbody > tr > td, table[rules=groups i] > tbody > tr > th,
    table[rules=groups i] > tfoot > tr > td, table[rules=groups i] > tfoot > tr > th,
    table[rules=rows i] > tr > td, table[rules=rows i] > tr > th,
    table[rules=rows i] > thead > tr > td, table[rules=rows i] > thead > tr > th,
    table[rules=rows i] > tbody > tr > td, table[rules=rows i] > tbody > tr > th,
    table[rules=rows i] > tfoot > tr > td, table[rules=rows i] > tfoot > tr > th {
      border-width: 1px;
      border-style: none;
    }
    table[rules=cols i] > tr > td, table[rules=cols i] > tr > th,
    table[rules=cols i] > thead > tr > td, table[rules=cols i] > thead > tr > th,
    table[rules=cols i] > tbody > tr > td, table[rules=cols i] > tbody > tr > th,
    table[rules=cols i] > tfoot > tr > td, table[rules=cols i] > tfoot > tr > th {
      border-width: 1px;
      border-style: none solid;
    }
    table[rules=all i] > tr > td, table[rules=all i] > tr > th,
    table[rules=all i] > thead > tr > td, table[rules=all i] > thead > tr > th,
    table[rules=all i] > tbody > tr > td, table[rules=all i] > tbody > tr > th,
    table[rules=all i] > tfoot > tr > td, table[rules=all i] > tfoot > tr > th {
      border-width: 1px;
      border-style: solid;
    }

    table[rules=groups i] > colgroup {
      border-left-width: 1px;
      border-left-style: solid;
      border-right-width: 1px;
      border-right-style: solid;
    }
    table[rules=groups i] > thead,
    table[rules=groups i] > tbody,
    table[rules=groups i] > tfoot {
      border-top-width: 1px;
      border-top-style: solid;
      border-bottom-width: 1px;
      border-bottom-style: solid;
    }

    table[rules=rows i] > tr, table[rules=rows i] > thead > tr,
    table[rules=rows i] > tbody > tr, table[rules=rows i] > tfoot > tr {
      border-top-width: 1px;
      border-top-style: solid;
      border-bottom-width: 1px;
      border-bottom-style: solid;
    }
  </pre>

  In <a>quirks mode</a>, the following rules are also expected to apply:

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    table {
      font-weight: initial;
      font-style: initial;
      font-variant: initial;
      font-size: initial;
      line-height: initial;
      white-space: initial;
      text-align: initial;
    }
  </pre>

  <hr />

  For the purposes of the CSS table model, the <code>col</code> element is expected to be treated
  as if it was present as many times as its <code>span</code> attribute <a>specifies</a>.

  For the purposes of the CSS table model, the <code>colgroup</code> element, if it contains no
  <code>col</code> element, is expected to be treated as if it had as many such children as its
  <code>span</code> attribute <a>specifies</a>.

  For the purposes of the CSS table model, the <code>colspan</code> and
  <code>rowspan</code> attributes on <code>td</code> and <code>th</code>
  elements are expected to <a>provide</a> the
  <i>special knowledge</i> regarding cells spanning rows and columns.

  In <a>HTML documents</a>, the following rules are also expected to apply:

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    :matches(table, thead, tbody, tfoot, tr) > form {  display: none !important; }
  </pre>

  <hr />

  The <code>table</code> element's <code>cellspacing</code>
  attribute <a>maps to the pixel length property</a> 'border-spacing' on the element.

  The <code>table</code> element's <code>cellpadding</code>
  attribute <a>maps to the pixel length
  properties</a> 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' of any
  <code>td</code> and <code>th</code> elements that have corresponding <a>cells</a> in the <a>table</a> corresponding to
  the <code>table</code> element.

  The <code>table</code> element's <code>hspace</code> attribute <a>maps to the dimension properties</a> 'margin-left' and
  'margin-right' on the <code>table</code> element.

  The <code>table</code> element's <code>vspace</code> attribute <a>maps to the dimension properties</a> 'margin-top' and
  'margin-bottom' on the <code>table</code> element.

  The <code>table</code> element's <code>height</code> attribute
  <a>maps to the dimension property (ignoring zero)</a> 'height' on the <code>table</code>
  element.

  The <code>table</code> element's <code>width</code> attribute
  <a>maps to the dimension property (ignoring zero)</a> 'width' on the <code>table</code>
  element.

  The <code>col</code> element's <code>width</code> attribute <a>maps
  to the dimension property (ignoring zero)</a> 'width' on the <code>col</code> element.

  The <code>tr</code> element's <code>height</code> attribute <a>maps
  to the dimension property (ignoring zero)</a> 'height' on the <code>tr</code> element.

  The <code>td</code> and <code>th</code> elements' <code>height</code>
  attributes <a>map to the dimension
  property (ignoring zero)</a> 'height' on the element.

  The <code>td</code> and <code>th</code> elements' <code>width</code>
  attributes <a>map to the dimension
  property (ignoring zero)</a> 'width' on the element.

  <hr />

  The <code>caption</code> element unless specified otherwise below, and the <code>thead</code>,
  <code>tbody</code>, <code>tfoot</code>, <code>tr</code>, <code>td</code>, and <code>th</code>
  elements when they have an <code>align</code> attribute whose value is an <a>ASCII
  case-insensitive</a> match for either the string "<code>center</code>" or the string
  "<code>middle</code>", are expected to center text within themselves, as if they had
  their 'text-align' property set to 'center' in a <a>presentational hint</a>, and to <a>align descendants</a> to the center.

  The <code>caption</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, and <code>th</code> elements, when they have an <code>align</code> attribute whose value is an <a>ASCII case-insensitive</a> match for
  the string "<code>left</code>", are expected to left-align text within themselves, as if
  they had their 'text-align' property set to 'left' in a <a>presentational hint</a>, and to <a>align descendants</a> to the left.

  The <code>caption</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, and <code>th</code> elements, when they have an <code>align</code> attribute whose value is an <a>ASCII case-insensitive</a> match for
  the string "<code>right</code>", are expected to right-align text within themselves, as
  if they had their 'text-align' property set to 'right' in a <a>presentational hint</a>, and to <a>align descendants</a> to the right.

  The <code>caption</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, and <code>th</code> elements, when they have an <code>align</code> attribute whose value is an <a>ASCII case-insensitive</a> match for
  the string "<code>justify</code>", are expected to full-justify text within themselves,
  as if they had their 'text-align' property set to 'justify' in a <a>presentational hint</a>, and to <a>align descendants</a> to the left.

  User agents are expected to have a rule in their user agent stylesheet that matches
  <code>th</code> elements that have a parent node whose computed value for the 'text-align'
  property is its initial value, whose declaration block consists of just a single declaration that
  sets the 'text-align' property to the value 'center'.

  <hr />

  When a <code>table</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, or <code>th</code> element has a <code>background</code> attribute set to a non-empty value, the new value is
  expected to be <a>resolved</a> relative to the element, and if this is
  successful, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'background-image' property to the
  resulting <a>absolute URL</a>.

  When a <code>table</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, or <code>th</code> element has a <code>bgcolor</code>
  attribute set, the new value is expected to be parsed using the <a>rules for parsing a legacy
  color value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the element's
  'background-color' property to the resulting color.

  When a <code>table</code> element has a <code>bordercolor</code>
  attribute, its value is expected to be parsed using the <a>rules for parsing a legacy color
  value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the element's
  'border-top-color', 'border-right-color', 'border-bottom-color', and 'border-left-color'
  properties to the resulting color.

  <hr />

  The <code>table</code> element's <code>border</code> attribute <a>maps to the pixel length properties</a>
  'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width' on the
  element. If the attribute is present but parsing the attribute's value using the <a>rules for
  parsing non-negative integers</a> generates an error, a default value of 1px is expected to be
  used for that property instead.

  Rules marked "<dfn>only if border is not equivalent to zero</dfn>"
  in the CSS block above is expected to only be applied if the <code>border</code> attribute mentioned in the selectors for the rule is not
  only present but, when parsed using the <a>rules for parsing non-negative integers</a>, is
  also found to have a value other than zero or to generate an error.

  <hr />

  In <a>quirks mode</a>, a <code>td</code> element or a <code>th</code> element that has a
  <code>nowrap</code> attribute but also has a <code>width</code> attribute whose value, when parsed using the <a>rules for
  parsing non-zero dimension values</a>, is found to be a length (not an error or a number
  classified as a percentage), is expected to have a <a>presentational hint</a> setting the element's 'white-space' property to 'normal',
  overriding the rule in the CSS block above that sets it to 'nowrap'.

  <hr />

  User agents are expected to render <a>sorting interface <code>th</code> elements</a> in such a manner as to indicate that
  activating the elements will cause the table to be sorted.

<h4 id="margin-collapsing-quirks"><dfn>Margin collapsing quirks</dfn></h4>

  A node is <dfn>substantial</dfn> if it is a text node
  that is not <a>inter-element whitespace</a>, or if it is an element node.

  A node is <dfn>blank</dfn> if it is an element that contains no
  <a>substantial</a> nodes.

  The <dfn>elements with default margins</dfn>
  are the following elements: <code>blockquote</code>, <code>dir</code>, <code>dl</code>,
  <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>,
  <code>h6</code>, <code>listing</code>, <code>menu</code>, <code>ol</code>,
  <code>p</code>, <code>plaintext</code>, <code>pre</code>, <code>ul</code>, <code>xmp</code>

  In <a>quirks mode</a>, any <a>element
  with default margins</a> that is the child of a <code>body</code>, <code>td</code>, or
  <code>th</code> element and has no <a>substantial</a>
  previous siblings is expected to have a user-agent level style sheet rule that sets its
  'margin-top' property to zero.

  In <a>quirks mode</a>, any <a>element
  with default margins</a> that is the child of a <code>body</code>, <code>td</code>, or
  <code>th</code> element, has no <a>substantial</a>
  previous siblings, and is <a>blank</a>, is expected to have
  a user-agent level style sheet rule that sets its 'margin-bottom' property to zero also.

  In <a>quirks mode</a>, any <a>element
  with default margins</a> that is the child of a <code>td</code> or <code>th</code> element, has
  no <a>substantial</a> following siblings, and is <a>blank</a>, is expected to have a user-agent level style sheet
  rule that sets its 'margin-top' property to zero.

  In <a>quirks mode</a>, any <code>p</code> element that is the child of a <code>td</code>
  or <code>th</code> element and has no <a>substantial</a> following siblings, is expected to have a
  user-agent level style sheet rule that sets its 'margin-bottom' property to zero.

<h4 id="form-controls"><dfn>Form controls</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  input, select, option, optgroup, button, textarea, keygen {
  text-indent: initial;
  }

  input:matches([type=radio i], [type=checkbox i], [type=reset i], [type=button i],
  [type=submit i], [type=search i]), select, button {
  box-sizing: border-box;
  }
  </pre>

  In <a>quirks mode</a>, the following rules are also expected to apply:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  input:not([type=image i]), textarea { box-sizing: border-box; }
  </pre>

  Each kind of form control is also given a specific default binding, as described in subsequent
  sections, which implements the look and feel of the control.

<h4 id="the-hr-element"><dfn>The <code>hr</code> element</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  hr { color: gray; border-style: inset; border-width: 1px; margin: 0.5em auto; }
  </pre>

  The following rules are also expected to apply, as <a>presentational hints</a>:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  hr[align=left] { margin-left: 0; margin-right: auto; }
  hr[align=right] { margin-left: auto; margin-right: 0; }
  hr[align=center] { margin-left: auto; margin-right: auto; }
  hr[color], hr[noshade] { border-style: solid; }
  </pre>

  If an <code>hr</code> element has either a <code>color</code> attribute
  or a <code>noshade</code> attribute, and furthermore also has a <code>size</code> attribute, and parsing that attribute's value using the
  <a>rules for parsing non-negative integers</a> doesn't generate an error, then the user
  agent is expected to use the parsed value divided by two as a pixel length for
  <a>presentational hints</a> for the properties 'border-top-width', 'border-right-width',
  'border-bottom-width', and 'border-left-width' on the element.

  Otherwise, if an <code>hr</code> element has neither a <code>color</code>
  attribute nor a <code>noshade</code> attribute, but does have a <code>size</code> attribute, and parsing that attribute's value using the
  <a>rules for parsing non-negative integers</a> doesn't generate an error, then: if the
  parsed value is one, then the user agent is expected to use the attribute as a <a>presentational hint</a> setting the element's
  'border-bottom-width' to 0; otherwise, if the parsed value is greater than one, then the user
  agent is expected to use the parsed value minus two as a pixel length for <a>presentational
  hints</a> for the 'height' property on the element.

  The <code>width</code> attribute on an <code>hr</code> element <a>maps
  to the dimension property</a> 'width' on the element.

  When an <code>hr</code> element has a <code>color</code> attribute, its
  value is expected to be parsed using the <a>rules for parsing a legacy color value</a>, and
  if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'color' property to
  the resulting color.

<h4 id="the-fieldset-and-legend-elements"><dfn>The <code>fieldset</code> and <code>legend</code> elements</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  fieldset {
  display: block;
  margin-left: 2px; margin-right: 2px;
  border: groove 2px ThreeDFace;
  padding: 0.35em 0.625em 0.75em;
  min-width: min-content;
  }

  legend {
  padding-left: 2px; padding-right: 2px;
  }
  </pre>

  The <code>fieldset</code> element is expected to establish a new block formatting context.

  If the <code>fieldset</code> element has a child that matches the conditions in the list below,
  then the first such child is the <code>fieldset</code> element's <dfn>rendered legend</dfn>:

  <ul class="brief">

    <li>The child is a <code>legend</code> element.</li>

    <li>The child is not out-of-flow (e.g. not absolutely positioned or floated).</li>

    <li>The child is generating a box (e.g. it is not 'display:none').</li>

  </ul>

  A <code>fieldset</code> element's <a>rendered legend</a>, if any, is expected to be
  rendered over the top border edge of the <code>fieldset</code> element as a 'block' box
  (overriding any explicit 'display' value). In the absence of an explicit width, the box should
  shrink-wrap. If the <code>legend</code> element in question has an <code>align</code> attribute, and its value is an <a>ASCII
  case-insensitive</a> match for one of the strings in the first column of the following table,
  then the <code>legend</code> is expected to be rendered horizontally aligned over the border edge
  in the position given in the corresponding cell on the same row in the second column. If the
  attribute is absent or has a value that doesn't match any of the cases in the table, then the
  position is expected to be on the right if the 'direction' property on this element has a computed
  value of 'rtl', and on the left otherwise.

  <table>
    <thead>
    <tr>
      <th>Attribute value
      <th>Alignment position
    <tbody>
    <tr>
      <td><code>left</code>
      <td>On the left
    <tr>
      <td><code>right</code>
      <td>On the right
    <tr>
      <td><code>center</code>
      <td>In the middle
  </table>

<h3 id="replaced-elements"><dfn>Replaced elements</dfn></h3>

<h4 id="embedded-content"><dfn>Embedded content</dfn></h4>

  The <code>embed</code>, <code>iframe</code>, and <code>video</code> elements are expected to be
  treated as <a>replaced elements</a>.

  A <code>canvas</code> element that <a>represents</a> <a>embedded content</a> is
  expected to be treated as a <a>replaced element</a>; the contents of such elements are the
  element's bitmap, if any, or else a transparent black bitmap with the same <a>intrinsic
  dimensions</a> as the element. Other <code>canvas</code> elements are expected to be treated
  as ordinary elements in the rendering model.

  An <code>object</code> element that <a>represents</a> an image, plugin, or <a>nested
  browsing context</a> is expected to be treated as a <a>replaced element</a>. Other
  <code>object</code> elements are expected to be treated as ordinary elements in the rendering
  model.

  An <code>applet</code> element that <a>represents</a> a <a>plugin</a> is expected
  to be treated as a <a>replaced element</a>. Other <code>applet</code> elements are expected
  to be treated as ordinary elements in the rendering model.

  The <code>audio</code> element, when it is <a>exposing a user interface</a>, is expected to be treated as a
  <a>replaced element</a> about one line high, as wide as is necessary to expose the user
  agent's user interface features. When an <code>audio</code> element is not <a>exposing a user interface</a>, the user agent is expected to force
  its 'display' property to compute to 'none', irrespective of CSS rules.

  Whether a <code>video</code> element is <a>exposing a user interface</a> is not expected to affect the size of the rendering;
  controls are expected to be overlaid above the page content without causing any layout changes,
  and are expected to disappear when the user does not need them.

  When a <code>video</code> element represents a poster frame or frame of video, the poster frame
  or frame of video is expected to be rendered at the largest size that maintains the aspect ratio
  of that poster frame or frame of video without being taller or wider than the <code>video</code>
  element itself, and is expected to be centered in the <code>video</code> element.

  Any subtitles or captions are expected to be overlayed directly on top of their
  <code>video</code> element, as defined by the relevant rendering rules; for WebVTT, those are the
  <a>rules for updating the display of WebVTT text tracks</a>. [[!WEBVTT]]

  When the user agent starts <a>exposing a user
  interface</a> for a <code>video</code> element, the user agent should run the <a>rules for
  updating the text track rendering</a> of each of the <a>text
  tracks</a> in the <code>video</code> element's <a>list of text tracks</a> that are <a>showing</a> and whose <a>text track kind</a> is one of <code>subtitles</code> or <code>captions</code> (e.g., for <a>text
  tracks</a> based on <a>WebVTT</a>, the <a>rules for updating the display of WebVTT
  text tracks</a>). [[!WEBVTT]]

  <p class="note">
  Resizing <code>video</code> and <code>canvas</code> elements does not interrupt
  video playback or clear the canvas.
  </p>

  <hr />

  The following CSS rules are expected to apply:

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    iframe:not([seamless]) { border: 2px inset; }
    iframe[seamless] { display: block; }
    video { object-fit: contain; }
  </pre>

<h4 id="images"><dfn>Images</dfn></h4>

  User agents are expected to render <code>img</code> elements and <code>input</code> elements
  whose <code>type</code> attributes are in the <a>Image Button</a> state, according to the first applicable rules
  from the following list:

  <dl class="switch">

    <dt>If the element <a>represents</a> an image</dt>

    <dd>The user agent is expected to treat the element as a <a>replaced element</a> and
    render the image according to the rules for doing so defined in CSS.</dd>

    <dt>

    If the element does not <a>represent</a> an image, but the element
    already has <a>intrinsic dimensions</a> (e.g. from the <a>dimension attributes</a>
    or CSS rules), and either:

    <ul>

      <li>the user agent has reason to believe that the image will become <i>available</i> and be rendered in due
      course, or

      <li>the element has no <code>alt</code> attribute, or

      <li>the <code>Document</code> is in <a>quirks mode</a>

    </ul>

    </dt>

    <dd>The user agent is expected to treat the element as a <a>replaced element</a> whose
    content is the text that the element represents, if any, optionally alongside an icon indicating
    that the image is being obtained (if applicable). For <code>input</code> elements, the element
    is expected to appear button-like to indicate that the element is a <a>button</a>.</dd>

    <dt>If the element is an <code>img</code> element that <a>represents</a> some text and the
    user agent does not expect this to change</dt>

    <dd>The user agent is expected to treat the element as a non-replaced phrasing element whose
    content is the text, optionally with an icon indicating that an image is missing, so that the
    user can request the image be displayed or investigate why it is not rendering. In non-graphical
    contexts, such an icon should be omitted.</dd>

    <dt>If the element is an <code>img</code> element that <a>represents</a> nothing and the
    user agent does not expect this to change</dt>

    <dd>The user agent is expected to treat the element as an empty inline element. (In the absence
    of further styles, this will cause the element to essentially not be rendered.)</dd>

    <dt>If the element is an <code>input</code> element that does not <a>represent</a> an image and the user agent does not expect this to change</dt>

    <dd>The user agent is expected to treat the element as a <a>replaced element</a>
    consisting of a button whose content is the element's alternative text. The <a>intrinsic
    dimensions</a> of the button are expected to be about one line in height and whatever width
    is necessary to render the text on one line.</dd>

  </dl>

  The icons mentioned above are expected to be relatively small so as not to disrupt most text
  but be easily clickable. In a visual environment, for instance, icons could be 16 pixels by 16
  pixels square, or 1em by 1em if the images are scalable. In an audio environment, the icon could
  be a short bleep. The icons are intended to indicate to the user that they can be used to get to
  whatever options the UA provides for images, and, where appropriate, are expected to provide
  access to the context menu that would have come up if the user interacted with the actual
  image.

  <hr />

  All animated images with the same <a>absolute URL</a> and the same image data are
  expected to be rendered synchronized to the same timeline as a group, with the timeline starting
  at the time of the least recent addition to the group.

  <p class="note">
  In other words, when a second image with the same <a>absolute URL</a> and
  animated image data is inserted into a document, it jumps to the point in the animation cycle that
  is currently being displayed by the first image.
  </p>

  When a user agent is to <dfn>restart the animation</dfn> for an <code>img</code> element
  showing an animated image, all animated images with the same <a>absolute URL</a> and the
  same image data in that <code>img</code> element's <a>node document</a> are expected to restart
  their animation from the beginning.

  <hr />

  The following CSS rules are expected to apply when the <code>Document</code> is in <a>quirks
  mode</a>:

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    img[align=left i] { margin-right: 3px; }
    img[align=right i] { margin-left: 3px; }
  </pre>

  </div>

  <div class="impl">

<h4 id="attributes-for-embedded-content-and-images"><dfn>Attributes for embedded content and images</dfn></h4>

  The following CSS rules are expected to apply as <a>presentational hints</a>:

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    iframe[frameborder=0], iframe[frameborder=no i] { border: none; }

    applet[align=left i], embed[align=left i], iframe[align=left i],
    img[align=left i], input[type=image i][align=left i], object[align=left i] {
      float: left;
    }

    applet[align=right i], embed[align=right i], iframe[align=right i],
    img[align=right i], input[type=image i][align=right i], object[align=right i] {
      float: right;
    }

    applet[align=top i], embed[align=top i], iframe[align=top i],
    img[align=top i], input[type=image i][align=top i], object[align=top i] {
      vertical-align: top;
    }

    applet[align=baseline i], embed[align=baseline i], iframe[align=baseline i],
    img[align=baseline i], input[type=image i][align=baseline i], object[align=baseline i] {
      vertical-align: baseline;
    }

    applet[align=texttop i], embed[align=texttop i], iframe[align=texttop i],
    img[align=texttop i], input[type=image i][align=texttop i], object[align=texttop i] {
      vertical-align: text-top;
    }

    applet[align=absmiddle i], embed[align=absmiddle i], iframe[align=absmiddle i],
    img[align=absmiddle i], input[type=image i][align=absmiddle i], object[align=absmiddle i],
    applet[align=abscenter i], embed[align=abscenter i], iframe[align=abscenter i],
    img[align=abscenter i], input[type=image i][align=abscenter i], object[align=abscenter i] {
      vertical-align: middle;
    }

    applet[align=bottom i], embed[align=bottom i], iframe[align=bottom i],
    img[align=bottom i], input[type=image i][align=bottom i],
    object[align=bottom i] {
      vertical-align: bottom;
    }
  </pre>

  When an <code>applet</code>, <code>embed</code>, <code>iframe</code>, <code>img</code>, or
  <code>object</code> element, or an <code>input</code> element whose <code>type</code> attribute is in the <a>Image Button</a> state, has an <code>align</code>
  attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>center</code>" or the string "<code>middle</code>", the user agent is expected
  to act as if the element's 'vertical-align' property was set to a value that aligns the vertical
  middle of the element with the parent element's baseline.

  The <code>hspace</code> attribute of <code>applet</code>, <code>embed</code>,
  <code>iframe</code>, <code>img</code>, or <code>object</code> elements, and <code>input</code>
  elements with a <code>type</code> attribute in the <a>Image Button</a> state, <a>maps to the dimension properties</a> 'margin-left' and 'margin-right' on the
  element.

  The <code>vspace</code> attribute of <code>applet</code>, <code>embed</code>,
  <code>iframe</code>, <code>img</code>, or <code>object</code> elements, and <code>input</code>
  elements with a <code>type</code> attribute in the <a>Image Button</a> state, <a>maps to the dimension properties</a> 'margin-top' and 'margin-bottom' on the
  element.

  When an <code>img</code> element, <code>object</code> element, or <code>input</code> element
  with a <code>type</code> attribute in the <a>Image Button</a> state has a <code>border</code> attribute whose value, when parsed using the <a>rules for
  parsing non-negative integers</a>, is found to be a number greater than zero, the user agent is
  expected to use the parsed value for eight <a>presentational hints</a>: four setting the
  parsed value as a pixel length for the element's 'border-top-width', 'border-right-width',
  'border-bottom-width', and 'border-left-width' properties, and four setting the element's
  'border-top-style', 'border-right-style', 'border-bottom-style', and 'border-left-style'
  properties to the value 'solid'.

  The <code>width</code> and <code>height</code> attributes on <code>applet</code>, <code>embed</code>,
  <code>iframe</code>, <code>img</code>, <code>object</code> or <code>video</code> elements, and
  <code>input</code> elements with a <code>type</code> attribute in the
  <a>Image Button</a> state and that either represents an image
  or that the user expects will eventually represent an image, <a>map to the dimension properties</a> 'width' and 'height' on the element
  respectively.

  </div>

  <div class="impl">

<h4 id="image-maps"><dfn>Image maps</dfn></h4>

  Shapes on an <a>image map</a> are expected to act, for the purpose of the CSS cascade, as
  elements independent of the original <code>area</code> element that happen to match the same style
  rules but inherit from the <code>img</code> or <code>object</code> element.

  For the purposes of the rendering, only the 'cursor' property is expected to have any effect on
  the shape.

  <p class="example">
  Thus, for example, if an <code>area</code> element has a <code>style</code> attribute that sets the 'cursor' property to 'help', then when the
  user designates that shape, the cursor would change to a Help cursor.
  </p>

  <p class="example">
  Similarly, if an <code>area</code> element had a CSS rule that set its 'cursor'
  property to 'inherit' (or if no rule setting the 'cursor' property matched the element at all),
  the shape's cursor would be inherited from the <code>img</code> or <code>object</code> element of
  the <a>image map</a>, not from the parent of the <code>area</code> element.
  </p>

  </div>

  <div class="impl">

<h3 id="bindings"><dfn>Bindings</dfn></h3>

<h4 id="bindings-introduction"><dfn>Introduction</dfn></h4>

  A number of elements have their rendering defined in terms of the 'binding' property. [[!BECSS]]

  The CSS snippets below set the 'binding' property to a user-agent-defined value, represented
  below by keywords like <code><i>button</i></code>. The rules then described for
  these bindings are only expected to apply if the element's 'binding' property has not been
  overridden (e.g. by the author) to have another value.

  Exactly how the bindings are implemented is not specified by this specification. User agents
  are encouraged to make their bindings set the 'appearance' CSS property appropriately to achieve
  platform-native appearances for widgets, and are expected to implement any relevant animations,
  etc, that are appropriate for the platform. [[!CSSUI]]

  </div>

  <div class="impl">

<h4 id="the-button-element"><dfn>The <code>button</code> element</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    button { binding: <i>button</i>; }
  </pre>

  When the <i>button</i> binding applies to a <code>button</code> element, the element
  is expected to render as an 'inline-block' box rendered as a button whose contents are the
  contents of the element.

  When the <code>button</code> element's <code>type</code> attribute is
  in the <a>Menu</a> state, the user agent is expected to
  indicate that activating the element will display a menu, e.g. by displaying a down-pointing
  triangle after the button's label.

  </div>

  <div class="impl">

<h4 id="the-details-element"><dfn>The <code>details</code> element</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    details { binding: <i>details</i>; }
  </pre>

  When the <i>details</i> binding applies to a <code>details</code> element, the element
  is expected to render as a 'block' box with its 'padding-left' property set to '40px' for
  left-to-right elements (<a>LTR-specific</a>) and with its 'padding-right' property set to
  '40px' for right-to-left elements. The element's shadow tree is expected to take the element's
  first child <code>summary</code> element, if any, and place it in a first 'block' box container,
  and then take the element's remaining descendants, if any, and place them in a second 'block' box
  container.

  The first container is expected to contain at least one line box, and that line box is expected
  to contain a disclosure widget (typically a triangle), horizontally positioned within the left
  padding of the <code>details</code> element. That widget is expected to allow the user to request
  that the details be shown or hidden.

  The second container is expected to have its 'overflow' property set to 'hidden'. When the
  <code>details</code> element does not have an <code>open</code>
  attribute, this second container is expected to be removed from the rendering.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-a-text-entry-widget"><dfn>The <code>input</code> element as a text entry widget</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    input { binding: <i>input-textfield</i>; }
    input[type=password i] { binding: <i>input-password</i>; }
    /* later rules override this for other values of type="" */
  </pre>

  When the <i>input-textfield</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Text</a>, <a>Search</a>,
  <a>Telephone</a>, <a>URL</a>,
  or <a>E-mail</a> state, the element is expected to render as
  an 'inline-block' box rendered as a text field.

  When the <i>input-password</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Password</a> state, the element is expected to render as an
  'inline-block' box rendered as a text field whose contents are obscured.

  If these text fields provide a text selection, then, when the user changes the currect
  selection in such a binding, the user agent is expected to <a>queue a task</a> to <a>fire
  a simple event</a> that bubbles named <code>select</code> at the element,
  using the <a>user interaction task source</a> as the task source.

  If an <code>input</code> element whose <code>type</code> attribute is
  in one of the above states has a <code>size</code> attribute, and parsing
  that attribute's value using the <a>rules for parsing non-negative integers</a> doesn't
  generate an error, then the user agent is expected to use the attribute as a <a>presentational hint</a> for the 'width' property on the element,
  with the value obtained from applying the <a>converting a character width to pixels</a>
  algorithm to the value of the attribute.

  If an <code>input</code> element whose <code>type</code> attribute is
  in one of the above states does <em>not</em> have a <code>size</code>
  attribute, then the user agent is expected to act as if it had a user-agent-level style sheet rule
  setting the 'width' property on the element to the value obtained from applying the
  <a>converting a character width to pixels</a> algorithm to the number 20.

  The <dfn>converting a character width to pixels</dfn> algorithm returns (<var>size</var>-1)&times;<var>avg</var>&nbsp;+&nbsp;<var>max</var>,
  where <var>size</var> is the character width to convert, <var>avg</var> is the
  average character width of the primary font for the element for which the algorithm is being run,
  in pixels, and <var>max</var> is the maximum character width of that same font, also in
  pixels. (The element's 'letter-spacing' property does not affect the result.)

  When the <i>input-textfield</i> binding applies to an element, the 'line-height'
  property, if it has a computed value equivalent to a value that is less than 1.0, must have a used
  value of 1.0.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-domain-specific-widgets"><dfn>The <code>input</code> element as domain-specific widgets</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    input[type=datetime i] { binding: <i>input-datetime</i>; }
    input[type=date i] { binding: <i>input-date</i>; }
    input[type=month i] { binding: <i>input-month</i>; }
    input[type=week i] { binding: <i>input-week</i>; }
    input[type=time i] { binding: <i>input-time</i>; }
    input[type=datetime-local i] { binding: <i>input-datetime-local</i>; }
    input[type=number i] { binding: <i>input-number</i>; }
  </pre>

  When the <i>input-datetime</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Date and Time</a> state, the element is expected to render as
  an 'inline-block' box depicting a Date and Time control.

  When the <i>input-date</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Date</a> state, the element is expected to render as an
  'inline-block' box depicting a Date control.

  When the <i>input-month</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Month</a> state, the element is expected to render as an
  'inline-block' box depicting a Month control.

  When the <i>input-week</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Week</a> state, the element is expected to render as an
  'inline-block' box depicting a Week control.

  When the <i>input-time</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Time</a> state, the element is expected to render as an
  'inline-block' box depicting a Time control.

  When the <i>input-datetime-local</i> binding applies to an <code>input</code> element
  whose <code>type</code> attribute is in the <a>Local Date and Time</a> state, the element is expected
  to render as an 'inline-block' box depicting a Local Date and Time control.

  When the <i>input-number</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Number</a> state, the element is expected to render as an
  'inline-block' box depicting a Number control.

  These controls are all expected to be about one line high, and about as wide as necessary to
  show the widest possible value.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-a-range-control"><dfn>The <code>input</code> element as a range control</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    input[type=range i] { binding: <i>input-range</i>; }
  </pre>

  When the <i>input-range</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Range</a> state, the element is expected to render as an
  'inline-block' box depicting a slider control.

  When the control is wider than it is tall (or square), the control is expected to be a
  horizontal slider, with the lowest value on the right if the 'direction' property on this element
  has a computed value of 'rtl', and on the left otherwise. When the control is taller than it is
  wide, it is expected to be a vertical slider, with the lowest value on the bottom.

  Predefined suggested values (provided by the <code>list</code>
  attribute) are expected to be shown as tick marks on the slider, which the slider can snap to.

  User agents are expected to use the used value of the 'direction' property on the element to
  determine the direction in which the slider operates. Typically, a left-to-right ('ltr')
  horizontal control would have the lowest value on the left and the highest value on the right, and
  vice versa.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-a-color-well"><dfn>The <code>input</code> element as a color well</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    input[type=color i] { binding: <i>input-color</i>; }
  </pre>

  When the <i>input-color</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Color</a> state, the element is expected to render as an
  'inline-block' box depicting a color well, which, when activated, provides the user with a color
  picker (e.g. a color wheel or color palette) from which the color can be changed.

  Predefined suggested values (provided by the <code>list</code>
  attribute) are expected to be shown in the color picker interface, not on the color well
  itself.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-a-checkbox-and-radio-button-widgets"><dfn>The <code>input</code> element as a checkbox and radio button widgets</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    input[type=checkbox i] { binding: <i>input-checkbox</i>; }
    input[type=radio i] { binding: <i>input-radio</i>; }
  </pre>

  When the <i>input-checkbox</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Checkbox</a> state, the element is expected to render as an
  'inline-block' box containing a single checkbox control, with no label.

  When the <i>input-radio</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Radio Button</a> state, the element is expected to render as an
  'inline-block' box containing a single radio button control, with no label.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-a-file-upload-control"><dfn>The <code>input</code> element as a file upload control</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    input[type=file i] { binding: <i>input-file</i>; }
  </pre>

  When the <i>input-file</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>File Upload</a> state, the element is expected to render as an
  'inline-block' box containing a span of text giving the file name(s) of the <a>selected files</a>, if any, followed by a button that,
  when activated, provides the user with a file picker from which the selection can be changed.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-a-button"><dfn>The <code>input</code> element as a button</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    input[type=submit i], input[type=reset i], input[type=button i] {
      binding: <i>input-button</i>;
    }
  </pre>

  When the <i>input-button</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Submit Button</a>, <a>Reset
  Button</a>, or <a>Button</a> state, the element is
  expected to render as an 'inline-block' box rendered as a button, about one line high, containing
  the contents of the element's <code>value</code> attribute, if any, or
  text derived from the element's <code>type</code> attribute in a
  user-agent-defined (and probably locale-specific) fashion, if not.

  </div>

  <div class="impl">

<h4 id="the-marquee-element"><dfn>The <code>marquee</code> element</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    marquee { binding: <i>marquee</i>; }
  </pre>

  When the <i>marquee</i> binding applies to a <code>marquee</code> element, while the
  element is <a>turned on</a>, the element is expected to render in
  an animated fashion according to its attributes as follows:

  <dl>

    <dt>If the element's <code>behavior</code> attribute is in the
    <a>scroll</a> state</dt>

    <dd>

    Slide the contents of the element in the direction described by the <code>direction</code> attribute as defined below, such that it begins
    off the start side of the <code>marquee</code>, and ends flush with the inner end side.

    <p class="example">
  For example, if the <code>direction</code>
    attribute is <a>left</a> (the default), then the
    contents would start such that their left edge are off the side of the right edge of the
    <code>marquee</code>'s content area, and the contents would then slide up to the point where the
    left edge of the contents are flush with the left inner edge of the <code>marquee</code>'s
    content area.
  </p>

    Once the animation has ended, the user agent is expected to <a>increment the marquee
    current loop index</a>. If the element is still <a>turned
    on</a> after this, then the user agent is expected to restart the animation.

    </dd>

    <dt>If the element's <code>behavior</code> attribute is in the
    <a>slide</a> state</dt>

    <dd>

    Slide the contents of the element in the direction described by the <code>direction</code> attribute as defined below, such that it begins
    off the start side of the <code>marquee</code>, and ends off the end side of the
    <code>marquee</code>.

    <p class="example">
  For example, if the <code>direction</code>
    attribute is <a>left</a> (the default), then the
    contents would start such that their left edge are off the side of the right edge of the
    <code>marquee</code>'s content area, and the contents would then slide up to the point where the
    <em>right</em> edge of the contents are flush with the left inner edge of the
    <code>marquee</code>'s content area.
  </p>

    Once the animation has ended, the user agent is expected to <a>increment the marquee
    current loop index</a>. If the element is still <a>turned
    on</a> after this, then the user agent is expected to restart the animation.

    </dd>

    <dt>If the element's <code>behavior</code> attribute is in the
    <a>alternate</a> state</dt>

    <dd>

    When the <a>marquee current loop index</a> is even (or zero), slide the contents of the
    element in the direction described by the <code>direction</code>
    attribute as defined below, such that it begins flush with the start side of the
    <code>marquee</code>, and ends flush with the end side of the <code>marquee</code>.

    When the <a>marquee current loop index</a> is odd, slide the contents of the element in
    the opposite direction than that described by the <code>direction</code> attribute as defined below, such that it begins
    flush with the end side of the <code>marquee</code>, and ends flush with the start side of the
    <code>marquee</code>.

    <p class="example">
  For example, if the <code>direction</code>
    attribute is <a>left</a> (the default), then the
    contents would with their right edge flush with the right inner edge of the
    <code>marquee</code>'s content area, and the contents would then slide up to the point where the
    <em>left</em> edge of the contents are flush with the left inner edge of the
    <code>marquee</code>'s content area.
  </p>

    Once the animation has ended, the user agent is expected to <a>increment the marquee
    current loop index</a>. If the element is still <a>turned
    on</a> after this, then the user agent is expected to continue the animation.

    </dd>

  </dl>

  The <code>direction</code> attribute has the meanings described
  in the following table:

  <table>
    <thead>
    <tr>
      <th><code>direction</code> attribute state
      <th>Direction of animation
      <th>Start edge
      <th>End edge
      <th>Opposite direction
    <tbody>
    <tr>
      <td><a>left</a>
      <td>&larr; Right to left
      <td>Right
      <td>Left
      <td>&rarr; Left to Right
    <tr>
      <td><a>right</a>
      <td>&rarr; Left to Right
      <td>Left
      <td>Right
      <td>&larr; Right to left
    <tr>
      <td><a>up</a>
      <td>&uarr; Up (Bottom to Top)
      <td>Bottom
      <td>Top
      <td>&darr; Down (Top to Bottom)
    <tr>
      <td><a>down</a>
      <td>&darr; Down (Top to Bottom)
      <td>Top
      <td>Bottom
      <td>&uarr; Up (Bottom to Top)
  </table>

  In any case, the animation should proceed such that there is a delay given by the <a>marquee
  scroll interval</a> between each frame, and such that the content moves at most the distance
  given by the <a>marquee scroll distance</a> with each frame.

  When a <code>marquee</code> element has a <code>bgcolor</code>
  attribute set, the value is expected to be parsed using the <a>rules for parsing a legacy color
  value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the element's
  'background-color' property to the resulting color.

  The <code>width</code> and <code>height</code> attributes on a <code>marquee</code> element <a>map to the dimension properties</a> 'width' and 'height'
  on the element respectively.

  The <a>intrinsic height</a> of a <code>marquee</code> element with its <code>direction</code> attribute in the <a>up</a> or <a>down</a> states is 200 CSS pixels.

  The <code>vspace</code> attribute of a <code>marquee</code> element
  <a>maps to the dimension properties</a> 'margin-top'
  and 'margin-bottom' on the element. The <code>hspace</code> attribute
  of a <code>marquee</code> element <a>maps to the
  dimension properties</a> 'margin-left' and 'margin-right' on the element.

  The 'overflow' property on the <code>marquee</code> element is expected to be ignored; overflow
  is expected to always be hidden.

  </div>

  <div class="impl">

<h4 id="the-meter-element"><dfn>The <code>meter</code> element</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    meter { binding: meter; }
  </pre>

  When the <i>meter</i> binding applies to a <code>meter</code> element, the element is
  expected to render as an 'inline-block' box with a 'height' of '1em' and a 'width' of '5em', a
  'vertical-align' of '-0.2em', and with its contents depicting a gauge.

  When the element is wider than it is tall (or square), the depiction is expected to be of a
  horizontal gauge, with the minimum value on the right if the 'direction' property on this element
  has a computed value of 'rtl', and on the left otherwise. When the element is taller than it is
  wide, it is expected to depict a vertical gauge, with the minimum value on the bottom.

  User agents are expected to use a presentation consistent with platform conventions for gauges,
  if any.

  <p class="note">
  Requirements for what must be depicted in the gauge are included in the definition
  of the <code>meter</code> element.
  </p>

  </div>

  <div class="impl">

<h4 id="the-progress-element"><dfn>The <code>progress</code> element</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    progress { binding: <i>progress</i>; }
  </pre>

  When the <i>progress</i> binding applies to a <code>progress</code> element, the
  element is expected to render as an 'inline-block' box with a 'height' of '1em' and a 'width' of
  '10em', and a 'vertical-align' of '-0.2em'.

    <img class="extra" src="images/sample-progress.png" alt="" width="157" height="103" /> When the
  element is wider than it is tall, the element is expected to be depicted as a horizontal progress
  bar, with the start on the right and the end on the left if the 'direction' property on this
  element has a computed value of 'rtl', and with the start on the left and the end on the right
  otherwise. When the element is taller than it is wide, it is expected to depicted as a vertical
  progress bar, with the lowest value on the bottom. When the element is square, it is expected to
  be depicted as a direction-independent progress widget (e.g. a circular progress ring).

  User agents are expected to use a presentation consistent with platform conventions for
  progress bars. In particular, user agents are expected to use different presentations for
  determinate and indeterminate progress bars. User agents are also expected to vary the
  presentation based on the dimensions of the element.

  <p class="example">
  For example, on some platforms for showing indeterminate progress there is a
  "spinner" progress indicator with square dimensions, which could be used when the element is
  square, and an indeterminate progress bar, which could be used when the element is wide.
  </p>

  <p class="note">
  Requirements for how to determine if the progress bar is determinate or
  indeterminate, and what progress a determinate progress bar is to show, are included in the
  definition of the <code>progress</code> element.
  </p>

  </div>

  <div class="impl">

<h4 id="the-select-element"><dfn>The <code>select</code> element</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    select { binding: <i>select</i>; }
  </pre>

  When the <i>select</i> binding applies to a <code>select</code> element whose <code>multiple</code> attribute is present, the element is expected to
  render as a multi-select list box.

  When the <i>select</i> binding applies to a <code>select</code> element whose <code>multiple</code> attribute is absent, and the element's <a>display size</a> is greater than 1, the element is expected to
  render as a single-select list box.

  When the element renders as a list box, it is expected to render as an 'inline-block' box whose
  'height' is the height necessary to contain as many rows for items as given by the element's <a>display size</a>, or four rows if the attribute is absent, and
  whose 'width' is the <a>width of the <code>select</code>'s labels</a> plus the width of a
  scrollbar.

  When the <i>select</i> binding applies to a <code>select</code> element whose <code>multiple</code> attribute is absent, and the element's <a>display size</a> is 1, the element is expected to render as a
  one-line drop down box whose width is the <a>width of the <code>select</code>'s
  labels</a>.

  In either case (list box or drop-down box), the element's items are expected to be the
  element's <a>list of options</a>, with the element's
  <code>optgroup</code> element children providing headers for groups of options where
  applicable.

  An <code>optgroup</code> element is expected to be rendered by displaying the element's <code>label</code> attribute.

  An <code>option</code> element is expected to be rendered by displaying the element's <a>label</a>, indented under its <code>optgroup</code> element if it
  has one.

  The <dfn>width of the <code>select</code>'s labels</dfn> is the wider of the width necessary to
  render the widest <code>optgroup</code>, and the width necessary to render the widest
  <code>option</code> element in the element's <a>list of
  options</a> (including its indent, if any).

  If a <code>select</code> element contains a <a>placeholder label option</a>, the user
  agent is expected to render that <code>option</code> in a manner that conveys that it is a label,
  rather than a valid option of the control. This can include preventing the <a>placeholder label
  option</a> from being explicitly selected by the user. When the <a>placeholder label
  option</a>'s <a>selectedness</a> is true, the control
  is expected to be displayed in a fashion that indicates that no valid option is currently
  selected.

  User agents are expected to render the labels in a <code>select</code> in such a manner that
  any alignment remains consistent whether the label is being displayed as part of the page or in a
  menu control.

  </div>

  <div class="impl">

<h4 id="the-textarea-element"><dfn>The <code>textarea</code> element</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    textarea { binding: <i>textarea</i>; white-space: pre-wrap; }
  </pre>

  When the <i>textarea</i> binding applies to a <code>textarea</code> element, the
  element is expected to render as an 'inline-block' box rendered as a multiline text field. If this
  text field provides a selection, then, when the user changes the currect selection in such a
  binding, the user agent is expected to <a>queue a task</a> to <a>fire a simple
  event</a> that bubbles named <code>select</code> at the element, using
  the <a>user interaction task source</a> as the task source.

  If the element has a <code>cols</code> attribute, and parsing that
  attribute's value using the <a>rules for parsing non-negative integers</a> doesn't generate
  an error, then the user agent is expected to use the attribute as a <a>presentational hint</a> for the 'width' property on the element, with the value being
  the <a>textarea effective width</a> (as defined below). Otherwise, the user agent is
  expected to act as if it had a user-agent-level style sheet rule setting the 'width' property on
  the element to the <a>textarea effective width</a>.

  The <dfn>textarea effective width</dfn> of a <code>textarea</code> element is <var>size</var>&times;<var>avg</var>&nbsp;+&nbsp;<var>sbw</var>, where <var>size</var> is the element's <a>character width</a>, <var>avg</var> is the average
  character width of the primary font of the element, in CSS pixels, and <var>sbw</var> is
  the width of a scroll bar, in CSS pixels. (The element's 'letter-spacing' property does not affect
  the result.)

  If the element has a <code>rows</code> attribute, and parsing that
  attribute's value using the <a>rules for parsing non-negative integers</a> doesn't generate
  an error, then the user agent is expected to use the attribute as a <a>presentational hint</a> for the 'height' property on the element, with the value being
  the <a>textarea effective height</a> (as defined below). Otherwise, the user agent is
  expected to act as if it had a user-agent-level style sheet rule setting the 'height' property on
  the element to the <a>textarea effective height</a>.

  The <dfn>textarea effective height</dfn> of a <code>textarea</code> element is the height in
  CSS pixels of the number of lines specified the element's <a>character height</a>, plus the height of a scrollbar in CSS
  pixels.

  User agents are expected to apply the 'white-space' CSS property to <code>textarea</code>
  elements. For historical reasons, if the element has a <code>wrap</code> attribute whose value is an <a>ASCII
  case-insensitive</a> match for the string "<code>off</code>", then the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'white-space'
  property to 'pre'.

  </div>

  <div class="impl">

<h4 id="the-keygen-element"><dfn>The <code>keygen</code> element</dfn></h4>

  <pre highlight="css">
    @namespace url(http://www.w3.org/1999/xhtml);

    keygen { binding: <i>keygen</i>; }
  </pre>

  When the <i>keygen</i> binding applies to a <code>keygen</code> element, the element
  is expected to render as an 'inline-block' box containing a user interface to configure the key
  pair to be generated.

  </div>

  <div class="impl">

<h3 id="frames-and-framesets"><dfn>Frames and framesets</dfn></h3>

  User agent are expected to render <code>frameset</code> elements as a box with the height and
  width of the viewport, with a surface rendered according to the following layout algorithm:

  <ol>

    <li>

    The <var>cols</var> and <var>rows</var> variables are lists of zero or more pairs consisting
    of a number and a unit, the unit being one of <i>percentage</i>, <i>relative</i>, and
    <i>absolute</i>.

    Use the <a>rules for parsing a list of dimensions</a> to parse the value of the
    element's <code>cols</code> attribute, if there is one.
    Let <var>cols</var> be the result, or an empty list if there is no such attribute.

    Use the <a>rules for parsing a list of dimensions</a> to parse the value of the
    element's <code>rows</code> attribute, if there is one.
    Let <var>rows</var> be the result, or an empty list if there is no such attribute.

    </li>

    <li>

    For any of the entries in <var>cols</var> or <var>rows</var> that have the number zero and
    the unit <i>relative</i>, change the entry's number to one.

    </li>

    <li>

    If <var>cols</var> has no entries, then add a single entry consisting of the value 1 and the
    unit <i>relative</i> to <var>cols</var>.

    If <var>rows</var> has no entries, then add a single entry consisting of the value 1 and the
    unit <i>relative</i> to <var>rows</var>.

    </li>

    <li>

    Invoke the algorithm defined below to <a>convert a list of dimensions to a list of pixel
    values</a> using <var>cols</var> as the input list, and the width of the surface that the
    <code>frameset</code> is being rendered into, in CSS pixels, as the input dimension. Let
    <var>sized cols</var> be the resulting list.

    Invoke the algorithm defined below to <a>convert a list of dimensions to a list of pixel
    values</a> using <var>rows</var> as the input list, and the height of the surface that the
    <code>frameset</code> is being rendered into, in CSS pixels, as the input dimension. Let
    <var>sized rows</var> be the resulting list.

    </li>

    <li>

    Split the surface into a grid of <var>w</var>&times;<var>h</var>
    rectangles, where <var>w</var> is the number of entries in <var>sized cols</var> and
    <var>h</var> is the number of entries in <var>sized rows</var>.

    Size the columns so that each column in the grid is as many CSS pixels wide as the
    corresponding entry in the <var>sized cols</var> list.

    Size the rows so that each row in the grid is as many CSS pixels high as the corresponding
    entry in the <var>sized rows</var> list.

    </li>

    <li>

    Let <var>children</var> be the list of <code>frame</code> and <code>frameset</code> elements
    that are children of the <code>frameset</code> element for which the algorithm was invoked.

    </li>

    <li>

    For each row of the grid of rectangles created in the previous step, from top to bottom, run
    these substeps:

    <ol>

      <li>

      For each rectangle in the row, from left to right, run these substeps:

      <ol>

        <li>

        If there are any elements left in <var>children</var>, take the first element in the
        list, and assign it to the rectangle.

        If this is a <code>frameset</code> element, then recurse the entire <code>frameset</code>
        layout algorithm for that <code>frameset</code> element, with the rectangle as the
        surface.

        Otherwise, it is a <code>frame</code> element; render its <a>nested browsing
        context</a>, positoned and sized to fit the rectangle.

        </li>

        <li>

        If there are any elements left in <var>children</var>, remove the first element from
        <var>children</var>.

        </li>

      </ol>

      </li>

    </ol>

    </li>

    <li>

    If the <code>frameset</code> element <a>has a border</a>, draw an outer set of borders
    around the rectangles, using the element's <a>frame border color</a>.

    For each rectangle, if there is an element assigned to that rectangle, and that element
    <a>has a border</a>, draw an inner set of borders around that rectangle, using the
    element's <a>frame border color</a>.

    For each (visible) border that does not abut a rectangle that is assigned a
    <code>frame</code> element with a <code>noresize</code>
    attribute (including rectangles in further nested <code>frameset</code> elements), the user
    agent is expected to allow the user to move the border, resizing the rectangles within, keeping
    the proportions of any nested <code>frameset</code> grids.

    A <code>frameset</code> or <code>frame</code> element <dfn>has a border</dfn> if the
    following algorithm returns true:

    <ol>

      <li>If the element has a <code>frameborder</code> attribute whose value is not the
      empty string and whose first character is either a U+0031 DIGIT ONE (1) character, a U+0079
      LATIN SMALL LETTER Y character (y), or a U+0059 LATIN CAPITAL LETTER Y character (Y), then
      return true.</li>

      <li>Otherwise, if the element has a <code>frameborder</code> attribute, return
      false.</li>

      <li>Otherwise, if the element has a parent element that is a <code>frameset</code> element,
      then return true if <em>that</em> element <a>has a border</a>, and false if it does
      not.</li>

      <li>Otherwise, return true.</li>

    </ol>

    The <dfn>frame border color</dfn> of a <code>frameset</code> or <code>frame</code> element
    is the color obtained from the following algorithm:

    <ol>

      <li>If the element has a <code>bordercolor</code> attribute, and applying the
      <a>rules for parsing a legacy color value</a> to that attribute's value does not result
      in an error, then return the color so obtained.</li>

      <li>Otherwise, if the element has a parent element that is a <code>frameset</code> element,
      then return the <a>frame border color</a> of that element.

      <li>Otherwise, return gray.</li>

    </ol>

    </li>

  </ol>

  The algorithm to <dfn>convert a list of dimensions to a list of pixel values</dfn> consists of
  the following steps:

  <ol>

    <li>

    Let <var>input list</var> be the list of numbers and units passed to the algorithm.

    Let <var>output list</var> be a list of numbers the same length as <var>input list</var>, all
    zero.

    Entries in <var>output list</var> correspond to the entries in <var>input list</var> that
    have the same position.

    </li>

    <li>Let <var>input dimension</var> be the size passed to the algorithm.

    <li>

    Let <var>count percentage</var> be the number of entries in <var>input list</var> whose unit
    is <i>percentage</i>.

    Let <var>total percentage</var> be the sum of all the numbers in <var>input list</var> whose
    unit is <i>percentage</i>.

    Let <var>count relative</var> be the number of entries in <var>input list</var> whose unit is
    <i>relative</i>.

    Let <var>total relative</var> be the sum of all the numbers in <var>input list</var> whose
    unit is <i>relative</i>.

    Let <var>count absolute</var> be the number of entries in <var>input list</var> whose unit is
    <i>absolute</i>.

    Let <var>total absolute</var> be the sum of all the numbers in <var>input list</var> whose
    unit is <i>absolute</i>.

    Let <var>remaining space</var> be the value of <var>input dimension</var>.

    </li>

    <li>

    If <var>total absolute</var> is greater than <var>remaining space</var>, then for each entry
    in <var>input list</var> whose unit is <i>absolute</i>, set the corresponding value in
    <var>output list</var> to the number of the entry in <var>input list</var> multiplied by
    <var>remaining space</var> and divided by <var>total absolute</var>. Then, set <var>remaining
    space</var> to zero.

    Otherwise, for each entry in <var>input list</var> whose unit is <i>absolute</i>, set the
    corresponding value in <var>output list</var> to the number of the entry in <var>input
    list</var>. Then, decrement <var>remaining space</var> by <var>total absolute</var>.

    </li>

    <li>

    If <var>total percentage</var> multiplied by the <var>input dimension</var> and divided by
    100 is greater than <var>remaining space</var>, then for each entry in <var>input list</var>
    whose unit is <i>percentage</i>, set the corresponding value in <var>output list</var> to the
    number of the entry in <var>input list</var> multiplied by <var>remaining space</var> and
    divided by <var>total percentage</var>. Then, set <var>remaining space</var> to zero.

    Otherwise, for each entry in <var>input list</var> whose unit is <i>percentage</i>, set the
    corresponding value in <var>output list</var> to the number of the entry in <var>input
    list</var> multiplied by the <var>input dimension</var> and divided by 100. Then, decrement
    <var>remaining space</var> by <var>total percentage</var> multiplied by the <var>input
    dimension</var> and divided by 100.

    </li>

    <li>

    For each entry in <var>input list</var> whose unit is <i>relative</i>, set the corresponding
    value in <var>output list</var> to the number of the entry in <var>input list</var> multiplied
    by <var>remaining space</var> and divided by <var>total relative</var>.

    </li>

    <li>Return <var>output list</var>.</li>

  </ol>

  User agents working with integer values for frame widths (as opposed to user agents that can
  lay frames out with subpixel accuracy) are expected to distribute the remainder first to the last
  entry whose unit is <i>relative</i>, then equally (not proportionally) to each entry whose unit is
  <i>percentage</i>, then equally (not proportionally) to each entry whose unit is <i>absolute</i>,
  and finally, failing all else, to the last entry.

  <hr />

  The contents of a <code>frame</code> element that does not have a <code>frameset</code> parent
  are expected to be rendered as transparent black; the user agent is expected to not render the
  <a>nested browsing context</a> in this case, and that <a>nested browsing context</a>
  is expected to have a viewport with zero width and zero height.

  </div>

  <div class="impl">

<h3 id="interactive-media"><dfn>Interactive media</dfn></h3>

<h4 id="links-forms-and-navigation"><dfn>Links, forms, and navigation</dfn></h4>

  User agents are expected to allow the user to control aspects of <a>hyperlink</a>
  activation and <a>form submission</a>, such as which <a>browsing context</a> is to be
  used for the subsequent <a>navigation</a>.

  User agents are expected to allow users to discover the destination of <a>hyperlinks</a> and of <a>forms</a> before triggering their
  <a>navigation</a>.

  User agents may allow users to <a>navigate</a> <a>browsing contexts</a> to the URLs <a>indicated</a> by the
  <code>cite</code> attributes on <code>q</code>, <code>blockquote</code>,
  <code>ins</code>, and <code>del</code> elements.

  User agents may surface <a>hyperlinks</a> created by <code>link</code>
  elements in their user interface.

  <p class="note">
    While <code>link</code> elements that create <a>hyperlinks</a> will match the ':link' or ':visited' pseudo-classes, will
    react to clicks if visible, and so forth, this does not extend to any browser interface constructs
    that expose those same links. Activating a link through the browser's interface, rather than in
    the page itself, does not trigger <code>click</code> events and the like.
  </p>

<h4 id="the-title-attribute"><dfn>The <code>title</code> attribute</dfn></h4>

  User agents are expected to expose the <a>advisory information</a> of elements upon user
  request, and to make the user aware of the presence of such information.

  On interactive graphical systems where the user can use a pointing device, this could take the
  form of a tooltip. When the user is unable to use a pointing device, then the user agent is
  expected to make the content available in some other fashion, e.g. by making the element a
  <i>focusable area</i> and always displaying the <a>advisory information</a> of the currently
  <a>focused</a> element, or by showing the <a>advisory information</a> of the elements
  under the user's finger on a touch device as the user pans around the screen.

  U+000A LINE FEED (LF) characters are expected to cause line breaks in the tooltip; U+0009
  CHARACTER TABULATION (tab) characters are expected to render as a non-zero horizontal shift that
  lines up the next glyph with the next tab stop, with tab stops occurring at points that are
  multiples of 8 times the width of a U+0020 SPACE character.

  <div class="example">
    For example, a visual user agent could make elements with a <code>title</code> attribute <a>focusable</a>, and could make any <a>focused</a> element with a
    <code>title</code> attribute show its tooltip under the element while the
    element has focus. This would allow a user to tab around the document to find all the advisory
    text.
  </div>

  <div class="example">
    As another example, a screen reader could provide an audio cue when reading an element with a
    tooltip, with an associated key to read the last tooltip for which a cue was played.
  </div>

<h4 id="editing-hosts"><dfn>Editing hosts</dfn></h4>

  The current text editing caret (i.e. the <a>active range</a>, if it is empty and in an
  <a>editing host</a>), if any, is expected to act like an inline
  <a>replaced element</a> with the vertical dimensions of the caret and with zero width for
  the purposes of the CSS rendering model.

  <p class="note">
    This means that even an empty block can have the caret inside it, and that when
    the caret is in such an element, it prevents margins from collapsing through the element.
  </p>

<h4 id="text-rendered-in-native-user-interfaces"><dfn>Text rendered in native user interfaces</dfn></h4>

  User agents are expected to honor the Unicode semantics of text that is exposed in user
  interfaces, for example supporting the bidirectional algorithm in text shown in dialogs, title
  bars, pop-up menus, and tooltips. Text from the contents of elements is expected to be rendered in
  a manner that honors <a>the directionality</a> of the element from which the text was
  obtained. Text from attributes is expected to be rendered in a manner that honours the
  <a>directionality of the attribute</a>.

  <div class="example">
    Consider the following markup, which has Hebrew text asking for a programming language, the
    languages being text for which a left-to-right direction is important given the punctuation in
    some of their names:

    <pre highlight="html">
      &lt;p dir="rtl" lang="he">
      &lt;label>
      <span dir="rtl" lang="he">&#x5d1;&#x5d7;&#x5e8; &#x5e9;&#x5e4;&#x5ea; &#x5ea;&#x5db;&#x5e0;&#x5d5;&#x5ea;:</span>
      &lt;select>
        &lt;option dir="ltr">C++&lt;/option>
        &lt;option dir="ltr">C#&lt;/option>
        &lt;option dir="ltr">FreePascal&lt;/option>
        &lt;option dir="ltr">F#&lt;/option>
      &lt;/select>
      &lt;/label>
      &lt;/p>
    </pre>

    If the <code>select</code> element was rendered as a drop down box, a correct rendering would
    ensure that the punctuation was the same both in the drop down, and in the box showing the
    current selection.

    <img src="images/bidizelect.png" width="206" height="105" alt="" />
  </div>

  <div class="example">
    The directionality of attributes depends on the attribute and on the element's <code>dir</code> attribute, as the following example demonstrates. Consider this
    markup:

    <pre highlight="html">
  <bdo dir=ltr>&lt;table>
  &lt;tr>
  &lt;th abbr="(&#x05D0;" dir=ltr>A
  &lt;th abbr="(&#x05D0;" dir=rtl>A
  &lt;th abbr="(&#x05D0;" dir=auto>A
  &lt;/table></bdo>
  </pre>

    If the <code>abbr</code> attributes are rendered, e.g. in a tooltip or
    other user interface, the first will have a left parenthesis (because the direction is 'ltr'),
    the second will have a right parenthesis (because the direction is 'rtl'), and the third will
    have a right parenthesis (because the direction is determined <em>from the attribute value</em>
    to be 'rtl').

    However, if instead the attribute was not a <a>directionality-capable attribute</a>, the
    results would be different:

    <pre highlight="html">
  <bdo dir=ltr>&lt;table>
  &lt;tr>
  &lt;th>A
  &lt;th>A
  &lt;th>A
  &lt;/table></bdo>
  </pre>

    In this case, if the user agent were to expose the <code>data-abbr</code> attribute
    in the user interface (e.g. in a debugging environment), the last case would be rendered with a
    <em>left</em> parenthesis, because the direction would be determined from the element's
    contents.
  </div>

  A string provided by a script (e.g. the argument to <code>window.alert()</code>) is expected to be treated as an independent set of one or
  more bidirectional algorithm paragraphs when displayed, as defined by the bidirectional algorithm,
  including, for instance, supporting the paragraph-breaking behavior of U+000A LINE FEED (LF)
  characters. For the purposes of determining the paragraph level of such text in the bidirectional
  algorithm, this specification does <em>not</em> provide a higher-level override of rules P2 and
  P3. [[!BIDI]]

  When necessary, authors can enforce a particular direction for a given paragraph by starting it
  with the Unicode U+200E LEFT-TO-RIGHT MARK or U+200F RIGHT-TO-LEFT MARK characters.

  <div class="example">
    Thus, the following script:

    <pre highlight="javascript">alert('\u05DC\u05DE\u05D3 HTML \u05D4\u05D9\u05D5\u05DD!')</pre>

    ...would always result in a message reading
        "<bdo lang="" dir=rtl>&#x05DC;&#x05DE;&#x05D3;&nbsp;LMTH&nbsp;&#x05D4;&#x05D9;&#x05D5;&#x05DD;!</bdo>"
    (not "<bdo lang="" dir=ltr>&#x05D3;&#x05DE;&#x05DC;&nbsp;HTML&nbsp;&#x05DD;&#x05D5;&#x05D9;&#x05D4;!</bdo>"),
    regardless of the language of the user agent interface or the
    direction of the page or any of its elements.
  </div>

  <div class="example">
    For a more complex example, consider the following script:

    <pre class="bad">
      /* Warning: this script does not handle right-to-left scripts correctly */
      var s;
      if (s = prompt('What is your name?')) {
        alert(s + '! Ok, Fred, ' + s + ', and Wilma will get the car.');
      }
    </pre>

    When the user enters "<kbd>Kitty</kbd>", the user agent would alert "<samp>Kitty! Ok, Fred,
    Kitty, and Wilma will get the car.</samp>". However, if the user enters "<kbd dir="rtl"
    lang="ar">&#x644;&#x627;&nbsp;&#x623;&#x641;&#x647;&#x645;</kbd>", then the bidirectional
    algorithm will determine that the direction of the paragraph is right-to-left, and so the output
    will be the following unintended mess: "<samp lang=""><bdo
    dir="rtl">&#x644;&#x627;&nbsp;&#x623;&#x641;&#x647;&#x645;!&nbsp;derF&nbsp;,kO,&nbsp;&#x644;&#x627;&nbsp;&#x623;&#x641;&#x647;&#x645;,&nbsp;rac&nbsp;eht&nbsp;teg&nbsp;lliw&nbsp;amliW&nbsp;dna.</bdo></samp>"

    To force an alert that starts with user-provided text (or other text of unknown
    directionality) to render left-to-right, the string can be prefixed with a U+200E LEFT-TO-RIGHT
    MARK character:

    <pre highlight="javascript">
      var s;
      if (s = prompt('What is your name?')) {
        alert('<strong>\u200E</strong>' + s + '! Ok, Fred, ' + s + ', and Wilma will get the car.');
      }
    </pre>
  </div>

<h3 id="print-media"><dfn>Print media</dfn></h3>

  User agents are expected to allow the user to request the opportunity to <dfn>obtain a physical
  form</dfn> (or a representation of a physical form) of a <code>Document</code>. For example,
  selecting the option to print a page or convert it to PDF format. [[!PDF]]

  When the user actually <a>obtains a physical form</a> (or
  a representation of a physical form) of a <code>Document</code>, the user agent is expected to
  create a new rendering of the <code>Document</code> for the print media.

<h3 id="unstyled-xml-documents"><dfn>Unstyled XML documents</dfn></h3>

  HTML user agents may, in certain circumstances, find themselves rendering non-HTML documents
  that use vocabularies for which they lack any built-in knowledge. This section provides for a way
  for user agents to handle such documents in a somewhat useful manner.

  While a <code>Document</code> is an <a>unstyled document</a>, the user agent is expected
  to render <a>an unstyled document view</a>.

  A <code>Document</code> is an <dfn>unstyled document</dfn> while it matches the following
  conditions:

  <ul>
    <li>The <code>Document</code> has no author style sheets (whether referenced by HTTP headers, processing instructions, elements like <code>link</code>, inline elements like <code>style</code>, or any other mechanism).
    <li>None of the elements in the <code>Document</code> have any <a>presentational hints</a>.
    <li>None of the elements in the <code>Document</code> have any <a>CSS styling attributes</a>.
    <li>None of the elements in the <code>Document</code> are in any of the following namespaces: <a>HTML namespace</a>, <a>SVG namespace</a>, <a>MathML namespace</a>
    <li>The <code>Document</code> has no <i>focusable area</i> (e.g. from XLink) other than the viewport.
    <li>The <code>Document</code> has no <a>hyperlinks</a> (e.g. from XLink).
    <li>There exists no <a>script</a> whose <a>settings object</a> specifies this <code>Document</code> as the <a>responsible document</a>.
    <li>None of the elements in the <code>Document</code> have any registered event listeners.
  </ul>

  <dfn>An unstyled document view</dfn> is one where the DOM is not rendered according to CSS
  (which would, since there are no applicable styles in this context, just result in a wall of
  text), but is instead rendered in a manner that is useful for a developer. This could consist of
  just showing the <code>Document</code> object's source, maybe with syntax highlighting, or it
  could consist of displaying just the DOM tree, or simply a message saying that the page is not a
  styled document.

  <p class="note">
  If a <code>Document</code> stops being an <a>unstyled document</a>, then the
  conditions above stop applying, and thus a user agent following these requirements will switch to
  using the regular CSS rendering.
  </p>

<!-- Big Text: Obsolete -->

<h2 id="obsolete">Obsolete features</h2>

<h3 id="obsolete-but-conforming-features">Obsolete but conforming features</h3>

  Features listed in this section will trigger warnings in conformance checkers.

  Authors should not specify a <code>border</code> attribute on an <code>img</code> element. If the
  attribute is present, its value must be the string "<code>0</code>". CSS should be used instead.

  Authors should not specify a <code>language</code> attribute on a <code>script</code> element. If
  the attribute is present, its value must be an <a>ASCII case-insensitive</a> match for the string
  "<code>JavaScript</code>" and either the <code>type</code> attribute must be omitted or its value
  must be an <a>ASCII case-insensitive</a> match for the string "<code>text/javascript</code>".
  The attribute should be entirely omitted instead (with the value "<code>JavaScript</code>", it has
  no effect), or replaced with use of the <code>type</code> attribute.

  Authors should not specify the <code>name</code> attribute on <code>a</code> elements. If the
  attribute is present, its value must not be the empty string and must neither be equal to the
  value of any of the <a>IDs</a> in the element's <a>home subtree</a> other than the element's own
  <a>ID</a>, if any, nor be equal to the value of any of the other <code>name</code> attributes on
  <code>a</code> elements in the element's <a>home subtree</a>. If this attribute is present and the
  element has an <a>ID</a>, then the attribute's value must be equal to the element's <a>ID</a>. In
  earlier versions of the language, this attribute was intended as a way to specify possible targets
  for fragment identifiers in <a>URLs</a>. The <code>id</code> attribute should be used instead.

  Authors should not, but may despite requirements to the contrary elsewhere in this specification,
  specify the <code>maxlength</code> and <code>size</code> attributes on <code>input</code> elements
  whose <code>type</code> attributes are in the <a>Number</a> state. One valid reason for using
  these attributes regardless is to help legacy user agents that do not support <code>input</code>
  elements with <code>type="number"</code> to still render the text field with a useful width.

  <p class="note">
    In <a>the HTML syntax</a>, specifying a <a>DOCTYPE</a> that is an <a>obsolete permitted
    DOCTYPE</a> will also trigger a warning.
  </p>

  <div class="impl">
    <h4 id="warnings-for-obsolete-but-conforming-features">Warnings for obsolete but conforming features</h4>

    To ease the transition from HTML4 Transitional documents to the language defined in
    <em>this</em> specification, and to discourage certain features that are only allowed in very
    few circumstances, conformance checkers must warn the user when the following features are used
    in a document. These are generally old obsolete features that have no effect, and are allowed
    only to distinguish between likely mistakes (regular conformance errors) and mere vestigial
    markup or unusual and discouraged practices (these warnings).

    The following features must be categorized as described above:

     * The presence of an <a>obsolete permitted DOCTYPE</a> in an <a>HTML document</a>.
     * The presence of a <code>border</code> attribute on an <code>img</code> element if its value
        is the string "<code>0</code>".
     * The presence of a <code>language</code> attribute on a <code>script</code> element if its
        value is an <a>ASCII case-insensitive</a> match for the string "<code>JavaScript</code>" and
        if there is no <code>type</code> attribute or there is and its value is an <a>ASCII
        case-insensitive</a> match for the string "<code>text/javascript</code>".
     * The presence of a <code>name</code> attribute on an <code>a</code> element, if its value is
        not the empty string.
     * The presence of a <code>maxlength</code> attribute on an <code>input</code> element whose
        <code>type</code> attribute is in the <a>Number</a> state.
     * The presence of a <code>size</code> attribute on an <code>input</code> element whose
        <code>type</code> attribute is in the <a>Number</a> state.

    Conformance checkers must distinguish between pages that have no conformance errors and have
    none of these obsolete features, and pages that have no conformance errors but do have some of
    these obsolete features.

    <p class="example">
      For example, a validator could report some pages as "Valid HTML" and others as
      "Valid HTML with warnings".
    </p>
  </div>

<h3 id="non-conforming-features">Non-conforming features</h3>

  Elements in the following list are entirely obsolete, and must not be used by authors:

  : <code>applet</code>
  :: Use <code>embed</code> or <code>object</code> instead.

  : <dfn><code>acronym</code></dfn>
  :: Use <code>abbr</code> instead.

  : <dfn><code>bgsound</code></dfn>
  :: Use <code>audio</code> instead.

  : <dfn><code>dir</code></dfn>
  :: Use <code>ul</code> instead.

  : <code>frame</code>
  : <code>frameset</code>
  : <dfn><code>noframes</code></dfn>
  :: Either use <code>iframe</code> and CSS instead, or use server-side includes to generate
      complete pages with the various invariant parts merged in.

  : <dfn><code>isindex</code></dfn>
  :: Use an explicit <code>form</code> and <a>text field</a> combination instead.

  : <dfn><code>listing</code></dfn>
  :: Use <code>pre</code> and <code>code</code> instead.

  : <dfn><code>nextid</code></dfn>
  :: Use GUIDs instead.

  : <dfn><code>noembed</code></dfn>
  :: Use <code>object</code> instead of <code>embed</code> when fallback is necessary.

  : <dfn><code>plaintext</code></dfn>
  :: Use the "<code>text/plain</code>" <a>MIME type</a> instead.

  : <dfn><code>rb</code></dfn>
  : <dfn><code>rtc</code></dfn>
  :: Providing the ruby base directly inside the <code>ruby</code> element or using nested
      <code>ruby</code> elements is sufficient.

  : <dfn><code>strike</code></dfn>
  :: Use <code>del</code> instead if the element is marking an edit, otherwise use <code>s</code>
      instead.

  : <dfn><code>xmp</code></dfn>
  :: Use <code>pre</code> and <code>code</code> instead, and escape "<code>&lt;</code>" and
      "<code>&amp;</code>" characters as "<code>&amp;lt;</code>" and "<code>&amp;amp;</code>"
      respectively.

  : <dfn><code>basefont</code></dfn>
  : <dfn><code>big</code></dfn>
  : <dfn><code>blink</code></dfn>
  : <dfn><code>center</code></dfn>
  : <dfn><code>font</code></dfn>
  : <code>marquee</code>
  : <dfn><code>multicol</code></dfn>
  : <dfn><code>nobr</code></dfn>
  : <dfn><code>spacer</code></dfn>
  : <dfn><code>tt</code></dfn>
  :: Use appropriate elements or CSS instead.

      Where the <code>tt</code> element would have been used for marking up keyboard input,
      consider the <code>kbd</code> element; for variables, consider the <code>var</code> element;
      for computer code, consider the <code>code</code> element; and for computer output, consider
      the <code>samp</code> element.

      Similarly, if the <code>big</code> element is being used to denote a heading, consider using
      the <code>h1</code> element; if it is being used for marking up important passages, consider
      the <code>strong</code> element; and if it is being used for highlighting text for reference
      purposes, consider the <code>mark</code> element.

      See also the <a>text-level semantics usage summary</a> for more suggestions with examples.

  <hr />

  The following attributes are obsolete (though the elements are still part of the language), and
  must not be used by authors:

  : <dfn><code>charset</code></dfn> on <code>a</code> elements
  : <dfn><code>charset</code></dfn> on <code>link</code> elements
  :: Use an HTTP <code>Content-Type</code> header on the linked resource instead.

  : <dfn><code>coords</code></dfn> on <code>a</code> elements
  : <dfn><code>shape</code></dfn> on <code>a</code> elements
  :: Use <code>area</code> instead of <code>a</code> for image maps.

  : <dfn><code>methods</code></dfn> on <code>a</code> elements
  : <dfn><code>methods</code></dfn> on <code>link</code> elements
  :: Use the HTTP OPTIONS feature instead.

  : <dfn><code>name</code></dfn> on <code>a</code> elements (except as noted in the previous
      section)
  : <dfn><code>name</code></dfn> on <code>embed</code> elements
  : <dfn><code>name</code></dfn> on <code>img</code> elements
  : <dfn><code>name</code></dfn> on <code>option</code> elements
  :: Use the <code>id</code> attribute instead.

  : <dfn><code>rev</code></dfn> on <code>a</code> elements
  : <dfn><code>rev</code></dfn> on <code>link</code> elements
  :: Use the <code>rel</code> attribute instead, with an opposite term. (For example, instead of
      <code>rev="made"</code>, use <code>rel="author"</code>.)

  : <dfn><code>urn</code></dfn> on <code>a</code> elements
  : <dfn><code>urn</code></dfn> on <code>link</code> elements
  :: Specify the preferred persistent identifier using the <code>href</code> attribute instead.

  : <dfn><code>accept</code></dfn> on <code>form</code> elements
  :: Use the <code>accept</code> attribute directly on the <code>input</code> elements instead.

  : <dfn><code>hreflang</code></dfn> on <code>area</code> elements
  : <dfn><code>type</code></dfn> on <code>area</code> elements
  :: These attributes do not do anything useful, and for historical reasons there are no
      corresponding IDL attributes on <code>area</code> elements. Omit them altogether.

  : <dfn><code>nohref</code></dfn> on <code>area</code> elements
  :: Omitting the <code>href</code> attribute is sufficient; the <code>nohref</code> attribute is
      unnecessary. Omit it altogether.

  : <dfn><code>profile</code></dfn> on <code>head</code> elements
  :: When used for declaring which <code>meta</code> terms are used in the document, unnecessary;
      omit it altogether, and <a>register the names</a>.
  :: When used for triggering specific user agent behaviors: use a <code>link</code> element
      instead.

  : <dfn><code>version</code></dfn> on <code>html</code> elements
  :: Unnecessary. Omit it altogether.

  : <dfn><code>ismap</code></dfn> on <code>input</code> elements
  :: Unnecessary. Omit it altogether. All <code>input</code> elements with a <code>type</code>
      attribute in the <a>Image Button</a> state are processed as server-side image maps.

  : <dfn><code>usemap</code></dfn> on <code>input</code> elements
  :: Use <code>img</code> instead of <code>input</code> for image maps.

  : <dfn><code>longdesc</code></dfn> on <code>iframe</code> elements
  : <dfn><code>longdesc</code></dfn> on <code>img</code> elements
  :: Use a regular <code>a</code> element to link to the description, or (in the case of images) use
      an <a>image map</a> to provide a link from the image to the image's description.

  : <dfn><code>lowsrc</code></dfn> on <code>img</code> elements
  :: Use a progressive JPEG image (given in the <code>src</code> attribute), instead of using two
      separate images.

  : <dfn><code>target</code></dfn> on <code>link</code> elements
  :: Unnecessary. Omit it altogether.

  : <dfn><code>scheme</code></dfn> on <code>meta</code> elements
  :: Use only one scheme per field, or make the scheme declaration part of the value.

  : <dfn><code>archive</code></dfn> on <code>object</code> elements
  : <dfn><code>classid</code></dfn> on <code>object</code> elements
  : <dfn><code>code</code></dfn> on <code>object</code> elements
  : <dfn><code>codebase</code></dfn> on <code>object</code> elements
  : <dfn><code>codetype</code></dfn> on <code>object</code> elements
  :: Use the <code>data</code> and <code>type</code> attributes to invoke <a>plugins</a>. To set
      parameters with these names in particular, the <code>param</code> element can be used.

  : <dfn><code>declare</code></dfn> on <code>object</code> elements
  :: Repeat the <code>object</code> element completely each time the resource is to be reused.

  : <dfn><code>standby</code></dfn> on <code>object</code> elements
  :: Optimize the linked resource so that it loads quickly or, at least, incrementally.

  : <dfn><code>type</code></dfn> on <code>param</code> elements
  : <dfn><code>valuetype</code></dfn> on <code>param</code> elements
  :: Use the <code>name</code> and <code>value</code> attributes without declaring value types.

  : <dfn><code>language</code></dfn> on <code>script</code> elements (except as noted in the
      previous section)
  :: Use the <code>type</code> attribute instead.

  : <dfn><code>event</code></dfn> on <code>script</code> elements
  : <dfn><code>for</code></dfn> on <code>script</code> elements
  :: Use DOM events mechanisms to register event listeners. [[!DOM]]

  : <dfn><code>media</code></dfn> on <code>source</code> elements
  :: Use script to select the media resource(s) to use.

  : <dfn><code>datapagesize</code></dfn> on <code>table</code> elements
  :: Unnecessary. Omit it altogether.

  : <dfn><code>summary</code></dfn> on <code>table</code> elements
  :: Use one of the <a>techniques for describing tables</a> given in the <code>table</code> section
      instead.

  : <dfn><code>abbr</code></dfn> on <code>td</code> elements
  :: Use text that begins in an unambiguous and terse manner, and include any more elaborate text
      after that. The <code>title</code> attribute can also be useful in including more detailed
      text, so that the cell's contents can be made terse. If it's a heading, use <code>th</code>
      (which has an <code>abbr</code> attribute).

  : <dfn><code>axis</code></dfn> on <code>td</code> and <code>th</code> elements
  :: Use the <code>scope</code> attribute on the relevant <code>th</code>.

  : <dfn><code>scope</code></dfn> on <code>td</code> elements
  :: Use <code>th</code> elements for heading cells.

  : <dfn><code>datasrc</code></dfn> on <code>a</code>, <code>applet</code>, <code>button</code>,
      <code>div</code>, <code>frame</code>, <code>iframe</code>, <code>img</code>,
      <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>,
      <code>object</code>, <code>option</code>, <code>select</code>, <code>span</code>,
      <code>table</code>, and <code>textarea</code> elements
  : <dfn><code>datafld</code></dfn> on <code>a</code>, <code>applet</code>, <code>button</code>,
      <code>div</code>, <code>fieldset</code>, <code>frame</code>, <code>iframe</code>,
      <code>img</code>, <code>input</code>, <code>label</code>, <code>legend</code>,
      <code>marquee</code>, <code>object</code>, <code>param</code>, <code>select</code>,
      <code>span</code>, and <code>textarea</code> elements
  : <dfn><code>dataformatas</code></dfn> on <code>button</code>, <code>div</code>,
      <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>,
      <code>object</code>, <code>option</code>, <code>select</code>, <code>span</code>, and
      <code>table</code> elements
  :: Use script and a mechanism such as <code>XMLHttpRequest</code> to populate the page
      dynamically. [[!XHR]]

  : <dfn><code>alink</code></dfn> on <code>body</code> elements
  : <dfn><code>bgcolor</code></dfn> on <code>body</code> elements
  : <dfn><code>bottommargin</code></dfn> on <code>body</code> elements
  : <dfn><code>leftmargin</code></dfn> on <code>body</code> elements
  : <dfn><code>link</code></dfn> on <code>body</code> elements
  : <dfn><code>marginheight</code></dfn> on <code>body</code> elements
  : <dfn><code>marginwidth</code></dfn> on <code>body</code> elements
  : <dfn><code>rightmargin</code></dfn> on <code>body</code> elements
  : <dfn><code>text</code></dfn> on <code>body</code> elements
  : <dfn><code>margintop</code></dfn> on <code>body</code> elements
  : <dfn><code>vlink</code></dfn> on <code>body</code> elements
  : <dfn><code>clear</code></dfn> on <code>br</code> elements
  : <dfn><code>align</code></dfn> on <code>caption</code> elements
  : <dfn><code>align</code></dfn> on <code>col</code> elements
  : <dfn><code>char</code></dfn> on <code>col</code> elements
  : <dfn><code>charoff</code></dfn> on <code>col</code> elements
  : <dfn><code>valign</code></dfn> on <code>col</code> elements
  : <dfn><code>width</code></dfn> on <code>col</code> elements
  : <dfn><code>align</code></dfn> on <code>div</code> elements
  : <dfn><code>compact</code></dfn> on <code>dl</code> elements
  : <dfn><code>align</code></dfn> on <code>embed</code> elements
  : <dfn><code>hspace</code></dfn> on <code>embed</code> elements
  : <dfn><code>vspace</code></dfn> on <code>embed</code> elements
  : <dfn><code>align</code></dfn> on <code>hr</code> elements
  : <dfn><code>color</code></dfn> on <code>hr</code> elements
  : <dfn><code>noshade</code></dfn> on <code>hr</code> elements
  : <dfn><code>size</code></dfn> on <code>hr</code> elements
  : <dfn><code>width</code></dfn> on <code>hr</code> elements
  : <dfn><code>align</code></dfn> on <code>h1</code>&mdash;<code>h6</code> elements
  : <dfn><code>align</code></dfn> on <code>iframe</code> elements
  : <dfn><code>allowtransparency</code></dfn> on <code>iframe</code> elements
  : <dfn><code>frameborder</code></dfn> on <code>iframe</code> elements
  : <dfn><code>framespacing</code></dfn> on <code>iframe</code> elements
  : <dfn><code>hspace</code></dfn> on <code>iframe</code> elements
  : <dfn><code>marginheight</code></dfn> on <code>iframe</code> elements
  : <dfn><code>marginwidth</code></dfn> on <code>iframe</code> elements
  : <dfn><code>scrolling</code></dfn> on <code>iframe</code> elements
  : <dfn><code>vspace</code></dfn> on <code>iframe</code> elements
  : <dfn><code>align</code></dfn> on <code>input</code> elements
  : <dfn><code>border</code></dfn> on <code>input</code> elements
  : <dfn><code>hspace</code></dfn> on <code>input</code> elements
  : <dfn><code>vspace</code></dfn> on <code>input</code> elements
  : <dfn><code>align</code></dfn> on <code>img</code> elements
  : <dfn><code>border</code></dfn> on <code>img</code> elements (except as noted in the previous
      section)
  : <dfn><code>hspace</code></dfn> on <code>img</code> elements
  : <dfn><code>vspace</code></dfn> on <code>img</code> elements
  : <dfn><code>align</code></dfn> on <code>legend</code> elements
  : <dfn><code>type</code></dfn> on <code>li</code> elements
  : <dfn><code>compact</code></dfn> on <code>menu</code> elements
  : <dfn><code>align</code></dfn> on <code>object</code> elements
  : <dfn><code>border</code></dfn> on <code>object</code> elements
  : <dfn><code>hspace</code></dfn> on <code>object</code> elements
  : <dfn><code>vspace</code></dfn> on <code>object</code> elements
  : <dfn><code>compact</code></dfn> on <code>ol</code> elements
  : <dfn><code>align</code></dfn> on <code>p</code> elements
  : <dfn><code>width</code></dfn> on <code>pre</code> elements
  : <dfn><code>align</code></dfn> on <code>table</code> elements
  : <dfn><code>bgcolor</code></dfn> on <code>table</code> elements
  : <dfn><code>border</code></dfn> on <code>table</code> elements
  : <dfn><code>bordercolor</code></dfn> on <code>table</code> elements
  : <dfn><code>cellpadding</code></dfn> on <code>table</code> elements
  : <dfn><code>cellspacing</code></dfn> on <code>table</code> elements
  : <dfn><code>frame</code></dfn> on <code>table</code> elements
  : <dfn><code>height</code></dfn> on <code>table</code> elements
  : <dfn><code>rules</code></dfn> on <code>table</code> elements
  : <dfn><code>width</code></dfn> on <code>table</code> elements
  : <dfn><code>align</code></dfn> on <code>tbody</code>, <code>thead</code>, and <code>tfoot</code>
      elements
  : <dfn><code>char</code></dfn> on <code>tbody</code>, <code>thead</code>, and <code>tfoot</code>
      elements
  : <dfn><code>charoff</code></dfn> on <code>tbody</code>, <code>thead</code>, and
      <code>tfoot</code> elements
  : <dfn><code>valign</code></dfn> on <code>tbody</code>, <code>thead</code>, and <code>tfoot</code>
      elements
  : <dfn><code>align</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>bgcolor</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>char</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>charoff</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>height</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>nowrap</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>valign</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>width</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>align</code></dfn> on <code>tr</code> elements
  : <dfn><code>bgcolor</code></dfn> on <code>tr</code> elements
  : <dfn><code>char</code></dfn> on <code>tr</code> elements
  : <dfn><code>charoff</code></dfn> on <code>tr</code> elements
  : <dfn><code>height</code></dfn> on <code>tr</code> elements
  : <dfn><code>valign</code></dfn> on <code>tr</code> elements
  : <dfn><code>compact</code></dfn> on <code>ul</code> elements
  : <dfn><code>type</code></dfn> on <code>ul</code> elements
  : <dfn><code>background</code></dfn> on <code>body</code>, <code>table</code>, <code>thead</code>,
      <code>tbody</code>, <code>tfoot</code>, <code>tr</code>, <code>td</code>, and <code>th</code>
      elements
  :: Use CSS instead.

  <hr />

  The <code>border</code> attribute on the <code>table</code> element can be used to provide basic
  fallback styling for the purpose of making tables legible in browsing environments where CSS
  support is limited or absent, such as text-based browsers, WYSIWYG editors, and in situations
  where CSS support is disabled or the style sheet is lost. Only the empty string and the value
  "<code>1</code>" may be used as <code>border</code> values for this purpose. Other values are
  considered obsolete. To regulate the thickness of such borders, authors should instead use CSS.

  <div class="impl">

<h3 id="requirements-for-implementations">Requirements for implementations</h3>

  <h4 id="the-applet-element">The <dfn><code>applet</code></dfn> element</h4>

  <p class="critical">
    This feature is in the process of being removed from the Web platform. (This is a long process
    that takes many years.) Using the <code>applet</code> element at this time is highly
    discouraged.
  </p>

  The <code>applet</code> element is a Java-specific variant of the <code>embed</code> element.
  The <code>applet</code> element is now obsoleted so that all extension frameworks (Java, .NET,
  Flash, etc) are handled in a consistent manner.

  When the element matches any of the following conditions, it <a>represents</a> its contents:

  * The element is still in the <a>stack of open elements</a> of an <a>HTML parser</a> or
      <a>XML parser</a>.
  * The element is not <a>in a <code>Document</code></a>.
  * The element's <a>node document</a> is not <a>fully active</a>.
  * The element's <a>node document</a>'s <a>active sandboxing flag set</a> has its <a>sandboxed
    plugins browsing context flag</a> set.
  * The element has an ancestor <a>media element</a>.
  * The element has an ancestor <code>object</code> element that is <em>not</em> showing its
    <a>fallback content</a>.
  * No Java Language runtime <a>plugin</a> is available.
  * A Java runtime <a>plugin</a> is available but it is disabled.

  Otherwise, the user agent should instantiate a Java Language runtime <a>plugin</a>, and should
  pass the names and values of all the attributes on the element, in the order they were added to
  the element, with the attributes added by the parser being ordered in source order, and then a
  parameter named "PARAM" whose value is null, and then all the names and values of
  <a>parameters</a> given by <code>param</code> elements that are children of the
  <code>applet</code> element, in <a>tree order</a>, to the <a>plugin</a> used. If the <a>plugin</a>
  supports a scriptable interface, the <code>HTMLAppletElement</code> object representing the
  element should expose that interface. The <code>applet</code> element <a>represents</a> the
  <a>plugin</a>.

  <p class="note">
    The <code>applet</code> element is unaffected by the CSS 'display' property. The
    Java Language runtime is instantiated even if the element is hidden with a 'display:none' CSS
    style.
  </p>

  The <code>applet</code> element must implement the <code>HTMLAppletElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLAppletElement : HTMLElement {
      attribute DOMString align;
      attribute DOMString alt;
      attribute DOMString archive;
      attribute DOMString code;
      attribute DOMString codeBase;
      attribute DOMString height;
      attribute unsigned long hspace;
      attribute DOMString name;
      attribute DOMString _object; // the underscore is not part of the identifier
      attribute unsigned long vspace;
      attribute DOMString width;
    };
  </pre>

  The <dfn><code>align</code></dfn>, <dfn><code>alt</code></dfn>, <dfn><code>archive</code></dfn>,
  <dfn><code>code</code></dfn>, <dfn><code>height</code></dfn>, <dfn><code>hspace</code></dfn>,
  <dfn><code>name</code></dfn>, <dfn><code>object</code></dfn>, <dfn><code>vspace</code></dfn>, and
  <dfn><code>width</code></dfn> IDL attributes must <a>reflect</a> the respective content attributes
  of the same name. For the purposes of reflection, the <code>applet</code> element's
  <code>object</code> content attribute is defined as containing a <a>URL</a>.

  The <dfn><code>codeBase</code></dfn> IDL attribute must <a>reflect</a> the <code>codebase</code>
  content attribute, which for the purposes of reflection is defined as containing a <a>URL</a>.

<h4 id="the-marquee-element">The <dfn><code>marquee</code></dfn> element</h4>

  The <code>marquee</code> element is a presentational element that animates content. CSS
  transitions and animations are a more appropriate mechanism. [[!CSS3-ANIMATIONS]]
  [[!CSS3-TRANSITIONS]]

  The <a>task source</a> for tasks mentioned in this section is the
  <a>DOM manipulation task source</a>.

  The <code>marquee</code> element must implement the <code>HTMLMarqueeElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLMarqueeElement : HTMLElement {
      attribute DOMString behavior;
      attribute DOMString bgColor;
      attribute DOMString direction;
      attribute DOMString height;
      attribute unsigned long hspace;
      attribute long loop;
      attribute unsigned long scrollAmount;
      attribute unsigned long scrollDelay;
      attribute boolean trueSpeed;
      attribute unsigned long vspace;
      attribute DOMString width;

      attribute EventHandler onbounce;
      attribute EventHandler onfinish;
      attribute EventHandler onstart;

      void start();
      void stop();
    };
  </pre>

  A <code>marquee</code> element can be <dfn>turned on</dfn> or <dfn>turned off</dfn>. When it is
  created, it is <a>turned on</a>.

  When the <dfn><code>start()</code></dfn> method is called, the <code>marquee</code> element must
  be <a>turned on</a>.

  When the <dfn><code>stop()</code></dfn> method is called, the <code>marquee</code> element must be
  <a>turned off</a>.

  When a <code>marquee</code> element is created, the user agent must <a>queue a task</a> to
  <a>fire a simple event</a> named <code>start</code> at the element.

  <hr />

  The <dfn><code>behavior</code></dfn> content attribute on <code>marquee</code> elements is an
  <a>enumerated attribute</a> with the following keywords (all non-conforming):

  <table>
    <thead>
      <tr>
        <th>Keyword</th>
        <th>State</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>scroll</code></td>
        <td><dfn>scroll</dfn></td>
      </tr>
      <tr>
        <td><code>slide</code></td>
        <td><dfn>slide</dfn></td>
      </tr>
      <tr>
        <td><code>alternate</code></td>
        <td><dfn>alternate</dfn></td>
      </tr>
    </tbody>
  </table>

  The <i>missing value default</i> is the <a>scroll</a> state.

  <hr />

  The <dfn><code>direction</code></dfn> content attribute on <code>marquee</code> elements is an
  <a>enumerated attribute</a> with the following keywords (all non-conforming):

  <table>
    <thead>
      <tr>
        <th>Keyword</th>
        <th>State</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>left</code></td>
        <td><dfn>left</dfn></td>
      </tr>
      <tr>
        <td><code>right</code></td>
        <td><dfn>right</dfn></td>
      </tr>
      <tr>
        <td><code>up</code></td>
        <td><dfn>up</dfn></td>
      </tr>
      <tr>
        <td><code>down</code></td>
        <td><dfn>down</dfn></td>
      </tr>
    </tbody>
  </table>

  The <i>missing value default</i> is the <a>left</a> state.

  <hr />

  The <dfn><code>truespeed</code></dfn> content attribute on <code>marquee</code> elements is a
  <a>boolean attribute</a>.

  <hr />

  A <code>marquee</code> element has a <dfn>marquee scroll interval</dfn>, which is obtained as
  follows:

  1. If the element has a <code>scrolldelay</code> attribute, and parsing its value using
      the <a>rules for parsing non-negative integers</a> does not return an error, then let
      <var>delay</var> be the parsed value. Otherwise, let <var>delay</var> be 85.
  2. If the element does not have a <code>truespeed</code> attribute, and the <var>delay</var> value
      is less than 60, then let <var>delay</var> be 60 instead.
  3. The <a>marquee scroll interval</a> is <var>delay</var>, interpreted in milliseconds.

  <hr />

  A <code>marquee</code> element has a <dfn>marquee scroll distance</dfn>, which, if the element
  has a <code>scrollamount</code> attribute, and parsing its value using the <a>rules for parsing
  non-negative integers</a> does not return an error, is the parsed value interpreted in CSS pixels,
  and otherwise is 6 CSS pixels.

  <hr />

  A <code>marquee</code> element has a <dfn>marquee loop count</dfn>, which, if the element has a
  <dfn><code>loop</code></dfn> attribute, and parsing its value using the <a>rules for parsing
  integers</a> does not return an error or a number less than 1, is the parsed value, and otherwise
  is -1.

  The <dfn><code>loop</code></dfn> IDL attribute, on getting, must return the element's <a>marquee
  loop count</a>; and on setting, if the new value is different than the element's <a>marquee loop
  count</a> and either greater than zero or equal to -1, must set the element's
  <code>loop</code> content attribute (adding it if necessary) to the <a>valid integer</a> that
  represents the new value. (Other values are ignored.)

  A <code>marquee</code> element also has a <dfn>marquee current loop index</dfn>, which is zero
  when the element is created.

  The rendering layer will occasionally <dfn>increment the marquee current loop index</dfn>, which
  must cause the following steps to be run:

  1. If the <a>marquee loop count</a> is -1, then abort these steps.
  2. Increment the <a>marquee current loop index</a> by one.
  3. If the <a>marquee current loop index</a> is now equal to or greater than the element's
      <a>marquee loop count</a>, <a>turn off</a> the <code>marquee</code> element and <a>queue a
      task</a> to <a>fire a simple event</a> named <code>finish</code> at the
      <code>marquee</code> element.

      Otherwise, if the <code>behavior</code> attribute is in the
      <a>alternate</a> state, then <a>queue a
      task</a> to <a>fire a simple event</a> named <code>bounce</code>
      at the <code>marquee</code> element.

      Otherwise, <a>queue a task</a> to <a>fire a simple event</a> named <code>start</code> at the
      <code>marquee</code> element.

  <hr />

  The following are the <a>event handlers</a> (and their corresponding
  <a>event handler event types</a>) that must be supported, as
  <a>event handler content attributes</a> and <a>event handler IDL attributes</a>, by
    <code>marquee</code> elements:

  <table>
    <thead>
      <tr>
        <th><a>Event handler</a></th>
        <th><a>Event handler event type</a></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><dfn><code>onbounce</code></dfn></td>
        <td><code>bounce</code></td>
      </tr>
      <tr>
        <td><dfn><code>onfinish</code></dfn></td>
        <td><code>finish</code></td>
      </tr>
      <tr>
        <td><dfn><code>onstart</code></dfn></td>
        <td><code>start</code></td>
      </tr>
    </tbody>
  </table>

  <hr />

  The <dfn><code>behavior</code></dfn>, <dfn><code>direction</code></dfn>,
  <dfn><code>height</code></dfn>, <dfn><code>hspace</code></dfn>, <dfn><code>vspace</code></dfn>,
  and <dfn><code>width</code></dfn> IDL attributes must <a>reflect</a> the respective content
  attributes of the same name.

  The <dfn><code>bgColor</code></dfn> IDL attribute must <a>reflect</a> the <code>bgcolor</code>
  content attribute.

  The <dfn><code>scrollAmount</code></dfn> IDL attribute must <a>reflect</a> the
  <code>scrollamount</code> content attribute. The default value is 6.

  The <dfn><code>scrollDelay</code></dfn> IDL attribute must <a>reflect</a> the
  <code>scrolldelay</code> content attribute. The default value is 85.

  The <dfn><code>trueSpeed</code></dfn> IDL attribute must <a>reflect</a> the <code>truespeed</code>
  content attribute.

<h4 id="frames">Frames</h4>

  The <dfn><code>frameset</code></dfn> element acts as <a>the body element</a> in documents that use
  frames.

  The <code>frameset</code> element must implement the <code>HTMLFrameSetElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLFrameSetElement : HTMLElement {
      attribute DOMString cols;
      attribute DOMString rows;
    };
    HTMLFrameSetElement implements WindowEventHandlers;
  </pre>

  The <dfn><code>cols</code></dfn> and <dfn><code>rows</code></dfn> IDL attributes of the
  <code>frameset</code> element must <a>reflect</a> the respective content attributes of the same
  name.

  The <code>frameset</code> element exposes as <a>event handler content attributes</a> a number of
  the <a>event handlers</a> of the <code>Window</code> object. It also mirrors their <a>event
  handler IDL attributes</a>.

  The <code>onblur</code>, <code>onerror</code>, <code>onfocus</code>, <code>onload</code>,
  <code>onresize</code>, and <code>onscroll</code> <a>event handlers</a> of the <code>Window</code>
  object, exposed on the <code>frameset</code> element, replace the generic <a>event handlers</a>
  with the same names normally supported by <a>HTML elements</a>.

  <hr />

  The <dfn><code>frame</code></dfn> element defines a <a>nested browsing context</a> similar to the
  <code>iframe</code> element, but rendered within a <code>frameset</code> element.

  A <code>frame</code> element is said to be an <dfn>active <code>frame</code> element</dfn> when
  it is <a>in a <code>Document</code></a>.

  When a <code>frame</code> element is created as an <a>active <code>frame</code> element</a>, or
  becomes an <a>active <code>frame</code> element</a> after not having been one, the user agent must
  <a>create</a> a <a>nested browsing context</a>, and then <a>process the <code>frame</code>
  attributes</a> for the first time.

  When a <code>frame</code> element stops being an <a>active <code>frame</code> element</a>, the
  user agent must <a>discard</a> the <a>nested browsing context</a>.

  Whenever a <code>frame</code> element with a <a>nested browsing context</a> has its
  <code>src</code> attribute set, changed, or removed, the user agent must <a>process the
  <code>frame</code> attributes</a>.

  When the user agent is to <dfn>process the <code>frame</code> attributes</dfn>, it must run the
  first appropriate steps from the following list:

  <dl class="switch">
    <dt>
      If the element has no <code>src</code> attribute specified, and the user agent is processing
      the <code>frame</code>'s attributes for the first time
    </dt>
    <dd>
      <a>Queue a task</a> to <a>fire a simple event</a> named <code>load</code> at the
      <code>frame</code> element.
    </dd>

    <dt>Otherwise</dt>
    <dd>
      1. If the value of the <code>src</code> attribute is the empty string, let <var>url</var> be
          the string "<code>about:blank</code>".

          Otherwise, <a>resolve</a> the value of the <code>src</code> attribute, relative to the
          <code>frame</code> element.

          If that is not successful, then let <var>url</var> be the string
          "<code>about:blank</code>". Otherwise, let <var>url</var> be the resulting
          <a>absolute URL</a>.
      2. <a>Navigate</a> the element's <a>child browsing context</a>to <var>url</var>.

    </dd>
  </dl>

  Any <a>navigation</a> required of the user agent in the <a>process the <code>frame</code>
  attributes</a> algorithm must be completed as an <a>explicit self-navigation override</a> and with
  the <code>frame</code> element's <a>node document</a>'s <a>browsing context</a> as the <a>source
  browsing context</a>.

  Furthermore, if the <a>active document</a> of the element's <a>child browsing context</a> before
  such a <a>navigation</a> was not <a>completely loaded</a> at the time of the new
  <a>navigation</a>, then the <a>navigation</a> must be completed  with <a>replacement enabled</a>.

  Similarly, if the <a>child browsing context</a>'s <a>session history</a> contained only one
  <code>Document</code> when the <a>process the <code>frame</code> attributes</a> algorithm was
  invoked, and that was the <code>about:blank</code> <code>Document</code> created when the <a>child
  browsing context</a> was created, then any <a>navigation</a> required of the user agent in that
  algorithm must be completed with <a>replacement enabled</a>.

  When a <code>Document</code> in a <code>frame</code> is marked as <a>completely loaded</a>, the
  user agent must <a>queue a task</a> to <a>fire a simple event</a> named <code>load</code> at the
  <code>frame</code> element.

  The <a>task source</a> for the <a>tasks</a> above is the <a>DOM manipulation task source</a>.

  When a <code>frame</code> element's <a>nested browsing context</a>'s <a>active document</a> is not
  <a>ready for post-load tasks</a>, and when anything is <a>delaying the load event</a> of the
  <code>frame</code> element's <a>browsing context</a>'s <a>active document</a>, and when the
  <code>frame</code> element's <a>browsing context</a> is in the <a>delaying <code>load</code>
  events mode</a>, the <code>frame</code> must <a>delay the load event</a> of its document.

  When the browsing context is created, if a <code>name</code> attribute is present, the
  <a>browsing context name</a> must be set to the value of this attribute; otherwise, the
  <a>browsing context name</a> must be set to the empty string.

  Whenever the <code>name</code> attribute is set, the nested <a>browsing context</a>'s <a>name</a>
  must be changed to the new value. If the attribute is removed, the <a>browsing context name</a>
  must be set to the empty string.

  The <code>frame</code> element must implement the <code>HTMLFrameElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLFrameElement : HTMLElement {
      attribute DOMString name;
      attribute DOMString scrolling;
      attribute DOMString src;
      attribute DOMString frameBorder;
      attribute DOMString longDesc;
      attribute boolean noResize;
      readonly attribute Document? contentDocument;
      readonly attribute WindowProxy? contentWindow;

      [TreatNullAs=EmptyString] attribute DOMString marginHeight;
      [TreatNullAs=EmptyString] attribute DOMString marginWidth;
    };
  </pre>

  The <dfn><code>name</code></dfn>, <dfn><code>scrolling</code></dfn>, and
  <dfn><code>src</code></dfn> IDL attributes of the <code>frame</code> element must <a>reflect</a>
  the respective content attributes of the same name. For the purposes of reflection, the
  <code>frame</code> element's <code>src</code> content attribute is defined as containing a
  <a>URL</a>.

  The <dfn><code>frameBorder</code></dfn> IDL attribute of the <code>frame</code> element must
  <a>reflect</a> the element's <code>frameborder</code> content attribute.

  The <dfn><code>longDesc</code></dfn> IDL attribute of the <code>frame</code> element must
  <a>reflect</a> the element's <code>longdesc</code> content attribute, which for the purposes of
  reflection is defined as containing a <a>URL</a>.

  The <dfn><code>noResize</code></dfn> IDL attribute of the <code>frame</code> element must
  <a>reflect</a> the element's <code>noresize</code> content attribute.

  The <dfn><code>contentDocument</code></dfn> IDL attribute of the <code>frame</code> element must
  return the <code>Document</code> object of the <a>active document</a> of the <code>frame</code>
  element's <a>nested browsing context</a>, if any and if its <a>effective script origin</a> is the
  <a>same origin</a> as the <a>effective script origin</a> specified by the <a>incumbent settings
  object</a>, or null otherwise.

  The <dfn><code>contentWindow</code></dfn> IDL attribute must return the <code>WindowProxy</code>
  object of the <code>frame</code> element's <a>nested browsing context</a>.

  The <dfn><code>marginHeight</code></dfn> IDL attribute of the <code>frame</code> element must
  <a>reflect</a> the element's <code>marginheight</code> content attribute.

  The <dfn><code>marginWidth</code></dfn> IDL attribute of the <code>frame</code> element must
  <a>reflect</a> the element's <code>marginwidth</code> content attribute.

<h4 id="other-elements-attributes-and-apis">Other elements, attributes and APIs</h4>

  User agents must treat <code>acronym</code> elements in a manner equivalent to <code>abbr</code>
  elements in terms of semantics and for purposes of rendering.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLAnchorElement {
      attribute DOMString coords;
      attribute DOMString charset;
      attribute DOMString name;
      attribute DOMString rev;
      attribute DOMString shape;
    };
  </pre>

  The <dfn><code>coords</code></dfn>, <dfn><code>charset</code></dfn>, <dfn><code>name</code></dfn>,
  <dfn><code>rev</code></dfn>, and <dfn><code>shape</code></dfn> IDL attributes of the
  <code>a</code> element must <a>reflect</a> the respective content attributes of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLAreaElement {
      attribute boolean noHref;
    };
  </pre>

  The <dfn><code>noHref</code></dfn> IDL attribute of the <code>area</code> element must
  <a>reflect</a> the element's <code>nohref</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLBodyElement {
      [TreatNullAs=EmptyString] attribute DOMString text;
      [TreatNullAs=EmptyString] attribute DOMString link;
      [TreatNullAs=EmptyString] attribute DOMString vLink;
      [TreatNullAs=EmptyString] attribute DOMString aLink;
      [TreatNullAs=EmptyString] attribute DOMString bgColor;
      attribute DOMString background;
    };
  </pre>

  The <dfn><code>text</code></dfn> IDL attribute of the <code>body</code> element must
  <a>reflect</a> the element's <code>text</code> content attribute.

  The <dfn><code>link</code></dfn> IDL attribute of the <code>body</code> element must
  <a>reflect</a> the element's <code>link</code> content attribute.

  The <dfn><code>aLink</code></dfn> IDL attribute of the <code>body</code> element must
  <a>reflect</a> the element's <code>alink</code> content attribute.

  The <dfn><code>vLink</code></dfn> IDL attribute of the <code>body</code> element must
  <a>reflect</a> the element's <code>vlink</code> content attribute.

  The <dfn><code>bgColor</code></dfn> IDL attribute of the <code>body</code> element must
  <a>reflect</a> the element's <code>bgcolor</code> content attribute.

  The <dfn><code>background</code></dfn> IDL attribute of the <code>body</code> element must
  <a>reflect</a> the element's <code>background</code> content attribute. (The
  <code>background</code> content is <em>not</em> defined to contain a <a>URL</a>, despite rules
  regarding its handling in the rendering section above.)

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLBRElement {
      attribute DOMString clear;
    };
  </pre>

  The <dfn><code>clear</code></dfn> IDL attribute of the <code>br</code> element must <a>reflect</a>
  the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableCaptionElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>caption</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableColElement {
      attribute DOMString align;
      attribute DOMString ch;
      attribute DOMString chOff;
      attribute DOMString vAlign;
      attribute DOMString width;
    };
  </pre>

  The <dfn><code>align</code></dfn> and <dfn><code>width</code></dfn> IDL attributes of the
  <code>col</code> element must <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>ch</code></dfn> IDL attribute of the <code>col</code> element must <a>reflect</a>
  the element's <code>char</code> content attribute.

  The <dfn><code>chOff</code></dfn> IDL attribute of the <code>col</code> element must
  <a>reflect</a> the element's <code>charoff</code> content attribute.

  The <dfn><code>vAlign</code></dfn> IDL attribute of the <code>col</code> element must
  <a>reflect</a> the element's <code>valign</code> content attribute.

  <hr />

  User agents must treat <code>dir</code> elements in a manner equivalent to <code>ul</code>
  elements in terms of semantics and for purposes of rendering.

  The <code>dir</code> element must implement the <code>HTMLDirectoryElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLDirectoryElement : HTMLElement {
      attribute boolean compact;
    };
  </pre>

  The <dfn><code>compact</code></dfn> IDL attribute of the <code>dir</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLDivElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>div</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLDListElement {
      attribute boolean compact;
    };
  </pre>

  The <dfn><code>compact</code></dfn> IDL attribute of the <code>dl</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLEmbedElement {
      attribute DOMString align;
      attribute DOMString name;
    };
  </pre>

  The <dfn><code>name</code></dfn> and <dfn><code>align</code></dfn> IDL attributes of the
  <code>embed</code> element must <a>reflect</a> the respective content attributes of the same name.

  <hr />

  The <code>font</code> element must implement the <code>HTMLFontElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLFontElement : HTMLElement {
      [TreatNullAs=EmptyString] attribute DOMString color;
      attribute DOMString face;
      attribute DOMString size;
    };
  </pre>

  The <dfn><code>color</code></dfn>, <dfn><code>face</code></dfn>, and <dfn><code>size</code></dfn>
  IDL attributes of the <code>font</code> element must <a>reflect</a> the respective content
  attributes of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLHeadingElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>h1</code>&ndash;<code>h6</code>
  elements must <a>reflect</a> the content attribute of the same name.

  <hr />

  <p class="note">
    The <dfn><code>profile</code></dfn> IDL attribute on <code>head</code> elements (with the
    <code>HTMLHeadElement</code> interface) is intentionally omitted. Unless so required by
    <a>another applicable specification</a>, implementations would therefore not support this
    attribute. (It is mentioned here as it was defined in a previous version of the DOM
    specifications.)
  </p>

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLHRElement {
      attribute DOMString align;
      attribute DOMString color;
      attribute boolean noShade;
      attribute DOMString size;
      attribute DOMString width;
    };
  </pre>

  The <dfn><code>align</code></dfn>, <dfn><code>color</code></dfn>, <dfn><code>size</code></dfn>,
  and <dfn><code>width</code></dfn> IDL attributes of the <code>hr</code> element must
  <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>noShade</code></dfn> IDL attribute of the <code>hr</code> element must
  <a>reflect</a> the element's <code>noshade</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLHtmlElement {
      attribute DOMString version;
    };
  </pre>

  The <dfn><code>version</code></dfn> IDL attribute of the <code>html</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLIFrameElement {
      attribute DOMString align;
      attribute DOMString scrolling;
      attribute DOMString frameBorder;
      attribute DOMString longDesc;

      [TreatNullAs=EmptyString] attribute DOMString marginHeight;
      [TreatNullAs=EmptyString] attribute DOMString marginWidth;
    };
  </pre>

  The <dfn><code>align</code></dfn> and <dfn><code>scrolling</code></dfn> IDL attributes of the
  <code>iframe</code> element must <a>reflect</a> the respective content attributes of the same
  name.

  The <dfn><code>frameBorder</code></dfn> IDL attribute of the <code>iframe</code> element must
  <a>reflect</a> the element's <code>frameborder</code> content attribute.

  The <dfn><code>longDesc</code></dfn> IDL attribute of the <code>iframe</code> element must
  <a>reflect</a> the element's <code>longdesc</code> content attribute, which for the purposes of
  reflection is defined as containing a <a>URL</a>.

  The <dfn><code>marginHeight</code></dfn> IDL attribute of the <code>iframe</code> element must
  <a>reflect</a> the element's <code>marginheight</code> content attribute.

  The <dfn><code>marginWidth</code></dfn> IDL attribute of the <code>iframe</code> element must
  <a>reflect</a> the element's <code>marginwidth</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLImageElement {
      attribute DOMString name;
      attribute DOMString lowsrc;
      attribute DOMString align;
      attribute unsigned long hspace;
      attribute unsigned long vspace;
      attribute DOMString longDesc;

      [TreatNullAs=EmptyString] attribute DOMString border;
    };
  </pre>

  The <dfn><code>name</code></dfn>, <dfn><code>align</code></dfn>, <dfn><code>border</code></dfn>,
  <dfn><code>hspace</code></dfn>, and <dfn><code>vspace</code></dfn> IDL attributes of the
  <code>img</code> element must <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>longDesc</code></dfn> IDL attribute of the <code>img</code> element must
  <a>reflect</a> the element's <code>longdesc</code> content attribute, which for the purposes of
  reflection is defined as containing a <a>URL</a>.

  The <dfn><code>lowsrc</code></dfn> IDL attribute of the <code>img</code> element must
  <a>reflect</a> the element's <code>lowsrc</code> content attribute, which for the purposes of
  reflection is defined as containing a <a>URL</a>.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLInputElement {
      attribute DOMString align;
      attribute DOMString useMap;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>input</code> element must
  <a>reflect</a> the content attribute of the same name.

  The <dfn><code>useMap</code></dfn> IDL attribute of the <code>input</code> element must
  <a>reflect</a> the element's <code>usemap</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLLegendElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>legend</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLLIElement {
      attribute DOMString type;
    };
  </pre>

  The <dfn><code>type</code></dfn> IDL attribute of the <code>li</code> element must <a>reflect</a>
  the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLLinkElement {
      attribute DOMString charset;
      attribute DOMString rev;
      attribute DOMString target;
    };
  </pre>

  The <dfn><code>charset</code></dfn>, <dfn><code>rev</code></dfn>, and
  <dfn><code>target</code></dfn> IDL attributes of the <code>link</code> element must <a>reflect</a>
  the respective content attributes of the same name.

  <hr />

  User agents must treat <code>listing</code> elements in a manner equivalent to <code>pre</code>
  elements in terms of semantics and for purposes of rendering.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLMenuElement {
      attribute boolean compact;
    };
  </pre>

  The <dfn><code>compact</code></dfn> IDL attribute of the <code>menu</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLMetaElement {
      attribute DOMString scheme;
    };
  </pre>

  User agents may treat the <code>scheme</code> content attribute on the <code>meta</code> element
  as an extension of the element's <code>name</code> content attribute when processing a
  <code>meta</code> element with a <code>name</code> attribute whose value is one that the user
  agent recognizes as supporting the <code>scheme</code> attribute.

  User agents are encouraged to ignore the <code>scheme</code> attribute and instead process the
  value given to the metadata name as if it had been specified for each expected value of the
  <code>scheme</code> attribute.

  <div class="example">
    For example, if the user agent acts on <code>meta</code> elements with <code>name</code>
    attributes having the value "eGMS.subject.keyword", and knows that the <code>scheme</code>
    attribute is used with this metadata name, then it could take the <code>scheme</code> attribute
    into account, acting as if it was an extension of the <code>name</code> attribute. Thus the
    following two <code>meta</code> elements could be treated as two elements giving values for two
    different metadata names, one consisting of a combination of "eGMS.subject.keyword" and "LGCL",
    and the other consisting of a combination of "eGMS.subject.keyword" and "ORLY":

    <pre class="bad" highlight="html">
      &lt;!-- this markup is invalid -->
      &lt;meta name="eGMS.subject.keyword" scheme="LGCL" content="Abandoned vehicles">
      &lt;meta name="eGMS.subject.keyword" scheme="ORLY" content="Mah car: kthxbye">
    </pre>

    The suggested processing of this markup, however, would be equivalent to the following:

    <pre highlight="html">
      &lt;meta name="eGMS.subject.keyword" content="Abandoned vehicles">
      &lt;meta name="eGMS.subject.keyword" content="Mah car: kthxbye">
    </pre>
  </div>

  The <dfn><code>scheme</code></dfn> IDL attribute of the <code>meta</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLObjectElement {
      attribute DOMString align;
      attribute DOMString archive;
      attribute DOMString code;
      attribute boolean declare;
      attribute unsigned long hspace;
      attribute DOMString standby;
      attribute unsigned long vspace;
      attribute DOMString codeBase;
      attribute DOMString codeType;

      [TreatNullAs=EmptyString] attribute DOMString border;
    };
  </pre>

  The <dfn><code>align</code></dfn>, <dfn><code>archive</code></dfn>,
  <dfn><code>border</code></dfn>, <dfn><code>code</code></dfn>, <dfn><code>declare</code></dfn>,
  <dfn><code>hspace</code></dfn>, <dfn><code>standby</code></dfn>, and
  <dfn><code>vspace</code></dfn> IDL attributes of the <code>object</code> element must
  <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>codeBase</code></dfn> IDL attribute of the <code>object</code> element must
  <a>reflect</a> the element's <code>codebase</code> content attribute, which for the purposes of
  reflection is defined as containing a <a>URL</a>.

  The <dfn><code>codeType</code></dfn> IDL attribute of the <code>object</code> element must
  <a>reflect</a> the element's <code>codetype</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLOListElement {
      attribute boolean compact;
    };
  </pre>

  The <dfn><code>compact</code></dfn> IDL attribute of the <code>ol</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLParagraphElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>p</code> element must <a>reflect</a>
  the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLParamElement {
      attribute DOMString type;
      attribute DOMString valueType;
    };
  </pre>

  The <dfn><code>type</code></dfn> IDL attribute of the <code>param</code> element must
  <a>reflect</a> the content attribute of the same name.

  The <dfn><code>valueType</code></dfn> IDL attribute of the <code>param</code> element must
  <a>reflect</a> the element's <code>valuetype</code> content attribute.

  <hr />

  User agents must treat <code>plaintext</code> elements in a manner equivalent to <code>pre</code>
  elements in terms of semantics and for purposes of rendering. (The parser has special behavior for
  this element, though.)

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLPreElement {
      attribute long width;
    };
  </pre>

  The <dfn><code>width</code></dfn> IDL attribute of the <code>pre</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLScriptElement {
      attribute DOMString event;
      attribute DOMString htmlFor;
    };
  </pre>

  The <dfn><code>event</code></dfn> IDL attribute of the <code>script</code> element must reflect
  the element's <code>event</code> content attribute.

  The <dfn><code>htmlFor</code></dfn> IDL attribute of the <code>script</code> element must reflect
  the element's <code>for</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableElement {
      attribute DOMString align;
      attribute DOMString border;
      attribute DOMString frame;
      attribute DOMString rules;
      attribute DOMString summary;
      attribute DOMString width;

      [TreatNullAs=EmptyString] attribute DOMString bgColor;
      [TreatNullAs=EmptyString] attribute DOMString cellPadding;
      [TreatNullAs=EmptyString] attribute DOMString cellSpacing;
    };
  </pre>

  The <dfn><code>align</code></dfn>, <dfn><code>border</code></dfn>, <dfn><code>frame</code></dfn>,
  <dfn><code>summary</code></dfn>, <dfn><code>rules</code></dfn>, and <dfn><code>width</code></dfn>,
  IDL attributes of the <code>table</code> element must <a>reflect</a> the respective content
  attributes of the same name.

  The <dfn><code>bgColor</code></dfn> IDL attribute of the <code>table</code> element must
  <a>reflect</a> the element's <code>bgcolor</code> content attribute.

  The <dfn><code>cellPadding</code></dfn> IDL attribute of the <code>table</code> element must
  <a>reflect</a> the element's <code>cellpadding</code> content attribute.

  The <dfn><code>cellSpacing</code></dfn> IDL attribute of the <code>table</code> element must
  <a>reflect</a> the element's <code>cellspacing</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableSectionElement {
      attribute DOMString align;
      attribute DOMString ch;
      attribute DOMString chOff;
      attribute DOMString vAlign;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>tbody</code>, <code>thead</code>, and
  <code>tfoot</code> elements must <a>reflect</a> the content attribute of the same name.

  The <dfn><code>ch</code></dfn> IDL attribute of the <code>tbody</code>, <code>thead</code>, and
  <code>tfoot</code> elements must <a>reflect</a> the elements' <code>char</code> content
  attributes.

  The <dfn><code>chOff</code></dfn> IDL attribute of the <code>tbody</code>, <code>thead</code>, and
  <code>tfoot</code> elements must <a>reflect</a> the elements' <code>charoff</code> content
  attributes.

  The <dfn><code>vAlign</code></dfn> IDL attribute of the <code>tbody</code>, <code>thead</code>,
  and <code>tfoot</code> element must <a>reflect</a> the elements' <code>valign</code> content
  attributes.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableCellElement {
      attribute DOMString align;
      attribute DOMString axis;
      attribute DOMString height;
      attribute DOMString width;

      attribute DOMString ch;
      attribute DOMString chOff;
      attribute boolean noWrap;
      attribute DOMString vAlign;

      [TreatNullAs=EmptyString] attribute DOMString bgColor;
    };
  </pre>

  The <dfn><code>align</code></dfn>, <dfn><code>axis</code></dfn>, <dfn><code>height</code></dfn>,
  and <dfn><code>width</code></dfn> IDL attributes of the <code>td</code> and <code>th</code>
  elements must <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>ch</code></dfn> IDL attribute of the <code>td</code> and <code>th</code> elements
  must <a>reflect</a> the elements' <code>char</code> content attributes.

  The <dfn><code>chOff</code></dfn> IDL attribute of the <code>td</code> and <code>th</code>
  elements must <a>reflect</a> the elements' <code>charoff</code> content attributes.

  The <dfn><code>noWrap</code></dfn> IDL attribute of the <code>td</code> and <code>th</code>
  elements must <a>reflect</a> the elements' <code>nowrap</code> content attributes.

  The <dfn><code>vAlign</code></dfn> IDL attribute of the <code>td</code> and <code>th</code>
  element must <a>reflect</a> the elements' <code>valign</code> content attributes.

  The <dfn><code>bgColor</code></dfn> IDL attribute of the <code>td</code> and <code>th</code>
  elements must <a>reflect</a> the elements' <code>bgcolor</code> content attributes.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableDataCellElement {
      attribute DOMString abbr;
    };
  </pre>

  The <dfn><code>abbr</code></dfn> IDL attribute of the <code>td</code> element must <a>reflect</a>
  the respective content attributes of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableRowElement {
      attribute DOMString align;
      attribute DOMString ch;
      attribute DOMString chOff;
      attribute DOMString vAlign;

      [TreatNullAs=EmptyString] attribute DOMString bgColor;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>tr</code> element must <a>reflect</a>
  the content attribute of the same name.

  The <dfn><code>ch</code></dfn> IDL attribute of the <code>tr</code> element must <a>reflect</a>
  the element's <code>char</code> content attribute.

  The <dfn><code>chOff</code></dfn> IDL attribute of the <code>tr</code> element must <a>reflect</a>
  the element's <code>charoff</code> content attribute.

  The <dfn><code>vAlign</code></dfn> IDL attribute of the <code>tr</code> element must
  <a>reflect</a> the element's <code>valign</code> content attribute.

  The <dfn><code>bgColor</code></dfn> IDL attribute of the <code>tr</code> element must
  <a>reflect</a> the element's <code>bgcolor</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLUListElement {
      attribute boolean compact;
      attribute DOMString type;
    };
  </pre>

  The <dfn><code>compact</code></dfn> and <dfn><code>type</code></dfn> IDL attributes of the
  <code>ul</code> element must <a>reflect</a> the respective content attributes of the same name.

  <hr />

  User agents must treat <code>xmp</code> elements in a manner equivalent to <code>pre</code>
  elements in terms of semantics and for purposes of rendering. (The parser has special behavior for
  this element though.)

  <hr />

  The <code>blink</code>, <code>bgsound</code>, <code>isindex</code>, <code>multicol</code>,
  <code>nextid</code>, and <code>spacer</code> elements must use the <code>HTMLUnknownElement</code>
  interface.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface Document {
      [TreatNullAs=EmptyString] attribute DOMString fgColor;
      [TreatNullAs=EmptyString] attribute DOMString linkColor;
      [TreatNullAs=EmptyString] attribute DOMString vlinkColor;
      [TreatNullAs=EmptyString] attribute DOMString alinkColor;
      [TreatNullAs=EmptyString] attribute DOMString bgColor;

      [SameObject] readonly attribute HTMLCollection anchors;
      [SameObject] readonly attribute HTMLCollection applets;

      void clear();
      void captureEvents();
      void releaseEvents();

      [SameObject] readonly attribute HTMLAllCollection all;
    };
  </pre>

  The attributes of the <code>Document</code> object listed in the first column of the following
  table must <a>reflect</a> the content attribute on <a>the body element</a> with the name given in
  the corresponding cell in the second column on the same row, if <a>the body element</a> is a
  <code>body</code> element (as opposed to a <code>frameset</code> element). When there is no
  <a>body element</a> or if it is a <code>frameset</code> element, the attributes must instead
  return the empty string on getting and do nothing on setting.

  <table>
    <thead>
      <tr>
        <th> IDL attribute</th>
        <th> Content attribute</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><dfn><code>fgColor</code></dfn></td>
        <td><code>text</code></td>
      </tr>
      <tr>
        <td><dfn><code>linkColor</code></dfn></td>
        <td><code>link</code></td>
      </tr>
      <tr>
        <td><dfn><code>vlinkColor</code></dfn></td>
        <td><code>vlink</code></td>
      </tr>
      <tr>
        <td><dfn><code>alinkColor</code></dfn></td>
        <td><code>alink</code></td>
      </tr>
      <tr>
        <td><dfn><code>bgColor</code></dfn></td>
        <td><code>bgcolor</code></td>
      </tr>
    </tbody>
  </table>

  <hr />

  The <dfn><code>anchors</code></dfn> attribute must return an <code>HTMLCollection</code> rooted at
  the <code>Document</code> node, whose filter matches only <code>a</code> elements with
  <code>name</code> attributes.

  The <dfn><code>applets</code></dfn> attribute must return an <code>HTMLCollection</code> rooted at
  the <code>Document</code> node, whose filter matches only <code>applet</code> elements.

  The <dfn><code>clear()</code></dfn>, <dfn><code>captureEvents()</code></dfn>, and
  <dfn><code>releaseEvents()</code></dfn> methods must do nothing.

  <hr />

  The <dfn><code>all</code></dfn> attribute must return an <code>HTMLAllCollection</code> rooted at
  the <code>Document</code> node, whose filter matches all elements.

  The object returned for <code>all</code> has several unusual behaviors:

  * The user agent must act as if the ToBoolean() operator in JavaScript converts the object
    returned for <code>all</code> to the false value.
  * The user agent must act as if, for the purposes of the <code>==</code> and <code>!=</code>
    operators in JavaScript, the object returned for <code>all</code> compares as equal to the
    <code>undefined</code> and <code>null</code> values. (Comparisons using the <code>===</code>
    operator, and comparisons to other values such as strings or objects, are unaffected.)
  * The user agent must act such that the <code>typeof</code> operator in JavaScript returns the
    string <code>undefined</code> when applied to the object returned for <code>all</code>.

  <p class="note">
    These requirements are a <a>willful violation</a> of the JavaScript specification current at the
    time of writing (ECMAScript edition 5). The JavaScript specification requires that the
    ToBoolean() operator convert all objects to the true value, and does not have provisions for
    objects acting as if they were <code>undefined</code> for the purposes of certain operators.
    This violation is motivated by a desire for compatibility with two classes of legacy content:
    one that uses the presence of <code>document.all</code> as a way to detect legacy user agents,
    and one that only supports those legacy user agents and uses the <code>document.all</code>
    object without testing for its presence first. [[!ECMA-262]]
  </p>

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface Window {
      void captureEvents();
      void releaseEvents();
    };
  </pre>

  The <dfn><code>captureEvents()</code></dfn> and <dfn><code>releaseEvents()</code></dfn> methods
  must do nothing.

<!-- Big Text: IANA -->

<h2 id="iana">IANA considerations</h2>

<h3 id="text-html"><dfn><code>text/html</code></dfn></h3>

  This registration is for community review and will be submitted to the IESG for review, approval,
  and registration with IANA.

  : Type name:
  :: text
  : Subtype name:
  :: html
  : Required parameters:
  :: No required parameters
  : Optional parameters:
  ::
      : <code>charset</code>
      :: The <code>charset</code> parameter may be provided to specify the
          <a>document's character encoding</a>, overriding any
          <a>character encoding declarations</a> in the document other than a Byte Order Mark (BOM).
          The parameter's value must be one of the <a>labels</a> of the <a>character encoding</a>
          used to serialize the file. [[!ENCODING]]
  : Encoding considerations:
  :: 8bit (see the section on <a>character encoding declarations</a>)
  : Security considerations:
  :: Entire novels have been written about the security considerations that apply to HTML documents.
      Many are listed in this document, to which the reader is referred for more details. Some
      general concerns bear mentioning here, however:

      HTML is scripted language, and has a large number of APIs (some of which are described in
      this document). Script can expose the user to potential risks of information leakage,
      credential leakage, cross-site scripting attacks, cross-site request forgeries, and a host of
      other problems. While the designs in this specification are intended to be safe if implemented
      correctly, a full implementation is a massive undertaking and, as with any software, user
      agents are likely to have security bugs.

      Even without scripting, there are specific features in HTML which, for historical reasons,
      are required for broad compatibility with legacy content but that expose the user to
      unfortunate security problems. In particular, the <code>img</code> element can be used in
      conjunction with some other features as a way to effect a port scan from the user's location
      on the Internet. This can expose local network topologies that the attacker would otherwise
      not be able to determine.

      HTML relies on a compartmentalization scheme sometimes known as the <i>same-origin policy</i>.
      An <a>origin</a> in most cases consists of all the pages served from the same host, on the
      same port, using the same protocol.

      It is critical, therefore, to ensure that any untrusted content that forms part of a site be
      hosted on a different <a>origin</a> than any sensitive content on that site. Untrusted
      content can easily spoof any other page on the same origin, read data from that origin, cause
      scripts in that origin to execute, submit forms to and from that origin even if they are
      protected from cross-site request forgery attacks by unique tokens, and make use of any
      third-party resources exposed to or rights granted to that origin.
  : Interoperability considerations:
  :: Rules for processing both conforming and non-conforming content are defined in this
      specification.
  : Published specification:
  :: This document is the relevant specification. Labeling a resource with the
      <code>text/html</code> type asserts that the resource is an <a>HTML document</a> using
      <a>the HTML syntax</a>.
  : Applications that use this media type:
  :: Web browsers, tools for processing Web content, HTML authoring tools, search engines,
      validators.
  : Additional information:
  ::
      : Magic number(s):
      :: No sequence of bytes can uniquely identify an HTML document. More information on detecting
          HTML documents is available in the MIME Sniffing specification. [[!MIMESNIFF]]
      : File extension(s):
      :: "<code>html</code>" and "<code>htm</code>" are commonly, but certainly not exclusively,
          used as the extension for HTML documents.
      : Macintosh file type code(s):
      :: <code>TEXT</code>
  : Person &amp; email address to contact for further information:
  :: Ian Hickson &lt;ian@hixie.ch>
  : Intended usage:
  :: Common
  : Restrictions on usage:
  :: No restrictions apply.
  : Author:
  :: Ian Hickson &lt;ian@hixie.ch>
  : Change controller:
  :: W3C

  Fragment identifiers used with <code>text/html</code> resources either refer to
  <a>the indicated part of the document</a> or provide state information for in-page scripts.

<h3 id="multipart-x-mixed-replace"><dfn><code>multipart/x-mixed-replace</code></dfn></h3>

  This registration is for community review and will be submitted to the IESG for review, approval,
  and registration with IANA.

  : Type name:
  :: multipart
  : Subtype name:
  :: x-mixed-replace
  : Required parameters:
  :: * <code>boundary</code> (defined in RFC2046) [[!RFC2046]]
  : Optional parameters:
  :: No optional parameters.
  : Encoding considerations:
  :: binary
  : Security considerations:
  :: Subresources of a <code>multipart/x-mixed-replace</code> resource can be of any type, including
      types with non-trivial security implications such as <code>text/html</code>.
  : Interoperability considerations:
  :: None.
  : Published specification:
  :: This specification describes processing rules for Web browsers. Conformance requirements for
      generating resources with this type are the same as for <code>multipart/mixed</code>.
      [[!RFC2046]]
  : Applications that use this media type:
  :: This type is intended to be used in resources generated by Web servers, for consumption by Web
      browsers.
  : Additional information:
  ::
      : Magic number(s):
      :: No sequence of bytes can uniquely identify a <code>multipart/x-mixed-replace</code>
          resource.
      : File extension(s):
      :: No specific file extensions are recommended for this type.
      : Macintosh file type code(s):
      :: No specific Macintosh file type codes are recommended for this type.
  : Person &amp; email address to contact for further information:
  :: Ian Hickson &lt;ian@hixie.ch>
  : Intended usage:
  :: Common
  : Restrictions on usage:
  :: No restrictions apply.
  : Author:
  :: Ian Hickson &lt;ian@hixie.ch>
  : Change controller:
  :: W3C

  Fragment identifiers used with <code>multipart/x-mixed-replace</code> resources apply to each
  body part as defined by the type used by that body part.

<h3 id="application-xhtmlxml"><dfn><code>application/xhtml+xml</code></dfn></h3>

  This registration is for community review and will be submitted to the IESG for review, approval,
  and registration with IANA.

  : Type name:
  :: application
  : Subtype name:
  :: xhtml+xml
  : Required parameters:
  :: Same as for <code>application/xml</code> [[!RFC7303]]
  : Optional parameters:
  :: Same as for <code>application/xml</code> [[!RFC7303]]
  : Encoding considerations:
  :: Same as for <code>application/xml</code> [[!RFC7303]]
  : Security considerations:
  :: Same as for <code>application/xml</code> [[!RFC7303]]
  : Interoperability considerations:
  :: Same as for <code>application/xml</code> [[!RFC7303]]
  : Published specification:
  :: Labeling a resource with the <code>application/xhtml+xml</code> type asserts that the resource
      is an XML document that likely has a root element from the <a>HTML namespace</a>. Thus, the
      relevant specifications are the XML specification, the Namespaces in XML specification, and
      this specification. [[!XML]] [[!XPTR-XMLNS]]
  : Applications that use this media type:
  :: Same as for <code>application/xml</code> [[!RFC7303]]
  : Additional information:
  ::
      : Magic number(s):
      :: Same as for <code>application/xml</code> [[!RFC7303]]
      : File extension(s):
      :: "<code>xhtml</code>" and "<code>xht</code>"
          are sometimes used as extensions for XML resources that have a root element from the
          <a>HTML namespace</a>.
      : Macintosh file type code(s):
      :: <code>TEXT</code>
  : Person &amp; email address to contact for further information:
  :: Ian Hickson &lt;ian@hixie.ch>
  : Intended usage:
  :: Common
  : Restrictions on usage:
  :: No restrictions apply.
  : Author:
  :: Ian Hickson &lt;ian@hixie.ch>
  : Change controller:
  :: W3C

  Fragment identifiers used with <code>application/xhtml+xml</code> resources have the same
  semantics as with any <a>XML MIME type</a>. [[!RFC7303]]

<h3 id="application-x-www-form-urlencoded"><dfn><code>application/x-www-form-urlencoded</code></dfn></h3>

  This registration is for community review and will be submitted to the IESG for review, approval,
  and registration with IANA.

  : Type name:
  :: application
  : Subtype name:
  :: x-www-form-urlencoded
  : Required parameters:
  :: No parameters
  : Optional parameters:
  :: No parameters
  : Encoding considerations:
  :: 7bit (US-ASCII encoding of octets that themselves can be encoding text using any
      <a>ASCII-compatible encoding</a>)
  : Security considerations:
  :: In isolation, an <code>application/x-www-form-urlencoded</code> payload poses no security
      risks. However, as this type is usually used as part of a form submission, all the risks that
      apply to HTML forms need to be considered in the context of this type.
  : Interoperability considerations:
  :: Rules for generating and processing <code>application/x-www-form-urlencoded</code> payloads are
      defined in this specification.
  : Published specification:
  :: This document is the relevant specification. Algorithms for <a>encoding</a> and <a>decoding</a>
      are defined.
  : Applications that use this media type:
  :: Web browsers and servers.
  : Additional information:
  ::
      : Magic number(s):
      :: There is no reliable mechanism for recognizing
          <code>application/x-www-form-urlencoded</code> payloads.
      : File extension(s):
      :: Not applicable.
      : Macintosh file type code(s):
      :: Not applicable.
  : Person &amp; email address to contact for further information:
  :: Ian Hickson &lt;ian@hixie.ch>
  : Intended usage:
  :: Common
  : Restrictions on usage:
  :: This type is only intended to be used to describe HTML form submission payloads.
  : Author:
  :: Ian Hickson &lt;ian@hixie.ch>
  : Change controller:
  :: W3C

  Fragment identifiers have no meaning with the <code>application/x-www-form-urlencoded</code>
  type.

<h3 id="text-cache-manifest"><dfn><code>text/cache-manifest</code></dfn></h3>

  This registration is for community review and will be submitted to the IESG for review, approval,
  and registration with IANA.

  : Type name:
  :: text
  : Subtype name:
  :: cache-manifest
  : Required parameters:
  :: No parameters
  : Optional parameters:
  ::
      : <code>charset</code>
      :: The <code>charset</code> parameter may be provided. The parameter's value must be
          "<code>utf-8</code>". This parameter serves no purpose; it is only allowed for
          compatibility with legacy servers.
  : Encoding considerations:
  :: 8bit (always UTF-8)
  : Security considerations:
  :: Cache manifests themselves pose no immediate risk unless sensitive information is included
      within the manifest. Implementations, however, are required to follow specific rules when
      populating a cache based on a cache manifest, to ensure that certain origin-based restrictions
      are honored. Failure to correctly implement these rules can result in information leakage,
      cross-site scripting attacks, and the like.
  : Interoperability considerations:
  :: Rules for processing both conforming and non-conforming content are defined in this
      specification.
  : Published specification:
  :: This document is the relevant specification.
  : Applications that use this media type:
  :: Web browsers.
  : Additional information:
  ::
      : Magic number(s):
      :: Cache manifests begin with the string "<code>CACHE MANIFEST</code>", followed by either a
          U+0020 SPACE character, a U+0009 CHARACTER TABULATION (tab) character, a U+000A LINE FEED
          (LF) character, or a U+000D CARRIAGE RETURN (CR) character.
      : File extension(s):
      :: "<code>appcache</code>"
      : Macintosh file type code(s):
      :: No specific Macintosh file type codes are recommended for this type.
  : Person &amp; email address to contact for further information:
  :: Ian Hickson &lt;ian@hixie.ch>
  : Intended usage:
  :: Common
  : Restrictions on usage:
  :: No restrictions apply.
  : Author:
  :: Ian Hickson &lt;ian@hixie.ch>
  : Change controller:
  :: W3C

  Fragment identifiers have no meaning with <code>text/cache-manifest</code> resources.

<h3 id="web-scheme-prefix"><dfn><code>web+</code> scheme prefix</dfn></h3>

  This section describes a convention for use with the IANA URI scheme registry. It does not
  itself register a specific scheme. [[!RFC4395]]

  : URI scheme name:
  :: Schemes starting with the four characters "<code>web+</code>" followed by one or more letters
      in the range <code>a</code>-<code>z</code>.
  : Status:
  :: permanent
  : URI scheme syntax:
  :: Scheme-specific.
  : URI scheme semantics:
  :: Scheme-specific.
  : Encoding considerations:
  :: All "<code>web+</code>" schemes should use UTF-8 encodings where relevant.
  : Applications/protocols that use this URI scheme name:
  :: Scheme-specific.
  : Interoperability considerations:
  :: The scheme is expected to be used in the context of Web applications.
  : Security considerations:
  :: Any Web page is able to register a handler for all "<code>web+</code>" schemes. As
      such, these schemes must not be used for features intended to be core platform features (e.g.
      network transfer protocols like HTTP or FTP). Similarly, such schemes must not store
      confidential information in their URLs, such as usernames, passwords, personal information, or
      confidential project names.
  : Contact:
  :: Ian Hickson &lt;ian@hixie.ch>
  : Author/Change controller:
  :: Ian Hickson &lt;ian@hixie.ch>
  : References:
  :: <cite>Custom scheme and content handlers</cite>, HTML Living Standard:
      <a href="https://html.spec.whatwg.org/#custom-handlers">https://html.spec.whatwg.org/#custom-handlers</a>