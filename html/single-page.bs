<h1>HTML</h1>

<pre class="metadata">
Shortname: html
Level: 5.1
Group: html
Status: WD
TR: http://www.w3.org/TR/html/
ED: https://github.com/w3c/html/
Previous Version: http://www.w3.org/TR/2014/WD-html51-20140204/

Editor: WHATWG
Editor: Simon Pieters, Opera Software, simonp@opera.com
Editor: Anne van Kesteren, Mozilla, annevk@annevk.nl
Editor: Philip JÃ¤genstedt, Opera Software, philipj@opera.com
Editor: Domenic Denicola, Google Inc., d@domenic.me
Editor: Ian Hickson, Google Inc., ian@hixie.ch
Editor: W3C
Editor: Steve Faulkner, The Paciello Group, sfaulkner@paciellogroup.com
Editor: Travis Leithead, Microsoft, travil@microsoft.com
Editor: Erika Doyle Navara, Microsoft, Erika.Doyle@microsoft.com
Editor: Edward O'Connor, Apple Inc., eoconnor@apple.com
Editor: Robin Berjon, W3C (Until August 2015), http://berjon.com/
Abstract: This specification defines the 5th major version, first minor revision of the core
          language of the World Wide Web: the Hypertext Markup Language (HTML). In this version,
          new features continue to be introduced to help Web application authors, new elements
          continue to be introduced based on research into prevailing authoring practices, and
          special attention continues to be given to defining clear conformance criteria for user
          agents in an effort to improve interoperability.
Ignored Vars: this, object, variable, optionalArgument, name, value, e, oldParent, removedNode
</pre>

<pre class="anchors">
urlPrefix: http://www.w3.org/TR/workers/; type: dfn; spec: WORKERS; text: worker;
urlPrefix: http://www.whatwg.org/specs/web-apps/current-work/; type: dfn; spec: WHATWG; text: WHATWG HTML specification;
urlPrefix: http://html5.org/r/8424/; type: dfn; text: 8424
</pre>

<pre class="link-defaults">
spec:dom-ls; type:dfn; for:Attr; text:name
spec:url; type:dfn; for:url; text:url
</pre>

<h2 id="introduction">Introduction</h2>

<h3 id="background">Background</h3>

  <em>This section is non-normative.</em>

  The World Wide Web's markup language has always been HTML. HTML was primarily designed as a
  language for semantically describing scientific documents, although its general design and
  adaptations over the years have enabled it to be used to describe a number of other types of
  documents.

  The main area that has not been adequately addressed by HTML is a vague subject referred to as
  Web Applications. This standard attempts to rectify this, while at the same time updating the HTML
  language to address issues raised in the past few years.

<h3 id="audience">Audience</h3>

  <em>This section is non-normative.</em>

  This specification is intended for authors of documents and scripts that use the features
  defined in this specification<span class="impl">, implementors of tools that operate on pages
  that use the features defined in this specification, and individuals wishing to establish the
  correctness of documents or implementations with respect to the requirements of this
  specification</span>.

  This document is probably not suited to readers who do not already have at least a passing
  familiarity with Web technologies, as in places it sacrifices clarity for precision, and brevity
  for completeness. More approachable tutorials and authoring guides can provide a gentler
  introduction to the topic.

  In particular, familiarity with the basics of DOM is necessary for a complete understanding of
  some of the more technical parts of this specification. An understanding of Web IDL, HTTP, XML,
  Unicode, character encodings, JavaScript, and CSS will also be helpful in places but is not
  essential.

<h3 id="scope">Scope</h3>

  <em>This section is non-normative.</em>

  This specification is limited to providing a semantic-level markup language and associated
  semantic-level scripting APIs for authoring accessible pages on the Web ranging from static
  documents to dynamic applications.

  The scope of this specification does not include providing mechanisms for media-specific
  customization of presentation (although default rendering rules for Web browsers are included at
  the end of this specification, and several mechanisms for hooking into CSS are provided as part
  of the language).

  The scope of this specification is not to describe an entire operating system. In particular,
  hardware configuration software, image manipulation tools, and applications that users would be
  expected to use with high-end workstations on a daily basis are out of scope. In terms of
  applications, this specification is targeted specifically at applications that would be expected
  to be used by users on an occasional basis, or regularly but from disparate locations, with low
  CPU requirements. Examples of such applications include online purchasing systems, searching
  systems, games (especially multiplayer online games), public telephone books or address books,
  communications software (e-mail clients, instant messaging clients, discussion software),
  document editing software, etc.

<h3 id="history">History</h3>

  <em>This section is non-normative.</em>

  For its first five years (1990-1995), HTML went through a number of revisions and experienced a
  number of extensions, primarily hosted first at CERN, and then at the IETF.

  With the creation of the W3C, HTML's development changed venue again. A first abortive attempt at
  extending HTML in 1995 known as HTML 3.0 then made way to a more pragmatic approach known as
  HTML3.2, which was completed in 1997. HTML4 quickly followed later that same year.

  The following year, the W3C membership decided to stop evolving HTML and instead begin work on
  an XML-based equivalent, called XHTML. This effort started with a reformulation of HTML4 in XML,
  known as XHTML 1.0, which added no new features except the new serialization, and which was
  completed in 2000. After XHTML 1.0, the W3C's focus turned to making it easier for other working
  groups to extend XHTML, under the banner of XHTML Modularization. In parallel with this, the W3C
  also worked on a new language that was not compatible with the earlier HTML and XHTML languages,
  calling it XHTML2.

  Around the time that HTML's evolution was stopped in 1998, parts of the API for HTML developed
  by browser vendors were specified and published under the name DOM Level 1 (in 1998) and DOM
  Level 2 Core and DOM Level 2 HTML (starting in 2000 and culminating in 2003). These efforts then
  petered out, with some DOM Level 3 specifications published in 2004 but the working group being
  closed before all the Level 3 drafts were completed.

  In 2003, the publication of XForms, a technology which was positioned as the next generation of
  Web forms, sparked a renewed interest in evolving HTML itself, rather than finding replacements
  for it. This interest was borne from the realization that XML's deployment as a Web technology was
  limited to entirely new technologies (like RSS and later Atom), rather than as a replacement for
  existing deployed technologies (like HTML).

  A proof of concept to show that it was possible to extend HTML4's forms to provide many of the
  features that XForms 1.0 introduced, without requiring browsers to implement rendering engines
  that were incompatible with existing HTML Web pages, was the first result of this renewed
  interest. At this early stage, while the draft was already publicly available, and input was
  already being solicited from all sources, the specification was only under Opera Software's
  copyright.

  The idea that HTML's evolution should be reopened was tested at a W3C workshop in 2004, where
  some of the principles that underlie the HTML5 work (described below), as well as the
  aforementioned early draft proposal covering just forms-related features, were presented to the
  W3C jointly by Mozilla and Opera. The proposal was rejected on the grounds that the proposal
  conflicted with the previously chosen direction for the Web's evolution; the W3C staff and
  membership voted to continue developing XML-based replacements instead.

  Shortly thereafter, Apple, Mozilla, and Opera jointly announced their intent to continue working
  on the effort under the umbrella of a new venue called the WHATWG. A public mailing list was
  created, and the draft was moved to the WHATWG site. The copyright was subsequently amended to be
  jointly owned by all three vendors, and to allow reuse of the specification.

  The WHATWG was based on several core principles, in particular that technologies need to be
  backwards compatible, that specifications and implementations need to match even if this means
  changing the specification rather than the implementations, and that specifications need to be
  detailed enough that implementations can achieve complete interoperability without
  reverse-engineering each other.

  The latter requirement in particular required that the scope of the HTML5 specification include
  what had previously been specified in three separate documents: HTML4, XHTML1, and DOM2 HTML. It
  also meant including significantly more detail than had previously been considered the norm.

  In 2006, the W3C indicated an interest to participate in the development of HTML5 after all, and
  in 2007 formed a working group chartered to work with the WHATWG on the development of the HTML5
  specification. Apple, Mozilla, and Opera allowed the W3C to publish the specification under the
  W3C copyright, while keeping a version with the less restrictive license on the WHATWG site.

  For a number of years, both groups then worked together under the same editor: Ian Hickson. In
  2011, the groups came to the conclusion that they had different goals: the W3C wanted to draw a
  line in the sand for features for a HTML5 Recommendation, while the WHATWG wanted to continue
  working on a Living Standard for HTML, continuously maintaining the specification and adding new
  features. In mid 2012, a new editing team was introduced at the W3C to take care of creating a
  HTML5 Recommendation and prepare a Working Draft for the next HTML version.

  Since then, the W3C HTML WG has been cherry picking patches from the WHATWG that resolved bugs
  registered on the W3C HTML specification or more accurately represented implemented reality in
  UAs. At time of publication of this document, patches from the <a>WHATWG HTML specification</a>
  have been merged until revision <a>8424</a> inclusive. The W3C HTML editors have also added
  patches that resulted from discussions and decisions made by the W3C HTML WG as well a bug fixes
  from bugs not shared by the WHATWG.

  A separate document is published to document the differences between the HTML specified in this
  document and the language described in the HTML4 specification. [[HTML5-DIFF]]

<h3 id="design-notes">Design notes</h3>

  <em>This section is non-normative.</em>

  It must be admitted that many aspects of HTML appear at first glance to be nonsensical and
  inconsistent.

  HTML, its supporting DOM APIs, as well as many of its supporting technologies, have been
  developed over a period of several decades by a wide array of people with different priorities
  who, in many cases, did not know of each other's existence.

  Features have thus arisen from many sources, and have not always been designed in especially
  consistent ways. Furthermore, because of the unique characteristics of the Web, implementation
  bugs have often become de-facto, and now de-jure, standards, as content is often unintentionally
  written in ways that rely on them before they can be fixed.

  Despite all this, efforts have been made to adhere to certain design goals. These are described
  in the next few subsections.

<h4 id="serializability-of-script-execution">Serializability of script execution</h4>

  <em>This section is non-normative.</em>

  To avoid exposing Web authors to the complexities of multithreading, the HTML and DOM APIs are
  designed such that no script can ever detect the simultaneous execution of other scripts. Even
  with <a>workers</a>, the intent is that the behavior of implementations
  can be thought of as completely serializing the execution of all scripts in all
  <a>browsing contexts</a>.

  <p class="note">
    The <code>navigator.yieldForStorageUpdates()</code> method, in this model, is equivalent to
    allowing other scripts to run while the calling script is blocked.
  </p>

<h4 id="compliance-with-other-specifications">Compliance with other specifications</h4>

  <em>This section is non-normative.</em>

  This specification interacts with and relies on a wide variety of other specifications. In certain
  circumstances, unfortunately, conflicting needs have led to this specification violating the
  requirements of these other specifications. Whenever this has occurred, the transgressions have
  each been noted as a "<dfn>willful violation</dfn>", and the reason for the violation has been
  noted.

<h4 id="extensibility">Extensibility</h4>

  <em>This section is non-normative.</em>

  HTML has a wide array of extensibility mechanisms that can be used for adding semantics in a safe
  manner:

  * Authors can use the <code>class</code> attribute to extend elements, effectively creating their
    own elements, while using the most applicable existing "real" HTML element, so that browsers and
    other tools that don't know of the extension can still support it somewhat well. This is the
    tack used by microformats, for example.

  * Authors can include data for inline client-side scripts or server-side site-wide scripts to
    process using the <code>data-*=""</code> attributes. These are guaranteed to never be touched by
    browsers, and allow scripts to include data on HTML elements that scripts can then look for and
    process.

  * Authors can use the <code>&lt;meta name="" content=""></code> mechanism to
    include page-wide metadata by registering <a>extensions to the predefined set of metadata
    names</a>.

  * Authors can use the <code>rel=""</code> mechanism to annotate links with specific meanings by
    registering <a>extensions to the predefined set of link types</a>. This is also used by
    microformats. Additionally, absolute URLs that do not contain any non-ASCII characters, nor
    characters in the range U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z)
    (inclusive), may be used as link types.

  * Authors can embed raw data using the <code>&lt;script type=""></code> mechanism with a custom
    type, for further handling by inline or server-side scripts.

  * Authors can create <a>plugins</a> and invoke them using the <{embed}> element. This is how Flash
    works.

  * Authors can extend APIs using the JavaScript prototyping mechanism. This is widely used by
    script libraries, for instance.

<h3 id="html-vs-xhtml">HTML vs XHTML</h3>

  <em>This section is non-normative.</em>

  This specification defines an abstract language for describing documents and applications, and
  some APIs for interacting with in-memory representations of resources that use this language.


  The in-memory representation is known as "DOM HTML", or "the DOM" for short.

  There are various concrete syntaxes that can be used to transmit resources that use this abstract
  language, two of which are defined in this specification.

  The first such concrete syntax is the HTML syntax. This is the format suggested for most authors.
  It is compatible with most legacy Web browsers. If a document is transmitted with the
  <code>text/html</code> <a>MIME type</a>, then it will be processed as an HTML document by Web
  browsers. This specification defines version [LEVEL] of the HTML syntax, known as "HTML[LEVEL]".

  The second concrete syntax is the XHTML syntax, which is an application of XML. When a document
  is transmitted with an <a>XML MIME type</a>, such as <code>application/xhtml+xml</code>,
  then it is treated as an XML document by Web browsers, to be parsed by an XML processor. Authors
  are reminded that the processing for XML and HTML differs; in particular, even minor syntax
  errors will prevent a document labeled as XML from being rendered fully, whereas they would be
  ignored in the HTML syntax. This specification defines version [LEVEL] of the XHTML syntax,
  known as "XHTML[LEVEL]".

  The DOM, the HTML syntax, and the XHTML syntax cannot all represent the same content. For
  example, namespaces cannot be represented using the HTML syntax, but they are supported in the
  DOM and in the XHTML syntax. Similarly, documents that use the <code>noscript</code> feature can
  be represented using the HTML syntax, but cannot be represented with the DOM or in the XHTML
  syntax. Comments that contain the string "<code>--&gt;</code>" can only be represented in the
  DOM, not in the HTML and XHTML syntaxes.

<h3 id="structure-of-this-specification">Structure of this specification</h3>

  <em>This section is non-normative.</em>

  This specification is divided into the following major sections:

  <div dfn-for="spec">
    : [[#introduction]]
    :: Non-normative materials providing a context for the HTML standard.

    : [[#infrastructure]]
    :: The conformance classes, algorithms, definitions, and the common underpinnings of the rest of
        the specification.

    : [[#dom]]
    :: Documents are built from elements. These elements form a tree using the DOM. This section
        defines the features of this DOM, as well as introducing the features common to all
        elements, and the concepts used in defining elements.

    : [[#semantics]]
    :: Each element has a predefined meaning, which is explained in this section. Rules for authors
        on how to use the element<span class="impl">, along with user agent requirements for how to
        handle each element,</span> are also given. This includes large signature features of HTML
        such as video playback and subtitles, form controls and form submission, and a 2D graphics
        API known as the HTML canvas.

    : [[#editing]]
    :: HTML documents can provide a number of mechanisms for users to interact with and modify
        content, which are described in this section, such as how focus works, and drag-and-drop.

    : [[#browsers]]
    :: HTML documents do not exist in a vacuum &mdash; this section defines many of the features
        that affect environments that deal with multiple pages, such as Web browsers and offline
        caching of Web applications.

    : [[#webappapis]]
    :: This section introduces basic features for scripting of applications in HTML.

    : [[#syntax]]
    : [[#xhtml]]
    :: All of these features would be for naught if they couldn't be represented in a serialized
        form and sent to other people, and so these sections define the syntaxes of HTML and
        XHTML<span class="impl">, along with rules for how to parse content using those
        syntaxes</span>.

    : [[#rendering]]
    :: This section defines the default rendering rules for Web browsers.

    There are also some appendices, listing <a>obsolete features</a> and <a>IANA considerations</a>,
    and several indices.
  </div>

<h4 id="how-to-read-this-specification">How to read this specification</h4>

  This specification should be read like all other specifications. First, it should be read
  cover-to-cover, multiple times. Then, it should be read backwards at least once. Then it should be
  read by picking random sections from the contents list and following all the cross-references.

  As described in the conformance requirements section below, this specification describes
  conformance criteria for a variety of conformance classes. In particular, there are conformance
  requirements that apply to <em>producers</em>, for example authors and the documents they create,
  and there are conformance requirements that apply to <em>consumers</em>, for example Web browsers.
  They can be distinguished by what they are requiring: a requirement on a producer states what is
  allowed, while a requirement on a consumer states how software is to act.

  <div class="example">
    For example, "the <code>foo</code> attribute's value must be a <a>valid integer</a>" is a
    requirement on producers, as it lays out the allowed values; in contrast, the requirement "the
    <code>foo</code> attribute's value must be parsed using the <a>rules for parsing integers</a>"
    is a requirement on consumers, as it describes how to process the content.
  </div>

  <strong>Requirements on producers have no bearing whatsoever on consumers.</strong>

  <div class="example">
    Continuing the above example, a requirement stating that a particular attribute's value is
    constrained to being a <a>valid integer</a> emphatically does <em>not</em> imply anything about
    the requirements on consumers. It might be that the consumers are in fact required to treat the
    attribute as an opaque string, completely unaffected by whether the value conforms to the
    requirements or not. It might be (as in the previous example) that the consumers are required to
    parse the value using specific rules that define how invalid (non-numeric in this case) values
    are to be processed.
  </div>

<h4 id="typographic-conventions">Typographic conventions</h4>

  <div dfn-for="conventions">
    This is a definition, requirement, or explanation.

    <p class="note">This is a note.</p>

    <p class="example">This is an example.</p>

    <p class="&#x0058;&#x0058;&#x0058;">This is an open issue.</p>

    <p class="warning">This is a warning.</p>

    <pre class="idl-ignore">interface <dfn>Example</dfn> {
        // this is an IDL definition
    };</pre>

    <dl class="domintro">
      <dt><var>variable</var> = <var>object</var> . <code>method</code>( [ <var>optionalArgument</var> ] )</dt>
      <dd>This is a note to authors describing the usage of an interface.</dd>
    </dl>

    <pre class="css">/* this is a CSS fragment */</pre>

    The defining instance of a term is marked up like <dfn>this</dfn>. Uses of that
    term are marked up like <a>this</a> or like <i>this</i>.

    The defining instance of an element, attribute, or API is marked up like
    <dfn><code>this</code></dfn>. References to that element, attribute, or API are marked up like
    <code>this</code>.

    Other code fragments are marked up <code>like this</code>.

    Variables are marked up like <var>this</var>.


    In an algorithm, steps in <a>synchronous sections</a> are marked with &#x231B;.

    In some cases, requirements are given in the form of lists with conditions and corresponding
    requirements. In such cases, the requirements that apply to a condition are always the first set
    of requirements that follow the condition, even in the case of there being multiple sets of
    conditions for those requirements. Such cases are presented as follows:

    <dl class="switch">
      <dt>This is a condition</dt>
      <dt>This is another condition</dt>
      <dd>This is the requirement that applies to the conditions above.</dd>

      <dt>This is a third condition</dt>
      <dd>This is the requirement that applies to the third condition.</dd>
    </dl>
  </div>

<h3 id="fingerprint">Privacy concerns</h3>

  <em>This section is non-normative.</em>

  Some features of HTML trade user convenience for a measure of user privacy.

  In general, due to the Internet's architecture, a user can be distinguished from another by the
  user's IP address. IP addresses do not perfectly match to a user; as a user moves from device to
  device, or from network to network, their IP address will change; similarly, NAT routing, proxy
  servers, and shared computers enable packets that appear to all come from a single IP address to
  actually map to multiple users. Technologies such as onion routing can be used to further
  anonymize requests so that requests from a single user at one node on the Internet appear to come
  from many disparate parts of the network.

  However, the IP address used for a user's requests is not the only mechanism by which a user's
  requests could be related to each other. Cookies, for example, are designed specifically to enable
  this, and are the basis of most of the Web's session features that enable you to log into a site
  with which you have an account.

  There are other mechanisms that are more subtle. Certain characteristics of a user's system can be
  used to distinguish groups of users from each other; by collecting enough such information, an
  individual user's browser's "digital fingerprint" can be computed, which can be as good, if not
  better, as an IP address in ascertaining which requests are from the same user.

  Grouping requests in this manner, especially across multiple sites, can be used for both benign
  (and even arguably positive) purposes, as well as for malevolent purposes. An example of a
  reasonably benign purpose would be determining whether a particular person seems to prefer sites
  with dog illustrations as opposed to sites with cat illustrations (based on how often they visit
  the sites in question) and then automatically using the preferred illustrations on subsequent
  visits to participating sites. Malevolent purposes, however, could include governments combining
  information such as the person's home address (determined from the addresses they use when getting
  driving directions on one site) with their apparent political affiliations (determined by
  examining the forum sites that they participate in) to determine whether the person should be
  prevented from voting in an election.

  Since the malevolent purposes can be remarkably evil, user agent implementors are encouraged to
  consider how to provide their users with tools to minimize leaking information that could be used
  to fingerprint a user.

  Unfortunately, as the first paragraph in this section implies, sometimes there is great benefit
  to be derived from exposing the very information that can also be used for fingerprinting
  purposes, so it's not as easy as simply blocking all possible leaks. For instance, the ability to
  log into a site to post under a specific identity requires that the user's requests be
  identifiable as all being from the same user, more or less by definition. More subtly, though,
  information such as how wide text is, which is necessary for many effects that involve drawing
  text onto a canvas (e.g. any effect that involves drawing a border around the text) also leaks
  information that can be used to group a user's requests. (In this case, by potentially exposing,
  via a brute force search, which fonts a user has installed, information which can vary
  considerably from user to user.)

  Features in this specification which can be <dfn id="fingerprinting-vector">used to fingerprint
  the user</dfn> are marked as this paragraph is.
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

  Other features in the platform can be used for the same purpose, though, including, though not
  limited to:

  * The exact list of which features a user agents supports.

  * The maximum allowed stack depth for recursion in script.

  * Features that describe the user's environment, like Media Queries and the <code>Screen</code>
    object. [[!MEDIAQ]] [[!CSSOM-VIEW]]

  * The user's time zone.

<h3 id="a-quick-introduction-to-html">A quick introduction to HTML</h3>

  <em>This section is non-normative.</em>

  A basic HTML document looks like this:

  <pre id="intro-early-example" highlight="html">&lt;!DOCTYPE html>
  &lt;html>
    &lt;head>
    &lt;title>Sample page&lt;/title>
    &lt;/head>
    &lt;body>
    &lt;h1>Sample page&lt;/h1>
    &lt;p>This is a &lt;a href="demo.html">simple&lt;/a> sample.&lt;/p>
    &lt;!-- this is a comment -->
    &lt;/body>
  &lt;/html></pre>

  HTML documents consist of a tree of elements and text. Each element is denoted in the source by
  a <a>start tag</a>, such as "<code>&lt;body></code>", and an <a>end tag</a>, such as
  "<code>&lt;/body></code>". (Certain start tags and end tags can in certain cases be <a>omitted</a>
  and are implied by other tags.)

  Tags have to be nested such that elements are all completely within each other, without
  overlapping:

  <pre class="bad" highlight="html">&lt;p>This is &lt;em>very &lt;strong>wrong&lt;/em>!&lt;/strong>&lt;/p></pre>
  <pre highlight="html">&lt;p>This &lt;em>is &lt;strong>correct&lt;/strong>.&lt;/em>&lt;/p></pre>

  This specification defines a set of elements that can be used in HTML, along with rules about the
  ways in which the elements can be nested.

  Elements can have attributes, which control how the elements work. In the example below, there
  is a <a>hyperlink</a>, formed using the <code>a</code> element and its <code>href</code>
  attribute:

  <pre highlight="html">&lt;a href="demo.html">simple&lt;/a></pre>

  <a>Attributes</a> are placed inside the start tag, and consist of a <a>name</a> and a
  <a>value</a>, separated by an "<code>=</code>" character. The attribute value can remain
  <a>unquoted</a> if it doesn't contain <a>space characters</a> or any of <code>"</code>
  <code>'</code> <code>`</code> <code>=</code> <code>&lt;</code> or <code>&gt;</code>. Otherwise,
  it has to be quoted using either single or double quotes. The value, along with the
  "<code>=</code>" character, can be omitted altogether if the value is the empty string.

  <pre highlight="html">&lt;!-- empty attributes -->
  &lt;input name=address disabled>
  &lt;input name=address disabled="">

  &lt;!-- attributes with a value -->
  &lt;input name=address maxlength=200>
  &lt;input name=address maxlength='200'>
  &lt;input name=address maxlength="200"></pre>

  HTML user agents (e.g. Web browsers) then <i>parse</i> this markup, turning it into a DOM
  (Document Object Model) tree. A DOM tree is an in-memory representation of a document.

  DOM trees contain several kinds of nodes, in particular a <code>DocumentType</code> node,
  <code>Element</code> nodes, <code>Text</code> nodes, <code>Comment</code> nodes, and in some
  cases <code>ProcessingInstruction</code> nodes.

  The <a>markup snippet at the top of this section</a> would be turned into the following DOM tree:

  <ul class="domTree">
    <li class="t10">DOCTYPE: <code>html</code></li>
    <li class="t1">
      <code>html</code>
      <ul>
        <li class="t1">
          <code>head</code>
          <ul>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x2423;</span></li>
            <li class="t1">
              <code>title</code>
              <ul>
                <li class="t3"><code>#text</code>: <span>Sample page</span></li>
              </ul>
            </li>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;</span></li>
          </ul>
        </li>
        <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;</span></li>
        <li class="t1">
          <code>body</code>
          <ul>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x2423;</span></li>
            <li class="t1">
              <code>h1</code>
              <ul>
                <li class="t3"><code>#text</code>: <span>Sample page</span></li>
              </ul>
            </li>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x2423;</span></li>
            <li class="t1">
              <code>p</code>
              <ul>
                <li class="t3"><code>#text</code>: <span>This is a</span></li>
                <li class="t1">
                  <code>a</code> <span class="t2"><code>href</code>="<code>demo.html</code>"</span>
                  <ul>
                    <li class="t3"><code>#text</code>: <span>simple</span></li>
                  </ul>
                </li>
                <li class="t3"><code>#text</code>: <span> sample.</span></li>
              </ul>
            </li>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x2423;</span></li>
            <li class="t8"><code>#comment</code>: <span> this is a comment </span></li>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x23CE;</span></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>

  The <a>root element</a> of this tree is the <{html}> element, which is the element always found at
  the root of HTML documents. It contains two elements, <{head}> and <{body}>, as well as a
  <code>Text</code> node between them.

  There are many more <code>Text</code> nodes in the DOM tree than one would initially expect,
  because the source contains a number of spaces (represented here by "&#x2423;") and line breaks
  ("&#x23CE;") that all end up as <code>Text</code> nodes in the DOM. However, for historical
  reasons not all of the spaces and line breaks in the original markup appear in the DOM. In
  particular, all the whitespace before <{head}> start tag ends up being dropped silently, and all
  the whitespace after the <{body}> end tag ends up placed at the end of the <{body}>.

  The <{head}> element contains a <{title}> element, which itself contains a <code>Text</code> node
  with the text "Sample page". Similarly, the <{body}> element contains an {{h1}} element, a <{p}>
  element, and a comment.

  <hr />

  This DOM tree can be manipulated from scripts in the page. Scripts (typically in JavaScript)
  are small programs that can be embedded using the <{script}> element or using
  <a>event handler content attributes</a>. For example, here is a form with a script that sets the
  value of the form's <{output}> element to say "Hello World"

  <pre highlight="html">&lt;form name="main">
    Result: &lt;output name="result">&lt;/output>
    &lt;script>
    document.forms.main.elements.result.value = 'Hello World';
    &lt;/script>
  &lt;/form></pre>

  Each element in the DOM tree is represented by an object, and these objects have APIs so that
  they can be manipulated. For instance, a link (e.g. the <{a}> element in the tree above) can have
  its "<{a/href}>" attribute changed in several ways:

  <pre highlight="javascript">var a = document.links[0]; // obtain the first link in the document
  a.href = 'sample.html'; // change the destination URL of the link
  a.protocol = 'https'; // change just the scheme part of the URL
  a.setAttribute('href', 'http://example.com/'); // change the content attribute directly</pre>

  Since DOM trees are used as the way to represent HTML documents when they are processed and
  presented by implementations (especially interactive implementations like Web browsers), this
  specification is mostly phrased in terms of DOM trees, instead of the markup described above.

    <hr />

  HTML documents represent a media-independent description of interactive content. HTML documents
  might be rendered to a screen, or through a speech synthesizer, or on a braille display. To
  influence exactly how such rendering takes place, authors can use a styling language such as CSS.

  In the following example, the page has been made yellow-on-blue using CSS.

  <pre highlight="html">&lt;!DOCTYPE html>
  &lt;html>
    &lt;head>
    &lt;title>Sample styled page&lt;/title>
    &lt;style>
      body { background: navy; color: yellow; }
    &lt;/style>
    &lt;/head>
    &lt;body>
    &lt;h1>Sample styled page&lt;/h1>
    &lt;p>This page is just a demo.&lt;/p>
    &lt;/body>
  &lt;/html></pre>

  For more details on how to use HTML, authors are encouraged to consult tutorials and guides. Some
  of the examples included in this specification might also be of use, but the novice author is
  cautioned that this specification, by necessity, defines the language with a level of detail that
  might be difficult to understand at first.

<h4 id="writing-secure-applications-with-html">Writing secure applications with HTML</h4>

  <em>This section is non-normative.</em>

  When HTML is used to create interactive sites, care needs to be taken to avoid introducing
  vulnerabilities through which attackers can compromise the integrity of the site itself or of
  the site's users.

  A comprehensive study of this matter is beyond the scope of this document, and authors are
  strongly encouraged to study the matter in more detail. However, this section attempts to provide
  a quick introduction to some common pitfalls in HTML application development.

  The security model of the Web is based on the concept of "origins", and correspondingly many of
  the potential attacks on the Web involve cross-origin actions. [[!ORIGIN]]

  : Not validating user input
  : Cross-site scripting (XSS)
  : SQL injection
  :: When accepting untrusted input, e.g. user-generated content such as text comments, values
      in URL parameters, messages from third-party sites, etc, it is imperative that the data
      be validated before use, and properly escaped when displayed. Failing to do this can
      allow a hostile user to perform a variety of attacks, ranging from the potentially
      benign, such as providing bogus user information like a negative age, to the serious,
      such as running scripts every time a user looks at a page that includes the information,
      potentially propagating the attack in the process, to the catastrophic, such as deleting
      all data in the server.

      When writing filters to validate user input, it is imperative that filters always be
      safelist-based, allowing known-safe constructs and disallowing all other input. Blocklist-based
      filters that disallow known-bad inputs and allow everything else are not secure, as not
      everything that is bad is yet known (for example, because it might be invented in the
      future).

      <div class="example">
        For example, suppose a page looked at its URL's query string to determine what to display,
        and the site then redirected the user to that page to display a message, as in:

        <pre highlight="html">&lt;ul>
            &lt;li>&lt;a href="message.cgi?say=Hello">Say Hello&lt;/a>
            &lt;li>&lt;a href="message.cgi?say=Welcome">Say Welcome&lt;/a>
            &lt;li>&lt;a href="message.cgi?say=Kittens">Say Kittens&lt;/a>
        &lt;/ul></pre>

        If the message was just displayed to the user without escaping, a hostile attacker could
        then craft a URL that contained a script element:

        <pre>http://example.com/message.cgi?say=%3Cscript%3Ealert%28%27Oh%20no%21%27%29%3C/script%3E</pre>

        If the attacker then convinced a victim user to visit this page, a script of the
        attacker's choosing would run on the page. Such a script could do any number of hostile
        actions, limited only by what the site offers: if the site is an e-commerce shop, for
        instance, such a script could cause the user to unknowingly make arbitrarily many
        unwanted purchases.

        This is called a cross-site scripting attack.
      </div>

      There are many constructs that can be used to try to trick a site into executing code. Here
      are some that authors are encouraged to consider when writing safelist filters:

      * When allowing harmless-seeming elements like <{img}>, it is important to safelist any
        provided attributes as well. If one allowed all attributes then an attacker could, for
        instance, use the <{img/onload}> attribute to run arbitrary script.

      * When allowing URLs to be provided (e.g. for links), the scheme of each URL also needs to be
        explicitly safelisted, as there are many schemes that can be abused. The most prominent
        example is "<code>javascript:</code>", but user agents can implement (and indeed, have
        historically implemented) others.

      * Allowing a <{base}> element to be inserted means any <{script}> elements in the page with
        relative links can be hijacked, and similarly that any form submissions can get redirected
        to a hostile site.

    : Cross-site request forgery (CSRF)
    :: If a site allows a user to make form submissions with user-specific side-effects, for example
        posting messages on a forum under the user's name, making purchases, or applying for a
        passport, it is important to verify that the request was made by the user intentionally,
        rather than by another site tricking the user into making the request unknowingly.

        This problem exists because HTML forms can be submitted to other origins.

        Sites can prevent such attacks by populating forms with user-specific hidden tokens, or by
        checking <code>Origin</code> headers on all requests.

    : Clickjacking
    :: A page that provides users with an interface to perform actions that the user might not
        wish to perform needs to be designed so as to avoid the possibility that users can be
        tricked into activating the interface.

        One way that a user could be so tricked is if a hostile site places the victim site in a
        small <{iframe}> and then convinces the user to click, for instance by having the user play
        a reaction game. Once the user is playing the game, the hostile site can quickly position
        the <{iframe}> under the mouse cursor just as the user is about to click, thus tricking the
        user into clicking the victim site's interface.

        To avoid this, sites that do not expect to be used in frames are encouraged to only enable
        their interface if they detect that they are not in a frame (e.g. by comparing the
        <code>window</code> object to the value of the <code>top</code> attribute).

<h4 id="common-pitfalls-to-avoid-when-using-the-scripting-apis">Common pitfalls to avoid when using
the scripting APIs</h4>

  <em>This section is non-normative.</em>

  Scripts in HTML have "run-to-completion" semantics, meaning that the browser will generally run
  the script uninterrupted before doing anything else, such as firing further events or continuing
  to parse the document.

  On the other hand, parsing of HTML files happens <a>in parallel</a> and incrementally, meaning
  that the parser can pause at any point to let scripts run. This is generally a good thing, but it
  does mean that authors need to be careful to avoid hooking event handlers after the events could
  have possibly fired.

  There are two techniques for doing this reliably: use <a>event handler content attributes</a>, or
  create the element and add the event handlers in the same script. The latter is safe because, as
  mentioned earlier, scripts are run to completion before further events can fire.

  <div class="example">
    One way this could manifest itself is with <{img}> elements and the <code>load</code> event.
    The event could fire as soon as the element has been parsed, especially if the image has already
    been cached (which is common).

    Here, the author uses the <{img/onload}> handler on an <{img}> element to catch the
    <code>load</code> event:

    <pre highlight="html">&lt;img src="games.png" alt="Games" onload="gamesLogoHasLoaded(event)"></pre>

    If the element is being added by script, then so long as the event handlers are added in the
    same script, the event will still not be missed:

    <pre highlight="html">&lt;script>
    var img = new Image();
    img.src = 'games.png';
    img.alt = 'Games';
    img.onload = gamesLogoHasLoaded;
    // img.addEventListener('load', gamesLogoHasLoaded, false); // would work also
    &lt;/script></pre>

    However, if the author first created the <code>img</code> element and then in a separate
    script added the event listeners, there's a chance that the <code>load</code> event would be
    fired in between, leading it to be missed:

    <pre class="bad" highlight="html">&lt;!-- Do not use this style, it has a race condition! -->
    &lt;img id="games" src="games.png" alt="Games">
    &lt;!-- the 'load' event might fire here while the parser is taking a
        break, in which case you will not see it! -->
    &lt;script>
    var img = document.getElementById('games');
    img.onload = gamesLogoHasLoaded; // might never fire!
    &lt;/script></pre>
  </div>

<h4 id="how-to-catch-mistakes-when-writing-html-validators-and-conformance-checkers">How to catch
mistakes when writing HTML: validators and conformance checkers</h4>

  <em>This section is non-normative.</em>

  Authors are encouraged to make use of conformance checkers (also known as <i>validators</i>) to
  catch common mistakes. The W3C provides a number of online validation services, including the
  <a href="http://validator.w3.org/nu/">Nu Markup Validation Service</a>.

<h3 id="conformance-requirements-for-authors">Conformance requirements for authors</h3>

  <em>This section is non-normative.</em>

  Unlike previous versions of the HTML specification, this specification defines in some detail the
  required processing for invalid documents as well as valid documents.

  However, even though the processing of invalid content is in most cases well-defined, conformance
  requirements for documents are still important: in practice, interoperability (the situation in
  which all implementations process particular content in a reliable and identical or equivalent
  way) is not the only goal of document conformance requirements. This section details some of the
  more common reasons for still distinguishing between a conforming document and one with errors.

<h4 id="presentational-markup">Presentational markup</h4>

  <em>This section is non-normative.</em>

  The majority of presentational features from previous versions of HTML are no longer allowed.
  Presentational markup in general has been found to have a number of problems:

  : The use of presentational elements leads to poorer accessibility
  :: While it is possible to use presentational markup in a way that provides users of assistive
      technologies (ATs) with an acceptable experience (e.g. using ARIA), doing so is significantly
      more difficult than doing so when using semantically-appropriate markup. Furthermore, even
      using such techniques doesn't help make pages accessible for non-AT non-graphical users, such
      as users of text-mode browsers.

      Using media-independent markup, on the other hand, provides an easy way for documents to be
      authored in such a way that they work for more users (e.g. text browsers).

  : Higher cost of maintenance
  :: It is significantly easier to maintain a site written in such a way that the markup is
      style-independent. For example, changing the color of a site that uses
      <code>&lt;font&nbsp;color=""></code> throughout requires changes across the entire site,
      whereas a similar change to a site based on CSS can be done by changing a single file.

  : Larger document sizes
  :: Presentational markup tends to be much more redundant, and thus results in larger document
      sizes.

      For those reasons, presentational markup has been removed from HTML in this version. This
      change should not come as a surprise; HTML4 deprecated presentational markup many years ago
      and provided a mode (HTML4 Transitional) to help authors move away from presentational markup;
      later, XHTML 1.1 went further and obsoleted those features altogether.

      The only remaining presentational markup features in HTML are the <code>style</code> attribute
      and the <{style}> element. Use of the <code>style</code> attribute is somewhat discouraged in
      production environments, but it can be useful for rapid prototyping (where its rules can be
      directly moved into a separate style sheet later) and for providing specific styles in unusual
      cases where a separate style sheet would be inconvenient. Similarly, the <{style}> element can
      be useful in syndication or for page-specific styles, but in general an external style sheet
      is likely to be more convenient when the styles apply to multiple pages.

      It is also worth noting that some elements that were previously presentational have been
      redefined in this specification to be media-independent: <{b}>, <{i}>, <{hr}>, <{s}>,
      <{small}>, and <{u}>.

<h4 id="syntax-errors">Syntax errors</h4>

  <em>This section is non-normative.</em>

  The syntax of HTML is constrained to avoid a wide variety of problems.

  : Unintuitive error-handling behavior
  :: Certain invalid syntax constructs, when parsed, result in DOM trees that are highly
      unintuitive.

      <div class="example">
        For example, the following markup fragment results in a DOM with an <{hr}> element that is
        an <em>earlier</em> sibling of the corresponding <{table}> element:

        <pre class="bad" highlight="html">&lt;table>&lt;hr>...</pre>
      </div>

  : Errors with optional error recovery
  :: To allow user agents to be used in controlled environments without having to implement the more
      bizarre and convoluted error handling rules, user agents are permitted to fail whenever
      encountering a <a>parse error</a>.

  : Errors where the error-handling behavior is not compatible with streaming user agents
  :: Some error-handling behavior, such as the behavior for the <code>&lt;table>&lt;hr>...</code>
      example mentioned above, are incompatible with streaming user agents (user agents that process
      HTML files in one pass, without storing state). To avoid interoperability problems with such
      user agents, any syntax resulting in such behavior is considered invalid.

  : Errors that can result in infoset coercion
  :: When a user agent based on XML is connected to an HTML parser, it is possible that certain
      invariants that XML enforces, such as comments never containing two consecutive hyphens, will
      be violated by an HTML file. Handling this can require that the parser coerce the HTML DOM
      into an XML-compatible infoset. Most syntax constructs that require such handling are
      considered invalid.

  : Errors that result in disproportionally poor performance
  :: Certain syntax constructs can result in disproportionally poor performance. To discourage the
      use of such constructs, they are typically made non-conforming.

      <div class="example">
        For example, the following markup results in poor performance, since all the unclosed <{i}>
        elements have to be reconstructed in each paragraph, resulting in progressively more
        elements in each paragraph:

        <pre class="bad" highlight="html">&lt;p>&lt;i>He dreamt.
        &lt;p>&lt;i>He dreamt that he ate breakfast.
        &lt;p>&lt;i>Then lunch.
        &lt;p>&lt;i>And finally dinner.</pre>

        The resulting DOM for this fragment would be:

        <ul class="domTree">
          <li class="t1">
            <code>p</code>
            <ul>
              <li class="t1">
                <code>i</code>
                <ul>
                  <li class="t3"><code>#text</code>: <span>He dreamt.</span></li>
                </ul>
              </li>
            </ul>
          </li>
          <li class="t1">
            <code>p</code>
            <ul>
              <li class="t1">
                <code>i</code>
                <ul>
                  <li class="t1">
                    <code>i</code>
                    <ul>
                      <li class="t3"><code>#text</code>: <span>He dreamt that he ate breakfast.</span></li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li class="t1">
            <code>p</code>
            <ul>
              <li class="t1">
                <code>i</code>
                <ul>
                  <li class="t1">
                    <code>i</code>
                    <ul>
                      <li class="t1">
                        <code>i</code>
                        <ul>
                          <li class="t3"><code>#text</code>: <span>Then lunch.</span></li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li class="t1">
            <code>p</code>
            <ul>
              <li class="t1">
                <code>i</code>
                <ul>
                  <li class="t1">
                    <code>i</code>
                    <ul>
                      <li class="t1">
                        <code>i</code>
                        <ul>
                          <li class="t1">
                            <code>i</code>
                            <ul>
                              <li class="t3"><code>#text</code>: <span>And finally dinner.</span></li>
                            </ul>
                          </li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </div>

  : Errors involving fragile syntax constructs
  :: There are syntax constructs that, for historical reasons, are relatively fragile. To help
      reduce the number of users who accidentally run into such problems, they are made
      non-conforming.

      <div class="example">
        For example, the parsing of certain named character references in attributes happens even
        with the closing semicolon being omitted. It is safe to include an ampersand followed by
        letters that do not form a named character reference, but if the letters are changed to a
        string that <em>does</em> form a named character reference, they will be interpreted as that
        character instead.

        In this fragment, the attribute's value is "<code>?bill&amp;ted</code>":

        <pre class="bad" highlight="html">&lt;a href="?bill&amp;ted">Bill and Ted&lt;/a></pre>

          In the following fragment, however, the attribute's value is actually
          "<code>?art&copy;</code>", <em>not</em> the intended "<code>?art&amp;copy</code>",
          because even without the final semicolon, "<code>&amp;copy</code>" is handled the same
          as "<code>&amp;copy;</code>" and thus gets interpreted as "<code>&copy;</code>":

          <pre class="bad" highlight="html">&lt;a href="?art&amp;copy">Art and Copy&lt;/a></pre>

          To avoid this problem, all named character references are required to end with a
          semicolon, and uses of named character references without a semicolon are flagged as
          errors.

          Thus, the correct way to express the above cases is as follows:

          <pre highlight="html">&lt;a href="?bill&amp;ted">Bill and Ted&lt;/a> &lt;!-- &amp;ted is ok, since it's not a named character reference --></pre>

          <pre highlight="html">&lt;a href="?art&amp;amp;copy">Art and Copy&lt;/a> &lt;!-- the &amp; has to be escaped, since &amp;copy is a named character reference --></pre>
      </div>

  : Errors involving known interoperability problems in legacy user agents
  :: Certain syntax constructs are known to cause especially subtle or serious problems in legacy
      user agents, and are therefore marked as non-conforming to help authors avoid them.

      <p class="example">
        For example, this is why the U+0060 GRAVE ACCENT character (`) is not allowed in unquoted
        attributes. In certain legacy user agents, it is sometimes treated as a quote character.
      </p>

      <p class="example">
        Another example of this is the DOCTYPE, which is required to trigger <a>no-quirks mode</a>,
        because the behavior of legacy user agents in <a>quirks mode</a> is often largely
        undocumented.
      </p>

  : Errors that risk exposing authors to security attacks
  :: Certain restrictions exist purely to avoid known security problems.

      <p class="example">
        For example, the restriction on using UTF-7 exists purely to avoid authors falling prey to a
        known cross-site-scripting attack using UTF-7. [[!UTF7]]
      </p>

  : Cases where the author's intent is unclear
  :: Markup where the author's intent is very unclear is often made non-conforming. Correcting these
      errors early makes later maintenance easier.

      <div class="example">
        For example, it is unclear whether the author intended the following to be an {{h1}} heading
        or an {{h2}} heading:

        <pre class="bad" highlight="html">&lt;h2>Contact details&lt;/h2></pre>
      </div>

  : Cases that are likely to be typos
  :: When a user makes a simple typo, it is helpful if the error can be caught early, as this can
      save the author a lot of debugging time. This specification therefore usually considers it
      an error to use element names, attribute names, and so forth, that do not match the names
      defined in this specification.

      <p class="example">
        For example, if the author typed <code>&lt;capton></code> instead of
        <code>&lt;caption></code>, this would be flagged as an error and the author could correct
        the typo immediately.
      </p>

  : Errors that could interfere with new syntax in the future
  :: In order to allow the language syntax to be extended in the future, certain otherwise
      harmless features are disallowed.

      <p class="example">
        For example, "attributes" in end tags are ignored currently, but they are invalid, in case a
        future change to the language makes use of that syntax feature without conflicting with
        already-deployed (and valid!) content.
      </p>

  Some authors find it helpful to be in the practice of always quoting all attributes and always
  including all optional tags, preferring the consistency derived from such custom over the minor
  benefits of terseness afforded by making use of the flexibility of the HTML syntax. To aid such
  authors, conformance checkers can provide modes of operation wherein such conventions are
  enforced.

<h4 id="restrictions-on-content-models-and-on-attribute-values">Restrictions on content models and
on attribute values</h4>

  <em>This section is non-normative.</em>

  Beyond the syntax of the language, this specification also places restrictions on how elements
  and attributes can be specified. These restrictions are present for similar reasons:

  : Errors involving content with dubious semantics
  :: To avoid misuse of elements with defined meanings, content models are defined that restrict
      how elements can be nested when such nestings would be of dubious value.

      <p class="example">
        For example, this specification disallows nesting a <{section}> element inside
        a <{kbd}> element, since it is highly unlikely for an author to indicate that
        an entire section should be keyed in.
      </p>

  : Errors that involve a conflict in expressed semantics
  :: Similarly, to draw the author's attention to mistakes in the use of elements, clear
      contradictions in the semantics expressed are also considered conformance errors.

      <div class="example">
        In the fragments below, for example, the semantics are nonsensical: a separator cannot
        simultaneously be a cell, nor can a radio button be a progress bar.

        <pre class="bad" highlight="html">&lt;hr role="cell"></pre>
        <pre class="bad" highlight="html">&lt;input type=radio role=progressbar></pre>
      </div>

      <p class="example">
        Another example is the restrictions on the content models of the <{ul}> element, which only
        allows <{li}> element children. Lists by definition consist just of zero or more list items,
        so if a <{ul}> element contains something other than an <{li}> element, it's not clear what
        was meant.
      </p>

  : Cases where the default styles are likely to lead to confusion
  :: Certain elements have default styles or behaviors that make certain combinations likely to
      lead to confusion. Where these have equivalent alternatives without this problem, the
      confusing combinations are disallowed.

      <p class="example">
        For example, <{div}> elements are rendered as block boxes, and <{span}> elements as inline
        boxes. Putting a block box in an inline box is unnecessarily confusing; since either nesting
        just <{div}> elements, or nesting just <{span}> elements, or nesting <{span}> elements
        inside <{div}> elements all serve the same purpose as nesting a <{div}> element in a
        <{span}> element, but only the latter involves a block box in an inline box, the latter
        combination is disallowed.
      </p>

      <p class="example">
        Another example would be the way <a>interactive content</a> cannot be nested. For example, a
        <{button}> element cannot contain a <{textarea}> element. This is because the default
        behavior of such nesting interactive elements would be highly confusing to users. Instead of
        nesting these elements, they can be placed side by side.
      </p>

  : Errors that indicate a likely misunderstanding of the specification
  :: Sometimes, something is disallowed because allowing it would likely cause author confusion.

      <p class="example">
        For example, setting the <code>disabled</code> attribute to the value "<code>false</code>"
        is disallowed, because despite the appearance of meaning that the element is enabled, it in
        fact means that the element is <em>disabled</em> (what matters for implementations is the
        presence of the attribute, not its value).
      </p>

  : Errors involving limits that have been imposed merely to simplify the language
  :: Some conformance errors simplify the language that authors need to learn.

      <p class="example">
        For example, the <{area}> element's <{area/shape}> attribute, despite accepting both
        <code>circ</code> and <code>circle</code> values in practice as synonyms, disallows the use
        of the <code>circ</code> value, so as to simplify tutorials and other learning aids. There
        would be no benefit to allowing both, but it would cause extra confusion when teaching the
        language.
      </p>

  : Errors that involve peculiarities of the parser
  :: Certain elements are parsed in somewhat eccentric ways (typically for historical reasons),
      and their content model restrictions are intended to avoid exposing the author to these
      issues.

      <div class="example">
        For example, a <{form}> element isn't allowed inside <a>phrasing content</a>, because when
        parsed as HTML, a <{form}> element's start tag will imply a <{p}> element's end tag. Thus,
        the following markup results in two paragraphs, not one:

        <pre highlight="html">&lt;p>Welcome. &lt;form>&lt;label>Name:&lt;/label> &lt;input>&lt;/form></pre>

        It is parsed exactly like the following:

        <pre highlight="html">&lt;p>Welcome. &lt;/p>&lt;form>&lt;label>Name:&lt;/label> &lt;input>&lt;/form></pre>
      </div>

  : Errors that would likely result in scripts failing in hard-to-debug ways
  :: Some errors are intended to help prevent script problems that would be hard to debug.

      <p class="example">
        This is why, for instance, it is non-conforming to have two <code>id</code> attributes with
        the same value. Duplicate IDs lead to the wrong element being selected, with sometimes
        disastrous effects whose cause is hard to determine.
      </p>

  : Errors that waste authoring time
  :: Some constructs are disallowed because historically they have been the cause of a lot of
      wasted authoring time, and by encouraging authors to avoid making them, authors can save time
      in future efforts.

      <p class="example">
        For example, a <{script> element's <{script/src}> attribute causes the element's contents to
        be ignored. However, this isn't obvious, especially if the element's contents appear to be
        executable script &mdash; which can lead to authors spending a lot of time trying to debug
        the inline script without realizing that it is not executing. To reduce this problem, this
        specification makes it non-conforming to have executable script in a <{script}> element when
        the <{script/src}> attribute is present. This means that authors who are validating their
        documents are less likely to waste time with this kind of mistake.
      </p>

  : Errors that involve areas that affect authors migrating to and from XHTML
  :: Some authors like to write files that can be interpreted as both XML and HTML with similar
      results. Though this practice is discouraged in general due to the myriad of subtle
      complications involved (especially when involving scripting, styling, or any kind of automated
      serialization), this specification has a few restrictions intended to at least somewhat
      mitigate the difficulties. This makes it easier for authors to use this as a transitionary
      step when migrating between HTML and XHTML.

      <p class="example">
        For example, there are somewhat complicated rules surrounding the <code>lang</code> and
        <code>xml:lang</code> attributes intended to keep the two synchronized.
      </p>

      <p class="example">
        Another example would be the restrictions on the values of <code>xmlns</code> attributes
        in the HTML serialization, which are intended to ensure that elements in conforming
        documents end up in the same namespaces whether processed as HTML or XML.
      </p>

  : Errors that involve areas reserved for future expansion
  :: As with the restrictions on the syntax intended to allow for new syntax in future revisions
      of the language, some restrictions on the content models of elements and values of attributes
      are intended to allow for future expansion of the HTML vocabulary.

      <p class="example">
        For example, limiting the values of the <code>target</code> attribute that start with an
        U+005F LOW LINE character (_) to only specific predefined values allows new predefined
        values to be introduced at a future time without conflicting with author-defined values.
      </p>

  : Errors that indicate a mis-use of other specifications
  :: Certain restrictions are intended to support the restrictions made by other specifications.

      <p class="example">
        For example, requiring that attributes that take media query lists use only <em>valid</em>
        media query lists reinforces the importance of following the conformance rules of that
        specification.
      </p>

<h3 id="suggested-reading">Suggested reading</h3>

  <em>This section is non-normative.</em>

  The following documents might be of interest to readers of this specification.

  : <cite>Character Model for the World Wide Web 1.0: Fundamentals</cite> [[!CHARMOD]]
  :: <blockquote>
        This Architectural Specification provides authors of specifications, software developers,
        and content developers with a common reference for interoperable text manipulation on the
        World Wide Web, building on the Universal Character Set, defined jointly by the Unicode
        Standard and ISO/IEC 10646. Topics addressed include use of the terms '''character''',
        '''encoding''' and '''string''', a reference processing model, choice and identification of
        character encodings, character escaping, and string indexing.
      </blockquote>

  : <cite>Unicode Security Considerations</cite> [[!UTR36]]
  :: <blockquote>
        Because Unicode contains such a large number of characters and incorporates the varied
        writing systems of the world, incorrect usage can expose programs or systems to possible
        security attacks. This is especially important as more and more products are
        internationalized. This document describes some of the security considerations that
        programmers, system analysts, standards developers, and users should take into account, and
        provides specific recommendations to reduce the risk of problems.
      </blockquote>

  : <cite>Web Content Accessibility Guidelines (WCAG) 2.0</cite> [[!WCAG]]
  :: <blockquote>
        Web Content Accessibility Guidelines (WCAG) 2.0 covers a wide range of recommendations for
        making Web content more accessible. Following these guidelines will make content accessible
        to a wider range of people with disabilities, including blindness and low vision, deafness
        and hearing loss, learning disabilities, cognitive limitations, limited movement, speech
        disabilities, photosensitivity and combinations of these. Following these guidelines will
        also often make your Web content more usable to users in general.
      </blockquote>

  : <cite>Authoring Tool Accessibility Guidelines (ATAG) 2.0</cite> [[!ATAG20]]
  :: <blockquote>
        This specification provides guidelines for designing Web content authoring tools that are
        more accessible for people with disabilities. An authoring tool that conforms to these
        guidelines will promote accessibility by providing an accessible user interface to authors
        with disabilities as well as by enabling, supporting, and promoting the production of
        accessible Web content by all authors.
      </blockquote>

  : <cite>User Agent Accessibility Guidelines (UAAG) 2.0</cite> [[!UAAG20]]
  :: <blockquote>
        This document provides guidelines for designing user agents that lower barriers to Web
        accessibility for people with disabilities. User agents include browsers and other types of
        software that retrieve and render Web content. A user agent that conforms to these
        guidelines will promote accessibility through its own user interface and through other
        internal facilities, including its ability to communicate with other technologies
        (especially assistive technologies). Furthermore, all users, not just users with
        disabilities, should find conforming user agents to be more usable.
      </blockquote>

  : <cite>Polyglot Markup: HTML-Compatible XHTML Documents</cite> [[!HTML-POLYGLOT]]
  :: <blockquote>
        A document that uses polyglot markup is a document that is a stream of bytes that parses
        into identical document trees (with the exception of the xmlns attribute on the root
        element) when processed as HTML and when processed as XML. Polyglot markup that meets a
        well defined set of constraints is interpreted as compatible, regardless of whether they are
        processed as HTML or as XHTML, per the HTML5 specification. Polyglot markup uses a specific
        DOCTYPE, namespace declarations, and a specific case &mdash; normally lower case but
        occasionally camel case &mdash; for element and attribute names. Polyglot markup uses lower
        case for certain attribute values. Further constraints include those on empty elements,
        named entity references, and the use of scripts and style.
      </blockquote>

  : <cite>HTML to Platform Accessibility APIs Implementation Guide</cite> [[!HPAAIG]]
  :: <blockquote>
        This is draft documentation mapping HTML elements and attributes to accessibility API Roles,
        States and Properties on a variety of platforms. It provides recommendations on deriving the
        accessible names and descriptions for HTML elements. It also provides accessible feature
        implementation examples.
      </blockquote>

<hr />
<hr />
<hr />

<h2 id="infrastructure">Common infrastructure</h2>

  <h3 id="terminology">Terminology</h3>

  This specification refers to both HTML and XML attributes and IDL attributes, often in the same
  context. When it is not clear which is being referred to, they are referred to as
  <dfn>content attributes</dfn> for HTML and XML attributes, and <dfn>IDL attributes</dfn> for those
  defined on IDL interfaces. Similarly, the term "properties" is used for both JavaScript object
  properties and CSS properties. When these are ambiguous they are qualified as
  <dfn>object properties</dfn> and <dfn>CSS properties</dfn> respectively.

  Generally, when the specification states that a feature applies to <a>the HTML syntax</a> or
  <a>the XHTML syntax</a>, it also includes the other. When a feature specifically only applies to
  one of the two languages, it is called out by explicitly stating that it does not apply to the
  other format, as in "for HTML, ... (this does not apply to XHTML)".

  This specification uses the term <dfn>document</dfn> to refer to any use of HTML, ranging from
  short static documents to long essays or reports with rich multimedia, as well as to fully-fledged
  interactive applications. The term is used to refer both to <{Document}> objects and
  their descendant DOM trees, and to serialized byte streams using the <a>HTML syntax</a> or
  <a>XHTML syntax</a>, depending on context.

  In the context of the DOM structures, the terms <a>HTML document</a> and <a>XML document</a> are
  used as defined in the DOM specification, and refer specifically to two different modes that
  <{Document}> objects can find themselves in. [[!DOM]] (Such uses are always hyperlinked
  to their definition.)

  In the context of byte streams, the term HTML document refers to resources labeled as
  <code>text/html</code>, and the term XML document refers to resources labeled with an
  <a>XML MIME type</a>.

  The term <dfn>XHTML document</dfn> is used to refer to both <{Document}>s in the
  <a>XML document</a> mode that contains element nodes in the <a>HTML namespace</a>, and byte
  streams labeled with an <a>XML MIME type</a> that contain elements from the <a>HTML namespace</a>,
  depending on context.

  <hr />

  For simplicity, terms such as <dfn>shown</dfn>, <dfn>displayed</dfn>, and <dfn>visible</dfn> might
  sometimes be used when referring to the way a document is rendered to the user. These terms are
  not meant to imply a visual medium; they must be considered to apply to other media in equivalent
  ways.

  <div class="impl">
    When an algorithm B says to return to another algorithm A, it implies that A called B. Upon
    returning to A, the implementation must continue from where it left off in calling B. Some
    algorithms run <dfn>in parallel</dfn>; this means that the algorithm's subsequent steps are to
    be run, one after another, at the same time as other logic in the specification (e.g. at the
    same time as the <a>event loop</a>). This specification does not define the precise mechanism by
    which this is achieved, be it time-sharing cooperative multitasking, fibers, threads, processes,
    using different hyperthreads, cores, CPUs, machines, etc. By contrast, an operation that is to
    run <dfn>immediately</dfn> must interrupt the currently running task, run itself, and then
    resume the previously running task.
  </div>

  The term "transparent black" refers to the color with red, green, blue, and alpha channels all set
  to zero.

<h4 id="resources">Resources</h4>

  The specification uses the term <dfn>supported</dfn> when referring to whether a user agent has an
  implementation capable of decoding the semantics of an external resource. A format or type is said
  to be <i>supported</i> if the implementation can process an external resource of that format or
  type without critical aspects of the resource being ignored. Whether a specific resource is
  <i>supported</i> can depend on what features of the resource's format are in use.

  <p class="example">
    For example, a PNG image would be considered to be in a supported format if its pixel data could
    be decoded and rendered, even if, unbeknownst to the implementation, the image also contained
    animation data.
  </p>

  <p class="example">
    An MPEG-4 video file would not be considered to be in a supported format if the compression
    format used was not supported, even if the implementation could determine the dimensions of the
    movie from the file's metadata.
  </p>

  What some specifications, in particular the HTTP specification, refer to as a
  <i>representation</i> is referred to in this specification as a <dfn>resource</dfn>. [[!HTTP11]]

  The term <dfn>MIME type</dfn> is used to refer to what is sometimes called an <i>Internet media
  type</i> in protocol literature. The term <i>media type</i> in this specification is used to refer
  to the type of media intended for presentation, as used by the CSS specifications. [[!RFC2046]]
  [[!MEDIAQ]]

  A string is a <dfn>valid MIME type</dfn> if it matches the <code>media-type</code> rule defined in
  section 3.7 "Media Types" of RFC 2616. In particular, a <span>valid MIME type</span> may include
  MIME type parameters. [[!HTTP11]]

  A string is a <dfn>valid MIME type with no parameters</dfn> if it matches the
  <code>media-type</code> rule defined in section 3.7 "Media Types" of RFC 2616, but does not
  contain any U+003B SEMICOLON characters (;). In other words, if it consists only of a type and
  subtype, with no MIME Type parameters. [[!HTTP11]]

  The term <dfn>HTML MIME type</dfn> is used to refer to the <span>MIME type</span>
  <code>text/html</code>.

  A resource's <dfn>critical subresources</dfn> are those that the resource needs to have available
  to be correctly processed. Which resources are considered critical or not is defined by the
  specification that defines the resource's format.

  The term <dfn><code>data:</code> URL</dfn> refers to <a>URLs</a> that use the <code>data:</code>
  scheme. [[!RFC2397]]

<h4 id="xml">XML</h4>

  To ease migration from HTML to XHTML, UAs conforming to this specification will place elements in
  HTML in the <code>http://www.w3.org/1999/xhtml</code> namespace, at least for the purposes of the
  DOM and CSS. The term "<dfn>HTML elements</dfn>", when used in this specification, refers to any
  element in that namespace, and thus refers to both HTML and XHTML elements.

  Except where otherwise stated, all elements defined or mentioned in this specification are in the
  <a>HTML namespace</a> ("<code>http://www.w3.org/1999/xhtml</code>"), and all attributes defined or
  mentioned in this specification have no namespace.

  The term <dfn>element type</dfn> is used to refer to the set of elements that have a given local
  name and namespace. For example, <code>button</code> elements are elements with the element type
  <code>button</code>, meaning they have the local name "<code>button</code>" and (implicitly as
  defined above) the <a>HTML namespace</a>.

  Attribute names are said to be <dfn>XML-compatible</dfn> if they match the
  <a><code>Name</code></a> production defined in XML and they contain no U+003A COLON characters
  (:). [[!XML]]

  The term <dfn>XML MIME type</dfn> is used to refer to the <a>MIME types</a> <code>text/xml</code>,
  <code>application/xml</code>, and any <a>MIME type</a> whose subtype ends with the four characters
  "<code>+xml</code>". [[!RFC7303]]

<h4 id="dom-trees">DOM trees</h4>

  The <dfn>root element of a <{Document}> object</dfn> is that <{Document}>'s
  first element child, if any. If it does not have one then the <{Document}> has no root
  element.

  The term <dfn>root element</dfn>, when not referring to a <{Document}> object's root
  element, means the furthest ancestor element node of whatever node is being discussed, or the node
  itself if it has no ancestors. When the node is a part of the document, then the node's
  <a>root element</a> is indeed the document's root element; however, if the node is not currently
  part of the document tree, the root element will be an orphaned node.

  When an element's <a>root element</a> is the <a>root element of a <{Document}> object</a>,
  it is said to be <dfn>in a <{Document}></dfn>. An element is said to have been
  <dfn>inserted into a document</dfn> when its <a>root element</a> changes and is now the document's
  <a>root element</a>. Analogously, an element is said to have been
  <dfn>removed from a document</dfn> when its <a>root element</a> changes from being the document's
  <a>root element</a> to being another element.

  A node's <dfn>home subtree</dfn> is the subtree rooted at that node's <span>root
  element</span>. When a node is <span>in a <{Document}></span>, its <span>home
  subtree</span> is that <{Document}>'s tree.

  The <{Document}> of a <code>Node</code> (such as an element) is the <{Document}>
  that the <code>Node</code>'s <code>ownerDocument</code> IDL attribute returns. When a
  <code>Node</code> is <span>in a <{Document}></span> then that <{Document}> is
  always the <code>Node</code>'s <{Document}>, and the <code>Node</code>'s
  <code>ownerDocument</code> IDL attribute thus always returns that <{Document}>.

  The <{Document}> of a content attribute is the <{Document}> of the attribute's
  element.

  The term <dfn>tree order</dfn> means a pre-order, depth-first traversal of DOM nodes involved
  (through the <code>parentNode</code>/<code>childNodes</code> relationship).

  When it is stated that some element or attribute is <dfn>ignored</dfn>, or treated as some other
  value, or handled as if it was something else, this refers only to the processing of the node
  after it is in the DOM. <span class="impl">A user agent must not mutate the DOM in such
  situations.</span>

  A content attribute is said to <dfn>change</dfn> value only if its new value is different than its
  previous value; setting an attribute to a value it already has does not change it.

  The term <dfn>empty</dfn>, when used of an attribute value, <code>Text</code> node, or string,
  means that the length of the text is zero (i.e. not even containing spaces or
  <a>control characters</a>).

  A <dfn>node <var>A</var> is inserted</dfn> into a node <var>B</var> when the
  <a>insertion steps</a> are invoked with <var>A</var> as the argument and <var>A</var>'s new parent
  is <var>B</var>. Similarly, a <dfn>node <var>A</var> is removed</dfn> from a node <var>B</var>
  when the <a>removing steps</a> are invoked with <var>A</var> as the <var>removedNode</var>
  argument and <var>B</var> as the <var>oldParent</var> argument.

<h4 id="scripting">Scripting</h4>

  The construction "a <code>Foo</code> object", where <code>Foo</code> is actually an interface,
  is sometimes used instead of the more accurate "an object implementing the interface
  <code>Foo</code>".

  An IDL attribute is said to be <dfn>getting</dfn> when its value is being retrieved
  (e.g. by author script), and is said to be <dfn>setting</dfn> when a new value is
  assigned to it.

  If a DOM object is said to be <dfn>live</dfn>, then the attributes and methods on that object
  <span class="impl">must</span> operate on the actual underlying data, not a snapshot of the
  data.

  In the contexts of events, the terms <i>fire</i> and <i>dispatch</i> are used as defined in the
  DOM specification: <dfn>firing</dfn> an event means to create and <a>dispatch</a> it, and
  <dfn>dispatching</dfn> an event means to follow the steps that propagate the event through the
  tree. The term <dfn>trusted event</dfn> is used to refer to events whose <code>isTrusted</code>
  attribute is initialized to true. [[!DOM]]

<h4 id="plugins">Plugins</h4>

  The term <dfn>plugin</dfn> refers to a user-agent defined set of content handlers used by the user
  agent that can take part in the user agent's rendering of a <{Document}> object, but that
  neither act as <span>child browsing contexts</span> of the <{Document}> nor introduce any
  <code>Node</code> objects to the <{Document}>'s DOM.

  Typically such content handlers are provided by third parties, though a user agent can also
  designate built-in content handlers as plugins.

  <div class="impl">
    A user agent must not consider the types <code>text/plain</code> and
    <code>application/octet-stream</code> as having a registered <span>plugin</span>.
  </div>

  <p class="example">
    One example of a plugin would be a PDF viewer that is instantiated in a
    <span>browsing context</span> when the user navigates to a PDF file. This would count as a
    plugin regardless of whether the party that implemented the PDF viewer component was the same as
    that which implemented the user agent itself. However, a PDF viewer application that launches
    separate from the user agent (as opposed to using the same interface) is not a plugin by this
    definition.
  </p>

  <p class="note">
    This specification does not define a mechanism for interacting with plugins, as it is expected
    to be user-agent- and platform-specific. Some UAs might opt to support a plugin mechanism such
    as the Netscape Plugin API; others might use remote content converters or have built-in support
    for certain types. Indeed, this specification doesn't require user agents to support plugins at
    all. [[!NPAPI]]
  </p>

  A plugin can be <dfn>secured</dfn> if it honors the semantics of the <code>sandbox</code>
  attribute.

  <p class="example">
    For example, a secured plugin would prevent its contents from creating pop-up windows when the
    plugin is instantiated inside a sandboxed <code>iframe</code>.
  </p>

  <div class="impl">
    <p class="warning">
      Browsers should take extreme care when interacting with external content intended for
      <a>plugins</a>. When third-party software is run with the same privileges as the user agent
      itself, vulnerabilities in the third-party software become as dangerous as those in the user
      agent.
    </p>

    Since different users having differents sets of <a>plugins</a> provides a fingerprinting vector
    that increases the chances of users being uniquely identified, user agents are encouraged to
    support the exact same set of <a>plugins</a> for each user.
    <!--INSERT FINGERPRINT-->
  </div>

<h4 id="encoding-terminology">Character encodings</h4>

  A <dfn>character encoding</dfn>, or just <i>encoding</i> where that is not ambiguous, is a defined
  way to convert between byte streams and Unicode strings, as defined in the Encoding standard. An
  <a>encoding</a> has an <dfn>encoding name</dfn> and one or more <dfn>encoding labels</dfn>,
  referred to as the encoding's <i>name</i> and <i>labels</i> in the Encoding standard.
  [[!ENCODING]]

  An <dfn>ASCII-compatible character encoding</dfn> is a single-byte or variable-length
  <a>encoding</a> in which the bytes 0x09, 0x0A, 0x0C, 0x0D, 0x20 - 0x22, 0x26, 0x27, 0x2C - 0x3F,
  0x41 - 0x5A, and 0x61 - 0x7A, ignoring bytes that are the second and later bytes of multibyte
  sequences, all correspond to single-byte sequences that map to the same Unicode characters as
  those bytes in Windows-1252. [[!ENCODING]]

  <p class="note">
    This includes such encodings as Shift_JIS, HZ-GB-2312, and variants of ISO-2022, even though it
    is possible in these encodings for bytes like 0x70 to be part of longer sequences that are
    unrelated to their interpretation as ASCII. It excludes UTF-16 variants, as well as obsolete
    legacy encodings such as UTF-7, GSM03.38, and EBCDIC variants.
  </p>

  The term <dfn>a UTF-16 encoding</dfn> refers to any variant of UTF-16: UTF-16LE or UTF-16BE,
  regardless of the presence or absence of a BOM. [[!ENCODING]]

  The term <dfn>code unit</dfn> is used as defined in the Web IDL specification: a 16 bit
  unsigned integer, the smallest atomic component of a <code>DOMString</code>. (This is a narrower
  definition than the one used in Unicode, and is not the same as a <i>code point</i>.) [[!WEBIDL]]

  The term <dfn>Unicode code point</dfn> means a <i>Unicode scalar value</i> where possible, and an
  isolated surrogate code point when not. When a conformance requirement is defined in terms of
  characters or Unicode code points, a pair of <a>code units</a> consisting of a high surrogate
  followed by a low surrogate must be treated as the single code point represented by the surrogate
  pair, but isolated surrogates must each be treated as the single code point with the value of the
  surrogate. [[!UNICODE]

  In this specification, the term <dfn>character</dfn>, when not qualified as <em>Unicode</em>
  character, is synonymous with the term <a>Unicode code point</a>.

  The term <dfn>Unicode character</dfn> is used to mean a <i>Unicode scalar value</i> (i.e. any
  Unicode code point that is not a surrogate code point). [[!UNICODE]]

  The <dfn>code-unit length</dfn> of a string is the number of <a>code units</a> in that string.

  <p class="note">
    This complexity results from the historical decision to define the DOM API in terms of 16 bit
    (UTF-16) <a>code units</a>, rather than in terms of <a>Unicode characters</a>.
  </p>

<h3 id="conformance-requirements">Conformance requirements</h3>

  All diagrams, examples, and notes in this specification are non-normative, as are all sections
  explicitly marked non-normative. Everything else in this specification is normative.

  The key words "MUST", "MUST NOT", <!--"REQUIRED",--> <!--"SHALL", "SHALL NOT",--> "SHOULD", "SHOULD
  NOT", <!--"RECOMMENDED", "NOT RECOMMENDED",--> "MAY", and "OPTIONAL" in the normative parts of
  this document are to be interpreted as described in RFC2119. The key word "OPTIONALLY" in the
  normative parts of this document is to be interpreted with the same normative meaning as "MAY" and
  "OPTIONAL". For readability, these words do not appear in all uppercase letters in this
  specification. [[!RFC2119]]

  <div class="impl">
    Requirements phrased in the imperative as part of algorithms (such as "strip any leading space
    characters" or "return false and abort these steps") are to be interpreted with the meaning of
    the key word ("must", "should", "may", etc) used in introducing the algorithm.

    <div class="example">
       For example, were the spec to say:

       <pre>To eat an orange, the user must:
       1. Peel the orange.
       2. Separate each slice of the orange.
       3. Eat the orange slices.</pre>

       ...it would be equivalent to the following:

       <pre>To eat an orange:
       1. The user must peel the orange.
       2. The user must separate each slice of the orange.
       3. The user must eat the orange slices.</pre>

       Here the key word is "must".

       The former (imperative) style is generally preferred in this specification for stylistic
       reasons.
    </div>

    Conformance requirements phrased as algorithms or specific steps may be implemented in any
    manner, so long as the end result is equivalent. (In particular, the algorithms defined in this
    specification are intended to be easy to follow, and not intended to be performant.)
  </div>

<div class="impl">
  <h4 id="conformance-classes">Conformance classes</h4>

  This specification describes the conformance criteria for <span class="impl">user agents (relevant
  to implementors) and</span> documents<span class="impl"> (relevant to authors and authoring tool
  implementors)</span>.

  <dfn>Conforming documents</dfn> are those that comply with all the conformance criteria for
  documents. For readability, some of these conformance requirements are phrased as conformance
  requirements on authors; such requirements are implicitly requirements on documents: by
  definition, all documents are assumed to have had an author. (In some cases, that author may
  itself be a user agent &mdash; such user agents are subject to additional rules, as explained
  below.)

  <p class="example">
    For example, if a requirement states that "authors must not use the <code>foobar</code>
    element", it would imply that documents are not allowed to contain elements named
    <code>foobar</code>.
  </p>

  <p class="note impl">
    There is no implied relationship between document conformance requirements and implementation
    conformance requirements. User agents are not free to handle non-conformant documents as they
    please; the processing model described in this specification applies to implementations
    regardless of the conformity of the input documents.
  </p>

  User agents fall into several (overlapping) categories with different conformance requirements.

  : Web browsers and other interactive user agents
  :: Web browsers that support <a>the XHTML syntax</a> must process elements and attributes from the
      <a>HTML namespace</a> found in XML documents as described in this specification, so that users
      can interact with them, unless the semantics of those elements have been overridden by other
      specifications.

      <p class="example">
        A conforming XHTML processor would, upon finding an XHTML <code>script</code> element in an
        XML document, execute the script contained in that element. However, if the element is found
        within a transformation expressed in XSLT (assuming the user agent also supports XSLT), then
        the processor would instead treat the <code>script</code> element as an opaque element that
        forms part of the transform.
      </p>

      Web browsers that support <a>the HTML syntax</a> must process documents labeled with an
      <a>HTML MIME type</a> as described in this specification, so that users can interact with them.

      User agents that support scripting must also be conforming implementations of the IDL fragments
      in this specification, as described in the Web IDL specification. [[!WEBIDL]]

      <p class="note">
        Unless explicitly stated, specifications that override the semantics of HTML elements do not
        override the requirements on DOM objects representing those elements. For example, the
        <code>script</code> element in the example above would still implement the
        <code>HTMLScriptElement</code> interface.
      </p>

  : Non-interactive presentation user agents
  :: User agents that process HTML and XHTML documents purely to render non-interactive versions
      of them must comply to the same conformance criteria as Web browsers, except that they are
      exempt from requirements regarding user interaction.

      <p class="note">
        Typical examples of non-interactive presentation user agents are printers (static UAs) and
        overhead displays (dynamic UAs). It is expected that most static non-interactive
        presentation user agents will also opt to <a>lack scripting support</a>.
      </p>

      <p class="example">
        A non-interactive but dynamic presentation UA would still execute scripts, allowing forms
        to be dynamically submitted, and so forth. However, since the concept of "focus" is
        irrelevant when the user cannot interact with the document, the UA would not need to support
        any of the focus-related DOM APIs.
      </p>

  : Visual user agents that support the suggested default rendering
  :: User agents, whether interactive or not, may be designated (possibly as a user option) as
      supporting the suggested default rendering defined by this specification.

      This is not required. In particular, even user agents that do implement the suggested default
      rendering are encouraged to offer settings that override this default to improve the
      experience for the user, e.g. changing the color contrast, using different focus styles, or
      otherwise making the experience more accessible and usable to the user.

      User agents that are designated as supporting the suggested default rendering must, while so
      designated, implement the rules in <aa>the rendering section</a> that that section defines as
      the behavior that user agents are <em>expected</em> to implement.

    : User agents with no scripting support

    :: Implementations that do not support scripting (or which have their scripting features
        disabled entirely) are exempt from supporting the events and DOM interfaces mentioned in
        this specification. For the parts of this specification that are defined in terms of an
        events model or in terms of the DOM, such user agents must still act as if events and the
        DOM were supported.

        <p class="note">
          Scripting can form an integral part of an application. Web browsers that do not support
          scripting, or that have scripting disabled, might be unable to fully convey the author's
          intent.
        </p>

  : Conformance checkers
  :: Conformance checkers must verify that a document conforms to the applicable conformance
      criteria described in this specification. Automated conformance checkers are exempt from
      detecting errors that require interpretation of the author's intent (for example, while a
      document is non-conforming if the content of a <code>blockquote</code> element is not a quote,
      conformance checkers running without the input of human judgement do not have to check that
      <code>blockquote</code> elements only contain quoted material).

      Conformance checkers must check that the input document conforms when parsed without a
      <a>browsing context</a> (meaning that no scripts are run, and that the parser's
      <a>scripting flag</a> is disabled), and should also check that the input document conforms
      when parsed with a <a>browsing context</a> in which scripts execute, and that the scripts
      never cause non-conforming states to occur other than transiently during script execution
      itself. (This is only a "SHOULD" and not a "MUST" requirement because it has been proven to be
      impossible. [[COMPUTABLE]])

      The term "HTML validator" can be used to refer to a conformance checker that itself conforms
      to the applicable requirements of this specification.

      <div class="note">
        XML DTDs cannot express all the conformance requirements of this specification. Therefore, a
        validating XML processor and a DTD cannot constitute a conformance checker. Also, since
        neither of the two authoring formats defined in this specification are applications of SGML,
        a validating SGML system cannot constitute a conformance checker either.

        To put it another way, there are three types of conformance criteria:

        1. Criteria that can be expressed in a DTD.
        2. Criteria that cannot be expressed by a DTD, but can still be checked by a machine.
        3. Criteria that can only be checked by a human.

        A conformance checker must check for the first two. A simple DTD-based validator only checks
        for the first class of errors and is therefore not a conforming conformance checker
        according to this specification.
      </div>

  : Data mining tools
  :: Applications and tools that process HTML and XHTML documents for reasons other than to either
      render the documents or check them for conformance should act in accordance with the semantics
      of the documents that they process.

      <p class="example">
        A tool that generates <a>document outlines</a> but increases the nesting level for each
        paragraph and does not increase the nesting level for each section would not be conforming.
      </p>

  : Authoring tools and markup generators
  :: Authoring tools and markup generators must generate <a>conforming documents</a>. Conformance
      criteria that apply to authors also apply to authoring tools, where appropriate.

      Authoring tools are exempt from the strict requirements of using elements only for their
      specified purpose, but only to the extent that authoring tools are not yet able to determine
      author intent. However, authoring tools must not automatically misuse elements or encourage
      their users to do so.

      <p class="example">
        For example, it is not conforming to use an <code>address</code> element for arbitrary
        contact information; that element can only be used for marking up contact information for
        the author of the document or section. However, since an authoring tool is likely unable to
        determine the difference, an authoring tool is exempt from that requirement. This does not
        mean, though, that authoring tools can use <code>address</code> elements for any block of
        italics text (for instance); it just means that the authoring tool doesn't have to verify
        that when the user uses a tool for inserting contact information for a section, that the
        user really is doing that and not inserting something else instead.
      </p>

      <p class="note">
        In terms of conformance checking, an editor has to output documents that conform to the same
        extent that a conformance checker will verify.
      </p>

      When an authoring tool is used to edit a non-conforming document, it may preserve the
      conformance errors in sections of the document that were not edited during the editing session
      (i.e. an editing tool is allowed to round-trip erroneous content). However, an authoring tool
      must not claim that the output is conformant if errors have been so preserved.

      Authoring tools are expected to come in two broad varieties: tools that work from structure
      or semantic data, and tools that work on a What-You-See-Is-What-You-Get media-specific editing
      basis (WYSIWYG).

      The former is the preferred mechanism for tools that author HTML, since the structure in the
      source information can be used to make informed choices regarding which HTML elements and
      attributes are most appropriate.

      However, WYSIWYG tools are legitimate. WYSIWYG tools should use elements they know are
      appropriate, and should not use elements that they do not know to be appropriate. This might
      in certain extreme cases mean limiting the use of flow elements to just a few elements, like
      <{div}>, <{b}>, <{i}>, and <{span}> and making liberal use of the <code>style</code>
      attribute.

      All authoring tools, whether WYSIWYG or not, should make a best effort attempt at enabling
      users to create well-structured, semantically rich, media-independent content.

  User agents may impose implementation-specific limits on otherwise unconstrained inputs, e.g. to
  prevent denial of service attacks, to guard against running out of memory, or to work around
  platform-specific limitations.
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

  For compatibility with existing content and prior specifications, this specification describes
  two authoring formats: one based on XML (referred to as <a>the XHTML syntax</a>), and one using a
  <a>custom format</a> inspired by SGML (referred to as <a>the HTML syntax</a>). Implementations
  must support at least one of these two formats, although supporting both is encouraged.

  Some conformance requirements are phrased as requirements on elements, attributes, methods or
  objects. Such requirements fall into two categories: those describing content model restrictions,
  and those describing implementation behavior. Those in the former category are requirements on
  documents and authoring tools. Those in the second category are requirements on user agents.
  Similarly, some conformance requirements are phrased as requirements on authors; such requirements
  are to be interpreted as conformance requirements on the documents that authors produce. (In other
  words, this specification does not distinguish between conformance criteria on authors and
  conformance criteria on documents.)
</div>

<div class="impl">
  <h4 id="dependencies">Dependencies</h4>

  This specification relies on several other underlying specifications.

  : Unicode and Encoding
  :: The Unicode character set is used to represent textual data, and the Encoding standard defines
      requirements around <a>character encodings</span>. [[!UNICODE]]

      <p class="note">
        This specification <a>introduces terminology</a> based on the terms defined in those
        specifications, as described earlier.
      </p>

      The following terms are used as defined in the Encoding standard: [[!ENCODING]]

      * <dfn>Getting an encoding</dfn>

      * The <dfn>encoder</dfn> and <dfn>decoder</dfn> algorithms for various encodings, including
        the <dfn>UTF-8 encoder</dfn> and <dfn>UTF-8 decoder</dfn>

      * The generic <dfn>decode</dfn> algorithm which takes a byte stream and an encoding and
        returns a character stream

      * The <dfn>UTF-8 decode</dfn> algorithm which takes a byte stream and returns a character
        stream, additionally stripping one leading UTF-8 Byte Order Mark (BOM), if any

      <p class="note">
        The <a>UTF-8 decoder</a> is distinct from the <i>UTF-8 decode algorithm</i>. The latter
        first strips a Byte Order Mark (BOM), if any, and then invokes the former.
      </p>

      For readability, character encodings are sometimes referenced in this specification with a
      case that differs from the canonical case given in the Encoding standard. (For example,
      "UTF-16LE" instead of "utf-16le".)</p>

  : XML and related specifications
  :: Implementations that support <a>the XHTML syntax</a> must support some version of XML, as
      well as its corresponding namespaces specification, because that syntax uses an XML
      serialization with namespaces. [[!XML]] [[!XMLNS]]

      The attribute with the tag name <dfn><code>xml:space</code></dfn> in the <a>XML namespace</a>
      is defined by the XML specification. [[!XML]]

      This specification also references the <dfn><code>&lt;?xml-stylesheet?></code></dfn>
      processing instruction, defined in the
      <cite>Associating Style Sheets with XML documents</cite> specification. [[!XMLSSPI]]

      This specification also non-normatively mentions the <dfn><code>XSLTProcessor</code></dfn>
      interface and its <dfn><code>transformToFragment()</code></dfn> and
      <dfn><code>transformToDocument()</code></dfn> methods.

  : URLs
  :: The following terms are defined in the WHATWG URL standard: [[!URL]]

      * <dfn>domain</dfn>
      * <dfn>URL</dfn>
      * <dfn>Origin</dfn> of URLs
      * <dfn>Absolute URL</dfn>
      * <dfn>Relative URL</dfn>
      * <dfn>Relative schemes</dfn>
      * The <dfn>URL parser</dfn> and <dfn>basic URL parser</dfn> as well as these parser states:
        * <dfn>scheme start state</dfn>
        * <dfn>host state</dfn>
        * <dfn>hostname state</dfn>
        * <dfn>port state</dfn>
        * <dfn>path start state</dfn>
        * <dfn>query state</dfn>
        * <dfn>fragment state</dfn>
      * <dfn>Parsed URL</dfn>
      * The <dfn>scheme</dfn> component of a <span>parsed URL</span>
      * The <dfn>scheme data</dfn> component of a <span>parsed URL</span>
      * The <dfn>username</dfn> component of a <span>parsed URL</span>
      * The <dfn>password</dfn> component of a <span>parsed URL</span>
      * The <dfn>host</dfn> component of a <span>parsed URL</span>
      * The <dfn>port</dfn> component of a <span>parsed URL</span>
      * The <dfn>path</dfn> component of a <span>parsed URL</span>
      * The <dfn>query</dfn> component of a <span>parsed URL</span>
      * The <dfn>fragment</dfn> component of a <span>parsed URL</span>
      * <dfn>non-relative flag</dfn>
      * <dfn >Parse errors</dfn> from the <span>URL parser</span>
      * The <dfn >URL serializer</dfn>
      * The <dfn>host serializer</dfn>
      * The <dfn>serialize an integer</dfn>
      * <dfn>Default encode set</dfn>
      * <dfn>Percent encode</dfn>
      * <dfn>UTF-8 percent encode</dfn>
      * <dfn>Percent decode</dfn>
      * <dfn>Decoder error</dfn>
      * <dfn>set the username</dfn>
      * <dfn>set the password</dfn>
      * The <dfn>domain to ASCII</dfn> algorithm
      * The <dfn>domain to Unicode</dfn> algorithm

      A number of schemes and protocols are referenced by this specification also:

      * The <dfn><code>about:</code></dfn> scheme [[!ABOUT]]
      * The <dfn><code>blob:</code></dfn> scheme [[!FILEAPI]]
      * The <dfn><code>data:</code></dfn> scheme [[!RFC2397]]
      * The <dfn><code>http:</code></dfn> scheme [[!HTTP11]]
      * The <dfn><code>https:</code></dfn> scheme [[!HTTP11]]
      * The <dfn><code>mailto:</code></dfn> scheme [[!MAILTO]]
      * The <dfn><code>sms:</code></dfn> scheme [[!SMS]]
      * The <dfn><code>urn:</code></dfn> scheme [[!URN]]

  : HTTP and related specifications
  :: The following terms are defined in the HTTP specifications: [[!HTTP11]]

      * <dfn><code>Accept</code></dfn> header
      * <dfn><code>Accept-Language</code></dfn> header
      * <dfn><code>Cache-Control</code></dfn> header
      * <dfn><code>Content-Disposition</code></dfn> header
      * <dfn><code>Content-Language</code></dfn> header
      * <dfn><code>Content-Length</code></dfn> header
      * <dfn><code>Host</code></dfn> header
      * <dfn><code>Last-Modified</code></dfn> header
      * <dfn><code>Referer</code></dfn> header

      The following terms are defined in the Cookie specification: [[!COOKIES]]

      * <dfn>cookie-string</dfn>
      * <dfn>receives a set-cookie-string</dfn>
      * <dfn><code>Cookie</code></dfn> header

      The following term is defined in the Web Linking specification: [[!WEBLINK]]

      * <dfn><code>Link</code></dfn> header

  : Fetch
  :: The following terms are defined in the WHATWG Fetch specification: [[!FETCH]]

      * <dfn><code>about:blank</code></dfn>
      * <dfn>fetch</dfn>
      * <dfn>ok status</dfn>
      * <dfn><code>Origin</code></dfn> header
      * <dfn>set</dfn>
      * <dfn>response</dfn> and its associated:
        * <dfn>type</dfn>
        * <dfn>url</dfn>
        * <dfn>url list</dfn>
        * <dfn>status</dfn>
        * <dfn>header list</dfn>
        * <dfn>body</dfn>
        * <dfn>internal response</dfn>
        * <dfn>HTTPS state</dfn>
      * <dfn>request</dfn> and its associated:
        * <dfn>url</dfn>
        * <dfn>method</dfn>
        * <dfn>header list</dfn>
        * <dfn>body</dfn>
        * <dfn>client</dfn>
        * <dfn>target browsing context</dfn>
        * <dfn>initiator</dfn>
        * <dfn>type</dfn>
        * <dfn>destination</dfn>
        * <dfn>origin</dfn>
        * <dfn>omit-<code>Origin</code>-header flag</dfn>
        * <dfn>referrer</dfn>
        * <dfn>synchronous flag</dfn>
        * <dfn>mode</dfn>
        * <dfn>credentials mode</dfn>
        * <dfn>use-URL-credentials flag</dfn>
        * <dfn>cache mode</dfn>
        * <dfn>redirect mode</dfn>

  : Web IDL
  :: The IDL fragments in this specification must be interpreted as required for conforming IDL
      fragments, as described in the Web IDL specification. [[!WEBIDL]]

      The following terms are defined in the Web IDL specification:

      * <dfn>Supported property indices</dfn>
      * <dfn>Determine the value of an indexed property</dfn>
      * <dfn>Support named properties</dfn>
      * <dfn>Supported property names</dfn>
      * <dfn>Unenumerable</dfn>
      * <dfn>Determine the value of a named property</dfn>
      * <dfn>Platform array objects</dfn>
      * <dfn>Read only</dfn> (when applied to arrays)
      * <dfn>Callback this value</dfn>
      * <dfn>Converting</dfn> between WebIDL types and JS types
      * <dfn>invoke the Web IDL callback function</dfn>

      The Web IDL specification also defines the following types that are used in Web IDL fragments
      in this specification:

      * <dfn><code>Array</code></dfn>
      * <dfn><code>boolean</code></dfn>
      * <dfn><code>Boolean</code></dfn>
      * <dfn><code>DOMString</code></dfn>
      * <dfn><code>USVString</code></dfn>
      * <dfn><code>double</code></dfn>
      * <dfn><code>Error</code></dfn>
      * <dfn><code>Function</code></dfn>
      * <dfn><code>long</code></dfn>
      * <dfn><code>Map</code></dfn>
      * <dfn><code>Number</code></dfn>
      * <dfn><code>Object</code></dfn>
      * <dfn><code>RegExp</code></dfn>
      * <dfn><code>Set</code></dfn>
      * <dfn><code>String</code></dfn>
      * <dfn><code>unrestricted double</code></dfn>
      * <dfn><code>unsigned long</code></dfn>

      The term <dfn>throw</dfn> in this specification is used as defined in the WebIDL
      specification. The following exception names are defined by WebIDL and used by this
      specification:

      * <dfn><code>IndexSizeError</code></dfn>
      * <dfn><code>HierarchyRequestError</code></dfn>
      * <dfn><code>InvalidCharacterError</code></dfn>
      * <dfn><code>NotFoundError</code></dfn>
      * <dfn><code>NotSupportedError</code></dfn>
      * <dfn><code>InvalidStateError</code></dfn>
      * <dfn><code>SyntaxError</code></dfn>
      * <dfn><code>InvalidAccessError</code></dfn>
      * <dfn><code>SecurityError</code></dfn>
      * <dfn><code>NetworkError</code></dfn>
      * <dfn><code>QuotaExceededError</code></dfn>
      * <dfn><code>TimeoutError</code></dfn>
      * <dfn><code>DataCloneError</code></dfn>
      * <dfn><code>TypeError</code></dfn>

      When this specification requires a user agent to <dfn>create a <code>Date</code> object</dfn>
      representing a particular time (which could be the special value Not-a-Number), the
      milliseconds component of that time, if any, must be truncated to an integer, and the time
      value of the newly created <code>Date</code> object must represent the resulting truncated
      time.

      <p class="example">
        For instance, given the time 23045 millionths of a second after 01:00 UTC on January 1st
        2000, i.e. the time 2000-01-01T00:00:00.023045Z, then the <code>Date</code> object created
        representing that time would represent the same time as that created representing the time
        2000-01-01T00:00:00.023Z, 45 millionths earlier. If the given time is NaN, then the result
        is a <code>Date</code> object that represents a time value NaN (indicating that the object
        does not represent a specific instant of time).
      </p>

  : JavaScript
  :: Some parts of the language described by this specification only support JavaScript as the
      underlying scripting language. [[!ECMA-262]]

      <p class="note">
        The term "JavaScript" is used to refer to ECMA262, rather than the official term ECMAScript,
        since the term JavaScript is more widely known. Similarly, the <a>MIME type</a> used to
        refer to JavaScript in this specification is <code>text/javascript</code>, since that is the
        most commonly used type, <a>despite it being an officially obsoleted type</a> according to
        RFC 4329. [[!RFC4329]]
      </p>

      The term <dfn>JavaScript global environment</dfn> refers to the <i>global environment</i>
      concept defined in the ECMAScript specification.

      The ECMAScript <dfn><code>SyntaxError</code></dfn> exception is also defined in the ECMAScript
      specification. [[!ECMA-262]]

      The <dfn>ArrayBuffer</dfn> and related object types and underlying concepts from the
      ECMAScript Specification are used for several features in this specification. [[!ECMA-262]]

      The <dfn><code>Date</code></dfn> object type from the ECMAScript Specification is used for
      several features of this specification. [[!ECMA-262]]

      The following helper IDL is used for referring to <code>ArrayBuffer</code>-related types:

      <pre class="idl-ignore" highlight="webidl">typedef (<dfn>Int8Array</dfn> or <dfn>Uint8Array</dfn> or <dfn>Uint8ClampedArray</dfn> or <dfn>Int16Array</dfn> or <dfn>Uint16Array</dfn> or <dfn>Int32Array</dfn> or <dfn>Uint32Array</dfn> or <dfn>Float32Array</dfn> or <dfn>Float64Array</dfn> or <dfn>DataView</dfn>) <dfn>ArrayBufferView</dfn>;</pre>

      <p class="note">
        In particular, the <code>Uint8ClampedArray</code> type is used by some
        <a>2D canvas APIs</a>, and the <a><code>WebSocket</code> API</a> uses
        <code>ArrayBuffer</code> objects for handling binary frames.
      </p>

  : DOM
  :: The Document Object Model (DOM) is a representation &mdash; a model &mdash; of a document and
      its content. The DOM is not just an API; the conformance criteria of HTML implementations are
      defined, in this specification, in terms of operations on the DOM. [[!DOM]]

      Implementations must support DOM and the events defined in UI Events, because this
      specification is defined in terms of the DOM, and some of the features are defined as
      extensions to the DOM interfaces. [[!DOM]] [[!UIEVENTS]]

      In particular, the following features are defined in the DOM specification: [[!DOM]]

      * <dfn><code>Attr</code></dfn> interface
      * <dfn><code>Comment</code></dfn> interface
      * <dfn><code>DOMImplementation</code></dfn> interface
      * <{Document}> interface
      * <dfn><code>XMLDocument</code></dfn> interface
      * <dfn><code>DocumentFragment</code></dfn> interface
      * <dfn><code>DocumentType</code></dfn> interface
      * <dfn><code>DOMException</code></dfn> interface
      * <dfn><code>ChildNode</code></dfn> interface
      * <dfn><code>Element</code></dfn> interface
      * <dfn><code>Node</code></dfn> interface
      * <dfn><code>NodeList</code></dfn> interface
      * <dfn><code>ProcessingInstruction</code></dfn> interface
      * <dfn><code>Text</code></dfn> interface
      * <dfn><code>HTMLCollection</code></dfn> interface
      * <dfn><code>item()</code></dfn> method
      * The terms <dfn>collections</dfn> and <dfn>represented by the collection</dfn>
      * <dfn><code>DOMTokenList</code></dfn> interface
      * <dfn><code>DOMSettableTokenList</code></dfn> interface
      * <dfn><code>DOMTokenList</code></dfn> interface
      * <dfn><code>DOMSettableTokenList</code></dfn> interface
      * <dfn><code>DOMSettableTokenList.value</code></dfn> attribute
      * <dfn><code>createDocument()</code></dfn> method
      * <dfn><code>createHTMLDocument()</code></dfn> method
      * <dfn><code>createElement()</code></dfn> method
      * <dfn><code>createElementNS()</code></dfn> method
      * <dfn><code>getElementById()</code></dfn> method
      * <dfn><code>getElementsByClassName()</code></dfn> method
      * <dfn><code>insertBefore()</code></dfn> method
      * <dfn><code>appendChild()</code></dfn> method
      * <dfn><code>cloneNode()</code></dfn> method
      * <dfn><code>importNode()</code></dfn> method
      * <dfn><code>childNodes</code></dfn> attribute
      * <dfn><code>localName</code></dfn> attribute
      * <dfn><code>parentNode</code></dfn> attribute
      * <dfn><code>namespaceURI</code></dfn> attribute
      * <dfn><code>tagName</code></dfn> attribute
      * <dfn><code>id</code></dfn> attribute
      * <dfn><code>textContent</code></dfn> attribute
      * The <dfn>insert</dfn>, <dfn>append</dfn>, <dfn>remove</dfn>, <dfn>replace</dfn>, and
        <dfn>adopt</dfn> algorithms for nodes
      * The <dfn>insertion steps</dfn>, <dfn>removing steps</dfn>, and <dfn>adopting steps</dfn>
        hooks
      * The <dfn>attribute list</dfn> concept.
      * The <dfn>data</dfn> of a text node.
      * <dfn><code>Event</code></dfn> interface
      * <dfn><code>EventTarget</code></dfn> interface
      * <dfn><code>EventInit</code></dfn> dictionary type
      * <dfn><code>target</code></dfn> attribute
      * <dfn><code>currentTarget</code></dfn> attribute
      * <dfn><code>isTrusted</code></dfn> attribute
      * <dfn><code>initEvent()</code></dfn> method
      * <dfn><code>addEventListener()</code></dfn> method
      * The <dfn>type</dfn> of an event
      * The concept of an <dfn>event listener</dfn> and the <a>event listeners</a> associated with
        an <code>EventTarget</code>
      * The concept of a <dfn>target override</dfn>
      * The concept of a regular <dfn>event parent</dfn> and a
        <dfn>cross-boundary event parent</dfn>
      * The <dfn>encoding</dfn> (herein the <i>character encoding</i>) and <dfn>content type</dfn>
        of a <{Document}>
      * The distinction between <dfn>XML documents</dfn> and <dfn>HTML documents</dfn>
      * The terms <dfn>quirks mode</dfn>, <dfn>limited-quirks mode</dfn>, and
        <dfn>no-quirks mode</dfn>
      * The algorithm to <dfn>clone</dfn> a <code>Node</code>, and the concept of
        <dfn>cloning steps</dfn> used by that algorithm
      * The concept of <dfn>base URL change steps</dfn> and the definition of what happens when an
        element is <dfn>affected by a base URL change</dfn>
      * The concept of an element's <dfn>unique identifier (ID)</dfn>
      * The concept of a DOM <dfn>range</dfn>, and the terms <dfn>start</dfn>, <dfn>end</dfn>, and
        <dfn>boundary point</dfn> as applied to ranges.
      * <dfn><code>MutationObserver</code></dfn> interface and <dfn>mutation observers</dfn> in
        general

      The term <dfn>throw</dfn> in this specification is used as defined in the DOM specification.
      The following <code>DOMException</code> types are defined in the DOM specification: [[!DOM]]

      * <dfn><code>IndexSizeError</code></dfn>
      * <dfn><code>HierarchyRequestError</code></dfn>
      * <dfn><code>WrongDocumentError</code></dfn>
      * <dfn><code>InvalidCharacterError</code></dfn>
      * <dfn><code>NoModificationAllowedError</code></dfn>
      * <dfn><code>NotFoundError</code></dfn>
      * <dfn><code>NotSupportedError</code></dfn>
      * <dfn><code>InvalidStateError</code></dfn>
      * <dfn><code>SyntaxError</code></dfn>
      * <dfn><code>InvalidModificationError</code></dfn>
      * <dfn><code>NamespaceError</code></dfn>
      * <dfn><code>InvalidAccessError</code></dfn>
      * <dfn><code>SecurityError</code></dfn>
      * <dfn><code>NetworkError</code></dfn>
      * <dfn><code>AbortError</code></dfn>
      * <dfn><code>URLMismatchError</code></dfn>
      * <dfn><code>QuotaExceededError</code></dfn>
      * <dfn><code>TimeoutError</code></dfn>
      * <dfn><code>InvalidNodeTypeError</code></dfn>
      * <dfn><code>DataCloneError</code></dfn>

      <p class="example">
        For example, to <i>throw a <code>TimeoutError</code> exception</i>, a user agent would
        construct a <code>DOMException</code> object whose type was the string
        "<code>TimeoutError</code>" (and whose code was the number 23, for legacy reasons) and
        actually throw that object as an exception.
      </p>

      The following features are defined in the UI Events specification: [[!UIEVENTS]]

      * <dfn><code>MouseEvent</code></dfn> interface
      * <dfn><code>MouseEventInit</code></dfn> dictionary type
      * The <dfn><code>FocusEvent</code></dfn> interface and its <dfn><code>relatedTarget</code></dfn> attribute
      * The <dfn><code>UIEvent</code></dfn> interface's <dfn><code>detail</code></dfn> attribute
      * <dfn><code>click</code></dfn> event
      * <dfn><code>dblclick</code></dfn> event
      * <dfn><code>mousedown</code></dfn> event
      * <dfn><code>mouseenter</code></dfn> event
      * <dfn><code>mouseleave</code></dfn> event
      * <dfn><code>mousemove</code></dfn> event
      * <dfn><code>mouseout</code></dfn> event
      * <dfn><code>mouseover</code></dfn> event
      * <dfn><code>mouseup</code></dfn> event
      * <dfn><code>mousewheel</code></dfn> event
      * <dfn><code>keydown</code></dfn> event
      * <dfn><code>keyup</code></dfn> event
      * <dfn><code>keypress</code></dfn> event

      The following features are defined in the Touch Events specification: [[!TOUCH-EVENTS]]

      * <dfn><code>Touch</code></dfn> interface
      * <dfn>Touch point</dfn> concept

      This specification sometimes uses the term <dfn>name</dfn> to refer to the event's
      <code>type</code>; as in, "an event named <code>click</code>" or "if the event name is
      <code>keypress</code>". The terms "name" and "type" for events are synonymous.

      The following features are defined in the DOM Parsing and Serialization specification:
      [[!DOMPARSING]]

      * <dfn><code>innerHTML</code></dfn>
      * <dfn><code>outerHTML</code></dfn>

      <p class="note">
        User agents are also encouraged to implement the features described in the
        <cite>HTML Editing APIs</cite> and <cite><code>UndoManager</code> and DOM Transaction</cite>
        specifications. [[!EDITING]] [[!UNDO]]
      </p>

      The following parts of the Fullscreen specification are referenced from this specification, in
      part to define the rendering of <code>dialog</code> elements, and also to define how the
      Fullscreen API interacts with the sandboxing features in HTML: [[!FULLSCREEN]]

      * The <dfn>top layer</dfn> concept
      * <dfn><code>requestFullscreen()</code></dfn>
      * The <dfn>fullscreen enabled flag</dfn>
      * The <dfn>fully exit fullscreen</dfn> algorithm

      The <cite>High Resolution Time</cite> specification provides the
      <dfn><code>DOMHighResTimeStamp</code></dfn> typedef and the
      <dfn><code>Performance</code></dfn> object's <dfn><code>now()</code></dfn> method. [[!HTR]]

  : File API
  :: This specification uses the following features defined in the File API specification:
      [[!FILEAPI]]

      * <dfn><code>Blob</code></dfn> interface
      * <dfn><code>File</code></dfn> interface
      * <dfn><code>FileList</code></dfn> interface
      * <dfn><code>Blob.close()</code></dfn>
      * <dfn><code>Blob.type</code></dfn>
      * The concept of <dfn>read errors</dfn>

  : Media Providers
  :: This specification references the following interfaces:

      * <dfn><code>MediaStream</code></dfn> [[!MEDIASTREAM-RECORDING]]
      * <dfn><code>MediaSource</code></dfn> [[!MEDIA-SOURCE]]

  : XMLHttpRequest
  :: This specification references the XMLHttpRequest specification to describe how the two
      specifications interact and to use its <code>ProgressEvent</code> features. The following
      features and terms are defined in the XMLHttpRequest specification: [[!XHR]]

      * <dfn><code>XMLHttpRequest</code></dfn> interface
      * <dfn><code>XMLHttpRequest.responseXML</code></dfn> attribute
      * <dfn><code>ProgressEvent</code></dfn> interface
      * <dfn><code>ProgressEvent.lengthComputable</code></dfn> attribute
      * <dfn><code>ProgressEvent.loaded</code></dfn> attribute
      * <dfn><code>ProgressEvent.total</code></dfn> attribute
      * <dfn>Fire a progress event named <var>e</var></dfn>

  : Server-Sent Events
  :: This specification references <dfn><code>EventSource</code></dfn> which is specified in the
      Server-Sent Events specification [[!EVENTSOURCE]]

  : Media Queries
  :: Implementations must support the Media Queries language. [[!MEDIAQ]]

  : CSS modules
  :: While support for CSS as a whole is not required of implementations of this specification
      (though it is encouraged, at least for Web browsers), some features are defined in terms of
      specific CSS requirements.

      In particular, some features require that a string be
      <dfn>parsed as a CSS &lt;color&gt; value</dfn>. When parsing a CSS value, user agents are
      required by the CSS specifications to apply some error handling rules. These apply to this
      specification also. [[!CSS3COLOR]] [[!CSS-2015]]

      <p class="example">
        For example, user agents are required to close all open constructs upon finding the end of a
        style sheet unexpectedly. Thus, when parsing the string "<code>rgb(0,0,0</code>" (with a
        missing close-parenthesis) for a color value, the close parenthesis is implied by this error
        handling rule, and a value is obtained (the color 'black'). However, the similar construct
        "<code>rgb(0,0,</code>" (with both a missing parenthesis and a missing "blue" value) cannot
        be parsed, as closing the open construct does not result in a viable value.
      </p>

      The term <dfn>named color</dfn> is defined in the CSS Color specification. [[!CSS3COLOR]]

      The terms <dfn>replaced element</dfn> and <dfn>intrinsic dimensions</dfn> are defined in the
      CSS specification. [[!CSS-2015]]

      The terms <dfn>intrinsic width</dfn> and <dfn>intrinsic height</dfn> refer to the width
      dimension and the height dimension, respectively, of <a>intrinsic dimensions</a>.

      The term <dfn>provides a paint source</dfn> is used as defined in the
      <cite>CSS Image Values and Replaced Content</cite> specification to define the interaction of
      certain HTML elements with the CSS 'element()' function. [[!CSS3-IMAGES]]

      The term <dfn>default object size</dfn> is also defined in the
      <cite>CSS Image Values and Replaced Content</cite> specification. [[!CSS3-IMAGES]]

      Implementations that support scripting must support the CSS Object Model. The following
      features and terms are defined in the CSSOM specifications: [[!CSSOM]] [[!CSSOM-VIEW]]

      * <dfn><code>Screen</code></dfn>
      * <dfn><code>LinkStyle</code></dfn>
      * <dfn><code>CSSStyleDeclaration</code></dfn>
      * <dfn><code>cssText</code></dfn> attribute of <code>CSSStyleDeclaration</code>
      * <dfn><code>StyleSheet</code></dfn>
      * The terms <dfn>create a CSS style sheet</dfn>, <dfn>remove a CSS style sheet</dfn>, and
        <dfn>associated CSS style sheet</dfn>
      * <dfn>CSS style sheets</dfn> and their properties: <dfn>type</dfn>, <dfn>location</dfn>,
        <dfn>parent CSS style sheet</dfn>, <dfn>owner node</dfn>, <dfn>owner CSS rule</dfn>,
        <dfn>media</dfn>, <dfn>title</dfn>, <dfn>alternate flag</dfn>, <dfn>disabled flag</dfn>,
        <dfn>CSS rules</dfn>, <dfn>origin-clean flag</dfn>
      * <dfn>Alternative style sheet sets</dfn> and the <dfn>preferred style sheet set</dfn>
      * <dfn>Serializing a CSS value</dfn>
      * <dfn>Scroll an element into view</dfn>
      * <dfn>Scroll to the beginning of the document</dfn>
      * The <dfn><code>resize</code></dfn> event
      * The <dfn><code>scroll</code></dfn> event

      The following features and terms are defined in the <cite>CSS Syntax</cite> specifications:
      [[!CSS3-SYNTAX]]

      * <dfn>Parse a comma-separated list of component values</dfn>
      * <dfn>component value</dfn>
      * <dfn>environment encoding</dfn>
      * <dfn>&lt;whitespace-token></dfn>

      The feature <dfn>&lt;length></dfn> is defined in the <cite>CSS Values and Units</cite>
      specification. [[!CSS-VALUES]]

      The term <dfn>CSS styling attribute</dfn> is defined in the <cite>CSS Style Attributes</cite>
      specification. [[!CSSATTR]]

      The <code>CanvasRenderingContext2D</code> object's use of fonts depends on the features
      described in the CSS <cite>Fonts</cite> and <cite>Font Loading</cite> specifications,
      including in particular <dfn><code>FontFace</code></dfn> objects and the
      <dfn>font source</dfn> concept. [[!CSS3-FONTS]] [[!CSSFONTLOAD]]

      The following interface is defined in the Geometry Interfaces Module specification:
      [[!GEOMETRY-1]]

      * <dfn><code>DOMMatrix</code></dfn> interface

  : SVG
  :: The <code>CanvasRenderingContext2D</code> object's use of fonts depends on the features
      described in the CSS <cite>Fonts</cite> and <cite>Font Loading</cite> specifications,
      including in particular <dfn><code>FontFace</code></dfn> objects and the
      <dfn>font source</dfn> concept. [[!CSS3-FONTS]] [[!CSSFONTLOAD]]

      The following interface is defined in the SVG specification: [[!SVG]]

      * <dfn><code>SVGMatrix</code></dfn>

  : WebGL
  :: The following interface is defined in the WebGL specification: [[!WEBGL]]

      * <dfn><code>WebGLRenderingContext</code></dfn>

  : WebVTT
  :: Implementations may support <dfn>WebVTT</dfn> as a text track format for subtitles, captions,
      chapter titles, metadata, etc, for media resources. [[!WEBVTT]]

      The following terms, used in this specification, are defined in the WebVTT specification:

      * <dfn>WebVTT file</dfn>
      * <dfn>WebVTT file using cue text</dfn>
      * <dfn>WebVTT file using chapter title text</dfn>
      * <dfn>WebVTT file using only nested cues</dfn>
      * <dfn>WebVTT parser</dfn>
      * The <dfn>rules for updating the display of WebVTT text tracks</dfn>
      * The <dfn>rules for interpreting WebVTT cue text</dfn>
      * The WebVTT <dfn>text track cue writing direction</dfn>

  : The WebSocket protocol
  :: The following terms are defined in the WebSocket protocol specification: [[!WSP]]

      * <dfn>establish a WebSocket connection</dfn>
      * <dfn>the WebSocket connection is established</dfn>
      * <dfn>validate the server's response</dfn>
      * <dfn>extensions in use</dfn>
      * <dfn>subprotocol in use</dfn>
      * <dfn>headers to send appropriate cookies</dfn>
      * <dfn>cookies set during the server's opening handshake</dfn>
      * <dfn>a WebSocket message has been received</dfn>
      * <dfn>send a WebSocket Message</dfn>
      * <dfn>fail the WebSocket connection</dfn>
      * <dfn>close the WebSocket connection</dfn>
      * <dfn>start the WebSocket closing handshake</dfn>
      * <dfn>the WebSocket closing handshake is started</dfn>
      * <dfn>the WebSocket connection is closed</dfn> (possibly <i>cleanly</i>)
      * <dfn>the WebSocket connection close code</dfn>
      * <dfn>the WebSocket connection close reason</dfn>
      * <dfn><code>Sec-WebSocket-Protocol</code></dfn> field

  : ARIA
  :: The <dfn><code>role</code></dfn> attribute is defined in the ARIA specification, as are the
      following roles: [[!WAI-ARIA]]

      * <dfn><code>alert</code></dfn>
      * <dfn><code>alertdialog</code></dfn>
      * <dfn><code>application</code></dfn>
      * <dfn><code>article</code></dfn>
      * <dfn><code>banner</code></dfn>
      * <dfn><code>button</code></dfn>
      * <dfn><code>checkbox</code></dfn>
      * <dfn><code>columnheader</code></dfn>
      * <dfn><code>combobox</code></dfn>
      * <dfn><code>complementary</code></dfn>
      * <dfn><code>contentinfo</code></dfn>
      * <dfn><code>dialog</code></dfn>
      * <dfn><code>directory</code></dfn>
      * <dfn><code>document</code></dfn>
      * <dfn><code>grid</code></dfn>
      * <dfn><code>gridcell</code></dfn>
      * <dfn><code>group</code></dfn>
      * <dfn><code>heading</code></dfn>
      * <dfn><code>img</code></dfn>
      * <dfn><code>link</code></dfn>
      * <dfn><code>list</code></dfn>
      * <dfn><code>listbox</code></dfn>
      * <dfn><code>listitem</code></dfn>
      * <dfn><code>log</code></dfn>
      * <dfn><code>main</code></dfn>
      * <dfn><code>marquee</code></dfn>
      * <dfn><code>menu</code></dfn>
      * <dfn><code>menubar</code></dfn>
      * <dfn><code>menuitem</code></dfn>
      * <dfn><code>menuitemcheckbox</code></dfn>
      * <dfn><code>menuitemradio</code></dfn>
      * <dfn><code>navigation</code></dfn>
      * <dfn><code>note</code></dfn>
      * <dfn><code>option</code></dfn>
      * <dfn><code>presentation</code></dfn>
      * <dfn><code>progressbar</code></dfn>
      * <dfn><code>radio</code></dfn>
      * <dfn><code>region</code></dfn>
      * <dfn><code>row</code></dfn>
      * <dfn><code>rowgroup</code></dfn>
      * <dfn><code>rowheader</code></dfn>
      * <dfn><code>search</code></dfn>
      * <dfn><code>separator</code></dfn>
      * <dfn><code>slider</code></dfn>
      * <dfn><code>spinbutton</code></dfn>
      * <dfn><code>status</code></dfn>
      * <dfn><code>tab</code></dfn>
      * <dfn><code>tablist</code></dfn>
      * <dfn><code>textbox</code></dfn>
      * <dfn><code>toolbar</code></dfn>
      * <dfn><code>tree</code></dfn>
      * <dfn><code>treeitem</code></dfn>

      In addition, the following <dfn><code>aria-*</code></dfn> content attributes are defined in
      the ARIA specification: [[!WAI-ARIA]]

      * <dfn><code>aria-checked</code></dfn>
      * <dfn><code>aria-describedby</code></dfn>
      * <dfn><code>aria-disabled</code></dfn>
      * <dfn><code>aria-expanded</code></dfn>
      * <dfn><code>aria-hidden</code></dfn>
      * <dfn><code>aria-invalid</code></dfn>
      * <dfn><code>aria-label</code></dfn>
      * <dfn><code>aria-level</code></dfn>
      * <dfn><code>aria-multiline</code></dfn>
      * <dfn><code>aria-multiselectable</code></dfn>
      * <dfn><code>aria-owns</code></dfn>
      * <dfn><code>aria-readonly</code></dfn>
      * <dfn><code>aria-required</code></dfn>
      * <dfn><code>aria-selected</code></dfn>
      * <dfn><code>aria-sort</code></dfn>
      * <dfn><code>aria-valuemax</code></dfn>
      * <dfn><code>aria-valuemin</code></dfn>
      * <dfn><code>aria-valuenow</code></dfn>

  : Content Security Policy
  :: The following terms are defined in <cite>Content Security Policy</cite>: [[!CSP]]

      * <dfn>Content Security Policy</dfn>
      * <dfn>Content Security Policy directive</dfn>
      * The <dfn>Content Security Policy syntax</dfn>
      * <dfn>enforce the policy</dfn>
      * The <dfn><code>frame-ancestors</code> directive</dfn>
      * The <dfn>parse a serialized Content Security Policy</dfn> algorithm
      * The <dfn><code>report-uri</code> directive</dfn>
      * The <dfn><code>sandbox</code> directive</dfn>

  : Service Workers
  :: The following terms are defined in <cite>Service Workers</cite>: [[!SERVICE-WORKERS]]

      * <dfn>match service worker registration</dfn>

  This specification does not <em>require</em> support of any particular network protocol, style
  sheet language, scripting language, or any of the DOM specifications beyond those required in the
  list above. However, the language described by this specification is biased towards CSS as the
  styling language, JavaScript as the scripting language, and HTTP as the network protocol, and
  several features assume that those languages and protocols are in use.

  A user agent that implements the HTTP protocol must implement the Web Origin Concept
  specification and the HTTP State Management Mechanism specification (Cookies) as well. [[!HTTP11]]
  [[!ORIGIN]] [[!COOKIES]]

  <p class="note">
    This specification might have certain additional requirements on character encodings, image
    formats, audio formats, and video formats in the respective sections.
  </p>
</div>

<h4 id="extensibility">Extensibility</h4>

  Vendor-specific proprietary user agent extensions to this specification are strongly discouraged.
  Documents must not use such extensions, as doing so reduces interoperability and fragments the
  user base, allowing only users of specific user agents to access the content in question.

  <div class="impl">
    If such extensions are nonetheless needed, e.g. for experimental purposes, then vendors are
    strongly urged to use one of the following extension mechanisms:

    * For markup-level features that can be limited to the XML serialization and need not be
        supported in the HTML serialization, vendors should use the namespace mechanism to define
        custom namespaces in which the non-standard elements and attributes are supported.

    * For markup-level features that are intended for use with <span>the HTML syntax</span>,
        extensions should be limited to new attributes of the form
        "<code>x-<var>vendor</var>-<var>feature</var></code>", where <var>vendor</var> is a short
        string that identifies the vendor responsible for the extension, and <var>feature</var> is
        the name of the feature. New element names should not be created. Using attributes for such
        extensions exclusively allows extensions from multiple vendors to co-exist on the same
        element, which would not be possible with elements. Using the
        "<code>x-<var>vendor</var>-<var>feature</var></code>" form allows extensions to be made
        without risk of conflicting with future additions to the specification.

      <div class="example">
        For instance, a browser named "FerretBrowser" could use "ferret" as a vendor prefix, while a
        browser named "Mellblom Browser" could use "mb". If both of these browsers invented
        extensions that turned elements into scratch-and-sniff areas, an author experimenting with
        these features could write:

        <pre>&lt;p>This smells of lemons!
        &lt;span x-ferret-smellovision x-ferret-smellcode="LEM01"
        x-mb-outputsmell x-mb-smell="lemon juice">&lt;/span>&lt;/p></pre>
      </div>

    Attribute names beginning with the two characters "<code>x-</code>" are reserved for
    user agent use and are guaranteed to never be formally added to the HTML language. For
    flexibility, attributes names containing underscores (the U+005F LOW LINE character) are also
    reserved for experimental purposes and are guaranteed to never be formally added to the HTML
    language.

    <p class="note">Pages that use such attributes are by definition non-conforming.</p>

    For DOM extensions, e.g. new methods and IDL attributes, the new members should be prefixed by
    vendor-specific strings to prevent clashes with future versions of this specification.

    For events, experimental event types should be prefixed with vendor-specific strings.

    <div class="example">
      For example, if a user agent called "Pleas<!--e h-->old" were to add an event to indicate when
      the user is going up in an elevator, it could use the prefix "<code>pleasold</code>" and
      thus name the event "<code>pleasoldgoingup</code>", possibly with an event handler attribute
      named "<code>onpleasoldgoingup</code>".</p>
    </div>

    All extensions must be defined so that the use of extensions neither contradicts nor causes the
    non-conformance of functionality defined in the specification.

    <div class="example">
      For example, while strongly discouraged from doing so, an implementation "Foo Browser" could
      add a new IDL attribute "<code>fooTypeTime</code>" to a control's DOM interface that returned
      the time it took the user to select the current value of a control (say). On the other hand,
      defining a new control that appears in a form's <code>elements</code> array would be in
      violation of the above requirement, as it would violate the definition of
      <code>elements</code> given in this specification.</p>
    </div>

    When adding new <a>reflecting</a> IDL attributes corresponding to content attributes of the form
    "<code>x-<var>vendor</var>-<var>feature</var></code>", the IDL attribute should be named
    "<code><var>vendor</var><var>Feature</var></code>" (i.e. the "<code>x</code>" is dropped from
    the IDL attribute's name).</p>
</div>

<hr />

  When vendor-neutral extensions to this specification are needed, either this specification can be
  updated accordingly, or an extension specification can be written that overrides the requirements
  in this specification. When someone applying this specification to their activities decides that
  they will recognize the requirements of such an extension specification, it becomes an
  <dfn>applicable specification</dfn> for the purposes of conformance requirements in this
  specification.

  <p class="note">
    Someone could write a specification that defines any arbitrary byte stream as conforming, and
    then claim that their random junk is conforming. However, that does not mean that their random
    junk actually is conforming for everyone's purposes: if someone else decides that that
    specification does not apply to their work, then they can quite legitimately say that the
    aforementioned random junk is just that, junk, and not conforming at all. As far as conformance
    goes, what matters in a particular community is what that community <em>agrees</em> is
    applicable.
  </p>

  <dfn>applicable specification</dfn>.

  The conformance terminology for documents depends on the nature of the changes introduced by such
  applicable specifications, and on the content and intended interpretation of the document.
  Applicable specifications MAY define new document content (e.g. a foobar element), MAY prohibit
  certain otherwise conforming content (e.g. prohibit use of &lt;table>s), or MAY change the
  semantics, DOM mappings, or other processing rules for content defined in this specification.
  Whether a document is or is not a <a>conforming HTML5 document</a> does not depend on the use of
  applicable specifications: if the syntax and semantics of a given <a>conforming HTML5 document</a>
  is unchanged by the use of applicable specification(s), then that document remains a
  <a>conforming HTML5 document</a>. If the semantics or processing of a given (otherwise conforming)
  document is changed by use of applicable specification(s), then it is not a
  <a>conforming HTML5 document</a>. For such cases, the applicable specifications SHOULD define
  conformance terminology.</p>

  <p class="note">
    As a suggested but not required convention, such specifications might define conformance
    terminology such as: "Conforming HTML5+XXX document", where XXX is a short name
    for the applicable specification. (Example: "Conforming HTML5+AutomotiveExtensions document").
  </p>

  <p class="note">a consequence of the rule given above is that certain syntactically correct HTML5
    documents may not be <a>conforming HTML5 documents</a> in the presence of applicable
    specifications. (Example: the applicable specification defines &lt;table> to be a piece of
    furniture &#8212; a document written to that specification and containing a &lt;table> element
    is NOT a <a>conforming HTML5 document</a>, even if the element happens to be syntactically
    correct HTML5.)
  </p>

<div class="impl">

  <hr />

  User agents must treat elements and attributes that they do not understand as semantically
  neutral; leaving them in the DOM (for DOM processors), and styling them according to CSS (for CSS
  processors), but not inferring any meaning from them.

  When support for a feature is disabled (e.g. as an emergency measure to mitigate a security
  problem, or to aid in development, or for performance reasons), user agents must act as if they
  had no support for the feature whatsoever, and as if the feature was not mentioned in this
  specification. For example, if a particular feature is accessed via an attribute in a Web IDL
  interface, the attribute itself would be omitted from the objects that implement that interface
  &mdash; leaving the attribute on the object but making it return null or throw an exception is
  insufficient.

</div>

<div class="impl">
  <h4 id="interactions-with-xpath-and-xslt">Interactions with XPath and XSLT</h4>

  Implementations of XPath 1.0 that operate on <a>HTML documents</a> parsed or created in the
  manners described in this specification (e.g. as part of the <code>document.evaluate()</code> API)
  must act as if the following edit was applied to the XPath 1.0 specification.

  First, remove this paragraph:

  <blockquote cite="http://www.w3.org/TR/1999/REC-xpath-19991116#node-tests">
    A <a>QName</a> in the node test is expanded into an <a>expanded-name</a> using the namespace
    declarations from the expression context. This is the same way expansion is done for element
    type names in start and end-tags except that the default namespace declared with
    <code>xmlns</code> is not used: if the <a>QName</a> does not have a prefix, then the namespace
    URI is null (this is the same way attribute names are expanded). It is an error if the
    <a>QName</a> has a prefix for which there is no namespace declaration in the expression context.
  </blockquote>

  Then, insert in its place the following:

  <blockquote cite="http://www.w3.org/Bugs/Public/show_bug.cgi?id=7059#c37">
    A QName in the node test is expanded into an expanded-name using the namespace declarations from
    the expression context. If the QName has a prefix, then there must be a namespace declaration
    for this prefix in the expression context, and the corresponding namespace URI is the one that
    is associated with this prefix. It is an error if the QName has a prefix for which there is no
    namespace declaration in the expression context.

    If the QName has no prefix and the principal node type of the axis is element, then the default
    element namespace is used. Otherwise if the QName has no prefix, the namespace URI is null. The
    default element namespace is a member of the context for the XPath expression. The value of the
    default element namespace when executing an XPath expression through the DOM3 XPath API is
    determined in the following way:

    1. If the context node is from an HTML DOM, the default element namespace is
        "http://www.w3.org/1999/xhtml".
    2. Otherwise, the default element namespace URI is null.

    <p class="note">
      This is equivalent to adding the default element namespace feature of XPath 2.0 to XPath 1.0,
      and using the HTML namespace as the default element namespace for HTML documents. It is
      motivated by the desire to have implementations be compatible with legacy HTML content while
      still supporting the changes that this specification introduces to HTML regarding the
      namespace used for HTML elements, and by the desire to use XPath 1.0 rather than XPath 2.0.
    </p>
  </blockquote>

  <p class="note">
    This change is a <a>willful violation</a> of the XPath 1.0 specification, motivated by
    desire to have implementations be compatible with legacy content while still supporting the
    changes that this specification introduces to HTML regarding which namespace is used for HTML
    elements. [[!XPATH10]]
  </p>

  <hr />

  XSLT 1.0 processors outputting to a DOM when the output method is "html" (either explicitly or via
  the defaulting rule in XSLT 1.0) are affected as follows:

  If the transformation program outputs an element in no namespace, the processor must, prior to
  constructing the corresponding DOM element node, change the namespace of the element to the
  <a>HTML namespace</a>, <a>ASCII-lowercase</a> the element's local name, and <a>ASCII-lowercase</a>
  the names of any non-namespaced attributes on the element.

  <p class="note">
    This requirement is a <a>willful violation</a> of the XSLT 1.0 specification, required because
    this specification changes the namespaces and case-sensitivity rules of HTML in a manner that
    would otherwise be incompatible with DOM-based XSLT transformations. (Processors that serialize
    the output are unaffected.) [[!XSLT10]]
  </p>

  <hr />

  This specification does not specify precisely how XSLT processing interacts with the
  <a>HTML parser</a> infrastructure (for example, whether an XSLT processor acts as if it puts any
  elements into a <a>stack of open elements</a>). However, XSLT processors must <a>stop parsing</a>
  if they successfully complete, and must set the <a>current document readiness</a> first to
  "<code>interactive</code>" and then to "<code>complete</code>" if they are aborted.

  <hr />

  This specification does not specify how XSLT interacts with the <a>navigation</a> algorithm, how
  it fits in with the <a>event loop</a>, nor how error pages are to be handled (e.g. whether XSLT
  errors are to replace an incremental XSLT output, or are rendered inline, etc).

  <p class="note">
    There are also additional non-normative comments regarding the interaction of XSLT and HTML
    <a>in the <code>script</code> element section</a>, and of XSLT, XPath, and HTML <a>in the
    <code>template</code> element section</a>.
  </p>
</div>

<h3 id="case-sensitivity-and-string-comparison">Case-sensitivity and string comparison</h3>

  Comparing two strings in a <dfn>case-sensitive</dfn> manner means comparing them exactly, code
  point for code point.

  Comparing two strings in an <dfn>ASCII case-insensitive</dfn> manner means comparing them exactly,
  code point for code point, except that the characters in the range U+0041 to U+005A (i.e. LATIN
  CAPITAL LETTER A to LATIN CAPITAL LETTER Z) and the corresponding characters in the range U+0061
  to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) are considered to also match.

  Comparing two strings in a <dfn>compatibility caseless</dfn> manner means using the Unicode
  <i>compatibility caseless match</i> operation to compare the two strings, with no
  language-specific tailoirings. [[!UNICODE]]

  Except where otherwise stated, string comparisons must be performed in a <a>case-sensitive</A>
  manner.

  <div class="impl">
    <dfn>Converting a string to ASCII uppercase</dfn> means replacing all characters in the range
    U+0061 to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) with the corresponding
    characters in the range U+0041 to U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z).

    <dfn>Converting a string to ASCII lowercase</dfn> means replacing all characters in the range
    U+0041 to U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) with the corresponding
    characters in the range U+0061 to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z).
  </div>

  A string <var>pattern</var> is a <dfn>prefix match</dfn> for a string <var>s</var> when
  <var>pattern</var> is not longer than <var>s</var> and truncating <var>s</var> to
  <var>pattern</var>'s length leaves the two strings as matches of each other.

<h3 id="common-microsyntaxes">Common microsyntaxes</h3>

  There are various places in HTML that accept particular data types, such as dates or numbers. This
  section describes what the conformance criteria for content in those formats is, and how to parse
  them.

  <div class="impl">
    <p class="note">
      Implementors are strongly urged to carefully examine any third-party libraries they might
      consider using to implement the parsing of syntaxes described below. For example, date
      libraries are likely to implement error handling behavior that differs from what is required
      in this specification, since error-handling behavior is often not defined in specifications
      that describe date syntaxes similar to those used in this specification, and thus
      implementations tend to vary greatly in how they handle errors.
    </p>
  </div>

<div class="impl">
  <h4 id="common-parser-idioms">Common parser idioms</h4>
</div>

  The <dfn>space characters</dfn>, for the purposes of this specification, are U+0020 SPACE, U+0009
  CHARACTER TABULATION (tab), U+000A LINE FEED (LF), U+000C FORM FEED (FF), and U+000D CARRIAGE
  RETURN (CR).

  The <dfn>White_Space characters</dfn> are those that have the Unicode property "White_Space" in
  the Unicode <code>PropList.txt</code> data file. [[!UNICODE]]

  <p class="note">
    This should not be confused with the "White_Space" value (abbreviated "WS") of the "Bidi_Class"
    property in the <code>Unicode.txt</code> data file.
  </p>

  The <dfn>control characters</dfn> are those whose Unicode "General_Category" property has the
  value "Cc" in the Unicode <code>UnicodeData.txt</code> data file. [[!UNICODE]]

  The <dfn>uppercase ASCII letters</dfn> are the characters in the range U+0041 LATIN CAPITAL LETTER
  A to U+005A LATIN CAPITAL LETTER Z.

  The <dfn>lowercase ASCII letters</dfn> are the characters in the range U+0061 LATIN SMALL LETTER A
  to U+007A LATIN SMALL LETTER Z.

  The <dfn>ASCII digits</dfn> are the characters in the range U+0030 DIGIT ZERO (0) to U+0039 DIGIT
  NINE (9).

  The <dfn>alphanumeric ASCII characters</dfn> are those that are either
  <a>uppercase ASCII letters</a>, <a>lowercase ASCII letters</a>, or <a>ASCII digits</a>.

  The <dfn>ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0) to U+0039
  DIGIT NINE (9), U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL LETTER F, and U+0061 LATIN
  SMALL LETTER A to U+0066 LATIN SMALL LETTER F.

  The <dfn>uppercase ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0)
  to U+0039 DIGIT NINE (9) and U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL LETTER F only.

  The <dfn>lowercase ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0)
  to U+0039 DIGIT NINE (9) and U+0061 LATIN SMALL LETTER A to U+0066 LATIN SMALL LETTER F only.

<div class="impl">
  Some of the micro-parsers described below follow the pattern of having an <var>input</var>
  variable that holds the string being parsed, and having a <var>position</var> variable pointing at
  the next character to parse in <var>input</var>.

  For parsers based on this pattern, a step that requires the user agent to <dfn>collect a sequence
  of characters</dfn> means that the following algorithm must be run, with <var>characters</var>
  being the set of characters that can be collected:

  1. Let <var>input</var> and <var>position</var> be the same variables as those of the same name in
      the algorithm that invoked these steps.
  2. Let <var>result</var> be the empty string.
  3. While <var>position</var> doesn't point past the end of <var>input</var> and the character at
      <var>position</var> is one of the <var>characters</var>, append that character to the end of
      <var>result</var> and advance <var>position</var> to the next character in <var>input</var>.
  4. Return <var>result</var>.

  The step <dfn>skip whitespace</dfn> means that the user agent must
  <a>collect a sequence of characters</a> that are <a>space characters</a>. The collected characters
  are not used.

  When a user agent is to <dfn>strip line breaks</dfn> from a string, the user agent must remove
  any U+000A LINE FEED (LF) and U+000D CARRIAGE RETURN (CR) characters from that string.

  When a user agent is to <dfn>strip leading and trailing whitespace</dfn> from a string, the
  user agent must remove all <a>space characters</a> that are at the start or end of the string.

  When a user agent is to <dfn>strip and collapse whitespace</dfn> in a string, it must replace any
  sequence of one or more consecutive <a>space characters</a> in that string with a single U+0020
  SPACE character, and then <a>strip leading and trailing whitespace</a> from that string.

  When a user agent has to <dfn>strictly split a string</dfn> on a particular delimiter character
  <var>delimiter</var>, it must use the following algorithm:

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially
      pointing at the start of the string.
  3. Let <var>tokens</var> be an ordered list of tokens, initially empty.
  4. While <var>position</var> is not past the end of <var>input</var>:
      1. <a>Collect a sequence of characters</a> that are not the <var>delimiter</var> character.
      2. Append the string collected in the previous step to <var>tokens</var>.
      3. Advance <var>position</var> to the next character in <var>input</var>.
  5. Return <var>tokens</var>.

  <p class="note">
    For the special cases of splitting a string <a>on spaces</a> and <a>on commas</a>, this
    algorithm does not apply (those algorithms also perform <a>whitespace trimming</a>).
  </p>
</div>

<h4 id="boolean-attributes">Boolean attributes</h4>

  A number of attributes are <dfn>boolean attributes</dfn>. The presence of a boolean attribute on
  an element represents the true value, and the absence of the attribute represents the false value.

  If the attribute is present, its value must either be the empty string or a value that is an
  <a>ASCII case-insensitive</a> match for the attribute's canonical name, with no leading or
  trailing whitespace.

  <p class="note">
    The values "true" and "false" are not allowed on boolean attributes. To represent a false value,
    the attribute has to be omitted altogether.
  </p>

  <div class="example">
    Here is an example of a checkbox that is checked and disabled. The <code>checked</code> and
    <code>disabled</code> attributes are the boolean attributes.

    <pre>&lt;label>&lt;input type=checkbox checked name=cheese disabled> Cheese&lt;/label></pre>

    This could be equivalently written as this:

    <pre>&lt;label>&lt;input type=checkbox checked=checked name=cheese disabled=disabled> Cheese&lt;/label></pre>

    You can also mix styles; the following is still equivalent:

    <pre>&lt;label>&lt;input type='checkbox' checked name=cheese disabled=""> Cheese&lt;/label></pre>
  </div>

<h4 id="keywords-and-enumerated-attributes">Keywords and enumerated attributes</h4>

  Some attributes are defined as taking one of a finite set of keywords. Such attributes are called
  <dfn>enumerated attributes</dfn>. The keywords are each defined to map to a particular
  <em>state</em> (several keywords might map to the same state, in which case some of the keywords
  are synonyms of each other; additionally, some of the keywords can be said to be non-conforming,
  and are only in the specification for historical reasons). In addition, two default states can be
  given. The first is the <dfn><i>invalid value default</i></dfn>, the second is the
  <dfn><i>missing value default</i></dfn>.

  If an enumerated attribute is specified, the attribute's value must be an
  <a>ASCII case-insensitive</a> match for one of the given keywords that are not said to be
  non-conforming, with no leading or trailing whitespace.

  When the attribute is specified, if its value is an <a>ASCII case-insensitive</a> match for one of
  the given keywords then that keyword's state is the state that the attribute represents. If the
  attribute value matches none of the given keywords, but the attribute has an
  <i>invalid value default</i>, then the attribute represents that state. Otherwise, if the
  attribute value matches none of the keywords but there is a <i>missing value default</i> state
  defined, then <em>that</em> is the state represented by the attribute. Otherwise, there is no
  default, and invalid values mean that there is no state represented.

  When the attribute is <em>not</em> specified, if there is a <i>missing value default</i> state
  defined, then that is the state represented by the (missing) attribute. Otherwise, the absence of
  the attribute means that there is no state represented.

  <p class="note">The empty string can be a valid keyword.</p>

<h4 id="numbers">Numbers</h4>

<h5 id="signed-integers">Signed integers</h5>

  A string is a <dfn>valid integer</dfn> if it consists of one or more <a>ASCII digits</a>,
  optionally prefixed with a U+002D HYPHEN-MINUS character (-).

  A <a>valid integer</a> without a U+002D HYPHEN-MINUS (-) prefix represents the number that is
  represented in base ten by that string of digits. A <a>valid integer</a> <em>with</em> a U+002D
  HYPHEN-MINUS (-) prefix represents the number represented in base ten by the string of digits that
  follows the U+002D HYPHEN-MINUS, subtracted from zero.

  <div class="impl">
    The <dfn>rules for parsing integers</dfn> are as given in the following algorithm. When
    invoked, the steps must be followed in the order given, aborting at the first step that returns
    a value. This algorithm will return either an integer or an error.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the
        start of the string.
    3. Let <var>sign</var> have the value "positive".
    4. <a>Skip whitespace</a>.
    5. If <var>position</var> is past the end of <var>input</var>, return an error.
    6. If the character indicated by <var>position</var> (the first character) is a U+002D
        HYPHEN-MINUS character (-):
        1. Let <var>sign</var> be "negative".
        2. Advance <var>position</var> to the next character.
        3. If <var>position</var> is past the end of <var>input</var>, return an error.

        Otherwise, if the character indicated by <var>position</var> (the first character) is a
        U+002B PLUS SIGN character (+):

        1. Advance <var>position</var> to the next character. (The "<code>+</code>" is ignored, but
            it is not conforming.)
        2. If <var>position</var> is past the end of <var>input</var>, return an error.
    7. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then return
        an error.
    8. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
        resulting sequence as a base-ten integer. Let <var>value</var> be that integer.
    9. If <var>sign</var> is "positive", return <var>value</var>, otherwise return the result of
        subtracting <var>value</var> from zero.
  </div>

<h5 id="non-negative-integers">Non-negative integers</h5>

  A string is a <dfn>valid non-negative integer</dfn> if it consists of one or more
  <a>ASCII digits</a>.

  A <a>valid non-negative integer</a> represents the number that is represented in base ten by that
  string of digits.

  <div class="impl">
    The <dfn>rules for parsing non-negative integers</dfn> are as given in the following algorithm.
    When invoked, the steps must be followed in the order given, aborting at the first step that
    returns a value. This algorithm will return either zero, a positive integer, or an error.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>value</var> be the result of parsing <var>input</var> using the
        <a>rules for parsing integers</a>.
    3. If <var>value</var> is an error, return an error.
    4. If <var>value</var> is less than zero, return an error.
    5. Return <var>value</var>.
  </div>

<h5 id="floating-point-numbers">Floating-point numbers</h5>

  A string is a <dfn>valid floating-point number</dfn> if it consists of:

  1. Optionally, a U+002D HYPHEN-MINUS character (-).
  2. One or both of the following, in the given order:
      1. A series of one or more <a>ASCII digits</a>.
      2. Both of the following, in the given order:
          1. A single U+002E FULL STOP character (.).
          2. A series of one or more <a>ASCII digits</a>.
  3. Optionally:
      1. Either a U+0065 LATIN SMALL LETTER E character (e) or a U+0045 LATIN CAPITAL LETTER E
          character (E).
      2. Optionally, a U+002D HYPHEN-MINUS character (-) or U+002B PLUS SIGN character (+).
      3. A series of one or more <a>ASCII digits</a>.

  A <a>valid floating-point number</a> represents the number obtained by multiplying the significand
  by ten raised to the power of the exponent, where the significand is the first number, interpreted
  as base ten (including the decimal point and the number after the decimal point, if any, and
  interpreting the significand as a negative number if the whole string starts with a U+002D
  HYPHEN-MINUS character (-) and the number is not zero), and where the exponent is the number after
  the E, if any (interpreted as a negative number if there is a U+002D HYPHEN-MINUS character (-)
  between the E and the number and the number is not zero, or else ignoring a U+002B PLUS SIGN
  character (+) between the E and the number if there is one). If there is no E, then the exponent
  is treated as zero.

  <p class="note">
    The Infinity and Not-a-Number (NaN) values are not <a>valid floating-point numbers</a>.
  </p>

  <div class="impl">
    The <dfn>best representation of the number <var>n</var> as a floating-point number</dfn> is the
    string obtained from applying the JavaScript operator ToString to <var>n</var>. The JavaScript
    operator ToString is not uniquely determined. When there are multiple possible strings that could
    be obtained from the JavaScript operator ToString for a particular value, the user agent must
    always return the same string for that value (though it may differ from the value used by other
    user agents).

    The <dfn>rules for parsing floating-point number values</dfn> are as given in the following
    algorithm. This algorithm must be aborted at the first step that returns something. This algorithm
    will return either a number or an error.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start of
        the string.
    3. Let <var>value</var> have the value 1.
    4. Let <var>divisor</var> have the value 1.
    5. Let <var>exponent</var> have the value 1.
    6. <a>Skip whitespace</a>.
    7. If <var>position</var> is past the end of <var>input</var>, return an error.
    8. If the character indicated by <var>position</var> is a U+002D HYPHEN-MINUS character (-):
        1. Change <var>value</var> and <var>divisor</var> to &#x2212;1.
        2. Advance <var>position</var> to the next character.
        3. If <var>position</var> is past the end of <var>input</var>, return an error.

        Otherwise, if the character indicated by <var>position</var> (the first character) is a U+002B
        PLUS SIGN character (+):

        1. Advance <var>position</var> to the next character. (The "<code>+</code>" is ignored, but it
            is not conforming.)
        2. If <var>position</var> is past the end of <var>input</var>, return an error.

    9. If the character indicated by <var>position</var> is a U+002E FULL STOP (.), and that is not
        the last character in <var>input</var>, and the character after the character indicated by
        <var>position</var> is an <a>ASCII digit</a>, then set
        <var>value</var> to zero and jump to the step labeled <i>fraction</i>.
    10. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then return an
        error.
    11. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
        resulting sequence as a base-ten integer. Multiply <var>value</var> by that integer.
    12. If <var>position</var> is past the end of <var>input</var>, jump to the step labeled
        <i>conversion</i>.
    13. <i>Fraction</i>: If the character indicated by <var>position</var> is a U+002E FULL STOP (.),
        run these substeps:
        1. Advance <var>position</var> to the next character.
        2. If <var>position</var> is past the end of <var>input</var>, or if the character indicated
            by <var>position</var> is not an <a>ASCII digit</a>, U+0065 LATIN SMALL LETTER E (e), or
            U+0045 LATIN CAPITAL LETTER E (E), then jump to the step labeled <i>conversion</i>.
        3. If the character indicated by <var>position</var> is a U+0065 LATIN SMALL LETTER E
            character (e) or a U+0045 LATIN CAPITAL LETTER E character (E), skip the remainder of
            these substeps.
        4. <i>Fraction loop</i>: Multiply <var>divisor</var> by ten.
        5. Add the value of the character indicated by <var>position</var>, interpreted as a base-ten
            digit (0..9) and divided by <var>divisor</var>, to <var>value</var>.
        6. Advance <var>position</var> to the next character.
        7. If <var>position</var> is past the end of <var>input</var>, then jump to the step labeled
            <i>conversion</i>.
        8. If the character indicated by <var>position</var> is an <a>ASCII digit</a>, jump back to
            the step labeled <i>fraction loop</i> in these substeps.
    14. If the character indicated by <var>position</var> is a U+0065 LATIN SMALL LETTER E character
        (e) or a U+0045 LATIN CAPITAL LETTER E character (E), run these substeps:
        1. Advance <var>position</var> to the next character.
        2. If <var>position</var> is past the end of <var>input</var>, then jump to the step labeled
            <i>conversion</i>.
        3. If the character indicated by <var>position</var> is a U+002D HYPHEN-MINUS character (-):
            1. Change <var>exponent</var> to &#x2212;1.
            2. Advance <var>position</var> to the next character.
            3. If <var>position</var> is past the end of <var>input</var>, then jump to the step
                labeled <i>conversion</i>.

        Otherwise, if the character indicated by <var>position</var> is a U+002B PLUS SIGN character
        (+):

            1. Advance <var>position</var> to the next character.
            2. If <var>position</var> is past the end of <var>input</var>, then jump to the step
                labeled <i>conversion</i>.
        4. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then jump
            to the step labeled <i>conversion</i>.
        5. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
            resulting sequence as a base-ten integer. Multiply <var>exponent</var> by that integer.
        6. Multiply <var>value</var> by ten raised to the <var>exponent</var>th power.
    15. <i>Conversion</i>: Let <var>S</var> be the set of finite IEEE 754 double-precision
        floating-point values except &#x2212;0, but with two special values added: 2<sup>1024</sup>
        and &#x2212;2<sup>1024</sup>.
    16. Let <var>rounded-value</var> be the number in <var>S</var> that is closest to
        <var>value</var>, selecting the number with an even significand if there are two equally
        close values. (The two special values 2<sup>1024</sup> and &#x2212;2<sup>1024</sup> are
        considered to have even significands for this purpose.)
    17. If <var>rounded-value</var> is 2<sup>1024</sup> or &#x2212;2<sup>1024</sup>, return an error.
    18. Return <var>rounded-value</var>.
  </div>


  <div class="impl">
    <h5 id="percentages-and-dimensions">Percentages and lengths</h5>

    The <dfn>rules for parsing dimension values</dfn> are as given in the following algorithm. When
    invoked, the steps must be followed in the order given, aborting at the first step that returns
    a value. This algorithm will return either a number greater than or equal to 0.0, or an error;
    if a number is returned, then it is further categorized as either a percentage or a length.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Skip whitespace</a>.
    4. If <var>position</var> is past the end of <var>input</var>, return an error.
    5. If the character indicated by <var>position</var> is a U+002B PLUS SIGN character (+), advance
        <var>position</var> to the next character.
    6. If <var>position</var> is past the end of <var>input</var>, return an error.
    7. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then return an
        error.
    8. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
        resulting sequence as a base-ten integer. Let <var>value</var> be that number.
    9. If <var>position</var> is past the end of <var>input</var>, return <var>value</var> as a length.
    10. If the character indicated by <var>position</var> is a U+002E FULL STOP character (.):
        1. Advance <var>position</var> to the next character.
        2. If <var>position</var> is past the end of <var>input</var>, or if the character indicated
            by <var>position</var> is not an <a>ASCII digit</a>, then return <var>value</var> as a
            length.
        3. Let <var>divisor</var> have the value 1.
        4. <i>Fraction loop</i>: Multiply <var>divisor</var> by ten.
        5. Add the value of the character indicated by <var>position</var>, interpreted as a base-ten
            digit (0..9) and divided by <var>divisor</var>, to <var>value</var>.
        6. Advance <var>position</var> to the next character.
        7. If <var>position</var> is past the end of <var>input</var>, then return <var>value</var>
            as a length.
        8. If the character indicated by <var>position</var> is an <a>ASCII digit</a>, return to the
            step labeled <i>fraction loop</i> in these substeps.
    11. If <var>position</var> is past the end of <var>input</var>, return <var>value</var> as a
        length.
    12. If the character indicated by <var>position</var> is a U+0025 PERCENT SIGN character (%),
        return <var>value</var> as a percentage.
    13. Return <var>value</var> as a length.

    <h5 id="non-zero-percentages-and-lengths">Non-zero percentages and lengths</h5>

    The <dfn>rules for parsing non-zero dimension values</dfn> are as given in the following
    algorithm. When invoked, the steps must be followed in the order given, aborting at the first step
    that returns a value. This algorithm will return either a number greater than 0.0, or an error; if
    a number is returned, then it is further categorized as either a percentage or a length.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>value</var> be the result of parsing <var>input</var> using the
        <a>rules for parsing dimension values</a>.
    3. If <var>value</var> is an error, return an error.
    4. If <var>value</var> is zero, return an error.
    5. If <var>value</var> is a percentage, return <var>value</var> as a percentage.
    6. Return <var>value</var> as a length.
  </div>

<h5 id="lists-of-integers">Lists of integers</h5>

  A <dfn>valid list of integers</dfn> is a number of <a>valid integers</a> separated by U+002C COMMA
  characters, with no other characters (e.g. no <a>space characters</a>). In addition, there might
  be restrictions on the number of integers that can be given, or on the range of values allowed.

  <div class="impl">
    The <dfn>rules for parsing a list of integers</dfn> are as follows:

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start of
        the string.
    3. Let <var>numbers</var> be an initially empty list of integers. This list will be the
        result of this algorithm.
    4. If there is a character in the string <var>input</var> at position <var>position</var>, and it
        is either a U+0020 SPACE, U+002C COMMA, or U+003B SEMICOLON character, then advance
        <var>position</var> to the next character in <var>input</var>, or to beyond the end of the
        string if there are no more characters.
    5. If <var>position</var> points to beyond the end of <var>input</var>, return <var>numbers</var>
        and abort.
    6. If the character in the string <var>input</var> at position <var>position</var> is a U+0020
        SPACE, U+002C COMMA, or U+003B SEMICOLON character, then return to step 4.
    7. Let <var>negated</var> be false.
    8. Let <var>value</var> be 0.
    9. Let <var>started</var> be false. This variable is set to true when the parser sees a number or
        a U+002D HYPHEN-MINUS character (-).
    10. Let <var>got number</var> be false. This variable is set to true when the parser sees a number.
    11. Let <var>finished</var> be false. This variable is set to true to switch parser into a mode
        where it ignores characters until the next separator.
    12. Let <var>bogus</var> be false.
    13. <i>Parser</i>: If the character in the string <var>input</var> at position <var>position</var>
        is:
        <dl class="switch">
          <dt>A U+002D HYPHEN-MINUS character</dt>
          <dd>
            Follow these substeps:
            1. If <var>got number</var> is true, let <var>finished</var> be true.
            2. If <var>finished</var> is true, skip to the next step in the overall set of steps.
            3. If <var>started</var> is true, let <var>negated</var> be false.
            4. Otherwise, if <var>started</var> is false and if <var>bogus</var> is false, let
                <var>negated</var> be true.
            5. Let <var>started</var> be true.
          </dd>

          <dt>An <a>ASCII digit</a></dt>
          <dd>
            Follow these substeps:
            1. If <var>finished</var> is true, skip to the next step in the overall set of steps.
            2. Multiply <var>value</var> by ten.
            3. Add the value of the digit, interpreted in base ten, to <var>value</var>.
            4. Let <var>started</var> be true.
            5. Let <var>got number</var> be true.
          </dd>

          <dt>A U+0020 SPACE character</dt>
          <dt>A U+002C COMMA character</dt>
          <dt>A U+003B SEMICOLON character</dt>
          <dd>
            Follow these substeps:
            1. If <var>got number</var> is false, return the <var>numbers</var> list and abort. This
                happens if an entry in the list has no digits, as in "<code>1,2,x,4</code>".
            2. If <var>negated</var> is true, then negate <var>value</var>.
            3. Append <var>value</var> to the <var>numbers</var> list.
            4. Jump to step 4 in the overall set of steps.
          </dd>

          <dt>
            A character in the range U+0001 to U+001F, U+0021 to U+002B, U+002D to U+002F, U+003A,
            U+003C to U+0040, U+005B to U+0060, U+007b to U+007F (i.e. any other non-alphabetic ASCII
            character)
          </dt>
          <dd>
            Follow these substeps:
            1. If <var>got number</var> is true, let <var>finished</var> be true.
            2. If <var>finished</var> is true, skip to the next step in the overall set of steps.
            3. Let <var>negated</var> be false.
          </dd>

          <dt>Any other character</dt>
          <dd>
            Follow these substeps:
            1. If <var>finished</var> is true, skip to the next step in the overall set of steps.
            2. Let <var>negated</var> be false.
            3. Let <var>bogus</var> be true.
            4. If <var>started</var> is true, then return the <var>numbers</var> list, and abort. (The
                value in <var>value</var> is not appended to the list first; it is dropped.)
          </dd>
        </dl>
    14. Advance <var>position</var> to the next character in <var>input</var>, or to beyond the end of
        the string if there are no more characters.</p>
    15. If <var>position</var> points to a character (and not to beyond the end of <var>input</var>),
        jump to the big <i>Parser</i> step above.
    16. If <var>negated</var> is true, then negate <var>value</var>.
    17. If <var>got number</var> is true, then append <var>value</var> to the <var>numbers</var> list.
    18. Return the <var>numbers</var> list and abort.
  </div>

  <div class="impl">
    <h5 id="lists-of-dimensions">Lists of dimensions</h5>

    The <dfn>rules for parsing a list of dimensions</dfn> are as follows. These rules return a list of
    zero or more pairs consisting of a number and a unit, the unit being one of <i>percentage</i>,
    <i>relative</i>, and <i>absolute</i>.</p>

    1. If the last character in <var>raw input</var> is a U+002C COMMA character (,), then remove that
        character from <var>raw input</var>.
    2. <a>Split the string <var>raw input</var> on commas</a>. Let <var>raw tokens</var> be the
        resulting list of tokens.
    3. Let <var>result</var> be an empty list of number/unit pairs.
    4. For each token in <var>raw tokens</var>, run the following substeps:
        1. Let <var>input</var> be the token.
        2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
            of the string.
        3. Let <var>value</var> be the number 0.
        4. Let <var>unit</var> be <i>absolute</i>.
        5. If the character at <var>position</var> is an <a>ASCII digit</a>, <a>collect a sequence of
            characters</a> that are <a>ASCII digits</a>, interpret the resulting sequence as an
            integer in base ten, and increment <var>value</var> by that integer.
        6. If the character at <var>position</var> is a U+002E FULL STOP character (.), run these
            substeps:
            1. <a>Collect a sequence of characters</a> consisting of <a>space characters</a> and
                <a>ASCII digits</a>. Let <var>s</var> be the resulting sequence.
            2. Remove all <a>space characters</a> in <var>s</var>.
            3. If <var>s</var> is not the empty string, run these subsubsteps:
                1. Let <var>length</var> be the number of characters in <var>s</var> (after the spaces
                    were removed).
                2. Let <var>fraction</var> be the result of interpreting <var>s</var> as a base-ten
                    integer, and then dividing that number by <a>10<sup><var>length</var></sup></a>.
                3. Increment <var>value</var> by <var>fraction</var>.
        7. <a>Skip whitespace</a>.
        8. If the character at <var>position</var> is a U+0025 PERCENT SIGN character (%), then set
            <var>unit</var> to <i>percentage</i>.

        Otherwise, if the character at <var>position</var> is a U+002A ASTERISK character
        (*), then set <var>unit</var> to <i>relative</i>.

        9. Add an entry to <var>result</var> consisting of the number given by <var>value</var> and
            the unit given by <var>unit</var>.
    5. Return the list <var>result</var>.
  </div>

<h4 id="dates-and-times">Dates and times</h4>

  In the algorithms below, the
  <dfn>number of days in month <var>month</var> of year <var>year</var></dfn> is: <em>31</em> if
  <var>month</var> is 1, 3, 5, 7, 8, 10, or 12; <em>30</em> if <var>month</var> is 4, 6, 9, or 11;
  <em>29</em> if <var>month</var> is 2 and <var>year</var> is a number divisible by 400, or if
  <var>year</var> is a number divisible by 4 but not by 100; and <em>28</em> otherwise. This takes
  into account leap years in the Gregorian calendar. [[!GREGORIAN]]

  When <a>ASCII digits</a> are used in the date and time syntaxes defined in this section, they
  express numbers in base ten.</p>

  <div class="impl">
    <p class="note">
      While the formats described here are intended to be subsets of the corresponding ISO8601
      formats, this specification defines parsing rules in much more detail than ISO8601. Implementors
      are therefore encouraged to carefully examine any date parsing libraries before using them to
      implement the parsing rules described below; ISO8601 libraries might not parse dates and times
      in exactly the same manner. [[!ISO8601]]
    </p>
  </div>

  Where this specification refers to the <dfn>proleptic Gregorian calendar</dfn>, it means the
  modern Gregorian calendar, extrapolated backwards to year 1. A date in the
  <a>proleptic Gregorian calendar</a>, sometimes explicitly referred to as a
  <dfn>proleptic-Gregorian date</dfn>, is one that is described using that calendar even if that
  calendar was not in use at the time (or place) in question. [[!GREGORIAN]]

  <p class="note">
    The use of the Gregorian calendar as the wire format in this specification is an arbitrary
    choice resulting from the cultural biases of those involved in the decision. See also the
    section discussing <a>date, time, and number formats</a> in forms <span class="impl">(for
    authors), <a>implemention notes regarding localization of form controls</a>,</span> and the
    <code>time</code> element.
  </p>

<h5 id="months">Months</h5>

  A <dfn>month</dfn> consists of a specific <a>proleptic-Gregorian date</a> with no time-zone
  information and no date information beyond a year and a month. [[!GREGORIAN]]

  A string is a <dfn>valid month string</dfn> representing a year <var>year</var> and month
  <var>month</var> if it consists of the following components in the given order:

  1. Four or more <a>ASCII digits</a>, representing <var>year</var>, where
      <var>year</var>&nbsp;&gt;&nbsp;0
  2. A U+002D HYPHEN-MINUS character (-)
  3. Two <a>ASCII digits</a>, representing the month <var>month</var>, in the range
      1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12

  <div class="impl">
    The rules to <dfn>parse a month string</dfn> are as follows. This will return either a year and
    month, or nothing. If at any point the algorithm says that it "fails", this means that it is
    aborted at that point and returns nothing.</p>

    1. Let <var>input</var> be the string being parsed.</p>
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start of
        the string.
    3. <a>Parse a month component</a> to obtain <var>year</var> and <var>month</var>. If this returns
        nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Return <var>year</var> and <var>month</var>.

    The rules to <dfn>parse a month component</dfn>, given an <var>input</var> string and a
    <var>position</var>, are as follows. This will return either a year and a month, or nothing. If at
    any point the algorithm says that it "fails", this means that it is aborted at that point and
    returns nothing.

    1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected sequence
        is not at least four characters long, then fail. Otherwise, interpret the resulting sequence
        as a base-ten integer. Let that number be the <var>year</var>.
    2. If <var>year</var> is not a number greater than zero, then fail.
    3. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
        <var>position</var> forwards one character.
    4. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected sequence
        is not exactly two characters long, then fail. Otherwise, interpret the resulting sequence as
        a base-ten integer. Let that number be the <var>month</var>.
    5. If <var>month</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12, then fail.
    6. Return <var>year</var> and <var>month</var>.
  </div>

<h5 id="dates">Dates</h5>

  A <dfn>date</dfn> consists of a specific <a>proleptic-Gregorian date</a> with no time-zone
  information, consisting of a year, a month, and a day. [[!GREGORIAN]]

  A string is a <dfn>valid date string</dfn> representing a year <var>year</var>, month
  <var>month</var>, and day <var>day</var> if it consists of the following components in the given
  order:

  1. A <a>valid month string</a>, representing <var>year</var> and <var>month</var>
  2. A U+002D HYPHEN-MINUS character (-)
  3. Two <a>ASCII digits</a>, representing <var>day</var>, in the range
      1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var> where <var>maxday</var> is
      the <a>number of days in the month <var>month</var> and year <var>year</var></a>

  <div class="impl">
    The rules to <dfn>parse a date string</dfn> are as follows. This will return either a date, or
    nothing. If at any point the algorithm says that it "fails", this means that it is aborted at that
    point and returns nothing.

    1. Let <var>input</var> be the string being parsed.</p>
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start of
        the string.
    3. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and <var>day</var>.
        If this returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Let <var>date</var> be the date with year <var>year</var>, month <var>month</var>, and day
        <var>day</var>.
    6. Return <var>date</var>.

    The rules to <dfn>parse a date component</dfn>, given an <var>input</var> string and a
    <var>position</var>, are as follows. This will return either a year, a month, and a day, or
    nothing. If at any point the algorithm says that it "fails", this means that it is aborted at that
    point and returns nothing.

    1. <a>Parse a month component</a> to obtain <var>year</var> and <var>month</var>. If this returns
        nothing, then fail.
    2. Let <var>maxday</var> be the
        <a>number of days in month <var>month</var> of year <var>year</var></a>.
    3. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
        <var>position</var> forwards one character.
    4. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>day</var>.
    5. If <var>day</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var>, then fail.
    6. Return <var>year</var>, <var>month</var>, and <var>day</var>.
  </div>

<h5 id="yearless-dates">Yearless dates</h5>

  A <dfn>yearless date</dfn> consists of a Gregorian month and a
  day within that month, but with no associated year. [[!GREGORIAN]]

  A string is a <dfn>valid yearless date string</dfn> representing a month <var>month</var> and a
  day <var>day</var> if it consists of the following components in the given order:

  1. Optionally, two U+002D HYPHEN-MINUS characters (-)
  2. Two <a>ASCII digits</a>, representing the month <var>month</var>, in the range
      1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12
  3. A U+002D HYPHEN-MINUS character (-)
  4. Two <a>ASCII digits</a>, representing <var>day</var>, in the range
      1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var> where <var>maxday</var> is
      the <a>number of days</a> in the month <var>month</var> and any arbitrary leap year (e.g. 4 or
      2000)

  <p class="note">
    In other words, if the <var>month</var> is "<code>02</code>", meaning February, then the day can
    be 29, as if the year was a leap year.
  </p>

  <div class="impl">
    The rules to <dfn>parse a yearless date string</dfn> are as follows. This will return either a
    month and a day, or nothing. If at any point the algorithm says that it "fails", this means that
    it is aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start of
        the string.
    3. <a>Parse a yearless date component</a> to obtain <var>month</var> and <var>day</var>. If this
        returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Return <var>month</var> and <var>day</var>.

    The rules to <dfn>parse a yearless date component</dfn>, given an <var>input</var> string and a
    <var>position</var>, are as follows. This will return either a month and a day, or nothing. If at
    any point the algorithm says that it "fails", this means that it is aborted at that point and
    returns nothing.

    1. <a>Collect a sequence of characters</a> that are U+002D HYPHEN-MINUS characters (-). If the
        collected sequence is not exactly zero or two characters long, then fail.
    2. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected sequence
        is not exactly two characters long, then fail. Otherwise, interpret the resulting sequence as
        a base-ten integer. Let that number be the <var>month</var>.
    3. If <var>month</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12, then fail.
    4. Let <var>maxday</var> be the <a>number of days</a> in month <var>month</var> of any arbitrary
        leap year (e.g. 4 or 2000).
    5. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
        <var>position</var> forwards one character.
    6. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected sequence
        is not exactly two characters long, then fail. Otherwise, interpret the resulting sequence as
        a base-ten integer. Let that number be the <var>day</var>.
    7. If <var>day</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var>, then fail.
    8. Return <var>month</var> and <var>day</var>.
  </div>

<h5 id="times">Times</h5>

  A <dfn>time</dfn> consists of a specific time with no time-zone information, consisting of an
  hour, a minute, a second, and a fraction of a second.

  A string is a <dfn>valid time string</dfn> representing an hour <var>hour</var>, a minute
  <var>minute</var>, and a second <var>second</var> if it consists of the following components in
  the given order:

  1. Two <a>ASCII digits</a>, representing <var>hour</var>, in the range
      0&nbsp;&le;&nbsp;<var>hour</var>&nbsp;&le;&nbsp;23
  2. A U+003A COLON character (:)
  3. Two <a>ASCII digits</a>, representing <var>minute</var>, in the range
      0&nbsp;&le;&nbsp;<var>minute</var>&nbsp;&le;&nbsp;59
  4. If <var>second</var> is non-zero, or optionally if <var>second</var> is zero:
      1. A U+003A COLON character (:)
      2. Two <a>ASCII digits</a>, representing the integer part of <var>second</var>, in the
          range 0&nbsp;&le;&nbsp;<var>s</var>&nbsp;&le;&nbsp;59
      3. If <var>second</var> is not an integer, or optionally if <var>second</var> is an integer:
          1. A 002E FULL STOP character (.)
          2. One, two, or three <a>ASCII digits</a>, representing the fractional part of
              <var>second</var>

  <p class="note">
    The <var>second</var> component cannot be 60 or 61; leap seconds cannot be represented.
  </p>

  <div class="impl">
    The rules to <dfn>parse a time string</dfn> are as follows. This will return either a time, or
    nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
    that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a time component</a> to obtain <var>hour</var>, <var>minute</var>, and
        <var>second</var>. If this returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Let <var>time</var> be the time with hour <var>hour</var>, minute <var>minute</var>, and
        second <var>second</var>.
    6. Return <var>time</var>.

    The rules to <dfn>parse a time component</dfn>, given an <var>input</var> string and a
    <var>position</var>, are as follows. This will return either an hour, a minute, and a second, or
    nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
    that point and returns nothing.

    1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the
        collected sequence is not exactly two characters long, then fail. Otherwise, interpret the
        resulting sequence as a base-ten integer. Let that number be the <var>hour</var>.
    2. If <var>hour</var> is not a number in the range
        0&nbsp;&le;&nbsp;<var>hour</var>&nbsp;&le;&nbsp;23, then fail.
    3. If <var>position</var> is beyond the end of <var>input</var> or if the
        character at <var>position</var> is not a U+003A COLON character, then fail. Otherwise,
        move <var>position</var> forwards one character.
    4. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>minute</var>.
    5. If <var>minute</var> is not a number in the range
        0&nbsp;&le;&nbsp;<var>minute</var>&nbsp;&le;&nbsp;59, then fail.
    6. Let <var>second</var> be a string with the value "0".
    7. If <var>position</var> is not beyond the end of <var>input</var> and the character at
        <var>position</var> is a U+003A COLON, then run these substeps:
        1. Advance <var>position</var> to the next character in <var>input</var>.
        2. If <var>position</var> is beyond the end of <var>input</var>, or at the last character in
            <var>input</var>, or if the next <em>two</em> characters in <var>input</var> starting at
            <var>position</var> are not both <a>ASCII digits</a>, then fail.
        3. <a>Collect a sequence of characters</a> that are either <a>ASCII digits</a> or U+002E
            FULL STOP characters. If the collected sequence is three characters long, or if it is
            longer than three characters long and the third character is not a U+002E FULL STOP
            character, or if it has more than one U+002E FULL STOP character, then fail. Otherwise,
            let the collected string be <var>second</var> instead of its previous value.

    8. Interpret <var>second</var> as a base-ten number (possibly with a fractional part). Let
        <var>second</var> be that number instead of the string version.
    9. If <var>second</var> is not a number in the range
        0&nbsp;&le;&nbsp;<var>second</var>&nbsp;&lt;&nbsp;60, then fail.
    10. Return <var>hour</var>, <var>minute</var>, and <var>second</var>.
  </div>

<h5 id="floating-dates-and-times">Floating dates and times</h5>

  A <dfn>floating date and time</dfn> consists of a specific <a>proleptic-Gregorian date</a>,
  consisting of a year, a month, and a day, and a time, consisting of an hour, a minute, a second,
  and a fraction of a second, but expressed without a time zone. [[!GREGORIAN]]

  A string is a <dfn>valid floating date and time string</dfn> representing a date and time if it
  consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date
  2. A U+0054 LATIN CAPITAL LETTER T character (T) or a U+0020 SPACE character
  3. A <a>valid time string</a> representing the time

  A string is a <dfn>valid normalized floating date and time string</dfn> representing a date and
  time if it consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date
  2. A U+0054 LATIN CAPITAL LETTER T character (T)
  3. A <a>valid time string</a> representing the time, expressed as the shortest possible string for
      the given time (e.g. omitting the seconds component entirely if the given time is zero seconds
      past the minute)

  <div class="impl">
    The rules to <dfn>parse a floating date and time string</dfn> are as follows. This will return
    either a date and time, or nothing. If at any point the algorithm says that it "fails", this
    means that it is aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and
        <var>day</var>. If this returns nothing, then fail.
    4. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is neither a U+0054 LATIN CAPITAL LETTER T character (T) nor a U+0020
        SPACE character, then fail. Otherwise, move <var>position</var> forwards one character.
    5. <a>Parse a time component</a> to obtain <var>hour</var>, <var>minute</var>, and
        <var>second</var>. If this returns nothing, then fail.
    6. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    7. Let <var>date</var> be the date with year <var>year</var>, month <var>month</var>, and day
        <var>day</var>.
    8. Let <var>time</var> be the time with hour <var>hour</var>, minute <var>minute</var>, and
        second <var>second</var>.
    9. Return <var>date</var> and <var>time</var>.
  </div>

<h5 id="time-zones">Time zones</h5>

  A <dfn>time-zone offset</dfn> consists of a signed number of hours and minutes.

  A string is a <dfn>valid time-zone offset string</dfn> representing a time-zone offset if it
  consists of either:

  * A U+005A LATIN CAPITAL LETTER Z character (Z), allowed only if the time zone is UTC
  * Or, the following components, in the given order:
    1. Either a U+002B PLUS SIGN character (+) or, if the time-zone offset is not zero, a U+002D
        HYPHEN-MINUS character (-), representing the sign of the time-zone offset
    2. Two <a>ASCII digits</a>, representing the hours component <var>hour</var> of the
        time-zone offset, in the range 0&nbsp;&le;&nbsp;<var>hour</var>&nbsp;&le;&nbsp;23
    3. Optionally, a U+003A COLON character (:)
    4. Two <a>ASCII digits</a>, representing the minutes component <var>minute</var> of the
        time-zone offset, in the range 0&nbsp;&le;&nbsp;<var>minute</var>&nbsp;&le;&nbsp;59

  <p class="note">
    This format allows for time-zone offsets from -23:59 to +23:59. In practice, however, right now
    the range of offsets of actual time zones is -12:00 to +14:00, and the minutes component of
    offsets of actual time zones is always either 00, 30, or 45. There is no guarantee that this
    will remain so forever, however; time zones are changed by countries at will and do not follow a
    standard.
  </p>

  <p class="note">
    See also the usage notes and examples in the <a>global date and time</a> section below for
    details on using time-zone offsets with historical times that predate the formation of formal
    time zones.
  </p>

  <div class="impl">
    The rules to <dfn>parse a time-zone offset string</dfn> are as follows. This will return either
    a time-zone offset, or nothing. If at any point the algorithm says that it "fails", this means
    that it is aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a time-zone offset component</a> to obtain <var>timezone<sub>hours</sub></var> and
        <var>timezone<sub>minutes</sub></var>. If this returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Return the time-zone offset that is <var>timezone<sub>hours</sub></var> hours and
        <var>timezone<sub>minutes</sub></var> minutes from UTC.

    The rules to <dfn>parse a time-zone offset component</dfn>, given an <var>input</var> string and
    a <var>position</var>, are as follows. This will return either time-zone hours and time-zone
    minutes, or nothing. If at any point the algorithm says that it "fails", this means that it is
    aborted at that point and returns nothing.

    1. If the character at <var>position</var> is a U+005A LATIN CAPITAL LETTER Z character (Z),
        then:
        1. Let <var>timezone<sub>hours</sub></var> be 0.
        2. Let <var>timezone<sub>minutes</sub></var> be 0.
        3. Advance <var>position</var> to the next character in <var>input</var>.

        Otherwise, if the character at <var>position</var> is either a U+002B PLUS SIGN (+) or a
        U+002D HYPHEN-MINUS (-), then:

        1. If the character at <var>position</var> is a U+002B PLUS SIGN (+), let <var>sign</var> be
            "positive". Otherwise, it's a U+002D HYPHEN-MINUS (-); let <var>sign</var> be "negative".
        2. Advance <var>position</var> to the next character in <var>input</var>.
        3. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. Let <var>s</var> be
            the collected sequence.
        4. If <var>s</var> is exactly two characters long, then run these substeps:
            1. Interpret <var>s</var> as a base-ten integer. Let that number be the
                <var>timezone<sub>hours</sub></var>.
            2. If <var>position</var> is beyond the end of <var>input</var> or if the character at
                <var>position</var> is not a U+003A COLON character, then fail. Otherwise, move
                <var>position</var> forwards one character.
            3. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the
                collected sequence is not exactly two characters long, then fail. Otherwise,
                interpret the resulting sequence as a base-ten integer. Let that number be the
                <var>timezone<sub>minutes</sub></var>.

            If <var>s</var> is exactly four characters long, then run these substeps:

            1. Interpret the first two characters of <var>s</var> as a base-ten integer. Let that
                number be the <var>timezone<sub>hours</sub></var>.
            2. Interpret the last two characters of <var>s</var> as a base-ten integer. Let that
                number be the <var>timezone<sub>minutes</sub></var>.

            Otherwise, fail.</p>

        5. If <var>timezone<sub>hours</sub></var> is not a number in the range
            0&nbsp;&le;&nbsp;<var>timezone<sub>hours</sub></var>&nbsp;&le;&nbsp;23, then fail.
        6. If <var>sign</var> is "negative", then negate <var>timezone<sub>hours</sub></var>.
        7. If <var>timezone<sub>minutes</sub></var> is not a number in the range
            0&nbsp;&le;&nbsp;<var>timezone<sub>minutes</sub></var>&nbsp;&le;&nbsp;59, then fail.
        8. If <var>sign</var> is "negative", then negate <var>timezone<sub>minutes</sub></var>.

        Otherwise, fail.

    2. Return <var>timezone<sub>hours</sub></var> and <var>timezone<sub>minutes</sub></var>.
  </div>

<h5 id="global-dates-and-times">Global dates and times</h5>

  A <dfn>global date and time</dfn> consists of a specific <a>proleptic-Gregorian date</a>,
  consisting of a year, a month, and a day, and a time, consisting of an hour, a minute, a second,
  and a fraction of a second, expressed with a time-zone offset, consisting of a signed number of
  hours and minutes. [[!GREGORIAN]]

  A string is a <dfn>valid global date and time string</dfn> representing a date, time, and a
  time-zone offset if it consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date
  2. A U+0054 LATIN CAPITAL LETTER T character (T) or a U+0020 SPACE character
  3. A <a>valid time string</a> representing the time
  4. A <a>valid time-zone offset string</a> representing the time-zone offset

  Times in dates before the formation of UTC in the mid twentieth century must be expressed and
  interpreted in terms of UT1 (contemporary Earth solar time at the 0&deg; longitude), not UTC (the
  approximation of UT1 that ticks in SI seconds). Time before the formation of time zones must be
  expressed and interpeted as UT1 times with explicit time zones that approximate the contemporary
  difference between the appropriate local time and the time observed at the location of Greenwich,
  London.

  <div class="example">
    The following are some examples of dates written as <a>valid global date and time strings</a>.

    : "<code>0037-12-13 00:00Z</code>"
    :: Midnight in areas using London time on the birthday of Nero (the Roman Emperor). See below
        for further discussion on which date this actually corresponds to.

    : "<code>1979-10-14T12:00:00.001-04:00</code>"
    :: One millisecond after noon on October 14th 1979, in the time zone in use on the east coast of
        the USA during daylight saving time.

    : "<code>8592-01-01T02:09+02:09</code>"
    :: Midnight UTC on the 1st of January, 8592. The time zone associated with that time is two
        hours and nine minutes ahead of UTC, which is not currently a real time zone, but is
        nonetheless allowed.

    Several things are notable about these dates:

    * Years with fewer than four digits have to be zero-padded. The date "37-12-13" would not be a
        valid date.
    * If the "<code>T</code>" is replaced by a space, it must be a single space character. The
        string "<code>2001-12-21&nbsp;&nbsp;12:00Z</code>" (with two spaces between the components)
        would not be parsed successfully.
    * To unambiguously identify a moment in time prior to the introduction of the Gregorian calendar
        (insofar as moments in time before the formation of UTC can be unambiguously identified),
        the date has to be first converted to the Gregorian calendar from the calendar in use at the
        time (e.g. from the Julian calendar). The date of Nero's birth is the 15th of December 37,
        in the Julian Calendar, which is the 13th of December 37 in the
        <a>proleptic Gregorian calendar</a>.
    * The time and time-zone offset components are not optional.
    * Dates before the year one can't be represented as a datetime in this version of HTML.
    * Times of specific events in ancient times are, at best, approximations, since time was not
        well coordinated or measured until relatively recent decades.
    * Time-zone offsets differ based on daylight savings time.
  </div>

  <p class="note">
    The zone offset is not a complete time zone specification. When working with real date and time
    values, consider using a separate field for time zone, perhaps using IANA time zone IDs.
    [[!TIMEZONES]]
  </p>

  A string is a <dfn>valid normalized forced-UTC global date and time string</dfn> representing a
  date, time, and a time-zone offset if it consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date converted to the UTC time zone
  2. A U+0054 LATIN CAPITAL LETTER T character (T)
  3. A <a>valid time string</a> representing the time converted to the UTC time zone and expressed
      as the shortest possible string for the given time (e.g. omitting the seconds component
      entirely if the given time is zero seconds past the minute)
  4. A U+005A LATIN CAPITAL LETTER Z character (Z)

  <div class="impl">
    The rules to <dfn>parse a global date and time string</dfn> are as follows. This will return
    either a time in UTC, with associated time-zone offset information for round-tripping or display
    purposes, or nothing. If at any point the algorithm says that it "fails", this means that it is
    aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start of
        the string.
    3. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and <var>day</var>.
        If this returns nothing, then fail.
    4. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is neither a U+0054 LATIN CAPITAL LETTER T character (T) nor a U+0020
        SPACE character, then fail. Otherwise, move <var>position</var> forwards one character.
    5. <a>Parse a time component</a> to obtain <var>hour</var>, <var>minute</var>, and
        <var>second</var>. If this returns nothing, then fail.
    6. If <var>position</var> is beyond the end of <var>input</var>, then fail.
    7. <a>Parse a time-zone offset component</a> to obtain <var>timezone<sub>hours</sub></var> and
        <var>timezone<sub>minutes</sub></var>. If this returns nothing, then fail.
    8. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    9. Let <var>time</var> be the moment in time at year <var>year</var>, month <var>month</var>, day
        <var>day</var>, hours <var>hour</var>, minute <var>minute</var>, second <var>second</var>,
        subtracting <var>timezone<sub>hours</sub></var> hours and
        <var>timezone<sub>minutes</sub></var> minutes. That moment in time is a moment in the UTC time
        zone.
    10. Let <var>timezone</var> be <var>timezone<sub>hours</sub></var> hours and
        <var>timezone<sub>minutes</sub></var> minutes from UTC.
    11. Return <var>time</var> and <var>timezone</var>.
  </div>



<hr />
<hr />
<hr />

<h2 id="dom">Semantics, structure, and APIs of HTML documents</h2>

<h3 id="documents">Documents</h3>

  Every XML and HTML document in an HTML UA is represented by a <{Document}> object.
  [[!DOM]]

  <dfn>The document's address</dfn> is the <i>URL associated with a <{Document}></i> (as
  defined in the DOM standard). It is initially set when the <{Document}> is created, but
  that can change during the lifetime of the <{Document}>; for example, it changes when
  the user <a>navigates</a> to a <a>fragment identifier</a> on the page and when the
  <code>pushState()</code> method is called with a new <a>URL</a>. [[!DOM]]

  <p class="warning">
    Interactive user agents typically expose <a>the document's address</a> in their user interface.
    This is the primary mechanism by which a user can tell if a site is attempting to impersonate
    another.
  </p>

  When a <{Document}> is created by a <a>script</a> using the <code>createDocument()</code>
  or <code>createHTMLDocument()</code> APIs, <a>the document's address</a> is the same as
  <a>the document's address</a> of the <a>responsible document</a> specified by the script's
  <a>settings object</a>, and the <{Document}> is both <a>ready for post-load tasks</a> and
  <a>completely loaded</a> immediately.

  <dfn>The document's referrer</dfn> is an <a>absolute URL</a> that can be set when the
  <{Document}> is created. If it is not explicitly set, then its value is the empty string.

  Each <{Document}> object has a <dfn>reload override flag</dfn> that is originally unset.
  The flag is set by the <code>document.open()</code> and <code>document.write()</code> methods in
  certain situations. When the flag is set, the <{Document}> also has a
  <dfn>reload override buffer</dfn> which is a Unicode string that is used as the source of the
  document when it is reloaded.

  When the user agent is to perform <dfn>an overridden reload</dfn>, given a
  <a>source browsing context</a>, it must act as follows:


  1. Let <var>source</var> be the value of the <a>browsing context</a>'s <a>active document</a>'s
    <a>reload override buffer</a>.

  2. Let <var>address</var> be the <a>browsing context</a>'s <a>active document</a>'s
    <a>address</a>.

  3. Let <var>HTTPS state</var> be the <a>HTTPS state</a> of the <a>browsing context</a>'s
    <a>active document</a>'s <code>Window</code>.

  4. <a>Navigate</a> the <a>browsing context</a> to a new <a>response</a> whose <{body}> is
    <var>source</var> and <a>HTTPS state</a> is <var>HTTPS state</var>, with
    <a>replacement enabled</a> and <a>exceptions enabled</a>. The <a>source browsing context</a>
    is that given to the <a>overridden reload</a> algorithm. When the <a>navigate</a> algorithm
    creates a <{Document}> object for this purpose, set that <{Document}>'s
    <a>reload override flag</a> and set its <a>reload override buffer</a> to <var>source</var>.

    When it comes time to <a>set the document's address</a> in the <a>navigation algorithm</a>,
    use <var>address</var> as the <a>override URL</a>.

<h4 id="the-document-object">The <dfn element>Document</dfn> object</h4>

  The DOM specification defines a <{Document}> interface, which this specification extends
  significantly:

  <pre class="idl" highlights="webidl">enum <dfn>DocumentReadyState</dfn> { "loading", "interactive", "complete" };


[OverrideBuiltins]
partial /*sealed*/ interface <dfn>Document</dfn> {
  // resource metadata management
  [PutForwards=href, Unforgeable] readonly attribute Location? location;
  attribute DOMString domain;
  readonly attribute DOMString referrer;
  attribute DOMString cookie;
  readonly attribute DOMString lastModified;
  readonly attribute DocumentReadyState readyState;

  // DOM tree accessors
  getter object (DOMString name);
  attribute DOMString title;
  attribute DOMString dir;
  attribute HTMLElement? body;
  readonly attribute HTMLHeadElement? head;
  [SameObject] readonly attribute HTMLCollection images;
  [SameObject] readonly attribute HTMLCollection embeds;
  [SameObject] readonly attribute HTMLCollection plugins;
  [SameObject] readonly attribute HTMLCollection links;
  [SameObject] readonly attribute HTMLCollection forms;
  [SameObject] readonly attribute HTMLCollection scripts;
  NodeList getElementsByName(DOMString elementName);
  readonly attribute HTMLScriptElement? currentScript;

  // dynamic markup insertion
  Document open(optional DOMString type = "text/html", optional DOMString replace = "");
  WindowProxy open(DOMString url, DOMString name, DOMString features, optional boolean replace = false);
  void close();
  void write(DOMString... text);
  void writeln(DOMString... text);

  // user interaction
  readonly attribute WindowProxy? defaultView;
  readonly attribute Element? activeElement;
  boolean hasFocus();
  attribute DOMString designMode;
  boolean execCommand(DOMString commandId, optional boolean showUI = false, optional DOMString value = "");
  boolean queryCommandEnabled(DOMString commandId);
  boolean queryCommandIndeterm(DOMString commandId);
  boolean queryCommandState(DOMString commandId);
  boolean queryCommandSupported(DOMString commandId);
  DOMString queryCommandValue(DOMString commandId);

  // special event handler IDL attributes that only apply to Document objects
  [LenientThis] attribute EventHandler onreadystatechange;
};
Document implements GlobalEventHandlers;</pre>

<h4 id="resource-metadata-management">Resource metadata management</h4>

  : <var>document</var> . <code>referrer</code>
  :: Returns <span>the address</span> of the <{Document}> from which the user navigated to
    this one, unless it was blocked or there was no such document, in which case it returns the
    empty string.

    The <code>noreferrer</code> link type can be used to block the referrer.

  <div class="impl">
    The <dfn><code>referrer</code></dfn> attribute must return <a>the document's referrer</a>.
  </div>

  <hr />

  : <var>document</var> . <code>cookie</code> [ = <var>value</var> ]
  :: Returns the HTTP cookies that apply to the <{Document}>. If there are no cookies or
    cookies can't be applied to this resource, the empty string will be returned.

    Can be set, to add a new cookie to the element's set of HTTP cookies.

    If the contents are <a>sandboxed into a unique origin</a> (e.g. in an <code>iframe</code> with
    the <code>sandbox</code> attribute), a <code>SecurityError</code> exception will be thrown on
    getting and setting.

  <div class="impl">
    The <dfn><code>cookie</code></dfn> attribute represents the cookies of the resource identified
    by <a>the document's address</a>.

    A <{Document}> object that falls into one of the following conditions is a
    <dfn>cookie-averse <{Document}> object</dfn>:

    * A <{Document}> that has no <a>browsing context</a>.

    * A <{Document}> whose <span>address</span> does not use a server-based naming
        authority.

    On getting, if the document is a <span>cookie-averse <{Document}> object</span>, then
    the user agent must return the empty string. Otherwise, if the <{Document}>'s
    <a>origin</a> is not a scheme/host/port tuple, the user agent must throw a
    <code>SecurityError</code> exception. Otherwise, the user agent must first
    <a>obtain the storage mutex</a> and then return the cookie-string for
    <a>the document's address</a> for a "non-HTTP" API, decoded using the <a>UTF-8 decoder</a>.
    [[!COOKIES]]
    <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

    On setting, if the document is a <span>cookie-averse <{Document}> object</span>, then
    the user agent must do nothing. Otherwise, if the <{Document}>'s <span>origin</span> is
    not a scheme/host/port tuple, the user agent must throw a <code>SecurityError</code> exception.
    Otherwise, the user agent must <span>obtain the storage mutex</span> and then act as it would
    when <a>receiving a set-cookie-string</a> for <a>the document's address</a> via a "non-HTTP"
    API, consisting of the new value encoded as UTF-8. [[!COOKIES]] [[!ENCODING]]

    <p class="note">
      Since the <code>cookie</code> attribute is accessible across frames, the path restrictions on
      cookies are only a tool to help manage which cookies are sent to which parts of the site, and
      are not in any way a security feature.
    </p>
  </div>

  <hr />

  : <var>document</var> . <code>lastModified</code>
  :: Returns the date of the last modification to the document, as reported by the server, in the
    form "<code>MM/DD/YYYY&nbsp;hh:mm:ss</code>", in the user's local time zone.

  If the last modification date is not known, the current time is returned instead.

  <div class="impl">
    The <dfn><code>lastModified</code></dfn> attribute, on getting, must return the date and time of
    the <{Document}>'s source file's last modification, in the user's local time zone, in
    the following format:

    1. The month component of the date.
    2. A U+002F SOLIDUS character (/).
    3. The day component of the date.
    4. A U+002F SOLIDUS character (/).
    5. The year component of the date.
    6. A U+0020 SPACE character.
    7. The hours component of the time.
    8. A U+003A COLON character (:).
    9. The minutes component of the time.
    10. A U+003A COLON character (:).
    11. The seconds component of the time.

    All the numeric components above, other than the year, must be given as two <a>ASCII digits</a>
    representing the number in base ten, zero-padded if necessary. The year must be given as the
    shortest possible string of four or more <a>ASCII digits</a> representing the number in base
    ten, zero-padded if necessary.

    The <{Document}>'s source file's last modification date and time must be derived from
    relevant features of the networking protocols used, e.g. from the value of the HTTP
    <code>Last-Modified</code> header of the document, or from metadata in the file system for local
    files. If the last modification date and time are not known, the attribute must return the
    current date and time in the above format.
  </div>

  <hr />

  : <var>document</var> . <code>readyState</code>
  :: Returns "<code>loading</code>" while the <{Document}> is loading,
    "<code>interactive</code>" once it is finished parsing but still loading sub-resources, and
    "<code>complete</code>" once it has loaded.

  The <code>readystatechange</code> event fires on the <{Document}> object when this value
  changes.

  <div class="impl">
    Each document has a <dfn>current document readiness</dfn>. When a <{Document}> object
    is created, it must have its <a>current document readiness</a> set to the string
    "<code>loading</code>" if the document is associated with an <a>HTML parser</a>, an
    <a>XML parser</a>, or an XSLT processor, and to the string "<code>complete</code>"
    otherwise. Various algorithms during page loading affect this value. When the value is set, the
    user agent must <a>fire a simple event</a> named <code>readystatechange</code> at the
    <{Document}> object.

    A <{Document}> is said to have an <dfn>active parser</dfn> if it is associated with an
    <a>HTML parser</a> or an <a>XML parser</a> that has not yet been <a>stopped</a> or
   <a>aborted</a>.

    The <dfn><code>readyState</code></dfn> IDL attribute must, on getting, return the <a>current
    document readiness</a>.
  </div>