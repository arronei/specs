<h1>HTML 5.1</h1>

<pre class="metadata">
Shortname: html
Level: 5.1
Group: html
Status: WD
TR: http://www.w3.org/TR/html/
ED: https://github.com/w3c/html/
Previous Version: http://www.w3.org/TR/2014/WD-html51-20140204/

Editor: WHATWG
Editor: Simon Pieters, Opera Software, simonp@opera.com
Editor: Anne van Kesteren, Mozilla, annevk@annevk.nl
Editor: Philip JÃ¤genstedt, Opera Software, philipj@opera.com
Editor: Domenic Denicola, Google Inc., d@domenic.me
Editor: Ian Hickson, Google Inc., ian@hixie.ch
Editor: W3C
Editor: Steve Faulkner, The Paciello Group, sfaulkner@paciellogroup.com
Editor: Travis Leithead, Microsoft, travil@microsoft.com
Editor: Erika Doyle Navara, Microsoft, Erika.Doyle@microsoft.com
Editor: Edward O'Connor, Apple Inc., eoconnor@apple.com
Editor: Robin Berjon, W3C (Until August 2015), http://berjon.com/
Abstract: This specification defines the 5th major version, first minor revision of the core
          language of the World Wide Web: the Hypertext Markup Language (HTML). In this version,
          new features continue to be introduced to help Web application authors, new elements
          continue to be introduced based on research into prevailing authoring practices, and
          special attention continues to be given to defining clear conformance criteria for user
          agents in an effort to improve interoperability.
</pre>

<pre class="anchors">
urlPrefix: http://www.w3.org/TR/workers/; type: dfn; spec: WORKERS; text: worker;
urlPrefix: http://www.whatwg.org/specs/web-apps/current-work/; type: dfn; spec: WHATWG; text: WHATWG HTML specification;
urlPrefix: http://html5.org/r/8424/; type: dfn; text: 8424
</pre>

<h2 id="introduction">Introduction</h2>

<h3 id="background">Background</h3>

    <em>This section is non-normative.</em>

    The World Wide Web's markup language has always been HTML. HTML was primarily designed as a
    language for semantically describing scientific documents, although its general design and
    adaptations over the years have enabled it to be used to describe a number of other types of
    documents.

    The main area that has not been adequately addressed by HTML is a vague subject referred to as
    Web Applications. This standard attempts to rectify this, while at the same time updating the
    HTML language to address issues raised in the past few years.

<h3 id="audience">Audience</h3>

    <em>This section is non-normative.</em>

    This specification is intended for authors of documents and scripts that use the features
    defined in this specification<span class="impl">, implementors of tools that operate on pages
    that use the features defined in this specification, and individuals wishing to establish the
    correctness of documents or implementations with respect to the requirements of this
    specification</span>.

    This document is probably not suited to readers who do not already have at least a passing
    familiarity with Web technologies, as in places it sacrifices clarity for precision, and brevity
    for completeness. More approachable tutorials and authoring guides can provide a gentler
    introduction to the topic.

    In particular, familiarity with the basics of DOM is necessary for a complete understanding of
    some of the more technical parts of this specification. An understanding of Web IDL, HTTP, XML,
    Unicode, character encodings, JavaScript, and CSS will also be helpful in places but is not
    essential.

<h3 id="scope">Scope</h3>

    <em>This section is non-normative.</em>

    This specification is limited to providing a semantic-level markup language and associated
    semantic-level scripting APIs for authoring accessible pages on the Web ranging from static
    documents to dynamic applications.

    The scope of this specification does not include providing mechanisms for media-specific
    customization of presentation (although default rendering rules for Web browsers are included at
    the end of this specification, and several mechanisms for hooking into CSS are provided as part
    of the language).

    The scope of this specification is not to describe an entire operating system. In particular,
    hardware configuration software, image manipulation tools, and applications that users would be
    expected to use with high-end workstations on a daily basis are out of scope. In terms of
    applications, this specification is targeted specifically at applications that would be expected
    to be used by users on an occasional basis, or regularly but from disparate locations, with low
    CPU requirements. Examples of such applications include online purchasing systems, searching
    systems, games (especially multiplayer online games), public telephone books or address books,
    communications software (e-mail clients, instant messaging clients, discussion software),
    document editing software, etc.

<h3 id="history">History</h3>

    <em>This section is non-normative.</em>

    For its first five years (1990-1995), HTML went through a number of revisions and experienced a
    number of extensions, primarily hosted first at CERN, and then at the IETF.

    With the creation of the W3C, HTML's development changed venue again. A first abortive attempt
    at extending HTML in 1995 known as HTML 3.0 then made way to a more pragmatic approach known as
    HTML 3.2, which was completed in 1997. HTML4 quickly followed later that same year.

    The following year, the W3C membership decided to stop evolving HTML and instead begin work on
    an XML-based equivalent, called XHTML. This effort started with a reformulation of HTML4 in XML,
    known as XHTML 1.0, which added no new features except the new serialization, and which was
    completed in 2000. After XHTML 1.0, the W3C's focus turned to making it easier for other working
    groups to extend XHTML, under the banner of XHTML Modularization. In parallel with this, the W3C
    also worked on a new language that was not compatible with the earlier HTML and XHTML languages,
    calling it XHTML2.

    Around the time that HTML's evolution was stopped in 1998, parts of the API for HTML developed
    by browser vendors were specified and published under the name DOM Level 1 (in 1998) and DOM
    Level 2 Core and DOM Level 2 HTML (starting in 2000 and culminating in 2003). These efforts then
    petered out, with some DOM Level 3 specifications published in 2004 but the working group being
    closed before all the Level 3 drafts were completed.

    In 2003, the publication of XForms, a technology which was positioned as the next generation of
    Web forms, sparked a renewed interest in evolving HTML itself, rather than finding replacements
    for it. This interest was borne from the realization that XML's deployment as a Web technology
    was limited to entirely new technologies (like RSS and later Atom), rather than as a replacement
    for existing deployed technologies (like HTML).

    A proof of concept to show that it was possible to extend HTML4's forms to provide many of the
    features that XForms 1.0 introduced, without requiring browsers to implement rendering engines
    that were incompatible with existing HTML Web pages, was the first result of this renewed
    interest. At this early stage, while the draft was already publicly available, and input was
    already being solicited from all sources, the specification was only under Opera Software's
    copyright.

    The idea that HTML's evolution should be reopened was tested at a W3C workshop in 2004, where
    some of the principles that underlie the HTML5 work (described below), as well as the
    aforementioned early draft proposal covering just forms-related features, were presented to the
    W3C jointly by Mozilla and Opera. The proposal was rejected on the grounds that the proposal
    conflicted with the previously chosen direction for the Web's evolution; the W3C staff and
    membership voted to continue developing XML-based replacements instead.

    Shortly thereafter, Apple, Mozilla, and Opera jointly announced their intent to continue
    working on the effort under the umbrella of a new venue called the WHATWG. A public mailing list
    was created, and the draft was moved to the WHATWG site. The copyright was subsequently amended
    to be jointly owned by all three vendors, and to allow reuse of the specification.

    The WHATWG was based on several core principles, in particular that technologies need to be
    backwards compatible, that specifications and implementations need to match even if this means
    changing the specification rather than the implementations, and that specifications need to be
    detailed enough that implementations can achieve complete interoperability without
    reverse-engineering each other.

    The latter requirement in particular required that the scope of the HTML5 specification include
    what had previously been specified in three separate documents: HTML4, XHTML1, and DOM2 HTML. It
    also meant including significantly more detail than had previously been considered the norm.

    In 2006, the W3C indicated an interest to participate in the development of HTML5 after all,
    and in 2007 formed a working group chartered to work with the WHATWG on the development of the
    HTML5 specification. Apple, Mozilla, and Opera allowed the W3C to publish the specification
    under the W3C copyright, while keeping a version with the less restrictive license on the WHATWG
    site.

    For a number of years, both groups then worked together under the same editor: Ian Hickson.
    In 2011, the groups came to the conclusion that they had different goals: the W3C wanted to
    draw a line in the sand for features for a HTML5 Recommendation, while the WHATWG wanted to
    continue working on a Living Standard for HTML, continuously maintaining the specification
    and adding new features. In mid 2012, a new editing team was introduced at the W3C to take
    care of creating a HTML5 Recommendation and prepare a Working Draft for the next HTML
    version.

    Since then, the W3C HTML WG has been cherry picking patches from the WHATWG that resolved bugs
    registered on the W3C HTML specification or more accurately represented implemented reality in
    UAs. At time of publication of this document, patches from the <a>WHATWG HTML specification</a>
    have been merged until revision <a>8424</a> inclusive. The W3C HTML editors have also added
    patches that resulted from discussions and decisions made by the W3C HTML WG as well a bug
    fixes from bugs not shared by the WHATWG.

    A separate document is published to document the differences between the HTML specified
    in this document and the language described in the HTML4 specification. [[HTML5-DIFF]]

<h3 id="design-notes">Design notes</h3>

    <em>This section is non-normative.</em>

    It must be admitted that many aspects of HTML appear at first glance to be nonsensical and
    inconsistent.

    HTML, its supporting DOM APIs, as well as many of its supporting technologies, have been
    developed over a period of several decades by a wide array of people with different priorities
    who, in many cases, did not know of each other's existence.

    Features have thus arisen from many sources, and have not always been designed in especially
    consistent ways. Furthermore, because of the unique characteristics of the Web, implementation
    bugs have often become de-facto, and now de-jure, standards, as content is often unintentionally
    written in ways that rely on them before they can be fixed.

    Despite all this, efforts have been made to adhere to certain design goals. These are described
    in the next few subsections.

<h4 id="serializability-of-script-execution">Serializability of script execution</h4>

    <em>This section is non-normative.</em>

    To avoid exposing Web authors to the complexities of multithreading, the HTML and DOM APIs are
    designed such that no script can ever detect the simultaneous execution of other scripts. Even
    with <a>workers</a>, the intent is that the behavior of implementations
    can be thought of as completely serializing the execution of all scripts in all
    <span data-x="browsing context">browsing contexts</span>.

    The
    {{navigator}}.<<yieldForStorageUpdates()>>
    method, in this model, is equivalent to allowing other scripts to run while the calling script
    is blocked.

<h4 id="compliance-with-other-specifications">Compliance with other specifications</h4>

    <em>This section is non-normative.</em>

    This specification interacts with and relies on a wide variety of other specifications. In
    certain circumstances, unfortunately, conflicting needs have led to this specification violating
    the requirements of these other specifications. Whenever this has occurred, the transgressions
    have each been noted as a "<dfn>willful violation</dfn>", and the reason for the violation has
    been noted.

<h4 id="extensibility">Extensibility</h4>

    <em>This section is non-normative.</em>

    HTML has a wide array of extensibility mechanisms that can be used for adding semantics in a
    safe manner:

    * Authors can use the <code>class</code> attribute to extend elements,
        effectively creating their own elements, while using the most applicable existing "real"
        HTML element, so that browsers and other tools that don't know of the extension can still
        support it somewhat well. This is the tack used by microformats, for example.

    * Authors can include data for inline client-side scripts or server-side site-wide scripts
        to process using the <code>data-*=""</code> attributes. These are guaranteed
        to never be touched by browsers, and allow scripts to include data on HTML elements that scripts
        can then look for and process.

    * Authors can use the <code>&lt;meta name="" content=""></code> mechanism to
        include page-wide metadata by registering <span data-x="concept-meta-extensions">extensions to
        the predefined set of metadata names</span>.

    * Authors can use the <code>rel=""</code> mechanism to annotate
        links with specific meanings by registering <span data-x="concept-rel-extensions">extensions to
        the predefined set of link types</span>. This is also used by microformats. Additionally,
        absolute URLs that do not contain any non-ASCII characters, nor
        characters in the range U+0041 (LATIN CAPITAL LETTER A) through
        U+005A (LATIN CAPITAL LETTER Z) (inclusive), may be used as link
        types.

    * Authors can embed raw data using the <code>&lt;script type=""></code>
        mechanism with a custom type, for further handling by inline or server-side scripts.

    * Authors can create <span data-x="plugin">plugins</span> and invoke them using the
        <{embed}> element. This is how Flash works.

    * Authors can extend APIs using the JavaScript prototyping mechanism. This is widely used by
        script libraries, for instance.

  </ul>