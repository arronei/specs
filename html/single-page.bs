<h1>HTML</h1>

<pre class="metadata">
Shortname: html
Level: 5.1
Group: html
Status: WD
TR: http://www.w3.org/TR/html/
ED: https://github.com/w3c/html/
Previous Version: http://www.w3.org/TR/2014/WD-html51-20140204/

Editor: WHATWG
Editor: Simon Pieters, Opera Software, simonp@opera.com
Editor: Anne van Kesteren, Mozilla, annevk@annevk.nl
Editor: Philip JÃ¤genstedt, Opera Software, philipj@opera.com
Editor: Domenic Denicola, Google Inc., d@domenic.me
Editor: Ian Hickson, Google Inc., ian@hixie.ch
Editor: W3C
Editor: Steve Faulkner, The Paciello Group, sfaulkner@paciellogroup.com
Editor: Travis Leithead, Microsoft, travil@microsoft.com
Editor: Erika Doyle Navara, Microsoft, Erika.Doyle@microsoft.com
Editor: Edward O'Connor, Apple Inc., eoconnor@apple.com
Editor: Robin Berjon, W3C (Until August 2015), http://berjon.com/
Abstract: This specification defines the 5th major version, first minor revision of the core
          language of the World Wide Web: the Hypertext Markup Language (HTML). In this version,
          new features continue to be introduced to help Web application authors, new elements
          continue to be introduced based on research into prevailing authoring practices, and
          special attention continues to be given to defining clear conformance criteria for user
          agents in an effort to improve interoperability.
Ignored Vars: this, object, variable, optionalArgument, name, value, e, oldParent, removedNode, Document, Feature, owner
</pre>

<pre class="anchors">
urlPrefix: http://www.w3.org/TR/workers/; type: dfn; spec: WORKERS; text: worker;
urlPrefix: http://www.whatwg.org/specs/web-apps/current-work/; type: dfn; spec: WHATWG; text: WHATWG HTML specification;
urlPrefix: http://html5.org/r/8424/; type: dfn; text: 8424
</pre>

<pre class="link-defaults">
spec:dom-ls; type:dfn; for:Attr; text:name
spec:url; type:dfn; for:url; text:url
</pre>

<h2 id="introduction">Introduction</h2>

<h3 id="background">Background</h3>

  <em>This section is non-normative.</em>

  The World Wide Web's markup language has always been HTML. HTML was primarily designed as a
  language for semantically describing scientific documents, although its general design and
  adaptations over the years have enabled it to be used to describe a number of other types of
  documents.

  The main area that has not been adequately addressed by HTML is a vague subject referred to as
  Web Applications. This standard attempts to rectify this, while at the same time updating the HTML
  language to address issues raised in the past few years.

<h3 id="audience">Audience</h3>

  <em>This section is non-normative.</em>

  This specification is intended for authors of documents and scripts that use the features
  defined in this specification<span class="impl">, implementors of tools that operate on pages
  that use the features defined in this specification, and individuals wishing to establish the
  correctness of documents or implementations with respect to the requirements of this
  specification</span>.

  This document is probably not suited to readers who do not already have at least a passing
  familiarity with Web technologies, as in places it sacrifices clarity for precision, and brevity
  for completeness. More approachable tutorials and authoring guides can provide a gentler
  introduction to the topic.

  In particular, familiarity with the basics of DOM is necessary for a complete understanding of
  some of the more technical parts of this specification. An understanding of Web IDL, HTTP, XML,
  Unicode, character encodings, JavaScript, and CSS will also be helpful in places but is not
  essential.

<h3 id="scope">Scope</h3>

  <em>This section is non-normative.</em>

  This specification is limited to providing a semantic-level markup language and associated
  semantic-level scripting APIs for authoring accessible pages on the Web ranging from static
  documents to dynamic applications.

  The scope of this specification does not include providing mechanisms for media-specific
  customization of presentation (although default rendering rules for Web browsers are included at
  the end of this specification, and several mechanisms for hooking into CSS are provided as part
  of the language).

  The scope of this specification is not to describe an entire operating system. In particular,
  hardware configuration software, image manipulation tools, and applications that users would be
  expected to use with high-end workstations on a daily basis are out of scope. In terms of
  applications, this specification is targeted specifically at applications that would be expected
  to be used by users on an occasional basis, or regularly but from disparate locations, with low
  CPU requirements. Examples of such applications include online purchasing systems, searching
  systems, games (especially multiplayer online games), public telephone books or address books,
  communications software (e-mail clients, instant messaging clients, discussion software),
  document editing software, etc.

<h3 id="history">History</h3>

  <em>This section is non-normative.</em>

  For its first five years (1990-1995), HTML went through a number of revisions and experienced a
  number of extensions, primarily hosted first at CERN, and then at the IETF.

  With the creation of the W3C, HTML's development changed venue again. A first abortive attempt at
  extending HTML in 1995 known as HTML 3.0 then made way to a more pragmatic approach known as
  HTML3.2, which was completed in 1997. HTML4 quickly followed later that same year.

  The following year, the W3C membership decided to stop evolving HTML and instead begin work on
  an XML-based equivalent, called XHTML. This effort started with a reformulation of HTML4 in XML,
  known as XHTML 1.0, which added no new features except the new serialization, and which was
  completed in 2000. After XHTML 1.0, the W3C's focus turned to making it easier for other working
  groups to extend XHTML, under the banner of XHTML Modularization. In parallel with this, the W3C
  also worked on a new language that was not compatible with the earlier HTML and XHTML languages,
  calling it XHTML2.

  Around the time that HTML's evolution was stopped in 1998, parts of the API for HTML developed
  by browser vendors were specified and published under the name DOM Level 1 (in 1998) and DOM
  Level 2 Core and DOM Level 2 HTML (starting in 2000 and culminating in 2003). These efforts then
  petered out, with some DOM Level 3 specifications published in 2004 but the working group being
  closed before all the Level 3 drafts were completed.

  In 2003, the publication of XForms, a technology which was positioned as the next generation of
  Web forms, sparked a renewed interest in evolving HTML itself, rather than finding replacements
  for it. This interest was borne from the realization that XML's deployment as a Web technology was
  limited to entirely new technologies (like RSS and later Atom), rather than as a replacement for
  existing deployed technologies (like HTML).

  A proof of concept to show that it was possible to extend HTML4's forms to provide many of the
  features that XForms 1.0 introduced, without requiring browsers to implement rendering engines
  that were incompatible with existing HTML Web pages, was the first result of this renewed
  interest. At this early stage, while the draft was already publicly available, and input was
  already being solicited from all sources, the specification was only under Opera Software's
  copyright.

  The idea that HTML's evolution should be reopened was tested at a W3C workshop in 2004, where
  some of the principles that underlie the HTML5 work (described below), as well as the
  aforementioned early draft proposal covering just forms-related features, were presented to the
  W3C jointly by Mozilla and Opera. The proposal was rejected on the grounds that the proposal
  conflicted with the previously chosen direction for the Web's evolution; the W3C staff and
  membership voted to continue developing XML-based replacements instead.

  Shortly thereafter, Apple, Mozilla, and Opera jointly announced their intent to continue working
  on the effort under the umbrella of a new venue called the WHATWG. A public mailing list was
  created, and the draft was moved to the WHATWG site. The copyright was subsequently amended to be
  jointly owned by all three vendors, and to allow reuse of the specification.

  The WHATWG was based on several core principles, in particular that technologies need to be
  backwards compatible, that specifications and implementations need to match even if this means
  changing the specification rather than the implementations, and that specifications need to be
  detailed enough that implementations can achieve complete interoperability without
  reverse-engineering each other.

  The latter requirement in particular required that the scope of the HTML5 specification include
  what had previously been specified in three separate documents: HTML4, XHTML1, and DOM2 HTML. It
  also meant including significantly more detail than had previously been considered the norm.

  In 2006, the W3C indicated an interest to participate in the development of HTML5 after all, and
  in 2007 formed a working group chartered to work with the WHATWG on the development of the HTML5
  specification. Apple, Mozilla, and Opera allowed the W3C to publish the specification under the
  W3C copyright, while keeping a version with the less restrictive license on the WHATWG site.

  For a number of years, both groups then worked together under the same editor: Ian Hickson. In
  2011, the groups came to the conclusion that they had different goals: the W3C wanted to draw a
  line in the sand for features for a HTML5 Recommendation, while the WHATWG wanted to continue
  working on a Living Standard for HTML, continuously maintaining the specification and adding new
  features. In mid 2012, a new editing team was introduced at the W3C to take care of creating a
  HTML5 Recommendation and prepare a Working Draft for the next HTML version.

  Since then, the W3C HTML WG has been cherry picking patches from the WHATWG that resolved bugs
  registered on the W3C HTML specification or more accurately represented implemented reality in
  UAs. At time of publication of this document, patches from the <a>WHATWG HTML specification</a>
  have been merged until revision <a>8424</a> inclusive. The W3C HTML editors have also added
  patches that resulted from discussions and decisions made by the W3C HTML WG as well a bug fixes
  from bugs not shared by the WHATWG.

  A separate document is published to document the differences between the HTML specified in this
  document and the language described in the HTML4 specification. [[HTML5-DIFF]]

<h3 id="design-notes">Design notes</h3>

  <em>This section is non-normative.</em>

  It must be admitted that many aspects of HTML appear at first glance to be nonsensical and
  inconsistent.

  HTML, its supporting DOM APIs, as well as many of its supporting technologies, have been
  developed over a period of several decades by a wide array of people with different priorities
  who, in many cases, did not know of each other's existence.

  Features have thus arisen from many sources, and have not always been designed in especially
  consistent ways. Furthermore, because of the unique characteristics of the Web, implementation
  bugs have often become de-facto, and now de-jure, standards, as content is often unintentionally
  written in ways that rely on them before they can be fixed.

  Despite all this, efforts have been made to adhere to certain design goals. These are described
  in the next few subsections.

<h4 id="serializability-of-script-execution">Serializability of script execution</h4>

  <em>This section is non-normative.</em>

  To avoid exposing Web authors to the complexities of multithreading, the HTML and DOM APIs are
  designed such that no script can ever detect the simultaneous execution of other scripts. Even
  with <a>workers</a>, the intent is that the behavior of implementations
  can be thought of as completely serializing the execution of all scripts in all
  <a>browsing contexts</a>.

  <p class="note">
    The <code>navigator.yieldForStorageUpdates()</code> method, in this model, is equivalent to
    allowing other scripts to run while the calling script is blocked.
  </p>

<h4 id="compliance-with-other-specifications">Compliance with other specifications</h4>

  <em>This section is non-normative.</em>

  This specification interacts with and relies on a wide variety of other specifications. In certain
  circumstances, unfortunately, conflicting needs have led to this specification violating the
  requirements of these other specifications. Whenever this has occurred, the transgressions have
  each been noted as a "<dfn>willful violation</dfn>", and the reason for the violation has been
  noted.

<h4 id="extensibility">Extensibility</h4>

  <em>This section is non-normative.</em>

  HTML has a wide array of extensibility mechanisms that can be used for adding semantics in a safe
  manner:

  * Authors can use the <code>class</code> attribute to extend elements, effectively creating their
    own elements, while using the most applicable existing "real" HTML element, so that browsers and
    other tools that don't know of the extension can still support it somewhat well. This is the
    tack used by microformats, for example.

  * Authors can include data for inline client-side scripts or server-side site-wide scripts to
    process using the <code>data-*=""</code> attributes. These are guaranteed to never be touched by
    browsers, and allow scripts to include data on HTML elements that scripts can then look for and
    process.

  * Authors can use the <code>&lt;meta name="" content=""></code> mechanism to
    include page-wide metadata by registering <a>extensions to the predefined set of metadata
    names</a>.

  * Authors can use the <code>rel=""</code> mechanism to annotate links with specific meanings by
    registering <a>extensions to the predefined set of link types</a>. This is also used by
    microformats. Additionally, absolute URLs that do not contain any non-ASCII characters, nor
    characters in the range U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z)
    (inclusive), may be used as link types.

  * Authors can embed raw data using the <code>&lt;script type=""></code> mechanism with a custom
    type, for further handling by inline or server-side scripts.

  * Authors can create <a>plugins</a> and invoke them using the <{embed}> element. This is how Flash
    works.

  * Authors can extend APIs using the JavaScript prototyping mechanism. This is widely used by
    script libraries, for instance.

<h3 id="html-vs-xhtml">HTML vs XHTML</h3>

  <em>This section is non-normative.</em>

  This specification defines an abstract language for describing documents and applications, and
  some APIs for interacting with in-memory representations of resources that use this language.


  The in-memory representation is known as "DOM HTML", or "the DOM" for short.

  There are various concrete syntaxes that can be used to transmit resources that use this abstract
  language, two of which are defined in this specification.

  The first such concrete syntax is the HTML syntax. This is the format suggested for most authors.
  It is compatible with most legacy Web browsers. If a document is transmitted with the
  <code>text/html</code> <a>MIME type</a>, then it will be processed as an HTML document by Web
  browsers. This specification defines version [LEVEL] of the HTML syntax, known as "HTML[LEVEL]".

  The second concrete syntax is the XHTML syntax, which is an application of XML. When a document
  is transmitted with an <a>XML MIME type</a>, such as <code>application/xhtml+xml</code>,
  then it is treated as an XML document by Web browsers, to be parsed by an XML processor. Authors
  are reminded that the processing for XML and HTML differs; in particular, even minor syntax
  errors will prevent a document labeled as XML from being rendered fully, whereas they would be
  ignored in the HTML syntax. This specification defines version [LEVEL] of the XHTML syntax,
  known as "XHTML[LEVEL]".

  The DOM, the HTML syntax, and the XHTML syntax cannot all represent the same content. For
  example, namespaces cannot be represented using the HTML syntax, but they are supported in the
  DOM and in the XHTML syntax. Similarly, documents that use the <code>noscript</code> feature can
  be represented using the HTML syntax, but cannot be represented with the DOM or in the XHTML
  syntax. Comments that contain the string "<code>--&gt;</code>" can only be represented in the
  DOM, not in the HTML and XHTML syntaxes.

<h3 id="structure-of-this-specification">Structure of this specification</h3>

  <em>This section is non-normative.</em>

  This specification is divided into the following major sections:

  <div dfn-for="spec">
    : [[#introduction]]
    :: Non-normative materials providing a context for the HTML standard.

    : [[#infrastructure]]
    :: The conformance classes, algorithms, definitions, and the common underpinnings of the rest of
        the specification.

    : [[#dom]]
    :: Documents are built from elements. These elements form a tree using the DOM. This section
        defines the features of this DOM, as well as introducing the features common to all
        elements, and the concepts used in defining elements.

    : [[#semantics]]
    :: Each element has a predefined meaning, which is explained in this section. Rules for authors
        on how to use the element<span class="impl">, along with user agent requirements for how to
        handle each element,</span> are also given. This includes large signature features of HTML
        such as video playback and subtitles, form controls and form submission, and a 2D graphics
        API known as the HTML canvas.

    : [[#editing]]
    :: HTML documents can provide a number of mechanisms for users to interact with and modify
        content, which are described in this section, such as how focus works, and drag-and-drop.

    : [[#browsers]]
    :: HTML documents do not exist in a vacuum &mdash; this section defines many of the features
        that affect environments that deal with multiple pages, such as Web browsers and offline
        caching of Web applications.

    : [[#webappapis]]
    :: This section introduces basic features for scripting of applications in HTML.

    : [[#syntax]]
    : [[#xhtml]]
    :: All of these features would be for naught if they couldn't be represented in a serialized
        form and sent to other people, and so these sections define the syntaxes of HTML and
        XHTML<span class="impl">, along with rules for how to parse content using those
        syntaxes</span>.

    : [[#rendering]]
    :: This section defines the default rendering rules for Web browsers.

    There are also some appendices, listing <a>obsolete features</a> and <a>IANA considerations</a>,
    and several indices.
  </div>

<h4 id="how-to-read-this-specification">How to read this specification</h4>

  This specification should be read like all other specifications. First, it should be read
  cover-to-cover, multiple times. Then, it should be read backwards at least once. Then it should be
  read by picking random sections from the contents list and following all the cross-references.

  As described in the conformance requirements section below, this specification describes
  conformance criteria for a variety of conformance classes. In particular, there are conformance
  requirements that apply to <em>producers</em>, for example authors and the documents they create,
  and there are conformance requirements that apply to <em>consumers</em>, for example Web browsers.
  They can be distinguished by what they are requiring: a requirement on a producer states what is
  allowed, while a requirement on a consumer states how software is to act.

  <div class="example">
    For example, "the <code>foo</code> attribute's value must be a <a>valid integer</a>" is a
    requirement on producers, as it lays out the allowed values; in contrast, the requirement "the
    <code>foo</code> attribute's value must be parsed using the <a>rules for parsing integers</a>"
    is a requirement on consumers, as it describes how to process the content.
  </div>

  <strong>Requirements on producers have no bearing whatsoever on consumers.</strong>

  <div class="example">
    Continuing the above example, a requirement stating that a particular attribute's value is
    constrained to being a <a>valid integer</a> emphatically does <em>not</em> imply anything about
    the requirements on consumers. It might be that the consumers are in fact required to treat the
    attribute as an opaque string, completely unaffected by whether the value conforms to the
    requirements or not. It might be (as in the previous example) that the consumers are required to
    parse the value using specific rules that define how invalid (non-numeric in this case) values
    are to be processed.
  </div>

<h4 id="typographic-conventions">Typographic conventions</h4>

  <div dfn-for="conventions">
    This is a definition, requirement, or explanation.

    <p class="note">This is a note.</p>

    <p class="example">This is an example.</p>

    <p class="&#x0058;&#x0058;&#x0058;">This is an open issue.</p>

    <p class="warning">This is a warning.</p>

    <pre class="idl-ignore" data-highlight="webidl">
      interface <dfn>Example</dfn> {
          // this is an IDL definition
      };
    </pre>

    <dl class="domintro">
      <dt><var>variable</var> = <var>object</var> . <code>method</code>( [ <var>optionalArgument</var> ] )</dt>
      <dd>This is a note to authors describing the usage of an interface.</dd>
    </dl>

    <pre class="css" highlight="css">/* this is a CSS fragment */</pre>

    The defining instance of a term is marked up like <dfn>this</dfn>. Uses of that
    term are marked up like <a>this</a> or like <i>this</i>.

    The defining instance of an element, attribute, or API is marked up like
    <dfn><code>this</code></dfn>. References to that element, attribute, or API are marked up like
    <code>this</code>.

    Other code fragments are marked up <code>like this</code>.

    Variables are marked up like <var>this</var>.


    In an algorithm, steps in <a>synchronous sections</a> are marked with &#x231B;.

    In some cases, requirements are given in the form of lists with conditions and corresponding
    requirements. In such cases, the requirements that apply to a condition are always the first set
    of requirements that follow the condition, even in the case of there being multiple sets of
    conditions for those requirements. Such cases are presented as follows:

    <dl class="switch">
      <dt>This is a condition</dt>
      <dt>This is another condition</dt>
      <dd>This is the requirement that applies to the conditions above.</dd>

      <dt>This is a third condition</dt>
      <dd>This is the requirement that applies to the third condition.</dd>
    </dl>
  </div>

<h3 id="fingerprint">Privacy concerns</h3>

  <em>This section is non-normative.</em>

  Some features of HTML trade user convenience for a measure of user privacy.

  In general, due to the Internet's architecture, a user can be distinguished from another by the
  user's IP address. IP addresses do not perfectly match to a user; as a user moves from device to
  device, or from network to network, their IP address will change; similarly, NAT routing, proxy
  servers, and shared computers enable packets that appear to all come from a single IP address to
  actually map to multiple users. Technologies such as onion routing can be used to further
  anonymize requests so that requests from a single user at one node on the Internet appear to come
  from many disparate parts of the network.

  However, the IP address used for a user's requests is not the only mechanism by which a user's
  requests could be related to each other. Cookies, for example, are designed specifically to enable
  this, and are the basis of most of the Web's session features that enable you to log into a site
  with which you have an account.

  There are other mechanisms that are more subtle. Certain characteristics of a user's system can be
  used to distinguish groups of users from each other; by collecting enough such information, an
  individual user's browser's "digital fingerprint" can be computed, which can be as good, if not
  better, as an IP address in ascertaining which requests are from the same user.

  Grouping requests in this manner, especially across multiple sites, can be used for both benign
  (and even arguably positive) purposes, as well as for malevolent purposes. An example of a
  reasonably benign purpose would be determining whether a particular person seems to prefer sites
  with dog illustrations as opposed to sites with cat illustrations (based on how often they visit
  the sites in question) and then automatically using the preferred illustrations on subsequent
  visits to participating sites. Malevolent purposes, however, could include governments combining
  information such as the person's home address (determined from the addresses they use when getting
  driving directions on one site) with their apparent political affiliations (determined by
  examining the forum sites that they participate in) to determine whether the person should be
  prevented from voting in an election.

  Since the malevolent purposes can be remarkably evil, user agent implementors are encouraged to
  consider how to provide their users with tools to minimize leaking information that could be used
  to fingerprint a user.

  Unfortunately, as the first paragraph in this section implies, sometimes there is great benefit
  to be derived from exposing the very information that can also be used for fingerprinting
  purposes, so it's not as easy as simply blocking all possible leaks. For instance, the ability to
  log into a site to post under a specific identity requires that the user's requests be
  identifiable as all being from the same user, more or less by definition. More subtly, though,
  information such as how wide text is, which is necessary for many effects that involve drawing
  text onto a canvas (e.g. any effect that involves drawing a border around the text) also leaks
  information that can be used to group a user's requests. (In this case, by potentially exposing,
  via a brute force search, which fonts a user has installed, information which can vary
  considerably from user to user.)

  Features in this specification which can be <dfn id="fingerprinting-vector">used to fingerprint
  the user</dfn> are marked as this paragraph is.
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

  Other features in the platform can be used for the same purpose, though, including, though not
  limited to:

  * The exact list of which features a user agents supports.

  * The maximum allowed stack depth for recursion in script.

  * Features that describe the user's environment, like Media Queries and the <code>Screen</code>
    object. [[!MEDIAQ]] [[!CSSOM-VIEW]]

  * The user's time zone.

<h3 id="a-quick-introduction-to-html">A quick introduction to HTML</h3>

  <em>This section is non-normative.</em>

  A basic HTML document looks like this:

  <pre id="intro-early-example" highlight="html">
    &lt;!DOCTYPE html>
    &lt;html>
      &lt;head>
        &lt;title>Sample page&lt;/title>
      &lt;/head>
      &lt;body>
        &lt;h1>Sample page&lt;/h1>
        &lt;p>This is a &lt;a href="demo.html">simple&lt;/a> sample.&lt;/p>
        &lt;!-- this is a comment -->
      &lt;/body>
    &lt;/html>
  </pre>

  HTML documents consist of a tree of elements and text. Each element is denoted in the source by
  a <a>start tag</a>, such as "<code>&lt;body></code>", and an <a>end tag</a>, such as
  "<code>&lt;/body></code>". (Certain start tags and end tags can in certain cases be <a>omitted</a>
  and are implied by other tags.)

  Tags have to be nested such that elements are all completely within each other, without
  overlapping:

  <pre class="bad" highlight="html">&lt;p>This is &lt;em>very &lt;strong>wrong&lt;/em>!&lt;/strong>&lt;/p></pre>
  <pre highlight="html">&lt;p>This &lt;em>is &lt;strong>correct&lt;/strong>.&lt;/em>&lt;/p></pre>

  This specification defines a set of elements that can be used in HTML, along with rules about the
  ways in which the elements can be nested.

  Elements can have attributes, which control how the elements work. In the example below, there
  is a <a>hyperlink</a>, formed using the <code>a</code> element and its <code>href</code>
  attribute:

  <pre highlight="html">&lt;a href="demo.html">simple&lt;/a></pre>

  <a>Attributes</a> are placed inside the start tag, and consist of a <a>name</a> and a
  <a>value</a>, separated by an "<code>=</code>" character. The attribute value can remain
  <a>unquoted</a> if it doesn't contain <a>space characters</a> or any of <code>"</code>
  <code>'</code> <code>`</code> <code>=</code> <code>&lt;</code> or <code>&gt;</code>. Otherwise,
  it has to be quoted using either single or double quotes. The value, along with the
  "<code>=</code>" character, can be omitted altogether if the value is the empty string.

  <pre highlight="html">
    &lt;!-- empty attributes -->
    &lt;input name=address disabled>
    &lt;input name=address disabled="">

    &lt;!-- attributes with a value -->
    &lt;input name=address maxlength=200>
    &lt;input name=address maxlength='200'>
    &lt;input name=address maxlength="200">
  </pre>

  HTML user agents (e.g. Web browsers) then <i>parse</i> this markup, turning it into a DOM
  (Document Object Model) tree. A DOM tree is an in-memory representation of a document.

  DOM trees contain several kinds of nodes, in particular a <code>DocumentType</code> node,
  <code>Element</code> nodes, <code>Text</code> nodes, <code>Comment</code> nodes, and in some
  cases <code>ProcessingInstruction</code> nodes.

  The <a>markup snippet at the top of this section</a> would be turned into the following DOM tree:

  <ul class="domTree">
    <li class="t10">DOCTYPE: <code>html</code></li>
    <li class="t1">
      <code>html</code>
      <ul>
        <li class="t1">
          <code>head</code>
          <ul>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x2423;</span></li>
            <li class="t1">
              <code>title</code>
              <ul>
                <li class="t3"><code>#text</code>: <span>Sample page</span></li>
              </ul>
            </li>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;</span></li>
          </ul>
        </li>
        <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;</span></li>
        <li class="t1">
          <code>body</code>
          <ul>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x2423;</span></li>
            <li class="t1">
              <code>h1</code>
              <ul>
                <li class="t3"><code>#text</code>: <span>Sample page</span></li>
              </ul>
            </li>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x2423;</span></li>
            <li class="t1">
              <code>p</code>
              <ul>
                <li class="t3"><code>#text</code>: <span>This is a</span></li>
                <li class="t1">
                  <code>a</code> <span class="t2"><code>href</code>="<code>demo.html</code>"</span>
                  <ul>
                    <li class="t3"><code>#text</code>: <span>simple</span></li>
                  </ul>
                </li>
                <li class="t3"><code>#text</code>: <span> sample.</span></li>
              </ul>
            </li>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x2423;</span></li>
            <li class="t8"><code>#comment</code>: <span> this is a comment </span></li>
            <li class="t3"><code>#text</code>: <span>&#x23CE;&#x2423;&#x23CE;</span></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>

  The <a>root element</a> of this tree is the <{html}> element, which is the element always found at
  the root of HTML documents. It contains two elements, <{head}> and <{body}>, as well as a
  <code>Text</code> node between them.

  There are many more <code>Text</code> nodes in the DOM tree than one would initially expect,
  because the source contains a number of spaces (represented here by "&#x2423;") and line breaks
  ("&#x23CE;") that all end up as <code>Text</code> nodes in the DOM. However, for historical
  reasons not all of the spaces and line breaks in the original markup appear in the DOM. In
  particular, all the whitespace before <{head}> start tag ends up being dropped silently, and all
  the whitespace after the <{body}> end tag ends up placed at the end of the <{body}>.

  The <{head}> element contains a <{title}> element, which itself contains a <code>Text</code> node
  with the text "Sample page". Similarly, the <{body}> element contains an {{h1}} element, a <{p}>
  element, and a comment.

  <hr />

  This DOM tree can be manipulated from scripts in the page. Scripts (typically in JavaScript)
  are small programs that can be embedded using the <{script}> element or using
  <a>event handler content attributes</a>. For example, here is a form with a script that sets the
  value of the form's <{output}> element to say "Hello World"

  <pre highlight="html">
    &lt;form name="main">
      Result: &lt;output name="result">&lt;/output>
      &lt;script>
        document.forms.main.elements.result.value = 'Hello World';
      &lt;/script>
    &lt;/form>
  </pre>

  Each element in the DOM tree is represented by an object, and these objects have APIs so that
  they can be manipulated. For instance, a link (e.g. the <{a}> element in the tree above) can have
  its "<{a/href}>" attribute changed in several ways:

  <pre highlight="javascript">
    var a = document.links[0]; // obtain the first link in the document
    a.href = 'sample.html'; // change the destination URL of the link
    a.protocol = 'https'; // change just the scheme part of the URL
    a.setAttribute('href', 'http://example.com/'); // change the content attribute directly
  </pre>

  Since DOM trees are used as the way to represent HTML documents when they are processed and
  presented by implementations (especially interactive implementations like Web browsers), this
  specification is mostly phrased in terms of DOM trees, instead of the markup described above.

  <hr />

  HTML documents represent a media-independent description of interactive content. HTML documents
  might be rendered to a screen, or through a speech synthesizer, or on a braille display. To
  influence exactly how such rendering takes place, authors can use a styling language such as CSS.

  In the following example, the page has been made yellow-on-blue using CSS.

  <pre highlight="html">
    &lt;!DOCTYPE html>
    &lt;html>
      &lt;head>
        &lt;title>Sample styled page&lt;/title>
        &lt;style>
          body { background: navy; color: yellow; }
        &lt;/style>
      &lt;/head>
      &lt;body>
        &lt;h1>Sample styled page&lt;/h1>
        &lt;p>This page is just a demo.&lt;/p>
      &lt;/body>
    &lt;/html>
  </pre>

  For more details on how to use HTML, authors are encouraged to consult tutorials and guides. Some
  of the examples included in this specification might also be of use, but the novice author is
  cautioned that this specification, by necessity, defines the language with a level of detail that
  might be difficult to understand at first.

<h4 id="writing-secure-applications-with-html">Writing secure applications with HTML</h4>

  <em>This section is non-normative.</em>

  When HTML is used to create interactive sites, care needs to be taken to avoid introducing
  vulnerabilities through which attackers can compromise the integrity of the site itself or of
  the site's users.

  A comprehensive study of this matter is beyond the scope of this document, and authors are
  strongly encouraged to study the matter in more detail. However, this section attempts to provide
  a quick introduction to some common pitfalls in HTML application development.

  The security model of the Web is based on the concept of "origins", and correspondingly many of
  the potential attacks on the Web involve cross-origin actions. [[!ORIGIN]]

  : Not validating user input
  : Cross-site scripting (XSS)
  : SQL injection
  :: When accepting untrusted input, e.g. user-generated content such as text comments, values
      in URL parameters, messages from third-party sites, etc, it is imperative that the data
      be validated before use, and properly escaped when displayed. Failing to do this can
      allow a hostile user to perform a variety of attacks, ranging from the potentially
      benign, such as providing bogus user information like a negative age, to the serious,
      such as running scripts every time a user looks at a page that includes the information,
      potentially propagating the attack in the process, to the catastrophic, such as deleting
      all data in the server.

      When writing filters to validate user input, it is imperative that filters always be
      safelist-based, allowing known-safe constructs and disallowing all other input.
      Blocklist-based filters that disallow known-bad inputs and allow everything else are not
      secure, as not everything that is bad is yet known (for example, because it might be invented
      in the future).

      <div class="example">
        For example, suppose a page looked at its URL's query string to determine what to display,
        and the site then redirected the user to that page to display a message, as in:

        <pre highlight="html">
          &lt;ul>
            &lt;li>&lt;a href="message.cgi?say=Hello">Say Hello&lt;/a>
            &lt;li>&lt;a href="message.cgi?say=Welcome">Say Welcome&lt;/a>
            &lt;li>&lt;a href="message.cgi?say=Kittens">Say Kittens&lt;/a>
          &lt;/ul>
        </pre>

        If the message was just displayed to the user without escaping, a hostile attacker could
        then craft a URL that contained a script element:

        <pre>http://example.com/message.cgi?say=%3Cscript%3Ealert%28%27Oh%20no%21%27%29%3C/script%3E</pre>

        If the attacker then convinced a victim user to visit this page, a script of the
        attacker's choosing would run on the page. Such a script could do any number of hostile
        actions, limited only by what the site offers: if the site is an e-commerce shop, for
        instance, such a script could cause the user to unknowingly make arbitrarily many
        unwanted purchases.

        This is called a cross-site scripting attack.
      </div>

      There are many constructs that can be used to try to trick a site into executing code. Here
      are some that authors are encouraged to consider when writing safelist filters:

      * When allowing harmless-seeming elements like <{img}>, it is important to safelist any
        provided attributes as well. If one allowed all attributes then an attacker could, for
        instance, use the <{img/onload}> attribute to run arbitrary script.

      * When allowing URLs to be provided (e.g. for links), the scheme of each URL also needs to be
        explicitly safelisted, as there are many schemes that can be abused. The most prominent
        example is "<code>javascript:</code>", but user agents can implement (and indeed, have
        historically implemented) others.

      * Allowing a <{base}> element to be inserted means any <{script}> elements in the page with
        relative links can be hijacked, and similarly that any form submissions can get redirected
        to a hostile site.

    : Cross-site request forgery (CSRF)
    :: If a site allows a user to make form submissions with user-specific side-effects, for example
        posting messages on a forum under the user's name, making purchases, or applying for a
        passport, it is important to verify that the request was made by the user intentionally,
        rather than by another site tricking the user into making the request unknowingly.

        This problem exists because HTML forms can be submitted to other origins.

        Sites can prevent such attacks by populating forms with user-specific hidden tokens, or by
        checking <code>Origin</code> headers on all requests.

    : Clickjacking
    :: A page that provides users with an interface to perform actions that the user might not
        wish to perform needs to be designed so as to avoid the possibility that users can be
        tricked into activating the interface.

        One way that a user could be so tricked is if a hostile site places the victim site in a
        small <{iframe}> and then convinces the user to click, for instance by having the user play
        a reaction game. Once the user is playing the game, the hostile site can quickly position
        the <{iframe}> under the mouse cursor just as the user is about to click, thus tricking the
        user into clicking the victim site's interface.

        To avoid this, sites that do not expect to be used in frames are encouraged to only enable
        their interface if they detect that they are not in a frame (e.g. by comparing the
        <code>window</code> object to the value of the <code>top</code> attribute).

<h4 id="common-pitfalls-to-avoid-when-using-the-scripting-apis">
  Common pitfalls to avoid when using the scripting APIs
</h4>

  <em>This section is non-normative.</em>

  Scripts in HTML have "run-to-completion" semantics, meaning that the browser will generally run
  the script uninterrupted before doing anything else, such as firing further events or continuing
  to parse the document.

  On the other hand, parsing of HTML files happens <a>in parallel</a> and incrementally, meaning
  that the parser can pause at any point to let scripts run. This is generally a good thing, but it
  does mean that authors need to be careful to avoid hooking event handlers after the events could
  have possibly fired.

  There are two techniques for doing this reliably: use <a>event handler content attributes</a>, or
  create the element and add the event handlers in the same script. The latter is safe because, as
  mentioned earlier, scripts are run to completion before further events can fire.

  <div class="example">
    One way this could manifest itself is with <{img}> elements and the <code>load</code> event.
    The event could fire as soon as the element has been parsed, especially if the image has already
    been cached (which is common).

    Here, the author uses the <{img/onload}> handler on an <{img}> element to catch the
    <code>load</code> event:

    <pre highlight="html">&lt;img src="games.png" alt="Games" onload="gamesLogoHasLoaded(event)"></pre>

    If the element is being added by script, then so long as the event handlers are added in the
    same script, the event will still not be missed:

    <pre highlight="html">
      &lt;script>
      var img = new Image();
      img.src = 'games.png';
      img.alt = 'Games';
      img.onload = gamesLogoHasLoaded;
      // img.addEventListener('load', gamesLogoHasLoaded, false); // would work also
      &lt;/script>
    </pre>

    However, if the author first created the <code>img</code> element and then in a separate
    script added the event listeners, there's a chance that the <code>load</code> event would be
    fired in between, leading it to be missed:

    <pre class="bad" highlight="html">
      &lt;!-- Do not use this style, it has a race condition! -->
      &lt;img id="games" src="games.png" alt="Games">
      &lt;!-- the 'load' event might fire here while the parser is taking a
          break, in which case you will not see it! -->
      &lt;script>
      var img = document.getElementById('games');
      img.onload = gamesLogoHasLoaded; // might never fire!
      &lt;/script>
    </pre>
  </div>

<h4 id="how-to-catch-mistakes-when-writing-html-validators-and-conformance-checkers">
  How to catch mistakes when writing HTML: validators and conformance checkers
</h4>

  <em>This section is non-normative.</em>

  Authors are encouraged to make use of conformance checkers (also known as <i>validators</i>) to
  catch common mistakes. The W3C provides a number of online validation services, including the
  <a href="http://validator.w3.org/nu/">Nu Markup Validation Service</a>.

<h3 id="conformance-requirements-for-authors">Conformance requirements for authors</h3>

  <em>This section is non-normative.</em>

  Unlike previous versions of the HTML specification, this specification defines in some detail the
  required processing for invalid documents as well as valid documents.

  However, even though the processing of invalid content is in most cases well-defined, conformance
  requirements for documents are still important: in practice, interoperability (the situation in
  which all implementations process particular content in a reliable and identical or equivalent
  way) is not the only goal of document conformance requirements. This section details some of the
  more common reasons for still distinguishing between a conforming document and one with errors.

<h4 id="presentational-markup">Presentational markup</h4>

  <em>This section is non-normative.</em>

  The majority of presentational features from previous versions of HTML are no longer allowed.
  Presentational markup in general has been found to have a number of problems:

  : The use of presentational elements leads to poorer accessibility
  :: While it is possible to use presentational markup in a way that provides users of assistive
      technologies (ATs) with an acceptable experience (e.g. using ARIA), doing so is significantly
      more difficult than doing so when using semantically-appropriate markup. Furthermore, even
      using such techniques doesn't help make pages accessible for non-AT non-graphical users, such
      as users of text-mode browsers.

      Using media-independent markup, on the other hand, provides an easy way for documents to be
      authored in such a way that they work for more users (e.g. text browsers).

  : Higher cost of maintenance
  :: It is significantly easier to maintain a site written in such a way that the markup is
      style-independent. For example, changing the color of a site that uses
      <code>&lt;font&nbsp;color=""></code> throughout requires changes across the entire site,
      whereas a similar change to a site based on CSS can be done by changing a single file.

  : Larger document sizes
  :: Presentational markup tends to be much more redundant, and thus results in larger document
      sizes.

      For those reasons, presentational markup has been removed from HTML in this version. This
      change should not come as a surprise; HTML4 deprecated presentational markup many years ago
      and provided a mode (HTML4 Transitional) to help authors move away from presentational markup;
      later, XHTML 1.1 went further and obsoleted those features altogether.

      The only remaining presentational markup features in HTML are the <code>style</code> attribute
      and the <{style}> element. Use of the <code>style</code> attribute is somewhat discouraged in
      production environments, but it can be useful for rapid prototyping (where its rules can be
      directly moved into a separate style sheet later) and for providing specific styles in unusual
      cases where a separate style sheet would be inconvenient. Similarly, the <{style}> element can
      be useful in syndication or for page-specific styles, but in general an external style sheet
      is likely to be more convenient when the styles apply to multiple pages.

      It is also worth noting that some elements that were previously presentational have been
      redefined in this specification to be media-independent: <{b}>, <{i}>, <{hr}>, <{s}>,
      <{small}>, and <{u}>.

<h4 id="syntax-errors">Syntax errors</h4>

  <em>This section is non-normative.</em>

  The syntax of HTML is constrained to avoid a wide variety of problems.

  : Unintuitive error-handling behavior
  :: Certain invalid syntax constructs, when parsed, result in DOM trees that are highly
      unintuitive.

      <div class="example">
        For example, the following markup fragment results in a DOM with an <{hr}> element that is
        an <em>earlier</em> sibling of the corresponding <{table}> element:

        <pre class="bad" highlight="html">&lt;table>&lt;hr>...</pre>
      </div>

  : Errors with optional error recovery
  :: To allow user agents to be used in controlled environments without having to implement the more
      bizarre and convoluted error handling rules, user agents are permitted to fail whenever
      encountering a <a>parse error</a>.

  : Errors where the error-handling behavior is not compatible with streaming user agents
  :: Some error-handling behavior, such as the behavior for the <code>&lt;table>&lt;hr>...</code>
      example mentioned above, are incompatible with streaming user agents (user agents that process
      HTML files in one pass, without storing state). To avoid interoperability problems with such
      user agents, any syntax resulting in such behavior is considered invalid.

  : Errors that can result in infoset coercion
  :: When a user agent based on XML is connected to an HTML parser, it is possible that certain
      invariants that XML enforces, such as comments never containing two consecutive hyphens, will
      be violated by an HTML file. Handling this can require that the parser coerce the HTML DOM
      into an XML-compatible infoset. Most syntax constructs that require such handling are
      considered invalid.

  : Errors that result in disproportionally poor performance
  :: Certain syntax constructs can result in disproportionally poor performance. To discourage the
      use of such constructs, they are typically made non-conforming.

      <div class="example">
        For example, the following markup results in poor performance, since all the unclosed <{i}>
        elements have to be reconstructed in each paragraph, resulting in progressively more
        elements in each paragraph:

        <pre class="bad" highlight="html">
          &lt;p>&lt;i>He dreamt.
          &lt;p>&lt;i>He dreamt that he ate breakfast.
          &lt;p>&lt;i>Then lunch.
          &lt;p>&lt;i>And finally dinner.
        </pre>

        The resulting DOM for this fragment would be:

        <ul class="domTree">
          <li class="t1">
            <code>p</code>
            <ul>
              <li class="t1">
                <code>i</code>
                <ul>
                  <li class="t3"><code>#text</code>: <span>He dreamt.</span></li>
                </ul>
              </li>
            </ul>
          </li>
          <li class="t1">
            <code>p</code>
            <ul>
              <li class="t1">
                <code>i</code>
                <ul>
                  <li class="t1">
                    <code>i</code>
                    <ul>
                      <li class="t3"><code>#text</code>: <span>He dreamt that he ate breakfast.</span></li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li class="t1">
            <code>p</code>
            <ul>
              <li class="t1">
                <code>i</code>
                <ul>
                  <li class="t1">
                    <code>i</code>
                    <ul>
                      <li class="t1">
                        <code>i</code>
                        <ul>
                          <li class="t3"><code>#text</code>: <span>Then lunch.</span></li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li class="t1">
            <code>p</code>
            <ul>
              <li class="t1">
                <code>i</code>
                <ul>
                  <li class="t1">
                    <code>i</code>
                    <ul>
                      <li class="t1">
                        <code>i</code>
                        <ul>
                          <li class="t1">
                            <code>i</code>
                            <ul>
                              <li class="t3"><code>#text</code>: <span>And finally dinner.</span></li>
                            </ul>
                          </li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </div>

  : Errors involving fragile syntax constructs
  :: There are syntax constructs that, for historical reasons, are relatively fragile. To help
      reduce the number of users who accidentally run into such problems, they are made
      non-conforming.

      <div class="example">
        For example, the parsing of certain named character references in attributes happens even
        with the closing semicolon being omitted. It is safe to include an ampersand followed by
        letters that do not form a named character reference, but if the letters are changed to a
        string that <em>does</em> form a named character reference, they will be interpreted as that
        character instead.

        In this fragment, the attribute's value is "<code>?bill&amp;ted</code>":

        <pre class="bad" highlight="html">&lt;a href="?bill&amp;ted">Bill and Ted&lt;/a></pre>

          In the following fragment, however, the attribute's value is actually
          "<code>?art&copy;</code>", <em>not</em> the intended "<code>?art&amp;copy</code>",
          because even without the final semicolon, "<code>&amp;copy</code>" is handled the same
          as "<code>&amp;copy;</code>" and thus gets interpreted as "<code>&copy;</code>":

          <pre class="bad" highlight="html">&lt;a href="?art&amp;copy">Art and Copy&lt;/a></pre>

          To avoid this problem, all named character references are required to end with a
          semicolon, and uses of named character references without a semicolon are flagged as
          errors.

          Thus, the correct way to express the above cases is as follows:

          <pre highlight="html">&lt;a href="?bill&amp;ted">Bill and Ted&lt;/a> &lt;!-- &amp;ted is ok, since it's not a named character reference --></pre>

          <pre highlight="html">&lt;a href="?art&amp;amp;copy">Art and Copy&lt;/a> &lt;!-- the &amp; has to be escaped, since &amp;copy is a named character reference --></pre>
      </div>

  : Errors involving known interoperability problems in legacy user agents
  :: Certain syntax constructs are known to cause especially subtle or serious problems in legacy
      user agents, and are therefore marked as non-conforming to help authors avoid them.

      <p class="example">
        For example, this is why the U+0060 GRAVE ACCENT character (`) is not allowed in unquoted
        attributes. In certain legacy user agents, it is sometimes treated as a quote character.
      </p>

      <p class="example">
        Another example of this is the DOCTYPE, which is required to trigger <a>no-quirks mode</a>,
        because the behavior of legacy user agents in <a>quirks mode</a> is often largely
        undocumented.
      </p>

  : Errors that risk exposing authors to security attacks
  :: Certain restrictions exist purely to avoid known security problems.

      <p class="example">
        For example, the restriction on using UTF-7 exists purely to avoid authors falling prey to a
        known cross-site-scripting attack using UTF-7. [[RFC2152]]
      </p>

  : Cases where the author's intent is unclear
  :: Markup where the author's intent is very unclear is often made non-conforming. Correcting these
      errors early makes later maintenance easier.

      <div class="example">
        For example, it is unclear whether the author intended the following to be an {{h1}} heading
        or an {{h2}} heading:

        <pre class="bad" highlight="html">&lt;h2>Contact details&lt;/h2></pre>
      </div>

  : Cases that are likely to be typos
  :: When a user makes a simple typo, it is helpful if the error can be caught early, as this can
      save the author a lot of debugging time. This specification therefore usually considers it
      an error to use element names, attribute names, and so forth, that do not match the names
      defined in this specification.

      <p class="example">
        For example, if the author typed <code>&lt;capton></code> instead of
        <code>&lt;caption></code>, this would be flagged as an error and the author could correct
        the typo immediately.
      </p>

  : Errors that could interfere with new syntax in the future
  :: In order to allow the language syntax to be extended in the future, certain otherwise
      harmless features are disallowed.

      <p class="example">
        For example, "attributes" in end tags are ignored currently, but they are invalid, in case a
        future change to the language makes use of that syntax feature without conflicting with
        already-deployed (and valid!) content.
      </p>

  Some authors find it helpful to be in the practice of always quoting all attributes and always
  including all optional tags, preferring the consistency derived from such custom over the minor
  benefits of terseness afforded by making use of the flexibility of the HTML syntax. To aid such
  authors, conformance checkers can provide modes of operation wherein such conventions are
  enforced.

<h4 id="restrictions-on-content-models-and-on-attribute-values">
  Restrictions on content models and on attribute values
</h4>

  <em>This section is non-normative.</em>

  Beyond the syntax of the language, this specification also places restrictions on how elements
  and attributes can be specified. These restrictions are present for similar reasons:

  : Errors involving content with dubious semantics
  :: To avoid misuse of elements with defined meanings, content models are defined that restrict
      how elements can be nested when such nestings would be of dubious value.

      <p class="example">
        For example, this specification disallows nesting a <{section}> element inside
        a <{kbd}> element, since it is highly unlikely for an author to indicate that
        an entire section should be keyed in.
      </p>

  : Errors that involve a conflict in expressed semantics
  :: Similarly, to draw the author's attention to mistakes in the use of elements, clear
      contradictions in the semantics expressed are also considered conformance errors.

      <div class="example">
        In the fragments below, for example, the semantics are nonsensical: a separator cannot
        simultaneously be a cell, nor can a radio button be a progress bar.

        <pre class="bad" highlight="html">&lt;hr role="cell"></pre>
        <pre class="bad" highlight="html">&lt;input type=radio role=progressbar></pre>
      </div>

      <p class="example">
        Another example is the restrictions on the content models of the <{ul}> element, which only
        allows <{li}> element children. Lists by definition consist just of zero or more list items,
        so if a <{ul}> element contains something other than an <{li}> element, it's not clear what
        was meant.
      </p>

  : Cases where the default styles are likely to lead to confusion
  :: Certain elements have default styles or behaviors that make certain combinations likely to
      lead to confusion. Where these have equivalent alternatives without this problem, the
      confusing combinations are disallowed.

      <p class="example">
        For example, <{div}> elements are rendered as block boxes, and <{span}> elements as inline
        boxes. Putting a block box in an inline box is unnecessarily confusing; since either nesting
        just <{div}> elements, or nesting just <{span}> elements, or nesting <{span}> elements
        inside <{div}> elements all serve the same purpose as nesting a <{div}> element in a
        <{span}> element, but only the latter involves a block box in an inline box, the latter
        combination is disallowed.
      </p>

      <p class="example">
        Another example would be the way <a>interactive content</a> cannot be nested. For example, a
        <{button}> element cannot contain a <{textarea}> element. This is because the default
        behavior of such nesting interactive elements would be highly confusing to users. Instead of
        nesting these elements, they can be placed side by side.
      </p>

  : Errors that indicate a likely misunderstanding of the specification
  :: Sometimes, something is disallowed because allowing it would likely cause author confusion.

      <p class="example">
        For example, setting the <code>disabled</code> attribute to the value "<code>false</code>"
        is disallowed, because despite the appearance of meaning that the element is enabled, it in
        fact means that the element is <em>disabled</em> (what matters for implementations is the
        presence of the attribute, not its value).
      </p>

  : Errors involving limits that have been imposed merely to simplify the language
  :: Some conformance errors simplify the language that authors need to learn.

      <p class="example">
        For example, the <{area}> element's <{area/shape}> attribute, despite accepting both
        <code>circ</code> and <code>circle</code> values in practice as synonyms, disallows the use
        of the <code>circ</code> value, so as to simplify tutorials and other learning aids. There
        would be no benefit to allowing both, but it would cause extra confusion when teaching the
        language.
      </p>

  : Errors that involve peculiarities of the parser
  :: Certain elements are parsed in somewhat eccentric ways (typically for historical reasons),
      and their content model restrictions are intended to avoid exposing the author to these
      issues.

      <div class="example">
        For example, a <{form}> element isn't allowed inside <a>phrasing content</a>, because when
        parsed as HTML, a <{form}> element's start tag will imply a <{p}> element's end tag. Thus,
        the following markup results in two paragraphs, not one:

        <pre highlight="html">&lt;p>Welcome. &lt;form>&lt;label>Name:&lt;/label> &lt;input>&lt;/form></pre>

        It is parsed exactly like the following:

        <pre highlight="html">&lt;p>Welcome. &lt;/p>&lt;form>&lt;label>Name:&lt;/label> &lt;input>&lt;/form></pre>
      </div>

  : Errors that would likely result in scripts failing in hard-to-debug ways
  :: Some errors are intended to help prevent script problems that would be hard to debug.

      <p class="example">
        This is why, for instance, it is non-conforming to have two <code>id</code> attributes with
        the same value. Duplicate IDs lead to the wrong element being selected, with sometimes
        disastrous effects whose cause is hard to determine.
      </p>

  : Errors that waste authoring time
  :: Some constructs are disallowed because historically they have been the cause of a lot of
      wasted authoring time, and by encouraging authors to avoid making them, authors can save time
      in future efforts.

      <p class="example">
        For example, a <{script> element's <{script/src}> attribute causes the element's contents to
        be ignored. However, this isn't obvious, especially if the element's contents appear to be
        executable script &mdash; which can lead to authors spending a lot of time trying to debug
        the inline script without realizing that it is not executing. To reduce this problem, this
        specification makes it non-conforming to have executable script in a <{script}> element when
        the <{script/src}> attribute is present. This means that authors who are validating their
        documents are less likely to waste time with this kind of mistake.
      </p>

  : Errors that involve areas that affect authors migrating to and from XHTML
  :: Some authors like to write files that can be interpreted as both XML and HTML with similar
      results. Though this practice is discouraged in general due to the myriad of subtle
      complications involved (especially when involving scripting, styling, or any kind of automated
      serialization), this specification has a few restrictions intended to at least somewhat
      mitigate the difficulties. This makes it easier for authors to use this as a transitionary
      step when migrating between HTML and XHTML.

      <p class="example">
        For example, there are somewhat complicated rules surrounding the <code>lang</code> and
        <code>xml:lang</code> attributes intended to keep the two synchronized.
      </p>

      <p class="example">
        Another example would be the restrictions on the values of <code>xmlns</code> attributes
        in the HTML serialization, which are intended to ensure that elements in conforming
        documents end up in the same namespaces whether processed as HTML or XML.
      </p>

  : Errors that involve areas reserved for future expansion
  :: As with the restrictions on the syntax intended to allow for new syntax in future revisions
      of the language, some restrictions on the content models of elements and values of attributes
      are intended to allow for future expansion of the HTML vocabulary.

      <p class="example">
        For example, limiting the values of the <code>target</code> attribute that start with an
        U+005F LOW LINE character (_) to only specific predefined values allows new predefined
        values to be introduced at a future time without conflicting with author-defined values.
      </p>

  : Errors that indicate a mis-use of other specifications
  :: Certain restrictions are intended to support the restrictions made by other specifications.

      <p class="example">
        For example, requiring that attributes that take media query lists use only <em>valid</em>
        media query lists reinforces the importance of following the conformance rules of that
        specification.
      </p>

<h3 id="suggested-reading">Suggested reading</h3>

  <em>This section is non-normative.</em>

  The following documents might be of interest to readers of this specification.

  : <cite>Character Model for the World Wide Web 1.0: Fundamentals</cite> [[!CHARMOD]]
  :: <blockquote>
        This Architectural Specification provides authors of specifications, software developers,
        and content developers with a common reference for interoperable text manipulation on the
        World Wide Web, building on the Universal Character Set, defined jointly by the Unicode
        Standard and ISO/IEC 10646. Topics addressed include use of the terms '''character''',
        '''encoding''' and '''string''', a reference processing model, choice and identification of
        character encodings, character escaping, and string indexing.
      </blockquote>

  : <cite>Unicode Security Considerations</cite> [[!UNICODE-SECURITY]]
  :: <blockquote>
        Because Unicode contains such a large number of characters and incorporates the varied
        writing systems of the world, incorrect usage can expose programs or systems to possible
        security attacks. This is especially important as more and more products are
        internationalized. This document describes some of the security considerations that
        programmers, system analysts, standards developers, and users should take into account, and
        provides specific recommendations to reduce the risk of problems.
      </blockquote>

  : <cite>Web Content Accessibility Guidelines (WCAG) 2.0</cite> [[!WCAG]]
  :: <blockquote>
        Web Content Accessibility Guidelines (WCAG) 2.0 covers a wide range of recommendations for
        making Web content more accessible. Following these guidelines will make content accessible
        to a wider range of people with disabilities, including blindness and low vision, deafness
        and hearing loss, learning disabilities, cognitive limitations, limited movement, speech
        disabilities, photosensitivity and combinations of these. Following these guidelines will
        also often make your Web content more usable to users in general.
      </blockquote>

  : <cite>Authoring Tool Accessibility Guidelines (ATAG) 2.0</cite> [[!ATAG20]]
  :: <blockquote>
        This specification provides guidelines for designing Web content authoring tools that are
        more accessible for people with disabilities. An authoring tool that conforms to these
        guidelines will promote accessibility by providing an accessible user interface to authors
        with disabilities as well as by enabling, supporting, and promoting the production of
        accessible Web content by all authors.
      </blockquote>

  : <cite>User Agent Accessibility Guidelines (UAAG) 2.0</cite> [[!UAAG20]]
  :: <blockquote>
        This document provides guidelines for designing user agents that lower barriers to Web
        accessibility for people with disabilities. User agents include browsers and other types of
        software that retrieve and render Web content. A user agent that conforms to these
        guidelines will promote accessibility through its own user interface and through other
        internal facilities, including its ability to communicate with other technologies
        (especially assistive technologies). Furthermore, all users, not just users with
        disabilities, should find conforming user agents to be more usable.
      </blockquote>

  : <cite>Polyglot Markup: HTML-Compatible XHTML Documents</cite> [[!HTML-POLYGLOT]]
  :: <blockquote>
        A document that uses polyglot markup is a document that is a stream of bytes that parses
        into identical document trees (with the exception of the xmlns attribute on the root
        element) when processed as HTML and when processed as XML. Polyglot markup that meets a
        well defined set of constraints is interpreted as compatible, regardless of whether they are
        processed as HTML or as XHTML, per the HTML5 specification. Polyglot markup uses a specific
        DOCTYPE, namespace declarations, and a specific case &mdash; normally lower case but
        occasionally camel case &mdash; for element and attribute names. Polyglot markup uses lower
        case for certain attribute values. Further constraints include those on empty elements,
        named entity references, and the use of scripts and style.
      </blockquote>

  : <cite>HTML to Platform Accessibility APIs Implementation Guide</cite> [[!HTML-AAPI]]
  :: <blockquote>
        This is draft documentation mapping HTML elements and attributes to accessibility API Roles,
        States and Properties on a variety of platforms. It provides recommendations on deriving the
        accessible names and descriptions for HTML elements. It also provides accessible feature
        implementation examples.
      </blockquote>

<hr />
<hr />
<hr />

<h2 id="infrastructure">Common infrastructure</h2>

  <h3 id="terminology">Terminology</h3>

  This specification refers to both HTML and XML attributes and IDL attributes, often in the same
  context. When it is not clear which is being referred to, they are referred to as
  <dfn>content attributes</dfn> for HTML and XML attributes, and <dfn>IDL attributes</dfn> for those
  defined on IDL interfaces. Similarly, the term "properties" is used for both JavaScript object
  properties and CSS properties. When these are ambiguous they are qualified as
  <dfn>object properties</dfn> and <dfn>CSS properties</dfn> respectively.

  Generally, when the specification states that a feature applies to <a>the HTML syntax</a> or
  <a>the XHTML syntax</a>, it also includes the other. When a feature specifically only applies to
  one of the two languages, it is called out by explicitly stating that it does not apply to the
  other format, as in "for HTML, ... (this does not apply to XHTML)".

  This specification uses the term <dfn>document</dfn> to refer to any use of HTML, ranging from
  short static documents to long essays or reports with rich multimedia, as well as to fully-fledged
  interactive applications. The term is used to refer both to <{Document}> objects and
  their descendant DOM trees, and to serialized byte streams using the <a>HTML syntax</a> or
  <a>XHTML syntax</a>, depending on context.

  In the context of the DOM structures, the terms <a>HTML document</a> and <a>XML document</a> are
  used as defined in the DOM specification, and refer specifically to two different modes that
  <{Document}> objects can find themselves in. [[!DOM]] (Such uses are always hyperlinked
  to their definition.)

  In the context of byte streams, the term HTML document refers to resources labeled as
  <code>text/html</code>, and the term XML document refers to resources labeled with an
  <a>XML MIME type</a>.

  The term <dfn>XHTML document</dfn> is used to refer to both <{Document}>s in the
  <a>XML document</a> mode that contains element nodes in the <a>HTML namespace</a>, and byte
  streams labeled with an <a>XML MIME type</a> that contain elements from the <a>HTML namespace</a>,
  depending on context.

  <hr />

  For simplicity, terms such as <dfn>shown</dfn>, <dfn>displayed</dfn>, and <dfn>visible</dfn> might
  sometimes be used when referring to the way a document is rendered to the user. These terms are
  not meant to imply a visual medium; they must be considered to apply to other media in equivalent
  ways.

  <div class="impl">
    When an algorithm B says to return to another algorithm A, it implies that A called B. Upon
    returning to A, the implementation must continue from where it left off in calling B. Some
    algorithms run <dfn>in parallel</dfn>; this means that the algorithm's subsequent steps are to
    be run, one after another, at the same time as other logic in the specification (e.g. at the
    same time as the <a>event loop</a>). This specification does not define the precise mechanism by
    which this is achieved, be it time-sharing cooperative multitasking, fibers, threads, processes,
    using different hyperthreads, cores, CPUs, machines, etc. By contrast, an operation that is to
    run <dfn>immediately</dfn> must interrupt the currently running task, run itself, and then
    resume the previously running task.
  </div>

  The term "transparent black" refers to the color with red, green, blue, and alpha channels all set
  to zero.

<h4 id="resources">Resources</h4>

  The specification uses the term <dfn>supported</dfn> when referring to whether a user agent has an
  implementation capable of decoding the semantics of an external resource. A format or type is said
  to be <i>supported</i> if the implementation can process an external resource of that format or
  type without critical aspects of the resource being ignored. Whether a specific resource is
  <i>supported</i> can depend on what features of the resource's format are in use.

  <p class="example">
    For example, a PNG image would be considered to be in a supported format if its pixel data could
    be decoded and rendered, even if, unbeknownst to the implementation, the image also contained
    animation data.
  </p>

  <p class="example">
    An MPEG-4 video file would not be considered to be in a supported format if the compression
    format used was not supported, even if the implementation could determine the dimensions of the
    movie from the file's metadata.
  </p>

  What some specifications, in particular the HTTP specification, refer to as a
  <i>representation</i> is referred to in this specification as a <dfn>resource</dfn>. [[!HTTP11]]

  The term <dfn>MIME type</dfn> is used to refer to what is sometimes called an <i>Internet media
  type</i> in protocol literature. The term <i>media type</i> in this specification is used to refer
  to the type of media intended for presentation, as used by the CSS specifications. [[!RFC2046]]
  [[!MEDIAQ]]

  A string is a <dfn>valid MIME type</dfn> if it matches the <code>media-type</code> rule defined in
  section 3.7 "Media Types" of RFC 2616. In particular, a <a>valid MIME type</a> may include
  MIME type parameters. [[!HTTP11]]

  A string is a <dfn>valid MIME type with no parameters</dfn> if it matches the
  <code>media-type</code> rule defined in section 3.7 "Media Types" of RFC 2616, but does not
  contain any U+003B SEMICOLON characters (;). In other words, if it consists only of a type and
  subtype, with no MIME Type parameters. [[!HTTP11]]

  The term <dfn>HTML MIME type</dfn> is used to refer to the <a>MIME type</a>
  <code>text/html</code>.

  A resource's <dfn>critical subresources</dfn> are those that the resource needs to have available
  to be correctly processed. Which resources are considered critical or not is defined by the
  specification that defines the resource's format.

  The term <dfn><code>data:</code> URL</dfn> refers to <a>URLs</a> that use the <code>data:</code>
  scheme. [[!RFC2397]]

<h4 id="xml">XML</h4>

  To ease migration from HTML to XHTML, UAs conforming to this specification will place elements in
  HTML in the <code>http://www.w3.org/1999/xhtml</code> namespace, at least for the purposes of the
  DOM and CSS. The term "<dfn>HTML elements</dfn>", when used in this specification, refers to any
  element in that namespace, and thus refers to both HTML and XHTML elements.

  Except where otherwise stated, all elements defined or mentioned in this specification are in the
  <a>HTML namespace</a> ("<code>http://www.w3.org/1999/xhtml</code>"), and all attributes defined or
  mentioned in this specification have no namespace.

  The term <dfn>element type</dfn> is used to refer to the set of elements that have a given local
  name and namespace. For example, <code>button</code> elements are elements with the element type
  <code>button</code>, meaning they have the local name "<code>button</code>" and (implicitly as
  defined above) the <a>HTML namespace</a>.

  Attribute names are said to be <dfn>XML-compatible</dfn> if they match the
  <a><code>Name</code></a> production defined in XML and they contain no U+003A COLON characters
  (:). [[!XML]]

  The term <dfn>XML MIME type</dfn> is used to refer to the <a>MIME types</a> <code>text/xml</code>,
  <code>application/xml</code>, and any <a>MIME type</a> whose subtype ends with the four characters
  "<code>+xml</code>". [[!RFC7303]]

<h4 id="dom-trees">DOM trees</h4>

  The <dfn>root element of a <{Document}> object</dfn> is that <{Document}>'s
  first element child, if any. If it does not have one then the <{Document}> has no root
  element.

  The term <dfn>root element</dfn>, when not referring to a <{Document}> object's root
  element, means the furthest ancestor element node of whatever node is being discussed, or the node
  itself if it has no ancestors. When the node is a part of the document, then the node's
  <a>root element</a> is indeed the document's root element; however, if the node is not currently
  part of the document tree, the root element will be an orphaned node.

  When an element's <a>root element</a> is the <a>root element of a <code>Document</code> object</a>,
  it is said to be <dfn>in a <{Document}></dfn>. An element is said to have been
  <dfn>inserted into a document</dfn> when its <a>root element</a> changes and is now the document's
  <a>root element</a>. Analogously, an element is said to have been
  <dfn>removed from a document</dfn> when its <a>root element</a> changes from being the document's
  <a>root element</a> to being another element.

  A node's <dfn>home subtree</dfn> is the subtree rooted at that node's <a>root element</a>. When a
  node is <a>in a <{Document}></a>, its <a>home subtree</a> is that <{Document}>'s tree.

  The <{Document}> of a <code>Node</code> (such as an element) is the <{Document}>
  that the <code>Node</code>'s <code>ownerDocument</code> IDL attribute returns. When a
  <code>Node</code> is <a>in a <{Document}></a> then that <{Document}> is
  always the <code>Node</code>'s <{Document}>, and the <code>Node</code>'s
  <code>ownerDocument</code> IDL attribute thus always returns that <{Document}>.

  The <{Document}> of a content attribute is the <{Document}> of the attribute's
  element.

  The term <dfn>tree order</dfn> means a pre-order, depth-first traversal of DOM nodes involved
  (through the <code>parentNode</code>/<code>childNodes</code> relationship).

  When it is stated that some element or attribute is <dfn>ignored</dfn>, or treated as some other
  value, or handled as if it was something else, this refers only to the processing of the node
  after it is in the DOM. <span class="impl">A user agent must not mutate the DOM in such
  situations.</span>

  A content attribute is said to <dfn>change</dfn> value only if its new value is different than its
  previous value; setting an attribute to a value it already has does not change it.

  The term <dfn>empty</dfn>, when used of an attribute value, <code>Text</code> node, or string,
  means that the length of the text is zero (i.e. not even containing spaces or
  <a>control characters</a>).

  A <dfn>node <var>A</var> is inserted</dfn> into a node <var>B</var> when the
  <a>insertion steps</a> are invoked with <var>A</var> as the argument and <var>A</var>'s new parent
  is <var>B</var>. Similarly, a <dfn>node <var>A</var> is removed</dfn> from a node <var>B</var>
  when the <a>removing steps</a> are invoked with <var>A</var> as the <var>removedNode</var>
  argument and <var>B</var> as the <var>oldParent</var> argument.

<h4 id="scripting">Scripting</h4>

  The construction "a <code>Foo</code> object", where <code>Foo</code> is actually an interface,
  is sometimes used instead of the more accurate "an object implementing the interface
  <code>Foo</code>".

  An IDL attribute is said to be <dfn>getting</dfn> when its value is being retrieved
  (e.g. by author script), and is said to be <dfn>setting</dfn> when a new value is
  assigned to it.

  If a DOM object is said to be <dfn>live</dfn>, then the attributes and methods on that object
  <span class="impl">must</span> operate on the actual underlying data, not a snapshot of the
  data.

  In the contexts of events, the terms <i>fire</i> and <i>dispatch</i> are used as defined in the
  DOM specification: <dfn>firing</dfn> an event means to create and <a>dispatch</a> it, and
  <dfn>dispatching</dfn> an event means to follow the steps that propagate the event through the
  tree. The term <dfn>trusted event</dfn> is used to refer to events whose <code>isTrusted</code>
  attribute is initialized to true. [[!DOM]]

<h4 id="plugin-content-handlers"><code>Plugin</code> Content Handlers</h4>

  The term <dfn>plugin</dfn> refers to a user-agent defined set of content handlers used by the user
  agent that can take part in the user agent's rendering of a <{Document}> object, but that
  neither act as <a>child browsing contexts</a> of the <{Document}> nor introduce any
  <code>Node</code> objects to the <{Document}>'s DOM.

  Typically such content handlers are provided by third parties, though a user agent can also
  designate built-in content handlers as plugins.

  <div class="impl">
    A user agent must not consider the types <code>text/plain</code> and
    <code>application/octet-stream</code> as having a registered <a>plugin</a>.
  </div>

  <p class="example">
    One example of a plugin would be a PDF viewer that is instantiated in a
    <a>browsing context</a> when the user navigates to a PDF file. This would count as a
    plugin regardless of whether the party that implemented the PDF viewer component was the same as
    that which implemented the user agent itself. However, a PDF viewer application that launches
    separate from the user agent (as opposed to using the same interface) is not a plugin by this
    definition.
  </p>

  <p class="note">
    This specification does not define a mechanism for interacting with plugins, as it is expected
    to be user-agent- and platform-specific. Some UAs might opt to support a plugin mechanism such
    as the Netscape Plugin API; others might use remote content converters or have built-in support
    for certain types. Indeed, this specification doesn't require user agents to support plugins at
    all. [[!NPAPI]]
  </p>

  A plugin can be <dfn>secured</dfn> if it honors the semantics of the <code>sandbox</code>
  attribute.

  <p class="example">
    For example, a secured plugin would prevent its contents from creating pop-up windows when the
    plugin is instantiated inside a sandboxed <code>iframe</code>.
  </p>

  <div class="impl">
    <p class="warning">
      Browsers should take extreme care when interacting with external content intended for
      <a>plugins</a>. When third-party software is run with the same privileges as the user agent
      itself, vulnerabilities in the third-party software become as dangerous as those in the user
      agent.
    </p>

    Since different users having differents sets of <a>plugins</a> provides a fingerprinting vector
    that increases the chances of users being uniquely identified, user agents are encouraged to
    support the exact same set of <a>plugins</a> for each user.
    <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>
  </div>

<h4 id="encoding-terminology">Character encodings</h4>

  A <dfn>character encoding</dfn>, or just <i>encoding</i> where that is not ambiguous, is a defined
  way to convert between byte streams and Unicode strings, as defined in the Encoding standard. An
  <a>encoding</a> has an <dfn>encoding name</dfn> and one or more <dfn>encoding labels</dfn>,
  referred to as the encoding's <i>name</i> and <i>labels</i> in the Encoding standard.
  [[!ENCODING]]

  An <dfn>ASCII-compatible character encoding</dfn> is a single-byte or variable-length
  <a>encoding</a> in which the bytes 0x09, 0x0A, 0x0C, 0x0D, 0x20 - 0x22, 0x26, 0x27, 0x2C - 0x3F,
  0x41 - 0x5A, and 0x61 - 0x7A, ignoring bytes that are the second and later bytes of multibyte
  sequences, all correspond to single-byte sequences that map to the same Unicode characters as
  those bytes in Windows-1252. [[!ENCODING]]

  <p class="note">
    This includes such encodings as Shift_JIS, HZ-GB-2312, and variants of ISO-2022, even though it
    is possible in these encodings for bytes like 0x70 to be part of longer sequences that are
    unrelated to their interpretation as ASCII. It excludes UTF-16 variants, as well as obsolete
    legacy encodings such as UTF-7, GSM03.38, and EBCDIC variants.
  </p>

  The term <dfn>a UTF-16 encoding</dfn> refers to any variant of UTF-16: UTF-16LE or UTF-16BE,
  regardless of the presence or absence of a BOM. [[!ENCODING]]

  The term <dfn>code unit</dfn> is used as defined in the Web IDL specification: a 16 bit
  unsigned integer, the smallest atomic component of a <code>DOMString</code>. (This is a narrower
  definition than the one used in Unicode, and is not the same as a <i>code point</i>.) [[!WEBIDL]]

  The term <dfn>Unicode code point</dfn> means a <i>Unicode scalar value</i> where possible, and an
  isolated surrogate code point when not. When a conformance requirement is defined in terms of
  characters or Unicode code points, a pair of <a>code units</a> consisting of a high surrogate
  followed by a low surrogate must be treated as the single code point represented by the surrogate
  pair, but isolated surrogates must each be treated as the single code point with the value of the
  surrogate. [[!UNICODE]

  In this specification, the term <dfn>character</dfn>, when not qualified as <em>Unicode</em>
  character, is synonymous with the term <a>Unicode code point</a>.

  The term <dfn>Unicode character</dfn> is used to mean a <i>Unicode scalar value</i> (i.e. any
  Unicode code point that is not a surrogate code point). [[!UNICODE]]

  The <dfn>code-unit length</dfn> of a string is the number of <a>code units</a> in that string.

  <p class="note">
    This complexity results from the historical decision to define the DOM API in terms of 16 bit
    (UTF-16) <a>code units</a>, rather than in terms of <a>Unicode characters</a>.
  </p>

<h3 id="conformance-requirements">Conformance requirements</h3>

  All diagrams, examples, and notes in this specification are non-normative, as are all sections
  explicitly marked non-normative. Everything else in this specification is normative.

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
  "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this document
  are to be interpreted as described in RFC2119. The key word "OPTIONALLY" in the normative parts of
  this document is to be interpreted with the same normative meaning as "MAY" and "OPTIONAL". For
  readability, these words do not appear in all uppercase letters in this specification.
  [[!RFC2119]]

  <div class="impl">
    Requirements phrased in the imperative as part of algorithms (such as "strip any leading space
    characters" or "return false and abort these steps") are to be interpreted with the meaning of
    the key word ("must", "should", "may", etc) used in introducing the algorithm.

    <div class="example">
      For example, were the spec to say:

      <pre>
        To eat an orange, the user must:
        1. Peel the orange.
        2. Separate each slice of the orange.
        3. Eat the orange slices.
      </pre>

      ...it would be equivalent to the following:

      <pre>
        To eat an orange:
        1. The user must peel the orange.
        2. The user must separate each slice of the orange.
        3. The user must eat the orange slices.
      </pre>

      Here the key word is "must".

      The former (imperative) style is generally preferred in this specification for stylistic
      reasons.
    </div>

    Conformance requirements phrased as algorithms or specific steps may be implemented in any
    manner, so long as the end result is equivalent. (In particular, the algorithms defined in this
    specification are intended to be easy to follow, and not intended to be performant.)
  </div>

<div class="impl">
  <h4 id="conformance-classes">Conformance classes</h4>

  This specification describes the conformance criteria for <span class="impl">user agents (relevant
  to implementors) and</span> documents<span class="impl"> (relevant to authors and authoring tool
  implementors)</span>.

  <dfn>Conforming documents</dfn> are those that comply with all the conformance criteria for
  documents. For readability, some of these conformance requirements are phrased as conformance
  requirements on authors; such requirements are implicitly requirements on documents: by
  definition, all documents are assumed to have had an author. (In some cases, that author may
  itself be a user agent &mdash; such user agents are subject to additional rules, as explained
  below.)

  <p class="example">
    For example, if a requirement states that "authors must not use the <code>foobar</code>
    element", it would imply that documents are not allowed to contain elements named
    <code>foobar</code>.
  </p>

  <p class="note impl">
    There is no implied relationship between document conformance requirements and implementation
    conformance requirements. User agents are not free to handle non-conformant documents as they
    please; the processing model described in this specification applies to implementations
    regardless of the conformity of the input documents.
  </p>

  User agents fall into several (overlapping) categories with different conformance requirements.

  : Web browsers and other interactive user agents
  :: Web browsers that support <a>the XHTML syntax</a> must process elements and attributes from the
      <a>HTML namespace</a> found in XML documents as described in this specification, so that users
      can interact with them, unless the semantics of those elements have been overridden by other
      specifications.

      <p class="example">
        A conforming XHTML processor would, upon finding an XHTML <code>script</code> element in an
        XML document, execute the script contained in that element. However, if the element is found
        within a transformation expressed in XSLT (assuming the user agent also supports XSLT), then
        the processor would instead treat the <code>script</code> element as an opaque element that
        forms part of the transform.
      </p>

      Web browsers that support <a>the HTML syntax</a> must process documents labeled with an
      <a>HTML MIME type</a> as described in this specification, so that users can interact with
      them.

      User agents that support scripting must also be conforming implementations of the IDL
      fragments in this specification, as described in the Web IDL specification. [[!WEBIDL]]

      <p class="note">
        Unless explicitly stated, specifications that override the semantics of HTML elements do not
        override the requirements on DOM objects representing those elements. For example, the
        <code>script</code> element in the example above would still implement the
        <code>HTMLScriptElement</code> interface.
      </p>

  : Non-interactive presentation user agents
  :: User agents that process HTML and XHTML documents purely to render non-interactive versions
      of them must comply to the same conformance criteria as Web browsers, except that they are
      exempt from requirements regarding user interaction.

      <p class="note">
        Typical examples of non-interactive presentation user agents are printers (static UAs) and
        overhead displays (dynamic UAs). It is expected that most static non-interactive
        presentation user agents will also opt to <a>lack scripting support</a>.
      </p>

      <p class="example">
        A non-interactive but dynamic presentation UA would still execute scripts, allowing forms
        to be dynamically submitted, and so forth. However, since the concept of "focus" is
        irrelevant when the user cannot interact with the document, the UA would not need to support
        any of the focus-related DOM APIs.
      </p>

  : Visual user agents that support the suggested default rendering
  :: User agents, whether interactive or not, may be designated (possibly as a user option) as
      supporting the suggested default rendering defined by this specification.

      This is not required. In particular, even user agents that do implement the suggested default
      rendering are encouraged to offer settings that override this default to improve the
      experience for the user, e.g. changing the color contrast, using different focus styles, or
      otherwise making the experience more accessible and usable to the user.

      User agents that are designated as supporting the suggested default rendering must, while so
      designated, implement the rules in <aa>the rendering section</a> that that section defines as
      the behavior that user agents are <em>expected</em> to implement.

    : User agents with no scripting support

    :: Implementations that do not support scripting (or which have their scripting features
        disabled entirely) are exempt from supporting the events and DOM interfaces mentioned in
        this specification. For the parts of this specification that are defined in terms of an
        events model or in terms of the DOM, such user agents must still act as if events and the
        DOM were supported.

        <p class="note">
          Scripting can form an integral part of an application. Web browsers that do not support
          scripting, or that have scripting disabled, might be unable to fully convey the author's
          intent.
        </p>

  : Conformance checkers
  :: Conformance checkers must verify that a document conforms to the applicable conformance
      criteria described in this specification. Automated conformance checkers are exempt from
      detecting errors that require interpretation of the author's intent (for example, while a
      document is non-conforming if the content of a <code>blockquote</code> element is not a quote,
      conformance checkers running without the input of human judgement do not have to check that
      <code>blockquote</code> elements only contain quoted material).

      Conformance checkers must check that the input document conforms when parsed without a
      <a>browsing context</a> (meaning that no scripts are run, and that the parser's
      <a>scripting flag</a> is disabled), and should also check that the input document conforms
      when parsed with a <a>browsing context</a> in which scripts execute, and that the scripts
      never cause non-conforming states to occur other than transiently during script execution
      itself. (This is only a "SHOULD" and not a "MUST" requirement because it has been proven to be
      impossible. [[COMPUTABLE]])

      The term "HTML validator" can be used to refer to a conformance checker that itself conforms
      to the applicable requirements of this specification.

      <div class="note">
        XML DTDs cannot express all the conformance requirements of this specification. Therefore, a
        validating XML processor and a DTD cannot constitute a conformance checker. Also, since
        neither of the two authoring formats defined in this specification are applications of SGML,
        a validating SGML system cannot constitute a conformance checker either.

        To put it another way, there are three types of conformance criteria:

        1. Criteria that can be expressed in a DTD.
        2. Criteria that cannot be expressed by a DTD, but can still be checked by a machine.
        3. Criteria that can only be checked by a human.

        A conformance checker must check for the first two. A simple DTD-based validator only checks
        for the first class of errors and is therefore not a conforming conformance checker
        according to this specification.
      </div>

  : Data mining tools
  :: Applications and tools that process HTML and XHTML documents for reasons other than to either
      render the documents or check them for conformance should act in accordance with the semantics
      of the documents that they process.

      <p class="example">
        A tool that generates <a>document outlines</a> but increases the nesting level for each
        paragraph and does not increase the nesting level for each section would not be conforming.
      </p>

  : Authoring tools and markup generators
  :: Authoring tools and markup generators must generate <a>conforming documents</a>. Conformance
      criteria that apply to authors also apply to authoring tools, where appropriate.

      Authoring tools are exempt from the strict requirements of using elements only for their
      specified purpose, but only to the extent that authoring tools are not yet able to determine
      author intent. However, authoring tools must not automatically misuse elements or encourage
      their users to do so.

      <p class="example">
        For example, it is not conforming to use an <code>address</code> element for arbitrary
        contact information; that element can only be used for marking up contact information for
        the author of the document or section. However, since an authoring tool is likely unable to
        determine the difference, an authoring tool is exempt from that requirement. This does not
        mean, though, that authoring tools can use <code>address</code> elements for any block of
        italics text (for instance); it just means that the authoring tool doesn't have to verify
        that when the user uses a tool for inserting contact information for a section, that the
        user really is doing that and not inserting something else instead.
      </p>

      <p class="note">
        In terms of conformance checking, an editor has to output documents that conform to the same
        extent that a conformance checker will verify.
      </p>

      When an authoring tool is used to edit a non-conforming document, it may preserve the
      conformance errors in sections of the document that were not edited during the editing session
      (i.e. an editing tool is allowed to round-trip erroneous content). However, an authoring tool
      must not claim that the output is conformant if errors have been so preserved.

      Authoring tools are expected to come in two broad varieties: tools that work from structure
      or semantic data, and tools that work on a What-You-See-Is-What-You-Get media-specific editing
      basis (WYSIWYG).

      The former is the preferred mechanism for tools that author HTML, since the structure in the
      source information can be used to make informed choices regarding which HTML elements and
      attributes are most appropriate.

      However, WYSIWYG tools are legitimate. WYSIWYG tools should use elements they know are
      appropriate, and should not use elements that they do not know to be appropriate. This might
      in certain extreme cases mean limiting the use of flow elements to just a few elements, like
      <{div}>, <{b}>, <{i}>, and <{span}> and making liberal use of the <code>style</code>
      attribute.

      All authoring tools, whether WYSIWYG or not, should make a best effort attempt at enabling
      users to create well-structured, semantically rich, media-independent content.

  User agents may impose implementation-specific limits on otherwise unconstrained inputs, e.g. to
  prevent denial of service attacks, to guard against running out of memory, or to work around
  platform-specific limitations.
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

  For compatibility with existing content and prior specifications, this specification describes
  two authoring formats: one based on XML (referred to as <a>the XHTML syntax</a>), and one using a
  <a>custom format</a> inspired by SGML (referred to as <a>the HTML syntax</a>). Implementations
  must support at least one of these two formats, although supporting both is encouraged.

  Some conformance requirements are phrased as requirements on elements, attributes, methods or
  objects. Such requirements fall into two categories: those describing content model restrictions,
  and those describing implementation behavior. Those in the former category are requirements on
  documents and authoring tools. Those in the second category are requirements on user agents.
  Similarly, some conformance requirements are phrased as requirements on authors; such requirements
  are to be interpreted as conformance requirements on the documents that authors produce. (In other
  words, this specification does not distinguish between conformance criteria on authors and
  conformance criteria on documents.)
</div>

<div class="impl">
  <h4 id="dependencies">Dependencies</h4>

  This specification relies on several other underlying specifications.

  : Unicode and Encoding
  :: The Unicode character set is used to represent textual data, and the Encoding standard defines
      requirements around <a>character encodings</a>. [[!UNICODE]]

      <p class="note">
        This specification <a>introduces terminology</a> based on the terms defined in those
        specifications, as described earlier.
      </p>

      The following terms are used as defined in the Encoding standard: [[!ENCODING]]

      * <dfn>Getting an encoding</dfn>

      * The <dfn>encoder</dfn> and <dfn>decoder</dfn> algorithms for various encodings, including
        the <dfn>UTF-8 encoder</dfn> and <dfn>UTF-8 decoder</dfn>

      * The generic <dfn>decode</dfn> algorithm which takes a byte stream and an encoding and
        returns a character stream

      * The <dfn>UTF-8 decode</dfn> algorithm which takes a byte stream and returns a character
        stream, additionally stripping one leading UTF-8 Byte Order Mark (BOM), if any

      <p class="note">
        The <a>UTF-8 decoder</a> is distinct from the <i>UTF-8 decode algorithm</i>. The latter
        first strips a Byte Order Mark (BOM), if any, and then invokes the former.
      </p>

      For readability, character encodings are sometimes referenced in this specification with a
      case that differs from the canonical case given in the Encoding standard. (For example,
      "UTF-16LE" instead of "utf-16le".)</p>

  : XML and related specifications
  :: Implementations that support <a>the XHTML syntax</a> must support some version of XML, as
      well as its corresponding namespaces specification, because that syntax uses an XML
      serialization with namespaces. [[!XML]] [[!XML-NAMES]]

      The attribute with the tag name <dfn><code>xml:space</code></dfn> in the <a>XML namespace</a>
      is defined by the XML specification. [[!XML]]

      This specification also references the <dfn><code>&lt;?xml-stylesheet?></code></dfn>
      processing instruction, defined in the
      <cite>Associating Style Sheets with XML documents</cite> specification. [[!XML-STYLESHEET]]

      This specification also non-normatively mentions the <dfn><code>XSLTProcessor</code></dfn>
      interface and its <dfn><code>transformToFragment()</code></dfn> and
      <dfn><code>transformToDocument()</code></dfn> methods.

  : URLs
  :: The following terms are defined in the WHATWG URL standard: [[!URL]]

      * <dfn>domain</dfn>
      * <dfn>URL</dfn>
      * <dfn>Origin</dfn> of URLs
      * <dfn>Absolute URL</dfn>
      * <dfn>Relative URL</dfn>
      * <dfn>Relative schemes</dfn>
      * The <dfn>URL parser</dfn> and <dfn>basic URL parser</dfn> as well as these parser states:
        * <dfn>scheme start state</dfn>
        * <dfn>host state</dfn>
        * <dfn>hostname state</dfn>
        * <dfn>port state</dfn>
        * <dfn>path start state</dfn>
        * <dfn>query state</dfn>
        * <dfn>fragment state</dfn>
      * <dfn>Parsed URL</dfn>
      * The <dfn>scheme</dfn> component of a <a>parsed URL</a>
      * The <dfn>scheme data</dfn> component of a <a>parsed URL</a>
      * The <dfn>username</dfn> component of a <a>parsed URL</a>
      * The <dfn>password</dfn> component of a <a>parsed URL</a>
      * The <dfn>host</dfn> component of a <a>parsed URL</a>
      * The <dfn>port</dfn> component of a <a>parsed URL</a>
      * The <dfn>path</dfn> component of a <a>parsed URL</a>
      * The <dfn>query</dfn> component of a <a>parsed URL</a>
      * The <dfn>fragment</dfn> component of a <a>parsed URL</a>
      * <dfn>non-relative flag</dfn>
      * <dfn >Parse errors</dfn> from the <a>URL parser</a>
      * The <dfn >URL serializer</dfn>
      * The <dfn>host serializer</dfn>
      * The <dfn>serialize an integer</dfn>
      * <dfn>Default encode set</dfn>
      * <dfn>Percent encode</dfn>
      * <dfn>UTF-8 percent encode</dfn>
      * <dfn>Percent decode</dfn>
      * <dfn>Decoder error</dfn>
      * <dfn>set the username</dfn>
      * <dfn>set the password</dfn>
      * The <dfn>domain to ASCII</dfn> algorithm
      * The <dfn>domain to Unicode</dfn> algorithm

      A number of schemes and protocols are referenced by this specification also:

      * The <dfn><code>about:</code></dfn> scheme [[!RFC6694]]
      * The <dfn><code>blob:</code></dfn> scheme [[!FILEAPI]]
      * The <dfn><code>data:</code></dfn> scheme [[!RFC2397]]
      * The <dfn><code>http:</code></dfn> scheme [[!HTTP11]]
      * The <dfn><code>https:</code></dfn> scheme [[!HTTP11]]
      * The <dfn><code>mailto:</code></dfn> scheme [[!RFC6068]]
      * The <dfn><code>sms:</code></dfn> scheme [[!RFC5724]]
      * The <dfn><code>urn:</code></dfn> scheme [[!URN]]

  : HTTP and related specifications
  :: The following terms are defined in the HTTP specifications: [[!HTTP11]]

      * <dfn><code>Accept</code></dfn> header
      * <dfn><code>Accept-Language</code></dfn> header
      * <dfn><code>Cache-Control</code></dfn> header
      * <dfn><code>Content-Disposition</code></dfn> header
      * <dfn><code>Content-Language</code></dfn> header
      * <dfn><code>Content-Length</code></dfn> header
      * <dfn><code>Host</code></dfn> header
      * <dfn><code>Last-Modified</code></dfn> header
      * <dfn><code>Referer</code></dfn> header

      The following terms are defined in the Cookie specification: [[!COOKIES]]

      * <dfn>cookie-string</dfn>
      * <dfn>receives a set-cookie-string</dfn>
      * <dfn><code>Cookie</code></dfn> header

      The following term is defined in the Web Linking specification: [[!RFC5988]]

      * <dfn><code>Link</code></dfn> header

  : Fetch
  :: The following terms are defined in the WHATWG Fetch specification: [[!FETCH]]

      * <dfn><code>about:blank</code></dfn>
      * <dfn>fetch</dfn>
      * <dfn>ok status</dfn>
      * <dfn><code>Origin</code></dfn> header
      * <dfn>set</dfn>
      * <dfn>response</dfn> and its associated:
        * <dfn>type</dfn>
        * <dfn>url</dfn>
        * <dfn>url list</dfn>
        * <dfn>status</dfn>
        * <dfn>header list</dfn>
        * <dfn>body</dfn>
        * <dfn>internal response</dfn>
        * <dfn>HTTPS state</dfn>
      * <dfn>request</dfn> and its associated:
        * <dfn>url</dfn>
        * <dfn>method</dfn>
        * <dfn>header list</dfn>
        * <dfn>body</dfn>
        * <dfn>client</dfn>
        * <dfn>target browsing context</dfn>
        * <dfn>initiator</dfn>
        * <dfn>type</dfn>
        * <dfn>destination</dfn>
        * <dfn>origin</dfn>
        * <dfn>omit-<code>Origin</code>-header flag</dfn>
        * <dfn>referrer</dfn>
        * <dfn>synchronous flag</dfn>
        * <dfn>mode</dfn>
        * <dfn>credentials mode</dfn>
        * <dfn>use-URL-credentials flag</dfn>
        * <dfn>cache mode</dfn>
        * <dfn>redirect mode</dfn>

  : Web IDL
  :: The IDL fragments in this specification must be interpreted as required for conforming IDL
      fragments, as described in the Web IDL specification. [[!WEBIDL]]

      The following terms are defined in the Web IDL specification:

      * <dfn>Supported property indices</dfn>
      * <dfn>Determine the value of an indexed property</dfn>
      * <dfn>Support named properties</dfn>
      * <dfn>Supported property names</dfn>
      * <dfn>Unenumerable</dfn>
      * <dfn>Determine the value of a named property</dfn>
      * <dfn>Platform array objects</dfn>
      * <dfn>Read only</dfn> (when applied to arrays)
      * <dfn>Callback this value</dfn>
      * <dfn>Converting</dfn> between WebIDL types and JS types
      * <dfn>invoke the Web IDL callback function</dfn>

      The Web IDL specification also defines the following types that are used in Web IDL fragments
      in this specification:

      * <dfn><code>Array</code></dfn>
      * <dfn><code>boolean</code></dfn>
      * <dfn><code>Boolean</code></dfn>
      * <dfn><code>DOMString</code></dfn>
      * <dfn><code>USVString</code></dfn>
      * <dfn><code>double</code></dfn>
      * <dfn><code>Error</code></dfn>
      * <dfn><code>Function</code></dfn>
      * <dfn><code>long</code></dfn>
      * <dfn><code>Map</code></dfn>
      * <dfn><code>Number</code></dfn>
      * <dfn><code>Object</code></dfn>
      * <dfn><code>RegExp</code></dfn>
      * <dfn><code>Set</code></dfn>
      * <dfn><code>String</code></dfn>
      * <dfn><code>unrestricted double</code></dfn>
      * <dfn><code>unsigned long</code></dfn>

      The term <dfn>throw</dfn> in this specification is used as defined in the WebIDL
      specification. The following exception names are defined by WebIDL and used by this
      specification:

      * <dfn><code>IndexSizeError</code></dfn>
      * <dfn><code>HierarchyRequestError</code></dfn>
      * <dfn><code>InvalidCharacterError</code></dfn>
      * <dfn><code>NotFoundError</code></dfn>
      * <dfn><code>NotSupportedError</code></dfn>
      * <dfn><code>InvalidStateError</code></dfn>
      * <dfn><code>SyntaxError</code></dfn>
      * <dfn><code>InvalidAccessError</code></dfn>
      * <dfn><code>SecurityError</code></dfn>
      * <dfn><code>NetworkError</code></dfn>
      * <dfn><code>QuotaExceededError</code></dfn>
      * <dfn><code>TimeoutError</code></dfn>
      * <dfn><code>DataCloneError</code></dfn>
      * <dfn><code>TypeError</code></dfn>

      When this specification requires a user agent to <dfn>create a <code>Date</code> object</dfn>
      representing a particular time (which could be the special value Not-a-Number), the
      milliseconds component of that time, if any, must be truncated to an integer, and the time
      value of the newly created <code>Date</code> object must represent the resulting truncated
      time.

      <p class="example">
        For instance, given the time 23045 millionths of a second after 01:00 UTC on January 1st
        2000, i.e. the time 2000-01-01T00:00:00.023045Z, then the <code>Date</code> object created
        representing that time would represent the same time as that created representing the time
        2000-01-01T00:00:00.023Z, 45 millionths earlier. If the given time is NaN, then the result
        is a <code>Date</code> object that represents a time value NaN (indicating that the object
        does not represent a specific instant of time).
      </p>

  : JavaScript
  :: Some parts of the language described by this specification only support JavaScript as the
      underlying scripting language. [[!ECMA-262]]

      <p class="note">
        The term "JavaScript" is used to refer to ECMA262, rather than the official term ECMAScript,
        since the term JavaScript is more widely known. Similarly, the <a>MIME type</a> used to
        refer to JavaScript in this specification is <code>text/javascript</code>, since that is the
        most commonly used type, <a>despite it being an officially obsoleted type</a> according to
        RFC 4329. [[!RFC4329]]
      </p>

      The term <dfn>JavaScript global environment</dfn> refers to the <i>global environment</i>
      concept defined in the ECMAScript specification.

      The ECMAScript <dfn><code>SyntaxError</code></dfn> exception is also defined in the ECMAScript
      specification. [[!ECMA-262]]

      The <dfn>ArrayBuffer</dfn> and related object types and underlying concepts from the
      ECMAScript Specification are used for several features in this specification. [[!ECMA-262]]

      The <dfn><code>Date</code></dfn> object type from the ECMAScript Specification is used for
      several features of this specification. [[!ECMA-262]]

      The following helper IDL is used for referring to <code>ArrayBuffer</code>-related types:

      <pre class="idl-ignore" data-highlight="webidl">
        typedef (Int8Array or Uint8Array or Uint8ClampedArray or Int16Array or Uint16Array or Int32Array or Uint32Array or Float32Array or Float64Array or DataView) ArrayBufferView;
      </pre>

      <p class="note">
        In particular, the <code>Uint8ClampedArray</code> type is used by some
        <a>2D canvas APIs</a>, and the <a><code>WebSocket</code> API</a> uses
        <code>ArrayBuffer</code> objects for handling binary frames.
      </p>

  : DOM
  :: The Document Object Model (DOM) is a representation &mdash; a model &mdash; of a document and
      its content. The DOM is not just an API; the conformance criteria of HTML implementations are
      defined, in this specification, in terms of operations on the DOM. [[!DOM]]

      Implementations must support DOM and the events defined in UI Events, because this
      specification is defined in terms of the DOM, and some of the features are defined as
      extensions to the DOM interfaces. [[!DOM]] [[!UIEVENTS]]

      In particular, the following features are defined in the DOM specification: [[!DOM]]

      * <dfn><code>Attr</code></dfn> interface
      * <dfn><code>Comment</code></dfn> interface
      * <dfn><code>DOMImplementation</code></dfn> interface
      * {{Document}} interface
      * <dfn><code>XMLDocument</code></dfn> interface
      * <dfn><code>DocumentFragment</code></dfn> interface
      * <dfn><code>DocumentType</code></dfn> interface
      * <dfn><code>DOMException</code></dfn> interface
      * <dfn><code>ChildNode</code></dfn> interface
      * <dfn><code>Element</code></dfn> interface
      * <dfn><code>Node</code></dfn> interface
      * <dfn><code>NodeList</code></dfn> interface
      * <dfn><code>ProcessingInstruction</code></dfn> interface
      * <dfn><code>Text</code></dfn> interface
      * <dfn><code>HTMLCollection</code></dfn> interface
      * <dfn><code>item()</code></dfn> method
      * The terms <dfn>collections</dfn> and <dfn>represented by the collection</dfn>
      * <dfn><code>DOMTokenList</code></dfn> interface
      * <dfn><code>DOMSettableTokenList</code></dfn> interface
      * <dfn><code>DOMTokenList</code></dfn> interface
      * <dfn><code>DOMSettableTokenList</code></dfn> interface
      * <dfn><code>DOMSettableTokenList.value</code></dfn> attribute
      * <dfn><code>createDocument()</code></dfn> method
      * <dfn><code>createHTMLDocument()</code></dfn> method
      * <dfn><code>createElement()</code></dfn> method
      * <dfn><code>createElementNS()</code></dfn> method
      * <dfn><code>getElementById()</code></dfn> method
      * <dfn><code>getElementsByClassName()</code></dfn> method
      * <dfn><code>insertBefore()</code></dfn> method
      * <dfn><code>appendChild()</code></dfn> method
      * <dfn><code>cloneNode()</code></dfn> method
      * <dfn><code>importNode()</code></dfn> method
      * <dfn><code>childNodes</code></dfn> attribute
      * <dfn><code>localName</code></dfn> attribute
      * <dfn><code>parentNode</code></dfn> attribute
      * <dfn><code>namespaceURI</code></dfn> attribute
      * <dfn><code>tagName</code></dfn> attribute
      * <dfn><code>id</code></dfn> attribute
      * <dfn><code>textContent</code></dfn> attribute
      * The <dfn>insert</dfn>, <dfn>append</dfn>, <dfn>remove</dfn>, <dfn>replace</dfn>, and
        <dfn>adopt</dfn> algorithms for nodes
      * The <dfn>insertion steps</dfn>, <dfn>removing steps</dfn>, and <dfn>adopting steps</dfn>
        hooks
      * The <dfn>attribute list</dfn> concept.
      * The <dfn>data</dfn> of a text node.
      * <dfn><code>Event</code></dfn> interface
      * <dfn><code>EventTarget</code></dfn> interface
      * <dfn><code>EventInit</code></dfn> dictionary type
      * <dfn><code>target</code></dfn> attribute
      * <dfn><code>currentTarget</code></dfn> attribute
      * <dfn><code>isTrusted</code></dfn> attribute
      * <dfn><code>initEvent()</code></dfn> method
      * <dfn><code>addEventListener()</code></dfn> method
      * The <dfn>type</dfn> of an event
      * The concept of an <dfn>event listener</dfn> and the <a>event listeners</a> associated with
        an <code>EventTarget</code>
      * The concept of a <dfn>target override</dfn>
      * The concept of a regular <dfn>event parent</dfn> and a
        <dfn>cross-boundary event parent</dfn>
      * The <dfn>encoding</dfn> (herein the <i>character encoding</i>) and <dfn>content type</dfn>
        of a <{Document}>
      * The distinction between <dfn>XML documents</dfn> and <dfn>HTML documents</dfn>
      * The terms <dfn>quirks mode</dfn>, <dfn>limited-quirks mode</dfn>, and
        <dfn>no-quirks mode</dfn>
      * The algorithm to <dfn>clone</dfn> a <code>Node</code>, and the concept of
        <dfn>cloning steps</dfn> used by that algorithm
      * The concept of <dfn>base URL change steps</dfn> and the definition of what happens when an
        element is <dfn>affected by a base URL change</dfn>
      * The concept of an element's <dfn>unique identifier (ID)</dfn>
      * The concept of a DOM <dfn>range</dfn>, and the terms <dfn>start</dfn>, <dfn>end</dfn>, and
        <dfn>boundary point</dfn> as applied to ranges.
      * <dfn><code>MutationObserver</code></dfn> interface and <dfn>mutation observers</dfn> in
        general

      The term <dfn>throw</dfn> in this specification is used as defined in the DOM specification.
      The following <code>DOMException</code> types are defined in the DOM specification: [[!DOM]]

      * <dfn><code>IndexSizeError</code></dfn>
      * <dfn><code>HierarchyRequestError</code></dfn>
      * <dfn><code>WrongDocumentError</code></dfn>
      * <dfn><code>InvalidCharacterError</code></dfn>
      * <dfn><code>NoModificationAllowedError</code></dfn>
      * <dfn><code>NotFoundError</code></dfn>
      * <dfn><code>NotSupportedError</code></dfn>
      * <dfn><code>InvalidStateError</code></dfn>
      * <dfn><code>SyntaxError</code></dfn>
      * <dfn><code>InvalidModificationError</code></dfn>
      * <dfn><code>NamespaceError</code></dfn>
      * <dfn><code>InvalidAccessError</code></dfn>
      * <dfn><code>SecurityError</code></dfn>
      * <dfn><code>NetworkError</code></dfn>
      * <dfn><code>AbortError</code></dfn>
      * <dfn><code>URLMismatchError</code></dfn>
      * <dfn><code>QuotaExceededError</code></dfn>
      * <dfn><code>TimeoutError</code></dfn>
      * <dfn><code>InvalidNodeTypeError</code></dfn>
      * <dfn><code>DataCloneError</code></dfn>

      <p class="example">
        For example, to <i>throw a <code>TimeoutError</code> exception</i>, a user agent would
        construct a <code>DOMException</code> object whose type was the string
        "<code>TimeoutError</code>" (and whose code was the number 23, for legacy reasons) and
        actually throw that object as an exception.
      </p>

      The following features are defined in the UI Events specification: [[!UIEVENTS]]

      * <dfn><code>MouseEvent</code></dfn> interface
      * <dfn><code>MouseEventInit</code></dfn> dictionary type
      * The <dfn><code>FocusEvent</code></dfn> interface and its <dfn><code>relatedTarget</code></dfn> attribute
      * The <dfn><code>UIEvent</code></dfn> interface's <dfn><code>detail</code></dfn> attribute
      * <dfn><code>click</code></dfn> event
      * <dfn><code>dblclick</code></dfn> event
      * <dfn><code>mousedown</code></dfn> event
      * <dfn><code>mouseenter</code></dfn> event
      * <dfn><code>mouseleave</code></dfn> event
      * <dfn><code>mousemove</code></dfn> event
      * <dfn><code>mouseout</code></dfn> event
      * <dfn><code>mouseover</code></dfn> event
      * <dfn><code>mouseup</code></dfn> event
      * <dfn><code>mousewheel</code></dfn> event
      * <dfn><code>keydown</code></dfn> event
      * <dfn><code>keyup</code></dfn> event
      * <dfn><code>keypress</code></dfn> event

      The following features are defined in the Touch Events specification: [[!TOUCH-EVENTS]]

      * <dfn><code>Touch</code></dfn> interface
      * <dfn>Touch point</dfn> concept

      This specification sometimes uses the term <dfn>name</dfn> to refer to the event's
      <code>type</code>; as in, "an event named <code>click</code>" or "if the event name is
      <code>keypress</code>". The terms "name" and "type" for events are synonymous.

      The following features are defined in the DOM Parsing and Serialization specification:
      [[!DOMPARSING]]

      * <dfn><code>innerHTML</code></dfn>
      * <dfn><code>outerHTML</code></dfn>

      <p class="note">
        User agents are also encouraged to implement the features described in the
        <cite>HTML Editing APIs</cite> and <cite><code>UndoManager</code> and DOM Transaction</cite>
        specifications. [[!EDITING]] [[!UNDO]]
      </p>

      The following parts of the Fullscreen specification are referenced from this specification, in
      part to define the rendering of <code>dialog</code> elements, and also to define how the
      Fullscreen API interacts with the sandboxing features in HTML: [[!FULLSCREEN]]

      * The <dfn>top layer</dfn> concept
      * <dfn><code>requestFullscreen()</code></dfn>
      * The <dfn>fullscreen enabled flag</dfn>
      * The <dfn>fully exit fullscreen</dfn> algorithm

      The <cite>High Resolution Time</cite> specification provides the
      <dfn><code>DOMHighResTimeStamp</code></dfn> typedef and the
      <dfn><code>Performance</code></dfn> object's <dfn><code>now()</code></dfn> method.
      [[!HR-TIME-2]]

  : File API
  :: This specification uses the following features defined in the File API specification:
      [[!FILEAPI]]

      * <dfn><code>Blob</code></dfn> interface
      * <dfn><code>File</code></dfn> interface
      * <dfn><code>FileList</code></dfn> interface
      * <dfn><code>Blob.close()</code></dfn>
      * <dfn><code>Blob.type</code></dfn>
      * The concept of <dfn>read errors</dfn>

  : Media Providers
  :: This specification references the following interfaces:

      * <dfn><code>MediaStream</code></dfn> [[!MEDIASTREAM-RECORDING]]
      * <dfn><code>MediaSource</code></dfn> [[!MEDIA-SOURCE]]

  : XMLHttpRequest
  :: This specification references the XMLHttpRequest specification to describe how the two
      specifications interact and to use its <code>ProgressEvent</code> features. The following
      features and terms are defined in the XMLHttpRequest specification: [[!XHR]]

      * <dfn><code>XMLHttpRequest</code></dfn> interface
      * <dfn><code>XMLHttpRequest.responseXML</code></dfn> attribute
      * <dfn><code>ProgressEvent</code></dfn> interface
      * <dfn><code>ProgressEvent.lengthComputable</code></dfn> attribute
      * <dfn><code>ProgressEvent.loaded</code></dfn> attribute
      * <dfn><code>ProgressEvent.total</code></dfn> attribute
      * <dfn>Fire a progress event named <var>e</var></dfn>

  : Server-Sent Events
  :: This specification references <dfn><code>EventSource</code></dfn> which is specified in the
      Server-Sent Events specification [[!EVENTSOURCE]]

  : Media Queries
  :: Implementations must support the Media Queries language. [[!MEDIAQ]]

  : CSS modules
  :: While support for CSS as a whole is not required of implementations of this specification
      (though it is encouraged, at least for Web browsers), some features are defined in terms of
      specific CSS requirements.

      In particular, some features require that a string be
      <dfn>parsed as a CSS &lt;color&gt; value</dfn>. When parsing a CSS value, user agents are
      required by the CSS specifications to apply some error handling rules. These apply to this
      specification also. [[!CSS3COLOR]] [[!CSS-2015]]

      <p class="example">
        For example, user agents are required to close all open constructs upon finding the end of a
        style sheet unexpectedly. Thus, when parsing the string "<code>rgb(0,0,0</code>" (with a
        missing close-parenthesis) for a color value, the close parenthesis is implied by this error
        handling rule, and a value is obtained (the color 'black'). However, the similar construct
        "<code>rgb(0,0,</code>" (with both a missing parenthesis and a missing "blue" value) cannot
        be parsed, as closing the open construct does not result in a viable value.
      </p>

      The term <dfn>named color</dfn> is defined in the CSS Color specification. [[!CSS3COLOR]]

      The terms <dfn>replaced element</dfn> and <dfn>intrinsic dimensions</dfn> are defined in the
      CSS specification. [[!CSS-2015]]

      The terms <dfn>intrinsic width</dfn> and <dfn>intrinsic height</dfn> refer to the width
      dimension and the height dimension, respectively, of <a>intrinsic dimensions</a>.

      The term <dfn>provides a paint source</dfn> is used as defined in the
      <cite>CSS Image Values and Replaced Content</cite> specification to define the interaction of
      certain HTML elements with the CSS 'element()' function. [[!CSS3-IMAGES]]

      The term <dfn>default object size</dfn> is also defined in the
      <cite>CSS Image Values and Replaced Content</cite> specification. [[!CSS3-IMAGES]]

      Implementations that support scripting must support the CSS Object Model. The following
      features and terms are defined in the CSSOM specifications: [[!CSSOM]] [[!CSSOM-VIEW]]

      * <dfn><code>Screen</code></dfn>
      * <dfn><code>LinkStyle</code></dfn>
      * <dfn><code>CSSStyleDeclaration</code></dfn>
      * <dfn><code>cssText</code></dfn> attribute of <code>CSSStyleDeclaration</code>
      * <dfn><code>StyleSheet</code></dfn>
      * The terms <dfn>create a CSS style sheet</dfn>, <dfn>remove a CSS style sheet</dfn>, and
        <dfn>associated CSS style sheet</dfn>
      * <dfn>CSS style sheets</dfn> and their properties: <dfn>type</dfn>, <dfn>location</dfn>,
        <dfn>parent CSS style sheet</dfn>, <dfn>owner node</dfn>, <dfn>owner CSS rule</dfn>,
        <dfn>media</dfn>, <dfn>title</dfn>, <dfn>alternate flag</dfn>, <dfn>disabled flag</dfn>,
        <dfn>CSS rules</dfn>, <dfn>origin-clean flag</dfn>
      * <dfn>Alternative style sheet sets</dfn> and the <dfn>preferred style sheet set</dfn>
      * <dfn>Serializing a CSS value</dfn>
      * <dfn>Scroll an element into view</dfn>
      * <dfn>Scroll to the beginning of the document</dfn>
      * The <dfn><code>resize</code></dfn> event
      * The <dfn><code>scroll</code></dfn> event

      The following features and terms are defined in the <cite>CSS Syntax</cite> specifications:
      [[!CSS3-SYNTAX]]

      * <dfn>Parse a comma-separated list of component values</dfn>
      * <dfn>component value</dfn>
      * <dfn>environment encoding</dfn>
      * <dfn>&lt;whitespace-token></dfn>

      The feature <dfn>&lt;length></dfn> is defined in the <cite>CSS Values and Units</cite>
      specification. [[!CSS-VALUES]]

      The term <dfn>CSS styling attribute</dfn> is defined in the <cite>CSS Style Attributes</cite>
      specification. [[!CSS-STYLE-ATTR]]

      The <code>CanvasRenderingContext2D</code> object's use of fonts depends on the features
      described in the CSS <cite>Fonts</cite> and <cite>Font Loading</cite> specifications,
      including in particular <dfn><code>FontFace</code></dfn> objects and the
      <dfn>font source</dfn> concept. [[!CSS3-FONTS]] [[!CSS-FONT-LOADING-3]]

      The following interface is defined in the Geometry Interfaces Module specification:
      [[!GEOMETRY-1]]

      * <dfn><code>DOMMatrix</code></dfn> interface

  : SVG
  :: The <code>CanvasRenderingContext2D</code> object's use of fonts depends on the features
      described in the CSS <cite>Fonts</cite> and <cite>Font Loading</cite> specifications,
      including in particular <dfn><code>FontFace</code></dfn> objects and the
      <dfn>font source</dfn> concept. [[!CSS3-FONTS]] [[!CSS-FONT-LOADING-3]]

      The following interface is defined in the SVG specification: [[!SVG]]

      * <dfn><code>SVGMatrix</code></dfn>

  : WebGL
  :: The following interface is defined in the WebGL specification: [[!WEBGL]]

      * <dfn><code>WebGLRenderingContext</code></dfn>

  : WebVTT
  :: Implementations may support <dfn>WebVTT</dfn> as a text track format for subtitles, captions,
      chapter titles, metadata, etc, for media resources. [[!WEBVTT]]

      The following terms, used in this specification, are defined in the WebVTT specification:

      * <dfn>WebVTT file</dfn>
      * <dfn>WebVTT file using cue text</dfn>
      * <dfn>WebVTT file using chapter title text</dfn>
      * <dfn>WebVTT file using only nested cues</dfn>
      * <dfn>WebVTT parser</dfn>
      * The <dfn>rules for updating the display of WebVTT text tracks</dfn>
      * The <dfn>rules for interpreting WebVTT cue text</dfn>
      * The WebVTT <dfn>text track cue writing direction</dfn>

  : The WebSocket protocol
  :: The following terms are defined in the WebSocket protocol specification: [[!RFC6455]]

      * <dfn>establish a WebSocket connection</dfn>
      * <dfn>the WebSocket connection is established</dfn>
      * <dfn>validate the server's response</dfn>
      * <dfn>extensions in use</dfn>
      * <dfn>subprotocol in use</dfn>
      * <dfn>headers to send appropriate cookies</dfn>
      * <dfn>cookies set during the server's opening handshake</dfn>
      * <dfn>a WebSocket message has been received</dfn>
      * <dfn>send a WebSocket Message</dfn>
      * <dfn>fail the WebSocket connection</dfn>
      * <dfn>close the WebSocket connection</dfn>
      * <dfn>start the WebSocket closing handshake</dfn>
      * <dfn>the WebSocket closing handshake is started</dfn>
      * <dfn>the WebSocket connection is closed</dfn> (possibly <i>cleanly</i>)
      * <dfn>the WebSocket connection close code</dfn>
      * <dfn>the WebSocket connection close reason</dfn>
      * <dfn><code>Sec-WebSocket-Protocol</code></dfn> field

  : ARIA
  :: The <dfn><code>role</code></dfn> attribute is defined in the ARIA specification, as are the
      following roles: [[!WAI-ARIA]]

      * <dfn><code>alert</code></dfn>
      * <dfn><code>alertdialog</code></dfn>
      * <dfn><code>application</code></dfn>
      * <dfn><code>article</code></dfn>
      * <dfn><code>banner</code></dfn>
      * <dfn><code>button</code></dfn>
      * <dfn><code>checkbox</code></dfn>
      * <dfn><code>columnheader</code></dfn>
      * <dfn><code>combobox</code></dfn>
      * <dfn><code>complementary</code></dfn>
      * <dfn><code>contentinfo</code></dfn>
      * <dfn><code>dialog</code></dfn>
      * <dfn><code>directory</code></dfn>
      * <dfn><code>document</code></dfn>
      * <dfn><code>grid</code></dfn>
      * <dfn><code>gridcell</code></dfn>
      * <dfn><code>group</code></dfn>
      * <dfn><code>heading</code></dfn>
      * <dfn><code>img</code></dfn>
      * <dfn><code>link</code></dfn>
      * <dfn><code>list</code></dfn>
      * <dfn><code>listbox</code></dfn>
      * <dfn><code>listitem</code></dfn>
      * <dfn><code>log</code></dfn>
      * <dfn><code>main</code></dfn>
      * <dfn><code>marquee</code></dfn>
      * <dfn><code>menu</code></dfn>
      * <dfn><code>menubar</code></dfn>
      * <dfn><code>menuitem</code></dfn>
      * <dfn><code>menuitemcheckbox</code></dfn>
      * <dfn><code>menuitemradio</code></dfn>
      * <dfn><code>navigation</code></dfn>
      * <dfn><code>note</code></dfn>
      * <dfn><code>option</code></dfn>
      * <dfn><code>presentation</code></dfn>
      * <dfn><code>progressbar</code></dfn>
      * <dfn><code>radio</code></dfn>
      * <dfn><code>region</code></dfn>
      * <dfn><code>row</code></dfn>
      * <dfn><code>rowgroup</code></dfn>
      * <dfn><code>rowheader</code></dfn>
      * <dfn><code>search</code></dfn>
      * <dfn><code>separator</code></dfn>
      * <dfn><code>slider</code></dfn>
      * <dfn><code>spinbutton</code></dfn>
      * <dfn><code>status</code></dfn>
      * <dfn><code>tab</code></dfn>
      * <dfn><code>tablist</code></dfn>
      * <dfn><code>textbox</code></dfn>
      * <dfn><code>toolbar</code></dfn>
      * <dfn><code>tree</code></dfn>
      * <dfn><code>treeitem</code></dfn>

      In addition, the following <dfn><code>aria-*</code></dfn> content attributes are defined in
      the ARIA specification: [[!WAI-ARIA]]

      * <dfn><code>aria-checked</code></dfn>
      * <dfn><code>aria-describedby</code></dfn>
      * <dfn><code>aria-disabled</code></dfn>
      * <dfn><code>aria-expanded</code></dfn>
      * <dfn><code>aria-hidden</code></dfn>
      * <dfn><code>aria-invalid</code></dfn>
      * <dfn><code>aria-label</code></dfn>
      * <dfn><code>aria-level</code></dfn>
      * <dfn><code>aria-multiline</code></dfn>
      * <dfn><code>aria-multiselectable</code></dfn>
      * <dfn><code>aria-owns</code></dfn>
      * <dfn><code>aria-readonly</code></dfn>
      * <dfn><code>aria-required</code></dfn>
      * <dfn><code>aria-selected</code></dfn>
      * <dfn><code>aria-sort</code></dfn>
      * <dfn><code>aria-valuemax</code></dfn>
      * <dfn><code>aria-valuemin</code></dfn>
      * <dfn><code>aria-valuenow</code></dfn>

  : Content Security Policy
  :: The following terms are defined in <cite>Content Security Policy</cite>: [[!CSP]]

      * <dfn>Content Security Policy</dfn>
      * <dfn>Content Security Policy directive</dfn>
      * The <dfn>Content Security Policy syntax</dfn>
      * <dfn>enforce the policy</dfn>
      * The <dfn><code>frame-ancestors</code> directive</dfn>
      * The <dfn>parse a serialized Content Security Policy</dfn> algorithm
      * The <dfn><code>report-uri</code> directive</dfn>
      * The <dfn><code>sandbox</code> directive</dfn>

  : Service Workers
  :: The following terms are defined in <cite>Service Workers</cite>: [[!SERVICE-WORKERS]]

      * <dfn>match service worker registration</dfn>

  This specification does not <em>require</em> support of any particular network protocol, style
  sheet language, scripting language, or any of the DOM specifications beyond those required in the
  list above. However, the language described by this specification is biased towards CSS as the
  styling language, JavaScript as the scripting language, and HTTP as the network protocol, and
  several features assume that those languages and protocols are in use.

  A user agent that implements the HTTP protocol must implement the Web Origin Concept
  specification and the HTTP State Management Mechanism specification (Cookies) as well. [[!HTTP11]]
  [[!ORIGIN]] [[!COOKIES]]

  <p class="note">
    This specification might have certain additional requirements on character encodings, image
    formats, audio formats, and video formats in the respective sections.
  </p>
</div>

<h4 id="extensibility">Extensibility</h4>

  Vendor-specific proprietary user agent extensions to this specification are strongly discouraged.
  Documents must not use such extensions, as doing so reduces interoperability and fragments the
  user base, allowing only users of specific user agents to access the content in question.

  <div class="impl">
    If such extensions are nonetheless needed, e.g. for experimental purposes, then vendors are
    strongly urged to use one of the following extension mechanisms:

    * For markup-level features that can be limited to the XML serialization and need not be
        supported in the HTML serialization, vendors should use the namespace mechanism to define
        custom namespaces in which the non-standard elements and attributes are supported.

    * For markup-level features that are intended for use with <a>the HTML syntax</a>,
        extensions should be limited to new attributes of the form
        "<code>x-<var>vendor</var>-<var>feature</var></code>", where <var>vendor</var> is a short
        string that identifies the vendor responsible for the extension, and <var>feature</var> is
        the name of the feature. New element names should not be created. Using attributes for such
        extensions exclusively allows extensions from multiple vendors to co-exist on the same
        element, which would not be possible with elements. Using the
        "<code>x-<var>vendor</var>-<var>feature</var></code>" form allows extensions to be made
        without risk of conflicting with future additions to the specification.

      <div class="example">
        For instance, a browser named "FerretBrowser" could use "ferret" as a vendor prefix, while a
        browser named "Mellblom Browser" could use "mb". If both of these browsers invented
        extensions that turned elements into scratch-and-sniff areas, an author experimenting with
        these features could write:

        <pre highlight="html">
          &lt;p>This smells of lemons!
          &lt;span x-ferret-smellovision x-ferret-smellcode="LEM01"
          x-mb-outputsmell x-mb-smell="lemon juice">&lt;/span>&lt;/p>
        </pre>
      </div>

    Attribute names beginning with the two characters "<code>x-</code>" are reserved for
    user agent use and are guaranteed to never be formally added to the HTML language. For
    flexibility, attributes names containing underscores (the U+005F LOW LINE character) are also
    reserved for experimental purposes and are guaranteed to never be formally added to the HTML
    language.

    <p class="note">Pages that use such attributes are by definition non-conforming.</p>

    For DOM extensions, e.g. new methods and IDL attributes, the new members should be prefixed by
    vendor-specific strings to prevent clashes with future versions of this specification.

    For events, experimental event types should be prefixed with vendor-specific strings.

    <div class="example">
      For example, if a user agent called "Pleasold" were to add an event to indicate when
      the user is going up in an elevator, it could use the prefix "<code>pleasold</code>" and
      thus name the event "<code>pleasoldgoingup</code>", possibly with an event handler attribute
      named "<code>onpleasoldgoingup</code>".</p>
    </div>

    All extensions must be defined so that the use of extensions neither contradicts nor causes the
    non-conformance of functionality defined in the specification.

    <div class="example">
      For example, while strongly discouraged from doing so, an implementation "Foo Browser" could
      add a new IDL attribute "<code>fooTypeTime</code>" to a control's DOM interface that returned
      the time it took the user to select the current value of a control (say). On the other hand,
      defining a new control that appears in a form's <code>elements</code> array would be in
      violation of the above requirement, as it would violate the definition of
      <code>elements</code> given in this specification.</p>
    </div>

    When adding new <a>reflecting</a> IDL attributes corresponding to content attributes of the form
    "<code>x-<var>vendor</var>-<var>feature</var></code>", the IDL attribute should be named
    "<code><var>vendor</var><var>Feature</var></code>" (i.e. the "<code>x</code>" is dropped from
    the IDL attribute's name).</p>
</div>

<hr />

  When vendor-neutral extensions to this specification are needed, either this specification can be
  updated accordingly, or an extension specification can be written that overrides the requirements
  in this specification. When someone applying this specification to their activities decides that
  they will recognize the requirements of such an extension specification, it becomes an
  <dfn>applicable specification</dfn> for the purposes of conformance requirements in this
  specification.

  <p class="note">
    Someone could write a specification that defines any arbitrary byte stream as conforming, and
    then claim that their random junk is conforming. However, that does not mean that their random
    junk actually is conforming for everyone's purposes: if someone else decides that that
    specification does not apply to their work, then they can quite legitimately say that the
    aforementioned random junk is just that, junk, and not conforming at all. As far as conformance
    goes, what matters in a particular community is what that community <em>agrees</em> is
    applicable.
  </p>

  <dfn>applicable specification</dfn>.

  The conformance terminology for documents depends on the nature of the changes introduced by such
  applicable specifications, and on the content and intended interpretation of the document.
  Applicable specifications MAY define new document content (e.g. a foobar element), MAY prohibit
  certain otherwise conforming content (e.g. prohibit use of &lt;table>s), or MAY change the
  semantics, DOM mappings, or other processing rules for content defined in this specification.
  Whether a document is or is not a <a>conforming HTML5 document</a> does not depend on the use of
  applicable specifications: if the syntax and semantics of a given <a>conforming HTML5 document</a>
  is unchanged by the use of applicable specification(s), then that document remains a
  <a>conforming HTML5 document</a>. If the semantics or processing of a given (otherwise conforming)
  document is changed by use of applicable specification(s), then it is not a
  <a>conforming HTML5 document</a>. For such cases, the applicable specifications SHOULD define
  conformance terminology.</p>

  <p class="note">
    As a suggested but not required convention, such specifications might define conformance
    terminology such as: "Conforming HTML5+XXX document", where XXX is a short name
    for the applicable specification. (Example: "Conforming HTML5+AutomotiveExtensions document").
  </p>

  <p class="note">a consequence of the rule given above is that certain syntactically correct HTML5
    documents may not be <a>conforming HTML5 documents</a> in the presence of applicable
    specifications. (Example: the applicable specification defines &lt;table> to be a piece of
    furniture &#8212; a document written to that specification and containing a &lt;table> element
    is NOT a <a>conforming HTML5 document</a>, even if the element happens to be syntactically
    correct HTML5.)
  </p>

<div class="impl">
  <hr />

  User agents must treat elements and attributes that they do not understand as semantically
  neutral; leaving them in the DOM (for DOM processors), and styling them according to CSS (for CSS
  processors), but not inferring any meaning from them.

  When support for a feature is disabled (e.g. as an emergency measure to mitigate a security
  problem, or to aid in development, or for performance reasons), user agents must act as if they
  had no support for the feature whatsoever, and as if the feature was not mentioned in this
  specification. For example, if a particular feature is accessed via an attribute in a Web IDL
  interface, the attribute itself would be omitted from the objects that implement that interface
  &mdash; leaving the attribute on the object but making it return null or throw an exception is
  insufficient.
</div>

<div class="impl">
  <h4 id="interactions-with-xpath-and-xslt">Interactions with XPath and XSLT</h4>

  Implementations of XPath 1.0 that operate on <a>HTML documents</a> parsed or created in the
  manners described in this specification (e.g. as part of the <code>document.evaluate()</code> API)
  must act as if the following edit was applied to the XPath 1.0 specification.

  First, remove this paragraph:

  <blockquote cite="http://www.w3.org/TR/1999/REC-xpath-19991116#node-tests">
    A <a>QName</a> in the node test is expanded into an <a>expanded-name</a> using the namespace
    declarations from the expression context. This is the same way expansion is done for element
    type names in start and end-tags except that the default namespace declared with
    <code>xmlns</code> is not used: if the <a>QName</a> does not have a prefix, then the namespace
    URI is null (this is the same way attribute names are expanded). It is an error if the
    <a>QName</a> has a prefix for which there is no namespace declaration in the expression context.
  </blockquote>

  Then, insert in its place the following:

  <blockquote cite="http://www.w3.org/Bugs/Public/show_bug.cgi?id=7059#c37">
    A QName in the node test is expanded into an expanded-name using the namespace declarations from
    the expression context. If the QName has a prefix, then there must be a namespace declaration
    for this prefix in the expression context, and the corresponding namespace URI is the one that
    is associated with this prefix. It is an error if the QName has a prefix for which there is no
    namespace declaration in the expression context.

    If the QName has no prefix and the principal node type of the axis is element, then the default
    element namespace is used. Otherwise if the QName has no prefix, the namespace URI is null. The
    default element namespace is a member of the context for the XPath expression. The value of the
    default element namespace when executing an XPath expression through the DOM3 XPath API is
    determined in the following way:

    1. If the context node is from an HTML DOM, the default element namespace is
        "http://www.w3.org/1999/xhtml".
    2. Otherwise, the default element namespace URI is null.

    <p class="note">
      This is equivalent to adding the default element namespace feature of XPath 2.0 to XPath 1.0,
      and using the HTML namespace as the default element namespace for HTML documents. It is
      motivated by the desire to have implementations be compatible with legacy HTML content while
      still supporting the changes that this specification introduces to HTML regarding the
      namespace used for HTML elements, and by the desire to use XPath 1.0 rather than XPath 2.0.
    </p>
  </blockquote>

  <p class="note">
    This change is a <a>willful violation</a> of the XPath 1.0 specification, motivated by
    desire to have implementations be compatible with legacy content while still supporting the
    changes that this specification introduces to HTML regarding which namespace is used for HTML
    elements. [[!XPATH]]
  </p>

  <hr />

  XSLT 1.0 processors outputting to a DOM when the output method is "html" (either explicitly or via
  the defaulting rule in XSLT 1.0) are affected as follows:

  If the transformation program outputs an element in no namespace, the processor must, prior to
  constructing the corresponding DOM element node, change the namespace of the element to the
  <a>HTML namespace</a>, <a>ASCII-lowercase</a> the element's local name, and <a>ASCII-lowercase</a>
  the names of any non-namespaced attributes on the element.

  <p class="note">
    This requirement is a <a>willful violation</a> of the XSLT 1.0 specification, required because
    this specification changes the namespaces and case-sensitivity rules of HTML in a manner that
    would otherwise be incompatible with DOM-based XSLT transformations. (Processors that serialize
    the output are unaffected.) [[!XSLT-19991116]]
  </p>

  <hr />

  This specification does not specify precisely how XSLT processing interacts with the
  <a>HTML parser</a> infrastructure (for example, whether an XSLT processor acts as if it puts any
  elements into a <a>stack of open elements</a>). However, XSLT processors must <a>stop parsing</a>
  if they successfully complete, and must set the <a>current document readiness</a> first to
  "<code>interactive</code>" and then to "<code>complete</code>" if they are aborted.

  <hr />

  This specification does not specify how XSLT interacts with the <a>navigation</a> algorithm, how
  it fits in with the <a>event loop</a>, nor how error pages are to be handled (e.g. whether XSLT
  errors are to replace an incremental XSLT output, or are rendered inline, etc).

  <p class="note">
    There are also additional non-normative comments regarding the interaction of XSLT and HTML
    <a>in the <code>script</code> element section</a>, and of XSLT, XPath, and HTML <a>in the
    <code>template</code> element section</a>.
  </p>
</div>

<h3 id="case-sensitivity-and-string-comparison">Case-sensitivity and string comparison</h3>

  Comparing two strings in a <dfn>case-sensitive</dfn> manner means comparing them exactly, code
  point for code point.

  Comparing two strings in an <dfn>ASCII case-insensitive</dfn> manner means comparing them exactly,
  code point for code point, except that the characters in the range U+0041 to U+005A (i.e. LATIN
  CAPITAL LETTER A to LATIN CAPITAL LETTER Z) and the corresponding characters in the range U+0061
  to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) are considered to also match.

  Comparing two strings in a <dfn>compatibility caseless</dfn> manner means using the Unicode
  <i>compatibility caseless match</i> operation to compare the two strings, with no
  language-specific tailoirings. [[!UNICODE]]

  Except where otherwise stated, string comparisons must be performed in a <a>case-sensitive</A>
  manner.

  <div class="impl">
    <dfn>Converting a string to ASCII uppercase</dfn> means replacing all characters in the range
    U+0061 to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) with the corresponding
    characters in the range U+0041 to U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z).

    <dfn>Converting a string to ASCII lowercase</dfn> means replacing all characters in the range
    U+0041 to U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) with the corresponding
    characters in the range U+0061 to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z).
  </div>

  A string <var>pattern</var> is a <dfn>prefix match</dfn> for a string <var>s</var> when
  <var>pattern</var> is not longer than <var>s</var> and truncating <var>s</var> to
  <var>pattern</var>'s length leaves the two strings as matches of each other.

<h3 id="common-microsyntaxes">Common microsyntaxes</h3>

  There are various places in HTML that accept particular data types, such as dates or numbers. This
  section describes what the conformance criteria for content in those formats is, and how to parse
  them.

  <div class="impl">
    <p class="note">
      Implementors are strongly urged to carefully examine any third-party libraries they might
      consider using to implement the parsing of syntaxes described below. For example, date
      libraries are likely to implement error handling behavior that differs from what is required
      in this specification, since error-handling behavior is often not defined in specifications
      that describe date syntaxes similar to those used in this specification, and thus
      implementations tend to vary greatly in how they handle errors.
    </p>
  </div>

<div class="impl">
  <h4 id="common-parser-idioms">Common parser idioms</h4>

  The <dfn>space characters</dfn>, for the purposes of this specification, are U+0020 SPACE, U+0009
  CHARACTER TABULATION (tab), U+000A LINE FEED (LF), U+000C FORM FEED (FF), and U+000D CARRIAGE
  RETURN (CR).

  The <dfn>White_Space characters</dfn> are those that have the Unicode property "White_Space" in
  the Unicode <code>PropList.txt</code> data file. [[!UNICODE]]

  <p class="note">
    This should not be confused with the "White_Space" value (abbreviated "WS") of the "Bidi_Class"
    property in the <code>Unicode.txt</code> data file.
  </p>

  The <dfn>control characters</dfn> are those whose Unicode "General_Category" property has the
  value "Cc" in the Unicode <code>UnicodeData.txt</code> data file. [[!UNICODE]]

  The <dfn>uppercase ASCII letters</dfn> are the characters in the range U+0041 LATIN CAPITAL LETTER
  A to U+005A LATIN CAPITAL LETTER Z.

  The <dfn>lowercase ASCII letters</dfn> are the characters in the range U+0061 LATIN SMALL LETTER A
  to U+007A LATIN SMALL LETTER Z.

  The <dfn>ASCII digits</dfn> are the characters in the range U+0030 DIGIT ZERO (0) to U+0039 DIGIT
  NINE (9).

  The <dfn>alphanumeric ASCII characters</dfn> are those that are either
  <a>uppercase ASCII letters</a>, <a>lowercase ASCII letters</a>, or <a>ASCII digits</a>.

  The <dfn>ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0) to U+0039
  DIGIT NINE (9), U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL LETTER F, and U+0061 LATIN
  SMALL LETTER A to U+0066 LATIN SMALL LETTER F.

  The <dfn>uppercase ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0)
  to U+0039 DIGIT NINE (9) and U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL LETTER F only.

  The <dfn>lowercase ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0)
  to U+0039 DIGIT NINE (9) and U+0061 LATIN SMALL LETTER A to U+0066 LATIN SMALL LETTER F only.
</div>

<div class="impl">
  Some of the micro-parsers described below follow the pattern of having an <var>input</var>
  variable that holds the string being parsed, and having a <var>position</var> variable pointing at
  the next character to parse in <var>input</var>.

  For parsers based on this pattern, a step that requires the user agent to <dfn>collect a sequence
  of characters</dfn> means that the following algorithm must be run, with <var>characters</var>
  being the set of characters that can be collected:

  1. Let <var>input</var> and <var>position</var> be the same variables as those of the same name in
      the algorithm that invoked these steps.
  2. Let <var>result</var> be the empty string.
  3. While <var>position</var> doesn't point past the end of <var>input</var> and the character at
      <var>position</var> is one of the <var>characters</var>, append that character to the end of
      <var>result</var> and advance <var>position</var> to the next character in <var>input</var>.
  4. Return <var>result</var>.

  The step <dfn>skip whitespace</dfn> means that the user agent must
  <a>collect a sequence of characters</a> that are <a>space characters</a>. The collected characters
  are not used.

  When a user agent is to <dfn>strip line breaks</dfn> from a string, the user agent must remove
  any U+000A LINE FEED (LF) and U+000D CARRIAGE RETURN (CR) characters from that string.

  When a user agent is to <dfn>strip leading and trailing whitespace</dfn> from a string, the
  user agent must remove all <a>space characters</a> that are at the start or end of the string.

  When a user agent is to <dfn>strip and collapse whitespace</dfn> in a string, it must replace any
  sequence of one or more consecutive <a>space characters</a> in that string with a single U+0020
  SPACE character, and then <a>strip leading and trailing whitespace</a> from that string.

  When a user agent has to <dfn>strictly split a string</dfn> on a particular delimiter character
  <var>delimiter</var>, it must use the following algorithm:

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially
      pointing at the start of the string.
  3. Let <var>tokens</var> be an ordered list of tokens, initially empty.
  4. While <var>position</var> is not past the end of <var>input</var>:
      1. <a>Collect a sequence of characters</a> that are not the <var>delimiter</var> character.
      2. Append the string collected in the previous step to <var>tokens</var>.
      3. Advance <var>position</var> to the next character in <var>input</var>.
  5. Return <var>tokens</var>.

  <p class="note">
    For the special cases of splitting a string <a>on spaces</a> and <a>on commas</a>, this
    algorithm does not apply (those algorithms also perform <a>whitespace trimming</a>).
  </p>
</div>

<h4 id="boolean-attributes">Boolean attributes</h4>

  A number of attributes are <dfn>boolean attributes</dfn>. The presence of a boolean attribute on
  an element represents the true value, and the absence of the attribute represents the false value.

  If the attribute is present, its value must either be the empty string or a value that is an
  <a>ASCII case-insensitive</a> match for the attribute's canonical name, with no leading or
  trailing whitespace.

  <p class="note">
    The values "true" and "false" are not allowed on boolean attributes. To represent a false value,
    the attribute has to be omitted altogether.
  </p>

  <div class="example">
    Here is an example of a checkbox that is checked and disabled. The <code>checked</code> and
    <code>disabled</code> attributes are the boolean attributes.

    <pre highlight="html">&lt;label>&lt;input type=checkbox checked name=cheese disabled> Cheese&lt;/label></pre>

    This could be equivalently written as this:

    <pre highlight="html">&lt;label>&lt;input type=checkbox checked=checked name=cheese disabled=disabled> Cheese&lt;/label></pre>

    You can also mix styles; the following is still equivalent:

    <pre highlight="html">&lt;label>&lt;input type='checkbox' checked name=cheese disabled=""> Cheese&lt;/label></pre>
  </div>

<h4 id="keywords-and-enumerated-attributes">Keywords and enumerated attributes</h4>

  Some attributes are defined as taking one of a finite set of keywords. Such attributes are called
  <dfn>enumerated attributes</dfn>. The keywords are each defined to map to a particular
  <em>state</em> (several keywords might map to the same state, in which case some of the keywords
  are synonyms of each other; additionally, some of the keywords can be said to be non-conforming,
  and are only in the specification for historical reasons). In addition, two default states can be
  given. The first is the <dfn><i>invalid value default</i></dfn>, the second is the
  <dfn><i>missing value default</i></dfn>.

  If an enumerated attribute is specified, the attribute's value must be an
  <a>ASCII case-insensitive</a> match for one of the given keywords that are not said to be
  non-conforming, with no leading or trailing whitespace.

  When the attribute is specified, if its value is an <a>ASCII case-insensitive</a> match for one of
  the given keywords then that keyword's state is the state that the attribute represents. If the
  attribute value matches none of the given keywords, but the attribute has an
  <i>invalid value default</i>, then the attribute represents that state. Otherwise, if the
  attribute value matches none of the keywords but there is a <i>missing value default</i> state
  defined, then <em>that</em> is the state represented by the attribute. Otherwise, there is no
  default, and invalid values mean that there is no state represented.

  When the attribute is <em>not</em> specified, if there is a <i>missing value default</i> state
  defined, then that is the state represented by the (missing) attribute. Otherwise, the absence of
  the attribute means that there is no state represented.

  <p class="note">The empty string can be a valid keyword.</p>

<h4 id="numbers">Numbers</h4>

<h5 id="signed-integers">Signed integers</h5>

  A string is a <dfn>valid integer</dfn> if it consists of one or more <a>ASCII digits</a>,
  optionally prefixed with a U+002D HYPHEN-MINUS character (-).

  A <a>valid integer</a> without a U+002D HYPHEN-MINUS (-) prefix represents the number that is
  represented in base ten by that string of digits. A <a>valid integer</a> <em>with</em> a U+002D
  HYPHEN-MINUS (-) prefix represents the number represented in base ten by the string of digits that
  follows the U+002D HYPHEN-MINUS, subtracted from zero.

  <div class="impl">
    The <dfn>rules for parsing integers</dfn> are as given in the following algorithm. When
    invoked, the steps must be followed in the order given, aborting at the first step that returns
    a value. This algorithm will return either an integer or an error.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the
        start of the string.
    3. Let <var>sign</var> have the value "positive".
    4. <a>Skip whitespace</a>.
    5. If <var>position</var> is past the end of <var>input</var>, return an error.
    6. If the character indicated by <var>position</var> (the first character) is a U+002D
        HYPHEN-MINUS character (-):
        1. Let <var>sign</var> be "negative".
        2. Advance <var>position</var> to the next character.
        3. If <var>position</var> is past the end of <var>input</var>, return an error.

        Otherwise, if the character indicated by <var>position</var> (the first character) is a
        U+002B PLUS SIGN character (+):

        1. Advance <var>position</var> to the next character. (The "<code>+</code>" is ignored, but
            it is not conforming.)
        2. If <var>position</var> is past the end of <var>input</var>, return an error.
    7. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then return
        an error.
    8. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
        resulting sequence as a base-ten integer. Let <var>value</var> be that integer.
    9. If <var>sign</var> is "positive", return <var>value</var>, otherwise return the result of
        subtracting <var>value</var> from zero.
  </div>

<h5 id="non-negative-integers">Non-negative integers</h5>

  A string is a <dfn>valid non-negative integer</dfn> if it consists of one or more
  <a>ASCII digits</a>.

  A <a>valid non-negative integer</a> represents the number that is represented in base ten by that
  string of digits.

  <div class="impl">
    The <dfn>rules for parsing non-negative integers</dfn> are as given in the following algorithm.
    When invoked, the steps must be followed in the order given, aborting at the first step that
    returns a value. This algorithm will return either zero, a positive integer, or an error.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>value</var> be the result of parsing <var>input</var> using the
        <a>rules for parsing integers</a>.
    3. If <var>value</var> is an error, return an error.
    4. If <var>value</var> is less than zero, return an error.
    5. Return <var>value</var>.
  </div>

<h5 id="floating-point-numbers">Floating-point numbers</h5>

  A string is a <dfn>valid floating-point number</dfn> if it consists of:

  1. Optionally, a U+002D HYPHEN-MINUS character (-).
  2. One or both of the following, in the given order:
      1. A series of one or more <a>ASCII digits</a>.
      2. Both of the following, in the given order:
          1. A single U+002E FULL STOP character (.).
          2. A series of one or more <a>ASCII digits</a>.
  3. Optionally:
      1. Either a U+0065 LATIN SMALL LETTER E character (e) or a U+0045 LATIN CAPITAL LETTER E
          character (E).
      2. Optionally, a U+002D HYPHEN-MINUS character (-) or U+002B PLUS SIGN character (+).
      3. A series of one or more <a>ASCII digits</a>.

  A <a>valid floating-point number</a> represents the number obtained by multiplying the significand
  by ten raised to the power of the exponent, where the significand is the first number, interpreted
  as base ten (including the decimal point and the number after the decimal point, if any, and
  interpreting the significand as a negative number if the whole string starts with a U+002D
  HYPHEN-MINUS character (-) and the number is not zero), and where the exponent is the number after
  the E, if any (interpreted as a negative number if there is a U+002D HYPHEN-MINUS character (-)
  between the E and the number and the number is not zero, or else ignoring a U+002B PLUS SIGN
  character (+) between the E and the number if there is one). If there is no E, then the exponent
  is treated as zero.

  <p class="note">
    The Infinity and Not-a-Number (NaN) values are not <a>valid floating-point numbers</a>.
  </p>

  <div class="impl">
    The <dfn>best representation of the number <var>n</var> as a floating-point number</dfn> is the
    string obtained from applying the JavaScript operator ToString to <var>n</var>. The JavaScript
    operator ToString is not uniquely determined. When there are multiple possible strings that
    could be obtained from the JavaScript operator ToString for a particular value, the user agent
    must always return the same string for that value (though it may differ from the value used by
    other user agents).

    The <dfn>rules for parsing floating-point number values</dfn> are as given in the following
    algorithm. This algorithm must be aborted at the first step that returns something. This
    algorithm will return either a number or an error.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. Let <var>value</var> have the value 1.
    4. Let <var>divisor</var> have the value 1.
    5. Let <var>exponent</var> have the value 1.
    6. <a>Skip whitespace</a>.
    7. If <var>position</var> is past the end of <var>input</var>, return an error.
    8. If the character indicated by <var>position</var> is a U+002D HYPHEN-MINUS character (-):
        1. Change <var>value</var> and <var>divisor</var> to &#x2212;1.
        2. Advance <var>position</var> to the next character.
        3. If <var>position</var> is past the end of <var>input</var>, return an error.

        Otherwise, if the character indicated by <var>position</var> (the first character) is a
        U+002B PLUS SIGN character (+):

        1. Advance <var>position</var> to the next character. (The "<code>+</code>" is ignored, but
            it is not conforming.)
        2. If <var>position</var> is past the end of <var>input</var>, return an error.

    9. If the character indicated by <var>position</var> is a U+002E FULL STOP (.), and that is not
        the last character in <var>input</var>, and the character after the character indicated by
        <var>position</var> is an <a>ASCII digit</a>, then set
        <var>value</var> to zero and jump to the step labeled <i>fraction</i>.
    10. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then return
        an error.
    11. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
        resulting sequence as a base-ten integer. Multiply <var>value</var> by that integer.
    12. If <var>position</var> is past the end of <var>input</var>, jump to the step labeled
        <i>conversion</i>.
    13. <i>Fraction</i>: If the character indicated by <var>position</var> is a U+002E FULL STOP
        (.), run these substeps:
        1. Advance <var>position</var> to the next character.
        2. If <var>position</var> is past the end of <var>input</var>, or if the character indicated
            by <var>position</var> is not an <a>ASCII digit</a>, U+0065 LATIN SMALL LETTER E (e), or
            U+0045 LATIN CAPITAL LETTER E (E), then jump to the step labeled <i>conversion</i>.
        3. If the character indicated by <var>position</var> is a U+0065 LATIN SMALL LETTER E
            character (e) or a U+0045 LATIN CAPITAL LETTER E character (E), skip the remainder of
            these substeps.
        4. <i>Fraction loop</i>: Multiply <var>divisor</var> by ten.
        5. Add the value of the character indicated by <var>position</var>, interpreted as a
            base-ten digit (0..9) and divided by <var>divisor</var>, to <var>value</var>.
        6. Advance <var>position</var> to the next character.
        7. If <var>position</var> is past the end of <var>input</var>, then jump to the step labeled
            <i>conversion</i>.
        8. If the character indicated by <var>position</var> is an <a>ASCII digit</a>, jump back to
            the step labeled <i>fraction loop</i> in these substeps.
    14. If the character indicated by <var>position</var> is a U+0065 LATIN SMALL LETTER E character
        (e) or a U+0045 LATIN CAPITAL LETTER E character (E), run these substeps:
        1. Advance <var>position</var> to the next character.
        2. If <var>position</var> is past the end of <var>input</var>, then jump to the step labeled
            <i>conversion</i>.
        3. If the character indicated by <var>position</var> is a U+002D HYPHEN-MINUS character (-):
            1. Change <var>exponent</var> to &#x2212;1.
            2. Advance <var>position</var> to the next character.
            3. If <var>position</var> is past the end of <var>input</var>, then jump to the step
                labeled <i>conversion</i>.

        Otherwise, if the character indicated by <var>position</var> is a U+002B PLUS SIGN character
        (+):

            1. Advance <var>position</var> to the next character.
            2. If <var>position</var> is past the end of <var>input</var>, then jump to the step
                labeled <i>conversion</i>.
        4. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then jump
            to the step labeled <i>conversion</i>.
        5. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
            resulting sequence as a base-ten integer. Multiply <var>exponent</var> by that integer.
        6. Multiply <var>value</var> by ten raised to the <var>exponent</var>th power.
    15. <i>Conversion</i>: Let <var>S</var> be the set of finite IEEE 754 double-precision
        floating-point values except &#x2212;0, but with two special values added: 2<sup>1024</sup>
        and &#x2212;2<sup>1024</sup>.
    16. Let <var>rounded-value</var> be the number in <var>S</var> that is closest to
        <var>value</var>, selecting the number with an even significand if there are two equally
        close values. (The two special values 2<sup>1024</sup> and &#x2212;2<sup>1024</sup> are
        considered to have even significands for this purpose.)
    17. If <var>rounded-value</var> is 2<sup>1024</sup> or &#x2212;2<sup>1024</sup>, return an
        error.
    18. Return <var>rounded-value</var>.
  </div>


  <div class="impl">
    <h5 id="percentages-and-dimensions">Percentages and lengths</h5>

    The <dfn>rules for parsing dimension values</dfn> are as given in the following algorithm. When
    invoked, the steps must be followed in the order given, aborting at the first step that returns
    a value. This algorithm will return either a number greater than or equal to 0.0, or an error;
    if a number is returned, then it is further categorized as either a percentage or a length.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Skip whitespace</a>.
    4. If <var>position</var> is past the end of <var>input</var>, return an error.
    5. If the character indicated by <var>position</var> is a U+002B PLUS SIGN character (+),
        advance <var>position</var> to the next character.
    6. If <var>position</var> is past the end of <var>input</var>, return an error.
    7. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then return
        an error.
    8. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
        resulting sequence as a base-ten integer. Let <var>value</var> be that number.
    9. If <var>position</var> is past the end of <var>input</var>, return <var>value</var> as a
        length.
    10. If the character indicated by <var>position</var> is a U+002E FULL STOP character (.):
        1. Advance <var>position</var> to the next character.
        2. If <var>position</var> is past the end of <var>input</var>, or if the character indicated
            by <var>position</var> is not an <a>ASCII digit</a>, then return <var>value</var> as a
            length.
        3. Let <var>divisor</var> have the value 1.
        4. <i>Fraction loop</i>: Multiply <var>divisor</var> by ten.
        5. Add the value of the character indicated by <var>position</var>, interpreted as a
            base-ten digit (0..9) and divided by <var>divisor</var>, to <var>value</var>.
        6. Advance <var>position</var> to the next character.
        7. If <var>position</var> is past the end of <var>input</var>, then return <var>value</var>
            as a length.
        8. If the character indicated by <var>position</var> is an <a>ASCII digit</a>, return to the
            step labeled <i>fraction loop</i> in these substeps.
    11. If <var>position</var> is past the end of <var>input</var>, return <var>value</var> as a
        length.
    12. If the character indicated by <var>position</var> is a U+0025 PERCENT SIGN character (%),
        return <var>value</var> as a percentage.
    13. Return <var>value</var> as a length.

    <h5 id="non-zero-percentages-and-lengths">Non-zero percentages and lengths</h5>

    The <dfn>rules for parsing non-zero dimension values</dfn> are as given in the following
    algorithm. When invoked, the steps must be followed in the order given, aborting at the first
    step that returns a value. This algorithm will return either a number greater than 0.0, or an
    error; if a number is returned, then it is further categorized as either a percentage or a
    length.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>value</var> be the result of parsing <var>input</var> using the
        <a>rules for parsing dimension values</a>.
    3. If <var>value</var> is an error, return an error.
    4. If <var>value</var> is zero, return an error.
    5. If <var>value</var> is a percentage, return <var>value</var> as a percentage.
    6. Return <var>value</var> as a length.
  </div>

<h5 id="lists-of-integers">Lists of integers</h5>

  A <dfn>valid list of integers</dfn> is a number of <a>valid integers</a> separated by U+002C COMMA
  characters, with no other characters (e.g. no <a>space characters</a>). In addition, there might
  be restrictions on the number of integers that can be given, or on the range of values allowed.

  <div class="impl">
    The <dfn>rules for parsing a list of integers</dfn> are as follows:

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. Let <var>numbers</var> be an initially empty list of integers. This list will be the
        result of this algorithm.
    4. If there is a character in the string <var>input</var> at position <var>position</var>, and
        it is either a U+0020 SPACE, U+002C COMMA, or U+003B SEMICOLON character, then advance
        <var>position</var> to the next character in <var>input</var>, or to beyond the end of the
        string if there are no more characters.
    5. If <var>position</var> points to beyond the end of <var>input</var>, return
        <var>numbers</var> and abort.
    6. If the character in the string <var>input</var> at position <var>position</var> is a U+0020
        SPACE, U+002C COMMA, or U+003B SEMICOLON character, then return to step 4.
    7. Let <var>negated</var> be false.
    8. Let <var>value</var> be 0.
    9. Let <var>started</var> be false. This variable is set to true when the parser sees a number
        or a U+002D HYPHEN-MINUS character (-).
    10. Let <var>got number</var> be false. This variable is set to true when the parser sees a
        number.
    11. Let <var>finished</var> be false. This variable is set to true to switch parser into a mode
        where it ignores characters until the next separator.
    12. Let <var>bogus</var> be false.
    13. <i>Parser</i>: If the character in the string <var>input</var> at position
        <var>position</var> is:
        <dl class="switch">
          <dt>A U+002D HYPHEN-MINUS character</dt>
          <dd>
            Follow these substeps:
            1. If <var>got number</var> is true, let <var>finished</var> be true.
            2. If <var>finished</var> is true, skip to the next step in the overall set of steps.
            3. If <var>started</var> is true, let <var>negated</var> be false.
            4. Otherwise, if <var>started</var> is false and if <var>bogus</var> is false, let
                <var>negated</var> be true.
            5. Let <var>started</var> be true.
          </dd>

          <dt>An <a>ASCII digit</a></dt>
          <dd>
            Follow these substeps:
            1. If <var>finished</var> is true, skip to the next step in the overall set of steps.
            2. Multiply <var>value</var> by ten.
            3. Add the value of the digit, interpreted in base ten, to <var>value</var>.
            4. Let <var>started</var> be true.
            5. Let <var>got number</var> be true.
          </dd>

          <dt>A U+0020 SPACE character</dt>
          <dt>A U+002C COMMA character</dt>
          <dt>A U+003B SEMICOLON character</dt>
          <dd>
            Follow these substeps:
            1. If <var>got number</var> is false, return the <var>numbers</var> list and abort. This
                happens if an entry in the list has no digits, as in "<code>1,2,x,4</code>".
            2. If <var>negated</var> is true, then negate <var>value</var>.
            3. Append <var>value</var> to the <var>numbers</var> list.
            4. Jump to step 4 in the overall set of steps.
          </dd>

          <dt>
            A character in the range U+0001 to U+001F, U+0021 to U+002B, U+002D to U+002F, U+003A,
            U+003C to U+0040, U+005B to U+0060, U+007b to U+007F (i.e. any other non-alphabetic
            ASCII character)
          </dt>
          <dd>
            Follow these substeps:
            1. If <var>got number</var> is true, let <var>finished</var> be true.
            2. If <var>finished</var> is true, skip to the next step in the overall set of steps.
            3. Let <var>negated</var> be false.
          </dd>

          <dt>Any other character</dt>
          <dd>
            Follow these substeps:
            1. If <var>finished</var> is true, skip to the next step in the overall set of steps.
            2. Let <var>negated</var> be false.
            3. Let <var>bogus</var> be true.
            4. If <var>started</var> is true, then return the <var>numbers</var> list, and abort.
                (The value in <var>value</var> is not appended to the list first; it is dropped.)
          </dd>
        </dl>
    14. Advance <var>position</var> to the next character in <var>input</var>, or to beyond the end
        of the string if there are no more characters.</p>
    15. If <var>position</var> points to a character (and not to beyond the end of
        <var>input</var>), jump to the big <i>Parser</i> step above.
    16. If <var>negated</var> is true, then negate <var>value</var>.
    17. If <var>got number</var> is true, then append <var>value</var> to the <var>numbers</var>
        list.
    18. Return the <var>numbers</var> list and abort.
  </div>

  <div class="impl">
    <h5 id="lists-of-dimensions">Lists of dimensions</h5>

    The <dfn>rules for parsing a list of dimensions</dfn> are as follows. These rules return a list
    of zero or more pairs consisting of a number and a unit, the unit being one of
    <i>percentage</i>, <i>relative</i>, and <i>absolute</i>.</p>

    1. If the last character in <var>raw input</var> is a U+002C COMMA character (,), then remove
        that character from <var>raw input</var>.
    2. <a>Split the string <var>raw input</var> on commas</a>. Let <var>raw tokens</var> be the
        resulting list of tokens.
    3. Let <var>result</var> be an empty list of number/unit pairs.
    4. For each token in <var>raw tokens</var>, run the following substeps:
        1. Let <var>input</var> be the token.
        2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the
            start of the string.
        3. Let <var>value</var> be the number 0.
        4. Let <var>unit</var> be <i>absolute</i>.
        5. If the character at <var>position</var> is an <a>ASCII digit</a>, <a>collect a sequence
            of characters</a> that are <a>ASCII digits</a>, interpret the resulting sequence as an
            integer in base ten, and increment <var>value</var> by that integer.
        6. If the character at <var>position</var> is a U+002E FULL STOP character (.), run these
            substeps:
            1. <a>Collect a sequence of characters</a> consisting of <a>space characters</a> and
                <a>ASCII digits</a>. Let <var>s</var> be the resulting sequence.
            2. Remove all <a>space characters</a> in <var>s</var>.
            3. If <var>s</var> is not the empty string, run these subsubsteps:
                1. Let <var>length</var> be the number of characters in <var>s</var> (after the
                    spaces were removed).
                2. Let <var>fraction</var> be the result of interpreting <var>s</var> as a base-ten
                    integer, and then dividing that number by <a>10<sup><var>length</var></sup></a>.
                3. Increment <var>value</var> by <var>fraction</var>.
        7. <a>Skip whitespace</a>.
        8. If the character at <var>position</var> is a U+0025 PERCENT SIGN character (%), then set
            <var>unit</var> to <i>percentage</i>.

        Otherwise, if the character at <var>position</var> is a U+002A ASTERISK character
        (*), then set <var>unit</var> to <i>relative</i>.

        9. Add an entry to <var>result</var> consisting of the number given by <var>value</var> and
            the unit given by <var>unit</var>.
    5. Return the list <var>result</var>.
  </div>

<h4 id="dates-and-times">Dates and times</h4>

  In the algorithms below, the
  <dfn>number of days in month <var>month</var> of year <var>year</var></dfn> is: <em>31</em> if
  <var>month</var> is 1, 3, 5, 7, 8, 10, or 12; <em>30</em> if <var>month</var> is 4, 6, 9, or 11;
  <em>29</em> if <var>month</var> is 2 and <var>year</var> is a number divisible by 400, or if
  <var>year</var> is a number divisible by 4 but not by 100; and <em>28</em> otherwise. This takes
  into account leap years in the Gregorian calendar. [[!GREGORIAN]]

  When <a>ASCII digits</a> are used in the date and time syntaxes defined in this section, they
  express numbers in base ten.</p>

  <div class="impl">
    <p class="note">
      While the formats described here are intended to be subsets of the corresponding ISO8601
      formats, this specification defines parsing rules in much more detail than ISO8601.
      Implementors are therefore encouraged to carefully examine any date parsing libraries before
      using them to implement the parsing rules described below; ISO8601 libraries might not parse
      dates and times in exactly the same manner. [[!ISO8601]]
    </p>
  </div>

  Where this specification refers to the <dfn>proleptic Gregorian calendar</dfn>, it means the
  modern Gregorian calendar, extrapolated backwards to year 1. A date in the
  <a>proleptic Gregorian calendar</a>, sometimes explicitly referred to as a
  <dfn>proleptic-Gregorian date</dfn>, is one that is described using that calendar even if that
  calendar was not in use at the time (or place) in question. [[!GREGORIAN]]

  <p class="note">
    The use of the Gregorian calendar as the wire format in this specification is an arbitrary
    choice resulting from the cultural biases of those involved in the decision. See also the
    section discussing <a>date, time, and number formats</a> in forms <span class="impl">(for
    authors), <a>implemention notes regarding localization of form controls</a>,</span> and the
    <code>time</code> element.
  </p>

<h5 id="months">Months</h5>

  A <dfn>month</dfn> consists of a specific <a>proleptic-Gregorian date</a> with no time-zone
  information and no date information beyond a year and a month. [[!GREGORIAN]]

  A string is a <dfn>valid month string</dfn> representing a year <var>year</var> and month
  <var>month</var> if it consists of the following components in the given order:

  1. Four or more <a>ASCII digits</a>, representing <var>year</var>, where
      <var>year</var>&nbsp;&gt;&nbsp;0
  2. A U+002D HYPHEN-MINUS character (-)
  3. Two <a>ASCII digits</a>, representing the month <var>month</var>, in the range
      1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12

  <div class="impl">
    The rules to <dfn>parse a month string</dfn> are as follows. This will return either a year and
    month, or nothing. If at any point the algorithm says that it "fails", this means that it is
    aborted at that point and returns nothing.</p>

    1. Let <var>input</var> be the string being parsed.</p>
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a month component</a> to obtain <var>year</var> and <var>month</var>. If this
        returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Return <var>year</var> and <var>month</var>.

    The rules to <dfn>parse a month component</dfn>, given an <var>input</var> string and a
    <var>position</var>, are as follows. This will return either a year and a month, or nothing. If
    at any point the algorithm says that it "fails", this means that it is aborted at that point and
    returns nothing.

    1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not at least four characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>year</var>.
    2. If <var>year</var> is not a number greater than zero, then fail.
    3. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
        <var>position</var> forwards one character.
    4. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>month</var>.
    5. If <var>month</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12, then fail.
    6. Return <var>year</var> and <var>month</var>.
  </div>

<h5 id="dates">Dates</h5>

  A <dfn>date</dfn> consists of a specific <a>proleptic-Gregorian date</a> with no time-zone
  information, consisting of a year, a month, and a day. [[!GREGORIAN]]

  A string is a <dfn>valid date string</dfn> representing a year <var>year</var>, month
  <var>month</var>, and day <var>day</var> if it consists of the following components in the given
  order:

  1. A <a>valid month string</a>, representing <var>year</var> and <var>month</var>
  2. A U+002D HYPHEN-MINUS character (-)
  3. Two <a>ASCII digits</a>, representing <var>day</var>, in the range
      1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var> where <var>maxday</var> is
      the <a>number of days in the month <var>month</var> and year <var>year</var></a>

  <div class="impl">
    The rules to <dfn>parse a date string</dfn> are as follows. This will return either a date, or
    nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
    that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.</p>
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and
        <var>day</var>. If this returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Let <var>date</var> be the date with year <var>year</var>, month <var>month</var>, and day
        <var>day</var>.
    6. Return <var>date</var>.

    The rules to <dfn>parse a date component</dfn>, given an <var>input</var> string and a
    <var>position</var>, are as follows. This will return either a year, a month, and a day, or
    nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
    that point and returns nothing.

    1. <a>Parse a month component</a> to obtain <var>year</var> and <var>month</var>. If this
        returns nothing, then fail.
    2. Let <var>maxday</var> be the
        <a>number of days in month <var>month</var> of year <var>year</var></a>.
    3. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
        <var>position</var> forwards one character.
    4. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>day</var>.
    5. If <var>day</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var>, then fail.
    6. Return <var>year</var>, <var>month</var>, and <var>day</var>.
  </div>

<h5 id="yearless-dates">Yearless dates</h5>

  A <dfn>yearless date</dfn> consists of a Gregorian month and a
  day within that month, but with no associated year. [[!GREGORIAN]]

  A string is a <dfn>valid yearless date string</dfn> representing a month <var>month</var> and a
  day <var>day</var> if it consists of the following components in the given order:

  1. Optionally, two U+002D HYPHEN-MINUS characters (-)
  2. Two <a>ASCII digits</a>, representing the month <var>month</var>, in the range
      1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12
  3. A U+002D HYPHEN-MINUS character (-)
  4. Two <a>ASCII digits</a>, representing <var>day</var>, in the range
      1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var> where <var>maxday</var> is
      the <a>number of days</a> in the month <var>month</var> and any arbitrary leap year (e.g. 4 or
      2000)

  <p class="note">
    In other words, if the <var>month</var> is "<code>02</code>", meaning February, then the day can
    be 29, as if the year was a leap year.
  </p>

  <div class="impl">
    The rules to <dfn>parse a yearless date string</dfn> are as follows. This will return either a
    month and a day, or nothing. If at any point the algorithm says that it "fails", this means that
    it is aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a yearless date component</a> to obtain <var>month</var> and <var>day</var>. If this
        returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Return <var>month</var> and <var>day</var>.

    The rules to <dfn>parse a yearless date component</dfn>, given an <var>input</var> string and a
    <var>position</var>, are as follows. This will return either a month and a day, or nothing. If
    at any point the algorithm says that it "fails", this means that it is aborted at that point and
    returns nothing.

    1. <a>Collect a sequence of characters</a> that are U+002D HYPHEN-MINUS characters (-). If the
        collected sequence is not exactly zero or two characters long, then fail.
    2. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>month</var>.
    3. If <var>month</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12, then fail.
    4. Let <var>maxday</var> be the <a>number of days</a> in month <var>month</var> of any arbitrary
        leap year (e.g. 4 or 2000).
    5. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
        <var>position</var> forwards one character.
    6. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>day</var>.
    7. If <var>day</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var>, then fail.
    8. Return <var>month</var> and <var>day</var>.
  </div>

<h5 id="times">Times</h5>

  A <dfn>time</dfn> consists of a specific time with no time-zone information, consisting of an
  hour, a minute, a second, and a fraction of a second.

  A string is a <dfn>valid time string</dfn> representing an hour <var>hour</var>, a minute
  <var>minute</var>, and a second <var>second</var> if it consists of the following components in
  the given order:

  1. Two <a>ASCII digits</a>, representing <var>hour</var>, in the range
      0&nbsp;&le;&nbsp;<var>hour</var>&nbsp;&le;&nbsp;23
  2. A U+003A COLON character (:)
  3. Two <a>ASCII digits</a>, representing <var>minute</var>, in the range
      0&nbsp;&le;&nbsp;<var>minute</var>&nbsp;&le;&nbsp;59
  4. If <var>second</var> is non-zero, or optionally if <var>second</var> is zero:
      1. A U+003A COLON character (:)
      2. Two <a>ASCII digits</a>, representing the integer part of <var>second</var>, in the
          range 0&nbsp;&le;&nbsp;<var>s</var>&nbsp;&le;&nbsp;59
      3. If <var>second</var> is not an integer, or optionally if <var>second</var> is an integer:
          1. A 002E FULL STOP character (.)
          2. One, two, or three <a>ASCII digits</a>, representing the fractional part of
              <var>second</var>

  <p class="note">
    The <var>second</var> component cannot be 60 or 61; leap seconds cannot be represented.
  </p>

  <div class="impl">
    The rules to <dfn>parse a time string</dfn> are as follows. This will return either a time, or
    nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
    that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a time component</a> to obtain <var>hour</var>, <var>minute</var>, and
        <var>second</var>. If this returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Let <var>time</var> be the time with hour <var>hour</var>, minute <var>minute</var>, and
        second <var>second</var>.
    6. Return <var>time</var>.

    The rules to <dfn>parse a time component</dfn>, given an <var>input</var> string and a
    <var>position</var>, are as follows. This will return either an hour, a minute, and a second, or
    nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
    that point and returns nothing.

    1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the
        collected sequence is not exactly two characters long, then fail. Otherwise, interpret the
        resulting sequence as a base-ten integer. Let that number be the <var>hour</var>.
    2. If <var>hour</var> is not a number in the range
        0&nbsp;&le;&nbsp;<var>hour</var>&nbsp;&le;&nbsp;23, then fail.
    3. If <var>position</var> is beyond the end of <var>input</var> or if the
        character at <var>position</var> is not a U+003A COLON character, then fail. Otherwise,
        move <var>position</var> forwards one character.
    4. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>minute</var>.
    5. If <var>minute</var> is not a number in the range
        0&nbsp;&le;&nbsp;<var>minute</var>&nbsp;&le;&nbsp;59, then fail.
    6. Let <var>second</var> be a string with the value "0".
    7. If <var>position</var> is not beyond the end of <var>input</var> and the character at
        <var>position</var> is a U+003A COLON, then run these substeps:
        1. Advance <var>position</var> to the next character in <var>input</var>.
        2. If <var>position</var> is beyond the end of <var>input</var>, or at the last character in
            <var>input</var>, or if the next <em>two</em> characters in <var>input</var> starting at
            <var>position</var> are not both <a>ASCII digits</a>, then fail.
        3. <a>Collect a sequence of characters</a> that are either <a>ASCII digits</a> or U+002E
            FULL STOP characters. If the collected sequence is three characters long, or if it is
            longer than three characters long and the third character is not a U+002E FULL STOP
            character, or if it has more than one U+002E FULL STOP character, then fail. Otherwise,
            let the collected string be <var>second</var> instead of its previous value.

    8. Interpret <var>second</var> as a base-ten number (possibly with a fractional part). Let
        <var>second</var> be that number instead of the string version.
    9. If <var>second</var> is not a number in the range
        0&nbsp;&le;&nbsp;<var>second</var>&nbsp;&lt;&nbsp;60, then fail.
    10. Return <var>hour</var>, <var>minute</var>, and <var>second</var>.
  </div>

<h5 id="floating-dates-and-times">Floating dates and times</h5>

  A <dfn>floating date and time</dfn> consists of a specific <a>proleptic-Gregorian date</a>,
  consisting of a year, a month, and a day, and a time, consisting of an hour, a minute, a second,
  and a fraction of a second, but expressed without a time zone. [[!GREGORIAN]]

  A string is a <dfn>valid floating date and time string</dfn> representing a date and time if it
  consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date
  2. A U+0054 LATIN CAPITAL LETTER T character (T) or a U+0020 SPACE character
  3. A <a>valid time string</a> representing the time

  A string is a <dfn>valid normalized floating date and time string</dfn> representing a date and
  time if it consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date
  2. A U+0054 LATIN CAPITAL LETTER T character (T)
  3. A <a>valid time string</a> representing the time, expressed as the shortest possible string for
      the given time (e.g. omitting the seconds component entirely if the given time is zero seconds
      past the minute)

  <div class="impl">
    The rules to <dfn>parse a floating date and time string</dfn> are as follows. This will return
    either a date and time, or nothing. If at any point the algorithm says that it "fails", this
    means that it is aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and
        <var>day</var>. If this returns nothing, then fail.
    4. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is neither a U+0054 LATIN CAPITAL LETTER T character (T) nor a U+0020
        SPACE character, then fail. Otherwise, move <var>position</var> forwards one character.
    5. <a>Parse a time component</a> to obtain <var>hour</var>, <var>minute</var>, and
        <var>second</var>. If this returns nothing, then fail.
    6. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    7. Let <var>date</var> be the date with year <var>year</var>, month <var>month</var>, and day
        <var>day</var>.
    8. Let <var>time</var> be the time with hour <var>hour</var>, minute <var>minute</var>, and
        second <var>second</var>.
    9. Return <var>date</var> and <var>time</var>.
  </div>

<h5 id="time-zones">Time zones</h5>

  A <dfn>time-zone offset</dfn> consists of a signed number of hours and minutes.

  A string is a <dfn>valid time-zone offset string</dfn> representing a time-zone offset if it
  consists of either:

  * A U+005A LATIN CAPITAL LETTER Z character (Z), allowed only if the time zone is UTC
  * Or, the following components, in the given order:
    1. Either a U+002B PLUS SIGN character (+) or, if the time-zone offset is not zero, a U+002D
        HYPHEN-MINUS character (-), representing the sign of the time-zone offset
    2. Two <a>ASCII digits</a>, representing the hours component <var>hour</var> of the
        time-zone offset, in the range 0&nbsp;&le;&nbsp;<var>hour</var>&nbsp;&le;&nbsp;23
    3. Optionally, a U+003A COLON character (:)
    4. Two <a>ASCII digits</a>, representing the minutes component <var>minute</var> of the
        time-zone offset, in the range 0&nbsp;&le;&nbsp;<var>minute</var>&nbsp;&le;&nbsp;59

  <p class="note">
    This format allows for time-zone offsets from -23:59 to +23:59. In practice, however, right now
    the range of offsets of actual time zones is -12:00 to +14:00, and the minutes component of
    offsets of actual time zones is always either 00, 30, or 45. There is no guarantee that this
    will remain so forever, however; time zones are changed by countries at will and do not follow a
    standard.
  </p>

  <p class="note">
    See also the usage notes and examples in the <a>global date and time</a> section below for
    details on using time-zone offsets with historical times that predate the formation of formal
    time zones.
  </p>

  <div class="impl">
    The rules to <dfn>parse a time-zone offset string</dfn> are as follows. This will return either
    a time-zone offset, or nothing. If at any point the algorithm says that it "fails", this means
    that it is aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a time-zone offset component</a> to obtain <var>timezone<sub>hours</sub></var> and
        <var>timezone<sub>minutes</sub></var>. If this returns nothing, then fail.
    4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    5. Return the time-zone offset that is <var>timezone<sub>hours</sub></var> hours and
        <var>timezone<sub>minutes</sub></var> minutes from UTC.

    The rules to <dfn>parse a time-zone offset component</dfn>, given an <var>input</var> string and
    a <var>position</var>, are as follows. This will return either time-zone hours and time-zone
    minutes, or nothing. If at any point the algorithm says that it "fails", this means that it is
    aborted at that point and returns nothing.

    1. If the character at <var>position</var> is a U+005A LATIN CAPITAL LETTER Z character (Z),
        then:
        1. Let <var>timezone<sub>hours</sub></var> be 0.
        2. Let <var>timezone<sub>minutes</sub></var> be 0.
        3. Advance <var>position</var> to the next character in <var>input</var>.

        Otherwise, if the character at <var>position</var> is either a U+002B PLUS SIGN (+) or a
        U+002D HYPHEN-MINUS (-), then:

        1. If the character at <var>position</var> is a U+002B PLUS SIGN (+), let <var>sign</var> be
            "positive". Otherwise, it's a U+002D HYPHEN-MINUS (-); let <var>sign</var> be
            "negative".
        2. Advance <var>position</var> to the next character in <var>input</var>.
        3. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. Let <var>s</var> be
            the collected sequence.
        4. If <var>s</var> is exactly two characters long, then run these substeps:
            1. Interpret <var>s</var> as a base-ten integer. Let that number be the
                <var>timezone<sub>hours</sub></var>.
            2. If <var>position</var> is beyond the end of <var>input</var> or if the character at
                <var>position</var> is not a U+003A COLON character, then fail. Otherwise, move
                <var>position</var> forwards one character.
            3. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the
                collected sequence is not exactly two characters long, then fail. Otherwise,
                interpret the resulting sequence as a base-ten integer. Let that number be the
                <var>timezone<sub>minutes</sub></var>.

            If <var>s</var> is exactly four characters long, then run these substeps:

            1. Interpret the first two characters of <var>s</var> as a base-ten integer. Let that
                number be the <var>timezone<sub>hours</sub></var>.
            2. Interpret the last two characters of <var>s</var> as a base-ten integer. Let that
                number be the <var>timezone<sub>minutes</sub></var>.

            Otherwise, fail.</p>

        5. If <var>timezone<sub>hours</sub></var> is not a number in the range
            0&nbsp;&le;&nbsp;<var>timezone<sub>hours</sub></var>&nbsp;&le;&nbsp;23, then fail.
        6. If <var>sign</var> is "negative", then negate <var>timezone<sub>hours</sub></var>.
        7. If <var>timezone<sub>minutes</sub></var> is not a number in the range
            0&nbsp;&le;&nbsp;<var>timezone<sub>minutes</sub></var>&nbsp;&le;&nbsp;59, then fail.
        8. If <var>sign</var> is "negative", then negate <var>timezone<sub>minutes</sub></var>.

        Otherwise, fail.

    2. Return <var>timezone<sub>hours</sub></var> and <var>timezone<sub>minutes</sub></var>.
  </div>

<h5 id="global-dates-and-times">Global dates and times</h5>

  A <dfn>global date and time</dfn> consists of a specific <a>proleptic-Gregorian date</a>,
  consisting of a year, a month, and a day, and a time, consisting of an hour, a minute, a second,
  and a fraction of a second, expressed with a time-zone offset, consisting of a signed number of
  hours and minutes. [[!GREGORIAN]]

  A string is a <dfn>valid global date and time string</dfn> representing a date, time, and a
  time-zone offset if it consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date
  2. A U+0054 LATIN CAPITAL LETTER T character (T) or a U+0020 SPACE character
  3. A <a>valid time string</a> representing the time
  4. A <a>valid time-zone offset string</a> representing the time-zone offset

  Times in dates before the formation of UTC in the mid twentieth century must be expressed and
  interpreted in terms of UT1 (contemporary Earth solar time at the 0&deg; longitude), not UTC (the
  approximation of UT1 that ticks in SI seconds). Time before the formation of time zones must be
  expressed and interpeted as UT1 times with explicit time zones that approximate the contemporary
  difference between the appropriate local time and the time observed at the location of Greenwich,
  London.

  <div class="example">
    The following are some examples of dates written as <a>valid global date and time strings</a>.

    : "<code>0037-12-13 00:00Z</code>"
    :: Midnight in areas using London time on the birthday of Nero (the Roman Emperor). See below
        for further discussion on which date this actually corresponds to.

    : "<code>1979-10-14T12:00:00.001-04:00</code>"
    :: One millisecond after noon on October 14th 1979, in the time zone in use on the east coast of
        the USA during daylight saving time.

    : "<code>8592-01-01T02:09+02:09</code>"
    :: Midnight UTC on the 1st of January, 8592. The time zone associated with that time is two
        hours and nine minutes ahead of UTC, which is not currently a real time zone, but is
        nonetheless allowed.

    Several things are notable about these dates:

    * Years with fewer than four digits have to be zero-padded. The date "37-12-13" would not be a
        valid date.
    * If the "<code>T</code>" is replaced by a space, it must be a single space character. The
        string "<code>2001-12-21&nbsp;&nbsp;12:00Z</code>" (with two spaces between the components)
        would not be parsed successfully.
    * To unambiguously identify a moment in time prior to the introduction of the Gregorian calendar
        (insofar as moments in time before the formation of UTC can be unambiguously identified),
        the date has to be first converted to the Gregorian calendar from the calendar in use at the
        time (e.g. from the Julian calendar). The date of Nero's birth is the 15th of December 37,
        in the Julian Calendar, which is the 13th of December 37 in the
        <a>proleptic Gregorian calendar</a>.
    * The time and time-zone offset components are not optional.
    * Dates before the year one can't be represented as a datetime in this version of HTML.
    * Times of specific events in ancient times are, at best, approximations, since time was not
        well coordinated or measured until relatively recent decades.
    * Time-zone offsets differ based on daylight savings time.
  </div>

  <p class="note">
    The zone offset is not a complete time zone specification. When working with real date and time
    values, consider using a separate field for time zone, perhaps using IANA time zone IDs.
    [[!TIMEZONE]]
  </p>

  A string is a <dfn>valid normalized forced-UTC global date and time string</dfn> representing a
  date, time, and a time-zone offset if it consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date converted to the UTC time zone
  2. A U+0054 LATIN CAPITAL LETTER T character (T)
  3. A <a>valid time string</a> representing the time converted to the UTC time zone and expressed
      as the shortest possible string for the given time (e.g. omitting the seconds component
      entirely if the given time is zero seconds past the minute)
  4. A U+005A LATIN CAPITAL LETTER Z character (Z)

  <div class="impl">
    The rules to <dfn>parse a global date and time string</dfn> are as follows. This will return
    either a time in UTC, with associated time-zone offset information for round-tripping or display
    purposes, or nothing. If at any point the algorithm says that it "fails", this means that it is
    aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and
        <var>day</var>. If this returns nothing, then fail.
    4. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is neither a U+0054 LATIN CAPITAL LETTER T character (T) nor a U+0020
        SPACE character, then fail. Otherwise, move <var>position</var> forwards one character.
    5. <a>Parse a time component</a> to obtain <var>hour</var>, <var>minute</var>, and
        <var>second</var>. If this returns nothing, then fail.
    6. If <var>position</var> is beyond the end of <var>input</var>, then fail.
    7. <a>Parse a time-zone offset component</a> to obtain <var>timezone<sub>hours</sub></var> and
        <var>timezone<sub>minutes</sub></var>. If this returns nothing, then fail.
    8. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    9. Let <var>time</var> be the moment in time at year <var>year</var>, month <var>month</var>,
        day <var>day</var>, hours <var>hour</var>, minute <var>minute</var>, second
        <var>second</var>, subtracting <var>timezone<sub>hours</sub></var> hours and
        <var>timezone<sub>minutes</sub></var> minutes. That moment in time is a moment in the UTC
        time zone.
    10. Let <var>timezone</var> be <var>timezone<sub>hours</sub></var> hours and
        <var>timezone<sub>minutes</sub></var> minutes from UTC.
    11. Return <var>time</var> and <var>timezone</var>.
  </div>

<h5 id="weeks">Weeks</h5>

  A <dfn>week</dfn> consists of a week-year number and a week number representing a seven-day period
  starting on a Monday. Each week-year in this calendaring system has either 52 or 53 such seven-day
  periods, as defined below. The seven-day period starting on the Gregorian date Monday December
  29th 1969 (1969-12-29) is defined as week number 1 in week-year 1970. Consecutive weeks are
  numbered sequentially. The week before the number 1 week in a week-year is the last week in the
  previous week-year, and vice versa. [[!GREGORIAN]]

  A week-year with a number <var>year</var> has 53 weeks if it corresponds to either a year
  <var>year</var> in the <a>proleptic Gregorian calendar</a> that has a Thursday as its first
  day (January 1st), or a year <var>year</var> in the <a>proleptic Gregorian calendar</a> that has
  a Wednesday as its first day (January 1st) and where <var>year</var> is a number divisible by 400,
  or a number divisible by 4 but not by 100. All other week-years have 52 weeks.

  The <dfn>week number of the last day</dfn> of a week-year with 53 weeks is 53; the week number of
  the last day of a week-year with 52 weeks is 52.

  <p class="note">
    The week-year number of a particular day can be different than the number of the year that
    contains that day in the <a>proleptic Gregorian calendar</a>. The first week in a week-year
    <var>y</var> is the week that contains the first Thursday of the Gregorian year <var>y</var>.

  <p class="note">
    For modern purposes, a <a>week</a> as defined here is equivalent to ISO weeks as defined in ISO
    8601. [[!ISO8601]]

    A string is a <dfn>valid week string</dfn> representing a week-year <var>year</var> and week
    <var>week</var> if it consists of the following components in the given order:
  </p>

  1. Four or more <a>ASCII digits</a>, representing <var>year</var>, where
      <var>year</var>&nbsp;&gt;&nbsp;0
  2. A U+002D HYPHEN-MINUS character (-)
  3. A U+0057 LATIN CAPITAL LETTER W character (W)
  4. Two <a>ASCII digits</a>, representing the week <var>week</var>, in the range
      1&nbsp;&le;&nbsp;<var>week</var>&nbsp;&le;&nbsp;<var>maxweek</var>, where <var>maxweek</var>
      is the <a>week number of the last day</a> of week-year <var>year</var>

  <div class="impl">
    The rules to <dfn>parse a week string</dfn> are as follows. This will return either a week-year
    number and week number, or nothing. If at any point the algorithm says that it "fails", this
    means that it is aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not at least four characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>year</var>.
    4. If <var>year</var> is not a number greater than zero, then fail.
    5. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
        <var>position</var> forwards one character.
    6. If <var>position</var> is beyond the end of <var>input</var> or if the character at
        <var>position</var> is not a U+0057 LATIN CAPITAL LETTER W character (W), then fail.
        Otherwise, move <var>position</var> forwards one character.
    7. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
        sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
        sequence as a base-ten integer. Let that number be the <var>week</var>.
    8. Let <var>maxweek</var> be the <a>week number of the last day</a> of year <var>year</var>.
    9. If <var>week</var> is not a number in the range
        1&nbsp;&le;&nbsp;<var>week</var>&nbsp;&le;&nbsp;<var>maxweek</var>, then fail.
    10. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    11. Return the week-year number <var>year</var> and the week number <var>week</var>.
  </div>

<h5 id="durations">Durations</h5>

  A <dfn>duration</dfn> consists of a number of seconds.

  <p class="note">
    Since months and seconds are not comparable (a month is not a precise number of seconds, but is
    instead a period whose exact length depends on the precise day from which it is measured) a
    <a>duration</a> as defined in this specification cannot include months (or years, which are
    equivalent to twelve months). Only durations that describe a specific number of seconds can be
    described.
  </p>

  A string is a <dfn>valid duration string</dfn> representing a <a>duration</a> <var>t</var> if it
  consists of either of the following:

  * A literal U+0050 LATIN CAPITAL LETTER P character followed by one or more of the following
    subcomponents, in the order given, where the number of days, hours, minutes, and seconds
    corresponds to the same number of seconds as in <var>t</var>:

    1. One or more <a>ASCII digits</a> followed by a U+0044 LATIN CAPITAL LETTER D character,
        representing a number of days.
    2. A U+0054 LATIN CAPITAL LETTER T character followed by one or more of the following
        subcomponents, in the order given:
        1. One or more <a>ASCII digits</a> followed by a U+0048 LATIN CAPITAL LETTER H
            character, representing a number of hours.
        2. One or more <a>ASCII digits</a> followed by a U+004D LATIN CAPITAL LETTER M
            character, representing a number of minutes.
        3. The following components:
            1. One or more <a>ASCII digits</a>, representing a number of seconds.
            2. Optionally, a U+002E FULL STOP character (.) followed by one, two, or three
                <a>ASCII digits</a>, representing a fraction of a second.
            3. A U+0053 LATIN CAPITAL LETTER S character.

    <p class="note">
      This, as with a number of other date- and time-related microsyntaxes defined in this
      specification, is based on one of the formats defined in ISO 8601. [[!ISO8601]]
    </p>

    * One or more <a>duration time components</a>, each with a different
        <a>duration time component scale</a>, in any order; the sum of the represented seconds being
        equal to the number of seconds in <var>t</var>.

        A <dfn>duration time component</dfn> is a string consisting of the following components:

        1. Zero or more <a>space characters</a>.
        2. One or more <a>ASCII digits</a>, representing a number of time units, scaled by the
            <a>duration time component scale</a> specified (see below) to represent a number of
            seconds.
        3. If the <a>duration time component scale</a> specified is 1 (i.e. the units are seconds),
            then, optionally, a U+002E FULL STOP character (.) followed by one, two, or three
            <a>ASCII digits</a>, representing a fraction of a second.
        4. Zero or more <a>space characters</a>.
        5. One of the following characters, representing the
            <dfn>duration time component scale</dfn> of the time unit used in the numeric part of
            the <a>duration time component</a>:

            : U+0057 LATIN CAPITAL LETTER W character
            : U+0077 LATIN SMALL LETTER W character
            :: Weeks. The scale is 604800.

            : U+0044 LATIN CAPITAL LETTER D character
            : U+0064 LATIN SMALL LETTER D character
            :: Days. The scale is 86400.

            : U+0048 LATIN CAPITAL LETTER H character
            : U+0068 LATIN SMALL LETTER H character
            :: Hours. The scale is 3600.

            : U+004D LATIN CAPITAL LETTER M character
            : U+006D LATIN SMALL LETTER M character
            :: Minutes. The scale is 60.

            : U+0053 LATIN CAPITAL LETTER S character
            : U+0073 LATIN SMALL LETTER S character
            :: Seconds. The scale is 1.

        6. Zero or more <a>space characters</a>.

      <p class="note">
        This is not based on any of the formats in ISO 8601. It is intended to be a more
        human-readable alternative to the ISO 8601 duration format.
      </p>

  <div class="impl">
    The rules to <dfn>parse a duration string</dfn> are as follows. This will return either a
    <a>duration</a> or nothing. If at any point the algorithm says that it "fails", this means that
    it is aborted at that point and returns nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. Let <var>months</var>, <var>seconds</var>, and <var>component count</var> all be zero.
    4. Let <var>M-disambiguator</var> be <i>minutes</i>.
        <p class="note">
          This flag's other value is <i>months</i>. It is used to disambiguate the "M" unit in
          ISO8601 durations, which use the same unit for months and minutes. Months are not allowed,
          but are parsed for future compatibility and to avoid misinterpreting ISO8601 durations
          that would be valid in other contexts.
        </p>
    5. <a>Skip whitespace</a>.
    6. If <var>position</var> is past the end of <var>input</var>, then fail.
    7. If the character in <var>input</var> pointed to by <var>position</var> is a U+0050 LATIN
        CAPITAL LETTER P character, then advance <var>position</var> to the next character, set
        <var>M-disambiguator</var> to <i>months</i>, and <a>skip whitespace</a>.
    8. Run the following substeps in a loop, until a step requiring the loop to be broken or the
        entire algorithm to fail is reached:
        1. Let <var>units</var> be undefined. It will be assigned one of the following values:
            <i>years</i>, <i>months</i>, <i>weeks</i>, <i>days</i>, <i>hours</i>, <i>minutes</i>,
            and <i>seconds</i>.
        2. Let <var>next character</var> be undefined. It is used to process characters from the
            <var>input</var>.
        3. If <var>position</var> is past the end of <var>input</var>, then break the loop.
        4. If the character in <var>input</var> pointed to by <var>position</var> is a U+0054 LATIN
            CAPITAL LETTER T character, then advance <var>position</var> to the next character, set
            <var>M-disambiguator</var> to <i>minutes</i>, <a>skip whitespace</a>, and return to the
            top of the loop.
        5. Set <var>next character</var> to the character in <var>input</var> pointed to by
            <var>position</var>.
        6. If <var>next character</var> is a U+002E FULL STOP character (.), then let <var>N</var>
            equal zero. (Do not advance <var>position</var>. That is taken care of below.)

            Otherwise, if <var>next character</var> is an <a>ASCII digit</a>, then <a>collect a
            sequence of characters</a> that are <a>ASCII digits</a>, interpret the resulting
            sequence as a base-ten integer, and let <var>N</var> be that number.

            Otherwise <var>next character</var> is not part of a number; fail.

        7. If <var>position</var> is past the end of <var>input</var>, then fail.
        8. Set <var>next character</var> to the character in <var>input</var> pointed to by
            <var>position</var>, and this time advance <var>position</var> to the next character.
            (If <var>next character</var> was a U+002E FULL STOP character (.) before, it will still
            be that character this time.)
        9. If <var>next character</var> is a U+002E FULL STOP character (.), then run these
            substeps:
            1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. Let
                <var>s</var> be the resulting sequence.
            2. If <var>s</var> is the empty string, then fail.
            3. Let <var>length</var> be the number of characters in <var>s</var>.
            4. Let <var>fraction</var> be the result of interpreting <var>s</var> as a base-ten
                integer, and then dividing that number by <a>10<sup><var>length</var></sup></a>.
            5. Increment <var>N</var> by <var>fraction</var>.
            6. <a>Skip whitespace</a>.
            7. If <var>position</var> is past the end of <var>input</var>, then fail.
            8. Set <var>next character</var> to the character in <var>input</var> pointed to by
                <var>position</var>, and advance <var>position</var> to the next character.
            9. If <var>next character</var> is neither a U+0053 LATIN CAPITAL LETTER S character nor
                a U+0073 LATIN SMALL LETTER S character, then fail.
            10. Set <var>units</var> to <i>seconds</i>.

            Otherwise, run these substeps:

            1. If <var>next character</var> is a <a>space character</a>, then
                <a>skip whitespace</a>, set <var>next character</var> to the character in
                <var>input</var> pointed to by <var>position</var>, and advance <var>position</var>
                to the next character.
            2. If <var>next character</var> is a U+0059 LATIN CAPITAL LETTER Y character, or a
                U+0079 LATIN SMALL LETTER Y character, set <var>units</var> to <i>years</i> and set
                <var>M-disambiguator</var> to <i>months</i>.

                If <var>next character</var> is a U+004D LATIN CAPITAL LETTER M character or a
                U+006D LATIN SMALL LETTER M character, and <var>M-disambiguator</var> is
                <i>months</i>, then set <var>units</var> to <i>months</i>.

                If <var>next character</var> is a U+0057 LATIN CAPITAL LETTER W character or a
                U+0077 LATIN SMALL LETTER W character, set <var>units</var> to <i>weeks</i> and set
                <var>M-disambiguator</var> to <i>minutes</i>.

                If <var>next character</var> is a U+0044 LATIN CAPITAL LETTER D character or a
                U+0064 LATIN SMALL LETTER D character, set <var>units</var> to <i>days</i> and set
                <var>M-disambiguator</var> to <i>minutes</i>.

                If <var>next character</var> is a U+0048 LATIN CAPITAL LETTER H character or a
                U+0068 LATIN SMALL LETTER H character, set <var>units</var> to <i>hours</i> and set
                <var>M-disambiguator</var> to <i>minutes</i>.

                If <var>next character</var> is a U+004D LATIN CAPITAL LETTER M character or a
                U+006D LATIN SMALL LETTER M character, and <var>M-disambiguator</var> is
                <i>minutes</i>, then set <var>units</var> to <i>minutes</i>.

                If <var>next character</var> is a U+0053 LATIN CAPITAL LETTER S character or a
                U+0073 LATIN SMALL LETTER S character, set <var>units</var> to <i>seconds</i> and
                set <var>M-disambiguator</var> to <i>minutes</i>.

                Otherwise if <var>next character</var> is none of the above characters, then fail.

        10. Increment <var>component count</var>.
        11. Let <var>multiplier</var> be 1.
        12. If <var>units</var> is <i>years</i>, multiply <var>multiplier</var> by 12 and set
            <var>units</var> to <i>months</i>.
        13. If <var>units</var> is <i>months</i>, add the product of <var>N</var> and
            <var>multiplier</var> to <var>months</var>.

            Otherwise, run these substeps:

            1. If <var>units</var> is <i>weeks</i>, multiply <var>multiplier</var> by 7 and set
                <var>units</var> to <i>days</i>.
            2. If <var>units</var> is <i>days</i>, multiply <var>multiplier</var> by 24 and set
                <var>units</var> to <i>hours</i>.
            3. If <var>units</var> is <i>hours</i>, multiply <var>multiplier</var> by 60 and set
                <var>units</var> to <i>minutes</i>.
            4. If <var>units</var> is <i>minutes</i>, multiply <var>multiplier</var> by 60 and set
                <var>units</var> to <i>seconds</i>.
            5. Forcibly, <var>units</var> is now <i>seconds</i>. Add the product of <var>N</var> and
                <var>multiplier</var> to <var>seconds</var>.
        14. <a>Skip whitespace</a>.

    9. If <var>component count</var> is zero, fail.
    10. If <var>months</var> is not zero, fail.
    11. Return the <a>duration</a> consisting of <var>seconds</var> seconds.
  </div>

<h5 id="vaguer-moments-in-time">Vaguer moments in time</h5>

  A string is a <dfn>valid date string with optional time</dfn> if it is also one of the following:

  * A <a>valid date string</a>
  * A <a>valid global date and time string</a>

  <div class="impl">
    <hr />

    The rules to <dfn>parse a date or time string</dfn> are as follows. The algorithm will return
    either a <a>date</a>, a <a>time</a>, a <a>global date and time</a>, or nothing. If at any point
    the algorithm says that it "fails", this means that it is aborted at that point and returns
    nothing.

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. Set <var>start position</var> to the same position as <var>position</var>.
    4. Set the <var>date present</var> and <var>time present</var> flags to true.
    5. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and
        <var>day</var>. If this fails, then set the <var>date present</var> flag to false.
    6. If <var>date present</var> is true, and <var>position</var> is not beyond the end of
        <var>input</var>, and the character at <var>position</var> is either a U+0054 LATIN CAPITAL
        LETTER T character (T) or a U+0020 SPACE character, then advance <var>position</var> to the
        next character in <var>input</var>.

        Otherwise, if <var>date present</var> is true, and either <var>position</var> is beyond the
        end of <var>input</var> or the character at <var>position</var> is neither a U+0054 LATIN
        CAPITAL LETTER T character (T) nor a U+0020 SPACE character, then set
        <var>time present</var> to false.

        Otherwise, if <var>date present</var> is false, set <var>position</var> back to the same
        position as <var>start position</var>.

    7. If the <var>time present</var> flag is true, then <a>parse a time component</a> to obtain
        <var>hour</var>, <var>minute</var>, and <var>second</var>. If this returns nothing, then
        fail.
    8. If the <var>date present</var> and <var>time present</var> flags are both true, but
        <var>position</var> is beyond the end of <var>input</var>, then fail.
    9. If the <var>date present</var> and <var>time present</var> flags are both true,
        <a>parse a time-zone offset component</a> to obtain <var>timezone<sub>hours</sub></var> and
        <var>timezone<sub>minutes</sub></var>. If this returns nothing, then fail.
    10. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
    11. If the <var>date present</var> flag is true and the <var>time present</var> flag is false,
        then let <var>date</var> be the date with year <var>year</var>, month <var>month</var>, and
        day <var>day</var>, and return <var>date</var>.

        Otherwise, if the <var>time present</var> flag is true and the <var>date present</var> flag
        is false, then let <var>time</var> be the time with hour <var>hour</var>, minute
        <var>minute</var>, and second <var>second</var>, and return <var>time</var>.

        Otherwise, let <var>time</var> be the moment in time at year <var>year</var>, month
        <var>month</var>, day <var>day</var>, hours <var>hour</var>, minute <var>minute</var>,
        second <var>second</var>, subtracting <var>timezone<sub>hours</sub></var> hours and
        <var>timezone<sub>minutes</sub></var> minutes, that moment in time being a moment in the UTC
        time zone; let <var>timezone</var> be <var>timezone<sub>hours</sub></var> hours and
        <var>timezone<sub>minutes</sub></var> minutes from UTC; and return <var>time</var> and
        <var>timezone</var>.
  </div>

<h4 id="colors">Colors</h4>

  A <dfn>simple color</dfn> consists of three 8-bit numbers in the range 0..255, representing the
  red, green, and blue components of the color respectively, in the sRGB color space. [[!SRGB]]

  A string is a <dfn>valid simple color</dfn> if it is exactly seven characters long, and the first
  character is a U+0023 NUMBER SIGN character (#), and the remaining six characters are all
  <a>ASCII hex digits</a>, with the first two digits representing the red component, the middle two
  digits representing the green component, and the last two digits representing the blue component,
  in hexadecimal.

  A string is a <dfn>valid lowercase simple color</dfn> if it is a <a>valid simple color</a> and
  doesn't use any characters in the range U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL
  LETTER F.

  <div class="impl">
    The <dfn>rules for parsing simple color values</dfn> are as given in the following algorithm.
    When invoked, the steps must be followed in the order given, aborting at the first step that
    returns a value. This algorithm will return either a <a>simple color</a> or an error.

    1. Let <var>input</var> be the string being parsed.
    2. If <var>input</var> is not exactly seven characters long, then return an error.
    3. If the first character in <var>input</var> is not a U+0023 NUMBER SIGN character (#), then
        return an error.
    4. If the last six characters of <var>input</var> are not all <a>ASCII hex digits</a>, then
        return an error.
    5. Let <var>result</var> be a <a>simple color</a>.
    6. Interpret the second and third characters as a hexadecimal number and let the result be the
        red component of <var>result</var>.
    7. Interpret the fourth and fifth characters as a hexadecimal number and let the result be the
        green component of <var>result</var>.
    8. Interpret the sixth and seventh characters as a hexadecimal number and let the result be the
        blue component of <var>result</var>.
    9. Return <var>result</var>.

    The <dfn>rules for serializing simple color values</dfn> given a <a>simple color</a> are as
    given in the following algorithm:

    1. Let <var>result</var> be a string consisting of a single U+0023 NUMBER SIGN character (#).
    2. Convert the red, green, and blue components in turn to two-digit hexadecimal numbers using
        <a>lowercase ASCII hex digits</a>, zero-padding if necessary, and append these numbers to
        <var>result</var>, in the order red, green, blue.
    3. Return <var>result</var>, which will be a <a>valid lowercase simple color</a>.

    <hr />

    Some obsolete legacy attributes parse colors in a more complicated manner, using the <dfn>rules
    for parsing a legacy color value</dfn>, which are given in the following algorithm. When
    invoked, the steps must be followed in the order given, aborting at the first step that returns
    a value. This algorithm will return either a <a>simple color</a> or an error.

    1. Let <var>input</var> be the string being parsed.
    2. If <var>input</var> is the empty string, then return an error.
    3. <a>Strip leading and trailing whitespace</a> from <var>input</var>.
    4. If <var>input</var> is an <a>ASCII case-insensitive</a> match for the string
        "<code>transparent</code>", then return an error.
    5. If <var>input</var> is an <a>ASCII case-insensitive</a> match for one of the
        <a>named colors</a>, then return the <a>simple color</a> corresponding to that keyword.
        [[!CSS3COLOR]]

        <p class="note"><a>CSS2 System Colors</a> are not recognized.</p>

    6. If <var>input</var> is four characters long, and the first character in <var>input</var> is a
        U+0023 NUMBER SIGN character (#), and the last three characters of <var>input</var> are all
        <a>ASCII hex digits</a>, then run these substeps:
        1. Let <var>result</var> be a <a>simple color</a>.
        2. Interpret the second character of <var>input</var> as a hexadecimal digit; let the red
            component of <var>result</var> be the resulting number multiplied by 17.
        3. Interpret the third character of <var>input</var> as a hexadecimal digit; let the green
            component of <var>result</var> be the resulting number multiplied by 17.
        4. Interpret the fourth character of <var>input</var> as a hexadecimal digit; let the blue
            component of <var>result</var> be the resulting number multiplied by 17.
        5. Return <var>result</var>.

    7. Replace any characters in <var>input</var> that have a Unicode code point greater than U+FFFF
        (i.e. any characters that are not in the basic multilingual plane) with the two-character
        string "<code>00</code>".
    8. If <var>input</var> is longer than 128 characters, truncate <var>input</var>, leaving only
        the first 128 characters.
    9. If the first character in <var>input</var> is a U+0023 NUMBER SIGN character (#), remove it.
    10. Replace any character in <var>input</var> that is not an <a>ASCII hex digit</a> with the
        character U+0030 DIGIT ZERO (0).
    11. While <var>input</var>'s length is zero or not a multiple of three, append a U+0030 DIGIT
        ZERO (0) character to <var>input</var>.
    12. Split <var>input</var> into three strings of equal length, to obtain three components. Let
        <var>length</var> be the length of those components (one third the length of
        <var>input</var>).
    13. If <var>length</var> is greater than 8, then remove the leading <a><var>length</var>-8</a>
        characters in each component, and let <var>length</var> be 8.
    14. While <var>length</var> is greater than two and the first character in each component is a
        U+0030 DIGIT ZERO (0) character, remove that character and reduce <var>length</var> by one.
    15. If <var>length</var> is <em>still</em> greater than two, truncate each component, leaving
        only the first two characters in each.
    16. Let <var>result</var> be a <a>simple color</a>.
    17. Interpret the first component as a hexadecimal number; let the red component of
        <var>result</var> be the resulting number.
    18. Interpret the second component as a hexadecimal number; let the green component of
        <var>result</var> be the resulting number.
    19. Interpret the third component as a hexadecimal number; let the blue component of
        <var>result</var> be the resulting number.
    20. Return <var>result</var>.
  </div>

<h4 id="space-separated-tokens">Space-separated tokens</h4>

  A <dfn>set of space-separated tokens</dfn> is a string containing zero or more words (known as
  tokens) separated by one or more <a>space characters</a>, where words consist of any string of one
  or more characters, none of which are <a>space characters</a>.

  A string containing a <a>set of space-separated tokens</a> may have leading or trailing
  <a>space characters</a>.

  An <dfn>unordered set of unique space-separated tokens</dfn> is a
  <a>set of space-separated tokens</a> where none of the tokens are duplicated.

  An <dfn>ordered set of unique space-separated tokens</dfn> is a
  <a>set of space-separated tokens</a> where none of the tokens are duplicated but where the order
  of the tokens is meaningful.

  <a>Sets of space-separated tokens</a> sometimes have a defined set of allowed values. When a set
  of allowed values is defined, the tokens must all be from that list of allowed values; other
  values are non-conforming. If no such set of allowed values is provided, then all values are
  conforming.

  <p class="note">
    How tokens in a <a>set of space-separated tokens</a> are to be compared (e.g. case-sensitively
    or not) is defined on a per-set basis.
  </p>

  <div class="impl">
    When a user agent has to <dfn>split a string on spaces</dfn>, it must use the following
    algorithm:

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. Let <var>tokens</var> be an ordered list of tokens, initially empty.
    4. <a>Skip whitespace</a>
    5. While <var>position</var> is not past the end of <var>input</var>:
        1. <a>Collect a sequence of characters</a> that are not <a>space characters</a>.
        2. Append the string collected in the previous step to <var>tokens</var>.
        3. <a>Skip whitespace</a>
    6. Return <var>tokens</var>.
  </div>

<h4 id="comma-separated-tokens">Comma-separated tokens</h4>

  A <dfn>set of comma-separated tokens</dfn> is a string containing zero or more tokens each
  separated from the next by a single U+002C COMMA character (,), where tokens consist of any string
  of zero or more characters, neither beginning nor ending with <a>space characters</a>, nor
  containing any U+002C COMMA characters (,), and optionally surrounded by <a>space characters</a>.

  <p class="example">
    For instance, the string "<code>&nbsp;a&nbsp;,b,,d&nbsp;d&nbsp;</code>" consists of four tokens:
    "a", "b", the empty string, and "d&nbsp;d". Leading and trailing whitespace around each token
    doesn't count as part of the token, and the empty string can be a token.
  </p>

  <a>Sets of comma-separated tokens</a> sometimes have further restrictions on what consists a valid
  token. When such restrictions are defined, the tokens must all fit within those restrictions;
  other values are non-conforming. If no such restrictions are specified, then all values are
  conforming.

  <div class="impl">
    When a user agent has to <dfn>split a string on commas</dfn>, it must use the following
    algorithm:

    1. Let <var>input</var> be the string being parsed.
    2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
        of the string.
    3. Let <var>tokens</var> be an ordered list of tokens, initially empty.
    4. <i>Token</i>: If <var>position</var> is past the end of <var>input</var>, jump to the last
        step.
    5. <a>Collect a sequence of characters</a> that are not U+002C COMMA characters (,). Let
        <var>s</var> be the resulting sequence (which might be the empty string).
    6. <a>Strip leading and trailing whitespace</a> from <var>s</var>.
    7. Append <var>s</var> to <var>tokens</var>.
    8. If <var>position</var> is not past the end of <var>input</var>, then the character at
        <var>position</var> is a U+002C COMMA character (,); advance <var>position</var> past that
        character.
    9. Jump back to the step labeled <i>token</i>.
    10. Return <var>tokens</var>.<
  </div>

<h4 id="syntax-references">References</h4>

  A <dfn>valid hash-name reference</dfn> to an element of type <var>type</var> is a
  string consisting of a U+0023 NUMBER SIGN character (#) followed by a string which exactly matches
  the value of the <code>name</code> attribute of an element with type <var>type</var> in
  the document.

  <div class="impl">
    The <dfn>rules for parsing a hash-name reference</dfn> to an element of type <var>type</var>,
    given a context node <var>scope</var>, are as follows:

    1. If the string being parsed does not contain a U+0023 NUMBER SIGN character, or if the first
        such character in the string is the last character in the string, then return null and abort
        these steps.
    2. Let <var>s</var> be the string from the character immediately after the first U+0023 NUMBER
        SIGN character in the string being parsed up to the end of that string.
    3. Return the first element of type <var>type</var> in <a>tree order</a> in the subtree rooted
        at <var>scope</var> that has an <code>id</code> attribute whose value is a
        <a>case-sensitive</a> match for <var>s</var> or a <code>name</code> attribute whose value is
        a <a>compatibility caseless</a> match for <var>s</var>.
  </div>

<h4 id="mq">Media queries</h4>

  A string is a <dfn>valid media query list</dfn> if it matches the
  <code>&lt;media-query-list&gt;</code> production of the Media Queries specification. [[!MEDIAQ]]

  A string <dfn>matches the environment</dfn> of the user if it is the empty string, a string
  consisting of only <a>space characters</a>, or is a media query list that matches the user's
  environment according to the definitions given in the Media Queries specification. [[!MEDIAQ]]

<h3 id="urls">URLs</h3>

<h4 id="terminology">Terminology</h4>

  A <a>URL</a> is a <dfn>valid URL</dfn> if it conforms to the authoring conformance
  requirements in the WHATWG URL standard. [[!URL]]

  A string is a <dfn>valid non-empty URL</dfn> if it is a <a>valid URL</a> but it is not
  the empty string.

  A string is a <dfn>valid URL potentially surrounded by spaces</dfn> if, after
  <a>stripping leading and trailing whitespace</a> from it, it is a <a>valid URL</a>.

  A string is a <dfn>valid non-empty URL potentially surrounded by spaces</dfn> if, after
  <a>stripping leading and trailing whitespace</a> from it, it is a <a>valid non-empty URL</a>.

  This specification defines the URL <dfn><code>about:legacy-compat</code></dfn> as a reserved,
  though unresolvable, <code>about:</code> URL, for use in <a>DOCTYPE</a>s in <a>HTML documents</a>
  when needed for compatibility with XML tools. [[!RFC6694]]

  This specification defines the URL <dfn><code>about:srcdoc</code></dfn> as a reserved, though
  unresolvable, <code>about:</code> URL, that is used as <a>the document's address</a> of
  <a><code>iframe</code> <code>srcdoc</code> documents</a>. [[!RFC6694]]

  The <dfn>fallback base URL</dfn> of a <code>Document</code> object is the <a>absolute URL</a>
  obtained by running these substeps:

  1. If the <code>Document</code> is <a>an <code>iframe</code> <code>srcdoc</code> document</a>,
      then return the <a>document base URL</a> of the <code>Document</code>'s
      <a>browsing context</a>'s <a>browsing context container</a>'s <a>node document</a> and abort
      these steps.
  2. If <a>the document's address</a> is <code>about:blank</code>, and the <code>Document</code>'s
      <a>browsing context</a> has a <a>creator browsing context</a>, then return the <a>document
      base URL</a> of the <a>creator <code>Document</code></a>, and abort these steps.
  3. Return <a>the document's address</a>.

  The <dfn>document base URL</dfn> of a <code>Document</code> object is the <a>absolute URL</a>
  obtained by running these substeps:

  1. If there is no <code>base</code> element that has an <code>href</code> attribute in the
      <code>Document</code>, then the <a>document base URL</a> is the <code>Document</code>'s
      <a>fallback base URL</a>; abort these steps.
  2. Otherwise, the <a>document base URL</a> is the <a>frozen base URL</a> of the first
      <code>base</code> element in the <code>Document</code> that has an <code>href</code>
      attribute, in <a>tree order</a>.

  <div class="impl">
    <h4 id="resolving-urls">Resolving URLs</h4>

    Resolving a URL is the process of taking a <a>relative URL</a> and obtaining the
    <a>absolute URL</a> that it implies.

    To <dfn>resolve a URL</dfn> to an <a>absolute URL</a> relative to either another
    <a>absolute URL</a> or an element, the user agent must use the following steps. Resolving a URL
    can result in an error, in which case the URL is not resolvable.

    1. Let <var>url</var> be the <a>URL</a> being resolved.
    2. Let <var>encoding</var> be determined as follows:

        <dl class="switch">
          <dt>
            If the URL had a character encoding defined when the URL was created or defined or when
            this algorithm was invoked
          </dt>
          <dd>The URL character encoding is as defined.</dd>

          <dt>If the URL came from a script (e.g. as an argument to a method)</dt>
          <dd>
            The URL character encoding is the <a>API URL character encoding</a> specified by the
            script's <a>settings object</a>.
          </dd>

          <dt>If the URL came from a DOM node (e.g. from an element)</dt>
          <dd>
            The node has a <code>Document</code>, and the URL character encoding is the
            <a>document's character encoding</a>.
          </dd>
        </dl>

    3. If <var>encoding</var> is a <a>UTF-16 encoding</a>, then change the value of
        <var>encoding</var> to UTF-8.
    4. If the algorithm was invoked with an <a>absolute URL</a> to use as the base URL, let
        <var>base</var> be that <a>absolute URL</a>.

        Otherwise, let <var>base</var> be <a>the element's base URL</a>.

    5. Apply the <a>URL parser</a> to <var>url</var>, with <var>base</var> as the base URL, with
        <var>encoding</var> as the encoding.
    6. If this returns failure, then abort these steps with an error.
    7. Let <var>parsed URL</var> be the result of the <a>URL parser</a>.
    8. Let <var>serialized URL</var> be the result of apply the <a>URL serializer</a> to
        <var>parsed URL</var>.
    9. Return <var>serialized URL</var> as the <dfn>resulting absolute URL</dfn> and
        <var>parsed URL</var> as the <dfn>resulting parsed URL</dfn>.

    Given an element, <dfn>the element's base URL</dfn> is the element's <a>node document</a>'s
    <a>document base URL</a>.
  </div>

  <div class="impl">
    <h4 id="dynamic-changes-to-base-urls">Dynamic changes to base URLs</h4>

    When a document's <a>document base URL</a> changes, all elements in that document are
    <a>affected by a base URL change</a>.

    The following are <a>base URL change steps</a>, which run when an element is
    <a>affected by a base URL change</a> (as defined by the DOM specification):

    <dl class="switch">
      <dt>If the element creates a <a>hyperlink</a></dt>
      <dd>
        If the <a>absolute URL</a> identified by the hyperlink is being shown to the user, or if any
        data derived from that URL is affecting the display, then the <code>href</code> attribute
        should be <a>re-resolved</a> relative to the element and the UI updated appropriately.

        <p class="example">
          For example, the CSS <code>:link</code>/<code>:visited</code> pseudo-classes might have
          been affected.
        </p>
      </dd>

      <dt>
        If the element is a <code>q</code>, <code>blockquote</code>, <code>ins</code>, or
        <code>del</code> element with a <code>cite</code> attribute
      </dt>
      <dd>
        If the <a>absolute URL</a> identified by the <code>cite</code> attribute is being shown to
        the user, or if any data derived from that URL is affecting the display, then the <a>URL</a>
        should be <a>re-resolved</a> relative to the element and the UI updated appropriately.
      </dd>

      <dt>Otherwise</dt>
      <dd>
        The element is not directly affected.

        <p class="example">
          For instance, changing the base URL doesn't affect the image displayed by <code>img</code>
          elements, although subsequent accesses of the <code>src</code> IDL attribute from script
          will return a new <a>absolute URL</a> that might no longer correspond to the image being
          shown.
        </p>
      </dd>
    </dl>
  </div>


  <div class="impl">
    <h3 id="fetching-resources">Fetching resources</h3>

    <h4 id="terminology">Terminology</h4>

    User agents can implement a variety of transfer protocols, but this specification mostly defines
    behavior in terms of HTTP. [[!HTTP11]]

    The <dfn>HTTP GET method</dfn> is equivalent to the default retrieval action of the protocol.
    For example, RETR in FTP. Such actions are idempotent and safe, in HTTP terms.

    The <dfn>HTTP response codes</dfn> are equivalent to statuses in other protocols that have the
    same basic meanings. For example, a "file not found" error is equivalent to a 404 code, a server
    error is equivalent to a 5xx code, and so on.

    The <dfn>HTTP headers</dfn> are equivalent to fields in
    other protocols that have the same basic meaning. For example, the HTTP authentication headers
    are equivalent to the authentication aspects of the FTP protocol.

    A <dfn>referrer source</dfn> is either a <code>Document</code> or a <a>URL</a>.

    <h4 id="processing-model">Processing model</h4>

    When a user agent is to <dfn>fetch</dfn> a resource or <a>URL</a>, optionally
    <strong>from</strong> an origin <i>origin</i>, optionally <strong>using</strong> a specific
    <a>referrer source</a> as an <i>override referrer source</i>, and optionally with any of a
    <i>synchronous flag</i>, a <i>manual redirect flag</i>, a <i>force same-origin flag</i>, and a
    <i>block cookies flag</i>, the following steps must be run. (When a <em>URL</em> is to be
    fetched, the URL identifies a resource to be obtained.)

    1. If there is a specific <i>override referrer source</i>, and it is a <a>URL</a>, then let
        <var>referrer</var> be the <i>override referrer source</i>, and jump to the step labeled
        <i>clean referrer</i>.

    2. Let <var>document</var> be the appropriate <code>Document</code> as given by the following
        list:
        <dl class="switch">
          <dt>If there is a specific <i>override referrer source</i></dt>
          <dd>The <i>override referrer source</i>.</dd>

          <dt>When <a>navigating</a></dt>
          <dd>The <a>active document</a> of the <a>source browsing context</a>.</dd>

          <dt>When fetching resources for an element</dt>
          <dd>The element's <code>Document</code>.</dd>
        </dl>
    3. While <var>document</var> is <a>an <code>iframe</code> <code>srcdoc</code> document</a>, let
        <var>document</var> be <var>document</var>'s <a>browsing context</a>'s
        <a>browsing context container</a>'s <code>Document</code> instead.
    4. If the <a>origin</a> of <var>Document</var> is not a scheme/host/port tuple, then set
        <var>referrer</var> to the empty string and jump to the step labeled <i>clean referrer</i>.
    5. Let <var>referrer</var> be <a>the document's address</a> of <var>document</var>.
    6. <i>Clean referrer</i>: Apply the <a>URL parser</a> to <var>referrer</var> and let
        <var>parsed referrer</var> be the <a>resulting parsed URL</a>.
    7. Let <var>referrer</var> be the result of applying the <a>URL serializer</a> to
        <var>parsed referrer</var>, with the <i>exclude fragment flag</i> set.
    8. If <var>referrer</var> is not the empty string, is not a <a><code>data:</code> URL</a>, and
        is not the <a>URL</a> "<code>about:blank</code>", then generate the <i>address of the
        resource from which Request-URIs are obtained</i> as required by HTTP for the
        <code>Referer</code> (sic) header from <var>referrer</var>. [[!HTTP11]]

        Otherwise, the <code>Referer</code> (sic) header must be omitted, regardless of its value.
    9. If the algorithm was not invoked with the <i>synchronous flag</i>, perform the remaining
        steps <a>in parallel</a>.
    10. If the <code>Document</code> with which any <a>tasks</a> <a>queued</a> by this algorithm
        would be associated doesn't have an associated <a>browsing context</a>, then abort these
        steps.
    11. This is the <i>main step</i>.

        If the resource is to be obtained from an <a>application cache</a>, then use the data from
        that <a>application cache</a>, as if it had been obtained in the manner appropriate given
        its <a>URL</a>.

        If the resource is identified by an <a>absolute URL</a>, and the resource is to be obtained
        using an idempotent action (such as an HTTP GET <a>or equivalent</a>), and it is already
        being downloaded for other reasons (e.g. another invocation of this algorithm), and this
        request would be identical to the previous one (e.g. same <code>Accept</code> and
        <code>Origin</code> headers), and the user agent is configured such that it is to reuse the
        data from the existing download instead of initiating a new one, then use the results of the
        existing download instead of starting a new one.

        Otherwise, if the resource is identified by an <a>absolute URL</a> with a scheme that does
        not define a mechanism to obtain the resource (e.g. it is a <code>mailto:</code> URL) or
        that the user agent does not support, then act as if the resource was an HTTP 204 No Content
        response with no other metadata.

        Otherwise, if the resource is identified by the <a>URL</a>
        <dfn><code>about:blank</code></dfn>, then the resource is immediately available and consists
        of the empty string, with no metadata.

        Otherwise, at a time convenient to the user and the user agent, download (or otherwise
        obtain) the resource, applying the semantics of the relevant specifications (e.g. performing
        an HTTP GET or POST operation, or reading the file from disk, or expanding
        <a><code>data:</code> URLs</a>, etc).

        For the purposes of the <code>Referer</code> (sic) header, use the
        <i>address of the resource from which Request-URIs are obtained</i> generated in the earlier
        step.

        For the purposes of the <code>Origin</code> header, if the <a>fetching algorithm</a> was
        explicitly initiated from an <i>origin</i>, then
        <i>the origin that initiated the HTTP request</i> is <i>origin</i>. Otherwise, this is
        <i>a request from a "privacy-sensitive" context</i>. [[!ORIGIN]]
    12. If the algorithm was not invoked with the <i>block cookies flag</i>, and there are cookies
        to be set, then the user agent must run the following substeps:
        1. Wait until ownership of the <a>storage mutex</a> can be taken by this instance of the
            <a>fetching</a> algorithm.
        2. Take ownership of the <a>storage mutex</a>.
        3. Update the cookies. [[!COOKIES]]
            <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>
        4. Release the <a>storage mutex</a> so that it is once again free.
    13. If the fetched resource is an HTTP redirect <a>or equivalent</a>, then:

        <dl class="switch">
          <dt>
            If the <i>force same-origin flag</i> is set and the <a>URL</a> of the target of the
            redirect does not have the <a>same origin</a> as the <a>URL</a> for which the
            <a>fetch</a> algorithm was invoked
          </dt>
          <dd>
            Abort these steps and return failure from this algorithm, as if the remote host could
            not be contacted.
          </dd>

          <dt>If the <i>manual redirect flag</i> is set</dt>
          <dd>
            Continue, using the fetched resource (the redirect) as the result of the algorithm. If
            the calling algorithm subsequently requires the user agent to
            <dfn>transparently follow the redirect</dfn>, then the user agent must resume this
            algorithm from the <i>main step</i>, but using the target of the redirect as the
            resource to fetch, rather than the original resource.
          </dd>

          <dt>Otherwise</dt>
          <dd>
            First, apply any relevant requirements for redirects (such as showing any appropriate
            prompts). Then, redo <i>main step</i>, but using the target of the redirect as the
            resource to fetch, rather than the original resource. For HTTP requests, the new request
            must include the same headers as the original request, except for headers for which
            other requirements are specified (such as the <code>Host</code> header). [[!HTTP11]]

            <p class="note">
              The HTTP specification requires that 301, 302, and 307 redirects, when applied to
              methods other than the safe methods, not be followed without user confirmation. That
              would be an appropriate prompt for the purposes of the requirement in the paragraph
              above. [[!HTTP11]]
          </dd>
        </dl>
    14. If the algorithm was not invoked with the <i>synchronous flag</i>: When the resource is
        available, or if there is an error of some description, <a>queue a task</a> that uses the
        resource as appropriate. If the resource can be processed incrementally, as, for instance,
        with a progressively interlaced JPEG or an HTML file, additional tasks may be queued to
        process the data as it is downloaded. The <a>task source</a> for these <a>tasks</a> is the
        <a>networking task source</a>.

        Otherwise, return the resource or error information to the calling algorithm.

    If the user agent can determine the actual length of the resource being <a>fetched</a> for an
    instance of this algorithm, and if that length is finite, then that length is the file's
    <dfn>size</dfn>. Otherwise, the subject of the algorithm (that is, the resource being fetched)
    has no known <a>size</a>. (For example, the HTTP <code>Content-Length</code> header might
    provide this information.)

    The user agent must also keep track of the <dfn>number of bytes downloaded</dfn> for each
    instance of this algorithm. This number must exclude any out-of-band metadata, such as HTTP
    headers.

    <p class="note">
      The <a>application cache</a> processing model introduces some
      <a>changes to the networking model</a> to handle the returning of cached resources.

    <p class="note">
      The <a>navigation</a> processing model handles redirects itself, overriding the redirection
      handling that would be done by the fetching algorithm.
    </p>

    <p class="note">
      Whether the <a>type sniffing rules</a> apply to the fetched resource depends on the algorithm
      that invokes the rules &mdash; they are not always applicable.
    </p>

    <h4 id="encrypted-http-and-related-security-concerns">Encrypted HTTP and related security concerns</h4>

    Anything in this specification that refers to HTTP also applies to HTTP-over-TLS, as represented
    by <a>URLs</a> representing the <code>https</code> scheme. [[!HTTP11]]

    <p class="warning">
      User agents should report certificate errors to the user and must either refuse to download
      resources sent with erroneous certificates or must act as if such resources were in fact
      served with no encryption.
    </p>

    User agents should warn the user that there is a potential problem whenever the user visits a
    page that the user has previously visited, if the page uses less secure encryption on the second
    visit.

    Not doing so can result in users not noticing man-in-the-middle attacks.

    <div class="example">
      If a user connects to a server with a self-signed certificate, the user agent could allow the
      connection but just act as if there had been no encryption. If the user agent instead allowed
      the user to override the problem and then displayed the page as if it was fully and safely
      encrypted, the user could be easily tricked into accepting man-in-the-middle connections.

      If a user connects to a server with full encryption, but the page then refers to an external
      resource that has an expired certificate, then the user agent will act as if the resource was
      unavailable, possibly also reporting the problem to the user. If the user agent instead
      allowed the resource to be used, then an attacker could just look for "secure" sites that used
      resources from a different host and only apply man-in-the-middle attacks to that host, for
      example taking over scripts in the page.

      If a user bookmarks a site that uses a CA-signed certificate, and then later revisits that
      site directly but the site has started using a self-signed certificate, the user agent could
      warn the user that a man-in-the-middle attack is likely underway, instead of simply acting as
      if the page was not encrypted.
    </div>

    <h4 id="content-type-sniffing">Determining the type of a resource</h4>

    The <dfn>Content-Type metadata</dfn> of a resource must be obtained and interpreted in a manner
    consistent with the requirements of the MIME Sniffing specification. [[!MIMESNIFF]]

    The <dfn>sniffed type of a resource</dfn> must be found in a manner consistent with the
    requirements given in the MIME Sniffing specification for finding the <i>sniffed media type</i>
    of the relevant sequence of octets. [[!MIMESNIFF]]

    The <dfn>rules for sniffing images specifically</dfn> and the <dfn>rules for distinguishing if a
    resource is text or binary</dfn> are also defined in the MIME Sniffing specification. Both sets
    of rules return a <a>MIME type</a> as their result. [[!MIMESNIFF]]

    <p class="warning">
      It is imperative that the rules in the MIME Sniffing specification be followed exactly. When a
      user agent uses different heuristics for content type detection than the server expects,
      security problems can occur. For more details, see the MIME Sniffing specification.
      [[!MIMESNIFF]]
    </p>

    <h4 id="extracting-character-encodings-from-meta-elements">Extracting character encodings from <code>meta</code> elements</h4>

    The <dfn>algorithm for extracting a character encoding from a <code>meta</code> element</dfn>,
    given a string <var>s</var>, is as follows. It either returns a character encoding or nothing.

    1. Let <var>position</var> be a pointer into <var>s</var>, initially pointing at the start of
        the string.
    2. <i>Loop</i>: Find the first seven characters in <var>s</var> after <var>position</var> that
        are an <a>ASCII case-insensitive</a> match for the word "<code>charset</code>". If no such
        match is found, return nothing and abort these steps.
    3. Skip any <a>space characters</a> that immediately follow the word "<code>charset</code>"
        (there might not be any).
    4. If the next character is not a U+003D EQUALS SIGN (=), then move <var>position</var> to point
        just before that next character, and jump back to the step labeled <i>loop</i>.
    5. Skip any <a>space characters</a> that immediately follow the equals sign (there might not be
        any).
    6. Process the next character as follows:
        <dl class="switch">
          <dt>
            If it is a U+0022 QUOTATION MARK character (") and there is a later U+0022 QUOTATION
            MARK character (") in <var>s</var>
          </dt>
          <dt>
            If it is a U+0027 APOSTROPHE character (') and there is a later U+0027 APOSTROPHE
            character (') in <var>s</var>
          </dt>
          <dd>
            Return the result of <a>getting an encoding</a> from the substring that is between
            this character and the next earliest occurrence of this character.
          </dd>

          <dt>If it is an unmatched U+0022 QUOTATION MARK character (")</dt>
          <dt>If it is an unmatched U+0027 APOSTROPHE character (')</dt>
          <dt>If there is no next character</dt>
          <dd>Return nothing.</dd>

          <dt>Otherwise</dt>
          <dd>
            Return the result of <a>getting an encoding</a> from the substring that consists of this
            character up to but not including the first <a>space character</a> or U+003B SEMICOLON
            character (;), or the end of <var>s</var>, whichever comes first.
          </dd>
        </dl>

    <p class="note">
      This algorithm is distinct from those in the HTTP specification (for example, HTTP doesn't
      allow the use of single quotes and requires supporting a backslash-escape mechanism that is
      not supported by this algorithm). While the algorithm is used in contexts that, historically,
      were related to HTTP, the syntax as supported by implementations diverged some time ago.
      [[!HTTP11]]
    </p>
  </div>


<h4 id="cors-settings-attributes">CORS settings attributes</h4>

  A <dfn>CORS settings attribute</dfn> is an <a>enumerated attribute</a>. The following table lists
  the keywords and states for the attribute &mdash; the keywords in the left column map to the
  states in the cell in the second column on the same row as the keyword.

  <table>
    <thead>
    <tr>
      <th>Keyword</th>
      <th>State</th>
      <th>Brief description</th>
    <tbody>
    <tr>
      <td><dfn><code>anonymous</code></dfn></td>
      <td><dfn>Anonymous</dfn></td>
      <td>
        <a>Requests</a> for the element will have their <a>mode</a> set to "<code>cors</code>" and
        their <a>credentials mode</a> set to "<code>same-origin</code>".
      </td>
    <tr>
      <td><dfn><code>use-credentials</code></dfn></td>
      <td><dfn>Use Credentials</dfn></td>
      <td>
        <a>Requests</a> for the element will have their <a>mode</a> set to "<code>cors</code>" and
        their <a>credentials mode</a> set to "<code>include</code>".
      </td>
  </table>

  The empty string is also a valid keyword, and maps to the <a>Anonymous</a> state. The attribute's
  <i>invalid value default</i> is the <a>Anonymous</a> state. For the purposes of <a>reflection</a>,
  the canonical case for the <a>Anonymous</a> state is the <code>anonymous</code> keyword. The
  <i>missing value default</i>, used when the attribute is omitted, is the <dfn>No CORS</dfn> state.

  <div class="impl">
    <h4 id="cors-enabled-fetch">CORS-enabled fetch</h4>

    When the user agent is required to perform a <dfn>potentially CORS-enabled fetch</dfn> of an
    <a>absolute URL</a> <var>URL</var> with a mode <var>mode</var> that is either "<a>No CORS</a>",
    "<a>Anonymous</a>", or "<a>Use Credentials</a>", optionally using a <a>referrer source</a>
    <var>referrer source</var>, with an <a>origin</a> <var>origin</var>, and with a default origin
    behavior <var>default</var> which is either "<i>taint</i>" or "<i>fail</i>", it must run the
    first applicable set of steps from the following list. The default origin behavior is only used
    if <var>mode</var> is "<a>No CORS</a>". This algorithm wraps the <a>fetch</a> algorithm above,
    and labels the obtained resource as either <dfn>CORS-same-origin</dfn> or
    <dfn>CORS-cross-origin</dfn>, or blocks the resource entirely.

    <dl class="switch">
      <dt>If the <var>URL</var> has the <a>same origin</a> as <var>origin</var></dt>
      <dt>If the <var>URL</var> is a <a><code>data:</code> URL</a></dt>
      <dt>If the <var>URL</var> is <code>about:blank</code></dt>
      <dd>
        Run these substeps:

        1. <a>Fetch</a> <var>URL</var>, using <var>referrer source</var> if one was specified, with
            the <i>manual redirect flag</i> set.</li>
        2. <i>Loop</i>: Wait for the <a>fetch</a> algorithm to know if the result is a redirect or
            not.
        3. Follow the first appropriate steps from the following list:

            <dl class="switch">
              <dt>
                If the result of the <a>fetch</a> is a redirect, and the <a>origin</a> of the target
                URL of the redirect is not the <a>same origin</a> as <var>origin</var>
              </dt>
              <dd>
                Set <var>URL</var> to the target URL of the redirect and return to the top of the
                <a>potentially CORS-enabled fetch</a> algorithm (this time, one of the other
                branches below might be taken, based on the value of <var>mode</var>).
              </dd>

              <dt>If the result of the <a>fetch</a> is a redirect</dt>
              <dd>
                <p class="note">
                  The <a>origin</a> of the target URL of the redirect is the <a>same origin</a>
                  as <var>origin</var>.
                </p>

                <a>Transparently follow the redirect</a> and jump to the step labeled <i>loop</i>
                above.

              <dt>Otherwise</dt>
              <dd>
                <p class="note">
                  The resource is available, it is not a redirect, and its <a>origin</a> is the
                  <a>same origin</a> as <var>origin</var>.
                </p>

                The <a>tasks</a> from the <a>fetch</a> algorithm are <a>queued</a> normally, and for
                the purposes of the calling algorithm, the obtained resource is
                <a>CORS-same-origin</a>.
              </dd>
            </dl>
      </dd>

      <dt>If <var>mode</var> is "<a>No CORS</a>" and <var>default</var> is <i>taint</i></dt>
      <dd>
        <p class="note">
          The <var>URL</var> does not have the <a>same origin</a> as <var>origin</var>.
        </p>

        <a>Fetch</a> <var>URL</var>, using <var>referrer source</var> if one was
        specified.

        The <a>tasks</a> from the <a>fetch</a> algorithm are <a>queued</a> normally, but for the
        purposes of the calling algorithm, the obtained resource is <a>CORS-cross-origin</a>. The
        user agent may report a cross-origin resource access failure to the user (e.g. in a
        debugging console).
      </dd>

      <dt>If <var>mode</var> is "<a>No CORS</a>"</dt>
      <dd>
        <p class="note">
          The <var>URL</var> does not have the <a>same origin</a> as <var>origin</var>, and
          <var>default</var> is <i>fail</i>.
        </p>

        Discard any data fetched as part of this algorithm, and prevent any <a>tasks</a> from such
        invocations of the <a>fetch</a> algorithm from being <a>queued</a>.

        For the purposes of the calling algorithm, the user agent must act as if there was a fatal
        network error and no resource was obtained. The user agent may report a cross-origin
        resource access failure to the user (e.g. in a debugging console).
      </dd>

      <dt>If <var>mode</var> is "<a>Anonymous</a>" or "<a>Use Credentials</a>"</dt>
      <dd>
        <p class="note">
          The <var>URL</var> does not have the <a>same origin</a> as <var>origin</var>.
        </p>

        Run these steps:

        1. Perform a <a>cross-origin request</a> with the <i>request URL</i> set to <var>URL</var>,
            with the CORS <i>referrer source</i> set to <var>referrer source</var> if one was
            specified, the <i>source origin</i> set to <var>origin</var>, and with the
            <i>omit credentials flag</i> set if <var>mode</var> is "<a>Anonymous</a>" and not set
            otherwise. [[!FETCH]]
        2. Wait for the CORS <a>cross-origin request status</a> to have a value.
        3. Jump to the appropriate step from the following list:

            <dl class="switch">
              <dt>If the CORS <a>cross-origin request status</a> is not <i>success</i></dt>
              <dd>
                Discard all fetched data and prevent any <a>tasks</a> from the <a>fetch</a>
                algorithm from being <a>queued</a>. For the purposes of the calling algorithm, the
                user agent must act as if there was a fatal network error and no resource was
                obtained. If a CORS <a>resource sharing check</a> failed, the user agent may report
                a cross-origin resource access failure to the user (e.g. in a debugging console).
              </dd>

              <dt>If the CORS <a>cross-origin request status</a> is <i>success</i></dt>
              <dd>
                The <a>tasks</a> from the <a>fetch</a> algorithm are <a>queued</a> normally, and for
                the purposes of the calling algorithm, the obtained resource is
                <a>CORS-same-origin</a>.
              </dd>
            </dl>
      </dd>
    </dl>
  </div>


<h3 id="common-dom-interfaces">Common DOM interfaces</h3>

<h4 id="reflecting-content-attributes-in-idl-attributes">Reflecting content attributes in IDL attributes</h4>

  Some IDL attributes are defined to <dfn>reflect</dfn> a particular content attribute. This means
  that on getting, the IDL attribute returns the current value of the content attribute, and on
  setting, the IDL attribute changes the value of the content attribute to the given value.

  <div class="impl">
    In general, on getting, if the content attribute is not present, the IDL attribute must act as
    if the content attribute's value is the empty string; and on setting, if the content attribute
    is not present, it must first be added.

    If a reflecting IDL attribute is a <code>DOMString</code> attribute whose content attribute is
    defined to contain a <a>URL</a>, then on getting, the IDL attribute must <a>resolve</a> the
    value of the content attribute relative to the element and return the resulting
    <a>absolute URL</a> if that was successful, or the empty string otherwise; and on setting, must
    set the content attribute to the specified literal value. If the content attribute is absent,
    the IDL attribute must return the default value, if the content attribute has one, or else the
    empty string.

    If a reflecting IDL attribute is a <code>DOMString</code> attribute whose content attribute is
    defined to contain one or more <a>URLs</a>, then on getting, the IDL attribute must <a>split the
    content attribute on spaces</a> and return the concatenation of <a>resolving</a> each token URL
    to an <a>absolute URL</a> relative to the element, with a single U+0020 SPACE character between
    each URL, ignoring any tokens that did not resolve successfully. If the content attribute is
    absent, the IDL attribute must return the default value, if the content attribute has one, or
    else the empty string. On setting, the IDL attribute must set the content attribute to the
    specified literal value.

    If a reflecting IDL attribute is a <code>DOMString</code> attribute whose content attribute is
    an <a>enumerated attribute</a>, and the IDL attribute is <dfn>limited to only known values</dfn>,
    then, on getting, the IDL attribute must return the conforming value associated with the state
    the attribute is in (in its canonical case), if any, or the empty string if the attribute is in
    a state that has no associated keyword value or if the attribute is not in a defined state (e.g.
    the attribute is missing and there is no <i>missing value default</i>); and on setting, the
    content attribute must be set to the specified new value.

    If a reflecting IDL attribute is a nullable <code>DOMString</code> attribute whose content
    attribute is an <a>enumerated attribute</a>, then, on getting, if the corresponding content
    attribute is in its <i>missing value default</i> then the IDL attribute must return null,
    otherwise, the IDL attribute must return the conforming value associated with the state the
    attribute is in (in its canonical case); and on setting, if the new value is null, the content
    attribute must be removed, and otherwise, the content attribute must be set to the specified new
    value.

    If a reflecting IDL attribute is a <code>DOMString</code> attribute but doesn't fall into any
    of the above categories, then the getting and setting must be done in a transparent,
    case-preserving manner.

    If a reflecting IDL attribute is a <code>boolean</code> attribute, then on getting the IDL
    attribute must return true if the content attribute is set, and false if it is absent. On
    setting, the content attribute must be removed if the IDL attribute is set to false, and must be
    set to the empty string if the IDL attribute is set to true. (This corresponds to the rules for
    <a>boolean content attributes</a>.)

    If a reflecting IDL attribute has a signed integer type (<code>long</code>) then, on getting,
    the content attribute must be parsed according to the <a>rules for parsing signed integers</a>,
    and if that is successful, and the value is in the range of the IDL attribute's type, the
    resulting value must be returned. If, on the other hand, it fails or returns an out of range
    value, or if the attribute is absent, then the default value must be returned instead, or 0 if
    there is no default value. On setting, the given value must be converted to the shortest
    possible string representing the number as a <a>valid integer</a> and then that string must be
    used as the new content attribute value.

    If a reflecting IDL attribute has a signed integer type (<code>long</code>)
    that is <dfn>limited to only non-negative numbers</dfn> then, on getting, the content attribute
    must be parsed according to the <a>rules for parsing non-negative integers</a>, and if that
    is successful, and the value is in the range of the IDL attribute's type, the resulting value
    must be returned. If, on the other hand, it fails or returns an out of range value, or if the
    attribute is absent, the default value must be returned instead, or &#x2212;1 if there is no
    default value. On setting, if the value is negative, the user agent must throw an
    <code>IndexSizeError</code> exception. Otherwise, the given value must be converted to the
    shortest possible string representing the number as a <a>valid non-negative integer</a> and then
    that string must be used as the new content attribute value.

    If a reflecting IDL attribute has an <em>unsigned</em> integer type (<code>unsigned long</code>)
    then, on getting, the content attribute must be parsed according to the <a>rules for parsing
    non-negative integers</a>, and if that is successful, and the value is in the range 0 to
    2147483647 inclusive, the resulting value must be returned. If, on the other hand, it fails or
    returns an out of range value, or if the attribute is absent, the default value must be returned
    instead, or 0 if there is no default value. On setting, first, if the new value is in the range
    0 to 2147483647, then let <var>n</var> be the new value, otherwise let <var>n</var> be the
    default value, or 0 if there is no default value; then, <var>n</var> must be converted to the
    shortest possible string representing the number as a <a>valid non-negative integer</a> and that
    string must be used as the new content attribute value.

    If a reflecting IDL attribute has an unsigned integer type (<code>unsigned long</code>) that is
    <dfn>limited to only non-negative numbers greater than zero</dfn>, then the behavior is similar
    to the previous case, but zero is not allowed. On getting, the content attribute must first be
    parsed according to the <a>rules for parsing non-negative integers</a>, and if that is
    successful, and the value is in the range 1 to 2147483647 inclusive, the resulting value must be
    returned. If, on the other hand, it fails or returns an out of range value, or if the attribute
    is absent, the default value must be returned instead, or 1 if there is no default value. On
    setting, if the value is zero, the user agent must throw an <code>IndexSizeError</code>
    exception. Otherwise, first, if the new value is in the range 1 to 2147483647, then let
    <var>n</var> be the new value, otherwise let <var>n</var> be the default value, or 1 if there is
    no default value; then, <var>n</var> must be converted to the shortest possible string
    representing the number as a <a>valid non-negative integer</a> and that string must be used as
    the new content attribute value.

    If a reflecting IDL attribute has a floating-point number type (<code>double</code> or
    <code>unrestricted double</code>), then, on getting, the content attribute must be parsed
    according to the <a>rules for parsing floating-point number values</a>, and if that is
    successful, the resulting value must be returned. If, on the other hand, it fails, or if the
    attribute is absent, the default value must be returned instead, or 0.0 if there is no default
    value. On setting, the given value must be converted to the <a>best representation of the number
    as a floating-point number</a> and then that string must be used as the new content attribute
    value.

    If a reflecting IDL attribute has a floating-point number type (<code>double</code> or
    <code>unrestricted double</code>) that is <dfn>limited to numbers greater than zero</dfn>, then
    the behavior is similar to the previous case, but zero and negative values are not allowed. On
    getting, the content attribute must be parsed according to the <a>rules for parsing
    floating-point number values</a>, and if that is successful and the value is greater than 0.0,
    the resulting value must be returned. If, on the other hand, it fails or returns an out of range
    value, or if the attribute is absent, the default value must be returned instead, or 0.0 if
    there is no default value. On setting, if the value is less than or equal to zero, then the
    value must be ignored. Otherwise, the given value must be converted to the
    <a>best representation of the number as a floating-point number</a> and then that string must be
    used as the new content attribute value.

    <p class="note">
      The values Infinity and Not-a-Number (NaN) values throw an exception on setting, as defined in
      the Web IDL specification. [[!WEBIDL]]
    </p>

    If a reflecting IDL attribute has the type <code>DOMTokenList</code> or
    <code>DOMSettableTokenList</code>, then on getting it must return a <code>DOMTokenList</code> or
    <code>DOMSettableTokenList</code> object (as appropriate) whose associated element is the
    element in question and whose associated attribute's local name is the name of the attribute in
    question. The same <code>DOMTokenList</code> or <code>DOMSettableTokenList</code> object must be
    returned every time for each attribute.

    If a reflecting IDL attribute has the type <code>HTMLElement</code>, or an interface that
    descends from <code>HTMLElement</code>, then, on getting, it must run the following algorithm
    (stopping at the first point where a value is returned):

    1. If the corresponding content attribute is absent, then the IDL attribute must return null.
    2. Let <var>candidate</var> be the element that the <code>document.getElementById()</code>
        method would find when called on the content attribute's element's <a>node document</a> if
        it were passed as its argument the current value of the corresponding content attribute.
    3. If <var>candidate</var> is null, or if it is not type-compatible with the IDL attribute, then
        the IDL attribute must return null.
    4. Otherwise, it must return <var>candidate</var>.

    On setting, if the given element has an <code>id</code> attribute, and has the same
    <a>home subtree</a> as the element of the attribute being set, and the given element is the
    first element in that <a>home subtree</a> whose <a>ID</a> is the value of that <code>id</code>
    attribute, then the content attribute must be set to the value of that <code>id</code>
    attribute. Otherwise, the content attribute must be set to the empty string.
  </div>

<h4 id="collections">Collections</h4>

  The <code>HTMLAllCollection</code>, <code>HTMLFormControlsCollection</code>,
  <code>HTMLOptionsCollection</code>, interfaces are <a>collections</a> derived from the
  <code>HTMLCollection</code> interface.

<h5 id="the-htmlallcollection-interface">The <code>HTMLAllCollection</code> interface</h5>

  The <code>HTMLAllCollection</code> interface is used for the legacy <code>document.all</code>
  attribute. It operates similarly to <code>HTMLCollection</code>; the main differences are that its
  <code>namedItem()</code> method returns an <code>HTMLCollection</code> object when there are
  multiple matching elements, and that its <code>item()</code> method can be used as a synonym for
  its <code>namedItem()</code> method.

  <p class="note">
    All <code>HTMLAllCollection</code> objects are rooted at a <code>Document</code> and have a
    filter that matches all elements, so the elements <a>represented by the collection</a> of an
    <code>HTMLAllCollection</code> object consist of all the descendant elements of the root
    <code>Document</code>.
  </p>

  <pre class="idl" data-highlight="webidl">
    interface HTMLAllCollection {
      readonly attribute unsigned long length;
      getter Element? item(unsigned long index);
      (HTMLCollection or Element)? item(DOMString name);
      legacycaller getter (HTMLCollection or Element)? namedItem(DOMString name);
    };
  </pre>

  <dl class="domintro">
    <dt><var>collection</var> . <code>length</code></dt>
    <dd>Returns the number of elements in the collection.</dd>

    <dt><var>element</var> = <var>collection</var> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>index</var>]</dt>
    <dd>
      Returns the item with index <var>index</var> from the collection. The items are sorted in
      <a>tree order</a>.
    </dd>

    <dt><var>element</var> = <var>collection</var> . <code>item</code>(<var>name</var>)</dt>
    <dt><var>collection</var> = <var>collection</var> . <code>item</code>(<var>name</var>)</dt>
    <dt><var>element</var> = <var>collection</var> . <code>namedItem</code>(<var>name</var>)</dt>
    <dt><var>collection</var> = <var>collection</var> . <code>namedItem</code>(<var>name</var>)</dt>
    <dt><var>element</var> = <var>collection</var>(<var>name</var>)</dt>
    <dt><var>collection</var> = <var>collection</var>(<var>name</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>name</var>]</dt>
    <dt><var>collection</var> = <var>collection</var>[<var>name</var>]</dt>
    <dd>
      Returns the item with <a>ID</a> or name <var>name</var> from the collection.

      If there are multiple matching items, then an <code>HTMLCollection</code> object containing
      all those elements is returned.

      Only <code>button</code>, <code>form</code>, <code>iframe</code>, <code>input</code>,
      <code>map</code>, <code>meta</code>, <code>object</code>, <code>select</code>, and
      <code>textarea</code> elements can have a name for the purpose of this method; their name is
      given by the value of their <code>name</code> attribute.
    </dd>
  </dl>

  <div class="impl">
    The object's <a>supported property indices</a> are as defined for <code>HTMLCollection</code>
    objects.

    The following elements are <dfn>"all"-named elements</dfn>: <code>a</code>, <code>applet</code>,
    <code>button</code>, <code>embed</code>, <code>form</code>, <code>frame</code>,
    <code>frameset</code>, <code>iframe</code>, <code>img</code>, <code>input</code>,
    <code>map</code>, <code>meta</code>, <code>object</code>, <code>select</code>, and
    <code>textarea</code>

    The <a>supported property names</a> consist of the non-empty values of all the <code>id</code>
    attributes of all the elements <a>represented by the collection</a>, and the non-empty values of
    all the <code>name</code> attributes of all the <a>"all"-named elements</a> <a>represented by
    the collection</a>, in <a>tree order</a>, ignoring later duplicates, with the <code>id</code> of
    an element preceding its <code>name</code> if it contributes both, they differ from each other,
    and neither is the duplicate of an earlier entry.

    The properties exposed in this way must be <a>unenumerable</a>.

    On getting, the <code>length</code> attribute must return the number of nodes
    <a>represented by the collection</a>.

    The <code>item(<var>index</var>)</code> method must return the <var>index</var><sup>th</sup>
    element in the collection. If there is no <var>index</var><sup>th</sup> element in the
    <a>collection</a>, then the method must return null.

    The <code>item(<var>name</var>)</code> and <code>namedItem(<var>name</var>)</code> methods must
    act according to the following algorithm:

    1. If <var>name</var> is the empty string, return null and stop the algorithm.
    2. Let <var>collection</var> be an <code>HTMLCollection</code> object rooted at the same
        <code>Document</code> as the <code>HTMLAllCollection</code> object on which the method was
        invoked, whose filter matches only elements that are either:
        * <a>"all"-named elements</a> with a <code>name</code> attribute equal to <var>name</var>,
            or,
        * elements with an <a>ID</a> equal to <var>name</var>.
    3. If, at the time the method is called, there is exactly one node in <var>collection</var>,
        then return that node and stop the algorithm.
    4. Otherwise, if, at the time the method is called, <var>collection</var> is empty, return null
        and stop the algorithm.
    5. Otherwise, return <var>collection</var>.
  </div>

<h5 id="the-htmlformcontrolscollection-interface">The <code>HTMLFormControlsCollection</code> interface</h5>

  The <code>HTMLFormControlsCollection</code> interface is used for <a>collections</a> of
  <a>listed elements</a> in <code>form</code> and <code>fieldset</code> elements.

  <pre class="idl" data-highlight="webidl">
    interface HTMLFormControlsCollection : HTMLCollection {
      // inherits length and item()
      getter (RadioNodeList or Element)? namedItem(DOMString name); // shadows inherited namedItem()
    };

    interface RadioNodeList : NodeList {
              attribute DOMString value;
    };
  </pre>

  <dl class="domintro">
    <dt><var>collection</var> . <code>length</code></dt>
    <dd>Returns the number of elements in the collection.</dd>

    <dt><var>element</var> = <var>collection</var> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>index</var>]</dt>
    <dd>
      Returns the item with index <var>index</var> from the collection. The items are sorted in
      <a>tree order</a>.
    </dd>

    <dt><var>element</var> = <var>collection</var> . <code>namedItem</code>(<var>name</var>)</dt>
    <dt>
      <var>radioNodeList</var> = <var>collection</var> . <code>namedItem</code>(<var>name</var>)
    </dt>
    <dt><var>element</var> = <var>collection</var>[<var>name</var>]</dt>
    <dt><var>radioNodeList</var> = <var>collection</var>[<var>name</var>]</dt>
    <dd>
      Returns the item with <a>ID</a> or <code>name</code> <var>name</var> from the collection.

      If there are multiple matching items, then a <code>RadioNodeList</code> object containing all
      those elements is returned.
    </dd>

    <dt><var>radioNodeList</var> . <var>value</var> [ = <var>value</var> ]</dt>
    <dd>
      Returns the value of the first checked radio button represented by the object.

      Can be set, to check the first radio button with the given value represented by the object.
    </dd>
  </dl>

  <div class="impl">
    The object's <a>supported property indices</a> are as defined for <code>HTMLCollection</code>
    objects.

    The <a>supported property names</a> consist of the non-empty values of all the <code>id</code>
    and <code>name</code> attributes of all the elements <a>represented by the collection</a>, in
    <a>tree order</a>, ignoring later duplicates, with the <code>id</code> of an element preceding
    its <code>name</code> if it contributes both, they differ from each other, and neither is the
    duplicate of an earlier entry.

    The properties exposed in this way must be <a>unenumerable</a>.

    The <dfn><code>namedItem(<var>name</var>)</code></dfn> method must act according to the
    following algorithm:

    1. If <var>name</var> is the empty string, return null and stop the algorithm.
    2. If, at the time the method is called, there is exactly one node in the collection that has
        either an <code>id</code> attribute or a <code>name</code> attribute equal to
        <var>name</var>, then return that node and stop the algorithm.
    3. Otherwise, if there are no nodes in the collection that have either an <code>id</code>
        attribute or a <code>name</code> attribute equal to <var>name</var>, then return null and
        stop the algorithm.
    4. Otherwise, create a new <code>RadioNodeList</code> object representing a <a>live</a> view of
        the <code>HTMLFormControlsCollection</code> object, further filtered so that the only nodes
        in the <code>RadioNodeList</code> object are those that have either an <code>id</code>
        attribute or a <code>name</code> attribute equal to <var>name</var>. The nodes in the
        <code>RadioNodeList</code> object must be sorted in <a>tree order</a>.
    5. Return that <code>RadioNodeList</code> object.

    <hr />

    Members of the <code>RadioNodeList</code> interface inherited from the <code>NodeList</code>
    interface must behave as they would on a <code>NodeList</code> object.

    The <dfn><code>value</code></dfn> IDL attribute on the <code>RadioNodeList</code> object, on
    getting, must return the value returned by running the following steps:

    1. Let <var>element</var> be the first element in <a>tree order</a> represented by the
        <code>RadioNodeList</code> object that is an <code>input</code> element whose
        <code>type</code> attribute is in the <a>Radio Button</a> state and whose <a>checkedness</a>
        is true. Otherwise, let it be null.
    2. If <var>element</var> is null, return the empty string.
    3. If <var>element</var> is an element with no <code>value</code> attribute, return the string
        "<code>on</code>".
    4. Otherwise, return the value of <var>element</var>'s <code>value</code> attribute.

    On setting, the <code>value</code> IDL attribute must run the following steps:

    1. If the new value is the string "<code>on</code>": let <var>element</var> be the first element
        in <a>tree order</a> represented by the <code>RadioNodeList</code> object that is an
        <code>input</code> element whose <code>type</code> attribute is in the <a>Radio Button</a>
        state and whose <code>value</code> content attribute is either absent, or present and equal
        to the new value, if any. If no such element exists, then instead let <var>element</var> be
        null.

        Otherwise: let <var>element</var> be the first element in <a>tree order</a>
        represented by the <code>RadioNodeList</code> object that is an <code>input</code> element
        whose <code>type</code> attribute is in the <a>Radio Button</a> state and whose
        <code>value</code> content attribute is present and equal to the new value, if any. If no
        such element exists, then instead let <var>element</var> be null.
    2. If <var>element</var> is not null, then set its <a>checkedness</a> to true.
  </div>

<h5 id="the-htmloptionscollection-interface">The <code>HTMLOptionsCollection</code> interface</h5>

  The <code>HTMLOptionsCollection</code> interface is used for <a>collections</a> of
  <code>option</code> elements. It is always rooted on a <code>select</code> element and has
  attributes and methods that manipulate that element's descendants.

  <pre class="idl" data-highlight="webidl">
    interface HTMLOptionsCollection : HTMLCollection {
      // inherits item(), namedItem()
      attribute unsigned long length; // shadows inherited length
      setter void (unsigned long index, HTMLOptionElement? option);
      void add((HTMLOptionElement or HTMLOptGroupElement) element, optional (HTMLElement or long)? before = null);
      void remove(long index);
      attribute long selectedIndex;
    };
  </pre>

  <dl class="domintro">
    <dt><var>collection</var> . <code>length</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns the number of elements in the collection.

      When set to a smaller number, truncates the number of <code>option</code> elements in the
      corresponding container.

      When set to a greater number, adds new blank <code>option</code> elements to that container.
    </dd>

    <dt><var>element</var> = <var>collection</var> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>index</var>]</dt>
    <dd>
      Returns the item with index <var>index</var> from the collection. The items are sorted in
      <a>tree order</a>.
    </dd>

    <dt><var>collection</var>[<var>index</var>] = <var>element</var></dt>
    <dd>
      When <var>index</var> is a greater number than the number of items in the collection, adds
      new blank <code>option</code> elements in the corresponding container.

      When set to null, removes the item at index <var>index</var> from the collection.

      When set to an <code>option</code> element, adds or replaces it at index <var>index</var>
      from the collection.
    </dd>

    <dt><var>element</var> = <var>collection</var> . <code >namedItem</code>(<var>name</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>name</var>]</dt>
    <dd>
      Returns the item with <a>ID</a> or <code>name</code> <var>name</var> from the collection.

      If there are multiple matching items, then the first is returned.
    </dd>

    <dt><var>collection</var> . <code>add</code>(<var>element</var> [, <var>before</var> ] )</dt>
    <dd>
      Inserts <var>element</var> before the node given by <var>before</var>.

      The <var>before</var> argument can be a number, in which case <var>element</var> is inserted
      before the item with that number, or an element from the collection, in which case
      <var>element</var> is inserted before that element.

      If <var>before</var> is omitted, null, or a number out of range, then <var>element</var> will
      be added at the end of the list.

      This method will throw a <code>HierarchyRequestError</code> exception if <var>element</var> is
      an ancestor of the element into which it is to be inserted.
    </dd>

    <dt><var>collection</var> . <code >remove</code>(<var>index</var>)</dt>
    <dd>Removes the item with index <var>index</var> from the collection.</dd>

    <dt><var>collection</var> . <code >selectedIndex</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns the index of the first selected item, if any, or &#x2212;1 if there is no selected
      item.

      Can be set, to change the selection.
    </dd>
  </dl>

<div class="impl">
  The object's <a>supported property indices</a> are as defined for <code>HTMLCollection</code>
  objects.

  On getting, the <dfn><code>length</code></dfn> attribute must return the number of nodes
  <a>represented by the collection</a>.

  On setting, the behavior depends on whether the new value is equal to, greater than, or less than
  the number of nodes <a>represented by the collection</a> at that time. If the number is the same,
  then setting the attribute must do nothing. If the new value is greater, then <var>n</var> new
  <code>option</code> elements with no attributes and no child nodes must be appended to the
  <code>select</code> element on which the <code>HTMLOptionsCollection</code> is rooted, where
  <var>n</var> is the difference between the two numbers (new value minus old value). Mutation
  events must be fired as if a <code>DocumentFragment</code> containing the new <code>option</code>
  elements had been inserted. If the new value is lower, then the last <var>n</var> nodes in the
  collection must be removed from their parent nodes, where <var>n</var> is the difference between
  the two numbers (old value minus new value).

  <p class="note">
    Setting <code>length</code> never removes or adds any <code>optgroup</code> elements, and never
    adds new children to existing <code>optgroup</code> elements (though it can remove children from
    them).
  </p>

  The <a>supported property names</a> consist of the non-empty values of all the <code>id</code> and
  <code>name</code> attributes of all the elements <a>represented by the collection</a>, in
  <a>tree order</a>, ignoring later duplicates, with the <code>id</code> of an element preceding its
  <code>name</code> if it contributes both, they differ from each other, and neither is the
  duplicate of an earlier entry.

  The properties exposed in this way must be <a>unenumerable</a>.

  When the user agent is to <dfn>set the value of a new indexed property or set the value of an
  existing indexed property</dfn> for a given property index <var>index</var> to a new value
  <var>value</var>, it must run the following algorithm:

  1. If <var>value</var> is null, invoke the steps for the <code>remove</code> method with
      <var>index</var> as the argument, and abort these steps.
  2. Let <var>length</var> be the number of nodes <a>represented by the collection</a>.
  3. Let <var>n</var> be <var>index</var> minus <var>length</var>.
  4. If <var>n</var> is greater than zero, then <a>append</a> a <code>DocumentFragment</code>
      consisting of <a><var>n</var>-1</a> new <code>option</code> elements with no attributes and no
      child nodes to the <code>select</code> element on which the <code>HTMLOptionsCollection</code>
      is rooted.
  5. If <var>n</var> is greater than or equal to zero, <a>append</a> <var>value</var> to the
      <code>select</code> element. Otherwise, <a>replace</a> the <var>index</var>th element in the
      collection by <var>value</var>.

  The <dfn><code>add(<var>element</var>, <var>before</var>)</code></dfn> method must act according
  to the following algorithm:

  1. If <var>element</var> is an ancestor of the <code>select</code> element on which the
      <code>HTMLOptionsCollection</code> is rooted, then throw a <code>HierarchyRequestError</code>
      exception and abort these steps.
  2. If <var>before</var> is an element, but that element isn't a descendant of the
      <code>select</code> element on which the <code>HTMLOptionsCollection</code> is rooted, then
      throw a <code>NotFoundError</code> exception and abort these steps.
  3. If <var>element</var> and <var>before</var> are the same element, then return and abort these
      steps.
  4. If <var>before</var> is a node, then let <var>reference</var> be that node. Otherwise, if
      <var>before</var> is an integer, and there is a <var>before</var>th node in the collection,
      let <var>reference</var> be that node. Otherwise, let <var>reference</var> be null.
  5. If <var>reference</var> is not null, let <var>parent</var> be the parent node of
      <var>reference</var>. Otherwise, let <var>parent</var> be the <code>select</code> element on
      which the <code>HTMLOptionsCollection</code> is rooted.
  6. Act as if the DOM <code>insertBefore()</code> method was invoked on the <var>parent</var> node,
      with <var>element</var> as the first argument and <var>reference</var> as the second argument.

  The <dfn><code>remove(<var>index</var>)</code></dfn> method must act according to the following
  algorithm:

  1. If the number of nodes <a>represented by the collection</a> is zero, abort these steps.
  2. If <var>index</var> is not a number greater than or equal to 0 and less than the number of
      nodes <a>represented by the collection</a>, abort these steps.
  3. Let <var>element</var> be the <var>index</var>th element in the collection.
  4. Remove <var>element</var> from its parent node.

  The <dfn><code>selectedIndex</code></dfn> IDL attribute must act like the identically named
  attribute on the <code>select</code> element on which the <code>HTMLOptionsCollection</code> is
  rooted
</div>

<h4 id="the-domstringmap-interface">The <code>DOMStringMap</code> interface</h4>

  The <code>DOMStringMap</code> interface represents a set of name-value pairs. It exposes these
  using the scripting language's native mechanisms for property access.

<div class="impl">
  When a <code>DOMStringMap</code> object is instantiated, it is associated with three algorithms,
  one for getting the list of name-value pairs, one for setting names to certain values, and one for
  deleting names.

  <pre class="idl" data-highlight="webidl">
    [OverrideBuiltins]
    interface <dfn>DOMStringMap</dfn> {
      <a>getter</a> DOMString (DOMString name);
      <a>setter</a> void (DOMString name, DOMString value);
      <a>deleter</a> void (DOMString name);
    };
  </pre>

  The <a>supported property names</a> on a <code>DOMStringMap</code> object at any instant are the
  names of each pair returned from the algorithm for getting the list of name-value pairs at that
  instant, in the order returned.

  To <dfn>determine the value of a named property</dfn> <var>name</var> in a
  <code>DOMStringMap</code>, the user agent must return the value component of the name-value pair
  whose name component is <var>name</var> in the list returned by the algorithm for getting the list
  of name-value pairs.

  To <dfn>set</dfn> the value of a named property <var>name</var> to value <var>value</var>, the
  algorithm for setting names to certain values must be run, passing <var>name</var> as the name and
  <var>value</var> as the value.

  To <dfn>delete an existing named property</dfn> <var>name</var>, the algorithm for deleting names
  must be run, passing <var>name</var> as the name.

  <p class="note">
    The <code>DOMStringMap</code> interface definition here is only intended for JavaScript
    environments. Other language bindings will need to define how <code>DOMStringMap</code> is to be
    implemented for those languages.
  </p>
</div>

<div class="example">
  The <code>dataset</code> attribute on elements exposes the <code>data-*</code> attributes on the
  element.

  Given the following fragment and elements with similar constructions:

  <pre highlight="html">&lt;img class="tower" id="tower5" data-x="12" data-y="5" data-ai="robotarget" data-hp="46" data-ability="flames" src="towers/rocket.png" alt="Rocket Tower"></pre>

  ...one could imagine a function <code>splashDamage()</code> that takes some arguments, the first
  of which is the element to process:

  <pre highlight="javascript">
    function splashDamage(node, x, y, damage) {
      if (node.classList.contains('tower') && // checking the 'class' attribute
          node.dataset.x == x && // reading the 'data-x' attribute
          node.dataset.y == y) { // reading the 'data-y' attribute
        var hp = parseInt(node.dataset.hp); // reading the 'data-hp' attribute
        hp = hp - damage;
        if (hp &lt; 0) {
          hp = 0;
          node.dataset.ai = 'dead'; // setting the 'data-ai' attribute
          delete node.dataset.ability; // removing the 'data-ability' attribute
        }
        node.dataset.hp = hp; // setting the 'data-hp' attribute
      }
    }
  </pre>
</div>

<h4 id="the-domelementmap-interface">The <code>DOMElementMap</code> interface</h4>

  The <code>DOMElementMap</code> interface represents a set of name-element mappings. It exposes
  these using the scripting language's native mechanisms for property access.

  <div class="impl">

  When a <code>DOMElementMap</code> object is instantiated, it is associated with three algorithms,
  one for getting the list of name-element mappings, one for mapping a name to a certain element,
  and one for deleting mappings by name.

  <pre class="idl" data-highlight="webidl">
    interface DOMElementMap {
      getter Element (DOMString name);
      setter creator void (DOMString name, Element value);
      deleter void (DOMString name);
    };
  </pre>

  The <a>supported property names</a> on a <code>DOMElementMap</code> object at any instant are the
  names for each mapping returned from the algorithm for getting the list of name-element mappings
  at that instant, in the order returned.

  To <dfn>determine the value of a named property</dfn> <var>name</var> in a
  <code>DOMElementMap</code>, the user agent must return the element component of the name-element
  mapping whose name component is <var>name</var> in the list returned by the algorithm for getting
  the list of name-element mappings.

  To set the value of a <dfn>new</dfn> or <dfn>existing</dfn> named property <var>name</var> to
  value <var>value</var>, the algorithm for mapping a name to a certain element must be run, passing
  <var>name</var> as the name <var>value</var> as the element.

  To <dfn>delete an existing named property</dfn> <var>name</var>, the algorithm for deleting
  mappings must be run, passing <var>name</var> as the name component of the mapping to be deleted.

  <p class="note">
    The <code>DOMElementMap</code> interface definition here is only intended for JavaScript
    environments. Other language bindings will need to define how <code>DOMElementMap</code> is to
    be implemented for those languages.
  </p>
</div>

<h4 id="transferable-objects">Transferable objects</h4>

  Some objects support being copied and closed in one operation. This is called <i>transferring</i>
  the object, and is used in particular to transfer ownership of unsharable or expensive resources
  across worker boundaries.

  The following <code>Transferable</code> types exist:

  * <code>ArrayBuffer</code> [[!ECMA-262]]
  * <code>CanvasProxy</code> (defined in this specification)
  * <code>MessagePort</code>

<div class="impl">
  The following IDL block formalizes this:

  <pre class="idl" data-highlight="webidl">
    typedef (ArrayBuffer or CanvasProxy or MessagePort) Transferable;
  </pre>

  To <dfn>transfer a <code>Transferable</code> object</dfn> to a new owner, the user agent must run
  the steps defined for the type of object in question. The steps will return a new object of the
  same type, and will permanently <dfn>neuter</dfn> the original object. (This is an irreversible
  and non-idempotent operation; once an object has been transferred, it cannot be transferred, or
  indeed used, again.)

  To <a>transfer</a> an <code>ArrayBuffer</code> object <var>old</var> to a new owner
  <var>owner</var>, a user agent must create a new <code>ArrayBuffer</code> object pointing at the
  same underlying data as <var>old</var>, thus obtaining <var>new</var>, must <a>neuter</a> the
  <var>old</var> object, and must finally return <var>new</var>. [[!ECMA-262]]

  <p class="note">
    Rules for how to <a>transfer a <code>CanvasProxy</code> object</a> and how to
    <a>transfer a <code>MessagePort</code> object</a> are given in the relevant sections of this
    specification.
  </p>
</div>

<div class="impl">
  <h4 id="safe-passing-of-structured-data">Safe passing of structured data</h4>

  When a user agent is required to obtain a <dfn>structured clone</dfn> of a value, optionally with
  a <i>transfer map</i>, it must run the following algorithm, which either returns a separate value,
  or throws an exception. If a <i>transfer map</i> is provided, it consists of an association list
  of <code>Transferable</code> objects to placeholder objects.

  1. Let <var>input</var> be the value being cloned.
  2. Let <var>transfer map</var> be the <i>transfer map</i> passed to the algorithm, if any, or the
      empty list otherwise.
  3. Let <var>memory</var> be an association list of pairs of objects, initially empty. This is used
      to handle duplicate references. In each pair of objects, one is called the <i>source</i>
      object and the other the <i>destination</i> object.
  4. For each mapping in <var>transfer map</var>, add a mapping from the <code>Transferable</code>
      object (the source object) to the placeholder object (the destination object) to
      <var>memory</var>.
  5. Let <var>output</var> be the value resulting from calling the <a>internal structured cloning
      algorithm</a> with <var>input</var> as the "<var>input</var>" argument, and
      <var>memory</var> as the "<var>memory</var>" argument.
  6. Return <var>output</var>.

  The <dfn>internal structured cloning algorithm</dfn> is always called with two arguments,
  <var>input</var> and <var>memory</var>, and its behavior is as follows:

  1. If <var>input</var> is the source object of a pair of objects in <var>memory</var>, then return
      the destination object in that pair of objects and abort these steps.
  2. If <var>input</var> is a primitive value, then return that value and abort these steps.
  3. Let <var>deep clone</var> be <i>none</i>.
  4. The <var>input</var> value is an object. Jump to the appropriate step below:
      <dl class="switch">
        <dt>If <var>input</var> is a <code>Boolean</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed Boolean object with the same value as
          <var>input</var>.
        </dd>

        <dt>If <var>input</var> is a <code>Number</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed Number object with the same value as
          <var>input</var>.
        </dd>

        <dt>If <var>input</var> is a <code>String</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed String object with the same value as
          <var>input</var>.
        </dd>

        <dt>If <var>input</var> is a <code>Date</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed <code>Date</code> object with the same
          value as <var>input</var>.
        </dd>

        <dt>If <var>input</var> is a <code>RegExp</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed <code>RegExp</code> object with the same
          pattern and flags as <var>input</var>.

          <p class="note">The value of the <code>lastIndex</code> property is not copied.</p>
        </dd>

        <dt>If <var>input</var> is a <code>Blob</code> object</dt>
        <dd>
          If <var>input</var> has been disabled through the <code>close()</code> method, throw a
          <code>DataCloneError</code> exception and abort the overall <a>structured clone</a>
          algorithm. Otherwise, let <var>output</var> be a newly constructed object of the same
          class as <var>input</var>, corresponding to the same underlying data.
        </dd>

        <dt>If <var>input</var> is a <code>FileList</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed <code>FileList</code> object containing a
          list of newly constructed <code>File</code> objects corresponding to the same underlying
          data as those in <var>input</var>, maintaining their relative order.
        </dd>

        <dt>If <var>input</var> is an <code>ImageData</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed <code>ImageData</code> object whose
          <code>width</code> and <code>height</code> have values equal to the corresponding
          attributes on <var>input</var>, and whose <code>data</code> attribute has the value
          obtained from invoking the <a>internal structured cloning algorithm</a> recursively with
          the value of the <code>data</code> attribute on <var>input</var> as the new
          "<var>input</var>" argument and <var>memory</var> as the new "<var>memory</var>" argument.
        </dd>

        <dt>If <var>input</var> is an <code>ImageBitmap</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed <code>ImageBitmap</code> object whose bitmap
          data is a copy of <var>input</var>'s bitmap data.
        </dd>

        <dt>If <var>input</var> is an <code>ArrayBuffer</code> object</dt>
        <dd>
          If <var>input</var> has been <a>neutered</a>, throw a <code>DataCloneError</code>
          exception and abort the overall <a>structured clone</a> algorithm. Otherwise, let
          <var>output</var> be a newly constructed <code>ArrayBuffer</code> object whose contents
          are a copy of <var>input</var>'s contents, with the same length.
        </dd>

        <dt>If <var>input</var> is an object with a \[[DataView]] internal slot</dt>
        <dd>
          Let <var>output</var> be a newly constructed object of the same class as <var>input</var>,
          with its \[[DataView]] internal property present, its
          \[[ViewedArrayBuffer]] internal property set to the value obtained from invoking
          the <a>internal structured cloning algorithm</a> recursively with the value of the
          internal property on <var>input</var> as the new "<var>input</var>" argument and
          <var>memory</var> as the new "<var>memory</var>" argument, and with the
          \[[ByteLength]] and \[[ByteOffset]] internal properties set to the same
          value as their counterparts on <var>input</var>.
        </dd>

        <dt>If <var>input</var> is an <code>Array</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed empty <code>Array</code> object whose
          <code>length</code> is equal to the <code>length</code> of <var>input</var>, and set
          <var>deep clone</var> to <i>own</i>.

          <p class="note">This means that the length of sparse arrays is preserved.</p>
        </dd>

        <dt>If <var>input</var> is an <code>Object</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed empty <code>Object</code> object, and set
          <var>deep clone</var> to <i>own</i>.
        </dd>

        <dt>If <var>input</var> is a <code>Map</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed empty <code>Map</code> object, and set
          <var>deep clone</var> to <i>map</i>.
        </dd>

        <dt>If <var>input</var> is a <code>Set</code> object</dt>
        <dd>
          Let <var>output</var> be a newly constructed empty <code>Set</code> object, and set
          <var>deep clone</var> to <i>set</i>.
        </dd>

        <dt>If <var>input</var> is an object that another specification defines how to clone</dt>
        <dd>
          Let <var>output</var> be a clone of the object as defined by the other specification.
        </dd>

        <dt>
          If <var>input</var> is another native object type (e.g. <code>Error</code>,
          <code>Function</code>)
        </dt>
        <dt>If<var>input</var> is a host object (e.g. a DOM node)</dt>
        <dd>
          Throw a <code>DataCloneError</code> exception and abort the overall
          <a>structured clone</a> algorithm.
        </dd>
      </dl>

      For the purposes of the algorithm above, an object is a particular type of object
      <var>class</var> if its \[[Class]] internal property is equal to <var>class</var>.

      <p class="example">
        For example, "<var>input</var> is an <code>Object</code> object" if <var>input</var>'s
        \[[Class]] internal property is equal to the string "<code>Object</code>".
      </p>
  5. Add a mapping from <var>input</var> (the source object) to <var>output</var> (the destination
      object) to <var>memory</var>.
  6. If <var>deep clone</var> is set to <i>map</i>, then run these substeps. These substeps use the
      terminology and typographic conventions used in the JavaScript specification's definition of
      Maps. [[!ECMA-262]]

      1. Let <var>original</var> be the List that is the value of <var>input</var>'s
          \[[MapData]] internal slot. [[!ECMA-262]]
      2. Let <var>source</var> be a new empty List.
      3. For each Record {\[[key]], \[[value]]} <var>entry</var> that is an
          element of <var>original</var>, run the following substeps:
          1. Let <var>new entry</var> be the Record {\[[key]]: <var>entry</var>.
              \[[key]], \[[value]]: <var>entry</var>.\[[value]]}.
          2. If <var>new entry</var>.\[[key]] is not <i>empty</i>, append <var>new entry</var> as
              the last element of <var>source</var>.
      4. Let <var>target</var> be the List that is the value of <var>output</var>'s
          \[[MapData]] internal slot.
      5. For each Record {\[[key]], \[[value]]} <var>entry</var> that is an
          element of <var>source</var>, run the following substeps:
          1. Let <var>key</var> have the value obtained from invoking the
              <a>internal structured cloning algorithm</a> recursively with <var>entry</var>.
              \[[key]] as the new "<var>input</var>" argument and <var>memory</var> as the
              new "<var>memory</var>" argument.
          2. Let <var>value</var> have the value obtained from invoking the
              <a>internal structured cloning algorithm</a> recursively with <var>entry</var>.
              \[[value]] as the new "<var>input</var>" argument and <var>memory</var> as
              the new "<var>memory</var>" argument.
          3. Let <var>new entry</var> be the Record {\[[key]]: <var>key</var>,
              \[[value]]: <var>value</var>}.
          4. Append <var>new entry</var> as the last element of <var>target</var>.

      6. Set <var>deep clone</var> to <i>own</i>.
  7. If <var>deep clone</var> is set to <i>set</i>, then run these substeps. These substeps use the
      terminology and typographic conventions used in the JavaScript specification's definition of
      Sets. [[!ECMA-262]]
      1. Let <var>source</var> be a copy of the List that is the value of <var>input</var>'s
          \[[SetData]] internal slot. [[!ECMA-262]]
      2. Let <var>target</var> be the List that is the value of <var>output</var>'s
          \[[SetData]] internal slot.
      3. For each <var>entry</var> that is an element of <var>source</var> that is not <i>empty</i>,
          run the following substeps:
          1. Let <var>new entry</var> have the value obtained from invoking the
              <a>internal structured cloning algorithm</a> recursively with <var>entry</var> as
              the new "<var>input</var>" argument and <var>memory</var> as the new
              "<var>memory</var>" argument.
          2. Append <var>new entry</var> as the last element of <var>target</var>.
      4. Set <var>deep clone</var> to <i>own</i>.
  8. If <var>deep clone</var> is set to <i>own</i>, then, for each enumerable own property in
      <var>input</var>, run the following steps:
      1. Let <var>name</var> be the name of the property.
      2. Let <var>source value</var> be the result of calling the \[[Get]] internal method
          of <var>input</var> with the argument <var>name</var>. If the \[[Get]] internal
          method of a property involved executing script, and that script threw an uncaught
          exception, then abort the overall <a>structured clone</a> algorithm, with that exception
          being passed through to the caller.
      3. Let <var>cloned value</var> be the result of invoking the
          <a>internal structured cloning algorithm</a> recursively with <var>source value</var> as
          the "<var>input</var>" argument and <var>memory</var> as the "<var>memory</var>" argument.
          If this results in an exception, then abort the overall <a>structured clone</a> algorithm,
          with that exception being passed through to the caller.
      4. Add a new property to <var>output</var> having the name <var>name</var>, and having the
          value <var>cloned value</var>, using CreateDataProperty(<var>output</var>,
          <var>name</var>, <var>cloned value</var>).

      The order of the properties in the <var>input</var> and <var>output</var> objects must be the
      same, and any properties whose \[[Get]] internal method involves running script must be
      processed in that same order.

      <p class="note">This does not walk the prototype chain.</p>

      <p class="note">
        Property descriptors, setters, getters, and analogous features are not copied in this
        process. For example, the property in the input could be marked as read-only, but in the
        output it would just have the default state (typically read-write, though that could depend
        on the scripting environment).
      </p>

      <p class="note">
        Properties of Array objects are not treated any differently than those of other Objects. In
        particular, this means that non-index properties of arrays are copied as well.
      </p>

  9. Return <var>output</var>.

  <p class="note">
    This algorithm preserves cycles and preserves the identity of duplicate objects in graphs.
  </p>
</div>

<h4 id="callbacks">Callbacks</h4>

  The following callback function type is used in various APIs that interact with <code>File</code>
  objects:

  <pre class="idl" data-highlight="webidl">
    callback <dfn>FileCallback</dfn> = void (<a>File</a> file);
  </pre>


<div class="impl">
  <h4 id="garbage-collection">Garbage collection</h4>

  There is an <dfn>implied strong reference</dfn> from any IDL attribute that returns a pre-existing
  object to that object.

  <div class="example">
    For example, the <code>document.location</code> attribute means that there is a strong reference
    from a <code>Document</code> object to its <code>Location</code> object. Similarly, there is
    always a strong reference from a <code>Document</code> to any descendant nodes, and from any
    node to its owner <code>Document</code>.
  </div>
</div>

<h3 id="namespaces">Namespaces</h3>

  The <dfn>HTML namespace</dfn> is: <code>http://www.w3.org/1999/xhtml</code>

  The <dfn>MathML namespace</dfn> is: <code>http://www.w3.org/1998/Math/MathML</code>

  The <dfn>SVG namespace</dfn> is: <code>http://www.w3.org/2000/svg</code>

  The <dfn>XLink namespace</dfn> is: <code>http://www.w3.org/1999/xlink</code>

  The <dfn>XML namespace</dfn> is: <code>http://www.w3.org/XML/1998/namespace</code>

  The <dfn>XMLNS namespace</dfn> is: <code>http://www.w3.org/2000/xmlns/</code>

  <hr />

  Data mining tools and other user agents that perform operations on content without running
  scripts, evaluating CSS or XPath expressions, or otherwise exposing the resulting DOM to arbitrary
  content, may "support namespaces" by just asserting that their DOM node analogs are in certain
  namespaces, without actually exposing the above strings.

  <hr />

  <p class="note">
    In <a>the HTML syntax</a>, namespace prefixes and namespace declarations do not have the same
    effect as in XML. For instance, the colon has no special meaning in HTML element names.
  </p>

<hr />
<hr />
<hr />

<h2 id="dom">Semantics, structure, and APIs of HTML documents</h2>

<h3 id="documents">Documents</h3>

  Every XML and HTML document in an HTML UA is represented by a <{Document}> object.
  [[!DOM]]

  <dfn>The document's address</dfn> is the <i>URL associated with a <{Document}></i> (as
  defined in the DOM standard). It is initially set when the <{Document}> is created, but
  that can change during the lifetime of the <{Document}>; for example, it changes when
  the user <a>navigates</a> to a <a>fragment identifier</a> on the page and when the
  <code>pushState()</code> method is called with a new <a>URL</a>. [[!DOM]]

  <p class="warning">
    Interactive user agents typically expose <a>the document's address</a> in their user interface.
    This is the primary mechanism by which a user can tell if a site is attempting to impersonate
    another.
  </p>

  When a <{Document}> is created by a <a>script</a> using the <code>createDocument()</code>
  or <code>createHTMLDocument()</code> APIs, <a>the document's address</a> is the same as
  <a>the document's address</a> of the <a>responsible document</a> specified by the script's
  <a>settings object</a>, and the <{Document}> is both <a>ready for post-load tasks</a> and
  <a>completely loaded</a> immediately.

  <dfn>The document's referrer</dfn> is an <a>absolute URL</a> that can be set when the
  <{Document}> is created. If it is not explicitly set, then its value is the empty string.

  Each <{Document}> object has a <dfn>reload override flag</dfn> that is originally unset.
  The flag is set by the <code>document.open()</code> and <code>document.write()</code> methods in
  certain situations. When the flag is set, the <{Document}> also has a
  <dfn>reload override buffer</dfn> which is a Unicode string that is used as the source of the
  document when it is reloaded.

  When the user agent is to perform <dfn>an overridden reload</dfn>, given a
  <a>source browsing context</a>, it must act as follows:


  1. Let <var>source</var> be the value of the <a>browsing context</a>'s <a>active document</a>'s
    <a>reload override buffer</a>.

  2. Let <var>address</var> be the <a>browsing context</a>'s <a>active document</a>'s
    <a>address</a>.

  3. Let <var>HTTPS state</var> be the <a>HTTPS state</a> of the <a>browsing context</a>'s
    <a>active document</a>'s <code>Window</code>.

  4. <a>Navigate</a> the <a>browsing context</a> to a new <a>response</a> whose <{body}> is
    <var>source</var> and <a>HTTPS state</a> is <var>HTTPS state</var>, with
    <a>replacement enabled</a> and <a>exceptions enabled</a>. The <a>source browsing context</a>
    is that given to the <a>overridden reload</a> algorithm. When the <a>navigate</a> algorithm
    creates a <{Document}> object for this purpose, set that <{Document}>'s
    <a>reload override flag</a> and set its <a>reload override buffer</a> to <var>source</var>.

    When it comes time to <a>set the document's address</a> in the <a>navigation algorithm</a>,
    use <var>address</var> as the <a>override URL</a>.

<h4 id="the-document-object">The <dfn element>Document</dfn> object</h4>

  The DOM specification defines a <{Document}> interface, which this specification extends
  significantly:

  <pre class="idl" highlights="webidl">
    enum DocumentReadyState { "loading", "interactive", "complete" };

    [OverrideBuiltins]
    partial /*sealed*/ interface Document {
      // resource metadata management
      [PutForwards=href, Unforgeable] readonly attribute Location? location;
      attribute DOMString domain;
      readonly attribute DOMString referrer;
      attribute DOMString cookie;
      readonly attribute DOMString lastModified;
      readonly attribute DocumentReadyState readyState;

      // DOM tree accessors
      getter object (DOMString name);
      attribute DOMString title;
      attribute DOMString dir;
      attribute HTMLElement? body;
      readonly attribute HTMLHeadElement? head;
      [SameObject] readonly attribute HTMLCollection images;
      [SameObject] readonly attribute HTMLCollection embeds;
      [SameObject] readonly attribute HTMLCollection plugins;
      [SameObject] readonly attribute HTMLCollection links;
      [SameObject] readonly attribute HTMLCollection forms;
      [SameObject] readonly attribute HTMLCollection scripts;
      NodeList getElementsByName(DOMString elementName);
      readonly attribute HTMLScriptElement? currentScript;

      // dynamic markup insertion
      Document open(optional DOMString type = "text/html", optional DOMString replace = "");
      WindowProxy open(DOMString url, DOMString name, DOMString features, optional boolean replace = false);
      void close();
      void write(DOMString... text);
      void writeln(DOMString... text);

      // user interaction
      readonly attribute WindowProxy? defaultView;
      readonly attribute Element? activeElement;
      boolean hasFocus();
      attribute DOMString designMode;
      boolean execCommand(DOMString commandId, optional boolean showUI = false, optional DOMString value = "");
      boolean queryCommandEnabled(DOMString commandId);
      boolean queryCommandIndeterm(DOMString commandId);
      boolean queryCommandState(DOMString commandId);
      boolean queryCommandSupported(DOMString commandId);
      DOMString queryCommandValue(DOMString commandId);

      // special event handler IDL attributes that only apply to Document objects
      [LenientThis] attribute EventHandler onreadystatechange;
    };
    Document implements GlobalEventHandlers;
  </pre>

<h4 id="resource-metadata-management">Resource metadata management</h4>

  <dl class="domintro">
    <dt><var>document</var> . <code>referrer</code></dt>
    <dd>
      Returns <a>the address</a> of the <{Document}> from which the user navigated to this one,
      unless it was blocked or there was no such document, in which case it returns the empty
      string.

      The <code>noreferrer</code> link type can be used to block the referrer.
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>referrer</code></dfn> attribute must return <a>the document's referrer</a>.
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>cookie</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns the HTTP cookies that apply to the <{Document}>. If there are no cookies or cookies
      can't be applied to this resource, the empty string will be returned.

      Can be set, to add a new cookie to the element's set of HTTP cookies.

      If the contents are <a>sandboxed into a unique origin</a> (e.g. in an <code>iframe</code> with
      the <code>sandbox</code> attribute), a <code>SecurityError</code> exception will be thrown on
      getting and setting.
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>cookie</code></dfn> attribute represents the cookies of the resource identified
    by <a>the document's address</a>.

    A <{Document}> object that falls into one of the following conditions is a
    <dfn>cookie-averse <{Document}> object</dfn>:

    * A <{Document}> that has no <a>browsing context</a>.

    * A <{Document}> whose <a>address</a> does not use a server-based naming
        authority.

    On getting, if the document is a <a>cookie-averse <code>Document</code> object</a>, then
    the user agent must return the empty string. Otherwise, if the <{Document}>'s
    <a>origin</a> is not a scheme/host/port tuple, the user agent must throw a
    <code>SecurityError</code> exception. Otherwise, the user agent must first
    <a>obtain the storage mutex</a> and then return the cookie-string for
    <a>the document's address</a> for a "non-HTTP" API, decoded using the <a>UTF-8 decoder</a>.
    [[!COOKIES]]
    <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

    On setting, if the document is a <a>cookie-averse <code>Document</code> object</a>, then
    the user agent must do nothing. Otherwise, if the <{Document}>'s <a>origin</a> is
    not a scheme/host/port tuple, the user agent must throw a <code>SecurityError</code> exception.
    Otherwise, the user agent must <a>obtain the storage mutex</a> and then act as it would
    when <a>receiving a set-cookie-string</a> for <a>the document's address</a> via a "non-HTTP"
    API, consisting of the new value encoded as UTF-8. [[!COOKIES]] [[!ENCODING]]

    <p class="note">
      Since the <code>cookie</code> attribute is accessible across frames, the path restrictions on
      cookies are only a tool to help manage which cookies are sent to which parts of the site, and
      are not in any way a security feature.
    </p>
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>lastModified</code></dt>
    <dd>
      Returns the date of the last modification to the document, as reported by the server, in the
      form "<code>MM/DD/YYYY&nbsp;hh:mm:ss</code>", in the user's local time zone.

      If the last modification date is not known, the current time is returned instead.
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>lastModified</code></dfn> attribute, on getting, must return the date and time of
    the <{Document}>'s source file's last modification, in the user's local time zone, in
    the following format:

    1. The month component of the date.
    2. A U+002F SOLIDUS character (/).
    3. The day component of the date.
    4. A U+002F SOLIDUS character (/).
    5. The year component of the date.
    6. A U+0020 SPACE character.
    7. The hours component of the time.
    8. A U+003A COLON character (:).
    9. The minutes component of the time.
    10. A U+003A COLON character (:).
    11. The seconds component of the time.

    All the numeric components above, other than the year, must be given as two <a>ASCII digits</a>
    representing the number in base ten, zero-padded if necessary. The year must be given as the
    shortest possible string of four or more <a>ASCII digits</a> representing the number in base
    ten, zero-padded if necessary.

    The <{Document}>'s source file's last modification date and time must be derived from
    relevant features of the networking protocols used, e.g. from the value of the HTTP
    <code>Last-Modified</code> header of the document, or from metadata in the file system for local
    files. If the last modification date and time are not known, the attribute must return the
    current date and time in the above format.
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>readyState</code></dt>
    <dd>
      Returns "<code>loading</code>" while the <{Document}> is loading, "<code>interactive</code>"
      once it is finished parsing but still loading sub-resources, and "<code>complete</code>" once
      it has loaded.

      The <code>readystatechange</code> event fires on the <{Document}> object when this value
      changes.
    </dd>
  </dl>

  <div class="impl">
    Each document has a <dfn>current document readiness</dfn>. When a <{Document}> object
    is created, it must have its <a>current document readiness</a> set to the string
    "<code>loading</code>" if the document is associated with an <a>HTML parser</a>, an
    <a>XML parser</a>, or an XSLT processor, and to the string "<code>complete</code>"
    otherwise. Various algorithms during page loading affect this value. When the value is set, the
    user agent must <a>fire a simple event</a> named <code>readystatechange</code> at the
    <{Document}> object.

    A <{Document}> is said to have an <dfn>active parser</dfn> if it is associated with an
    <a>HTML parser</a> or an <a>XML parser</a> that has not yet been <a>stopped</a> or
   <a>aborted</a>.

    The <dfn><code>readyState</code></dfn> IDL attribute must, on getting, return the <a>current
    document readiness</a>.
  </div>

<h4 id="dom-tree-accessors"><dfn>DOM tree accessors</dfn></h4>

  <dfn>The <code>html</code> element</dfn> of a document is the document's root element, if there is
  one and it's an <code>html</code> element, or null otherwise.

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>head</code></dt>
    <dd>Returns <a>the <code>head</code> element</a>.</dd>
  </dl>

  <dfn>The <code>head</code> element</dfn> of a document is the first <code>head</code> element that
  is a child of <a>the <code>html</code> element</a>, if there is one, or null otherwise.

  <div class="impl">
    The <dfn><code>head</code></dfn> attribute, on getting, must return
    <a>the <code>head</code> element</a> of the document (a <code>head</code> element or null).
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>title</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns the document's title, as given by <a>the <code>title</code> element</a> for HTML and
      as given by the SVG <code>title</code> element for SVG.

      Can be set, to update the document's title. If there is no appropriate element to update, the
      new value is ignored.
    </dd>
  </dl>

  <dfn>The <code>title</code> element</dfn> of a document is the first <code>title</code> element
  in the document (in <a>tree order</a>), if there is one, or null otherwise.

  <div class="impl">
    The <dfn><code>title</code></dfn> attribute must, on getting, run the following algorithm:

    1. If the <a>root element</a> is an <code>svg</code> element in the <a>SVG namespace</a>, then
        let <var>value</var> be a concatenation of the data of all the child <code>Text</code> nodes
        of the first <code>title</code> element in the <a>SVG namespace</a> that is a child of the
        <a>root element</a>. [[!SVG]]
    2. Otherwise, let <var>value</var> be a concatenation of the data of all the child
        <code>Text</code> nodes of <a>the <code>title</code> element</a>, in <a>tree order</a>, or
        the empty string if <a>the <code>title</code> element</a> is null.
    3. <a>Strip and collapse whitespace</a> in <var>value</var>.
    4. Return <var>value</var>.

    On setting, the steps corresponding to the first matching condition in the following list must
    be run:

    <dl class="switch">
      <dt>
        If the <a>root element</a> is an <code>svg</code> element in the <a>SVG namespace</a>
        [[!SVG]]
      </dt>
      <dd>
        1. Let <var>element</var> be the first <code>title</code> element in the
            <a>SVG namespace</a> that is a child of the <a>root element</a>, if any. If there isn't
            one, create a <code>title</code> element in the <a>SVG namespace</a>, insert it as the
            first child of the <a>root element</a>, and let <var>element</var> be that element.
            [[!SVG]]
        2. Act as if the <code>textContent</code> IDL attribute of <var>element</var> was set to the
            new value being assigned.
      </dd>

      <dt>If the <a>root element</a> is in the <a>HTML namespace</a></dt>
      <dd>
        1. If <a>the <code>title</code> element</a> is null and <a>the <code>head</code> element</a>
            is null, then abort these steps.
        2. If <a>the <code>title</code> element</a> is null, then create a new <code>title</code>
            element and <a>append</a> it to <a>the <code>head</code> element</a>, and let
            <var>element</var> be the newly created element; otherwise, let <var>element</var> be
            <a>the <code>title</code> element</a>.
        3. Act as if the <code>textContent</code> IDL attribute of <var>element</var> was set to the
            new value being assigned.
      </dd>

      <dt>Otherwise</dt>
      <dd>Do nothing.</dd>
    </dl>
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>body</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns <a>the body element</a>.

      Can be set, to replace <a>the body element</a>.

      If the new value is not a <code>body</code> or <code>frameset</code> element, this will throw
      a <code>HierarchyRequestError</code> exception.
    </dd>
  </dl>

  <dfn>The body element</dfn> of a document is the first child of
  <a>the <code>html</code> element</a> that is either a <code>body</code> element or a
  <code>frameset</code> element. If there is no such element, it is null.

  <div class="impl">
    The <dfn><code>body</code></dfn> attribute, on getting, must return <a>the body element</a> of
    the document (either a <code>body</code> element, a <code>frameset</code> element, or null). On
    setting, the following algorithm must be run:

    1. If the new value is not a <code>body</code> or <code>frameset</code> element, then throw a
        <code>HierarchyRequestError</code> exception and abort these steps.
    2. Otherwise, if the new value is the same as <a>the body element</a>, do nothing. Abort these
        steps.
    3. Otherwise, if <a>the body element</a> is not null, then replace that element with the new
        value in the DOM, as if the root element's <code>replaceChild()</code> method had been
        called with the new value and <a>the incumbent body element</a> as its two arguments
        respectively, then abort these steps.
    4. Otherwise, if there is no root element, throw a <code>HierarchyRequestError</code> exception
        and abort these steps.
    5. Otherwise, <a>the body element</a> is null, but there's a root element. Append the new value
        to the root element.
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>images</code></dt>
    <dd>
      Returns an <code>HTMLCollection</code> of the <code>img</code> elements in the
      <code>Document</code>.
    </dd>

    <dt><var>document</var> . <code>embeds</code></dt>
    <dt><var>document</var> . <code>plugins</code></dt>
    <dd>
      Return an <code>HTMLCollection</code> of the <code>embed</code> elements in the
      <code>Document</code>.
    </dd>

    <dt><var>document</var> . <code>links</code></dt>
    <dd>
      Returns an <code>HTMLCollection</code> of the <code>a</code> and <code>area</code> elements in
      the <code>Document</code> that have <code>href</code> attributes.
    </dd>

    <dt><var>document</var> . <code>forms</code></dt>
    <dd>
      Return an <code>HTMLCollection</code> of the <code>form</code> elements in the
      <code>Document</code>.
    </dd>

    <dt><var>document</var> . <code>scripts</code></dt>
    <dd>
      Return an <code>HTMLCollection</code> of the <code>script</code> elements in the
      <code>Document</code>.
    </dd>

  </dl>

  <div class="impl">
    The <dfn><code>images</code></dfn> attribute must return an <code>HTMLCollection</code> rooted
    at the <code>Document</code> node, whose filter matches only <code>img</code> elements.

    The <dfn><code>embeds</code></dfn> attribute must return an <code>HTMLCollection</code> rooted
    at the <code>Document</code> node, whose filter matches only <code>embed</code> elements.

    The <dfn><code>plugins</code></dfn> attribute must return the same object as that returned by
    the <code>embeds</code> attribute.

    The <dfn><code>links</code></dfn> attribute must return an <code>HTMLCollection</code> rooted at
    the <code>Document</code> node, whose filter matches only <code>a</code> elements with
    <code>href</code> attributes and <code>area</code> elements with <code>href</code> attributes.

    The <dfn><code>forms</code></dfn> attribute must return an <code>HTMLCollection</code> rooted at
    the <code>Document</code> node, whose filter matches only <code>form</code> elements.

    The <dfn><code>scripts</code></dfn> attribute must return an <code>HTMLCollection</code> rooted
    at the <code>Document</code> node, whose filter matches only <code>script</code> elements.

    <hr />
  </div>

  <dl class="domintro">
    <dt>
      <var>collection</var> = <var>document</var> . <code>getElementsByName</code>(<var>name</var>)
    </dt>
    <dd>
      Returns a <code>NodeList</code> of elements in the <code>Document</code> that have a
      <code>name</code> attribute with the value <var>name</var>.
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>getElementsByName(<var>name</var>)</code></dfn> method takes a string
    <var>name</var>, and must return a <a>live</a> <code>NodeList</code> containing all the
    <a>HTML elements</a> in that document that have a <code>name</code> attribute whose value is
    equal to the <var>name</var> argument (in a <a>case-sensitive</a> manner), in <a>tree order</a>.
    When the method is invoked on a <code>Document</code> object again with the same argument, the
    user agent may return the same as the object returned by the earlier call. In other cases, a new
    <code>NodeList</code> object must be returned.
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>currentScript</code></dt>
    <dd>
      Returns the <code>script</code> element that is currently executing. In the case of reentrant
      <code>script</code> execution, returns the one that most recently started executing amongst
      those that have not yet finished executing.

      Returns null if the <code>Document</code> is not currently executing a <code>script</code>
      element (e.g. because the running script is an event handler, or a timeout).
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>currentScript</code></dfn> attribute, on getting, must return the value to which
    it was most recently initialized. When the <code>Document</code> is created, the
    <code>currentScript</code> must be initialized to null.
  </div>

  <div class="impl">
    <hr />

    The <code>Document</code> interface <a>supports named properties</a>. The
    <a>supported property names</a> at any moment consist of the values of the <code>name</code>
    content attributes of all the <code>applet</code>, <a>exposed</a> <code>embed</code>,
    <code>form</code>, <code>iframe</code>, <code>img</code>, and <a>exposed</a> <code>object</code>
    elements in the <code>Document</code> that have non-empty <code>name</code> content attributes,
    and the values of the <code>id</code> content attributes of all the <code>applet</code> and
    <a>exposed</a> <code>object</code> elements in the <code>Document</code> that have non-empty
    <code>id</code> content attributes, and the values of the <code>id</code> content attributes of
    all the <code>img</code> elements in the <code>Document</code> that have both non-empty
    <code>name</code> content attributes and non-empty <code>id</code> content attributes. The
    <a>supported property names</a> must be in <a>tree order</a>, ignoring later duplicates, with
    values from <code>id</code> attributes coming before values from <code>name</code> attributes
    when the same element contributes both.

    To <a>determine the value of a named property</a> <var>name</var> when
    <dfn>the<code>Document</code> object is indexed for property retrieval</dfn>, the user agent
    must return the value obtained using the following steps:

    1. Let <var>elements</var> be the list of <a>named elements</a> with the name <var>name</var> in
        the <code>Document</code>.

        <p class="note">There will be at least one such element, by definition.</p>
    2. If <var>elements</var> has only one element, and that element is an <code>iframe</code>
        element, then return the <code>WindowProxy</code> object of the
        <a>nested browsing context</a> represented by that <code>iframe</code> element, and abort
        these steps.
    3. Otherwise, if <var>elements</var> has only one element, return that element and abort these
        steps.
    4. Otherwise return an <code>HTMLCollection</code> rooted at the <code>Document</code> node,
        whose filter matches only <a>named elements</a> with the name <var>name</var>.

    <dfn>Named elements</dfn> with the name <var>name</var>, for the purposes of the above
    algorithm, are those that are either:

    * <code>applet</code>, <a>exposed</a> <code>embed</code>, <code>form</code>,
        <code>iframe</code>, <code>img</code>, or <a>exposed</a> <code>object</code> elements that
        have a <code>name</code> content attribute whose value is <var>name</var>, or
    * <code>applet</code> or <a>exposed</a> <code>object</code> elements that have an
        <code>id</code> content attribute whose value is <var>name</var>, or
    * <code>img</code> elements that have an <code>id</code> content attribute whose value is
        <var>name</var>, and that have a non-empty <code>name</code> content attribute present also.

    An <code>embed</code> or <code>object</code> element is said to be <dfn>exposed</dfn> if it has
    no <a>exposed</a> <code>object</code> ancestor, and, for <code>object</code> elements, is
    additionally either not showing its <a>fallback content</a> or has no <code>object</code> or
    <code>embed</code> descendants.
  </div>

  <hr />

  <p class="note">
    The <code>dir</code> attribute on the <code>Document</code> interface is defined along with the
    <code>dir</code> content attribute.
  </p>

  <div class="impl">
    <h4 id="loading-xml-documents">Loading XML documents</h4>

    <pre class="idl" data-highlight="webidl">
      partial interface XMLDocument {
        boolean load(DOMString url);
      };
    </pre>

    The <dfn><code>load(<var>url</var>)</code></dfn> method must run the following steps:

    1. Let <var>document</var> be the <code>XMLDocument</code> object on which the method was
        invoked.
    2. <a>Resolve</a> the method's first argument, relative to the <a>API base URL</a> specified by
        the <a>entry settings object</a>. If this is not successful, throw a
        <code>SyntaxError</code> exception and abort these steps. Otherwise, let <var>url</var> be
        the resulting <a>absolute URL</a>.
    3. If the <a>origin</a> of <var>url</var> is not the same as the <a>origin</a> of
        <var>document</var>, throw a <code>SecurityError</code> exception and abort these steps.
    4. Remove all child nodes of <var>document</var>, without firing any mutation events.
    5. Set the <a>current document readiness</a> of <var>document</var> to "<code>loading</code>".
    6. Run the remainder of these steps <a>in parallel</a>, and return true from the method.
    7. Let <var>result</var> be a <code>Document</code> object.
    8. Let <var>success</var> be false.
    9. Let <var>request</var> be a new <a>request</a> whose <a>url</a> is <var>url</var>,
        <a>client</a> is <a>entry settings object</a>, <a>destination</a> is
        "<code>subresource</code>", <a>synchronous flag</a> is set, <a>mode</a> is
        "<code>same-origin</code>", <a>credentials mode</a> is "<code>same-origin</code>", and whose
        <a>use-URL-credentials flag</a> is set.
    10. Let <var>response</var> be the result of <a>fetching</a> <var>request</var>.
    11. If <var>response</var>'s <a>Content-Type metadata</a> is an <a>XML MIME type</a>, then run
        these substeps:
        1. Create a new <a>XML parser</a> associated with the <var>result</var> document.
        2. Pass this parser <var>response</var>'s <a>body</a>.
        3. If there is an XML well-formedness or XML namespace well-formedness error, then remove
            all child nodes from <var>result</var>. Otherwise let <var>success</var> be true.
    12. Queue a task</a> to run the following steps.
        1. Set the <a>current document readiness</a> of <var>document</var> to
            "<code>complete</code>".
        2. Replace all the children of <var>document</var> by the children of <var>result</var>
            (even if it has no children), firing mutation events as if a
            <code>DocumentFragment</code> containing the new children had been inserted.
        3. <a>Fire a simple event</a> named <code>load</code> at <var>document</var>.
  </div>

<h3 id="elements">Elements</h3>

<h4 id="semantics">Semantics</h4>

  Elements, attributes, and attribute values in HTML are defined (by this specification) to have
  certain meanings (semantics). For example, the <code>ol</code> element represents an ordered list,
  and the <code>lang</code> attribute represents the language of the content.

  These definitions allow HTML processors, such as Web browsers or search engines, to present and
  use documents and applications in a wide variety of contexts that the author might not have
  considered.

  <div class="example">
    As a simple example, consider a Web page written by an author who only considered desktop
    computer Web browsers:

    <pre highlight="html">
      &lt;!DOCTYPE HTML>
      &lt;html>
        &lt;head>
          &lt;title>My Page&lt;/title>
        &lt;/head>
        &lt;body>
          &lt;h1>Welcome to my page&lt;/h1>
          &lt;p>I like cars and lorries and have a big Jeep!&lt;/p>
          &lt;h2>Where I live&lt;/h2>
          &lt;p>I live in a small hut on a mountain!&lt;/p>
        &lt;/body>
      &lt;/html>
    </pre>

    Because HTML conveys <em>meaning</em>, rather than presentation, the same page can also be used
    by a small browser on a mobile phone, without any change to the page. Instead of headings being
    in large letters as on the desktop, for example, the browser on the mobile phone might use the
    same size text for the whole the page, but with the headings in bold.

    But it goes further than just differences in screen size: the same page could equally be used by
    a blind user using a browser based around speech synthesis, which instead of displaying the page
    on a screen, reads the page to the user, e.g. using headphones. Instead of large text for the
    headings, the speech browser might use a different volume or a slower voice.

    That's not all, either. Since the browsers know which parts of the page are the headings, they
    can create a document outline that the user can use to quickly navigate around the document,
    using keys for "jump to next heading" or "jump to previous heading". Such features are
    especially common with speech browsers, where users would otherwise find quickly navigating a
    page quite difficult.

    Even beyond browsers, software can make use of this information. Search engines can use the
    headings to more effectively index a page, or to provide quick links to subsections of the page
    from their results. Tools can use the headings to create a table of contents (that is in fact
    how this very specification's table of contents is generated).

    This example has focused on headings, but the same principle applies to all of the semantics
    in HTML.
  </div>

  Authors must not use elements, attributes, or attribute values for purposes other than their
  appropriate intended semantic purpose, as doing so prevents software from correctly processing the
  page.

  <div class="example">
    <pre class="bad" highlight="html">
      &lt;body&gt;
        &lt;h1&gt;ACME Corporation&lt;/h1&gt;
        &lt;h2&gt;The leaders in arbitrary fast delivery since 1920&lt;/h2&gt;
        ...
    </pre>
  </div>

  <div class="example">
    The document in this next example is similarly non-conforming, despite
    being syntactically correct, because the data placed in the cells is clearly
    not tabular data, and the <code>cite</code> element mis-used:

    <pre class="bad" highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;html lang="en-GB"&gt;
        &lt;head&gt; &lt;title&gt; Demonstration &lt;/title&gt; &lt;/head&gt;
        &lt;body&gt;
          &lt;table&gt;
            &lt;tr&gt; &lt;td&gt; My favourite animal is the cat. &lt;/td&gt; &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &mdash;&lt;a href="http://example.org/~ernest/"&gt;&lt;cite&gt;Ernest&lt;/cite&gt;&lt;/a&gt;,
                in an essay from 1992
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>

    This would make software that relies on these semantics fail: for example, a speech browser that
    allowed a blind user to navigate tables in the document would report the quote above as a table,
    confusing the user; similarly, a tool that extracted titles of works from pages would extract
    "Ernest" as the title of a work, even though it's actually a person's name, not a title.

    A corrected version of this document might be:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;html lang="en-GB"&gt;
        &lt;head&gt; &lt;title&gt; Demonstration &lt;/title&gt; &lt;/head&gt;
        &lt;body&gt;
          &lt;blockquote&gt;
            &lt;p&gt; My favourite animal is the cat. &lt;/p&gt;
          &lt;/blockquote&gt;
          &lt;p&gt;
            &mdash;&lt;a href="http://example.org/~ernest/"&gt;Ernest&lt;/a&gt;,
            in an essay from 1992
          &lt;/p&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>
  </div>

  Authors must not use elements, attributes, or attribute values that are not permitted by this
  specification or <a>other applicable specifications</a>, as doing so makes it significantly harder
  for the language to be extended in the future.

  <div class="example">
    In the next example, there is a non-conforming attribute value ("carpet") and a non-conforming
    attribute ("texture"), which is not permitted by this specification:

    <pre class="bad" highlight="html">&lt;label&gt;Carpet: &lt;input type="carpet" name="c" texture="deep pile"&gt;&lt;/label&gt;</pre>

    Here would be an alternative and correct way to mark this up:

    <pre highlight="html">&lt;label&gt;Carpet: &lt;input type="text" class="carpet" name="c" data-texture="deep pile"&gt;&lt;/label&gt;</pre>
  </div>

  Through scripting and using other mechanisms, the values of attributes, text, and indeed the
  entire structure of the document may change dynamically while a user agent is processing it. The
  semantics of a document at an instant in time are those represented by the state of the document
  at that instant in time, and the semantics of a document can therefore change over time. User
  agents <span class="impl">must</span> update their presentation of the document as this occurs.

  <p class="example">
    HTML has a <code>progress</code> element that describes a progress bar. If its "value" attribute
    is dynamically updated by a script, the UA would update the rendering to show the progress
    changing.
  </p>

<h4 id="elements-in-the-dom">Elements in the DOM</h4>

  The nodes representing <a>HTML elements</a> in the DOM <span class="impl">must</span> implement,
  and expose to scripts, the interfaces listed for them in the relevant sections of this
  specification. This includes <a>HTML elements</a> in <a>XML documents</a>, even when those
  documents are in another context (e.g. inside an XSLT transform).

  Elements in the DOM <dfn>represent</dfn> things; that is, they have intrinsic <em>meaning</em>,
  also known as semantics.

  <p class="example">For example, an <code>ol</code> element represents an ordered list.</p>

  The basic interface, from which all the <a>HTML elements</a>' interfaces inherit,
  <span class="impl">and which must be used by elements that have no additional requirements,</span>
  is the <code>HTMLElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLElement : Element {
      // metadata attributes
      attribute DOMString title;
      attribute DOMString lang;
      attribute boolean translate;
      attribute DOMString dir;
      [SameObject] readonly attribute DOMStringMap dataset;

      // user interaction
      attribute boolean hidden;
      void click();
      attribute long tabIndex;
      void focus();
      void blur();
      attribute DOMString accessKey;
      readonly attribute DOMString accessKeyLabel;
      attribute boolean draggable;
      [PutForwards=value] readonly attribute DOMSettableTokenList dropzone;
      attribute HTMLMenuElement? contextMenu;
      attribute boolean spellcheck;
      void forceSpellCheck();
    };
    HTMLElement implements GlobalEventHandlers;
    HTMLElement implements ElementContentEditable;

    interface HTMLUnknownElement : HTMLElement { };
  </pre>

  The <code>HTMLElement</code> interface holds methods and attributes related to a number of
  disparate features, and the members of this interface are therefore described in various different
  sections of this specification.

  <div class="impl">
    The <code>HTMLUnknownElement</code> interface must be used for <a>HTML elements</a> that are not
    defined by this specification (or <a>other applicable specifications</a>).
  </div>

<h4 id="element-definitions">Element definitions</h4>

  Each element in this specification has a definition that includes the following information:

  : <dfn>Categories</dfn>
  :: A list of <a>categories</a> to which the element belongs. These are used when defining the
      <a>content models</a> for each element.

  : <dfn>Contexts in which this element can be used</dfn>
  :: A <em>non-normative</em> description of where the element can be used. This information is
      redundant with the content models of elements that allow this one as a child, and is provided
      only as a convenience.

      <p class="note">
        For simplicity, only the most specific expectations are listed. For example, an element that
        is both <a>flow content</a> and <a>phrasing content</a> can be used anywhere that either
        <a>flow content</a> or <a>phrasing content</a> is expected, but since anywhere that
        <a>flow content</a> is expected, <a>phrasing content</a> is also expected (since all
        <a>phrasing content</a> is <a>flow content</a>), only "where <a>phrasing content</a> is
        expected" will be listed.
      </p>

  : <dfn>Content model</dfn>
  :: A normative description of what content must be included as children and descendants of the
      element.

  : <dfn>Tag omission in text/html</dfn>
  :: A <em>non-normative</em> description of whether, in the <code>text/html</code> syntax, the
      <a>start</a> and <a>end</a> tags can be omitted. This information is redundant with the
      normative requirements given in the <a>optional tags</a> section, and is provided in the
      element definitions only as a convenience.

  : <dfn>Content attributes</dfn>
  :: A normative list of attributes that may be specified on the element (except where otherwise
      disallowed), along with non-normative descriptions of those attributes. (The content to the
      left of the dash is normative, the content to the right of the dash is not.)

  : Allowed <a>ARIA role attribute</a> values
  :: A normative list of <a>ARIA role attribute</a> values that may be specified on the element
      (except where otherwise disallowed). Each value is linked to a non normative description.

  : Allowed <a>ARIA state and property attributes</a>
  :: Links to the <a>Global aria-* attributes</a> list and the
      <a>allowed roles, states and properties</a> table.

  : <dfn>DOM interface</dfn>
  :: A normative definition of a DOM interface that such elements must implement.

  This is then followed by a description of what the element <a>represents</a>, along with any
  additional normative conformance criteria that may apply to authors
  <span class="impl"> and implementations</span>. Examples are sometimes also included.

<h5 id="attributes">Attributes</h5>

  Except where otherwise specified, attributes on <a>HTML elements</a> may have any string value,
  including the empty string. Except where explicitly stated, there is no restriction on what text
  can be specified in such attributes.

<h4 id="content-models"><dfn>Content models</dfn></h4>

  Each element defined in this specification has a content model: a description of the element's
  expected <a>contents</a>. An <a>HTML element</a> must have contents that match the requirements
  described in the element's content model. The <dfn>contents</dfn> of an element are its children
  in the DOM, except for <code>template</code> elements, where the children are those in the
  <a>template contents</a> (a separate <code>DocumentFragment</code> assigned to the element when
  the element is created).

  The <a>space characters</a> are always allowed between elements. User agents represent these
  characters between elements in the source markup as <code>Text</code> nodes in the DOM. Empty
  <code>Text</code> nodes and <code>Text</code> nodes consisting of just sequences of those
  characters are considered <dfn>inter-element whitespace</dfn>.

  <a>Inter-element whitespace</a>, comment nodes, and processing instruction nodes must be ignored
  when establishing whether an element's contents match the element's content model or not, and must
  be ignored when following algorithms that define document and element semantics.

  <p class="note">
    Thus, an element <var>A</var> is said to be <i>preceded or followed</i> by a second element
    <var>B</var> if <var>A</var> and <var>B</var> have the same parent node and there are no other
    element nodes or <code>Text</code> nodes (other than <a>inter-element whitespace</a>) between
    them. Similarly, a node is the <i>only child</i> of an element if that element contains no other
    nodes other than <a>inter-element whitespace</a>, comment nodes, and processing instruction
    nodes.
  </p>

  Authors must not use <a>HTML elements</a> anywhere except where they are explicitly allowed, as
  defined for each element, or as explicitly required by other specifications. For XML compound
  documents, these contexts could be inside elements from other namespaces, if those elements are
  defined as providing the relevant contexts.

  <div class="example">
    For example, the Atom specification defines a <code>content</code> element. When its
    <code>type</code> attribute has the value <code>xhtml</code>, the Atom specification requires
    that it contain a single HTML <code>div</code> element. Thus, a <code>div</code> element is
    allowed in that context, even though this is not explicitly normatively stated by this
    specification. [[RFC4287]]
  </div>

  In addition, <a>HTML elements</a> may be orphan nodes (i.e. without a parent node).

  <div class="example">
    For example, creating a <code>td</code> element and storing it in a global variable in a
    script is conforming, even though <code>td</code> elements are otherwise only supposed to be
    used inside <code>tr</code> elements.

    <pre highlight="javascript">
      var data = {
        name: "Banana",
        cell: document.createElement('td'),
      };
    </pre>
  </div>

<h5 id="the-nothing-content-model">The "nothing" content model</h5>

  When an element's content model is <dfn>nothing</dfn>, the element must contain no
  <code>Text</code> nodes (other than <a>inter-element whitespace</a>) and no element nodes.

  <p class="note">
    Most HTML elements whose content model is "nothing" are also, for convenience,
    <a>void elements</a> (elements that have no <a>end tag</a> in the <a>HTML syntax</a>). However,
    these are entirely separate concepts.
  </p>

<h5 id="kinds-of-content">Kinds of content</h5>

  Each element in HTML falls into zero or more <dfn>categories</dfn> that group elements with
  similar characteristics together. The following broad categories are used in this specification:

  <ul class="brief category-list">
    <li><a>Metadata content</a></li>
    <li><a>Flow content</a></li>
    <li><a>Sectioning content</a></li>
    <li><a>Heading content</a></li>
    <li><a>Phrasing content</a></li>
    <li><a>Embedded content</a></li>
    <li><a>Interactive content</a></li>
  </ul>

  <p class="note">
    Some elements also fall into other categories, which are defined in other parts of this
    specification.
  </p>

  These categories are related as follows:

  <object width="1000" height="288" data="images/content-venn.svg"><img src="images/content-venn.png" alt="" width="512" height="288" /></object>

  Sectioning content, heading content, phrasing content, embedded content, and interactive content
  are all types of flow content. Metadata is sometimes flow content. Metadata and interactive
  content are sometimes phrasing content. Embedded content is also a type of phrasing content, and
  sometimes is interactive content.

  Other categories are also used for specific purposes, e.g. form controls are specified using a
  number of categories to define common requirements. Some elements have unique requirements and do
  not fit into any particular category.

<h6 id="metadata-content">Metadata content</h6>

  <dfn>Metadata content</dfn> is content that sets up the presentation or behavior of the rest of
  the content, or that sets up the relationship of the document with other documents, or that
  conveys other "out of band" information.

  <ul class="brief category-list">
    <li><code>base</code></li>
    <li><code>link</code></li>
    <li><code>meta</code></li>
    <li><code>noscript</code></li>
    <li><code>script</code></li>
    <li><code>style</code></li>
    <li><code>template</code></li>
    <li><code>title</code></li>
  </ul>

  Elements from other namespaces whose semantics are primarily metadata-related (e.g. RDF) are also
  <a>metadata content</a>.

  <div class="example">
    Thus, in the XML serialization, one can use RDF, like this:

    <pre highlight="html">
      &lt;html xmlns="http://www.w3.org/1999/xhtml" xmlns:r="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        &lt;head>
          &lt;title>Hedral's Home Page&lt;/title>
          &lt;r:RDF>
            &lt;Person xmlns="http://www.w3.org/2000/10/swap/pim/contact#"
                       r:about="http://hedral.example.com/#">
              &lt;fullName>Cat Hedral&lt;/fullName>
              &lt;mailbox r:resource="mailto:hedral@damowmow.com"/>
              &lt;personalTitle>Sir&lt;/personalTitle>
            &lt;/Person>
          &lt;/r:RDF>
        &lt;/head>
        &lt;body>
          &lt;h1>My home page&lt;/h1>
          &lt;p>I like playing with string, I guess. Sister says squirrels are fun
          too so sometimes I follow her to play with them.&lt;/p>
        &lt;/body>
      &lt;/html>
    </pre>

    This isn't possible in the HTML serialization, however.
  </div>

<h6 id="flow-content">Flow content</h6>

  Most elements that are used in the body of documents and applications are categorized as
  <dfn>flow content</dfn>.

  <ul class="brief category-list">
    <li><code>a</code></li>
    <li><code>abbr</code></li>
    <li><code>address</code></li>
    <li><code>area</code> (if it is a descendant of a <code>map</code> element)</li>
    <li><code>article</code></li>
    <li><code>aside</code></li>
    <li><code>audio</code></li>
    <li><code>b</code></li>
    <li><code>bdi</code></li>
    <li><code>bdo</code></li>
    <li><code>blockquote</code></li>
    <li><code>br</code></li>
    <li><code>button</code></li>
    <li><code>canvas</code></li>
    <li><code>cite</code></li>
    <li><code>code</code></li>
    <li><code>data</code></li>
    <li><code>datalist</code></li>
    <li><code>del</code></li>
    <li><code>details</code></li>
    <li><code>dfn</code></li>
    <li><code>dialog</code></li>
    <li><code>div</code></li>
    <li><code>dl</code></li>
    <li><code>em</code></li>
    <li><code>embed</code></li>
    <li><code>fieldset</code></li>
    <li><code>figure</code></li>
    <li><code>footer</code></li>
    <li><code>form</code></li>
    <li><code>h1</code></li>
    <li><code>h2</code></li>
    <li><code>h3</code></li>
    <li><code>h4</code></li>
    <li><code>h5</code></li>
    <li><code>h6</code></li>
    <li><code>header</code></li>
    <li><code>hr</code></li>
    <li><code>i</code></li>
    <li><code>iframe</code></li>
    <li><code>img</code></li>
    <li><code>input</code></li>
    <li><code>ins</code></li>
    <li><code>kbd</code></li>
    <li><code>keygen</code></li>
    <li><code>label</code></li>
    <li><code>link</code> (if the <code>itemprop</code> attribute is present)</li>
    <li><code>main</code></li>
    <li><code>map</code></li>
    <li><code>mark</code></li>
    <li><code>math</code></li>
    <li><code>menu</code></li>
    <li><code>meta</code> (if the <code>itemprop</code> attribute is present)</li>
    <li><code>meter</code></li>
    <li><code>nav</code></li>
    <li><code>noscript</code></li>
    <li><code>object</code></li>
    <li><code>ol</code></li>
    <li><code>output</code></li>
    <li><code>p</code></li>
    <li><code>picture</code></li>
    <li><code>pre</code></li>
    <li><code>progress</code></li>
    <li><code>q</code></li>
    <li><code>ruby</code></li>
    <li><code>s</code></li>
    <li><code>samp</code></li>
    <li><code>script</code></li>
    <li><code>section</code></li>
    <li><code>select</code></li>
    <li><code>small</code></li>
    <li><code>span</code></li>
    <li><code>strong</code></li>
    <li><code>style</code> (if the <code>scoped</code> attribute is present)</li>
    <li><code>sub</code></li>
    <li><code>sup</code></li>
    <li><code>svg</code></li>
    <li><code>table</code></li>
    <li><code>template</code></li>
    <li><code>textarea</code></li>
    <li><code>time</code></li>
    <li><code>u</code></li>
    <li><code>ul</code></li>
    <li><code>var</code></li>
    <li><code>video</code></li>
    <li><code>wbr</code></li>
    <li><a>Text</a></li>
  </ul>


<h6 id="sectioning-content">Sectioning content</h6>

  <dfn>Sectioning content</dfn> is content that defines the scope of <a>headings</a> and
  <a>footers</a>.

  <ul class="brief category-list">
    <li><code>article</code></li>
    <li><code>aside</code></li>
    <li><code>nav</code></li>
    <li><code>section</code></li>
  </ul>

  Each <a>sectioning content</a> element potentially has a heading and an <a>outline</a>. See the
  section on <a>headings and sections</a> for further details.

  <p class="note">
    There are also certain elements that are <a>sectioning roots</a>. These are distinct from
    <a>sectioning content</a>, but they can also have an <a>outline</a>.
  </p>

<h6 id="heading-content">Heading content</h6>

  <dfn>Heading content</dfn> defines the header of a section (whether explicitly marked up using
  <a>sectioning content</a> elements, or implied by the heading content itself).

  <ul class="brief category-list">
    <li><code>h1</code></li>
    <li><code>h2</code></li>
    <li><code>h3</code></li>
    <li><code>h4</code></li>
    <li><code>h5</code></li>
    <li><code>h6</code></li>
  </ul>

<h6 id="phrasing-content">Phrasing content</h6>

  <dfn>Phrasing content</dfn> is the text of the document, as well as elements that mark up that
  text at the intra-paragraph level. Runs of <a>phrasing content</a> form <a>paragraphs</a>.

  <ul class="brief category-list">
    <li><code>a</code></li>
    <li><code>abbr</code></li>
    <li><code>area</code> (if it is a descendant of a <code>map</code> element)</li>
    <li><code>audio</code></li>
    <li><code>b</code></li>
    <li><code>bdi</code></li>
    <li><code>bdo</code></li>
    <li><code>br</code></li>
    <li><code>button</code></li>
    <li><code>canvas</code></li>
    <li><code>cite</code></li>
    <li><code>code</code></li>
    <li><code>data</code></li>
    <li><code>datalist</code></li>
    <li><code>del</code></li>
    <li><code>dfn</code></li>
    <li><code>em</code></li>
    <li><code>embed</code></li>
    <li><code>i</code></li>
    <li><code>iframe</code></li>
    <li><code>img</code></li>
    <li><code>input</code></li>
    <li><code>ins</code></li>
    <li><code>kbd</code></li>
    <li><code>keygen</code></li>
    <li><code>label</code></li>
    <li><code>link</code> (if the <code>itemprop</code> attribute is present)</li>
    <li><code>map</code></li>
    <li><code>mark</code></li>
    <li><code>math</code></li>
    <li><code>meta</code> (if the <code>itemprop</code> attribute is present)</li>
    <li><code>meter</code></li>
    <li><code>noscript</code></li>
    <li><code>object</code></li>
    <li><code>output</code></li>
    <li><code>picture</code></li>
    <li><code>progress</code></li>
    <li><code>q</code></li>
    <li><code>ruby</code></li>
    <li><code>s</code></li>
    <li><code>samp</code></li>
    <li><code>script</code></li>
    <li><code>select</code></li>
    <li><code>small</code></li>
    <li><code>span</code></li>
    <li><code>strong</code></li>
    <li><code>sub</code></li>
    <li><code>sup</code></li>
    <li><code>svg</code></li>
    <li><code>template</code></li>
    <li><code>textarea</code></li>
    <li><code>time</code></li>
    <li><code>u</code></li>
    <li><code>var</code></li>
    <li><code>video</code></li>
    <li><code>wbr</code></li>
    <li><a>Text</a></li>
  </ul>

  <p class="note">
    Most elements that are categorized as phrasing content can only contain elements that are
    themselves categorized as phrasing content, not any flow content.
  </p>

  <dfn>Text</dfn>, in the context of content models, means either nothing, or <code>Text</code>
  nodes. <a>Text</a> is sometimes used as a content model on its own, but is also
  <a>phrasing content</a>, and can be <a>inter-element whitespace</a> (if the <code>Text</code>
  nodes are empty or contain just <a>space characters</a>).

  <code>Text</code> nodes and attribute values must consist of <a>Unicode characters</a>, must not
  contain U+0000 characters, must not contain permanently undefined Unicode characters
  (noncharacters), and must not contain <a>control characters</a> other than
  <a>space characters</a>.

  This specification includes extra constraints on the exact value of <code>Text</code> nodes and
  attribute values depending on their precise context.

<h6 id="embedded-content">Embedded content</h6>

  <dfn id="embedded-content-category">Embedded content</dfn> is content that imports another
  resource into the document, or content from another vocabulary that is inserted into the document.

  <ul class="brief category-list">
    <li><code>audio</code></li>
    <li><code>canvas</code></li>
    <li><code>embed</code></li>
    <li><code>iframe</code></li>
    <li><code>img</code></li>
    <li><code>math</code></li>
    <li><code>object</code></li>
    <li><code>picture</code></li>
    <li><code>svg</code></li>
    <li><code>video</code></li>
  </ul>

  Elements that are from namespaces other than the <a>HTML namespace</a> and that convey content but
  not metadata, are <a>embedded content</a> for the purposes of the content models defined in this
  specification. (For example, MathML, or SVG.)

  Some embedded content elements can have <dfn>fallback content</dfn>: content that is to be used
  when the external resource cannot be used (e.g. because it is of an unsupported format). The
  element definitions state what the fallback is, if any.

<h6 id="interactive-content">Interactive content</h6>

  <dfn>Interactive content</dfn> is content that is specifically intended for user interaction.

  <ul class="brief category-list">
    <li><code>a</code></li>
    <li><code>audio</code> (if the <code>controls</code> attribute is present)</li>
    <li><code>button</code></li>
    <li><code>details</code></li>
    <li><code>embed</code></li>
    <li><code>iframe</code></li>
    <li><code>img</code> (if the <code>usemap</code> attribute is present)</li>
    <li>
      <code>input</code> (if the <code>type</code> attribute is <em>not</em> in the <a>Hidden</a>
      state)
    </li>
    <li><code>keygen</code></li>
    <li><code>label</code></li>
    <li><code>object</code> (if the <code>usemap</code> attribute is present)</li>
    <li><code>select</code></li>
    <li><code>textarea</code></li>
    <li><a>sorting interface <code>th</code> elements</a></li>
    <li><code>video</code> (if the <code>controls</code> attribute is present)</li>
  </ul>

  The <code>tabindex</code> attribute can also make any element into <a>interactive content</a>.

<h6 id="palpable-content">Palpable content</h6>

  As a general rule, elements whose content model allows any <a>flow content</a> or
  <a>phrasing content</a> should have at least one node in its <a>contents</a> that is
  <dfn>palpable content</dfn> and that does not have the <code>hidden</code> attribute specified.

  <p class="note">
    <a>Palpable content</a> makes an element non-empty by providing either some descendant non-empty
    <a>text</a>, or else something users can hear (<code>audio</code> elements) or view
    (<code>video</code> or <code>img</code> or <code>canvas</code> elements) or otherwise interact
    with (for example, interactive form controls).
  </p>

  This requirement is not a hard requirement, however, as there are many cases where an element can
  be empty legitimately, for example when it is used as a placeholder which will later be filled in
  by a script, or when the element is part of a template and would on most pages be filled in but on
  some pages is not relevant.

  Conformance checkers are encouraged to provide a mechanism for authors to find elements that fail
  to fulfill this requirement, as an authoring aid.

  The following elements are palpable content:

  <ul class="brief category-list">
    <li><code>a</code></li>
    <li><code>abbr</code></li>
    <li><code>address</code></li>
    <li><code>article</code></li>
    <li><code>aside</code></li>
    <li><code>audio</code> (if the <code>controls</code> attribute is present)</li>
    <li><code>b</code></li>
    <li><code>bdi</code></li>
    <li><code>bdo</code></li>
    <li><code>blockquote</code></li>
    <li><code>button</code></li>
    <li><code>canvas</code></li>
    <li><code>cite</code></li>
    <li><code>code</code></li>
    <li><code>data</code></li>
    <li><code>details</code></li>
    <li><code>dfn</code></li>
    <li><code>div</code></li>
    <li><code>dl</code> (if the element's children include at least one name-value group)</li>
    <li><code>em</code></li>
    <li><code>embed</code></li>
    <li><code>fieldset</code></li>
    <li><code>figure</code></li>
    <li><code>footer</code></li>
    <li><code>form</code></li>
    <li><code>h1</code></li>
    <li><code>h2</code></li>
    <li><code>h3</code></li>
    <li><code>h4</code></li>
    <li><code>h5</code></li>
    <li><code>h6</code></li>
    <li><code>header</code></li>
    <li><code>i</code></li>
    <li><code>iframe</code></li>
    <li><code>img</code></li>
    <li>
      <code>input</code> (if the <code>type</code> attribute is <em>not</em> in the <a>Hidden</a>
      state)
    </li>
    <li><code>ins</code></li>
    <li><code>kbd</code></li>
    <li><code>keygen</code></li>
    <li><code>label</code></li>
    <li><code>main</code></li>
    <li><code>map</code></li>
    <li><code>mark</code></li>
    <li><code>math</code></li>
    <li><code>menu</code> (if the <code>type</code> attribute is in the <a>toolbar</a> state)</li>
    <li><code>meter</code></li>
    <li><code>nav</code></li>
    <li><code>object</code></li>
    <li>
      <code>ol</code> (if the element's children include at least one <code>li</code> element)
    </li>
    <li><code>output</code></li>
    <li><code>p</code></li>
    <li><code>pre</code></li>
    <li><code>progress</code></li>
    <li><code>q</code></li>
    <li><code>ruby</code></li>
    <li><code>s</code></li>
    <li><code>samp</code></li>
    <li><code>section</code></li>
    <li><code>select</code></li>
    <li><code>small</code></li>
    <li><code>span</code></li>
    <li><code>strong</code></li>
    <li><code>sub</code></li>
    <li><code>sup</code></li>
    <li><code>svg</code></li>
    <li><code>table</code></li>
    <li><code>textarea</code></li>
    <li><code>time</code></li>
    <li><code>u</code></li>
    <li>
      <code>ul</code> (if the element's children include at least one <code>li</code> element)
    </li>
    <li><code>var</code></li>
    <li><code>video</code></li>
    <li><a>Text</a> that is not <a>inter-element whitespace</a></li>
  </ul>

<h6 id="script-supporting-elements">Script-supporting elements</h6>

  <dfn>Script-supporting elements</dfn> are those that do not <a>represent</a> anything themselves
  (i.e. they are not rendered), but are used to support scripts, e.g. to provide functionality for
  the user.

  The following elements are script-supporting elements:

  <ul class="brief category-list">
    <li><code>script</code></li>
    <li><code>template</code></li>
  </ul>

<h5 id="transparent-content-models">Transparent content models</h5>

  Some elements are described as <dfn>transparent</dfn>; they have "transparent" in the description
  of their content model. The content model of a <a>transparent</a> element is derived from the
  content model of its parent element: the elements required in the part of the content model that
  is "transparent" are the same elements as required in the part of the content model of the parent
  of the transparent element in which the transparent element finds itself.

  <div class="example">
    For instance, an <code>ins</code> element inside a <code>ruby</code> element cannot contain an
    <code>rt</code> element, because the part of the <code>ruby</code> element's content model that
    allows <code>ins</code> elements is the part that allows <a>phrasing content</a>, and the
    <code>rt</code> element is not <a>phrasing content</a>.
  </div>

  <p class="note">
    In some cases, where transparent elements are nested in each other, the process has to be
    applied iteratively.
  </p>

  <div class="example">
    Consider the following markup fragment:

    <pre highlight="html">&lt;p>&lt;object>&lt;param>&lt;ins>&lt;map>&lt;a href="/">Apples&lt;/a>&lt;/map>&lt;/ins>&lt;/object>&lt;/p></pre>

    To check whether "Apples" is allowed inside the <code>a</code> element, the content models are
    examined. The <code>a</code> element's content model is transparent, as is the <code>map</code>
    element's, as is the <code>ins</code> element's, as is the part of the <code>object</code>
    element's in which the <code>ins</code> element is found. The <code>object</code> element is
    found in the <code>p</code> element, whose content model is <a>phrasing content</a>. Thus,
    "Apples" is allowed, as text is phrasing content.
  </div>

  When a transparent element has no parent, then the part of its content model that is "transparent"
  must instead be treated as accepting any <a>flow content</a>.

<h5 id="paragraphs">Paragraphs</h5>

  <p class="note">
    The term <a>paragraph</a> as defined in this section is used for more than just the definition
    of the <code>p</code> element. The <a>paragraph</a> concept defined here is used to describe how
    to interpret documents. The <code>p</code> element is merely one of several ways of marking up a
    <a>paragraph</a>.
  </p>

  A <dfn>paragraph</dfn> is typically a run of <a>phrasing content</a> that forms a block of text
  with one or more sentences that discuss a particular topic, as in typography, but can also be used
  for more general thematic grouping. For instance, an address is also a paragraph, as is a part of
  a form, a byline, or a stanza in a poem.

  <div class="example">
    In the following example, there are two paragraphs in a section. There is also a heading,
    which contains phrasing content that is not a paragraph. Note how the comments and
    <a>inter-element whitespace</a> do not form paragraphs.

    <pre highlight="html">
      &lt;section>
        &lt;h2>Example of paragraphs&lt;/h2>
        This is the &lt;em>first&lt;/em> paragraph in this example.
        &lt;p>This is the second.&lt;/p>
        &lt;!-- This is not a paragraph. -->
      &lt;/section>
    </pre>
  </div>

  Paragraphs in <a>flow content</a> are defined relative to what the document looks like without the
  <code>a</code>, <code>ins</code>, <code>del</code>, and <code>map</code> elements complicating
  matters, since those elements, with their hybrid content models, can straddle paragraph
  boundaries, as shown in the first two examples below.

  <p class="note">
    Generally, having elements straddle paragraph boundaries is best avoided. Maintaining such
    markup can be difficult.
  </p>

  <div class="example">
    The following example takes the markup from the earlier example and puts <code>ins</code> and
    <code>del</code> elements around some of the markup to show that the text was changed (though in
    this case, the changes admittedly don't make much sense). Notice how this example has exactly
    the same paragraphs as the previous one, despite the <code>ins</code> and <code>del</code>
    elements &mdash; the <code>ins</code> element straddles the heading and the first paragraph, and
    the <code>del</code> element straddles the boundary between the two paragraphs.

    <pre highlight="html">
      &lt;section>
        &lt;ins>&lt;h1>Example of paragraphs&lt;/h1>
        This is the &lt;em>first&lt;/em> paragraph in&lt;/ins> this example&lt;del>.
        &lt;p>This is the second.&lt;/p>&lt;/del>
        &lt;!-- This is not a paragraph. -->
      &lt;/section>
    </pre>
  </div>

  <div class="impl">
    Let <var>view</var> be a view of the DOM that replaces all <code>a</code>, <code>ins</code>,
    <code>del</code>, and <code>map</code> elements in the document with their
    <a>contents</a>. Then, in <var>view</var>, for each run of sibling <a>phrasing content</a>
    nodes uninterrupted by other types of content, in an element that accepts content other than
    <a>phrasing content</a> as well as <a>phrasing content</a>, let <var>first</var> be the first
    node of the run, and let <var>last</var> be the last node of the run. For each such run that
    consists of at least one node that is neither <a>embedded content</a> nor
    <a>inter-element whitespace</a>, a paragraph exists in the original DOM from immediately before
    <var>first</var> to immediately after <var>last</var>. (Paragraphs can thus span across
    <code>a</code>, <code>ins</code>, <code>del</code>, and <code>map</code> elements.)

    Conformance checkers may warn authors of cases where they have paragraphs that overlap each
    other (this can happen with <code>object</code>, <code>video</code>, <code>audio</code>, and
    <code>canvas</code> elements, and indirectly through elements in other namespaces that allow
    HTML to be further embedded therein, like <code>svg</code> or <code>math</code>).
  </div>

  A <a>paragraph</a> is also formed explicitly by <code>p</code> elements.

  <p class="note">
    The <code>p</code> element can be used to wrap individual paragraphs when there would otherwise
    not be any content other than phrasing content to separate the paragraphs from each other.
  </p>

  <div class="example">
    In the following example, the link spans half of the first paragraph, all of the heading
    separating the two paragraphs, and half of the second paragraph. It straddles the paragraphs and
    the heading.

    <pre highlight="html">
      &lt;header>
        Welcome!
        &lt;a href="about.html">
          This is home of...
          &lt;h1>The Falcons!&lt;/h1>
          The Lockheed Martin multirole jet fighter aircraft!
        &lt;/a>
        This page discusses the F-16 Fighting Falcon's innermost secrets.
      &lt;/header>
    </pre>

    Here is another way of marking this up, this time showing the paragraphs explicitly, and
    splitting the one link element into three:

    <pre highlight="html">
      &lt;header>
        &lt;p>Welcome! &lt;a href="about.html">This is home of...&lt;/a>&lt;/p>
        &lt;h1>&lt;a href="about.html">The Falcons!&lt;/a>&lt;/h1>
        &lt;p>&lt;a href="about.html">The Lockheed Martin multirole jet
        fighter aircraft!&lt;/a> This page discusses the F-16 Fighting
        Falcon's innermost secrets.&lt;/p>
      &lt;/header>
    </pre>
  </div>

  <div class="example">
    It is possible for paragraphs to overlap when using certain elements that define fallback
    content. For example, in the following section:

    <pre highlight="html">
      &lt;section>
        &lt;h2>My Cats&lt;/h2>
        You can play with my cat simulator.
        &lt;object data="cats.sim">
          To see the cat simulator, use one of the following links:
          &lt;ul>
            &lt;li>&lt;a href="cats.sim">Download simulator file&lt;/a>
            &lt;li>&lt;a href="http://sims.example.com/watch?v=LYds5xY4INU">Use online simulator&lt;/a>
          &lt;/ul>
          Alternatively, upgrade to the Mellblom Browser.
        &lt;/object>
        I'm quite proud of it.
      &lt;/section>
    </pre>

    There are five paragraphs:

    1. The paragraph that says "You can play with my cat simulator. <i>object</i> I'm quite proud of
        it.", where <i>object</i> is the <code>object</code> element.
    2. The paragraph that says "To see the cat simulator, use one of the following links:".
    3. The paragraph that says "Download simulator file".
    4. The paragraph that says "Use online simulator".
    5. The paragraph that says "Alternatively, upgrade to the Mellblom Browser.".

    The first paragraph is overlapped by the other four. A user agent that supports the "cats.sim"
    resource will only show the first one, but a user agent that shows the fallback will confusingly
    show the first sentence of the first paragraph as if it was in the same paragraph as the second
    one, and will show the last paragraph as if it was at the start of the second sentence of the
    first paragraph.

    To avoid this confusion, explicit <code>p</code> elements can be used. For example:

    <pre highlight="html">
      &lt;section>
        &lt;h2>My Cats&lt;/h2>
        &lt;p>You can play with my cat simulator.&lt;/p>
        &lt;object data="cats.sim">
          &lt;p>To see the cat simulator, use one of the following links:&lt;/p>
          &lt;ul>
            &lt;li>&lt;a href="cats.sim">Download simulator file&lt;/a>
            &lt;li>&lt;a href="http://sims.example.com/watch?v=LYds5xY4INU">Use online simulator&lt;/a>
          &lt;/ul>
          &lt;p>Alternatively, upgrade to the Mellblom Browser.&lt;/p>
        &lt;/object>
        &lt;p>I'm quite proud of it.&lt;/p>
      &lt;/section>
    </pre>
  </div>


<h4 id="global-attributes"><dfn>Global attributes</dfn></h4>

  The following attributes are common to and may be specified on all <a>HTML elements</a>
  <span class="impl"> (even those not defined in this specification)</span>:

  * <code>accesskey</code>
  * <code>class</code>
  * <code>contenteditable</code>
  * <code>contextmenu</code>
  * <code>dir</code>
  * <code>draggable</code>
  * <code>dropzone</code>
  * <code>hidden</code>
  * <code>id</code>
  * <code>itemid</code>
  * <code>itemprop</code>
  * <code>itemref</code>
  * <code>itemscope</code>
  * <code>itemtype</code>
  * <code>lang</code>
  * <code>spellcheck</code>
  * <code>style</code>
  * <code>tabindex</code>
  * <code>title</code>
  * <code>translate</code>

  <div class="impl">
  These attributes are only defined by this specification as attributes for <a>HTML
  elements</a>. When this specification refers to elements having these attributes, elements from
  namespaces that are not defined as having these attributes must not be considered as being
  elements with these attributes.

  <div class="example">
    For example, in the following XML fragment, the "<code>bogus</code>" element does not have a
    <code>dir</code> attribute as defined in this specification, despite having an attribute with
    the literal name "<code>dir</code>". Thus, <a>the directionality</a> of the inner-most
    <code>span</code> element is '<a>rtl</a>', inherited from the <code>div</code> element
    indirectly through the "<code>bogus</code>" element.

    <pre class="bad">
      &lt;div xmlns="http://www.w3.org/1999/xhtml" dir="rtl">
        &lt;bogus xmlns="http://example.net/ns" dir="ltr">
          &lt;span xmlns="http://www.w3.org/1999/xhtml">
          &lt;/span>
        &lt;/bogus>
      &lt;/div>
    </pre>
  </div>

  </div>

  <hr />

  To enable assistive technology products to expose a more fine-grained interface than is otherwise
  possible with HTML elements and attributes, a set of
  <a>annotations for assistive technology products</a> can be specified (the ARIA <code>role</code>
  and <code>aria-*</code> attributes). [[!WAI-ARIA]]

  <hr />

  The following <a>event handler content attributes</a> may be specified on any <a>HTML element</a>:

  * <code>onabort</code>
  * <code>onautocomplete</code>
  * <code>onautocompleteerror</code>
  * <code>onblur</code>*
  * <code>oncancel</code>
  * <code>oncanplay</code>
  * <code>oncanplaythrough</code>
  * <code>onchange</code>
  * <code>onclick</code>
  * <code>onclose</code>
  * <code>oncontextmenu</code>
  * <code>oncuechange</code>
  * <code>ondblclick</code>
  * <code>ondrag</code>
  * <code>ondragend</code>
  * <code>ondragenter</code>
  * <code>ondragexit</code>
  * <code>ondragleave</code>
  * <code>ondragover</code>
  * <code>ondragstart</code>
  * <code>ondrop</code>
  * <code>ondurationchange</code>
  * <code>onemptied</code>
  * <code>onended</code>
  * <code>onerror</code>*
  * <code>onfocus</code>*
  * <code>oninput</code>
  * <code>oninvalid</code>
  * <code>onkeydown</code>
  * <code>onkeypress</code>
  * <code>onkeyup</code>
  * <code>onload</code>*
  * <code>onloadeddata</code>
  * <code>onloadedmetadata</code>
  * <code>onloadstart</code>
  * <code>onmousedown</code>
  * <code>onmouseenter</code>
  * <code>onmouseleave</code>
  * <code>onmousemove</code>
  * <code>onmouseout</code>
  * <code>onmouseover</code>
  * <code>onmouseup</code>
  * <code>onmousewheel</code>
  * <code>onpause</code>
  * <code>onplay</code>
  * <code>onplaying</code>
  * <code>onprogress</code>
  * <code>onratechange</code>
  * <code>onreset</code>
  * <code>onresize</code>*
  * <code>onscroll</code>*
  * <code>onseeked</code>
  * <code>onseeking</code>
  * <code>onselect</code>
  * <code>onshow</code>
  * <code>onsort</code>
  * <code>onstalled</code>
  * <code>onsubmit</code>
  * <code>onsuspend</code>
  * <code>ontimeupdate</code>
  * <code>ontoggle</code>
  * <code>onvolumechange</code>
  * <code>onwaiting</code>

  <p class="note">
    The attributes marked with an asterisk have a different meaning when specified on
    <code>body</code> elements as those elements expose <a>event handlers</a> of the
    <code>Window</code> object with the same names.
  </p>

  <p class="note">
    While these attributes apply to all elements, they are not useful on all elements. For example,
    only <a>media elements</a> will ever receive a <code>volumechange</code> event fired by the user
    agent.
  </p>

  <hr />

  <a>Custom data attributes</a> (e.g. <code>data-foldername</code> or <code>data-msgid</code>) can
  be specified on any <a>HTML element</a>, to store custom data specific to the page.

  <hr />

  In <a>HTML documents</a>, elements in the <a>HTML namespace</a> may have an <code>xmlns</code>
  attribute specified, if, and only if, it has the exact value
  "<code>http://www.w3.org/1999/xhtml</code>". This does not apply to <a>XML documents</a>.

  <p class="note">
    In HTML, the <code>xmlns</code> attribute has absolutely no effect. It is basically a talisman.
    It is allowed merely to make migration to and from XHTML mildly easier. When parsed by an
    <a>HTML parser</a>, the attribute ends up in no namespace, not the
    "<code>http://www.w3.org/2000/xmlns/</code>" namespace like namespace declaration attributes in
    XML do.
  </p>

  <p class="note">
    In XML, an <code>xmlns</code> attribute is part of the namespace declaration mechanism, and an
    element cannot actually have an <code>xmlns</code> attribute in no namespace specified.
  </p>

  <hr />

  The XML specification also allows the use of the <code>xml:space</code> attribute in the
  <a>XML namespace</a> on any element in an <a>XML document</a>. This attribute has no effect on
  <a>HTML elements</a>, as the default behavior in HTML is to preserve whitespace. [[!XML]]

  <p class="note">
    There is no way to serialize the <code>xml:space</code> attribute on <a>HTML elements</a> in the
    <code>text/html</code> syntax.
  </p>

<h5 id="the-id-attribute">The <dfn><code>id</code></dfn> attribute</h5>

  The <code>id</code> attribute specifies its element's <a>unique identifier (ID)</a>. [[!DOM]]

  The value must be unique amongst all the <a>IDs</a> in the element's <a>home subtree</a> and must
  contain at least one character. The value must not contain any <a>space characters</a>.

  <p class="note">
    There are no other restrictions on what form an ID can take; in particular, IDs can consist of
    just digits, start with a digit, start with an underscore, consist of just punctuation, etc.
  </p>

  <p class="note">
    An element's <a>unique identifier</a> can be used for a variety of purposes, most notably as a
    way to link to specific parts of a document using fragment identifiers, as a way to target an
    element when scripting, and as a way to style a specific element from CSS.
  </p>

  <div class="impl">
    Identifiers are opaque strings. Particular meanings should not be derived from the value of the
    <code>id</code> attribute.
  </div>

<h5 id="the-title-attribute">The <code>title</code> attribute</h5>

  The <dfn><code>title</code></dfn> attribute <a>represents</a> advisory information for the
  element, such as would be appropriate for a tooltip. On a link, this could be the title or a
  description of the target resource; on an image, it could be the image credit or a description of
  the image; on a paragraph, it could be a footnote or commentary on the text; on a citation, it
  could be further information about the source; on <a>interactive content</a>, it could be a label
  for, or instructions for, use of the element; and so forth. The value is text.

  <p class="note">
    Relying on the <code>title</code> attribute is currently discouraged as many user agents do not
    expose the attribute in an accessible manner as required by this specification (e.g. requiring a
    pointing device such as a mouse to cause a tooltip to appear, which excludes keyboard-only users
    and touch-only users, such as anyone with a modern phone or tablet).
  </p>

  If this attribute is omitted from an element, then it implies that the <code>title</code>
  attribute of the nearest ancestor <a>HTML element</a> with a <code>title</code> attribute set is
  also relevant to this element. Setting the attribute overrides this, explicitly stating that the
  advisory information of any ancestors is not relevant to this element. Setting the attribute to
  the empty string indicates that the element has no advisory information.

  If the <code>title</code> attribute's value contains U+000A LINE FEED (LF) characters, the content
  is split into multiple lines. Each U+000A LINE FEED (LF) character represents a line break.

  <div class="example">
    Caution is advised with respect to the use of newlines in <code>title</code> attributes.

    For instance, the following snippet actually defines an abbreviation's expansion
    <em>with a line break in it</em>:

    <pre class="bad" highlight="html">
      &lt;p>My logs show that there was some interest in &lt;abbr title="Hypertext
      Transport Protocol">HTTP&lt;/abbr> today.&lt;/p>
    </pre>
  </div>

  Some elements, such as <code>link</code>, <code>abbr</code>, and <code>input</code>, define
  additional semantics for the <code>title</code> attribute beyond the semantics described above.

  <div class="impl">
    The <dfn>advisory information</dfn> of an element is the value that the following algorithm
    returns, with the algorithm being aborted once a value is returned. When the algorithm returns
    the empty string, then there is no advisory information.

    1. If the element is a <code>link</code>, <code>style</code>, <code>dfn</code>,
        <code>abbr</code>, or <code>menuitem</code> element, then: if the element has a
        <code>title</code> attribute, return the value of that attribute, otherwise, return the
        empty string.
    2. Otherwise, if the element has a <code>title</code> attribute, then return its value.
    3. Otherwise, if the element has a parent element, then return the parent element's
        <a>advisory information</a>.
    4. Otherwise, return the empty string.

    User agents should inform the user when elements have <a>advisory information</a>, otherwise the
    information would not be discoverable.

    <hr />

    The <dfn><code>title</code></dfn> IDL attribute must <a>reflect</a> the <code>title</code>
    content attribute.
  </div>

<h5 id="the-lang-and-xmllang-attributes">
  The <code>lang</code> and <code>xml:lang</code> attributes
</h5>

  The <dfn><code>lang</code></dfn> attribute (in no namespace) specifies the primary language for
  the element's contents and for any of the element's attributes that contain text. Its value must
  be a valid BCP 47 language tag, or the empty string. Setting the attribute to the empty string
  indicates that the primary language is unknown. [[!BCP47]]

  The <dfn><code>lang</code></dfn> attribute in the <a>XML namespace</a> is defined in XML. [[!XML]]

  If these attributes are omitted from an element, then the language of this element is the same as
  the language of its parent element, if any.

  The <code>lang</code> attribute in no namespace may be used on any <a>HTML element</a>.

  The <a><code>lang</code> attribute in the <a>XML namespace</a></a> may be used on
  <a>HTML elements</a> in <a>XML documents</a>, as well as elements in other namespaces if the
  relevant specifications allow it (in particular, MathML and SVG allow <a><code>lang</code>
  attributes in the <a>XML namespace</a></a> to be specified on their elements). If both the
  <code>lang</code> attribute in no namespace and the <a><code>lang</code> attribute in the
  <a>XML namespace</a></a> are specified on the same element, they must have exactly the same value
  when compared in an <a>ASCII case-insensitive</a> manner.

  Authors must not use the <a><code>lang</code> attribute in the <a>XML namespace</a></a> on
  <a>HTML elements</a> in <a>HTML documents</a>. To ease migration to and from XHTML, authors may
  specify an attribute in no namespace with no prefix and with the literal localname
  "<code>xml:lang</code>" on <a>HTML elements</a> in <a>HTML documents</a>, but such attributes must
  only be specified if a <code>lang</code> attribute in no namespace is also specified, and both
  attributes must have the same value when compared in an <a>ASCII case-insensitive</a> manner.

  <p class="note">
    The attribute in no namespace with no prefix and with the literal localname
    "<code>xml:lang</code>" has no effect on language processing.
  </p>

  <div class="impl">
    <hr />

    To determine the <dfn>language</dfn> of a node, user agents must look at the nearest ancestor
    element (including the element itself if the node is an element) that has a
    <a><code>lang</code> attribute in the <a>XML namespace</a></a> set or is an <a>HTML element</a>
    and has a <code>lang</code> in no namespace attribute set. That attribute specifies the language
    of the node (regardless of its value).

    If both the <code>lang</code> attribute in no namespace and the
    <a><code>lang</code> attribute in the <a>XML namespace</a></a> are set on an element, user
    agents must use the <a><code>lang</code> attribute in the <a>XML namespace</a></a>, and the
    <code>lang</code> attribute in no namespace must be <a>ignored</a> for the purposes of
    determining the element's language.

    If neither the node nor any of the node's ancestors, including the <a>root element</a>,
    have either attribute set, but there is a <a>pragma-set default language</a> set, then that
    is the language of the node. If there is no <a>pragma-set default language</a> set, then
    language information from a higher-level protocol (such as HTTP), if any, must be used as the
    final fallback language instead. In the absence of any such language information, and in cases
    where the higher-level protocol reports multiple languages, the language of the node is unknown,
    and the corresponding language tag is the empty string.

    If the resulting value is not a recognized language tag, then it must be treated as an unknown
    language having the given language tag, distinct from all other languages. For the purposes of
    round-tripping or communicating with other services that expect language tags, user agents
    should pass unknown language tags through unmodified, and tagged as being BCP 47 language tags,
    so that subsequent services do not interpret the data as another type of language description.
    [[!BCP47]]

    <p class="example">
      Thus, for instance, an element with <code>lang="xyzzy"</code> would be matched by the selector
      <code>:lang(xyzzy)</code> (e.g. in CSS), but it would not be matched by
      <code>:lang(abcde)</code>, even though both are equally invalid. Similarly, if a Web browser
      and screen reader working in unison communicated about the language of the element, the
      browser would tell the screen reader that the language was "xyzzy", even if it knew it was
      invalid, just in case the screen reader actually supported a language with that tag after all.
      Even if the screen reader supported both BCP 47 and another syntax for encoding language
      names, and in that other syntax the string "xyzzy" was a way to denote the Belarusian
      language, it would be <em>incorrect</em> for the screen reader to then start treating text as
      Belarusian, because "xyzzy" is not how Belarusian is described in BCP 47 codes (BCP 47 uses
      the code "be" for Belarusian).
    </p>

    If the resulting value is the empty string, then it must be interpreted as meaning that the
    language of the node is explicitly unknown.

    <hr />

    User agents may use the element's language to determine proper processing or rendering (e.g. in
    the selection of appropriate fonts or pronunciations, for dictionary selection, or for the user
    interfaces of form controls such as date pickers).

    <hr />

    The <dfn><code>lang</code></dfn> IDL attribute must <a>reflect</a> the <code>lang</code> content
    attribute in no namespace.
  </div>

<h5 id="the-translate-attribute">The <code>translate</code> attribute</h5>

  The <dfn><code>translate</code></dfn> attribute is an <a>enumerated attribute</a> that is used to
  specify whether an element's attribute values and the values of its <code>Text</code> node
  children are to be translated when the page is localized, or whether to leave them unchanged.

  The attribute's keywords are the empty string, <code>yes</code>, and <code>no</code>. The empty
  string and the <code>yes</code> keyword map to the <i>yes</i> state. The <code>no</code> keyword
  maps to the <i>no</i> state. In addition, there is a third state, the <i>inherit</i> state, which
  is the <i>missing value default</i> (and the <i>invalid value default</i>).

  Each element (even non-HTML elements) has a <dfn>translation mode</dfn>, which is in either the
  <a>translate-enabled</a> state or the <a>no-translate</a> state. If an <a>HTML element</a>'s
  <code>translate</code> attribute is in the <i>yes</i> state, then the element's
  <a>translation mode</a> is in the <a>translate-enabled</a> state; otherwise, if the element's
  <code>translate</code> attribute is in the <i>no</i> state, then the element's
  <a>translation mode</a> is in the <a>no-translate</a> state. Otherwise, either the element's
  <code>translate</code> attribute is in the <i>inherit</i> state, or the element is not an
  <a>HTML element</a> and thus does not have a <code>translate</code> attribute; in either case, the
  element's <a>translation mode</a> is in the same state as its parent element's, if any, or in the
  <a>translate-enabled</a> state, if the element is a <a>root element</a>.

  When an element is in the <dfn>translate-enabled</dfn> state, the element's
  <a>translatable attributes</a> and the values of its <code>Text</code> node children are to be
  translated when the page is localized.

  When an element is in the <dfn>no-translate</dfn> state, the element's attribute values and the
  values of its <code>Text</code> node children are to be left as-is when the page is localized,
  e.g. because the element contains a person's name or a the name of a computer program.

  The following attributes are <dfn>translatable attributes</dfn>:

  * <code>abbr</code> on <code>th</code> elements
  * <code>alt</code> on <code>area</code>, <code>img</code>, and <code>input</code> elements
  * <code>content</code> on <code>meta</code> elements, if the <code>name</code> attribute specifies
    a metadata name whose value is known to be translatable
  * <code>download</code> on <code>a</code> and <code>area</code> elements
  * <code>label</code> on <code>menuitem</code>, <code>menu</code>, <code>optgroup</code>,
    <code>option</code>, and <code>track</code> elements
  * <code>lang</code> on <a>HTML elements</a>; must be "translated" to match the language used in
    the translation
  * <code>placeholder</code> on <code>input</code> and <code>textarea</code> elements
  * <code>srcdoc</code> on <code>iframe</code> elements; must be parsed and recursively processed
  * <code>style</code> on <a>HTML elements</a>; must be parsed and recursively processed (e.g. for
    the values of 'content' properties)
  * <code>title</code> on all <a>HTML elements</a>
  * <code>value</code> on <code>input</code> elements with a <code>type</code> attribute in the
    <a>Button</a> state or the <a>Reset Button</a> state

  <div class="impl">
    <hr />

    The <dfn><code>translate</code></dfn> IDL attribute must, on getting, return true if the
    element's <a>translation mode</a> is <a>translate-enabled</a>, and false otherwise. On setting,
    it must set the content attribute's value to "<code>yes</code>" if the new value is true, and
    set the content attribute's value to "<code>no</code>" otherwise.
  </div>

  <div class="example">
    In this example, everything in the document is to be translated when the page is localized,
    except the sample keyboard input and sample program output:

    <pre highlight="html">
      &lt;!DOCTYPE HTML>
      &lt;html> &lt;!-- default on the root element is translate=yes -->
        &lt;head>
          &lt;title>The Bee Game&lt;/title> &lt;!-- implied translate=yes inherited from ancestors -->
        &lt;/head>
        &lt;body>
          &lt;p>The Bee Game is a text adventure game in English.&lt;/p>
          &lt;p>When the game launches, the first thing you should do is type
            &lt;kbd translate=no>eat honey&lt;/kbd>. The game will respond with:&lt;/p>
        &lt;pre>&lt;samp translate=no>Yum yum! That was some good honey!&lt;/samp>&lt;/pre>
        &lt;/body>
      &lt;/html>
    </pre>
  </div>

<h5 id="the-xmlbase-attribute-xml-only">The <dfn><code>xml:base</code></dfn> attribute (XML only)</h5>

  The <code>xml:base</code> attribute is defined in XML Base. [[!XMLBASE]]

  The <code>xml:base</code> attribute may be used on <a>HTML elements</a> of <a>XML documents</a>.
  Authors must not use the <code>xml:base</code> attribute on <a>HTML elements</a> in
  <a>HTML documents</a>.

<h5 id="the-dir-attribute">The <dfn><code>dir</code></dfn> attribute</h5>

  The <code>dir</code> attribute specifies the element's text directionality. The attribute is an
  <a>enumerated attribute</a> with the following keywords and states:

  : The <dfn><code>ltr</code></dfn> keyword, which maps to the <dfn>ltr</dfn> state
  :: Indicates that the contents of the element are explicitly directionally isolated left-to-right
      text.

  : The <dfn><code>rtl</code></dfn> keyword, which maps to the <dfn>rtl</dfn> state
  :: Indicates that the contents of the element are explicitly directionally isolated right-to-left
      text.

  : The <dfn><code>auto</code></dfn> keyword, which maps to the <dfn>auto</dfn> state
  :: Indicates that the contents of the element are explicitly directionally isolated text, but that
      the direction is to be determined programmatically using the contents of the element (as
      described below).

      <p class="note">
        The heuristic used by this state is very crude (it just looks at the first character with a
        strong directionality, in a manner analogous to the Paragraph Level determination in the
        bidirectional algorithm). Authors are urged to only use this value as a last resort when the
        direction of the text is truly unknown and no better server-side heuristic can be applied.
        [[!BIDI]]
      </p>

      <p class="note">
        For <code>textarea</code> and <code>pre</code> elements, the heuristic is applied on a
        per-paragraph level.
      </p>

  The attribute has no <i>invalid value default</i> and no <i>missing value default</i>.

  <hr />

  <dfn>The directionality</dfn> of an element (any element, not just an <a>HTML element</a>) is
  either '<dfn>ltr</dfn>' or '<dfn>rtl</dfn>', and is determined as per the first appropriate set of
  steps from the following list:

  <dl class="switch">
    <dt>If the element's <code>dir</code> attribute is in the <a>ltr</a> state</dt>
    <dt>
      If the element is a <a>root element</a> and the <code>dir</code> attribute is not in a defined
      state (i.e. it is not present or has an invalid value)
    </dt>
    <dt>
      If the element is an <code>input</code> element whose <code>type</code> attribute is in the
      <a>Telephone</a> state, and the <code>dir</code> attribute is not in a defined state (i.e. it
      is not present or has an invalid value)
    </dt>
    <dd><a>The directionality</a> of the element is '<a>ltr</a>'.</dd>

    <dt>If the element's <code>dir</code> attribute is in the <a>rtl</a> state</dt>
    <dd><a>The directionality</a> of the element is '<a>rtl</a>'.</dd>

    <dt>
      If the element is an <code>input</code> element whose <code>type</code> attribute is in the
      <a>Text</a>, <a>Search</a>, <a>Telephone</a>, <a>URL</a>, or <a>E-mail</a> state, and the
      <code>dir</code> attribute is in the <a>auto</a> state
    </dt>
    <dt>
      If the element is a <code>textarea</code> element and the <code>dir</code> attribute is in the
      <a>auto</a> state
    </dt>
    <dd>
      If the element's <a>value</a> contains a character of bidirectional character type AL or R,
      and there is no character of bidirectional character type L anywhere before it in the
      element's <a>value</a>, then <a>the directionality</a> of the element is '<a>rtl</a>'.
      [[!BIDI]]

      Otherwise, if the element's <a>value</a> is not the empty string, or if the element is a
      <a>root element</a>, <a>the directionality</a> of the element is '<a>ltr</a>'.

      Otherwise, <a>the directionality</a> of the element is the same as the element's parent
      element's <a>directionality</a>.
    </dd>

    <dt>If the element's <code>dir</code> attribute is in the <a>auto</a> state</dt>
    <dt>
      If the element is a <code>bdi</code> element and the <code>dir</code> attribute is not in a
      defined state (i.e. it is not present or has an invalid value)
    </dt>
    <dd>
      Find the first character in <a>tree order</a> that matches the following criteria:

      * The character is from a <code>Text</code> node that is a descendant of the element whose
        <a>directionality</a> is being determined.
      * The character is of bidirectional character type L, AL, or R. [[!BIDI]]
      * The character is not in a <code>Text</code> node that has an ancestor element that is a
        descendant of the element whose <a>directionality</a> is being determined and that is
        either:
        * A <code>bdi</code> element.
        * A <code>script</code> element.
        * A <code>style</code> element.
        * A <code>textarea</code> element.
        * An element with a <code>dir</code> attribute in a defined state.

      If such a character is found and it is of bidirectional character type AL or R,
      <a>the directionality</a> of the element is '<a>rtl</a>'.

      If such a character is found and it is of bidirectional character type L,
      <a>the directionality</a> of the element is '<a>ltr</a>'.

      Otherwise, if the element is a <a>root element</a>, <a>the directionality</a> of the element
      is '<a>ltr</a>'.

      Otherwise, <a>the directionality</a> of the element the same as the element's parent element's
      <a>directionality</a>.
    </dd>

    <dt>
      If the element has a parent element and the <code>dir</code> attribute is not in a defined
      state (i.e. it is not present or has an invalid value)
    </dt>
    <dd>
      <a>The directionality</a> of the element is the same as the element's parent element's
      <a>directionality</a>.
    </dd>
  </dl>

  <p class="note">
    Since the <code>dir</code> attribute is only defined for <a>HTML elements</a>, it cannot be
    present on elements from other namespaces. Thus, elements from other namespaces always just
    inherit their <a>directionality</a> from their parent element, or, if they don't have one,
    default to '<a>ltr</a>'.
  </p>

  <div class="impl">
    <p class="note">
      This attribute <a>has rendering requirements involving the bidirectional algorithm</a>.
    </p>
  </div>

  <hr />

  The <dfn>directionality of an attribute</dfn> of an <a>HTML element</a>, which is used when the
  text of that attribute is to be included in the rendering in some manner, is determined as per the
  first appropriate set of steps from the following list:

  <dl class="switch">
    <dt>
      If the attribute is a <a>directionality-capable attribute</a> and the element's
      <code>dir</code> attribute is in the <a>auto</a> state
    </dt>
    <dd>
      Find the first character (in logical order) of the attribute's value that is of bidirectional
      character type L, AL, or R. [[!BIDI]]</a>

      If such a character is found and it is of bidirectional character type AL or R, the
      <a>directionality of the attribute</a> is '<a>rtl</a>'.

      Otherwise, the <a>directionality of the attribute</a> is '<a>ltr</a>'.
    </dd>

    <dt>Otherwise</dt>
    <dd>
      The <a>directionality of the attribute</a> is the same as <a>the element's directionality</a>.
    </dd>
  </dl>

  The following attributes are <dfn>directionality-capable attributes</dfn>:

  * <code>abbr</code> on <code>th</code> elements
  * <code>alt</code> on <code>area</code>, <code>img</code>, and <code>input</code> elements
  * <code>content</code> on <code>meta</code> elements, if the <code>name</code> attribute specifies
    a metadata name whose value is primarily intended to be human-readable rather than
    machine-readable
  * <code>label</code> on <code>menuitem</code>, <code>menu</code>, <code>optgroup</code>,
    <code>option</code>, and <code>track</code> elements
  * <code>placeholder</code> on <code>input</code> and <code>textarea</code> elements
  * <code>title</code> on all <a>HTML elements</a>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>dir</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns <a>the <code>html</code> element</a>'s <code>dir</code> attribute's value, if any.

      Can be set, to either "<code>ltr</code>", "<code>rtl</code>", or "<code>auto</code>" to
      replace <a>the <code>html</code> element</a>'s <code>dir</code> attribute's value.

      If there is no <a><code>html</code> element</a>, returns the empty string and ignores new
      values.
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>dir</code></dfn> IDL attribute on an element must <a>reflect</a> the
    <code>dir</code> content attribute of that element, <a>limited to only known values</a>.

    The <dfn><code>dir</code></dfn> IDL attribute on <code>Document</code> objects must
    <a>reflect</a> the <code>dir</code> content attribute of <a>the <code>html</code> element</a>,
    if any, <a>limited to only known values</a>. If there is no such element, then the attribute
    must return the empty string and do nothing on setting.
  </div>

  <p class="note">
    Authors are strongly encouraged to use the <code>dir</code> attribute to indicate text direction
    rather than using CSS, since that way their documents will continue to render correctly even in
    the absence of CSS (e.g. as interpreted by search engines).
  </p>

  <div class="example">
    This markup fragment is of an IM conversation.

    <pre highlight="html">
      &lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> How do you write "What's your name?" in Arabic?&lt;/p>
      &lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> &#x645;&#x627; &#x627;&#x633;&#x645;&#x643;&#x61f;&lt;/p>
      &lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> Thanks.&lt;/p>
      &lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> That's written "&#x634;&#x643;&#x631;&#x64b;&#x627;".&lt;/p>
      &lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> Do you know how to write "Please"?&lt;/p>
      &lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> "&#x645;&#x646; &#x641;&#x636;&#x644;&#x643;", right?&lt;/p>
    </pre>

    Given a suitable style sheet and the default alignment styles for the <code>p</code> element,
    namely to align the text to the <i>start edge</i> of the paragraph, the resulting rendering could
    be as follows:

    <img src="images/im.png" alt="Each paragraph rendered as a separate block, with the paragraphs left-aligned except the second paragraph and the last one, which would  be right aligned, with the usernames ('Student' and 'Teacher' in this example) flush right, with a colon to their left, and the text first to the left of that." width="366" height="157" />

    As noted earlier, the <code>auto</code> value is not a panacea. The final paragraph in this
    example is misinterpreted as being right-to-left text, since it begins with an Arabic character,
    which causes the "right?" to be to the left of the Arabic text.
  </div>

<h5 id="classes">The <dfn><code>class</code></dfn> attribute</h5>

  Every <a>HTML element</a> may have a <code>class</code> attribute specified.

  The attribute, if specified, must have a value that is a <a>set of space-separated tokens</a>
  representing the various classes that the element belongs to.

  <div class="impl">
    The classes that an <a>HTML element</a> has assigned to it consists of all the classes returned
    when the value of the <code>class</code> attribute is <a>split on spaces</a>. (Duplicates are
    ignored.)
  </div>

  <p class="note">
    Assigning classes to an element affects class matching in selectors in CSS, the
    <code>getElementsByClassName()</code> method in the DOM, and other such features.
  </p>

  There are no additional restrictions on the tokens authors can use in the <code>class</code>
  attribute, but authors are encouraged to use values that describe the nature of the content,
  rather than values that describe the desired presentation of the content.

  <div class="impl">
    <hr />

    <p class="note">
      The <dfn><code>className</code></dfn> and <dfn><code>classList</code></dfn> IDL attributes,
      defined in the DOM specification, <a>reflect</a> the <code>class</code> content attribute.
      [[!DOM]]
    </p>
  </div>

  <h5 id="the-style-attribute">The <dfn><code>style</code></dfn> attribute</h5>

  All <a>HTML elements</a> may have the <code>style</code> content attribute set. This is a
  <a>CSS styling attribute</a> as defined by the CSS Styling Attribute Syntax specification.
  [[!CSS-STYLE-ATTR]]

  <div class="impl">
    In user agents that support CSS, the attribute's value must be parsed when the attribute is
    added or has its value changed, according to the rules given for <a>CSS styling attributes</a>.
    [[!CSS-STYLE-ATTR]]
  </div>

  Documents that use <code>style</code> attributes on any of their elements must still be
  comprehensible and usable if those attributes were removed.

  <p class="note">
    In particular, using the <code>style</code> attribute to hide and show content, or to convey
    meaning that is otherwise not included in the document, is non-conforming. (To hide and show
    content, use the <code>hidden</code> attribute.)
  </p>

  <hr />

  <dl class="domintro">
    <dt><var>element</var> . <code>style</code></dt>
    <dd>
      Returns a <code>CSSStyleDeclaration</code> object for the element's <code>style</code>
      attribute.
    </dd>
  </dl>

  <div class="impl">
    The <dfn><code>style</code></dfn> IDL attribute is defined in the CSS Object Model (CSSOM)
    specification. [[!CSSOM]]
  </div>

  <div class="example">
    In the following example, the words that refer to colors are marked up using the
    <code>span</code> element and the <code>style</code> attribute to make those words show up in
    the relevant colors in visual media.

    <pre highlight="html">
      &lt;p>My sweat suit is &lt;span style="color: green; background:
      transparent">green&lt;/span> and my eyes are &lt;span style="color: blue;
      background: transparent">blue&lt;/span>.&lt;/p>
    </pre>
  </div>

<h5 id="embedding-custom-non-visible-data-with-the-data--attributes"><dfn>Embedding custom non-visible data</dfn> with the <code>data-*</code> attributes</h5>

  A <dfn>custom data attribute</dfn> is an attribute in no namespace whose name starts with the
  string "<dfn><code>data-</code></dfn>", has at least one character after the hyphen, is
  <a>XML-compatible</a>, and contains no <a>uppercase ASCII letters</a>.

  <p class="note">
    All attribute names on <a>HTML elements</a> in <a>HTML documents</a> get ASCII-lowercased
    automatically, so the restriction on ASCII uppercase letters doesn't affect such documents.
  </p>

  <a>Custom data attributes</a> are intended to store custom data private to the page or
  application, for which there are no more appropriate attributes or elements.

  These attributes are not intended for use by software that is not known to the administrators of
  the site that uses the attributes. For generic extensions that are to be used by multiple
  independent tools, either this specification should be extended to provide the feature explicitly,
  or a technology like <a>microdata</a> should be used (with a standardized vocabulary).

  <div class="example">
    For instance, a site about music could annotate list items representing tracks in an album with
    custom data attributes containing the length of each track. This information could then be used
    by the site itself to allow the user to sort the list by track length, or to filter the list for
    tracks of certain lengths.

    <pre highlight="html">
      &lt;ol>
        &lt;li data-length="2m11s">Beyond The Sea&lt;/li>
        ...
      &lt;/ol>
    </pre>

    It would be inappropriate, however, for the user to use generic software not associated with
    that music site to search for tracks of a certain length by looking at this data.

    This is because these attributes are intended for use by the site's own scripts, and are not a
    generic extension mechanism for publicly-usable metadata.
  </div>

  <div class="example">
    Similarly, a page author could write markup that provides information for a translation tool
    that they are intending to use:

    <pre highlight="html">
      &lt;p>The third &lt;span data-mytrans-de="Anspruch">claim&lt;/span> covers the case of
      &lt;span translate="no">HTML&lt;/span> markup.&lt;/p>
    </pre>

    In this example, the "<code>data-mytrans-de</code>" attribute gives specific text for the
    MyTrans product to use when translating the phrase "claim" to German. However, the standard
    <code>translate</code> attribute is used to tell it that in all languages, "HTML" is to remain
    unchanged. When a standard attribute is available, there is no need for a
    <a>custom data attribute</a> to be used.
  </div>

  Every <a>HTML element</a> may have any number of <a>custom data attributes</a> specified, with any
  value.

  <hr />

  <dl class="domintro">
    <dt><var>element</var> . <code>dataset</code></dt>
    <dd>
      Returns a <code>DOMStringMap</code> object for the element's <code>data-*</code> attributes.

      Hyphenated names become camel-cased. For example, <code>data-foo-bar=""</code> becomes
      <code>element.dataset.fooBar</code>.
    </dd>

  </dl>

  <div class="impl">
    The <dfn><code>dataset</code></dfn> IDL attribute provides convenient
    accessors for all the <code>data-*</code> attributes on an element. On
    getting, the <code>dataset</code> IDL attribute must return a
    <code>DOMStringMap</code> object, associated with the following algorithms, which expose these
    attributes on their element:

    : The algorithm for getting the list of name-value pairs
    :: 1. Let <var>list</var> be an empty list of name-value pairs.
        2. For each content attribute on the element whose first five characters are the string
            "<code>data-</code>" and whose remaining characters (if any) do not include any
            <a>uppercase ASCII letters</a>, in the order that those attributes are listed in the
            element's <a>attribute list</a>, add a name-value pair to <var>list</var> whose name is
            the attribute's name with the first five characters removed and whose value is the
            attribute's value.
        3. For each name in <var>list</var>, for each U+002D HYPHEN-MINUS character (-) in the name
            that is followed by a <a>lowercase ASCII letter</a>, remove the U+002D HYPHEN-MINUS
            character (-) and replace the character that followed it by the same character
            <a>converted to ASCII uppercase</a>.
        4. Return <var>list</var>.

    : The algorithm for setting names to certain values
    :: 1.Let <var>name</var> be the name passed to the algorithm.
        2. Let <var>value</var> be the value passed to the algorithm.
        3. If <var>name</var> contains a U+002D HYPHEN-MINUS character (-) followed by a
            <a>lowercase ASCII letter</a>, throw a <code>SyntaxError</code> exception and abort
            these steps.
        4. For each <a>uppercase ASCII letter</a> in <var>name</var>, insert a U+002D HYPHEN-MINUS
            character (-) before the character and replace the character with the same character
            <a>converted to ASCII lowercase</a>.
        5. Insert the string <code>data-</code> at the front of <var>name</var>.
        6. Set the value of the attribute with the name <var>name</var>, to the value
            <var>value</var>, replacing any previous value if the attribute already existed. If
            <code>setAttribute()</code> would have thrown an exception when setting an attribute
            with the name <var>name</var>, then this must throw the same exception.

    : The algorithm for deleting names
    :: 1. Let <var>name</var> be the name passed to the algorithm.
        2. For each <a>uppercase ASCII letter</a> in <var>name</var>, insert a U+002D HYPHEN-MINUS
            character (-) before the character and replace the character with the same character
            <a>converted to ASCII lowercase</a>.
        3. Insert the string <code>data-</code> at the front of <var>name</var>.
        4. Remove the attribute with the name <var>name</var>, if such an attribute exists. Do
            nothing otherwise.

        <p class="note">
          This algorithm will only get invoked by the Web IDL specification for names that are given
          by the earlier algorithm for getting the list of name-value pairs. [[!WEBIDL]]
        </p>
  </div>

  <div class="example">
    If a Web page wanted an element to represent a space ship, e.g. as part of a game, it would have
    to use the <code>class</code> attribute along with <code>data-*</code> attributes:

    <pre highlight="html">
      &lt;div class="spaceship">x="30">
        &lt;button class="fire" onclick="spaceships[this.parentNode.dataset.shipId].fire()">
          Fire
        &lt;/button>
      &lt;/div>
    </pre>

    Notice how the hyphenated attribute name becomes camel-cased in the API.
  </div>

  Authors should carefully design such extensions so that when the attributes are ignored and any
  associated CSS dropped, the page is still usable.

  <div class="impl">
    User agents must not derive any implementation behavior from these attributes or values.
    Specifications intended for user agents must not define these attributes to have any meaningful
    values.
  </div>

  JavaScript libraries may use the <a>custom data attributes</a>, as they are considered to be part
  of the page on which they are used. Authors of libraries that are reused by many authors are
  encouraged to include their name in the attribute names, to reduce the risk of clashes. Where it
  makes sense, library authors are also encouraged to make the exact name used in the attribute
  names customizable, so that libraries whose authors unknowingly picked the same name can be used
  on the same page, and so that multiple versions of a particular library can be used on the same
  page even when those versions are not mutually compatible.

  <div class="example">
    For example, a library called "DoQuery" could use attribute names like
    <code>data-doquery-range</code>, and a library called "jJo" could use attributes names like
    <code>data-jjo-range</code>. The jJo library could also provide an API to set which prefix to
    use (e.g. <code>J.setDataPrefix('j2')</code>, making the attributes have names like
    <code>data-j2-range</code>).
  </div>

<h4 id="requirements-relating-to-the-bidirectional-algorithm">
  Requirements relating to the bidirectional algorithm
</h4>

<h5 id="authoring-conformance-criteria-for-bidirectional-algorithm-formatting-characters">
  Authoring conformance criteria for bidirectional-algorithm formatting characters
</h5>

  <a>Text content</a> in <a>HTML elements</a> with <code>Text</code> nodes in their <a>contents</a>,
  and text in attributes of <a>HTML elements</a> that allow free-form text, may contain characters
  in the ranges U+202A to U+202E and U+2066 to U+2069 (the bidirectional-algorithm formatting
  characters). However, the use of these characters is restricted so that any embedding or overrides
  generated by these characters do not start and end with different parent elements, and so that all
  such embeddings and overrides are explicitly terminated by a U+202C POP DIRECTIONAL FORMATTING
  character. This helps reduce incidences of text being reused in a manner that has unforeseen
  effects on the bidirectional algorithm. [[!BIDI]]

  The aforementioned restrictions are defined by specifying that certain parts of documents form
  <a>bidirectional-algorithm formatting character ranges</a>, and then imposing a requirement on
  such ranges.

  The strings resulting from applying the following algorithm to an <a>HTML element</a>
  <var>element</var> are <a>bidirectional-algorithm formatting character ranges</a>:

  1. Let <var>output</var> be an empty list of strings.
  2. Let <var>string</var> be an empty string.
  3. Let <var>node</var> be the first child node of <var>element</var>, if any, or null otherwise.
  4. <i>Loop</i>: If <var>node</var> is null, jump to the step labeled <i>end</i>.
  5. Process <var>node</var> according to the first matching step from the following list:

      <dl class="switch">
        <dt>If <var>node</var> is a <code>Text</code> node</dt>
        <dd>Append the text data of <var>node</var> to <var>string</var>.</dd>

        <dt>If <var>node</var> is a <code>br</code> element</dt>
        <dt>
          If <var>node</var> is an <a>HTML element</a> that is <a>flow content</a> but that is not
          also <a>phrasing content</a>
        </dt>
        <dd>
          If <var>string</var> is not the empty string, push <var>string</var> onto
          <var>output</var>, and let <var>string</var> be empty string.
        </dd>

        <dt>Otherwise</dt>
        <dd>Do nothing.</dd>
      </dl>
  6. Let <var>node</var> be <var>node</var>'s next sibling, if any, or null otherwise.
  7. Jump to the step labeled <i>loop</i>.
  8. <i>End</i>: If <var>string</var> is not the empty string, push <var>string</var> onto
      <var>output</var>.
  9. Return <var>output</var> as the <a>bidirectional-algorithm formatting character ranges</a>.

  The value of a namespace-less attribute of an <a>HTML element</a> is a <a>bidirectional-algorithm
  formatting character range</a>.

  Any strings that, as described above, are
  <dfn>bidirectional-algorithm formatting character ranges</dfn> must match the <code>string</code>
  production in the following ABNF, the character set for which is Unicode. [[!ABNF]]

  <pre data-highlight="abnf">
    string        = *( plaintext ( embedding / override / isolation ) ) plaintext
    embedding     = ( lre / rle ) string pdf
    override      = ( lro / rlo ) string pdf
    isolation     = ( lri / rli / fsi ) string pdi
    lre           = %x202A ; U+202A LEFT-TO-RIGHT EMBEDDING
    rle           = %x202B ; U+202B RIGHT-TO-LEFT EMBEDDING
    lro           = %x202D ; U+202D LEFT-TO-RIGHT OVERRIDE
    rlo           = %x202E ; U+202E RIGHT-TO-LEFT OVERRIDE
    pdf           = %x202C ; U+202C POP DIRECTIONAL FORMATTING
    lri           = %x2066 ; U+2066 LEFT-TO-RIGHT ISOLATE
    rli           = %x2067 ; U+2067 RIGHT-TO-LEFT ISOLATE
    fsi           = %x2068 ; U+2068 FIRST STRONG ISOLATE
    pdi           = %x2069 ; U+2069 POP DIRECTIONAL ISOLATE
    plaintext     = *( %x0000-2029 / %x202F-2065 / %x206A-10FFFF )
                    ; any string with no bidirectional-algorithm formatting characters
  </pre>

  <p class="note">
    While the U+2069 POP DIRECTIONAL ISOLATE character implicitly also ends open embeddings and
    overrides, text that relies on this implicit scope closure is not conforming to this
    specification. All strings of embeddings, overrides, and isolations need to be explicitly
    terminated to conform to this section's requirements.
  </p>

  <p class="note">
    Authors are encouraged to use the <code>dir</code> attribute, the <code>bdo</code> element, and
    the <code>bdi</code> element, rather than maintaining the bidirectional-algorithm formatting
    characters manually. The bidirectional-algorithm formatting characters interact poorly with CSS.
</p>

  <div class="impl">

    <h5 id="user-agent-conformance-criteria">User agent conformance criteria</h5>

    User agents must implement the Unicode bidirectional algorithm to determine the proper ordering
    of characters when rendering documents and parts of documents. [[!BIDI]]

    The mapping of HTML to the Unicode bidirectional algorithm must be done in one of three ways.
    Either the user agent must implement CSS, including in particular the CSS 'unicode-bidi',
    'direction', and 'content' properties, and must have, in its user agent style sheet, the rules
    using those properties given in this specification's <a>rendering</a> section, or,
    alternatively, the user agent must act as if it implemented just the aforementioned properties
    and had a user agent style sheet that included all the aforementioned rules, but without letting
    style sheets specified in documents override them, or, alternatively, the user agent must
    implement another styling language with equivalent semantics. [[!CSS-WRITING-MODES]
    [[!CSS3-CONTENT]]

    The following elements and attributes have requirements defined by the <a>rendering</a> section
    that, due to the requirements in this section, are requirements on all user agents (not just
    those that <a>support the suggested default rendering</a>):

    * <code>dir</code> attribute
    * <code>bdi</code> element
    * <code>bdo</code> element
    * <code>br</code> element
    * <code>pre</code> element
    * <code>textarea</code> element
    * <code>wbr</code> element
  </div>

  <h4 id="wai-aria"><dfn>WAI-ARIA</dfn></h4>

  <div class="note">
    Authors are encouraged to make use of the following documents for guidance on using ARIA in HTML
    beyond that which is provided in this section:

    * <a>Using WAI-ARIA in HTML</a> - A practical guide for developers on how to to add
        accessibility information to HTML elements using the Accessible Rich Internet Applications
        specification [[!WAI-ARIA]]. In particular the <a>Recommendations Table</a> provides a
        complete reference for authors as to which ARIA roles, states and properties are appropriate
        to use on each HTML element.

    * <a>WAI-ARIA 1.0 Authoring Practices</a> - An author's guide to understanding and implementing
        Accessible Rich Internet Applications.
  </div>

  Authors may use the ARIA <code>role</code> and <code>aria-*</code> attributes on
  <a>HTML elements</a>, in accordance with the requirements described in the ARIA specifications,
  except where these conflict with the <a>strong native semantics</a> or are equal to the
  <a>default implicit ARIA semantics</a> described below. These exceptions are intended to prevent
  authors from making assistive technology products report nonsensical states that do not represent
  the actual state of the document. [[!WAI-ARIA]]

  Authors must not set the ARIA <code>role</code> and <code>aria-*</code> attributes in a manner
  that conflicts with the semantics described in the following table, except that the
  <code>presentation</code> role may always be used. Authors must not set the ARIA <code>role</code>
  and <code>aria-*</code> attributes to values that match the <a>default implicit ARIA semantics</a>
  defined in the following two tables.

  <div class="impl">
    User agents must implement ARIA semantics on all <a>HTML elements</a>, as defined in the ARIA
    specifications. The <a>default implicit ARIA semantics</a> defined below must be recognized by
    implementations for the purposes of ARIA processing. [[!WAI-ARIA-IMPLEMENTATION]]

    <p class="note">
      The ARIA attributes defined in the ARIA specifications, and the <a>strong native semantics</a>
      and <a>default implicit ARIA semantics</a> defined below, do not have any effect on CSS
      pseudo-class matching, user interface modalities that don't use assistive technologies, or the
      default actions of user interaction events as described in this specification.
    </p>
  </div>

<h5 id="aria-role-attribute">ARIA Role Attribute</h5>

  Any HTML element, other than elements having <a>Strong Native Semantics</a> of <a>No role</a>, may
  have an ARIA <code>role</code> attribute specified. This is an ARIA Role attribute as defined by
  [[!WAI-ARIA]] <a>Section 5.4 Definition of Roles</a>.

  The attribute, if specified, must have a value that is a set of space-separated tokens;
  each token must be a non-abstract role defined in the WAI-ARIA specification [[!WAI-ARIA]].

  <div class="impl">
    The WAI-ARIA role that an HTML element has assigned to it is the first non-abstract role found
    in the list of values generated when the <code>role</code> attribute is split on spaces.
  </div>

<h5 id="state-and-property-attributes">State and Property Attributes</h5>

  Every HTML element may have ARIA state and property attributes specified. These attributes are
  defined by [[!WAI-ARIA]] in
  <a>Section 6.6, Definitions of States and Properties (all aria-* attributes)</a>.

  A subset of the ARIA State and Property attributes are defined as
  "<dfn>Global States and Properties</dfn>" in <a>Section 6.4. Global States and Properties</a> of
  the [[!WAI-ARIA]] Specification.

  These attributes, if specified, must have a value that is the ARIA value type in the "Value" field
  of the definition for the state or property, mapped to the appropriate HTML value type according
  to [[!WAI-ARIA]] <a>Section 10.2 Mapping WAI-ARIA Value types to languages</a> using the HTML 5
  mapping.

  ARIA State and Property attributes can be used on any element. They are not always meaningful,
  however, and in such cases user agents might not perform any processing aside from including them
  in the DOM. State and property attributes are processed according to the requirements of the
  sections <a>Strong Native Semantics</a> and <a>Implicit ARIA semantics</a>, as well as
  [[!WAI-ARIA]] and [[!WAI-ARIA-IMPLEMENTATION]].

<h5 id="sec-strong-native-semantics">Strong Native Semantics</h5>

  The following table defines the <a>strong native semantics</a> and corresponding
  <a>default implicit ARIA semantics</a> that apply to <a>HTML elements</a>. Each language feature
  (element or attribute) in a cell in the first column implies the ARIA semantics (any role, states,
  and properties) given in the cell in the second column of the same row. <span  class="impl">When
  multiple rows apply to an element, the role from the last row to define a role must be applied,
  and the states and properties from all the rows must be combined.</span>

  Documents must not use any <code>role</code> values with elements in the following table other
  than the corresponding role value (if any) as listed for that element in the second column, or the
  <code>role</code> value "<code>presentation</code>", if the second column indicates that element's
  semantics can be removed by using the "<code>presentation</code>" <code>role</code> value.

 <p class="note">
   In the majority of cases setting an ARIA <code>role</code> and/or <code>aria-*</code> attribute
   that matches the <a>default implicit ARIA semantics</a> is unnecessary and not recommended as
   these properties are already set by the browser.
 </p>

  <table>
    <thead>
      <tr>
        <th>Language feature</th>
        <th><a>Strong native semantics</a> and <a>default implicit ARIA semantics</a></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>area</code> element that creates a <a>hyperlink</a></td>
        <td><code>link</code> role</td>
      </tr>
      <tr>
        <td><code>base</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>datalist</code> element</td>
        <td>
          <code>listbox</code> role, with the <code>aria-multiselectable</code> property set to
          "false"
        </td>
      </tr>
      <tr>
        <td><code>details</code> element</td>
        <td>
          <code>aria-expanded</code> state set to "true" if the element's <code>open</code>
          attribute is present, and set to "false" otherwise
        </td>
      </tr>
      <tr>
        <td><code>dialog</code> element without an <code>open</code> attribute</td>
        <td>The <code>aria-hidden</code> state set to "true"</td>
      </tr>
      <tr>
        <td><code>fieldset</code> element</td>
        <td>
          <code>group</code> role (semantics may be removed by using the <code>presentation</code>
          role)
        </td>
      </tr>
      <tr>
        <td>
          <code>footer</code> element that is not a descendant of an <code>article</code> or
          <code>section</code> element.
        </td>
        <td>
          <code>contentinfo</code> role (semantics may be removed by using the
          <code>presentation</code> role)
        </td>
      </tr>
      <tr>
        <td><code>head</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td>
          <code>header</code> element that is not a descendant of an <code>article</code> or
          <code>section</code> element.
        </td>
        <td>
          <code>banner</code> role (semantics may be removed by using the <code>presentation</code>
          role)
        </td>
      </tr>
      <tr>
        <td><code>hr</code> element</td>
        <td>
          <code>separator</code> role (semantics may be removed by using the
          <code>presentation</code> role)
        </td>
      </tr>
      <tr>
        <td><code>html</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>img</code> element whose <code>alt</code> attribute's value is empty</td>
        <td>
          <a>No role</a>. User Agents must identify the <code>img</code> as ignored or omit it from
          the accessibility tree.
        </td>
      </tr>
      <tr>
        <td>
          <code>img</code> element whose <code>alt</code> attribute's value is empty and whose
          <code>usemap</code> attribute has a <a>valid hash-name reference</a> to a <code>map</code>
          element.
        </td>
        <td><code>img</code> role</td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Checkbox</a>
          state
        </td>
        <td>
          <code>aria-checked</code> state set to "mixed" if the element's <code>indeterminate</code>
          IDL attribute is true, or "true" if the element's <a>checkedness</a> is true, or "false"
          otherwise
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Color</a> state
        </td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Date</a> state
        </td>
        <td>
          <a>No role</a>, with the <code>aria-readonly</code> property set to "true" if the element
          has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Date and Time</a>
          state
        </td>
        <td>
          <a>No role</a>, with the <code>aria-readonly</code> property set to "true" if the element
          has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>E-mail</a> state
          with no <a>suggestions source element</a>
        </td>
        <td>
          <code>textbox</code> role, with the <code>aria-readonly</code> property set to "true" if
          the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>File Upload</a>
          state
        </td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Hidden</a> state
        </td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Month</a> state
        </td>
        <td>
          <a>No role</a>, with the <code>aria-readonly</code> property set to "true" if the element
          has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Number</a> state
        </td>
        <td>
          <code>spinbutton</code> role, with the <code>aria-readonly</code> property set to "true"
          if the element has a <code>readonly</code> attribute, the <code>aria-valuemax</code>
          property set to the element's <a>maximum</a>, the <code>aria-valuemin</code> property set
          to the element's <a>minimum</a>, and, if the result of applying the <a>rules for parsing
          floating-point number values</a> to the element's <a>value</a> is a number, with the
          <code>aria-valuenow</code> property set to that number
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Password</a> state
        </td>
        <td>
          <code>textbox</code> role, with the <code>aria-readonly</code> property set to "true" if
          the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Range</a> state
          and the <code>multiple</code> attribute not specified
        </td>
        <td>
          <code>aria-valuemax</code> property set to the element's <a>maximum</a>, and the
          <code>aria-valuemin</code> property set to the element's <a>minimum</a>
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Reset Button</a>
          state
        </td>
        <td><code>button</code> role</td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Search</a> state
          with no <a>suggestions source element</a>
        </td>
        <td>
          <code>textbox</code> role, with the <code>aria-readonly</code> property set to "true" if
          the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Submit Button</a>
          state
        </td>
        <td><code>button</code> role</td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Telephone</a>
          state with no <a>suggestions source element</a>
        </td>
        <td>
          <code>textbox</code> role, with the <code>aria-readonly</code> property set to "true" if
          the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Text</a> state
          with no <a>suggestions source element</a>
        </td>
        <td>
          <code>textbox</code> role, with the <code>aria-readonly</code> property set to "true" if
          the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Text</a>,
          <a>Search</a>, <a>Telephone</a>, <a>URL</a>, or <a>E-mail</a> states with a <a>suggestions
          source element</a>
        </td>
        <td>
          <code>combobox</code> role, with the <code>aria-owns</code> property set to the same value
          as the <code>list</code> attribute, and the <code>aria-readonly</code> property set to
          "true" if the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Time</a> state
        </td>
        <td>
          <a>No role</a>, with the <code>aria-readonly</code> property set to "true" if the element
          has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>URL</a> state with
          no <a>suggestions source element</a>
        </td>
        <td>
          <code>textbox</code> role, with the <code>aria-readonly</code> property set to "true" if
          the element has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Week</a> state
        </td>
        <td>
          <a>No role</a>, with the <code>aria-readonly</code> property set to "true" if the element
          has a <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td><code>keygen</code> element</td>
        <td><a>No role</a>
        </td>
      </tr>
      <tr>
        <td><code>label</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>link</code> element that creates a <a>hyperlink</a></td>
        <td><code>link</code> role</td>
      </tr>
      <tr>
        <td><code>main</code> element</td>
        <td>
          <code>main</code> role (semantics may be removed by using the <code>presentation</code>
          role)
        </td>
      </tr>
      <tr>
        <td><code>map</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td>
          <code>menu</code> element with a <code>type</code> attribute in the <a>popup menu</a>
          state
        </td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>menuitem</code> element</td>
        <td><code>menuitem</code> role</td>
      </tr>
      <tr>
        <td><code>meta</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>meter</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>nav</code> element</td>
        <td>
          <code>navigation</code> role (semantics may be removed by using the
          <code>presentation</code> role)
        </td>
      </tr>
      <tr>
        <td><code>noscript</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>optgroup</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>option</code> element that is in a <a>list of options</a></td>
        <td>
          <code>aria-selected</code> and <code>aria-checked</code> states set to "true" if the
          element's <a>selectedness</a> is true, and "false" otherwise
        </td>
      </tr>
      <tr>
        <td>
          <code>option</code> element that represents a suggestion in a <code>datalist</code>
          element or that is in a <a>list of options</a> of a <code>select</code> element with a
          <code>multiple</code> attribute or a <a>display size</a> greater than 1
        </td>
        <td><code>option</code> role</td>
      </tr>
      <tr>
        <td><code>param</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>picture</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>progress</code> element</td>
        <td>
          <code>progressbar</code> role, with, if the progress bar is determinate, the
          <code>aria-valuemax</code> property set to the maximum value of the progress bar, the
          <code>aria-valuemin</code> property set to zero, and the <code>aria-valuenow</code>
          property set to the current value of the progress bar
        </td>
      </tr>
      <tr>
        <td><code>script</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>select</code> element with a <code>multiple</code> attribute</td>
        <td>
          <code>listbox</code> role, with the <code>aria-multiselectable</code> property set to
          "true"
        </td>
      </tr>
      <tr>
        <td>
          <code>select</code> element with no <code>multiple</code> attribute and with a
          <a>display size</a> equal to 1
        </td>
        <td><code>aria-multiselectable</code> property set to "false"</td>
      </tr>
      <tr>
        <td>
          <code>select</code> element with no <code>multiple</code> attribute and with a
          <a>display size</a> greater than 1
        </td>
        <td>
          <code>listbox</code> role, with the <code>aria-multiselectable</code> property set to
          "false"
        </td>
      </tr>
      <tr>
        <td><code>select</code> element with a <code>required</code> attribute</td>
        <td>The <code>aria-required</code> state set to "true"</td>
      </tr>
      <tr>
        <td><code>source</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>style</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>template</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>textarea</code> element</td>
        <td>
          <code>textbox</code> role, with the <code>aria-multiline</code> property set to "true",
          and the <code>aria-readonly</code> property set to "true" if the element has a
          <code>readonly</code> attribute
        </td>
      </tr>
      <tr>
        <td><code>th</code> element with a <code>scope</code> attribute set to <code>row</code></td>
        <td><code>rowheader</code> role</td>
      </tr>
      <tr>
        <td><code>th</code> element with a <code>scope</code> attribute set to <code>col</code></td>
        <td><code>columnheader</code> role</td>
      </tr>
      <tr>
        <td>
          <code>th</code> element that is a <a>sorting-capable</a> <code>th</code> element whose
          column key <a>ordinality</a> is 1
        </td>
        <td>
          <code>columnheader</code> role, with the <code>aria-sort</code> state set to "ascending"
          if the element's <a>column sort direction</a> is <i>normal</i>, and "descending"
          otherwise.
        </td>
      </tr>
      <tr>
        <td><code>title</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td><code>track</code> element</td>
        <td><a>No role</a></td>
      </tr>
      <tr>
        <td>Element that is <a>disabled</a></td>
        <td>The <code>aria-disabled</code> state set to "true"</td>
      </tr>
      <tr>
        <td>
          Element that is a <a>candidate for constraint validation</a> but that does not
          <a>satisfy its constraints</a>
        </td>
        <td>The <code>aria-invalid</code> state set to "true"</td>
      </tr>
    </tbody>
  </table>

<h5 id="sec-implicit-aria-semantics">Implicit ARIA Semantics</h5>

  Some <a>HTML elements</a> have native semantics that can be overridden. The following table lists
  these elements and their <a>default implicit ARIA semantics</a>, along with the restrictions that
  apply to those elements. Each language feature (element or attribute) in a cell in the first
  column implies, unless otherwise overridden, the ARIA semantic (role, state, or property) given in
  the cell in the second column of the same row, but this semantic may be overridden under the
  conditions listed in the cell in the third column of that row.

  <table>
    <thead>
      <tr>
        <th>Language feature</th>
        <th>Default implicit ARIA semantic</th>
        <th>Restrictions</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>a</code> element that creates a <a>hyperlink</a></td>
        <td><code>link</code> role</td>
        <td>
          If specified, role must be one of the following: <code>link</code>, <code>button</code>,
          <code>checkbox</code>, <code>menuitem</code>, <code>menuitemcheckbox</code>,
          <code>menuitemradio</code>, <code>option</code>, <code>radio</code>, <code>tab</code>, or
          <code>treeitem</code>
        </td>
      </tr>
      <tr>
        <td><code>address</code> element</td>
        <td><a>No role</a></td>
        <td>If specified, role must be <code>contentinfo</code></td>
      </tr>
      <tr>
        <td><code>article</code> element</td>
        <td><code>article</code> role</td>
        <td>
          If specified, role must be one of the following: <code>article</code>,
          <code>document</code>, <code>application</code>, or <code>main</code>
        </td>
      </tr>
      <tr>
        <td><code>aside</code> element</td>
        <td><code>complementary</code> role</td>
        <td>
          If specified, role must be one of the following: <code>complementary</code>,
          <code>note</code>, <code>search</code> or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>audio</code> element</td>
        <td><a>No role</a></td>
        <td>If specified, role must be <code>application</code></td>
      </tr>
      <tr>
        <td><code>body</code> element</td>
        <td><code>document</code> role</td>
        <td>If specified, role must be either <code>document</code> or <code>application</code></td>
      </tr>
      <tr>
        <td><code>button</code> element</td>
        <td><code>button</code> role</td>
        <td>
          If specified, role must be one of the following:<code>button</code>, <code>link</code>,
          <code>menuitem</code>, <code>menuitemcheckbox</code>, <code>menuitemradio</code> or
          <code>radio</code>
        </td>
      </tr>
      <tr>
        <td><code>details</code> element</td>
        <td><code>group</code> role</td>
        <td>If specified, role must be a role that supports <code>aria-expanded</code></td>
      </tr>
      <tr>
        <td><code>dialog</code> element</td>
        <td><code>dialog</code> role</td>
        <td>
          If specified, role must be one of the following: <code>alert</code>,
          <code>alertdialog</code>, <code>application</code>, <code>contentinfo</code>,
          <code>dialog</code>, <code>document</code>, <code>log</code>, <code>main</code>,
          <code>marquee</code>, <code>region</code>, <code>search</code>, or <code>status</code>
        </td>
      </tr>
      <tr>
        <td><code>embed</code> element</td>
        <td><a>No role</a></td>
        <td>
          If specified, role must be one of the following: <code>application</code>,
          <code>document</code>, <code>img</code> or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>h1</code> element</td>
        <td>
          <code>heading</code> role, with the <code>aria-level</code> property set to the
          element's <a>outline depth</a>
        </td>
        <td>
          If specified, role must be one of the following: <code>heading</code>, <code>tab</code>
          or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>h2</code> element</td>
        <td>
          <code>heading</code> role, with the <code>aria-level</code> property set to the element's
          <a>outline depth</a>
        </td>
        <td>
          If specified, role must be one of the following: <code>heading</code>, <code>tab</code>
          or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>h3</code> element</td>
        <td>
          <code>heading</code> role, with the <code>aria-level</code> property set to the element's
          <a>outline depth</a>
        </td>
        <td>If specified, role must be one of the following: <code>heading</code>, <code>tab</code>
          or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>h4</code> element</td>
        <td>
          <code>heading</code> role, with the <code>aria-level</code> property set to the element's
          <a>outline depth</a>
        </td>
        <td>
          If specified, role must be one of the following: <code>heading</code>, <code>tab</code>
          or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>h5</code> element</td>
        <td>
          <code>heading</code> role, with the <code>aria-level</code> property set to the element's
          <a>outline depth</a>
        </td>
        <td>
          If specified, role must be one of the following: <code>heading</code>, <code>tab</code> or
          <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>h6</code> element</td>
        <td>
          <code>heading</code> role, with the <code>aria-level</code> property set to the element's
          <a>outline depth</a>
        </td>
        <td>
          If specified, role must be one of the following: <code>heading</code>, <code>tab</code> or
          <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>iframe</code> element</td>
        <td><a>No role</a></td>
        <td>
          If specified, role must be one of the following: <code>application</code>,
          <code>document</code>, <code>img</code>, or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>img</code> element whose <code>alt</code> attribute's value is absent</td>
        <td><code>img</code> role</td>
        <td>No restrictions</td>
      </tr>
      <tr>
        <td>
          <code>img</code> element whose <code>alt</code> attribute's value is present and not empty
        </td>
        <td><code>img</code> role</td>
        <td>No restrictions</td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Button</a> state
        </td>
        <td><code>button</code> role</td>
        <td>
          If specified, role must be one of the following: <code>button</code>, <code>link</code>,
          <code>menuitem</code>, <code>menuitemcheckbox</code>, <code>menuitemradio</code> or
          <code>radio</code>
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Checkbox</a> state
        </td>
        <td><code>checkbox</code> role</td>
        <td>
          If specified, role must be either <code>checkbox</code> or <code>menuitemcheckbox</code>
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Image Button</a>
          state
        </td>
        <td><code>button</code> role</td>
        <td>
          If specified, role must be one of the following: <code>button</code>, <code>link</code>,
          <code>menuitem</code>, <code>menuitemcheckbox</code>, <code>menuitemradio</code> or
          <code>radio</code>
        </td>
      </tr>
      <tr>
        <td>
          <code>input</code> element with a <code>type</code> attribute in the <a>Radio Button</a>
          state
        </td>
        <td><code>radio</code> role</td>
        <td>If specified, role must be either <code>radio</code> or <code>menuitemradio</code></td>
      </tr>
      <tr>
        <td>
          <code>input</code>, <code>select</code> or <code>textarea</code> element with a
          <code>required</code> attribute
        </td>
        <td>The <code>aria-required</code> state set to "true"</td>
        <td>If specified, the <code>aria-required</code> state must be set to "true"</td>
      </tr>
      <tr>
        <td>
          <code>input</code>, <code>select</code> or <code>textarea</code> element without a
          <code>required</code> attribute
        </td>
        <td><code>aria-required</code> set to "false"</td>
        <td>If specified, the <code>aria-required</code> state set to "true" or "false"</td>
      </tr>
      <tr>
        <td>
          <code>li</code> element whose parent is an <code>ol</code> or <code>ul</code> element
        </td>
        <td><code>listitem</code> role</td>
        <td>
          If specified, role must be one of the following: <code>listitem</code>,
          <code>menuitem</code>, <code>menuitemcheckbox</code>, <code>menuitemradio</code>,
          <code>option</code>, <code>radio</code>, <code>tab</code>, <code>treeitem</code>,
          or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td>
          <code>menu</code> element with a <code>type</code> attribute in the <a>toolbar</a> state
        </td>
        <td><code>toolbar</code> role</td>
        <td>
          If specified, role must be one of the following: <code>directory</code>,
          <code>list</code>, <code>listbox</code>, <code>menu</code>, <code>menubar</code>,
          <code>tablist</code>, <code>toolbar</code>, or <code>tree</code>
        </td>
      </tr>
      <tr>
        <td><code>object</code> element</td>
        <td><a>No role</a></td>
        <td>
          If specified, role must be one of the following: <code>application</code>,
          <code>document</code>, <code>img</code>, or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td><code>ol</code> element</td>
        <td><code>list</code> role</td>
        <td>
          If specified, role must be one of the following: <code>directory</code>,
          <code>group</code>, <code>list</code>, <code>listbox</code>, <code>menu</code>,
          <code>menubar</code>, <code>radiogroup</code>, <code>tablist</code>, <code>toolbar</code>,
          <code>tree</code>, or <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td>
          <code>option</code> element that is in a <a> list of options </a> of a <code>select</code>
          element with no <code>multiple</code> attribute and with a <a>display size</a> equal to 1
        </td>
        <td><code>option</code> role</td>
        <td>
          If specified, role must be one of the following: <code>option</code>,
          <code>menuitem</code>, <code>menuitemradio</code>, or <code>separator</code>
        </td>
      </tr>
      <tr>
        <td><code>output</code> element</td>
        <td>
          <code>status</code> role
          <p class="note"><a>bug 26135</a> - is role=status correct for output element?</p>
        </td>
        <td>No restrictions</td>
      </tr>
      <tr>
        <td><code>section</code> element</td>
        <td>
          <code>region</code> role
          <p class="note">
            It is strongly recommended that user agents such as screen readers only convey the
            presence of, and provide navigation for <code>section</code> elements, when the
            <code>section</code> element has an accessible name.
          </p>
        </td>
        <td>
          If specified, role must be one of the following: <code>alert</code>,
          <code>alertdialog</code>, <code>application</code>, <code>contentinfo</code>,
          <code>dialog</code>, <code>document</code>, <code>log</code>, <code>main</code>,
          <code>marquee</code>, <code>region</code>, <code>search</code>, <code>status</code> or
          <code>presentation</code>
        </td>
      </tr>
      <tr>
        <td>
          <code>select</code> element with no <code>multiple</code> attribute and with a
          <a>display size</a> equal to 1
        </td>
        <td><code>listbox</code> role</td>
        <td>Role must be either <code>listbox</code> or <code>menu</code></td>
      </tr>
      <tr>
        <td><code>summary</code> element with no <a>Interactive content</a> descendant</td>
        <td><a>No role</a></td>
        <td>If specified, role must be <code>button</code></td>
      </tr>
      <tr>
        <td><code>ul</code> element</td>
        <td><code>list</code> role</td>
        <td>
          If specified, role must be one of the following: <code>directory</code>,
          <code>group</code>, <code>list</code>, <code>listbox</code>, <code>menu</code>,
          <code>menubar</code>, <code>radiogroup</code>, <code>tablist</code>, <code>toolbar</code>,
          <code>tree</code>, or <code>presentation</code></td>
      </tr>
      <tr>
        <td><code>video</code> element</td>
        <td><a>No role</a></td>
        <td>If specified, role must be <code>application</code></td>
      </tr>
      <tr>
        <td>Element with a <code>hidden</code> attribute</td>
        <td>The <code>aria-hidden</code> state set to "true"</td>
        <td>If specified, the <code>aria-hidden</code> state set to "true" or "false"</td>
      </tr>
      <tr>
        <td>Element without a <code>hidden</code> attribute</td>
        <td>The <code>aria-hidden</code> state set to "false"</td>
        <td>If specified, the <code>aria-hidden</code> state set to "true" or "false"</td>
      </tr>
    </tbody>
  </table>

  The entry "<dfn>no role</dfn>", when used as a <a>strong native semantic</a>, means that no role
  can be used and that the user agent has no default mapping to ARIA roles. (However, it could have
  its own mappings to the accessibility layer.) When used as a
  <a>default implicit ARIA semantic</a>, it means the user agent has no default mapping to ARIA
  roles. (However, it could have its own mappings to the accessibility layer.)

  <div class="impl">
    The WAI-ARIA specification neither requires or forbids user agents from enhancing native
    presentation and interaction behaviors on the basis of WAI- ARIA markup. Even mainstream user
    agents might choose to expose metadata or navigational features directly or via user-installed
    extensions; for example, exposing required form fields or landmark navigation. User agents are
    encouraged to maximize their usefulness to users, including users without disabilities.

    Conformance checkers are encouraged to phrase errors such that authors are encouraged to use
    more appropriate elements rather than remove accessibility annotations. For example, if an
    <code>a</code> element is marked as having the <code>button</code> role, a conformance checker
    could say "Use a more appropriate element to represent a button, for example a
    <code>button</code> element or an <code>input</code> element" rather than "The
    <code>button</code> role cannot be used with <code>a</code> elements".
  </div>

  <div class="example">
    These features can be used to make accessibility tools render content to their users in more
    useful ways. For example, ASCII art, which is really an image, appears to be text, and in the
    absence of appropriate annotations would end up being rendered by screen readers as a very
    painful reading of lots of punctuation. Using the features described in this section, one can
    instead make the ATs skip the ASCII art and just read the caption:

    <pre highlight="html">
      &lt;figure <strong>role="img" aria-labelledby="fish-caption"</strong>>
        &lt;pre>
        o           .'`/
            '      /  (
          O    .-'` ` `'-._      .')
            _/ (o)        '.  .' /
            )       )))     >&lt;  &lt;
            `\  |_\      _.'  '. \
              '-._  _ .-'       '.)
          jgs     `\__\
        &lt;/pre>
        &lt;figcaption <strong>id="fish-caption"</strong>>
          Joan G. Stark, "&lt;cite>fish&lt;/cite>".
          October 1997. ASCII on electrons. 28&times;8.
        &lt;/figcaption>
      &lt;/figure>
   </pre>
</div>

<h5 id="allowed-aria-roles,-states-and-properties">Allowed ARIA roles, states and properties</h5>

  <em>This section is non-normative.</em>

  <p class="note">
    The following table provides an informative reference to the ARIA roles, states and properties
    permitted for use in HTML. All ARIA roles, states and properties are normatively defined in the
    [[!WAI-ARIA]] specification. Links to ARIA roles, states and properties in the table reference
    the normative [[!WAI-ARIA]] definitions.
  </p>

  <table>
    <caption>
      <abbr title="Accessible Rich Internet Applications">ARIA</abbr> Roles, States and Properties
    </caption>
    <thead>
      <tr>
        <th>Role</th>
        <th>Description</th>
        <th>Required Properties</th>
        <th>Supported Properties</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>any</td>
        <td>ARIA <a>global states and properties</a> can be used on any HTML element.</td>
        <td>none</td>
        <td>

          * <code><a>aria-atomic</a></code>
          * <code><a>aria-busy (state)</a></code>
          * <code><a>aria-controls</a></code>
          * <code><a>aria-describedby</a></code>
          * <code><a>aria-disabled (state)</a></code>
          * <code><a>aria-dropeffect</a></code>
          * <code><a>aria-flowto</a></code>
          * <code><a>aria-grabbed (state)</a></code>
          * <code><a>aria-haspopup</a></code>
          * <code><a>aria-hidden (state)</a></code>
          * <code><a>aria-invalid (state)</a></code>
          * <code><a>aria-label</a></code>
          * <code><a>aria-labelledby</a></code>
          * <code><a>aria-live</a></code>
          * <code><a>aria-owns</a></code>
          * <code><a>aria-relevant</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>alert</a></code></td>
        <td>
          A message with important, and usually time-sensitive, information. See related
          <code>alertdialog</code> and <code>status</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>alertdialog</a></code></td>
        <td>
          A type of dialog that contains an alert message, where initial focus goes to an element
          within the dialog. See related <code>alert</code> and <code>dialog</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>application</a></code></td>
        <td>A region declared as a web application, as opposed to a web document.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>article</a></code></td>
        <td>
          A section of a page that consists of a composition that forms an independent part of a
          document, page, or site.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>banner</a></code></td>
        <td>
          A region that contains mostly site-oriented content, rather than page-specific content.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>button</a></code></td>
        <td>
          An input that allows for user-triggered actions when clicked or pressed. See related
          <code>link</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-pressed (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>checkbox</a></code></td>
        <td>A checkable input that has three possible values: true, false, or mixed.</td>
        <td>

          * <a><code>aria-checked (state)</code></a>

        </td>
        <td></td>
      </tr>
      <tr>
        <td><code><a>columnheader</a></code></td>
        <td>A cell containing header information for a column.</td>
        <td>none</td>
        <td>

          * <code><a>aria-sort</a></code>
          * <code><a>aria-readonly</a></code>
          * <code><a>aria-required</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>combobox</a></code></td>
        <td>
          A presentation of a select; usually similar to a textbox where users can type ahead to
          select an option, or type to enter arbitrary text as a new item in the list. See related
          <code>listbox</code>.
        </td>
        <td>

          * <a><code>aria-expanded (state)</code></a>

        </td>
        <td>

          * <code><a>aria-autocomplete</a></code>
          * <code><a>aria-required</a></code>
          * <code><a>aria-activedescendant</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>complementary</a></code></td>
        <td>
          A supporting section of the document, designed to be complementary to the main content at
          a similar level in the DOM hierarchy, but remains meaningful when separated from the main
          content.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>contentinfo</a></code></td>
        <td>A large perceivable region that contains information about the parent document.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>definition</a></code></td>
        <td>A definition of a term or concept.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>dialog</a></code></td>
        <td>
          A dialog is an application window that is designed to interrupt the current processing of
          an application in order to prompt the user to enter information or require a response. See
          related <code>alertdialog</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>directory</a></code></td>
        <td>A list of references to members of a group, such as a static table of contents.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>document</a></code></td>
        <td>
          A region containing related information that is declared as document content, as opposed
          to a web application.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>form</a></code></td>
        <td>
          A landmark region that contains a collection of items and objects that, as a whole,
          combine to create a form. See related <code>search</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>grid</a></code></td>
        <td>
          A grid is an interactive control which contains cells of tabular data arranged in rows and
          columns, like a table.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-multiselectable</a></code>
          * <code><a>aria-readonly</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>gridcell</a></code></td>
        <td>A cell in a grid or treegrid.</td>
        <td>none</td>
        <td>

          * <code><a>aria-readonly</a></code>
          * <code><a>aria-required</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>group</a></code></td>
        <td>
          A set of user interface objects which are not intended to be included in a page summary or
          table of contents by assistive technologies.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>heading</a></code></td>
        <td>A heading for a section of the page.</td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>img</a></code></td>
        <td>A container for a collection of elements that form an image.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>link</a></code></td>
        <td>
          An interactive reference to an internal or external resource that, when activated, causes
          the user agent to navigate to that resource. See related <code>button</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>list</a></code></td>
        <td>
          A group of non-interactive list items. See related <code>listbox</code>.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

          </td>
      </tr>
      <tr>
        <td><code><a>listbox</a></code></td>
        <td>
          A widget that allows the user to select one or more items from a list of choices. See
          related <code>combobox</code> and <code>list</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-multiselectable</a></code>
          * <code><a>aria-required</a></code>
          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>listitem</a></code></td>
        <td>A single item in a <code>list</code> or <code>directory</code>.</td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-posinset</a></code>
          * <code><a>aria-setsize</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>log</a></code></td>
        <td>
          A type of live region where new information is added in meaningful order and old
          information may disappear. See related <code>marquee</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>main</a></code></td>
        <td>The main content of a document.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>marquee</a></code></td>
        <td>
          A type of live region where non-essential information changes frequently. See related
          <code>log</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>math</a></code></td>
        <td>Content that represents a mathematical expression. </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>menu</a></code></td>
        <td>A type of widget that offers a list of choices to the user.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>menubar</a></code></td>
        <td>
          A presentation of menu that usually remains visible and is usually presented horizontally.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>menuitem</a></code></td>
        <td>
          An option in a group of choices contained by a <code>menu</code> or <code>menubar</code>.
        </td>
        <td>none</td>
        <td></td>
      </tr>
      <tr>
        <td><code><a>menuitemcheckbox</a></code></td>
        <td>A checkable menuitem that has three possible values: true, false, or mixed.</td>
        <td>

          * <code><a>aria-checked (state)</a></code>

        </td>
        <td></td>
      </tr>
      <tr>
        <td><code><a>menuitemradio</a></code></td>
        <td>
          A checkable menuitem in a group of <code>menuitemradio</code> roles, only one of which can
          be checked at a time.
        </td>
        <td>

          * <code><a>aria-checked (state)</a></code>

        </td>
        <td>

          * <code><a>aria-posinset</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-setsize</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>navigation</a></code></td>
        <td>
          A collection of navigational elements (usually links) for navigating the document or
          related documents.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

          </td>
      </tr>
      <tr>
        <td><code><a>note</a></code></td>
        <td>
          A section whose content is parenthetic or ancillary to the main content of the resource.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>option</a></code></td>
        <td>A selectable item in a select list.</td>
        <td>none</td>
        <td>

          * <code><a>aria-checked (state)</a></code>
          * <code><a>aria-posinset</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-setsize</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>presentation</a></code></td>
        <td>
          An element whose implicit native role semantics will not be mapped to the accessibility
          API.
        </td>
        <td>none</td>
        <td></td>
      </tr>
      <tr>
        <td><code><a>progressbar</a></code></td>
        <td>An element that displays the progress status for tasks that take a long time.</td>
        <td>none</td>
        <td>

          * <code><a>aria-valuemax</a></code>
          * <code><a>aria-valuemin</a></code>
          * <code><a>aria-valuenow</a></code>
          * <code><a>aria-valuetext</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>radio</a></code></td>
        <td>
          A checkable input in a group of radio roles, only one of which can be checked at a time.
        </td>
        <td>

          * <a><code>aria-checked (state)</code></a>

        </td>
        <td>

          * <code><a>aria-posinset</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-setsize</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>radiogroup</a></code></td>
        <td>A group of radio buttons.</td>
        <td>none</td>
        <td>

          * <code><a>aria-required</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>region</a></code></td>
        <td>
          A large perceivable section of a web page or document, that the author feels is important
          enough to be included in a page summary or table of contents, for example, an area of the
          page containing live sporting event statistics.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>row</a></code></td>
        <td>A row of cells in a grid.</td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>rowgroup</a></code></td>
        <td>A group containing one or more row elements in a grid.</td>
        <td>none</td>
        <td>

          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>rowheader</a></code></td>
        <td>A cell containing header information for a row in a grid.</td>
        <td>none</td>
        <td>

          * <code><a>aria-sort</a></code>
          * <code><a>aria-readonly</a></code>
          * <code><a>aria-required</a></code>
          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>scrollbar</a></code></td>
        <td>
          A graphical object that controls the scrolling of content within a viewing area,
          regardless of whether the content is fully displayed within the viewing area.
        </td>
        <td>

          * <code><a>aria-controls</a></code>
          * <code><a>aria-orientation</a></code>
          * <code><a>aria-valuemax</a></code>
          * <code><a>aria-valuemin</a></code>
          * <code><a>aria-valuenow</a></code>

        </td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>search</a></code></td>
        <td>
          A landmark region that contains a collection of items and objects that, as a whole,
          combine to create a search facility. See related <code>form</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-orientation</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>separator</a></code></td>
        <td>
          A divider that separates and distinguishes sections of content or groups of menuitems.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-valuetext</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>slider</a></code></td>
        <td>A user input where the user selects a value from within a given range.</td>
        <td>

          * <code><a>aria-valuemax</a></code>
          * <code><a>aria-valuemin</a></code>
          * <code><a>aria-valuenow</a></code>

        </td>
        <td>

          * <code><a>aria-orientation</a></code>
          * <code><a>aria-valuetext</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>spinbutton</a></code></td>
        <td>A form of range that expects the user to select from among discrete choices.</td>
        <td>

          * <code><a>aria-valuemax</a></code>
          * <code><a>aria-valuemin</a></code>
          * <code><a>aria-valuenow</a></code>

        </td>
        <td>

          * <code><a>aria-required</a></code>
          * <code><a>aria-valuetext</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>status</a></code></td>
        <td>
          A container whose content is advisory information for the user but is not important enough
          to justify an alert, often but not necessarily presented as a status bar. See related
          <code>alert</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>tab</a></code></td>
        <td>
          A grouping label providing a mechanism for selecting the tab content that is to be
          rendered to the user.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-selected (state)</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>tablist</a></code></td>
        <td>A list of tab elements, which are references to tabpanel elements.</td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>tabpanel</a></code></td>
        <td>
          A container for the resources associated with a <code>tab</code>, where each
          <code>tab</code> is contained in a <code>tablist</code>.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>textbox</a></code></td>
        <td>Input that allows free-form text as its value.</td>
        <td>none</td>
        <td>

          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-autocomplete</a></code>
          * <code><a>aria-multiline</a></code>
          * <code><a>aria-readonly</a></code>
          * <code><a>aria-required</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>timer</a></code></td>
        <td>
          A type of live region containing a numerical counter which indicates an amount of elapsed
          time from a start point, or the time remaining until an end point.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>toolbar</a></code></td>
        <td>A collection of commonly used function buttons represented in compact visual form.</td>
        <td>none</td>
        <td>

          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>tooltip</a></code></td>
        <td>A contextual popup that displays a description for an element.</td>
        <td>none</td>
        <td>

          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>tree</a></code></td>
        <td>
          A type of list that may contain sub-level nested groups that can be collapsed and
          expanded.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-multiselectable</a></code>
          * <code><a>aria-required</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>treegrid</a></code></td>
        <td>A grid whose rows can be expanded and collapsed in the same manner as for a tree.</td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-multiselectable</a></code>
          * <code><a>aria-readonly</a></code>
          * <code><a>aria-activedescendant</a></code>
          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-required</a></code>

        </td>
      </tr>
      <tr>
        <td><code><a>treeitem</a></code></td>
        <td>
          An option item of a tree. This is an element within a tree that may be expanded or
          collapsed if it contains a sub-level group of treeitems.
        </td>
        <td>none</td>
        <td>

          * <code><a>aria-level</a></code>
          * <code><a>aria-posinset</a></code>
          * <code><a>aria-setsize</a></code>
          * <code><a>aria-expanded (state)</a></code>
          * <code><a>aria-checked (state)</a></code>
          * <code><a>aria-selected (state)</a></code>

        </td>
      </tr>
    </tbody>
  </table>

<hr />
<hr />
<hr />

<h2 id="semantics">The elements of HTML</h2>

<h3 id="the-root-element">The root element</h3>

<h4 id="the-html-element">The <dfn><code>html</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As the root element of a document.</dd>
    <dd>Wherever a subdocument fragment is allowed in a compound document.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>A <code>head</code> element followed by a <code>body</code> element.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>manifest</code> â <a >Application cache manifest</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      An <code>html</code> element's <a>start tag</a> can be omitted if the first thing inside the
      <code>html</a></code> element is not a <a>comment</a>.
    </dd>
    <dd>
      An <code>html</code> element's <a>end tag</a> can be omitted if the <code>html</code> element
      is not immediately followed by a <a>comment</a>.
    </dd>
    <dt>Allowed <a >ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a >ARIA state and property attributes</a>:</dt>
    <dd><a >Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLHtmlElement : HTMLElement {};
      </pre>
    </dd>
  </dl>

  The <code>html</code> element <a>represents</a> the root of an HTML document.

  Authors are encouraged to specify a <code>lang</code> attribute on the root <code>html</code>
  element, giving the document's language. This aids speech synthesis tools to determine what
  pronunciations to use, translation tools to determine what rules to use, and so
  forth.

  The <dfn><code>manifest</code></dfn> attribute gives the address of the document's
  <a>application cache</a> <a>manifest</a>, if there is one. If the attribute is present,
  the attribute's value must be a <a>valid non-empty URL potentially surrounded by spaces</a>.

  The <code>manifest</code> attribute only <a>has an effect</a> during the early stages of document
  load. Changing the attribute dynamically thus has no effect (and thus, no DOM API is provided for
  this attribute).

  <p class="note">
    For the purposes of <a>application cache selection</a>, later <code>base</code> elements cannot
    affect the <a>resolving of relative URLs</a> in <code>manifest</code> attributes, as the
    attributes are processed before those elements are seen.
  </p>

  <p class="note">
    The <code>window.applicationCache</code> IDL attribute provides scripted access to the offline
    <a>application cache</a> mechanism.
  </p>

  <div class="example">
    The <code>html</code> element in the following example declares that the document's language is
    English.

    <pre highlight="html">
      &lt;!DOCTYPE html>
      &lt;html lang="en">
        &lt;head>
          &lt;title>Swapping Songs&lt;/title>
        &lt;/head>
        &lt;body>
          &lt;h1>Swapping Songs&lt;/h1>
          &lt;p>Tonight I swapped some of the songs I wrote with some friends, who
          gave me some of the songs they wrote. I love sharing my music.&lt;/p>
        &lt;/body>
      &lt;/html>
    </pre>
  </div>

<h3 id="document-metadata">Document metadata</h3>

<h4 id="the-head-element">The <dfn><code>head</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As the first element in an <code>html</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>
      If the document is <a>an <code>iframe</code> <code>srcdoc</code> document</a> or if title
      information is available from a higher-level protocol: Zero or more elements of
      <a>metadata content</a>, of which no more than one is a <code>title</code> element and no more
      than one is a <code>base</code> element.
    </dd>
    <dd>
      Otherwise: One or more elements of <a>metadata content</a>, of which exactly one is a
      <code>title</code> element and no more than one is a <code>base</code> element.
    </dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      A <code>head</code> element's <a>start tag</a> may be omitted if the element is empty, or if
      the first thing inside the <code>head</code> element is an element.
    </dd>
    <dd>
      A <code>head</code> element's <a>end tag</a> may be omitted if the <code>head</code> element
      is not immediately followed by a <a>space character</span> or a <span>comment</a>.
    </dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface <dfn>HTMLHeadElement</dfn> : <a>HTMLElement</a> {};
      </pre>
    </dd>
  </dl>

  The <code>head</code> element <a>represents</a> a collection of metadata for the
  <code>Document</code>.

  <div class="example">
    The collection of metadata in a <code>head</code> element can be large or small. Here is an
    example of a very short one:

    <pre highlight="html">
      &lt;!doctype html>
      &lt;html>
        &lt;head>
          &lt;title>A document with a short head&lt;/title>
        &lt;/head>
        &lt;body>
          ...
    </pre>

    Here is an example of a longer one:

    <pre highlight="html">
      &lt;!DOCTYPE HTML>
        &lt;HTML>
        &lt;HEAD>
          &lt;META CHARSET="UTF-8">
          &lt;BASE HREF="http://www.example.com/">
          &lt;TITLE>An application with a long head&lt;/TITLE>
          &lt;LINK REL="STYLESHEET" HREF="default.css">
          &lt;LINK REL="STYLESHEET ALTERNATE" HREF="big.css" TITLE="Big Text">
          &lt;SCRIPT SRC="support.js">&lt;/SCRIPT>
          &lt;META NAME="APPLICATION-NAME" CONTENT="Long headed application">
        &lt;/HEAD>
        &lt;BODY>
          ...
    </pre>
  </div>

  <p class="note">
    The <code>title</code> element is a required child in most situations, but when a higher-level
    protocol provides title information, e.g. in the Subject line of an e-mail when HTML is used as
    an e-mail authoring format, the <code>title</code> element can be omitted.
  </p>

<h4 id="the-title-element">The <dfn><code>title</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>In a <code>head</code> element containing no other <code>title</code> elements.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Text</a> that is not <a>inter-element whitespace</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" hightlight="webidl">
        interface HTMLTitleElement : HTMLElement {
          attribute DOMString text;
        };
      </pre>
    </dd>
  </dl>

  The <code>title</code> element <a>represents</a> the document's title or name. Authors should use
  titles that identify their documents even when they are used out of context, for example in a
  user's history or bookmarks, or in search results. The document's title is often different from
  its first heading, since the first heading does not have to stand alone when taken out of context.

  There must be no more than one <code>title</code> element per document.

  <p class="note">
    If it's reasonable for the <code>Document</code> to have no title, then the <code>title</code>
    element is probably not required. See the <code>head</code> element's content model for a
    description of when the element is required.
  </p>

  <dl class="domintro">
    <dt><var>title</var> . <code>text</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns the contents of the element, ignoring child nodes that aren't <code>Text</code> nodes.

      Can be set, to replace the element's children with the given value.
    </dd>
  </dl>

  <div class="impl">
    The IDL attribute <dfn><code>text</code></dfn> must return a concatenation of the contents of
    all the <code>Text</code> nodes that are children of the <code>title</code> element (ignoring
    any other nodes such as comments or elements), in <a>tree order</a>. On setting, it must act the
    same way as the <code>textContent</code> IDL attribute.
  </div>

  <div class="example">
    Here are some examples of appropriate titles, contrasted with the top-level headings that
    might be used on those same pages.

    <pre highlight="html">
      &lt;title>Introduction to The Mating Rituals of Bees&lt;/title>
      ...
      &lt;h1>Introduction&lt;/h1>
      &lt;p>This companion guide to the highly successful
      &lt;cite>Introduction to Medieval Bee-Keeping&lt;/cite> book is...
    </pre>

    The next page might be a part of the same site. Note how the title describes the subject matter
    unambiguously, while the first heading assumes the reader knows what the context is and
    therefore won't wonder if the dances are Salsa or Waltz:

    <pre highlight="html">
      &lt;title>Dances used during bee mating rituals&lt;/title>
      ...
      &lt;h2>The Dances&lt;/h2>
    </pre>
  </div>

  The string to use as the document's title is given by the <code>document.title</code> IDL
  attribute.

  <div class="impl">
    User agents should use the document's title when referring to the document in their user
    interface. When the contents of a <code>title</code> element are used in this way,
    <a>the directionality</a> of that <code>title</code> element should be used to set the
    directionality of the document's title in the user interface.
  </div>

<h4 id="the-base-element">The <dfn><code>base</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>In a <code>head</code> element containing no other <code>base</code> elements.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>href</code> â <a>Document base URL</a></dd>
    <dd>
      <code>target</code> â Default <a>browsing context</a> for <a>hyperlink</a> <a>navigation</a>
      and <a>form submission</a>
    </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No end tag.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLBaseElement : HTMLElement {
          attribute DOMString href;
          attribute DOMString target;
        };
      </pre>
    </dd>
  </dl>

  The <code>base</code> element allows authors to specify the <a>document base URL</a> for the
  purposes of <a>resolving relative URLs</a>, and the name of the default <a>browsing context</a>
  for the purposes of <a>following hyperlinks</a>. The element does not <a>represent</a> any content
  beyond this information.

  There must be no more than one <code>base</code> element per document.

  A <code>base</code> element must have either an <code>href</code> attribute, a <code>target</code>
  attribute, or both.

  The <dfn><code>href</code></dfn> content attribute, if specified, must contain a <a>valid URL
  potentially surrounded by spaces</a>.

  A <code>base</code> element, if it has an <code>href</code> attribute, must come before any other
  elements in the tree that have attributes defined as taking <a>URLs</a>, except the
  <code>html</code> element (its <code>manifest</code> attribute isn't affected by
  <code>xml:base</code> attributes or <code>base</code> elements).

  <div class="impl">
    <p class="note">
      If there are multiple <code>base</code> elements with <code>href</code> attributes, all but
      the first are ignored.
    </p>
  </div>

  The <dfn><code>target</code></dfn> attribute, if specified, must contain a <a>valid browsing
  context name or keyword</a>, which specifies which <a>browsing context</a> is to be used as the
  default when <a>hyperlinks</a> and <a>forms</a> in the <code>Document</code> cause
  <a>navigation</a>.

  A <code>base</code> element, if it has a <code>target</code> attribute, must come before any
  elements in the tree that represent <a>hyperlinks</a>.

  <div class="impl">
    <p class="note">
      If there are multiple <code>base</code> elements with <code>target</code> attributes, all but
      the first are ignored.
    </p>

    A <code>base</code> element that is the first <code>base</code> element with an
    <code>href</code> content attribute in a particular <code>Document</code> has a
    <dfn>frozen base URL</dfn>. The <a>frozen base URL</a> must be <a>immediately</a> <a>set</a>
    whenever any of the following situations occur:

    * The <code>base</code> element becomes the first <code>base</code> element in <a>tree order</a>
        with an <code>href</code> content attribute in its <code>Document</code>.

    * The <code>base</code> element is the first <code>base</code> element in <a>tree order</a> with
        an <code>href</code> content attribute in its <code>Document</code>, and its
        <code>href</code> content attribute is changed.

    To <dfn>set the frozen base URL</dfn>, <a>resolve</a> the value of the element's
    <code>href</code> content attribute relative to the <code>Document</code>'s
    <a>fallback base URL</a>; if this is successful, set the <a>frozen base URL</a> to the
    <a>resulting absolute URL</a>, otherwise, set the <a>frozen base URL</a> to the
    <a>fallback base URL</a>.

    The <dfn><code>href</code></dfn> IDL attribute, on getting, must return the result of running
    the following algorithm:

    1. If the <code>base</code> element has no <code>href</code> content attribute, then return the
        <a>document base URL</a> and abort these steps.
    2. Let <var>fallback base url</var> be the <code>Document</code>'s <a>fallback base URL</a>.
    3. Let <var>url</var> be the value of the <code>href</code> attribute of the <code>base</code>
        element.
    4. <a>Resolve</a> <var>url</var> relative to <var>fallback base url</var> (thus, the
        <code>base</code>'s <code>href</code> attribute isn't affected by other <code>base</code>
        elements).
    5. If the previous step was successful, return the resulting <a>absolute URL</a> and abort these
        steps.
    6. Otherwise, return the empty string.

    The <code>href</code> IDL attribute, on setting, must set the <code>href</code> content
    attribute to the given new value.

    The <dfn><code>target</code></dfn> IDL attribute must <a>reflect</a> the content attribute of
    the same name.
  </div>

  <div class="example">
    In this example, a <code>base</code> element is used to set the <a>document base
    URL</a>:

    <pre highlight="html">
      &lt;!DOCTYPE html>
      &lt;html>
        &lt;head>
          &lt;title>This is an example for the &amp;lt;base&amp;gt; element&lt;/title>
          &lt;base href="http://www.example.com/news/index.html">
        &lt;/head>
        &lt;body>
          &lt;p>Visit the &lt;a href="archives.html">archives&lt;/a>.&lt;/p>
        &lt;/body>
      &lt;/html>
    </pre>

    The link in the above example would be a link to
    "<code>http://www.example.com/news/archives.html</code>".
  </div>

<h4 id="the-link-element">The <dfn><code>link</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd>If the <code>itemprop</code> attribute is present: <a>flow content</a>.</dd>
    <dd>If the <code>itemprop</code> attribute is present: <a>phrasing content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>metadata content</a> is expected.</dd>
    <dd>In a <code>noscript</code> element that is a child of a <code>head</code> element.</dd>
    <dd>
      If the <code>itemprop</code> attribute is present: where <a>phrasing content</a> is expected.
    </dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>href</code> â Address of the <a>hyperlink</a></dd>
    <dd><code>crossorigin</code> â How the element handles crossorigin requests</dd>
    <dd>
      <code>rel</code> â Relationship between the document containing the hyperlink and the
      destination resource
    </dd>
    <dd><code>media</code> â Applicable media</dd>
    <dd><code>hreflang</code> â Language of the linked resource</dd>
    <dd><code>type</code> â Hint for the type of the referenced resource</dd>
    <dd><code>sizes</code> â Sizes of the icons (for <code>rel</code>="<code>icon</code>")</dd>
    <dd>
      Also, the <code>title</code> attribute has special semantics on this element:  Title of the
      link; alternative style sheet set name.
    </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a>.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code title="">link</code></a> (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code title="">aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dd>For <code>role</code> value </dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLLinkElement : HTMLElement {
          attribute DOMString href;
          attribute DOMString? crossOrigin;
          attribute DOMString rel;

          attribute DOMString rev;
          readonly attribute DOMTokenList relList;
          attribute DOMString media;
          attribute DOMString hreflang;
          attribute DOMString type;
          [PutForwards=value] readonly attribute DOMSettableTokenList sizes;
        };
        HTMLLinkElement implements LinkStyle;
      </pre>
    </dd>
  </dl>

  The <code>link</code> element allows authors to link their document to other resources.

  The destination of the link(s) is given by the <dfn><code>href</code></dfn> attribute, which must
  be present and must contain a <a>valid non-empty URL potentially surrounded by spaces</a>.
  <span class="impl">If the <code>href</code> attribute is absent, then the element does not define
  a link.</span>

  A <code>link</code> element must have either a <code>rel</code> attribute or an
  <code>itemprop</code> attribute, but not both.

  <p class="note">
    If the <code>rel</code> attribute is used, the element is restricted to the <code>head</code>
    element. When used with the <code>itemprop</code> attribute, the element can be used both in the
    <code>head</code> element and in the <code>body</code> of the page, subject to the constraints
    of the microdata model.
  </p>

  The types of link indicated (the relationships) are given by the value of the
  <dfn><code>rel</code></dfn> attribute, which, if present, must have a value that is a <a>set of
  space-separated tokens</a>. The <a>allowed keywords and their meanings</a> are defined in a later
  section. <span class="impl">If the <code>rel</code> attribute is absent, has no keywords, or if
  none of the keywords used are allowed according to the definitions in this specification, then the
  element does not create any links.</span>

  Two categories of links can be created using the <code>link</code> element:
  <a>Links to external resources</a> and <a>hyperlinks</a>. The <a>link types section</a> defines
  whether a particular link type is an external resource or a hyperlink. One <code>link</code>
  element can create multiple links (of which some might be external resource links and some might
  be hyperlinks); exactly which and how many links are created depends on the keywords given in the
  <code>rel</code> attribute. User agents must process the links on a per-link
  basis, not a per-element basis.

  <p class="note">
    Each link created for a <code>link</code> element is handled separately. For instance, if there
    are two <code>link</code> elements with <code>rel="stylesheet"</code>, they each count as a
    separate external resource, and each is affected by its own attributes independently. Similarly,
    if a single <code>link</code> element has a <code>rel</code> attribute with the value
    <code>next stylesheet</code>, it creates both a <a>hyperlink</a> (for the <code>next</code>
    keyword) and an <a>external resource link</a> (for the <code>stylesheet</code> keyword), and
    they are affected by other attributes (such as <code>media</code> or <code>title</code>)
    differently.
  </p>

  <div class="example">
    For example, the following <code>link</code> element creates two hyperlinks (to the same page):

    <pre highlight="html">&lt;link rel="author license" href="/about"></pre>

    The two links created by this element are one whose semantic is that the target page has
    information about the current page's author, and one whose semantic is that the target page has
    information regarding the license under which the current page is provided.
  </div>

  The <dfn><code>crossorigin</code></dfn> attribute is a <a>CORS settings attribute</a>. It is
  intended for use with external resource links.

  The exact behavior for links to external resources depends on the exact relationship, as defined
  for the relevant link type. Some of the attributes control whether or not the external resource is
  to be applied (as defined below).

  <div class="impl">
    For external resources that are represented in the DOM (for example, style sheets), the DOM
    representation must be made available (modulo cross-origin restrictions) even if the resource is
    not applied. To <dfn>obtain the resource</dfn>, the user agent must
    run the following steps:

    1. If the <code>href</code> attribute's value is the empty string, then abort these steps.
    2. <a>Resolve</a> the <a>URL</a> given by the <code>href</code> attribute, relative to the
        element.
    3. If the previous step fails, then abort these steps.
    4. Let <var>corsAttributeState</var> be the current state of the element's
        <code>crossorigin</code> content attribute.
    5. Let <var>request</var> be the result of <a>creating a potential-CORS request</a> given the
        <a>absolute URL</a> and <var>corsAttributeState</var>.
    6. Set <var>request</var>'s <a>client</a> to the <code>link</code> element's
        <a>node document</a>'s <code>Window</code> object's <a>environment settings object</a>.
    7. <a>Fetch</a> <var>request</var>.

    User agents may opt to only try to obtain such resources when they are needed, instead of
    pro-actively fetching all the external resources that are not applied.

    The semantics of the protocol used (e.g. HTTP) must be followed when fetching external
    resources. (For example, redirects will be followed and 404 responses will cause the external
    resource to not be applied.)

    Once the attempts to obtain the resource and its <a>critical subresources</a> are complete, the
    user agent must, if the loads were successful, <a>queue a task</a> to <a>fire a simple event</a>
    named <code>load</code> at the <code>link</code> element, or, if the resource or one of its
    <a>critical subresources</a> failed to completely load for any reason (e.g. DNS error, HTTP 404
    response, a connection being prematurely closed, unsupported Content-Type), <a>queue a task</a>
    to <a>fire a simple event</a> named <code>error</code> at the <code>link</code> element.
    Non-network errors in processing the resource or its subresources (e.g. CSS parse errors, PNG
    decoding errors) are not failures for the purposes of this paragraph.

    The <a>task source</a> for these <a>tasks</a> is the <a>DOM manipulation task source</a>.

    The element must <a>delay the load event</a> of the element's <a>node document</a> until all the
    attempts to obtain the resource and its <a>critical subresources</a> are complete. (Resources
    that the user agent has not yet attempted to obtain, e.g. because it is waiting for the resource
    to be needed, do not <a>delay the load event</a>.)

    <hr />

    Interactive user agents may provide users with a means to <a>follow the hyperlinks</a> created
    using the <code>link</code> element, somewhere within their user interface. The exact interface
    is not defined by this specification, but it could include the following information (obtained
    from the element's attributes, again as defined below), in some form or another (possibly
    simplified), for each hyperlink created with each <code>link</code> element in the document:

    * The relationship between this document and the resource (given by the <code>rel</code>
        attribute)
    * The title of the resource (given by the <code>title</code> attribute).
    * The address of the resource (given by the <code>href</code> attribute).
    * The language of the resource (given by the <code>hreflang</code> attribute).
    * The optimum media for the resource (given by the <code>media</code> attribute).

    User agents could also include other information, such as the type of the resource (as given by
    the <code>type</code> attribute).
  </div>

  <p class="note">
    Hyperlinks created with the <code>link</code> element and its <code>rel</code> attribute apply
    to the whole page. This contrasts with the <code>rel</code> attribute of <code>a</code> and
    <code>area</code> elements, which indicates the type of a link whose context is given by the
    link's location within the document.
  </p>

  The <dfn><code>media</code></dfn> attribute says which media the resource applies to. The value
  must be a <a>valid media query list</a>.

  <div class="impl">
    If the link is a <a>hyperlink</a> then the <code>media</code> attribute is purely advisory, and
    describes for which media the document in question was designed.

    However, if the link is an <a>external resource link</a>, then the <code>media</code> attribute
    is prescriptive. The user agent must apply the external resource when the <code>media</code>
    attribute's value <a>matches the environment</a> and the other relevant conditions apply, and
    must not apply it otherwise.

    <p class="note">
      The external resource might have further restrictions defined within that limit its
      applicability. For example, a CSS style sheet might have some <code>@media</code> blocks. This
      specification does not override such further restrictions or requirements.
    </p>
  </div>

  The default, if the <code>media</code> attribute is omitted, is "<code>all</code>", meaning that
  by default links apply to all media.

  The <dfn><code>hreflang</code></dfn> attribute on the <code>link</code> element has the same
  semantics as the <a><code>hreflang</code> attribute on the <code>a</code> element</a>.

  The <dfn><code>type</code></dfn> attribute gives the <a>MIME type</a> of the linked resource. It
  is purely advisory. The value must be a <a>valid MIME type</a>.

  For <a>external resource links</a>, the <code>type</code> attribute is used as a hint to user
  agents so that they can avoid fetching resources they do not support. <span class="impl">If the
  attribute is present, then the user agent must assume that the resource is of the given type (even
  if that is not a <a>valid MIME type</a>, e.g. the empty string). If the attribute is omitted, but
  the external resource link type has a default type defined, then the user agent must assume that
  the resource is of that type. If the UA does not support the given <a>MIME type</a> for the given
  link relationship, then the UA should not <a>obtain</a> the resource; if the UA does support the
  given <a>MIME type</a> for the given link relationship, then the UA should <a>obtain</a> the
  resource at the appropriate time as specified for the <a>external resource link</a>'s particular
  type. If the attribute is omitted, and the external resource link type does not have a default
  type defined, but the user agent would <a>obtain</a> the resource if the type was known and
  supported, then the user agent should <a>obtain</a> the resource under the assumption that it will
  be supported.</span>

  <div class="impl">
    User agents must not consider the <code>type</code> attribute authoritative &mdash; upon
    fetching the resource, user agents must not use the <code>type</code> attribute to determine its
    actual type. Only the actual type (as defined in the next paragraph) is used to determine
    whether to <em>apply</em> the resource, not the aforementioned assumed type.

    If the external resource link type defines rules for processing the resource's
    <a>Content-Type metadata</a>, then those rules apply. Otherwise, if the resource is expected to
    be an image, user agents may apply the <a>image sniffing rules</a>, with the
    <var>official type</var> being the type determined from the resource's
    <a>Content-Type metadata</a>, and use the resulting sniffed type of the resource as if it was
    the actual type. Otherwise, if neither of these conditions apply or if the user agent opts not
    to apply the image sniffing rules, then the user agent must use the resource's
    <a>Content-Type metadata</a> to determine the type of the resource. If there is no type
    metadata, but the external resource link type has a default type defined, then the user agent
    must assume that the resource is of that type.

    <p class="note">
      The <code>stylesheet</code> link type defines rules for processing the resource's
      <a>Content-Type metadata</a>.
    </p>

    Once the user agent has established the type of the resource, the user agent must apply the
    resource if it is of a supported type and the other relevant conditions apply, and must ignore
    the resource otherwise.

    <div class="example">
      If a document contains style sheet links labeled as follows:

      <pre highlight="html">
        &lt;link rel="stylesheet" href="A" type="text/plain"&gt;
        &lt;link rel="stylesheet" href="B" type="text/css"&gt;
        &lt;link rel="stylesheet" href="C"&gt;
      </pre>

     ...then a compliant UA that supported only CSS style sheets would fetch the B and C files, and
     skip the A file (since <code>text/plain</code> is not the <a>MIME type</a> for CSS style
     sheets).

     For files B and C, it would then check the actual types returned by the server. For those that
     are sent as <code>text/css</code>, it would apply the styles, but for those labeled as
     <code>text/plain</code>, or any other type, it would not.

     If one of the two files was returned without a <a>Content-Type</a> metadata, or with a
     syntactically incorrect type like <code>Content-Type:&nbsp;"null"</code>, then the default type
     for <code>stylesheet</code> links would kick in. Since that default type is
     <code>text/css</code>, the style sheet <em>would</em> nonetheless be applied.
    </div>
  </div>

  The <dfn><code>title</code></dfn> attribute gives the title of the link. With one exception, it is
  purely advisory. The value is text. The exception is for style sheet links, where the
  <code>title</code> attribute defines <a>alternative style sheet sets</a>.

  <p class="note">
    The <code>title</code> attribute on <code>link</code> elements differs from the global
    <code>title</code> attribute of most other elements in that a link without a title does not
    inherit the title of the parent element: it merely has no title.
  </p>

  The <code>sizes</code> attribute is used with the <code>icon</code> link type. The attribute must
  not be specified on <code>link</code> elements that do not have a <code>rel</code> attribute that
  specifies the <code>icon</code> keyword.

  <div class="impl">
    The <a>activation behavior</a> of <code>link</code> elements that create <a>hyperlinks</a> is to
    run the following steps:

    1. If the <code>link</code> element's <a>node document</a> is not <a>fully active</a>, then
        abort these steps.
    2. <a>Follow the hyperlink</a> created by the<code>link</code> element.

    HTTP <code>Link:</code> headers, if supported, must be assumed to come before any links in the
    document, in the order that they were given in the HTTP message. These headers are to be
    processed according to the rules given in the relevant specifications. [[!HTTP11]] [[!RFC5988]]

    <p class="note">
      Registration of relation types in HTTP Link: headers is distinct from <a>HTML link types</a>,
      and thus their semantics can be different from same-named HTML types.
    </p>

    The IDL attributes <dfn><code>href</code></dfn>, <dfn><code>rel</code></dfn>,
    <dfn><code>rev</code></dfn>, <dfn><code>media</code></dfn>, <dfn><code>hreflang</code></dfn>,
    <dfn><code>type</code></dfn>, and <dfn><code>sizes</code></dfn> each must <a>reflect</a> the
    respective content attributes of the same name.

    The <dfn><code>crossOrigin</code></dfn> IDL attribute must <a>reflect</a> the
    <code>crossorigin</code> content attribute.

    The IDL attribute <dfn><code>relList</code></dfn> <span class="impl">must</span> <a>reflect</a>
    the <code>rel</code> content attribute.
  </div>

  The <code>LinkStyle</code> interface is also implemented by this element. [[!CSSOM]]

  <div class="example">
    Here, a set of <code>link</code> elements provide some style sheets:

    <pre highlight="html">
      &lt;!-- a persistent style sheet -->
      &lt;link rel="stylesheet" href="default.css">

      &lt;!-- the preferred alternate style sheet -->
      &lt;link rel="stylesheet" href="green.css" title="Green styles">

      &lt;!-- some alternate style sheets -->
      &lt;link rel="alternate stylesheet" href="contrast.css" title="High contrast">
      &lt;link rel="alternate stylesheet" href="big.css" title="Big fonts">
      &lt;link rel="alternate stylesheet" href="wide.css" title="Wide screen">
    </pre>
  </div>

  <div class="example">
    The following example shows how you can specify versions of the page that use alternative
    formats, are aimed at other languages, and that are intended for other media:

    <pre highlight="html">
      &lt;link rel=alternate href="/en/html" hreflang=en type=text/html title="English HTML">
      &lt;link rel=alternate href="/fr/html" hreflang=fr type=text/html title="French HTML">
      &lt;link rel=alternate href="/en/html/print" hreflang=en type=text/html media=print title="English HTML (for printing)">
      &lt;link rel=alternate href="/fr/html/print" hreflang=fr type=text/html media=print title="French HTML (for printing)">
      &lt;link rel=alternate href="/en/pdf" hreflang=en type=application/pdf title="English PDF">
      &lt;link rel=alternate href="/fr/pdf" hreflang=fr type=application/pdf title="French PDF">
    </pre>
  </div>

<h4 id="the-meta-element">The <dfn id="meta"><code>meta</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd>If the <code>itemprop</code> attribute is present: <a>flow content</a>.</dd>
    <dd>If the <code>itemprop</code> attribute is present: <a>phrasing content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>
      If the <code>charset</code> attribute is present, or if the element's <code>http-equiv</code>
      attribute is in the <a>Encoding declaration state</a>: in a <code>head</code> element.
    </dd>
    <dd>
      If the <code>http-equiv</code> attribute is present but not in the
      <a>Encoding declaration state</a>: in a <code>head</code> element.
    </dd>
    <dd>
      If the <code>http-equiv</code> attribute is present but not in the
      <a>Encoding declaration state</a>: in a <code>noscript</code> element that is a child of a
      <code>head</code> element.
    </dd>
    <dd>
      If the <code>name</code> attribute is present: where <a>metadata content</a> is expected.
    </dd>
    <dd>
      If the <code>itemprop</code> attribute is present: where <a>metadata content</a> is expected.
    </dd>
    <dd>
      If the <code>itemprop</code> attribute is present: where <a>phrasing content</a> is expected.
    </dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>name</code> â Metadata name</dd>
    <dd><code>http-equiv</code> â Pragma directive</dd>
    <dd><code>content</code> â Value of the element</dd>
    <dd><code>charset</code> â <a>Character encoding declaration</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a>.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLMetaElement : HTMLElement {
          attribute DOMString name;
          attribute DOMString httpEquiv;
          attribute DOMString content;
        };
      </pre>
    </dd>
  </dl>

  The <code>meta</code> element <a>represents</a> various kinds of metadata that cannot be
  expressed using the <code>title</code>, <code>base</code>, <code>link</code>, <code>style</code>,
  and <code>script</code> elements.

  The <code>meta</code> element can represent document-level metadata with the <code>name</code>
  attribute, pragma directives with the <code>http-equiv</code> attribute, and the file's
  <a>character encoding declaration</a> when an HTML document is serialized to string form (e.g. for
  transmission over the network or for disk storage) with the <code>charset</code> attribute.

  Exactly one of the <code>name</code>, <code>http-equiv</code>, <code>charset</code>,
  and <code>itemprop</code> attributes must be specified.

  If either <code>name</code>, <code>http-equiv</code>, or <code>itemprop</code> is
  specified, then the <code>content</code> attribute must also be
  specified. Otherwise, it must be omitted.

  The <dfn><code>charset</code></dfn> attribute specifies the character
  encoding used by the document. This is a <a>character encoding declaration</a>. If the
  attribute is present in an <a>XML document</a>, its value must be an
  <a>ASCII case-insensitive</a> match for the string "<code>UTF-8</code>" (and the
  document is therefore forced to use UTF-8 as its encoding).

  <p class="note">The <code>charset</code> attribute on the
  <code>meta</code> element has no effect in XML documents, and is only allowed in order to
  facilitate migration to and from XHTML.</p>

  There must not be more than one <code>meta</code> element with a <code>charset</code> attribute
  per document.

  The <dfn><code>content</code></dfn> attribute gives the value of the
  document metadata or pragma directive when the element is used for those purposes. The allowed
  values depend on the exact context, as described in subsequent sections of this specification.

  If a <code>meta</code> element has a <dfn><code>name</code></dfn>
  attribute, it sets document metadata. Document metadata is expressed in terms of name-value pairs,
  the <code>name</code> attribute on the <code>meta</code> element giving the
  name, and the <code>content</code> attribute on the same element giving
  the value. The name specifies what aspect of metadata is being set; valid names and the meaning of
  their values are described in the following sections. If a <code>meta</code> element has no
  <code>content</code> attribute, then the value part of the metadata name-value pair is the empty
  string.

  <div class="impl">
    The <dfn><code>name</code></dfn> and <dfn><code>content</code></dfn> IDL attributes must
    <a>reflect</a> the respective content attributes of the same name. The IDL attribute
    <dfn><code>httpEquiv</code></dfn> must <a>reflect</a> the content attribute
    <code>http-equiv</code>.
  </div>

<h5 id="standard-metadata-names">Standard metadata names</h5>

  This specification defines a few names for the <code>name</code> attribute of the
  <code>meta</code> element.

  Names are case-insensitive<span class="impl">, and must be compared in an
  <a>ASCII case-insensitive</a> manner</span>.

  : <dfn><code>application-name</code></dfn>
  :: The value must be a short free-form string giving the name of the Web application that the page
      represents. If the page is not a Web application, the <code>application-name</code> metadata
      name must not be used. Translations of the Web application's name may be given, using the
      <code>lang</code> attribute to specify the language of each name.

      There must not be more than one <code>meta</code> element with a given <a>language</a> and
      with its <code>name</code> attribute set to the value <code>application-name</code> per
      document.

      <div class="impl">
        User agents may use the application name in UI in preference to the page's
        <code>title</code>, since the title might include status messages and the like relevant to
        the status of the page at a particular moment in time instead of just being the name of the
        application.

        To find the application name to use given an ordered list of languages (e.g. British
        English, American English, and English), user agents must run the following steps:

        1. Let <var>languages</var> be the list of languages.
        2. Let <var>default language</var> be the <a>language</a> of the <code>Document</code>'s
            <a>root element</a>, if any, and if that language is not unknown.
        3. If there is a <var>default language</var>, and if it is not the same language as any of
            the languages in <var>languages</var>, append it to <var>languages</var>.
        4. Let <var>winning language</var> be the first language in <var>languages</var> for which
            there is a <code>meta</code> element in the <code>Document</code> that has its
            <code>name</code> attribute set to the value <code>application-name</code> and whose
            <a>language</a> is the language in question.

            If none of the languages have such a <code>meta</code> element, then abort these steps;
            there's no given application name.
        5. Return the value of the <code>content</code> attribute of the first <code>meta</code>
            element in the <code>Document</code> in <a>tree order</a> that has its <code>name</code>
            attribute set to the value <code>application-name</code> and whose <a>language</a> is
            <var>winning language</var>.

        <p class="note">
          This algorithm would be used by a browser when it needs a name for the page, for instance,
          to label a bookmark. The languages it would provide to the algorithm would be the user's
          preferred languages.
        </p>
      </div>

  : <dfn><code>author</code></dfn>
  :: The value must be a free-form string giving the name of one of the page's authors.

  : <dfn><code>description</code></dfn>
  :: The value must be a free-form string that describes the page. The value must be appropriate for
      use in a directory of pages, e.g. in a search engine. There must not be more than one
      <code>meta</code> element with its <code>name</code> attribute set to the value
      <code>description</code> per document.

  : <dfn><code>generator</code></dfn>
  :: The value must be a free-form string that identifies one of the software packages used to
      generate the document. This value must not be used on pages whose markup is not generated by
      software, e.g. pages whose markup was written by a user in a text editor.

      <div class="example">
        Here is what a tool called "Frontweaver" could include in its output, in the page's
        <code>head</code> element, to identify itself as the tool used to generate the page:

        <pre highlight="html">&lt;meta name=generator content="Frontweaver 8.2"&gt;</pre>
      </div>

  : <dfn><code>keywords</code></dfn>
  :: The value must be a <a>set of comma-separated tokens</a>, each of which is a keyword relevant
      to the page.

      <div class="example">
        This page about typefaces on British motorways uses a <code>meta</code> element to specify
        some keywords that users might use to look for the page:

        <pre highlight="html">
          &lt;!DOCTYPE HTML&gt;
          &lt;html lang="en-GB"&gt;
            &lt;head&gt;
              &lt;title&gt;Typefaces on UK motorways&lt;/title&gt;
              &lt;meta name="keywords" content="british,type face,font,fonts,highway,highways"&gt;
            &lt;/head&gt;
            &lt;body&gt;
            ...
        </pre>
      </div>

      <p class="note">
        Many search engines do not consider such keywords, because this feature has historically
        been used unreliably and even misleadingly as a way to spam search engine results in a way
        that is not helpful for users.
      </p>

      <div class="impl">
        To obtain the list of keywords that the author has specified as applicable to the page, the
        user agent must run the following steps:

        1. Let <var>keywords</var> be an empty list.
        2. For each <code>meta</code> element with a <code>name</code> attribute and a
            <code>content</code> attribute and whose <code>name</code> attribute's value is
            <code>keywords</code>, run the following substeps:
            1. <a>Split the value of the element's <code>content</code> attribute on commas</a>.
            2. Add the resulting tokens, if any, to <var>keywords</var>.
        3. Remove any duplicates from <var>keywords</var>.
        4. Return <var>keywords</var>. This is the list of keywords that the author has specified as
            applicable to the page.

        User agents should not use this information when there is insufficient confidence in the
        reliability of the value.

        <p class="example">
          For instance, it would be reasonable for a content management system to use the keyword
          information of pages within the system to populate the index of a site-specific search
          engine, but a large-scale content aggregator that used this information would likely find
          that certain users would try to game its ranking mechanism through the use of
          inappropriate keywords.
        </p>
      </div>

<h5 id="other-metadata-names">Other metadata names</h5>

  <dfn>Extensions to the predefined set of metadata names</dfn> may be registered in the
  <a>WHATWG Wiki MetaExtensions page</a>. [[!WHATWGWIKI]]

  Anyone is free to edit the WHATWG Wiki MetaExtensions page at any time to add a type. These new
  names must be specified with the following information:

  : Keyword
  :: The actual name being defined. The name should not be confusingly similar to any other defined
      name (e.g. differing only in case).

  : Brief description
  :: A short non-normative description of what the metadata name's meaning is, including the format
      the value is required to be in.

  : Specification
  :: A link to a more detailed description of the metadata name's semantics and requirements. It
      could be another page on the Wiki, or a link to an external page.

  : Synonyms
  :: A list of other names that have exactly the same processing requirements. Authors should not
      use the names defined to be synonyms, they are only intended to allow user agents to support
      legacy content. Anyone may remove synonyms that are not used in practice; only names that need
      to be processed as synonyms for compatibility with legacy content are to be registered in this
      way.

  : Status
  :: One of the following:
      : Proposed
      :: The name has not received wide peer review and approval. Someone has proposed it and is, or
          soon will be, using it.

      : Ratified
      :: The name has received wide peer review and approval. It has a specification that
          unambiguously defines how to handle pages that use the name, including when they use it in
          incorrect ways.

      : Discontinued
      :: The metadata name has received wide peer review and it has been found wanting. Existing
          pages are using this metadata name, but new pages should avoid it. The "brief description"
          and "specification" entries will give details of what authors should use instead, if
          anything.

      If a metadata name is found to be redundant with existing values, it should be removed and
      listed as a synonym for the existing value.

      If a metadata name is registered in the "proposed" state for a period of a month or more
      without being used or specified, then it may be removed from the registry.

      If a metadata name is added with the "proposed" status and found to be redundant with existing
      values, it should be removed and listed as a synonym for the existing value. If a metadata
      name is added with the "proposed" status and found to be harmful, then it should be changed to
      "discontinued" status.

      Anyone can change the status at any time, but should only do so in accordance with the
      definitions above.

  <div class="impl">
    Conformance checkers may use the information given on the WHATWG Wiki MetaExtensions page to
    establish if a value is allowed or not: values defined in this specification or marked as
    "proposed" or "ratified" must be accepted, whereas values marked as "discontinued" or not listed
    in either this specification or on the aforementioned page must be reported as invalid.
    Conformance checkers may cache this information (e.g. for performance reasons or to avoid the
    use of unreliable network connectivity).

    When an author uses a new metadata name not defined by either this specification or the Wiki
    page, conformance checkers should offer to add the value to the Wiki, with the details described
    above, with the "proposed" status.
  </div>

  Metadata names whose values are to be <a>URLs</a> must not be proposed or accepted. Links must be
  represented using the <code>link</code> element, not the <code>meta</code> element.

<h5 id="pragma-directives">Pragma directives</h5>

  When the <dfn><code>http-equiv</code></dfn> attribute is specified on a <code>meta</code> element,
  the element is a pragma directive.

  The <code>http-equiv</code> attribute is an <a>enumerated attribute</a>. The following table lists
  the keywords defined for this attribute. The states given in the first cell of the rows with
  keywords give the states to which those keywords map. <span class="impl">Some of the keywords are
  non-conforming, as noted in the last column.</span>

  <table id="table-http-equiv">
    <thead>
      <tr>
        <th>State</th>
        <th>Keyword</th>
        <th>Notes</th>
      </tr>
    </thead>
    <tbody>
      <tr class="impl">
        <td><a>Content Language</a></td>
        <td><code>content-language</code></td>
        <td>Non-conforming</td>
      </tr>
      <tr>
        <td><a>Encoding declaration</a></td>
        <td><code>content-type</code></td>
        <td></td>
      </tr>
      <tr>
        <td><a>Default style</a></td>
        <td><code>default-style</code></td>
        <td></td>
      </tr>
      <tr>
        <td><a>Refresh</a></td>
        <td><code>refresh</code></td>
        <td></td>
      </tr>
      <tr class="impl">
        <td><a>Cookie setter</a></td>
        <td><code>set-cookie</code></td>
        <td>Non-conforming</td>
      </tr>
    </tbody>
  </table>

  <div class="impl">
    When a <code>meta</code> element is <a>inserted into the document</a>, if its
    <code>http-equiv</code> attribute is present and represents one of the above states, then the
    user agent must run the algorithm appropriate for that state, as described in the following
    list:
  </div>

  <div class="impl">
    : <dfn>Content language state</dfn> (<code>http-equiv="content-language"</code>)
    ::
        <p class="note">
          This feature is non-conforming. Authors are encouraged to use the <code>lang</code>
          attribute instead.
        </p>

        This pragma sets the <dfn>pragma-set default language</dfn>. Until such a pragma is
        successfully processed, there is no <a>pragma-set default language</a>.

        1. If the <code>meta</code> element has no <code>content</code> attribute, then abort these
            steps.
        2. If the element's <code>content</code> attribute contains a U+002C COMMA character (,)
            then abort these steps.
        3. Let <var>input</var> be the value of the element's <code>content</code> attribute.
        4. Let <var>position</var> point at the first character of <var>input</var>.
        5. <a>Skip whitespace</a>.
        6. <a>Collect a sequence of characters</a> that are not <a>space characters</a>.
        7. Let <var>candidate</var> be the string that resulted from the previous step.
        8. If <var>candidate</var> is the empty string, abort these steps.
        9. Set the <a>pragma-set default language</a> to <var>candidate</var>.
            <p class="note">
              If the value consists of multiple space-separated tokens, tokens after the first are
              ignored.
            </p>

        <p class="note">
          This pragma is almost, but not quite, entirely unlike the HTTP
          <code>Content-Language</code> header of the same name. [[!HTTP11]]
        </p>
  </div>

  : <dfn>Encoding declaration state</dfn> (<code>http-equiv="content-type"</code>)
  :: The <a>Encoding declaration state</a> is just an alternative form of setting the
      <code>charset</code> attribute: it is a <a>character encoding declaration</a>.
      <span class="impl">This state's user agent requirements are all handled by the parsing section
      of the specification.</span>

      For <code>meta</code> elements with an <code>http-equiv</code> attribute in the <a>Encoding
      declaration state</a>, the <code>content</code> attribute must have a value that is an
      <a>ASCII case-insensitive</a> match for a string that consists of: the literal string
      "<code>text/html;</code>", optionally followed by any number of <a>space characters</a>,
      followed by the literal string "<code>charset=</code>", followed by one of the <a>labels</a>
      of the <a>character encoding</a> of the <a>character encoding declaration</a>.

      A document must not contain both a <code>meta</code> element with an <code>http-equiv</code>
      attribute in the <a>Encoding declaration state</a> and a <code>meta</code> element with the
      <code>charset</code> attribute present.

      The <a>encoding declaration state</a> may be used in <a>HTML documents</a> and in
      <a>XML Documents</a>. If the <a>encoding declaration state</a> is used in
      <a>XML Documents</a>, the name of the <a>character encoding</a> must be an
      <a>ASCII case-insensitive</a> match for the string "<code>UTF-8</code>" (and	the document is
      therefore forced to use UTF-8 as its encoding).

      <p class="note">
        The <a>encoding declaration state</a> has no effect in XML documents, and is only allowed in
        order to facilitate migration to and from XHTML.
      </p>

  : <dfn>Default style state</dfn> (<code>http-equiv="default-style"</code>)
  :: This pragma sets the name of the default <a>alternative style sheet set</a>.
      <div class="impl">
        1. If the <code>meta</code> element has no <code>content</code> attribute, or if that
            attribute's value is the empty string, then abort these steps.
        2. Set the <a>preferred style sheet set</a> to the value of the element's
            <code>content</code> attribute. [[!CSSOM]]
      </div>

  : <dfn>Refresh state</dfn> (<code>http-equiv="refresh"</code>)
  :: This pragma acts as timed redirect.
      <div class="impl">
        1. If another <code>meta</code> element with an <code>http-equiv</code> attribute in the
            <a>Refresh state</a> has already been successfully processed (i.e. when it was inserted
            the user agent processed it and reached the last step of this list of steps), then abort
            these steps.
        2. If the <code>meta</code> element has no <code>content</code> attribute, or if that
            attribute's value is the empty string, then abort these steps.
        3. Let <var>input</var> be the value of the element's <code>content</code> attribute.
        4. Let <var>position</var> point at the first character of <var>input</var>.
        5. <a>Skip whitespace</a>.
        6. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and parse the
            resulting string using the <a>rules for parsing non-negative integers</a>. If the
            sequence of characters collected is the empty string, then no number will have been
            parsed; abort these steps. Otherwise, let <var>time</var> be the parsed number.
        7. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a> and U+002E FULL STOP
            characters (.). Ignore any collected characters.
        8. <a>Skip whitespace</a>.
        9. Let <var>url</var> be the address of the current page.
        10. If the character in <var>input</var> pointed to by <var>position</var> is a U+003B
            SEMICOLON character (;) or a U+002C COMMA character (,), then advance
            <var>position</var> to the next character.
        11. <a>Skip whitespace</a>.
        12. If the character in <var>input</var> pointed to by <var>position</var> is a U+0055 LATIN
            CAPITAL LETTER U character (U) or a U+0075 LATIN SMALL LETTER U character (u), then
            advance <var>position</var> to the next character. Otherwise, jump to the last step.
        13. If the character in <var>input</var> pointed to by <var>position</var> is a U+0052 LATIN
            CAPITAL LETTER R character (R) or a U+0072 LATIN SMALL LETTER R character (r), then
            advance <var>position</var> to the next character. Otherwise, jump to the last step.
        14. If the character in <var>input</var> pointed to by <var>position</var> is s U+004C LATIN
            CAPITAL LETTER L character (L) or a U+006C LATIN SMALL LETTER L character (l), then
            advance <var>position</var> to the next character. Otherwise, jump to the last step.
        15. <a>Skip whitespace</a>.
        16. If the character in <var>input</var> pointed to by <var>position</var> is a U+003D
            EQUALS SIGN (=), then advance <var>position</var> to the next character. Otherwise, jump
            to the last step.
        17. <a>Skip whitespace</a>.
        18. If the character in <var>input</var> pointed to by <var>position</var> is either a
            U+0027 APOSTROPHE character (') or U+0022 QUOTATION MARK character ("), then let
            <var>quote</var> be that character, and advance <var>position</var> to the next
            character. Otherwise, let <var>quote</var> be the empty string.
        19. Let <var>url</var> be equal to the substring of <var>input</var> from the character at
            <var>position</var> to the end of the string.
        20. If <var>quote</var> is not the empty string, and there is a character in <var>url</var>
            equal to <var>quote</var>, then truncate <var>url</var> at that character, so that it
            and all subsequent characters are removed.
        21. Strip any trailing <a>space characters</a> from the end of <var>url</var>.
        22. Strip any U+0009 CHARACTER TABULATION (tab), U+000A LINE FEED (LF), and U+000D CARRIAGE
            RETURN (CR) characters from <var>url</var>.
        23. <a>Resolve</a> the <var>url</var> value to an <a>absolute URL</a>, relative to the
            <code>meta</code> element. If this fails, abort these steps.
        24. Perform one or more of the following steps:

            * After the refresh has come due (as defined below), if the user has not canceled the
                redirect and if the <code>meta</code> element's <a>node document</a>'s <a>active
                sandboxing flag set</a> does not have the <a>sandboxed automatic features browsing
                context flag</a> set, <a>navigate</a> the <code>Document</code>'s
                <a>browsing context</a> to <var>url</var>, with <a>replacement enabled</a>, and with
                the <code>Document</code>'s <a>browsing context</a> as the
                <a>source browsing context</a>.

              For the purposes of the previous paragraph, a refresh is said to have come due as soon
              as the <em>later</em> of the following two conditions occurs:

              * At least <var>time</var> seconds have elapsed since the document has
                  <a>completely loaded</a>, adjusted to take into account user or user agent
                  preferences.
              * At least <var>time</var> seconds have elapsed since the <code>meta</code> element
                  was <a>inserted into the <code>Document</code></a>, adjusted to take into account
                  user or user agent preferences.

            * Provide the user with an interface that, when selected, <a>navigates</a> a
                <a>browsing context</a> to <var>url</var>, with the <code>Document</code>'s
                <a>browsing context</a> as the <a>source browsing context</a>.
            * Do nothing.

            In addition, the user agent may, as with anything, inform the user of any and all
            aspects of its operation, including the state of any timers, the destinations of any
            timed redirects, and so forth.
      </div>

      For <code>meta</code> elements with an <code>http-equiv</code> attribute in the
      <a>Refresh state</a>, the <code>content</code> attribute must have a value consisting either
      of:

      * just a <a>valid non-negative integer</a>, or
      * a <a>valid non-negative integer</a>, followed by a U+003B SEMICOLON character (;), followed
        by one or more <a>space characters</a>, followed by a substring that is an
        <a>ASCII case-insensitive</a> match for the string "<code>URL</code>", followed by a U+003D
        EQUALS SIGN character (=), followed by a <a>valid URL</a> that does not start with a literal
        U+0027 APOSTROPHE (') or U+0022 QUOTATION MARK (") character.

      In the former case, the integer represents a number of seconds before the page is to be
      reloaded; in the latter case the integer represents a number of seconds before the page is to
      be replaced by the page at the given <a>URL</a>.

      <div class="example">
        A news organization's front page could include the following markup in the page's
        <code>head</code> element, to ensure that the page automatically reloads from the server
        every five minutes:

        <pre highlight="html">&lt;meta http-equiv="Refresh" content="300"&gt;</pre>
      </div>

      <div class="example">
        A sequence of pages could be used as an automated slide show by making each page refresh to
        the next page in the sequence, using markup such as the following:

        <pre highlight="html">&lt;meta http-equiv="Refresh" content="20; URL=page4.html"&gt;</pre>
      </div>

  <div class="impl">
    : <dfn>Cookie setter</dfn> (<code>http-equiv="set-cookie"</code>)
    :: This pragma sets an HTTP cookie. [[!COOKIES]]

        It is non-conforming. Real HTTP headers should be used instead.

        1. If the <code>meta</code> element has no <code>content</code> attribute, or if that
            attribute's value is the empty string, then abort these steps.
        2. <a>Obtain the storage mutex</a>.
        3. Act as if <a>receiving a set-cookie-string</a> for <a>the document's address</a> via a
            "non-HTTP" API, consisting of the value of the element's <code>content</code> attribute
            encoded as UTF-8. [[!COOKIES]] [[!ENCODING]]
  </div>

  There must not be more than one <code>meta</code> element with any particular state in the
  document at a time.

<h5 id="other-pragma-directives">Other pragma directives</h5>

  <dfn>Extensions to the predefined set of pragma directives</dfn> may, under certain conditions, be
  registered in the <a>WHATWG Wiki PragmaExtensions page</a>. [[!WHATWGWIKI]]

  Such extensions must use a name that is identical to an HTTP header registered in the Permanent
  Message Header Field Registry, and must have behavior identical to that described for the HTTP
  header. [[!IANAPERMHEADERS]]

  Pragma directives corresponding to headers describing metadata, or not requiring specific user
  agent processing, must not be registered; instead, use <a>metadata names</a>. Pragma directives
  corresponding to headers that affect the HTTP processing model (e.g. caching) must not be
  registered, as they would result in HTTP-level behavior being different for user agents that
  implement HTML than for user agents that do not.

  Anyone is free to edit the WHATWG Wiki PragmaExtensions page at any time to add a pragma directive
  satisfying these conditions. Such registrations must specify the following information:

  : Keyword
  :: The actual name being defined. The name must match a previously-registered HTTP name with the
      same requirements.

  : Brief description
  :: A short non-normative description of the purpose of the pragma directive.

  : Specification
  :: A link to the specification defining the corresponding HTTP header.

  <div class="impl">
    Conformance checkers must use the information given on the WHATWG Wiki PragmaExtensions page to
    establish if a value is allowed or not: values defined in this specification or listed on the
    aforementioned page must be accepted, whereas values not listed in either this specification or
    on the aforementioned page must be rejected as invalid. Conformance checkers may cache this
    information (e.g. for performance reasons or to avoid the use of unreliable network
    connectivity).
  </div>

<h5 id="specifying-the-documents-character-encoding">Specifying the document'''s character encoding</h5>

  A <dfn>character encoding declaration</dfn> is a mechanism by which the <a>character encoding</a>
  used to store or transmit a document is specified.

  The following restrictions apply to <a>character encoding declarations</a>:

  * The character encoding name given must be an <a>ASCII case-insensitive</a> match for one of the
      <a>labels</a> of the <a>character encoding</a> used to serialize the file. [[!ENCODING]]
  * The character encoding declaration must be serialized without the use of
      <a>character references</a> or character escapes of any kind.
  * <a>The element containing the character encoding declaration must be serialized completely
      within the first 1024 bytes of the document.</a>

  In addition, due to a number of restrictions on <code>meta</code> elements, there can only be one
  <code>meta</code>-based character encoding declaration per document.

  If an <a>HTML document</a> does not start with a BOM, and its <a>encoding</a> is not explicitly
  given by <a>Content-Type metadata</a>, and the document is not <a>an <code>iframe</code>
  <code>srcdoc</code> document</a>, then the character encoding used must be an
  <a>ASCII-compatible encoding</a>, and the encoding must be specified using a <code>meta</code>
  element with a <code>charset</code> attribute or a <code>meta</code> element with an
  <code>http-equiv</code> attribute in the <a>Encoding declaration state</a>.

  <p class="note">
    A character encoding declaration is required (either in the <a>Content-Type metadata</a> or
    explicitly in the file) even if the encoding is US-ASCII, because a character encoding is needed
    to process non-ASCII characters entered by the user in forms, in URLs generated by scripts, and
    so forth.
  </p>

  If the document is <a>an <code>iframe</code> <code>srcdoc</code> document</a>, the document must
  not have a <a>character encoding declaration</a>. (In this case, the source is already decoded,
  since it is part of the document that contained the <code>iframe</code>.)

  If an <a>HTML document</a> contains a <code>meta</code> element with a <code>charset</code>
  attribute or a <code>meta</code> element with an <code>http-equiv</code> attribute in the
  <a>Encoding declaration state</a>, then the character encoding used must be an
  <a>ASCII-compatible encoding</a>.

  Authors should use UTF-8. Conformance checkers may advise authors against using legacy encodings.
  [[!ENCODING]]

  <div class="impl">
    Authoring tools should default to using UTF-8 for newly-created documents. [[!ENCODING]]
  </div>

  Encodings in which a series of bytes in the range 0x20 to 0x7E can encode characters other than
  the corresponding characters in the range U+0020 to U+007E represent a potential security
  vulnerability: a user agent that does not support the encoding (or does not support the label used
  to declare the encoding, or does not use the same mechanism to detect the encoding of unlabeled
  content as another user agent) might end up interpreting technically benign plain text content as
  HTML tags and JavaScript. Authors should therefore not use these encodings. For example, this
  applies to encodings in which the bytes corresponding to "<code>&lt;script&gt;</code>" in ASCII
  can encode a different string. Authors should not use such encodings, which are known to include
  JIS_C6226-1983, JIS_X0212-1990, HZ-GB-2312, JOHAB (Windows code page 1361), encodings based on
  ISO-2022, and encodings based on EBCDIC. Furthermore, authors must not use the CESU-8, UTF-7,
  BOCU-1 and SCSU encodings, which also fall into this category; these encodings were never intended
  for use for Web content. [[!RFC1345]] [[!RFC1842]] [[!RFC1468]] [[!RFC2237]] [[!RFC1554]]
  [[!CP50220]] [[!RFC1922]] [[!RFC1557]] [[!CESU8]] [[!RFC2152]] [[!BOCU1]] [[!SCSU]]

  Authors should not use UTF-32, as the encoding detection algorithms described in this
  specification intentionally do not distinguish it from UTF-16. [[!UNICODE]]

  <p class="note">
    Using non-UTF-8 encodings can have unexpected results on form submission and URL encodings,
    which use the <a>document's character encoding</a> by default.
  </p>

  In XHTML, the XML declaration should be used for inline character encoding information, if
  necessary.

  <div class="example">
    In HTML, to declare that the character encoding is UTF-8, the author could include the following
    markup near the top of the document (in the <code>head</code> element):

    <pre highlight="html">&lt;meta charset="utf-8"&gt;</pre>

    In XML, the XML declaration would be used instead, at the very top of the markup:

    <pre highlight="html">&lt;?xml version="1.0" encoding="utf-8"?&gt;</pre>
  </div>

<h4 id="the-style-element">The <dfn><code>style</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd>If the <code>scoped</code> attribute is present: <a>flow content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>
      If the <code>scoped</code> attribute is absent: where <a>metadata content</a> is expected.
    </dd>
    <dd>
      If the <code>scoped</code> attribute is absent: in a <code>noscript</code> element that is a
      child of a <code>head</code> element.
    </dd>
    <dd>
      If the <code>scoped</code> attribute is present: where <a>flow content</a> is expected, but
      before any other <a>flow content</a> other than <a>inter-element whitespace</a> and
      <code>style</code> elements, and not as the child of an element whose content model is
      <a>transparent</a>.
    </dd>
    <dt><a>Content model</a>:</dt>
    <dd>
      Depends on the value of the <code>type</code> attribute, but must match requirements described
      in prose below.
    </dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>media</code> â Applicable media</dd>
    <dd><code>type</code> â Type of embedded resource</dd>
    <dd>
      <code>scoped</code> â Whether the styles apply to the entire document or just the parent
      subtree
    </dd>
    <dd>
      Also, the <code>title</code> attribute has special semantics on this element: Alternative
      style sheet set name.
    </dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible.</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLStyleElement : HTMLElement {
          attribute DOMString media;
          attribute DOMString type;
          attribute boolean scoped;
        };
        HTMLStyleElement implements LinkStyle;
      </pre>
    </dd>
  </dl>

  The <code>style</code> element allows authors to embed style information in their documents. The
  <code>style</code> element is one of several inputs to the styling processing model. The element
  does not <a>represent</a> content for the user.

  The <dfn><code>type</code></dfn> attribute gives the styling language. If the attribute is
  present, its value must be a <a>valid MIME type</a> that designates a styling language. The
  <code>charset</code> parameter must not be specified. The default value for the <code>type</code>
  attribute, which is used if the attribute is absent, is "<code>text/css</code>". [[!RFC2318]]

  <div class="impl">
    When examining types to determine if they support the language, user agents must not ignore
    unknown MIME parameters â types with unknown parameters must be assumed to be unsupported. The
    <code>charset</code> parameter must be treated as an unknown parameter for the purpose of
    comparing <a>MIME types</a> here.
  </div>

  The <dfn><code>media</code></dfn> attribute says which media the styles apply to. The value must
  be a <a>valid media query list</a>. <span class="impl">The user agent must apply the styles when
  the <code>media</code> attribute's value <a>matches the environment</a> and the other relevant
  conditions apply, and must not apply them otherwise.</span>

  <div class="impl">
    <p class="note">
      The styles might be further limited in scope, e.g. in CSS with the use of <code>@media</code>
      blocks. This specification does not override such further restrictions or requirements.
    </p>
  </div>

  The default, if the <code>media</code> attribute is omitted, is "<code>all</code>", meaning that
  by default styles apply to all media.

  The <dfn><code>scoped</code></dfn> attribute is a <a>boolean attribute</a>. If present, it
  indicates that the styles are intended just for the subtree rooted at the <code>style</code>
  element's parent element, as opposed to the whole <code>Document</code>.

  If the <code>scoped</code> attribute is present and the element has a parent element, then the
  <code>style</code> element must precede any <a>flow content</a> in its parent element other than
  <a>inter-element whitespace</a> and other <code>style</code> elements, and the parent element's
  content model must not have a <a>transparent</a> component.

  <p class="note">
    This implies that scoped <code>style</code> elements cannot be children of, e.g., <code>a</code>
    or <code>ins</code> elements, even when those are used as <a>flow content</a> containers.
  </p>

  <p class="note">
    A <code>style</code> element <em>without</em> a <code>scoped</code> attribute is restricted to
    appearing in the <code>head</code> of the document.
  </p>

  A style sheet declared by a <code>style</code> element that has a <code>scoped</code> attribute
  and has a parent node that is an element is <i>scoped</i>, with the <i>scoping root</i> being the
  <code>style</code> element's parent element. [[!CSS-SCOPING-1]]

  The <dfn><code>title</code></dfn> attribute on <code>style</code> elements defines
  <a>alternative style sheet sets</a>. If the <code>style</code> element has no <code>title</code>
  attribute, then it has no title; the <code>title</code> attribute of ancestors does not apply to
  the <code>style</code> element. [[!CSSOM]]

  <p class="note">
    The <code>title</code> attribute on <code>style</code> elements, like the <code>title</code>
    attribute on <code>link</code> elements, differs from the global <code>title</code> attribute in
    that a <code>style</code> block without a title does not inherit the title of the parent
    element: it merely has no title.
  </p>

  The <code>textContent</code> of a <code>style</code> element must match the <code>style</code>
  production in the following ABNF, the character set for which is Unicode. [[!ABNF]]

  <pre data-highlight="abnf">
    style         = no-c-start *( c-start no-c-end c-end no-c-start )
    no-c-start    = &lt; any string that doesn't contain a substring that matches c-start &gt;
    c-start       = "&lt;!--"
    no-c-end      = &lt; any string that doesn't contain a substring that matches c-end &gt;
    c-end         = "--&gt;"
  </pre>

  <hr />

  <div class="impl">
    Whenever one of the following conditions occur for an element whose <code>Document</code> is in
    a <a>browsing context</a>:

    * the element is popped off the <a>stack of open elements</a> of an <a>HTML parser</a> or
        <a>XML parser</a>,

    * the element is not on the <a>stack of open elements</a> of an <a>HTML parser</a> or
        <a>XML parser</a>, and it is <a>inserted into a document</a> or
        <a>removed from a document</a>,

    * the element is not on the <a>stack of open elements</a> of an <a>HTML parser</a> or
        <a>XML parser</a>, and one of its child nodes is modified by a script,

    ...the user agent must run the <dfn>update a <code>style</code> block</dfn> algorithm that
    applies for the style sheet language specified by the element's <code>type</code> attribute,
    passing it the element's <dfn>style data</dfn>.

    For styling languages that consist of pure text (as opposed to XML), a <code>style</code>
    element's <a>style data</a> is the concatenation of the contents of all the <code>Text</code>
    nodes that are children of the <code>style</code> element (not any other nodes such as comments
    or elements), in <a>tree order</a>. For XML-based styling languages, the <a>style data</a>
    consists of all the child nodes of the <code>style</code> element.

    The <a>update a <code>style</code> block</a> algorithm for CSS (<code>text/css</code>) is as
    follows:

    1. Let <var>element</var> be the <code>style</code> element.</li>
    2. If <var>element</var> has an <a>associated CSS style sheet</a>,
        <a>remove the CSS style sheet</a> in question.</li>
    3. If <var>element</var> is not <a>in a <code>Document</code></a>, then abort
        these steps.</li>
    4. <a>Create a CSS style sheet</a> with the following properties:

        : <a>type</a>
        :: <code>text/css</code>

        : <a>owner node</a>
        :: <var>element</var>

        : <a>media</a>
        :: The <code>media</code> attribute of <var>element</var>.

            <p class="note">
              This is a reference to the (possibly absent at this time) attribute, rather than a
              copy of the attribute's current value. The CSSOM specification defines what happens
              when the attribute is dynamically set, changed, or removed.
            </p>

        : <a>title</a>
        :: The <code>title</code> attribute of <var>element</var>.

            <p class="note">Again, this is a <em>reference</em> to the attribute.</p>

        : <a>alternate flag</a>
        :: Unset.

        : <a>origin-clean flag</a>
        :: Set.

        : <a>location</a>
        : <a>parent CSS style sheet</a>
        : <a>owner CSS rule</a>
        :: null

        : <a>disabled flag</a>
        :: Left at its default value.

        : <a>CSS rules</a>
        :: Left uninitialized.

    This specification does not define any other styling language's
    <i>update a <code>style</code> block</i> algorithm.

    Once the attempts to obtain the style sheet's <a>critical subresources</a>, if any, are
    complete, or, if the style sheet has no <a>critical subresources</a>, once the style sheet has
    been parsed and processed, the user agent must, if the loads were successful or there were none,
    <a>queue a task</a> to <a>fire a simple event</a> named <code>load</code> at the
    <code>style</code> element, or, if one of the style sheet's <a>critical subresources</a> failed
    to completely load for any reason (e.g. DNS error, HTTP 404 response, a connection being
    prematurely closed, unsupported Content-Type), <a>queue a task</a> to <a>fire a simple event</a>
    named <code>error</code> at the <code>style</code> element. Non-network errors in processing the
    style sheet or its subresources (e.g. CSS parse errors, PNG decoding errors) are not failures
    for the purposes of this paragraph.

    The <a>task source</a> for these <a>tasks</a> is the <a>DOM manipulation task source</a>.

    The element must <a>delay the load event</a> of the element's <a>node document</a> until all the
    attempts to obtain the style sheet's <a>critical subresources</a>, if any, are complete.
  </div>

  <p class="note">
    This specification does not specify a style system, but CSS is expected to be supported by most
    Web browsers. [[!CSS-2015]]
  </p>

  <div class="impl">
    The <dfn><code>media</code></dfn>, <dfn><code>type</code></dfn> and
    <dfn><code>scoped</code></dfn> IDL attributes must <a>reflect</a> the respective content
    attributes of the same name.
  </div>

  The <code>LinkStyle</code> interface is also implemented by this element. [[!CSSOM]]

  <div class="example">
    The following document has its stress emphasis styled as bright red text rather than italics
    text, while leaving titles of works and Latin words in their default italics. It shows how using
    appropriate elements enables easier restyling of documents.

    <pre highlight="html">&lt;!DOCTYPE html&gt;
      &lt;html&gt;
        &lt;head&gt;
          &lt;title&gt;My favorite book&lt;/title&gt;
          &lt;style&gt;
            body { color: black; background: white; }
            em { font-style: normal; color: red; }
          &lt;/style&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;p&gt;My &lt;em&gt;favorite&lt;/em&gt; book of all time has &lt;em&gt;got&lt;/em&gt; to be
          &lt;cite&gt;A Cat's Life&lt;/cite&gt;. It is a book by P. Rahmel that talks
          about the &lt;i lang="la"&gt;Felis Catus&lt;/i&gt; in modern human society.&lt;/p&gt;
        &lt;/body&gt;
      &lt;/html&gt;</pre>
  </div>

  <div class="impl">
    <h4 id="interactions-of-styling-and-scripting">Interactions of styling and scripting</h4>

    Style sheets, whether added by a <code>link</code> element, a <code>style</code> element, an
    <code>&lt;?xml-stylesheet?&gt;</code> PI, an HTTP <code>Link</code> header, or some other
    mechanism, have a <dfn>style sheet ready</dfn> flag, which is initially unset.

    When a style sheet is ready to be applied, its <a>style sheet ready</a> flag must be set. If the
    style sheet referenced no other resources (e.g. it was an internal style sheet given by a
    <code>style</code> element with no <code>@import</code> rules), then the style rules must be
    <a>immediately</a> made available to script; otherwise, the style rules must only be made
    available to script once the <a>event loop</a> reaches its <i>update the rendering</i> step.

    A style sheet in the context of the <code>Document</code> of an <a>HTML parser</a> or
    <a>XML parser</a> is said to be <dfn>a style sheet that is blocking scripts</dfn> if the element
    was created by that <code>Document</code>'s parser, and the element is either a
    <code>style</code> element or a <code>link</code> element that was an <a>external resource link
    that contributes to the styling processing model</a> when the element was created by the parser,
    and the element's style sheet was enabled when the element was created by the parser, and the
    element's <a>style sheet ready</a> flag is not yet set, and, the last time the <a>event loop</a>
    reached <a>step 1</a>, the element was <a>in that <code>Document</code></a>, and the user agent
    hasn't given up on that particular style sheet yet. A user agent may give up on a style sheet at
    any time.

    <p class="note">
      Giving up on a style sheet before the style sheet loads, if the style sheet eventually does
      still load, means that the script might end up operating with incorrect information. For
      example, if a style sheet sets the color of an element to green, but a script that inspects
      the resulting style is executed before the sheet is loaded, the script will find that the
      element is black (or whatever the default color is), and might thus make poor choices (e.g.
      deciding to use black as the color elsewhere on the page, instead of green). Implementors have
      to balance the likelihood of a script using incorrect information with the performance impact
      of doing nothing while waiting for a slow network request to finish.
    </p>

    A <code>Document</code> <dfn>has a style sheet that is blocking scripts</dfn> if there is either
    <a>a style sheet that is blocking scripts</a> in the context of that <code>Document</code>, or
    if that <code>Document</code> is in a <a>browsing context</a> that has a
    <a>parent browsing context</a>, and the <a>active document</a> of that
    <a>parent browsing context</a> itself <a>has a style sheet that is blocking scripts</a>.

    A <code>Document</code> <dfn>has no style sheet that is blocking scripts</dfn> if it does not
    <a>have a style sheet that is blocking scripts</a> as defined in the previous paragraph.
  </div>

<h3 id="sections">Sections</h3>
<h4 id="the-body-element">The <dfn><code>body</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Sectioning root</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As the second element in an <code>html</code> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>onafterprint</code></dd>
    <dd><code>onbeforeprint</code></dd>
    <dd><code>onbeforeunload</code></dd>
    <dd><code>onhashchange</code></dd>
    <dd><code>onlanguagechange</code></dd>
    <dd><code>onmessage</code></dd>
    <dd><code>onoffline</code></dd>
    <dd><code>ononline</code></dd>
    <dd><code>onpagehide</code></dd>
    <dd><code>onpageshow</code></dd>
    <dd><code>onpopstate</code></dd>
    <dd><code>onstorage</code></dd>
    <dd><code>onunload</code></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      A <code>body</code> element's <a>start tag</a> may be omitted if the element is empty, or if
      the first thing inside the <code>body</code> element is not a <a>space character</a> or a
      <a>comment</a>, except if the first thing inside the <code>body</code> element is a
      <code>meta</code>, <code>link</code>, <code>script</code>, <code>style</code>, or
      <code>template</code> element.</dd>
    <dd>
      A <code>body</code> element's <a>end tag</a> may be omitted if the <code>body</code> element
      is not immediately followed by a <a>comment</a>.
    </dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>document</code></a> role (default - <a><em>do not set</em></a>),
      <a><code>application</code></a>.
    </dd>
    <dt>Allowed <a>ARIA State and Property Attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLBodyElement : HTMLElement {
        };
        HTMLBodyElement implements WindowEventHandlers;
      </pre>
    </dd>
  </dl>

  The <code>body</code> element <a>represents</a> the content of the document.

  In conforming documents, there is only one <code>body</code> element. The
  <code>document.body</code> IDL attribute provides scripts with easy access to a document's
  <code>body</code> element.

  <p class="note">
    Some DOM operations (for example, parts of the <a>drag and drop</a> model) are defined in terms
    of "<a>the body element</a>". This refers to a particular element in the DOM, as per the
    definition of the term, and not any arbitrary <code>body</code> element.
  </p>

  The <code>body</code> element exposes as <a>event handler content attributes</a> a number of the
  <a>event handlers</a> of the <code>Window</code> object. It also mirrors their
  <a>event handler IDL attributes</a>.

  The <code>onblur</code>, <code>onerror</code>, <code>onfocus</code>, <code>onload</code>,
  <code>onresize</code>, and <code>onscroll</code> <a>event handlers</a> of the <code>Window</code>
  object, exposed on the <code>body</code> element, replace the generic <a>event handlers</a> with
  the same names normally supported by <a>HTML elements</a>.

  <p class="example">
    Thus, for example, a bubbling <code>error</code> event dispatched on a child of
    <a>the body element</a> of a <code>Document</code> would first trigger the <code>onerror</code>
    <a>event handler content attributes</a> of that element, then that of the root <code>html</code>
    element, and only <em>then</em> would it trigger the <code>onerror</code> <a>event handler
    content attribute</a> on the <code>body</code> element. This is because the event would bubble
    from the target, to the <code>body</code>, to the <code>html</code>, to the
    <code>Document</code>, to the <code>Window</code>, and the <a>event handler</a> on the
    <code>body</code> is watching the <code>Window</code> not the <code>body</code>. A regular event
    listener attached to the <code>body</code> using <code>addEventListener()</code>, however, would
    be run when the event bubbled through the <code>body</code> and not when it reaches the
    <code>Window</code> object.
  </p>

  <div class="example">
    This page updates an indicator to show whether or not the user is online:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;html&gt;
        &lt;head&gt;
          &lt;title&gt;Online or offline?&lt;/title&gt;
          &lt;script&gt;
            function update(online) {
              document.getElementById('status').textContent =
              online ? 'Online' : 'Offline';
            }
          &lt;/script&gt;
        &lt;/head&gt;
        &lt;body ononline="update(true)"
          onoffline="update(false)"
          onload="update(navigator.onLine)"&gt;
          &lt;p&gt;You are: &lt;span id="status"&gt;(Unknown)&lt;/span&gt;&lt;/p&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>
  </div>

<h4 id="the-article-element">The <dfn><code>article</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>, but with no <code>main</code> element descendants.</dd>
    <dd><a>Sectioning content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>article</code></a> (default - <a><em>do not set</em></a>),
      <a><code>application</code></a>, <a><code>document</code></a> or <a><code>main</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>article</code> element <a>represents</a> a complete, or self-contained, composition in a
  document, page, application, or site and that is, in principle, independently distributable or
  reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog
  entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of
  content. Each <code>article</code> should be identified, typically by including a heading
  (<code>h1</code>-<code>h6</code> element) as a child of the <code>article</code> element.

  A general rule is that the <code>article</code> element is appropriate only if the element's
  contents would be listed explicitly in the document's outline.

  When <code>article</code> elements are nested, the inner <code>article</code> elements represent
  articles that are in principle related to the contents of the outer article. For instance, a blog
  entry on a site that accepts user-submitted comments could represent the comments as
  <code>article</code> elements nested within the <code>article</code> element for the blog entry.

  Author information associated with an <code>article</code> element (q.v. the <code>address</code>
  element) does not apply to nested <code>article</code> elements.

  <p class="note">
    When used specifically with content to be redistributed in syndication, the <code>article</code>
    element is similar in purpose to the <code>entry</code> element in Atom. [[!RFC4287]]
  </p>
  <p class="note">
    The schema.org microdata vocabulary can be used to provide the publication date for an
    <code>article</code> element, using one of the CreativeWork subtypes.
  </p>

  When the main content of the page (i.e. excluding footers, headers, navigation blocks, and
  sidebars) is all one single self-contained composition, that content may be marked with an
  <code>article</code>, but it is technically redundant in that case (since it's self-evident that
  the page is a single composition, as it is a single document).

  <div class="example">
    This example shows a blog post using the <code>article</code> element, with some schema.org
    annotations:

    <pre highlight="html">
      &lt;article itemscope itemtype="http://schema.org/BlogPosting"&gt;
        &lt;header&gt;
          &lt;h2 itemprop="headline"&gt;The Very First Rule of Life&lt;/h2&gt;
          &lt;p&gt;&lt;time itemprop="datePublished" datetime="2009-10-09"&gt;3 days ago&lt;/time&gt;&lt;/p&gt;
          &lt;link itemprop="url" href="?comments=0"&gt;
        &lt;/header&gt;
        &lt;p&gt;If there's a microphone anywhere near you, assume it's hot and
        sending whatever you're saying to the world. Seriously.&lt;/p&gt;
        &lt;p&gt;<em>...</em>&lt;/p&gt;
        &lt;footer&gt;
          &lt;a itemprop="discussionUrl" href="?comments=1"&gt;Show comments...&lt;/a&gt;
        &lt;/footer&gt;
      &lt;/article&gt;
    </pre>

    Here is that same blog post, but showing some of the comments:

    <pre highlight="html">
      &lt;article itemscope itemtype="http://schema.org/BlogPosting"&gt;
        &lt;header&gt;
          &lt;h2 itemprop="headline"&gt;The Very First Rule of Life&lt;/h2&gt;
          &lt;p&gt;&lt;time itemprop="datePublished" datetime="2009-10-09"&gt;3 days ago&lt;/time&gt;&lt;/p&gt;
          &lt;link itemprop="url" href="?comments=0"&gt;
        &lt;/header&gt;
        &lt;p&gt;If there's a microphone anywhere near you, assume it's hot and
        sending whatever you're saying to the world. Seriously.&lt;/p&gt;
        &lt;p&gt;<em>...</em>&lt;/p&gt;
        &lt;section&gt;
          &lt;h2&gt;Comments&lt;/h2&gt;
          &lt;article itemprop="comment" itemscope itemtype="http://schema.org/UserComments" id="c1"&gt;
            &lt;link itemprop="url" href="#c1"&gt;
            &lt;footer&gt;
              &lt;p&gt;Posted by: &lt;span itemprop="creator" itemscope itemtype="http://schema.org/Person"&gt;
              &lt;span itemprop="name"&gt;George Washington&lt;/span&gt;
              &lt;/span&gt;&lt;/p&gt;
              &lt;p&gt;&lt;time itemprop="commentTime" datetime="2009-10-10"&gt;15 minutes ago&lt;/time&gt;&lt;/p&gt;
            &lt;/footer&gt;
            &lt;p&gt;Yeah! Especially when talking about your lobbyist friends!&lt;/p&gt;
          &lt;/article&gt;
          &lt;article itemprop="comment" itemscope itemtype="http://schema.org/UserComments" id="c2"&gt;
            &lt;link itemprop="url" href="#c2"&gt;
            &lt;footer&gt;
              &lt;p&gt;Posted by: &lt;span itemprop="creator" itemscope itemtype="http://schema.org/Person"&gt;
              &lt;span itemprop="name"&gt;George Hammond&lt;/span&gt;
              &lt;/span&gt;&lt;/p&gt;
              &lt;p&gt;&lt;time itemprop="commentTime" datetime="2009-10-10"&gt;5 minutes ago&lt;/time&gt;&lt;/p&gt;
            &lt;/footer&gt;
            &lt;p&gt;Hey, you have the same first name as me.&lt;/p&gt;
          &lt;/article&gt;
        &lt;/section&gt;
      &lt;/article&gt;
    </pre>

    Notice the use of <code>footer</code> to give the information for each comment (such as who
    wrote it and when): the <code>footer</code> element <em>can</em> appear at the start of its
    section when appropriate, such as in this case. (Using <code>header</code> in this case wouldn't
    be wrong either; it's mostly a matter of authoring preference.)

  </div>

<h4 id="the-section-element">The <dfn><code>section</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>region</code></a> role (default - <a><em>do not set</em></a>),
      <a><code>alert</code></a>, <a><code>alertdialog</code></a>, <a><code>application</code></a>,
      <a><code>contentinfo</code></a>, <a><code>dialog</code></a>, <a><code>document</code></a>,
      <a><code>log</code></a>, <a><code>main</code></a>, <a><code>marquee</code></a>,
      <a><code>presentation</code></a>, <a><code>search</code></a> or <a><code>status</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>section</code> element <a>represents</a> a generic section of a document or application.
  A section, in this context, is a thematic grouping of content. Each <code>section</code> should be
  identified, typically by including a heading (<code>h1</code>-<code>h6</code> element) as a child
  of the <code>section</code> element.

  <p class="example">
    Examples of sections would be chapters, the various tabbed pages in a tabbed dialog box, or the
    numbered sections of a thesis. A Web site's home page could be split into sections for an
    introduction, news items, and contact information.
  </p>

  <p class="note">
    Authors are encouraged to use the <code>article</code> element instead of the
    <code>section</code> element when it would make sense to syndicate the contents of the element.
  </p>

  <p class="note">
    The <code>section</code> element is not a generic container element. When an element is needed
    only for styling purposes or as a convenience for scripting, authors are encouraged to use the
    <code>div</code> element instead. A general rule is that the <code>section</code> element is
    appropriate only if the element's contents would be listed explicitly in the document's
    <a>outline</a>.
  </p>

  <div class="example">
    In the following example, we see an article (part of a larger Web page) about apples,
    containing two short sections.

    <pre highlight="html">
      &lt;article&gt;
        &lt;header&gt;
          &lt;h2&gt;Apples&lt;/h2&gt;
          &lt;p&gt;Tasty, delicious fruit!&lt;/p&gt;
        &lt;/header&gt;
        &lt;p&gt;The apple is the pomaceous fruit of the apple tree.&lt;/p&gt;
        &lt;section&gt;
          &lt;h3&gt;Red Delicious&lt;/h3&gt;
          &lt;p&gt;These bright red apples are the most common found in many
          supermarkets.&lt;/p&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h3&gt;Granny Smith&lt;/h3&gt;
          &lt;p&gt;These juicy, green apples make a great filling for
          apple pies.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/article&gt;
    </pre>
  </div>

  <div class="example">
    Here is a graduation program with two sections, one for the list of people graduating, and
    one for the description of the ceremony. (The markup in this example features an uncommon style
    sometimes used to minimize the amount of <a>inter-element whitespace</a>.)

    <pre highlight="html">
      &lt;!DOCTYPE Html&gt;
      &lt;html
        &gt;&lt;head
          &gt;&lt;title
            &gt;Graduation Ceremony Summer 2022&lt;/title
          &gt;&lt;/head
        &gt;&lt;body
          &gt;&lt;h1
            &gt;Graduation&lt;/h1
          &gt;&lt;section
            &gt;&lt;h2
              &gt;Ceremony&lt;/h2
            &gt;&lt;p
              &gt;Opening Procession&lt;/p
            &gt;&lt;p
              &gt;Speech by Validactorian&lt;/p
            &gt;&lt;p
              &gt;Speech by Class President&lt;/p
            &gt;&lt;p
              &gt;Presentation of Diplomas&lt;/p
            &gt;&lt;p
              &gt;Closing Speech by Headmaster&lt;/p
          &gt;&lt;/section
          &gt;&lt;section
            &gt;&lt;h2
              &gt;Graduates&lt;/h2
            &gt;&lt;ul
              &gt;&lt;li
                &gt;Molly Carpenter&lt;/li
              &gt;&lt;li
                &gt;Anastasia Luccio&lt;/li
              &gt;&lt;li
                &gt;Ebenezar McCoy&lt;/li
              &gt;&lt;li
                &gt;Karrin Murphy&lt;/li
              &gt;&lt;li
                &gt;Thomas Raith&lt;/li
              &gt;&lt;li
                &gt;Susan Rodriguez&lt;/li
            &gt;&lt;/ul
          &gt;&lt;/section
        &gt;&lt;/body
      &gt;&lt;/html&gt;
    </pre>
  </div>

  <div class="example">
    In this example, a book author has marked up some sections as chapters and some as appendices,
    and uses CSS to style the headers in these two classes of section differently. The whole book is
    wrapped in an <code>article</code> element as part of an even larger document containing other
    books.

    <pre highlight="html">
      &lt;article class="book"&gt;
        &lt;style&gt;
          section { border: double medium; margin: 2em; }
          section.chapter h1 { font: 2em Roboto, Helvetica Neue, sans-serif; }
          section.appendix h1 { font: small-caps 2em Roboto, Helvetica Neue, sans-serif; }
        &lt;/style&gt;
        &lt;header&gt;
          &lt;h2&gt;My Book&lt;/h2&gt;
          &lt;p&gt;A sample with not much content&lt;/p&gt;
          &lt;p&gt;&lt;small&gt;Published by Dummy Publicorp Ltd.&lt;/small&gt;&lt;/p&gt;
        &lt;/header&gt;

        &lt;section class="chapter"&gt;
          &lt;h3&gt;My First Chapter&lt;/h3&gt;
          &lt;p&gt;This is the first of my chapters. It doesn't say much.&lt;/p&gt;
          &lt;p&gt;But it has two paragraphs!&lt;/p&gt;
        &lt;/section&gt;
        &lt;section class="chapter"&gt;
          &lt;h3&gt;It Continutes: The Second Chapter&lt;/h3&gt;
          &lt;p&gt;Bla dee bla, dee bla dee bla. Boom.&lt;/p&gt;
        &lt;/section&gt;
        &lt;section class="chapter"&gt;
          &lt;h3&gt;Chapter Three: A Further Example&lt;/h3&gt;
          &lt;p&gt;It's not like a battle between brightness and earthtones would go
          unnoticed.&lt;/p&gt;
          &lt;p&gt;But it might ruin my story.&lt;/p&gt;
        &lt;/section&gt;
        &lt;section class="appendix"&gt;
          &lt;h3&gt;Appendix A: Overview of Examples&lt;/h3&gt;
          &lt;p&gt;These are demonstrations.&lt;/p&gt;
        &lt;/section&gt;
        &lt;section class="appendix"&gt;
          &lt;h3&gt;Appendix B: Some Closing Remarks&lt;/h3&gt;
          &lt;p&gt;Hopefully this long example shows that you &lt;em&gt;can&lt;/em&gt; style
          sections, so long as they are used to indicate actual sections.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/article&gt;
    </pre>

  </div>

<h4 id="the-nav-element">The <dfn><code>nav</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>, but with no <code>main</code> element descendants.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>navigation</code></a> role (default - <a><em>do not set</em></a>) or
      <a><code>presentation</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>nav</code> element <a>represents</a> a section of a page that links to other pages or to
  parts within the page: a section with navigation links.

  <p class="note">
    In cases where the content of a <code>nav</code> element represents a list of items, use list
    markup to aid understanding and navigation.
  </p>

  <p class="note">
    Not all groups of links on a page need to be in a <code>nav</code> element â the element is
    primarily intended for sections that consist of major navigation blocks. In particular, it is
    common for footers to have a short list of links to various pages of a site, such as the terms
    of service, the home page, and a copyright page. The <code>footer</code> element alone is
    sufficient for such cases; while a <code>nav</code> element can be used in such cases, it is
    usually unnecessary.
  </p>

  <p class="note">
    User agents (such as screen readers) that are targeted at users who can benefit from navigation
    information being omitted in the initial rendering, or who can benefit from navigation
    information being immediately available, can use this element as a way to determine what content
    on the page to initially skip or provide on request (or both).
  </p>

  <div class="example">
    In the following example, there are two <code>nav</code> elements, one for primary navigation
    around the site, and one for secondary navigation around the page itself.

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;The Wiki Center Of Exampland&lt;/h1&gt;
        &lt;nav&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="/events"&gt;Current Events&lt;/a&gt;&lt;/li&gt;
            <em>...more...</em>
          &lt;/ul&gt;
        &lt;/nav&gt;
        &lt;article&gt;
          &lt;header&gt;
            &lt;h2&gt;Demos in Exampland&lt;/h2&gt;
            &lt;p&gt;Written by A. N. Other.&lt;/p&gt;
          &lt;/header&gt;
          &lt;nav&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#public"&gt;Public demonstrations&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#destroy"&gt;Demolitions&lt;/a&gt;&lt;/li&gt;
              <em>...more...</em>
            &lt;/ul&gt;
          &lt;/nav&gt;
          &lt;div&gt;
            &lt;section id="public"&gt;
              &lt;h2&gt;Public demonstrations&lt;/h2&gt;
              &lt;p&gt;<em>...more...</em>&lt;/p&gt;
            &lt;/section&gt;
            &lt;section id="destroy"&gt;
              &lt;h2&gt;Demolitions&lt;/h2&gt;
              &lt;p&gt;<em>...more...</em>&lt;/p&gt;
            &lt;/section&gt;
            <em>...more...</em>
          &lt;/div&gt;
          &lt;footer&gt;
            &lt;p&gt;&lt;a href="?edit"&gt;Edit&lt;/a&gt; | &lt;a href="?delete"&gt;Delete&lt;/a&gt; | &lt;a href="?Rename"&gt;Rename&lt;/a&gt;&lt;/p&gt;
          &lt;/footer&gt;
        &lt;/article&gt;
        &lt;footer&gt;
          &lt;p&gt;&lt;small&gt;Â© copyright 1998 Exampland Emperor&lt;/small&gt;&lt;/p&gt;
        &lt;/footer&gt;
      &lt;/body&gt;
    </pre>
  </div>

  <div class="example">
    In the following example, the page has several places where links are present, but only one of
    those places is considered a navigation section.

    <pre highlight="html">
      &lt;body itemscope itemtype="http://schema.org/Blog"&gt;
        &lt;header&gt;
          &lt;h1&gt;Wake up sheeple!&lt;/h1&gt;
          &lt;p&gt;&lt;a href="news.html"&gt;News&lt;/a&gt; -
          &lt;a href="blog.html"&gt;Blog&lt;/a&gt; -
          &lt;a href="forums.html"&gt;Forums&lt;/a&gt;&lt;/p&gt;
          &lt;p&gt;Last Modified: &lt;span itemprop="dateModified"&gt;2009-04-01&lt;/span&gt;&lt;/p&gt;
          &lt;nav&gt;
            &lt;h2&gt;Navigation&lt;/h2&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="articles.html"&gt;Index of all articles&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="today.html"&gt;Things sheeple need to wake up for today&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="successes.html"&gt;Sheeple we have managed to wake&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/nav&gt;
        &lt;/header&gt;
        &lt;main&gt;
          &lt;article itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting"&gt;
            &lt;header&gt;
              &lt;h2 itemprop="headline"&gt;My Day at the Beach&lt;/h2&gt;
            &lt;/header&gt;
            &lt;main itemprop="articleBody"&gt;
              &lt;p&gt;Today I went to the beach and had a lot of fun.&lt;/p&gt;
              <em>...more content...</em>
            &lt;/main&gt;
            &lt;footer&gt;
              &lt;p&gt;Posted &lt;time itemprop="datePublished" datetime="2009-10-10"&gt;Thursday&lt;/time&gt;.&lt;/p&gt;
            &lt;/footer&gt;
          &lt;/article&gt;
          <em>...more blog posts...</em>
        &lt;/main&gt;
        &lt;footer&gt;
          &lt;p&gt;Copyright Â©
            &lt;span itemprop="copyrightYear"&gt;2010&lt;/span&gt;
            &lt;span itemprop="copyrightHolder"&gt;The Example Company&lt;/span&gt;
          &lt;/p&gt;
          &lt;p&gt;&lt;a href="about.html"&gt;About&lt;/a&gt; -
            &lt;a href="policy.html"&gt;Privacy Policy&lt;/a&gt; -
            &lt;a href="contact.html"&gt;Contact Us&lt;/a&gt;&lt;/p&gt;
        &lt;/footer&gt;
      &lt;/body&gt;
    </pre>

    Notice the <code>main</code> element being used to wrap the main content of the page. In this
    case, all content other than the page header and footer.

    You can also see microdata annotations in the above example that use the schema.org vocabulary
    to provide the publication date and other metadata about the blog post.
  </div>

  <div class="example">
    A <code>nav</code> element doesn't have to contain a list, it can contain other kinds of content
    as well. In this navigation block, links are provided in prose:

    <pre highlight="html">
      &lt;nav&gt;
        &lt;h2&gt;Navigation&lt;/h2&gt;
        &lt;p&gt;You are on my home page. To the north lies &lt;a href="/blog"&gt;my
        blog&lt;/a&gt;, from whence the sounds of battle can be heard. To the east
        you can see a large mountain, upon which many &lt;a
        href="/school"&gt;school papers&lt;/a&gt; are littered. Far up thus mountain
        you can spy a little figure who appears to be me, desperately
        scribbling a &lt;a href="/school/thesis"&gt;thesis&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;To the west are several exits. One fun-looking exit is labeled &lt;a
        href="http://games.example.com/"&gt;"games"&lt;/a&gt;. Another more
        boring-looking exit is labeled &lt;a
        href="http://isp.example.net/"&gt;ISPâ¢&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;To the south lies a dark and dank &lt;a href="/about"&gt;contacts
        page&lt;/a&gt;. Cobwebs cover its disused entrance, and at one point you
        see a rat run quickly out of the page.&lt;/p&gt;
      &lt;/nav&gt;
    </pre>

  </div>

  <div class="example">
    In this example, <code>nav</code> is used in an e-mail application, to let the user switch
    folders:

    <pre highlight="html">
      &lt;p&gt;&lt;input type=button value="Compose" onclick="compose()"&gt;&lt;/p&gt;
      &lt;nav&gt;
        &lt;h2&gt;Folders&lt;/h2&gt;
        &lt;ul&gt;
          &lt;li&gt; &lt;a href="/inbox" onclick="return openFolder(this.href)"&gt;Inbox&lt;/a&gt; &lt;span class=count&gt;&lt;/span&gt;
          &lt;li&gt; &lt;a href="/sent" onclick="return openFolder(this.href)"&gt;Sent&lt;/a&gt;
          &lt;li&gt; &lt;a href="/drafts" onclick="return openFolder(this.href)"&gt;Drafts&lt;/a&gt;
          &lt;li&gt; &lt;a href="/trash" onclick="return openFolder(this.href)"&gt;Trash&lt;/a&gt;
          &lt;li&gt; &lt;a href="/customers" onclick="return openFolder(this.href)"&gt;Customers&lt;/a&gt;
        &lt;/ul&gt;
      &lt;/nav&gt;
    </pre>

  </div>

<h4 id="the-aside-element">The <dfn><code>aside</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>, but with no <code>main</code> element descendants.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>complementary</code></a> role (default - <a><em>do not set</em></a>),
      <a><code>note</code></a>, <a><code>search</code></a> or <a><code>presentation</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>aside</code> element <a>represents</a> a section of a page that consists of content that
  is tangentially related to the content around the <code>aside</code> element, and which could be
  considered separate from that content. Such sections are often represented as sidebars in printed
  typography.

  The element can be used for typographical effects like pull quotes or sidebars, for advertising,
  for groups of <code>nav</code> elements, and for other content that is considered separate from
  the main content of the page.

  <p class="note">
    It's not appropriate to use the <code>aside</code> element just for parentheticals, since those
    are part of the main flow of the document.
  </p>

  <div class="example">
    The following example shows how an aside is used to mark up background material on Switzerland
    in a much longer news story on Europe.

    <pre highlight="html">
      &lt;aside&gt;
        &lt;h2&gt;Switzerland&lt;/h2&gt;
        &lt;p&gt;Switzerland, a land-locked country in the middle of geographic
        Europe, has not joined the geopolitical European Union, though it is
        a signatory to a number of European treaties.&lt;/p&gt;
      &lt;/aside&gt;
    </pre>
  </div>

  <div class="example">
    The following example shows how an aside is used to mark up a pull quote in a longer article.

    <pre highlight="html">
      ...

      &lt;p&gt;He later joined a large company, continuing on the same work.
      &lt;q&gt;I love my job. People ask me what I do for fun when I'm not at
      work. But I'm paid to do my hobby, so I never know what to
      answer. Some people wonder what they would do if they didn't have to
      work... but I know what I would do, because I was unemployed for a
      year, and I filled that time doing exactly what I do now.&lt;/q&gt;&lt;/p&gt;

      &lt;aside&gt;
        &lt;q&gt; People ask me what I do for fun when I'm not at work. But I'm
        paid to do my hobby, so I never know what to answer. &lt;/q&gt;
      &lt;/aside&gt;

      &lt;p&gt;Of course his work â or should that be hobby? â
      isn't his only passion. He also enjoys other pleasures.&lt;/p&gt;

      ...
    </pre>

  </div>

  <div class="example">
    The following extract shows how <code>aside</code> can be used for blogrolls and other side
    content on a blog:

    <pre highlight="html">
      &lt;body&gt;
        &lt;header&gt;
          &lt;h1&gt;My wonderful blog&lt;/h1&gt;
          &lt;p&gt;My tagline&lt;/p&gt;
        &lt;/header&gt;
        &lt;aside&gt;
          &lt;!-- <em>this aside contains two sections that are tangentially related
          to the page, namely, links to other blogs, and links to blog posts
          from this blog</em> --&gt;
          &lt;nav&gt;
            &lt;h2&gt;My blogroll&lt;/h2&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="http://blog.example.com/"&gt;Example Blog&lt;/a&gt;
            &lt;/ul&gt;
          &lt;/nav&gt;
          &lt;nav&gt;
            &lt;h2&gt;Archives&lt;/h2&gt;
            &lt;ol reversed&gt;
              &lt;li&gt;&lt;a href="/last-post"&gt;My last post&lt;/a&gt;
              &lt;li&gt;&lt;a href="/first-post"&gt;My first post&lt;/a&gt;
            &lt;/ol&gt;
          &lt;/nav&gt;
        &lt;/aside&gt;
        &lt;aside&gt;
          &lt;!-- <em>this aside is tangentially related to the page also, it
          contains twitter messages from the blog author</em> --&gt;
          &lt;h2&gt;Twitter Feed&lt;/h2&gt;
          &lt;blockquote cite="http://twitter.example.net/t31351234"&gt;
            I'm on vacation, writing my blog.
          &lt;/blockquote&gt;
          &lt;blockquote cite="http://twitter.example.net/t31219752"&gt;
            I'm going to go on vacation soon.
          &lt;/blockquote&gt;
        &lt;/aside&gt;
        &lt;article&gt;
          &lt;!-- <em>this is a blog post</em> --&gt;
          &lt;h2&gt;My last post&lt;/h2&gt;
          &lt;p&gt;This is my last post.&lt;/p&gt;
          &lt;footer&gt;
            &lt;p&gt;&lt;a href="/last-post" rel=bookmark&gt;Permalink&lt;/a&gt;
          &lt;/footer&gt;
        &lt;/article&gt;
        &lt;article&gt;
          &lt;!-- <em>this is also a blog post</em> --&gt;
          &lt;h2&gt;My first post&lt;/h2&gt;
          &lt;p&gt;This is my first post.&lt;/p&gt;
          &lt;aside&gt;
            &lt;!-- <em>this aside is about the blog post, since it's inside the
            &lt;article&gt; element; it would be wrong, for instance, to put the
              blogroll here, since the blogroll isn't really related to this post
              specifically, only to the page as a whole</em> --&gt;
              &lt;h1&gt;Posting&lt;/h1&gt;
              &lt;p&gt;While I'm thinking about it, I wanted to say something about
              posting. Posting is fun!&lt;/p&gt;
          &lt;/aside&gt;
          &lt;footer&gt;
            &lt;p&gt;&lt;a href="/first-post" rel=bookmark&gt;Permalink&lt;/a&gt;
          &lt;/footer&gt;
        &lt;/article&gt;
        &lt;footer&gt;
          &lt;nav&gt;
            &lt;a href="/archives"&gt;Archives&lt;/a&gt; â
            &lt;a href="/about"&gt;About me&lt;/a&gt; â
            &lt;a href="/copyright"&gt;Copyright&lt;/a&gt;
          &lt;/nav&gt;
        &lt;/footer&gt;
      &lt;/body&gt;
    </pre>
  </div>

<h4 id="the-h1-h2-h3-h4-h5-and--h6-elements">
  The <dfn id="the-h1-element"><code>h1</code></dfn>, <dfn id="the-h2-element"><code>h2</code></dfn>,
  <dfn id="the-h3-element"><code>h3</code></dfn>, <dfn id="the-h4-element"><code>h4</code></dfn>,
  <dfn id="the-h5-element"><code>h5</code></dfn>, and <dfn id="the-h6-element"><code>h6</code></dfn>
  elements
</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Heading content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>heading</code></a> role (default - <a><em>do not set</em></a>),
      <a><code>tab</code></a> or <a><code>presentation</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
    <pre class="idl" data-highlight="webidl">interface HTMLHeadingElement : HTMLElement {};
</pre>
    </dd>
  </dl>

  These elements <a>represent</a> headings for their sections.

  The semantics and meaning of these elements are defined in the section on
  <a>headings and sections</a>.

  These elements have a <dfn>rank</dfn> given by the number in their name. The <code>h1</code>
  element is said to have the highest rank, the <code>h6</code> element has the lowest rank, and two
  elements with the same name have equal rank.

  <code>h1</code>â<code>h6</code> elements must not be used to markup subheadings, subtitles,
  alternative titles and taglines unless intended to be the heading for a new section or subsection.
  Instead use the markup patterns in the <a>Common idioms without dedicated elements</a> section of
  the specification.

  <div class="example">
    As far as their respective document outlines (their heading and section structures) are
    concerned, these two snippets are semantically equivalent:

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;Let's call it a draw(ing surface)&lt;/h1&gt;
        &lt;h2&gt;Diving in&lt;/h2&gt;
        &lt;h2&gt;Simple shapes&lt;/h2&gt;
        &lt;h2&gt;Canvas coordinates&lt;/h2&gt;
        &lt;h3&gt;Canvas coordinates diagram&lt;/h3&gt;
        &lt;h2&gt;Paths&lt;/h2&gt;
      &lt;/body&gt;
    </pre>

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;Let's call it a draw(ing surface)&lt;/h1&gt;
        &lt;section&gt;
          &lt;h2&gt;Diving in&lt;/h2&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Simple shapes&lt;/h2&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Canvas coordinates&lt;/h2&gt;
          &lt;section&gt;
            &lt;h3&gt;Canvas coordinates diagram&lt;/h3&gt;
          &lt;/section&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Paths&lt;/h2&gt;
        &lt;/section&gt;
      &lt;/body&gt;
    </pre>

    Authors might prefer the former style for its terseness, or the latter style for its convenience
    in the face of heavy editing; which is best is purely an issue of preferred authoring style.

    The two styles can be combined, for compatibility with legacy tools while still future-proofing
    for when that compatibility is no longer needed. This third snippet again has the same outline
    as the previous two:

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;Let's call it a draw(ing surface)&lt;/h1&gt;
        &lt;section&gt;
          &lt;h2&gt;Diving in&lt;/h2&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Simple shapes&lt;/h2&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Canvas coordinates&lt;/h2&gt;
          &lt;section&gt;
            &lt;h3&gt;Canvas coordinates diagram&lt;/h3&gt;
          &lt;/section&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Paths&lt;/h2&gt;
        &lt;/section&gt;
      &lt;/body&gt;
    </pre>
  </div>

<h4 id="the-header-element">The <dfn><code>header</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>
      <a>Flow content</a>, but with no <code>header</code>, <code>footer</code>, or
      <code>main</code> element descendants.
    </dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>banner</code></a> role (default - <a><em>do not set</em></a>) or
      <a><code>presentation</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>header</code> element <a>represents</a> introductory content for its nearest ancestor
  <a>sectioning content</a> or <a>sectioning root</a> element. A <code>header</code> typically
  contains a group of introductory or navigational aids.

  When the nearest ancestor <a>sectioning content</a> or <a>sectioning root</a> element is
  <a>the body element</a>, then it applies to the whole page.

  <p class="note">
    A <code>header</code> element is intended to usually contain the section's heading (an
    <code>h1</code>â<code>h6</code> element), but this is not required. The <code>header</code>
    element can also be used to wrap a section's table of contents, a search form, or any relevant
    logos.
  </p>

  <div class="example">
    Here are some sample headers. This first one is for a game:

    <pre highlight="html">
      &lt;header&gt;
        &lt;p&gt;Welcome to...&lt;/p&gt;
        &lt;h1&gt;Voidwars!&lt;/h1&gt;
      &lt;/header&gt;
    </pre>

    The following snippet shows how the element can be used to mark
    up a specification's header:

    <pre highlight="html">
      &lt;header&gt;
        &lt;h1&gt;Scalable Vector Graphics (SVG) 1.2&lt;/h1&gt;
        &lt;p&gt;W3C Working Draft 27 October 2004&lt;/p&gt;
        &lt;dl&gt;
          &lt;dt&gt;This version:&lt;/dt&gt;
          &lt;dd&gt;&lt;a href="http://www.w3.org/TR/2004/WD-SVG12-20041027/"&gt;http://www.w3.org/TR/2004/WD-SVG12-20041027/&lt;/a&gt;&lt;/dd&gt;
          &lt;dt&gt;Previous version:&lt;/dt&gt;
          &lt;dd&gt;&lt;a href="http://www.w3.org/TR/2004/WD-SVG12-20040510/"&gt;http://www.w3.org/TR/2004/WD-SVG12-20040510/&lt;/a&gt;&lt;/dd&gt;
          &lt;dt&gt;Latest version of SVG 1.2:&lt;/dt&gt;
          &lt;dd&gt;&lt;a href="http://www.w3.org/TR/SVG12/"&gt;http://www.w3.org/TR/SVG12/&lt;/a&gt;&lt;/dd&gt;
          &lt;dt&gt;Latest SVG Recommendation:&lt;/dt&gt;
          &lt;dd&gt;&lt;a href="http://www.w3.org/TR/SVG/"&gt;http://www.w3.org/TR/SVG/&lt;/a&gt;&lt;/dd&gt;
          &lt;dt&gt;Editor:&lt;/dt&gt;
          &lt;dd&gt;Dean Jackson, W3C, &lt;a href="mailto:dean@w3.org"&gt;dean@w3.org&lt;/a&gt;&lt;/dd&gt;
          &lt;dt&gt;Authors:&lt;/dt&gt;
          &lt;dd&gt;See &lt;a href="#authors"&gt;Author List&lt;/a&gt;&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;p class="copyright"&gt;&lt;a href="http://www.w3.org/Consortium/Legal/ipr-notic <em>...</em>
      &lt;/header&gt;
    </pre>

  </div>

  <p class="note">
    The <code>header</code> element is not <a>sectioning content</a>; it doesn't introduce a new
    section.
  </p>

  <div class="example">
  In this example, the page has a page heading given by the <code>h1</code> element, and two
  subsections whose headings are given by <code>h2</code> elements. The content after the
  <code>header</code> element is still part of the last subsection started in the
  <code>header</code> element, because the <code>header</code> element doesn't take part in the
  <a>outline</a> algorithm.

  <pre highlight="html">
    &lt;body&gt;
      &lt;header&gt;
        &lt;h1&gt;Little Green Guys With Guns&lt;/h1&gt;
        &lt;nav&gt;
          &lt;ul&gt;
          &lt;li&gt;&lt;a href="/games"&gt;Games&lt;/a&gt;
          &lt;li&gt;&lt;a href="/forum"&gt;Forum&lt;/a&gt;
          &lt;li&gt;&lt;a href="/download"&gt;Download&lt;/a&gt;
          &lt;/ul&gt;
        &lt;/nav&gt;
        &lt;h2&gt;Important News&lt;/h2&gt; &lt;!-- this starts a second subsection --&gt;
        &lt;!-- this is part of the subsection entitled "Important News" --&gt;
        &lt;p&gt;To play today's games you will need to update your client.&lt;/p&gt;
        &lt;h2&gt;Games&lt;/h2&gt; &lt;!-- this starts a third subsection --&gt;
        &lt;/header&gt;
        &lt;p&gt;You have three active games:&lt;/p&gt;
        &lt;!-- this is still part of the subsection entitled "Games" --&gt;
        ...
  </pre>
  </div>

<h4 id="the-footer-element">The <dfn><code>footer</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>
      <a>Flow content</a>, but with no <code>header</code>, <code>footer</code>, or
      <code>main</code> element descendants.
    </dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd>
      <a><code>contentinfo</code></a> role (default - <a><em>do not set</em></a>) or
      <a><code>presentation</code></a>.
    </dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>footer</code> element <a>represents</a> a footer for its nearest ancestor
  <a>sectioning content</a> or <a>sectioning root</a> element. A footer typically contains
  information about its section such as who wrote it, links to related documents, copyright data,
  and the like.

  When the <code>footer</code> element contains entire sections, they <a>represent</a> appendices,
  indexes, long colophons, verbose license agreements, and other such content.

  <p class="note">
    Contact information for the author or editor of a section belongs in an <code>address</code>
    element, possibly itself inside a <code>footer</code>. Bylines and other information that could
    be suitable for both a <code>header</code> or a <code>footer</code> can be placed in either (or
    neither). The primary purpose of these elements is merely to help the author write
    self-explanatory markup that is easy to maintain and style; they are not intended to impose
    specific structures on authors.
  </p>

  Footers don't necessarily have to appear at the <em>end</em> of a section, though they usually do.

  When the nearest ancestor <a>sectioning content</a> or <a>sectioning root</a> element is <a>the
  body element</a>, then it applies to the whole page.

  <p class="note">
    The <code>footer</code> element is not <a>sectioning content</a>; it doesn't introduce a new
    section.
  </p>

  <div class="example">
    Here is a page with two footers, one at the top and one at the bottom, with the same content:

    <pre highlight="html">
      &lt;body&gt;
        &lt;footer&gt;&lt;a href="../"&gt;Back to index...&lt;/a&gt;&lt;/footer&gt;
        &lt;div&gt;
          &lt;h1&gt;Lorem ipsum&lt;/h1&gt;
          &lt;p&gt;The ipsum of all lorems&lt;/p&gt;
        &lt;/div&gt;
        &lt;p&gt;A dolor sit amet, consectetur adipisicing elit, sed do eiusmod
        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex
        ea commodo consequat. Duis aute irure dolor in reprehenderit in
        voluptate velit esse cillum dolore eu fugiat nulla
        pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
        culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
        &lt;footer&gt;&lt;a href="../"&gt;Back to index...&lt;/a&gt;&lt;/footer&gt;
      &lt;/body&gt;
    </pre>
  </div>

  <div class="example">
    Here is an example which shows the <code>footer</code> element being used both for a site-wide
    footer and for a section footer.

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;HTML&gt;&lt;HEAD&gt;
      &lt;TITLE&gt;The Ramblings of a Scientist&lt;/TITLE&gt;
      &lt;BODY&gt;
      &lt;h1&gt;The Ramblings of a Scientist&lt;/h1&gt;
      &lt;MAIN&gt;
        &lt;ARTICLE&gt;
        &lt;H2&gt;Episode 15&lt;/H2&gt;
        &lt;VIDEO SRC="/fm/015.ogv" CONTROLS PRELOAD&gt;
        &lt;P&gt;&lt;A HREF="/fm/015.ogv"&gt;Download video&lt;/A&gt;.&lt;/P&gt;
        &lt;/VIDEO&gt;
        &lt;FOOTER&gt; &lt;!-- footer for article --&gt;
        &lt;P&gt;Published &lt;TIME DATETIME="2009-10-21T18:26-07:00"&gt;on 2009/10/21 at 6:26pm&lt;/TIME&gt;&lt;/P&gt;
        &lt;/FOOTER&gt;
      &lt;/ARTICLE&gt;
      &lt;ARTICLE&gt;
        &lt;H2&gt;My Favorite Trains&lt;/H2&gt;
        &lt;P&gt;I love my trains. My favorite train of all time is a KÃ¶f.&lt;/P&gt;
        &lt;P&gt;It is fun to see them pull some coal cars because they look so
        dwarfed in comparison.&lt;/P&gt;
        &lt;FOOTER&gt; &lt;!-- footer for article --&gt;
        &lt;P&gt;Published &lt;TIME DATETIME="2009-09-15T14:54-07:00"&gt;on 2009/09/15 at 2:54pm&lt;/TIME&gt;&lt;/P&gt;
        &lt;/FOOTER&gt;
        &lt;/ARTICLE&gt;
      &lt;/MAIN&gt;
      &lt;FOOTER&gt; &lt;!-- site wide footer --&gt;
        &lt;NAV&gt;
        &lt;P&gt;&lt;A HREF="/credits.html"&gt;Credits&lt;/A&gt; â
            &lt;A HREF="/tos.html"&gt;Terms of Service&lt;/A&gt; â
            &lt;A HREF="/index.html"&gt;Blog Index&lt;/A&gt;&lt;/P&gt;
        &lt;/NAV&gt;
        &lt;P&gt;Copyright Â© 2009 Gordon Freeman&lt;/P&gt;
      &lt;/FOOTER&gt;
      &lt;/BODY&gt;
      &lt;/HTML&gt;
    </pre>
  </div>

  <div class="example">
    Some site designs have what is sometimes referred to as "fat footers" â footers that contain a
    lot of material, including images, links to other articles, links to pages for sending feedback,
    special offers... in some ways, a whole "front page" in the footer.

    This fragment shows the bottom of a page on a site with a "fat footer":

    <pre highlight="html">
      ...
        &lt;footer&gt;
          &lt;nav&gt;
            &lt;section&gt;
              &lt;h2&gt;Articles&lt;/h2&gt;
              &lt;p&gt;&lt;img src="images/somersaults.jpeg" alt=""&gt; Go to the gym with
              our somersaults class! Our teacher Jim takes you through the paces
              in this two-part article. &lt;a href="articles/somersaults/1"&gt;Part
              1&lt;/a&gt; Â· &lt;a href="articles/somersaults/2"&gt;Part 2&lt;/a&gt;&lt;/p&gt;
              &lt;p&gt;&lt;img src="images/kindplus.jpeg"&gt; Tired of walking on the edge of
              a clif&lt;!-- sic --&gt;? Our guest writer Lara shows you how to bumble
              your way through the bars. &lt;a href="articles/kindplus/1"&gt;Read
              more...&lt;/a&gt;&lt;/p&gt;
              &lt;p&gt;&lt;img src="images/crisps.jpeg"&gt; The chips are down, now all
              that's left is a potato. What can you do with it? &lt;a
              href="articles/crisps/1"&gt;Read more...&lt;/a&gt;&lt;/p&gt;
            &lt;/section&gt;
            &lt;ul&gt;
              &lt;li&gt; &lt;a href="/about"&gt;About us...&lt;/a&gt;
              &lt;li&gt; &lt;a href="/feedback"&gt;Send feedback!&lt;/a&gt;
              &lt;li&gt; &lt;a href="/sitemap"&gt;Sitemap&lt;/a&gt;
            &lt;/ul&gt;
          &lt;/nav&gt;
          &lt;p&gt;&lt;small&gt;Copyright Â© 2015 The Snacker â
          &lt;a href="/tos"&gt;Terms of Service&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        &lt;/footer&gt;
      &lt;/body&gt;
    </pre>
  </div>

<h4 id="the-address-element">The <dfn><code>address</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>, but with no <a>heading
    content</a> descendants, no <a>sectioning content</a>
    descendants, and no <code>header</code>, <code>footer</code>, or
    <code>address</code> element descendants.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt>Allowed <a>ARIA role attribute</a> values:</dt>
    <dd><a><code>contentinfo</code></a> role.</dd>
    <dt>Allowed <a>ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a>applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <code>address</code> element <a>represents</a> the contact information for its nearest
    <code>article</code> or <code>body</code> element ancestor. If that is <a>the body element</a>,
    then the contact information applies to the document as a whole.

  <div class="example">
    For example, a page at the W3C Web site related to HTML might include the following contact
    information:

    <pre highlight="html">
      &lt;ADDRESS&gt;
        &lt;A href="../People/Raggett/"&gt;Dave Raggett&lt;/A&gt;,
        &lt;A href="../People/Arnaud/"&gt;Arnaud Le Hors&lt;/A&gt;,
        contact persons for the &lt;A href="Activity"&gt;W3C HTML Activity&lt;/A&gt;
      &lt;/ADDRESS&gt;
    </pre>
  </div>

  The <code>address</code> element must not be used to represent arbitrary addresses (e.g. postal
  addresses), unless those addresses are in fact the relevant contact information. (The
  <code>p</code> element is the appropriate element for marking up postal addresses in general.)

  The <code>address</code> element must not contain information other than contact information.

  <div class="example">
    For example, the following is non-conforming use of the <code>address</code> element:

    <pre class="bad" highlight="html">&lt;ADDRESS&gt;Last Modified: 1999/12/24 23:37:50&lt;/ADDRESS&gt;</pre>
  </div>

  Typically, the <code>address</code> element would be included along with other information in a
  <code>footer</code> element.

  <div class="impl">
    The contact information for a node <var>node</var> is a collection of <code>address</code>
    elements defined by the first applicable entry from the following list:

    <dl class="switch">
      <dt>If <var>node</var> is an <code>article</code> element</dt>
      <dt>If <var>node</var> is a <code>body</code> element</dt>
      <dd>
        The contact information consists of all the <code>address</code> elements that have
        <var>node</var> as an ancestor and do not have another <code>body</code> or
        <code>article</code> element ancestor that is a descendant of <var>node</var>.
      </dd>

      <dt>If <var>node</var> has an ancestor element that is an <code>article</code> element</dt>
      <dt>If <var>node</var> has an ancestor element that is a <code>body</code> element</dt>
      <dd>
        The contact information of <var>node</var> is the same as the contact information of the
        nearest <code>article</code> or <code>body</code> element ancestor, whichever is nearest.
      </dd>

      <dt>If <var>node</var>'s <a>node document</a> has <a>a body element</a></dt>
      <dd>
        The contact information of <var>node</var> is the same as the contact information of
        <a>the body element</a> of the <code>Document</code>.
      </dd>

      <dt>Otherwise</dt>
      <dd> There is no contact information for <var>node</var>.</dd>
    </dl>

    User agents may expose the contact information of a node to the user, or use it for other
    purposes, such as indexing sections based on the sections' contact information.
  </div>

  <div class="example">
    In this example the footer contains contact information and a copyright notice.

    <pre highlight="html">
      &lt;footer&gt;
        &lt;address&gt;
        For more details, contact
        &lt;a href="mailto:js@example.com"&gt;John Smith&lt;/a&gt;.
        &lt;/address&gt;
        &lt;p&gt;&lt;small&gt;Â© copyright 2038 Example Corp.&lt;/small&gt;&lt;/p&gt;
      &lt;/footer&gt;
    </pre>
  </div>

<h4 id="headings-and-sections"><dfn>Headings and sections</dfn></h4>

  The <code>h1</code>â<code>h6</code> elements are headings.

  The first element of <a>heading content</a> in an element of <a>sectioning content</a>
  <a>represents</a> the heading for that section. Subsequent headings of equal or higher <a>rank</a>
  start new (implied) sections, headings of lower <a>rank</a> start implied subsections that are
  part of the previous one. In both cases, the element <a>represents</a> the heading of the implied
  section.

  <code>h1</code>â<code>h6</code> elements must not be used to markup subheadings, subtitles,
  alternative titles and taglines unless intended to be the heading for a new section or subsection.
  Instead use the markup patterns in the <a>Common idioms without dedicated elements</a> section of
  the specification.

  Certain elements are said to be <dfn>sectioning roots</dfn>, including <code>blockquote</code> and
  <code>td</code> elements. These elements can have their own outlines, but the sections and
  headings inside these elements do not contribute to the outlines of their ancestors.

  <ul class="brief category-list">
    <li><code>blockquote</code></li>
    <li><code>body</code></li>
    <li><code>details</code></li>
    <li><code>dialog</code></li>
    <li><code>fieldset</code></li>
    <li><code>figure</code></li>
    <li><code>td</code></li>
  </ul>

  <a>Sectioning content</a> elements are always considered subsections of their nearest ancestor
  <a>sectioning root</a> or their nearest ancestor element of <a>sectioning content</a>, whichever
  is nearest, regardless of what implied sections other headings may have created.

  <div class="example">
    For the following fragment:

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;Foo&lt;/h1&gt;
        &lt;h2&gt;Bar&lt;/h2&gt;
        &lt;blockquote&gt;
          &lt;h3&gt;Bla&lt;/h3&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Baz&lt;/p&gt;
        &lt;h2&gt;Quux&lt;/h2&gt;
        &lt;section&gt;
          &lt;h3&gt;Thud&lt;/h3&gt;
        &lt;/section&gt;
        &lt;p&gt;Grunt&lt;/p&gt;
      &lt;/body&gt;
    </pre>

    ...the structure would be:

    1. Foo (heading of explicit <code>body</code> section, containing the "Grunt" paragraph)
        1.Bar (heading starting implied section, containing a block quote and the "Baz" paragraph)
        2. Quux (heading starting implied section with no content other than the heading itself)
        3. Thud (heading of explicit <code>section</code> section)

    Notice how the <code>section</code> ends the earlier implicit section so that a later paragraph
    ("Grunt") is back at the top level.
  </div>

  Sections may contain headings of any <a>rank</a>, and authors are strongly encouraged to use
  headings of the appropriate <a>rank</a> for the section's nesting level.

  Authors are also encouraged to explicitly wrap sections in elements of <a>sectioning content</a>,
  instead of relying on the implicit sections generated by having multiple headings in one element
  of <a>sectioning content</a>.

  <div class="example">
    For example, the following is correct:

    <pre highlight="html">
      &lt;body&gt;
        &lt;h4&gt;Apples&lt;/h4&gt;
        &lt;p&gt;Apples are fruit.&lt;/p&gt;
        &lt;section&gt;
          &lt;h2&gt;Taste&lt;/h2&gt;
          &lt;p&gt;They taste lovely.&lt;/p&gt;
          &lt;h6&gt;Sweet&lt;/h6&gt;
          &lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt;
          &lt;h1&gt;Color&lt;/h1&gt;
          &lt;p&gt;Apples come in various colors.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/body&gt;
    </pre>

    However, the same document would be more clearly expressed as:

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;Apples&lt;/h1&gt;
        &lt;p&gt;Apples are fruit.&lt;/p&gt;
        &lt;section&gt;
          &lt;h2&gt;Taste&lt;/h2&gt;
          &lt;p&gt;They taste lovely.&lt;/p&gt;
          &lt;section&gt;
            &lt;h3&gt;Sweet&lt;/h3&gt;
            &lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt;
          &lt;/section&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h2&gt;Color&lt;/h2&gt;
          &lt;p&gt;Apples come in various colors.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/body&gt;
    </pre>

    Both of the documents above are semantically identical and would produce the same outline in
    compliant user agents.

    This third example is also semantically identical, and might be easier to maintain (e.g. if
    sections are often moved around in editing):

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;Apples&lt;/h1&gt;
        &lt;p&gt;Apples are fruit.&lt;/p&gt;
        &lt;section&gt;
          &lt;h1&gt;Taste&lt;/h1&gt;
          &lt;p&gt;They taste lovely.&lt;/p&gt;
          &lt;section&gt;
            &lt;h1&gt;Sweet&lt;/h1&gt;
            &lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt;
          &lt;/section&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h1&gt;Color&lt;/h1&gt;
          &lt;p&gt;Apples come in various colors.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/body&gt;
    </pre>

    This final example would need explicit style rules to be rendered well in legacy browsers.
    Legacy browsers without CSS support would render all the headings as top-level headings.
  </div>

<h5 id="creating-an-outline">Creating an outline</h5>

  <p class="warning">
    There are currently no known implementations of the outline algorithm in graphical browsers or
    assistive technology user agents, although the algorithm is implemented in other software such
    as conformance checkers.

    Therefore the <a>outline</a> algorithm cannot be relied upon to convey document structure to
    users. Authors are advised to use heading <a>rank</a> (<code>h1</code>-<code>h6</code>) to
    convey document structure.
  </p>

  <div class="impl">
    This section defines an algorithm for creating an outline for a <a>sectioning content</a>
    element or a <a>sectioning root</a> element. It is defined in terms of a walk over the nodes
    of a DOM tree, in <a>tree order</a>, with each node being visited when it is <i>entered</i> and
    when it is <i>exited</i> during the walk.
  </div>

  The <dfn>outline</dfn> for a <a>sectioning content</a> element or a <a>sectioning root</a> element
  consists of a list of one or more potentially nested <a>sections</a>. The element for which an
  <a>outline</a> is created is said to be <dfn>the outline's owner</dfn>.

  A <dfn>section</dfn> is a container that corresponds to some nodes in the original DOM tree. Each
  section can have one heading associated with it, and can contain any number of further nested
  sections. <span class="impl">The algorithm for the outline also associates each node in the DOM
  tree with a particular section and potentially a heading.</span> (The sections in the outline
  aren't <code>section</code> elements, though some may correspond to such elements â they are
  merely conceptual sections.)

  <div class="example">
    The following markup fragment:

    <pre highlight="html">
      &lt;body&gt;
        &lt;h1&gt;A&lt;/h1&gt;
        &lt;p&gt;B&lt;/p&gt;
        &lt;h2&gt;C&lt;/h2&gt;
        &lt;p&gt;D&lt;/p&gt;
        &lt;h2&gt;E&lt;/h2&gt;
        &lt;p&gt;F&lt;/p&gt;
      &lt;/body&gt;
    </pre>

    ...results in the following outline being created for the <code>body</code> node (and thus the
    entire document):

    1. Section created for <code>body</code> node. Associated with heading "A". Also associated with
        paragraph "B". Nested sections:
        1. Section implied for first <code>h2</code> element. Associated with heading "C". Also
            associated with paragraph "D". No nested sections.
        2. Section implied for second <code>h2</code> element. Associated with heading "E". Also
            associated with paragraph "F". No nested sections.
  </div>

  <div class="impl">
    The algorithm that must be followed during a walk of a DOM subtree rooted at a
    <a>sectioning content</a> element or a <a>sectioning root</a> element to determine that
    element's <a>outline</a> is as follows:

    1. Let <var>current outline target</var> be null. (It holds the element whose <a>outline</a> is
        being created.)
    2. Let <var>current section</var> be null. (It holds a pointer to a <a>section</a>, so that
        elements in the DOM can all be associated with a section.)
    3. Create a stack to hold elements, which is used to handle nesting. Initialize this stack to
        empty.
    4. Walk over the DOM in <a>tree order</a>, starting with the <a>sectioning content</a> element
        or <a>sectioning root</a> element at the root of the subtree for which an outline is to be
        created, and trigger the first relevant step below for each element as the walk enters and
        exits it.

        <dl class="switch">
          <dt>When exiting an element, if that element is the element at the top of the stack</dt>
          <dd>
            <p class="note">
              The element being exited is a <a>heading content</a> element or an element with a
              <code>hidden</code> attribute.
            </p>

            Pop that element from the stack.
          </dd>

          <dt>
            If the top of the stack is a <a>heading content</a> element or an element with a
            <code>hidden</code> attribute
          </dt>
          <dd>Do nothing.</dd>

          <dt>When entering an element with a <code>hidden</code> attribute</dt>
          <dd>
            Push the element being entered onto the stack. (This causes the algorithm to skip that
            element and any descendants of the element.)
          </dd>

          <dt>When entering a <a>sectioning content</a> element</dt>
          <dd>
            Run these steps:
            1. If <var>current outline target</var> is not null, run these substeps:
                1. If the <var>current section</var> has no heading, create an implied heading and
                    let that be the heading for the <var>current section</var>.
                2. Push <var>current outline target</var> onto the stack.
            2. Let <var>current outline target</var> be the element that is being entered.
            3. Let <var>current section</var> be a newly created <a>section</a> for the
                <var>current outline target</var> element.
            4. Associate <var>current outline target</var> with <var>current section</var>.
            5. Let there be a new <a>outline</a> for the new <var>current outline target</var>,
                initialized with just the new <var>current section</var> as the only <a>section</a>
                in the outline.
          </dd>

          <dt>When exiting a <a>sectioning content</a> element, if the stack is not empty</dt>
          <dd>
            Run these steps:
            1. If the <var>current section</var> has no heading, create an implied heading and let
                that be the heading for the <var>current section</var>.
            2. Pop the top element from the stack, and let the <var>current outline target</var> be
                that element.
            3. Let <var>current section</var> be the last section in the <a>outline</a> of the
                <var>current outline target</var> element.
            4. Append the <a>outline</a> of the <a>sectioning content</a> element being exited to
                the <var>current section</var>. (This does not change which section is the last
                section in the <a>outline</a>.)
          </dd>

          <dt>When entering a <a>sectioning root</a> element</dt>
          <dd>
            Run these steps:
            1. If <var>current outline target</var> is not null, push
                <var>current outline target</var> onto the stack.
            2. Let <var>current outline target</var> be the element that is being entered.
            3. Let <var>current outline target</var>'s <i>parent section</i> be
                <var>current section</var>.
            4. Let <var>current section</var> be a newly created <a>section</a> for the
                <var>current outline target</var> element.
            5. Let there be a new <a>outline</a> for the new <var>current outline target</var>,
                initialized with just the new <var>current section</var> as the only <a>section</a>
                in the outline.
          </dd>

          <dt>When exiting a <a>sectioning root</a> element, if the stack is not empty</dt>
          <dd>
            Run these steps:
            1. If the <var>current section</var> has no heading, create an implied heading and let
                that be the heading for the <var>current section</var>.
            2. Let <var>current section</var> be <var>current outline target</var>'s
                <i>parent section</i>.
            3. Pop the top element from the stack, and let the <var>current outline target</var> be
                that element.
          </dd>

          <dt>
            When exiting a <a>sectioning content</a> element or a <a>sectioning root</a> element
            (when the stack is empty)
          </dt>
          <dd>
            <p class="note">
              The <var>current outline target</var> is the element being exited, and it is the
              <a>sectioning content</a> element or a <a>sectioning root</a> element at the root of
              the subtree for which an outline is being generated.
            </p>

            If the <var>current section</var> has no heading, create an implied heading and
            let that be the heading for the <var>current section</var>.

            Skip to the next step in the overall set of steps. (The walk is over.)
          </dd>

          <dt>When entering a <a>heading content</a> element</dt>
          <dd>
            If the <var>current section</var> has no heading, let the element being entered be the
            heading for the <var>current section</var>.

            Otherwise, if the element being entered has a <a>rank</a> equal to or higher than the
            heading of the last section of the <a>outline</a> of the
            <var>current outline target</var>, or if the heading of the last section of the
            <a>outline</a> of the <var>current outline target</var> is an implied heading, then
            create a new <a>section</a> and append it to the <a>outline</a> of the
            <var>current outline target</var> element, so that this new section is the new last
            section of that outline. Let <var>current section</var> be that new section. Let the
            element being entered be the new heading for the <var>current section</var>.

            Otherwise, run these substeps:
            1. Let <var>candidate section</var> be <var>current section</var>.
            2. <i>Heading loop</i>: If the element being entered has a <a>rank</a> lower than the
                <a>rank</a> of the heading of the <var>candidate section</var>, then create a new
                <a>section</a>, and append it to <var>candidate section</var>. (This does not change
                which section is the last section in the outline.) Let <var>current section</var> be
                this new section. Let the element being entered be the new heading for the
                <var>current section</var>. Abort these substeps.
            3. Let <var>new candidate section</var> be the <a>section</a> that contains
                <var>candidate section</var> in the <a>outline</a> of
                <var>current outline target</var>.
            4. Let <var>candidate section</var> be <var>new candidate section</var>.
            5. Return to the step labeled <i>heading loop</i>.

            Push the element being entered onto the stack. (This causes the algorithm to skip any
            descendants of the element.)

            <p class="note">
              Recall that <code>h1</code> has the <em>highest</em> rank, and <code>h6</code> has the
              lowest rank.
            </p>
          </dd>

          <dt>Otherwise</dt>
          <dd>Do nothing.</dd>
        </dl>

        In addition, whenever the walk exits a node, after doing the steps above, if the node is not
        associated with a <a>section</a> yet, associate the node with the <a>section</a>
        <var>current section</var>.

    5. Associate all non-element nodes that are in the subtree for which an outline is being created
        with the <a>section</a> with which their parent element is associated.
    6. Associate all nodes in the subtree with the heading of the <a>section</a> with which they are
        associated, if any.

    The tree of sections created by the algorithm above, or a proper subset thereof, must be used
    when generating document outlines, for example when generating tables of contents.

    The outline created for <a>the body element</a> of a <code>Document</code> is the <a>outline</a>
      of the entire document.

    When creating an interactive table of contents, entries should jump the user to the relevant
    <a>sectioning content</a> element, if the <a>section</a> was created for a real element in the
    original document, or to the relevant <a>heading content</a> element, if the <a>section</a> in
    the tree was generated for a heading in the above process.

    <p class="note">
      Selecting the first <a>section</a> of the document therefore always takes the user to the top
      of the document, regardless of where the first heading in the <code>body</code> is to be
      found.
    </p>

    The <dfn>outline depth</dfn> of a <a>heading content</a> element associated with a
    <a>section</a> <var>section</var> is the number of <a>sections</a> that are ancestors of
    <var>section</var> in the outermost <a>outline</a> that <var>section</var> finds itself in when
    the <a>outlines</a> of its <code>Document</code>'s elements are created, plus 1. The
    <a>outline depth</a> of a <a>heading content</a> element not associated with a <a>section</a> is
    1.

    User agents should provide default headings for sections that do not have explicit section
    headings.

    <div class="example">
      Consider the following snippet:

      <pre highlight="html">
        &lt;body&gt;
          &lt;nav&gt;
            &lt;p&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/p&gt;
          &lt;/nav&gt;
          &lt;p&gt;Hello world.&lt;/p&gt;
          &lt;aside&gt;
            &lt;p&gt;My cat is cute.&lt;/p&gt;
          &lt;/aside&gt;
        &lt;/body&gt;
      </pre>

      Although it contains no headings, this snippet has three sections: a document (the
      <code>body</code>) with two subsections (a <code>nav</code> and an <code>aside</code>). A user
      agent could present the outline as follows:

      1. Untitled document
          1. Navigation
          2. Sidebar

      These default headings ("Untitled document", "Navigation", "Sidebar") are not specified by
      this specification, and might vary with the user's language, the page's language, the user's
      preferences, the user agent implementor's preferences, etc.
    </div>

    <div class="note">
      The following JavaScript function shows how the tree walk could be implemented. The
      <var>root</var> argument is the root of the tree to walk (either a <a>sectioning content</a>
      element or a <a>sectioning root</a> element), and the <var>enter</var> and <var>exit</var>
      arguments are callbacks that are called with the nodes as they are entered and exited.
      [[!ECMA-262]]

      <pre highlight="javascript">
        function (root, enter, exit) {
          var node = root;
          start: while (node) {
            enter(node);
            if (node.firstChild) {
              node = node.firstChild;
              continue start;
            }
            while (node) {
              exit(node);
              if (node == root) {
                node = null;
              } else if (node.nextSibling) {
                node = node.nextSibling;
                continue start;
              } else {
                node = node.parentNode;
              }
            }
          }
        }
      </pre>
    </div>
  </div>

<h5 id="sample-outlines">Sample outlines</h5>

  <em>This section is non-normative.</em>

  <div class="example">
    The following document shows a straight-forward application of the <a>outline</a> algorithm.
    First, here is the document, which is a book with very short chapters and subsections:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;title&gt;The Tax Book (all in one page)&lt;/title&gt;
      &lt;h1&gt;The Tax Book&lt;/h1&gt;
      &lt;h2&gt;Earning money&lt;/h2&gt;
      &lt;p&gt;Earning money is good.&lt;/p&gt;
      &lt;h3&gt;Getting a job&lt;/h3&gt;
      &lt;p&gt;To earn money you typically need a job.&lt;/p&gt;
      &lt;h2&gt;Spending money&lt;/h2&gt;
      &lt;p&gt;Spending is what money is mainly used for.&lt;/p&gt;
      &lt;h3&gt;Cheap things&lt;/h3&gt;
      &lt;p&gt;Buying cheap things often not cost-effective.&lt;/p&gt;
      &lt;h3&gt;Expensive things&lt;/h3&gt;
      &lt;p&gt;The most expensive thing is often not the most cost-effective either.&lt;/p&gt;
      &lt;h2&gt;Investing money&lt;/h2&gt;
      &lt;p&gt;You can lend your money to other people.&lt;/p&gt;
      &lt;h2&gt;Losing money&lt;/h2&gt;
      &lt;p&gt;If you spend money or invest money, sooner or later you will lose money.
      &lt;h3&gt;Poor judgement&lt;/h3&gt;
      &lt;p&gt;Usually if you lose money it's because you made a mistake.&lt;/p&gt;
    </pre>

    This book would form the following outline:

    1. The Tax Book
        1. Earning money
            1. Getting a job
        2. Spending money
            1. Cheap things
            2. Expensive things
        3. Investing money
        4. Losing money
            1. Poor judgement

    Notice that the <code>title</code> element does not participate in the outline.
  </div>

  <div class="example">
    Here is a similar document, but this time using <code>section</code> elements to get the same
    effect:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;title&gt;The Tax Book (all in one page)&lt;/title&gt;
      &lt;h1&gt;The Tax Book&lt;/h1&gt;
      &lt;section&gt;
        &lt;h1&gt;Earning money&lt;/h1&gt;
        &lt;p&gt;Earning money is good.&lt;/p&gt;
        &lt;section&gt;
          &lt;h1&gt;Getting a job&lt;/h1&gt;
          &lt;p&gt;To earn money you typically need a job.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/section&gt;
      &lt;section&gt;
        &lt;h1&gt;Spending money&lt;/h1&gt;
        &lt;p&gt;Spending is what money is mainly used for.&lt;/p&gt;
        &lt;section&gt;
          &lt;h1&gt;Cheap things&lt;/h1&gt;
          &lt;p&gt;Buying cheap things often not cost-effective.&lt;/p&gt;
        &lt;/section&gt;
        &lt;section&gt;
          &lt;h1&gt;Expensive things&lt;/h1&gt;
          &lt;p&gt;The most expensive thing is often not the most cost-effective either.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/section&gt;
      &lt;section&gt;
        &lt;h1&gt;Investing money&lt;/h1&gt;
        &lt;p&gt;You can lend your money to other people.&lt;/p&gt;
      &lt;/section&gt;
      &lt;section&gt;
        &lt;h1&gt;Losing money&lt;/h1&gt;
        &lt;p&gt;If you spend money or invest money, sooner or later you will lose money.
        &lt;section&gt;
          &lt;h1&gt;Poor judgement&lt;/h1&gt;
          &lt;p&gt;Usually if you lose money it's because you made a mistake.&lt;/p&gt;
        &lt;/section&gt;
      &lt;/section&gt;
    </pre>

    This book would form the same outline:

    1. The Tax Book
        1. Earning money
            1. Getting a job
        2. Spending money
            1. Cheap things
            2. Expensive things
        3. Investing money
        4. Losing money
            1. Poor judgement
  </div>

  <div class="example">
    A document can contain multiple top-level headings:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;title&gt;Alphabetic Fruit&lt;/title&gt;
      &lt;h1&gt;Apples&lt;/h1&gt;
      &lt;p&gt;Pomaceous.&lt;/p&gt;
      &lt;h1&gt;Bananas&lt;/h1&gt;
      &lt;p&gt;Edible.&lt;/p&gt;
      &lt;h1&gt;Oranges&lt;/h1&gt;
      &lt;p&gt;Star.&lt;/p&gt;
    </pre>

    This would form the following simple outline consisting of three top-level sections:

    1. Apples
    2. Bananas
    3. Oranges

    Effectively, the <code>body</code> element is split into three.
  </div>

  <div class="example">
    Mixing both the <code>h1</code>â<code>h6</code> model and the
    <code>section</code>/<code>h1</code> model can lead to some unintuitive results.

    Consider for example the following, which is just the previous example but with the contents
    of the (implied) <code>body</code> wrapped in a <code>section</code>:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;title&gt;Alphabetic Fruit&lt;/title&gt;
      &lt;section&gt;
        &lt;h1&gt;Apples&lt;/h1&gt;
        &lt;p&gt;Pomaceous.&lt;/p&gt;
        &lt;h1&gt;Bananas&lt;/h1&gt;
        &lt;p&gt;Edible.&lt;/p&gt;
        &lt;h1&gt;Oranges&lt;/h1&gt;
        &lt;p&gt;Star.&lt;/p&gt;
      &lt;/section&gt;
    </pre>

    The resulting outline would be:

    1. <i>(untitled page)</i>
        1. Apples
        2. Bananas
        3. Oranges

    This result is described as <i>unintuitive</i> because it results in three subsections even
    though there's only one <code>section</code> element. Effectively, the <code>section</code> is
    split into three, just like the implied <code>body</code> element in the previous example.

    (In this example, "<i>(untitled page)</i>" is the implied heading for the <code>body</code>
    element, since it has no explicit heading.)
  </div>

  <div class="example">
    Headings never rise above other sections. Thus, in the following example, the first
    <code>h1</code> does not actually describe the page header; it describes the header for the
    second half of the page:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;title&gt;Feathers on The Site of Encyclopedic Knowledge&lt;/title&gt;
      &lt;section&gt;
        &lt;h1&gt;A plea from our caretakers&lt;/h1&gt;
        &lt;p&gt;Please, we beg of you, send help! We're stuck in the server room!&lt;/p&gt;
      &lt;/section&gt;
      &lt;h1&gt;Feathers&lt;/h1&gt;
      &lt;p&gt;Epidermal growths.&lt;/p&gt;
    </pre>

    The resulting outline would be:

    1. <i>(untitled page)</i>
        1. A plea from our caretakers
    2. Feathers
  </div>

  <div class="example">
    Thus, when an <code>article</code> element starts with a <code>nav</code> block and only later
    has its heading, the result is that the <code>nav</code> block is not part of the same section
    as the rest of the <code>article</code> in the outline. For instance, take this document:

    <pre highlight="html">
      &lt;!DOCTYPE HTML&gt;
      &lt;title&gt;We're adopting a child! â Ray's blog&lt;/title&gt;
      ...

      &lt;h1&gt;Ray's blog&lt;/h1&gt;

      &lt;main&gt;
        &lt;article&gt;
          &lt;header&gt;
            &lt;nav&gt;
              &lt;a href="?t=-1d"&gt;Yesterday&lt;/a&gt;;
              &lt;a href="?t=-7d"&gt;Last week&lt;/a&gt;;
              &lt;a href="?t=-1m"&gt;Last month&lt;/a&gt;
            &lt;/nav&gt;
          &lt;/header&gt;
          &lt;h2&gt;We're adopting a child!&lt;/h2&gt;

          &lt;p&gt;As of today, Janine and I have signed the papers to become
          the proud parents of baby Diane! We've been looking forward to
          this day for weeks.&lt;/p&gt;
        &lt;/article&gt;
      &lt;/main&gt;
      ...
    </pre>

    The resulting outline would be:

    1. Ray's blog
        1. <i>Untitled article</i>
            1. <i>Untitled navigation section</i>
        2. We're adopting a child!

    Also worthy of note in this example is that the <code>header</code> and <code>main</code>
    elements have no effect whatsoever on the document outline.
  </div>

<h5 id="exposing-outlines-to-users">Exposing outlines to users</h5>

  User agents are encouraged to expose page outlines to users to aid in navigation. This is
  especially true for non-visual media, e.g. screen readers.

  However, to mitigate the difficulties that arise from authors misusing <a>sectioning content</a>,
  user agents are also encouraged to offer a mode that navigates the page using
  <a>heading content</a> alone.

  <div class="example">
    For instance, a user agent could map the arrow keys as follows:

    : <kbd>Shift</kbd>+<kbd>â Left</kbd>
    :: Go to previous section, including subsectons of previous sections

    : <kbd>Shift</kbd>+<kbd>â Right</kbd>
    :: Go to next section, including subsections of the current section

    : <kbd>Shift</kbd>+<kbd>â Up</kbd>
    :: Go to parent section of the current section

    : <kbd>Shift</kbd>+<kbd>â Down</kbd>
    :: Go to next section, skipping subsections of the current section

    Plus in addition, the user agent could map the <kbd>j</kbd> and
    <kbd>k</kbd> keys to navigating to the previous or next element of
    <a>heading content</a>, regardless of the section's outline depth and ignoring sections with no
    headings.
  </div>

<h4 id="usage-summary">Usage summary</h4>

  <em>This section is non-normative.</em>

  <table class="vertical-summary-table">
    <thead>
      <tr>
        <th rowspan="2">Element</th>
        <th>Purpose</th>
      </tr>
      <tr>
        <th>Example</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td rowspan="2"><code>body</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;!DOCTYPE HTML&gt;
            &lt;html&gt;
              &lt;head&gt; &lt;title&gt;Steve Hill's Home Page&lt;/title&gt; &lt;/head&gt;
              &lt;body&gt; &lt;p&gt;Hard Trance is My Life.&lt;/p&gt; &lt;/body&gt;
            &lt;/html&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>article</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;article&gt;
              &lt;img src="/tumblr_masqy2s5yn1rzfqbpo1_500.jpg" alt="Yellow smiley face with the caption 'masif'"&gt;
              &lt;p&gt;My fave Masif tee so far!&lt;/p&gt;
              &lt;footer&gt;Posted 2 days ago&lt;/footer&gt;
            &lt;/article&gt;
            &lt;article&gt;
              &lt;img src="/tumblr_m9tf6wSr6W1rzfqbpo1_500.jpg" alt=""&gt;
              &lt;p&gt;Happy 2nd birthday Masif Saturdays!!!&lt;/p&gt;
              &lt;footer&gt;Posted 3 weeks ago&lt;/footer&gt;
            &lt;/article&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>section</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;h1&gt;Biography&lt;/h1&gt;
            &lt;section&gt;
              &lt;h1&gt;The facts&lt;/h1&gt;
              &lt;p&gt;1500+ shows, 14+ countries&lt;/p&gt;
            &lt;/section&gt;
            &lt;section&gt;
              &lt;h1&gt;2010/2011 figures per year&lt;/h1&gt;
              &lt;p&gt;100+ shows, 8+ countries&lt;/p&gt;
            &lt;/section&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>nav</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;nav&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;
                &lt;li&gt;&lt;a href="/biog.html"&gt;Bio&lt;/a&gt;
                &lt;li&gt;&lt;a href="/discog.html"&gt;Discog&lt;/a&gt;
              &lt;/ul&gt;
            &lt;/nav&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>aside</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;h1&gt;Music&lt;/h1&gt;
            &lt;p&gt;As any burner can tell you, the event has a lot of trance.&lt;/p&gt;
            &lt;aside&gt;You can buy the music we played at our &lt;a href="buy.html"&gt;playlist page&lt;/a&gt;.&lt;/aside&gt;
            &lt;p&gt;This year we played a kind of trance that originated in Belgium, Germany, and the Netherlands in the mid 90s.&lt;/p&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>h1</code>â<code>h6</code></td>
        <td>A section heading</td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;h1&gt;The Guide To Music On The Playa&lt;/h1&gt;
            &lt;h2&gt;The Main Stage&lt;/h2&gt;
            &lt;p&gt;If you want to play on a stage, you should bring one.&lt;/p&gt;
            &lt;h2&gt;Amplified Music&lt;/h2&gt;
            &lt;p&gt;Amplifiers up to 300W or 90dB are welcome.&lt;/p&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>header</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;article&gt;
              &lt;header&gt;
              &lt;h1&gt;Hard Trance is My Life&lt;/h1&gt;
              &lt;p&gt;By DJ Steve Hill and Technikal&lt;/p&gt;
              &lt;/header&gt;
              &lt;p&gt;The album with the amusing punctuation has red artwork.&lt;/p&gt;
            &lt;/article&gt;
          </pre>
        </td>
      </tr>
      <tr>
        <td rowspan="2"><code>footer</code></td>
        <td></td>
      </tr>
      <tr>
        <td>
          <pre highlight="html">
            &lt;article&gt;
              &lt;h1&gt;Hard Trance is My Life&lt;/h1&gt;
              &lt;p&gt;The album with the amusing punctuation has red artwork.&lt;/p&gt;
              &lt;footer&gt;
              &lt;p&gt;Artists: DJ Steve Hill and Technikal&lt;/p&gt;
              &lt;/footer&gt;
            &lt;/article&gt;
          </pre>
        </td>
      </tr>
    </tbody>
  </table>

<h5 id="article-or-section">Article or section?</h5>

  <em>This section is non-normative.</em>

  A <code>section</code> forms part of something else. An <code>article</code> is its own thing. But
  how does one know which is which? Mostly the real answer is "it depends on author intent".

  For example, one could imagine a book with a "Granny Smith" chapter that just said "These juicy,
  green apples make a great filling for apple pies."; that would be a <code>section</code> because
  there'd be lots of other chapters on (maybe) other kinds of apples.

  On the other hand, one could imagine a tweet or reddit comment or tumblr post or newspaper
  classified ad that just said "Granny Smith. These juicy, green apples make a great filling for
  apple pies."; it would then be <code>article</code>s because that was the whole thing.

  A comment on an article is not part of the <code>article</code> on which it is commenting,
  therefore it is its own <code>article</code>.

<!-- more section 4 -->

<hr />
<hr />
<hr />



<hr />
<hr />
<hr />



<hr />
<hr />
<hr />



<hr />
<hr />
<hr />



<hr />
<hr />
<hr />



<hr />
<hr />
<hr />



<hr />
<hr />
<hr />

<h2 id="obsolete">Obsolete features</h2>

<h3 id="obsolete-but-conforming-features">Obsolete but conforming features</h3>

  Features listed in this section will trigger warnings in conformance checkers.

  Authors should not specify a <code>border</code> attribute on an <code>img</code> element. If the
  attribute is present, its value must be the string "<code>0</code>". CSS should be used instead.

  Authors should not specify a <code>language</code> attribute on a <code>script</code> element. If
  the attribute is present, its value must be an <a>ASCII case-insensitive</a> match for the string
  "<code>JavaScript</code>" and either the <code>type</code> attribute must be omitted or its value
  must be an <a>ASCII case-insensitive</a> match for the string "<code>text/javascript</code>".
  The attribute should be entirely omitted instead (with the value "<code>JavaScript</code>", it has
  no effect), or replaced with use of the <code>type</code> attribute.

  Authors should not specify the <code>name</code> attribute on <code>a</code> elements. If the
  attribute is present, its value must not be the empty string and must neither be equal to the
  value of any of the <a>IDs</a> in the element's <a>home subtree</a> other than the element's own
  <a>ID</a>, if any, nor be equal to the value of any of the other <code>name</code> attributes on
  <code>a</code> elements in the element's <a>home subtree</a>. If this attribute is present and the
  element has an <a>ID</a>, then the attribute's value must be equal to the element's <a>ID</a>. In
  earlier versions of the language, this attribute was intended as a way to specify possible targets
  for fragment identifiers in <a>URLs</a>. The <code>id</code> attribute should be used instead.

  Authors should not, but may despite requirements to the contrary elsewhere in this specification,
  specify the <code>maxlength</code> and <code>size</code> attributes on <code>input</code> elements
  whose <code>type</code> attributes are in the <a>Number</a> state. One valid reason for using
  these attributes regardless is to help legacy user agents that do not support <code>input</code>
  elements with <code>type="number"</code> to still render the text field with a useful width.

  <p class="note">
    In <a>the HTML syntax</a>, specifying a <a>DOCTYPE</a> that is an <a>obsolete permitted
    DOCTYPE</a> will also trigger a warning.
  </p>

  <div class="impl">
    <h4 id="warnings-for-obsolete-but-conforming-features">Warnings for obsolete but conforming features</h4>

    To ease the transition from HTML4 Transitional documents to the language defined in
    <em>this</em> specification, and to discourage certain features that are only allowed in very
    few circumstances, conformance checkers must warn the user when the following features are used
    in a document. These are generally old obsolete features that have no effect, and are allowed
    only to distinguish between likely mistakes (regular conformance errors) and mere vestigial
    markup or unusual and discouraged practices (these warnings).

    The following features must be categorized as described above:

     * The presence of an <a>obsolete permitted DOCTYPE</a> in an <a>HTML document</a>.
     * The presence of a <code>border</code> attribute on an <code>img</code> element if its value
        is the string "<code>0</code>".
     * The presence of a <code>language</code> attribute on a <code>script</code> element if its
        value is an <a>ASCII case-insensitive</a> match for the string "<code>JavaScript</code>" and
        if there is no <code>type</code> attribute or there is and its value is an <a>ASCII
        case-insensitive</a> match for the string "<code>text/javascript</code>".
     * The presence of a <code>name</code> attribute on an <code>a</code> element, if its value is
        not the empty string.
     * The presence of a <code>maxlength</code> attribute on an <code>input</code> element whose
        <code>type</code> attribute is in the <a>Number</a> state.
     * The presence of a <code>size</code> attribute on an <code>input</code> element whose
        <code>type</code> attribute is in the <a>Number</a> state.

    Conformance checkers must distinguish between pages that have no conformance errors and have
    none of these obsolete features, and pages that have no conformance errors but do have some of
    these obsolete features.

    <p class="example">
      For example, a validator could report some pages as "Valid HTML" and others as
      "Valid HTML with warnings".
    </p>
  </div>

<h3 id="non-conforming-features">Non-conforming features</h3>

  Elements in the following list are entirely obsolete, and must not be used by authors:

  : <code>applet</code>
  :: Use <code>embed</code> or <code>object</code> instead.

  : <dfn><code>acronym</code></dfn>
  :: Use <code>abbr</code> instead.

  : <dfn><code>bgsound</code></dfn>
  :: Use <code>audio</code> instead.

  : <dfn><code>dir</code></dfn>
  :: Use <code>ul</code> instead.

  : <code>frame</code>
  : <code>frameset</code>
  : <dfn><code>noframes</code></dfn>
  :: Either use <code>iframe</code> and CSS instead, or use server-side includes to generate
      complete pages with the various invariant parts merged in.

  : <dfn><code>isindex</code></dfn>
  :: Use an explicit <code>form</code> and <a>text field</a> combination instead.

  : <dfn><code>listing</code></dfn>
  :: Use <code>pre</code> and <code>code</code> instead.

  : <dfn><code>nextid</code></dfn>
  :: Use GUIDs instead.

  : <dfn><code>noembed</code></dfn>
  :: Use <code>object</code> instead of <code>embed</code> when fallback is necessary.

  : <dfn><code>plaintext</code></dfn>
  :: Use the "<code>text/plain</code>" <a>MIME type</a> instead.

  : <dfn><code>rb</code></dfn>
  : <dfn><code>rtc</code></dfn>
  :: Providing the ruby base directly inside the <code>ruby</code> element or using nested
      <code>ruby</code> elements is sufficient.

  : <dfn><code>strike</code></dfn>
  :: Use <code>del</code> instead if the element is marking an edit, otherwise use <code>s</code>
      instead.

  : <dfn><code>xmp</code></dfn>
  :: Use <code>pre</code> and <code>code</code> instead, and escape "<code>&lt;</code>" and
      "<code>&amp;</code>" characters as "<code>&amp;lt;</code>" and "<code>&amp;amp;</code>"
      respectively.

  : <dfn><code>basefont</code></dfn>
  : <dfn><code>big</code></dfn>
  : <dfn><code>blink</code></dfn>
  : <dfn><code>center</code></dfn>
  : <dfn><code>font</code></dfn>
  : <code>marquee</code>
  : <dfn><code>multicol</code></dfn>
  : <dfn><code>nobr</code></dfn>
  : <dfn><code>spacer</code></dfn>
  : <dfn><code>tt</code></dfn>
  :: Use appropriate elements or CSS instead.

      Where the <code>tt</code> element would have been used for marking up keyboard input,
      consider the <code>kbd</code> element; for variables, consider the <code>var</code> element;
      for computer code, consider the <code>code</code> element; and for computer output, consider
      the <code>samp</code> element.

      Similarly, if the <code>big</code> element is being used to denote a heading, consider using
      the <code>h1</code> element; if it is being used for marking up important passages, consider
      the <code>strong</code> element; and if it is being used for highlighting text for reference
      purposes, consider the <code>mark</code> element.

      See also the <a>text-level semantics usage summary</a> for more suggestions with examples.

  <hr />

  The following attributes are obsolete (though the elements are still part of the language), and
  must not be used by authors:

  : <dfn><code>charset</code></dfn> on <code>a</code> elements
  : <dfn><code>charset</code></dfn> on <code>link</code> elements
  :: Use an HTTP <code>Content-Type</code> header on the linked resource instead.

  : <dfn><code>coords</code></dfn> on <code>a</code> elements
  : <dfn><code>shape</code></dfn> on <code>a</code> elements
  :: Use <code>area</code> instead of <code>a</code> for image maps.

  : <dfn><code>methods</code></dfn> on <code>a</code> elements
  : <dfn><code>methods</code></dfn> on <code>link</code> elements
  :: Use the HTTP OPTIONS feature instead.

  : <dfn><code>name</code></dfn> on <code>a</code> elements (except as noted in the previous
      section)
  : <dfn><code>name</code></dfn> on <code>embed</code> elements
  : <dfn><code>name</code></dfn> on <code>img</code> elements
  : <dfn><code>name</code></dfn> on <code>option</code> elements
  :: Use the <code>id</code> attribute instead.

  : <dfn><code>rev</code></dfn> on <code>a</code> elements
  : <dfn><code>rev</code></dfn> on <code>link</code> elements
  :: Use the <code>rel</code> attribute instead, with an opposite term. (For example, instead of
      <code>rev="made"</code>, use <code>rel="author"</code>.)

  : <dfn><code>urn</code></dfn> on <code>a</code> elements
  : <dfn><code>urn</code></dfn> on <code>link</code> elements
  :: Specify the preferred persistent identifier using the <code>href</code> attribute instead.

  : <dfn><code>accept</code></dfn> on <code>form</code> elements
  :: Use the <code>accept</code> attribute directly on the <code>input</code> elements instead.

  : <dfn><code>hreflang</code></dfn> on <code>area</code> elements
  : <dfn><code>type</code></dfn> on <code>area</code> elements
  :: These attributes do not do anything useful, and for historical reasons there are no
      corresponding IDL attributes on <code>area</code> elements. Omit them altogether.

  : <dfn><code>nohref</code></dfn> on <code>area</code> elements
  :: Omitting the <code>href</code> attribute is sufficient; the <code>nohref</code> attribute is
      unnecessary. Omit it altogether.

  : <dfn><code>profile</code></dfn> on <code>head</code> elements
  :: When used for declaring which <code>meta</code> terms are used in the document, unnecessary;
      omit it altogether, and <a>register the names</a>.
  :: When used for triggering specific user agent behaviors: use a <code>link</code> element
      instead.

  : <dfn><code>version</code></dfn> on <code>html</code> elements
  :: Unnecessary. Omit it altogether.

  : <dfn><code>ismap</code></dfn> on <code>input</code> elements
  :: Unnecessary. Omit it altogether. All <code>input</code> elements with a <code>type</code>
      attribute in the <a>Image Button</a> state are processed as server-side image maps.

  : <dfn><code>usemap</code></dfn> on <code>input</code> elements
  :: Use <code>img</code> instead of <code>input</code> for image maps.

  : <dfn><code>longdesc</code></dfn> on <code>iframe</code> elements
  : <dfn><code>longdesc</code></dfn> on <code>img</code> elements
  :: Use a regular <code>a</code> element to link to the description, or (in the case of images) use
      an <a>image map</a> to provide a link from the image to the image's description.

  : <dfn><code>lowsrc</code></dfn> on <code>img</code> elements
  :: Use a progressive JPEG image (given in the <code>src</code> attribute), instead of using two
      separate images.

  : <dfn><code>target</code></dfn> on <code>link</code> elements
  :: Unnecessary. Omit it altogether.

  : <dfn><code>scheme</code></dfn> on <code>meta</code> elements
  :: Use only one scheme per field, or make the scheme declaration part of the value.

  : <dfn><code>archive</code></dfn> on <code>object</code> elements
  : <dfn><code>classid</code></dfn> on <code>object</code> elements
  : <dfn><code>code</code></dfn> on <code>object</code> elements
  : <dfn><code>codebase</code></dfn> on <code>object</code> elements
  : <dfn><code>codetype</code></dfn> on <code>object</code> elements
  :: Use the <code>data</code> and <code>type</code> attributes to invoke <a>plugins</a>. To set
      parameters with these names in particular, the <code>param</code> element can be used.

  : <dfn><code>declare</code></dfn> on <code>object</code> elements
  :: Repeat the <code>object</code> element completely each time the resource is to be reused.

  : <dfn><code>standby</code></dfn> on <code>object</code> elements
  :: Optimize the linked resource so that it loads quickly or, at least, incrementally.

  : <dfn><code>type</code></dfn> on <code>param</code> elements
  : <dfn><code>valuetype</code></dfn> on <code>param</code> elements
  :: Use the <code>name</code> and <code>value</code> attributes without declaring value types.

  : <dfn><code>language</code></dfn> on <code>script</code> elements (except as noted in the
      previous section)
  :: Use the <code>type</code> attribute instead.

  : <dfn><code>event</code></dfn> on <code>script</code> elements
  : <dfn><code>for</code></dfn> on <code>script</code> elements
  :: Use DOM events mechanisms to register event listeners. [[!DOM]]

  : <dfn><code>media</code></dfn> on <code>source</code> elements
  :: Use script to select the media resource(s) to use.

  : <dfn><code>datapagesize</code></dfn> on <code>table</code> elements
  :: Unnecessary. Omit it altogether.

  : <dfn><code>summary</code></dfn> on <code>table</code> elements
  :: Use one of the <a>techniques for describing tables</a> given in the <code>table</code> section
      instead.

  : <dfn><code>abbr</code></dfn> on <code>td</code> elements
  :: Use text that begins in an unambiguous and terse manner, and include any more elaborate text
      after that. The <code>title</code> attribute can also be useful in including more detailed
      text, so that the cell's contents can be made terse. If it's a heading, use <code>th</code>
      (which has an <code>abbr</code> attribute).

  : <dfn><code>axis</code></dfn> on <code>td</code> and <code>th</code> elements
  :: Use the <code>scope</code> attribute on the relevant <code>th</code>.

  : <dfn><code>scope</code></dfn> on <code>td</code> elements
  :: Use <code>th</code> elements for heading cells.

  : <dfn><code>datasrc</code></dfn> on <code>a</code>, <code>applet</code>, <code>button</code>,
      <code>div</code>, <code>frame</code>, <code>iframe</code>, <code>img</code>,
      <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>,
      <code>object</code>, <code>option</code>, <code>select</code>, <code>span</code>,
      <code>table</code>, and <code>textarea</code> elements
  : <dfn><code>datafld</code></dfn> on <code>a</code>, <code>applet</code>, <code>button</code>,
      <code>div</code>, <code>fieldset</code>, <code>frame</code>, <code>iframe</code>,
      <code>img</code>, <code>input</code>, <code>label</code>, <code>legend</code>,
      <code>marquee</code>, <code>object</code>, <code>param</code>, <code>select</code>,
      <code>span</code>, and <code>textarea</code> elements
  : <dfn><code>dataformatas</code></dfn> on <code>button</code>, <code>div</code>,
      <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>,
      <code>object</code>, <code>option</code>, <code>select</code>, <code>span</code>, and
      <code>table</code> elements
  :: Use script and a mechanism such as <code>XMLHttpRequest</code> to populate the page
      dynamically. [[!XHR]]

  : <dfn><code>alink</code></dfn> on <code>body</code> elements
  : <dfn><code>bgcolor</code></dfn> on <code>body</code> elements
  : <dfn><code>bottommargin</code></dfn> on <code>body</code> elements
  : <dfn><code>leftmargin</code></dfn> on <code>body</code> elements
  : <dfn><code>link</code></dfn> on <code>body</code> elements
  : <dfn><code>marginheight</code></dfn> on <code>body</code> elements
  : <dfn><code>marginwidth</code></dfn> on <code>body</code> elements
  : <dfn><code>rightmargin</code></dfn> on <code>body</code> elements
  : <dfn><code>text</code></dfn> on <code>body</code> elements
  : <dfn><code>margintop</code></dfn> on <code>body</code> elements
  : <dfn><code>vlink</code></dfn> on <code>body</code> elements
  : <dfn><code>clear</code></dfn> on <code>br</code> elements
  : <dfn><code>align</code></dfn> on <code>caption</code> elements
  : <dfn><code>align</code></dfn> on <code>col</code> elements
  : <dfn><code>char</code></dfn> on <code>col</code> elements
  : <dfn><code>charoff</code></dfn> on <code>col</code> elements
  : <dfn><code>valign</code></dfn> on <code>col</code> elements
  : <dfn><code>width</code></dfn> on <code>col</code> elements
  : <dfn><code>align</code></dfn> on <code>div</code> elements
  : <dfn><code>compact</code></dfn> on <code>dl</code> elements
  : <dfn><code>align</code></dfn> on <code>embed</code> elements
  : <dfn><code>hspace</code></dfn> on <code>embed</code> elements
  : <dfn><code>vspace</code></dfn> on <code>embed</code> elements
  : <dfn><code>align</code></dfn> on <code>hr</code> elements
  : <dfn><code>color</code></dfn> on <code>hr</code> elements
  : <dfn><code>noshade</code></dfn> on <code>hr</code> elements
  : <dfn><code>size</code></dfn> on <code>hr</code> elements
  : <dfn><code>width</code></dfn> on <code>hr</code> elements
  : <dfn><code>align</code></dfn> on <code>h1</code>&mdash;<code>h6</code> elements
  : <dfn><code>align</code></dfn> on <code>iframe</code> elements
  : <dfn><code>allowtransparency</code></dfn> on <code>iframe</code> elements
  : <dfn><code>frameborder</code></dfn> on <code>iframe</code> elements
  : <dfn><code>framespacing</code></dfn> on <code>iframe</code> elements
  : <dfn><code>hspace</code></dfn> on <code>iframe</code> elements
  : <dfn><code>marginheight</code></dfn> on <code>iframe</code> elements
  : <dfn><code>marginwidth</code></dfn> on <code>iframe</code> elements
  : <dfn><code>scrolling</code></dfn> on <code>iframe</code> elements
  : <dfn><code>vspace</code></dfn> on <code>iframe</code> elements
  : <dfn><code>align</code></dfn> on <code>input</code> elements
  : <dfn><code>border</code></dfn> on <code>input</code> elements
  : <dfn><code>hspace</code></dfn> on <code>input</code> elements
  : <dfn><code>vspace</code></dfn> on <code>input</code> elements
  : <dfn><code>align</code></dfn> on <code>img</code> elements
  : <dfn><code>border</code></dfn> on <code>img</code> elements (except as noted in the previous
      section)
  : <dfn><code>hspace</code></dfn> on <code>img</code> elements
  : <dfn><code>vspace</code></dfn> on <code>img</code> elements
  : <dfn><code>align</code></dfn> on <code>legend</code> elements
  : <dfn><code>type</code></dfn> on <code>li</code> elements
  : <dfn><code>compact</code></dfn> on <code>menu</code> elements
  : <dfn><code>align</code></dfn> on <code>object</code> elements
  : <dfn><code>border</code></dfn> on <code>object</code> elements
  : <dfn><code>hspace</code></dfn> on <code>object</code> elements
  : <dfn><code>vspace</code></dfn> on <code>object</code> elements
  : <dfn><code>compact</code></dfn> on <code>ol</code> elements
  : <dfn><code>align</code></dfn> on <code>p</code> elements
  : <dfn><code>width</code></dfn> on <code>pre</code> elements
  : <dfn><code>align</code></dfn> on <code>table</code> elements
  : <dfn><code>bgcolor</code></dfn> on <code>table</code> elements
  : <dfn><code>border</code></dfn> on <code>table</code> elements
  : <dfn><code>bordercolor</code></dfn> on <code>table</code> elements
  : <dfn><code>cellpadding</code></dfn> on <code>table</code> elements
  : <dfn><code>cellspacing</code></dfn> on <code>table</code> elements
  : <dfn><code>frame</code></dfn> on <code>table</code> elements
  : <dfn><code>height</code></dfn> on <code>table</code> elements
  : <dfn><code>rules</code></dfn> on <code>table</code> elements
  : <dfn><code>width</code></dfn> on <code>table</code> elements
  : <dfn><code>align</code></dfn> on <code>tbody</code>, <code>thead</code>, and <code>tfoot</code>
      elements
  : <dfn><code>char</code></dfn> on <code>tbody</code>, <code>thead</code>, and <code>tfoot</code>
      elements
  : <dfn><code>charoff</code></dfn> on <code>tbody</code>, <code>thead</code>, and
      <code>tfoot</code> elements
  : <dfn><code>valign</code></dfn> on <code>tbody</code>, <code>thead</code>, and <code>tfoot</code>
      elements
  : <dfn><code>align</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>bgcolor</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>char</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>charoff</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>height</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>nowrap</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>valign</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>width</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>align</code></dfn> on <code>tr</code> elements
  : <dfn><code>bgcolor</code></dfn> on <code>tr</code> elements
  : <dfn><code>char</code></dfn> on <code>tr</code> elements
  : <dfn><code>charoff</code></dfn> on <code>tr</code> elements
  : <dfn><code>height</code></dfn> on <code>tr</code> elements
  : <dfn><code>valign</code></dfn> on <code>tr</code> elements
  : <dfn><code>compact</code></dfn> on <code>ul</code> elements
  : <dfn><code>type</code></dfn> on <code>ul</code> elements
  : <dfn><code>background</code></dfn> on <code>body</code>, <code>table</code>, <code>thead</code>,
      <code>tbody</code>, <code>tfoot</code>, <code>tr</code>, <code>td</code>, and <code>th</code>
      elements
  :: Use CSS instead.

  <hr />

  The <code>border</code> attribute on the <code>table</code> element can be used to provide basic
  fallback styling for the purpose of making tables legible in browsing environments where CSS
  support is limited or absent, such as text-based browsers, WYSIWYG editors, and in situations
  where CSS support is disabled or the style sheet is lost. Only the empty string and the value
  "<code>1</code>" may be used as <code>border</code> values for this purpose. Other values are
  considered obsolete. To regulate the thickness of such borders, authors should instead use CSS.

  <div class="impl">

<h3 id="requirements-for-implementations">Requirements for implementations</h3>

  <h4 id="the-applet-element">The <dfn><code>applet</code></dfn> element</h4>

  <p class="critical">
    This feature is in the process of being removed from the Web platform. (This is a long process
    that takes many years.) Using the <code>applet</code> element at this time is highly
    discouraged.
  </p>

  The <code>applet</code> element is a Java-specific variant of the <code>embed</code> element.
  The <code>applet</code> element is now obsoleted so that all extension frameworks (Java, .NET,
  Flash, etc) are handled in a consistent manner.

  When the element matches any of the following conditions, it <a>represents</a> its contents:

  * The element is still in the <a>stack of open elements</a> of an <a>HTML parser</a> or
      <a>XML parser</a>.
  * The element is not <a>in a <code>Document</code></a>.
  * The element's <a>node document</a> is not <a>fully active</a>.
  * The element's <a>node document</a>'s <a>active sandboxing flag set</a> has its <a>sandboxed
    plugins browsing context flag</a> set.
  * The element has an ancestor <a>media element</a>.
  * The element has an ancestor <code>object</code> element that is <em>not</em> showing its
    <a>fallback content</a>.
  * No Java Language runtime <a>plugin</a> is available.
  * A Java runtime <a>plugin</a> is available but it is disabled.

  Otherwise, the user agent should instantiate a Java Language runtime <a>plugin</a>, and should
  pass the names and values of all the attributes on the element, in the order they were added to
  the element, with the attributes added by the parser being ordered in source order, and then a
  parameter named "PARAM" whose value is null, and then all the names and values of
  <a>parameters</a> given by <code>param</code> elements that are children of the
  <code>applet</code> element, in <a>tree order</a>, to the <a>plugin</a> used. If the <a>plugin</a>
  supports a scriptable interface, the <code>HTMLAppletElement</code> object representing the
  element should expose that interface. The <code>applet</code> element <a>represents</a> the
  <a>plugin</a>.

  <p class="note">
    The <code>applet</code> element is unaffected by the CSS 'display' property. The
    Java Language runtime is instantiated even if the element is hidden with a 'display:none' CSS
    style.
  </p>

  The <code>applet</code> element must implement the <code>HTMLAppletElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLAppletElement : HTMLElement {
      attribute DOMString align;
      attribute DOMString alt;
      attribute DOMString archive;
      attribute DOMString code;
      attribute DOMString codeBase;
      attribute DOMString height;
      attribute unsigned long hspace;
      attribute DOMString name;
      attribute DOMString _object; // the underscore is not part of the identifier
      attribute unsigned long vspace;
      attribute DOMString width;
    };
  </pre>

  The <dfn><code>align</code></dfn>, <dfn><code>alt</code></dfn>, <dfn><code>archive</code></dfn>,
  <dfn><code>code</code></dfn>, <dfn><code>height</code></dfn>, <dfn><code>hspace</code></dfn>,
  <dfn><code>name</code></dfn>, <dfn><code>object</code></dfn>, <dfn><code>vspace</code></dfn>, and
  <dfn><code>width</code></dfn> IDL attributes must <a>reflect</a> the respective content attributes
  of the same name. For the purposes of reflection, the <code>applet</code> element's
  <code>object</code> content attribute is defined as containing a <a>URL</a>.

  The <dfn><code>codeBase</code></dfn> IDL attribute must <a>reflect</a> the <code>codebase</code>
  content attribute, which for the purposes of reflection is defined as containing a <a>URL</a>.

<h4 id="the-marquee-element">The <dfn><code>marquee</code></dfn> element</h4>

  The <code>marquee</code> element is a presentational element that animates content. CSS
  transitions and animations are a more appropriate mechanism. [[!CSS3-ANIMATIONS]]
  [[!CSS3-TRANSITIONS]]

  The <a>task source</a> for tasks mentioned in this section is the
  <a>DOM manipulation task source</a>.

  The <code>marquee</code> element must implement the <code>HTMLMarqueeElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLMarqueeElement : HTMLElement {
      attribute DOMString behavior;
      attribute DOMString bgColor;
      attribute DOMString direction;
      attribute DOMString height;
      attribute unsigned long hspace;
      attribute long loop;
      attribute unsigned long scrollAmount;
      attribute unsigned long scrollDelay;
      attribute boolean trueSpeed;
      attribute unsigned long vspace;
      attribute DOMString width;

      attribute EventHandler onbounce;
      attribute EventHandler onfinish;
      attribute EventHandler onstart;

      void start();
      void stop();
    };
  </pre>

  A <code>marquee</code> element can be <dfn>turned on</dfn> or <dfn>turned off</dfn>. When it is
  created, it is <a>turned on</a>.

  When the <dfn><code>start()</code></dfn> method is called, the <code>marquee</code> element must
  be <a>turned on</a>.

  When the <dfn><code>stop()</code></dfn> method is called, the <code>marquee</code> element must be
  <a>turned off</a>.

  When a <code>marquee</code> element is created, the user agent must <a>queue a task</a> to
  <a>fire a simple event</a> named <code>start</code> at the element.

  <hr />

  The <dfn><code>behavior</code></dfn> content attribute on <code>marquee</code> elements is an
  <a>enumerated attribute</a> with the following keywords (all non-conforming):

  <table>
    <thead>
      <tr>
        <th>Keyword</th>
        <th>State</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>scroll</code></td>
        <td><dfn>scroll</dfn></td>
      </tr>
      <tr>
        <td><code>slide</code></td>
        <td><dfn>slide</dfn></td>
      </tr>
      <tr>
        <td><code>alternate</code></td>
        <td><dfn>alternate</dfn></td>
      </tr>
    </tbody>
  </table>

  The <i>missing value default</i> is the <a>scroll</a> state.

  <hr />

  The <dfn><code>direction</code></dfn> content attribute on <code>marquee</code> elements is an
  <a>enumerated attribute</a> with the following keywords (all non-conforming):

  <table>
    <thead>
      <tr>
        <th>Keyword</th>
        <th>State</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>left</code></td>
        <td><dfn>left</dfn></td>
      </tr>
      <tr>
        <td><code>right</code></td>
        <td><dfn>right</dfn></td>
      </tr>
      <tr>
        <td><code>up</code></td>
        <td><dfn>up</dfn></td>
      </tr>
      <tr>
        <td><code>down</code></td>
        <td><dfn>down</dfn></td>
      </tr>
    </tbody>
  </table>

  The <i>missing value default</i> is the <a>left</a> state.

  <hr />

  The <dfn><code>truespeed</code></dfn> content attribute on <code>marquee</code> elements is a
  <a>boolean attribute</a>.

  <hr />

  A <code>marquee</code> element has a <dfn>marquee scroll interval</dfn>, which is obtained as
  follows:

  1. If the element has a <code>scrolldelay</code> attribute, and parsing its value using
      the <a>rules for parsing non-negative integers</a> does not return an error, then let
      <var>delay</var> be the parsed value. Otherwise, let <var>delay</var> be 85.
  2. If the element does not have a <code>truespeed</code> attribute, and the <var>delay</var> value
      is less than 60, then let <var>delay</var> be 60 instead.
  3. The <a>marquee scroll interval</a> is <var>delay</var>, interpreted in milliseconds.

  <hr />

  A <code>marquee</code> element has a <dfn>marquee scroll distance</dfn>, which, if the element
  has a <code>scrollamount</code> attribute, and parsing its value using the <a>rules for parsing
  non-negative integers</a> does not return an error, is the parsed value interpreted in CSS pixels,
  and otherwise is 6 CSS pixels.

  <hr />

  A <code>marquee</code> element has a <dfn>marquee loop count</dfn>, which, if the element has a
  <dfn><code>loop</code></dfn> attribute, and parsing its value using the <a>rules for parsing
  integers</a> does not return an error or a number less than 1, is the parsed value, and otherwise
  is &#x2212;1.

  The <dfn><code>loop</code></dfn> IDL attribute, on getting, must return the element's <a>marquee
  loop count</a>; and on setting, if the new value is different than the element's <a>marquee loop
  count</a> and either greater than zero or equal to &#x2212;1, must set the element's
  <code>loop</code> content attribute (adding it if necessary) to the <a>valid integer</a> that
  represents the new value. (Other values are ignored.)

  A <code>marquee</code> element also has a <dfn>marquee current loop index</dfn>, which is zero
  when the element is created.

  The rendering layer will occasionally <dfn>increment the marquee current loop index</dfn>, which
  must cause the following steps to be run:

  1. If the <a>marquee loop count</a> is &#x2212;1, then abort these steps.
  2. Increment the <a>marquee current loop index</a> by one.
  3. If the <a>marquee current loop index</a> is now equal to or greater than the element's
      <a>marquee loop count</a>, <a>turn off</a> the <code>marquee</code> element and <a>queue a
      task</a> to <a>fire a simple event</a> named <code>finish</code> at the
      <code>marquee</code> element.

      Otherwise, if the <code>behavior</code> attribute is in the
      <a>alternate</a> state, then <a>queue a
      task</a> to <a>fire a simple event</a> named <code>bounce</code>
      at the <code>marquee</code> element.

      Otherwise, <a>queue a task</a> to <a>fire a simple event</a> named <code>start</code> at the
      <code>marquee</code> element.

  <hr />

  The following are the <a>event handlers</a> (and their corresponding
  <a>event handler event types</a>) that must be supported, as
  <a>event handler content attributes</a> and <a>event handler IDL attributes</a>, by
    <code>marquee</code> elements:

  <table>
    <thead>
      <tr>
        <th><a>Event handler</a></th>
        <th><a>Event handler event type</a></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><dfn><code>onbounce</code></dfn></td>
        <td><code>bounce</code></td>
      </tr>
      <tr>
        <td><dfn><code>onfinish</code></dfn></td>
        <td><code>finish</code></td>
      </tr>
      <tr>
        <td><dfn><code>onstart</code></dfn></td>
        <td><code>start</code></td>
      </tr>
    </tbody>
  </table>

  <hr />

  The <dfn><code>behavior</code></dfn>, <dfn><code>direction</code></dfn>,
  <dfn><code>height</code></dfn>, <dfn><code>hspace</code></dfn>, <dfn><code>vspace</code></dfn>,
  and <dfn><code>width</code></dfn> IDL attributes must <a>reflect</a> the respective content
  attributes of the same name.

  The <dfn><code>bgColor</code></dfn> IDL attribute must <a>reflect</a> the <code>bgcolor</code>
  content attribute.

  The <dfn><code>scrollAmount</code></dfn> IDL attribute must <a>reflect</a> the
  <code>scrollamount</code> content attribute. The default value is 6.

  The <dfn><code>scrollDelay</code></dfn> IDL attribute must <a>reflect</a> the
  <code>scrolldelay</code> content attribute. The default value is 85.

  The <dfn><code>trueSpeed</code></dfn> IDL attribute must <a>reflect</a> the <code>truespeed</code>
  content attribute.

<h4 id="frames">Frames</h4>

  The <dfn><code>frameset</code></dfn> element acts as <a>the body element</a> in documents that use
  frames.

  The <code>frameset</code> element must implement the <code>HTMLFrameSetElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLFrameSetElement : HTMLElement {
      attribute DOMString cols;
      attribute DOMString rows;
    };
    HTMLFrameSetElement implements WindowEventHandlers;
  </pre>

  The <dfn><code>cols</code></dfn> and <dfn><code>rows</code></dfn> IDL attributes of the
  <code>frameset</code> element must <a>reflect</a> the respective content attributes of the same
  name.

  The <code>frameset</code> element exposes as <a>event handler content attributes</a> a number of
  the <a>event handlers</a> of the <code>Window</code> object. It also mirrors their <a>event
  handler IDL attributes</a>.

  The <code>onblur</code>, <code>onerror</code>, <code>onfocus</code>, <code>onload</code>,
  <code>onresize</code>, and <code>onscroll</code> <a>event handlers</a> of the <code>Window</code>
  object, exposed on the <code>frameset</code> element, replace the generic <a>event handlers</a>
  with the same names normally supported by <a>HTML elements</a>.

  <hr />

  The <dfn><code>frame</code></dfn> element defines a <a>nested browsing context</a> similar to the
  <code>iframe</code> element, but rendered within a <code>frameset</code> element.

  A <code>frame</code> element is said to be an <dfn>active <code>frame</code> element</dfn> when
  it is <a>in a <code>Document</code></a>.

  When a <code>frame</code> element is created as an <a>active <code>frame</code> element</a>, or
  becomes an <a>active <code>frame</code> element</a> after not having been one, the user agent must
  <a>create</a> a <a>nested browsing context</a>, and then <a>process the <code>frame</code>
  attributes</a> for the first time.

  When a <code>frame</code> element stops being an <a>active <code>frame</code> element</a>, the
  user agent must <a>discard</a> the <a>nested browsing context</a>.

  Whenever a <code>frame</code> element with a <a>nested browsing context</a> has its
  <code>src</code> attribute set, changed, or removed, the user agent must <a>process the
  <code>frame</code> attributes</a>.

  When the user agent is to <dfn>process the <code>frame</code> attributes</dfn>, it must run the
  first appropriate steps from the following list:

  <dl class="switch">
    <dt>
      If the element has no <code>src</code> attribute specified, and the user agent is processing
      the <code>frame</code>'s attributes for the first time
    </dt>
    <dd>
      <a>Queue a task</a> to <a>fire a simple event</a> named <code>load</code> at the
      <code>frame</code> element.
    </dd>

    <dt>Otherwise</dt>
    <dd>
      1. If the value of the <code>src</code> attribute is the empty string, let <var>url</var> be
          the string "<code>about:blank</code>".

          Otherwise, <a>resolve</a> the value of the <code>src</code> attribute, relative to the
          <code>frame</code> element.

          If that is not successful, then let <var>url</var> be the string
          "<code>about:blank</code>". Otherwise, let <var>url</var> be the resulting
          <a>absolute URL</a>.
      2. <a>Navigate</a> the element's <a>child browsing context</a>to <var>url</var>.

    </dd>
  </dl>

  Any <a>navigation</a> required of the user agent in the <a>process the <code>frame</code>
  attributes</a> algorithm must be completed as an <a>explicit self-navigation override</a> and with
  the <code>frame</code> element's <a>node document</a>'s <a>browsing context</a> as the <a>source
  browsing context</a>.

  Furthermore, if the <a>active document</a> of the element's <a>child browsing context</a> before
  such a <a>navigation</a> was not <a>completely loaded</a> at the time of the new
  <a>navigation</a>, then the <a>navigation</a> must be completed  with <a>replacement enabled</a>.

  Similarly, if the <a>child browsing context</a>'s <a>session history</a> contained only one
  <code>Document</code> when the <a>process the <code>frame</code> attributes</a> algorithm was
  invoked, and that was the <code>about:blank</code> <code>Document</code> created when the <a>child
  browsing context</a> was created, then any <a>navigation</a> required of the user agent in that
  algorithm must be completed with <a>replacement enabled</a>.

  When a <code>Document</code> in a <code>frame</code> is marked as <a>completely loaded</a>, the
  user agent must <a>queue a task</a> to <a>fire a simple event</a> named <code>load</code> at the
  <code>frame</code> element.

  The <a>task source</a> for the <a>tasks</a> above is the <a>DOM manipulation task source</a>.

  When a <code>frame</code> element's <a>nested browsing context</a>'s <a>active document</a> is not
  <a>ready for post-load tasks</a>, and when anything is <a>delaying the load event</a> of the
  <code>frame</code> element's <a>browsing context</a>'s <a>active document</a>, and when the
  <code>frame</code> element's <a>browsing context</a> is in the <a>delaying <code>load</code>
  events mode</a>, the <code>frame</code> must <a>delay the load event</a> of its document.

  When the browsing context is created, if a <code>name</code> attribute is present, the
  <a>browsing context name</a> must be set to the value of this attribute; otherwise, the
  <a>browsing context name</a> must be set to the empty string.

  Whenever the <code>name</code> attribute is set, the nested <a>browsing context</a>'s <a>name</a>
  must be changed to the new value. If the attribute is removed, the <a>browsing context name</a>
  must be set to the empty string.

  The <code>frame</code> element must implement the <code>HTMLFrameElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLFrameElement : HTMLElement {
      attribute DOMString name;
      attribute DOMString scrolling;
      attribute DOMString src;
      attribute DOMString frameBorder;
      attribute DOMString longDesc;
      attribute boolean noResize;
      readonly attribute Document? contentDocument;
      readonly attribute WindowProxy? contentWindow;

      [TreatNullAs=EmptyString] attribute DOMString marginHeight;
      [TreatNullAs=EmptyString] attribute DOMString marginWidth;
    };
  </pre>

  The <dfn><code>name</code></dfn>, <dfn><code>scrolling</code></dfn>, and
  <dfn><code>src</code></dfn> IDL attributes of the <code>frame</code> element must <a>reflect</a>
  the respective content attributes of the same name. For the purposes of reflection, the
  <code>frame</code> element's <code>src</code> content attribute is defined as containing a
  <a>URL</a>.

  The <dfn><code>frameBorder</code></dfn> IDL attribute of the <code>frame</code> element must
  <a>reflect</a> the element's <code>frameborder</code> content attribute.

  The <dfn><code>longDesc</code></dfn> IDL attribute of the <code>frame</code> element must
  <a>reflect</a> the element's <code>longdesc</code> content attribute, which for the purposes of
  reflection is defined as containing a <a>URL</a>.

  The <dfn><code>noResize</code></dfn> IDL attribute of the <code>frame</code> element must
  <a>reflect</a> the element's <code>noresize</code> content attribute.

  The <dfn><code>contentDocument</code></dfn> IDL attribute of the <code>frame</code> element must
  return the <code>Document</code> object of the <a>active document</a> of the <code>frame</code>
  element's <a>nested browsing context</a>, if any and if its <a>effective script origin</a> is the
  <a>same origin</a> as the <a>effective script origin</a> specified by the <a>incumbent settings
  object</a>, or null otherwise.

  The <dfn><code>contentWindow</code></dfn> IDL attribute must return the <code>WindowProxy</code>
  object of the <code>frame</code> element's <a>nested browsing context</a>.

  The <dfn><code>marginHeight</code></dfn> IDL attribute of the <code>frame</code> element must
  <a>reflect</a> the element's <code>marginheight</code> content attribute.

  The <dfn><code>marginWidth</code></dfn> IDL attribute of the <code>frame</code> element must
  <a>reflect</a> the element's <code>marginwidth</code> content attribute.

<h4 id="other-elements,-attributes-and-apis">Other elements, attributes and APIs</h4>

  User agents must treat <code>acronym</code> elements in a manner equivalent to <code>abbr</code>
  elements in terms of semantics and for purposes of rendering.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLAnchorElement {
      attribute DOMString coords;
      attribute DOMString charset;
      attribute DOMString name;
      attribute DOMString rev;
      attribute DOMString shape;
    };
  </pre>

  The <dfn><code>coords</code></dfn>, <dfn><code>charset</code></dfn>, <dfn><code>name</code></dfn>,
  <dfn><code>rev</code></dfn>, and <dfn><code>shape</code></dfn> IDL attributes of the
  <code>a</code> element must <a>reflect</a> the respective content attributes of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLAreaElement {
      attribute boolean noHref;
    };
  </pre>

  The <dfn><code>noHref</code></dfn> IDL attribute of the <code>area</code> element must
  <a>reflect</a> the element's <code>nohref</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLBodyElement {
      [TreatNullAs=EmptyString] attribute DOMString text;
      [TreatNullAs=EmptyString] attribute DOMString link;
      [TreatNullAs=EmptyString] attribute DOMString vLink;
      [TreatNullAs=EmptyString] attribute DOMString aLink;
      [TreatNullAs=EmptyString] attribute DOMString bgColor;
      attribute DOMString background;
    };
  </pre>

  The <dfn><code>text</code></dfn> IDL attribute of the <code>body</code> element must
  <a>reflect</a> the element's <code>text</code> content attribute.

  The <dfn><code>link</code></dfn> IDL attribute of the <code>body</code> element must
  <a>reflect</a> the element's <code>link</code> content attribute.

  The <dfn><code>aLink</code></dfn> IDL attribute of the <code>body</code> element must
  <a>reflect</a> the element's <code>alink</code> content attribute.

  The <dfn><code>vLink</code></dfn> IDL attribute of the <code>body</code> element must
  <a>reflect</a> the element's <code>vlink</code> content attribute.

  The <dfn><code>bgColor</code></dfn> IDL attribute of the <code>body</code> element must
  <a>reflect</a> the element's <code>bgcolor</code> content attribute.

  The <dfn><code>background</code></dfn> IDL attribute of the <code>body</code> element must
  <a>reflect</a> the element's <code>background</code> content attribute. (The
  <code>background</code> content is <em>not</em> defined to contain a <a>URL</a>, despite rules
  regarding its handling in the rendering section above.)

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLBRElement {
      attribute DOMString clear;
    };
  </pre>

  The <dfn><code>clear</code></dfn> IDL attribute of the <code>br</code> element must <a>reflect</a>
  the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableCaptionElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>caption</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableColElement {
      attribute DOMString align;
      attribute DOMString ch;
      attribute DOMString chOff;
      attribute DOMString vAlign;
      attribute DOMString width;
    };
  </pre>

  The <dfn><code>align</code></dfn> and <dfn><code>width</code></dfn> IDL attributes of the
  <code>col</code> element must <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>ch</code></dfn> IDL attribute of the <code>col</code> element must <a>reflect</a>
  the element's <code>char</code> content attribute.

  The <dfn><code>chOff</code></dfn> IDL attribute of the <code>col</code> element must
  <a>reflect</a> the element's <code>charoff</code> content attribute.

  The <dfn><code>vAlign</code></dfn> IDL attribute of the <code>col</code> element must
  <a>reflect</a> the element's <code>valign</code> content attribute.

  <hr />

  User agents must treat <code>dir</code> elements in a manner equivalent to <code>ul</code>
  elements in terms of semantics and for purposes of rendering.

  The <code>dir</code> element must implement the <code>HTMLDirectoryElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLDirectoryElement : HTMLElement {
      attribute boolean compact;
    };
  </pre>

  The <dfn><code>compact</code></dfn> IDL attribute of the <code>dir</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLDivElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>div</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLDListElement {
      attribute boolean compact;
    };
  </pre>

  The <dfn><code>compact</code></dfn> IDL attribute of the <code>dl</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLEmbedElement {
      attribute DOMString align;
      attribute DOMString name;
    };
  </pre>

  The <dfn><code>name</code></dfn> and <dfn><code>align</code></dfn> IDL attributes of the
  <code>embed</code> element must <a>reflect</a> the respective content attributes of the same name.

  <hr />

  The <code>font</code> element must implement the <code>HTMLFontElement</code> interface.

  <pre class="idl" data-highlight="webidl">
    interface HTMLFontElement : HTMLElement {
      [TreatNullAs=EmptyString] attribute DOMString color;
      attribute DOMString face;
      attribute DOMString size;
    };
  </pre>

  The <dfn><code>color</code></dfn>, <dfn><code>face</code></dfn>, and <dfn><code>size</code></dfn>
  IDL attributes of the <code>font</code> element must <a>reflect</a> the respective content
  attributes of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLHeadingElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>h1</code>&ndash;<code>h6</code>
  elements must <a>reflect</a> the content attribute of the same name.

  <hr />

  <p class="note">
    The <dfn><code>profile</code></dfn> IDL attribute on <code>head</code> elements (with the
    <code>HTMLHeadElement</code> interface) is intentionally omitted. Unless so required by
    <a>another applicable specification</a>, implementations would therefore not support this
    attribute. (It is mentioned here as it was defined in a previous version of the DOM
    specifications.)
  </p>

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLHRElement {
      attribute DOMString align;
      attribute DOMString color;
      attribute boolean noShade;
      attribute DOMString size;
      attribute DOMString width;
    };
  </pre>

  The <dfn><code>align</code></dfn>, <dfn><code>color</code></dfn>, <dfn><code>size</code></dfn>,
  and <dfn><code>width</code></dfn> IDL attributes of the <code>hr</code> element must
  <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>noShade</code></dfn> IDL attribute of the <code>hr</code> element must
  <a>reflect</a> the element's <code>noshade</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLHtmlElement {
      attribute DOMString version;
    };
  </pre>

  The <dfn><code>version</code></dfn> IDL attribute of the <code>html</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLIFrameElement {
      attribute DOMString align;
      attribute DOMString scrolling;
      attribute DOMString frameBorder;
      attribute DOMString longDesc;

      [TreatNullAs=EmptyString] attribute DOMString marginHeight;
      [TreatNullAs=EmptyString] attribute DOMString marginWidth;
    };
  </pre>

  The <dfn><code>align</code></dfn> and <dfn><code>scrolling</code></dfn> IDL attributes of the
  <code>iframe</code> element must <a>reflect</a> the respective content attributes of the same
  name.

  The <dfn><code>frameBorder</code></dfn> IDL attribute of the <code>iframe</code> element must
  <a>reflect</a> the element's <code>frameborder</code> content attribute.

  The <dfn><code>longDesc</code></dfn> IDL attribute of the <code>iframe</code> element must
  <a>reflect</a> the element's <code>longdesc</code> content attribute, which for the purposes of
  reflection is defined as containing a <a>URL</a>.

  The <dfn><code>marginHeight</code></dfn> IDL attribute of the <code>iframe</code> element must
  <a>reflect</a> the element's <code>marginheight</code> content attribute.

  The <dfn><code>marginWidth</code></dfn> IDL attribute of the <code>iframe</code> element must
  <a>reflect</a> the element's <code>marginwidth</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLImageElement {
      attribute DOMString name;
      attribute DOMString lowsrc;
      attribute DOMString align;
      attribute unsigned long hspace;
      attribute unsigned long vspace;
      attribute DOMString longDesc;

      [TreatNullAs=EmptyString] attribute DOMString border;
    };
  </pre>

  The <dfn><code>name</code></dfn>, <dfn><code>align</code></dfn>, <dfn><code>border</code></dfn>,
  <dfn><code>hspace</code></dfn>, and <dfn><code>vspace</code></dfn> IDL attributes of the
  <code>img</code> element must <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>longDesc</code></dfn> IDL attribute of the <code>img</code> element must
  <a>reflect</a> the element's <code>longdesc</code> content attribute, which for the purposes of
  reflection is defined as containing a <a>URL</a>.

  The <dfn><code>lowsrc</code></dfn> IDL attribute of the <code>img</code> element must
  <a>reflect</a> the element's <code>lowsrc</code> content attribute, which for the purposes of
  reflection is defined as containing a <a>URL</a>.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLInputElement {
      attribute DOMString align;
      attribute DOMString useMap;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>input</code> element must
  <a>reflect</a> the content attribute of the same name.

  The <dfn><code>useMap</code></dfn> IDL attribute of the <code>input</code> element must
  <a>reflect</a> the element's <code>usemap</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLLegendElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>legend</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLLIElement {
      attribute DOMString type;
    };
  </pre>

  The <dfn><code>type</code></dfn> IDL attribute of the <code>li</code> element must <a>reflect</a>
  the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLLinkElement {
      attribute DOMString charset;
      attribute DOMString rev;
      attribute DOMString target;
    };
  </pre>

  The <dfn><code>charset</code></dfn>, <dfn><code>rev</code></dfn>, and
  <dfn><code>target</code></dfn> IDL attributes of the <code>link</code> element must <a>reflect</a>
  the respective content attributes of the same name.

  <hr />

  User agents must treat <code>listing</code> elements in a manner equivalent to <code>pre</code>
  elements in terms of semantics and for purposes of rendering.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLMenuElement {
      attribute boolean compact;
    };
  </pre>

  The <dfn><code>compact</code></dfn> IDL attribute of the <code>menu</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLMetaElement {
      attribute DOMString scheme;
    };
  </pre>

  User agents may treat the <code>scheme</code> content attribute on the <code>meta</code> element
  as an extension of the element's <code>name</code> content attribute when processing a
  <code>meta</code> element with a <code>name</code> attribute whose value is one that the user
  agent recognizes as supporting the <code>scheme</code> attribute.

  User agents are encouraged to ignore the <code>scheme</code> attribute and instead process the
  value given to the metadata name as if it had been specified for each expected value of the
  <code>scheme</code> attribute.

  <div class="example">
    For example, if the user agent acts on <code>meta</code> elements with <code>name</code>
    attributes having the value "eGMS.subject.keyword", and knows that the <code>scheme</code>
    attribute is used with this metadata name, then it could take the <code>scheme</code> attribute
    into account, acting as if it was an extension of the <code>name</code> attribute. Thus the
    following two <code>meta</code> elements could be treated as two elements giving values for two
    different metadata names, one consisting of a combination of "eGMS.subject.keyword" and "LGCL",
    and the other consisting of a combination of "eGMS.subject.keyword" and "ORLY":

    <pre class="bad" highlight="html">
      &lt;!-- this markup is invalid -->
      &lt;meta name="eGMS.subject.keyword" scheme="LGCL" content="Abandoned vehicles">
      &lt;meta name="eGMS.subject.keyword" scheme="ORLY" content="Mah car: kthxbye">
    </pre>

    The suggested processing of this markup, however, would be equivalent to the following:

    <pre highlight="html">
      &lt;meta name="eGMS.subject.keyword" content="Abandoned vehicles">
      &lt;meta name="eGMS.subject.keyword" content="Mah car: kthxbye">
    </pre>
  </div>

  The <dfn><code>scheme</code></dfn> IDL attribute of the <code>meta</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLObjectElement {
      attribute DOMString align;
      attribute DOMString archive;
      attribute DOMString code;
      attribute boolean declare;
      attribute unsigned long hspace;
      attribute DOMString standby;
      attribute unsigned long vspace;
      attribute DOMString codeBase;
      attribute DOMString codeType;

      [TreatNullAs=EmptyString] attribute DOMString border;
    };
  </pre>

  The <dfn><code>align</code></dfn>, <dfn><code>archive</code></dfn>,
  <dfn><code>border</code></dfn>, <dfn><code>code</code></dfn>, <dfn><code>declare</code></dfn>,
  <dfn><code>hspace</code></dfn>, <dfn><code>standby</code></dfn>, and
  <dfn><code>vspace</code></dfn> IDL attributes of the <code>object</code> element must
  <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>codeBase</code></dfn> IDL attribute of the <code>object</code> element must
  <a>reflect</a> the element's <code>codebase</code> content attribute, which for the purposes of
  reflection is defined as containing a <a>URL</a>.

  The <dfn><code>codeType</code></dfn> IDL attribute of the <code>object</code> element must
  <a>reflect</a> the element's <code>codetype</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLOListElement {
      attribute boolean compact;
    };
  </pre>

  The <dfn><code>compact</code></dfn> IDL attribute of the <code>ol</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLParagraphElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>p</code> element must <a>reflect</a>
  the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLParamElement {
      attribute DOMString type;
      attribute DOMString valueType;
    };
  </pre>

  The <dfn><code>type</code></dfn> IDL attribute of the <code>param</code> element must
  <a>reflect</a> the content attribute of the same name.

  The <dfn><code>valueType</code></dfn> IDL attribute of the <code>param</code> element must
  <a>reflect</a> the element's <code>valuetype</code> content attribute.

  <hr />

  User agents must treat <code>plaintext</code> elements in a manner equivalent to <code>pre</code>
  elements in terms of semantics and for purposes of rendering. (The parser has special behavior for
  this element, though.)

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLPreElement {
      attribute long width;
    };
  </pre>

  The <dfn><code>width</code></dfn> IDL attribute of the <code>pre</code> element must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLScriptElement {
      attribute DOMString event;
      attribute DOMString htmlFor;
    };
  </pre>

  The <dfn><code>event</code></dfn> IDL attribute of the <code>script</code> element must reflect
  the element's <code>event</code> content attribute.

  The <dfn><code>htmlFor</code></dfn> IDL attribute of the <code>script</code> element must reflect
  the element's <code>for</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableElement {
      attribute DOMString align;
      attribute DOMString border;
      attribute DOMString frame;
      attribute DOMString rules;
      attribute DOMString summary;
      attribute DOMString width;

      [TreatNullAs=EmptyString] attribute DOMString bgColor;
      [TreatNullAs=EmptyString] attribute DOMString cellPadding;
      [TreatNullAs=EmptyString] attribute DOMString cellSpacing;
    };
  </pre>

  The <dfn><code>align</code></dfn>, <dfn><code>border</code></dfn>, <dfn><code>frame</code></dfn>,
  <dfn><code>summary</code></dfn>, <dfn><code>rules</code></dfn>, and <dfn><code>width</code></dfn>,
  IDL attributes of the <code>table</code> element must <a>reflect</a> the respective content
  attributes of the same name.

  The <dfn><code>bgColor</code></dfn> IDL attribute of the <code>table</code> element must
  <a>reflect</a> the element's <code>bgcolor</code> content attribute.

  The <dfn><code>cellPadding</code></dfn> IDL attribute of the <code>table</code> element must
  <a>reflect</a> the element's <code>cellpadding</code> content attribute.

  The <dfn><code>cellSpacing</code></dfn> IDL attribute of the <code>table</code> element must
  <a>reflect</a> the element's <code>cellspacing</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableSectionElement {
      attribute DOMString align;
      attribute DOMString ch;
      attribute DOMString chOff;
      attribute DOMString vAlign;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>tbody</code>, <code>thead</code>, and
  <code>tfoot</code> elements must <a>reflect</a> the content attribute of the same name.

  The <dfn><code>ch</code></dfn> IDL attribute of the <code>tbody</code>, <code>thead</code>, and
  <code>tfoot</code> elements must <a>reflect</a> the elements' <code>char</code> content
  attributes.

  The <dfn><code>chOff</code></dfn> IDL attribute of the <code>tbody</code>, <code>thead</code>, and
  <code>tfoot</code> elements must <a>reflect</a> the elements' <code>charoff</code> content
  attributes.

  The <dfn><code>vAlign</code></dfn> IDL attribute of the <code>tbody</code>, <code>thead</code>,
  and <code>tfoot</code> element must <a>reflect</a> the elements' <code>valign</code> content
  attributes.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableCellElement {
      attribute DOMString align;
      attribute DOMString axis;
      attribute DOMString height;
      attribute DOMString width;

      attribute DOMString ch;
      attribute DOMString chOff;
      attribute boolean noWrap;
      attribute DOMString vAlign;

      [TreatNullAs=EmptyString] attribute DOMString bgColor;
    };
  </pre>

  The <dfn><code>align</code></dfn>, <dfn><code>axis</code></dfn>, <dfn><code>height</code></dfn>,
  and <dfn><code>width</code></dfn> IDL attributes of the <code>td</code> and <code>th</code>
  elements must <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>ch</code></dfn> IDL attribute of the <code>td</code> and <code>th</code> elements
  must <a>reflect</a> the elements' <code>char</code> content attributes.

  The <dfn><code>chOff</code></dfn> IDL attribute of the <code>td</code> and <code>th</code>
  elements must <a>reflect</a> the elements' <code>charoff</code> content attributes.

  The <dfn><code>noWrap</code></dfn> IDL attribute of the <code>td</code> and <code>th</code>
  elements must <a>reflect</a> the elements' <code>nowrap</code> content attributes.

  The <dfn><code>vAlign</code></dfn> IDL attribute of the <code>td</code> and <code>th</code>
  element must <a>reflect</a> the elements' <code>valign</code> content attributes.

  The <dfn><code>bgColor</code></dfn> IDL attribute of the <code>td</code> and <code>th</code>
  elements must <a>reflect</a> the elements' <code>bgcolor</code> content attributes.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableDataCellElement {
      attribute DOMString abbr;
    };
  </pre>

  The <dfn><code>abbr</code></dfn> IDL attribute of the <code>td</code> element must <a>reflect</a>
  the respective content attributes of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLTableRowElement {
      attribute DOMString align;
      attribute DOMString ch;
      attribute DOMString chOff;
      attribute DOMString vAlign;

      [TreatNullAs=EmptyString] attribute DOMString bgColor;
    };
  </pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>tr</code> element must <a>reflect</a>
  the content attribute of the same name.

  The <dfn><code>ch</code></dfn> IDL attribute of the <code>tr</code> element must <a>reflect</a>
  the element's <code>char</code> content attribute.

  The <dfn><code>chOff</code></dfn> IDL attribute of the <code>tr</code> element must <a>reflect</a>
  the element's <code>charoff</code> content attribute.

  The <dfn><code>vAlign</code></dfn> IDL attribute of the <code>tr</code> element must
  <a>reflect</a> the element's <code>valign</code> content attribute.

  The <dfn><code>bgColor</code></dfn> IDL attribute of the <code>tr</code> element must
  <a>reflect</a> the element's <code>bgcolor</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface HTMLUListElement {
      attribute boolean compact;
      attribute DOMString type;
    };
  </pre>

  The <dfn><code>compact</code></dfn> and <dfn><code>type</code></dfn> IDL attributes of the
  <code>ul</code> element must <a>reflect</a> the respective content attributes of the same name.

  <hr />

  User agents must treat <code>xmp</code> elements in a manner equivalent to <code>pre</code>
  elements in terms of semantics and for purposes of rendering. (The parser has special behavior for
  this element though.)

  <hr />

  The <code>blink</code>, <code>bgsound</code>, <code>isindex</code>, <code>multicol</code>,
  <code>nextid</code>, and <code>spacer</code> elements must use the <code>HTMLUnknownElement</code>
  interface.

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface Document {
      [TreatNullAs=EmptyString] attribute DOMString fgColor;
      [TreatNullAs=EmptyString] attribute DOMString linkColor;
      [TreatNullAs=EmptyString] attribute DOMString vlinkColor;
      [TreatNullAs=EmptyString] attribute DOMString alinkColor;
      [TreatNullAs=EmptyString] attribute DOMString bgColor;

      [SameObject] readonly attribute HTMLCollection anchors;
      [SameObject] readonly attribute HTMLCollection applets;

      void clear();
      void captureEvents();
      void releaseEvents();

      [SameObject] readonly attribute HTMLAllCollection all;
    };
  </pre>

  The attributes of the <code>Document</code> object listed in the first column of the following
  table must <a>reflect</a> the content attribute on <a>the body element</a> with the
  name given in the corresponding cell in the second column on the same row, if <a>the body
  element</a> is a <code>body</code> element (as opposed to a <code>frameset</code> element).
  When there is no <a>body element</a> or if it is a
  <code>frameset</code> element, the attributes must instead return the empty string on getting and
  do nothing on setting.

  <table>
    <thead>
      <tr>
        <th> IDL attribute</th>
        <th> Content attribute</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><dfn><code>fgColor</code></dfn></td>
        <td><code>text</code></td>
      </tr>
      <tr>
        <td><dfn><code>linkColor</code></dfn></td>
        <td><code>link</code></td>
      </tr>
      <tr>
        <td><dfn><code>vlinkColor</code></dfn></td>
        <td><code>vlink</code></td>
      </tr>
      <tr>
        <td><dfn><code>alinkColor</code></dfn></td>
        <td><code>alink</code></td>
      </tr>
      <tr>
        <td><dfn><code>bgColor</code></dfn></td>
        <td><code>bgcolor</code></td>
      </tr>
    </tbody>
  </table>

  <hr />

  The <dfn><code>anchors</code></dfn> attribute must return an <code>HTMLCollection</code> rooted at
  the <code>Document</code> node, whose filter matches only <code>a</code> elements with
  <code>name</code> attributes.

  The <dfn><code>applets</code></dfn> attribute must return an <code>HTMLCollection</code> rooted at
  the <code>Document</code> node, whose filter matches only <code>applet</code> elements.

  The <dfn><code>clear()</code></dfn>, <dfn><code>captureEvents()</code></dfn>, and
  <dfn><code>releaseEvents()</code></dfn> methods must do nothing.

  <hr />

  The <dfn><code>all</code></dfn> attribute must return an <code>HTMLAllCollection</code> rooted at
  the <code>Document</code> node, whose filter matches all elements.

  The object returned for <code>all</code> has several unusual behaviors:

  * The user agent must act as if the ToBoolean() operator in JavaScript converts the object
    returned for <code>all</code> to the false value.
  * The user agent must act as if, for the purposes of the <code>==</code> and <code>!=</code>
    operators in JavaScript, the object returned for <code>all</code> compares as equal to the
    <code>undefined</code> and <code>null</code> values. (Comparisons using the <code>===</code>
    operator, and comparisons to other values such as strings or objects, are unaffected.)
  * The user agent must act such that the <code>typeof</code> operator in JavaScript returns the
    string <code>undefined</code> when applied to the object returned for <code>all</code>.

  <p class="note">
    These requirements are a <a>willful violation</a> of the JavaScript specification current at the
    time of writing (ECMAScript edition 5). The JavaScript specification requires that the
    ToBoolean() operator convert all objects to the true value, and does not have provisions for
    objects acting as if they were <code>undefined</code> for the purposes of certain operators.
    This violation is motivated by a desire for compatibility with two classes of legacy content:
    one that uses the presence of <code>document.all</code> as a way to detect legacy user agents,
    and one that only supports those legacy user agents and uses the <code>document.all</code>
    object without testing for its presence first. [[!ECMA-262]]
  </p>

  <hr />

  <pre class="idl" data-highlight="webidl">
    partial interface Window {
      void captureEvents();
      void releaseEvents();
    };
  </pre>

  The <dfn><code>captureEvents()</code></dfn> and <dfn><code>releaseEvents()</code></dfn> methods
  must do nothing.

  <hr />

  The <code>hgroup</code> element does not have <a>strong native semantics</a> or <a>default
  implicit ARIA semantics</a>. User agents must not implement accessibility layer semantics for
  the <code>hgroup</code> element that obfuscates or modifies the semantics of its children.

<hr />
<hr />
<hr />

<h2 id="iana">IANA considerations</h2>

<h3 id="text-html"><dfn><code>text/html</code></dfn></h3>

  This registration is for community review and will be submitted to the IESG for review, approval,
  and registration with IANA.

  : Type name:
  :: text

  : Subtype name:
  :: html

  : Required parameters:
  :: No required parameters

  : Optional parameters:
  ::
      : <code>charset</code>
      :: The <code>charset</code> parameter may be provided to specify the <a>document's character
          encoding</a>, overriding any <a>character encoding declarations</a> in the document other
          than a Byte Order Mark (BOM). The parameter's value must be one of the <a>labels</a> of
          the <a>character encoding</a> used to serialize the file. [[!ENCODING]]

  : Encoding considerations:
  :: 8bit (see the section on <a>character encoding declarations</a>)

  : Security considerations:
  :: Entire novels have been written about the security considerations that apply to HTML documents.
      Many are listed in this document, to which the reader is referred for more details. Some
      general concerns bear mentioning here, however:

      HTML is scripted language, and has a large number of APIs (some of which are described in
      this document). Script can expose the user to potential risks of information leakage,
      credential leakage, cross-site scripting attacks, cross-site request forgeries, and a host of
      other problems. While the designs in this specification are intended to be safe if implemented
      correctly, a full implementation is a massive undertaking and, as with any software, user
      agents are likely to have security bugs.

      Even without scripting, there are specific features in HTML which, for historical reasons,
      are required for broad compatibility with legacy content but that expose the user to
      unfortunate security problems. In particular, the <code>img</code> element can be used in
      conjunction with some other features as a way to effect a port scan from the user's location
      on the Internet. This can expose local network topologies that the attacker would otherwise
      not be able to determine.

      HTML relies on a compartmentalization scheme sometimes known as the <i>same-origin policy</i>.
      An <a>origin</a> in most cases consists of all the pages served from the same host, on the
      same port, using the same protocol.

      It is critical, therefore, to ensure that any untrusted content that forms part of a site be
      hosted on a different <a>origin</a> than any sensitive content on that site. Untrusted
      content can easily spoof any other page on the same origin, read data from that origin, cause
      scripts in that origin to execute, submit forms to and from that origin even if they are
      protected from cross-site request forgery attacks by unique tokens, and make use of any
      third-party resources exposed to or rights granted to that origin.

  : Interoperability considerations:
  :: Rules for processing both conforming and non-conforming content are defined in this
      specification.

  : Published specification:
  :: This document is the relevant specification. Labeling a resource with the
      <code>text/html</code> type asserts that the resource is an <a>HTML document</a> using
      <a>the HTML syntax</a>.

  : Applications that use this media type:
  :: Web browsers, tools for processing Web content, HTML authoring tools, search engines,
      validators.

  : Additional information:
  ::
      : Magic number(s):
      :: No sequence of bytes can uniquely identify an HTML document. More information on detecting
          HTML documents is available in the MIME Sniffing specification. [[!MIMESNIFF]]

      : File extension(s):
      :: "<code>html</code>" and "<code>htm</code>" are commonly, but certainly not exclusively,
          used as the extension for HTML documents.

      : Macintosh file type code(s):
      :: <code>TEXT</code>

  : Person &amp; email address to contact for further information:
  :: Ian Hickson &lt;ian@hixie.ch>

  : Intended usage:
  :: Common

  : Restrictions on usage:
  :: No restrictions apply.

  : Author:
  :: Ian Hickson &lt;ian@hixie.ch>

  : Change controller:
  :: W3C

  Fragment identifiers used with <code>text/html</code> resources either refer to
  <a>the indicated part of the document</a> or provide state information for in-page scripts.

<h3 id="multipart-x-mixed-replace"><dfn><code>multipart/x-mixed-replace</code></dfn></h3>

  This registration is for community review and will be submitted to the IESG for review, approval,
  and registration with IANA.

  : Type name:
  :: multipart

  : Subtype name:
  :: x-mixed-replace

  : Required parameters:
  :: * <code>boundary</code> (defined in RFC2046) [[!RFC2046]]

  : Optional parameters:
  :: No optional parameters.

  : Encoding considerations:
  :: binary

  : Security considerations:
  :: Subresources of a <code>multipart/x-mixed-replace</code> resource can be of any type, including
      types with non-trivial security implications such as <code>text/html</code>.

  : Interoperability considerations:
  :: None.

  : Published specification:
  :: This specification describes processing rules for Web browsers. Conformance requirements for
      generating resources with this type are the same as for <code>multipart/mixed</code>.
      [[!RFC2046]]

  : Applications that use this media type:
  :: This type is intended to be used in resources generated by Web servers, for consumption by Web
      browsers.

  : Additional information:
  ::
      : Magic number(s):
      :: No sequence of bytes can uniquely identify a <code>multipart/x-mixed-replace</code>
          resource.

      : File extension(s):
      :: No specific file extensions are recommended for this type.

      : Macintosh file type code(s):
      :: No specific Macintosh file type codes are recommended for this type.

  : Person &amp; email address to contact for further information:
  :: Ian Hickson &lt;ian@hixie.ch>

  : Intended usage:
  :: Common

  : Restrictions on usage:
  :: No restrictions apply.

  : Author:
  :: Ian Hickson &lt;ian@hixie.ch>

  : Change controller:
  :: W3C

  Fragment identifiers used with <code>multipart/x-mixed-replace</code> resources apply to each
  body part as defined by the type used by that body part.

<h3 id="application-xhtmlxml"><dfn><code>application/xhtml+xml</code></dfn></h3>

  This registration is for community review and will be submitted to the IESG for review, approval,
  and registration with IANA.

  : Type name:
  :: application

  : Subtype name:
  :: xhtml+xml

  : Required parameters:
  :: Same as for <code>application/xml</code> [[!RFC7303]]

  : Optional parameters:
  :: Same as for <code>application/xml</code> [[!RFC7303]]

  : Encoding considerations:
  :: Same as for <code>application/xml</code> [[!RFC7303]]

  : Security considerations:
  :: Same as for <code>application/xml</code> [[!RFC7303]]

  : Interoperability considerations:
  :: Same as for <code>application/xml</code> [[!RFC7303]]

  : Published specification:
  :: Labeling a resource with the <code>application/xhtml+xml</code> type asserts that the resource
      is an XML document that likely has a root element from the <a>HTML namespace</a>. Thus, the
      relevant specifications are the XML specification, the Namespaces in XML specification, and
      this specification. [[!XML]] [[!XPTR-XMLNS]]

  : Applications that use this media type:
  :: Same as for <code>application/xml</code> [[!RFC7303]]

  : Additional information:
  ::
      : Magic number(s):
      :: Same as for <code>application/xml</code> [[!RFC7303]]

      : File extension(s):
      :: "<code>xhtml</code>" and "<code>xht</code>"
          are sometimes used as extensions for XML resources that have a root element from the
          <a>HTML namespace</a>.

      : Macintosh file type code(s):
      :: <code>TEXT</code>

  : Person &amp; email address to contact for further information:
  :: Ian Hickson &lt;ian@hixie.ch>

  : Intended usage:
  :: Common

  : Restrictions on usage:
  :: No restrictions apply.

  : Author:
  :: Ian Hickson &lt;ian@hixie.ch>

  : Change controller:
  :: W3C

  Fragment identifiers used with <code>application/xhtml+xml</code> resources have the same
  semantics as with any <a>XML MIME type</a>. [[!RFC7303]]

<h3 id="application-x-www-form-urlencoded"><dfn><code>application/x-www-form-urlencoded</code></dfn></h3>

  This registration is for community review and will be submitted to the IESG for review, approval,
  and registration with IANA.

  : Type name:
  :: application

  : Subtype name:
  :: x-www-form-urlencoded

  : Required parameters:
  :: No parameters

  : Optional parameters:
  :: No parameters

  : Encoding considerations:
  :: 7bit (US-ASCII encoding of octets that themselves can be encoding text using any
      <a>ASCII-compatible encoding</a>)

  : Security considerations:
  :: In isolation, an <code>application/x-www-form-urlencoded</code> payload poses no security
      risks. However, as this type is usually used as part of a form submission, all the risks that
      apply to HTML forms need to be considered in the context of this type.

  : Interoperability considerations:
  :: Rules for generating and processing <code>application/x-www-form-urlencoded</code> payloads are
      defined in this specification.

  : Published specification:
  :: This document is the relevant specification. Algorithms for <a>encoding</a> and <a>decoding</a>
      are defined.

  : Applications that use this media type:
  :: Web browsers and servers.

  : Additional information:
  ::
      : Magic number(s):
      :: There is no reliable mechanism for recognizing
          <code>application/x-www-form-urlencoded</code> payloads.

      : File extension(s):
      :: Not applicable.

      : Macintosh file type code(s):
      :: Not applicable.

  : Person &amp; email address to contact for further information:
  :: Ian Hickson &lt;ian@hixie.ch>

  : Intended usage:
  :: Common

  : Restrictions on usage:
  :: This type is only intended to be used to describe HTML form submission payloads.

  : Author:
  :: Ian Hickson &lt;ian@hixie.ch>

  : Change controller:
  :: W3C

  Fragment identifiers have no meaning with the <code>application/x-www-form-urlencoded</code>
  type.

<h3 id="text-cache-manifest"><dfn><code>text/cache-manifest</code></dfn></h3>

  This registration is for community review and will be submitted to the IESG for review, approval,
  and registration with IANA.

  : Type name:
  :: text

  : Subtype name:
  :: cache-manifest

  : Required parameters:
  :: No parameters

  : Optional parameters:
  ::
      : <code>charset</code>
      :: The <code>charset</code> parameter may be provided. The parameter's value must be
          "<code>utf-8</code>". This parameter serves no purpose; it is only allowed for
          compatibility with legacy servers.

  : Encoding considerations:
  :: 8bit (always UTF-8)

  : Security considerations:
  :: Cache manifests themselves pose no immediate risk unless sensitive information is included
      within the manifest. Implementations, however, are required to follow specific rules when
      populating a cache based on a cache manifest, to ensure that certain origin-based restrictions
      are honored. Failure to correctly implement these rules can result in information leakage,
      cross-site scripting attacks, and the like.

  : Interoperability considerations:
  :: Rules for processing both conforming and non-conforming content are defined in this
      specification.

  : Published specification:
  :: This document is the relevant specification.

  : Applications that use this media type:
  :: Web browsers.

  : Additional information:
  ::
      : Magic number(s):
      :: Cache manifests begin with the string "<code>CACHE MANIFEST</code>", followed by either a
          U+0020 SPACE character, a U+0009 CHARACTER TABULATION (tab) character, a U+000A LINE FEED
          (LF) character, or a U+000D CARRIAGE RETURN (CR) character.

      : File extension(s):
      :: "<code>appcache</code>"

      : Macintosh file type code(s):
      :: No specific Macintosh file type codes are recommended for this type.

  : Person &amp; email address to contact for further information:
  :: Ian Hickson &lt;ian@hixie.ch>

  : Intended usage:
  :: Common

  : Restrictions on usage:
  :: No restrictions apply.

  : Author:
  :: Ian Hickson &lt;ian@hixie.ch>

  : Change controller:
  :: W3C

  Fragment identifiers have no meaning with <code>text/cache-manifest</code> resources.

<h3 id="web-scheme-prefix"><dfn><code>web+</code> scheme prefix</dfn></h3>

  This section describes a convention for use with the IANA URI scheme registry. It does not
  itself register a specific scheme. [[!RFC4395]]

  : URI scheme name:
  :: Schemes starting with the four characters "<code>web+</code>" followed by one or more letters
      in the range <code>a</code>-<code>z</code>.

  : Status:
  :: permanent

  : URI scheme syntax:
  :: Scheme-specific.

  : URI scheme semantics:
  :: Scheme-specific.

  : Encoding considerations:
  :: All "<code>web+</code>" schemes should use UTF-8 encodings where relevant.

  : Applications/protocols that use this URI scheme name:
  :: Scheme-specific.

  : Interoperability considerations:
  :: The scheme is expected to be used in the context of Web applications.

  : Security considerations:
  :: Any Web page is able to register a handler for all "<code>web+</code>" schemes. As
      such, these schemes must not be used for features intended to be core platform features (e.g.
      network transfer protocols like HTTP or FTP). Similarly, such schemes must not store
      confidential information in their URLs, such as usernames, passwords, personal information, or
      confidential project names.

  : Contact:
  :: Ian Hickson &lt;ian@hixie.ch>

  : Author/Change controller:
  :: Ian Hickson &lt;ian@hixie.ch>

  : References:
  :: <cite>Custom scheme and content handlers</cite>, HTML Living Standard:
      <a>https://html.spec.whatwg.org/#custom-handlers</a>