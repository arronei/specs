<h1>HTML</h1>

<pre class="metadata">
Shortname: html
Level: 1
Group: html
Status: WD
TR: http://www.w3.org/TR/html/
ED: https://github.com/w3c/html/
Previous Version: http://www.w3.org/TR/2014/WD-html51-20140204/

Editor: WHATWG
Editor: Simon Pieters, Opera Software, simonp@opera.com
Editor: Anne van Kesteren, Mozilla, annevk@annevk.nl
Editor: Philip JÃ¤genstedt, Opera Software, philipj@opera.com
Editor: Domenic Denicola, Google Inc., d@domenic.me
Editor: Ian Hickson, Google Inc., ian@hixie.ch
Editor: W3C
Editor: Steve Faulkner, The Paciello Group, sfaulkner@paciellogroup.com
Editor: Travis Leithead, Microsoft, travil@microsoft.com
Editor: Erika Doyle Navara, Microsoft, Erika.Doyle@microsoft.com
Editor: Edward O'Connor, Apple Inc., eoconnor@apple.com
Editor: Robin Berjon, W3C (Until August 2015), http://berjon.com/
Abstract: This specification defines the 5th major version, first minor revision of the core
          language of the World Wide Web: the Hypertext Markup Language (HTML). In this version,
          new features continue to be introduced to help Web application authors, new elements
          continue to be introduced based on research into prevailing authoring practices, and
          special attention continues to be given to defining clear conformance criteria for user
          agents in an effort to improve interoperability.
</pre>

<pre class="anchors">
urlPrefix: http://www.w3.org/TR/workers/; type: dfn; spec: WORKERS; text: worker;
urlPrefix: http://www.whatwg.org/specs/web-apps/current-work/; type: dfn; spec: WHATWG; text: WHATWG HTML specification;
urlPrefix: http://html5.org/r/8424/; type: dfn; text: 8424
</pre>

<pre class="link-defaults">
spec:dom-ls; type:dfn; for:Attr; text:name
spec:url; type:dfn; for:url; text:url
</pre>

<!-- Ignored Vars: this, object, variable, optionalArgument, name, value, e, oldParent, removedNode --->

<h2 id="obsolete">Obsolete features</h2>

<h3 id="obsolete-but-conforming-features">Obsolete but conforming features</h3>

  Features listed in this section will trigger warnings in conformance checkers.

  Authors should not specify a <code>border</code> attribute on an <code>img</code> element. If the
  attribute is present, its value must be the string "<code>0</code>". CSS should be used instead.

  Authors should not specify a <code>language</code> attribute on a <code>script</code> element. If
  the attribute is present, its value must be an <a>ASCII case-insensitive</a> match for the string
  "<code>JavaScript</code>" and either the <code>type</code> attribute must be omitted or its value
  must be an <a>ASCII case-insensitive</a> match for the string "<code>text/javascript</code>".
  The attribute should be entirely omitted instead (with the value "<code>JavaScript</code>", it has
  no effect), or replaced with use of the <code>type</code> attribute.

  Authors should not specify the <code>name</code> attribute on <code>a</code> elements. If the
  attribute is present, its value must not be the empty string and must neither be equal to the
  value of any of the <a>IDs</a> in the element's <a>home subtree</a> other than the element's own
  <a>ID</a>, if any, nor be equal to the value of any of the other <code>name</code> attributes on
  <code>a</code> elements in the element's <a>home subtree</a>. If this attribute is present and the
  element has an <a>ID</a>, then the attribute's value must be equal to the element's <a>ID</a>. In
  earlier versions of the language, this attribute was intended as a way to specify possible targets
  for fragment identifiers in <a>URLs</a>. The <code>id</code> attribute should be used instead.

  Authors should not, but may despite requirements to the contrary elsewhere in this specification,
  specify the <code>maxlength</code> and <code>size</code> attributes on <code>input</code> elements
  whose <code>type</code> attributes are in the <a>Number</a> state. One valid reason for using
  these attributes regardless is to help legacy user agents that do not support <code>input</code>
  elements with <code>type="number"</code> to still render the text field with a useful width.

  <p class="note">
  In <a>the HTML syntax</a>, specifying a <a>DOCTYPE</a> that is an <a>obsolete permitted
  DOCTYPE</a> will also trigger a warning.</p>

  <div class="impl">

  <h4 id="warnings-for-obsolete-but-conforming-features">Warnings for obsolete but conforming features</h4>

  To ease the transition from HTML4 Transitional documents to the language defined in <em>this</em>
  specification, and to discourage certain features that are only allowed in very few circumstances,
  conformance checkers must warn the user when the following features are used in a document. These
  are generally old obsolete features that have no effect, and are allowed only to distinguish
  between likely mistakes (regular conformance errors) and mere vestigial markup or unusual and
  discouraged practices (these warnings).

  The following features must be categorized as described above:

   * The presence of an <a>obsolete permitted DOCTYPE</a> in an <a>HTML document</a>.
   * The presence of a <code>border</code> attribute on an <code>img</code> element if its value is
      the string "<code>0</code>".
   * The presence of a <code>language</code> attribute on a <code>script</code> element if its value
      is an <a>ASCII case-insensitive</a> match for the string "<code>JavaScript</code>" and if
      there is no <code>type</code> attribute or there is and its value is an <a>ASCII
      case-insensitive</a> match for the string "<code>text/javascript</code>".
   * The presence of a <code>name</code> attribute on an <code>a</code> element, if its value is not
      the empty string.
   * The presence of a <code>maxlength</code> attribute on an <code>input</code> element whose
      <code>type</code> attribute is in the <a>Number</a> state.
   * The presence of a <code>size</code> attribute on an <code>input</code> element whose
      <code>type</code> attribute is in the <a>Number</a> state.

  Conformance checkers must distinguish between pages that have no conformance errors and have
  none of these obsolete features, and pages that have no conformance errors but do have some of
  these obsolete features.

  <p class="example">
  For example, a validator could report some pages as "Valid HTML" and others as
  "Valid HTML with warnings".</p>

  </div>

<h3 id="non-conforming-features">Non-conforming features</h3>

  Elements in the following list are entirely obsolete, and must not be used by authors:

  : <code>applet</code>
  :: Use <code>embed</code> or <code>object</code> instead.

  : <dfn><code>acronym</code></dfn>
  :: Use <code>abbr</code> instead.

  : <dfn><code>bgsound</code></dfn>
  :: Use <code>audio</code> instead.

  : <dfn><code>dir</code></dfn>
  :: Use <code>ul</code> instead.

  : <code>frame</code>
  : <code>frameset</code>
  : <dfn><code>noframes</code></dfn>
  :: Either use <code>iframe</code> and CSS instead, or use server-side includes to generate 
      complete pages with the various invariant parts merged in.

  : <dfn><code>isindex</code></dfn>
  :: Use an explicit <code>form</code> and <a>text field</a> combination instead.

  : <dfn><code>listing</code></dfn>
  :: Use <code>pre</code> and <code>code</code> instead.

  : <dfn><code>nextid</code></dfn>
  :: Use GUIDs instead.

  : <dfn><code>noembed</code></dfn>
  :: Use <code>object</code> instead of <code>embed</code> when fallback is necessary.

  : <dfn><code>plaintext</code></dfn>
  :: Use the "<code>text/plain</code>" <a>MIME type</a> instead.

  : <dfn><code>rb</code></dfn>
  : <dfn><code>rtc</code></dfn>
  :: Providing the ruby base directly inside the <code>ruby</code> element or using nested
      <code>ruby</code> elements is sufficient.

  : <dfn><code>strike</code></dfn>
  :: Use <code>del</code> instead if the element is marking an edit, otherwise use <code>s</code> 
      instead.

  : <dfn><code>xmp</code></dfn>
  :: Use <code>pre</code> and <code>code</code> instead, and escape "<code>&lt;</code>" and 
      "<code>&amp;</code>" characters as "<code>&amp;lt;</code>" and "<code>&amp;amp;</code>" 
      respectively.

  : <dfn><code>basefont</code></dfn>
  : <dfn><code>big</code></dfn>
  : <dfn><code>blink</code></dfn>
  : <dfn><code>center</code></dfn>
  : <dfn><code>font</code></dfn>
  : <code>marquee</code>
  : <dfn><code>multicol</code></dfn>
  : <dfn><code>nobr</code></dfn>
  : <dfn><code>spacer</code></dfn>
  : <dfn><code>tt</code></dfn>
  :: Use appropriate elements or CSS instead.

      Where the <code>tt</code> element would have been used for marking up keyboard input,
      consider the <code>kbd</code> element; for variables, consider the <code>var</code> element; for
      computer code, consider the <code>code</code> element; and for computer output, consider the
      <code>samp</code> element.

      Similarly, if the <code>big</code> element is being used to denote a heading, consider using
      the <code>h1</code> element; if it is being used for marking up important passages, consider the
      <code>strong</code> element; and if it is being used for highlighting text for reference
      purposes, consider the <code>mark</code> element.

      See also the <a>text-level semantics usage summary</a> for more suggestions with examples.

  <hr>

  The following attributes are obsolete (though the elements are still part of the language), and
  must not be used by authors:

  : <dfn><code>charset</code></dfn> on <code>a</code> elements
  : <dfn><code>charset</code></dfn> on <code>link</code> elements
  :: Use an HTTP <code>Content-Type</code> header on the linked resource instead.

  : <dfn><code>coords</code></dfn> on <code>a</code> elements
  : <dfn><code>shape</code></dfn> on <code>a</code> elements
  :: Use <code>area</code> instead of <code>a</code> for image maps.

  : <dfn><code>methods</code></dfn> on <code>a</code> elements
  : <dfn><code>methods</code></dfn> on <code>link</code> elements
  :: Use the HTTP OPTIONS feature instead.

  : <dfn><code>name</code></dfn> on <code>a</code> elements (except as noted in the previous 
      section)
  : <dfn><code>name</code></dfn> on <code>embed</code> elements
  : <dfn><code>name</code></dfn> on <code>img</code> elements
  : <dfn><code>name</code></dfn> on <code>option</code> elements
  :: Use the <code>id</code> attribute instead.

  : <dfn><code>rev</code></dfn> on <code>a</code> elements
  : <dfn><code>rev</code></dfn> on <code>link</code> elements
  :: Use the <code>rel</code> attribute instead, with an opposite term. (For example, instead of
      <code>rev="made"</code>, use <code>rel="author"</code>.)

  : <dfn><code>urn</code></dfn> on <code>a</code> elements
  : <dfn><code>urn</code></dfn> on <code>link</code> elements
  :: Specify the preferred persistent identifier using the <code>href</code> attribute instead.

  : <dfn><code>accept</code></dfn> on <code>form</code> elements
  :: Use the <code>accept</code> attribute directly on the <code>input</code> elements instead.

  : <dfn><code>hreflang</code></dfn> on <code>area</code> elements
  : <dfn><code>type</code></dfn> on <code>area</code> elements
  :: These attributes do not do anything useful, and for historical reasons there are no
      corresponding IDL attributes on <code>area</code> elements. Omit them altogether.

  : <dfn><code>nohref</code></dfn> on <code>area</code> elements
  :: Omitting the <code>href</code> attribute is sufficient; the <code>nohref</code> attribute is
      unnecessary. Omit it altogether.

  : <dfn><code>profile</code></dfn> on <code>head</code> elements
  :: When used for declaring which <code>meta</code> terms are used in the document, unnecessary; 
      omit it altogether, and <a>register the names</a>.
  :: When used for triggering specific user agent behaviors: use a <code>link</code> element 
      instead.

  : <dfn><code>version</code></dfn> on <code>html</code> elements
  :: Unnecessary. Omit it altogether.

  : <dfn><code>ismap</code></dfn> on <code>input</code> elements
  :: Unnecessary. Omit it altogether. All <code>input</code> elements with a <code>type</code> 
      attribute in the <a>Image Button</a> state are processed as server-side image maps.

  : <dfn><code>usemap</code></dfn> on <code>input</code> elements
  :: Use <code>img</code> instead of <code>input</code> for image maps.

  : <dfn><code>longdesc</code></dfn> on <code>iframe</code> elements
  : <dfn><code>longdesc</code></dfn> on <code>img</code> elements
  :: Use a regular <code>a</code> element to link to the description, or (in the case of images) use 
      an <a>image map</a> to provide a link from the image to the image's description.

  : <dfn><code>lowsrc</code></dfn> on <code>img</code> elements
  :: Use a progressive JPEG image (given in the <code>src</code> attribute), instead of using two 
      separate images.

  : <dfn><code>target</code></dfn> on <code>link</code> elements
  :: Unnecessary. Omit it altogether.

  : <dfn><code>scheme</code></dfn> on <code>meta</code> elements
  :: Use only one scheme per field, or make the scheme declaration part of the value.

  : <dfn><code>archive</code></dfn> on <code>object</code> elements
  : <dfn><code>classid</code></dfn> on <code>object</code> elements
  : <dfn><code>code</code></dfn> on <code>object</code> elements
  : <dfn><code>codebase</code></dfn> on <code>object</code> elements
  : <dfn><code>codetype</code></dfn> on <code>object</code> elements
  :: Use the <code>data</code> and <code>type</code> attributes to invoke <a>plugins</a>. To set 
      parameters with these names in particular, the <code>param</code> element can be used.

  : <dfn><code>declare</code></dfn> on <code>object</code> elements
  :: Repeat the <code>object</code> element completely each time the resource is to be reused.

  : <dfn><code>standby</code></dfn> on <code>object</code> elements
  :: Optimize the linked resource so that it loads quickly or, at least, incrementally.

  : <dfn><code>type</code></dfn> on <code>param</code> elements
  : <dfn><code>valuetype</code></dfn> on <code>param</code> elements
  :: Use the <code>name</code> and <code>value</code> attributes without declaring value types.

  : <dfn><code>language</code></dfn> on <code>script</code> elements (except as noted in the 
      previous section)
  :: Use the <code>type</code> attribute instead.

  : <dfn><code>event</code></dfn> on <code>script</code> elements
  : <dfn><code>for</code></dfn> on <code>script</code> elements
  :: Use DOM events mechanisms to register event listeners. [[!DOM]]

  : <dfn><code>media</code></dfn> on <code>source</code> elements
  :: Use script to select the media resource(s) to use.

  : <dfn><code>datapagesize</code></dfn> on <code>table</code> elements
  :: Unnecessary. Omit it altogether.

  : <dfn><code>summary</code></dfn> on <code>table</code> elements
  :: Use one of the <a>techniques for describing tables</a> given in the <code>table</code> section 
      instead.

  : <dfn><code>abbr</code></dfn> on <code>td</code> elements
  :: Use text that begins in an unambiguous and terse manner, and include any more elaborate text 
      after that. The <code>title</code> attribute can also be useful in including more detailed 
      text, so that the cell's contents can be made terse. If it's a heading, use <code>th</code> 
      (which has an <code>abbr</code> attribute).

  : <dfn><code>axis</code></dfn> on <code>td</code> and <code>th</code> elements
  :: Use the <code>scope</code> attribute on the relevant <code>th</code>.

  : <dfn><code>scope</code></dfn> on <code>td</code> elements
  :: Use <code>th</code> elements for heading cells.

  : <dfn><code>datasrc</code></dfn> on <code>a</code>, <code>applet</code>, <code>button</code>, 
      <code>div</code>, <code>frame</code>, <code>iframe</code>, <code>img</code>, 
      <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, 
      <code>object</code>, <code>option</code>, <code>select</code>, <code>span</code>, 
      <code>table</code>, and <code>textarea</code> elements
  : <dfn><code>datafld</code></dfn> on <code>a</code>, <code>applet</code>, <code>button</code>, 
      <code>div</code>, <code>fieldset</code>, <code>frame</code>, <code>iframe</code>, 
      <code>img</code>, <code>input</code>, <code>label</code>, <code>legend</code>, 
      <code>marquee</code>, <code>object</code>, <code>param</code>, <code>select</code>, 
      <code>span</code>, and <code>textarea</code> elements
  : <dfn><code>dataformatas</code></dfn> on <code>button</code>, <code>div</code>, 
      <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, 
      <code>object</code>, <code>option</code>, <code>select</code>, <code>span</code>, and 
      <code>table</code> elements
  :: Use script and a mechanism such as <code>XMLHttpRequest</code> to populate the page 
      dynamically. [[!XHR]]

  : <dfn><code>alink</code></dfn> on <code>body</code> elements
  : <dfn><code>bgcolor</code></dfn> on <code>body</code> elements
  : <dfn><code>bottommargin</code></dfn> on <code>body</code> elements
  : <dfn><code>leftmargin</code></dfn> on <code>body</code> elements
  : <dfn><code>link</code></dfn> on <code>body</code> elements
  : <dfn><code>marginheight</code></dfn> on <code>body</code> elements
  : <dfn><code>marginwidth</code></dfn> on <code>body</code> elements
  : <dfn><code>rightmargin</code></dfn> on <code>body</code> elements
  : <dfn><code>text</code></dfn> on <code>body</code> elements
  : <dfn><code>margintop</code></dfn> on <code>body</code> elements
  : <dfn><code>vlink</code></dfn> on <code>body</code> elements
  : <dfn><code>clear</code></dfn> on <code>br</code> elements
  : <dfn><code>align</code></dfn> on <code>caption</code> elements
  : <dfn><code>align</code></dfn> on <code>col</code> elements
  : <dfn><code>char</code></dfn> on <code>col</code> elements
  : <dfn><code>charoff</code></dfn> on <code>col</code> elements
  : <dfn><code>valign</code></dfn> on <code>col</code> elements
  : <dfn><code>width</code></dfn> on <code>col</code> elements
  : <dfn><code>align</code></dfn> on <code>div</code> elements
  : <dfn><code>compact</code></dfn> on <code>dl</code> elements
  : <dfn><code>align</code></dfn> on <code>embed</code> elements
  : <dfn><code>hspace</code></dfn> on <code>embed</code> elements
  : <dfn><code>vspace</code></dfn> on <code>embed</code> elements
  : <dfn><code>align</code></dfn> on <code>hr</code> elements
  : <dfn><code>color</code></dfn> on <code>hr</code> elements
  : <dfn><code>noshade</code></dfn> on <code>hr</code> elements
  : <dfn><code>size</code></dfn> on <code>hr</code> elements
  : <dfn><code>width</code></dfn> on <code>hr</code> elements
  : <dfn><code>align</code></dfn> on <code>h1</code>&mdash;<code>h6</code> elements
  : <dfn><code>align</code></dfn> on <code>iframe</code> elements
  : <dfn><code>allowtransparency</code></dfn> on <code>iframe</code> elements
  : <dfn><code>frameborder</code></dfn> on <code>iframe</code> elements
  : <dfn><code>framespacing</code></dfn> on <code>iframe</code> elements
  : <dfn><code>hspace</code></dfn> on <code>iframe</code> elements
  : <dfn><code>marginheight</code></dfn> on <code>iframe</code> elements
  : <dfn><code>marginwidth</code></dfn> on <code>iframe</code> elements
  : <dfn><code>scrolling</code></dfn> on <code>iframe</code> elements
  : <dfn><code>vspace</code></dfn> on <code>iframe</code> elements
  : <dfn><code>align</code></dfn> on <code>input</code> elements
  : <dfn><code>border</code></dfn> on <code>input</code> elements
  : <dfn><code>hspace</code></dfn> on <code>input</code> elements
  : <dfn><code>vspace</code></dfn> on <code>input</code> elements
  : <dfn><code>align</code></dfn> on <code>img</code> elements
  : <dfn><code>border</code></dfn> on <code>img</code> elements (except as noted in the previous 
      section)
  : <dfn><code>hspace</code></dfn> on <code>img</code> elements
  : <dfn><code>vspace</code></dfn> on <code>img</code> elements
  : <dfn><code>align</code></dfn> on <code>legend</code> elements
  : <dfn><code>type</code></dfn> on <code>li</code> elements
  : <dfn><code>compact</code></dfn> on <code>menu</code> elements
  : <dfn><code>align</code></dfn> on <code>object</code> elements
  : <dfn><code>border</code></dfn> on <code>object</code> elements
  : <dfn><code>hspace</code></dfn> on <code>object</code> elements
  : <dfn><code>vspace</code></dfn> on <code>object</code> elements
  : <dfn><code>compact</code></dfn> on <code>ol</code> elements
  : <dfn><code>align</code></dfn> on <code>p</code> elements
  : <dfn><code>width</code></dfn> on <code>pre</code> elements
  : <dfn><code>align</code></dfn> on <code>table</code> elements
  : <dfn><code>bgcolor</code></dfn> on <code>table</code> elements
  : <dfn><code>border</code></dfn> on <code>table</code> elements
  : <dfn><code>bordercolor</code></dfn> on <code>table</code> elements
  : <dfn><code>cellpadding</code></dfn> on <code>table</code> elements
  : <dfn><code>cellspacing</code></dfn> on <code>table</code> elements
  : <dfn><code>frame</code></dfn> on <code>table</code> elements
  : <dfn><code>height</code></dfn> on <code>table</code> elements
  : <dfn><code>rules</code></dfn> on <code>table</code> elements
  : <dfn><code>width</code></dfn> on <code>table</code> elements
  : <dfn><code>align</code></dfn> on <code>tbody</code>, <code>thead</code>, and <code>tfoot</code>
      elements
  : <dfn><code>char</code></dfn> on <code>tbody</code>, <code>thead</code>, and <code>tfoot</code> 
      elements
  : <dfn><code>charoff</code></dfn> on <code>tbody</code>, <code>thead</code>, and 
      <code>tfoot</code> elements
  : <dfn><code>valign</code></dfn> on <code>tbody</code>, <code>thead</code>, and <code>tfoot</code> 
      elements
  : <dfn><code>align</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>bgcolor</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>char</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>charoff</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>height</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>nowrap</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>valign</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>width</code></dfn> on <code>td</code> and <code>th</code> elements
  : <dfn><code>align</code></dfn> on <code>tr</code> elements
  : <dfn><code>bgcolor</code></dfn> on <code>tr</code> elements
  : <dfn><code>char</code></dfn> on <code>tr</code> elements
  : <dfn><code>charoff</code></dfn> on <code>tr</code> elements
  : <dfn><code>height</code></dfn> on <code>tr</code> elements
  : <dfn><code>valign</code></dfn> on <code>tr</code> elements
  : <dfn><code>compact</code></dfn> on <code>ul</code> elements
  : <dfn><code>type</code></dfn> on <code>ul</code> elements
  : <dfn><code>background</code></dfn> on <code>body</code>, <code>table</code>, <code>thead</code>, 
      <code>tbody</code>, <code>tfoot</code>, <code>tr</code>, <code>td</code>, and <code>th</code> 
      elements
  :: Use CSS instead.

  <hr>

  <p class="auth">
  The <code>border</code> attribute on the <code>table</code> element can be used to provide basic 
  fallback styling for the purpose of making tables legible in browsing environments where CSS 
  support is limited or absent, such as text-based browsers, WYSIWYG editors, and in situations 
  where CSS support is disabled or the style sheet is lost. Only the empty string and the value 
  "<code>1</code>" may be used as <code>border</code> values for this purpose. Other values are 
  considered obsolete. To regulate the thickness of such borders, authors should instead use CSS.
  </p>

  <div class="impl">

<h3 id="requirements-for-implementations">Requirements for implementations</h3>

  <h4 id="the-applet-element">The <dfn><code>applet</code></dfn> element</h4>

  <p class="critical">
  This feature is in the process of being removed from the Web platform. (This is a long process 
  that takes many years.) Using the <code>applet</code> element at this time is highly discouraged.
  </p>

  The <code>applet</code> element is a Java-specific variant of the <code>embed</code> element.
  The <code>applet</code> element is now obsoleted so that all extension frameworks (Java, .NET,
  Flash, etc) are handled in a consistent manner.

  When the element matches any of the following conditions, it <a>represents</a> its contents:

  * The element is still in the <a>stack of open elements</a> of an <a>HTML parser</a> or <a>XML 
      parser</a>.
  * The element is not <a>in a <code>Document</code></a>.
  * The element's <a>node document</a> is not <a>fully active</a>.
  * The element's <a>node document</a>'s <a>active sandboxing flag set</a> has its <a>sandboxed 
    plugins browsing context flag</a> set.
  * The element has an ancestor <a>media element</a>.
  * The element has an ancestor <code>object</code> element that is <em>not</em> showing its
    <a>fallback content</a>.
  * No Java Language runtime <a>plugin</a> is available.
  * A Java runtime <a>plugin</a> is available but it is disabled.

  Otherwise, the user agent should instantiate a Java Language runtime <a>plugin</a>, and should 
  pass the names and values of all the attributes on the element, in the order they were added to 
  the element, with the attributes added by the parser being ordered in source order, and then a 
  parameter named "PARAM" whose value is null, and then all the names and values of 
  <a>parameters</a> given by <code>param</code> elements that are children of the 
  <code>applet</code> element, in <a>tree order</a>, to the <a>plugin</a> used. If the <a>plugin</a> 
  supports a scriptable interface, the <code>HTMLAppletElement</code> object representing the 
  element should expose that interface. The <code>applet</code> element <a>represents</a> the 
  <a>plugin</a>.

  <p class="note">
  The <code>applet</code> element is unaffected by the CSS 'display' property. The
  Java Language runtime is instantiated even if the element is hidden with a 'display:none' CSS
  style.</p>

  The <code>applet</code> element must implement the <code>HTMLAppletElement</code> interface.

  <pre class="idl" highlight="webidl">
  interface HTMLAppletElement : HTMLElement {
    attribute DOMString align;
    attribute DOMString alt;
    attribute DOMString archive;
    attribute DOMString code;
    attribute DOMString codeBase;
    attribute DOMString height;
    attribute unsigned long hspace;
    attribute DOMString name;
    attribute DOMString _object; // the underscore is not part of the identifier
    attribute unsigned long vspace;
    attribute DOMString width;
  };</pre>

  The <dfn><code>align</code></dfn>, <dfn><code>alt</code></dfn>, <dfn><code>archive</code></dfn>, 
  <dfn><code>code</code></dfn>, <dfn><code>height</code></dfn>, <dfn><code>hspace</code></dfn>, 
  <dfn><code>name</code></dfn>, <dfn><code>object</code></dfn>, <dfn><code>vspace</code></dfn>, and 
  <dfn><code>width</code></dfn> IDL attributes must <a>reflect</a> the respective content attributes 
  of the same name. For the purposes of reflection, the <code>applet</code> element's 
  <code>object</code> content attribute is defined as containing a <a>URL</a>.

  The <dfn><code>codeBase</code></dfn> IDL attribute must
  <a>reflect</a> the <code>codebase</code> content
  attribute, which for the purposes of reflection is defined as containing a <a>URL</a>.

  <h4 id="the-marquee-element">The <dfn><code>marquee</code></dfn> element</h4>

  The <code>marquee</code> element is a presentational element that animates content. CSS
  transitions and animations are a more appropriate mechanism. [[!CSS3-ANIMATIONS]] 
  [[!CSS3-TRANSITIONS]]

  The <a>task source</a> for tasks mentioned in this section is the <a>DOM manipulation task 
  source</a>.

  The <code>marquee</code> element must implement the <code>HTMLMarqueeElement</code> interface.

  <pre class="idl" highlight="webidl">
  interface HTMLMarqueeElement : HTMLElement {
    attribute DOMString behavior;
    attribute DOMString bgColor;
    attribute DOMString direction;
    attribute DOMString height;
    attribute unsigned long hspace;
    attribute long loop;
    attribute unsigned long scrollAmount;
    attribute unsigned long scrollDelay;
    attribute boolean trueSpeed;
    attribute unsigned long vspace;
    attribute DOMString width;

    attribute EventHandler onbounce;
    attribute EventHandler onfinish;
    attribute EventHandler onstart;

    void start();
    void stop();
  };</pre>

  A <code>marquee</code> element can be <dfn>turned on</dfn> or <dfn>turned off</dfn>. When it is 
  created, it is <a>turned on</a>.

  When the <dfn><code>start()</code></dfn> method is called, the <code>marquee</code> element must 
  be <a>turned on</a>.

  When the <dfn><code>stop()</code></dfn> method is called, the <code>marquee</code> element must be 
  <a>turned off</a>.

  When a <code>marquee</code> element is created, the user agent must <a>queue a task</a> to 
  <a>fire a simple event</a> named <code>start</code> at the element.

  <hr>

  The <dfn><code>behavior</code></dfn> content attribute on <code>marquee</code> elements is an 
  <a>enumerated attribute</a> with the following keywords (all non-conforming):

  <table>
   <thead>
    <tr>
     <th>Keyword
     <th>State
   <tbody>
    <tr>
     <td><code>scroll</code>
     <td><dfn>scroll</dfn>
    <tr>
     <td><code>slide</code>
     <td><dfn>slide</dfn>
    <tr>
     <td><code>alternate</code>
     <td><dfn>alternate</dfn>
  </table>

  The <i>missing value default</i> is the <a>scroll</a> state.

  <hr>

  The <dfn><code>direction</code></dfn> content attribute on <code>marquee</code> elements is an 
  <a>enumerated attribute</a> with the following keywords (all non-conforming):

  <table>
   <thead>
    <tr>
     <th>Keyword
     <th>State
   <tbody>
    <tr>
     <td><code>left</code>
     <td><dfn>left</dfn>
    <tr>
     <td><code>right</code>
     <td><dfn>right</dfn>
    <tr>
     <td><code>up</code>
     <td><dfn>up</dfn>
    <tr>
     <td><code>down</code>
     <td><dfn>down</dfn>
  </table>

  The <i>missing value default</i> is the <a>left</a> state.

  <hr>

  The <dfn><code>truespeed</code></dfn> content attribute on <code>marquee</code> elements is a 
  <a>boolean attribute</a>.

  <hr>

  A <code>marquee</code> element has a <dfn>marquee scroll interval</dfn>, which is obtained as
  follows:

  1. If the element has a <code>scrolldelay</code> attribute, and parsing its value using 
      the <a>rules for parsing non-negative integers</a> does not return an error, then let 
      <var>delay</var> be the parsed value. Otherwise, let <var>delay</var> be 85.
  2. If the element does not have a <code>truespeed</code> attribute, and the <var>delay</var> value 
      is less than 60, then let <var>delay</var> be 60 instead.
  3. The <a>marquee scroll interval</a> is <var>delay</var>, interpreted in milliseconds.

  <hr>

  A <code>marquee</code> element has a <dfn>marquee scroll distance</dfn>, which, if the element
  has a <code>scrollamount</code> attribute, and parsing its value using the <a>rules for parsing 
  non-negative integers</a> does not return an error, is the parsed value interpreted in CSS pixels, 
  and otherwise is 6 CSS pixels.

  <hr>

  A <code>marquee</code> element has a <dfn>marquee loop count</dfn>, which, if the element has a
  <dfn><code>loop</code></dfn> attribute, and parsing its value using the <a>rules for parsing 
  integers</a> does not return an error or a number less than 1, is the parsed value, and otherwise 
  is &#x2212;1.

  The <dfn><code>loop</code></dfn> IDL attribute, on getting, must return the element's <a>marquee 
  loop count</a>; and on setting, if the new value is different than the element's <a>marquee loop 
  count</a> and either greater than zero or equal to &#x2212;1, must set the element's 
  <code>loop</code> content attribute (adding it if necessary) to the <a>valid integer</a> that 
  represents the new value. (Other values are ignored.)

  A <code>marquee</code> element also has a <dfn>marquee current loop index</dfn>, which is zero
  when the element is created.

  The rendering layer will occasionally <dfn>increment the marquee current loop index</dfn>, which 
  must cause the following steps to be run:

  1. If the <a>marquee loop count</a> is &#x2212;1, then abort these steps.
  2. Increment the <a>marquee current loop index</a> by one.
  3. If the <a>marquee current loop index</a> is now equal to or greater than the element's
      <a>marquee loop count</a>, <a>turn off</a> the <code>marquee</code> element and <a>queue a 
      task</a> to <a>fire a simple event</a> named <code>finish</code> at the 
      <code>marquee</code> element.

      Otherwise, if the <code>behavior</code> attribute is in the
      <a>alternate</a> state, then <a>queue a
      task</a> to <a>fire a simple event</a> named <code>bounce</code>
      at the <code>marquee</code> element.

      Otherwise, <a>queue a task</a> to <a>fire a simple event</a> named <code
      >start</code> at the <code>marquee</code> element.

  <hr>

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event 
  types</a>) that must be supported, as <a>event handler content attributes</a> and <a>event handler 
  IDL attributes</a>, by <code>marquee</code> elements:

  <table>
   <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
   <tbody>
    <tr><td><dfn><code>onbounce</code></dfn> <td> <code>bounce</code>
    <tr><td><dfn><code>onfinish</code></dfn> <td> <code>finish</code>
    <tr><td><dfn><code>onstart</code></dfn> <td> <code>start</code>
  </table>

  <hr>

  The <dfn><code>behavior</code></dfn>, <dfn><code>direction</code></dfn>, 
  <dfn><code>height</code></dfn>, <dfn><code>hspace</code></dfn>, <dfn><code>vspace</code></dfn>, 
  and <dfn><code>width</code></dfn> IDL attributes must <a>reflect</a> the respective content 
  attributes of the same name.

  The <dfn><code>bgColor</code></dfn> IDL attribute must <a>reflect</a> the <code>bgcolor</code> 
  content attribute.

  The <dfn><code>scrollAmount</code></dfn> IDL attribute must <a>reflect</a> the 
  <code>scrollamount</code> content attribute. The default value is 6.

  The <dfn><code>scrollDelay</code></dfn> IDL attribute must <a>reflect</a> the 
  <code>scrolldelay</code> content attribute. The default value is 85.

  The <dfn><code>trueSpeed</code></dfn> IDL attribute must <a>reflect</a> the <code>truespeed</code> 
  content attribute.

  <h4 id="frames">Frames</h4>

  The <dfn><code>frameset</code></dfn> element acts as <a>the body element</a> in documents that use 
  frames.

  The <code>frameset</code> element must implement the <code>HTMLFrameSetElement</code> interface.

  <pre class="idl" highlight="webidl">
  interface HTMLFrameSetElement : HTMLElement {
    attribute DOMString cols;
    attribute DOMString rows;
  };
  HTMLFrameSetElement implements WindowEventHandlers;</pre>

  The <dfn><code>cols</code></dfn> and <dfn><code>rows</code></dfn> IDL attributes of the 
  <code>frameset</code> element must <a>reflect</a> the respective content attributes of the same 
  name.

  The <code>frameset</code> element exposes as <a>event handler content attributes</a> a number of 
  the <a>event handlers</a> of the <code>Window</code> object. It also mirrors their <a>event 
  handler IDL attributes</a>.

  The <code>onblur</code>, <code>onerror</code>, <code>onfocus</code>, <code>onload</code>, 
  <code>onresize</code>, and <code>onscroll</code> <a>event handlers</a> of the <code>Window</code> 
  object, exposed on the <code>frameset</code> element, replace the generic <a>event handlers</a> 
  with the same names normally supported by <a>HTML elements</a>.

  <hr>

  The <dfn><code>frame</code></dfn> element defines a <a>nested browsing context</a> similar to the 
  <code>iframe</code> element, but rendered within a <code>frameset</code> element.

  A <code>frame</code> element is said to be an <dfn>active <code>frame</code> element</dfn> when
  it is <a>in a <code>Document</code></a>.

  When a <code>frame</code> element is created as an <a>active <code>frame</code> element</a>, or 
  becomes an <a>active <code>frame</code> element</a> after not having been one, the user agent must 
  <a>create</a> a <a>nested browsing context</a>, and then <a>process the <code>frame</code> 
  attributes</a> for the first time.

  When a <code>frame</code> element stops being an <a>active <code>frame</code> element</a>, the 
  user agent must <a>discard</a> the <a>nested browsing context</a>.

  Whenever a <code>frame</code> element with a <a>nested browsing context</a> has its 
  <code>src</code> attribute set, changed, or removed, the user agent must <a>process the 
  <code>frame</code> attributes</a>.

  When the user agent is to <dfn>process the <code>frame</code> attributes</dfn>, it must run the
  first appropriate steps from the following list:

  <dl class="switch">

  : If the element has no <code>src</code> attribute specified, and the user agent is processing the 
      <code>frame</code>'s attributes for the first time
  :: <a>Queue a task</a> to <a>fire a simple event</a> named <code>load</code> at the 
      <code>frame</code> element.

  : Otherwise
  :: 1. If the value of the <code>src</code> attribute is the empty string, let <var>url</var> be 
        the string "<code>about:blank</code>".

        Otherwise, <a>resolve</a> the value of the <code>src</code> attribute, relative to the 
        <code>frame</code> element.

        If that is not successful, then let <var>url</var> be the string "<code>about:blank</code>".
        Otherwise, let <var>url</var> be the resulting <a>absolute URL</a>.
     2. <a>Navigate</a> the element's <a>child browsing context</a>to <var>url</var>.
  
  </dl>
      
  Any <a>navigation</a> required of the user agent in the <a>process the <code>frame</code> 
  attributes</a> algorithm must be completed as an <a>explicit self-navigation override</a> and with 
  the <code>frame</code> element's <a>node document</a>'s <a>browsing context</a> as the <a>source 
  browsing context</a>.

  Furthermore, if the <a>active document</a> of the element's <a>child browsing context</a> before 
  such a <a>navigation</a> was not <a>completely loaded</a> at the time of the new 
  <a>navigation</a>, then the <a>navigation</a> must be completed  with <a>replacement enabled</a>.

  Similarly, if the <a>child browsing context</a>'s <a>session history</a> contained only one 
  <code>Document</code> when the <a>process the <code>frame</code> attributes</a> algorithm was 
  invoked, and that was the <code>about:blank</code> <code>Document</code> created when the <a>child 
  browsing context</a> was created, then any <a>navigation</a> required of the user agent in that 
  algorithm must be completed with <a>replacement enabled</a>.

  When a <code>Document</code> in a <code>frame</code> is marked as <a>completely loaded</a>, the 
  user agent must <a>queue a task</a> to <a>fire a simple event</a> named <code>load</code> at the 
  <code>frame</code> element.

  The <a>task source</a> for the <a>tasks</a> above is the <a>DOM manipulation task source</a>.

  When a <code>frame</code> element's <a>nested browsing context</a>'s <a>active document</a> is not 
  <a>ready for post-load tasks</a>, and when anything is <a>delaying the load event</a> of the 
  <code>frame</code> element's <a>browsing context</a>'s <a>active document</a>, and when the 
  <code>frame</code> element's <a>browsing context</a> is in the <a>delaying <code>load</code> 
  events mode</a>, the <code>frame</code> must <a>delay the load event</a> of its document.

  When the browsing context is created, if a <code>name</code> attribute is present, the 
  <a>browsing context name</a> must be set to the value of this attribute; otherwise, the 
  <a>browsing context name</a> must be set to the empty string.

  Whenever the <code>name</code> attribute is set, the nested <a>browsing context</a>'s <a>name</a> 
  must be changed to the new value. If the attribute is removed, the <a>browsing context name</a> 
  must be set to the empty string.

  The <code>frame</code> element must implement the <code>HTMLFrameElement</code> interface.

  <pre class="idl" highlight="webidl">
  interface HTMLFrameElement : HTMLElement {
    attribute DOMString name;
    attribute DOMString scrolling;
    attribute DOMString src;
    attribute DOMString frameBorder;
    attribute DOMString longDesc;
    attribute boolean noResize;
    readonly attribute Document? contentDocument;
    readonly attribute WindowProxy? contentWindow;

    [TreatNullAs=EmptyString] attribute DOMString marginHeight;
    [TreatNullAs=EmptyString] attribute DOMString marginWidth;
  };</pre>

  The <dfn><code>name</code></dfn>, <dfn><code>scrolling</code></dfn>, and 
  <dfn><code>src</code></dfn> IDL attributes of the <code>frame</code> element must <a>reflect</a> 
  the respective content attributes of the same name. For the purposes of reflection, the 
  <code>frame</code> element's <code>src</code> content attribute is defined as containing a 
  <a>URL</a>.

  The <dfn><code>frameBorder</code></dfn> IDL attribute of the <code>frame</code> element must 
  <a>reflect</a> the element's <code>frameborder</code> content attribute.

  The <dfn><code>longDesc</code></dfn> IDL attribute of the <code>frame</code> element must 
  <a>reflect</a> the element's <code>longdesc</code> content attribute, which for the purposes of 
  reflection is defined as containing a <a>URL</a>.

  The <dfn><code>noResize</code></dfn> IDL attribute of the <code>frame</code> element must 
  <a>reflect</a> the element's <code>noresize</code> content attribute.

  The <dfn><code>contentDocument</code></dfn> IDL attribute of the <code>frame</code> element must 
  return the <code>Document</code> object of the <a>active document</a> of the <code>frame</code> 
  element's <a>nested browsing context</a>, if any and if its <a>effective script origin</a> is the 
  <a>same origin</a> as the <a>effective script origin</a> specified by the <a>incumbent settings 
  object</a>, or null otherwise.

  The <dfn><code>contentWindow</code></dfn> IDL attribute must return the <code>WindowProxy</code> 
  object of the <code>frame</code> element's <a>nested browsing context</a>.

  The <dfn><code>marginHeight</code></dfn> IDL attribute of the <code>frame</code> element must 
  <a>reflect</a> the element's <code>marginheight</code> content attribute.

  The <dfn><code>marginWidth</code></dfn> IDL attribute of the <code>frame</code> element must 
  <a>reflect</a> the element's <code>marginwidth</code> content attribute.

  <h4 id="other-elements,-attributes-and-apis">Other elements, attributes and APIs</h4>

  User agents must treat <code>acronym</code> elements in a manner equivalent to <code>abbr</code> 
  elements in terms of semantics and for purposes of rendering.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLAnchorElement {
    attribute DOMString coords;
    attribute DOMString charset;
    attribute DOMString name;
    attribute DOMString rev;
    attribute DOMString shape;
  };</pre>

  The <dfn><code>coords</code></dfn>, <dfn><code>charset</code></dfn>, <dfn><code>name</code></dfn>, 
  <dfn><code>rev</code></dfn>, and <dfn><code>shape</code></dfn> IDL attributes of the 
  <code>a</code> element must <a>reflect</a> the respective content attributes of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLAreaElement {
    attribute boolean noHref;
  };</pre>

  The <dfn><code>noHref</code></dfn> IDL attribute of the <code>area</code> element must 
  <a>reflect</a> the element's <code>nohref</code> content attribute.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLBodyElement {
    [TreatNullAs=EmptyString] attribute DOMString text;
    [TreatNullAs=EmptyString] attribute DOMString link;
    [TreatNullAs=EmptyString] attribute DOMString vLink;
    [TreatNullAs=EmptyString] attribute DOMString aLink;
    [TreatNullAs=EmptyString] attribute DOMString bgColor;
    attribute DOMString background;
  };</pre>

  The <dfn><code>text</code></dfn> IDL attribute of the <code>body</code> element must 
  <a>reflect</a> the element's <code>text</code> content attribute.

  The <dfn><code>link</code></dfn> IDL attribute of the <code>body</code> element must 
  <a>reflect</a> the element's <code>link</code> content attribute.

  The <dfn><code>aLink</code></dfn> IDL attribute of the <code>body</code> element must 
  <a>reflect</a> the element's <code>alink</code> content attribute.

  The <dfn><code>vLink</code></dfn> IDL attribute of the <code>body</code> element must 
  <a>reflect</a> the element's <code>vlink</code> content attribute.

  The <dfn><code>bgColor</code></dfn> IDL attribute of the <code>body</code> element must 
  <a>reflect</a> the element's <code>bgcolor</code> content attribute.

  The <dfn><code>background</code></dfn> IDL attribute of the <code>body</code> element must 
  <a>reflect</a> the element's <code>background</code> content attribute. (The 
  <code>background</code> content is <em>not</em> defined to contain a <a>URL</a>, despite rules 
  regarding its handling in the rendering section above.)

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLBRElement {
    attribute DOMString clear;
  };</pre>

  The <dfn><code>clear</code></dfn> IDL attribute of the <code>br</code> element must <a>reflect</a> 
  the content attribute of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLTableCaptionElement {
    attribute DOMString align;
  };</pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>caption</code> element must 
  <a>reflect</a> the content attribute of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLTableColElement {
    attribute DOMString align;
    attribute DOMString ch;
    attribute DOMString chOff;
    attribute DOMString vAlign;
    attribute DOMString width;
  };</pre>

  The <dfn><code>align</code></dfn> and <dfn><code>width</code></dfn> IDL attributes of the 
  <code>col</code> element must <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>ch</code></dfn> IDL attribute of the <code>col</code> element must <a>reflect</a> 
  the element's <code>char</code> content attribute.

  The <dfn><code>chOff</code></dfn> IDL attribute of the <code>col</code> element must 
  <a>reflect</a> the element's <code>charoff</code> content attribute.

  The <dfn><code>vAlign</code></dfn> IDL attribute of the <code>col</code> element must 
  <a>reflect</a> the element's <code>valign</code> content attribute.

  <hr>

  User agents must treat <code>dir</code> elements in a manner equivalent to <code>ul</code>
  elements in terms of semantics and for purposes of rendering.

  The <code>dir</code> element must implement the <code>HTMLDirectoryElement</code> interface.

  <pre class="idl" highlight="webidl">
  interface HTMLDirectoryElement : HTMLElement {
    attribute boolean compact;
  };</pre>

  The <dfn><code>compact</code></dfn> IDL attribute of the <code>dir</code> element must 
  <a>reflect</a> the content attribute of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLDivElement {
    attribute DOMString align;
  };</pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>div</code> element must 
  <a>reflect</a> the content attribute of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLDListElement {
    attribute boolean compact;
  };</pre>

  The <dfn><code>compact</code></dfn> IDL attribute of the <code>dl</code> element must 
  <a>reflect</a> the content attribute of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLEmbedElement {
    attribute DOMString align;
    attribute DOMString name;
  };</pre>

  The <dfn><code>name</code></dfn> and <dfn><code>align</code></dfn> IDL attributes of the 
  <code>embed</code> element must <a>reflect</a> the respective content attributes of the same name.

  <hr>

  The <code>font</code> element must implement the <code>HTMLFontElement</code> interface.

  <pre class="idl" highlight="webidl">
  interface HTMLFontElement : HTMLElement {
    [TreatNullAs=EmptyString] attribute DOMString color;
    attribute DOMString face;
    attribute DOMString size;
  };</pre>

  The <dfn><code>color</code></dfn>, <dfn><code>face</code></dfn>, and <dfn><code>size</code></dfn> 
  IDL attributes of the <code>font</code> element must <a>reflect</a> the respective content 
  attributes of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLHeadingElement {
    attribute DOMString align;
  };</pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>h1</code>&ndash;<code>h6</code> 
  elements must <a>reflect</a> the content attribute of the same name.

  <hr>

  <p class="note">
  The <dfn><code>profile</code></dfn> IDL attribute on <code>head</code> elements (with the 
  <code>HTMLHeadElement</code> interface) is intentionally omitted. Unless so required by <a>another 
  applicable specification</a>, implementations would therefore not support this attribute. (It is 
  mentioned here as it was defined in a previous version of the DOM specifications.)</p>

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLHRElement {
    attribute DOMString align;
    attribute DOMString color;
    attribute boolean noShade;
    attribute DOMString size;
    attribute DOMString width;
  };</pre>

  The <dfn><code>align</code></dfn>, <dfn><code>color</code></dfn>, <dfn><code>size</code></dfn>,
  and <dfn><code>width</code></dfn> IDL attributes of the <code>hr</code> element must 
  <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>noShade</code></dfn> IDL attribute of the <code>hr</code> element must 
  <a>reflect</a> the element's <code>noshade</code> content attribute.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLHtmlElement {
    attribute DOMString version;
  };</pre>

  The <dfn><code>version</code></dfn> IDL attribute of the <code>html</code> element must 
  <a>reflect</a> the content attribute of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLIFrameElement {
    attribute DOMString align;
    attribute DOMString scrolling;
    attribute DOMString frameBorder;
    attribute DOMString longDesc;

    [TreatNullAs=EmptyString] attribute DOMString marginHeight;
    [TreatNullAs=EmptyString] attribute DOMString marginWidth;
  };</pre>

  The <dfn><code>align</code></dfn> and <dfn><code>scrolling</code></dfn> IDL attributes of the
  <code>iframe</code> element must <a>reflect</a> the respective content attributes of the same 
  name.

  The <dfn><code>frameBorder</code></dfn> IDL attribute of the <code>iframe</code> element must 
  <a>reflect</a> the element's <code>frameborder</code> content attribute.

  The <dfn><code>longDesc</code></dfn> IDL attribute of the <code>iframe</code> element must 
  <a>reflect</a> the element's <code>longdesc</code> content attribute, which for the purposes of
  reflection is defined as containing a <a>URL</a>.

  The <dfn><code>marginHeight</code></dfn> IDL attribute of the <code>iframe</code> element must 
  <a>reflect</a> the element's <code>marginheight</code> content attribute.

  The <dfn><code>marginWidth</code></dfn> IDL attribute of the <code>iframe</code> element must 
  <a>reflect</a> the element's <code>marginwidth</code> content attribute.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLImageElement {
    attribute DOMString name;
    attribute DOMString lowsrc;
    attribute DOMString align;
    attribute unsigned long hspace;
    attribute unsigned long vspace;
    attribute DOMString longDesc;

    [TreatNullAs=EmptyString] attribute DOMString border;
  };</pre>

  The <dfn><code>name</code></dfn>, <dfn><code>align</code></dfn>, <dfn><code>border</code></dfn>, 
  <dfn><code>hspace</code></dfn>, and <dfn><code>vspace</code></dfn> IDL attributes of the 
  <code>img</code> element must <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>longDesc</code></dfn> IDL attribute of the <code>img</code> element must 
  <a>reflect</a> the element's <code>longdesc</code> content attribute, which for the purposes of 
  reflection is defined as containing a <a>URL</a>.

  The <dfn><code>lowsrc</code></dfn> IDL attribute of the <code>img</code> element must 
  <a>reflect</a> the element's <code>lowsrc</code> content attribute, which for the purposes of 
  reflection is defined as containing a <a>URL</a>.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLInputElement {
    attribute DOMString align;
    attribute DOMString useMap;
  };</pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>input</code> element must 
  <a>reflect</a> the content attribute of the same name.

  The <dfn><code>useMap</code></dfn> IDL attribute of the <code>input</code> element must 
  <a>reflect</a> the element's <code>usemap</code> content attribute.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLLegendElement {
    attribute DOMString align;
  };</pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>legend</code> element must 
  <a>reflect</a> the content attribute of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLLIElement {
    attribute DOMString type;
  };</pre>

  The <dfn><code>type</code></dfn> IDL attribute of the <code>li</code> element must <a>reflect</a> 
  the content attribute of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLLinkElement {
    attribute DOMString charset;
    attribute DOMString rev;
    attribute DOMString target;
  };</pre>

  The <dfn><code>charset</code></dfn>, <dfn><code>rev</code></dfn>, and 
  <dfn><code>target</code></dfn> IDL attributes of the <code>link</code> element must <a>reflect</a> 
  the respective content attributes of the same name.

  <hr>

  User agents must treat <code>listing</code> elements in a manner equivalent to <code>pre</code>
  elements in terms of semantics and for purposes of rendering.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLMenuElement {
    attribute boolean compact;
  };</pre>

  The <dfn><code>compact</code></dfn> IDL attribute of the <code>menu</code> element must 
  <a>reflect</a> the content attribute of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLMetaElement {
    attribute DOMString scheme;
  };</pre>

  User agents may treat the <code>scheme</code> content attribute on the <code>meta</code> element 
  as an extension of the element's <code>name</code> content attribute when processing a 
  <code>meta</code> element with a <code>name</code> attribute whose value is one that the user 
  agent recognizes as supporting the <code>scheme</code> attribute.

  User agents are encouraged to ignore the <code>scheme</code> attribute and instead process the 
  value given to the metadata name as if it had been specified for each expected value of the 
  <code>scheme</code> attribute.

  <div class="example">

  For example, if the user agent acts on <code>meta</code> elements with <code>name</code> 
  attributes having the value "eGMS.subject.keyword", and knows that the <code>scheme</code> 
  attribute is used with this metadata name, then it could take the <code>scheme</code> attribute 
  into account, acting as if it was an extension of the <code>name</code> attribute. Thus the 
  following two <code>meta</code> elements could be treated as two elements giving values for two 
  different metadata names, one consisting of a combination of "eGMS.subject.keyword" and "LGCL", 
  and the other consisting of a combination of "eGMS.subject.keyword" and "ORLY":

  <pre class="bad">&lt;!-- this markup is invalid -->
  &lt;meta name="eGMS.subject.keyword" scheme="LGCL" content="Abandoned vehicles">
  &lt;meta name="eGMS.subject.keyword" scheme="ORLY" content="Mah car: kthxbye"></pre>

  The suggested processing of this markup, however, would be equivalent to the following:

  <pre>&lt;meta name="eGMS.subject.keyword" content="Abandoned vehicles">
  &lt;meta name="eGMS.subject.keyword" content="Mah car: kthxbye"></pre>

  </div>

  The <dfn><code>scheme</code></dfn> IDL attribute of the <code>meta</code> element must 
  <a>reflect</a> the content attribute of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLObjectElement {
    attribute DOMString align;
    attribute DOMString archive;
    attribute DOMString code;
    attribute boolean declare;
    attribute unsigned long hspace;
    attribute DOMString standby;
    attribute unsigned long vspace;
    attribute DOMString codeBase;
    attribute DOMString codeType;

    [TreatNullAs=EmptyString] attribute DOMString border;
  };</pre>

  The <dfn><code>align</code></dfn>, <dfn><code>archive</code></dfn>, 
  <dfn><code>border</code></dfn>, <dfn><code>code</code></dfn>, <dfn><code>declare</code></dfn>, 
  <dfn><code>hspace</code></dfn>, <dfn><code>standby</code></dfn>, and 
  <dfn><code>vspace</code></dfn> IDL attributes of the <code>object</code> element must 
  <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>codeBase</code></dfn> IDL attribute of the <code>object</code> element must 
  <a>reflect</a> the element's <code>codebase</code> content attribute, which for the purposes of
  reflection is defined as containing a <a>URL</a>.

  The <dfn><code>codeType</code></dfn> IDL attribute of the <code>object</code> element must 
  <a>reflect</a> the element's <code>codetype</code> content attribute.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLOListElement {
    attribute boolean compact;
  };</pre>

  The <dfn><code>compact</code></dfn> IDL attribute of the <code>ol</code> element must 
  <a>reflect</a> the content attribute of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLParagraphElement {
    attribute DOMString align;
  };</pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>p</code> element must <a>reflect</a> 
  the content attribute of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLParamElement {
    attribute DOMString type;
    attribute DOMString valueType;
  };</pre>

  The <dfn><code>type</code></dfn> IDL attribute of the <code>param</code> element must 
  <a>reflect</a> the content attribute of the same name.

  The <dfn><code>valueType</code></dfn> IDL attribute of the <code>param</code> element must 
  <a>reflect</a> the element's <code>valuetype</code> content attribute.

  <hr>

  User agents must treat <code>plaintext</code> elements in a manner equivalent to <code>pre</code> 
  elements in terms of semantics and for purposes of rendering. (The parser has special behavior for 
  this element, though.)

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLPreElement {
    attribute long width;
  };</pre>

  The <dfn><code>width</code></dfn> IDL attribute of the <code>pre</code> element must 
  <a>reflect</a> the content attribute of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLScriptElement {
    attribute DOMString event;
    attribute DOMString htmlFor;
  };</pre>

  The <dfn><code>event</code></dfn> IDL attribute of the <code>script</code> element must reflect 
  the element's <code>event</code> content attribute.

  The <dfn><code>htmlFor</code></dfn> IDL attribute of the <code>script</code> element must reflect 
  the element's <code>for</code> content attribute.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLTableElement {
    attribute DOMString align;
    attribute DOMString border;
    attribute DOMString frame;
    attribute DOMString rules;
    attribute DOMString summary;
    attribute DOMString width;

    [TreatNullAs=EmptyString] attribute DOMString bgColor;
    [TreatNullAs=EmptyString] attribute DOMString cellPadding;
    [TreatNullAs=EmptyString] attribute DOMString cellSpacing;
  };</pre>

  The <dfn><code>align</code></dfn>, <dfn><code>border</code></dfn>, <dfn><code>frame</code></dfn>, 
  <dfn><code>summary</code></dfn>, <dfn><code>rules</code></dfn>, and <dfn><code>width</code></dfn>, 
  IDL attributes of the <code>table</code> element must <a>reflect</a> the respective content 
  attributes of the same name.

  The <dfn><code>bgColor</code></dfn> IDL attribute of the <code>table</code> element must 
  <a>reflect</a> the element's <code>bgcolor</code> content attribute.

  The <dfn><code>cellPadding</code></dfn> IDL attribute of the <code>table</code> element must 
  <a>reflect</a> the element's <code>cellpadding</code> content attribute.

  The <dfn><code>cellSpacing</code></dfn> IDL attribute of the <code>table</code> element must 
  <a>reflect</a> the element's <code>cellspacing</code> content attribute.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLTableSectionElement {
    attribute DOMString align;
    attribute DOMString ch;
    attribute DOMString chOff;
    attribute DOMString vAlign;
  };</pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>tbody</code>, <code>thead</code>, and 
  <code>tfoot</code> elements must <a>reflect</a> the content attribute of the same name.

  The <dfn><code>ch</code></dfn> IDL attribute of the <code>tbody</code>, <code>thead</code>, and 
  <code>tfoot</code> elements must <a>reflect</a> the elements' <code>char</code> content 
  attributes.

  The <dfn><code>chOff</code></dfn> IDL attribute of the <code>tbody</code>, <code>thead</code>, and 
  <code>tfoot</code> elements must <a>reflect</a> the elements' <code>charoff</code> content 
  attributes.

  The <dfn><code>vAlign</code></dfn> IDL attribute of the <code>tbody</code>, <code>thead</code>, 
  and <code>tfoot</code> element must <a>reflect</a> the elements' <code>valign</code> content 
  attributes.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLTableCellElement {
    attribute DOMString align;
    attribute DOMString axis;
    attribute DOMString height;
    attribute DOMString width;

    attribute DOMString ch;
    attribute DOMString chOff;
    attribute boolean noWrap;
    attribute DOMString vAlign;

    [TreatNullAs=EmptyString] attribute DOMString bgColor;
  };</pre>

  The <dfn><code>align</code></dfn>, <dfn><code>axis</code></dfn>, <dfn><code>height</code></dfn>, 
  and <dfn><code>width</code></dfn> IDL attributes of the <code>td</code> and <code>th</code> 
  elements must <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>ch</code></dfn> IDL attribute of the <code>td</code> and <code>th</code> elements 
  must <a>reflect</a> the elements' <code>char</code> content attributes.

  The <dfn><code>chOff</code></dfn> IDL attribute of the <code>td</code> and <code>th</code> 
  elements must <a>reflect</a> the elements' <code>charoff</code> content attributes.

  The <dfn><code>noWrap</code></dfn> IDL attribute of the <code>td</code> and <code>th</code> 
  elements must <a>reflect</a> the elements' <code>nowrap</code> content attributes.

  The <dfn><code>vAlign</code></dfn> IDL attribute of the <code>td</code> and <code>th</code> 
  element must <a>reflect</a> the elements' <code>valign</code> content attributes.

  The <dfn><code>bgColor</code></dfn> IDL attribute of the <code>td</code> and <code>th</code> 
  elements must <a>reflect</a> the elements' <code>bgcolor</code> content attributes.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLTableDataCellElement {
    attribute DOMString abbr;
  };</pre>

  The <dfn><code>abbr</code></dfn> IDL attribute of the <code>td</code> element must <a>reflect</a> 
  the respective content attributes of the same name.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLTableRowElement {
    attribute DOMString align;
    attribute DOMString ch;
    attribute DOMString chOff;
    attribute DOMString vAlign;

    [TreatNullAs=EmptyString] attribute DOMString bgColor;
  };</pre>

  The <dfn><code>align</code></dfn> IDL attribute of the <code>tr</code> element must <a>reflect</a> 
  the content attribute of the same name.

  The <dfn><code>ch</code></dfn> IDL attribute of the <code>tr</code> element must <a>reflect</a> 
  the element's <code>char</code> content attribute.

  The <dfn><code>chOff</code></dfn> IDL attribute of the <code>tr</code> element must <a>reflect</a> 
  the element's <code>charoff</code> content attribute.

  The <dfn><code>vAlign</code></dfn> IDL attribute of the <code>tr</code> element must 
  <a>reflect</a> the element's <code>valign</code> content attribute.

  The <dfn><code>bgColor</code></dfn> IDL attribute of the <code>tr</code> element must 
  <a>reflect</a> the element's <code>bgcolor</code> content attribute.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface HTMLUListElement {
    attribute boolean compact;
    attribute DOMString type;
  };</pre>

  The <dfn><code>compact</code></dfn> and <dfn><code>type</code></dfn> IDL attributes of the 
  <code>ul</code> element must <a>reflect</a> the respective content attributes of the same name.

  <hr>

  User agents must treat <code>xmp</code> elements in a manner equivalent to <code>pre</code>
  elements in terms of semantics and for purposes of rendering. (The parser has special behavior for
  this element though.)

  <hr>

  The <code>blink</code>, <code>bgsound</code>, <code>isindex</code>, <code>multicol</code>,
  <code>nextid</code>, and <code>spacer</code> elements must use the <code>HTMLUnknownElement</code>
  interface.

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface Document {
    [TreatNullAs=EmptyString] attribute DOMString fgColor;
    [TreatNullAs=EmptyString] attribute DOMString linkColor;
    [TreatNullAs=EmptyString] attribute DOMString vlinkColor;
    [TreatNullAs=EmptyString] attribute DOMString alinkColor;
    [TreatNullAs=EmptyString] attribute DOMString bgColor;

    [SameObject] readonly attribute HTMLCollection anchors;
    [SameObject] readonly attribute HTMLCollection applets;

    void clear();
    void captureEvents();
    void releaseEvents();

    [SameObject] readonly attribute HTMLAllCollection all;
  };</pre>

  The attributes of the <code>Document</code> object listed in the first column of the following
  table must <a>reflect</a> the content attribute on <a>the body element</a> with the
  name given in the corresponding cell in the second column on the same row, if <a>the body
  element</a> is a <code>body</code> element (as opposed to a <code>frameset</code> element).
  When there is no <a>body element</a> or if it is a
  <code>frameset</code> element, the attributes must instead return the empty string on getting and
  do nothing on setting.

  <table>
   <thead>
    <tr>
     <th> IDL attribute
     <th> Content attribute
   <tbody>
    <tr>
     <td><dfn><code>fgColor</code></dfn>
     <td><code>text</code>
    <tr>
     <td><dfn><code>linkColor</code></dfn>
     <td><code>link</code>
    <tr>
     <td><dfn><code>vlinkColor</code></dfn>
     <td><code>vlink</code>
    <tr>
     <td><dfn><code>alinkColor</code></dfn>
     <td><code>alink</code>
    <tr>
     <td><dfn><code>bgColor</code></dfn>
     <td><code>bgcolor</code>
  </table>

  <hr>

  The <dfn><code>anchors</code></dfn> attribute must return an <code>HTMLCollection</code> rooted at 
  the <code>Document</code> node, whose filter matches only <code>a</code> elements with 
  <code>name</code> attributes.

  The <dfn><code>applets</code></dfn> attribute must return an <code>HTMLCollection</code> rooted at 
  the <code>Document</code> node, whose filter matches only <code>applet</code> elements.

  The <dfn><code>clear()</code></dfn>, <dfn><code>captureEvents()</code></dfn>, and 
  <dfn><code>releaseEvents()</code></dfn> methods must do nothing.

  <hr>

  The <dfn><code>all</code></dfn> attribute must return an <code>HTMLAllCollection</code> rooted at 
  the <code>Document</code> node, whose filter matches all elements.

  The object returned for <code>all</code> has several unusual behaviors:

  * The user agent must act as if the ToBoolean() operator in JavaScript converts the object
    returned for <code>all</code> to the false value.
  * The user agent must act as if, for the purposes of the <code>==</code> and <code>!=</code> 
    operators in JavaScript, the object returned for <code>all</code> compares as equal to the 
    <code>undefined</code> and <code>null</code> values. (Comparisons using the <code>===</code> 
    operator, and comparisons to other values such as strings or objects, are unaffected.)
  * The user agent must act such that the <code>typeof</code> operator in JavaScript returns the 
    string <code>undefined</code> when applied to the object returned for <code>all</code>.

  <p class="note">
  Note: These requirements are a <a>willful violation</a> of the JavaScript
  specification current at the time of writing (ECMAScript edition 5). The JavaScript specification
  requires that the ToBoolean() operator convert all objects to the true value, and does not have
  provisions for objects acting as if they were <code>undefined</code> for the purposes of
  certain operators. This violation is motivated by a desire for compatibility with two classes of
  legacy content: one that uses the presence of <code>document.all</code>
  as a way to detect legacy user agents, and one that only supports those legacy user agents and
  uses the <code>document.all</code> object without testing for its
  presence first. [[!ECMA-262]]</p>

  <hr>

  <pre class="idl" highlight="webidl">
  partial interface Window {
    void captureEvents();
    void releaseEvents();
  };</pre>

  The <dfn><code>captureEvents()</code></dfn> and <dfn><code>releaseEvents()</code></dfn> methods 
  must do nothing.

  <hr>

  The <code>hgroup</code> element does not have <a>strong native semantics</a> or <a>default 
  implicit ARIA semantics</a>. User agents must not implement accessibility layer semantics for 
  the <code>hgroup</code> element that obfuscates or modifies the semantics of its children.

  </div>

