<h2 id="user-interaction"><dfn>User interaction</dfn></h2>

  <h3 id="the-hidden-attribute"><dfn>The <dfn><code>hidden</code></dfn> attribute</dfn></h3>

  All <a>HTML elements</a> may have the <code>hidden</code> content
  attribute set. The <code>hidden</code> attribute is a <a>boolean
  attribute</a>. When specified on an element, it indicates that the element is not yet, or is no
  longer, directly relevant to the page's current state, or that it is being used to declare content
  to be reused by other parts of the page as opposed to being directly accessed by the user. <span
  class="impl">User agents should not render elements that have the <code>hidden</code> attribute specified. This requirement may be implemented
  indirectly through the style layer. For example, an HTML+CSS user agent could implement these
  requirements <a>using the rules suggested in the Rendering
  section</a>.</span>

  <p class="note">
Because this attribute is typically implemented using CSS, it's also possible to
  override it using CSS. For instance, a rule that applies 'display: block' to all elements will
  cancel the effects of the <code>hidden</code> attribute. Authors therefore
  have to take care when writing their style sheets to make sure that the attribute is still styled
  as expected.
</p>

  <div class="example">

   In the following skeletal example, the attribute is used to hide the Web game's main screen
   until the user logs in:

   <pre highlight="html">
  &lt;h1>The Example Game&lt;/h1>
  &lt;section>
   &lt;h2>Login&lt;/h2>
   &lt;form>
    ...
    &lt;!-- calls login() once the user's credentials have been checked -->
   &lt;/form>
   &lt;script>
    function login() {
      // switch screens
      document.getElementById('login').hidden = true;
      document.getElementById('game').hidden = false;
    }
   &lt;/script>
  &lt;/section>
  &lt;section hidden>
   ...
  &lt;/section>
</pre>

  </div>

  The <code>hidden</code> attribute must not be used to hide content that
  could legitimately be shown in another presentation. For example, it is incorrect to use <code>hidden</code> to hide panels in a tabbed dialog, because the tabbed interface
  is merely a kind of overflow presentation &mdash; one could equally well just show all the form
  controls in one big page with a scrollbar. It is similarly incorrect to use this attribute to hide
  content just from one presentation &mdash; if something is marked <code>hidden</code>, it is hidden from all presentations, including, for instance,
  screen readers.

  Elements that are not themselves <code>hidden</code> must not
  <a>hyperlink</a> to elements that are <code>hidden</code>. The <code>for</code> attributes of <code>label</code> and <code>output</code> elements that are not
  themselves <code>hidden</code> must similarly not refer to elements that are
  <code>hidden</code>. In both cases, such references would cause user
  confusion.

  Elements and scripts may, however, refer to elements that are <code>hidden</code> in other contexts.
  <div class="example">

   For example, it would be incorrect to use the <code>href</code> attribute to link to a
   section marked with the <code>hidden</code>
   attribute. If the content is not applicable or relevant, then there
   is no reason to link to it.

   It would be fine, however, to use the ARIA <code>aria-describedby</code> attribute to
   refer to descriptions that are themselves <code>hidden</code>. While hiding the descriptions
   implies that they are not useful alone, they could be written in
   such a way that they are useful in the specific context of being
   referenced from the images that they describe.

   Similarly, a <code>canvas</code> element with the <code>hidden</code> attribute could be used by a
   scripted graphics engine as an off-screen buffer, and a form
   control could refer to a hidden <code>form</code> element using its
   <code>form</code> attribute.

  </div>

  Accessibility APIs are encouraged to provide a way to expose
  structured content while marking it as hidden in the default view.
  Such content should not be perceivable to users in the normal document
  flow in any modality, whether using Assistive Technology (AT) or
  mainstream User Agents.

  When such features are available, User Agents may use them to
  expose the full semantics of <code>hidden</code>
  elements to AT when appropriate, if such content is referenced
  indirectly by an <a>ID reference</a> or
  <a>valid hash-name reference</a>. This allows ATs to access the
  structure of these <code>hidden</code> elements
  upon user request, while keeping the content hidden in all
  presentations of the normal document flow. Authors who wish to prevent
  user-initiated viewing of a <code>hidden</code>
  element should not reference the element with such a mechanism.

  <p class="auth">Because some User Agents have flattened hidden content when
  exposing such content to AT, authors should not reference <code
  title="attr-hidden">hidden</code> content which would lose essential
  meaning when flattened.</p>

  <div class="example">

   For example, it would be incorrect to use the <code>href</code>
   attribute to link to a section marked with the <code>hidden</code> attribute.
   If the content is not applicable or relevant, then there is no reason to link to it.

   It would be fine, however, to use the ARIA <code>aria-describedby</code> attribute to refer to descriptions that are
   themselves <code>hidden</code>. While hiding the descriptions implies that
   they are not useful alone, they could be written in such a way that they are useful in the
   specific context of being referenced from the images that they describe.

   Similarly, a <code>canvas</code> element with the <code>hidden</code>
   attribute could be used by a scripted graphics engine as an off-screen buffer, and a form control
   could refer to a hidden <code>form</code> element using its <code>form</code> attribute.

  </div>

  Elements in a section hidden by the <code>hidden</code> attribute are still
  active, e.g. scripts and form controls in such sections still execute and submit respectively.
  Only their presentation to the user changes.

  <div class="impl">

  The <dfn><code>hidden</code></dfn> IDL attribute must <a>reflect</a>
  the content attribute of the same name.

  </div>

  <h3 id="inert-subtrees"><dfn>Inert subtrees</dfn></h3>

  <p class="note">
This section <strong>does not</strong> define or create any content attribute
  named "inert". This section merely defines an abstract <em>concept</em> of
  <a>inertness</a>.
</p>

  A node (in particular elements and text nodes) can be marked as <dfn>inert</dfn>. When a node
  is <a>inert</a>, then the user agent must act as if the node was absent for the purposes of
  targeting user interaction events, may ignore the node for the purposes of text search user
  interfaces (commonly known as "find in page"), and may prevent the user from selecting text in
  that node. User agents should allow the user to override the restrictions on search and text
  selection, however.

  <p class="example">

For example, consider a page that consists of just a single <a>inert</a>
  paragraph positioned in the middle of a <code>body</code>. If a user moves their pointing device
  from the <code>body</code> over to the <a>inert</a> paragraph and clicks on the paragraph,
  no <code>mouseover</code> event would be fired, and the <code>mousemove</code> and <code>click</code> events would
  be fired on the <code>body</code> element rather than the paragraph.

</p>

  <p class="note">
When a node is inert, it generally cannot be focused. Inert nodes that are <a>commands</a> will also get disabled.
</p>

  While a <a>browsing context container</a> is marked as <a>inert</a>, its
  <a>nested browsing context</a>'s <a>active document</a>, and all nodes in that
  <code>Document</code>, must be marked as <a>inert</a>.

  An entire <code>Document</code> can be marked as <dfn>blocked by a modal dialog</dfn> <var>subject</var>. While a <code>Document</code> is so marked, every node that is <a>in the <code>Document</code></a>, with the exception of the <var>subject</var> element and its descendants, must be marked <a>inert</a>. (The
  elements excepted by this paragraph can additionally be marked <a>inert</a> through other
  means; being part of a modal dialog does not "protect" a node from being marked
  <a>inert</a>.)

  Only one element at a time can mark a <code>Document</code> as being <a>blocked by a modal
  dialog</a>. When a new <code>dialog</code> is made to <a>block</a> a <code>Document</code>, the previous element, if any, stops blocking the
  <code>Document</code>.

  <p class="note">
The <code>dialog</code> element's <code>showModal()</code> method makes use of this mechanism.
</p>

  <h3 id="activation"><dfn>Activation</dfn></h3>

  Certain elements in HTML have an <a>activation behavior</a>, which means that the user
  can activate them. This triggers a sequence of events dependent on the activation mechanism, and
  normally culminating in a <code>click</code> event<span class="impl">, as
  described below</span>.

  <div class="impl">

  The user agent should allow the user to manually trigger elements that have an <a>activation
  behavior</a>, for instance using keyboard or voice input, or through mouse clicks. When the
  user triggers an element with a defined <a>activation behavior</a> in a manner other than
  clicking it, the default action of the interaction event must be to <a>run synthetic click
  activation steps</a> on the element.

  Each element has a <var>click in progress</var> flag, initially set to false.

  When a user agent is to <dfn>run synthetic click activation steps</dfn> on an element, the user
  agent must run the following steps:

  <ol>

   <li>If the element's <var>click in progress</var> flag is set to true, then abort
   these steps.</li>

   <li>Set the <var>click in progress</var> flag on the element to true.</li>

   <li><a>Run pre-click activation steps</a> on the element.</li>

   <li><a>Fire a <code>click</code> event</a> at the element. If the
   <a>run synthetic click activation steps</a> algorithm was invoked because the <code>click()</code> method was invoked, then the <code>isTrusted</code> attribute must be initialized to false.</li>

   <li>

    If this <code>click</code> event is not canceled, <a>run post-click
    activation steps</a> on the element.

    If the event <em>is</em> canceled, the user agent must <a>run canceled activation
    steps</a> on the element instead.

   </li>

   <li>Set the <var>click in progress</var> flag on the element to false.</li>

  </ol>

  When a pointing device is clicked, the user agent must <a>run authentic click activation
  steps</a> instead of firing the <code>click</code>
  event. When a user agent is to
  <dfn>run authentic click activation steps</dfn> for a given event <var>event</var>, it must
  follow these steps:

  <ol>

   <li>Let <var>target</var> be the element designated by the user (the target of <var>event</var>).</li>

   <li>If <var>target</var> is a <code>canvas</code> element, run the <a>canvas
   <code>MouseEvent</code> rerouting steps</a>. If this changes <var>event</var>'s
   target, then let <var>target</var> be the new target.</li>

   <li>Set the <var>click in progress</var> flag on <var>target</var> to
   true.</li>

   <li>Let <var>e</var> be the <a>nearest activatable element</a> of <var>target</var> (defined below), if any.</li>

   <li>If there is an element <var>e</var>, <a>run pre-click activation steps</a>
   on it.</li>

   <li>

    <a>Dispatch</a> <var>event</var> (the
    required <code>click</code> event) at <var>target</var>.

    If there is an element <var>e</var> and the <code>click</code>
    event is not canceled, <a>run post-click activation steps</a> on element <var>e</var>.

    If there is an element <var>e</var> and the event <em>is</em> canceled, <a>run
    canceled activation steps</a> on element <var>e</var>.

   </li>

   <li>Set the <var>click in progress</var> flag on <var>target</var> to
   false.</li>

  </ol>

  <p class="note">
The algorithms above don't run for arbitrary synthetic events dispatched by author
  script. The <code>click()</code> method can be used to make the <a>run
  synthetic click activation steps</a> algorithm happen programmatically.
</p>

  <p class="note">
Click-focusing behavior (e.g. the focusing of a text field when user clicks in
  one) typically happens before the click, when the mouse button is first depressed, and is
  therefore not discussed here.
</p>

  Given an element <var>target</var>, the <dfn>nearest activatable element</dfn> is the
  element returned by the following algorithm:

  <ol>

   <li>If <var>target</var> has a defined <a>activation behavior</a>, then return
   <var>target</var> and abort these steps.</li>

   <li>If <var>target</var> has a parent element, then set <var>target</var> to
   that parent element and return to the first step.</li>

   <li>Otherwise, there is no <a>nearest activatable element</a>.</li>

  </ol>

  When a user agent is to <dfn>run pre-click activation steps</dfn> on an element, it must run
  the <dfn>pre-click activation steps</dfn> defined for that element, if any.

  When a user agent is to <dfn>run canceled activation steps</dfn> on an element, it must run the
  <dfn>canceled activation steps</dfn> defined for that element, if any.

  When a user agent is to <dfn>run post-click activation steps</dfn> on an element, it must run
  the <dfn>activation behavior</dfn> defined for that element, if any. Activation behaviors can
  refer to the <code>click</code> event that was fired by the steps above
  leading up to this point.

  </div>

  <dl class="domintro">

   <dt><var>element</var> . <code>click</code>()</dt>

   <dd>

    Acts as if the element was clicked.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>click()</code></dfn> method must run the following steps:

  <ol>

   <li>If the element is a form control that is <a>disabled</a>, abort these steps.</li>

   <li><a>Run synthetic click activation steps</a> on the element.</li>

  </ol>

  </div>

  <h3 id="focus"><dfn>Focus</dfn></h3>

  <h4 id="introduction"><dfn>Introduction</dfn></h4>

  <em>This section is non-normative.</em>

  An HTML user interface typically consists of multiple interactive widgets, such as form
  controls, scrollable regions, links, dialog boxes, browser tabs, and so forth. These widgets form
  a hierarchy, with some (e.g. browser tabs, dialog boxes) containing others (e.g. links, form
  controls).

  When interacting with an interface using a keyboard, key input is channeled from the system,
  through the hierarchy of interactive widgets, to an active widget, which is said to be
  <a>focused</a>.

  <div class="example">

   Consider an HTML application running in a browser tab running in a graphical environment.
   Suppose this application had a page with some text fields and links, and was currently showing a
   modal dialog, which itself had a text field and a button.

   The hierarchy of focusable widgets, in this scenario, would include the browser window, which
   would have, amongst its children, the browser tab containing the HTML application. The tab itself
   would have as its children the various links and text fields, as well as the dialog. The dialog
   itself would have as its children the text field and the button.

   <img src="images/focus-tree.png" alt="" width="800" height="450">

   <p>If the widget with <a>focus</a> in this example was the text field in the dialog box, then key
   input would be channeled from the graphical system to &#x2460; the Web browser, then to &#x2461;
   the tab, then to &#x2462; the dialog, and finally to &#x2463; the text field.

  </div>

  Keyboard <em>events</em> are always targeted at this <a>focused</a> element.

  <h4 id="data-model"><dfn>Data model</dfn></h4>

  The term <dfn>focusable area</dfn> is used to refer to regions of the interface that can become
  the target of keyboard input. Focusable areas can be elements, parts of elements, or other regions
  managed by the user agent.

  Each <a>focusable area</a> has a <dfn>DOM anchor</dfn>, which is a <code>Node</code> object
  that represents the position of the <a>focusable area</a> in the DOM. (When the <a>focusable
  area</a> is itself a <code>Node</code>, it is its own <a>DOM anchor</a>.) The <a>DOM anchor</a> is
  used in some APIs as a substitute for the <a>focusable area</a> when there is no other DOM object
  to represent the <a>focusable area</a>.

  The following table describes what objects can be <a>focusable
  areas</a>. The cells in the left column describe objects that can be <a>focusable areas</a>; the cells in the right column describe the <a>DOM
  anchors</a> for those elements. (The cells that span both columns are non-normative examples.)

  <table>
   <thead>
    <tr>
     <th><a>Focusable area</a>
     <th><a>DOM anchor</a>
    <tr>
     <th colspan="2">Examples

   <tbody>
    <tr>
     <th class="data-header" headers="th-fa-area">
     Elements that have their <a>tabindex focus flag</a> set, that are not <a>actually disabled</a>, that are not <a>expressly inert</a>, and that are either <a>being
     rendered</a> or <a>being used as relevant canvas fallback content</a>.
     <td headers="td-fa-1 th-fa-dom-rep">
     The element itself.
    <tr>
     <td headers="td-fa-1 th-fa-examples" colspan="2">
     <p class="example">

<code>iframe</code>, <code>&lt;input
     type=text></code>, sometimes <code>&lt;a href=""></code> (depending on platform
     conventions).

   <tbody>
    <tr>
     <th class="data-header" headers="th-fa-area">
     The shapes of <code>area</code> elements in an <a>image map</a> associated with an
     <code>img</code> element that is <a>being rendered</a> and is not <a>expressly inert</a>.
     <td headers="td-fa-2 th-fa-dom-rep">
     The <code>img</code> element.
    <tr>
     <td headers="td-fa-2 th-fa-examples" colspan="2">
     <div class="example">
      In the following example, the <code>area</code> element creates two shapes, one on each
      image. The <a>DOM anchor</a> of the first shape is the first <code>img</code> element, and the
      <a>DOM anchor</a> of the second shape is the second <code>img</code> element.
      <pre highlight="html">
&lt;map id=wallmap>&lt;area alt="Enter Door" coords="10,10,100,200" href="door.html">&lt;/map>
...
&lt;img src="images/innerwall.jpeg" alt="There is a white wall here, with a door." usemap="#wallmap">
...
&lt;img src="images/outerwall.jpeg" alt="There is a red wall here, with a door." usemap="#wallmap">
</pre>
     </div>

   <tbody>
    <tr>
     <th class="data-header" headers="th-fa-area">
     The user-agent provided subwidgets of elements that are <a>being rendered</a> and are not
     <a>actually disabled</a> or <a>expressly inert</a>.
     <td headers="td-fa-3 th-fa-dom-rep">
     The element for which the <a>focusable area</a> is a subwidget.
    <tr>
     <td headers="td-fa-3 th-fa-examples" colspan=2>
     <p class="example">The <a>controls in the user
     interface that is exposed to the user</a> for a <code>video</code> element, the up and down
     buttons in a spin-control version of <code>&lt;input
     type=number></code>, the two range control widgets in a <code>&lt;input type=range multiple></code>, the part of a
     <code>details</code> element's rendering that enabled the element to be opened or closed using
     keyboard input.

</p>

   <tbody>
    <tr>
     <th class="data-header" headers="th-fa-area">
     The scrollable regions of elements that are <a>being rendered</a> and are not <a>expressly inert</a>.
     <td headers="td-fa-4 th-fa-dom-rep">
     The element for which the box that the scrollable region scrolls was created.
    <tr>
     <td headers="td-fa-4 th-fa-examples" colspan="2">
     <p class="example">
The CSS 'overflow' property's 'scroll' value typically creates a scrollable
     region.
</p>

   <tbody>
    <tr>
     <th class="data-header" headers="th-fa-area">
     The viewport of a <code>Document</code> that is in a <a>browsing context</a> and is not
     <a>inert</a>.
     <td headers="td-fa-5 th-fa-dom-rep">
     The <code>Document</code> for which the viewport was created.
    <tr>
     <td headers="td-fa-5 th-fa-examples" colspan="2">
     <p class="example">
The contents of an <code>iframe</code>.
</p>

   <tbody>
    <tr>
     <th class="data-header" headers="th-fa-area">
     Any other element or part of an element, especially to aid with accessibility or to better
     match platform conventions.
     <td headers="td-fa-6 th-fa-dom-rep">
     The element.
    <tr>
     <td headers="td-fa-6 th-fa-examples" colspan="2">
     <p class="example">
A user agent could make all list item bullets focusable, so that a user can
     more easily navigate lists.
</p>
     <p class="example">
Similarly, a user agent could make all elements with <code>title</code> attributes focusable, so that their advisory information can
     be accessed.
</p>

  </table>

  <p class="note">
A <a>browsing context container</a> (e.g. an
  <code>iframe</code>) is a <a>focusable area</a>, but key events routed to a <a>browsing context
  container</a> get immediately routed to the <a>nested browsing context</a>'s <a>active
  document</a>. Similarly, in sequential focus navigation a <a>browsing context
  container</a> essentially acts merely as a placeholder for its <a>nested browsing
  context</a>'s <a>active document</a>.
</p>

  Each <a>focusable area</a> belongs to a <dfn>control group</dfn>. Each <a>control group</a> has
  an <dfn>owner</dfn>. <a>Control group
  owners</a> are <dfn>control group owner objects</dfn>. The
  following are <a>control group owner objects</a>:

  <ul class="brief">

   <li><code>Document</code> object in <a>browsing contexts</a>.</li>

   <li><code>dialog</code> elements that have an <code>open</code>
   attribute specified and that are <a>being rendered</a>.</li>

  </ul>

  Each <a>control group owner object</a> owns one <a>control group</a> (though that
  group might be empty).

  If the <a>DOM anchor</a> of a <a>focusable area</a> is a <a>control group owner
  object</a>, then that <a>focusable area</a> belongs to that <a>control group owner
  object</a>'s <a>control group</a>. Otherwise, the <a>focusable area</a> belongs to its
  <a>DOM anchor</a>'s nearest ancestor <a>control group owner object</a>.

  <div class="example">

   Thus, a viewport always belongs to the <a>control group</a> of the <code>Document</code>
   for which the viewport was created, an <code>input</code> control belongs to the <a>control
   group</a> of its nearest ancestor <code>dialog</code> or <code>Document</code>, and an image
   map's shapes belong to the nearest ancestor <code>dialog</code> or <code>Document</code> of the
   <code>img</code> elements (not the <code>area</code> elements &mdash; this means one
   <code>area</code> element might create multiple shapes in different <a>control groups</a>).

  </div>

  An element is <dfn>expressly inert</dfn> if it is
  <a>inert</a> but it is not a <a>control group owner object</a> and its nearest
  ancestor <a>control group owner object</a> is not <a>inert</a>.

  One <a>focusable area</a> in each non-empty <a>control group</a> is designated the
  <dfn>focused area of the control group</dfn>. Which control is so designated changes over time,
  based on algorithms in this specification. If a <a>control group</a> is empty, it has no <a>focused area</a>.

  Each <a>control group owner object</a> can also act as the <dfn>manager</dfn> of a <dfn>dialog group</dfn>.

  Each <code>dialog</code> element that has an <code>open</code>
  attribute specified and that is <a>being rendered</a> (i.e. that is a <a>control group
  owner object</a>) and is not <a>expressly inert</a>
  belongs to the <a>dialog group</a> whose <a>manager</a> is
  the <code>dialog</code> element's nearest ancestor <a>control group owner object</a>.

  A <code>dialog</code> is <dfn>expressly inert</dfn> if it is
  <a>inert</a> but its nearest ancestor <a>control group owner object</a> is not.

  If no <code>dialog</code> element has a particular <a>control group owner object</a> as
  its nearest ancestor <a>control group owner object</a>, then that <a>control group owner
  object</a> has no <a>dialog group</a>.

  Each <a>dialog group</a> can have a <code>dialog</code> designated as the <dfn>focused
  dialog of the dialog group</dfn>. Which <code>dialog</code> is so designated changes over time,
  based on algorithms in this specification.

  <hr />

  <a>Focusable areas</a> in <a>control groups</a>
  are ordered relative to the <a>tree order</a> of their <a>DOM
  anchors</a>. <a>Focusable areas</a> with the same <a>DOM anchor</a> in a
  <a>control group</a> are ordered relative to their CSS box's relative positions in a pre-order,
  depth-first traversal of the box tree. [[!CSS]]

  Elements in <a>dialog groups</a> are ordered in <a>tree
  order</a>.

  <hr />

  The <dfn>currently focused area of a top-level browsing context</dfn> at any particular time is
  the <a>focusable area</a> or <code>dialog</code> returned by this algorithm:

  <ol>

   <li>Let <var>candidate</var> be the <code>Document</code> of the <a>top-level
   browsing context</a>.</li>

   <li>

    If <var>candidate</var> has a <a>dialog group</a> with a designated
    <a>focused dialog of the dialog group</a>, then let <var>candidate</var> be the
    designated <a>focused dialog of the dialog group</a>, and redo this step.

    Otherwise, if <var>candidate</var> has a non-empty <a>control group</a>, and the
    designated <a>focused area of the control group</a> is a <a>browsing context
    container</a>, then let <var>candidate</var> be the <a>active document</a> of
    that <a>browsing context container</a>'s <a>nested browsing context</a>, and redo
    this step.

    Otherwise, if <var>candidate</var> has a non-empty <a>control group</a>, let
    <var>candidate</var> be the designated <a>focused area of the control
    group</a>.

   </li>

   <li>Return <var>candidate</var>.</li>

  </ol>

  An element that is the <a>DOM anchor</a> of a <a>focusable area</a> is said to <dfn>gain focus</dfn> when that <a>focusable area</a> becomes the <a>currently
  focused area of a top-level browsing context</a>. When an element is the <a>DOM anchor</a> of a
  <a>focusable area</a> of the <a>currently focused area of a top-level browsing context</a>,
  it is <dfn>focused</dfn>.

  <div class="impl">

  The <dfn>focus chain</dfn> of a <a>focusable area</a> or <a>control group owner
  object</a> <var>subject</var> is the ordered list constructed as follows:

  <ol>

   <li>Let <var>current object</var> be <var>subject</var>.</li>

   <li>Let <var>output</var> be an empty list.</li>

   <li><i>Loop</i>: Append <var>current object</var> to <var>output</var>.</li>

   <li>

    If <var>current object</var> is an <code>area</code> element's shape, append
    that <code>area</code> element to <var>output</var>.

    Otherwise, if <var>current object</var> is a <a>focusable area</a> whose <a>DOM
    anchor</a> is an element that is not <var>current object</var> itself, append that
    <a>DOM anchor</a> element to <var>output</var>.

   </li>

   <li>

    If <var>current object</var> is a <code>dialog</code> object in a <a>dialog group</a>,
    let <var>current object</var> be that <a>dialog group</a>'s <a>manager</a>, and return to the step labeled <i>loop</i>.

    Otherwise, if <var>current object</var> is a <a>focusable area</a>, let <var>current
    object</var> be that <a>focusable area</a>'s <a>control group</a>'s <a>owner</a>, and return to the step labeled <i>loop</i>.

    Otherwise, if <var>current object</var> is a <code>Document</code> in a <a>nested browsing
    context</a>, let <var>current object</var> be its <a>browsing context container</a>,
    and return to the step labeled <i>loop</i>.

   </li>

   <li>

    Return <var>output</var>.

    <p class="note">
The chain starts with <var>subject</var> and (if <var>subject</var> is or can be the <a>currently focused area of a top-level browsing
    context</a>) continues up the focus hierarchy up to the <code>Document</code> of the
    <a>top-level browsing context</a>.
</p>

   </li>

  </ol>

  </div>

  <h4 id="the-tabindex-attribute"><dfn>The <code>tabindex</code> attribute</dfn></h4>

  The <dfn><code>tabindex</code></dfn> content attribute allows authors to
  indicate that an element is supposed to be <a>focusable</a>, and
  whether it is supposed to be reachable using <a>sequential focus navigation</a> and, if so,
  what is to be the relative order of the element for the purposes of sequential focus navigation.
  The name "tab index" comes from the common use of the "tab" key to navigate through the focusable
  elements. The term "tabbing" refers to moving forward through the focusable elements that can be
  reached using sequential focus navigation.

  When the attribute is omitted, the user agent applies defaults. (There is no way to make an
  element that is <a>being rendered</a> be not focusable at all without <a>disabling</a> it or making it <a>inert</a>.)

  The <code>tabindex</code> attribute, if specified, must have a value
  that is a <a>valid integer</a>. Positive numbers specify the relative position of the
  element's <a>focusable areas</a> in the <a>sequential focus
  navigation order</a>, and negative numbers indicate that the control is to be unreachable by
  <a>sequential focus navigation</a>.

  <div class="impl">

  Each element can have a <dfn>tabindex focus flag</dfn> set, as defined
  below. This flag is a factor that contributes towards determining whether an element is a
  <a>focusable area</a>, as described in the previous section.

  If the <code>tabindex</code> attribute is specified on an element, it
  must be parsed using the <a>rules for parsing integers</a>. The attribute's values, or lack
  thereof, must be interpreted as follows:

  <dl>

   <dt>If the attribute is omitted or parsing the value returns an error</dt>

   <dd>

    The user agent should follow platform conventions to determine if the element's
    <a>tabindex focus flag</a> is set and, if so, whether the element and any <a>focusable areas</a> that have the element as their <a>DOM anchor</a> can
    be reached using <a>sequential focus navigation</a>, and if so, what their relative
    position in the <a>sequential focus navigation order</a> is to be.

    Modulo platform conventions, it is suggested that for the following elements, the
    <a>tabindex focus flag</a> be set:

    <ul>

     <li><code>a</code> elements that have an <code>href</code>
     attribute</li>

     <li><code>link</code> elements that have an <code>href</code> attribute</li>

     <li><code>button</code> elements</li>

     <li><code>input</code> elements whose <code>type</code> attribute are
     not in the <a>Hidden</a> state</li>

     <li><code>select</code> elements</li>

     <li><code>textarea</code> elements</li>

     <li><code>menuitem</code> elements</li>

     <li>Elements with a <code>draggable</code> attribute set, if that would
     enable the user agent to allow the user to begin a drag operations for those elements without
     the use of a pointing device</li>

     <li><a>Editing hosts</a></li>

     <li><a>Browsing context containers</a></li>

     <li><a>Sorting interface <code>th</code>
     elements</a></li>

    </ul>

    <p class="note">
One valid reason to ignore the platform conventions and always allow an element
    to be focused (by setting its <a>tabindex focus flag</a>) would be if the user's only
    mechanism for activating an element is through a keyboard action that triggers the focused
    element.
</p>

   </dd>

   <dt>If the value is a negative integer</dt>

   <dd>

    The user agent must set the element's <a>tabindex focus flag</a>, but should omit the
    element from the <a>sequential focus navigation order</a>.

    <p class="note">
One valid reason to ignore the requirement that sequential focus navigation not
    allow the author to lead to the element would be if the user's only mechanism for moving the
    focus is sequential focus navigation. For instance, a keyboard-only user would be unable to
    click on a text field with a negative <code>tabindex</code>, so that
    user's user agent would be well justified in allowing the user to tab to the control
    regardless.
</p>

   </dd>

   <dt>If the value is a zero</dt>

   <dd>

    The user agent must set the element's <a>tabindex focus flag</a>, should allow the
    element and any <a>focusable areas</a> that have the element as their
    <a>DOM anchor</a> to be reached using <a>sequential focus navigation</a>, following
    platform conventions to determine the element's relative position in the <a>sequential focus
    navigation order</a>.

   </dd>

   <dt>If the value is greater than zero</dt>

   <dd>

    The user agent must set the element's <a>tabindex focus flag</a>, should allow the
    element and any <a>focusable areas</a> that have the element as their
    <a>DOM anchor</a> to be reached using sequential focus navigation, and should place the element
    &mdash; referenced as <var>candidate</var> below &mdash; and the aforementioned <a>focusable areas</a> in the <a>sequential focus navigation</a>
    order so that, relative to other <a>focusable areas</a> in the
    <a>sequential focus navigation order</a>, they are:

    <ul>

     <li>before any <a>focusable area</a> whose <a>DOM anchor</a> is an element whose <code>tabindex</code> attribute has been omitted or whose value, when parsed,
     returns an error,</li>

     <li>before any <a>focusable area</a> whose <a>DOM anchor</a> is an element whose <code>tabindex</code> attribute has a value equal to or less than zero,</li>

     <li>after any <a>focusable area</a> whose <a>DOM anchor</a> is an element whose <code>tabindex</code> attribute has a value greater than zero but less than
     the value of the <code>tabindex</code> attribute on <var>candidate</var>,</li>

     <li>after any <a>focusable area</a> whose <a>DOM anchor</a> is an element whose <code>tabindex</code> attribute has a value equal to the value of the <code>tabindex</code> attribute on <var>candidate</var> but that is
     earlier in the document in <a>tree order</a> than <var>candidate</var>,</li>

     <li>before any <a>focusable area</a> whose <a>DOM anchor</a> is an element whose <code>tabindex</code> attribute has a value equal to the value of the <code>tabindex</code> attribute on <var>candidate</var> but that is
     later in the document in <a>tree order</a> than <var>candidate</var>, and</li>

     <li>before any <a>focusable area</a> whose <a>DOM anchor</a> is an element whose <code>tabindex</code> attribute has a value greater than the value of the
     <code>tabindex</code> attribute on <var>candidate</var>.</li>

    </ul>

   </dd>

  </dl>

  An element that has its <a>tabindex focus flag</a> set but does not otherwise have an
  <a>activation behavior</a> defined has an <a>activation behavior</a> that does
  nothing.

  <p class="note">
This means that an element that is only focusable because of its <code>tabindex</code> attribute will fire a <code>click</code> event in response to a non-mouse activation (e.g. hitting the
  "enter" key while the element is <a>focused</a>).
</p>

  An element with the <code>tabindex</code> attribute specified is
  <a>interactive content</a>.

  The <dfn><code>tabIndex</code></dfn> IDL attribute must
  <a>reflect</a> the value of the <code>tabindex</code> content
  attribute. Its default value is 0 for elements that are focusable and &#x2212;1 for elements that
  are not focusable.

  </div>

  <div class="impl">

  <h4 id="processing-model"><dfn>Processing model</dfn></h4>

  The <dfn>focusing steps</dfn> for an object <var>new focus target</var> that is
  either a <a>focusable area</a>, or an element that is not a <a>focusable area</a>, or a
  <a>browsing context</a>, are as follows. They can optionally be run with a <i>fallback target</i>.

  <ol>

   <li>

    If <var>new focus target</var> is neither a <code>dialog</code> element that has an
    <code>open</code> attribute specified and that is <a>being
    rendered</a> (i.e. that is a <a>control group owner object</a>), nor a <a>focusable
    area</a>, then run the first matching set of steps from the following list:

    <dl class="switch">

     <dt>If <var>new focus target</var> is an <code>area</code> element with one or more
     shapes that are <a>focusable areas</a></dt>

     <dd>

      Let <var>new focus target</var> be the shape corresponding to the first
      <code>img</code> element in <a>tree order</a> that uses the image map to which the <code>area</code>
      element belongs.

     </dd>

     <dt>If <var>new focus target</var> is an element with one or more scrollable regions
     that are <a>focusable areas</a></dt>

     <dd>

      Let <var>new focus target</var> be the element's first scrollable region,
      according to a pre-order, depth-first traversal of the box tree. [[!CSS]]

     </dd>

     <dt>If <var>new focus target</var> is the <a>root element</a> of its
     <code>Document</code></dt>

     <dd>

      Let <var>new focus target</var> be the <code>Document</code>'s viewport.

     </dd>

     <dt>If <var>new focus target</var> is a <a>browsing context</a></dt>

     <dd>

      Let <var>new focus target</var> be the <a>browsing context</a>'s
      <a>active document</a>.

     </dd>

     <dt>If <var>new focus target</var> is a <a>browsing context container</a></dt>

     <dd>

      Let <var>new focus target</var> be the <a>browsing context container</a>'s <a>nested browsing context</a>'s
      <a>active document</a>.

     </dd>

     <dt>Otherwise</dt>

     <dd>

      If no <i>fallback target</i> was specified, abort the <a>focusing steps</a>.

      Otherwise, let <var>new focus target</var> be the <i>fallback target</i>.

     </dd>

    </dl>

   </li>

   <li>

    If <var>new focus target</var> is a <a>control group owner object</a> that is
    not a <a>focusable area</a>, but does have a <a>dialog group</a>, and that <a>dialog group</a>
    has a designated <a>focused dialog</a>, then
    let <var>new focus target</var> be the <a>focused dialog of the dialog
    group</a>, and redo this step.

    Otherwise, if <var>new focus target</var> is a <a>control group owner
    object</a> that is not a <a>focusable area</a>, and its <a>control group</a> is not empty,
    then designate <var>new focus target</var> as the <a>focused area of the control
    group</a>, and redo this step.

    Otherwise, if <var>new focus target</var> is a <a>browsing context
    container</a>, then let <var>new focus target</var> be the <a>nested browsing
    context</a>'s <a>active document</a>, and redo this step.

    <p class="note">
A <code>dialog</code> element can be both a <a>control group owner
    object</a> and a <a>focusable area</a>, if it has both an <code>open</code> attribute specified and a <code>tabindex</code> attribute specified and is <a>being
    rendered</a>.
</p>

   </li>

   <li>If <var>new focus target</var> is a <a>focusable area</a> and its <a>DOM
   anchor</a> is <a>inert</a>, then abort these steps.</li>

   <li>If <var>new focus target</var> is the <a>currently focused area of a
   top-level browsing context</a>, then abort these steps.</li>

   <li>Let <var>old chain</var> be the <a>focus chain</a> of the <a>currently focused area of the
   top-level browsing context</a> in which <var>new focus target</var> finds
   itself.</li>

   <li>Let <var>new chain</var> be the <a>focus chain</a> of <var>new
   focus target</var>.</li>

   <li>Run the <a>focus update steps</a> with <var>old chain</var>, <var>new chain</var>, and <var>new focus target</var> respectively.</li>

  </ol>

  User agents must <a>immediately</a> run the <a>focusing steps</a> for a <a>focusable area</a>,
  <code>dialog</code>, or <a>browsing context</a> <var>candidate</var> whenever the
  user attempts to move the focus to <var>candidate</var>.

  The <dfn>unfocusing steps</dfn> for an object <var>old focus target</var> that is
  either a <a>focusable area</a> or an element that is not a <a>focusable area</a> are as
  follows:

  <ol>

   <li>If <var>old focus target</var> is <a>inert</a>, then abort these
   steps.</li>

   <li>

    If <var>old focus target</var> is an <code>area</code> element and one of its shapes is the
    <a>currently focused area of a top-level browsing context</a>, or, if <var>old focus
    target</var> is an element with one or more scrollable regions, and one of them is the
    <a>currently focused area of a top-level browsing context</a>, then let <var>old focus
    target</var> be that <a>currently focused area of a top-level browsing context</a>.

   </li>

   <li>Let <var>old chain</var> be the <a>focus chain</a> of the <a>currently
   focused area of a top-level browsing context</a>.</li>

   <li>If <var>old focus target</var> is not one of the entries in <var>old
   chain</var>, then abort these steps.</li>

   <li>

    If <var>old focus target</var> is a <code>dialog</code> in a <a>dialog group</a>, and
    the <a>dialog group manager</a> has a non-empty <a>control group</a>, then let
    <var>new focus target</var> be the designated <a>focused area of that focus group</a>.

    Otherwise, if <var>old focus target</var> is a <a>focusable area</a>, then let <var>new
    focus target</var> be the first <a>focusable area</a> of its <a>control group</a>
    (if the <a>control group owner</a> is a <code>Document</code>, this will always be a
    viewport).

    Otherwise, let <var>new focus target</var> be null.

   </li>

   <li>If <var>new focus target</var> is not null, then run the <a>focusing
   steps</a> for <var>new focus target</var>.</li>

  </ol>

  When the <a>currently focused area of a top-level browsing context</a> is somehow
  unfocused without another element being explicitly focused in its stead, the user agent must
  <a>immediately</a> run the <a>unfocusing steps</a> for that object.

  <p class="note">
The <a>unfocusing steps</a> do not always result in the focus changing, even
  when applied to the <a>currently focused area of a top-level browsing context</a>. For
  example, if the <a>currently focused area of a top-level browsing context</a> is a viewport,
  then it will usually keep its focus regardless until another <a>focusable area</a> is explicitly
  focused with the <a>focusing steps</a>.
</p>

  <hr />

  When a <a>focusable area</a> is added to an empty <a>control group</a>, it must be designated
  the <a>focused area of the control group</a>.

  When a <a>dialog group</a> is formed, if the <a>dialog group manager</a> has an empty
  <a>control group</a>, the first non-<a>inert</a> <code>dialog</code> in the <a>dialog
  group</a>, if any, or else the first <code>dialog</code> in the <a>dialog group</a> regardless of
  <a>inertness</a>, must be designated the <a>focused dialog of the dialog
  group</a>.

  <dfn>Focus fixup rule one</dfn>: When the designated <a>focused area of a control group</a> is removed from that <a>control group</a> in
  some way (e.g. it stops being a <a>focusable area</a>, it is removed from the DOM, it
  becomes <a>expressly inert</a>, etc), and the <a>control
  group</a> is still not empty: designate the first non-<a>inert</a> <a>focused area</a> in that <a>control group</a> to be the new
  <a>focused area of the control group</a>, if any; if they are all <a>inert</a>, then
  designate the first <a>focused area</a> in that
  <a>control group</a> to be the new <a>focused area of the control group</a> regardless
  of <a>inertness</a>. If such a removal instead results in the <a>control
  group</a> being empty, then there is simply no longer a <a>focused area of the control
  group</a>.

  <p class="example">
For example, this might happen because an element is removed from its
  <code>Document</code>, or has a <code>hidden</code> attribute added. It might
  also happen to an <code>input</code> element when the element gets <a>disabled</a>.
</p>

  <dfn>Focus fixup rule two</dfn>: When a <a>dialog group</a> has no designed <a>focused
  dialog of the dialog group</a>, and its <a>dialog group manager</a>'s <a>control
  group</a> changes from being non-empty to being empty, the first non-<a>inert</a>
  <code>dialog</code> in the <a>dialog group</a>, if any, or else the first <code>dialog</code> in
  the <a>dialog group</a> regardless of <a>inertness</a>, must be designated
  the <a>focused dialog of the dialog group</a>.

  <dfn>Focus fixup rule three</dfn>: When the designated <a>focused dialog of a dialog group</a> is removed from that <a>dialog group</a> in
  some way (e.g. it stops <a>being rendered</a>, it loses its <code>open</code> attribute, it becomes <a>expressly inert</a>, etc), and there is still a <a>dialog group</a> (because the
  <code>dialog</code> in question was not the last <code>dialog</code> in that <a>dialog group</a>):
  if the <a>dialog group</a>'s <a>manager</a>'s <a>control
  group</a> is non-empty, let there be no designated <a>focused dialog of the dialog group</a>
  any more; otherwise (in the case that the <a>control group</a> is empty), designate the first
  non-<a>inert</a> <code>dialog</code> in the <a>dialog group</a> to be the <a>focused
  dialog of the dialog group</a>, or, if they are all <a>inert</a>, designate the first
  <code>dialog</code> in the <a>dialog group</a> to be the <a>focused dialog of the dialog
  group</a> regardless of <a>inertness</a>.

  When the <a>currently focused area of a top-level browsing context</a> was a <a>focusable
  area</a> but stops being a <a>focusable area</a>, or when it was a <code>dialog</code> in a
  <a>dialog group</a> and stops being part of that <a>dialog group</a>, or when it
  starts being <a>inert</a>, the user agent must run the following steps:

  <ol>

   <li>Let <var>old focus target</var> be whatever the <a>currently focused area of the top-level browsing
   context</a> was immediately before this algorithm became applicable (e.g. before the element
   was disabled, or the dialog was closed, or whatever caused this algorithm to run).</li>

   <li>Let <var>old chain</var> be the <a>focus chain</a> of the <a>currently focused area of the
   top-level browsing context</a> at the same time.</li>

   <li>Make sure that the changes implied by the focus fixup rules <a>one</a>, <a>two</a>, and <a>three</a> above are applied.</li>

   <li>Let <var>new focus target</var> be the <a>currently focused area of a
   top-level browsing context</a>.</li>

   <li>If <var>old focus target</var> and <var>new focus target</var> are the
   same, abort these steps.</li>

   <li>Let <var>new chain</var> be the <a>focus chain</a> of <var>new
   focus target</var>.</li>

   <li>Run the <a>focus update steps</a> with <var>old chain</var>, <var>new chain</var>, and <var>new focus target</var> respectively.</li>

  </ol>

  <hr />

  The <dfn>focus update steps</dfn>, given an <var>old chain</var>, a <var>new chain</var>, and a <var>new focus target</var> respectively, are as
  follows:

  <ol>

   <li>Unset the <a>sequential focus navigation starting point</a>.</li>

   <li>If the last entry in <var>old chain</var> and the last entry in <var>new chain</var> are the same, pop the last entry from <var>old chain</var>
   and the last entry from <var>new chain</var> and redo this step.</li>

   <li>

    For each entry <var>entry</var> in <var>old chain</var>, in order, run
    these substeps:

    <ol>

     <li>If <var>entry</var> is an <code>input</code>
     element, and the <code>change</code> event <a>applies</a> to the element, and the element does not have a
     defined <a>activation behavior</a>, and the user has changed the element's <a>value</a> or its list of <a>selected files</a> while the control was focused
     without committing that change, then <a>fire a simple event</a> that bubbles named <code>change</code> at the element.

     <li>

      If <var>entry</var> is an element, let <var>blur event target</var> be
      <var>entry</var>.

      If <var>entry</var> is a <code>Document</code> object, let <var>blur
      event target</var> be that <code>Document</code> object's <code>Window</code> object.

      Otherwise, let <var>blur event target</var> be null.

     </li>

     <li>If <var>entry</var> is the last entry in <var>old chain</var>, and
     <var>entry</var> is an <code>Element</code>, and the last entry in <var>new
     chain</var> is also an <code>Element</code>, then let <var>related blur target</var>
     be the last entry in <var>new chain</var>. Otherwise, let <var>related blur
     target</var> be null.</li>

     <li>

      If <var>blur event target</var> is not null, <a>fire a focus event</a>
      named <code>blur</code> at <var>blur event target</var>, with
      <var>related blur target</var> as the related target.

      <p class="note">
In some cases, e.g. if <var>entry</var> is an <code>area</code>
      element's shape, a scrollable region, or a viewport, no event is fired.
</p>

     </li>

    </ol>

   </li>

   <li>Apply any relevant platform-specific conventions for focusing <var>new focus
   target</var>. (For example, some platforms select the contents of a text field when that field is
   focused.)</li>

   <li>

    For each entry <var>entry</var> in <var>new chain</var>, in reverse
    order, run these substeps:

    <ol>

     <li>If <var>entry</var> is a <code>dialog</code> element: Let <var>entry</var> be the designated <a>focused dialog of its dialog group</a>.</li>

     <li>

      If <var>entry</var> is a <a>focusable area</a>: Designate <var>entry</var> as the <a>focused area of the control group</a>. If its <a>control
      group</a>'s <a>owner</a> is also a <a>dialog group
      manager</a>, then let there be no designated <a>focused dialog</a> in that <a>dialog group</a>.

      <p class="note">
It is possible for <var>entry</var> to be both a <code>dialog</code>
      element and a <a>focusable area</a>, in which case it is its own <a>control group
      owner</a>.
</p>

     </li>

     <li>

      If <var>entry</var> is an element, let <var>focus event target</var> be
      <var>entry</var>.

      If <var>entry</var> is a <code>Document</code> object, let <var>focus
      event target</var> be that <code>Document</code> object's <code>Window</code> object.

      Otherwise, let <var>focus event target</var> be null.

     </li>

     <li>If <var>entry</var> is the last entry in <var>new chain</var>, and
     <var>entry</var> is an <code>Element</code>, and the last entry in <var>old
     chain</var> is also an <code>Element</code>, then let <var>related focus target</var>
     be the last entry in <var>old chain</var>. Otherwise, let <var>related
     focus target</var> be null.</li>

     <li>

      If <var>focus event target</var> is not null, <a>fire a focus event</a>
      named <code>focus</code> at <var>focus event target</var>, with
      <var>related focus target</var> as the related target.

      <p class="note">
In some cases, e.g. if <var>entry</var> is an <code>area</code>
      element's shape, a scrollable region, or a viewport, no event is fired.
</p>

     </li>

    </ol>

   </li>

  </ol>

  When a user agent is required to <dfn>fire a focus event</dfn> named <var>e</var> at
  an element <var>t</var> and with a given related target <var>r</var>, the user
  agent must create a <a>trusted</a> <code>FocusEvent</code>
  object, initialize it to have the given name <var>e</var>, to not bubble, to not be
  cancelable, and to have the <code>relatedTarget</code>
  attribute initialized to <var>r</var>, the <code>view</code> attribute initialized to the <code>Window</code> object of the <code>Document</code> object of <var>t</var>, and the <code>detail</code> attribute initialized to 0, and must then <a>dispatch</a> the newly created <code>FocusEvent</code> object
  at the specified target element <var>t</var>.

  <hr />

  When a key event is to be routed in a <a>top-level browsing context</a>, the user agent
  must run the following steps:

  <ol>

   <li>Let <var>target area</var> be the <a>currently focused area of the top-level browsing
   context</a>.</li>

   <li>If <var>target area</var> is a <a>focusable area</a>, let <var>target
   node</var> be <var>target area</var>'s <a>DOM anchor</a>. Otherwise, <var>target area</var> is a <code>dialog</code>; let <var>target node</var> be
   <var>target area</var>.</li>

   <li>

    If <var>target node</var> is a <code>Document</code> that has a <a>body element</a>, then let <var>target node</var> be <a>the body
    element</a> of that <code>Document</code>.

    Otherwise, if <var>target node</var> is a <code>Document</code> that has a
    <a>root element</a>, then let <var>target node</var> be the <a>root
    element</a> of that <code>Document</code>.

   </li>

   <li>

    If <var>target node</var> is not <a>inert</a>, fire the event at <var>target node</var>.

    <p class="note">
It is possible for the <a>currently focused area of a top-level browsing
    context</a> to be <a>inert</a>, for example if a <a>modal dialog is shown</a>, and then that <code>dialog</code>
    element is made <a>inert</a>. It is likely to be the result of a logic error in the
    application, though.
</p>

   </li>

   <li>If the event was not canceled, then let <var>target area</var> handle the key
   event. This might include <a>running synthetic
   click activation steps</a> for <var>target node</var>.</li>

  </ol>

  <hr />

  The <dfn>has focus steps</dfn>, given a <code>Document</code> object <var>target</var>, are
  as follows:

  <ol>

   <li>Let <var>candidate</var> be the <code>Document</code> of the <a>top-level browsing
   context</a>.</li>

   <li>If <var>candidate</var> is <var>target</var>, return true and abort these steps.</li>

   <li>

    If <var>candidate</var> has a <a>dialog group</a> with a designated <a>focused
    dialog of the dialog group</a>, then let <var>candidate</var> be the designated
    <a>focused dialog of the dialog group</a>, and redo this step.

    Otherwise, if <var>candidate</var> has a non-empty <a>control group</a>, and the
    designated <a>focused area of the control group</a> is a <a>browsing context
    container</a>, and the <a>active document</a> of that <a>browsing context
    container</a>'s <a>nested browsing context</a> is <var>target</var>, then
    return true and abort these steps.

    Otherwise, if <var>candidate</var> has a non-empty <a>control group</a>, and the
    designated <a>focused area of the control group</a> is a <a>browsing context
    container</a>, then let <var>candidate</var> be the <a>active document</a> of
    that <a>browsing context container</a>'s <a>nested browsing context</a>, and redo
    this step.

    Otherwise, return false and abort these steps.

   </li>

  </ol>

  <h4 id="sequential-focus-navigation"><dfn><dfn>Sequential focus navigation</dfn></dfn></h4>

  Each <a>control group</a> has a <dfn>sequential focus navigation order</dfn>, which orders some
  or all of the <a>focusable areas</a> in the <a>control group</a>
  relative to each other. The order in the <a>sequential focus navigation order</a> does not
  have to be related to the order in the <a>control group</a> itself. If a <a>focusable area</a> is
  omitted from the <a>sequential focus navigation order</a> of its <a>control group</a>, then
  it is unreachable via <a>sequential focus navigation</a>.

  There can also be a <dfn>sequential focus navigation starting point</dfn>. It is initially
  unset. The user agent may set it when the user indicates that it should be moved.

  <p class="example">
For example, the user agent could set it to the position of the user's click if
  the user clicks on the document contents.
</p>

  When the user requests that focus move from the <a>currently focused area of a top-level
  browsing context</a> to the next or previous <a>focusable area</a> (e.g. as the default action
  of pressing the <kbd>tab</kbd> key), or when the user requests that focus sequentially move to a
  <a>top-level browsing context</a> in the first place (e.g. from the browser's location bar),
  the user agent must use the following algorithm:

  <ol>

   <li>Let <var>starting point</var> be the <a>currently focused area of a top-level
   browsing context</a>, if the user requested to move focus sequentially from there, or else the
   <a>top-level browsing context</a> itself, if the user instead requested to move focus from
   outside the <a>top-level browsing context</a>.</li>

   <li>If there is a <a>sequential focus navigation starting point</a> defined and it is
   inside <var>starting point</var>, then let <var>starting point</var> be the <a>sequential
   focus navigation starting point</a> instead.</li>

   <li>

    Let <var>direction</var> be <i>forward</i> if the user requested the <em>next</em>
    control, and <i>backward</i> if the user requested the previous control.

    <p class="note">
Typically, pressing <kbd>tab</kbd> requests the next control, and pressing
    <kbd><kbd>shift</kbd>+<kbd>tab</kbd></kbd> requests the previous control.
</p>

   </li>

   <li>

    <i>Loop</i>: Let <var>selection mechanism</var> be <i>sequential</i> if the <var>starting
    point</var> is a <a>browsing context</a> or if <var>starting point</var> is in its
    <a>control group</a>'s <a>sequential focus navigation order</a>.

    Otherwise, <var>starting point</var> is not in its <a>control group</a>'s
    <a>sequential focus navigation order</a>; let <var>selection mechanism</var> be
    <i>DOM</i>.

   </li>

   <li>Let <var>candidate</var> be the result of running the <a>sequential navigation search
   algorithm</a> with <var>starting point</var>, <var>direction</var>, and <var>selection
   mechanism</var> as the arguments.</li>

   <li>If <var>candidate</var> is not null, then run the <a>focusing steps</a> for
   <var>candidate</var> and abort these steps.</li>

   <li>Otherwise, unset the <a>sequential focus navigation starting point</a>.</li>

   <li>

    If <var>starting point</var> is the <a>top-level browsing context</a>, or a
    <a>focusable area</a> in the <a>top-level browsing context</a>, the user agent
    should transfer focus to its own controls appropriately (if any), honouring
    <var>direction</var>, and then abort these steps.

    <p class="example">
For example, if <var>direction</var> is <i>backward</i>, then the last
    focusable control before the browser's rendering area would be the control to focus.
</p>

    If the user agent has no focusable controls &mdash; a kiosk-mode browser, for instance
    &mdash;
    then the user agent may instead restart these steps with the <var>starting point</var> being the
    <a>top-level browsing context</a> itself.

   </li>

   <li>Otherwise, <var>starting point</var> is a <a>focusable area</a> in a
   <a>nested browsing context</a>. Let <var>starting point</var> be that
   <a>nested browsing context</a>'s <a>browsing context container</a>, and return to the
   step labeled <i>loop</i>.

   </li>

  </ol>

  The <dfn>sequential navigation search algorithm</dfn> consists of the following steps. This
  algorithm takes three arguments: <var>starting point</var>, <var>direction</var>,
  and <var>selection mechanism</var>.

  <ol>

   <li>

    Pick the appropriate cell from the following table, and follow the instructions in that
    cell.

    The appropriate cell is the one that is from the column whose header describes <var>direction</var> and from the first row whose header describes <var>starting point</var> and <var>selection mechanism</var>.

    <table>
     <thead>
      <tr>
       <th>
       <th> <var>direction</var> is <i>forward</i>
       <th> <var>direction</var> is <i>backward</i>
     <tbody>
      <tr>
       <th><var>starting point</var> is a <a>browsing context</a>
       <td>Let <var>candidate</var> be the first <a>suitable sequentially focusable area</a> in <var>starting point</var>'s <a>active document</a>'s <a>primary control group</a>, if any; or else null
       <td>Let <var>candidate</var> be the last <a>suitable sequentially focusable area</a> in <var>starting point</var>'s <a>active document</a>'s <a>primary control group</a>, if any; or else null
      <tr>
       <th><var>selection mechanism</var> is <i>DOM</i>
       <td>Let <var>candidate</var> be the first <a>suitable sequentially focusable area</a> in the <a>home control group</a> following <var>starting point</var>, if any; or else null
       <td>Let <var>candidate</var> be the last <a>suitable sequentially focusable area</a> in the <a>home control group</a> preceding <var>starting point</var>, if any; or else null
      <tr>
       <th><var>selection mechanism</var> is <i>sequential</i>
       <td>Let <var>candidate</var> be the first <a>suitable sequentially focusable area</a> in the <a>home sequential focus navigation order</a> following <var>starting point</var>, if any; or else null
       <td>Let <var>candidate</var> be the last <a>suitable sequentially focusable area</a> in the <a>home sequential focus navigation order</a> preceding <var>starting point</var>, if any; or else null

    </table>

    A <dfn>suitable sequentially focusable area</dfn> is a <a>focusable area</a> whose <a>DOM
    anchor</a> is not <a>inert</a> and that is in its <a>control group</a>'s <a>sequential
    focus navigation order</a>.

    The <dfn>primary control group</dfn> of a <a>control group owner object</a> <var>X</var> is the <a>control group</a> of <var>X</var> if <var>X</var> has no <a>dialog group</a> or if its <a>dialog group</a> has no
    designated <a>focused dialog of the dialog group</a>, otherwise, it is the <a>primary
    control group</a> of <var>X</var>'s <a>dialog group</a>'s designated
    <a>focused dialog of the dialog group</a>.

    The <dfn>home control group</dfn> is the <a>control group</a> to which <var>starting point</var> belongs.

    The <dfn>home sequential focus navigation order</dfn> is the <a>sequential focus
    navigation order</a> to which <var>starting point</var> belongs.

    <p class="note">
The <a>home sequential focus navigation order</a> is the <a>home
    control group</a>'s <a>sequential focus navigation order</a>, but is only used when the
    <var>starting point</var> is in that <a>sequential focus navigation order</a>
    (when it's not, <var>selection mechanism</var> will be <i>DOM</i>).
</p>

   </li>

   <li>

    If <var>candidate</var> is a <a>browsing context container</a>, then let <var>new candidate</var> be the result of running the <a>sequential navigation search
    algorithm</a> with <var>candidate</var>'s <a>nested browsing context</a> as
    the first argument, <var>direction</var> as the second, and <i>sequential</i>
    as the third.

    If <var>new candidate</var> is null, then let <var>starting point</var>
    be <var>candidate</var>, and return to the top of this algorithm. Otherwise, let <var>candidate</var> be <var>new candidate</var>.

   </li>

   <li>Return <var>candidate</var>.</li>

  </ol>

  </div>

  <h4 id="focus-management-apis"><dfn>Focus management APIs</dfn></h4>

  <dl class="domintro">

   <dt><var>document</var> . <code>activeElement</code></dt>

   <dd>

    Returns the deepest element in the document through which or to which key events are being
    routed. This is, roughly speaking, the focused element in the document.

    For the purposes of this API, when a <a>child browsing context</a> is focused, its
    <a>browsing context container</a> is <a>focused</a> in the
    <a>parent browsing context</a>. For example, if the user moves the focus to a text field
    in an <code>iframe</code>, the <code>iframe</code> is the element returned by the <code>activeElement</code> API in the <code>iframe</code>'s
    <a>node document</a>.

   </dd>

   <dt><var>document</var> . <code>hasFocus</code>()</dt>

   <dd>

    Returns true if key events are being routed through or to the document; otherwise, returns
    false. Roughly speaking, this corresponds to the document, or a document nested inside this
    one, being focused.

   </dd>

   <dt><var>window</var> . <code>focus</code>()</dt>

   <dd>

    Moves the focus to the window's <a>browsing context</a>, if any.

   </dd>

   <dt><var>element</var> . <code>focus</code>()</dt>

   <dd>

    Moves the focus to the element.

    If the element is a <a>browsing context container</a>, moves the focus to the <a>nested browsing context</a> instead.

   </dd>

   <dt><var>element</var> . <code>blur</code>()</dt>

   <dd>

    Moves the focus to the viewport. Use of this method is discouraged; if you want to focus the
    viewport, call the <code>focus()</code> method on the <code>Document</code>'s root element.

    Do not use this method to hide the focus ring if you find the focus ring unsightly. Instead,
    use a CSS rule to override the 'outline' property, and provide a different way to show what
    element is focused. Be aware that if an alternative focusing style isn't made available, the
    page will be significantly less usable for people who primarily navigate pages using a keyboard,
    or those with reduced vision who use focus outlines to help them navigate the page.

    <div class="example">

     For example, to hide the outline from links and instead use a yellow background to indicate
     focus, you could use:

     <pre highlight="css">:link:focus, :visited:focus { outline: none; background: yellow; color: black; }</pre>

    </div>

    Do not use this method to hide the focus ring. Do not use any
    other method that hides the focus ring from keyboard users, in
    particular do not use a CSS rule to override the 'outline'
    property. Removal of the focus ring leads to serious accessibility
    issues for users who navigate and interact with interactive
    content using the keyboard.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>activeElement</code></dfn> attribute on
  <code>Document</code> objects must return the value returned by the following steps:

  <ol>

   <li>Let <var>candidate</var> be the <code>Document</code> on which the method was
   invoked.</li>

   <li>If <var>candidate</var> has a <a>dialog group</a> with a designated
   <a>focused dialog of the dialog group</a>, then let <var>candidate</var> be the
   designated <a>focused dialog of the dialog group</a>, and redo this step.</li>

   <li>If <var>candidate</var> has a non-empty <a>control group</a>, let <var>candidate</var> be the designated <a>focused area of the control
   group</a>.

   </li>

   <li>If <var>candidate</var> is a <a>focusable area</a>, let <var>candidate</var> be <var>candidate</var>'s <a>DOM anchor</a>.</li>

   <li>

    If <var>candidate</var> is a <code>Document</code> that has a <a>body element</a>, then let <var>candidate</var> be <a>the body
    element</a> of that <code>Document</code>.

    Otherwise, if <var>candidate</var> is a <code>Document</code> that has a <a>root
    element</a>, then let <var>candidate</var> be the <a>root element</a> of that
    <code>Document</code>.

    Otherwise, if <var>candidate</var> is a <code>Document</code>, then let <var>candidate</var> be null.

   </li>

   <li>Return <var>candidate</var>.</li>

  </ol>

  The <dfn><code>hasFocus()</code></dfn> method on the
  <code>Document</code> object, when invoked, must return the result of running the <a>has focus
  steps</a> with the <code>Document</code> object as the argument.

  The <dfn><code>focus()</code></dfn> method on the <code>Window</code>
  object, when invoked, must run the <a>focusing steps</a> with the <code>Window</code>
  object's <a>browsing context</a>. Additionally, if this <a>browsing context</a> is a
  <a>top-level browsing context</a>, user agents are encouraged to trigger some sort of
  notification to indicate to the user that the page is attempting to gain focus.

  The <dfn><code>blur()</code></dfn> method on the <code>Window</code>
  object, when invoked, provides a hint to the user agent that the script believes the user probably
  is not currently interested in the contents of the <a>browsing context</a> of the
  <code>Window</code> object on which the method was invoked, but that the contents might become
  interesting again in the future.

  User agents are encouraged to ignore calls to this <code>blur()</code>
  method entirely.

  <p class="note">
Historically, the <code>focus()</code> and <code>blur()</code> methods actually affected the system-level focus of the
  system widget (e.g. tab or window) that contained the <a>browsing context</a>, but hostile
  sites widely abuse this behavior to the user's detriment.
</p>

  The <dfn><code>focus()</code></dfn> method on elements, when invoked, must
  run the following algorithm:

  <ol>

   <li>If the element is marked as <i>locked for focus</i>, then abort these steps.</li>

   <li>Mark the element as <dfn>locked for focus</dfn>.</li>

   <li>Run the <a>focusing steps</a> for the element.</li>

   <li>Unmark the element as <i>locked for focus</i>.</li>

  </ol>

  The <dfn><code>blur()</code></dfn> method, when invoked, should run the
  <a>unfocusing steps</a> for the element on which the method was called. User agents may
  selectively or uniformly ignore calls to this method for usability reasons.

  <p class="example">
For example, if the <code>blur()</code> method is unwizely
  being used to remove the focus ring for aesthetics reasons, the page would become unusable by
  keyboard users. Ignoring calls to this method would thus allow keyboard users to interact with the
  page.
</p>

  </div>

  <h3 id="assigning-keyboard-shortcuts"><dfn>Assigning keyboard shortcuts</dfn></h3>

  <h4 id="introduction"><dfn>Introduction</dfn></h4>

  <em>This section is non-normative.</em>

  Each element that can be activated or focused can be assigned a single key combination to
  activate it, using the <code>accesskey</code> attribute.

  The exact shortcut is determined by the user agent, based on information about the user's
  keyboard, what keyboard shortcuts already exist on the platform, and what other shortcuts have
  been specified on the page, using the information provided in the <code>accesskey</code> attribute as a guide.

  In order to ensure that a relevant keyboard shortcut is available on a wide variety of input
  devices, the author can provide a number of alternatives in the <code>accesskey</code> attribute.

  Each alternative consists of a single character, such as a letter or digit.

  User agents can provide users with a list of the keyboard shortcuts, but authors are encouraged
  to do so also. The <code>accessKeyLabel</code> IDL attribute returns a
  string representing the actual key combination assigned by the user agent.

  <div class="example">

   In this example, an author has provided a button that can be invoked using a shortcut key. To
   support full keyboards, the author has provided "C" as a possible key. To support devices
   equipped only with numeric keypads, the author has provided "1" as another possibly key.

   <pre highlight="html">
&lt;input type=button value=Collect onclick="collect()"
       <strong>accesskey="C 1"</strong> id=c>
</pre>

  </div>

  <div class="example">

   To tell the user what the shortcut key is, the author has this script here opted to explicitly
   add the key combination to the button's label:

   <pre highlight="javascript">function addShortcutKeyLabel(button) {
<strong>  if (button.accessKeyLabel != '')
    button.value += ' (' + button.accessKeyLabel + ')';</strong>
}
addShortcutKeyLabel(document.getElementById('c'));</pre>

   Browsers on different platforms will show different labels, even for the same key combination,
   based on the convention prevalent on that platform. For example, if the key combination is the
   Control key, the Shift key, and the letter C, a Windows browser might display
   "<samp>Ctrl+Shift+C</samp>", whereas a Mac browser might display "<samp>^&#x21E7;C</samp>", while
   an Emacs browser might just display "<samp>C-C</samp>". Similarly, if the key combination is the
   Alt key and the Escape key, Windows might use "<samp>Alt+Esc</samp>", Mac might use
   "<samp>&#x2325;&#x238B;</samp>", and an Emacs browser might use "<samp>M-ESC</samp>" or
   "<samp>ESC ESC</samp>".

   In general, therefore, it is unwize to attempt to parse the value returned from the <code>accessKeyLabel</code> IDL attribute.

  </div>

  <h4 id="the-accesskey-attribute"><dfn>The <dfn><code>accesskey</code></dfn> attribute</dfn></h4>

  All <a>HTML elements</a> may have the <code>accesskey</code>
  content attribute set. The <code>accesskey</code> attribute's value is used
  by the user agent as a guide for creating a keyboard shortcut that activates or focuses the
  element.

  If specified, the value must be an <a>ordered set of unique space-separated tokens</a>
  that are <a>case-sensitive</a>, each of which must be exactly one Unicode code point in
  length.

  <div class="example">

   In the following example, a variety of links are given with access keys so that keyboard users
   familiar with the site can more quickly navigate to the relevant pages:

   <pre highlight="html">
&lt;nav>
 &lt;p>
  &lt;a title="Consortium Activities" accesskey="A" href="/Consortium/activities">Activities&lt;/a> |
  &lt;a title="Technical Reports and Recommendations" accesskey="T" href="/TR/">Technical Reports&lt;/a> |
  &lt;a title="Alphabetical Site Index" accesskey="S" href="/Consortium/siteindex">Site Index&lt;/a> |
  &lt;a title="About This Site" accesskey="B" href="/Consortium/">About Consortium&lt;/a> |
  &lt;a title="Contact Consortium" accesskey="C" href="/Consortium/contact">Contact&lt;/a>
 &lt;/p>
&lt;/nav>
</pre>

  </div>

  <div class="example">

   In the following example, the search field is given two possible access keys, "s" and "0" (in
   that order). A user agent on a device with a full keyboard might pick <kbd><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd></kbd> as the shortcut key,
   while a user agent on a small device with just a numeric keypad might pick just the plain
   unadorned key <kbd><kbd>0</kbd></kbd>:

   <pre highlight="html">
&lt;form action="/search">
 &lt;label>Search: &lt;input type="search" name="q" accesskey="s 0">&lt;/label>
 &lt;input type="submit">
&lt;/form>
</pre>

  </div>

  <div class="example">

   In the following example, a button has possible access keys described. A script then tries to
   update the button's label to advertise the key combination the user agent selected.

   <pre highlight="html">
&lt;input type=submit accesskey="N @ 1" value="Compose">
...
&lt;script>
 function labelButton(button) {
   if (button.accessKeyLabel)
     button.value += ' (' + button.accessKeyLabel + ')';
 }
 var inputs = document.getElementsByTagName('input');
 for (var i = 0; i &lt; inputs.length; i += 1) {
   if (inputs[i].type == "submit")
     labelButton(inputs[i]);
 }
&lt;/script>
</pre>

   On one user agent, the button's label might become "<samp>Compose (&#x2318;N)</samp>". On
   another, it might become "<samp>Compose (Alt+&#x21E7;+1)</samp>". If the user agent doesn't
   assign a key, it will be just "<samp>Compose</samp>". The exact string depends on what the
   <a>assigned access key</a> is, and on how the user agent represents that key
   combination.

  </div>

  <div class="impl">

  <h4 id="processing-model"><dfn>Processing model</dfn></h4>

  An element's <dfn>assigned access key</dfn> is a key combination derived from the element's
  <code>accesskey</code> content attribute. Initially, an element must not
  have an <a>assigned access key</a>.

  Whenever an element's <code>accesskey</code> attribute is set, changed,
  or removed, the user agent must update the element's <a>assigned access key</a> by running
  the following steps:

  <ol>

   <li>If the element has no <code>accesskey</code> attribute, then skip
   to the <i>fallback</i> step below.</li>

   <li>Otherwise, <a>split the attribute's value on
   spaces</a>, and let <var>keys</var> be the resulting tokens.</li>

   <li>

    For each value in <var>keys</var> in turn, in the order the tokens appeared in the
    attribute's value, run the following substeps:

    <ol>

     <li>If the value is not a string exactly one Unicode code point in length, then skip the
     remainder of these steps for this value.</li>

     <li>If the value does not correspond to a key on the system's keyboard, then skip the
     remainder of these steps for this value.</li>

     <li>If the user agent can find a mix of zero or more modifier keys that, combined with the
     key that corresponds to the value given in the attribute, can be used as the access key, then
     the user agent may assign that combination of keys as the element's <a>assigned access
     key</a> and abort these steps.

     </li>

    </ol>

   </li>

   <li><i>Fallback</i>: Optionally, the user agent may assign a key combination of its choosing
   as the element's <a>assigned access key</a> and then abort these steps.</li>

   <li>If this step is reached, the element has no <a>assigned access key</a>.</li>

  </ol>

  Once a user agent has selected and assigned an access key for an element, the user agent should
  not change the element's <a>assigned access key</a> unless the <code>accesskey</code> content attribute is changed or the element is moved to
  another <code>Document</code>.

  When the user presses the key combination corresponding to the <a>assigned access key</a>
  for an element, if the element <a>defines a command</a>, the
  command's <a>Hidden State</a> facet is false (visible),
  the command's <a>Disabled State</a> facet is also false
  (enabled), the element is <a>in a <code>Document</code></a> that has an associated
  <a>browsing context</a>, and neither the element nor any of its ancestors has a <code>hidden</code> attribute specified, then the user agent must trigger the <a>Action</a> of the command.

  <p class="note">
User agents <a>might expose</a> elements that have
  an <code>accesskey</code> attribute in other ways as well, e.g. in a menu
  displayed in response to a specific key combination.
</p>

  <hr />

  The <dfn><code>accessKey</code></dfn> IDL attribute must
  <a>reflect</a> the <code>accesskey</code> content attribute.

  The <dfn><code>accessKeyLabel</code></dfn> IDL attribute must return
  a string that represents the element's <a>assigned access key</a>, if any. If the element
  does not have one, then the IDL attribute must return the empty string.

  </div>

  <h3 id="editing"><dfn>Editing</dfn></h3>

  <h4 id="making-document-regions-editable:-the-contenteditable-content-attribute"><dfn>Making document regions editable: The <code>contenteditable</code> content attribute</dfn></h4>

  <pre class="idl" data-highlight="webidl">
[NoInterfaceObject]
interface <dfn>ElementContentEditable</dfn> {
  attribute DOMString <a>contentEditable</a>;
  readonly attribute boolean <a>isContentEditable</a>;
};
</pre>

  The <dfn><code>contenteditable</code></dfn> content attribute is an
  <a>enumerated attribute</a> whose keywords are the empty string, <code>true</code>,
  and <code>false</code>. The empty string and the <code>true</code> keyword map
  to the <i>true</i> state. The <code>false</code> keyword maps to the <i>false</i> state.
  In addition, there is a third state, the <i>inherit</i> state, which is the <i>missing value default</i> (and the <i>invalid value default</i>).

  The <i>true</i> state indicates that the element is editable. The <i>inherit</i> state
  indicates that the element is editable if its parent is. The <i>false</i> state indicates that the
  element is not editable.

  <dl class="domintro">

   <dt><var>element</var> . <code>contentEditable</code> [ = <var>value</var> ]</dt>

   <dd>

    Returns "<code>true</code>", "<code>false</code>", or "<code>inherit</code>", based on the state of the <code>contenteditable</code> attribute.

    Can be set, to change that state.

    Throws a <code>SyntaxError</code> exception if the new value isn't one of those strings.

   </dd>

   <dt><var>element</var> . <code>isContentEditable</code></dt>

   <dd>

    Returns true if the element is editable; otherwise, returns false.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>contentEditable</code></dfn> IDL attribute, on
  getting, must return the string "<code>true</code>" if the content attribute is set to
  the true state, "<code>false</code>" if the content attribute is set to the false state,
  and "<code>inherit</code>" otherwise. On setting, if the new value is an <a>ASCII
  case-insensitive</a> match for the string "<code>inherit</code>" then the content
  attribute must be removed, if the new value is an <a>ASCII case-insensitive</a> match for
  the string "<code>true</code>" then the content attribute must be set to the string
  "<code>true</code>", if the new value is an <a>ASCII case-insensitive</a> match for
  the string "<code>false</code>" then the content attribute must be set to the string
  "<code>false</code>", and otherwise the attribute setter must throw a
  <code>SyntaxError</code> exception.

  The <dfn><code>isContentEditable</code></dfn> IDL attribute, on
  getting, must return true if the element is either an <a>editing host</a> or
  <a>editable</a>, and false otherwise.

  </div>

  <h4 id="making-entire-documents-editable:-the-designmode-idl-attribute"><dfn>Making entire documents editable: The <code>designMode</code> IDL attribute</dfn></h4>

  <div class="impl">

  Documents have a <dfn
 ><code>designMode</code></dfn>, which can be either enabled or
  disabled.

  </div>

  <dl class="domintro">

   <dt><var>document</var> . <code>designMode</code> [ = <var>value</var> ]</dt>

   <dd>

    Returns "<code>on</code>" if the document is editable, and "<code>off</code>" if it isn't.

    Can be set, to change the document's current state. This focuses the document and resets the
    selection in that document.

   </dd>

  </dl>

  <div class="impl">

  The <code>designMode</code> IDL attribute on the
  <code>Document</code> object takes two values, "<code>on</code>" and "<code>off</code>". On setting, the new value must be compared in an <a>ASCII
  case-insensitive</a> manner to these two values; if it matches the "<code>on</code>"
  value, then <code>designMode</code> must be enabled, and if it
  matches the "<code>off</code>" value, then <code>designMode</code> must be disabled. Other values must be
  ignored.

  On getting, if <code>designMode</code> is enabled, the IDL
  attribute must return the value "<code>on</code>"; otherwise it is disabled, and the
  attribute must return the value "<code>off</code>".

  The last state set must persist until the document is destroyed or the state is changed.
  Initially, documents must have their <code>designMode</code>
  disabled.

  When the <code>designMode</code> changes from being disabled to
  being enabled, the user agent must <a>immediately</a> reset the document's <a>active range</a>'s
  start and end boundary points to be at the start of the <code>Document</code> and then run the
  <a>focusing steps</a> for the root element of the <code>Document</code>, if any.

  </div>

  <h4 id="best-practices-for-in-page-editors"><dfn>Best practices for in-page editors</dfn></h4>

  Authors are encouraged to set the 'white-space' property on <a>editing
  hosts</a> and on markup that was originally created through these editing mechanisms to the
  value 'pre-wrap'. Default HTML whitespace handling is not well suited to WYSIWYG editing, and line
  wrapping will not work correctly in some corner cases if 'white-space' is left at its default
  value.

  <div class="example">

   As an example of problems that occur if the default 'normal' value is used instead, consider
   the case of the user typing "<kbd>yellow&#x2423;&#x2423;ball</kbd>", with two spaces (here
   represented by "&#x2423;") between the words. With the editing rules in place for the default
   value of 'white-space' ('normal'), the resulting markup will either consist of
   "<samp>yellow&amp;nbsp;&nbsp;ball</samp>" or "<samp>yellow&nbsp;&amp;nbsp;ball</samp>"; i.e.,
   there will be a non-breaking space between the two words in addition to the regular space. This
   is necessary because the 'normal' value for 'white-space' requires adjacent regular spaces to be
   collapsed together.

   In the former case, "<samp>yellow&#x237D;</samp>" might wrap to the next line ("&#x237D;"
   being used here to represent a non-breaking space) even though "<samp>yellow</samp>" alone might
   fit at the end of the line; in the latter case, "<samp>&#x237D;ball</samp>", if wrapped to the
   start of the line, would have visible indentation from the non-breaking space.

   When 'white-space' is set to 'pre-wrap', however, the editing rules will instead simply put
   two regular spaces between the words, and should the two words be split at the end of a line, the
   spaces would be neatly removed from the rendering.

  </div>

  <h4 id="editing-apis"><dfn>Editing APIs</dfn></h4>

  The definition of the terms <dfn>active range</dfn>, <dfn>editing host</dfn>, and
  <dfn>editable</dfn>, the user interface requirements of elements that are <a>editing hosts</a> or <a>editable</a>, the

  <dfn><code>execCommand()</code></dfn>,
  <dfn><code>queryCommandEnabled()</code></dfn>,
  <dfn><code>queryCommandIndeterm()</code></dfn>,
  <dfn><code>queryCommandState()</code></dfn>,
  <dfn><code>queryCommandSupported()</code></dfn>, and
  <dfn><code>queryCommandValue()</code></dfn>

  methods, text selections, and the <dfn>delete the selection</dfn> algorithm are defined in the
  HTML Editing APIs specification. The interaction of editing and the undo/redo features in user
  agents is defined by the UndoManager and DOM Transaction specification. <a>\[EDITING]</a> [[!UNDO]]

  <h4 id="spelling-and-grammar-checking"><dfn>Spelling and grammar checking</dfn></h4>

  <div class="impl">

  User agents can support the checking of spelling and grammar of editable text, either in form
  controls (such as the value of <code>textarea</code> elements), or in elements in an <a>editing
  host</a> (e.g. using <code>contenteditable</code>).

  For each element, user agents must establish a <dfn>default
  behavior</dfn>, either through defaults or through preferences expressed by the user. There are
  three possible default behaviors for each element:

  <dl>

   <dt><dfn>true-by-default</dfn>

   <dd>The element will be checked for spelling and grammar if its contents are editable.

   <dt><dfn>false-by-default</dfn>

   <dd>The element will never be checked for spelling and grammar.

   <dt><dfn>inherit-by-default</dfn>

   <dd>The element's default behavior is the same as its parent element's. Elements that have no
   parent element cannot have this as their default behavior.

  </dl>

  <hr />

  </div>

  The <dfn><code>spellcheck</code></dfn> attribute is an <a>enumerated
  attribute</a> whose keywords are the empty string, <code>true</code> and <code>false</code>. The empty string and the <code>true</code> keyword map to the
  <i>true</i> state. The <code>false</code> keyword maps to the <i>false</i> state. In
  addition, there is a third state, the <i>default</i> state, which is the <i>missing value default</i> (and the <i>invalid value default</i>).

  <p class="note">
The <i>true</i> state indicates that the element is to have its spelling and
  grammar checked. The <i>default</i> state indicates that the element is to act according to a
  default behavior, possibly based on the parent element's own <code>spellcheck</code> state, as defined below. The <i>false</i> state
  indicates that the element is not to be checked.
</p>

  <div class="impl">

  <hr />

  </div>

  <dl class="domintro">

   <dt><var>element</var> . <code>spellcheck</code> [ = <var>value</var> ]</dt>

   <dd>

    Returns true if the element is to have its spelling and grammar checked; otherwise, returns
    false.

    Can be set, to override the default and set the <code>spellcheck</code> content attribute.

   </dd>

   <dt><var>element</var> . <code>forceSpellCheck</code>()</dt>

   <dd>

    Forces the user agent to report spelling and grammar errors on the element (if checking is
    enabled), even if the user has never focused the element. (If the method is not invoked, user
    agents can hide errors in text that wasn't just entered by the user.)

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>spellcheck</code></dfn> IDL attribute, on getting, must
  return true if the element's <code>spellcheck</code> content attribute is
  in the <i>true</i> state, or if the element's <code>spellcheck</code>
  content attribute is in the <i>default</i> state and the element's <a>default behavior</a> is <a>true-by-default</a>, or if the element's <code>spellcheck</code> content attribute is in the <i>default</i> state and the
  element's <a>default behavior</a> is <a>inherit-by-default</a> and the element's parent
  element's <code>spellcheck</code> IDL attribute would return true;
  otherwise, if none of those conditions applies, then the attribute must instead return false.

  <p class="note">
The <code>spellcheck</code> IDL attribute is not affected
  by user preferences that override the <code>spellcheck</code> content
  attribute, and therefore might not reflect the actual spellchecking state.
</p>

  On setting, if the new value is true, then the element's <code>spellcheck</code> content attribute must be set to the literal string
  "<code>true</code>", otherwise it must be set to the literal string "<code>false</code>".

  <hr />

  <p>User agents must only consider the following pieces of text as checkable for the purposes of
  this feature:

  <ul>

   <li>The <a>value</a> of <code>input</code> elements whose <code>type</code> attributes are in the <a>Text</a>, <a>Search</a>,
   <a>URL</a>, or <a>E-mail</a> states and that are <i>mutable</i> (i.e. that do not have the <code>readonly</code> attribute specified and that are not <a>disabled</a>).</li>

   <li>The <a>value</a> of <code>textarea</code> elements that do not
   have a <code>readonly</code> attribute and that are not <a>disabled</a>.</li>

   <li>Text in <code>Text</code> nodes that are children of <a>editing
   hosts</a> or <a>editable</a> elements.</li>

   <li>Text in attributes of <a>editable</a> elements.</li>

  </ul>

  For text that is part of a <code>Text</code> node, the element with which the text is
  associated is the element that is the immediate parent of the first character of the word,
  sentence, or other piece of text. For text in attributes, it is the attribute's element. For the
  values of <code>input</code> and <code>textarea</code> elements, it is the element itself.

  To determine if a word, sentence, or other piece of text in an applicable element (as defined
  above) is to have spelling- and grammar-checking enabled, the UA must use the following
  algorithm:

  <ol>

   <li>If the user has disabled the checking for this text, then the checking is disabled.</li>

   <li>Otherwise, if the user has forced the checking for this text to always be enabled, then the
   checking is enabled.</li>

   <li>Otherwise, if the element with which the text is associated has a <code>spellcheck</code> content attribute, then: if that attribute is in the
   <i>true</i> state, then checking is enabled; otherwise, if that attribute is in the <i>false</i>
   state, then checking is disabled.</li>

   <li>Otherwise, if there is an ancestor element with a <code>spellcheck</code> content attribute that is not in the <i>default</i>
   state, then: if the nearest such ancestor's <code>spellcheck</code>
   content attribute is in the <i>true</i> state, then checking is enabled; otherwise, checking is
   disabled.</li>

   <li>Otherwise, if the element's <a>default behavior</a>
   is <a>true-by-default</a>, then checking is
   enabled.</li>

   <li>Otherwise, if the element's <a>default behavior</a>
   is <a>false-by-default</a>, then checking is
   disabled.</li>

   <li>Otherwise, if the element's parent element has <em>its</em> checking enabled, then checking
   is enabled.</li>

   <li>Otherwise, checking is disabled.</li>

  </ol>

  If the checking is enabled for a word/sentence/text, the user agent should indicate spelling
  and grammar errors in that text. User agents should take into account the other semantics given in
  the document when suggesting spelling and grammar corrections. User agents may use the language of
  the element to determine what spelling and grammar rules to use, or may use the user's preferred
  language settings. UAs should use <code>input</code> element attributes such as <code>pattern</code> to ensure that the resulting value is valid, where
  possible.

  If checking is disabled, the user agent should not indicate spelling or grammar errors for that
  text.

  Even when checking is enabled, user agents may opt to not report spelling or grammar errors in
  text that the user agent deems the user has no interest in having checked (e.g. text that was
  already present when the page was loaded, or that the user did not type, or text in controls that
  the user has not focused, or in parts of e-mail addresses that the user agent is not confident
  were misspelt). The <dfn><code>forceSpellCheck()</code></dfn> method,
  when invoked on an element, must override this behavior, forcing the user agent to consider all
  spelling and grammar errors in text in that element for which checking is enabled to be of
  interest to the user.

  <div class="example">

   The element with ID "a" in the following example would be the one used to determine if the
   word "Hello" is checked for spelling errors. In this example, it would not be.

   <pre highlight="html">
&lt;div contenteditable="true">
 &lt;span spellcheck="false">Hell&lt;/span>&lt;em>o!&lt;/em>
&lt;/div>
</pre>

   The element with ID "b" in the following example would have checking enabled (the leading
   space character in the attribute's value on the <code>input</code> element causes the attribute
   to be ignored, so the ancestor's value is used instead, regardless of the default).

   <pre class="bad">&lt;p spellcheck="true">
 &lt;label>Name: &lt;input spellcheck=" false">&lt;/label>
&lt;/p></pre>

  </div>

  </div>

  <p class="note">
This specification does not define the user interface for spelling and grammar
  checkers. A user agent could offer on-demand checking, could perform continuous checking while the
  checking is enabled, or could use other interfaces.
</p>

  <h3 id="drag-and-drop"><dfn><dfn>Drag and drop</dfn></dfn></h3>

  This section defines an event-based drag-and-drop mechanism.

  This specification does not define exactly what a <em>drag-and-drop operation</em> actually
  is.

  On a visual medium with a pointing device, a drag operation could be the default action of a
  <code>mousedown</code> event that is followed by a series of <code>mousemove</code> events, and the drop could be triggered by the mouse
  being released.

  When using an input modality other than a pointing device, users would probably have to
  explicitly indicate their intention to perform a drag-and-drop operation, stating what they wish
  to drag and where they wish to drop it, respectively.

  <div class="impl">

  However it is implemented, drag-and-drop operations must have a starting point (e.g. where the
  mouse was clicked, or the start of the selection or element that was selected for the drag), may
  have any number of intermediate steps (elements that the mouse moves over during a drag, or
  elements that the user picks as possible drop points as he cycles through possibilities), and must
  either have an end point (the element above which the mouse button was released, or the element
  that was finally selected), or be canceled. The end point must be the last element selected as a
  possible drop point before the drop occurs (so if the operation is not canceled, there must be at
  least one element in the middle step).

  </div>

  <h4 id="introduction"><dfn>Introduction</dfn></h4>

  <em>This section is non-normative.</em>

  To make an element draggable is simple: give the element a <code>draggable</code> attribute, and set an event listener for <code>dragstart</code> that stores the data being dragged.

  The event handler typically needs to check that it's not a text selection that is being
  dragged, and then needs to store data into the <code>DataTransfer</code> object and set the
  allowed effects (copy, move, link, or some combination).

  For example:

  <pre highlight="html">
&lt;p>What fruits do you like?&lt;/p>
&lt;ol ondragstart="dragStartHandler(event)">
 &lt;li draggable="true">Apples&lt;/li>
 &lt;li draggable="true">Oranges&lt;/li>
 &lt;li draggable="true">Pears&lt;/li>
&lt;/ol>
&lt;script>
  var internalDNDType = 'text/x-example'; // set this to something specific to your site
  function dragStartHandler(event) {
    if (event.target instanceof HTMLLIElement) {
      // use the element's>
</pre>

  <hr />

  To accept a drop, the drop target has to have a <code>dropzone</code>
  attribute and listen to the <code>drop</code> event.

  The value of the <code>dropzone</code> attribute specifies what kind of
  data to accept (e.g. "<code>string:text/plain</code>" to accept any text strings, or
  "<code>file:image/png</code>" to accept a PNG image file) and what kind of feedback to
  give (e.g. "<code>move</code>" to indicate that the data will be moved).

  <p class="note">
Instead of using the <code>dropzone</code> attribute, a drop
  target can handle the <code>dragenter</code> event (to report whether or
  not the drop target is to accept the drop) and the <code>dragover</code>
  event (to specify what feedback is to be shown to the user).
</p>

  The <code>drop</code> event allows the actual drop to be performed. This
  event needs to be canceled, so that the <code>dropEffect</code> attribute's value can be used by the source
  (otherwise it's reset).

  For example:

  <pre highlight="html">
&lt;p>Drop your favorite fruits below:&lt;/p>
&lt;ol dropzone="move string:text/x-example" ondrop="dropHandler(event)">
 &lt;!-- don't forget to change the "text/x-example" type to something
 specific to your site -->
&lt;/ol>
&lt;script>
  var internalDNDType = 'text/x-example'; // set this to something specific to your site
  function dropHandler(event) {
    var li = document.createElement('li');
    var data = event.dataTransfer.getData(internalDNDType);
    if (data == 'fruit-apple') {
      li.textContent = 'Apples';
    } else if (data == 'fruit-orange') {
      li.textContent = 'Oranges';
    } else if (data == 'fruit-pear') {
      li.textContent = 'Pears';
    } else {
      li.textContent = 'Unknown Fruit';
    }
    event.target.appendChild(li);
  }
&lt;/script>
</pre>

  <hr />

  To remove the original element (the one that was dragged) from the display, the <code>dragend</code> event can be used.

  For our example here, that means updating the original markup to handle that event:

  <pre highlight="html">
&lt;p>What fruits do you like?&lt;/p>
&lt;ol ondragstart="dragStartHandler(event)" ondragend="dragEndHandler(event)">
 <em>...as before...</em>
&lt;/ol>
&lt;script>
  function dragStartHandler(event) {
    // <em>...as before...</em>
  }
  function dragEndHandler(event) {
    if (event.dataTransfer.dropEffect == 'move') {
      // remove the dragged element
      event.target.parentNode.removeChild(event.target);
    }
  }
&lt;/script>
</pre>

  <h4 id="the-drag-data-store"><dfn>The drag data store</dfn></h4>

  The data that underlies a drag-and-drop operation, known as the <dfn>drag data store</dfn>,
  consists of the following information:

  <ul>

   <li>A <dfn>drag data store item list</dfn>, which is a list of items representing the dragged
   data, each consisting of the following information:

    <dl>

     <dt><dfn>The drag data item kind</dfn></dt>

     <dd>

      The kind of data:

      <dl>

       <dt><i>Plain Unicode string</i></dt>
       <dd>
        Text.
       </dd>

       <dt><i>File</i></dt>
       <dd>
        Binary data with a file name.
       </dd>

      </dl>

     </dd>

     <dt><dfn>The drag data item type string</dfn></dt>

     <dd>

      A Unicode string giving the type or format of the data, generally given by a <a>MIME
      type</a>. Some values that are not <a>MIME types</a> are
      special-cased for legacy reasons. The API does not enforce the use of <a>MIME types</a>; other values can be used as well. In all cases, however, the values
      are all <a>converted to ASCII lowercase</a> by the API.

      <p class="note">
Strings that contain <a>space characters</a>
      cannot be used with the <code>dropzone</code> attribute, so authors are
      encouraged to use only <a>MIME types</a> or custom strings (without
      spaces).
</p>

      There is a limit of one <i>Plain Unicode string</i> item per <a>item type string</a>.

     </dd>

     <dt>The actual data</dt>

     <dd>A Unicode or binary string, in some cases with a file name (itself a Unicode string),
      as per <a>the drag data item kind</a>.</dd>

    </dl>

    The <a>drag data store item list</a> is ordered in the order that the items were added
    to the list; most recently added last.

   </li>

   <li>

    The following information, used to generate the UI feedback during the drag:

    <ul>

     <li>User-agent-defined default feedback information, known as the <dfn>drag data store default
     feedback</dfn>.</li>

     <li>Optionally, a bitmap image and the coordinate of a point within that image, known as the
     <dfn>drag data store bitmap</dfn> and <dfn>drag data store hot spot coordinate</dfn>.</li>

    </ul>

   </li>

   <li>

    A <dfn>drag data store mode</dfn>, which is one of the following:

    <dl>

     <dt><dfn>Read/write mode</dfn></dt>
     <dd>

      For the <code>dragstart</code> event. New data can be added to the
      <a>drag data store</a>.

     </dd>

     <dt><dfn>Read-only mode</dfn></dt>
     <dd>

      For the <code>drop</code> event. The list of items representing dragged
      data can be read, including the data. No new data can be added.

     </dd>

     <dt><dfn>Protected mode</dfn></dt>
     <dd>

      For all other events. The formats and kinds in the <a>drag data store</a> list of
      items representing dragged data can be enumerated, but the data itself is unavailable and no
      new data can be added.

     </dd>

    </dl>

   </li>

   <li>

    A <dfn>drag data store allowed effects state</dfn>, which is a string.

   </li>

  </ul>

  When a <a>drag data store</a> is <dfn>created</dfn>, it
  must be initialized such that its <a>drag data store item list</a> is empty, it has no
  <a>drag data store default feedback</a>, it has no <a>drag data store bitmap</a> and
  <a>drag data store hot spot coordinate</a>, its <a>drag data store mode</a> is <a>protected mode</a>, and its <a>drag data store allowed effects
  state</a> is the string "<code>uninitialized</code>".

  <h4 id="the-datatransfer-interface"><dfn>The <code>DataTransfer</code> interface</dfn></h4>

  <code>DataTransfer</code> objects are used to expose the <a>drag data store</a> that
  underlies a drag-and-drop operation.

  <pre class="idl" data-highlight="webidl">
interface <dfn>DataTransfer</dfn> {
  attribute DOMString <a>dropEffect</a>;
  attribute DOMString <a>effectAllowed</a>;

  [SameObject] readonly attribute <a>DataTransferItemList</a> <a>items</a>;

  void <a>setDragImage</a>(Element image, long x, long y);

  /* old interface */
  [SameObject] readonly attribute DOMString[] <a>types</a>;
  DOMString <a>getData</a>(DOMString format);
  void <a>setData</a>(DOMString format, DOMString data);
  void <a>clearData</a>(optional DOMString format);
  [SameObject] readonly attribute <a>FileList</a> <a>files</a>;
};
</pre>

  <dl class="domintro">

   <dt><var>dataTransfer</var> . <code>dropEffect</code> [ = <var>value</var> ]</dt>

   <dd>

    Returns the kind of operation that is currently selected. If the kind of operation isn't one
    of those that is allowed by the <code>effectAllowed</code> attribute, then the operation will
    fail.

    Can be set, to change the selected operation.

    The possible values are "<code>none</code>", "<code>copy</code>", "<code>link</code>", and "<code>move</code>".

   </dd>

   <dt><var>dataTransfer</var> . <code>effectAllowed</code> [ = <var>value</var> ]</dt>

   <dd>

    Returns the kinds of operations that are to be allowed.

    Can be set (during the <code>dragstart</code> event), to change
    the allowed operations.

    The possible values are "<code>none</code>",
    "<code>copy</code>", "<code>copyLink</code>", "<code>copyMove</code>", "<code>link</code>", "<code>linkMove</code>", "<code>move</code>", "<code>all</code>", and "<code>uninitialized</code>",

   </dd>

   <dt><var>dataTransfer</var> . <code>items</code></dt>

   <dd>

    Returns a <code>DataTransferItemList</code> object, with the drag data.

   </dd>

   <dt><var>dataTransfer</var> . <code>setDragImage</code>(<var>element</var>, <var>x</var>, <var>y</var>)</dt>

   <dd>

    Uses the given element to update the drag feedback, replacing any previously specified
    feedback.

   </dd>

   <dt><var>dataTransfer</var> . <code>types</code></dt>

   <dd>

    Returns an array listing the formats that were set in the <code>dragstart</code> event. In addition, if any files are being dragged,
    then one of the types will be the string "<code>Files</code>".

   </dd>

   <dt><var>data</var> = <var>dataTransfer</var> . <code>getData</code>(<var>format</var>)</dt>

   <dd>

    Returns the specified data. If there is no such data, returns the empty string.

   </dd>

   <dt><var>dataTransfer</var> . <code>setData</code>(<var>format</var>, <var>data</var>)</dt>

   <dd>

    Adds the specified data.

   </dd>

   <dt><var>dataTransfer</var> . <code>clearData</code>( [ <var>format</var> ] )</dt>

   <dd>

    Removes the data of the specified formats. Removes all data if the argument is omitted.

   </dd>

   <dt><var>dataTransfer</var> . <code>files</code></dt>

   <dd>

    Returns a <code>FileList</code> of the files being dragged, if any.

   </dd>

  </dl>

  <code>DataTransfer</code> objects are used during the <a>drag-and-drop
  events</a>, and are only valid while those events are being fired.

  <div class="impl">

  A <code>DataTransfer</code> object is associated with a <a>drag data store</a> while it
  is valid.

  The <dfn><code>dropEffect</code></dfn> attribute controls
  the drag-and-drop feedback that the user is given during a drag-and-drop operation. When the
  <code>DataTransfer</code> object is created, the <code>dropEffect</code> attribute is set to a string value. On
  getting, it must return its current value. On setting, if the new value is one of "<dfn><code>none</code></dfn>", "<dfn><code>copy</code></dfn>", "<dfn><code>link</code></dfn>", or "<dfn><code>move</code></dfn>", then the attribute's current value must be
  set to the new value. Other values must be ignored.

  The <dfn><code>effectAllowed</code></dfn> attribute is
  used in the drag-and-drop processing model to initialize the <code>dropEffect</code> attribute during the <code>dragenter</code> and <code>dragover</code> events. When the <code>DataTransfer</code> object is
  created, the <code>effectAllowed</code> attribute is set
  to a string value. On getting, it must return its current value. On setting, if <a>drag data
  store</a>'s <a>mode</a> is the <a>read/write mode</a> and the new value is one of "<dfn><code>none</code></dfn>", "<dfn><code>copy</code></dfn>", "<dfn><code>copyLink</code></dfn>", "<dfn><code>copyMove</code></dfn>", "<dfn><code>link</code></dfn>", "<dfn><code>linkMove</code></dfn>", "<dfn><code>move</code></dfn>", "<dfn><code>all</code></dfn>", or "<dfn><code>uninitialized</code></dfn>", then the attribute's
  current value must be set to the new value. Otherwise it must be left unchanged.

  The <dfn><code>items</code></dfn> attribute must return a
  <code>DataTransferItemList</code> object associated with the <code>DataTransfer</code> object.

  The <dfn><code>setDragImage(<var>element</var>,
  <var>x</var>, <var>y</var>)</code></dfn> method must run the following steps:

  <ol>

   <li>If the <code>DataTransfer</code> object is no longer associated with a <a>drag data
   store</a>, abort these steps. Nothing happens.</li>

   <li>If the <a>drag data store</a>'s <a>mode</a> is
   not the <a>read/write mode</a>, abort these steps. Nothing
   happens.</li>

   <li>If the <var>element</var> argument is an <code>img</code> element, then set the <a>drag
   data store bitmap</a> to the element's image (at its
   <a>intrinsic size</a>); otherwise, set the
   <a>drag data store bitmap</a> to an image generated from the given element (the exact
   mechanism for doing so is not currently specified).</li>

   <li>Set the <a>drag data store hot spot coordinate</a> to the given <var>x</var>,
   <var>y</var> coordinate.</li>

  </ol>

  The <dfn><code>types</code></dfn> attribute must return a
  <a>live</a> <a>read only</a> array giving the strings
  that the following steps would produce.

  <ol>

   <li>Start with an empty list <var>L</var>.</li>

   <li>If the <code>DataTransfer</code> object is no longer associated with a <a>drag data
   store</a>, the array is empty. Abort these steps; return the empty list <var>L</var>.</li>

   <li>For each item in the <a>drag data store item list</a>
   whose <a>kind</a> is <i>Plain Unicode string</i>, add an
   entry to the list <var>L</var> consisting of the item's <a>type string</a>.</li>

   <li>If there are any items in the <a>drag data store item list</a> whose <a>kind</a> is <i>File</i>, then add an entry to the list
   <var>L</var> consisting of the string "<code>Files</code>". (This value can be
   distinguished from the other values because it is not lowercase.)</li>

   <li>The strings produced by these steps are those in the list <var>L</var>.</li>

  </ol>

  The <dfn><code>getData(<var>format</var>)</code></dfn> method
  must run the following steps:

  <ol>

   <li>If the <code>DataTransfer</code> object is no longer associated with a <a>drag data
   store</a>, return the empty string and abort these steps.</li>

   <li>If the <a>drag data store</a>'s <a>mode</a> is
   the <a>protected mode</a>, return the empty string and abort these
   steps.</li>

   <li>Let <var>format</var> be the first argument, <a>converted to ASCII
   lowercase</a>.</li>

   <li>Let <var>convert-to-URL</var> be false.</li>

   <li>If <var>format</var> equals "<code>text</code>", change it to "<code>text/plain</code>".</li>

   <li>If <var>format</var> equals "<code>url</code>", change it to "<code>text/uri-list</code>" and set <var>convert-to-URL</var> to true.</li>

   <li>If there is no item in the <a>drag data store item list</a> whose <a>kind</a> is <i>Plain Unicode string</i> and whose <a>type string</a> is equal to <var>format</var>, return the empty string
   and abort these steps.</li>

   <li>Let <var>result</var> be the data of the item in the <a>drag data store item
   list</a> whose <a>kind</a> is <i>Plain Unicode
   string</i> and whose <a>type string</a> is equal to
   <var>format</var>.</li>

   <li>If <var>convert-to-URL</var> is true, then parse <var>result</var> as appropriate for
   <code>text/uri-list</code> data, and then set <var>result</var> to the first URL from
   the list, if any, or the empty string otherwise. [[!RFC2483]]</li>

   <li>Return <var>result</var>.</li>

  </ol>

  The <dfn><code>setData(<var>format</var>,
  <var>data</var>)</code></dfn> method must run the following steps:

  <ol>

   <li>If the <code>DataTransfer</code> object is no longer associated with a <a>drag data
   store</a>, abort these steps. Nothing happens.</li>

   <li>If the <a>drag data store</a>'s <a>mode</a> is
   not the <a>read/write mode</a>, abort these steps. Nothing
   happens.</li>

   <li>Let <var>format</var> be the first argument, <a>converted to ASCII
   lowercase</a>.</li>

   <li>

    If <var>format</var> equals "<code>text</code>", change it to "<code>text/plain</code>".

    If <var>format</var> equals "<code>url</code>", change it to "<code>text/uri-list</code>".

   </li>

   <li>Remove the item in the <a>drag data store item list</a> whose <a>kind</a> is <i>Plain Unicode string</i> and whose <a>type string</a> is equal to <var>format</var>, if there is
   one.</li>

   <li>Add an item to the <a>drag data store item list</a> whose <a>kind</a> is <i>Plain Unicode string</i>, whose <a>type string</a> is equal to <var>format</var>, and whose data is the string
   given by the method's second argument.</li>

  </ol>

  The <dfn><code>clearData()</code></dfn> method must run the
  following steps:

  <ol>

   <li>If the <code>DataTransfer</code> object is no longer associated with a <a>drag data
   store</a>, abort these steps. Nothing happens.</li>

   <li>If the <a>drag data store</a>'s <a>mode</a> is
   not the <a>read/write mode</a>, abort these steps. Nothing
   happens.</li>

   <li>If the method was called with no arguments, remove each item in the <a>drag data store
   item list</a> whose <a>kind</a> is <i>Plain Unicode
   string</i>, and abort these steps.</li>

   <li>Let <var>format</var> be the first argument, <a>converted to ASCII
   lowercase</a>.</li>

   <li>

    If <var>format</var> equals "<code>text</code>", change it to "<code>text/plain</code>".

    If <var>format</var> equals "<code>url</code>", change it to "<code>text/uri-list</code>".

   </li>

   <li>Remove the item in the <a>drag data store item list</a> whose <a>kind</a> is <i>Plain Unicode string</i> and whose <a>type string</a> is equal to <var>format</var>, if there is
   one.</li>

  </ol>

  <p class="note">
The <code>clearData()</code> method does not
  affect whether any files were included in the drag, so the <code>types</code> attribute's list might still not be empty after
  calling <code>clearData()</code> (it would still contain the
  "<code>Files</code>" string if any files were included in the drag).
</p>

  The <dfn><code>files</code></dfn> attribute must return a
  <a>live</a> <code>FileList</code> sequence consisting of <code>File</code> objects
  representing the files found by the following steps.
  Furthermore, for a given <code>FileList</code> object and a given underlying file, the same
  <code>File</code> object must be used each time.

  <ol>

   <li>Start with an empty list <var>L</var>.</li>

   <li>If the <code>DataTransfer</code> object is no longer associated with a <a>drag data
   store</a>, the <code>FileList</code> is empty. Abort these steps; return the empty list <var>L</var>.</li>

   <li>If the <a>drag data store</a>'s <a>mode</a> is
   the <a>protected mode</a>, abort these steps; return the empty list
   <var>L</var>.</li>

   <li>For each item in the <a>drag data store item list</a>
   whose <a>kind</a> is <i>File</i> , add the item's data (the file, in particular its name and contents, as well as
   its <a>type</a>) to the list <var>L</var>.</li>

   <li>The files found by these steps are those in the list <var>L</var>.</li>

  </ol>

  <p class="note">
This version of the API does not expose the types of the files during the
  drag.
</p>

  </div>

  <h5 id="the-datatransferitemlist-interface"><dfn>The <code>DataTransferItemList</code> interface</dfn></h5>

  Each <code>DataTransfer</code> object is associated with a <code>DataTransferItemList</code>
  object.

  <pre class="idl" data-highlight="webidl">
interface <dfn>DataTransferItemList</dfn> {
  readonly attribute unsigned long <a>length</a>;
  <a>getter</a> <a>DataTransferItem</a> (unsigned long index);
  <a>DataTransferItem</a>? <a>add</a>(DOMString data, DOMString type);
  <a>DataTransferItem</a>? <a>add</a>(<a>File</a> data);
  void <a>remove</a>(unsigned long index);
  void <a>clear</a>();
};
</pre>

  <dl class="domintro">

   <dt><var>items</var> . <code>length</code></dt>

   <dd>Returns the number of items in the <a>drag data store</a>.</dd>

   <dt><var>items</var>[<var>index</var>]</dt>

   <dd>

    Returns the <code>DataTransferItem</code> object representing the <var>index</var>th
    entry in the <a>drag data store</a>.

   </dd>

   <dt><var>items</var> . <code>remove</code>(<var>index</var>)</dt>

   <dd>

    Removes the <var>index</var>th entry in the <a>drag data store</a>.

   </dd>

   <dt><var>items</var> . <code>clear</code>()</dt>

   <dd>

    Removes all the entries in the <a>drag data store</a>.

   </dd>

   <dt><var>items</var> . <code>add</code>(<var>data</var>)</dt>
   <dt><var>items</var> . <code>add</code>(<var>data</var>, <var>type</var>)</dt>

   <dd>

    Adds a new entry for the given data to the <a>drag data store</a>. If the data is plain
    text  then a <var>type</var> string has to be provided
    also.

   </dd>

  </dl>

  <div class="impl">

  While the <code>DataTransferItemList</code> object's <code>DataTransfer</code> object is
  associated with a <a>drag data store</a>, the <code>DataTransferItemList</code> object's
  <i>mode</i> is the same as the <a>drag data store mode</a>. When the
  <code>DataTransferItemList</code> object's <code>DataTransfer</code> object is <em>not</em>
  associated with a <a>drag data store</a>, the <code>DataTransferItemList</code> object's
  <i>mode</i> is the <i>disabled mode</i>. The <a>drag data store</a> referenced in this
  section (which is used only when the <code>DataTransferItemList</code> object is not in the
  <i>disabled mode</i>) is the <a>drag data store</a> with which the
  <code>DataTransferItemList</code> object's <code>DataTransfer</code> object is associated.

  The <dfn><code>length</code></dfn> attribute must
  return zero if the object is in the <i>disabled mode</i>; otherwise it must return the number of
  items in the <a>drag data store item list</a>.

  When a <code>DataTransferItemList</code> object is not in the <i>disabled mode</i>, its
  <a>supported property indices</a> are the numbers in the range

    <a>0 .. <var>n</var>-1</a>,

  where <var>n</var> is the number of items in the <a>drag data store item
  list</a>.

  To <dfn>determine the value of an indexed property</dfn>
  <var>i</var> of a <code>DataTransferItemList</code> object, the user agent must return a
  <code>DataTransferItem</code> object representing the <var>i</var>th item in the
  <a>drag data store</a>. The same object must be returned each time a particular item is
  obtained from this <code>DataTransferItemList</code> object. The <code>DataTransferItem</code>
  object must be associated with the same <code>DataTransfer</code> object as the
  <code>DataTransferItemList</code> object when it is first created.

  The <dfn><code>add()</code></dfn> method must run the
  following steps:

  <ol>

   <li>If the <code>DataTransferItemList</code> object is not in the <i>read/write mode</i>, return null and abort these steps.</li>

   <li>

    Jump to the appropriate set of steps from the following list:

    <dl class="switch">

     <dt>If the first argument to the method is a string</dt>

     <dd>

      If there is already an item in the <a>drag data store item list</a> whose <a>kind</a> is <i>Plain Unicode string</i> and whose <a>type string</a> is equal to the value of the
      method's second argument, <a>converted to ASCII lowercase</a>, then throw a
      <code>NotSupportedError</code> exception and abort these steps.

      Otherwise, add an item to the <a>drag data store item list</a> whose <a>kind</a> is <i>Plain Unicode string</i>, whose <a>type string</a> is equal to the value of the method's second
      argument, <a>converted to ASCII lowercase</a>, and whose data is the string given by the
      method's first argument.

     </dd>

     <dt>If the first argument to the method is a <code>File</code></dt>

     <dd>

      Add an item to the <a>drag data store item list</a> whose <a>kind</a> is <i>File</i>, whose <a>type
      string</a> is the <code>type</code> of the <code>File</code>,
      <a>converted to ASCII lowercase</a>, and whose data is the same as the
      <code>File</code>'s data.

     </dd>

    </dl>

   </li>

   <li><a>Determine the value of the indexed
   property</a> corresponding to the newly added item, and return that value (a newly created
   <code>DataTransferItem</code> object).</li>

  </ol>

  The <dfn><code>remove()</code></dfn> method, when
  invoked with the argument <var>i</var>, must run these steps:

  <ol>

   <li>If the <code>DataTransferItemList</code> object is not in the <i>read/write mode</i>, throw an <code>InvalidStateError</code> exception and
   abort these steps.</li>

   <li>Remove the <var>i</var>th item from the <a>drag data store</a>.</li>

  </ol>

  The <dfn><code>clear</code></dfn> method, if the
  <code>DataTransferItemList</code> object is in the <i>read/write mode</i>,
  must remove all the items from the <a>drag data store</a>. Otherwise, it must do
  nothing.

  </div>

  <h5 id="the-datatransferitem-interface"><dfn>The <code>DataTransferItem</code> interface</dfn></h5>

  Each <code>DataTransferItem</code> object is associated with a <code>DataTransfer</code>
  object.

  <pre class="idl" data-highlight="webidl">
interface <dfn>DataTransferItem</dfn> {
  readonly attribute DOMString <a>kind</a>;
  readonly attribute DOMString <a>type</a>;
  void <a>getAsString</a>(<a>FunctionStringCallback</a>? _callback);
  <a>File</a>? <a>getAsFile</a>();
};

callback <dfn>FunctionStringCallback</dfn> = void (DOMString data);
</pre>

  <dl class="domintro">

   <dt><var>item</var> . <code>kind</code></dt>
   <dd>

    Returns <a>the drag data item kind</a>, one of: "string",
     "file".

   </dd>

   <dt><var>item</var> . <code>type</code></dt>
   <dd>

    Returns <a>the drag data item type string</a>.

   </dd>

   <dt><var>item</var> . <code>getAsString</code>(<var>callback</var>)</dt>
   <dd>

    Invokes the callback with the string data as the argument, if <a>the drag data item
    kind</a> is <i>Plain Unicode string</i>.

   </dd>

   <dt><var>file</var> = <var>item</var> . <code>getAsFile</code>()</dt>
   <dd>

    Returns a <code>File</code> object, if <a>the drag data item kind</a> is <i>File</i>.

   </dd>

  </dl>

  <div class="impl">

  While the <code>DataTransferItem</code> object's <code>DataTransfer</code> object is associated
  with a <a>drag data store</a> and that <a>drag data store</a>'s <a>drag data store
  item list</a> still contains the item that the <code>DataTransferItem</code> object represents,
  the <code>DataTransferItem</code> object's <i>mode</i> is the same as the <a>drag data store
  mode</a>. When the <code>DataTransferItem</code> object's <code>DataTransfer</code> object is
  <em>not</em> associated with a <a>drag data store</a>, or if the item that the
  <code>DataTransferItem</code> object represents has been removed from the relevant <a>drag data
  store item list</a>, the <code>DataTransferItem</code> object's <i>mode</i> is the <i>disabled
  mode</i>. The <a>drag data store</a> referenced in this section (which is used only when the
  <code>DataTransferItem</code> object is not in the <i>disabled mode</i>) is the <a>drag data
  store</a> with which the <code>DataTransferItem</code> object's <code>DataTransfer</code>
  object is associated.

  The <dfn><code>kind</code></dfn> attribute must return the
  empty string if the <code>DataTransferItem</code> object is in the <i>disabled mode</i>; otherwise
  it must return the string given in the cell from the second column of the following table from the
  row whose cell in the first column contains <a>the drag data item kind</a> of the item
  represented by the <code>DataTransferItem</code> object:

  <table>
   <thead>
    <tr> <th> Kind <th> String
   <tbody>
    <tr> <td> <i>Plain Unicode string</i> <td> "<code>string</code>"

    <tr> <td> <i>File</i> <td> "<code>file</code>"

  </table>

  The <dfn><code>type</code></dfn> attribute must return the
  empty string if the <code>DataTransferItem</code> object is in the <i>disabled mode</i>; otherwise
  it must return <a>the drag data item type string</a> of the item represented by the
  <code>DataTransferItem</code> object.

  The <dfn><code>getAsString(<var>callback</var>)</code></dfn> method must run the following steps:

  <ol>

   <li>If the <var>callback</var> is null, abort these steps.</li>

   <li>If the <code>DataTransferItem</code> object is not in the <i>read/write mode</i> or the <i>read-only mode</i>,
   abort these steps. The callback is never invoked.</li>

   <li>If <a>the drag data item kind</a> is not <i>Plain Unicode string</i>, abort these
   steps. The callback is never invoked.</li>

   <li>Otherwise, <a>queue a task</a> to invoke <var>callback</var>, passing the
   actual data of the item represented by the <code>DataTransferItem</code> object as the
   argument.</li>

  </ol>

  The <dfn><code>getAsFile()</code></dfn>
  method must run the following steps:

  <ol>

   <li>If the <code>DataTransferItem</code> object is not in the <i>read/write mode</i> or the <i>read-only mode</i>,
   return null and abort these steps.</li>

   <li>If <a>the drag data item kind</a> is not <i>File</i>, then return null and abort
   these steps.</li>

   <li>Return a new <code>File</code> object representing the actual data of the item represented
   by the <code>DataTransferItem</code> object.

  </ol>

  </div>

  <h4 id="the-dragevent-interface"><dfn>The <code>DragEvent</code> interface</dfn></h4>

  The drag-and-drop processing model involves several events. They all use the
  <code>DragEvent</code> interface.

  <pre class="idl" data-highlight="webidl">
[Constructor(DOMString type, optional <a>DragEventInit</a> eventInitDict)]
interface <dfn>DragEvent</dfn> : <a>MouseEvent</a> {
  readonly attribute <a>DataTransfer</a>? <a>dataTransfer</a>;
};

dictionary <dfn>DragEventInit</dfn> : <a>MouseEventInit</a> {
  <a>DataTransfer</a>? dataTransfer = null;
};
</pre>

  <dl class="domintro">

   <dt><var>event</var> . <code>dataTransfer</code></dt>

   <dd>

    Returns the <code>DataTransfer</code> object for the event.

   </dd>

  </dl>

  <p class="note">
Although, for consistency with other event interfaces, the <code>DragEvent</code>
  interface has a constructor, it is not particularly useful. In particular, there's no way to
  create a useful <code>DataTransfer</code> object from script, as <code>DataTransfer</code> objects
  have a processing and security model that is coordinated by the browser during drag-and-drops.
</p>

  <div class="impl">

  The <dfn><code>dataTransfer</code></dfn> attribute of the
  <code>DragEvent</code> interface must return the value it was initialized to. It represents the
  context information for the event.

  </div>

  <div class="impl">

  When a user agent is required to <dfn>fire a DND event</dfn> named <var>e</var> at an element,
  using a particular <a>drag data store</a>, and optionally with a specific <var>related
  target</var>, the user agent must run the following steps:

  <ol>

   <li>If no specific <var>related target</var> was provided, set <var>related target</var> to
   null.</li>

   <li>Let <var>window</var> be the <code>Window</code> object of the <code>Document</code>
   object of the specified target element.</li>

   <li>

    If <var>e</var> is <code>dragstart</code>, set the <a>drag
    data store mode</a> to the <a>read/write mode</a>.

    If <var>e</var> is <code>drop</code>, set the <a>drag data store
    mode</a> to the <a>read-only mode</a>.

   </li>

   <li>Let <var>dataTransfer</var> be a newly created <code>DataTransfer</code> object
   associated with the given <a>drag data store</a>.</li>

   <li>Set the <code>effectAllowed</code> attribute to the <a>drag data
   store</a>'s <a>drag data store allowed effects state</a>.</li>

   <li>

    Set the <code>dropEffect</code> attribute to "<code>none</code>" if <var>e</var> is <code>dragstart</code>, <code>drag</code>, <code>dragexit</code>, or <code>dragleave</code>; to the value corresponding to the <a>current
    drag operation</a> if <var>e</var> is <code>drop</code> or
    <code>dragend</code>; and to a value based on the <code>effectAllowed</code> attribute's value and the
    drag-and-drop source, as given by the following table, otherwise (i.e. if <var>e</var>
    is <code>dragenter</code> or <code>dragover</code>):

    <table>
     <thead>
      <tr>
       <th><code>effectAllowed</code></th>
       <th><code>dropEffect</code></th>
      </tr>
     </thead>
     <tr>
      <td>"<code>none</code>"</td>
      <td>"<code>none</code>"</td>
     </tr>
     <tr>
      <td>"<code>copy</code>"</td>
      <td>"<code>copy</code>"</td>
     </tr>
     <tr>
      <td>"<code>copyLink</code>"</td>
      <td>"<code>copy</code>", or, <a>if appropriate</a>, "<code>link</code>"</td>
     </tr>
     <tr>
      <td>"<code>copyMove</code>"</td>
      <td>"<code>copy</code>", or, <a>if appropriate</a>, "<code>move</code>"</td>
     </tr>
     <tr>
      <td>"<code>all</code>"</td>
      <td>"<code>copy</code>", or, <a>if appropriate</a>, either "<code>link</code>" or "<code>move</code>"</td>
     </tr>
     <tr>
      <td>"<code>link</code>"</td>
      <td>"<code>link</code>"</td>
     </tr>
     <tr>
      <td>"<code>linkMove</code>"</td>
      <td>"<code>link</code>", or, <a>if appropriate</a>, "<code>move</code>"</td>
     </tr>
     <tr>
      <td>"<code>move</code>"</td>
      <td>"<code>move</code>"</td>
     </tr>
     <tr>
      <td>"<code>uninitialized</code>" when what is being dragged is a selection from a text field</td>
      <td>"<code>move</code>", or, <a>if appropriate</a>, either "<code>copy</code>" or "<code>link</code>"</td>
     </tr>
     <tr>
      <td>"<code>uninitialized</code>" when what is being dragged is a selection</td>
      <td>"<code>copy</code>", or, <a>if appropriate</a>, either "<code>link</code>" or "<code>move</code>"</td>
     </tr>
     <tr>
      <td>"<code>uninitialized</code>" when what is being dragged is an <code>a</code> element with an <code>href</code> attribute</td>
      <td>"<code>link</code>", or, <a>if appropriate</a>, either "<code>copy</code>" or "<code>move</code>"</td>
     </tr>
     <tr>
      <td>Any other case</td>
      <td>"<code>copy</code>", or, <a>if appropriate</a>, either "<code>link</code>" or "<code>move</code>"</td>
     </tr>
    </table>

    Where the table above provides <dfn>possibly
    appropriate alternatives</dfn>, user agents may instead use the listed alternative values if
    platform conventions dictate that the user has requested those alternate effects.

    <p class="example">
For example, Windows platform conventions are such that dragging while
    holding the "alt" key indicates a preference for linking the data, rather than moving or copying
    it. Therefore, on a Windows system, if "<code>link</code>" is an option according to
    the table above while the "alt" key is depressed, the user agent could select that instead of
    "<code>copy</code>" or "<code>move</code>".
</p>

   </li>

   <li>

    Create a <a>trusted</a> <code>DragEvent</code> object
    and initialize it to have the given name <var>e</var>, to bubble, to be cancelable unless
    <var>e</var> is <code>dragexit</code>, <code>dragleave</code>, or <code>dragend</code>, and to have the <code>view</code> attribute initialized to <var>window</var>, the <code>detail</code> attribute initialized to zero, the mouse and key
    attributes initialized according to the state of the input devices as they would be for user
    interaction events, the <code>relatedTarget</code>
    attribute initialized to <var>related target</var>, and the <code>dataTransfer</code> attribute initialized to
    <var>dataTransfer</var>, the <code>DataTransfer</code> object created above.

    If there is no relevant pointing device, the object must have its <code>screenX</code>, <code>screenY</code>, <code>clientX</code>, <code>clientY</code>, and <code>button</code> attributes set to 0.

   </li>

   <li><a>Dispatch</a> the newly created
   <code>DragEvent</code> object at the specified target element.</li>

   <li>Set the <a>drag data store allowed effects state</a> to the current value of
   <var>dataTransfer</var>'s <code>effectAllowed</code>
   attribute. (It can only have changed value if <var>e</var> is <code>dragstart</code>.)</li>

   <li>Set the <a>drag data store mode</a> back to the <a>protected mode</a> if it was changed in the first step.</li>

   <li>Break the association between <var>dataTransfer</var> and the <a>drag data
   store</a>.</li>

  </ol>

  </div>

  <div class="impl">

  <h4 id="drag-and-drop-processing-model"><dfn>Drag-and-drop processing model</dfn></h4>

  When the user attempts to begin a drag operation, the user agent must run the following steps.
  User agents must act as if these steps were run even if the drag actually started in another
  document or application and the user agent was not aware that the drag was occurring until it
  intersected with a document under the user agent's purview.

  <ol>

   <li>

    Determine what is being dragged, as follows:

    If the drag operation was invoked on a selection, then it is the selection that is being
    dragged.

    Otherwise, if the drag operation was invoked on a <code>Document</code>, it is the first
    element, going up the ancestor chain, starting at the node that the user tried to drag, that has
    the IDL attribute <code>draggable</code> set to true. If there is no such
    element, then nothing is being dragged; abort these steps, the drag-and-drop operation is never
    started.

    Otherwise, the drag operation was invoked outside the user agent's purview. What is being
    dragged is defined by the document or application where the drag was started.

    <p class="note">
<code>img</code> elements and <code>a</code> elements with an <code>href</code> attribute have their <code>draggable</code> attribute set to true by default.
</p>

   </li>

   <li><a>Create a drag data store</a>. All the DND events fired subsequently by the steps
   in this section must use this <a>drag data store</a>.</li>

   <li>

    Establish which DOM node is the <dfn>source node</dfn>, as follows:

    If it is a selection that is being dragged, then the <a>source node</a> is the
    <code>Text</code> node that the user started the drag on (typically the <code>Text</code> node
    that the user originally clicked). If the user did not specify a particular node, for example if
    the user just told the user agent to begin a drag of "the selection", then the <a>source
    node</a> is the first <code>Text</code> node containing a part of the selection.

    Otherwise, if it is an element that is being dragged, then the <a>source node</a> is
    the element that is being dragged.

    Otherwise, the <a>source node</a> is part of another document or application. When this
    specification requires that an event be dispatched at the <a>source node</a> in this case,
    the user agent must instead follow the platform-specific conventions relevant to that
    situation.

    <p class="note">
Multiple events are fired on the <a>source node</a> during the course of
    the drag-and-drop operation.
</p>

   </li>

   <li>

    Determine the <dfn>list of dragged nodes</dfn>, as follows:

    If it is a selection that is being dragged, then the <a>list of dragged nodes</a>
    contains, in <a>tree order</a>, every node that is partially or completely included in the
    selection (including all their ancestors).

    Otherwise, the <a>list of dragged nodes</a> contains only the <a>source node</a>,
    if any.

   </li>

   <li>

    If it is a selection that is being dragged, then add an item to the <a>drag data store
    item list</a>, with its properties set as follows:

    <dl>

     <dt><a>The drag data item type string</a>
     <dd>"<code>text/plain</code>"</dd>

     <dt><a>The drag data item kind</a>
     <dd><i>Plain Unicode string</i></dd>

     <dt>The actual data</dt>
     <dd>The text of the selection</dd>

    </dl>

    Otherwise, if any files are being dragged, then add one item per file to the <a>drag data
    store item list</a>, with their properties set as follows:

    <dl>

     <dt><a>The drag data item type string</a>
     <dd>The MIME type of the file, if known, or "<code>application/octet-stream</code>" otherwise.</dd>

     <dt><a>The drag data item kind</a>
     <dd><i>File</i></dd>

     <dt>The actual data</dt>
     <dd>The file's contents and name.</dd>

    </dl>

    <p class="note">
Dragging files can currently only happen from outside a <a>browsing
    context</a>, for example from a file system manager application.
</p>

    If the drag initiated outside of the application, the user agent must add items to the
    <a>drag data store item list</a> as appropriate for the data being dragged, honoring
    platform conventions where appropriate; however, if the platform conventions do not use <a>MIME types</a> to label dragged data, the user agent must make a
    best-effort attempt to map the types to MIME types, and, in any case, all the <a>drag data item type strings</a> must be <a>converted to ASCII
    lowercase</a>.

    User agents may also add one or more items representing the selection or dragged element(s)
    in other forms, e.g. as HTML.

   </li>

   <li>

    If the <a>list of dragged nodes</a> is not empty, then <a>extract the microdata from those nodes into a JSON form</a>, and add one item to the
    <a>drag data store item list</a>, with its properties set as follows:

    <dl>

     <dt><a>The drag data item type string</a>
     <dd><code>application/microdata+json</code></dd>

     <dt><a>The drag data item kind</a>
     <dd><i>Plain Unicode string</i></dd>

     <dt>The actual data</dt>
     <dd>The resulting JSON string.</dd>

    </dl>

   </li>

   <li>

    Run the following substeps:

    <ol>

     <li>Let <var>urls</var> be an empty list of <a>absolute
     URLs</a>.</li>

     <li>

      For each <var>node</var> in the <a>list of dragged nodes</a>:

      <dl>

       <dt>If the node is an <code>a</code> element with an <code>href</code> attribute</dt>

       <dd>Add to <var>urls</var> the result of <a>resolving</a> the element's <code>href</code> content
       attribute relative to the element.</dd>

       <dt>If the node is an <code>img</code> element with a <code>src</code>
       attribute</dt>

       <dd>Add to <var>urls</var> the result of <a>resolving</a> the element's <code>src</code> content attribute
       relative to the element.</dd>

      </dl>

     </li>

     <li>If <var>urls</var> is still empty, abort these substeps.</li>

     <li>Let <var>url string</var> be the result of concatenating the strings in <var>urls</var>,
     in the order they were added, separated by a U+000D CARRIAGE RETURN U+000A LINE FEED character
     pair (CRLF).</li>

     <li>Add one item to the <a>drag data store item list</a>, with its properties set as
     follows:

      <dl>

       <dt><a>The drag data item type string</a>
       <dd><code>text/uri-list</code></dd>

       <dt><a>The drag data item kind</a>
       <dd><i>Plain Unicode string</i></dd>

       <dt>The actual data</dt>
       <dd><var>url string</var></dd>

      </dl>

     </li>

    </ol>

   </li>

   <li>

    Update the <a>drag data store default feedback</a> as appropriate for the user agent
    (if the user is dragging the selection, then the selection would likely be the basis for this
    feedback; if the user is dragging an element, then that element's rendering would be used; if
    the drag began outside the user agent, then the platform conventions for determining the drag
    feedback should be used).

   </li>

   <li>

    <a>Fire a DND event</a> named <code>dragstart</code> at the
    <a>source node</a>.

    If the event is canceled, then the drag-and-drop operation should not occur; abort these
    steps.

    <p class="note">
Since events with no event listeners registered are, almost by definition, never
    canceled, drag-and-drop is always available to the user if the author does not specifically
    prevent it.
</p>

   </li>

   <li>

    <a>Initiate the drag-and-drop operation</a> in a manner consistent with platform
    conventions, and as described below.

    The drag-and-drop feedback must be generated from the first of the
    following sources that is available:

    <ol>

     <li>The <a>drag data store bitmap</a>, if any. In this case, the <a>drag data store
     hot spot coordinate</a> should be used as hints for where to put the cursor relative to the
     resulting image. The values are expressed as distances in CSS pixels from the left side and
     from the top side of the image respectively. [[!CSS]]</li>

     <li>The <a>drag data store default feedback</a>.</li>

    </ol>

   </li>

  </ol>

  From the moment that the user agent is to <dfn>initiate the drag-and-drop operation</dfn>,
  until the end of the drag-and-drop operation, device input events (e.g. mouse and keyboard events)
  must be suppressed.

  During the drag operation, the element directly indicated by the user as the drop target is
  called the <dfn>immediate user selection</dfn>. (Only elements can be selected by the user; other
  nodes must not be made available as drop targets.) However, the <a>immediate user
  selection</a> is not necessarily the <dfn>current target element</dfn>, which is the element
  currently selected for the drop part of the drag-and-drop operation.

  The <a>immediate user selection</a> changes as the user selects different elements
  (either by pointing at them with a pointing device, or by selecting them in some other way). The
  <a>current target element</a> changes when the <a>immediate user selection</a>
  changes, based on the results of event listeners in the document, as described below.

  Both the <a>current target element</a> and the <a>immediate user selection</a> can
  be null, which means no target element is selected. They can also both be elements in other
  (DOM-based) documents, or other (non-Web) programs altogether. (For example, a user could drag
  text to a word-processor.) The <a>current target element</a> is initially null.

  In addition, there is also a <dfn>current drag operation</dfn>, which can take on the values
  "<dfn><code>none</code></dfn>", "<dfn><code>copy</code></dfn>", "<dfn><code>link</code></dfn>", and "<dfn><code>move</code></dfn>". Initially, it has the value
  "<code>none</code>". It is updated by the user agent
  as described in the steps below.

  User agents must, as soon as the drag operation is <a>initiated</a> and every 350ms (&#xB1;200ms) thereafter for as long as the drag
  operation is ongoing, <a>queue a task</a> to perform the following steps in sequence:

  <ol>

   <li>

    If the user agent is still performing the previous iteration of the sequence (if any) when
    the next iteration becomes due, abort these steps for this iteration (effectively "skipping
    missed frames" of the drag-and-drop operation).

   </li>

   <li>

    <a>Fire a DND event</a> named <code>drag</code> at the
    <a>source node</a>. If this event is canceled, the user agent must set the <a>current
    drag operation</a> to "<code>none</code>" (no
    drag operation).

   </li>

   <li>

    If the <code>drag</code> event was not canceled and the user has not
    ended the drag-and-drop operation, check the state of the drag-and-drop operation, as
    follows:

    <ol>

     <li>

      If the user is indicating a different <a>immediate user selection</a> than during the
      last iteration (or if this is the first iteration), and if this <a>immediate user
      selection</a> is not the same as the <a>current target element</a>, then <a>fire a
      DND event</a> named <code>dragexit</code> at the <a>current
      target element</a>, and then update the <a>current target element</a> as follows:

      <dl class="switch">

       <dt>If the new <a>immediate user selection</a> is null</dt>

       <dd>Set the <a>current target element</a> to null also.</dd>

       <dt>If the new <a>immediate user selection</a> is in a non-DOM document or
       application</dt>

       <dd>Set the <a>current target element</a> to the <a>immediate user
       selection</a>.</dd>

       <dt>Otherwise</dt>

       <dd>

        <a>Fire a DND event</a> named <code>dragenter</code>
        at the <a>immediate user selection</a>.

        If the event is canceled, then set the <a>current target element</a> to the
        <a>immediate user selection</a>.

        Otherwise, run the appropriate step from the following list:

        <dl class="switch">

         <dt>If the <a>immediate user selection</a> is a text field (e.g.
         <code>textarea</code>, or an <code>input</code> element whose <code>type</code> attribute is in the <a>Text</a> state) or an <a>editing host</a> or
         <a>editable</a> element, and the <a>drag data store item list</a> has an item
         with <a>the drag data item type string</a> "<code>text/plain</code>" and <a>the
         drag data item kind</a> <i>Plain Unicode string</i></dt>

         <dd>Set the <a>current target element</a> to the <a>immediate user
         selection</a> anyway.</dd>

         <dt>If the <a>immediate user selection</a> is an element with a <code>dropzone</code> attribute that <a>matches</a> the <a>drag data store</a></dt>

         <dd>Set the <a>current target element</a> to the <a>immediate user
         selection</a> anyway.</dd>

         <dt>If the <a>immediate user selection</a> is an element that itself has an ancestor
         element with a <code>dropzone</code> attribute that <a>matches</a> the <a>drag data store</a></dt>

         <dd>

          Let <var>new target</var> be the nearest (deepest) such ancestor element.

          If the <a>immediate user selection</a> is <var>new target</var>, then leave the
          <a>current target element</a> unchanged.

          Otherwise, <a>fire a DND event</a> named <code>dragenter</code> at <var>new target</var>, with the current
          <a>current target element</a> as the specific <var>related target</var>. Then, set
          the <a>current target element</a> to <var>new target</var>, regardless of whether
          that event was canceled or not.

         </dd>

         <dt>If the <a>immediate user selection</a> is <a>the body element</a></dt>

         <dd>Leave the <a>current target element</a> unchanged.</dd>

         <dt>Otherwise</dt>

         <dd>

          <a>Fire a DND event</a> named <code>dragenter</code>
          at <a>the body element</a>, if there is one, or at the <code>Document</code> object,
          if not. Then, set the <a>current target element</a> to <a>the body
          element</a>, regardless of whether that event was canceled or not.

         </dd>

        </dl>

       </dd>

      </dl>

     </li>

     <li>

      If the previous step caused the <a>current target element</a> to change, and if the
      previous target element was not null or a part of a non-DOM document, then <a>fire a DND
      event</a> named <code>dragleave</code> at the previous target
      element, with the new <a>current target element</a> as the specific <var>related
      target</var>.

     </li>

     <li>

      If the <a>current target element</a> is a DOM element, then <a>fire a DND
      event</a> named <code>dragover</code> at this <a>current
      target element</a>.

      If the <code>dragover</code> event is not canceled, run the
      appropriate step from the following list:

      <dl class="switch">

       <dt>If the <a>current target element</a> is a text field (e.g. <code>textarea</code>,
       or an <code>input</code> element whose <code>type</code> attribute
       is in the <a>Text</a> state) or an <a>editing
       host</a> or <a>editable</a> element, and the <a>drag data store item list</a>
       has an item with <a>the drag data item type string</a> "<code>text/plain</code>" and
       <a>the drag data item kind</a> <i>Plain Unicode string</i></dt>

       <dd>Set the <a>current drag operation</a> to either "<code>copy</code>" or "<code>move</code>", as appropriate given the platform
       conventions.</dd>

       <dt>If the <a>current target element</a> is an element with a <code>dropzone</code> attribute that <a>matches</a> the <a>drag data store</a> and <a>specifies an operation</a></dt>

       <dd>Set the <a>current drag operation</a> to the operation <a>specified</a> by the <code>dropzone</code> attribute of the <a>current target
       element</a>.

       <dt>If the <a>current target element</a> is an element with a <code>dropzone</code> attribute that <a>matches</a> the <a>drag data store</a> and does not
       <a>specify an operation</a></dt>

       <dd>Set the <a>current drag operation</a> to "<code>copy</code>".

       <dt>Otherwise</dt>

       <dd>Reset the <a>current drag operation</a> to "<code>none</code>".</dd>

      </dl>

      Otherwise (if the <code>dragover</code> event <em>is</em>
      canceled), set the <a>current drag operation</a> based on the values of the <code>effectAllowed</code> and <code>dropEffect</code> attributes of the
      <code>DragEvent</code> object's <code>dataTransfer</code>
      object as they stood after the event <a>dispatch</a>
      finished, as per the following table:

      <table>
       <thead>
        <tr>
         <th><code>effectAllowed</code></th>
         <th><code>dropEffect</code></th>
         <th>Drag operation</th>
        </tr>
       </thead>
       <tr>
        <td>"<code>uninitialized</code>", "<code>copy</code>", "<code>copyLink</code>", "<code>copyMove</code>", or "<code>all</code>"</td>
        <td>"<code>copy</code>"</td>
        <td>"<code>copy</code>"</td>
       </tr>
       <tr>
        <td>"<code>uninitialized</code>", "<code>link</code>", "<code>copyLink</code>", "<code>linkMove</code>", or "<code>all</code>"</td>
        <td>"<code>link</code>"</td>
        <td>"<code>link</code>"</td>
       </tr>
       <tr>
        <td>"<code>uninitialized</code>", "<code>move</code>", "<code>copyMove</code>", "<code>linkMove</code>", or "<code>all</code>"</td>
        <td>"<code>move</code>"</td>
        <td>"<code>move</code>"</td>
       </tr>
       <tr>
        <td colspan="2">Any other case</td>
        <td>"<code>none</code>"</td>
       </tr>
      </table>

     </li>

     <li>

      Otherwise, if the <a>current target element</a> is not a DOM element, use
      platform-specific mechanisms to determine what drag operation is being performed (none, copy,
      link, or move), and set the <a>current drag operation</a> accordingly.

     </li>

     <li>

      Update the drag feedback (e.g. the mouse cursor) to match the <a>current drag
      operation</a>, as follows:

      <table>
       <thead>
        <tr>
         <th>Drag operation</th>
         <th>Feedback</th>
        </tr>
       </thead>
       <tr>
        <td>"<code>copy</code>"</td>
        <td>Data will be copied if dropped here.</td>
       </tr>
       <tr>
        <td>"<code>link</code>"</td>
        <td>Data will be linked if dropped here.</td>
       </tr>
       <tr>
        <td>"<code>move</code>"</td>
        <td>Data will be moved if dropped here.</td>
       </tr>
       <tr>
        <td>"<code>none</code>"</td>
        <td>No operation allowed, dropping here will cancel the drag-and-drop operation.</td>
       </tr>
      </table>

     </li>

    </ol>

   </li>

   <li>

    Otherwise, if the user ended the drag-and-drop operation (e.g. by releasing the mouse button
    in a mouse-driven drag-and-drop interface), or if the <code>drag</code>
    event was canceled, then this will be the last iteration. Run the following steps, then stop the
    drag-and-drop operation:

    <ol>

     <li>

      If the <a>current drag operation</a> is "<code>none</code>" (no drag operation), or, if the user
      ended the drag-and-drop operation by canceling it (e.g. by hitting the <kbd>Escape</kbd> key),
      or if the <a>current target element</a> is null, then the drag operation failed. Run
      these substeps:

      <ol>

       <li>Let <var>dropped</var> be false.</li>

       <li>If the <a>current target element</a> is a DOM element, <a>fire a DND
       event</a> named <code>dragleave</code> at it; otherwise, if
       it is not null, use platform-specific conventions for drag cancelation.</li>

       <li>Set the <a>current drag operation</a> to "<code>none</code>".</li>

      </ol>

      Otherwise, the drag operation might be a success; run these substeps:

      <ol>

       <li>Let <var>dropped</var> be true.</li>

       <li>If the <a>current target element</a> is a DOM element, <a>fire a DND
       event</a> named <code>drop</code> at it; otherwise, use
       platform-specific conventions for indicating a drop.</li>

       <li>

        If the event is canceled, set the <a>current drag operation</a> to the value of the
        <code>dropEffect</code> attribute of the
        <code>DragEvent</code> object's <code>dataTransfer</code>
        object as it stood after the event <a>dispatch</a>
        finished.

        Otherwise, the event is not canceled; perform the event's default action, which depends
        on the exact target as follows:

        <dl class="switch">

         <dt>If the <a>current target element</a> is a text field (e.g. <code>textarea</code>,
         or an <code>input</code> element whose <code>type</code> attribute
         is in the <a>Text</a> state) or an <a>editing
         host</a> or <a>editable</a> element, and the <a>drag data store item
         list</a> has an item with <a>the drag data item type string</a>
         "<code>text/plain</code>" and <a>the drag data item kind</a> <i>Plain Unicode
         string</i></dt>

         <dd>Insert the actual data of the first item in the <a>drag data store item
         list</a> to have <a>a drag data item type
         string</a> of "<code>text/plain</code>" and <a>a drag
         data item kind</a> that is <i>Plain Unicode string</i> into the text field or
         <a>editing host</a> or <a>editable</a> element in a manner consistent with
         platform-specific conventions (e.g. inserting it at the current mouse cursor position, or
         inserting it at the end of the field).</dd>

         <dt>Otherwise</dt>

         <dd>Reset the <a>current drag operation</a> to "<code>none</code>".</dd>

        </dl>

       </li>

      </ol>

     </li>

     <li>

      <a>Fire a DND event</a> named <code>dragend</code> at the
      <a>source node</a>.

     </li>

     <li>

      Run the appropriate steps from the following list as the default action of the <code>dragend</code> event:

      <dl class="switch">

       <dt>If <var>dropped</var> is true, the <a>current target element</a> is a <i>text
       field</i> (see below), the <a>current drag operation</a> is "<code>move</code>", and the source of the
       drag-and-drop operation is a selection in the DOM that is entirely contained within an
       <a>editing host</a></dt>

       <dd><a>Delete the selection</a>.</dd>

       <dt>If <var>dropped</var> is true, the <a>current target element</a> is a <i>text
       field</i> (see below), the <a>current drag operation</a> is "<code>move</code>", and the source of the
       drag-and-drop operation is a selection in a text field</dt>

       <dd>The user agent should delete the dragged selection from the relevant text
       field.</dd>

       <dt>If <var>dropped</var> is false or if the <a>current drag operation</a> is "<code>none</code>"</dt>

       <dd>The drag was canceled. If the platform conventions dictate that this be represented to
       the user (e.g. by animating the dragged selection going back to the source of the
       drag-and-drop operation), then do so.</dd>

       <dt>Otherwise</dt>

       <dd>The event has no default action.</dd>

      </dl>

      For the purposes of this step, a <i>text field</i> is a <code>textarea</code> element or an
      <code>input</code> element whose <code>type</code> attribute is in
      one of the
      <a>Text</a>,
      <a>Search</a>,
      <a>Tel</a>,
      <a>URL</a>,
      <a>E-mail</a>,
      <a>Password</a>, or
      <a>Number</a>
      states.

     </li>

    </ol>

   </li>

  </ol>

  <p class="note">
User agents are encouraged to consider how to react to drags near the edge of
  scrollable regions. For example, if a user drags a link to the bottom of the viewport on a long
  page, it might make sense to scroll the page so that the user can drop the link lower on the
  page.
</p>

  <p class="note">
This model is independent of which <code>Document</code> object the nodes involved
  are from; the events are fired as described above and the rest of the processing model runs as
  described above, irrespective of how many documents are involved in the operation.
</p>

  </div>

  <h4 id="events-summary"><dfn>Events summary</dfn></h4>

  <em>This section is non-normative.</em>

  The following events are involved in the drag-and-drop
  model.

  <table>

   <thead>
    <tr>
     <th> Event Name </th>
     <th> Target </th>

     <th> Cancelable? </th>
     <th> <a>Drag data store mode</a> </th>

     <th> <code>dropEffect</code> </th>
     <th> Default Action </th>
    </tr>
   </thead>

   <tbody>

    <tr>
     <td><dfn><code>dragstart</code></dfn></td>
     <td><a>Source node</a></td>

     <td>&#x2713; Cancelable</td>
     <td><a>Read/write mode</a>

     <td>"<code>none</code>"</td>
     <td>Initiate the drag-and-drop operation</td>
    </tr>

    <tr>
     <td><dfn><code>drag</code></dfn></td>
     <td><a>Source node</a></td>

     <td>&#x2713; Cancelable</td>
     <td><a>Protected mode</a>

     <td>"<code>none</code>"</td>
     <td>Continue the drag-and-drop operation</td>
    </tr>

    <tr>
     <td><dfn><code>dragenter</code></dfn></td>
     <td><a>Immediate user selection</a> or <a>the body element</a></td>

     <td>&#x2713; Cancelable</td>
     <td><a>Protected mode</a>

     <td><a>Based on <code>effectAllowed</code> value</a></td>
     <td>Reject <a>immediate user selection</a> as potential <a>target element</a></td>
    </tr>

    <tr>
     <td><dfn><code>dragexit</code></dfn></td>
     <td><a>Previous target element</a></td>

     <td>&mdash;</td>
     <td><a>Protected mode</a>

     <td>"<code>none</code>"</td>
     <td>None</td>
    </tr>

    <tr>
     <td><dfn><code>dragleave</code></dfn></td>
     <td><a>Previous target element</a></td>

     <td>&mdash;</td>
     <td><a>Protected mode</a>

     <td>"<code>none</code>"</td>
     <td>None</td>
    </tr>

    <tr>
     <td><dfn><code>dragover</code></dfn></td>
     <td><a>Current target element</a></td>

     <td>&#x2713; Cancelable</td>
     <td><a>Protected mode</a>

     <td><a>Based on <code>effectAllowed</code> value</a></td>
     <td>Reset the <a>current drag operation</a> to "none"</td>
    </tr>

    <tr>
     <td><dfn><code>drop</code></dfn></td>
     <td><a>Current target element</a></td>

     <td>&#x2713; Cancelable</td>
     <td><a>Read-only mode</a>

     <td><a>Current drag operation</a></td>
     <td>Varies</td>
    </tr>

    <tr>
     <td><dfn><code>dragend</code></dfn></td>
     <td><a>Source node</a></td>

     <td>&mdash;</td>
     <td><a>Protected mode</a>

     <td><a>Current drag operation</a></td>
     <td>Varies</td>
    </tr>

   </tbody>

  </table>

  Not shown in the above table: all these events bubble, and the <code>effectAllowed</code> attribute always has the value it had
  after the <code>dragstart</code> event, defaulting to "<code>uninitialized</code>" in the <code>dragstart</code> event.

  <h4 id="the-draggable-attribute"><dfn>The <dfn><code>draggable</code></dfn> attribute</dfn></h4>

  All <a>HTML elements</a> may have the <code>draggable</code>
  content attribute set. The <code>draggable</code> attribute is an
  <a>enumerated attribute</a>. It has three states. The first state is <i>true</i> and it has
  the keyword <code>true</code>. The second state is <i>false</i> and it has the keyword
  <code>false</code>. The third state is <i>auto</i>; it has no keywords but it is the
  <i>missing value default</i>.

  The <i>true</i> state means the element is draggable; the <i>false</i> state means that it is
  not. The <i>auto</i> state uses the default behavior of the user agent.

  An element with a <code>draggable</code> attribute should also have a
  <code>title</code> attribute that names the element for the purpose of
  non-visual interactions.

  <dl class="domintro">

   <dt><var>element</var> . <code>draggable</code> [ = <var>value</var> ]</dt>

   <dd>

    Returns true if the element is draggable; otherwise, returns false.

    Can be set, to override the default and set the <code>draggable</code>
    content attribute.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>draggable</code></dfn> IDL attribute, whose value depends
  on the content attribute's in the way described below, controls whether or not the element is
  draggable. Generally, only text selections are draggable, but elements whose <code>draggable</code> IDL attribute is true become draggable as well.

  If an element's <code>draggable</code> content attribute has the state
  <i>true</i>, the <code>draggable</code> IDL attribute must return true.

  Otherwise, if the element's <code>draggable</code> content attribute has
  the state <i>false</i>, the <code>draggable</code> IDL attribute must return
  false.

  Otherwise, the element's <code>draggable</code> content attribute has
  the state <i>auto</i>. If the element is an <code>img</code> element, an <code>object</code>
  element that <a>represents</a> an image, or an <code>a</code> element with an <code>href</code> content attribute, the <code>draggable</code> IDL attribute must return true; otherwise, the <code>draggable</code> IDL attribute must return false.

  If the <code>draggable</code> IDL attribute is set to the value false,
  the <code>draggable</code> content attribute must be set to the literal
  value "<code>false</code>". If the <code>draggable</code> IDL
  attribute is set to the value true, the <code>draggable</code> content
  attribute must be set to the literal value "<code>true</code>".

  </div>

  <h4 id="the-dropzone-attribute"><dfn>The <dfn><code>dropzone</code></dfn> attribute</dfn></h4>

  All <a>HTML elements</a> may have the <code>dropzone</code> content
  attribute set. When specified, its value must be an <a>unordered set of unique space-separated
  tokens</a> that are <a>ASCII case-insensitive</a>. The allowed values are the
  following:

  <dl>

   <dt><dfn><code>copy</code></dfn></dt>

   <dd>Indicates that dropping an accepted item on the element will result in a copy of the
   dragged data.

   <dt><dfn><code>move</code></dfn></dt>

   <dd>Indicates that dropping an accepted item on the element will result in the dragged data
   being moved to the new location.

   <dt><dfn><code>link</code></dfn></dt>

   <dd>Indicates that dropping an accepted item on the element will result in a link to the
   original data.

   <dt>Any keyword with eight characters or more, beginning with the an <a>ASCII
   case-insensitive</a> match for the string "<code>string:</code>"</dt>

   <dd>Indicates that items with <a>the drag data item kind</a> <i>Plain Unicode string</i>
   and <a>the drag data item type string</a> set to a value that matches the remainder of the
   keyword are accepted.</dd>

   <dt>Any keyword with six characters or more, beginning with an <a>ASCII
   case-insensitive</a> match for the string "<code>file:</code>"</dt>

   <dd>Indicates that items with <a>the drag data item kind</a> <i>File</i> and <a>the
   drag data item type string</a> set to a value that matches the remainder of the keyword are
   accepted.</dd>

  </dl>

  The <code>dropzone</code> content attribute's values must not have more
  than one of the three feedback values (<code>copy</code>, <code>move</code>, and <code>link</code>)
  specified. If none are specified, the <code>copy</code> value is
  implied.

  An element with a <code>dropzone</code> attribute should also have a
  <code>title</code> attribute that names the element for the purpose of
  non-visual interactions.

  <div class="impl">

  A <code>dropzone</code> attribute <dfn>matches a drag data store</dfn> if the <a><code>dropzone</code> processing steps</a> result in a match.

  A <code>dropzone</code> attribute <dfn>specifies an operation</dfn> if the <a><code>dropzone</code> processing steps</a> result in a specified operation. The
  specified operation is as given by those steps.

  The <dfn><code>dropzone</code> processing steps</dfn> are as follows.
  They either result in a match or not, and separate from this result either in a specified
  operation or not, as defined below.

  <ol>

   <li>Let <var>value</var> be the value of the <code>dropzone</code> attribute.</li>

   <li>Let <var>keywords</var> be the result of <a>splitting <var>value</var> on spaces</a>.</li>

   <li>Let <var>matched</var> be false.</li>

   <li>Let <var>operation</var> be unspecified.</li>

   <li>

    For each value in <var>keywords</var>, if any, in the order that they were found in
    <var>value</var>, run the following steps.

    <ol>

     <li>Let <var>keyword</var> be the keyword.</li>

     <li>

      If <var>keyword</var> is one of "<code>copy</code>",
      "<code>move</code>", or "<code>link</code>", then: run the following substeps:

      <ol>

       <li>If <var>operation</var> is still unspecified, then let <var>operation</var> be the string given by <var>keyword</var>.</li>

       <li>Skip to the step labeled <i>end of keyword</i> below.</li>

      </ol>

     </li>

     <li>If <var>keyword</var> does not contain a U+003A COLON character (:), or if the
     first such character in <var>keyword</var> is either the first character or the last
     character in the string, then skip to the step labeled <i>end of keyword</i> below.</li>

     <li>Let <var>kind code</var> be the substring of <var>keyword</var> from
     the first character in the string to the last character in the string that is before the first
     U+003A COLON character (:) in the string, <a>converted to ASCII lowercase</a>.

     <li>

      Jump to the appropriate step from the list below, based on the value of <var>kind
      code</var>:

      <dl class="switch">

       <dt>If <var>kind code</var> is the string "<code>string</code>"</dt>
       <dd>

        Let <var>kind</var> be <i>Plain Unicode string</i>.

       </dd>

       <dt>If <var>kind code</var> is the string "<code>file</code>"</dt>
       <dd>

        Let <var>kind</var> be <i>File</i>.

       </dd>

       <dt>Otherwise</dt>
       <dd>

        Skip to the step labeled <i>end of keyword</i> below.

       </dd>

      </dl>

     </li>

     <li>Let <var>type</var> be the substring of <var>keyword</var> from the
     first character after the first U+003A COLON character (:) in the string, to the last character
     in the string, <a>converted to ASCII lowercase</a>.</li>

     <li>If there exist any items in the <a>drag data store item list</a> whose <a>drag data item kind</a> is  the
     kind given in <var>kind</var> and
     whose <a>drag data item type string</a> is <var>type</var>, then let <var>matched</var> be true.</li>

     <li><i>End of keyword</i>: Go on to the next keyword, if any, or the next step in the
     overall algorithm, if there are no more.</li>

    </ol>

   </li>

   <li>

    <p>The algorithm results in a match if <var>matched</var> is true, and does not
    otherwise.

    The algorithm results in a specified operation if <var>operation</var> is not
    unspecified. The specified operation, if one is specified, is the one given by <var>operation</var>.

   </li>

  </ol>

  The <dfn><code>dropzone</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.

  </div>

  <div class="example">

   In this example, a <code>div</code> element is made into a drop target for image files using
   the <code>dropzone</code> attribute. Images dropped into the target are
   then displayed.

   <pre highlight="html">
&lt;div dropzone="copy file:image/png file:image/gif file:image/jpeg" ondrop="receive(event, this)">
 &lt;p>Drop an image here to have it displayed.&lt;/p>
&lt;/div>
&lt;script>
 function receive(event, element) {
   var data = event.dataTransfer.items;
   for (var i = 0; i &lt; data.length; i += 1) {
     if ((data[i].kind == 'file') && (data[i].type.match('^image/'))) {
       var img = new Image();
       img.src = window.createObjectURL(data[i].getAsFile());
       element.appendChild(img);
     }
   }
 }
&lt;/script>
</pre>

  </div>

  <div class="impl">

  <h4 id="security-risks-in-the-drag-and-drop-model"><dfn>Security risks in the drag-and-drop model</dfn></h4>

  User agents must not make the data added to the <code>DataTransfer</code> object during the
  <code>dragstart</code> event available to scripts until the <code>drop</code> event, because otherwise, if a user were to drag sensitive
  information from one document to a second document, crossing a hostile third document in the
  process, the hostile document could intercept the data.

  For the same reason, user agents must consider a drop to be successful only if the user
  specifically ended the drag operation &mdash; if any scripts end the drag operation, it must be
  considered unsuccessful (canceled) and the <code>drop</code> event must not be
  fired.

  User agents should take care to not start drag-and-drop operations in response to script
  actions. For example, in a mouse-and-window environment, if a script moves a window while the user
  has his mouse button depressed, the UA would not consider that to start a drag. This is important
  because otherwise UAs could cause data to be dragged from sensitive sources and dropped into
  hostile documents without the user's consent.

  User agents should filter potentially active (scripted) content (e.g. HTML) when it is dragged
  and when it is dropped, using a safelist of known-safe features. Similarly, <a>relative URLs</a> should be turned into absolute URLs to avoid references changing in
  unexpected ways. This specification does not specify how this is performed.

  <div class="example">

   Consider a hostile page providing some content and getting the user to select and drag and
   drop (or indeed, copy and paste) that content to a victim page's <code>contenteditable</code> region. If the browser does not ensure that
   only safe content is dragged, potentially unsafe content such as scripts and event handlers in
   the selection, once dropped (or pasted) into the victim site, get the privileges of the victim
   site. This would thus enable a cross-site scripting attack.

  </div>

  </div>

  <h2 id="loading-web-pages"><dfn>Loading Web pages</dfn></h2>

  <div class="impl">

  This section describes features that apply most directly to Web browsers. Having said that,
  except where specified otherwise, the requirements defined in this section <em>do</em> apply to
  all user agents, whether they are Web browsers or not.

  </div>

  <h3 id="browsing-contexts"><dfn>Browsing contexts</dfn></h3>

  A <dfn>browsing context</dfn> is an environment in which <code>Document</code> objects are
  presented to the user.

  <p class="note">
A tab or window in a Web browser typically contains a <a>browsing
  context</a>, as does an <code>iframe</code><span class="impl"> or <code>frame</code>s in a
  <code>frameset</code></span>.
</p>

  Each <a>browsing context</a> has a corresponding <code>WindowProxy</code> object.

  A <a>browsing context</a> has a <a>session history</a>, which lists the
  <code>Document</code> objects that that <a>browsing context</a> has presented, is
  presenting, or will present. At any time, one <code>Document</code> in each <a>browsing
  context</a> is designated the <dfn>active document</dfn>. A <code>Document</code>'s
  <a>browsing context</a> is that <a>browsing context</a> whose <a>session
  history</a> contains the <code>Document</code>, if any. (A <code>Document</code> created using
  an API such as <code>createDocument()</code> has no
  <a>browsing context</a>.)

  Each <code>Document</code> in a <a>browsing context</a> is <dfn>associated</dfn> with a <code>Window</code> object. A
  <a>browsing context</a>'s <code>WindowProxy</code> object forwards everything to the
  <a>browsing context</a>'s <a>active document</a>'s <code>Window</code> object.

  <p class="note">
In general, there is a 1-to-1 mapping from the <code>Window</code> object to the
  <code>Document</code> object. There are two exceptions. First, a <code>Window</code> can be reused
  for the presentation of a second <code>Document</code> in the same <a>browsing context</a>,
  such that the mapping is then 1-to-2. This occurs when a <a>browsing context</a> is <a>navigated</a> from the initial <code>about:blank</code> <code>Document</code>
  to another, with <a>replacement enabled</a>. Second, a <code>Document</code> can end up
  being reused for several <code>Window</code> objects when the <code>document.open()</code> method is used, such that the mapping is then
  many-to-1.
</p>

  <p class="note">
A <code>Document</code> does not necessarily have a <a>browsing context</a>
  associated with it. In particular, data mining tools are likely to never instantiate browsing
  contexts.
</p>

  <hr />

  A <a>browsing context</a> can have a <dfn>creator browsing context</dfn>, the
  <a>browsing context</a> that was responsible for its creation. If a <a>browsing
  context</a> has a <a>parent browsing context</a>, then that is its <a>creator browsing
  context</a>. Otherwise, if the <a>browsing context</a> has an <a>opener browsing
  context</a>, then <em>that</em> is its <a>creator browsing context</a>. Otherwise, the
  <a>browsing context</a> has no <a>creator browsing context</a>.

  If a <a>browsing context</a> <var>A</var> has a <a>creator browsing
  context</a>, then the <code>Document</code> that was the <a>active document</a> of that
  <a>creator browsing context</a> at the time <var>A</var> was created is the
  <dfn>creator <code>Document</code></dfn>.

  <div class="impl">

  <dfn>Creating a browsing context</dfn>: When a <a>browsing context</a> is first created, it must be created with a single
  <code>Document</code> in its session history, whose <a>address</a> is <code>about:blank</code>, which is marked as being an <a>HTML document</a>, whose <a>character encoding</a> is UTF-8, and which is both <a>ready for post-load
  tasks</a> and <a>completely loaded</a> immediately, along with a new <code>Window</code>
  object that the <code>Document</code> is associated with. The <code>Document</code> must have a
  single child <code>html</code> node, which itself has two empty child nodes: a <code>head</code>
  element, and a <code>body</code> element. As soon as this <code>Document</code> is created, the
  user agent must <a>implement the sandboxing</a> for it. If the <a>browsing context</a>
  has a <a>creator <code>Document</code></a>, then the <a>browsing context</a>'s
  <code>Document</code>'s <a>referrer</a> must be set to
  <a>the address</a> of that <a>creator
  <code>Document</code></a> at the time of the <a>browsing context</a>'s creation.

  <p class="note">
If the <a>browsing context</a> is created specifically to be immediately
  navigated, then that initial navigation will have <a>replacement enabled</a>.
</p>

  The <a>origin</a> and <a>effective script origin</a> of the
  <code>about:blank</code> <code>Document</code> are set when the <code>Document</code> is created.
  If the new <a>browsing context</a> has a <a>creator browsing context</a>, then the
  <a>origin</a> of the <code>about:blank</code> <code>Document</code> is an <a>alias</a> to the <a>origin</a> of the <a>creator
  <code>Document</code></a> and the <a>effective script origin</a> of the
  <code>about:blank</code> <code>Document</code> is initially an <a>alias</a> to the <a>effective script origin</a> of the
  <a>creator <code>Document</code></a>. Otherwise, the <a>origin</a> of the
  <code>about:blank</code> <code>Document</code> is a globally unique identifier assigned when the
  new <a>browsing context</a> is created and the <a>effective script origin</a> of the
  <code>about:blank</code> <code>Document</code> is initially an <a>alias</a> to its <a>origin</a>.

  </div>

  <h4 id="nested-browsing-contexts"><dfn>Nested browsing contexts</dfn></h4>

  Certain elements (for example, <code>iframe</code> elements) can instantiate further <a>browsing contexts</a>. These are called <dfn>nested browsing contexts</dfn>. If a browsing context <var>P</var> has a
  <code>Document</code> <var>D</var> with an element <var>E</var> that nests
  another browsing context <var>C</var> inside it, then <var>C</var> is said to be
  <dfn>nested through</dfn> <var>D</var>, and <var>E</var> is said to be the <dfn>browsing context container</dfn> of <var>C</var>.
  If the <a>browsing context container</a> element <var>E</var> is <a>in</a> the <code>Document</code> <var>D</var>, then <var>P</var> is
  said to be the <dfn>parent browsing context</dfn> of <var>C</var> and <var>C</var> is said to be a <dfn>child browsing context</dfn> of <var>P</var>.
  Otherwise, the <a>nested browsing context</a> <var>C</var> has no <a>parent
  browsing context</a>.

  A browsing context <var>A</var> is said to be an <dfn>ancestor</dfn> of a browsing context <var>B</var> if there exists a browsing
  context <var>A</var> that is a <a>child browsing context</a> of <var>A</var> and that is itself an <a>ancestor</a> of
  <var>B</var>, or if the browsing context <var>A</var> is the
  <a>parent browsing context</a> of <var>B</var>.

  A browsing context that is not a <a>nested browsing context</a> has no <a>parent
  browsing context</a>, and is the <dfn>top-level browsing context</dfn> of all the browsing
  contexts for which it is an <a>ancestor browsing context</a>.

  The transitive closure of <a>parent browsing contexts</a>
  for a <a>nested browsing context</a> gives the list of <a>ancestor browsing contexts</a>.

  The <dfn>list of the descendant browsing contexts</dfn> of a <code>Document</code> <var>d</var> is the (ordered) list returned by the following algorithm:

  <ol>

   <li>Let <var>list</var> be an empty list.</li>

   <li>

    For each <a>child browsing context</a> of <var>d</var> that is <a>nested through</a> an element that is <a>in the <code>Document</code></a> <var>d</var>, in the <a>tree
    order</a> of the elements nesting those <a>browsing
    contexts</a>, run these substeps:

    <ol>

     <li>Append that <a>child browsing context</a> to the list <var>list</var>.

     <li>Append the <a>list of the descendant browsing contexts</a> of the <a>active
     document</a> of that <a>child browsing context</a> to the list <var>list</var>.</li>

    </ol>

   </li>

   <li>Return the constructed <var>list</var>.</li>

  </ol>

  A <code>Document</code> is said to be <dfn>fully active</dfn> when it is the <a>active
  document</a> of its <a>browsing context</a>, and either its browsing context is a
  <a>top-level browsing context</a>, or it has a <a>parent browsing context</a> and the
  <code>Document</code> <a>through which</a> it is
  <a>nested</a> is itself <a>fully active</a>.

  Because they are nested through an element, <a>child browsing
  contexts</a> are always tied to a specific <code>Document</code> in their <a>parent browsing
  context</a>. User agents must not allow the user to interact with <a>child browsing contexts</a> of elements that are in <code>Document</code>s that are
  not themselves <a>fully active</a>.

  A <a>nested browsing context</a> can have a <a>seamless browsing context flag</a>
  set, if it is embedded through an <code>iframe</code> element with a <code>seamless</code> attribute.

  A <a>nested browsing context</a> can be put into a <dfn>delaying <code>load</code> events mode</dfn>. This is used when it is <a>navigated</a>, to <a>delay the load event</a> of the <a>browsing
  context container</a> before the new <code>Document</code> is created.

  The <dfn>document family</dfn> of a <a>browsing context</a> consists of the union of all
  the <code>Document</code> objects in that <a>browsing context</a>'s <a>session
  history</a> and the <a>document families</a> of all those
  <code>Document</code> objects. The <a>document family</a> of a <code>Document</code> object
  consists of the union of all the <a>document families</a> of the
  <a>browsing contexts</a> that are <a>nested through</a> the <code>Document</code> object.

  <h5 id="navigating-nested-browsing-contexts-in-the-dom"><dfn>Navigating nested browsing contexts in the DOM</dfn></h5>

  <dl class="domintro">

   <dt><var>window</var> . <code>top</code></dt>

   <dd>

    Returns the <code>WindowProxy</code> for the <a>top-level browsing context</a>.

   </dd>

   <dt><var>window</var> . <code>parent</code></dt>

   <dd>

    Returns the <code>WindowProxy</code> for the <a>parent browsing context</a>.

   </dd>

   <dt><var>window</var> . <code>frameElement</code></dt>

   <dd>

    Returns the <code>Element</code> for the <a>browsing context container</a>.

    Returns null if there isn't one, and in cross-origin situations.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>top</code></dfn> IDL attribute on the <code>Window</code> object
  of a <code>Document</code> in a <a>browsing context</a> <var>b</var> must return
  the <code>WindowProxy</code> object of its <a>top-level browsing context</a> (which would be
  its own <code>WindowProxy</code> object if it was a <a>top-level browsing context</a>
  itself), if it has one, or its own <code>WindowProxy</code> object otherwise (e.g. if it was a
  detached <a>nested browsing context</a>).

  The <dfn><code>parent</code></dfn> IDL attribute on the <code>Window</code>
  object of a <code>Document</code> in a <a>browsing context</a> <var>b</var> must
  return the <code>WindowProxy</code> object of the <a>parent browsing context</a>, if there
  is one (i.e. if <var>b</var> is a <a>child browsing context</a>), or the
  <code>WindowProxy</code> object of the <a>browsing context</a> <var>b</var> itself,
  otherwise (i.e. if it is a <a>top-level browsing context</a> or a detached <a>nested
  browsing context</a>).

  The <dfn><code>frameElement</code></dfn> IDL attribute on the
  <code>Window</code> object of a <code>Document</code> <var>d</var>, on getting, must run
  the following algorithm:

  <ol>

   <li>If <var>d</var> is not a <code>Document</code> in a <a>nested browsing
   context</a>, return null and abort these steps.</li>

   <li>If the <a>browsing context container</a>'s <a>node document</a> does not have the
   <a>same</a> <a>effective script origin</a> as the
   <a>effective script origin</a> specified by the <a>entry settings object</a>, then
   return null and abort these steps.</li>

   <li>Return the <a>browsing context container</a> for <var>b</var>.</li>

  </ol>

  </div>

  <h4 id="auxiliary-browsing-contexts"><dfn>Auxiliary browsing contexts</dfn></h4>

  It is possible to create new browsing contexts that are related to a <a>top-level browsing
  context</a> without being nested through an element. Such browsing contexts are called <dfn>auxiliary browsing contexts</dfn>. Auxiliary browsing contexts
  are always <a>top-level browsing contexts</a>.

  An <a>auxiliary browsing context</a> has an <dfn>opener browsing context</dfn>, which is
  the <a>browsing context</a> from which the <a>auxiliary browsing context</a> was
  created.

  <h5 id="navigating-auxiliary-browsing-contexts-in-the-dom"><dfn>Navigating auxiliary browsing contexts in the DOM</dfn></h5>

  The <dfn><code>opener</code></dfn> IDL attribute on the <code>Window</code>
  object, on getting, must return the <code>WindowProxy</code> object of the <a>browsing
  context</a> from which the current <a>browsing context</a> was created (its <a>opener
  browsing context</a>), if there is one, if it is still available, and if the current
  <a>browsing context</a> has not <i>disowned its opener</i>;
  otherwise, it must return null. On setting, if the new value is null then the current
  <a>browsing context</a> must <dfn>disown its opener</dfn>; if
  the new value is anything else then the user agent must

    call the [[DefineOwnProperty]] internal method of the <code>Window</code> object, passing the
    property name "<code>opener</code>" as the property key, and the Property Descriptor {
    [[Value]]: <var>value</var>, [[Writable]]: true, [[Enumerable]]: true,
    [[Configurable]]: true } as the property descriptor,

  where <var>value</var> is the new value.

  <h4 id="secondary-browsing-contexts"><dfn>Secondary browsing contexts</dfn></h4>

  User agents may support <dfn>secondary browsing
  contexts</dfn>, which are <a>browsing contexts</a> that form part
  of the user agent's interface, apart from the main content area.

  <div class="impl">

  <h4 id="security"><dfn>Security</dfn></h4>

  A <a>browsing context</a> <var>A</var> is <dfn>familiar
  with</dfn> a second <a>browsing context</a> <var>B</var> if one of the following
  conditions is true:

  <ul>

   <li>Either the <a>origin</a> of the <a>active document</a> of <var>A</var>
   is the <a>same</a> as the <a>origin</a> of the <a>active
   document</a> of <var>B</var>, or</li>

   <li>The browsing context <var>A</var> is a <a>nested browsing context</a> with a
   <a>top-level browsing context</a>, and its <a>top-level browsing context</a> is <var>B</var>, or</li>

   <li>The browsing context <var>B</var> is an <a>auxiliary browsing context</a> and
   <var>A</var> is <a>familiar with</a> <var>B</var>'s <a>opener
   browsing context</a>, or</li>

   <li>The browsing context <var>B</var> is not a <a>top-level browsing context</a>,
   but there exists an <a>ancestor browsing context</a> of <var>B</var> whose
   <a>active document</a> has the <a>same</a> <a>origin</a> as
   the <a>active document</a> of <var>A</var> (possibly in fact being <var>A</var> itself).</li>

  </ul>

  <hr />

  A <a>browsing context</a> <var>A</var> is <dfn>allowed to navigate</dfn> a
  second <a>browsing context</a> <var>B</var> if the following algorithm terminates
  positively:

  <ol>

   <li>If <var>A</var> is not the same <a>browsing context</a> as <var>B</var>, and <var>A</var> is not one of the <a>ancestor browsing contexts</a> of <var>B</var>, and <var>B</var>
   is not a <a>top-level browsing context</a>, and <var>A</var>'s <a>active
   document</a>'s <a>active sandboxing flag set</a> has its <a>sandboxed navigation
   browsing context flag</a> set, then abort these steps negatively.</li>

   <li>Otherwise, if <var>B</var> is a <a>top-level browsing context</a>, and is
   one of the <a>ancestor browsing contexts</a> of <var>A</var>, and <var>A</var>'s <a>node document</a>'s <a>active sandboxing
   flag set</a> has its <a>sandboxed top-level navigation browsing context flag</a> set,
   then abort these steps negatively.</li>

   <li>Otherwise, if <var>B</var> is a <a>top-level browsing context</a>, and is
   neither <var>A</var> nor one of the <a>ancestor
   browsing contexts</a> of <var>A</var>, and <var>A</var>'s
   <code>Document</code>'s <a>active sandboxing flag set</a> has its <a>sandboxed
   navigation browsing context flag</a> set, and <var>A</var> is not the <a>one
   permitted sandboxed navigator</a> of <var>B</var>, then abort these steps
   negatively.</li>

   <li>Otherwise, terminate positively!</li>

  </ol>

  <hr />

  An element has a <dfn>browsing context scope origin</dfn> if its <code>Document</code>'s
  <a>browsing context</a> is a <a>top-level browsing context</a> or if all of its
  <code>Document</code>'s <a>ancestor browsing contexts</a>
  all have <a>active documents</a> whose <a>origin</a> are the
  <a>same origin</a> as the element's <a>node document</a>'s <a>origin</a>. If an
  element has a <a>browsing context scope origin</a>, then its value is the
  <a>origin</a> of the element's <a>node document</a>.

  </div>

  <div class="impl">

  <h4 id="groupings-of-browsing-contexts"><dfn>Groupings of browsing contexts</dfn></h4>

  Each <a>browsing context</a> is defined as having a list of one or more <dfn>directly
  reachable browsing contexts</dfn>. These are:

  <ul>

   <li>The <a>browsing context</a> itself.</li>

   <li>All the <a>browsing context</a>'s <a>child browsing
   contexts</a>.</li>

   <li>The <a>browsing context</a>'s <a>parent browsing context</a>.</li>

   <li>All the <a>browsing contexts</a> that have the <a>browsing
   context</a> as their <a>opener browsing context</a>.</li>

   <li>The <a>browsing context</a>'s <a>opener browsing context</a>.</li>

  </ul>

  The transitive closure of all the <a>browsing contexts</a> that
  are <a>directly reachable browsing contexts</a> forms a <dfn>unit of related browsing
  contexts</dfn>.

  Each <a>unit of related browsing contexts</a> is then further divided into the smallest
  number of groups such that every member of each group has an <a>active document</a> with an
  <a>effective script origin</a> that, through appropriate manipulation of the <code>document.domain</code> attribute, could be made to be the same as
  other members of the group, but could not be made the same as members of any other group. Each
  such group is a <dfn>unit of related similar-origin browsing contexts</dfn>.

  <p class="note">
There is also at most one <a>event loop</a> per <a>unit of related
  similar-origin browsing contexts</a> (though several <a>units of related similar-origin browsing contexts</a> can
  have a shared <a>event loop</a>).
</p>

  </div>

  <h4 id="browsing-context-names"><dfn>Browsing context names</dfn></h4>

  Browsing contexts can have a <dfn>browsing context name</dfn>. By default, a browsing context
  has no name (its name is not set).

  A <dfn>valid browsing context name</dfn> is any string with at least one character that does
  not start with a U+005F LOW LINE character. (Names starting with an underscore are reserved for
  special keywords.)

  A <dfn>valid browsing context name or keyword</dfn> is any string that is either a <a>valid
  browsing context name</a> or that is an <a>ASCII case-insensitive</a> match for one of:
  <code>_blank</code>, <code>_self</code>, <code>_parent</code>, or <code>_top</code>.

  These values have different meanings based on whether the page is sandboxed or not, as
  summarized in the following (non-normative) table. In this table, "current" means the
  <a>browsing context</a> that the link or script is in, "parent" means the <a>parent
  browsing context</a> of the one the link or script is in, "master" means the nearest
  <a>ancestor browsing context</a> of the one the link or script is in that is not itself in a
  <a>seamless iframe</a>, "top" means the <a>top-level
  browsing context</a> of the one the link or script is in, "new" means a new <a>top-level
  browsing context</a> or <a>auxiliary browsing context</a> is to be created, subject to
  various user preferences and user agent policies, "none" means that nothing will happen, and
  "maybe new" means the same as "new" if the "<code>allow-popups</code>" keyword is also specified on the
  <code>sandbox</code> attribute (or if the user overrode the
  sandboxing), and the same as "none" otherwise.

  <table>
   <thead>
    <tr>
     <th rowspan=2>Keyword
     <th rowspan=2>Ordinary effect
     <th colspan=5>Effect in an <code>iframe</code> with...
    <tr>
     <th><code>seamless=""</code>
     <th><code>sandbox=""</code>
     <th><code>sandbox="" seamless=""</code>
     <th><code>sandbox="allow-top-navigation"</code>
     <th><code>sandbox="allow-top-navigation" seamless=""</code>

   <tbody>
    <tr>
     <td>none specified, for links and form submissions
     <td>current
     <td>master
     <td>current
     <td>master
     <td>current
     <td>master

    <tr>
     <td>empty string
     <td>current
     <td>master
     <td>current
     <td>master
     <td>current
     <td>master

    <tr>
     <td><code>_blank</code>
     <td>new
     <td>new
     <td>maybe new
     <td>maybe new
     <td>maybe new
     <td>maybe new

    <tr>
     <td><code>_self</code>
     <td>current
     <td>current
     <td>current
     <td>current
     <td>current
     <td>current

    <tr>
     <td><code>_parent</code> if there isn't a parent
     <td>current
     <td>current
     <td>current
     <td>current
     <td>current
     <td>current

    <tr>
     <td><code>_parent</code> if parent is also top
     <td>parent/top
     <td>parent/top
     <td>none
     <td>none
     <td>parent/top
     <td>parent/top

    <tr>
     <td><code>_parent</code> if there is one and it's not top
     <td>parent
     <td>parent
     <td>none
     <td>none
     <td>none
     <td>none

    <tr>
     <td><code>_top</code> if top is current
     <td>current
     <td>current
     <td>current
     <td>current
     <td>current
     <td>current

    <tr>
     <td><code>_top</code> if top is not current
     <td>top
     <td>top
     <td>none
     <td>none
     <td>top
     <td>top

    <tr>
     <td>name that doesn't exist
     <td>new
     <td>new
     <td>maybe new
     <td>maybe new
     <td>maybe new
     <td>maybe new

    <tr>
     <td>name that exists and is a descendant
     <td>specified descendant
     <td>specified descendant
     <td>specified descendant
     <td>specified descendant
     <td>specified descendant
     <td>specified descendant

    <tr>
     <td>name that exists and is current
     <td>current
     <td>current
     <td>current
     <td>current
     <td>current
     <td>current

    <tr>
     <td>name that exists and is an ancestor that is top
     <td>specified ancestor
     <td>specified ancestor
     <td>none
     <td>none
     <td>specified ancestor/top
     <td>specified ancestor/top

    <tr>
     <td>name that exists and is an ancestor that is not top
     <td>specified ancestor
     <td>specified ancestor
     <td>none
     <td>none
     <td>none
     <td>none

    <tr>
     <td>other name that exists with common top
     <td>specified
     <td>specified
     <td>none
     <td>none
     <td>none
     <td>none

    <tr>
     <td>name that exists with different top, if <a>familiar</a> and <a>one permitted sandboxed navigator</a>
     <td>specified
     <td>specified
     <td>specified
     <td>specified
     <td>specified
     <td>specified

    <tr>
     <td>name that exists with different top, if <a>familiar</a> but not <a>one permitted sandboxed navigator</a>
     <td>specified
     <td>specified
     <td>none
     <td>none
     <td>none
     <td>none

    <tr>
     <td>name that exists with different top, not <a>familiar</a>
     <td>new
     <td>new
     <td>maybe new
     <td>maybe new
     <td>maybe new
     <td>maybe new

  </table>

  <p class="tablenote"><small>Most of the restrictions on sandboxed browsing contexts are applied by
  other algorithms, e.g. the <a>navigation</a> algorithm, not <a>the rules
  for choosing a browsing context given a browsing context name</a> given below.</small></p>

  <div class="impl">

  <hr />

  An algorithm is <dfn>allowed to show a popup</dfn> if any of the following conditions is
  true:

  <ul>

   <li>The <a>task</a> in which the algorithm is running is currently
   processing an <a>activation behavior</a> whose <code>click</code> event
   was <a>trusted</a>.</li>

   <li>

    <p>The <a>task</a> in which the algorithm is running is currently
    running the event listener for a <a>trusted</a> event whose
    type is in the following list:

    <ul class="brief">
     <li><code>change</code></li>
     <li><code>click</code></li>
     <li><code>dblclick</code></li>
     <li><code>mouseup</code></li>
     <li><code>reset</code></li>
     <li><code>submit</code></li>
    </ul>

   </li>

   <li>

    The <a>task</a> in which the algorithm is running was <a>queued</a> by an algorithm that was <a>allowed to show a popup</a>,
    and the chain of such algorithms started within a user-agent defined timeframe.

    <p class="example">
For example, if a user clicked a button, it might be acceptable for a popup
    to result from that after 4 seconds, but it would likely not be acceptable for a popup to result
    from that after 4 hours.
</p>

   </li>

  </ul>

  <hr />

  <dfn>The rules for choosing a browsing context given a browsing context name</dfn> are as
  follows. The rules assume that they are being applied in the context of a <a>browsing
  context</a>, as part of the execution of a <a>task</a>.

  <ol>

   <li>

    If the given browsing context name is the empty string or <code>_self</code>, then
    the chosen browsing context must be the current one.

    If the given browsing context name is <code>_self</code>, then this is an
    <a>explicit self-navigation override</a>, which overrides the behavior of the
    <a>seamless browsing context flag</a> set by the <code>seamless</code> attribute on <code>iframe</code> elements.

   </li>

   <li>If the given browsing context name is <code>_parent</code>, then the chosen
   browsing context must be the <a><em>parent</em> browsing context</a> of the current one,
   unless there isn't one, in which case the chosen browsing context must be the current browsing
   context.</li>

   <li>If the given browsing context name is <code>_top</code>, then the chosen browsing
   context must be the <a>top-level browsing context</a> of the current one, if there is one,
   or else the current browsing context.</li>

   <li>

    If the given browsing context name is not <code>_blank</code> and there exists a
    browsing context whose <a>name</a> is the same as the given
    browsing context name, and the current browsing context is <a>familiar with</a> that
    browsing context, and the user agent determines that the two browsing contexts are related
    enough that it is ok if they reach each other, then that browsing context must be the chosen
    one. If there are multiple matching browsing contexts, the user agent should select one in some
    arbitrary consistent manner, such as the most recently opened, most recently focused, or more
    closely related.

    If the browsing context is chosen by this step to be the current browsing context, then this
    is also an <a>explicit self-navigation override</a>.

   </li>

   <li>

    Otherwise, a new browsing context is being requested, and what happens depends on the user
    agent's configuration and abilities &mdash; it is determined by the rules given for the first
    applicable option from the following list:

    <dl class="switch">

     <dt>If the algorithm is not <a>allowed to show a popup</a> and the
     user agent has been configured to not show popups (i.e. the user agent has a "popup blocker"
     enabled)</dt>

     <dd>

      There is no chosen browsing context. The user agent may inform the user that a popup has
      been blocked.

     </dd>

     <dt>If the current browsing context's <a>active document</a>'s
     <a>active sandboxing flag set</a> has the <a>sandboxed auxiliary navigation browsing
     context flag</a> set.</dt>

     <dd>

      Typically, there is no chosen browsing context.

      The user agent may offer to <a>create</a> a new <a>top-level browsing context</a> or reuse
      an existing <a>top-level browsing context</a>. If the user picks one of those options,
      then the designated browsing context must be the chosen one (the browsing context's name isn't
      set to the given browsing context name). The default behavior (if the user agent doesn't
      offer the option to the user, or if the user declines to allow a browsing context to be used)
      must be that there must not be a chosen browsing context.

      <p class="warning">If this case occurs, it means that an author has explicitly sandboxed the
      document that is trying to open a link.</p>

     </dd>

     <dt>If the user agent has been configured such that in this instance it will
     create a new browsing context, and the browsing context is being requested as part of <a>following a hyperlink</a> whose <a>link
     types</a> include the <code>noreferrer</code> keyword</dt>

     <dd>A new <a>top-level browsing context</a> must be <a>created</a>. If the given browsing
     context name is not <code>_blank</code>, then the new top-level browsing context's
     name must be the given browsing context name (otherwise, it has no name). The chosen browsing
     context must be this new browsing context. The creation of such a <a>browsing context</a>
     is <dfn>a new start for session storage</dfn>.

     <p class="note">
If it is immediately <a>navigated</a>, then the
     navigation will be done with <a>replacement enabled</a>.
</p></dd>

     <dt>If the user agent has been configured such that in this instance it will create a new
     browsing context, and the <code>noreferrer</code> keyword doesn't
     apply</dt>

     <dd>A new <a>auxiliary browsing context</a> must be created, with the <a>opener
     browsing context</a> being the current one. If the given browsing context name is not <code>_blank</code>, then the new auxiliary browsing context's name must be the given
     browsing context name (otherwise, it has no name). The chosen browsing context must be this new
     browsing context.

     <p class="note">
If it is immediately <a>navigated</a>, then the
     navigation will be done with <a>replacement enabled</a>.
</p></dd>

     <dt>If the user agent has been configured such that in this instance it will reuse the current
     browsing context</dt>

     <dd>The chosen browsing context is the current browsing context.</dd>

     <dt>If the user agent has been configured such that in this instance it will not find a
     browsing context</dt>

     <dd>There must not be a chosen browsing context.</dd>

    </dl>

    User agent implementors are encouraged to provide a way for users to configure the user agent
    to always reuse the current browsing context.

    If the current browsing context's <a>active document</a>'s <a>active sandboxing flag
    set</a> has both the <a>sandboxed navigation browsing context flag</a> and
    <a>sandbox propagates to auxiliary browsing contexts flag</a> set, and the chosen browsing
    context picked above, if any, is a new browsing context, then all the flags that are set in the
    current browsing context's <a>active document</a>'s <a>active sandboxing flag
    set</a> when the new browsing context is created must be set in the new browsing context's
    <a>popup sandboxing flag set</a>, and the current browsing context must be set as the new
    browsing context's <a>one permitted sandboxed navigator</a>.

   </li>

  </ol>

  </div>

  <h3 id="the-window-object"><dfn>The <code>Window</code> object</dfn></h3>

  <pre class="idl" data-highlight="webidl">
[PrimaryGlobal]
/*sealed*/ interface <dfn>Window</dfn> : <a>EventTarget</a> {
  // the current browsing context
  [Unforgeable] readonly attribute <a>WindowProxy</a> <a>window</a>;
  [Replaceable] readonly attribute <a>WindowProxy</a> <a>self</a>;
  [Unforgeable] readonly attribute <a>Document</a> <a>document</a>;
  attribute DOMString <a>name</a>;
  [PutForwards=<a>href</a>, Unforgeable] readonly attribute <a>Location</a> <a>location</a>;
  readonly attribute <a>History</a> <a>history</a>;
  [Replaceable] readonly attribute <a>BarProp</a> <a>locationbar</a>;
  [Replaceable] readonly attribute <a>BarProp</a> <a>menubar</a>;
  [Replaceable] readonly attribute <a>BarProp</a> <a>personalbar</a>;
  [Replaceable] readonly attribute <a>BarProp</a> <a>scrollbars</a>;
  [Replaceable] readonly attribute <a>BarProp</a> <a>statusbar</a>;
  [Replaceable] readonly attribute <a>BarProp</a> <a>toolbar</a>;
  attribute DOMString <a>status</a>;
  void <a>close</a>();
  readonly attribute boolean <a>closed</a>;
  void <a>stop</a>();
  void <a>focus</a>();
  void <a>blur</a>();

  // other browsing contexts
  [Replaceable] readonly attribute <a>WindowProxy</a> <a>frames</a>;
  [Replaceable] readonly attribute unsigned long <a>length</a>;
  [Unforgeable] readonly attribute <a>WindowProxy</a> <a>top</a>;
  attribute any <a>opener</a>;
  [Replaceable] readonly attribute <a>WindowProxy</a> <a>parent</a>;
  readonly attribute <a>Element</a>? <a>frameElement</a>;
  <a>WindowProxy</a> <a>open</a>(optional DOMString url = "about:blank", optional DOMString target = "_blank", [TreatNullAs=EmptyString] optional DOMString features = "", optional boolean replace = false);
  <a>getter</a> <a>WindowProxy</a> (unsigned long index);
  <a>getter</a> object (DOMString name);

  // the user agent
  readonly attribute <a>Navigator</a> <a>navigator</a>;
  [Replaceable, SameObject] readonly attribute <a>External</a> <a>external</a>;
  readonly attribute <a>ApplicationCache</a> <a>applicationCache</a>;

  // user prompts
  void <a>alert</a>();
  void <a>alert</a>(DOMString message);
  boolean <a>confirm</a>(optional DOMString message = "");
  DOMString? <a>prompt</a>(optional DOMString message = "", optional DOMString default = "");
  void <a>print</a>();
  any <a>showModalDialog</a>(DOMString url, optional any argument); // deprecated
};
<a>Window</a> implements <a>GlobalEventHandlers</a>;
<a>Window</a> implements <a>WindowEventHandlers</a>;

callback <dfn>FrameRequestCallback</dfn> = void (<a>DOMHighResTimeStamp</a> time);
</pre>

  <dl class="domintro">

   <dt><var>window</var> . <code>window</code></dt>
   <dt><var>window</var> . <code>frames</code></dt>
   <dt><var>window</var> . <code>self</code></dt>

   <dd>

    These attributes all return <var>window</var>.

   </dd>

   <dt><var>window</var> . <code>document</code></dt>

   <dd>

    Returns the <code>Document</code> associated with <var>window</var>.

   </dd>

   <dt><var>document</var> . <code>defaultView</code></dt>

   <dd>

    Returns the <code>Window</code> object of the <a>active document</a>.

   </dd>

  </dl>

  <div class="impl">

  The <code>Window</code> has an <dfn>HTTPS state</dfn>,
  which represents the security properties of the network channel used to deliver the
  <code>Document</code> with which the <code>Window</code> is associated. The value will be one of
  "<code>modern</code>", "<code>deprecated</code>", or "<code>none</code>". If it is not explicitly set, then its value is "<code>none</code>".

  The <dfn><code>window</code></dfn>, <dfn><code>frames</code></dfn>, and <dfn><code>self</code></dfn>
  IDL attributes must all return the <code>Window</code> object's <a>browsing context</a>'s
  <code>WindowProxy</code> object.

  The <dfn><code>document</code></dfn> IDL attribute must return
  <a>the <code>Window</code> object's newest <code>Document</code> object</a>.

  <p class="note">
The <code>Document</code> object associated with a <code>Window</code> object can
  change in exactly one case: when the <a>navigate</a> algorithm <a>initializes a new <code>Document</code> object</a> for the first page loaded
  in a <a>browsing context</a>. In that specific case, the <code>Window</code> object of the
  original <code>about:blank</code> page is reused and gets a new <code>Document</code> object.
</p>

  The <dfn><code>defaultView</code></dfn> IDL attribute of the
  <code>Document</code> interface must return the <code>Document</code>'s <a>browsing
  context</a>'s <code>WindowProxy</code> object, if there is one, or null otherwise.

  <hr />

  For historical reasons, <code>Window</code> objects must also have a writable, configurable,
  non-enumerable property named <dfn><code>HTMLDocument</code></dfn> whose value is the
  <code>Document</code> interface object.

  </div>

  <div class="impl">

  <h4 id="security"><dfn>Security</dfn></h4>

  <p class="critical">This section describes a security model that is underdefined, imperfect, and
  does not match implementations. Work is ongoing to attempt to resolve this, but in the meantime,
  please do not rely on this section for precision. Implementors are urged to send their feedback on
  how cross-origin cross-global access to <code>Window</code> and <code>Location</code> objects
  should work. See <a>bug 20701</a>.</p>

  User agents must throw a <code>SecurityError</code> exception whenever any
  properties of a <code>Window</code> object are accessed when the <a>incumbent settings
  object</a> specifies an <a>effective script origin</a> that is not the <a>same</a> as <a>the <code>Window</code> object's
  <code>Document</code></a>'s <a>effective script origin</a>, with the following
  exceptions:

  <ul>

   <li>The <code>location</code> attribute

   <li>The <code>postMessage()</code> method

   <li>The <code>window</code> attribute

   <li>The <code>frames</code> attribute

   <li>The <code>self</code> attribute

   <li>The <code>top</code> attribute

   <li>The <code>parent</code> attribute

   <li>The <code>opener</code> attribute

   <li>The <code>closed</code> attribute

   <li>The <code>close()</code> method

   <li>The <code>blur()</code> method

   <li>The <code>focus()</code> method

   <li>The <a>dynamic nested browsing context properties</a>

  </ul>

  When the <a>incumbent settings object</a> specifies an <a>effective script
  origin</a> that is different than a <a><code>Window</code>
  object's <code>Document</code></a>'s <a>effective script origin</a>, the user agent must
  act as if any changes to that <code>Window</code> object's properties, getters, setters, etc, were
  not present, and as if all the properties of that <code>Window</code> object had their
  [[Enumerable]] attribute set to false.

  For members that return objects (including function objects), each distinct <a>effective
  script origin</a> that is not the same as the <code>Window</code> object's
  <code>Document</code>'s <a>effective script origin</a> must be provided with a separate set
  of objects. These objects must have the prototype chain appropriate for the script for which the
  objects are created (not those that would be appropriate for scripts whose <a>global
  object</a>, as specified by their <a>settings object</a>, is the <code>Window</code>
  object in question).

  <div class="example">

   For instance, if two frames containing <code>Document</code>s from different <a>origins</a> access the same <code>Window</code> object's <code>postMessage()</code> method, they will get distinct objects that
   are not equal.

  </div>

  </div>

  <h4 id="apis-for-creating-and-navigating-browsing-contexts-by-name"><dfn>APIs for creating and navigating browsing contexts by name</dfn></h4>

  <dl class="domintro">

   <dt><var>window</var> = <var>window</var> . <code>open</code>( [ <var>url</var> [, <var>target</var> [, <var>features</var> [, <var>replace</var> ] ] ] ] )</dt>

   <dd>

    Opens a window to show <var>url</var> (defaults to <code>about:blank</code>), and
    returns it. The <var>target</var> argument gives the name of the new window. If a
    window exists with that name already, it is reused. The <var>replace</var> attribute,
    if true, means that whatever page is currently open in that window will be removed from the
    window's session history. The <var>features</var> argument can be used to influence the rendering of the new window.

   </dd>

   <dt><var>window</var> . <code>name</code> [ = <var>value</var> ]</dt>

   <dd>

    Returns the name of the window.

    Can be set, to change the name.

   </dd>

   <dt><var>window</var> . <code>close</code>()</dt>

   <dd>

    Closes the window.

   </dd>

   <dt><var>window</var> . <code>closed</code></dt>

   <dd>

    Returns true if the window has been closed, false otherwise.

   </dd>

   <dt><var>window</var> . <code>stop</code>()</dt>

   <dd>

    Cancels the document load.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>open()</code></dfn> method on <code>Window</code> objects
  provides a mechanism for <a>navigating</a> an existing <a>browsing
  context</a> or opening and navigating an <a>auxiliary browsing context</a>.

  When the method is invoked, the user agent must run the following steps:

  <ol>

   <li>Let <var>entry settings</var> be the <a>entry settings object</a> when the method
   was invoked.</li>

   <li>Let <var>url</var> be the first argument.</li>

   <li>Let <var>target</var> be the second argument.</li>

   <li>Let <var>features</var> be the third argument.</li>

   <li>Let <var>replace</var> be the fourth argument.</li>

   <li>Let <var>source browsing context</var> be the <a>responsible browsing context</a>
   specified by <var>entry settings</var>.</li>

   <li>If <var>target</var> is the empty string, let it be the string "<code>_blank</code>" instead.</li>

   <li>

    If the user has indicated a preference for which <a>browsing context</a> to navigate,
    follow these substeps:

    <ol>

     <li>Let <var>target browsing context</var> be the <a>browsing context</a> indicated by
     the user.</li>

     <li>If <var>target browsing context</var> is a new <a>top-level browsing context</a>,
     let the <var>source browsing context</var> be set as <var>target browsing context</var>'s
     <a>one permitted sandboxed navigator</a>.</li>

    </ol>

    <p class="example">
For example, suppose there is a user agent that supports control-clicking a
    link to open it in a new tab. If a user clicks in that user agent on an element whose <code>onclick</code> handler uses the <code>window.open()</code> API to open a page in an iframe, but, while doing so,
    holds the control key down, the user agent could override the selection of the target browsing
    context to instead target a new tab.
</p>

    Otherwise, apply <a>the rules for choosing a browsing context given a browsing context
    name</a> using <var>target</var> as the name and <var>source browsing context</var> as the
    context in which the algorithm is executed. If this results in there not being a chosen browsing
    context, then throw an <code>InvalidAccessError</code> exception and abort these steps.
    Otherwise, let <var>target browsing context</var> be the <a>browsing context</a> so
    obtained.

   </li>

   <li>If <var>target browsing context</var> was just created, either as part of <a>the rules
   for choosing a browsing context given a browsing context name</a> or due to the user
   indicating a preference for navigating a new <a>top-level browsing context</a>, then let
   <var>new</var> be true. Otherwise, let it be false.</li>

   <li>Interpret <var>features</var> as defined in the CSSOM View specification. <a>\[CSSOMVIEW]</a></li>

   <li>

    If <var>url</var> is the empty string, run the appropriate steps from the following list:

    <dl>

     <dt>If <var>new</var> is false</dt>

     <dd>Jump to the step labeled <i>end</i>.</dd>

     <dt>If <var>new</var> is true</dt>

     <dd>Let <var>resource</var> be the <a>URL</a> "<code>about:blank</code>".</dd>

    </dl>

    Otherwise, <a>resolve</a> <var>url</var> relative to the
    <a>API base URL</a> specified by <var>entry settings</var>, and let <var>resource</var> be
    the <a>resulting absolute URL</a>, if any. If the <a>resolve a URL</a> algorithm
    failed, then run one of the following two steps instead:

    <ul>

     <li>Let <var>resource</var> be a resource representing an inline error page.</li>

     <li>If <var>new</var> is false, jump to the step labeled <i>end</i>, otherwise, let
     <var>resource</var> be the <a>URL</a> "<code>about:blank</code>".</li>

    </ul>

   </li>

   <li>

    If <var>resource</var> is "<code>about:blank</code>" and <var>new</var> is true, <a>queue
    a task</a> to <a>fire a simple event</a> named <code>load</code> at
    <var>target browsing context</var>'s <code>Window</code> object, with <i>target override</i> set to <var>target browsing
    context</var>'s <a><code>Window</code> object's
    <code>Document</code></a> object.

    Otherwise, <a>navigate</a> <var>target browsing context</var>
    to <var>resource</var>, with <a>exceptions enabled</a>. If <var>new</var> is true, then
    <a>replacement must be enabled</a> also. The <a>source
    browsing context</a> is <var>source browsing context</var>.

   </li>

   <li><i>End</i>: Return the <code>WindowProxy</code> object of <var>target browsing
   context</var>.</li>

  </ol>

  <hr />

  The <dfn><code>name</code></dfn> attribute of the <code>Window</code> object
  must, on getting, return the current <a>name</a> of the
  <a>browsing context</a>, if one is set, or the empty string otherwise; and, on setting, set
  the <a>name</a> of the <a>browsing context</a> to the
  new value.

  <p class="note">
The name <a>gets reset</a> when the browsing context is
  navigated to another domain.
</p>

  <hr />

  The <dfn><code>close()</code></dfn> method on <code>Window</code>
  objects should, if all the following conditions are met, <a>close</a> the <a>browsing context</a> <var>A</var>:

  <ul class="brief">

   <li>The corresponding <a>browsing context</a> <var>A</var> is
   <a>script-closable</a>.</li>

   <li>The <a>responsible browsing context</a> specified by the <a>incumbent settings
   object</a> is <a>familiar with</a> the <a>browsing context</a> <var>A</var>.</li>

   <li>The <a>responsible browsing context</a> specified by the
   <a>incumbent settings object</a> is <a>allowed to navigate</a> the <a>browsing
   context</a> <var>A</var>.</li>

  </ul>

  <p>A <a>browsing context</a> is <dfn>script-closable</dfn> if it is an <a>auxiliary
  browsing context</a> that was created by a script (as opposed to by an action of the user), or
  if it is a <a>top-level browsing context</a> whose <a>session history</a> contains
  only one <code>Document</code>.

  The <dfn><code>closed</code></dfn> attribute on <code>Window</code>
  objects must return true if the <code>Window</code> object's <a>browsing context</a> has
  been <a>discarded</a>, and false otherwise.

  The <dfn><code>stop()</code></dfn> method on <code>Window</code>
  objects should, if there is an existing attempt to <a>navigate</a> the <a>browsing
  context</a> and that attempt is not currently running the <a>unload a document</a>
  algorithm, cancel that <a>navigation</a>; then, it must <a>abort</a> the <a>active document</a> of the <a>browsing
  context</a> of the <code>Window</code> object on which it was invoked.

  </div>

  <h4 id="accessing-other-browsing-contexts"><dfn>Accessing other browsing contexts</dfn></h4>

  <dl class="domintro">

   <dt><var>window</var> . <code>length</code></dt>

   <dd>

    Returns the number of <a>child browsing
    contexts</a>.

   </dd>

   <dt><var>window</var>[<var>index</var>]</dt>

   <dd>

    Returns the indicated <a>child browsing context</a>.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>length</code></dfn> IDL attribute on the <code>Window</code>
  interface must return the number of <a>child browsing
  contexts</a> that are <a>nested through</a>
  elements that are <a>in the <code>Document</code></a> that is the
  <a>active document</a> of that <code>Window</code> object, if that <code>Window</code>'s
  <a>browsing context</a> shares the same <a>event loop</a> as the <a>responsible
  document</a> specified by the <a>entry settings object</a> accessing the IDL attribute;
  otherwise, it must return zero.

  The <a>supported property indices</a> on the <code>Window</code> object at any instant
  are the numbers in the range 0 .. <a><var>n</var>-1</a>, where <var>n</var> is the number returned by the <code>length</code> IDL
  attribute. If <var>n</var> is zero then there are no <a>supported property
  indices</a>.

  To <dfn>determine the value of an indexed property</dfn> <var>index</var> of a <code>Window</code> object, the user agent must return the
  <code>WindowProxy</code> object of the <var>index</var>th <a>child browsing
  context</a> of the <code>Document</code> that is <a>nested through</a> an element that is <a>in the
  <code>Document</code></a>, sorted in the order that the elements nesting those <a>browsing contexts</a> were most recently inserted into the
  <code>Document</code>, the <code>WindowProxy</code> object of the most recently inserted
  <a>browsing context container</a>'s <a>nested browsing context</a> being last.

  These properties are the <dfn>dynamic nested browsing context properties</dfn>.

  </div>

  <h4 id="named-access-on-the-window-object"><dfn>Named access on the <code>Window</code> object</dfn></h4>

  <dl class="domintro">

   <dt><var>window</var>[<var>name</var>]</dt>

   <dd>

    Returns the indicated element or collection of elements.

    As a general rule, relying on this will lead to brittle code. Which IDs end up mapping to
    this API can vary over time, as new features are added to the Web platform, for example. Instead
    of this, use <code>document.getElementById()</code> or <code>document.querySelector()</code>.

   </dd>

  </dl>

  <div class="impl">

  The <code>Window</code> interface <a>supports named
  properties</a>. The <a>supported property names</a> at any moment consist of the
  following, in <a>tree order</a>, ignoring later duplicates:

  <ul>

   <li>the <a>browsing context name</a> of any <a>child browsing context</a> of the
   <a>active document</a> whose name is not the empty string,</li>

   <li>the value of the <code>name</code> content attribute for all <code>a</code>,
   <code>applet</code>, <code>area</code>, <code>embed</code>, <code>form</code>,
   <code>frameset</code>, <code>img</code>, and <code>object</code> elements in the <a>active
   document</a> that have a non-empty <code>name</code> content attribute, and</li>

   <li>the value of the <code>id</code> content attribute of any <a>HTML element</a> in the <a>active document</a> with a non-empty <code>id</code> content attribute.</li>

  </ul>

  The properties exposed in this way must be <a>unenumerable</a>.

  To <a>determine the value of a named property</a> <var>name</var> when <dfn>the <code>Window</code> object is indexed for property
  retrieval</dfn>, the user agent must return the value obtained using the following steps:

  <ol>

   <li>

    Let <var>objects</var> be the list of <a>named objects</a> with the name <var>name</var>
    in the <a>active document</a>.

    <p class="note">
There will be at least one such object, by definition.

   </li>

   <li>

    If <var>objects</var> contains a <a>nested browsing context</a>, then return
    the <code>WindowProxy</code> object of the <a>nested browsing context</a> corresponding to
    the first <a>browsing context container</a> in <a>tree order</a> whose
    <a>browsing context</a> is in <var>objects</var>, and abort these steps.

   </li>

   <li>

    Otherwise, if <var>objects</var> has only one element, return that element and
    abort these steps.

   </li>

   <li>

    Otherwise return an <code>HTMLCollection</code> rooted at the <code>Document</code> node,
    whose filter matches only <a>named objects</a> with
    the name <var>name</var>. (By definition, these will all be elements.)

   </li>

  </ol>

  <dfn>Named objects</dfn> with the name <var>name</var>, for the purposes of the above algorithm, are those that are either:

  <ul>

   <li><a>child browsing contexts</a> of the <a>active
   document</a> whose name is <var>name</var>,</li>

   <li><code>a</code>, <code>applet</code>, <code>area</code>, <code>embed</code>,
   <code>form</code>, <code>frameset</code>, <code>img</code>, or <code>object</code> elements that
   have a <code>name</code> content attribute whose value is <var>name</var>, or</li>

   <li><a>HTML elements</a> that have an <code>id</code> content attribute
   whose value is <var>name</var>.</li>

  </ul>

  </div>

  <div class="impl">

  <h4 id="garbage-collection-and-browsing-contexts"><dfn>Garbage collection and browsing contexts</dfn></h4>

  A <a>browsing context</a> has a strong reference to each of its <code>Document</code>s
  and its <code>WindowProxy</code> object, and the user agent itself has a strong reference to its
  <a>top-level browsing contexts</a>.

  A <code>Document</code> has a strong reference to its <code>Window</code> object.

  <p class="note">A <code>Window</code> object <a>has a strong
  reference</a> to its <code>Document</code> object through its <code>document</code> attribute. Thus, references from other scripts to either of
  those objects will keep both alive. Similarly, both <code>Document</code> and <code>Window</code>
  objects have <a>implied strong references</a> to the
  <code>WindowProxy</code> object.
</p>

  Each <a>script</a> has a strong reference to its <a>settings
  object</a>, and each <a>environment settings object</a> has strong references to its
  <a>global object</a>, <a>responsible browsing context</a>, and <a>responsible
  document</a> (if any).

  When a <a>browsing context</a> is to <dfn>discard a <code>Document</code></dfn>, the user
  agent must run the following steps:

  <ol>

   <li>Set the <code>Document</code>'s <i>salvageable</i> state to false.</li>

   <li>Run any <a>unloading document cleanup steps</a> for the <code>Document</code> that
   are defined by this specification and <a>other applicable specifications</a>.</li>

   <li><a>Abort the <code>Document</code></a>.</li>

   <li>Remove any <a>tasks</a> associated with the
   <code>Document</code> in any <a>task source</a>, without running those tasks.</li>

   <li><a>Discard</a> all the <a>child browsing contexts</a> of the <code>Document</code>.</li>

   <li>Lose the strong reference from the <code>Document</code>'s <a>browsing context</a>
   to the <code>Document</code>.</li>

  </ol>

  <p class="note">
Whenever a <code>Document</code> object is <a>discarded</a>, it is also removed from the list of <a>the worker's
  <code>Document</code>s</a> of each worker whose list contains that <code>Document</code>.
</p>

  When <dfn>a <em>browsing context</em> is discarded</dfn>, the strong reference from the user
  agent itself to the <a>browsing context</a> must be severed, and all the
  <code>Document</code> objects for all the entries in the <a>browsing context</a>'s session
  history must be <a>discarded</a> as well.

  User agents may <a>discard</a> <a>top-level browsing contexts</a> at any time (typically, in
  response to user requests, e.g. when a user force-closes a window containing one or more <a>top-level browsing contexts</a>). Other <a>browsing contexts</a> must be discarded once their
  <code>WindowProxy</code> object is eligible for garbage collection.

  </div>

  <h4 id="closing-browsing-contexts"><dfn>Closing browsing contexts</dfn></h4>

  When the user agent is required to <dfn>close a browsing context</dfn>, it must run the
  following steps:

  <ol>

   <li>Let <var>specified browsing context</var> be the <a>browsing context</a>
   being closed.</li>

   <li><a>Prompt to unload</a> the <a>active
   document</a> of the <var>specified browsing context</var>. If the user <a>refused
   to allow the document to be unloaded</a>, then abort these steps.</li>

   <li><a>Unload</a> the <a>active document</a> of the <var>specified browsing context</var> with the <var>recycle</var> parameter set to
   false.</li>

   <li>Remove the <var>specified browsing context</var> from the user interface (e.g.
   close or hide its tab in a tabbed browser).</li>

   <li><a>Discard</a> the <var>specified
   browsing context</var>.</li>

  </ol>

  User agents should offer users the ability to arbitrarily <a>close</a> any <a>top-level browsing context</a>.

  <h4 id="browser-interface-elements"><dfn>Browser interface elements</dfn></h4>

  To allow Web pages to integrate with Web browsers, certain Web browser interface elements are
  exposed in a limited way to scripts in Web pages.

  Each interface element is represented by a <code>BarProp</code> object:

  <pre class="idl" data-highlight="webidl">
interface <dfn>BarProp</dfn> {
  readonly attribute boolean <a>visible</a>;
};
</pre>

  <dl class="domintro">

   <dt><var>window</var> . <code>locationbar</code> . <code>visible</code></dt>
   <dd>
    Returns true if the location bar is visible; otherwise, returns false.
   </dd>

   <dt><var>window</var> . <code>menubar</code> . <code>visible</code></dt>
   <dd>
    Returns true if the menu bar is visible; otherwise, returns false.
   </dd>

   <dt><var>window</var> . <code>personalbar</code> . <code>visible</code></dt>

   <dd>
    Returns true if the personal bar is visible; otherwise, returns false.
   </dd>

   <dt><var>window</var> . <code>scrollbars</code> . <code>visible</code></dt>
   <dd>
    Returns true if the scroll bars are visible; otherwise, returns false.
   </dd>

   <dt><var>window</var> . <code>statusbar</code> . <code>visible</code></dt>
   <dd>
    Returns true if the status bar is visible; otherwise, returns false.
   </dd>

   <dt><var>window</var> . <code>toolbar</code> . <code>visible</code></dt>
   <dd>
    Returns true if the toolbar is visible; otherwise, returns false.
   </dd>

  </dl>

  <div class="impl">

  The <dfn>visible</dfn> attribute, on getting, must return either
  true or a value determined by the user agent to most accurately represent the visibility state of
  the user interface element that the object represents, as described below.

  The following <code>BarProp</code> objects exist for each <code>Document</code> object in a
  <a>browsing context</a>. Some of the user interface elements represented by these objects
  might have no equivalent in some user agents; for those user agents, except when otherwise
  specified, the object must act as if it was present and visible (i.e. its <code>visible</code> attribute must return true).

  <dl>

   <dt><dfn>The location bar <code>BarProp</code> object</dfn></dt>

   <dd>Represents the user interface element that contains a control that displays the
   <a>URL</a> of the <a>active document</a>, or some similar interface concept.</dd>

   <dt><dfn>The menu bar <code>BarProp</code> object</dfn></dt>

   <dd>Represents the user interface element that contains a list of commands in menu form, or some
   similar interface concept.</dd>

   <dt><dfn>The personal bar <code>BarProp</code> object</dfn></dt>

   <dd>Represents the user interface element that contains links to the user's favorite pages, or
   some similar interface concept.</dd>

   <dt><dfn>The scrollbar <code>BarProp</code> object</dfn></dt>

   <dd>Represents the user interface element that contains a scrolling mechanism, or some similar
   interface concept.</dd>

   <dt><dfn>The status bar <code>BarProp</code> object</dfn></dt>

   <dd>Represents a user interface element found immediately below or after the document, as
   appropriate for the user's media, which typically provides information about ongoing network
   activity or information about elements that the user's pointing device is current indicating. If
   the user agent has no such user interface element, then the object may act as if the
   corresponding user interface element was absent (i.e. its <code>visible</code> attribute may return false).</dd>

   <dt><dfn>The toolbar <code>BarProp</code> object</dfn></dt>

   <dd>Represents the user interface element found immediately above or before the document, as
   appropriate for the user's media, which typically provides <a>session history</a> traversal
   controls (back and forward buttons, reload buttons, etc). If the user agent has no such user
   interface element, then the object may act as if the corresponding user interface element was
   absent (i.e. its <code>visible</code> attribute may return
   false).</dd>

  </dl>

  The <dfn><code>locationbar</code></dfn> attribute must return
  <a>the location bar <code>BarProp</code> object</a>.

  The <dfn><code>menubar</code></dfn> attribute must return <a>the
  menu bar <code>BarProp</code> object</a>.

  The <dfn><code>personalbar</code></dfn> attribute must return
  <a>the personal bar <code>BarProp</code> object</a>.

  The <dfn><code>scrollbars</code></dfn> attribute must return
  <a>the scrollbar <code>BarProp</code> object</a>.

  The <dfn><code>statusbar</code></dfn> attribute must return
  <a>the status bar <code>BarProp</code> object</a>.

  The <dfn><code>toolbar</code></dfn> attribute must return <a>the
  toolbar <code>BarProp</code> object</a>.

  <hr />

  For historical reasons, the <dfn><code>status</code></dfn> attribute
  on the <code>Window</code> object must, on getting, return the last string it was set to, and on
  setting, must set itself to the new value. When the <code>Window</code> object is created, the
  attribute must be set to the empty string. It does not do anything else.

  </div>

  <div class="impl">

  <h4 id="the-windowproxy-object"><dfn>The <code>WindowProxy</code> object</dfn></h4>

<pre class="idl" data-highlight="webidl">
[NoInterfaceObject]
interface <a>WindowProxy</a> : <a>Window</a> {};

</pre>

  As mentioned earlier, each <a>browsing context</a> has a
  <dfn><code>WindowProxy</code></dfn> object. This object is unusual in that all operations that
  would be performed on it must be performed on the <code>Window</code> object of the <a>browsing
  context</a>'s <a>active document</a> instead. It is thus indistinguishable from that
  <code>Window</code> object in every way until the <a>browsing context</a> is navigated.

  There is no <code>WindowProxy</code> interface object.

  <p class="note">
The <code>WindowProxy</code> object allows scripts to act as if each
  <a>browsing context</a> had a single <code>Window</code> object, while still keeping
  separate <code>Window</code> objects for each <code>Document</code>.
</p>

  <div class="example">

   In the following example, the variable <var>x</var> is set to the
   <code>WindowProxy</code> object returned by the <code>window</code> accessor
   on the global object. All of the expressions following the assignment return true, because in
   every respect, the <code>WindowProxy</code> object acts like the underlying <code>Window</code>
   object.

   <pre highlight="javascript">
var x = window;
x instanceof Window; // true
x === this; // true
</pre>

  </div>

  </div>

  <h3 id="origin"><dfn>Origin</dfn></h3>

  Origins are the fundamental currency of the Web's security model. Two actors in the Web
  platform that share an origin are assumed to trust each other and to have the same authority.
  Actors with differing origins are considered potentially hostile versus each other, and are
  isolated from each other to varying degrees.

  <p class="example">
For example, if Example Bank's Web site, hosted at <code>bank.example.com</code>, tries to examine the DOM of Example Charity's Web site, hosted
  at <code>charity.example.org</code>, a <code>SecurityError</code> exception will be
  raised.
</p>

  <hr />

  The <dfn>origin</dfn> of a resource and the
  <dfn>effective script origin</dfn> of a resource are each one of the
  following:

  <dl>

   <dt>Opaque identifiers

   <dd>

    Internal values, with no serialization, for which the only meaningful operation is testing
    for equality.

   <dt>Tuples

   <dd>

    Tuples consisting of a scheme component, a host component, a port component, and optionally
    extra data.

    <p class="note">
The extra data could include the certificate of the site when using encrypted
    connections, to ensure that if the site's secure certificate changes, the origin is considered to
    change as well.
</p>

   <dt>Aliases

   <dd>

    A reference to another <a>origin</a> or <a>effective script origin</a>.

  </dl>

  <div class="impl">

  An <a>origin</a> or <a>effective script origin</a> can be defined as an <dfn>alias</dfn> to another <a>origin</a> or <a>effective script
  origin</a>. The value of the <a>origin</a> or <a>effective script origin</a> is
  then the value of the <a>origin</a> or <a>effective script origin</a> to which it is
  an alias.

  These characteristics are defined as follows:

  <dl>

   <dt>For URLs</dt>

   <dd>

    The <a>origin</a> and <a>effective script origin</a> of the <a>URL</a> are
    the origin defined in <cite>The Web Origin Concept</cite>. <a>\[ORIGIN]</a>

   </dd>

   <dt>For <code>Document</code> objects</dt>

   <dd>

    <dl class="switch">

     <dt>If a <code>Document</code>'s <a>active sandboxing flag set</a> has
     its <a>sandboxed origin browsing context flag</a> set</dt>

     <dd>

      The <a>origin</a> is a globally unique identifier assigned when the
      <code>Document</code> is created.

      The <a>effective script origin</a> is initially an <a>alias</a> to the <a>origin</a> of the
      <code>Document</code>.

     </dd>

     <dt>If a <code>Document</code> was served over the network and has an address that uses a URL
     scheme with a server-based naming authority</dt>

     <dd>

      The <a>origin</a> is an <a>alias</a> to the
      <a>origin</a> of <a>the <code>Document</code>'s address</a>.

      The <a>effective script origin</a> is initially an <a>alias</a> to the <a>origin</a> of the
      <code>Document</code>.

     </dd>

     <dt>If a <code>Document</code> was generated from a <a><code>data:</code> URL</a> found in another <code>Document</code> or in a
     script</dt>

     <dd>

      The <a>origin</a> is an <a>alias</a> to the
      <a>origin</a> specified by the <a>incumbent settings object</a> when the <a>navigate</a>
      algorithm was invoked, or, if no <a>script</a> was involved, of
      the <a>node document</a> of the element that initiated the <a>navigation</a> to that <a>URL</a>.

      The <a>effective script origin</a> is initially an <a>alias</a> to the <a>effective script origin</a> of that
      same <a>environment settings object</a> or <code>Document</code>.

     </dd>

     <dt>If a <code>Document</code> is the initial "<code>about:blank</code>" document</dt>

     <dd>

      The <a>origin</a> and <a>effective script origin</a> of the
      <code>Document</code> are <a>those it was assigned when its
      browsing context was created</a>.

     </dd>

     <dt>If a <code>Document</code> was created as part of the processing for <a><code>javascript:</code> URLs</a></dt>

     <dd>

      The <a>origin</a> is an <a>alias</a> to the
      <a>origin</a> of the <a>active document</a> of the <a>browsing context</a>
      being navigated when the <a>navigate</a> algorithm was invoked.

      The <a>effective script origin</a> is initially an <a>alias</a> to the <a>effective script origin</a> of that
      same <code>Document</code>.

     </dd>

     <dt>If a <code>Document</code> is <a>an <code>iframe</code> <code>srcdoc</code> document</a></dt>

     <dd>

      The <a>origin</a> of the <code>Document</code> is an <a>alias</a> to the <a>origin</a> of the
      <code>Document</code>'s <a>browsing context</a>'s <a>browsing context
      container</a>'s <a>node document</a>.

      The <a>effective script origin</a> is initially an <a>alias</a> to the <a>effective script origin</a> of the
      <code>Document</code>'s <a>browsing context</a>'s <a>browsing context
      container</a>'s <a>node document</a>.

     </dd>

     <dt>If a <code>Document</code> was obtained in some other manner (e.g. a <a><code>data:</code> URL</a> typed in by the user or that was returned as the
     location of a redirect, a <code>Document</code> created using the <code>createDocument()</code> API, etc)</dt>

     <dd>

      The default behavior as defined in the DOM standard applies. <a>\[DOM]</a>.

      <p class="note">
The <a>origin</a> is a globally unique identifier assigned when the
      <code>Document</code> is created, and the <a>effective script origin</a> is initially an
      <a>alias</a> to the <a>origin</a> of the
      <code>Document</code>.
</p>

     </dd>

    </dl>

    <p class="note">
The <a>effective script origin</a> of a <code>Document</code> can be
    manipulated using the <code>document.domain</code> IDL
    attribute.
</p>

   </dd>

   <dt>For images of <code>img</code> elements</dt>

   <dd>

    <dl class="switch">

     <dt>If the image data is <a>CORS-cross-origin</a></dt>

     <dd>The <a>origin</a> is a globally unique identifier assigned when the image is
     created.</dd>

     <dt>If the image data is <a>CORS-same-origin</a></dt>

     <dd>The <a>origin</a> is an <a>alias</a> to the
     <a>origin</a> of the <code>img</code> element's <a>node document</a>.</dd>

    </dl>

    Images do not have an <a>effective script origin</a>.

   </dd>

   <dt>For <code>audio</code> and <code>video</code> elements</dt>

   <dd>

    <dl class="switch">

     <dt>If the <a>media data</a> is <a>CORS-cross-origin</a></dt>

     <dd>The <a>origin</a> is a globally unique identifier assigned when the <a>media
     data</a> is fetched.</dd>

     <dt>If the <a>media data</a> is <a>CORS-same-origin</a></dt>

     <dd>The <a>origin</a> is an <a>alias</a> to the
     <a>origin</a> of the <a>media element</a>'s <a>node document</a>.</dd>

    </dl>

    <a>Media elements</a> do not have an <a>effective script
    origin</a>.

   </dd>

   <dt>For fonts</dt>

   <dd>

    The <a>origin</a> of a downloadable Web font is an <a>alias</a> to the <a>origin</a> of the <a>absolute
    URL</a> used to obtain the font (after any redirects). [[!CSSFONTS]]
    [[!CSSFONTLOAD]]

    The <a>origin</a> of a locally installed system font is an <a>alias</a> to the <a>origin</a> of the
    <code>Document</code> in which that font is being used.

    Fonts do not have an <a>effective script origin</a>.

   </dd>

  </dl>

  Other specifications can override the above definitions by themselves specifying the origin of
  a particular <a>URL</a>, <code>Document</code>, image, <a>media element</a>, or
  font.

  <hr />

  The <dfn>Unicode serialization of an origin</dfn> is the string obtained by applying the
  following algorithm to the given <a>origin</a>:

  <ol>

   <li>If the <a>origin</a> in question is not a scheme/host/port tuple, then return the
   literal string "<code>null</code>" and abort these steps.</li>

   <li>Otherwise, let <var>result</var> be the scheme part of the <a>origin</a>
   tuple.</li>

   <li>Append the string "<code>://</code>" to <var>result</var>.</li>

   <li>Apply the <a>domain to Unicode</a> algorithm to each component of the host
   part of the <a>origin</a> tuple, and append the results &mdash; each component, in the same
   order, separated by U+002E FULL STOP characters (.) &mdash; to <var>result</var>. [[!URL]]</li>

   <li>If the port part of the <a>origin</a> tuple gives a port that is different from the
   default port for the protocol given by the scheme part of the <a>origin</a> tuple, then
   append a U+003A COLON character (:) and the given port, in base ten, to <var>result</var>.</li>

   <li>Return <var>result</var>.</li>

  </ol>

  The <dfn>ASCII serialization of an origin</dfn> is the string obtained by applying the
  following algorithm to the given <a>origin</a>:

  <ol>

   <li>If the <a>origin</a> in question is not a scheme/host/port tuple, then return the
   literal string "<code>null</code>" and abort these steps.</li>

   <li>Otherwise, let <var>result</var> be the scheme part of the <a>origin</a>
   tuple.</li>

   <li>Append the string "<code>://</code>" to <var>result</var>.</li>

   <li>

    Apply the <a>domain to ASCII</a> algorithm to each component of the host part of
    the <a>origin</a> tuple, and append the results &mdash; each component, in the same order,
    separated by U+002E FULL STOP characters (.) &mdash; to <var>result</var>. [[!URL]]

    If the <a>domain to ASCII</a> algorithm returns failure, e.g. because a component is too long or because it contains
    invalid characters, then throw a <code>SecurityError</code> exception and abort these steps.

   </li>

   <li>If the port part of the <a>origin</a> tuple gives a port that is different from the
   default port for the protocol given by the scheme part of the <a>origin</a> tuple, then
   append a U+003A COLON character (:) and the given port, in base ten, to <var>result</var>.</li>

   <li>Return <var>result</var>.</li>

  </ol>

  Two <a>origins</a> are said to be the <dfn>same origin</dfn> if the
  following algorithm returns true:

  <ol>

   <li>Let <var>A</var> be the first <a>origin</a> being compared, and <var>B</var> be the second <a>origin</a> being compared.</li>

   <li>If <var>A</var> and <var>B</var> are both opaque identifiers, and their
   value is equal, then return true.</li>

   <li>Otherwise, if either <var>A</var> or <var>B</var> or both are opaque
   identifiers, return false.</li>

   <li>If <var>A</var> and <var>B</var> have scheme components that are not
   identical, return false.</li>

   <li>If <var>A</var> and <var>B</var> have host components that are not
   identical, return false.</li>

   <li>If <var>A</var> and <var>B</var> have port components that are not
   identical, return false.</li>

   <li>If either <var>A</var> or <var>B</var> have additional data, but that
   data is not identical for both, return false.</li>

   <li>Return true.</li>

  </ol>

  </div>

  <h4 id="relaxing-the-same-origin-restriction"><dfn>Relaxing the same-origin restriction</dfn></h4>

  <dl class="domintro">

   <dt><var>document</var> . <code>domain</code> [ = <var>domain</var> ]</dt>

   <dd>

    Returns the current domain used for security checks.

    Can be set to a value that removes subdomains, to change the <a>effective script
    origin</a> to allow pages on other subdomains of the same domain (if they do the same thing)
    to access each other. (Can't be set in sandboxed <code>iframe</code>s.)

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>domain</code></dfn> attribute on
  <code>Document</code> objects must be initialized to <a>the document's domain</a>, if it has
  one, and the empty string otherwise. If <a>the document's domain</a> starts with a U+005B
  LEFT SQUARE BRACKET character ([) and ends with a U+005D RIGHT SQUARE BRACKET character (]), it is
  an IPv6 address; these square brackets must be omitted when initializing the attribute's
  value.

  On getting, the attribute must return its current value, unless the <code>Document</code> has
  no <a>browsing context</a>, in which case it must return the empty string.

  On setting, the user agent must run the following algorithm:

  <ol>

   <li>

    If the <code>Document</code> has no <a>browsing context</a>, throw a
    <code>SecurityError</code> exception and abort these steps.

   </li>

   <li>

    If the <code>Document</code>'s <a>active sandboxing flag set</a> has its
    <a>sandboxed <code>document.domain</code> browsing context
    flag</a> set, throw a <code>SecurityError</code> exception and abort these steps.

   </li>

   <li>

    If the new value is an IPv4 or IPv6 address, let <var>new value</var> be the new
    value.

    Otherwise, <a>strictly split</a> the new value on
    U+002E FULL STOP characters (.), apply the <a>domain to ASCII</a> algorithm to each
    returned token, and let <var>new value</var> be the result of concatenating the
    results of applying that algorithm to each token, in the same order, separated by U+002E FULL
    STOP characters (.). [[!URL]]

    If the <a>domain to ASCII</a> algorithm returns failure, e.g. because a component is too long or because it contains
    invalid characters, then throw a <code>SecurityError</code> exception and abort these steps.

   </li>

   <li>

    If <var>new value</var> is not exactly equal to the current value of the <code>document.domain</code> attribute, then run these substeps:

    <ol>

     <li>

      If the current value is an IPv4 or IPv6 address, throw a <code>SecurityError</code>
      exception and abort these steps.

     </li>

     <li>

      If <var>new value</var>, prefixed by a U+002E FULL STOP (.), does not exactly
      match the end of the current value, throw a <code>SecurityError</code> exception and abort
      these steps.

      <p class="note">
If the <var>new value</var> is an IPv4 or IPv6 address, it cannot
      match the <var>new value</var> in this way and thus an exception will be thrown
      here.
</p>

     </li>

     <li>

      If <var>new value</var> matches a suffix in the Public Suffix List, or, if <var>new value</var>, prefixed by a U+002E FULL STOP (.), matches the end of a suffix in
      the Public Suffix List, then throw a <code>SecurityError</code> exception and abort these
      steps. [[!PSL]]

      Suffixes must be compared in an <a>ASCII case-insensitive</a> manner, after applying
      the <a>domain to ASCII</a> algorithm to their individual components, . [[!URL]]

     </li>

    </ol>

   </li>

   <li>Release the <a>storage mutex</a>.</li>

   <li>

    Set the attribute's value to <var>new value</var>.

   </li>

   <li>

    If the <a>effective script origin</a> of the <code>Document</code> is an <a>alias</a>, set it to the value of the <a>effective script
    origin</a> (essentially de-aliasing the <a>effective script origin</a>).

   </li>

   <li>

    If <var>new value</var> is not the empty string, then run these substeps:

    <ol>

     <li>

      Set the host part of the <a>effective script origin</a> tuple of the
      <code>Document</code> to <var>new value</var>.

     </li>

     <li>

      Set the port part of the <a>effective script origin</a> tuple of the
      <code>Document</code> to "manual override" (a value that, for the purposes of <a>comparing origins</a>, is identical to "manual override" but not
      identical to any other value).

     </li>

    </ol>

   </li>

  </ol>

  The <dfn>domain</dfn> of a <code>Document</code> is the host part
  of the document's <a>origin</a>, if the value of that <a>origin</a> is a
  scheme/host/port tuple. If it isn't, then the document does not have a domain.

  </div>

  <p class="note">
The <code>domain</code> attribute is used to enable
  pages on different hosts of a domain to access each others' DOMs.
</p>

  <p class="warning">Do not use the <code>document.domain</code>
  attribute when using shared hosting. If an untrusted third party is able to host an HTTP server at
  the same IP address but on a different port, then the same-origin protection that normally
  protects two different sites on the same host will fail, as the ports are ignored when comparing
  origins after the <code>document.domain</code> attribute has been
  used.</p>

  <h3 id="sandboxing"><dfn>Sandboxing</dfn></h3>

  A <dfn>sandboxing flag set</dfn> is a set of zero or more of the following flags, which are
  used to restrict the abilities that potentially untrusted resources have:

  <dl>

   <dt>The <dfn>sandboxed navigation browsing context flag</dfn></dt>

   <dd>

    This flag <a>prevents content from navigating browsing contexts other
    than the sandboxed browsing context itself</a> (or browsing contexts further nested inside it),
    <a>auxiliary browsing contexts</a> (which are protected
    by the <a>sandboxed auxiliary navigation browsing context flag</a> defined next), and the
    <a>top-level browsing context</a> (which is protected by the <a>sandboxed top-level
    navigation browsing context flag</a> defined below).

    If the <a>sandboxed auxiliary navigation browsing context flag</a> is not set, then in
    certain cases the restrictions nonetheless allow popups (new <a>top-level browsing contexts</a>) to be opened. These <a>browsing contexts</a> always have <dfn>one permitted sandboxed navigator</dfn>, set
    when the browsing context is created, which allows the <a>browsing context</a> that
    created them to actually navigate them. (Otherwise, the <a>sandboxed navigation browsing
    context flag</a> would prevent them from being navigated even if they were opened.)

   </dd>

   <dt>The <dfn>sandboxed auxiliary navigation browsing context flag</dfn></dt>

   <dd>

    This flag <a>prevents content from creating new auxiliary browsing
    contexts</a>, e.g. using the <code>target</code> attribute, the
    <code>window.open()</code> method, or the <code>showModalDialog()</code> method.

   </dd>

   <dt>The <dfn>sandboxed top-level navigation browsing context flag</dfn></dt>

   <dd>

    This flag <a>prevents content from navigating their <a>top-level
    browsing context</a></a> and <a>prevents content from closing their
    <a>top-level browsing context</a></a>.

    When the <a>sandboxed top-level navigation browsing context flag</a> is <em>not</em>
    set, content can navigate its <a>top-level browsing context</a>, but other <a>browsing contexts</a> are still protected by the <a>sandboxed
    navigation browsing context flag</a> and possibly the <a>sandboxed auxiliary navigation
    browsing context flag</a>.

   </dd>

   <dt>The <dfn>sandboxed plugins browsing context flag</dfn></dt>

   <dd>

    This flag prevents content from instantiating <a>plugins</a>, whether
    using <a>the <code>embed</code> element</a>, <a>the <code>object</code> element</a>, <a>the <code>applet</code> element</a>, or through <a>navigation</a> of a <a>nested browsing context</a>, unless
    those <a>plugins</a> can be <a>secured</a>.

   </dd>

   <dt>The <dfn>sandboxed seamless iframes flag</dfn></dt>

   <dd>

    This flag prevents content from using the <code>seamless</code>
    attribute on descendant <code>iframe</code> elements.

    <p class="note">
This prevents a page inserted using the <code>allow-same-origin</code> keyword from using a
    CSS-selector-based method of probing the DOM of other pages on the same site (in particular,
    pages that contain user-sensitive information).
</p>

   </dd>

   <dt>The <dfn>sandboxed origin browsing context flag</dfn></dt>

   <dd>

    This flag <a>forces content into a unique origin</a>, thus preventing
    it from accessing other content from the same <a>origin</a>.

    This flag also <a>prevents script from reading from or writing to the
    <code>document.cookie</code> IDL attribute</a>, and blocks access to
    <code>localStorage</code>.

    [[!WEBSTORAGE]]

   </dd>

   <dt>The <dfn>sandboxed forms browsing context flag</dfn></dt>

   <dd>

    This flag <a>blocks form submission</a>.

   </dd>

   <dt>The <dfn>sandboxed pointer lock browsing context flag</dfn></dt>

   <dd>

    This flag disables the Pointer Lock API. [[!POINTERLOCK]]

   </dd>

   <dt>The <dfn>sandboxed scripts browsing context flag</dfn></dt>

   <dd>

    This flag <a>blocks script execution</a>.

   </dd>

   <dt>The <dfn>sandboxed automatic features browsing context flag</dfn></dt>

   <dd>

    This flag blocks features that trigger automatically, such as <a>automatically playing a video</a> or <a>automatically focusing a form control</a>.

   </dd>

   <dt>The <dfn>sandboxed storage area URLs flag</dfn></dt>

   <dd>

    This flag prevents URL schemes that use storage areas from being able to access the origin's
    data.

   </dd>

   <dt>The <dfn>sandboxed fullscreen browsing context flag</dfn></dt>

   <dd>

    This flag prevents content from using the <code>requestFullscreen()</code> method.

   </dd>

   <dt>The <dfn>sandboxed <code>document.domain</code> browsing context flag</dfn></dt>

   <dd>

    This flag prevents content from using the <code>document.domain</code> feature to change the <a>effective script
    origin</a>.

   </dd>

   <dt>The <dfn>sandbox propagates to auxiliary browsing contexts flag</dfn></dt>

   <dd>

    This flag prevents content from escaping the sandbox by ensuring that any
    <a>auxiliary browsing context</a> it creates inherits the content's
    <a>active sandboxing flag set</a>.

   </dd>

   <dt>The <dfn>sandboxed modals flag</dfn></dt>

   <dd>

    This flag prevents content from using any of the following features to produce modal
    dialogs:

    <ul>
     <li><code>window.alert()</code></li>
     <li><code>window.confirm()</code></li>
     <li><code>window.print()</code></li>
     <li><code>window.prompt()</code></li>
     <li><code>window.showModalDialog()</code></li>
     <li>the <code>beforeunload</code> event</li>
    </ul>

   </dd>

  </dl>

  When the user agent is to <dfn>parse a sandboxing directive</dfn>, given a string <var>input</var>, a <a>sandboxing flag set</a> <var>output</var>, and
  optionally an <var>allow fullscreen flag</var>, it must run the following steps:

  <ol>

   <li><a>Split <var>input</var> on spaces</a>,
   to obtain <var>tokens</var>.</li>

   <li>Let <var>output</var> be empty.</li>

   <li>

    Add the following flags to <var>output</var>:

    <ul>

     <li>The <a>sandboxed navigation browsing context flag</a>.</li>

     <li>The <a>sandboxed auxiliary navigation browsing context flag</a>, unless <var>tokens</var> contains the <dfn><code>allow-popups</code></dfn> keyword.</li>

     <li>The <a>sandboxed top-level navigation browsing context flag</a>, unless <var>tokens</var> contains the <dfn><code>allow-top-navigation</code></dfn>
     keyword.</li>

     <li>The <a>sandboxed plugins browsing context flag</a>.</li>

     <li>The <a>sandboxed seamless iframes flag</a>.</li>

     <li>

      The <a>sandboxed origin browsing context flag</a>, unless the <var>tokens</var> contains the <dfn><code>allow-same-origin</code></dfn>
      keyword.

      <div class="note">

       The <code>allow-same-origin</code> keyword
       is intended for two cases.

       First, it can be used to allow content from the same site to be sandboxed to disable
       scripting, while still allowing access to the DOM of the sandboxed content.

       Second, it can be used to embed content from a third-party site, sandboxed to prevent that
       site from opening pop-up windows, etc, without preventing the embedded page from
       communicating back to its originating site, using the database APIs to store data, etc.

      </div>

     </li>

     <li>The <a>sandboxed forms browsing context flag</a>, unless <var>tokens</var> contains the <dfn><code>allow-forms</code></dfn> keyword.</li>

     <li>The <a>sandboxed pointer lock browsing context flag</a>, unless <var>tokens</var> contains the <dfn><code>allow-pointer-lock</code></dfn>
     keyword.</li>

     <li>The <a>sandboxed scripts browsing context flag</a>, unless <var>tokens</var> contains the <dfn><code>allow-scripts</code></dfn> keyword.</li>

     <li>

      The <a>sandboxed automatic features browsing context flag</a>, unless <var>tokens</var> contains the <code>allow-scripts</code> keyword (defined above).

      <p class="note">
This flag is relaxed by the same keyword as scripts, because when scripts are
      enabled these features are trivially possible anyway, and it would be unfortunate to force
      authors to use script to do them when sandboxed rather than allowing them to use the
      declarative features.
</p>

     </li>

     <li>The <a>sandboxed storage area URLs flag</a>.</li>

     <li>The <a>sandboxed fullscreen browsing context flag</a>, unless the <var>allow fullscreen flag</var> was passed to the <a>parse a sandboxing
     directive</a> flag.</li>

     <li>The <a>sandboxed <code>document.domain</code> browsing
     context flag</a>.</li>

     <li>The <a>sandbox propagates to auxiliary browsing contexts flag</a>, unless
     <var>tokens</var> contains the <dfn><code>allow-popups-to-escape-sandbox</code></dfn>
     keyword.</li>

     <li>The <a>sandboxed modals flag</a>, unless <var>tokens</var> contains the <dfn><code>allow-modals</code></dfn> keyword.</li>

    </ul>

   </li>

  </ol>

  <hr />

  Every <a>top-level browsing context</a> has a <dfn>popup sandboxing flag set</dfn>, which
  is a <a>sandboxing flag set</a>. When a <a>browsing context</a> is created, its
  <a>popup sandboxing flag set</a> must be empty. It is populated by <a>the rules for
  choosing a browsing context given a browsing context name</a>.

  Every <a>nested browsing context</a> has an <dfn><code>iframe</code> sandboxing flag
  set</dfn>, which is a <a>sandboxing flag set</a>. Which flags in a <a>nested browsing
  context</a>'s <a><code>iframe</code> sandboxing flag set</a> are set at any particular
  time is determined by the <code>iframe</code> element's <code>sandbox</code> attribute.

  Every <code>Document</code> has an <dfn>active sandboxing flag set</dfn>, which is a
  <a>sandboxing flag set</a>. When the <code>Document</code> is created, its <a>active
  sandboxing flag set</a> must be empty. It is populated by the <a>navigation
  algorithm</a>.

  Every resource that is obtained by the <a>navigation algorithm</a> has a
  <dfn>forced sandboxing flag set</dfn>, which is a <a>sandboxing flag set</a>. A resource by
  default has no flags set in its <a>forced sandboxing flag set</a>, but other specifications
  can define that certain flags are set.

  <p class="note">
In particular, the <a>forced sandboxing flag set</a> is used by the Content
  Security Policy specification. [[!CSP]]
</p>

  <hr />

  When a user agent is to <dfn>implement the sandboxing</dfn> for a <code>Document</code>, it
  must populate <code>Document</code>'s <a>active sandboxing flag set</a> with the union of
  the flags that are present in the following <a>sandboxing flag
  sets</a> at the time the <code>Document</code> object is created:

  <ul>

   <li>If the <code>Document</code>'s <a>browsing context</a> is a <a>top-level browsing
   context</a>, then: the flags set on the <a>browsing context</a>'s <a>popup sandboxing
   flag set</a>.</li>

   <li>If the <code>Document</code>'s <a>browsing context</a> is a <a>nested browsing
   context</a>, then: the flags set on the <a>browsing context</a>'s
   <a><code>iframe</code> sandboxing flag set</a>.</li>

   <li>If the <code>Document</code>'s <a>browsing context</a> is a <a>nested browsing
   context</a>, then: the flags set on the <a>browsing context</a>'s <a>parent browsing
   context</a>'s <a>active document</a>'s <a>active sandboxing flag set</a>.</li>

   <li>The flags set on the <code>Document</code>'s resource's <a>forced sandboxing flag
   set</a>, if it has one.</li>

  </ul>

  <h3 id="session-history-and-navigation"><dfn>Session history and navigation</dfn></h3>

  <h4 id="the-session-history-of-browsing-contexts"><dfn>The session history of browsing contexts</dfn></h4>

  The sequence of <code>Document</code>s in a <a>browsing context</a> is its <dfn>session
  history</dfn>. Each <a>browsing context</a>, including <a>nested browsing contexts</a>, has a distinct session history. A <a>browsing
  context</a>'s session history consists of a flat list of <a>session history entries</a>. Each <dfn>session history entry</dfn> consists, at a
  minimum, of a <a>URL</a>, and each entry may in addition have a <a>state object</a>, a
  title, a <code>Document</code> object, form data, a scroll position, and other information
  associated with it.

  <p class="note">
Each entry, when first created, has a <code>Document</code>. However, when a
  <code>Document</code> is not <a>active</a>, it's possible for it to be
  <a>discarded</a> to free resources. The <a>URL</a> and
  other data in a <a>session history entry</a> is then used to bring a new
  <code>Document</code> into being to take the place of the original, should the user agent find
  itself having to reactivate that <code>Document</code>.
</p>

  <p class="note">
Titles associated with <a>session history
  entries</a> need not have any relation with the current <code>title</code> of the
  <code>Document</code>. The title of a <a>session history entry</a> is intended to explain
  the state of the document at that point, so that the user can navigate the document's history.
</p>

  URLs without associated <a>state objects</a> are added to the
  session history as the user (or script) navigates from page to page.

  <hr />

  Each <code>Document</code> object in a <a>browsing context</a>'s <a>session
  history</a> is associated with a unique <code>History</code> object which must all model the
  same underlying <a>session history</a>.

  <div class="impl">

  The <dfn><code>history</code></dfn> attribute of the <code>Window</code>
  interface must return the object implementing the <code>History</code> interface for that <a><code>Window</code> object's newest
  <code>Document</code></a>.

  </div>

  <hr />

  A <dfn>state object</dfn> is an object representing a user interface state.

  Pages can <a>add</a> <a>state
  objects</a> to the session history. These are then <a>returned to the
  script</a> when the user (or script) goes back in the history, thus enabling authors to use the
  "navigation" metaphor even in one-page applications.

  <div class="note">

   <a>State objects</a> are intended to be used for two main purposes:
   first, storing a preparsed description of the state in the <a>URL</a> so that in the simple
   case an author doesn't have to do the parsing (though one would still need the parsing for
   handling <a>URLs</a> passed around by users, so it's only a minor
   optimization), and second, so that the author can store state that one wouldn't store in the URL
   because it only applies to the current <code>Document</code> instance and it would have to be
   reconstructed if a new <code>Document</code> were opened.

   An example of the latter would be something like keeping track of the precise coordinate from
   which a pop-up <code>div</code> was made to animate, so that if the user goes back, it can be
   made to animate to the same location. Or alternatively, it could be used to keep a pointer into a
   cache of data that would be fetched from the server based on the information in the
   <a>URL</a>, so that when going back and forward, the information doesn't have to be fetched
   again.

  </div>

  <hr />

  At any point, one of the entries in the session history is the <dfn>current entry</dfn>. This
  is the entry representing the <a>active document</a> of the <a>browsing context</a>.
  Which entry is the <a>current entry</a> is changed by the algorithms defined in this
  specification, e.g. during <a>session history
  traversal</a>.

  <p class="note">
The <a>current entry</a> is usually an entry for the <a>address</a> of the <code>Document</code>. However, it can also be one of
  the entries for <a>state objects</a> added to the history by that
  document.
</p>

  <dfn>An entry with persisted user state</dfn> is one that also has user-agent defined state.
  This specification does not specify what kind of state can be stored.

  <p class="example">
For example, some user agents might want to persist the scroll position, or the
  values of form controls.
</p>

  <p class="note">
User agents that persist the value of form controls are encouraged to also persist
  their directionality (the value of the element's <code>dir</code> attribute).
  This prevents values from being displayed incorrectly after a history traversal when the user had
  originally entered the values with an explicit, non-default directionality.
</p>

  Entries that consist of <a>state objects</a> share the same
  <code>Document</code> as the entry for the page that was active when they were added.

  Contiguous entries that differ just by fragment identifier also share the same
  <code>Document</code>.

  <p class="note">
All entries that share the same <code>Document</code> (and that are therefore
  merely different states of one particular document) are contiguous by definition.
</p>

  Each <code>Document</code> in a <a>browsing context</a> can also have a <dfn>latest
  entry</dfn>. This is the entry for that <code>Document</code> to which the <a>browsing
  context</a>'s <a>session history</a> was most recently traversed. When a
  <code>Document</code> is created, it initially has no <a>latest entry</a>.

  <div class="impl">

  User agents may <a>discard</a> the <code>Document</code>
  objects of entries other than the <a>current entry</a> that are not referenced from any
  script, reloading the pages afresh when the user or script navigates back to such pages. This
  specification does not specify when user agents should discard <code>Document</code> objects and
  when they should cache them.

  Entries that have had their <code>Document</code> objects discarded must, for the purposes of
  the algorithms given below, act as if they had not. When the user or script navigates back or
  forwards to a page which has no in-memory DOM objects, any other entries that shared the same
  <code>Document</code> object with it must share the new object as well.

  </div>

  <h4 id="the-history-interface"><dfn>The <code>History</code> interface</dfn></h4>

  <pre class="idl" data-highlight="webidl">
interface <dfn>History</dfn> {
  readonly attribute unsigned long <a>length</a>;
  readonly attribute any <a>state</a>;
  void <a>go</a>(optional long delta = 0);
  void <a>back</a>();
  void <a>forward</a>();
  void <a>pushState</a>(any data, DOMString title, optional DOMString? url = null);
  void <a>replaceState</a>(any data, DOMString title, optional DOMString? url = null);
};
</pre>

  <dl class="domintro">

   <dt><var>window</var> . <code>history</code> . <code>length</code></dt>

   <dd>

    Returns the number of entries in the <a>joint session history</a>.

   </dd>

   <dt><var>window</var> . <code>history</code> . <code>state</code></dt>

   <dd>

    Returns the current <a>state object</a>.

   </dd>

   <dt><var>window</var> . <code>history</code> . <code>go</code>( [ <var>delta</var> ] )</dt>

   <dd>

    Goes back or forward the specified number of steps in the <a>joint session history</a>.

    A zero delta will reload the current page.

    If the delta is out of range, does nothing.

   </dd>

   <dt><var>window</var> . <code>history</code> . <code>back</code>()</dt>

   <dd>

    Goes back one step in the <a>joint session history</a>.

    If there is no previous page, does nothing.

   </dd>

   <dt><var>window</var> . <code>history</code> . <code>forward</code>()</dt>

   <dd>

    Goes forward one step in the <a>joint session history</a>.

    If there is no next page, does nothing.

   </dd>

   <dt><var>window</var> . <code>history</code> . <code>pushState</code>(<var>data</var>, <var>title</var> [, <var>url</var> ] )</dt>

   <dd>

    Pushes the given data onto the session history, with the given title, and, if provided and
    not null, the given URL.

   </dd>

   <dt><var>window</var> . <code>history</code> . <code>replaceState</code>(<var>data</var>, <var>title</var> [, <var>url</var> ] )</dt>

   <dd>

    Updates the current entry in the session history to have the given data, title, and, if
    provided and not null, URL.

   </dd>

  </dl>

  The <dfn>joint session history</dfn> of a <a>top-level browsing context</a> is the union
  of all the <a>session histories</a> of all <a>browsing contexts</a> of all the <a>fully active</a> <code>Document</code>
  objects that share that <a>top-level browsing context</a>, with all the entries that are
  <a>current entries</a> in their respective <a>session histories</a> removed except for the <a>current entry of the joint session
  history</a>.

  The <dfn>current entry of the joint session history</dfn> is the entry that most recently
  became a <a>current entry</a> in its <a>session history</a>.

  Entries in the <a>joint session history</a> are ordered chronologically by the time they
  were added to their respective <a>session histories</a>. Each entry
  has an index; the earliest entry has index 0, and the subsequent entries are numbered with
  consecutively increasing integers (1, 2, 3, etc).

  <p class="note">
Since each <code>Document</code> in a <a>browsing context</a> might have a
  different <a>event loop</a>, the actual state of the <a>joint session history</a> can
  be somewhat nebulous. For example, two sibling <code>iframe</code> elements could both <a>traverse</a> from one unique origin to another at the same time,
  so their precise order might not be well-defined; similarly, since they might only find out about
  each other later, they might disagree about the length of the <a>joint session
  history</a>.
</p>

  <div class="impl">

  All the getters and setters for attributes, and all the methods, defined on the
  <code>History</code> interface, when invoked on a <code>History</code> object associated with a
  <code>Document</code> that is not <a>fully active</a>, must throw a
  <code>SecurityError</code> exception instead of operating as described below.

  The <dfn><code>length</code></dfn> attribute of the
  <code>History</code> interface must return the number of entries in the <a>top-level browsing
  context</a>'s <a>joint session history</a>.

  The actual entries are not accessible from script.

  The <dfn><code>state</code></dfn> attribute of the
  <code>History</code> interface must return the last value it was set to by the user agent.
  Initially, its value must be null.

  When the <dfn><code>go(<var>delta</var>)</code></dfn> method is
  invoked, if <var>delta</var> is zero, the user agent must act as if the
  <code>location.reload()</code> method was called instead. Otherwise,
  the user agent must <a>traverse the history by a delta</a> whose value is
  <var>delta</var>.

  When the <dfn><code>back()</code></dfn> method is invoked, the user
  agent must <a>traverse the history by a delta</a> &#x2212;1.

  When the <dfn><code>forward()</code></dfn>method is invoked, the
  user agent must <a>traverse the history by a delta</a> +1.

  <hr />

  Each <a>top-level browsing context</a> has a <dfn>session history traversal queue</dfn>,
  initially empty, to which <a>tasks</a> can be added.

  Each <a>top-level browsing context</a>, when created, must begin running
  the following algorithm, known as the <dfn>session history event loop</dfn> for that
  <a>top-level browsing context</a>, <a>in parallel</a>:

  <ol>

   <li>Wait until this <a>top-level browsing context</a>'s <a>session history traversal
   queue</a> is not empty.</li>

   <li>Pull the first <a>task</a> from this <a>top-level browsing
   context</a>'s <a>session history traversal queue</a>, and execute it.</li>

   <li>Return to the first step of this algorithm.

  </ol>

  The <a>session history event loop</a> helps coordinate cross-browsing-context transitions
  of the <a>joint session history</a>: since each <a>browsing context</a> might, at any
  particular time, have a different <a>event loop</a> (this can happen if the user agent has
  more than one <a>event loop</a> per <a>unit of related browsing contexts</a>),
  transitions would otherwise have to involve cross-event-loop synchronisation.

  <hr />

  To <dfn>traverse the history by a delta</dfn> <var>delta</var>, the user agent must
  append a <a>task</a> to this <a>top-level browsing context</a>'s
  <a>session history traversal queue</a>, the <a>task</a>
  consisting of running the following steps:

  <ol>

   <li>Let <var>delta</var> be the argument to the method.</li>

   <li>If the index of the <a>current entry of the joint session history</a> plus <var>delta</var> is less than zero or greater than or equal to the number of items in the
   <a>joint session history</a>, then abort these steps.

   <li>Let <var>specified entry</var> be the entry in the <a>joint session
   history</a> whose index is the sum of <var>delta</var> and the index of the
   <a>current entry of the joint session history</a>.</li>

   <li>Let <var>specified browsing context</var> be the <a>browsing context</a> of
   the <var>specified entry</var>.</li>

   <li>If the <var>specified browsing context</var>'s <a>active document</a>'s
   <a>unload a document</a> algorithm is currently running, abort these steps.</li>

   <li>

    <a>Queue a task</a> that consists of running the following substeps. The relevant
    <a>event loop</a> is that of the <var>specified browsing context</var>'s
    <a>active document</a>. The <a>task source</a> for the queued task is the
    <a>history traversal task source</a>.

    <ol>

     <li>If there is an ongoing attempt to navigate <var>specified browsing context</var>
     that has not yet <a>matured</a> (i.e. it has not passed the
     point of making its <code>Document</code> the <a>active document</a>), then cancel that
     attempt to navigate the <a>browsing context</a>.</li>

     <li>

      If the <var>specified browsing context</var>'s <a>active document</a> is not
      the same <code>Document</code> as the <code>Document</code> of the <var>specified
      entry</var>, then run these substeps:

      <ol>

       <li><a>Prompt to unload</a> the <a>active
       document</a> of the <var>specified browsing context</var>. If the user
       <a>refused to allow the document to be unloaded</a>, then abort these steps.</li>

       <li><a>Unload</a> the <a>active document</a> of the
       <var>specified browsing context</var> with the <var>recycle</var> parameter
       set to false.</li>

      </ol>

     </li>

     <li><a>Traverse the history</a> of the <var>specified browsing context</var> to
     the <var>specified entry</var>.

    </ol>

   </li>

  </ol>

  When the user navigates through a <a>browsing context</a>, e.g. using a browser's back
  and forward buttons, the user agent must <a>traverse the history by a delta</a> equivalent
  to the action specified by the user.

  <hr />

  The <dfn><code>pushState(<var>data</var>, <var>title</var>, <var>url</var>)</code></dfn> method adds a state object entry to
  the history.

  The <dfn><code>replaceState(<var>data</var>, <var>title</var>, <var>url</var>)</code></dfn> method updates the state object,
  title, and optionally the <a>URL</a> of the <a>current entry</a> in the history.

  When either of these methods is invoked, the user agent must run the following steps:

  <ol>

   <li>Let <var>cloned data</var> be a <a>structured clone</a> of the specified
   <var>data</var>. If this throws an exception, then rethrow that exception and abort
   these steps.</li>

   <li>

    If the third argument is not null, run these substeps:

    <ol>

     <li><a>Resolve</a> the value of the third argument, relative to
     the <a>API base URL</a> specified by the <a>entry settings object</a>.</li>

     <li>If that fails, throw a <code>SecurityError</code> exception and abort these steps.</li>

     <li>Compare the resulting <a>parsed URL</a> to the result of applying the <a>URL
     parser</a> algorithm to <a>the document's address</a>. If any component of these two
     <a>URLs</a> differ other than the <a>path</a>, <a>query</a>, and <a>fragment</a> components, then throw a
     <code>SecurityError</code> exception and abort these steps.</li>

     <li>If the <a>origin</a> of the resulting <a>absolute URL</a> is not the same as
     the <a>origin</a> of the <a>responsible document</a> specified by the <a>entry
     settings object</a>, and either the <a>path</a> or <a>query</a> components of the two <a>parsed
     URLs</a> compared in the previous step differ, throw a <code>SecurityError</code> exception
     and abort these steps. (This prevents sandboxed content from spoofing other pages on the same
     origin.)</li>

     <li>Let <var>new URL</var> be the resulting <a>absolute URL</a>.</li>

    </ol>

    For the purposes of the comparisons in the above substeps, the <a>path</a> and <a>query</a> components
    can only be the same if the <a>scheme</a> component of both
    <a>parsed URLs</a> are <a>relative schemes</a>.

   </li>

   <li>

    If the third argument is null, then let <var>new URL</var> be the <a>URL</a>
    of the <a>current entry</a>.

   <li>

    If the method invoked was the <code>pushState()</code>
    method:

    <ol>

     <li>

      Remove all the entries in the <a>browsing context</a>'s <a>session history</a>
      after the <a>current entry</a>. If the <a>current entry</a> is the last entry in
      the session history, then no entries are removed.

      <p class="note">
This <a>doesn't necessarily have to affect</a> the user
      agent's user interface.
</p>

     </li>

     <li>Remove any <a>tasks</a> queued by the <a>history traversal
     task source</a> that are associated with any <code>Document</code> objects in the
     <a>top-level browsing context</a>'s <a>document family</a>.</li>

     <li>If appropriate, update the <a>current entry</a> to reflect any state that the user
     agent wishes to persist. The entry is then said to be <a>an entry with persisted user
     state</a>.</li>

     <li>Add a <a>state object</a> entry to the session history, after the <a>current
     entry</a>, with <var>cloned data</var> as the <a>state object</a>, the given
     <var>title</var> as the title, and <var>new URL</var> as the <a>URL</a>
     of the entry.</li>

     <li>Update the <a>current entry</a> to be this newly added entry.</li>

    </ol>

    Otherwise, if the method invoked was the <code>replaceState()</code> method:

    <ol>

     <li>Update the <a>current entry</a> in the session history so that <var>cloned data</var> is the entry's new state object, the given <var>title</var>
     is the new title, and <var>new URL</var> is the entry's new <a>URL</a>.</li>

    </ol>

   </li>

   <li>If the <a>current entry</a> in the session history represents a non-GET request
   (e.g. it was the result of a POST submission) then update it to instead represent a GET
   request.</li>

   <li>

    Set <a>the document's address</a> to <var>new URL</var>.

    <p class="note">
Since this is neither a <a>navigation</a> of the
    <a>browsing context</a> nor a <a>history traversal</a>,
    it does not cause a <code>hashchange</code> event to be fired.
</p>

   </li>

   <li>

    Set <code>history.state</code> to a <a>structured clone</a>
    of <var>cloned data</var>.

   </li>

   <li>

    Let the <a>latest entry</a> of the <code>Document</code> of the <a>current
    entry</a> be the <a>current entry</a>.

   </li>

  </ol>

  <p class="note">
The <var>title</var> is purely advisory. User agents might use the title
  in the user interface.
</p>

  User agents may limit the number of state objects added to the session history per page. If a
  page hits the UA-defined limit, user agents must remove the entry immediately after the first
  entry for that <code>Document</code> object in the session history after having added the new
  entry. (Thus the state history acts as a FIFO buffer for eviction, but as a LIFO buffer for
  navigation.)

  </div>

  <div class="example">

   Consider a game where the user can navigate along a line, such that the user is always at some
   coordinate, and such that the user can bookmark the page corresponding to a particular
   coordinate, to return to it later.

   A static page implementing the x=5 position in such a game could look like the following:

   <pre highlight="html">
&lt;!DOCTYPE HTML>
&lt;!-- this is http://example.com/line?x=5 -->
&lt;title>Line Game - 5&lt;/title>
&lt;p>You are at coordinate 5 on the line.&lt;/p>
&lt;p>
 &lt;a href="?x=6">Advance to 6&lt;/a> or
 &lt;a href="?x=4">retreat to 4&lt;/a>?
&lt;/p>
</pre>

   The problem with such a system is that each time the user clicks, the whole page has to be
   reloaded. Here instead is another way of doing it, using script:

   <pre highlight="html">
&lt;!DOCTYPE HTML>
&lt;!-- this starts off as http://example.com/line?x=5 -->
&lt;title>Line Game - 5&lt;/title>
&lt;p>You are at coordinate &lt;span>5&lt;/span> on the line.&lt;/p>
&lt;p>
 &lt;a href="?x=6" onclick="go(1); return false;">Advance to 6&lt;/a> or
 &lt;a href="?x=4" onclick="go(-1); return false;">retreat to 4&lt;/a>?
&lt;/p>
&lt;script>
 var currentPage = 5; // prefilled by server
 function go(d) {
   setupPage(currentPage + d);
   history.pushState(currentPage, document.title, '?x=' + currentPage);
 }
 onpopstate = function(event) {
   setupPage(event.state);
 }
 function setupPage(page) {
   currentPage = page;
   document.title = 'Line Game - ' + currentPage;
   document.getElementById('coord').textContent = currentPage;
   document.links[0].href = '?x=' + (currentPage+1);
   document.links[0].textContent = 'Advance to ' + (currentPage+1);
   document.links[1].href = '?x=' + (currentPage-1);
   document.links[1].textContent = 'retreat to ' + (currentPage-1);
 }
&lt;/script>
</pre>

   In systems without script, this still works like the previous example. However, users that
   <em>do</em> have script support can now navigate much faster, since there is no network access
   for the same experience. Furthermore, contrary to the experience the user would have with just a
   na&iuml;ve script-based approach, bookmarking and navigating the session history still work.

   In the example above, the <var>data</var> argument to the <code>pushState()</code> method is the same information as would be sent
   to the server, but in a more convenient form, so that the script doesn't have to parse the URL
   each time the user navigates.

  </div>

  <div class="example">

   Applications might not use the same title for a <a>session history entry</a> as the
   value of the document's <code>title</code> element at that time. For example, here is a simple
   page that shows a block in the <code>title</code> element. Clearly, when navigating backwards to
   a previous state the user does not go back in time, and therefore it would be inappropriate to
   put the time in the session history title.

   <pre highlight="html">
&lt;!DOCTYPE HTML>
&lt;TITLE>Line&lt;/TITLE>
&lt;SCRIPT>
 setInterval(function () { document.title = 'Line - ' + new Date(); }, 1000);
 var i = 1;
 function inc() {
   set(i+1);
   history.pushState(i, 'Line - ' + i);
 }
 function set(newI) {
   i = newI;
   document.forms.F.I.value = newI;
 }
&lt;/SCRIPT>
&lt;BODY ONPOPSTATE="set(event.state)">
&lt;FORM NAME=F>
State: &lt;OUTPUT NAME=I>1&lt;/OUTPUT> &lt;INPUT VALUE="Increment" TYPE=BUTTON ONCLICK="inc()">
&lt;/FORM>
</pre>

  </div>

  <h4 id="the-location-interface"><dfn>The <code>Location</code> interface</dfn></h4>

  Each <code>Document</code> object in a <a>browsing context</a>'s session history is
  associated with a unique instance of a <code>Location</code> object.

  <dl class="domintro">

   <dt><var>document</var> . <code>location</code> [ = <var>value</var> ]</dt>
   <dt><var>window</var> . <code>location</code> [ = <var>value</var> ]</dt>

   <dd>

    Returns a <code>Location</code> object with the current page's location.

    Can be set, to navigate to another page.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>location</code></dfn> attribute of the
  <code>Document</code> interface must return the <code>Location</code> object for that
  <code>Document</code> object, if it is in a <a>browsing context</a>, and null otherwise.

  The <dfn><code>location</code></dfn> attribute of the <code>Window</code>
  interface must return the <code>Location</code> object for that <code>Window</code> object's
  <code>Document</code>.

  </div>

  <code>Location</code> objects provide a representation of <a>the address</a> of the <a>active document</a> of their <code>Document</code>'s
  <a>browsing context</a>, and allow the <a>current entry</a> of the <a>browsing
  context</a>'s session history to be changed, by adding or replacing entries in the <code>history</code> object.

  <pre class="idl" data-highlight="webidl">
[Unforgeable] interface <dfn>Location</dfn> {
  stringifier attribute USVString <a>href</a>;
  attribute USVString <a>origin</a>;
  attribute USVString <a>protocol</a>;
  attribute USVString <a>host</a>;
  attribute USVString <a>hostname</a>;
  attribute USVString <a>port</a>;
  attribute USVString <a>pathname</a>;
  attribute USVString <a>search</a>;
  attribute USVString <a>hash</a>;

  void <a>assign</a>(USVString url);
  void <a>replace</a>(USVString url);
  void <a>reload</a>();

  [SameObject] readonly attribute <a>USVString</a>[] <a>ancestorOrigins</a>;
};
</pre>

  <dl class="domintro">
   <dt><var>location</var> . <code>toString()</code></dt>
   <dt><var>location</var> . <code>href</code></dt>
   <dd>
    Returns the <code>Location</code> object's URL.
    Can be set, to navigate to the given URL.
   </dd>

   <dt><var>location</var> . <code>origin</code></dt>
   <dd>
    Returns the <code>Location</code> object's URL's origin.
   </dd>

   <dt><var>location</var> . <code>protocol</code></dt>
   <dd>
    Returns the <code>Location</code> object's URL's scheme.
    Can be set, to navigate to the same URL with a changed scheme.
   </dd>

   <dt><var>location</var> . <code>host</code></dt>
   <dd>
    Returns the <code>Location</code> object's URL's host and port (if different from the default
    port for the scheme).
    Can be set, to navigate to the same URL with a changed host and port.
   </dd>

   <dt><var>location</var> . <code>hostname</code></dt>
   <dd>
    Returns the <code>Location</code> object's URL's host.
    Can be set, to navigate to the same URL with a changed host.
   </dd>

   <dt><var>location</var> . <code>port</code></dt>
   <dd>
    Returns the <code>Location</code> object's URL's port.
    Can be set, to navigate to the same URL with a changed port.
   </dd>

   <dt><var>location</var> . <code>pathname</code></dt>
   <dd>
    Returns the <code>Location</code> object's URL's path.
    Can be set, to navigate to the same URL with a changed path.
   </dd>

   <dt><var>location</var> . <code>search</code></dt>
   <dd>
    Returns the <code>Location</code> object's URL's query (includes leading "<code>?</code>" if non-empty).
    Can be set, to navigate to the same URL with a changed query (ignores leading "<code>?</code>").
   </dd>

   <dt><var>location</var> . <code>hash</code></dt>
   <dd>
    Returns the <code>Location</code> object's URL's fragment (includes leading "<code>#</code>" if non-empty).
    Can be set, to navigate to the same URL with a changed fragment (ignores leading "<code>#</code>").
   </dd>

   <dt><var>location</var> . <code>assign</code>(<var>url</var>)</dt>
   <dd>
    Navigates to the given URL.
   </dd>

   <dt><var>location</var> . <code>replace</code>(<var>url</var>)</dt>
   <dd>
    Removes the current page from the session history and navigates to the given URL.
   </dd>

   <dt><var>location</var> . <code>reload</code>()</dt>

   <dd>
    Reloads the current page.
   </dd>

   <dt><var>location</var> . <code>ancestorOrigins</code></dt>
   <dd>
    Returns an array whose values are the origins of the ancestor <a>browsing contexts</a>, from the <a>parent browsing context</a> to the
    <a>top-level browsing context</a>.
   </dd>
  </dl>

  <div class="impl">

  A <code>Location</code> object has an associated <dfn>relevant
  <code>Document</code></dfn>, which is this <code>Location</code> object's associated
  <code>Document</code> object's <a>browsing context</a>'s <a>active document</a>.

  A <code>Location</code> object has an associated <dfn>url</dfn>, which is this <code>Location</code> object's
  <a>relevant <code>Document</code></a>'s <a>address</a>.

  A <code>Location</code> object has an associated <dfn><code>Location</code>-object-setter
  navigate</dfn> algorithm, which given a <var>url</var>, runs these steps:

  <ol>
   <li>
    If any of the following conditions are met, let <var>replacement flag</var> be unset;
    otherwise, let it be set:

    <ul class="brief">
     <li>This <code>Location</code> object's <a>relevant <code>Document</code></a> has
     <a>completely loaded</a>, or</li>

     <li>In the <a>task</a> in which the algorithm is running, an
     <a>activation behavior</a> is currently being processed whose <code>click</code> event was <a>trusted</a>, or</li>

     <li>In the <a>task</a> in which the algorithm is running, the event
     listener for a <a>trusted</a> <code>click</code> event is being handled.</li>
    </ul>
   </li>

   <li><a><code>Location</code>-object navigate</a>, given <var>url</var> and
   <var>replacement flag</var>.</li>
  </ol>

  To <dfn><code>Location</code>-object navigate</dfn>, given a <var>url</var> and
  <var>replacement flag</var>, run these steps:

  <ol>
   <li>The <a>source browsing context</a> is the <a>responsible browsing context</a>
   specified by the <a>incumbent settings object</a>.</li>

   <li>
    <a>Navigate</a> the <a>browsing context</a> to
    <var>url</var>, with <a>exceptions enabled</a>.

    If the <var>replacement flag</var> is set or the <a>browsing context</a>'s
    <a>session history</a> contains only one <code>Document</code>, and that was the
    <code>about:blank</code> <code>Document</code> created when the <a>browsing context</a>
    was created, then the navigation must be done with <a>replacement enabled</a>.

   </li>
  </ol>

  The <dfn><code>href</code></dfn> attribute's getter must return this
  <code>Location</code> object's <a>url</a>, <a>serialized</a>.

  The <code>href</code> attribute's setter must run these steps:

  <ol>
   <li>Let <var>newURL</var> be the <a>resulting parsed URL</a> of <a>resolving</a> the given value relative to the <a>entry settings object</a>'s
   <a>API base URL</a>.</li>

   <li>If that aborted with an error, throw a <code>TypeError</code> exception.</li>

   <li><a><code>Location</code>-object-setter navigate</a> to <var>newURL</var>.</li>
  </ol>

  The <dfn><code>origin</code></dfn> attribute's getter must return
  the <a>Unicode serialization</a> of this
  <code>Location</code> object's <a>url</a>'s <a>origin</a>.

  <p class="note no-backref">It returns the Unicode rather than the ASCII serialization for
  compatibility with <code>MessageEvent</code>.</p>

  The <dfn><code>protocol</code></dfn> attribute's getter must
  return this <code>Location</code> object's <a>url</a>'s <a>scheme</a>, followed by "<code>:</code>".

  The <code>protocol</code> attribute's setter must run these
  steps:

  <ol>
   <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

   <li>Let <var>possibleFailure</var> be the result of <a>basic URL
   parsing</a> the given value, followed by "<code>:</code>", with <var>copyURL</var>
   as <var>url</var> and <a>scheme start state</a> as <var>state override</var>.</li>

   <li>If <var>possibleFailure</var> is failure, throw a <code>TypeError</code>
   exception.</li>

   <li>If <var>copyURL</var>'s <a>scheme</a> is not "<code>http</code>" or "<code>https</code>", terminate these steps.</li>

   <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  The <dfn><code>host</code></dfn> attribute's getter must run these
  steps:

  <ol>
   <li>Let <var>url</var> be this <code>Location</code> object's <a>url</a>.</li>

   <li>If <var>url</var>'s <a>host</a> is null, return the empty
   string.</li>

   <li>If <var>url</var>'s <a>port</a> is null, return
   <var>url</var>'s <a>host</a>, <span >serialized</span>.</li>

   <li>Return <var>url</var>'s <a>host</a>, <a>serialized</a>, followed by "<code>:</code>" and <var>url</var>'s <a>port</a>, <a>serialized</a>.</li>
  </ol>

  The <code>host</code> attribute's setter must run these steps:

  <ol>
   <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

   <li>If <var>copyURL</var>'s <a>non-relative flag</a> is set, terminate these
   steps.</li>

   <li><a>Basic URL parse</a> the given value, with
   <var>copyURL</var> as <var>url</var> and <a>host state</a> as <var>state
   override</var>.</li>

   <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  The <dfn><code>hostname</code></dfn> attribute's getter must
  run these steps:

  <ol>
   <li>If this <code>Location</code> object's <a>url</a>'s
   <a>host</a> is null, return the empty string.</li>

   <li>Return this <code>Location</code> object's <a>url</a>'s <a>host</a>, <a>serialized</a>.</li>
  </ol>

  The <code>hostname</code> attribute's setter must run these
  steps:

  <ol>
   <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

   <li>If <var>copyURL</var>'s <a>non-relative flag</a> is set, terminate these
   steps.</li>

   <li><a>Basic URL parse</a> the given value, with
   <var>copyURL</var> as <var>url</var> and <a>hostname state</a> as <var>state
   override</var>.</li>

   <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  The <dfn><code>port</code></dfn> attribute's getter must run these
  steps:

  <ol>
   <li>If this <code>Location</code> object's <a>url</a>'s
   <a>port</a> is null, return the empty string.</li>

   <li>Return this <code>Location</code> object's <a>url</a>'s <a>port</a>, <a>serialized</a>.</li>
  </ol>

  The <code>port</code> attribute's setter must run these steps:

  <ol>
   <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

   <li>If <var>copyURL</var>'s <a>host</a> is null,
   <var>copyURL</var>'s <a>non-relative flag</a> is set, or <var>copyURL</var>'s <a>scheme</a> is "<code>file</code>", terminate these
   steps.</li>

   <li><a>Basic URL parse</a> the given value, with
   <var>copyURL</var> as <var>url</var> and <a>port state</a> as <var>state
   override</var>.</li>

   <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  The <dfn><code>pathname</code></dfn> attribute's getter must
  run these steps:

  <ol>
   <li>Let <var>url</var> be this <code>Location</code> object's <a>url</a>.</li>

   <li>If <var>url</var>'s <a>non-relative flag</a> is set, return the first string in
   <var>url</var>'s <a>path</a>.</li>

   <li>Return "<code>/</code>", followed by the strings in <var>url</var>'s <a>path</a> (including empty strings), separated from each other by
   "<code>/</code>".</li>
  </ol>

  The <code>pathname</code> attribute's setter must run these
  steps:

  <ol>
   <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

   <li>If <var>copyURL</var>'s <a>non-relative flag</a> is set, terminate these
   steps.</li>

   <li>Set <var>copyURL</var>'s <a>path</a> to the empty
   list.</li>

   <li><a>Basic URL parse</a> the given value, with
   <var>copyURL</var> as <var>url</var> and <a>path start state</a> as <var>state
   override</var>.</li>

   <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  The <dfn><code>search</code></dfn> attribute's getter must run
  these steps:

  <ol>
   <li>If this <code>Location</code> object's <a>url</a>'s
   <a>query</a> is either null or the empty string, return the
   empty string.</li>

   <li>Return "<code>?</code>", followed by this <code>Location</code> object's <a>url</a>'s <a>query</a>.</li>
  </ol>

  The <code>search</code> attribute's setter must run these
  steps:

  <ol>
   <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

   <li>If the given value is the empty string, set <var>copyURL</var>'s <a>query</a> to null.

   <li>
    <p>Otherwise, run these substeps:

    <ol>
     <li>Let <var>input</var> be the given value with a single leading "<code>?</code>"
     removed, if any.</li>

     <li>Set <var>copyURL</var>'s <a>query</a> to the empty
     string.</li>

     <li><a>Basic URL parse</a> <var>input</var>, with
     <var>copyURL</var> as <var>url</var> and <a>query state</a> as <var>state override</var>,
     and the <a>relevant <code>Document</code></a>'s <a>document's character
     encoding</a> as <var>encoding override</var>.</li>
    </ol>
   </li>

   <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  The <dfn><code>hash</code></dfn> attribute's getter must run these
  steps:

  <ol>
   <li>If this <code>Location</code> object's <a>url</a>'s
   <a>fragment</a> is either null or the empty string, return
   the empty string.</li>

   <li>Return "<code>#</code>", followed by this <code>Location</code> object's <a>url</a>'s <a>fragment</a>.</li>
  </ol>

  The <code>hash</code> attribute's setter must run these steps:

  <ol>
   <li>Let <var>copyURL</var> be a copy of this <code>Location</code> object's <a>url</a>.</li>

   <li>If <var>copyURL</var>'s <a>scheme</a> is "<code>javascript</code>", terminate these steps.</li>

   <li>If the given value is the empty string, set <var>copyURL</var>'s <a>fragment</a> to null.

   <li>
    <p>Otherwise, run these substeps:

    <ol>
     <li>Let <var>input</var> be the given value with a single leading "<code>#</code>"
     removed, if any.</li>

     <li>Set <var>copyURL</var>'s <a>fragment</a> to the
     empty string.</li>

     <li><a>Basic URL parse</a> <var>input</var>, with
     <var>copyURL</var> as <var>url</var> and <a>fragment state</a> as <var>state
     override</var>.</li>
    </ol>
   </li>

   <li><a><code>Location</code>-object-setter navigate</a> to <var>copyURL</var>.</li>
  </ol>

  <hr />

  When the <dfn><code>assign(<var>url</var>)</code></dfn>
  method is invoked, the user agent must run the following steps:

  <ol>

   <li>

    <p><a>Resolve</a> <var>url</var>, relative to the
    <a>API base URL</a> specified by the <a>entry settings object</a> and let
    <var>parsedURL</var> be the <a>resulting parsed URL</a>.

    If this is not successful, throw a <code>SyntaxError</code> exception and abort these
    steps.

   </li>

   <li><a><code>Location</code>-object navigate</a> to <var>parsedURL</var>.</li>

  </ol>

  When the <dfn><code>replace(<var>url</var>)</code></dfn>
  method is invoked, the user agent must run the following steps:

  <ol>

   <li>

    <p><a>Resolve</a> <var>url</var>, relative to the
    <a>API base URL</a> specified by the <a>entry settings object</a> and let
    <var>parsedURL</var> be the <a>resulting parsed URL</a>.

    If this is not successful, throw a <code>SyntaxError</code> exception and abort these
    steps.

   </li>

   <li><a><code>Location</code>-object navigate</a> to <var>parsedURL</var> with the
   <var>replacement flag</var> set.</li>

  </ol>

  When the <dfn><code>reload()</code></dfn> method is invoked, the
  user agent must run the appropriate steps from the following list:

  <dl class="switch">

   <dt>If the currently executing <a>task</a> is the dispatch of a <code>resize</code> event in response to the user resizing the <a>browsing
   context</a></dt>

   <dd>Repaint the <a>browsing context</a> and abort these steps.</dd>

   <dt>If the <a>browsing context</a>'s <a>active document</a> is <a>an
   <code>iframe</code> <code>srcdoc</code> document</a></dt>

   <dd><a>Reprocess the <code>iframe</code>
   attributes</a> of the <a>browsing context</a>'s <a>browsing context
   container</a>.</dd>

   <dt>If the <a>browsing context</a>'s <a>active document</a> has its <a>reload
   override flag</a> set</dt>

   <dd>Perform <a>an overridden reload</a>, with the <a>browsing context</a> being
   navigated as the <a>responsible browsing context</a>.</dd>

   <dt>Otherwise</dt>

   <dd><a>Navigate</a> the <a>browsing context</a> to
   <a>the document's address</a> with <a>replacement enabled</a> and <a>exceptions
   enabled</a>. The <a>source browsing context</a> must be the <a>browsing
   context</a> being navigated. This is a <a>reload-triggered navigation</a>.</dd>

  </dl>

  When a user requests that the <a>active document</a> of a <a>browsing context</a>
  be reloaded through a user interface element, the user agent should <a>navigate</a> the <a>browsing context</a> to the same resource as that
  <code>Document</code>, with <a>replacement enabled</a>. In the case of non-idempotent
  methods (e.g. HTTP POST), the user agent should prompt the user to confirm the operation first,
  since otherwise transactions (e.g. purchases or database modifications) could be repeated. User
  agents may allow the user to explicitly override any caches when reloading. If <a>browsing
  context</a>'s <a>active document</a>'s <a>reload override flag</a> is set, then the
  user agent may instead perform <a>an overridden reload</a> rather than the navigation
  described in this paragraph (with the <a>browsing context</a> being reloaded as the
  <a>source browsing context</a>).

  <hr />

  The <dfn><code>ancestorOrigins</code></dfn> attribute, on
  getting, must return a <a>read only</a> array whose values are
  determined as follows. The same object must be returned each time the attribute's value is
  obtained for any particular <code>Location</code> object.

  <ol>

   <li>Let <var>output</var> be an empty ordered list of strings.

   <li>Let <var>current</var> be the <a>browsing context</a> of the <code>Document</code>
   with which the <code>Location</code> object is associated.</li>

   <li><i>Loop</i>: If <var>current</var> has no <a>parent browsing context</a>, jump to
   the step labeled <i>end</i>.</li>

   <li>Let <var>current</var> be <var>current</var>'s <a>parent browsing
   context</a>.</li>

   <li>Append the <a>Unicode serialization</a>
   of <var>current</var>'s <a>active document</a>'s <a>origin</a> to <var>output</var>
   as a new value.</li>

   <li>Return to the step labeled <i>loop</i>.</li>

   <li><i>End</i>: Let <var>output</var> be the values of the array, in the same order.</li>

  </ol>

  </div>

  <div class="impl">

  <h5 id="security"><dfn>Security</dfn></h5>

  <p class="critical">This section describes a security model that is underdefined, imperfect, and
  does not match implementations. Work is ongoing to attempt to resolve this, but in the meantime,
  please do not rely on this section for precision. Implementors are urged to send their feedback on
  how cross-origin cross-global access to <code>Window</code> and <code>Location</code> objects
  should work. See <a>bug 20701</a>.</p>

  User agents must throw a <code>SecurityError</code> exception whenever any
  properties of a <code>Location</code> object are accessed when the <a>entry settings
  object</a> specifies an <a>effective script origin</a> that is not the <a>same</a> as the <code>Location</code> object's associated <code>Document</code>'s
  <a>browsing context</a>'s <a>active document</a>'s <a>effective script
  origin</a>, with the following exceptions:

  <ul>

   <li>The <code>href</code> setter, if the <a>responsible browsing
   context</a> specified by the <a>entry settings object</a> is <a>familiar with</a>
   the <a>browsing context</a> with which the <code>Location</code> object is associated

   <li>The <code>replace()</code> method, if the <a>responsible
   browsing context</a> specified by the <a>entry settings object</a> is <a>familiar
   with</a> the <a>browsing context</a> with which the <code>Location</code> object is
   associated

   <li>Any properties not defined in the IDL for the <code>Location</code> object or indirectly via
   one of those properties (e.g. <code>toString()</code>, which is defined via the <code>stringifier</code> keyword), if the <a>effective script origin</a> specified by
   the <a>entry settings object</a> is the <a>same origin</a> as the
   <code>Location</code> object's associated <code>Document</code>'s <a>effective script
   origin</a>

  </ul>

  When the <a>effective script origin</a> specified by the <a>entry settings
  object</a> is different than a <code>Location</code> object's associated
  <code>Document</code>'s <a>effective script origin</a>, the user agent must act as if any
  changes to that <code>Location</code> object's properties, getters, setters, etc, were not
  present, and as if all the properties of that <code>Location</code> object had their
  [[Enumerable]] attribute set to false.

  For members that return objects (including function objects), each distinct <a>effective
  script origin</a> that is not the <a>same origin</a> as the <code>Location</code>
  object's <code>Document</code>'s <a>effective script origin</a> must be provided with a
  separate set of objects. These objects must have the prototype chain appropriate for the script
  for which the objects are created (not those that would be appropriate for scripts whose
  <a>settings object</a> specifies a <a>global object</a> that is the
  <code>Location</code> object's <code>Document</code>'s <code>Window</code> object).

  </div>

  <div class="impl">

  <h4 id="implementation-notes-for-session-history"><dfn>Implementation notes for session history</dfn></h4>

  <em>This section is non-normative.</em>

  The <code>History</code> interface is not meant to place restrictions on how implementations
  represent the session history to the user.

  For example, session history could be implemented in a tree-like manner, with each page having
  multiple "forward" pages. This specification doesn't define how the linear list of pages in the
  <code>history</code> object are derived from the actual session history as
  seen from the user's perspective.

  Similarly, a page containing two <code>iframe</code>s has a <code>history</code> object distinct from the <code>iframe</code>s' <code>history</code> objects, despite the fact that typical Web browsers present the
  user with just one "Back" button, with a session history that interleaves the navigation of the
  two inner frames and the outer page.

  <strong>Security</strong>: It is suggested that to avoid letting a page "hijack" the history
  navigation facilities of a UA by abusing <code>pushState()</code>,
  the UA provide the user with a way to jump back to the previous page (rather than just going back
  to the previous state). For example, the back button could have a drop down showing just the pages
  in the session history, and not showing any of the states. Similarly, an aural browser could have
  two "back" commands, one that goes back to the previous state, and one that jumps straight back to
  the previous page.

  In addition, a user agent could ignore calls to <code>pushState()</code> that are invoked on a timer, or from event
  listeners that are not triggered in response to a clear user action, or that are invoked in rapid
  succession.

  </div>

  <h3 id="browsing-the-web"><dfn>Browsing the Web</dfn></h3>

  <div class="impl">

  <h4 id="navigating-across-documents"><dfn>Navigating across documents</dfn></h4>

  Certain actions cause the <a>browsing context</a> to <i>navigate</i> to
  a new resource. A user agent may provide various ways for the user to explicitly cause a browsing
  context to navigate, in addition to those defined in this specification.

  <p class="example">
For example, <a>following a hyperlink</a>,
  <a>form submission</a>, and the <code>window.open()</code> and <code>location.assign()</code> methods can all cause a browsing context to
  navigate.
</p>

  <p class="note">
A <i>resource</i> has a URL, but that might not be the only information necessary
  to identify it. For example, a form submission that uses HTTP POST would also have the HTTP method
  and payload. Similarly, <a>an <code>iframe</code> <code>srcdoc</code> document</a> needs to know the data it is to use.
</p>

  Navigation always involves <dfn>source browsing context</dfn>, which is the browsing context which
  was responsible for starting the navigation.

  When a browsing context is <dfn>navigated</dfn> to a new resource, the user
  agent must run the following steps:

  <ol>

   <li>Release the <a>storage mutex</a>.</li>

   <li>

    If the <a>source browsing context</a> is not <a>allowed to navigate</a> the
    <a>browsing context</a> being navigated, then abort these steps.

    If these steps are aborted here, the user agent may instead offer to open the new resource in
    a new <a>top-level browsing context</a> or in the <a>top-level browsing context</a>
    of the <a>source browsing context</a>, at the user's option, in which case the user agent
    must <a>navigate</a> that designated <a>top-level
    browsing context</a> to the new resource as if the user had requested it independently.

    <p class="note">
Doing so, however, can be dangerous, as it means that the user is overriding the
    author's explicit request to sandbox the content.
</p>

    If the <a>navigate</a> algorithm was invoked with <dfn>exceptions enabled</dfn>, and it
    is aborted on this step, then in addition to aborting this algorithm, the user agent must also
    throw a <code>SecurityError</code> exception.

   </li>

   <li>If the <a>source browsing context</a> is the same as the
   <a>browsing context</a> being navigated, and this browsing context has its <a>seamless
   browsing context flag</a> set, and the <a>browsing context</a> being navigated was not
   chosen using an <dfn>explicit self-navigation override</dfn>, then find the nearest
   <a>ancestor browsing context</a> that does not have its <a>seamless browsing context
   flag</a> set, and continue these steps as if <em>that</em> <a>browsing context</a> was
   the one that was going to be <a>navigated</a> instead.</li>

   <li>If there is a preexisting attempt to navigate the <a>browsing context</a>, and the
   <a>source browsing context</a> is the same as the <a>browsing context</a> being
   navigated, and that attempt is currently running the <a>unload a document</a> algorithm,
   and the <a>origin</a> of the <a>URL</a> of the resource being loaded in that
   navigation is not the <a>same origin</a> as the <a>origin</a> of the <a>URL</a>
   of the resource being loaded in <em>this</em> navigation, then abort these steps without
   affecting the preexisting attempt to navigate the <a>browsing context</a>.</li>

   <li>If a <a>task</a> queued by the <a>traverse the history by a
   delta</a> algorithm is running the <a>unload a document</a> algorithm for the
   <a>active document</a> of the <a>browsing context</a> being navigated, then abort
   these steps without affecting the <a>unload a document</a> algorithm or the aforementioned
   history traversal task.</li>

   <li>If the <a>prompt to unload a document</a> algorithm is being run for the
   <a>active document</a> of the <a>browsing context</a> being navigated, then abort
   these steps without affecting the <a>prompt to unload a document</a> algorithm.</li>

   <li>

    Let <var>gone async</var> be false.

    <p class="note">
The <a><i>handle redirects</i></a> step later in
    this algorithm can in certain cases jump back to the step labeled <a><i>fragment identifiers</i></a>. Since, between those two steps,
    this algorithm goes from operating immediately in the context of the calling <a>task</a> to operating <a>in parallel</a> independent of the <a>event
    loop</a>, some of the intervening steps need to be able to handle both being run as part of a <a>task</a> and
    running <a>in parallel</a>. The <var>gone async</var> flag is thus used to make these steps
    aware of which mode they are operating in.
</p>

   </li>

   <li><i>Fragment identifiers</i>: If this is not a
   <dfn>reload-triggered navigation</dfn>: apply the <a>URL parser</a> algorithm to the
   <a>absolute URL</a> of the new resource and the <a>address</a> of the <a>active document</a> of the <a>browsing context</a>
   being navigated; if all the components of the resulting <a>parsed
   URLs</a>, ignoring any <a>fragment</a> components, are
   identical, and the new resource is to be fetched using <code>GET</code>, and the
   <a>parsed URL</a> of the new resource has a <a>fragment</a> component that is not null (even if it is empty),
   then <a>navigate to that fragment identifier</a> and abort these
   steps.</li>

   <li>If <var>gone async</var> is false, cancel any preexisting but not yet <a>mature</a> attempt to navigate the <a>browsing
   context</a>, including canceling any instances of the <a>fetch</a> algorithm started by those attempts. If one of those attempts
   has already created and <a>initialized a new
   <code>Document</code> object</a>, <a>abort</a> that
   <code>Document</code> also. (Navigation attempts that have <a>matured</a> already have session history entries, and are
   therefore handled during the <a>update the session history with the new page</a> algorithm,
   later.)</li>

   <li>If the new resource is to be handled using a mechanism that does not affect the browsing
   context, e.g. ignoring the navigation request altogether because the specified scheme is not one
   of the supported protocols, then abort these steps and <a>proceed with that mechanism instead</a>.</li>

   <li>

    If <var>gone async</var> is false, <a>prompt
    to unload</a> the <code>Document</code> object. If the user <a>refused to allow the
    document to be unloaded</a>, then abort these steps.

    If this instance of the <a>navigation</a> algorithm gets canceled
    while this step is running, the <a>prompt to unload a document</a> algorithm must
    nonetheless be run to completion.

   </li>

   <li>If <var>gone async</var> is false, <a>abort</a>
   the <a>active document</a> of the <a>browsing context</a>.</li>

   <li>

    If the new resource is to be handled by displaying some sort of inline content, e.g. an error
    message because the specified scheme is not one of the supported protocols, or an inline prompt
    to allow the user to select <a>a registered
    handler</a> for the given scheme, then <a>display the inline
    content</a> and abort these steps.

    <p class="note">
In the case of a registered handler being used, the algorithm will be reinvoked
    with a new URL to handle the request.
</p>

   </li>

   <li>

    If the <a>browsing context</a> being navigated is a <a>nested browsing
    context</a>, then put it in the <a>delaying <code>load</code> events
    mode</a>.

    The user agent must take this <a>nested browsing context</a> out of the <a>delaying
    <code>load</code> events mode</a> when this <a>navigation</a> algorithm later <a>matures</a>, or when it terminates (whether due to having
    run all the steps, or being canceled, or being aborted), whichever happens first.

   </li>

   <li>

    This is the step that attempts to obtain the resource, if necessary. Jump to the first
    appropriate substep:

    <dl>

     <dt>If the resource has already been obtained (e.g. because it is being used to populate an
     <code>object</code> element's new <a>child browsing context</a>)</dt>

     <dd>Skip this step. The data is already available.</dd>

     <dt>If the new resource is a <a>URL</a> whose <a>scheme</a> is <code>javascript</code></dt>

     <dd>

      <a>Queue a task</a> to run <dfn>these
      "<code>javascript:</code> URL" steps</dfn>, associated with the <a>active document</a>
      of the <a>browsing context</a> being navigated:

      <ol>

       <li>If the <a>origin</a> of the <a>source browsing context</a> is not the
       <a>same origin</a> as the <a>origin</a> of the <a>active document</a> of
       the <a>browsing context</a> being navigated, then act as if the result of evaluating
       the script was the void value, and jump to the step labeled <i>process results</i>
       below.</li>

       <li>Apply the <a>URL parser</a> to the <a>URL</a> being navigated.</li>

       <li>Let <var>parsed URL</var> be the result of the <a>URL
       parser</a>.</li>

       <li>Let <var>script source</var> be the empty string.</li>

       <li>Append <var>parsed URL</var>'s <a>scheme
       data</a> component to <var>script source</var>.</li>

       <li>If <var>parsed URL</var>'s <a>query</a>
       component is not null, then first append a U+003F QUESTION MARK character (?) to <var>script source</var>, and then append <var>parsed URL</var>'s <a>query</a> component to <var>script
       source</var>.</li>

       <li>If <var>parsed URL</var>'s <a>fragment</a> component is not null, then first append a
       U+0023 NUMBER SIGN character (#) to <var>script source</var>, and then append <var>parsed URL</var>'s <a>fragment</a> component to
       <var>script source</var>.</li>

       <li>Replace <var>script source</var> with the result of applying the
       <a>percent decode</a> algorithm to <var>script source</var>.</li>

       <li>Replace <var>script source</var> with the result of applying the <a>UTF-8
       decode</a> algorithm to <var>script source</var>.</li>

       <li>Let <var>address</var> be the <a>address</a> of the <a>active document</a> of the <a>browsing
       context</a> being navigated.</li>

       <li>

        <a>Create a script</a>, using <var>script source</var> as the script
        source, <var>address</var> as the script source URL, JavaScript as the scripting
        language, and the <a>environment settings object</a> of the <code>Window</code> object of
        the <a>active document</a> of the <a>browsing context</a> being navigated.

        Let <var>result</var> be the return value of the <a>code entry-point</a>
        of this <a>script</a>. If an exception was thrown, let <var>result</var> be void instead. (The result will be void also if <a>scripting is disabled</a>.)

       </li>

       <li>

        <i>Process results</i>: If the result of executing the script is void (there is no return
        value), then the result of obtaining the resource for the URL is a <a>response</a> whose
        <a>status</a> is <code>204</code>.

        Otherwise, the result of obtaining the resource for the URL is a <a>response</a> whose <a>header list</a> consists of <code>Content-Type</code>/<code>text/html</code> and whose <a>body</a> is the return value converted to a string
        value.

        When it comes time to <a>set the document's address</a> in the <a>navigation algorithm</a>, use <var>address</var> as the
        <a>override URL</a>.

       </li>

      </ol>

      The <a>task source</a> for this <a>task</a> is the
      <a>DOM manipulation task source</a>.

      <div class="example">

       So for example a <a><code>javascript:</code> URL</a> in
       an <code>href</code> attribute of an <code>a</code> element
       would only be evaluated when the link was <a>followed</a>, while such a URL in the <code>src</code> attribute of an <code>iframe</code> element would be
       evaluated in the context of the <code>iframe</code>'s own <a>nested browsing
       context</a> when the <code>iframe</code> is being set up; once evaluated, its return value
       (if it was not void) would replace that <a>browsing context</a>'s <code>Document</code>, thus also
       changing the <code>Window</code> object of that <a>browsing context</a>.

      </div>

     </dd>

     <dt>If the new resource is to be fetched using <code>GET</code>, and there are
     <a>relevant application caches</a> that are
     identified by a URL with the <a>same origin</a> as the URL in question, and that have
     this URL as one of their entries, excluding entries marked as <a>foreign</a>, and whose <a>mode</a> is <a>fast</a>, and the user agent is not in a mode where it
     will avoid using <a>application caches</a></dt>

     <dd>

      Fetch the resource from the <a>most appropriate
      application cache</a> of those that match.

      <p class="example">
For example, imagine an HTML page with an associated application cache
      displaying an image and a form, where the image is also used by several other application
      caches. If the user right-clicks on the image and chooses "View Image", then the user agent
      could decide to show the image from any of those caches, but it is likely that the most useful
      cache for the user would be the one that was used for the aforementioned HTML page. On the
      other hand, if the user submits the form, and the form does a POST submission, then the user
      agent will not use an application cache at all; the submission will be made to the
      network.
</p>

      <p class="&#x0058;&#x0058;&#x0058;">This still needs to be integrated with the Fetch
      standard. [[!FETCH]]</p>

     </dd>

     <dt>Otherwise</dt>

     <dd>

      <ol>
       <li>Let <var>request</var> be the new resource.</li>

       <li>If <var>request</var> is a URL, set <var>request</var> to a new <a>request</a> whose <a>url</a>
       is <var>request</var>.</li>

       <li>Set <var>request</var>'s <a>client</a> to the
       <a>source browsing context</a>'s <a>active document</a>'s <code>Window</code>
       object's <a>environment settings object</a>, <a>target browsing context</a> to the
       <a>browsing context</a> being navigated, <a>destination</a> to "<code>document</code>",
       <a>mode</a> to "<code>navigate</code>", <a>credentials mode</a> to "<code>include</code>", <a>use-URL-credentials flag</a>, and <a>redirect mode</a> to "<code>manual</code>".</li>

       <li>Set <var>request</var>'s <a>omit-<code>Origin</code>-header flag</a>.

       <li><p>If <var>request</var>'s <a>method</a> is not
       <code>GET</code>, or, if the <a>navigation algorithm</a>
       was invoked as a result of the <a>form submission
       algorithm</a>, then if there is an <a>origin</a> of the <a>active document</a>
       of the <a>source browsing context</a>, unset <var>request</var>'s
       <a>omit-<code>Origin</code>-header flag</a>.</li>

       <li>Otherwise, if the <a>browsing context</a> being navigated is a <a>child
       browsing context</a>, and the <a>browsing context container</a> of the
       <a>browsing context</a> being navigated has a <a>browsing context scope
       origin</a>, set <var>request</var>'s <a>origin</a>
       to that <a>browsing context scope origin</a> and unset <var>request</var>'s
       <a>omit-<code>Origin</code>-header flag</a>.</li>

       <li><a>Fetch</a> <var>request</var>.</li>
      </ol>

     </dd>

    </dl>

   </li>

   <li>

    If <var>gone async</var> is false, return to whatever algorithm invoked the
    navigation steps and continue running these steps <a>in parallel</a>.

   </li>

   <li>Let <var>gone async</var> be true.</li>

   <li>Wait for one or more bytes to be available or for the user agent to establish that the
   resource in question is empty. During this time, the user agent may allow the user to cancel this
   navigation attempt or start other navigation attempts.</li>

   <li>

    <i>Handle redirects</i>: If fetching the resource results in a redirect, and either the
    <a>URL</a> of the target of the redirect has the <a>same origin</a> as the original
    resource, or the resource is being obtained using the POST method or a safe method (in HTTP
    terms), return to <a>the step labeled <i>fragment
    identifiers</i></a> with the new resource, except that if the <a>URL</a> of the target of
    the redirect does not have a fragment identifier and the <a>URL</a> of the resource that
    led to the redirect does, then the fragment identifier of the resource that led to the redirect
    must be propagated to the <a>URL</a> of the target of the redirect.

    <p class="example">
So for instance, if the original URL was "<code>http://example.com/#!sample</code>" and "<code>http://example.com/</code>" is
    found to redirect to "<code>https://example.com/</code>", the URL of the new resource
    will be "<code>https://example.com/#!sample</code>".
</p>

    Otherwise, if fetching the resource results in a redirect but the <a>URL</a> of the
    target of the redirect does not have the <a>same origin</a> as the original resource and
    the resource is being obtained using a method that is neither the POST method nor a safe method
    (in HTTP terms), then abort these steps. The user agent may indicate to the user that the
    navigation has been aborted for security reasons.

   </li>

   <li>

    <strong>Fallback in prefer-online mode</strong>: If the resource was not fetched from an
    <a>application cache</a>, and was to be fetched using <code>GET</code>, and
    there are <a>relevant application caches</a> that are
    identified by a URL with the <a>same origin</a> as the URL in question, and that have this
    URL as one of their entries, excluding entries marked as <a>foreign</a>, and whose <a>mode</a> is <a>prefer-online</a>, and the user didn't cancel the
    navigation attempt during the earlier step, and the navigation attempt failed (e.g. the server
    returned a 4xx or 5xx status, or there was a DNS error), then:

    Let <var>candidate</var> be the resource identified by the URL in question from the
    <a>most appropriate application cache</a> of those that
    match.

    If <var>candidate</var> is not marked as <a>foreign</a>, then the user agent must discard the failed
    load and instead continue along these steps using <var>candidate</var> as the resource.
    The user agent may indicate to the user that the original page load failed, and that the page
    used was a previously cached resource.

    <p class="note">
This does not affect the <i>address of the resource from which Request-URIs are
    obtained</i>, as used to set <a>the document's referrer</a> in the <a>initialize the
    <code>Document</code> object</a> steps below; they still use the value as computed by the
    original fetch algorithm.
</p>

   </li>

   <li>

    <strong>Fallback for fallback entries</strong>: If the resource was not fetched from an
    <a>application cache</a>, and was to be fetched using <code>GET</code>, and
    its URL <a>matches the fallback namespace</a>
    of one or more <a>relevant application caches</a>, and
    the <a>most appropriate application cache</a> of those
    that match does not have an entry in its <a>online
    safelist</a> that has the <a>same origin</a> as the resource's URL and that is a
    <a>prefix match</a> for the resource's URL, and the user didn't cancel the navigation
    attempt during the earlier step, and the navigation attempt failed (e.g. the server returned a
    4xx or 5xx status, or there was a DNS error), then:

    Let <var>candidate</var> be the <a>fallback
    resource</a> specified for the <a>fallback
    namespace</a> in question. If multiple application caches match, the user agent must use the
    fallback of the <a>most appropriate application
    cache</a> of those that match.

    If <var>candidate</var> is not marked as <a>foreign</a>, then the user agent must discard the failed
    load and instead continue along these steps using <var>candidate</var> as the resource.
    <a>The document's address</a>, if appropriate, will still be the originally requested URL,
    not the fallback URL, but the user agent may indicate to the user that the original page load
    failed, that the page used was a fallback resource, and what the URL of the fallback resource
    actually is.

    <p class="note">
This does not affect the <i>address of the resource from which Request-URIs are
    obtained</i>, as used to set <a>the document's referrer</a> in the <a>initialize the
    <code>Document</code> object</a> steps below; they still use the value as computed by the
    original fetch algorithm.
</p>

   </li>

   <li>

    <i>Resource handling</i>: If the resource's out-of-band metadata (e.g. HTTP headers), not
    counting any <a>type information</a> (such as the Content-Type HTTP
    header), requires some sort of processing that will not affect the browsing context, then
    perform that processing and abort these steps.

    <div class="note">
     Such processing might be triggered by, amongst other things, the following:
     <ul class="brief">
      <li>HTTP status codes (e.g. 204 No Content or 205 Reset Content)</li>
      <li>Network errors (e.g. the network interface being unavailable)</li>
      <li>Cryptographic protocol failures (e.g. an incorrect TLS certificate)</li>

     </ul>
    </div>

    Responses with HTTP <code>Content-Disposition</code>
    headers specifying the <code>attachment</code> disposition type must be handled
    <a>as a download</a>.

    HTTP 401 responses that do not include a challenge recognized by the user agent must be
    processed as if they had no challenge, e.g. rendering the entity body as if the response had
    been 200 OK.

    User agents may show the entity body of an HTTP 401 response even when the response does
    include a recognized challenge, with the option to login being included in a non-modal fashion,
    to enable the information provided by the server to be used by the user before authenticating.
    Similarly, user agents should allow the user to authenticate (in a non-modal fashion) against
    authentication challenges included in other responses such as HTTP 200 OK responses, effectively
    allowing resources to present HTTP login forms without requiring their use.

   </li>

   <li>Let <var>type</var> be <a>the sniffed type of
   the resource</a>.</li>

   <li>If the user agent has been configured to process resources of the given <var>type</var> using some mechanism other than rendering the content in a <a>browsing
   context</a>, then skip this step. Otherwise, if the <var>type</var> is one of the
   following types, jump to the appropriate entry in the following list, and process the resource as
   described there:

    <dl class="switch">

     <dt>an <a>HTML MIME type</a></dt>
     <dd>Follow the steps given in the <a>HTML document</a> section,
     and then, once they have completed, abort this <a>navigate</a> algorithm.</dd>

     <dt>an <a>XML MIME type</a> that is not an <a>explicitly supported XML
     type</a></dt>

     <dd>Follow the steps given in the <a>XML document</a> section. If
     that section determines that the content is <em>not</em> to be displayed as a generic XML
     document, then proceed to the next step in this overall set of steps. Otherwise, once the steps
     given in the <a>XML document</a> section have completed, abort this
     <a>navigate</a> algorithm.</dd>

     <dt>a <a>JavaScript MIME type</a></dt>
     <dt>a <a>JSON MIME type</a> that is not an <a>explicitly supported JSON
     type</a></dt>
     <dt>"<code>text/cache-manifest</code>"</dt>
     <dt>"<code>text/css</code>"</dt>
     <dt>"<code>text/plain</code>"</dt>
     <dt>"<code>text/vtt</code>"</dt>
     <dd>Follow the steps given in the <a>plain text file</a> section,
     and then, once they have completed, abort this <a>navigate</a> algorithm.</dd>

     <dt>"<code>multipart/x-mixed-replace</code>"</dt>
     <dd>Follow the steps given in the <a>multipart/x-mixed-replace</a> section, and then,
     once they have completed, abort this <a>navigate</a> algorithm.</dd>

     <dt>A supported image, video, or audio type</dt>
     <dd>Follow the steps given in the <a>media</a> section, and then,
     once they have completed, abort this <a>navigate</a> algorithm.</dd>

     <dt>A type that will use an external application to render the content in the <a>browsing
     context</a></dt>
     <dd>Follow the steps given in the <a>plugin</a> section, and then,
     once they have completed, abort this <a>navigate</a> algorithm.</dd>

    </dl>

    An <dfn>explicitly supported XML type</dfn> is one for which the user agent is configured to
    use an external application to render the content (either a <a>plugin</a> rendering
    directly in the <a>browsing context</a>, or a separate application), or one for which the
    user agent has dedicated processing rules (e.g. a Web browser with a built-in Atom feed viewer
    would be said to explicitly support the <code>application/atom+xml</code> MIME type), or one for
    which the user agent has a dedicated handler (e.g. one registered using <code>registerContentHandler()</code>).

    The term <dfn>JSON MIME type</dfn> is used to refer to the <a>MIME
    types</a> <code>application/json</code>, <code>text/json</code>, and any <a>MIME
    type</a> whose subtype ends with the five characters "<code>+json</code>".

    <p>An <dfn>explicitly supported JSON type</dfn> is one for which the user agent is configured to
    use an external application to render the content (either a <a>plugin</a> rendering
    directly in the <a>browsing context</a>, or a separate application), or one for which the
    user agent has dedicated processing rules, or one for which the user agent has a dedicated
    handler (e.g. one registered using <code>registerContentHandler()</code>).

    <dfn>Setting the document's address</dfn>: If there is no
    <dfn>override URL</dfn>, then any <code>Document</code> created by these steps must have its
    <a>address</a> set to the <a>URL</a> that was
    originally to be fetched, ignoring any other data that was used to obtain the resource. However,
    if there <em>is</em> an <a>override URL</a>, then any <code>Document</code> created by
    these steps must have its <a>address</a> set to that
    <a>URL</a> instead.

    <p class="note">
An <a>override URL</a> is set when <a>dereferencing a <code>javascript:</code> URL</a> and when
    performing <a>an overridden reload</a>.
</p>

    <dfn>Initializing a new <code>Document</code>
    object</dfn>: when a <code>Document</code> is created as part of the above steps, the user agent
    will be required to additionally run the following algorithm after creating the new object:

    <ol>

     <li>Create a new <code>Window</code> object, and associate it with the
     <code>Document</code>, with one exception: if the <a>browsing context</a>'s only entry in
     its <a>session history</a> is the <code>about:blank</code> <code>Document</code> that was
     added when the <a>browsing context</a> was created, and navigation is occurring with
     <a>replacement enabled</a>, and that <code>Document</code> has the <a>same
     origin</a> as the new <code>Document</code>, then use the <code>Window</code> object of that
     <code>Document</code> instead, and change the <code>document</code>
     attribute of the <code>Window</code> object to point to the new <code>Document</code>.

     <li>Set the <code>Window</code> object's <a>HTTPS
     state</a> to the <a>HTTPS state</a> of the
     resource used to generate the document.</li>

     <li>Set <a>the document's referrer</a> to the <i>address of the resource from which
     Request-URIs are obtained</i> as determined when the fetch algorithm obtained the resource, if
     that algorithm was used and determined such a value; otherwise, set it to the empty
     string.</li>

     <li><a>Implement the sandboxing</a> for the <code>Document</code>.</li>

     <li>

      If the <a>active sandboxing flag set</a> of the <code>Document</code>'s
      <a>browsing context</a> or any of its <a>ancestor
      browsing contexts</a> (if any) have the <a>sandboxed fullscreen browsing context
      flag</a> set, then skip this step.

      If the <code>Document</code>'s <a>browsing context</a> has a <a>browsing context
      container</a> and either it is not an <code>iframe</code> element, or it does not have the
      <code>allowfullscreen</code> attribute specified, or its
      <code>Document</code> does not have the <a>fullscreen enabled flag</a> set, then also
      skip this step.

      Otherwise, set the <code>Document</code>'s <a>fullscreen enabled flag</a>.

    </ol>

   </li>

   <li>

    <i>Non-document content</i>: If, given <var>type</var>, the new resource is to be
    handled by displaying some sort of inline content, e.g. a native rendering of the content, an
    error message because the specified type is not supported, or an inline prompt to allow the user
    to select <a>a registered handler</a> for
    the given type, then <a>display the inline content</a>, and
    then abort these steps.

    <p class="note">
In the case of a registered handler being used, the algorithm will be reinvoked
    with a new URL to handle the request.
</p>

   </li>

   <li>Otherwise, the document's <var>type</var> is such that the resource will not
   affect the browsing context, e.g. because the resource is to be handed to an external application
   or because it is an unknown type that will be processed <a>as a download</a>. <a>Process the resource appropriately</a>.

  </ol>

  When a resource is handled by <dfn>passing its URL or
  data to an external software package</dfn> separate from the user agent (e.g. handing a <code>mailto:</code> URL to a mail client, or a Word document to a word
  processor), user agents should attempt to mitigate the risk that this is an attempt to exploit the
  target software, e.g. by prompting the user to confirm that the <a>source browsing
  context</a>'s <a>active document</a>'s <a>origin</a> is to be allowed to invoke the
  specified software. In particular, if the <a>navigate</a> algorithm, when it was invoked,
  was not <a>allowed to show a popup</a>, the user agent should not invoke the external
  software package without prior user confirmation.

  <p class="example">
For example, there could be a vulnerability in the target software's URL
  handler which a hostile page would attempt to exploit by tricking a user into clicking a link.
</p>

  <hr />

  Some of the sections below, to which the above algorithm defers in certain cases, require the
  user agent to <dfn>update the session history with the new page</dfn>. When a user agent is
  required to do this, it must <a>queue a task</a> (associated with the <code>Document</code>
  object of the <a>current entry</a>, not the new one) to run the following steps:

  <ol>

   <li>

    <a>Unload</a> the <code>Document</code> object of the
    <a>current entry</a>, with the <var>recycle</var> parameter set to false.

    If this instance of the <a>navigation</a> algorithm is canceled while
    this step is running the <a>unload a document</a> algorithm, then the <a>unload a
    document</a> algorithm must be allowed to run to completion, but this instance of the <a>navigation</a> algorithm must not run beyond this step. (In particular, for
    instance, the cancelation of this algorithm does not abort any event dispatch or script
    execution occurring as part of unloading the document or its descendants.)

   </li>

   <li>

    <dl>

     <dt>If the navigation was initiated for <dfn>entry update</dfn> of an entry</dt>

     <dd>

      <ol>

       <li>Replace the <code>Document</code> of the entry being updated, and any other entries
       that referenced the same document as that entry, with the new <code>Document</code>.</li>

       <li><a>Traverse the history</a> to the new entry.</li>

      </ol>

      <p class="note">
This can only happen if the entry being updated is not the <a>current
      entry</a>, and can never happen with <a>replacement enabled</a>. (It happens when the
      user tried to traverse to a session history entry that no longer had a <code>Document</code>
      object.)
</p>

     </dd>

     <dt>Otherwise</dt>

     <dd>

      <ol>

       <li>

        Remove all the entries in the <a>browsing context</a>'s <a>session
        history</a> after the <a>current entry</a>. If the <a>current entry</a> is
        the last entry in the session history, then no entries are removed.

        <p class="note">
This <a>doesn't necessarily have to affect</a> the
        user agent's user interface.
</p>

       </li>

       <li>Append a new entry at the end of the <code>History</code> object representing the new
       resource and its <code>Document</code> object and related state.</li>

       <li><a>Traverse the history</a> to the new entry. If the navigation was initiated
       with <a>replacement enabled</a>, then the traversal must itself be initiated with
       <a>replacement enabled</a>.

       </li>

      </ol>

     </dd>

    </dl>

   </li>

   <li>The <a>navigation algorithm</a> has now <dfn>matured</dfn>.</li>

   <li><i>Fragment identifier loop</i>: <a>Spin the event loop</a> for a user-agent-defined
   amount of time, as desired by the user agent implementor. (This is intended to allow the user
   agent to optimize the user experience in the face of performance concerns.)</li>

   <li>If the <code>Document</code> object has no parser, or its parser has <a>stopped parsing</a>, or the user agent has reason to believe the user is no longer
   interested in scrolling to the fragment identifier, then abort these steps.</li>

   <li><a>Scroll to the fragment identifier</a> given in <a>the document's
   address</a>. If this fails to find <a>an
   indicated part of the document</a>, then return to the <i>fragment identifier loop</i>
   step.</li>

  </ol>

  The <a>task source</a> for this <a>task</a> is the
  <a>networking task source</a>.

  <h4 id="page-load-processing-model-for-html-files"><dfn><dfn>Page load processing model for HTML files</dfn></dfn></h4>

  When an HTML document is to be loaded in a <a>browsing context</a>, the user agent must
  <a>queue a task</a> to create a <code>Document</code> object, mark it as being an <a>HTML document</a>, set its <a>content type</a> to "<code>text/html</code>",
  <a>initialize the <code>Document</code> object</a>, and finally create an <a>HTML
  parser</a> and associate it with the <code>Document</code>. Each <a>task</a> that the <a>networking task source</a> places on the
  <a>task queue</a> while fetching runs must then fill the parser's <a>input byte
  stream</a> with the fetched bytes and cause the <a>HTML parser</a> to perform the
  appropriate processing of the input stream.

  <p class="note">
The <a>input byte stream</a> converts bytes into characters for use in the
  <a>tokenizer</a>. This process relies, in part, on character encoding
  information found in the real <a>Content-Type metadata</a> of the
  resource; the "sniffed type" is not used for this purpose.
</p>

  When no more bytes are available, the user agent must <a>queue a task</a> for the parser
  to process the implied EOF character, which eventually causes a <code>load</code> event to be fired.

  After creating the <code>Document</code> object, but before any script execution, certainly
  before the parser <a>stops</a>, the user agent must <a>update the
  session history with the new page</a>.

  <p class="note">
<a>Application cache selection</a> happens <a>in the HTML parser</a>.
</p>

  The <a>task source</a> for the two tasks mentioned in this section must be the
  <a>networking task source</a>.

  <h4 id="page-load-processing-model-for-xml-files"><dfn><dfn>Page load processing model for XML files</dfn></dfn></h4>

  When faced with displaying an XML file inline, user agents must follow the requirements defined
  in the XML and Namespaces in XML recommendations, RFC 7303, DOM, and other relevant specifications
  to create a <code>Document</code> object and a corresponding <a>XML parser</a>. <a>\[XML]</a> [[!XMLNS]] [[!RFC7303]] <a>\[DOM]</a>

  <p class="note">
At the time of writing, the XML specification community had not actually yet
  specified how XML and the DOM interact.
</p>

  After the <code>Document</code> is created, the user agent must <a>initialize the
  <code>Document</code> object</a>.

  The actual HTTP headers and other metadata, not the headers as mutated or implied by the
  algorithms given in this specification, are the ones that must be used when determining the
  character encoding according to the rules given in the above specifications. Once the character
  encoding is established, the <a>document's character encoding</a> must be set to that
  character encoding.

  If the root element, as parsed according to the XML specifications cited above, is found to be
  an <code>html</code> element with an attribute <code>manifest</code>
  whose value is not the empty string, then, as soon as the element is <a>inserted into the document</a>, the user agent must <a>resolve</a> the value of that attribute relative to that element, and if
  that is successful, must apply the <a>URL serializer</a>
  algorithm to the resulting <a>parsed URL</a> with the <i>exclude fragment flag</i> set to
  obtain <var>manifest URL</var>, and then run the <a>application
  cache selection algorithm</a> with <var>manifest URL</var> as the manifest URL, passing in the
  newly-created <code>Document</code>. Otherwise, if the attribute is absent, its value is the empty
  string, or resolving its value fails, then as soon as the root element is <a>inserted into the document</a>, the user agent must run the <a>application cache selection algorithm</a> with no manifest, and
  passing in the <code>Document</code>.

  <p class="note">
Because the processing of the <code>manifest</code>
  attribute happens only once the root element is parsed, any URLs referenced by processing
  instructions before the root element (such as <code>&lt;?xml-stylesheet?></code> PIs)
  will be fetched from the network and cannot be cached.
</p>

  User agents may examine the namespace of the root <code>Element</code> node of this
  <code>Document</code> object to perform namespace-based dispatch to alternative processing tools,
  e.g. determining that the content is actually a syndication feed and passing it to a feed handler.
  If such processing is to take place, abort the steps in this section, and jump to <a>the next step</a> (labeled <i>non-document content</i>) in the
  <a>navigate</a> steps above.

  Otherwise, then, with the newly created <code>Document</code>, the user agent must <a>update
  the session history with the new page</a>. User agents may do this before the complete document
  has been parsed (thus achieving <i>incremental rendering</i>), and must do this before any scripts
  are to be executed.

  Error messages from the parse process (e.g. XML namespace well-formedness errors) may be
  reported inline by mutating the <code>Document</code>.

  <h4 id="page-load-processing-model-for-text-files"><dfn><dfn>Page load processing model for text files</dfn></dfn></h4>

  When a plain text document is to be loaded in a <a>browsing context</a>, the user agent
  must <a>queue a task</a> to create a <code>Document</code> object, mark it as being an <a>HTML document</a>, set its <a>content type</a> to the sniffed MIME type of the
  resource (<var>type</var> in the <a>navigate</a> algorithm), <a>initialize the
  <code>Document</code> object</a>, create an <a>HTML parser</a>, associate it with the
  <code>Document</code>, act as if the tokenizer had emitted a start tag token with the tag name
  "pre" followed by a single U+000A LINE FEED (LF) character, and switch the <a>HTML parser</a>'s
  tokenizer to the <a>PLAINTEXT state</a>. Each <a>task</a> that
  the <a>networking task source</a> places on the <a>task queue</a> while fetching runs
  must then fill the parser's <a>input byte stream</a> with the fetched bytes and cause the
  <a>HTML parser</a> to perform the appropriate processing of the input stream.

  The rules for how to convert the bytes of the plain text document into actual characters, and
  the rules for actually rendering the text to the user, are defined by the specifications for the
  sniffed MIME type of the resource (<var>type</var> in the <a>navigate</a> algorithm).

  The <a>document's character encoding</a> must be set to the character encoding used to
  decode the document.

  Upon creation of the <code>Document</code> object, the user agent must run the <a>application cache selection algorithm</a> with no manifest, and
  passing in the newly-created <code>Document</code>.

  When no more bytes are available, the user agent must <a>queue a task</a> for the parser
  to process the implied EOF character, which eventually causes a <code>load</code> event to be fired.

  After creating the <code>Document</code> object, but potentially before the page has finished
  parsing, the user agent must <a>update the session history with the new page</a>.

  User agents may add content to the <code>head</code> element of the <code>Document</code>, e.g.
  linking to a style sheet or a binding, providing script, giving the document a
  <code>title</code>, etc.

  <p class="note">
In particular, if the user agent supports the <code>Format=Flowed</code>
  feature of RFC 3676 then the user agent would need to apply extra styling to cause the text to
  wrap correctly and to handle the quoting feature. This could be performed using, e.g., a
  binding or a CSS extension.
</p>

  The <a>task source</a> for the two tasks mentioned in this section must be the
  <a>networking task source</a>.

  <h4 id="page-load-processing-model-for-multipart/x-mixed-replace-resources"><dfn><dfn>Page load processing model for <code>multipart/x-mixed-replace</code> resources</dfn></dfn></h4>

  When a resource with the type <code>multipart/x-mixed-replace</code> is to be loaded in a
  <a>browsing context</a>, the user agent must parse the resource using the rules for
  multipart types. [[!RFC2046]]

  For each body part obtained from the resource, the user agent must run a new instance of the
  <a>navigate</a> algorithm, starting from the <i>resource handling</i> step, using the new
  body part as the resource being navigated, with <a>replacement enabled</a> if a previous
  body part from the same resource resulted in a <code>Document</code> object being created and
  <a>initialized</a>, and otherwise using the same
  setup as the <a>navigate</a> attempt that caused this section to be invoked in the first
  place.

  For the purposes of algorithms processing these body parts as if they were complete stand-alone
  resources, the user agent must act as if there were no more bytes for those resources whenever the
  boundary following the body part is reached.

  <p class="note">
Thus, <code>load</code> events (and for that matter <code>unload</code> events) do fire for each body part loaded.
</p>

  <h4 id="page-load-processing-model-for-media"><dfn><dfn>Page load processing model for media</dfn></dfn></h4>

  When an image, video, or audio resource is to be loaded in a <a>browsing context</a>, the
  user agent should create a <code>Document</code> object, mark it as being an <a>HTML document</a>, set its <a>content
  type</a> to the sniffed MIME type of the resource (<var>type</var> in the
  <a>navigate</a> algorithm), <a>initialize the <code>Document</code> object</a>, append
  an <code>html</code> element to the <code>Document</code>, append a <code>head</code> element and
  a <code>body</code> element to the <code>html</code> element, append an element <var>host element</var> for the media, as described below, to the <code>body</code> element,
  and set the appropriate attribute of the element <var>host element</var>, as described
  below, to the address of the image, video, or audio resource.

  The element <var>host element</var> to create for the media is the element given in
  the table below in the second cell of the row whose first cell describes the media. The
  appropriate attribute to set is the one given by the third cell in that same row.

  <table>
   <thead>
    <tr> <th> Type of media
         <th> Element for the media
         <th> Appropriate attribute
    <tr> <td> Image
         <td> <code>img</code>
         <td> <code>src</code>
    <tr> <td> Video
         <td> <code>video</code>
         <td> <code>src</code>
    <tr> <td> Audio
         <td> <code>audio</code>
         <td> <code>src</code>
  </table>

  Then, the user agent must act as if it had <a>stopped
  parsing</a>.

  Upon creation of the <code>Document</code> object, the user agent must run the <a>application cache selection algorithm</a> with no manifest, and
  passing in the newly-created <code>Document</code>.

  After creating the <code>Document</code> object, but potentially before the page has finished
  fully loading, the user agent must <a>update the session history with the new page</a>.

  User agents may add content to the <code>head</code> element of the <code>Document</code>, or
  attributes to the element <var>host element</var>, e.g. to link to a style sheet or a
  binding, to provide a script, to give the document a <code>title</code>, to make the media
  <a>autoplay</a>, etc.

  <h4 id="page-load-processing-model-for-content-that-uses-plugins"><dfn><dfn>Page load processing model for content that uses plugins</dfn></dfn></h4>

  When a resource that requires an external resource to be rendered is to be loaded in a
  <a>browsing context</a>, the user agent should create a <code>Document</code> object, mark
  it as being an <a>HTML document</a> and mark it as being a
  <dfn>plugin document</dfn>, set its <a>content
  type</a> to the sniffed MIME type of the resource (<var>type</var> in the
  <a>navigate</a> algorithm), <a>initialize the <code>Document</code> object</a>, append
  an <code>html</code> element to the <code>Document</code>, append a <code>head</code> element and
  a <code>body</code> element to the <code>html</code> element, append an <code>embed</code> to the
  <code>body</code> element, and set the <code>src</code> attribute of the
  <code>embed</code> element to the address of the resource.

  <p class="note">
The term <a>plugin document</a> is used by
  <cite>Content Security Policy</cite> as part of the mechanism that ensures <code>iframe</code>s
  can't be used to evade <code>plugin-types</code> directives. [[!CSP]]
</p>

  Then, the user agent must act as if it had <a>stopped
  parsing</a>.

  Upon creation of the <code>Document</code> object, the user agent must run the <a>application cache selection algorithm</a> with no manifest, and
  passing in the newly-created <code>Document</code>.

  After creating the <code>Document</code> object, but potentially before the page has finished
  fully loading, the user agent must <a>update the session history with the new page</a>.

  User agents may add content to the <code>head</code> element of the <code>Document</code>, or
  attributes to the <code>embed</code> element, e.g. to link to a style sheet or a binding, or
  to give the document a <code>title</code>.

  <p class="note">
If the <code>Document</code>'s <a>active sandboxing
  flag set</a> has its <a>sandboxed plugins browsing context flag</a> set, the synthesized
  <code>embed</code> element will <a>fail to render the content</a> if
  the relevant <a>plugin</a> cannot be <a>secured</a>.
</p>

  <h4><dfn>Page load processing model for inline
  content that doesn\'t have a DOM</dfn></h4>

  When the user agent is to display a user agent page inline in a <a>browsing context</a>,
  the user agent should create a <code>Document</code> object, mark it as being an <a>HTML document</a>, set its <a>content type</a> to "<code>text/html</code>",
  <a>initialize the <code>Document</code> object</a>, and then either associate that
  <code>Document</code> with a custom rendering that is not rendered using the normal
  <code>Document</code> rendering rules, or mutate that <code>Document</code> until it represents
  the content the user agent wants to render.

  Once the page has been set up, the user agent must act as if it had <a>stopped parsing</a>.

  Upon creation of the <code>Document</code> object, the user agent must run the <a>application cache selection algorithm</a> with no manifest,
  passing in the newly-created <code>Document</code>.

  After creating the <code>Document</code> object, but potentially before the page has been
  completely set up, the user agent must <a>update the session history with the new
  page</a>.

  <h4 id="navigating-to-a-fragment-identifier"><dfn><dfn>Navigating to a fragment identifier</dfn></dfn></h4>

  When a user agent is supposed to navigate to a fragment identifier, then the user agent must
  run the following steps:

  <ol>

   <li>

    Remove all the entries in the <a>browsing context</a>'s <a>session history</a>
    after the <a>current entry</a>. If the <a>current entry</a> is the last entry in the
    session history, then no entries are removed.

    <p class="note">
This <a>doesn't necessarily have to affect</a> the user
    agent's user interface.
</p>

   </li>

   <li>Remove any <a>tasks</a> queued by the <a>history traversal
   task source</a> that are associated with any <code>Document</code> objects in the
   <a>top-level browsing context</a>'s <a>document family</a>.</li>

   <li>Append a new entry at the end of the <code>History</code> object representing the new
   resource and its <code>Document</code> object and related state. Its <a>URL</a> must be set
   to the address to which the user agent was <a>navigating</a>. The title
   must be left unset.</li>

   <li><a>Traverse the history</a> to the new entry, with the <i>non-blocking events</i> flag
   set. This will <a>scroll to the fragment
   identifier</a> given in what is now <a>the document's address</a>.</li>

  </ol>

  <p class="note">
If the scrolling fails because the relevant <a>ID</a> has
  not yet been parsed, then the original <a>navigation</a> algorithm will
  take care of the scrolling instead, as the last few steps of its <a>update the session history
  with the new page</a> algorithm.
</p>

  <hr />

  When the user agent is required to <dfn>scroll to the fragment identifier</dfn> and <a>the
  indicated part of the document</a>, if any, is <a>being rendered</a>, the user agent must
  either change the scrolling position of the document using the following algorithm, or perform
  some other action such that <a>the indicated part of the document</a> is brought to the
  user's attention. If there is no indicated part, or if the indicated part is not <a>being
  rendered</a>, then the user agent must do nothing. The aforementioned algorithm is as
  follows:

  <ol>

   <li>Let <var>target</var> be <a>the indicated part of the
   document</a>, as defined below.</li>

   <li>If <var>target</var> is the top of the document, then <a>scroll to the
   beginning of the document</a> for the <code>Document</code>, and abort these steps. [[!CSSOMVIEW]]</li>

   <li>Use the <a>scroll an element into view</a> algorithm to scroll <var>target</var> into view, with the <var>align to top flag</var> set. [[!CSSOMVIEW]]</li>

   <li>Run the <a>focusing steps</a> for that element, with the <code>Document</code>'s
   viewport as the <i>fallback target</i>.</li>

   <li>Optionally, move the <a>sequential focus navigation starting point</a> to
   <var>target</var>.

  </ol>

  <dfn>The indicated part of the document</dfn> is the one that the fragment identifier, if any,
  identifies. The semantics of the fragment identifier in terms of mapping it to a specific DOM Node
  is defined by the specification that defines the <a>MIME type</a> used by the
  <code>Document</code> (for example, the processing of fragment identifiers for <a>XML MIME types</a> is the responsibility of RFC7303). [[!RFC7303]]

  For HTML documents (and <a>HTML MIME types</a>), the following
  processing model must be followed to determine what <a>the indicated part of the
  document</a> is.

  <ol>

   <li>Apply the <a>URL parser</a> algorithm to the <a>URL</a>, and let <var>fragid</var> be the <a>fragment</a> component of the
   resulting <a>parsed URL</a>.</li>

   <li>If <var>fragid</var> is the empty string, then <a>the indicated part of the
   document</a> is the top of the document; stop the algorithm here.</li>

   <li>Let <var>fragid bytes</var> be the result of <a>percent-decoding</a> <var>fragid</var>.</li>

   <li>Let <var>decoded fragid</var> be the result of applying the <a>UTF-8
   decoder</a> algorithm to <var>fragid bytes</var>. If the <a>UTF-8 decoder</a>
   emits a <a>decoder error</a>, abort the decoder and instead jump to the step labeled <i>no
   decoded fragid</i>.</li>

   <li>If there is an element in the DOM that has an <a>ID</a> exactly
   equal to <var>decoded fragid</var>, then the first such element in <a>tree order</a> is
   <a>the indicated part of the document</a>; stop the algorithm here.</li>

   <li><i>No decoded fragid</i>: If there is an <code>a</code> element in the DOM that has a <code>name</code> attribute whose value is exactly equal to <var>fragid</var> (<em>not</em> <var>decoded fragid</var>), then the first such
   element in <a>tree order</a> is <a>the indicated part of the document</a>; stop the algorithm
   here.</li>

   <li>If <var>fragid</var> is an <a>ASCII case-insensitive</a> match for the
   string <code>top</code>, then <a>the indicated part of the document</a> is the top
   of the document; stop the algorithm here.</li>

   <li>Otherwise, there is no <a>indicated part of
   the document</a>.</li>

  </ol>

  For the purposes of the interaction of HTML with Selectors' <dfn><code>:target</code></dfn> pseudo-class, the <dfn><i>target element</i></dfn>
  is <a>the indicated part of the document</a>, if that is an element; otherwise there is no
  <i>target element</i>. [[!SELECTORS]]

  The <a>task source</a> for the task mentioned in this section must be the <a>DOM
  manipulation task source</a>.

  </div>

  <h4 id="history-traversal"><dfn>History traversal</dfn></h4>

  <div class="impl">

  When a user agent is required to <dfn>traverse the history</dfn> to a <var>specified
  entry</var>, optionally with <a>replacement enabled</a>, and optionally with the
  <i>non-blocking events</i> flag set, the user agent must act as follows.

  <p class="note">
This algorithm is not just invoked when <a>explicitly going back or forwards in the session history</a> &mdash; it is also invoked
  in other situations, for example when <a>navigating a browsing context</a>,
  as part of <a>updating the session history
  with the new page</a>.
</p>

  <ol>

   <li>

    If there is no longer a <code>Document</code> object for the entry in question,
    <a>navigate</a> the <a>browsing
    context</a> to the resource for that entry to perform an <a>entry update</a> of that
    entry, and abort these steps. The "<a>navigate</a>" algorithm reinvokes this "traverse"
    algorithm to complete the traversal, at which point there <em>is</em> a <code>Document</code>
    object and so this step gets skipped. The navigation must be done using the same <a>source
    browsing context</a> as was used the first time this entry was created. (This can never
    happen with <a>replacement enabled</a>.)

    <p class="note">
If the resource was obtained using a non-idempotent action, for example a POST
    form submission, or if the resource is no longer available, for example because the computer is
    now offline and the page wasn't cached, navigating to it again might not be possible. In this
    case, the navigation will result in a different page than previously; for example, it might be
    an error message explaining the problem or offering to resubmit the form.
</p>

   </li>

   <li>If the <a>current entry</a>'s title was not set by the <code>pushState()</code> or <code>replaceState()</code> methods, then set its title to the value
   returned by the <code>document.title</code> IDL attribute.</li>

   <li>If appropriate, update the <a>current entry</a> in the <a>browsing
   context</a>'s <code>Document</code> object's <code>History</code> object to reflect any state
   that the user agent wishes to persist. The entry is then said to be <a>an entry with persisted
   user state</a>.</li>

   <li>If the <var>specified entry</var> has a different <code>Document</code> object
   than the <a>current entry</a>, then run the following substeps:

    <ol>

     <li>Remove any <a>tasks</a> queued by the <a>history traversal
     task source</a> that are associated with any <code>Document</code> objects in the
     <a>top-level browsing context</a>'s <a>document family</a>.</li>

     <li>

      If the <a>origin</a> of the <code>Document</code> of the <var>specified
      entry</var> is not the <a>same</a> as the <a>origin</a> of the
      <code>Document</code> of the <a>current entry</a>, then run the following
      sub-sub-steps:

      <ol>

       <li>The current <a>browsing context name</a> must be stored with all the entries in
       the history that are associated with <code>Document</code> objects with the <a>same
       origin</a> as the <a>active document</a> <em>and</em> that are contiguous with the
       <a>current entry</a>.</li>

       <li>If the browsing context is a <a>top-level browsing context</a>,
       but not an <a>auxiliary browsing context</a>, then the browsing context's
       <a>browsing context name</a> must be unset.</li>

      </ol>

     </li>

     <li>Make the <var>specified entry</var>'s
     <code>Document</code> object the <a>active document</a> of the <a>browsing
     context</a>.</li>

     <li>

      If the <var>specified entry</var> has a <a>browsing context name</a> stored
      with it, then run the following sub-sub-steps:

      <ol>

       <li>Set the browsing context's <a>browsing context name</a> to the name stored with
       the specified entry.</li>

       <li>Clear any <a>browsing context names</a> stored
       with all entries in the history that are associated with <code>Document</code> objects with
       the <a>same origin</a> as the new <a>active document</a> and that are contiguous
       with the specified entry.</li>

      </ol>

     </li>

     <li>If the <var>specified entry</var>'s
     <code>Document</code> has any form controls whose <a>autofill field name</a> is "<code>off</code>", invoke the <a>reset algorithm</a> of each of those elements.</li>

     <li>

      If the <a>current document readiness</a> of the <var>specified entry</var>'s
      <code>Document</code> is "<code>complete</code>", <a>queue a task</a> to run
      the following sub-sub-steps:

      <ol>

       <li>If the <code>Document</code>'s <a>page showing</a> flag is true, then abort this
       task (i.e. don't fire the event below).</li>

       <li>Set the <code>Document</code>'s <a>page showing</a> flag to true.</li>

       <li>

        Run any <dfn>session history document visibility change steps</dfn> for <code>Document</code> that
        are defined by <a>other applicable specifications</a>.

        <p class="note">
This is specifically intended for use by the Page Visibility specification. [[!PAGEVIS]]
</p>

       </li>

       <li><a>Fire</a> a <a>trusted</a> event with the name <code>pageshow</code> at the <code>Window</code> object of that
       <code>Document</code>, with <i>target override</i> set to the <code>Document</code>
       object,
       using the <code>PageTransitionEvent</code> interface, with the <code>persisted</code> attribute initialized to true.
       This event must not bubble, must not be cancelable, and has no default action.</li>

      </ol>

     </li>

    </ol>

   </li>

   <li>Set <a>the document's address</a> to the URL of the <var>specified
   entry</var>.</li>

   <li>If the <var>specified entry</var> has a URL whose fragment identifier differs
   from that of the <a>current entry</a>'s when compared in a <a>case-sensitive</a>
   manner, and the two share the same <code>Document</code> object, then let <var>hash
   changed</var> be true, and let <var>old URL</var> be the URL of the <a>current
   entry</a> and <var>new URL</var> be the URL of the <var>specified
   entry</var>. Otherwise, let <var>hash changed</var> be false.</li>

   <li>If the traversal was initiated with <dfn>replacement enabled</dfn>, remove the entry
   immediately before the <var>specified entry</var> in the session history.

   <li>If the <var>specified entry</var> is not <a>an entry with persisted user
   state</a>, but its URL has a fragment identifier, <a>scroll to the fragment
   identifier</a>.</li>

   <li>

    If the entry is <a>an entry with persisted user state</a>, the user agent may update
    aspects of the document and its rendering, for instance the scroll position or values of form
    fields, that it had previously recorded.

    <p class="note">
This can even include updating the <code>dir</code> attribute
    of <code>textarea</code> elements or <code>input</code> elements whose <code>type</code> attribute is in either the <a>Text</a> state or the <a>Search</a> state, if the persisted state includes the
    directionality of user input in such controls.
</p>

   </li>

   <li>If the entry is a <a>state object</a> entry, let <var>state</var> be a
   <a>structured clone</a> of that state object. Otherwise, let <var>state</var> be
   null.</li>

   <li>Set <code>history.state</code> to <var>state</var>.</li>

   <li>Let <var>state changed</var> be true if the <code>Document</code> of the <var>specified entry</var> has a <a>latest entry</a>, and that entry is not the <var>specified entry</var>; otherwise let it be false.

   <li>Let the <a>latest entry</a> of the <code>Document</code> of the <var>specified entry</var> be the <var>specified entry</var>.</li>

   <li>

    If the <i>non-blocking events</i> flag is not set, then run the following steps
    <a>immediately</a>. Otherwise, the <i>non-blocking events</i> flag is set; <a>queue a task</a>
    to run the following substeps instead.

    <ol>

     <li>If <var>state changed</var> is true, <a>fire</a> a <a>trusted</a>
     event with the name <code>popstate</code> at the <code>Window</code>
     object of the <code>Document</code>, using the <code>PopStateEvent</code> interface, with the
     <code>state</code> attribute initialized to the value of <var>state</var>. This event must bubble but not be cancelable and has no default
     action.</li>

     <li>If <var>hash changed</var> is true, then <a>fire</a> a <a>trusted</a>
     event with the name <code>hashchange</code> at the <a>browsing
     context</a>'s <code>Window</code> object, using the <code>HashChangeEvent</code> interface,
     with the <code>oldURL</code> attribute initialized to <var>old URL</var> and the <code>newURL</code> attribute
     initialized to <var>new URL</var>. This event must bubble but not be cancelable and
     has no default action.</li>

    </ol>

   </li>

   <li>The <a>current entry</a> is now the <var>specified entry</var>.</li>

  </ol>

  The <a>task source</a> for the tasks mentioned above is the <a>DOM manipulation task
  source</a>.

  </div>

  <h5 id="the-popstateevent-interface"><dfn>The <code>PopStateEvent</code> interface</dfn></h5>

  <pre class="idl" data-highlight="webidl">
[Constructor(DOMString type, optional <a>PopStateEventInit</a> eventInitDict), Exposed=(Window,Worker)]
interface <dfn>PopStateEvent</dfn> : <a>Event</a> {
  readonly attribute any <a>state</a>;
};

dictionary <dfn>PopStateEventInit</dfn> : <a>EventInit</a> {
  any state;
};
</pre>

  <dl class="domintro">

   <dt><var>event</var> . <code>state</code></dt>

   <dd>

    Returns a copy of the information that was provided to <code>pushState()</code> or <code>replaceState()</code>.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>state</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to
  null. It represents the context information for the event, or null, if the state represented is
  the initial state of the <code>Document</code>.

  </div>

  <h5 id="the-hashchangeevent-interface"><dfn>The <code>HashChangeEvent</code> interface</dfn></h5>

  <pre class="idl" data-highlight="webidl">
[Constructor(DOMString type, optional <a>HashChangeEventInit</a> eventInitDict), Exposed=(Window,Worker)]
interface <dfn>HashChangeEvent</dfn> : <a>Event</a> {
  readonly attribute DOMString <a>oldURL</a>;
  readonly attribute DOMString <a>newURL</a>;
};

dictionary <dfn>HashChangeEventInit</dfn> : <a>EventInit</a> {
  DOMString oldURL;
  DOMString newURL;
};
</pre>

  <dl class="domintro">

   <dt><var>event</var> . <code>oldURL</code></dt>

   <dd>

    Returns the <a>URL</a> of the <a>session history entry</a> that was previously
    current.

   </dd>

   <dt><var>event</var> . <code>newURL</code></dt>

   <dd>

    Returns the <a>URL</a> of the <a>session history entry</a> that is now
    current.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>oldURL</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to
  null. It represents context information for the event, specifically the URL of the <a>session
  history entry</a> that was traversed from.

  The <dfn><code>newURL</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to
  null. It represents context information for the event, specifically the URL of the <a>session
  history entry</a> that was traversed to.

  </div>

  <h5 id="the-pagetransitionevent-interface"><dfn>The <code>PageTransitionEvent</code> interface</dfn></h5>

  <pre class="idl" data-highlight="webidl">
[Constructor(DOMString type, optional <a>PageTransitionEventInit</a> eventInitDict), Exposed=(Window,Worker)]
interface <dfn>PageTransitionEvent</dfn> : <a>Event</a> {
  readonly attribute boolean <a>persisted</a>;
};

dictionary <dfn>PageTransitionEventInit</dfn> : <a>EventInit</a> {
  boolean persisted;
};
</pre>

  <dl class="domintro">

   <dt><var>event</var> . <code>persisted</code></dt>

   <dd>

    For the <code>pageshow</code> event, returns false if the page is
    newly being loaded (and the <code>load</code> event will fire). Otherwise,
    returns true.

    For the <code>pagehide</code> event, returns false if the page is
    going away for the last time. Otherwise, returns true, meaning that (if nothing conspires to
    make the page unsalvageable) the page might be reused if the user navigates back to this
    page.

    Things that can cause the page to be unsalvageable include:

    <ul class="brief">
     <li><code>document.open()</code>
     <li>Listening for <code>beforeunload</code> events
     <li>Listening for <code>unload</code> events
     <li>Having <code>iframe</code>s that are not salvageable
     <li>Active <code>WebSocket</code> objects
     <li><a>Aborting a <code>Document</code></a>
    </ul>

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>persisted</code></dfn> attribute must
  return the value it was initialized to. When the object is created, this attribute must be
  initialized to false. It represents the context information for the event.

  </div>

  <h4 id="unloading-documents"><dfn>Unloading documents</dfn></h4>

  <div class="impl">

  A <code>Document</code> has a <dfn><i>salvageable</i></dfn> state, which must initially be
  true, a <dfn>fired unload</dfn> flag, which must initially be false, and a <dfn>page showing</dfn>
  flag, which must initially be false. The <a>page showing</a> flag is used to ensure that
  scripts receive <code>pageshow</code> and <code>pagehide</code> events in a consistent manner (e.g. that they never
  receive two <code>pagehide</code> events in a row without an intervening
  <code>pageshow</code>, or vice versa).

  <a>Event loops</a> have a <dfn>termination nesting level</dfn>
  counter, which must initially be zero.

  When a user agent is to <dfn>prompt to unload a document</dfn>, it must run the following
  steps.

  <ol>

   <li>Increase the <a>event loop</a>'s <a>termination nesting level</a> by
   one.</li>

   <li>Increase the <code>Document</code>'s <a>ignore-opens-during-unload counter</a> by
   one.</li>

   <li>Let <var>event</var> be a new <a>trusted</a>
   <code>BeforeUnloadEvent</code> event object with the name <code>beforeunload</code>, which does not bubble but is cancelable.</li>

   <li><i>Dispatch</i>: <a>Dispatch</a> <var>event</var> at the <code>Document</code>'s <code>Window</code> object.</li>

   <li>Decrease the <a>event loop</a>'s <a>termination nesting level</a> by
   one.</li>

   <li>Release the <a>storage mutex</a>.</li>

   <li>If any event listeners were triggered by the earlier <i>dispatch</i> step, then set the
   <code>Document</code>'s <i>salvageable</i> state to
   false.</li>

   <li>

    If the <code>Document</code>'s <a>active sandboxing flag set</a> does not have its
    <a>sandboxed modals flag</a> set, and the <code>returnValue</code> attribute of the <var>event</var>
    object is not the empty string, or if the event was canceled, then the user agent should ask the
    user to confirm that they wish to unload the document.

    The prompt shown by the user agent may include the string of the <code>returnValue</code> attribute, or some leading subset
    thereof. (A user agent may want to truncate the string to 1024 characters for display, for
    instance.)

    The user agent must <a>pause</a> while waiting for the user's response.

    If the user did not confirm the page navigation, then the user agent <dfn>refused to allow
    the document to be unloaded</dfn>.

   </li>

   <li>If this algorithm was invoked by another instance of the "prompt to unload a document"
   algorithm (i.e. through the steps below that invoke this algorithm for all descendant browsing
   contexts), then jump to the step labeled <i>end</i>.</li>

   <li>Let <var>descendants</var> be the <a>list of the descendant browsing
   contexts</a> of the <code>Document</code>.</li>

   <li>

    If <var>descendants</var> is not an empty list, then for each <a>browsing
    context</a> <var>b</var> in <var>descendants</var> run the following
    substeps:

    <ol>

     <li><a>Prompt to unload</a> the <a>active
     document</a> of the <a>browsing context</a> <var>b</var>. If the user
     <a>refused to allow the document to be unloaded</a>, then the user implicitly also <a>refused to allow <em>this</em> document to
     be unloaded</a>; jump to the step labeled <i>end</i>.

     <li>If the <i>salvageable</i> state of the <a>active
     document</a> of the <a>browsing context</a> <var>b</var> is false, then set
     the <i>salvageable</i> state of <em>this</em> document to
     false also.</li>

    </ol>

   </li>

   <li><i>End</i>: Decrease the <code>Document</code>'s <a>ignore-opens-during-unload
   counter</a> by one.</li>

  </ol>

  When a user agent is to <dfn>unload a document</dfn>, it must run the following steps. These
  steps are passed an argument, <var>recycle</var>, which is either true or false,
  indicating whether the <code>Document</code> object is going to be re-used. (This is set by the
  <code>document.open()</code> method.)

  <ol>

   <li>Increase the <a>event loop</a>'s <a>termination nesting level</a> by
   one.</li>

   <li>Increase the <code>Document</code>'s <a>ignore-opens-during-unload counter</a> by
   one.</li>

   <li>If the <code>Document</code>'s <a>page showing</a> flag is false, then jump to the
   step labeled <i>unload event</i> below (i.e. skip firing the <code>pagehide</code> event and don't rerun the <a>unloading document
   visibility change steps</a>).</li>

   <li>Set the <code>Document</code>'s <a>page showing</a> flag to false.</li>

   <li><a>Fire</a> a <a>trusted</a> event with the name <code>pagehide</code> at the <code>Window</code> object of the
   <code>Document</code>, with <i>target override</i> set to the <code>Document</code>
   object, using the <code>PageTransitionEvent</code> interface,
   with the <code>persisted</code> attribute initialized
   to true if the <code>Document</code> object's <i>salvageable</i> state is true, and false otherwise. This
   event must not bubble, must not be cancelable, and has no default action.</li>

   <li>

    Run any <dfn>unloading document visibility change steps</dfn> for <code>Document</code> that
    are defined by <a>other applicable specifications</a>.

    <p class="note">
This is specifically intended for use by the Page Visibility specification. [[!PAGEVIS]]
</p>

   </li>

   <li><i>Unload event</i>: If the <code>Document</code>'s <a>fired unload</a> flag is
   false, <a>fire a simple event</a> named <code>unload</code> at the
   <code>Document</code>'s <code>Window</code> object, with <i>target override</i> set to the
   <code>Document</code> object.</li>

   <li>Decrease the <a>event loop</a>'s <a>termination nesting level</a> by
   one.</li>

   <li>Release the <a>storage mutex</a>.</li>

   <li>If any event listeners were triggered by the earlier <i>unload event</i> step, then set
   the <code>Document</code> object's <i>salvageable</i> state
   to false and set the <code>Document</code>'s <a>fired unload</a> flag to true.</li>

   <li>Run any <a>unloading document cleanup steps</a> for <code>Document</code> that are
   defined by this specification and <a>other applicable specifications</a>.</li>

   <li>If this algorithm was invoked by another instance of the "unload a document" algorithm
   (i.e. by the steps below that invoke this algorithm for all descendant browsing contexts), then
   jump to the step labeled <i>end</i>.</li>

   <li>Let <var>descendants</var> be the <a>list of the descendant browsing
   contexts</a> of the <code>Document</code>.</li>

   <li>

    If <var>descendants</var> is not an empty list, then for each <a>browsing
    context</a> <var>b</var> in <var>descendants</var> run the following
    substeps:

    <ol>

     <li><a>Unload</a> the <a>active document</a> of the
     <a>browsing context</a> <var>b</var> with the <var>recycle</var>
     parameter set to false.</li>

     <li>If the <i>salvageable</i> state of the <a>active
     document</a> of the <a>browsing context</a> <var>b</var> is false, then set
     the <i>salvageable</i> state of <em>this</em> document to
     false also.</li>

    </ol>

   </li>

   <li>If both the <code>Document</code>'s <i>salvageable</i> state and <var>recycle</var> are
   false, then the <code>Document</code>'s <a>browsing context</a> must <a>discard the <code>Document</code></a>.</li>

   <li><i>End</i>: Decrease the <code>Document</code>'s <a>ignore-opens-during-unload
   counter</a> by one.</li>

  </ol>

  This specification defines the following <dfn>unloading document cleanup steps</dfn>. Other
  specifications can define more.

  <ol>

   <li>

    <a>Make disappear</a> any <code>WebSocket</code> objects that were created by the <code>WebSocket()</code> constructor from the
    <code>Document</code>'s <code>Window</code> object.

    If this affected any <code>WebSocket</code> objects, then set <code>Document</code>'s <i>salvageable</i> state to false.

   </li>

   <li>If the <code>Document</code>'s <i>salvageable</i>
   state is false, <a>forcibly close</a> any
   <code>EventSource</code> objects that whose constructor was invoked from the
   <code>Document</code>'s <code>Window</code> object.</li>

   <li>If the <code>Document</code>'s <i>salvageable</i>
   state is false, empty the <code>Document</code>'s <code>Window</code>'s <a>list of active
   timers</a>.</li>

  </ol>

  </div>

  <h5 id="the-beforeunloadevent-interface"><dfn>The <code>BeforeUnloadEvent</code> interface</dfn></h5>

  <pre class="idl" data-highlight="webidl">
interface <dfn>BeforeUnloadEvent</dfn> : <a>Event</a> {
  attribute DOMString <a>returnValue</a>;
};
</pre>

  <dl class="domintro">

   <dt><var>event</var> . <code>returnValue</code> [ = <var>value</var> ]</dt>

   <dd>

    Returns the current return value of the event (the message to show the user).

    Can be set, to update the message.

   </dd>

  </dl>

  <p class="note">
There are no <code>BeforeUnloadEvent</code>-specific initialisation methods.
</p>

  <div class="impl">

  The <dfn><code>returnValue</code></dfn> attribute
  represents the message to show the user. When the event is created, the attribute must be set to
  the empty string. On getting, it must return the last value it was set to. On setting, the
  attribute must be set to the new value.

  </div>

  <div class="impl">

  <h4 id="aborting-a-document-load"><dfn>Aborting a document load</dfn></h4>

  If a <code>Document</code> is <dfn>aborted</dfn>, the user agent must
  run the following steps:

  <ol>

   <li><a>Abort</a> the <a>active
   documents</a> of every <a>child browsing context</a>. If this results in any of those
   <code>Document</code> objects having their <i>salvageable</i> state set to false, then set this
   <code>Document</code>'s <i>salvageable</i> state to false
   also.</li>

   <li>Cancel any instances of the <a>fetch</a> algorithm in the
   context of this <code>Document</code>, discarding any <a>tasks</a>
   <a>queued</a> for them, and discarding any further data received from
   the network for them. If this resulted in any instances of the <a>fetch</a> algorithm being canceled or any <a>queued</a> <a>tasks</a> or any network data getting
   discarded, then set the <code>Document</code>'s <i>salvageable</i> state to false.</li>

   <li>If the <code>Document</code> has an <a>active parser</a>, then <a>abort that parser</a> and set the <code>Document</code>'s <i>salvageable</i> state to false.</li>

  </ol>

  User agents may allow users to explicitly invoke the <a>abort a
  document</a> algorithm for a <code>Document</code>. If the user does so, then, if that
  <code>Document</code> is an <a>active document</a>, the user agent should <a>queue a
  task</a> to <a>fire a simple event</a> named <code>abort</code> at
  that <code>Document</code>'s <code>Window</code> object before invoking the <a>abort</a> algorithm.

  </div>

  <h3 id="offline-web-applications"><dfn>Offline Web applications</dfn></h3>

  <p class="critical">This feature is in the process of being removed from the Web platform. (This
  is a long process that takes many years.) Using any of the offline Web application features at
  this time is highly discouraged. Use service workers instead. [[!SW]]</p>

  <h4 id="introduction"><dfn>Introduction</dfn></h4>

  <em>This section is non-normative.</em>

  In order to enable users to continue interacting with Web applications and documents even when
  their network connection is unavailable &mdash; for instance, because they are traveling outside
  of their ISP's coverage area &mdash; authors can provide a manifest which lists the files that are
  needed for the Web application to work offline and which causes the user's browser to keep a copy
  of the files for use offline.

  To illustrate this, consider a simple clock applet consisting of an HTML page "<code>clock.html</code>", a CSS style sheet "<code>clock.css</code>", and a JavaScript
  script "<code>clock.js</code>".

  Before adding the manifest, these three files might look like this:

  <pre>EXAMPLE offline/clock/clock1.html</pre>
  <pre>EXAMPLE offline/clock/clock1.css</pre>
  <pre>EXAMPLE offline/clock/clock1.js</pre>

  If the user tries to open the "<code>clock.html</code>" page while offline, though,
  the user agent (unless it happens to have it still in the local cache) will fail with an
  error.

  The author can instead provide a manifest of the three files, say "<code>clock.appcache</code>":

  <pre>EXAMPLE offline/clock/clock2.appcache</pre>

  With a small change to the HTML file, the manifest (served as <code>text/cache-manifest</code>)
  is linked to the application:

  <pre>EXAMPLE offline/clock/clock2.html</pre>

  Now, if the user goes to the page, the browser will cache the files and make them available
  even when the user is offline.

  <p class="note">
Authors are encouraged to include the main page in the manifest also, but in
  practice the page that referenced the manifest is automatically cached even if it isn't explicitly
  mentioned.
</p>

  <p class="note">
With the exception of "no-store" directive, HTTP cache headers and restrictions on
  caching pages served over TLS (encrypted, using <code>https:</code>) are
  overridden by manifests. Thus, pages will not expire from an application cache before the user
  agent has updated it, and even applications served over TLS can be made to work offline.
</p>

  <a>View this example online</a>.

  <h5 id="supporting-offline-caching-for-legacy-applications"><dfn>Supporting offline caching for legacy applications</dfn></h5>

  <em>This section is non-normative.</em>

  The application cache feature works best if the application logic is separate from the
  application and user data, with the logic (markup, scripts, style sheets, images, etc) listed in
  the manifest and stored in the application cache, with a finite number of static HTML pages for
  the application, and with the application and user data stored in Web Storage or a client-side
  Indexed Database, updated dynamically using Web Sockets, <code>XMLHttpRequest</code>, server-sent
  events, or some other similar mechanism.

  This model results in a fast experience for the user: the application immediately loads, and
  fresh data is obtained as fast as the network will allow it (possibly while stale data shows).

  Legacy applications, however, tend to be designed so that the user data and the logic are mixed
  together in the HTML, with each operation resulting in a new HTML page from the server.

  <div class="example">

   For example, consider a news application. The typical architecture of such an application,
   when not using the application cache feature, is that the user fetches the main page, and the
   server returns a dynamically-generated page with the current headlines and the user interface
   logic mixed together.

   A news application designed for the application cache feature, however, would instead have the
   main page just consist of the logic, and would then have the main page fetch the data separately
   from the server, e.g. using <code>XMLHttpRequest</code>.

  </div>

  The mixed-content model does not work well with the application cache feature: since the
  content is cached, it would result in the user always seeing the stale data from the previous time
  the cache was updated.

  While there is no way to make the legacy model work as fast as the separated model, it
  <em>can</em> at least be retrofitted for offline use using the <a>prefer-online</a> <a>application cache mode</a>. To do so, list all the static
  resources used by the HTML page you want to have work offline in an <a>application cache manifest</a>, use the <code>manifest</code> attribute to select that manifest from the HTML file,
  and then add the following line at the bottom of the manifest:

  <pre>SETTINGS:
prefer-online
NETWORK:
*</pre>

  This causes the <a>application cache</a> to only be used for <a>master entries</a> when the user is offline, and causes the
  application cache to be used as an atomic HTTP cache (essentially pinning resources listed in the
  manifest), while allowing all resources not listed in the manifest to be accessed normally when
  the user is online.

  <h5 id="event-summary"><dfn>Event summary</dfn></h5>

  <em>This section is non-normative.</em>

  When the user visits a page that declares a manifest, the browser will try to update the cache.
  It does this by fetching a copy of the manifest and, if the manifest has changed since the user
  agent last saw it, redownloading all the resources it mentions and caching them anew.

  As this is going on, a number of events get fired on the <code>ApplicationCache</code> object
  to keep the script updated as to the state of the cache update, so that the user can be notified
  appropriately. The events are as follows:

  <table>
   <thead>
    <tr>
     <th> Event name
     <th> Interface
     <th> Fired when...
     <th> Next events
   <tbody>

    <tr>
     <td> <dfn><code>checking</code></dfn>
     <td> <code>Event</code>
     <td> The user agent is checking for an update, or attempting to download the manifest for the
          first time. <strong>This is always the first event in the sequence.</strong>
     <td> <code>noupdate</code>, <code>downloading</code>, <code>obsolete</code>, <code>error</code>

    <tr>
     <td> <dfn><code>noupdate</code></dfn>
     <td> <code>Event</code>
     <td> The manifest hadn't changed.
     <td> Last event in sequence.

    <tr>
     <td> <dfn><code>downloading</code></dfn>
     <td> <code>Event</code>
     <td> The user agent has found an update and is fetching it, or is downloading the resources
          listed by the manifest for the first time.
     <td> <code>progress</code>, <code>error</code>, <code>cached</code>, <code>updateready</code>

    <tr>
     <td> <dfn><code>progress</code></dfn>
     <td> <code>ProgressEvent</code>
     <td> The user agent is downloading resources listed by the manifest.
          The event object's <code>total</code> attribute returns the total number of files to be downloaded.
          The event object's <code>loaded</code> attribute returns the number of files processed so far.
     <td> <code>progress</code>, <code>error</code>, <code>cached</code>, <code>updateready</code>

    <tr>
     <td> <dfn><code>cached</code></dfn>
     <td> <code>Event</code>
     <td> The resources listed in the manifest have been downloaded, and the application is now cached.
     <td> Last event in sequence.

    <tr>
     <td> <dfn><code>updateready</code></dfn>
     <td> <code>Event</code>
     <td> The resources listed in the manifest have been newly redownloaded, and the script can use
          <code>swapCache()</code> to switch to the new cache.
     <td> Last event in sequence.

    <tr>
     <td> <dfn><code>obsolete</code></dfn>
     <td> <code>Event</code>
     <td> The manifest was found to have become a 404 or 410 page, so the application cache is being deleted.
     <td> Last event in sequence.

    <tr>
     <td rowspan=4> <dfn><code>error</code></dfn>
     <td rowspan=4> <code>Event</code>
     <td> The manifest was a 404 or 410 page, so the attempt to cache the application has been aborted.
     <td rowspan=3> Last event in sequence.

    <tr>
     <td> The manifest hadn't changed, but the page referencing the manifest failed to download properly.

    <tr>
     <td> A fatal error occurred while fetching the resources listed in the manifest.

    <tr>
     <td> The manifest changed while the update was being run.
     <td> The user agent will try fetching the files again momentarily.

  </table>

  These events are cancelable; their default action is for the user agent to show download
  progress information. If the page shows its own update UI, canceling the events will prevent the
  user agent from showing redundant progress information.

  <div class="impl">

  <h4 id="application-caches"><dfn>Application caches</dfn></h4>

  An <dfn>application cache</dfn> is a set of cached resources consisting of:

  <ul>

   <li>

    One or more resources (including their out-of-band metadata, such as HTTP headers, if any),
    identified by URLs, each falling into one (or more) of the following categories:

    <dl>

     <dt><dfn>Master entries</dfn>

     <dd><p class="note">
These are documents that were added to the cache because a <a>browsing
     context</a> was <a>navigated</a> to that document and the document
     indicated that this was its cache, using the <code>manifest</code>
     attribute.
</p>

     <dt><dfn>The manifest</dfn>

     <dd><p class="note">
This is the resource corresponding to the URL that was given in a master
     entry's <code>html</code> element's <code>manifest</code> attribute.
     The manifest is fetched and processed during the <a>application cache download
     process</a>. All the <a>master entries</a> have the
     <a>same origin</a> as the manifest.
</p>

     <dt><dfn>Explicit entries</dfn>

     <dd><p class="note">
These are the resources that were listed in the cache's <a>manifest</a> in an <a>explicit section</a>.
</p>

     <dt><dfn>Fallback entries</dfn>

     <dd><p class="note">
These are the resources that were listed in the cache's <a>manifest</a> in a <a>fallback section</a>.
</p>

    </dl>

    <a>Explicit entries</a> and <a>Fallback entries</a> can be marked as <dfn>foreign</dfn>, which means that they have a <code>manifest</code> attribute but that it doesn't point at this cache's
    <a>manifest</a>.

    <p class="note">
A URL in the list can be flagged with multiple different types, and thus an
    entry can end up being categorized as multiple entries. For example, an entry can be a manifest
    entry and an explicit entry at the same time, if the manifest is listed within the manifest.
</p>

   </li>

   <li>

    Zero or more <dfn>fallback namespaces</dfn>, each of
    which is mapped to a <a>fallback entry</a>.

    <p class="note">
These are URLs used as <a>prefix
    match patterns</a> for resources that are to be fetched from the network if possible, or to
    be replaced by the corresponding <a>fallback entry</a>
    if not. Each namespace URL has the <a>same origin</a> as <a>the manifest</a>.
</p>

   </li>

   <li>

    Zero or more URLs that form the <dfn>online
    safelist namespaces</dfn>.

    <p class="note">
These are used as prefix match patterns, and declare URLs for which the user
    agent will ignore the application cache, instead fetching them normally (i.e. from the network
    or local HTTP cache as appropriate).
</p>

   </li>

   <li>

    An <dfn>online safelist wildcard
    flag</dfn>, which is either <i>open</i> or <i>blocking</i>.

    <p class="note">
The <i>open</i> state indicates that any URL not listed as cached is to
    be implicitly treated as being in the <a>online
    safelist namespaces</a>; the <i>blocking</i> state indicates that URLs not listed
    explicitly in the manifest are to be treated as unavailable.
</p>

   </li>

   <li>

    A <dfn>cache mode flag</dfn>, which is either in the <dfn><i>fast</i></dfn> state or the <dfn><i>prefer-online</i></dfn> state.

   </li>

  </ul>

  Each <a>application cache</a> has a <dfn>completeness flag</dfn>, which is either <i>complete</i> or
  <i>incomplete</i>.

  <hr />

  An <dfn>application cache group</dfn> is a group of <a>application
  caches</a>, identified by the <a>absolute URL</a> of a resource <a>manifest</a> which is used to populate the caches in the
  group.

  An <a>application cache</a> is <dfn>newer</dfn> than
  another if it was created after the other (in other words, <a>application caches</a> in an <a>application cache group</a> have a chronological
  order).

  Only the newest <a>application cache</a> in an <a>application cache group</a> can
  have its <a>completeness flag</a> set to
  <i>incomplete</i>; the others are always all <i>complete</i>.

  Each <a>application cache group</a> has an <dfn>update
  status</dfn>, which is one of the following: <i>idle</i>, <i>checking</i>, <i>downloading</i>.

  A <dfn>relevant application cache</dfn> is an <a>application cache</a> that is the <a>newest</a> in its <a>group</a> to be <i>complete</i>.

  Each <a>application cache group</a> has a <dfn>list of pending master entries</dfn>. Each entry in this
  list consists of a resource and a corresponding <code>Document</code> object. It is used during
  the <a>application cache download process</a> to ensure that new master entries are cached
  even if the <a>application cache download process</a> was already running for their
  <a>application cache group</a> when they were loaded.

  An <a>application cache group</a> can be marked as <dfn>obsolete</dfn>, meaning that it must be ignored when looking at
  what <a>application cache groups</a> exist.

  <hr />

  A <dfn>cache host</dfn> is a <code>Document</code> or a <code>SharedWorkerGlobalScope</code>
  object. A <a>cache host</a> can be associated with an <a>application cache</a>.

  [[!WEBWORKERS]]

  A <code>Document</code> initially is not associated with an <a>application cache</a>, but
  can become associated with one early during the page load process, when steps <a>in the parser</a> and in the <a>navigation</a>
  sections cause <a>cache selection</a> to occur.

  A <code>SharedWorkerGlobalScope</code> can be associated with an <a>application cache</a>
  when it is created.

  [[!WEBWORKERS]]

  Each <a>cache host</a> has an associated <code>ApplicationCache</code> object.

  <hr />

  Multiple <a>application caches</a> in different <a>application cache groups</a> can contain the same resource,
  e.g. if the manifests all reference that resource. If the user agent is to <dfn>select an application cache</dfn> from a list of <a>relevant application caches</a> that contain a resource, the
  user agent must use the application cache that the user most likely wants to see the resource
  from, taking into account the following:

  <ul>

   <li>which application cache was most recently updated,

   <li>which application cache was being used to display the resource from which the user decided to
   look at the new resource, and

   <li>which application cache the user prefers.

  </ul>

  <hr />

  A URL <dfn>matches a fallback namespace</dfn> if
  there exists a <a>relevant application cache</a> whose <a>manifest</a>'s URL has the <a>same origin</a> as the
  URL in question, and that has a <a>fallback
  namespace</a> that is a <a>prefix match</a> for the URL being examined. If multiple
  fallback namespaces match the same URL, the longest one is the one that matches. A URL looking for
  a fallback namespace can match more than one application cache at a time, but only matches one
  namespace in each cache.

  <div class="example">

   If a manifest <code>http://example.com/app1/manifest</code> declares that <code>http://example.com/resources/images</code> is a fallback namespace, and the user
   navigates to <code>HTTP://EXAMPLE.COM:80/resources/images/cat.png</code>, then the user
   agent will decide that the application cache identified by <code>http://example.com/app1/manifest</code> contains a namespace with a match for that
   URL.

  </div>

  </div>

  <h4 id="the-cache-manifest-syntax"><dfn>The cache manifest syntax</dfn></h4>

  <h5 id="some-sample-manifests"><dfn>Some sample manifests</dfn></h5>

  <em>This section is non-normative.</em>

  <div class="example">

   This example manifest requires two images and a style sheet to be cached and safelists a CGI
   script.

   <pre>CACHE MANIFEST
# the above line is required

# this is a comment
# there can be as many of these anywhere in the file
# they are all ignored
  # comments can have spaces before them
  # but must be alone on the line

# blank lines are ignored too

# these are files that need to be cached they can either be listed
# first, or a "CACHE:" header could be put before them, as is done
# lower down.
images/sound-icon.png
images/background.png
# note that each file has to be put on its own line

# here is a file for the online safelist -- it isn't cached, and
# references to this file will bypass the cache, always hitting the
# network (or trying to, if the user is offline).
NETWORK:
comm.cgi

# here is another set of files to cache, this time just the CSS file.
CACHE:
style/default.css</pre>

   It could equally well be written as follows:

   <pre>CACHE MANIFEST
NETWORK:
comm.cgi
CACHE:
style/default.css
images/sound-icon.png
images/background.png</pre>

  </div>

  <div class="example">

   Offline application cache manifests can use absolute paths or even absolute URLs:

   <pre>CACHE MANIFEST

/main/home
/main/app.js
/settings/home
/settings/app.js
http://img.example.com/logo.png
http://img.example.com/check.png
http://img.example.com/cross.png</pre>

  </div>

  <div class="example">

   The following manifest defines a catch-all error page that is displayed for any page on the
   site while the user is offline. It also specifies that the <a>online safelist wildcard flag</a> is <i>open</i>, meaning that accesses to resources on other sites will not be blocked.
   (Resources on the same site are already not blocked because of the catch-all fallback
   namespace.)

   So long as all pages on the site reference this manifest, they will get cached locally as they
   are fetched, so that subsequent hits to the same page will load the page immediately from the
   cache. Until the manifest is changed, those pages will not be fetched from the server again. When
   the manifest changes, then all the files will be redownloaded.

   Subresources, such as style sheets, images, etc, would only be cached using the regular HTTP
   caching semantics, however.

   <pre>CACHE MANIFEST
FALLBACK:
/ /offline.html
NETWORK:
*</pre>

  </div>

  <h5 id="writing-cache-manifests"><dfn>Writing cache manifests</dfn></h5>

  Manifests must be served using the <code>text/cache-manifest</code> <a>MIME type</a>. All
  resources served using the <code>text/cache-manifest</code> <a>MIME type</a> must follow the
  syntax of application cache manifests, as described in this section.

  An application cache manifest is a text file, whose text is encoded using UTF-8. Data in
  application cache manifests is line-based. Newlines must be represented by U+000A LINE FEED (LF)
  characters, U+000D CARRIAGE RETURN (CR) characters, or U+000D CARRIAGE RETURN (CR) U+000A LINE
  FEED (LF) pairs. [[!ENCODING]]

  <p class="note">
This is a <a>willful violation</a> of RFC 2046, which requires all <code>text/*</code> types to only allow CRLF line breaks. This requirement, however, is
  outdated; the use of CR, LF, and CRLF line breaks is commonly supported and indeed sometimes CRLF
  is <em>not</em> supported by text editors. [[!RFC2046]]
</p>

  The first line of an application cache manifest must consist of the string "CACHE", a single
  U+0020 SPACE character, the string "MANIFEST", and either a U+0020 SPACE character, a U+0009
  CHARACTER TABULATION (tab) character, a U+000A LINE FEED (LF) character, or a U+000D CARRIAGE
  RETURN (CR) character. The first line may optionally be preceded by a U+FEFF BYTE ORDER MARK (BOM)
  character. If any other text is found on the first line, it is ignored.

  Subsequent lines, if any, must all be one of the following:

  <dl>
   <dt>A blank line
   <dd>
    Blank lines must consist of zero or more U+0020 SPACE and
    U+0009 CHARACTER TABULATION (tab) characters only.

   <dt>A comment
   <dd>
    Comment lines must consist of zero or more U+0020 SPACE and U+0009 CHARACTER TABULATION (tab)
    characters, followed by a single U+0023 NUMBER SIGN character (#), followed by zero or more
    characters other than U+000A LINE FEED (LF) and U+000D CARRIAGE RETURN (CR) characters.

    <p class="note">
Comments must be on a line on their own. If they were to be included on a line
    with a URL, the "#" would be mistaken for part of a fragment identifier.
</p>

   <dt>A section header
   <dd>

    Section headers change the current section. There are four possible section headers:

    <dl>

     <dt><code>CACHE:</code>
     <dd>Switches to the <dfn>explicit section</dfn>.

     <dt><code>FALLBACK:</code>
     <dd>Switches to the <dfn>fallback section</dfn>.

     <dt><code>NETWORK:</code>
     <dd>Switches to the <dfn>online safelist section</dfn>.

     <dt><code>SETTINGS:</code>
     <dd>Switches to the <dfn>settings section</dfn>.

    </dl>

    <p>Section header lines must consist of zero or more U+0020 SPACE and U+0009 CHARACTER
    TABULATION (tab) characters, followed by one of the names above (including the U+003A COLON
    character (:)) followed by zero or more U+0020 SPACE and U+0009 CHARACTER TABULATION (tab)
    characters.

    Ironically, by default, the current section is the <a>explicit section</a>.

   <dt>Data for the current section
   <dd>

    The format that data lines must take depends on the current section.

    When the current section is the <a>explicit
    section</a>, data lines must consist of zero or more U+0020 SPACE and U+0009 CHARACTER
    TABULATION (tab) characters, a <a>valid URL</a> identifying a resource other than the
    manifest itself, and then zero or more U+0020 SPACE and U+0009 CHARACTER TABULATION (tab)
    characters.

    When the current section is the <a>fallback
    section</a>, data lines must consist of zero or more U+0020 SPACE and U+0009 CHARACTER
    TABULATION (tab) characters, a <a>valid URL</a> identifying a resource other than the
    manifest itself, one or more U+0020 SPACE and U+0009 CHARACTER TABULATION (tab) characters,
    another <a>valid URL</a> identifying a resource other than the manifest itself, and then
    zero or more U+0020 SPACE and U+0009 CHARACTER TABULATION (tab) characters.

    When the current section is the <a>online
    safelist section</a>, data lines must consist of zero or more U+0020 SPACE and U+0009
    CHARACTER TABULATION (tab) characters, either a single U+002A ASTERISK character (*)  or a <a>valid URL</a> identifying a resource
    other than the manifest itself, and then zero or more U+0020 SPACE and U+0009 CHARACTER
    TABULATION (tab) characters.

    When the current section is the <a>settings
    section</a>, data lines must consist of zero or more U+0020 SPACE and U+0009 CHARACTER
    TABULATION (tab) characters, a <a>setting</a>,
    and then zero or more U+0020 SPACE and U+0009 CHARACTER TABULATION (tab) characters.

    Currently only one <dfn>setting</dfn> is
    defined:

    <dl>

     <dt>The cache mode setting</dt>

     <dd>This consists of the string "<code>prefer-online</code>". It sets the <a>cache mode</a> to <a>prefer-online</a>. (The <a>cache mode</a> defaults to <a>fast</a>.)</dd>

    </dl>

    Within a <a>settings section</a>, each <a>setting</a> must occur no more than once.

  </dl>

  Manifests may contain sections more than once. Sections may be empty.

  URLs that are to be fallback pages associated with <a>fallback namespaces</a>, and those namespaces themselves,
  must be given in <a>fallback sections</a>, with
  the namespace being the first URL of the data line, and the corresponding fallback page being the
  second URL. All the other pages to be cached must be listed in <a>explicit sections</a>.

  <a>Fallback namespaces</a> and <a>fallback entries</a> must have the <a>same origin</a>
  as the manifest itself. <a>Fallback namespaces</a>
  must also be <a>in the same path</a> as the manifest's URL.

  A <a>fallback namespace</a> must not be listed more
  than once.

  Namespaces that the user agent is to put into the <a>online safelist</a> must all be specified in <a>online safelist sections</a>. (This is needed for
  any URL that the page is intending to use to communicate back to the server.) To specify that all
  URLs are automatically safelisted in this way, a U+002A ASTERISK character (*) may be specified
  as one of the URLs.

  Authors should not include namespaces in the <a>online safelist</a> for which another namespace in
  the <a>online safelist</a> is a <a>prefix
  match</a>.

  <a>Relative URLs</a> must be given relative to the manifest's own
  URL. All URLs in the manifest must have the same <a>scheme</a> as
  the manifest itself (either explicitly or implicitly, through the use of <a>relative URLs</a>). [[!URL]]

  URLs in manifests must not have fragment identifiers (i.e. the U+0023 NUMBER SIGN character
  isn't allowed in URLs in manifests).

  <a>Fallback namespaces</a> and namespaces in the
  <a>online safelist</a> are matched by <a>prefix
  match</a>.

  <div class="impl">

  <h5 id="parsing-cache-manifests"><dfn>Parsing cache manifests</dfn></h5>

  When a user agent is to <dfn>parse a manifest</dfn>, it means that the user agent must run the
  following steps:

  <ol>

   <li>

    <a>UTF-8 decode</a> the byte stream corresponding with the manifest to be parsed.

    <p class="note">
The <a>UTF-8 decode</a> algorithm strips a leading BOM, if any.
</p>

   </li>

   <li>Let <var>base URL</var> be the <a>absolute URL</a> representing the
   manifest.</li>

   <li>Apply the <a>URL parser</a> to <var>base URL</var>, and let <var>manifest path</var>
   be the <a>path</a> component thus obtained.</li>

   <li>Remove all the characters in <var>manifest path</var> after the last U+002F SOLIDUS
   character (/), if any. (The first character and the last character in <var>manifest path</var>
   after this step will both be slashes, the URL path separator character.)</li>

   <li>Apply the <a>URL parser</a> steps to the <var>base URL</var>, so that the
   components from its <a>parsed URL</a> can be used by the subseqent steps of this
   algorithm.</li>

   <li>Let <var>explicit URLs</var> be an initially empty list of <a>absolute URLs</a> for <a>explicit
   entries</a>.</li>

   <li>Let <var>fallback URLs</var> be an initially empty mapping of <a>fallback namespaces</a> to <a>absolute URLs</a> for <a>fallback
   entries</a>.</li>

   <li>Let <var>online safelist namespaces</var> be an initially empty list of <a>absolute URLs</a> for an <a>online safelist</a>.</li>

   <li>Let <var>online safelist wildcard flag</var> be <i>blocking</i>. </li>

   <li>Let <var>cache mode flag</var> be <i>fast</i>. </li>

   <li>Let <var>input</var> be the decoded text of the manifest's byte stream.</li>

   <li>Let <var>position</var> be a pointer into <var>input</var>, initially
   pointing at the first character.</li>

   <li>If the characters starting from <var>position</var> are "CACHE", followed by a
   U+0020 SPACE character, followed by "MANIFEST", then advance <var>position</var> to the
   next character after those. Otherwise, this isn't a cache manifest; abort this algorithm with a
   failure while checking for the magic signature.</li>

   <li>If the character at <var>position</var> is neither a U+0020 SPACE character, a
   U+0009 CHARACTER TABULATION (tab) character, U+000A LINE FEED (LF) character, nor a U+000D
   CARRIAGE RETURN (CR) character, then this isn't a cache manifest; abort this algorithm with a
   failure while checking for the magic signature.</li>

   <li>This is a cache manifest. The algorithm cannot fail beyond
   this point (though bogus lines can get ignored).</li>

   <li><a>Collect a sequence of characters</a> that are <em>not</em> U+000A LINE FEED (LF)
   or U+000D CARRIAGE RETURN (CR) characters, and ignore those characters. (Extra text on the first
   line, after the signature, is ignored.)</li>

   <li>Let <var>mode</var> be "explicit".</li>

   <li><i>Start of line</i>: If <var>position</var> is past the end of <var>input</var>, then jump to the last step. Otherwise, <a>collect a sequence of
   characters</a> that are U+000A LINE FEED (LF), U+000D CARRIAGE RETURN (CR), U+0020 SPACE, or
   U+0009 CHARACTER TABULATION (tab) characters.</li>

   <li>Now, <a>collect a sequence of characters</a> that are <em>not</em> U+000A LINE FEED
   (LF) or U+000D CARRIAGE RETURN (CR) characters, and let the result be <var>line</var>.</li>

   <li>Drop any trailing U+0020 SPACE and U+0009 CHARACTER TABULATION (tab) characters at the end
   of <var>line</var>.</li>

   <li>If <var>line</var> is the empty string, then jump back to the step labeled <i>start
   of line</i>.</li>

   <li>If the first character in <var>line</var> is a U+0023 NUMBER SIGN character (#),
   then jump back to the step labeled <i>start of line</i>.</li>

   <li>If <var>line</var> equals "CACHE:" (the word "CACHE" followed by a U+003A COLON
   character (:)), then set <var>mode</var> to "explicit" and jump back to the step labeled
   <i>start of line</i>.</li>

   <li>If <var>line</var> equals "FALLBACK:" (the word "FALLBACK" followed by a U+003A
   COLON character (:)), then set <var>mode</var> to "fallback" and jump back to the step
   labeled <i>start of line</i>.</li>

   <li>If <var>line</var> equals "NETWORK:" (the word "NETWORK" followed by a U+003A
   COLON character (:)), then set <var>mode</var> to "online safelist" and jump back to
   the step labeled <i>start of line</i>.</li>

   <li>If <var>line</var> equals "SETTINGS:" (the word "SETTINGS" followed by a U+003A
   COLON character (:)), then set <var>mode</var> to "settings" and jump back to the step
   labeled <i>start of line</i>.</li>

   <li>If <var>line</var> ends with a U+003A COLON character (:), then set <var>mode</var> to "unknown" and jump back to the step labeled <i>start of line</i>.</li>

   <li>This is either a data line or it is syntactically incorrect.</li>

   <li>Let <var>position</var> be a pointer into <var>line</var>, initially
   pointing at the start of the string.</li>

   <li>Let <var>tokens</var> be a list of strings, initially empty.</li>

   <li>

    While <var>position</var> doesn't point past the end of <var>line</var>:

    <ol>

     <li>Let <var>current token</var> be an empty string.</li>

     <li>While <var>position</var> doesn't point past the end of <var>line</var> and the character at <var>position</var> is neither a U+0020 SPACE
     nor a U+0009 CHARACTER TABULATION (tab) character, add the character at <var>position</var> to <var>current token</var> and advance <var>position</var> to the next character in <var>input</var>.</li>

     <li>Add <var>current token</var> to the <var>tokens</var> list.</li>

     <li>While <var>position</var> doesn't point past the end of <var>line</var> and the character at <var>position</var> is either a U+0020 SPACE
     or a U+0009 CHARACTER TABULATION (tab) character, advance <var>position</var> to the
     next character in <var>input</var>.</li>

    </ol>

   </li>

   <li>

    Process <var>tokens</var> as follows:

    <dl class="switch">

     <dt>If <var>mode</var> is "explicit"</dt>

     <dd>

      <a>Resolve</a> the first item in <var>tokens</var>,
      relative to <var>base URL</var>, with the URL character encoding set to UTF-8;
      ignore the rest.

      If this fails, then jump back to the step labeled <i>start of line</i>.

      If the resulting <a>parsed URL</a> has a different <a>scheme</a> component than <var>base URL</var> (the
      manifest's URL), then jump back to the step labeled <i>start of line</i>.

      Let <var>new URL</var> be the result of applying the <a>URL serializer</a> algorithm to the resulting <a>parsed
      URL</a>, with the <i>exclude fragment flag</i> set.

      Add <var>new URL</var> to the <var>explicit URLs</var>.

     </dd>

     <dt>If <var>mode</var> is "fallback"</dt>

     <dd>

      Let <var>part one</var> be the first token in <var>tokens</var>, and let
      <var>part two</var> be the second token in <var>tokens</var>.

      <a>Resolve</a> <var>part one</var> and <var>part two</var>, relative to <var>base URL</var>, with the URL character
      encoding set to UTF-8.

      If either fails, then jump back to the step labeled <i>start of line</i>.

      If the <a>absolute URL</a> corresponding to either <var>part one</var> or
      <var>part two</var> does not have the <a>same origin</a> as the manifest's URL,
      then jump back to the step labeled <i>start of line</i>.

      Let <var>part one path</var> be the <a>path</a> component
      of the <a>resulting parsed URL</a> for <var>part one</var>.

      If <var>manifest path</var> is not a <a>prefix match</a> for <var>part one
      path</var>, then jump back to the step labeled <i>start of line</i>.

      Let <var>part one</var> be the result of applying the <a>URL serializer</a> algorithm to the first resulting
      <a>parsed URL</a>, with the <i>exclude fragment flag</i> set.

      Let <var>part two</var> be the result of applying the <a>URL serializer</a> algorithm to the second resulting
      <a>parsed URL</a>, with the <i>exclude fragment flag</i> set.

      If <var>part one</var> is already in the <var>fallback URLs</var> mapping
      as a <a>fallback namespace</a>, then jump back to
      the step labeled <i>start of line</i>.

      Otherwise, add <var>part one</var> to the <var>fallback URLs</var>
      mapping as a <a>fallback namespace</a>, mapped to
      <var>part two</var> as the <a>fallback
      entry</a>.

     </dd>

     <dt>If <var>mode</var> is "online safelist"</dt>

     <dd>

      If the first item in <var>tokens</var> is a U+002A ASTERISK character (*), then
      set <var>online safelist wildcard flag</var> to <i>open</i> and jump back
      to the step labeled <i>start of line</i>.

      Otherwise, <a>resolve</a> the first item in <var>tokens</var>, relative to <var>base URL</var>, with the URL character
      encoding set to UTF-8; ignore the rest.

      If this fails, then jump back to the step labeled <i>start of line</i>.

      If the resulting <a>parsed URL</a> has a different <a>scheme</a> component than <var>base URL</var> (the
      manifest's URL), then jump back to the step labeled <i>start of line</i>.

      Let <var>new URL</var> be the result of applying the <a>URL serializer</a> algorithm to the resulting <a>parsed
      URL</a>, with the <i>exclude fragment flag</i> set.

      Add <var>new URL</var> to the <var>online safelist namespaces</var>.

     </dd>

     <dt>If <var>mode</var> is "settings"</dt>

     <dd>

      If <var>tokens</var> contains a single token, and that token is a
      <a>case-sensitive</a> match for the string "<code>prefer-online</code>", then
      set <var>cache mode flag</var> to <i>prefer-online</i> and jump back to the
      step labeled <i>start of line</i>.

      Otherwise, the line is an unsupported setting: do nothing; the line is ignored.

     </dd>

     <dt>If <var>mode</var> is "unknown"</dt>

     <dd>

      Do nothing. The line is ignored.

     </dd>

    </dl>

   </li>

   <li>Jump back to the step labeled <i>start of line</i>. (That step jumps to the next, and last,
   step when the end of the file is reached.)</li>

   <li>Return the <var>explicit URLs</var> list, the <var>fallback URLs</var>
   mapping, the <var>online safelist namespaces</var>, the <var>online safelist
   wildcard flag</var>, and the <var>cache mode flag</var>.</li>

  </ol>

  <div class="note">

   The resource that declares the manifest (with the <code>manifest</code> attribute) will always get taken from the cache,
   whether it is listed in the cache or not, even if it is listed in an <a>online safelist namespace</a>.

   If a resource is listed in the <a>explicit
   section</a> or as a <a>fallback entry</a> in the <a>fallback section</a>, the resource will always be
   taken from the cache, regardless of any other matching entries in the <a>fallback namespaces</a> or <a>online safelist namespaces</a>.

   When a <a>fallback namespace</a> and an <a>online safelist namespace</a> overlap, the <a>online safelist namespace</a> has priority.

   The <a>online safelist wildcard
   flag</a> is applied last, only for URLs that match neither the <a>online safelist namespace</a> nor the <a>fallback namespace</a> and that are not listed in the
   <a>explicit section</a>.

  </div>

  <h4 id="downloading-or-updating-an-application-cache"><dfn>Downloading or updating an application cache</dfn></h4>

  When the user agent is required (by other parts of this specification) to start the
  <dfn>application cache download process</dfn> for an <a>absolute URL</a> purported to
  identify a <a>manifest</a>, or for an <a>application
  cache group</a>, potentially given a particular <a>cache host</a>, and potentially given
  a <a>master</a> resource, the user agent must run the steps
  below. These steps are always run <a>in parallel</a> with the <a>event loop</a>
  <a>tasks</a>.

  Some of these steps have requirements that only apply if the user agent <dfn>shows caching
  progress</dfn>. Support for this is optional. Caching progress UI could consist of a progress bar
  or message panel in the user agent's interface, or an overlay, or something else. Certain events
  fired during the <a>application cache download process</a> allow the script to override the
  display of such an interface. (Such events are delayed until after the <code>load</code> event has fired.)

  The goal of this is to allow Web applications to provide more
  seamless update mechanisms, hiding from the user the mechanics of the application cache mechanism.
  User agents may display user interfaces independent of this, but are encouraged to not show
  prominent update progress notifications for applications that cancel the relevant events.

  The <a>application cache download process</a> steps are as follows:

  <ol>

   <li><p>Optionally, wait until the permission to start the <a>application cache download
   process</a> has been obtained from the user and until the user agent is confident that the
   network is available. This could include doing nothing until the user explicitly opts-in to
   caching the site, or could involve prompting the user for permission. The algorithm might never
   get past this point. (This step is particularly intended to be used by user agents running on
   severely space-constrained devices or in highly privacy-sensitive environments).</li>

   <li>

    Atomically, so as to avoid race conditions, perform the following substeps:

    <ol>

     <li>

      Pick the appropriate substeps:

      <dl class="switch">

       <dt>If these steps were invoked with an <a>absolute URL</a> purported to identify a
       <a>manifest</a></dt>

       <dd>

        Let <var>manifest URL</var> be that <a>absolute URL</a>.

        If there is no <a>application cache group</a> identified by <var>manifest
        URL</var>, then create a new <a>application cache group</a> identified by <var>manifest URL</var>. Initially, it has no <a>application caches</a>. One will be created later in this algorithm.

       </dd>

       <dt>If these steps were invoked with an <a>application cache group</a></dt>

       <dd>

        Let <var>manifest URL</var> be the <a>absolute URL</a> of the <a>manifest</a> used to identify the <a>application
        cache group</a> to be updated.

        If that <a>application cache group</a> is <a>obsolete</a>, then abort this instance of the
        <a>application cache download process</a>. This can happen if another instance of this
        algorithm found the manifest to be 404 or 410 while this algorithm was waiting in the first
        step above.

       </dd>

      </dl>

     </li>

     <li>Let <var>cache group</var> be the <a>application cache group</a>
     identified by <var>manifest URL</var>.</li>

     <li>If these steps were invoked with a <a>master</a>
     resource, then add the resource, along with the resource's <code>Document</code>, to <var>cache group</var>'s <a>list of pending
     master entries</a>.</li>

     <li>If these steps were invoked with a <a>cache host</a>, and the <a>status</a> of <var>cache group</var> is
     <i>checking</i> or <i>downloading</i>, then <a>queue a post-load task</a> to <a>fire a
     simple event</a> named <code>checking</code> that is
     cancelable at the <code>ApplicationCache</code> singleton of that <a>cache host</a>. The
     default action of this event must be, if the user agent <a>shows caching progress</a>,
     the display of some sort of user interface indicating to the user that the user agent is
     checking to see if it can download the application.</li>

     <li>If these steps were invoked with a <a>cache host</a>, and the <a>status</a> of <var>cache group</var> is
     <i>downloading</i>, then also <a>queue a post-load task</a> to <a>fire a simple
     event</a> named <code>downloading</code> that is
     cancelable at the <code>ApplicationCache</code> singleton of that <a>cache host</a>. The
     default action of this event must be, if the user agent <a>shows caching progress</a>,
     the display of some sort of user interface indicating to the user the application is being
     downloaded.</li>

     <li>If the <a>status</a> of the <var>cache
     group</var> is either <i>checking</i> or <i>downloading</i>, then abort this instance of the
     <a>application cache download process</a>, as an update is already in progress.</li>

     <li>Set the <a>status</a> of <var>cache
     group</var> to <i>checking</i>.

     <li>For each <a>cache host</a> associated with an <a>application cache</a> in
     <var>cache group</var>, <a>queue a post-load task</a> to <a>fire a simple
     event</a> that is cancelable named <code>checking</code> at
     the <code>ApplicationCache</code> singleton of the <a>cache host</a>. The default action
     of these events must be, if the user agent <a>shows caching progress</a>, the display of
     some sort of user interface indicating to the user that the user agent is checking for the
     availability of updates.</li>

    </ol>

    <p class="note">
The remainder of the steps run <a>in parallel</a>.
</p>

    If <var>cache group</var> already has an <a>application cache</a> in it, then
    this is an <dfn>upgrade attempt</dfn>. Otherwise, this is a
    <dfn>cache attempt</dfn>.

   </li>

   <li>If this is a <a>cache attempt</a>, then this
   algorithm was invoked with a <a>cache host</a>; <a>queue a post-load task</a> to
   <a>fire a simple event</a> named <code>checking</code> that
   is cancelable at the <code>ApplicationCache</code> singleton of that <a>cache host</a>. The
   default action of this event must be, if the user agent <a>shows caching progress</a>, the
   display of some sort of user interface indicating to the user that the user agent is checking for
   the availability of updates.</li>

   <li>Let <var>request</var> be a new <a>request</a> whose
   <a>url</a> is <var>manifest URL</var>, <a>client</a> is null, <a>destination</a> is "<code>subresource</code>",
   <a>omit-<code>Origin</code>-header flag</a> is set, <a>referrer</a> is "<code>no-referrer</code>",
   <a>synchronous flag</a> is set, <a>credentials
   mode</a> is "<code>include</code>", and whose <a>use-URL-credentials
   flag</a> is set.</li>

   <li>

    <i>Fetching the manifest</i>: Let <var>manifest</var> be the result of <a>fetching</a> <var>request</var>. HTTP caching semantics should be
    honored for this request.

    Parse <var>manifest</var>'s <a>body</a> according to the
    <a>rules for parsing manifests</a>, obtaining a list of
    <a>explicit entries</a>, <a>fallback entries</a> and the <a>fallback namespaces</a> that map to them, entries for
    the <a>online safelist</a>, and values for the
    <a>online safelist wildcard flag</a>
    and the <a>cache mode flag</a>.

    <p class="note">
The <a>MIME type</a> of the resource is ignored &mdash; it is assumed to
    be <code>text/cache-manifest</code>. In the future, if new manifest formats are supported, the
    different types will probably be distinguished on the basis of the file signatures (for the
    current format, that is the "<code>CACHE&nbsp;MANIFEST</code>" string at the top of the
    file).
</p>

   </li>

   <li>

    If <i>fetching the manifest</i> fails due to a 404 or 410 response status, then run these
    substeps:

    <ol>

     <li>Mark <var>cache group</var> as <a>obsolete</a>. This <var>cache group</var> no
     longer exists for any purpose other than the processing of <code>Document</code> objects
     already associated with an <a>application cache</a> in the <var>cache
     group</var>.</li>

     <li>Let <var>task list</var> be an empty list of <a>tasks</a>.

     <li>For each <a>cache host</a> associated with an <a>application cache</a> in
     <var>cache group</var>, create a <a>task</a> to <a>fire
     a simple event</a> named <code>obsolete</code> that is
     cancelable at the <code>ApplicationCache</code> singleton of the <a>cache host</a>, and
     append it to <var>task list</var>. The default action of these events must be, if the
     user agent <a>shows caching progress</a>, the display of some sort of user interface
     indicating to the user that the application is no longer available for offline use.</li>

     <li>For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, create a <a>task</a> to <a>fire a simple event</a> that is cancelable named
     <code>error</code> (not <code>obsolete</code>!) at the <code>ApplicationCache</code>
     singleton of the <code>Document</code> for this entry, if there still is one, and append it to
     <var>task list</var>. The default action of this event must be, if the user agent
     <a>shows caching progress</a>, the display of some sort of user interface indicating to
     the user that the user agent failed to save the application for offline use.</li>

     <li>If <var>cache group</var> has an <a>application cache</a> whose <a>completeness flag</a> is <i>incomplete</i>, then
     discard that <a>application cache</a>.

     <li>If appropriate, remove any user interface indicating that an update for this cache is in
     progress.</li>

     <li>Let the <a>status</a> of <var>cache
     group</var> be <i>idle</i>.</li>

     <li>For each <a>task</a> in <var>task list</var>, <a>queue that task as a post-load task</a>.</li>

     <li>Abort the <a>application cache download process</a>.</li>

    </ol>

   </li>

   <li>

    Otherwise, if <i>fetching the manifest</i> fails in some other way (e.g. the server returns
    another 4xx or 5xx response, or there is a DNS error, or the connection times out, or the user
    cancels the download, or the parser for manifests fails when checking the magic signature), or
    if the server returned a redirect, then run the <a>cache failure steps</a>. <a>\[HTTP]</a>

   </li>

   <li>

    If this is an <a>upgrade attempt</a> and the newly
    downloaded <var>manifest</var> is byte-for-byte identical to the manifest found in the
    <a>newest</a> <a>application cache</a> in <var>cache
    group</var>, or the response status is <code>304</code>, then run these substeps:

    <ol>

     <li>Let <var>cache</var> be the <a>newest</a>
     <a>application cache</a> in <var>cache group</var>.</li>

     <li>Let <var>task list</var> be an empty list of <a>tasks</a>.

     <li>

      For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, wait for the
      resource for this entry to have either completely downloaded or failed.

      If the download failed (e.g. the server returns a 4xx or 5xx response, or there is a DNS
      error, the connection times out, or the user cancels the download), or if the resource is
      labeled with the "no-store" cache directive, then create a <a>task</a> to <a>fire a simple event</a> that is cancelable named
      <code>error</code> at the <code>ApplicationCache</code>
      singleton of the <code>Document</code> for this entry, if there still is one, and append it to
      <var>task list</var>. The default action of this event must be, if the user agent <a>shows
      caching progress</a>, the display of some sort of user interface indicating to the user
      that the user agent failed to save the application for offline use.

      Otherwise, associate the <code>Document</code> for this entry with <var>cache</var>; store the resource for this entry in <var>cache</var>, if it
      isn't already there, and categorize its entry as a <a>master entry</a>. If applying the <a>URL parser</a>
      algorithm to the resource's <a>URL</a> results in a <a>parsed URL</a> that has a
      non-null <a>fragment</a> component, the <a>URL</a>
      used for the entry in <var>cache</var> must instead be the <a>absolute URL</a>
      obtained from applying the <a>URL serializer</a>
      algorithm to the <a>parsed URL</a> with the <i>exclude fragment flag</i> set
      (application caches never include fragment identifiers).

     </li>

     <li>For each <a>cache host</a> associated with an <a>application cache</a> in
     <var>cache group</var>, create a <a>task</a> to <a>fire
     a simple event</a> that is cancelable named <code>noupdate</code> at the <code>ApplicationCache</code> singleton
     of the <a>cache host</a>, and append it to <var>task list</var>. The default
     action of these events must be, if the user agent <a>shows caching progress</a>, the
     display of some sort of user interface indicating to the user that the application is up to
     date.</li>

     <li>Empty <var>cache group</var>'s <a>list of pending master entries</a>.</li>

     <li>If appropriate, remove any user interface indicating that an update for this cache is in
     progress.</li>

     <li>Let the <a>status</a> of <var>cache
     group</var> be <i>idle</i>.</li>

     <li>For each <a>task</a> in <var>task list</var>, <a>queue that task as a post-load task</a>.</li>

     <li>Abort the <a>application cache download process</a>.</li>

    </ol>

   </li>

   <li>Let <var>new cache</var> be a newly created <a>application cache</a> in
   <var>cache group</var>. Set its <a>completeness
   flag</a> to <i>incomplete</i>.</li>

   <li>For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, associate the
   <code>Document</code> for this entry with <var>new cache</var>.</li>

   <li>Set the <a>status</a> of <var>cache
   group</var> to <i>downloading</i>.</li>

   <li>For each <a>cache host</a> associated with an <a>application cache</a> in <var>cache group</var>, <a>queue a post-load task</a> to <a>fire a simple
   event</a> that is cancelable named <code>downloading</code>
   at the <code>ApplicationCache</code> singleton of the <a>cache host</a>. The default action
   of these events must be, if the user agent <a>shows caching progress</a>, the display of
   some sort of user interface indicating to the user that a new version is being
   downloaded.</li>

   <li>Let <var>file list</var> be an empty list of URLs with flags.</li>

   <li>Add all the URLs in the list of <a>explicit
   entries</a> obtained by parsing <var>manifest</var> to <var>file list</var>,
   each flagged with "explicit entry".</li>

   <li>Add all the URLs in the list of <a>fallback
   entries</a> obtained by parsing <var>manifest</var> to <var>file list</var>,
   each flagged with "fallback entry".</li>

   <li>If this is an <a>upgrade attempt</a>, then add all
   the URLs of <a>master entries</a> in the <a>newest</a> <a>application cache</a> in <var>cache group</var> whose <a>completeness
   flag</a> is <i>complete</i> to <var>file list</var>, each flagged with "master
   entry".</li>

   <li>If any URL is in <var>file list</var> more than once, then merge the entries into
   one entry for that URL, that entry having all the flags that the original entries had.</li>

   <li>

    For each URL in <var>file list</var>, run the following steps. These steps may be
    run in parallel for two or more of the URLs at a time. If, while running these steps, the
    <code>ApplicationCache</code> object's <code>abort()</code> method
    <a>sends a signal</a> to this instance of the <a>application
    cache download process</a> algorithm, then run the <a>cache failure steps</a>
    instead.

    <ol>

     <li>

      If the resource URL being processed was flagged as neither an "explicit entry" nor or a
      "fallback entry", then the user agent may skip this URL.

      <p class="note">
This is intended to allow user agents to expire resources not listed in the
      manifest from the cache. Generally, implementors are urged to use an approach that expires
      lesser-used resources first.
</p>

     </li>

     <li>For each <a>cache host</a> associated with an <a>application cache</a> in
     <var>cache group</var>, <a>queue a progress post-load task</a> to <a>fire</a> a <a>trusted</a>
     event with the name <code>progress</code>, which does not
     bubble, which is cancelable, and which uses the <code>ProgressEvent</code> interface, at the
     <code>ApplicationCache</code> singleton of the <a>cache host</a>. The <code>lengthComputable</code> attribute must be set to
     true, the <code>total</code> attribute must be set to the
     number of files in <var>file list</var>, and the <code>loaded</code> attribute must be set to the number of files in
     <var>file list</var> that have been either downloaded or skipped so far. The default
     action of these events must be, if the user agent <a>shows caching progress</a>, the
     display of some sort of user interface indicating to the user that a file is being downloaded
     in preparation for updating the application. [[!XHR]]</li>

     <li>Let <var>request</var> be a new <a>request</a> whose
     <a>url</a> is URL, <a>client</a> is null, <a>destination</a> is "<code>subresource</code>", <a>origin</a> is
     <var>manifest URL</var>'s <a>origin</a>, <a>referrer</a> is "<code>no-referrer</code>",
     <a>synchronous flag</a> is set, <a>credentials mode</a> is "<code>include</code>", <a>use-URL-credentials flag</a> is set, and <a>redirect mode</a> is "<code>manual</code>".</li>

     <li><a>Fetch</a> <var>request</var>. If this is an
     <a>upgrade attempt</a>, then use the <a>newest</a> <a>application cache</a> in <var>cache
     group</var> as an HTTP cache, and honor HTTP caching semantics (such as expiration, ETags, and
     so forth) with respect to that cache. User agents may also have other caches in place that are
     also honored.</li>

     <li>

      If the previous step fails (e.g. the server returns a 4xx or 5xx response, or there is a
      DNS error, or the connection times out, or the user cancels the download), or if the server
      returned a redirect, or if the resource is labeled with the "no-store" cache directive, then
      run the first appropriate step from the following list: [[!HTTP]]

      <dl class="switch">

       <dt>If the URL being processed was flagged as an "explicit entry" or a "fallback entry"</dt>

       <dd>

        If these steps are being run in parallel for any other URLs in <var>file
        list</var>, then abort these steps for those other URLs. Run the <a>cache failure
        steps</a>.

        <p class="note">
Redirects are fatal because they are either indicative of a network problem
        (e.g. a captive portal); or would allow resources to be added to the cache under URLs that
        differ from any URL that the networking model will allow access to, leaving orphan entries;
        or would allow resources to be stored under URLs different than their true URLs. All of
        these situations are bad.
</p>

       </dd>

       <dt>If the error was a 404 or 410 HTTP response</dt>

       <dt>If the resource was labeled with the "no-store" cache directive</dt>

       <dd>

        Skip this resource. It is dropped from the cache.

       </dd>

       <dt>Otherwise</dt>

       <dd>

        Copy the resource and its metadata from the <a>newest</a> <a>application cache</a> in <var>cache group</var> whose <a>completeness
        flag</a> is <i>complete</i>, and act as if that was the fetched resource, ignoring the
        resource obtained from the network.

       </dd>

      </dl>

      User agents may warn the user of these errors as an aid to development.

      <p class="note">
These rules make errors for resources listed in the manifest fatal, while
      making it possible for other resources to be removed from caches when they are removed from
      the server, without errors, and making non-manifest resources survive server-side errors.
</p>

      <p class="note">
Except for the "no-store" directive, HTTP caching rules that would cause a
      file to be expired or otherwise not cached are ignored for the purposes of the
      <a>application cache download process</a>.
</p>

     </li>

     <li>

      Otherwise, the fetching succeeded. Store the resource in the <var>new
      cache</var>.

      If the user agent is not able to store the resource (e.g. because of quota restrictions),
      the user agent may prompt the user or try to resolve the problem in some other manner (e.g.
      automatically pruning content in other caches). If the problem cannot be resolved, the user
      agent must run the <a>cache failure steps</a>.

     </li>

     <li>If the URL being processed was flagged as an "explicit entry" in <var>file
     list</var>, then categorize the entry as an <a>explicit
     entry</a>.</li>

     <li>If the URL being processed was flagged as a "fallback entry" in <var>file
     list</var>, then categorize the entry as a <a>fallback
     entry</a>.</li>

     <li>If the URL being processed was flagged as an "master entry" in <var>file
     list</var>, then categorize the entry as a <a>master
     entry</a>.</li>

     <li>As an optimization, if the resource is an HTML or XML file whose root element is an
     <code>html</code> element with a <code>manifest</code> attribute
     whose value doesn't match the manifest URL of the application cache being processed, then the
     user agent should mark the entry as being <a>foreign</a>.

    </ol>

   </li>

   <li>For each <a>cache host</a> associated with an <a>application cache</a> in <var>cache group</var>, <a>queue a progress post-load task</a> to <a>fire</a> a <a>trusted</a>
   event with the name <code>progress</code>, which does not bubble,
   which is cancelable, and which uses the <code>ProgressEvent</code> interface, at the
   <code>ApplicationCache</code> singleton of the <a>cache host</a>. The <code>lengthComputable</code> attribute must be set to
   true, the <code>total</code> and the <code>loaded</code> attributes must be set to the number of files in
   <var>file list</var>. The default action of these events must be, if the user agent
   <a>shows caching progress</a>, the display of some sort of user interface indicating to the
   user that all the files have been downloaded. [[!XHR]]</li>

   <li>Store the list of <a>fallback namespaces</a>,
   and the URLs of the <a>fallback entries</a> that they map
   to, in <var>new cache</var>.</li>

   <li>Store the URLs that form the new <a>online
   safelist</a> in <var>new cache</var>.</li>

   <li>Store the value of the new <a>online
   safelist wildcard flag</a> in <var>new cache</var>.</li>

   <li>Store the value of the new <a>cache mode flag</a> in
   <var>new cache</var>.</li>

   <li>

    For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, wait for the
    resource for this entry to have either completely downloaded or failed.

    If the download failed (e.g. the server returns a 4xx or 5xx response, or there is a DNS
    error, the connection times out, or the user cancels the download), or if the resource is
    labeled with the "no-store" cache directive, then run these substeps:

    <ol>

     <li>Unassociate the <code>Document</code> for this entry from <var>new
     cache</var>.</li>

     <li><a>Queue a post-load task</a> to <a>fire a simple event</a> that is
     cancelable named <code>error</code> at the
     <code>ApplicationCache</code> singleton of the <code>Document</code> for this entry, if there
     still is one. The default action of this event must be, if the user agent <a>shows caching
     progress</a>, the display of some sort of user interface indicating to the user that the
     user agent failed to save the application for offline use.

     <li>

      If this is a <a>cache attempt</a> and this entry is
      the last entry in <var>cache group</var>'s <a>list of pending master entries</a>, then run these
      further substeps:

      <ol>

       <li>Discard <var>cache group</var> and its only <a>application cache</a>,
       <var>new cache</var>.

       <li>If appropriate, remove any user interface indicating that an update for this cache is
       in progress.</li>

       <li>Abort the <a>application cache download process</a>.</li>

      </ol>

     </li>

     <li>Otherwise, remove this entry from <var>cache group</var>'s <a>list of pending master entries</a>.</li>

    </ol>

    Otherwise, store the resource for this entry in <var>new cache</var>, if it isn't
    already there, and categorize its entry as a <a>master
    entry</a>.

   </li>

   <li>Let <var>request</var> be a new <a>request</a> whose
   <a>url</a> is <var>manifest URL</var>, <a>client</a> is null, <a>destination</a> is "<code>subresource</code>",
   <a>referrer</a> is "<code>no-referrer</code>",
   <a>synchronous flag</a> is set, <a>credentials
   mode</a> is "<code>include</code>", and whose <a>use-URL-credentials
   flag</a> is set.</li>

   <li>

    Let <var>second manifest</var> be the result of <a>fetching</a> <var>request</var>. HTTP caching semantics should again
    be honored for this request.

    <p class="note">
Since caching can be honored, authors are encouraged to avoid setting the cache
    headers on the manifest in such a way that the user agent would simply not contact the network
    for this second request; otherwise, the user agent would not notice if the cache had changed
    during the cache update process.
</p>

   </li>

   <li>

    If the previous step failed for any reason, or if the fetching attempt involved a redirect,
    or if <var>second manifest</var> and <var>manifest</var> are not byte-for-byte
    identical, then schedule a rerun of the entire algorithm with the same parameters after a short
    delay, and run the <a>cache failure steps</a>.

   </li>

   <li>

    Otherwise, store <var>manifest</var> in <var>new cache</var>, if it's not
    there already, and categorize its entry as <a>the
    manifest</a>.

   </li>

   <li>Set the <a>completeness flag</a> of <var>new cache</var> to <i>complete</i>.</li>

   <li>Let <var>task list</var> be an empty list of <a>tasks</a>.

   <li>

    If this is a <a>cache attempt</a>, then for each
    <a>cache host</a> associated with an <a>application cache</a> in <var>cache
    group</var>, create a <a>task</a> to <a>fire a simple event</a>
    that is cancelable named <code>cached</code> at the
    <code>ApplicationCache</code> singleton of the <a>cache host</a>, and append it to <var>task list</var>. The default action of these events must be, if the user agent
    <a>shows caching progress</a>, the display of some sort of user interface indicating to
    the user that the application has been cached and that they can now use it offline.

    Otherwise, it is an <a>upgrade attempt</a>. For each
    <a>cache host</a> associated with an <a>application cache</a> in <var>cache
    group</var>, create a <a>task</a> to <a>fire a simple event</a>
    that is cancelable named <code>updateready</code> at the
    <code>ApplicationCache</code> singleton of the <a>cache host</a>, and append it to <var>task list</var>. The default action of these events must be, if the user agent
    <a>shows caching progress</a>, the display of some sort of user interface indicating to
    the user that a new version is available and that they can activate it by reloading the
    page.

   </li>

   <li>If appropriate, remove any user interface indicating that an update for this cache is in
   progress.</li>

   <li>Set the <a>update status</a> of <var>cache
   group</var> to <i>idle</i>.</li>

   <li>For each <a>task</a> in <var>task list</var>, <a>queue that task as a post-load task</a>.</li>

  </ol>

  The <dfn>cache failure steps</dfn> are as follows:

  <ol>

   <li>Let <var>task list</var> be an empty list of <a>tasks</a>.

   <li>

    For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, run the
    following further substeps. These steps may be run in parallel for two or more entries at a
    time.

    <ol>

     <li>Wait for the resource for this entry to have either completely downloaded or failed.

     <li>Unassociate the <code>Document</code> for this entry from its <a>application
     cache</a>, if it has one.</li>

     <li>Create a <a>task</a> to <a>fire a simple event</a> that
     is cancelable named <code>error</code> at the
     <code>ApplicationCache</code> singleton of the <code>Document</code> for this entry, if there
     still is one, and append it to <var>task list</var>. The default action of these
     events must be, if the user agent <a>shows caching progress</a>, the display of some sort
     of user interface indicating to the user that the user agent failed to save the application for
     offline use.

    </ol>

   </li>

   <li>For each <a>cache host</a> still associated with an <a>application cache</a>
   in <var>cache group</var>, create a <a>task</a> to <a>fire
   a simple event</a> that is cancelable named <code>error</code> at
   the <code>ApplicationCache</code> singleton of the <a>cache host</a>, and append it to <var>task list</var>. The default action of these events must be, if the user agent
   <a>shows caching progress</a>, the display of some sort of user interface indicating to the
   user that the user agent failed to save the application for offline use.</li>

   <li>Empty <var>cache group</var>'s <a>list of pending master entries</a>.</li>

   <li>If <var>cache group</var> has an <a>application cache</a> whose <a>completeness flag</a> is <i>incomplete</i>, then discard
   that <a>application cache</a>.

   <li>If appropriate, remove any user interface indicating that an update for this cache is in
   progress.</li>

   <li>Let the <a>status</a> of <var>cache
   group</var> be <i>idle</i>.</li>

   <li>If this was a <a>cache attempt</a>, discard <var>cache group</var> altogether.

   <li>For each <a>task</a> in <var>task list</var>, <a>queue that task as a post-load task</a>.</li>

   <li>Abort the <a>application cache download process</a>.</li>

  </ol>

  Attempts to fetch resources as part of the <a>application cache download process</a> may
  be done with cache-defeating semantics, to avoid problems with stale or inconsistent intermediary
  caches.

  <hr />

  User agents may invoke the <a>application cache download process</a>, in the background,
  for any <a>application cache group</a>, at any time (with no <a>cache host</a>). This
  allows user agents to keep caches primed and to update caches even before the user visits a
  site.

  <hr />

  Each <code>Document</code> has a list of <dfn>pending application cache download process
  tasks</dfn> that is used to delay events fired by the algorithm above until the document's <code>load</code> event has fired. When the <code>Document</code> is created, the
  list must be empty.

  When the steps above say to <dfn>queue a post-load task</dfn> <var>task</var>, where
  <var>task</var> is a <a>task</a> that dispatches an event on a
  target <code>ApplicationCache</code> object <var>target</var>, the user agent must run
  the appropriate steps from the following list:

  <dl>

   <dt>If <var>target</var>'s <a>node document</a> is
   <a>ready for post-load tasks</a></dt>

   <dd><a>Queue</a> the task <var>task</var>.</dd>

   <dt>Otherwise</dt>

   <dd>Add <var>task</var> to <var>target</var>'s <a>node document</a>'s list
   of <a>pending application cache download process tasks</a>.</dd>

  </dl>

  When the steps above say to <dfn>queue a progress post-load task</dfn> <var>task</var>, where
  <var>task</var> is a <a>task</a> that dispatches an event on a
  target <code>ApplicationCache</code> object <var>target</var>, the user agent must run
  the following steps:

  <ol>

   <li>If there is a <var>task</var> in <var>target</var>'s <a>node document</a>'s list
   of <a>pending application cache download process tasks</a> that is labeled as a
   <i>progress task</i>, then remove that task from the list.</li>

   <li>Label <var>task</var> as a <i>progress task</i>.</li>

   <li><a>Queue a post-load task</a> <var>task</var>.</li>

  </ol>

  The <a>task source</a> for these <a>tasks</a> is the
  <a>networking task source</a>.

  <h4 id="the-application-cache-selection-algorithm"><dfn>The application cache selection algorithm</dfn></h4>

  When the <dfn>application cache selection algorithm</dfn>
  algorithm is invoked with a <code>Document</code> <var>document</var> and optionally a
  manifest <a>URL</a> <var>manifest URL</var>, the user agent must run the first
  applicable set of steps from the following list:

  <dl class="switch">

   <dt>If there is a <var>manifest URL</var>, and <var>document</var> was loaded
   from an <a>application cache</a>, and the URL of the <a>manifest</a> of that cache's <a>application cache
   group</a> is <em>not</em> the same as <var>manifest URL</var></dt>

   <dd>

    Mark the entry for the resource from which <var>document</var> was taken in the
    <a>application cache</a> from which it was loaded as <a>foreign</a>.

    Restart the current navigation from the top of the <a>navigation
    algorithm</a>, undoing any changes that were made as part of the initial load (changes can be
    avoided by ensuring that the step to <a>update the session history with the new page</a>
    is only ever completed <em>after</em> this <a>application cache
    selection algorithm</a> is run, though this is not required).

    <p class="note">
The navigation will not result in the same resource being loaded, because
    "foreign" entries are never picked during navigation.
</p>

    User agents may notify the user of the inconsistency between the cache manifest and the
    document's own metadata, to aid in application development.

   </dd>

   <dt>If <var>document</var> was loaded from an <a>application cache</a>, and that
   <a>application cache</a> still exists (it is not now <a>obsolete</a>)</dt>

   <dd>

    Associate <var>document</var> with the <a>application cache</a> from which it
    was loaded. Invoke, in the background, the <a>application cache download process</a> for
    that <a>application cache</a>'s <a>application cache group</a>, with <var>document</var> as the <a>cache host</a>.

   </dd>

   <dt>If <var>document</var>  was loaded using <code>GET</code>, and, there is a
   <var>manifest URL</var>, and <var>manifest URL</var> has the <a>same origin</a> as
   <var>document</var></dt>

   <dd>

    Invoke, in the background, the <a>application cache download process</a> for <var>manifest URL</var>, with <var>document</var> as the <a>cache host</a>
    and with the resource from which <var>document</var> was parsed as the <a>master</a> resource.

    If there are <a>relevant application caches</a> that
    are identified by a URL with the <a>same origin</a> as the URL of <var>document</var>, and that have this URL as one of their entries, excluding entries
    marked as <a>foreign</a>, then the user agent should use
    the <a>most appropriate application cache</a> of those
    that match as an HTTP cache for any subresource loads. User agents may also have other caches in
    place that are also honored.

   </dd>

   <dt>Otherwise</dt>

   <dd>

    The <code>Document</code> is not associated with any <a>application cache</a>.

    If there was a <var>manifest URL</var>, the user agent may report to the user that
    it was ignored, to aid in application development.

   </dd>

  </dl>

  <h4 id="changes-to-the-networking-model"><dfn>Changes to the networking model</dfn></h4>

  <p class="&#x0058;&#x0058;&#x0058;">If "AppCache" is not removed as a feature this
  section needs to be integrated into the Fetch standard.</p>

  When a <a>cache host</a> is associated with an <a>application cache</a> whose <a>completeness flag</a> is <i>complete</i>, any and all
  loads for resources related to that <a>cache host</a> other than those for <a>child browsing contexts</a> must go through the following steps
  instead of immediately invoking the mechanisms appropriate to that resource's scheme:

  <ol>

   <li>If the resource is not to be fetched using the GET method, or if applying the <a>URL
   parser</a> algorithm to both its <a>URL</a> and the <a>application cache</a>'s
   <a>manifest</a>'s URL results in two <a>parsed URLs</a> with different <a>scheme</a> components,
   then fetch the resource normally and abort these steps.</li>

   <li>If the resource's URL is <a>a master entry</a>,
   <a>the manifest</a>, <a>an explicit entry</a>, or <a>a fallback entry</a> in the <a>application cache</a>,
   then get the resource from the cache (instead of fetching it), and abort these steps.</li>

   <li>If there is an entry in the <a>application cache</a>'s <a>online safelist</a> that has the <a>same
   origin</a> as the resource's URL and that is a <a>prefix match</a> for the resource's
   URL, then fetch the resource normally and abort these steps.</li>

   <li>

    If the resource's URL has the <a>same origin</a> as the manifest's URL, and there is a
    <a>fallback namespace</a> <var>f</var> in
    the <a>application cache</a> that is a <a>prefix match</a> for the resource's URL,
    then:

    Fetch the resource normally. If this results in a redirect to a resource with another
    <a>origin</a> (indicative of a captive portal), or a 4xx or 5xx status code, or if there
    were network errors (but not if the user canceled the download), then instead get, from the
    cache, the resource of the <a>fallback entry</a>
    corresponding to the <a>fallback namespace</a>
    <var>f</var>. Abort these steps.

   </li>

   <li>If the <a>application cache</a>'s <a>online safelist wildcard flag</a> is
   <i>open</i>, then fetch the resource normally and abort these steps.</li>

   <li>Fail the resource load as if there had been a generic network error.</li>

  </ol>

  <p class="note">
The above algorithm ensures that so long as the <a>online safelist wildcard flag</a> is
  <i>blocking</i>, resources that are not present in the <a>manifest</a> will always fail to load (at least, after the
  <a>application cache</a> has been primed the first time), making the testing of offline
  applications simpler.
</p>

  </div>

  <div class="impl">

  <h4 id="expiring-application-caches"><dfn>Expiring application caches</dfn></h4>

  As a general rule, user agents should not expire application caches, except on request from the
  user, or after having been left unused for an extended period of time.

  Application caches and cookies have similar implications with respect to privacy (e.g. if the
  site can identify the user when providing the cache, it can store data in the cache that can be
  used for cookie resurrection). Implementors are therefore encouraged to expose application caches
  in a manner related to HTTP cookies, allowing caches to be expunged together with cookies and
  other origin-specific data.

  <p class="example">
For example, a user agent could have a "delete site-specific data" feature that
  clears all cookies, application caches, local storage, databases, etc, from an origin all at
  once.
</p>

  </div>

  <div class="impl">

  <h4 id="disk-space"><dfn>Disk space</dfn></h4>

  User agents should consider applying constraints on disk usage of <a>application caches</a>, and care should be taken to ensure that the restrictions cannot
  be easily worked around using subdomains.

  User agents should allow users to see how much space each domain is using, and may offer the
  user the ability to delete specific <a>application caches</a>.

  For predictability, quotas should be based on the uncompressed size of data stored.

  <p class="note">
How quotas are presented to the user is not defined by this specification. User
  agents are encouraged to provide features such as allowing a user to indicate that certain sites
  are trusted to use more than the default quota, e.g. by presenting a non-modal user interface
  while a cache is being updated, or by having an explicit safelist in the user agent's
  configuration interface.
</p>

  </div>

  <h4 id="security-concerns-with-offline-applications-caches"><dfn>Security concerns with offline applications caches</dfn></h4>

  <em>This section is non-normative.</em>

  The main risk introduced by offline application caches is that an injection attack can be
  elevated into persistent site-wide page replacement. This attack involves using an injection
  vulnerability to upload two files to the victim site. The first file is an application cache
  manifest consisting of just a fallback entry pointing to the second file, which is an HTML page
  whose manifest is declared as that first file. Once the user has been directed to that second
  file, all subsequent accesses to any file covered by the given fallback namespace while either the
  user or the site is offline will instead show that second file. Targeted denial-of-service
  attacks or cookie bombing attacks (where the client is made to send so many cookies that the
  server refuses to process the request) can be used to ensure that the site appears offline.

  To mitigate this, manifests can only specify fallbacks that are in the same path as the
  manifest itself. This means that a content injection upload vulnerability in a particular
  directory on a server can only be escalated to a take-over of that directory and its
  subdirectories. If there is no way to inject a file into the root directory, the entire site
  cannot be taken over.

  If a site has been attacked in this way, simply removing the offending manifest might eventually
  clear the problem, since the next time the manifest is updated, a 404 error will be seen, and the
  user agent will clear the cache. "Eventually" is the key word here, however; while the attack on
  the user or server is ongoing, such that connections from an affected user to the affected site
  are blocked, the user agent will simply assume that the user is offline and will continue to use
  the hostile manifest. Unfortunately, if a cookie bombing attack has also been used, merely
  removing the manifest is insufficient; in addition, the server has to be configured to return a
  404 or 410 response instead of the 413 "Request Entity Too Large" response.

  TLS does not inherently protect a site from this attack, since the attack relies on content
  being served from the server itself. Not using application caches also does not prevent this
  attack, since the attack relies on an attacker-provided manifest.

  <h4 id="application-cache-api"><dfn>Application cache API</dfn></h4>

  <pre class="idl" data-highlight="webidl">
[Exposed=(Window, SharedWorker)]
interface <dfn>ApplicationCache</dfn> : <a>EventTarget</a> {

  // <a>update status</a>
  const unsigned short <a>UNCACHED</a> = 0;
  const unsigned short <a>IDLE</a> = 1;
  const unsigned short <a>CHECKING</a> = 2;
  const unsigned short <a>DOWNLOADING</a> = 3;
  const unsigned short <a>UPDATEREADY</a> = 4;
  const unsigned short <a>OBSOLETE</a> = 5;
  readonly attribute unsigned short <a>status</a>;

  // updates
  void <a>update</a>();
  void <a>abort</a>();
  void <a>swapCache</a>();

  // events
  attribute <a>EventHandler</a> <a>onchecking</a>;
  attribute <a>EventHandler</a> <a>onerror</a>;
  attribute <a>EventHandler</a> <a>onnoupdate</a>;
  attribute <a>EventHandler</a> <a>ondownloading</a>;
  attribute <a>EventHandler</a> <a>onprogress</a>;
  attribute <a>EventHandler</a> <a>onupdateready</a>;
  attribute <a>EventHandler</a> <a>oncached</a>;
  attribute <a>EventHandler</a> <a>onobsolete</a>;
};
</pre>

  <dl class="domintro">

   <dt><var>cache</var> = <var>window</var> . <code>applicationCache</code></dt>
   <dd>

    (In a window.) Returns the <code>ApplicationCache</code> object that applies to the
    <a>active document</a> of that <code>Window</code>.

   </dd>

   <dt><var>cache</var> = <var>self</var> . <code>applicationCache</code></dt> <dd>

    (In a shared worker.) Returns the <code>ApplicationCache</code> object that applies to the
    current shared worker.

   </dd>

   <dt><var>cache</var> . <code>status</code></dt>
   <dd>

    Returns the current status of the application cache, as given by the constants defined
    below.

   </dd>

   <dt><var>cache</var> . <code>update</code>()</dt>
   <dd>

    Invokes the <a>application cache download process</a>.

    Throws an <code>InvalidStateError</code> exception if there is no application cache to
    update.

    Calling this method is not usually necessary, as user agents will generally take care of
    updating <a>application caches</a> automatically.

    The method can be useful in situations such as long-lived applications. For example, a Web
    mail application might stay open in a browser tab for weeks at a time. Such an application could
    want to test for updates each day.

   </dd>

   <dt><var>cache</var> . <code>abort</code>()</dt>
   <dd>

    Cancels the <a>application cache download process</a>.

    This method is intended to be used by Web application showing their own caching progress UI,
    in case the user wants to stop the update (e.g. because bandwidth is limited).

   </dd>

   <dt><var>cache</var> . <code>swapCache</code>()</dt>
   <dd>

    Switches to the most recent application cache, if there is a newer one. If there isn't,
    throws an <code>InvalidStateError</code> exception.

    This does not cause previously-loaded resources to be reloaded; for example, images do not
    suddenly get reloaded and style sheets and scripts do not get reparsed or reevaluated. The only
    change is that subsequent requests for cached resources will obtain the newer copies.

    The <code>updateready</code> event will fire before this
    method can be called. Once it fires, the Web application can, at its leisure, call this method
    to switch the underlying cache to the one with the more recent updates. To make proper use of
    this, applications have to be able to bring the new features into play; for example, reloading
    scripts to enable new features.

    An easier alternative to <code>swapCache()</code> is just to
    reload the entire page at a time suitable for the user, using <code>location.reload()</code>.

   </dd>

  </dl>

  <div class="impl">

  There is a one-to-one mapping from <a>cache hosts</a> to
  <code>ApplicationCache</code> objects. The <dfn><code>applicationCache</code></dfn> attribute on <code>Window</code>
  objects must return the <code>ApplicationCache</code> object associated with the
  <code>Window</code> object's <a>active document</a>. The <dfn><code>applicationCache</code></dfn> attribute
  on <code>SharedWorkerGlobalScope</code> objects must return the <code>ApplicationCache</code>
  object associated with the worker.

  <p class="note">
A <code>Window</code> or <code>SharedWorkerGlobalScope</code> object has an
  associated <code>ApplicationCache</code> object even if that <a>cache host</a> has no actual
  <a>application cache</a>.
</p>

  <hr />

  The <dfn><code>status</code></dfn> attribute, on getting, must
  return the current state of the <a>application cache</a> that the
  <code>ApplicationCache</code> object's <a>cache host</a> is associated with, if any. This
  must be the appropriate value from the following list:

  </div>

  <dl>

   <dt><dfn><code>UNCACHED</code></dfn> (numeric value 0)</dt>

   <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is not associated with
   an <a>application cache</a> at this time.</dd>

   <dt><dfn><code>IDLE</code></dfn> (numeric value 1)</dt>

   <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
   <a>application cache</a> whose <a>application cache group</a>'s <a>update status</a> is <i>idle</i>, and that <a>application
   cache</a> is the <a>newest</a> cache in its
   <a>application cache group</a>, and the <a>application cache group</a> is not marked
   as <a>obsolete</a>.</dd>

   <dt><dfn><code>CHECKING</code></dfn> (numeric value 2)</dt>

   <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
   <a>application cache</a> whose <a>application cache group</a>'s <a>update status</a> is <i>checking</i>.</dd>

   <dt><dfn><code>DOWNLOADING</code></dfn> (numeric value 3)</dt>

   <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
   <a>application cache</a> whose <a>application cache group</a>'s <a>update status</a> is <i>downloading</i>.</dd>

   <dt><dfn><code>UPDATEREADY</code></dfn> (numeric value 4)</dt>

   <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
   <a>application cache</a> whose <a>application cache group</a>'s <a>update status</a> is <i>idle</i>, and whose <a>application
   cache group</a> is not marked as <a>obsolete</a>, but
   that <a>application cache</a> is <em>not</em> the <a>newest</a> cache in its group.</dd>

   <dt><dfn><code>OBSOLETE</code></dfn> (numeric value 5)</dt>

   <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
   <a>application cache</a> whose <a>application cache group</a> is marked as <a>obsolete</a>.</dd>

  </dl>

  <div class="impl">

  <hr />

  If the <dfn><code>update()</code></dfn> method is invoked, the user
  agent must invoke the <a>application cache download process</a>, in the background, for the
  <a>application cache group</a> of the <a>application cache</a> with which the
  <code>ApplicationCache</code> object's <a>cache host</a> is associated, but without giving
  that <a>cache host</a> to the algorithm. If there is no such <a>application cache</a>,
  or if its <a>application cache group</a> is marked as <a>obsolete</a>, then the method must throw an
  <code>InvalidStateError</code> exception instead.

  If the <dfn><code>abort()</code></dfn> method is invoked, the user
  agent must <dfn>send a signal</dfn> to the current <a>application cache download process</a>
  for the <a>application cache group</a> of the <a>application cache</a> with which the
  <code>ApplicationCache</code> object's <a>cache host</a> is associated, if any. If there is
  no such <a>application cache</a>, or it does not have a current <a>application cache
  download process</a>, then do nothing.

  If the <dfn><code>swapCache()</code></dfn> method is invoked,
  the user agent must run the following steps:

  <ol>

   <li><p>Check that <code>ApplicationCache</code> object's <a>cache host</a> is associated
   with an <a>application cache</a>. If it is not, then throw an
   <code>InvalidStateError</code> exception and abort these steps.</li>

   <li>Let <var>cache</var> be the <a>application cache</a> with which the
   <code>ApplicationCache</code> object's <a>cache host</a> is associated. (By definition,
   this is the same as the one that was found in the previous step.)</li>

   <li>If <var>cache</var>'s <a>application cache group</a> is marked as <a>obsolete</a>, then unassociate the
   <code>ApplicationCache</code> object's <a>cache host</a> from <var>cache</var> and
   abort these steps. (Resources will now load from the network instead of the cache.)</li>

   <li>Check that there is an application cache in the same <a>application cache group</a>
   as <var>cache</var> whose <a>completeness
   flag</a> is <i>complete</i> and that is <a>newer</a> than
   <var>cache</var>. If there is not, then throw an <code>InvalidStateError</code>
   exception and abort these steps.</li>

   <li>Let <var>new cache</var> be the <a>newest</a> <a>application cache</a> in the same
   <a>application cache group</a> as <var>cache</var> whose <a>completeness flag</a> is <i>complete</i>.</li>

   <li>Unassociate the <code>ApplicationCache</code> object's <a>cache host</a> from <var>cache</var> and instead associate it with <var>new cache</var>.</li>

  </ol>

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported, as <a>event handler IDL attributes</a>, by all objects implementing the
  <code>ApplicationCache</code> interface:

  <table>
   <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
   <tbody>
    <tr><td><dfn><code>onchecking</code></dfn> <td> <code>checking</code>
    <tr><td><dfn><code>onerror</code></dfn> <td> <code>error</code>
    <tr><td><dfn><code>onnoupdate</code></dfn> <td> <code>noupdate</code>
    <tr><td><dfn><code>ondownloading</code></dfn> <td> <code>downloading</code>
    <tr><td><dfn><code>onprogress</code></dfn> <td> <code>progress</code>
    <tr><td><dfn><code>onupdateready</code></dfn> <td> <code>updateready</code>
    <tr><td><dfn><code>oncached</code></dfn> <td> <code>cached</code>
    <tr><td><dfn><code>onobsolete</code></dfn> <td> <code>obsolete</code>
  </table>

  </div>

  <h4 id="browser-state"><dfn><a>Browser state</a></dfn></h4>

  <pre class="idl" data-highlight="webidl">
[NoInterfaceObject, Exposed=(Window, Worker)]
interface <dfn>NavigatorOnLine</dfn> {
  readonly attribute boolean <a>onLine</a>;
};
</pre>

  <dl class="domintro">

   <dt><var>window</var> . <code>navigator</code> . <code>onLine</code></dt>

   <dd>

    Returns false if the user agent is definitely offline (disconnected from the network).
    Returns true if the user agent might be online.

    The events <code>online</code> and <code>offline</code> are fired when the value of this attribute changes.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>navigator.onLine</code></dfn> attribute must return
  false if the user agent will not contact the network when the user follows links or when a script
  requests a remote page (or knows that such an attempt would fail), and must return true
  otherwise.

  When the value that would be returned by the <code>navigator.onLine</code> attribute of a <code>Window</code> or
  <code>WorkerGlobalScope</code> changes from true to false, the user agent must <a>queue a
  task</a> to <a>fire a simple event</a> named <code>offline</code>
  at the <code>Window</code> or <code>WorkerGlobalScope</code> object.

  On the other hand, when the value that would be returned by the <code>navigator.onLine</code> attribute of a <code>Window</code> or
  <code>WorkerGlobalScope</code> changes from false to true, the user agent must <a>queue a
  task</a> to <a>fire a simple event</a> named <code>online</code> at
  the <code>Window</code> or <code>WorkerGlobalScope</code> object.

  The <a>task source</a> for these <a>tasks</a> is the
  <a>networking task source</a>.

  </div>

  <p class="note">
This attribute is inherently unreliable. A computer can be connected to a network
  without having Internet access.
</p>

  <div class="example">

   In this example, an indicator is updated as the browser goes online and offline.

   <pre highlight="html">
&lt;!DOCTYPE HTML>
&lt;html>
 &lt;head>
  &lt;title>Online status&lt;/title>
  &lt;script>
   function updateIndicator() {
     document.getElementById('indicator').textContent = navigator.onLine ? 'online' : 'offline';
   }
  &lt;/script>
 &lt;/head>
 &lt;body onload="updateIndicator()" ononline="updateIndicator()" onoffline="updateIndicator()">
  &lt;p>The network is: &lt;span>(state unknown)&lt;/span>
 &lt;/body>
&lt;/html>
</pre>

  </div>

  <h2 id="web-application-apis"><dfn>Web application APIs</dfn></h2>

  <h3 id="scripting"><dfn>Scripting</dfn></h3>

  <h4 id="introduction"><dfn>Introduction</dfn></h4>

  Various mechanisms can cause author-provided executable code to run in the context of a
  document. These mechanisms include, but are probably not limited to:

  <ul>

   <li>Processing of <code>script</code> elements.</li>

   <li>Navigating to <a><code>javascript:</code> URLs</a>.</li>

   <li>Event handlers, whether registered through the DOM using <code>addEventListener()</code>, by explicit <a>event handler content attributes</a>, by
   <a>event handler IDL attributes</a>, or otherwise.</li>

   <li>Processing of technologies like SVG that have their own scripting features.</li>

  </ul>

  <div class="impl">

  <h4 id="enabling-and-disabling-scripting"><dfn>Enabling and disabling scripting</dfn></h4>

  <dfn>Scripting is enabled</dfn> in a <em><a>browsing
  context</a></em> when all of the following conditions are true:

  <ul>

   <li>The user agent supports scripting.</li>

   <li>The user has not disabled scripting for this <a>browsing context</a> at this time.
   (User agents may provide users with the option to disable scripting globally, or in a
   finer-grained manner, e.g. on a per-origin basis.)

   </li>

   <li>The <a>browsing context</a>'s <a>active document</a>'s
   <a>active sandboxing flag set</a> does not have its <a>sandboxed scripts browsing
   context flag</a> set.</li>

  </ul>

  <dfn>Scripting is disabled</dfn> in a <a>browsing context</a>
  when any of the above conditions are false (i.e. when scripting is not <a>enabled</a>).

  <hr />

  <dfn>Scripting is enabled</dfn> for a <em>node</em> if the
  <code>Document</code> object of the node (the node itself, if it is itself a <code>Document</code>
  object) has an associated <a>browsing context</a>, and <a>scripting is enabled</a> in that <a>browsing context</a>.

  <dfn>Scripting is disabled</dfn> for a node if there is no such
  <a>browsing context</a>, or if <a>scripting is
  disabled</a> in that <a>browsing context</a>.

  </div>

  <div class="impl">

  <h4 id="processing-model"><dfn>Processing model</dfn></h4>

  <h5 id="definitions"><dfn>Definitions</dfn></h5>

  This specification describes three kinds of <a>JavaScript global environments</a>: the <dfn>document environment</dfn>, the
  <dfn>dedicated worker environment</dfn>, and the <dfn>shared worker environment</dfn>. The
  <a>dedicated worker environment</a> and the <a>shared worker environment</a> are both
  types of <dfn>worker environments</dfn>.

  Except where otherwise specified, a <a>JavaScript global environment</a> is a
  <a>document environment</a>.

  <hr />

  A <dfn>script</dfn> has:

  <dl>

   <dt>A <dfn>code entry-point</dfn></dt>

   <dd>

    A code entry-point represents a block of executable code that the script exposes to other
    scripts and to the user agent. Typically, the code corresponding to the code entry-point is
    executed immediately after the script is parsed, but for event handlers, it is called each time
    the handler is invoked.

    <p class="example">
In JavaScript <code>script</code> blocks, this corresponds to the execution
    context of the global code.
</p>

   </dd>

   <dt>Optionally, a <dfn>muted errors</dfn> flag</dt>

   <dd>

    A flag which, if set, means that error information will not be provided for errors in this
    script (used to mute errors for cross-origin scripts, since that can leak private
    information).

   </dd>

   <dt>A <dfn>settings object</dfn></dt>

   <dd>

    An <a>environment settings object</a>, various settings that are shared with other scripts in
    the same context.

   </dd>

  </dl>

  <hr />

  An <dfn>environment settings object</dfn> specifies algorithms for obtaining the following:

  <dl>

   <dt>A <dfn>script execution environment</dfn> for each language supported by the user agent</dt>

   <dd>

    The characteristics of the script execution environment depend on the language, and are not
    defined by this specification.

    <p class="example">
In JavaScript, the script execution environment consists of the interpreter,
    the stack of <i>execution contexts</i>, the <i>global code</i> and <i>function code</i> and the
    <code>Function</code> objects resulting, and so forth.
</p>

   </dd>

   <dt>A <dfn>global object</dfn></dt>
   <dd>

    An object that provides the APIs that can be called by the code in scripts that use this
    <a>settings object</a>.

    <p class="note">
This is typically a <code>Window</code> object or a
    <code>WorkerGlobalScope</code> object. When a <a>global object</a> is an empty object, it
    can't do anything that interacts with the environment.
</p>

    If the <a>global object</a> is a <code>Window</code> object, then, in JavaScript, the
    ThisBinding of the global execution context for this script must be the <code>Window</code>
    object's <code>WindowProxy</code> object, rather than the global object. <a>\[ECMA262]</a>

    <p class="note">
This is a <a>willful violation</a> of the JavaScript specification current
    at the time of writing (ECMAScript edition 5, as defined in section 10.4.1.1 Initial Global
    Execution Context, step 3). The JavaScript specification requires that the <code>this</code> keyword in the global scope return the global object, but this is not
    compatible with the security design prevalent in implementations as specified herein. <a>\[ECMA262]</a>
</p>

   </dd>

   <dt>A <dfn>responsible browsing context</dfn></dt>

   <dd>

    A <a>browsing context</a> that is assigned responsibility for actions taken by the
    scripts that use this <a>environment settings object</a>.

    <p class="example">
When a script creates and <a>navigates</a> a new
    <a>top-level browsing context</a>, the <code>opener</code> attribute
    of the new <a>browsing context</a>'s <code>Window</code> object will be set to the
    <a>responsible browsing context</a>'s <code>WindowProxy</code> object.
</p>

   </dd>

   <dt>A <dfn>responsible event loop</dfn></dt>

   <dd>

    An <a>event loop</a> that is used when it would not be immediately clear what event
    loop to use.

   </dd>

   <dt>A <dfn>responsible document</dfn></dt>

   <dd>

    A <code>Document</code> that is assigned responsibility for actions taken by the scripts that
    use this <a>environment settings object</a>.

    <p class="example">
For example, the <a>address</a> of the
    <a>responsible document</a> is used to set the <a>address</a> of the <code>Document</code> after it has been reset using <code>document.open()</code>.
</p>

    If the <a>responsible event loop</a> is not a <a>browsing context</a> <a>event loop</a>,
    then the <a>environment settings object</a> has no <a>responsible document</a>.

   </dd>

   <dt>An <dfn>API URL character encoding</dfn></dt>

   <dd>

    A character encoding used to encode URLs by APIs called by scripts that use this <a>environment
    settings object</a>.

   </dd>

   <dt>An <dfn>API base URL</dfn></dt>

   <dd>

    An <a>absolute URL</a> used by APIs called by scripts that use this <a>environment
    settings object</a> to resolve <a>relative URLs</a>.

   </dd>

   <dt>An <a>origin</a> and an <a>effective script origin</a></dt>

   <dd>

    An instrument used in security checks.

   </dd>

   <dt>A <dfn>creation URL</dfn></dt>

   <dd>
    An <a>absolute URL</a> representing the location of the resource with which the
    <a>environment settings object</a> is associated. Note that this URL might be distinct
    from the resource's current URL, due to mechanisms such as <code>history.pushState()</code>.
   </dd>

   <dt>An <dfn>HTTPS state</dfn></dt>

   <dd>
    A value representing the security properties of the network channel used to deliver the
    resource with which the <a>environment settings object</a> is associated. The value will
    be one of "<code>modern</code>", "<code>deprecated</code>", or
    "<code>none</code>".

    <p class="note">
Resources delivered over HTTPS will generally have an <a>HTTPS state</a>
    of "<code>modern</code>". A user agent can use "<code>deprecated</code>"
    during transitional periods where rejecting the response entirely would be inappropriate (e.g.,
    while removing support for a hash function or cypher suite).
</p>
   </dd>

  </dl>

  The <dfn>relevant settings object for a global object</dfn> <var>o</var> is the
  <a>environment settings object</a> whose <a>global object</a> is <var>o</var>.
  (There is always a 1:1 mapping of global objects to environment settings objects.)

  The <dfn>relevant settings object for a script</dfn> <var>s</var> is the
  <a>settings object</a> of <var>s</var>.

  <h5 id="script-settings-for-browsing-contexts"><dfn>Script settings for browsing contexts</dfn></h5>

  Whenever a new <code>Window</code> object is created, the user agent must:

  <ol>
   <li>Let <var>url</var> be a copy of the <a>address</a>
   of the <code>Document</code> with which the <code>Window</code> is associated.</li>

   <li>
    Create an <a>environment settings object</a> whose algorithms are defined as
    follows:

    <dl>

     <dt>The <a>script execution environments</a></dt>
     <dd>

      When the <a>environment settings object</a> is created, for each language supported by the
      user agent, create an appropriate execution environment as defined by the relevant
      specification.

      When a <a>script execution environment</a> is needed, return the appropriate one from
      those created when the <a>environment settings object</a> was created.

     </dd>

     <dt>The <a>global object</a></dt>
     <dd>

      Return the <code>Window</code> object itself.

     </dd>

     <dt>The <a>responsible browsing context</a></dt>
     <dd>

      Return the <a>browsing context</a> with which the <code>Window</code> object is
      associated.

     </dd>

     <dt>The <a>responsible event loop</a></dt>
     <dd>

      Return the <a>event loop</a> that is associated with the <a>unit of related
      similar-origin browsing contexts</a> to which the <code>Window</code> object's <a>browsing
      context</a> belongs.

     </dd>

     <dt>The <a>responsible document</a></dt>
     <dd>

      Return the <code>Document</code> with which the <code>Window</code> is currently
      associated.

     </dd>

     <dt>The <a>API URL character encoding</a></dt>
     <dd>

      Return the current <a>character encoding</a> of
      the <code>Document</code> with which the <code>Window</code> is currently associated.

     </dd>

     <dt>The <a>API base URL</a></dt>
     <dd>

      Return the current <a>base URL</a> of the
      <code>Document</code> with which the <code>Window</code> is currently associated.

     </dd>

     <dt>The <a>origin</a></dt>
     <dd>

      Return the <a>origin</a> of the <code>Document</code> with which the
      <code>Window</code> is currently associated.

     </dd>

     <dt>The <a>effective script origin</a></dt>
     <dd>

      Return the <a>effective script origin</a> of the <code>Document</code> with which the
      <code>Window</code> is currently associated.

     </dd>

     <dt>The <a>creation URL</a></dt>
     <dd>

      Return <var>url</var>.

     </dd>

     <dt>The <a>HTTPS state</a></dt>
     <dd>

      Return the <a>HTTPS state</a> of the
      <code>Window</code> object.

     </dd>

    </dl>
   </li>
  </ol>

  <h5 id="calling-scripts"><dfn>Calling scripts</dfn></h5>

  Each <a>unit of related similar-origin browsing contexts</a> has a <dfn>stack of script
  settings objects</dfn>, which must be initially empty. When a new <a>environment settings
  object</a> is <i>pushed</i> onto this stack, the specified <a>environment settings object</a>
  is to be added to the stack; when the <a>environment settings object</a> on this stack that was
  most recently pushed onto it is to be <i>popped</i> from the stack, it must be removed. Entries on
  this stack can be labeled as <dfn>candidate entry
  settings objects</dfn>.

  When a user agent is to <dfn>jump to a code entry-point</dfn> for a <a>script</a> <var>s</var>, the user agent must run the
  following steps:

  <ol>

   <li>Let <var>context</var> be the <a>settings object</a> of <var>s</var>.</li>

   <li><a>Prepare to run a callback</a> with <var>context</var> as the
   <a>environment settings object</a>. If this returns "do not run" then abort these
   steps.</li>

   <li>Make the appropriate <a>script execution environment</a> specified by <var>context</var> execute the <var>s</var>'s <a>code
   entry-point</a>.</li>

   <li><a>Clean up after running a callback</a>.</li>

  </ol>

  The steps to <dfn>prepare to run a callback</dfn> with an <a>environment settings object</a>
  <var>o</var> are as follows. They return either "run" or "do not run".

  <ol>

   <li>If the <a>global object</a> specified by <var>o</var> is a
   <code>Window</code> object whose <code>Document</code> object is not <a>fully active</a>,
   then return "do not run" and abort these steps.

   <li>If <a>scripting is disabled</a> for the
   <a>responsible browsing context</a> specified by <var>o</var>, then return "do
   not run" and abort these steps.

   <li>Push <var>o</var> onto the <a>stack of script settings objects</a>, and
   label it as a <a>candidate entry settings object</a>.</li>

   <li>Return "run".</li>

  </ol>

  The steps to <dfn>clean up after running a callback</dfn> are as follows:

  <ol>

   <li>Pop the current <a>incumbent settings object</a> from the <a>stack of script
   settings objects</a>.</li>

   <li>If the <a>stack of script settings objects</a> is now empty, <a>run the global
   script clean-up jobs</a>. (These cannot run scripts.)</li>

   <li>If the <a>stack of script settings objects</a> is now empty, <a>perform a
   microtask checkpoint</a>. (If this runs scripts, these algorithms will be invoked
   reentrantly.)</li>

  </ol>

  <p class="note">
These algorithms are not invoked by one script directly calling another, but they
  can be invoked reentrantly in an indirect manner, e.g. if a script dispatches an event which has
  event listeners registered.
</p>

  When a JavaScript <i>SourceElements</i> production is to be evaluated, the <a>settings
  object</a> of the <a>script</a> corresponding to that
  <i>SourceElements</i> must be pushed onto the <a>stack of script settings objects</a> before
  the evaluation begins, and popped when the evaluation ends (regardless of whether it's an abrupt
  completion or not).

  The <dfn>entry settings object</dfn> is the most-recently added <a>environment settings
  object</a> in the <a>stack of script settings objects</a> that is labeled as a
  <a>candidate entry settings object</a>. If the stack is empty, or has no entries labeled as
  such, then there is no <a>entry settings object</a>. It is used to obtain, amongst other
  things, the <a>API base URL</a> to <a>resolve</a> relative
  <a>URLs</a> used in scripts running in that <a>unit of related
  similar-origin browsing contexts</a>.

  The <dfn>incumbent settings object</dfn> is the <a>environment settings object</a> in the
  <a>stack of script settings objects</a> that was most-recently added (i.e. the last one on
  the stack). If the stack is empty, then there is no <a>incumbent settings object</a>. It is
  used in some security checks.

  <p class="note">
The Web IDL specification also uses these algorithms. [[!WEBIDL]]
</p>

  <div class="example">

   Consider the following two pages, with the first being loaded in a browser window and the
   second being loaded in the <code>iframe</code> of the first:

   <pre highlight="html">
&lt;!-- a/a.html -->
&lt;!DOCTYPE HTML>
&lt;title>Outer page&lt;/title>
&lt;iframe src="../b/b.html">&lt;/iframe>
&lt;input type=button onclick="frames[0].hello()" value="Hello">
</pre>

   <pre highlight="html">
&lt;!-- b/b.html -->
&lt;!DOCTYPE HTML>
&lt;title>Inner page&lt;/title>
&lt;script>
 function hello() {
   location.assign('c.html');
 }
&lt;/script>
</pre>

   When the button is pressed in the inner frame, the outer page runs script in the inner page.
   While the <code>hello()</code> function is running, the <a>entry settings
   object</a> is that of the outer file (<code>a/a.html</code>), and the
   <a>incumbent settings object</a> is that of the inner file (<code>b/b.html</code>). The <code>assign()</code> method uses
   the <a>entry settings object</a> to resolve the URL, so we end up loading <code>a/c.html</code>, but it uses the <a>incumbent settings object</a> to establish
   the <a>source browsing context</a>, from which the referrer is established, so the <code>Referer</code> header sent with the request for <code>a/c.html</code> specifies the inner file's URL (the one ending with <code>b/b.html</code>).

  </div>

  <hr />

  Each <a>unit of related similar-origin browsing contexts</a> has a <dfn>global script
  clean-up jobs list</dfn>, which must initially be empty. A global script clean-up job cannot run
  scripts, and cannot be sensitive to the order in which other clean-up jobs are executed. The File
  API uses this to release <code>blob:</code> URLs. [[!FILEAPI]]

  When the user agent is to <dfn>run the global script clean-up jobs</dfn>, the user agent must
  perform each of the jobs in the <a>global script clean-up jobs list</a> and then empty the
  list.

  </div>

  <div class="impl">

  <h5 id="creating-scripts"><dfn>Creating scripts</dfn></h5>

  When the specification says that a <a>script</a> is to be <dfn>created</dfn>, given some script source, a script source URL, its
  scripting language, an <a>environment settings object</a>, and optionally a <var>muted
  errors</var> flag, the user agent must run the following steps:

  <ol>

   <li>Let <var>script</var> be a new <a>script</a> that
   this algorithm will subsequently initialize.</li>

   <li>If <a>scripting is disabled</a> for <a>browsing
   context</a> passed to this algorithm, then abort these steps, as if the script source
   described a program that did nothing but return void.

   <li>Obtain the appropriate <a>script execution environment</a> for the given scripting
   language from the <a>environment settings object</a> provided.</li>

   <li>Parse/compile/initialize the source of the script using the <a>script execution
   environment</a>, as appropriate for the scripting language, and thus obtain <var>script</var>'s <a>code entry-point</a>.</li>

   <li>Let <var>script</var>'s <a>settings object</a> be the <a>environment
   settings object</a> provided.</li>

   <li>If the <var>muted errors</var> flag was set, then set <var>script</var>'s <a>muted errors</a> flag.</li>

   <li>

    If all the steps above succeeded (in particular, if the script was compiled successfully),
    <a>Jump</a> to <var>script</var>'s <a>code
    entry-point</a>.

    Otherwise, <a>report the error</a> for <var>script</var>, with the
    problematic position (line number and column number), using the <a>global object</a>
    specified by the <a>environment settings object</a> as the target. If the error is still <i>not handled</i> after this, then the error may be reported to
    the user.

   </li>

  </ol>

  </div>

  <div class="impl">

  <h5 id="killing-scripts"><dfn>Killing scripts</dfn></h5>

  User agents may impose resource limitations on scripts, for example CPU quotas, memory limits,
  total execution time limits, or bandwidth limitations. When a script exceeds a limit, the user
  agent may either throw a <code>QuotaExceededError</code> exception, abort the script without an
  exception, prompt the user, or throttle script execution.

  <div class="example">

   For example, the following script never terminates. A user agent could, after waiting for a
   few seconds, prompt the user to either terminate the script or let it continue.

   <pre highlight="html">
&lt;script>
 while (true) { /* loop */ }
&lt;/script>
</pre>

  </div>

  User agents are encouraged to allow users to disable scripting whenever the user is prompted
  either by a script (e.g. using the <code>window.alert()</code> API) or because
  of a script's actions (e.g. because it has exceeded a time limit).

  If scripting is disabled while a script is executing, the script should be terminated
  immediately.

  User agents may allow users to specifically disable scripts just for the purposes of closing a
  <a>browsing context</a>.

  <p class="example">
For example, the prompt mentioned in the example above could also offer the
  user with a mechanism to just close the page entirely, without running any <code>unload</code> event handlers.
</p>

  </div>

  <h5 id="runtime-script-errors"><dfn>Runtime script errors</dfn></h5>

  <div class="impl">

  When the user agent is required to <dfn>report an error</dfn> for a
  particular <a>script</a> <var>script</var> with a particular
  position <var>line</var>:<var>col</var>, using a particular target <var>target</var>, it must run these steps, after which the error is either <dfn><i>handled</i></dfn> or <dfn><i>not
  handled</i></dfn>:

  <ol>

   <li>If <var>target</var> is <a>in error reporting mode</a>, then abort these
   steps; the error is <i>not handled</i>.</li>

   <li>Let <var>target</var> be <dfn>in error reporting mode</dfn>.</li>

   <li>Let <var>message</var> be a user-agent-defined string describing the error in a
   helpful manner.

   </li>

   <li>Let <var>error object</var> be the object that represents the error: in the case of an
   uncaught exception, that would be the object that was thrown; in the case of a JavaScript error
   that would be an <code>Error</code> object. If there is no corresponding
   object, then the null value must be used instead.</li>

   <li>

    Let <var>location</var> be an <a>absolute URL</a> that corresponds to the
    resource from which <var>script</var> was obtained.

    <p class="note">
The resource containing the script will typically be the file from which the
    <code>Document</code> was parsed, e.g. for inline <code>script</code> elements or <a>event
    handler content attributes</a>; or the JavaScript file that the script was in, for external
    scripts. Even for dynamically-generated scripts, user agents are strongly encouraged to attempt
    to keep track of the original source of a script. For example, if an external script uses the
    <code>document.write()</code> API to insert an inline
    <code>script</code> element during parsing, the URL of the resource containing the script would
    ideally be reported as being the external script, and the line number might ideally be reported
    as the line with the <code>document.write()</code> call or where the
    string passed to that call was first constructed. Naturally, implementing this can be somewhat
    non-trivial.
</p>

    <p class="note">
User agents are similarly encouraged to keep careful track of the original line
    numbers, even in the face of <code>document.write()</code> calls
    mutating the document as it is parsed, or <a>event handler content attributes</a> spanning
    multiple lines.
</p>

   </li>

   <li>If <var>script</var> has <a>muted errors</a>, then set <var>message</var> to "<code>Script error.</code>", set <var>location</var>
   to the empty string, set <var>line</var> and <var>col</var> to 0, and set <var>error object</var> to null.</li>

   <li>Let <var>event</var> be a new <a>trusted</a>
   <code>ErrorEvent</code> object that does not bubble but is cancelable, and which has the event
   name <code>error</code>.</li>

   <li>Initialize <var>event</var>'s <code>message</code>
   attribute to <var>message</var>.</li>

   <li>Initialize <var>event</var>'s <code>filename</code> attribute to <var>location</var>.</li>

   <li>Initialize <var>event</var>'s <code>lineno</code>
   attribute to <var>line</var>.</li>

   <li>Initialize <var>event</var>'s <code>colno</code>
   attribute to <var>col</var>.</li>

   <li>Initialize <var>event</var>'s <code>error</code>
   attribute to <var>error object</var>.</li>

   <li><a>Dispatch</a> <var>event</var> at <var>target</var>.</li>

   <li>Let <var>target</var> no longer be <a>in error reporting mode</a>.</li>

   <li>If <var>event</var> was canceled, then the error is <i>handled</i>. Otherwise, the error is <i>not handled</i>.

  </ol>

  <h6 id="runtime-script-errors-in-documents"><dfn>Runtime script errors in documents</dfn></h6>

  When the user agent is to <dfn>report an exception</dfn>
  <var>E</var>, the user agent must <a>report the error</a> for the relevant <a>script</a>, with the problematic position (line number and column
  number) in the resource containing the script, using the <a>global object</a> specified by
  the script's <a>settings object</a> as the target. If the error is still <i>not handled</i> after this, then the error may be reported to
  the user.

  When an exception is thrown during the execution of one of the scripts associated with a
  <code>Document</code>, and the exception is not caught, the user agent must <a>report the
  exception</a>.

  <h6 id="the-errorevent-interface"><dfn>The <code>ErrorEvent</code> interface</dfn></h6>

  </div>

  <pre class="idl" data-highlight="webidl">
[Constructor(DOMString type, optional <a>ErrorEventInit</a> eventInitDict), Exposed=(Window, Worker)]
interface <dfn>ErrorEvent</dfn> : <a>Event</a> {
  readonly attribute DOMString <a>message</a>;
  readonly attribute DOMString <a>filename</a>;
  readonly attribute unsigned long <a>lineno</a>;
  readonly attribute unsigned long <a>colno</a>;
  readonly attribute any <a>error</a>;
};

dictionary <dfn>ErrorEventInit</dfn> : <a>EventInit</a> {
  DOMString message;
  DOMString filename;
  unsigned long lineno;
  unsigned long colno;
  any error;
};
</pre>

  The <dfn><code>message</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to the
  empty string. It represents the error message.

  The <dfn><code>filename</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to the
  empty string. It represents the <a>absolute URL</a> of the script in which the error
  originally occurred.

  The <dfn><code>lineno</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to
  zero. It represents the line number where the error occurred in the script.

  The <dfn><code>colno</code></dfn> attribute must return the value
  it was initialized to. When the object is created, this attribute must be initialized to zero. It
  represents the column number where the error occurred in the script.

  The <dfn><code>error</code></dfn> attribute must return the value
  it was initialized to. When the object is created, this attribute must be initialized to null.
  Where appropriate, it is set to the object representing the error (e.g. the exception object in
  the case of an uncaught DOM exception).

  <div class="impl">

  <h4 id="event-loops"><dfn>Event loops</dfn></h4>

  <h5 id="definitions"><dfn>Definitions</dfn></h5>

  To coordinate events, user interaction, scripts, rendering, networking, and so forth, user
  agents must use <dfn>event loops</dfn> as described in this section. There are
  two kinds of event loops: those for <a>browsing contexts</a>, and
  those for <a>workers</a>.

  There must be at least one <a>browsing context</a> <a>event loop</a> per user
  agent, and at most one per <a>unit of related similar-origin browsing contexts</a>.

  <p class="note">
When there is more than one <a>event loop</a> for a <a>unit of related
  browsing contexts</a>, complications arise when a <a>browsing context</a> in that group
  is <a>navigated</a> such that it switches from one <a>unit of related
  similar-origin browsing contexts</a> to another. This specification does not currently describe
  how to handle these complications.
</p>

  A <a>browsing context</a> <a>event loop</a> always has at least one <a>browsing
  context</a>. If such an <a>event loop</a>'s <a>browsing
  contexts</a> all go away, then the <a>event loop</a> goes away as well. A <a>browsing
  context</a> always has an <a>event loop</a> coordinating its activities.

  <a>Worker event loops</a> are simpler: each worker has one
  <a>event loop</a>, and the <a>worker processing model</a>
  manages the <a>event loop</a>'s lifetime.

  <hr />

  An <a>event loop</a> has one or more <dfn>task queues</dfn>. A
  <a>task queue</a> is an ordered list of <dfn>tasks</dfn>, which are
  algorithms that are responsible for such work as:

  <dl>

   <dt>Events</dt>

   <dd>

    Dispatching an <code>Event</code> object at a particular
    <code>EventTarget</code> object is often done by a dedicated task.

    <p class="note">
Not all events are dispatched using the <a>task queue</a>, many are
    dispatched during other tasks.
</p>

   </dd>

   <dt>Parsing</dt>

   <dd>The <a>HTML parser</a> tokenizing one or more bytes, and then processing any
   resulting tokens, is typically a task.</dd>

   <dt>Callbacks</dt>

   <dd>Calling a callback is often done by a dedicated task.</dd>

   <dt>Using a resource</dt>

   <dd>When an algorithm <a>fetches</a> a resource, if the fetching
   occurs in a non-blocking fashion then the processing of the resource once some or all of the
   resource is available is performed by a task.</dd>

   <dt>Reacting to DOM manipulation</dt>

   <dd>Some elements have tasks that trigger in response to DOM manipulation, e.g. when that
   element is <a>inserted into the document</a>.

  </dl>

  Each <a>task</a> in a <a>browsing context</a> <a>event
  loop</a> is associated with a <code>Document</code>; if the task was queued in the context of
  an element, then it is the element's <a>node document</a>; if the task was queued in the context
  of a <a>browsing context</a>, then it is the <a>browsing context</a>'s <a>active
  document</a> at the time the task was queued; if the task was queued by or for a <a>script</a> then the document is the <a>responsible document</a>
  specified by the script's <a>settings object</a>.

  A <a>task</a> is intended for a specific <a>event loop</a>:
  the <a>event loop</a> that is handling <a>tasks</a> for the
  <a>task</a>'s associated <code>Document</code> or <span
  title="workers">worker</span>.

  When a user agent is to <dfn>queue a task</dfn>, it must add the given task to one of the <a>task queues</a> of the relevant <a>event loop</a>.

  Each <a>task</a> is defined as coming from a specific <dfn>task
  source</dfn>. All the tasks from one particular <a>task source</a> and destined to a
  particular <a>event loop</a> (e.g. the callbacks generated by timers of a
  <code>Document</code>, the events fired for mouse movements over that <code>Document</code>, the
  tasks queued for the parser of that <code>Document</code>) must always be added to the same
  <a>task queue</a>, but <a>tasks</a> from different <a>task sources</a> may be placed in different <a>task
  queues</a>.

  <p class="example">
For example, a user agent could have one <a>task queue</a> for mouse and
  key events (the <a>user interaction task source</a>), and another for everything else. The
  user agent could then give keyboard and mouse events preference over other tasks three quarters of
  the time, keeping the interface responsive but not starving other task queues, and never
  processing events from any one <a>task source</a> out of order.
</p>

  Each <a>event loop</a> has a <dfn>currently running task</dfn>. Initially, this is null.
  It is used to handle reentrancy. Each <a>event loop</a> also has a <dfn>performing a
  microtask checkpoint</dfn> flag, which must initially be false. It is used to prevent reentrant
  invocation of the <a>perform a microtask checkpoint</a> algorithm.

  <hr />

  A user agent may have one <dfn>storage mutex</dfn>. This mutex is used to control access to
  shared state like cookies. At any one point, the <a>storage mutex</a> is either free, or
  owned by a particular <a>event loop</a> or instance of the <a>fetching</a> algorithm.

  If a user agent does not implement a <a>storage mutex</a>, it is exempt from implementing
  the requirements that require it to acquire or release it.

  <p class="note">
User agent implementors have to make a choice between two evils. On the one hand,
  not implementing the storage mutex means that there is a risk of data corruption: a site could,
  for instance, try to read a cookie, increment its value, then write it back out, using the new
  value of the cookie as a unique identifier for the session; if the site does this twice in two
  different browser windows at the same time, it might end up using the same "unique" identifier for
  both sessions, with potentially disastrous effects. On the other hand, implementing the storage
  mutex has potentially serious performance implications: whenever a site uses Web Storage or
  cookies, all other sites that try to use Web Storage or cookies are blocked until the first site
  finishes.
</p>

  <p class="warning">So far, all browsers faced with this decision have opted to not implement the
  <a>storage mutex</a>.</p>

  Whenever a <a>script</a> calls into a <a>plugin</a>, and
  whenever a <a>plugin</a> calls into a <a>script</a>, the user
  agent must release the <a>storage mutex</a>.

  <h5 id="processing-model"><dfn>Processing model</dfn></h5>

  An <a>event loop</a> must continually run through the following steps for as long as it
  exists:

  <ol>

   <li>

    Select the oldest <a>task</a> on one of the <a>event
    loop</a>'s <a>task queues</a>, if any, ignoring, in the case of a
    <a>browsing context</a> <a>event loop</a>, tasks whose associated
    <code>Document</code>s are not <a>fully active</a>. The user agent may pick any <a>task
    queue</a>. If there is no task to select, then jump to the <i>microtasks</i> step below.

   </li>

   <li>Set the <a>event loop</a>'s <a>currently running task</a> to the <a>task</a> selected in the previous step.</li>

   <li><i>Run</i>: Run the selected <a>task</a>.</li>

   <li>Set the <a>event loop</a>'s <a>currently running task</a> back to
   null.</li>

   <li>If the <a>storage mutex</a> is now owned by the <a>event loop</a>, release it
   so that it is once again free.</li>

   <li>Remove the task that was run in the <i>run</i> step above from its <a>task
   queue</a>.</li>

   <li><i>Microtasks</i>: <a>Perform a microtask checkpoint</a>.</li>

   <li>

    <i>Update the rendering</i>: If this <a>event loop</a> is a <a>browsing
    context</a> <a>event loop</a> (as opposed to a <span title='workers'>worker</span>
    <a>event loop</a>), then run the following substeps.

    <ol>

     <li>Let <var>now</var> be the value that would be returned by the <code>Performance</code>
     object's <code>now()</code> method. [[!HRT]]

     <li>

      Let <var>docs</var> be the list of <code>Document</code> objects associated with the
      <a>event loop</a> in question, sorted arbitrarily except that the following conditions
      must be met:

      <ul>

       <li>Any <code>Document</code> <var>B</var> that is <a>nested through</a> a
       <code>Document</code> <var>A</var> must be listed after <var>A</var> in the list.</li>

       <li>If there are two documents <var>A</var> and <var>B</var> whose <a>browsing contexts</a> are both <a>nested
       browsing contexts</a> and their <a>browsing context
       containers</a> are both elements in the same <code>Document</code> <var>C</var>, then the
       order of <var>A</var> and <var>B</var> in the list must match the relative <a>tree
       order</a> of their respective <a>browsing context
       containers</a> in <var>C</var>.</li>

      </ul>

      In the steps below that iterate over <var>docs</var>, each <code>Document</code> must be
      processed in the order it is found in the list.

     </li>

     <li>

      If there is a <a>top-level browsing context</a> <var>B</var> that the user agent
      believes would not benefit from having its rendering updated at this time, then remove from
      <var>docs</var> all <code>Document</code> objects whose <a>browsing context</a>'s
      <a>top-level browsing context</a> is <var>B</var>.

      <p class="note">
Whether a <a>top-level browsing context</a> would benefit from having
      its rendering updated depends on various factors, such as the update frequency. For example,
      if the browser is attempting to achieve a 60 Hz refresh rate, then these steps are only
      necessary every 60th of a second (about 16.7ms). If the browser finds that a <a>top-level
      browsing context</a> is not able to sustain this rate, it might drop to a more sustainable
      30Hz for that set of <code>Document</code>s, rather than occasionally dropping frames. (This
      specification does not mandate any particular model for when to update the rendering.)
      Similarly, if a <a>top-level browsing context</a> is in the background, the user agent
      might decide to drop that page to a much slower 4Hz, or even less.
</p>

     </li>

     <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run the resize steps</dfn> for
     that <code>Document</code>, passing in <var>now</var> as the timestamp. <a>\[CSSOMVIEW]</a></li>

     <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run the scroll steps</dfn> for
     that <code>Document</code>, passing in <var>now</var> as the timestamp. <a>\[CSSOMVIEW]</a></li>

     <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>evaluate media queries and
     report changes</dfn> for that <code>Document</code>, passing in <var>now</var> as the
     timestamp. [[!CSSOMVIEW]]</li>

     <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run CSS animations and send
     events</dfn> for that <code>Document</code>, passing in <var>now</var> as the timestamp. <a>\[CSSANIMATIONS]</a></li>

     <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run the fullscreen rendering
     steps</dfn> for that <code>Document</code>, passing in <var>now</var> as the timestamp. <a>\[FULLSCREEN]</a></li>

     <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <a>run the animation frame
     callbacks</a> for that <code>Document</code>, passing in <var>now</var> as the
     timestamp.</li>

     <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, update the rendering or user
     interface of that <code>Document</code> and its <a>browsing context</a> to reflect the
     current state.</li>

    </ol>

   </li>

   <li>If this is a <span title='workers'>worker</span> <a>event loop</a> (i.e. one running for a
   <code>WorkerGlobalScope</code>), but there are no <a>tasks</a> in the
   <a>event loop</a>'s <a>task queues</a> and the
   <code>WorkerGlobalScope</code> object's <a>closing</a> flag is true, then destroy the <a>event
   loop</a>, aborting these steps, resuming the <a>run a worker</a> steps described in the
   <span title='workers'>Web Worker</span> section below.</li>

   <li>Return to the <a>first step</a> of the <a>event loop</a>.</li>

  </ol>

  <hr />

  Each <a>event loop</a> has a <dfn>microtask queue</dfn>. A <dfn>microtask</dfn> is a
  <a>task</a> that is originally to be queued on the <a>microtask
  queue</a> rather than a <a>task queue</a>. There are two kinds of <a>microtasks</a>: <dfn>solitary callback
  microtasks</dfn>, and <dfn>compound microtasks</dfn>.

  <p class="note">
This specification only has <a>solitary
  callback microtasks</a>. Specifications that use <a>compound
  microtasks</a> have to take extra care to <a>wrap callbacks</a> to handle <a>spinning the event
  loop</a>.
</p>

  When an algorithm requires a <a>microtask</a> to be <dfn>queued</dfn>, it must be appended to the relevant <a>event loop</a>'s
  <a>microtask queue</a>; the <a>task source</a> of such a <a>microtask</a> is the
  <dfn>microtask task source</dfn>.

  <p class="note">
It is possible for a <a>microtask</a> to be moved to a regular <a>task
  queue</a>, if, during its initial execution, it <a>spins the
  event loop</a>. In that case, the <a>microtask task source</a> is the <a>task
  source</a> used. Normally, the <a>task source</a> of a <a>microtask</a> is
  irrelevant.
</p>

  When a user agent is to <dfn>perform a microtask checkpoint</dfn>, if the <a>performing a
  microtask checkpoint</a> flag is false, then the user agent must run the following steps:

  <ol>

   <li>Let the <a>performing a microtask checkpoint</a> flag be true.</li>

   <li><i>Microtask queue handling</i>: If the <a>event loop</a>'s <a>microtask
   queue</a> is empty, jump to the <i>done</i> step below.</li>

   <li>Select the oldest <a>microtask</a> on the <a>event loop</a>'s <a>microtask
   queue</a>.</li>

   <li>Set the <a>event loop</a>'s <a>currently running task</a> to the <a>task</a> selected in the previous step.</li>

   <li>

    <i>Run</i>: Run the selected <a>task</a>.

    <p class="note">
This might involve invoking scripted callbacks, which eventually calls the
    <a>clean up after running a callback</a> steps, which call this <a>perform a microtask
    checkpoint</a> algorithm again, which is why we use the <a>performing a microtask
    checkpoint</a> flag to avoid reentrancy.
</p>

   </li>

   <li>Set the <a>event loop</a>'s <a>currently running task</a> back to
   null.</li>

   <li>If the <a>storage mutex</a> is now owned by the <a>event loop</a>, release it
   so that it is once again free.</li>

   <li>Remove the <a>microtask</a> run in the step above from the <a>microtask
   queue</a>, and return to the <i>microtask queue handling</i> step.</li>

   <li><i>Done</i>: Let the <a>performing a microtask checkpoint</a> flag be
   false.</li>

  </ol>

  If, while a <a>compound microtask</a> is running, the user agent is required to
  <dfn>execute a compound microtask subtask</dfn> to run a series of steps, the user agent must run
  the following steps:

  <ol>

   <li>Let <var>parent</var> be the <a>event loop</a>'s <a>currently running
   task</a> (the currently running <a>compound microtask</a>).</li>

   <li>Let <var>subtask</var> be a new <a>task</a> that
   consists of running the given series of steps. The <a>task source</a> of such a
   <a>microtask</a> is the <a>microtask task source</a>. This is a <dfn>compound
   microtask subtask</dfn>.</li>

   <li>Set the <a>event loop</a>'s <a>currently running task</a> to <var>subtask</var>.</li>

   <li>Run <var>subtask</var>.</li>

   <li>Set the <a>event loop</a>'s <a>currently running task</a> back to <var>parent</var>.</li>

  </ol>

  <hr />

  When an algorithm running <a>in parallel</a> is to <dfn>await a stable state</dfn>, the
  user agent must <a>queue a microtask</a> that runs the following steps, and must then stop
  executing (execution of the algorithm resumes when the microtask is run, as described in the
  following steps):

  <ol>

   <li>Run the algorithm's <dfn>synchronous section</dfn>.</li>

   <li>Resumes execution of the algorithm <a>in parallel</a>, if appropriate, as described
   in the algorithm's steps.</li>

  </ol>

  <p class="note">
Steps in <a>synchronous sections</a> are marked
  with &#x231B;.
</p>

  <hr />

  When an algorithm says to <dfn>spin the event loop</dfn> until a condition <var>goal</var> is met, the user agent must run the following steps:

  <ol>

   <li>

    Let <var>task</var> be the <a>event loop</a>'s <a>currently running
    task</a>.

    <p class="note">
This might be a <a>microtask</a>, in which case it is a <a>solitary
    callback microtask</a>. It could also be a <a>compound microtask subtask</a>, or a
    regular <a>task</a> that is not a <a>microtask</a>. It will
    <em>not</em> be a <a>compound microtask</a>.
</p>

   </li>

   <li>Let <var>task source</var> be <var>task</var>'s <a>task
   source</a>.</li>

   <li>Let <var>old stack of script settings objects</var> be a copy of the <a>stack
   of script settings objects</a>.</li>

   <li>Empty the <a>stack of script settings objects</a>.</li>

   <li><a>Run the global script clean-up jobs</a>.</li>

   <li><a>Perform a microtask checkpoint</a>.</li>

   <li>

    Stop <var>task</var>, allowing whatever algorithm that invoked it to resume, but
    continue these steps <a>in parallel</a>.

    <p class="note">
This causes one of the following algorithms to continue: the <a>event
    loop</a>'s main set of steps, the <a>perform a microtask checkpoint</a> algorithm, or
    the <a>execute a compound microtask subtask</a> algorithm to continue.
</p>

   </li>

   <li>Wait until the condition <var>goal</var> is met.</li>

   <li><a>Queue a task</a> to continue running these steps, using the <a>task
   source</a> <var>task source</var>. Wait until this new task runs before continuing
   these steps.</li>

   <li>Replace the <a>stack of script settings objects</a> with the <var>old
   stack of script settings objects</var>.</li>

   <li>Return to the caller.</li>

  </ol>

  <hr />

  Some of the algorithms in this specification, for historical reasons, require the user agent to
  <dfn>pause</dfn> while running a <a>task</a> until a condition <var>goal</var> is met. This means running the following steps:

  <ol>

   <li>If necessary, update the rendering or user interface of any <code>Document</code> or
   <a>browsing context</a> to reflect the current state.</li>

   <li>Wait until the condition <var>goal</var> is met. While a user agent has a paused
   <a>task</a>, the corresponding <a>event loop</a> must not run
   further <a>tasks</a>, and any script in the currently running <a>task</a> must block. User agents should remain responsive to user input
   while paused, however, albeit in a reduced capacity since the <a>event loop</a> will not be
   doing anything.</li>

  </ol>

  <hr />

  When a user agent is to <dfn>obtain the storage mutex</dfn> as part of running a <a>task</a>, it must run through the following steps:

  <ol>

   <li>If the <a>storage mutex</a> is already owned by this <a>task</a>'s <a>event loop</a>, then abort these steps.</li>

   <li>Otherwise, <a>pause</a> until the <a>storage mutex</a> can be taken by the
   <a>event loop</a>.</li>

   <li>Take ownership of the <a>storage mutex</a>.</li>

  </ol>

  </div>

  <div class="impl">

  <h5 id="generic-task-sources"><dfn>Generic task sources</dfn></h5>

  The following <a>task sources</a> are used by a number of mostly
  unrelated features in this and other specifications.

  <dl>

   <dt>The <dfn>DOM manipulation task source</dfn></dt>

   <dd>

    This <a>task source</a> is used for features that react to DOM manipulations, such as
    things that happen in a non-blocking fashion when an element is <a>inserted into the document</a>.

   </dd>

   <dt>The <dfn>user interaction task source</dfn></dt>

   <dd>

    This <a>task source</a> is used for features that react to user interaction, for
    example keyboard or mouse input.

    Events sent in response to user input (e.g. <code>click</code> events) must be fired using <a>tasks</a> <a>queued</a> with the <a>user
    interaction task source</a>. [[!UIEVENTS]]

   </dd>

   <dt>The <dfn>networking task source</dfn></dt>

   <dd>

    This <a>task source</a> is used for features that trigger in response to network
    activity.

   </dd>

   <dt>The <dfn>history traversal task source</dfn></dt>

   <dd>

    This <a>task source</a> is used to queue calls to <code>history.back()</code> and similar APIs.

   </dd>

  </dl>

  </div>

  <h4 id="events"><dfn>Events</dfn></h4>

  <h5 id="event-handlers"><dfn>Event handlers</dfn></h5>

  Many objects can have <dfn>event handlers</dfn> specified. These act as non-capture event
  listeners for the object on which they are specified. [[!DOM]]

  An <a>event handler</a> has a name, which always starts with
  "<code>on</code>" and is followed by the name of the event for which it is intended.

  An <a>event handler</a> can either have the value null, or be set
  to a callback object<span class="impl">, or be set to an <a>internal raw uncompiled
  handler</a></span>. The <code>EventHandler</code> callback function type describes how this is
  exposed to scripts. <span class="impl">Initially, event handlers must be set to null.</span>

  Event handlers are exposed in one of two ways.

  The first way, common to all event handlers, is as an <a>event handler IDL attribute</a>.

  The second way is as an <a>event handler content
  attribute</a>. Event handlers on <a>HTML elements</a> and some of the event handlers on
  <code>Window</code> objects are exposed in this way.

  <div class="impl">

  <hr />

  An <dfn>event handler IDL attribute</dfn> is an IDL
  attribute for a specific <a>event handler</a>. The name of the IDL
  attribute is the same as the name of the <a>event handler</a>.

  <a>Event handler IDL attributes</a>, on setting, must set the corresponding <a>event handler</a> to their new value, and on getting, must return the
  result of <a>getting the current value of the event handler</a> in question (this can throw
  an exception, in which case the getting propagates it to the caller, it does not catch it).

  If an <a>event handler IDL attribute</a> exposes an
  <a>event handler</a> of an object that doesn't exist, it must always
  return null on getting and must do nothing on setting.

  <p class="note">
This can happen in particular for <a>event
  handler IDL attribute</a> on <code>body</code> elements that do not have corresponding
  <code>Window</code> objects.
</p>

  <p class="note">
Certain event handler IDL attributes have additional requirements, in particular
  the <code>onmessage</code> attribute of
  <code>MessagePort</code> objects.
</p>

  <hr />

  </div>

  An <dfn>event handler content attribute</dfn> is a
  content attribute for a specific <a>event handler</a>. The name of
  the content attribute is the same as the name of the <a>event
  handler</a>.

  <a>Event handler content attributes</a>, when specified, must contain valid JavaScript
  code which, when parsed, would match the <code>FunctionBody</code> production after
  automatic semicolon insertion. [[!ECMA262]]

  <div class="impl">

  When an <a>event handler content attribute</a>
  is set, the user agent must set the corresponding <a>event
  handler</a> to an <a>internal raw uncompiled handler</a> consisting of the attribute's
  new value and the script location where the attribute was set to this value

  When an event handler content attribute is removed, the user agent must set the corresponding
  <a>event handler</a> to null.

  <hr />

  When an <a>event handler</a> <var>H</var> of an element
  or object <var>T</var> implementing the <code>EventTarget</code> interface is first set
  to a non-null value, the user agent must append an <a>event
  listener</a> to the list of <a>event listeners</a>
  associated with <var>T</var> with <i>type</i> set to the <dfn>event handler event
  type</dfn> corresponding to <var>H</var>, <i>capture</i> set to false, and
  <i>listener</i> set to <a>the event handler processing algorithm</a> defined below. [[!DOM]]

  <p class="note">
The <i>listener</i> is emphatically <em>not</em> the <a>event handler</a> itself. Every event handler ends up registering the same
  <i>listener</i>, the algorithm defined below, which takes care of invoking the right callback, and
  processing the callback's return value.
</p>

  <p class="note">
This only happens the first time the <a>event
  handler</a>'s value is set. Since listeners are called in the order they were registered, the
  order of event listeners for a particular event type will always be first the event listeners
  registered with <code>addEventListener()</code> before
  the first time the <a>event handler</a> was set to a non-null value,
  then the callback to which it is currently set, if any, and finally the event listeners registered
  with <code>addEventListener()</code> <em>after</em> the
  first time the <a>event handler</a> was set to a non-null value.
</p>

  </div>

  <div class="example">

   This example demonstrates the order in which event listeners are invoked. If the button in
   this example is clicked by the user, the page will show four alerts, with the text "ONE", "TWO",
   "THREE", and "FOUR" respectively.

   <pre highlight="html">
&lt;button>Start Demo&lt;/button>
&lt;script>
 var button = document.getElementById('test');
 button.addEventListener('click', function () { alert('ONE') }, false);
 button.setAttribute('onclick', "alert('NOT CALLED')"); // event handler listener is registered here
 button.addEventListener('click', function () { alert('THREE') }, false);
 button.onclick = function () { alert('TWO'); };
 button.addEventListener('click', function () { alert('FOUR') }, false);
&lt;/script>
</pre>

  </div>

  <div class="impl">

  <p class="note">
The interfaces implemented by the event object do not influence whether an <a>event handler</a> is triggered or not.
</p>

  <dfn>The event handler processing algorithm</dfn> for an <a>event
  handler</a> <var>H</var> and an <code>Event</code> object <var>E</var> is as
  follows:

  <ol>

   <li>

    Let <var>callback</var> be the result of <a>getting the current value of the
    event handler</a> <var>H</var>.

   </li>

   <li>If <var>callback</var> is null, then abort these steps.</li>

   <li>

    Process the <code>Event</code> object <var>E</var> as follows:

    <dl class="switch">

     <dt>If <var>E</var> is an <code>ErrorEvent</code> object and the <a>event handler IDL attribute</a>'s type is
     <code>OnErrorEventHandler</code></dt>

     <dd>

      <a>Invoke</a> <var>callback</var> with five
      arguments, the first one having the value of <var>E</var>'s <code>message</code> attribute, the second having the value of
      <var>E</var>'s <code>filename</code> attribute, the third
      having the value of <var>E</var>'s <code>lineno</code>
      attribute, the fourth having the value of <var>E</var>'s <code>colno</code> attribute, the fifth having the value of
      <var>E</var>'s <code>error</code> attribute, and with the <i>callback this value</i> set to <var>E</var>'s <code>currentTarget</code>. Let <var>return value</var> be the
      callback's return value. [[!WEBIDL]]

     </dd>

     <dt>Otherwise</dt>

     <dd>

      <a>Invoke</a> <var>callback</var>
      with one argument, the value of which is the <code>Event</code> object <var>E</var>,
      with the <i>callback this value</i> set to <var>E</var>'s <code>currentTarget</code>. Let <var>return value</var> be the callback's return value. [[!WEBIDL]]

     </dd>

    </dl>

    In this step, <dfn>invoke</dfn> means to <a>invoke the Web IDL callback function</a>.

    If an exception gets thrown by the callback, end these steps and allow the exception to
    propagate. (It will propagate to the <a>DOM event dispatch
    logic</a>, which will then <a>report the exception</a>.)

   </li>

   <li>

    Process <var>return value</var> as follows:

    <dl class="switch">

     <dt>If the event type is <code>mouseover</code></dt>
     <dt>If the event type is <code>error</code> and <var>E</var> is an <code>ErrorEvent</code> object</dt>

     <dd>If <var>return value</var> is a Web IDL boolean true value, then cancel the event.</dd>

     <dt>If the event type is <code>beforeunload</code></dt>

     <dd>

      <p class="note">
The <a>event handler IDL
      attribute</a>'s type is <code>OnBeforeUnloadEventHandler</code>, and the <var>return value</var> will therefore have been coerced into either the value null or a
      DOMString.
</p>

      If the <var>return value</var> is null, then cancel the event.

      Otherwise, If the <code>Event</code> object <var>E</var> is a
      <code>BeforeUnloadEvent</code> object, and the <code>Event</code> object <var>E</var>'s <code>returnValue</code>
      attribute's value is the empty string, then set the <code>returnValue</code> attribute's value to <var>return value</var>.

     </dd>

     <dt>Otherwise</dt>

     <dd>If <var>return value</var> is a Web IDL boolean false value, then cancel the
     event.</dd>

    </dl>

   </li>

  </ol>

  </div>

  <hr />

  The <code>EventHandler</code> callback function type represents a callback used for event
  handlers. It is represented in Web IDL as follows:

  <pre class="idl" data-highlight="webidl">
[TreatNonObjectAsNull]
callback <dfn>EventHandlerNonNull</dfn> = any (<a>Event</a> event);
typedef <a>EventHandlerNonNull</a>? <dfn>EventHandler</dfn>;
</pre>

  <p class="note">
In JavaScript, any <code>Function</code> object implements
  this interface.
</p>

  <div class="example">

   For example, the following document fragment:

   <pre highlight="javascript">&lt;body onload="alert(this)" onclick="alert(this)"></pre>

   ...leads to an alert saying "<code>[object&nbsp;Window]</code>" when the document is
   loaded, and an alert saying "<code>[object&nbsp;HTMLBodyElement]</code>" whenever the
   user clicks something in the page.

  </div>

  <p class="note">
The return value of the function affects whether the event is canceled or not:
  <span class="impl">as described above,</span> if the return value is false, the event is canceled
  (except for <code>mouseover</code> events, where the return value has to
  be true to cancel the event). With <code>beforeunload</code> events,
  the value is instead used to determine the message to show the user.
</p>

  For historical reasons, the <code>onerror</code> handler has different
  arguments:

  <pre class="idl" data-highlight="webidl">
[TreatNonObjectAsNull]
callback <dfn>OnErrorEventHandlerNonNull</dfn> = any ((<a>Event</a> or DOMString) event, optional DOMString source, optional unsigned long lineno, optional unsigned long column, optional any error);
typedef <a>OnErrorEventHandlerNonNull</a>? <dfn>OnErrorEventHandler</dfn>;
</pre>

  Similarly, the <code>onbeforeunload</code> handler has a
  different return value:

  <pre class="idl" data-highlight="webidl">
[TreatNonObjectAsNull]
callback <dfn>OnBeforeUnloadEventHandlerNonNull</dfn> = DOMString? (<a>Event</a> event);
typedef <a>OnBeforeUnloadEventHandlerNonNull</a>? <dfn>OnBeforeUnloadEventHandler</dfn>;
</pre>

  <div class="impl">

  <hr />

  An <dfn>internal raw uncompiled handler</dfn> is a tuple with the following information:

  <ul class="brief">

   <li>An uncompiled script body

   <li>A location where the script body originated, in case an error needs to be reported

  </ul>

  When the user agent is to <dfn>get the
  current value of the event handler</dfn> <var>H</var>, it must run these steps:

  <ol>

   <li>

    If <var>H</var>'s value is an <a>internal raw uncompiled handler</a>, run these
    substeps:

    <ol>

     <li>

      If <var>H</var> is an element's <a>event
      handler</a>, then let <var>element</var> be the element, and <var>document</var> be the element's <a>node document</a>.

      Otherwise, <var>H</var> is a <code>Window</code> object's <a>event handler</a>: let <var>element</var> be null, and let <var>document</var> be the <code>Document</code> most recently associated with that
      <code>Window</code> object.

     </li>

     <li>If  <var>document</var> is
     not in a <a>browsing context</a>, or if <a>scripting is
     enabled</a> for <var>document</var>'s <a>browsing context</a>, then return
     null and abort the algorithm for <a>getting the current value of the event
     handler</a>.</li>

     <li>Let <var>body</var> be the uncompiled script body in the <a>internal raw
     uncompiled handler</a>.</li>

     <li>Let <var>location</var> be the location where the script body originated, as
     given by the <a>internal raw uncompiled handler</a>.</li>

     <li>If <var>element</var> is not null and <var>element</var> has a
     <a>form owner</a>, let <var>form owner</var> be that <a>form owner</a>.
     Otherwise, let <var>form owner</var> be null.</li>

     <li>Let <var>script settings</var> be the <a>environment settings object</a>
     created for the <code>Window</code> object with which <var>document</var> is
     currently associated.</li>

     <li>Obtain the <a>script execution environment</a> for JavaScript from <var>script settings</var>.</li>

     <li>

      If <var>body</var> is not parsable as <i>FunctionBody</i> or if parsing detects
      an <i>early error</i>, then follow these substeps:

      <ol>

       <li>Set <var>H</var>'s value to null.</li>

       <li><a>Report the error</a> for the appropriate <a>script</a> and with the appropriate position (line number and
       column number) given by <var>location</var>, using the <a>global object</a>
       specified by <var>script settings</var> as the target. If the error is still <i>not handled</i> after this, then the error may be reported
       to the user.</li>

       <li>Jump to the step labeled <i>end</i> below.</li>

      </ol>

      <p class="note">
<i>FunctionBody</i> is defined in ECMAScript edition 5 section 13 Function
      Definition. <i>Early error</i> is defined in ECMAScript edition 5 section 16 Errors. [[!ECMA262]]
</p>

     </li>

     <li>

      If <var>body</var> begins with a Directive Prolog that contains a Use Strict
      Directive then let <var>strict</var> be true, otherwise let <var>strict</var> be false.

      <p class="note">
The terms "Directive Prolog" and "Use Strict Directive" are defined in
      ECMAScript edition 5 section 14.1 Directive Prologs and the Use Strict Directive. [[!ECMA262]]
</p>

     </li>

     <li>

      Using the <a>script execution environment</a> obtained above, create a function
      object (as defined in ECMAScript edition 5 section 13.2 Creating Function Objects), with:

      <dl>

       <dt>Parameter list <var>FormalParameterList</var></dt>

       <dd>

        <dl class="switch">

         <dt>If <var>H</var> is an <code>onerror</code> <a>event handler</a> of a <code>Window</code> object</dt>

         <dd>Let the function have five arguments, named <code>event</code>, <code>source</code>, <code>lineno</code>, <code>colno</code>, and
         <code>error</code>.</dd>

         <dt>Otherwise</dt>

         <dd>Let the function have a single argument called <code>event</code>.</dd>

        </dl>

       </dd>

       <dt>Function body <var>FunctionBody</var></dt>

       <dd>The result of parsing <var>body</var> above.</dd>

       <dt>Lexical Environment <var>Scope</var></dt>

       <dd>

        <ol>

         <li>

          If <var>H</var> is an element's <a>event
          handler</a>, then let <var>Scope</var> be the result of
          NewObjectEnvironment(<var>document</var>, the <var>global
          environment</var>).

          Otherwise, <var>H</var> is a <code>Window</code> object's <a>event handler</a>: let <var>Scope</var> be the <var>global environment</var>.

         </li>

         <li>If <var>form owner</var> is not null, let <var>Scope</var> be
         the result of NewObjectEnvironment(<var>form owner</var>, <var>Scope</var>).</li>

         <li>If <var>element</var> is not null, let <var>Scope</var> be the
         result of NewObjectEnvironment(<var>element</var>, <var>Scope</var>).</li>

        </ol>

        <p class="note">
NewObjectEnvironment() is defined in ECMAScript edition 5 section 10.2.2.3
        NewObjectEnvironment (O, E). [[!ECMA262]]
</p>

       </dd>

       <dt>Boolean flag <var>Strict</var></dt>

       <dd>The value of <var>strict</var>.</dd>

      </dl>

      Let <var>function</var> be this new function.

     </li>

     <li>Let <var>script</var> be a new <a>script</a>.</li>

     <li>Let <var>script</var>'s <a>code entry-point</a> be <var>function</var>.</li>

     <li>Let <var>script</var>'s <a>settings object</a> be <var>script
     settings</var>.</li>

     <li>Set <var>H</var> to <var>function</var>.</li>

    </ol>

   </li>

   <li><i>End</i>: Return <var>H</var>'s value.</li>

  </ol>

  </div>

  <h5 id="event-handlers-on-elements,-document-objects,-and-window-objects"><dfn>Event handlers on elements, <code>Document</code> objects, and <code>Window</code> objects</dfn></h5>

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported by all <a>HTML elements</a>, as both <a>event handler content attributes</a>
  and <a>event handler IDL attributes</a>; and <span class="impl">that must be</span>
  supported by all <code>Document</code> and <code>Window</code> objects, as <a>event handler IDL
  attributes</a>:

  <table>
   <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
   <tbody>
    <tr><td><dfn><code>onabort</code></dfn> <td> <code>abort</code>
    <tr><td><dfn><code>onautocomplete</code></dfn> <td> <code>autocomplete</code>
    <tr><td><dfn><code>onautocompleteerror</code></dfn> <td> <code>autocompleteerror</code>
    <tr><td><dfn><code>oncancel</code></dfn> <td> <code>cancel</code>
    <tr><td><dfn><code>oncanplay</code></dfn> <td> <code>canplay</code>
    <tr><td><dfn><code>oncanplaythrough</code></dfn> <td> <code>canplaythrough</code>
    <tr><td><dfn><code>onchange</code></dfn> <td> <code>change</code>
    <tr><td><dfn><code>onclick</code></dfn> <td> <code>click</code>
    <tr><td><dfn><code>onclose</code></dfn> <td> <code>close</code>
    <tr><td><dfn><code>oncontextmenu</code></dfn> <td> <code>contextmenu</code>
    <tr><td><dfn><code>oncuechange</code></dfn> <td> <code>cuechange</code>
    <tr><td><dfn><code>ondblclick</code></dfn> <td> <code>dblclick</code>
    <tr><td><dfn><code>ondrag</code></dfn> <td> <code>drag</code>
    <tr><td><dfn><code>ondragend</code></dfn> <td> <code>dragend</code>
    <tr><td><dfn><code>ondragenter</code></dfn> <td> <code>dragenter</code>
    <tr><td><dfn><code>ondragexit</code></dfn> <td> <code>dragexit</code>
    <tr><td><dfn><code>ondragleave</code></dfn> <td> <code>dragleave</code>
    <tr><td><dfn><code>ondragover</code></dfn> <td> <code>dragover</code>
    <tr><td><dfn><code>ondragstart</code></dfn> <td> <code>dragstart</code>
    <tr><td><dfn><code>ondrop</code></dfn> <td> <code>drop</code>
    <tr><td><dfn><code>ondurationchange</code></dfn> <td> <code>durationchange</code>
    <tr><td><dfn><code>onemptied</code></dfn> <td> <code>emptied</code>
    <tr><td><dfn><code>onended</code></dfn> <td> <code>ended</code>
    <tr><td><dfn><code>oninput</code></dfn> <td> <code>input</code>
    <tr><td><dfn><code>oninvalid</code></dfn> <td> <code>invalid</code>
    <tr><td><dfn><code>onkeydown</code></dfn> <td> <code>keydown</code>
    <tr><td><dfn><code>onkeypress</code></dfn> <td> <code>keypress</code>
    <tr><td><dfn><code>onkeyup</code></dfn> <td> <code>keyup</code>
    <tr><td><dfn><code>onloadeddata</code></dfn> <td> <code>loadeddata</code>
    <tr><td><dfn><code>onloadedmetadata</code></dfn> <td> <code>loadedmetadata</code>
    <tr><td><dfn><code>onloadstart</code></dfn> <td> <code>loadstart</code>
    <tr><td><dfn><code>onmousedown</code></dfn> <td> <code>mousedown</code>
    <tr><td><dfn><code>onmouseenter</code></dfn> <td> <code>mouseenter</code>
    <tr><td><dfn><code>onmouseleave</code></dfn> <td> <code>mouseleave</code>
    <tr><td><dfn><code>onmousemove</code></dfn> <td> <code>mousemove</code>
    <tr><td><dfn><code>onmouseout</code></dfn> <td> <code>mouseout</code>
    <tr><td><dfn><code>onmouseover</code></dfn> <td> <code>mouseover</code>
    <tr><td><dfn><code>onmouseup</code></dfn> <td> <code>mouseup</code>
    <tr><td><dfn><code>onmousewheel</code></dfn> <td> <code>mousewheel</code>
    <tr><td><dfn><code>onpause</code></dfn> <td> <code>pause</code>
    <tr><td><dfn><code>onplay</code></dfn> <td> <code>play</code>
    <tr><td><dfn><code>onplaying</code></dfn> <td> <code>playing</code>
    <tr><td><dfn><code>onprogress</code></dfn> <td> <code>progress</code>
    <tr><td><dfn><code>onratechange</code></dfn> <td> <code>ratechange</code>
    <tr><td><dfn><code>onreset</code></dfn> <td> <code>reset</code>
    <tr><td><dfn><code>onseeked</code></dfn> <td> <code>seeked</code>
    <tr><td><dfn><code>onseeking</code></dfn> <td> <code>seeking</code>
    <tr><td><dfn><code>onselect</code></dfn> <td> <code>select</code>
    <tr><td><dfn><code>onshow</code></dfn> <td> <code>show</code>
    <tr><td><dfn><code>onsort</code></dfn> <td> <code>sort</code>
    <tr><td><dfn><code>onstalled</code></dfn> <td> <code>stalled</code>
    <tr><td><dfn><code>onsubmit</code></dfn> <td> <code>submit</code>
    <tr><td><dfn><code>onsuspend</code></dfn> <td> <code>suspend</code>
    <tr><td><dfn><code>ontimeupdate</code></dfn> <td> <code>timeupdate</code>
    <tr><td><dfn><code>ontoggle</code></dfn> <td> <code>toggle</code>
    <tr><td><dfn><code>onvolumechange</code></dfn> <td> <code>volumechange</code>
    <tr><td><dfn><code>onwaiting</code></dfn> <td> <code>waiting</code>

  </table>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported by all <a>HTML elements</a> other than <code>body</code> and <code>frameset</code>
  elements, as both <a>event handler content attributes</a> and <a>event handler IDL
  attributes</a>; <span class="impl">that must be</span> supported by all <code>Document</code>
  objects, as <a>event handler IDL attributes</a>; and <span class="impl">that must be</span>
  supported by all <code>Window</code> objects, as <a>event handler IDL attributes</a> on the
  <code>Window</code> objects themselves, and with corresponding <a>event handler content
  attributes</a> and <a>event handler IDL attributes</a> exposed on all <code>body</code>
  and <code>frameset</code> elements that are owned by <a>that
  <code>Window</code> object's <code>Document</code>s</a>:

  <table>
   <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
   <tbody>
    <tr><td><dfn><code>onblur</code></dfn> <td> <code>blur</code>
    <tr><td><dfn><code>onerror</code></dfn> <td> <code>error</code>
    <tr><td><dfn><code>onfocus</code></dfn> <td> <code>focus</code>
    <tr><td><dfn><code>onload</code></dfn> <td> <code>load</code>
    <tr><td><dfn><code>onresize</code></dfn> <td> <code>resize</code>
    <tr><td><dfn><code>onscroll</code></dfn> <td> <code>scroll</code>
  </table>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported by <code>Window</code> objects, as <a>event handler IDL attributes</a> on the
  <code>Window</code> objects themselves, and with corresponding <a>event handler content
  attributes</a> and <a>event handler IDL attributes</a> exposed on all <code>body</code>
  and <code>frameset</code> elements that are owned by <a>that
  <code>Window</code> object's <code>Document</code>s</a>:

  <table>
   <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
   <tbody>
    <tr><td><dfn><code>onafterprint</code></dfn> <td> <code>afterprint</code>
    <tr><td><dfn><code>onbeforeprint</code></dfn> <td> <code>beforeprint</code>
    <tr><td><dfn><code>onbeforeunload</code></dfn> <td> <code>beforeunload</code>
    <tr><td><dfn><code>onhashchange</code></dfn> <td> <code>hashchange</code>
    <tr><td><dfn><code>onlanguagechange</code></dfn> <td> <code>languagechange</code>
    <tr><td><dfn><code>onmessage</code></dfn> <td> <code>message</code>
    <tr><td><dfn><code>onoffline</code></dfn> <td> <code>offline</code>
    <tr><td><dfn><code>ononline</code></dfn> <td> <code>online</code>
    <tr><td><dfn><code>onpagehide</code></dfn> <td> <code>pagehide</code>
    <tr><td><dfn><code>onpageshow</code></dfn> <td> <code>pageshow</code>
    <tr><td><dfn><code>onpopstate</code></dfn> <td> <code>popstate</code>
    <tr><td><dfn><code>onstorage</code></dfn> <td> <code>storage</code>
    <tr><td><dfn><code>onunload</code></dfn> <td> <code>unload</code>
  </table>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported on <code>Document</code> objects as <a>event handler IDL attributes</a>:

  <table>
   <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
   <tbody>
    <tr><td><dfn><code>onreadystatechange</code></dfn> <td> <code>readystatechange</code>
  </table>

  <h6 id="idl-definitions"><dfn>IDL definitions</dfn></h6>

  <pre class="idl" data-highlight="webidl">
[NoInterfaceObject]
interface <dfn>GlobalEventHandlers</dfn> {
  attribute <a>EventHandler</a> <a>onabort</a>;
  attribute <a>EventHandler</a> <a>onautocomplete</a>;
  attribute <a>EventHandler</a> <a>onautocompleteerror</a>;
  attribute <a>EventHandler</a> <a>onblur</a>;
  attribute <a>EventHandler</a> <a>oncancel</a>;
  attribute <a>EventHandler</a> <a>oncanplay</a>;
  attribute <a>EventHandler</a> <a>oncanplaythrough</a>;
  attribute <a>EventHandler</a> <a>onchange</a>;
  attribute <a>EventHandler</a> <a>onclick</a>;
  attribute <a>EventHandler</a> <a>onclose</a>;
  attribute <a>EventHandler</a> <a>oncontextmenu</a>;
  attribute <a>EventHandler</a> <a>oncuechange</a>;
  attribute <a>EventHandler</a> <a>ondblclick</a>;
  attribute <a>EventHandler</a> <a>ondrag</a>;
  attribute <a>EventHandler</a> <a>ondragend</a>;
  attribute <a>EventHandler</a> <a>ondragenter</a>;
  attribute <a>EventHandler</a> <a>ondragexit</a>;
  attribute <a>EventHandler</a> <a>ondragleave</a>;
  attribute <a>EventHandler</a> <a>ondragover</a>;
  attribute <a>EventHandler</a> <a>ondragstart</a>;
  attribute <a>EventHandler</a> <a>ondrop</a>;
  attribute <a>EventHandler</a> <a>ondurationchange</a>;
  attribute <a>EventHandler</a> <a>onemptied</a>;
  attribute <a>EventHandler</a> <a>onended</a>;
  attribute <a>OnErrorEventHandler</a> <a>onerror</a>;
  attribute <a>EventHandler</a> <a>onfocus</a>;
  attribute <a>EventHandler</a> <a>oninput</a>;
  attribute <a>EventHandler</a> <a>oninvalid</a>;
  attribute <a>EventHandler</a> <a>onkeydown</a>;
  attribute <a>EventHandler</a> <a>onkeypress</a>;
  attribute <a>EventHandler</a> <a>onkeyup</a>;
  attribute <a>EventHandler</a> <a>onload</a>;
  attribute <a>EventHandler</a> <a>onloadeddata</a>;
  attribute <a>EventHandler</a> <a>onloadedmetadata</a>;
  attribute <a>EventHandler</a> <a>onloadstart</a>;
  attribute <a>EventHandler</a> <a>onmousedown</a>;
  [LenientThis] attribute <a>EventHandler</a> <a>onmouseenter</a>;
  [LenientThis] attribute <a>EventHandler</a> <a>onmouseleave</a>;
  attribute <a>EventHandler</a> <a>onmousemove</a>;
  attribute <a>EventHandler</a> <a>onmouseout</a>;
  attribute <a>EventHandler</a> <a>onmouseover</a>;
  attribute <a>EventHandler</a> <a>onmouseup</a>;
  attribute <a>EventHandler</a> <a>onmousewheel</a>;
  attribute <a>EventHandler</a> <a>onpause</a>;
  attribute <a>EventHandler</a> <a>onplay</a>;
  attribute <a>EventHandler</a> <a>onplaying</a>;
  attribute <a>EventHandler</a> <a>onprogress</a>;
  attribute <a>EventHandler</a> <a>onratechange</a>;
  attribute <a>EventHandler</a> <a>onreset</a>;
  attribute <a>EventHandler</a> <a>onresize</a>;
  attribute <a>EventHandler</a> <a>onscroll</a>;
  attribute <a>EventHandler</a> <a>onseeked</a>;
  attribute <a>EventHandler</a> <a>onseeking</a>;
  attribute <a>EventHandler</a> <a>onselect</a>;
  attribute <a>EventHandler</a> <a>onshow</a>;
  attribute <a>EventHandler</a> <a>onsort</a>;
  attribute <a>EventHandler</a> <a>onstalled</a>;
  attribute <a>EventHandler</a> <a>onsubmit</a>;
  attribute <a>EventHandler</a> <a>onsuspend</a>;
  attribute <a>EventHandler</a> <a>ontimeupdate</a>;
  attribute <a>EventHandler</a> <a>ontoggle</a>;
  attribute <a>EventHandler</a> <a>onvolumechange</a>;
  attribute <a>EventHandler</a> <a>onwaiting</a>;
};

[NoInterfaceObject]
interface <dfn>WindowEventHandlers</dfn> {
  attribute <a>EventHandler</a> <a>onafterprint</a>;
  attribute <a>EventHandler</a> <a>onbeforeprint</a>;
  attribute <a>OnBeforeUnloadEventHandler</a> <a>onbeforeunload</a>;
  attribute <a>EventHandler</a> <a>onhashchange</a>;
  attribute <a>EventHandler</a> <a>onlanguagechange</a>;
  attribute <a>EventHandler</a> <a>onmessage</a>;
  attribute <a>EventHandler</a> <a>onoffline</a>;
  attribute <a>EventHandler</a> <a>ononline</a>;
  attribute <a>EventHandler</a> <a>onpagehide</a>;
  attribute <a>EventHandler</a> <a>onpageshow</a>;
  attribute <a>EventHandler</a> <a>onpopstate</a>;
  attribute <a>EventHandler</a> <a>onstorage</a>;
  attribute <a>EventHandler</a> <a>onunload</a>;
};
</pre>

  <div class="impl">

  <h5 id="event-firing"><dfn>Event firing</dfn></h5>

  Certain operations and methods are defined as firing events on elements. For example, the <code>click()</code> method on the <code>HTMLElement</code> interface is defined as
  firing a <code>click</code> event on the element. [[!UIEVENTS]]

  <dfn>Firing a simple event named <var>e</var></dfn>
  means that a <a>trusted</a> event with the name <var>e</var>, which does not bubble (except where otherwise stated) and is not cancelable
  (except where otherwise stated), and which uses the <code>Event</code> interface, must be created
  and <a>dispatched</a> at the given target.

  <dfn>Firing a synthetic mouse event named <var>e</var></dfn> means that an event with the name <var>e</var>, which is <a>trusted</a> (except where otherwise stated), does not bubble
  (except where otherwise stated), is not cancelable (except where otherwise stated), and which uses
  the <code>MouseEvent</code> interface, must be created and dispatched at the given target. The
  event object must have its <code>screenX</code>, <code>screenY</code>, <code>clientX</code>, <code>clientY</code>, and <code>button</code>
  attributes initialized to 0, its <code>ctrlKey</code>, <code>shiftKey</code>,
  <code>altKey</code>, and <code>metaKey</code> attributes initialized according
  to the current state of the key input device, if any (false for any keys that are not available),
  its <code>detail</code> attribute initialized to 1, its <code>relatedTarget</code> attribute initialized to null (except
  where otherwise stated), and its <code>view</code> attribute initialized to the <code>Window</code> object of the <code>Document</code> object of the given target node, if any, or else null. The <code>getModifierState()</code> method on the object must
  return values appropriately describing the state of the key input device at the time the event is
  created.

  <dfn>Firing a <code>click</code> event</dfn>
  means <a>firing a synthetic mouse event named <code>click</code></a>, which bubbles and is cancelable.

  The default action of these events is to do nothing except where otherwise stated.

  </div>

  <div class="impl">

  <h5 id="events-and-the-window-object"><dfn>Events and the <code>Window</code> object</dfn></h5>

  When an event is dispatched at a DOM node in a <code>Document</code> in a <a>browsing
  context</a>, if the event is not a <code>load</code> event, the user agent
  must act as if, for the purposes of <a>event dispatching</a>,
  the <code>Window</code> object is the parent of the <code>Document</code> object. [[!DOM]]

  </div>

  <h3 id="base64-utility-methods"><dfn>Base64 utility methods</dfn></h3>

  The <code>atob()</code> and <code>btoa()</code> methods allow authors to transform content to and from
  the base64 encoding.

  <pre class="idl" data-highlight="webidl">
[NoInterfaceObject, Exposed=(Window, Worker)]
interface <dfn>WindowBase64</dfn> {
  DOMString <a>btoa</a>(DOMString btoa);
  DOMString <a>atob</a>(DOMString atob);
};
<a>Window</a> implements <a>WindowBase64</a>;
<a>WorkerGlobalScope</a> implements <a>WindowBase64</a>;
</pre>

  <p class="note">
In these APIs, for mnemonic purposes, the "b" can be considered to stand for
  "binary", and the "a" for "ASCII". In practice, though, for primarily historical reasons, both the
  input and output of these functions are Unicode strings.
</p>

  <dl class="domintro">

   <dt><var>result</var> = <var>window</var> . <code>btoa</code>( <var>data</var> )</dt>

   <dd>

    Takes the input data, in the form of a Unicode string containing only characters in the range
    U+0000 to U+00FF, each representing a binary byte with values 0x00 to 0xFF respectively, and
    converts it to its base64 representation, which it returns.

    Throws an <code>InvalidCharacterError</code> exception if the input string contains any
    out-of-range characters.

   </dd>

   <dt><var>result</var> = <var>window</var> . <code>atob</code>( <var>data</var> )</dt>

   <dd>

    Takes the input data, in the form of a Unicode string containing base64-encoded binary data,
    decodes it, and returns a string consisting of characters in the range U+0000 to U+00FF, each
    representing a binary byte with values 0x00 to 0xFF respectively, corresponding to that binary
    data.

    Throws an <code>InvalidCharacterError</code> exception if the input string is not valid
    base64 data.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>btoa()</code></dfn> method must throw an
  <code>InvalidCharacterError</code> exception if the method's first argument contains any character
  whose code point is greater than U+00FF. Otherwise, the user agent must convert that argument to a
  sequence of octets whose <var>n</var>th octet is the eight-bit representation of the code
  point of the <var>n</var>th character of the argument, and then must apply the base64
  algorithm to that sequence of octets, and return the result. [[!RFC4648]]

  The <dfn><code>atob()</code></dfn> method must run the following
  steps to parse the string passed in the method's first argument:

  <ol>

   <li>Let <var>input</var> be the string being parsed.</li>

   <li>Let <var>position</var> be a pointer into <var>input</var>, initially
   pointing at the start of the string.</li>

   <li>Remove all <a>space characters</a> from <var>input</var>.</li>

   <li>If the length of <var>input</var> divides by 4 leaving no remainder, then: if
   <var>input</var> ends with one or two U+003D EQUALS SIGN (=) characters, remove them
   from <var>input</var>.</li>

   <li>If the length of <var>input</var> divides by 4 leaving a remainder of 1, throw an
   <code>InvalidCharacterError</code> exception and abort these steps.

   <li>

    If <var>input</var> contains a character that is not in the following list of
    characters and character ranges, throw an <code>InvalidCharacterError</code> exception and abort
    these steps:

    <ul class="brief">
     <li>U+002B PLUS SIGN (+)
     <li>U+002F SOLIDUS (/)
     <li><a>Alphanumeric ASCII characters</a>
    </ul>

   </li>

   <li>Let <var>output</var> be a string, initially empty.</li>

   <li>Let <var>buffer</var> be a buffer that can have bits appended to it, initially
   empty.</li>

   <li>

    While <var>position</var> does not point past the end of <var>input</var>,
    run these substeps:

    <ol>

     <li>

      Find the character pointed to by <var>position</var> in the first column of the
      following table. Let <var>n</var> be the number given in the second cell of the same
      row.

      <div>
       <table>
        <thead>
         <tr>
          <th>Character
          <th>Number
        <tbody>
         <tr><td>A<td>0
         <tr><td>B<td>1
         <tr><td>C<td>2
         <tr><td>D<td>3
         <tr><td>E<td>4
         <tr><td>F<td>5
         <tr><td>G<td>6
         <tr><td>H<td>7
         <tr><td>I<td>8
         <tr><td>J<td>9
         <tr><td>K<td>10
         <tr><td>L<td>11
         <tr><td>M<td>12
         <tr><td>N<td>13
         <tr><td>O<td>14
         <tr><td>P<td>15
         <tr><td>Q<td>16
         <tr><td>R<td>17
         <tr><td>S<td>18
         <tr><td>T<td>19
         <tr><td>U<td>20
         <tr><td>V<td>21
         <tr><td>W<td>22
         <tr><td>X<td>23
         <tr><td>Y<td>24
         <tr><td>Z<td>25
         <tr><td>a<td>26
         <tr><td>b<td>27
         <tr><td>c<td>28
         <tr><td>d<td>29
         <tr><td>e<td>30
         <tr><td>f<td>31
         <tr><td>g<td>32
         <tr><td>h<td>33
         <tr><td>i<td>34
         <tr><td>j<td>35
         <tr><td>k<td>36
         <tr><td>l<td>37
         <tr><td>m<td>38
         <tr><td>n<td>39
         <tr><td>o<td>40
         <tr><td>p<td>41
         <tr><td>q<td>42
         <tr><td>r<td>43
         <tr><td>s<td>44
         <tr><td>t<td>45
         <tr><td>u<td>46
         <tr><td>v<td>47
         <tr><td>w<td>48
         <tr><td>x<td>49
         <tr><td>y<td>50
         <tr><td>z<td>51
         <tr><td>0<td>52
         <tr><td>1<td>53
         <tr><td>2<td>54
         <tr><td>3<td>55
         <tr><td>4<td>56
         <tr><td>5<td>57
         <tr><td>6<td>58
         <tr><td>7<td>59
         <tr><td>8<td>60
         <tr><td>9<td>61
         <tr><td>+<td>62
         <tr><td>/<td>63
       </table>
      </div>

     </li>

     <li>Append to <var>buffer</var> the six bits corresponding to <var>number</var>, most significant bit first.</li>

     <li>If <var>buffer</var> has accumulated 24 bits, interpret them as three 8-bit
     big-endian numbers. Append the three characters with code points equal to those numbers to <var>output</var>, in the same order, and then empty <var>buffer</var>.</li>

     <li>Advance <var>position</var> by one character.</li>

    </ol>

   </li>

   <li>

    If <var>buffer</var> is not empty, it contains either 12 or 18 bits. If it contains
    12 bits, discard the last four and interpret the remaining eight as an 8-bit big-endian number.
    If it contains 18 bits, discard the last two and interpret the remaining 16 as two 8-bit
    big-endian numbers. Append the one or two characters with code points equal to those one or two
    numbers to <var>output</var>, in the same order.

    <p class="note">
The discarded bits mean that, for instance, <code>atob("YQ")</code> and
    <code>atob("YR")</code> both return "<code>a</code>".
</p>

   </li>

   <li>Return <var>output</var>.</li>

  </ol>

  </div>

  <h3 id="dynamic-markup-insertion"><dfn><dfn>Dynamic markup insertion</dfn></dfn></h3>

  <p class="note">
APIs for dynamically inserting markup into the document interact with the parser,
  and thus their behavior varies depending on whether they are used with <a>HTML documents</a>
  (and the <a>HTML parser</a>) or XHTML in <a>XML documents</a> (and the <a>XML
  parser</a>).
</p>

  <h4 id="opening-the-input-stream"><dfn>Opening the input stream</dfn></h4>

  The <dfn><code>open()</code></dfn> method comes in several variants
  with different numbers of arguments.

  <dl class="domintro">

   <dt><var>document</var> = <var>document</var> . <code>open</code>( [ <var>type</var> [, <var>replace</var> ] ] )</dt>

   <dd>

    Causes the <code>Document</code> to be replaced in-place, as if it was a new
    <code>Document</code> object, but reusing the previous object, which is then returned.

    If the <var>type</var> argument is omitted or has the value
    "<code>text/html</code>", then the resulting <code>Document</code> has an HTML parser associated
    with it, which can be given data to parse using <code>document.write()</code>. Otherwise, all content passed to <code>document.write()</code> will be parsed as plain text.

    If the <var>replace</var> argument is present and has the value "<code>replace</code>", the existing entries in the session history for the
    <code>Document</code> object are removed.

    The method has no effect if the <code>Document</code> is still being parsed.

    Throws an <code>InvalidStateError</code> exception if the <code>Document</code> is an <a>XML document</a>.

   </dd>

   <dt><var>window</var> = <var>document</var> . <code>open</code>( <var>url</var>, <var>name</var>, <var>features</var> [, <var>replace</var> ] )</dt>

   <dd>

    Works like the <code>window.open()</code> method.

   </dd>

  </dl>

  <div class="impl">

  <code>Document</code> objects have an <dfn>ignore-opens-during-unload counter</dfn>, which is
  used to prevent scripts from invoking the <code>document.open()</code>
  method (directly or indirectly) while the document is <a>being
  unloaded</a>. Initially, the counter must be set to zero.

  When called with two arguments (or fewer), the <code>document.open()</code>
  method must act as follows:

  <ol>

   <li>If the <code>Document</code> object is not flagged as an <a>HTML
   document</a>, throw an <code>InvalidStateError</code> exception and abort these steps.</li>

   <li>If the <code>Document</code> object is not an <a>active document</a>, then abort
   these steps.</li>

   <li>Let <var>type</var> be the value of the first argument.</li>

   <li>

    If the second argument is an <a>ASCII case-insensitive</a> match for the value
    "replace", then let <var>replace</var> be true.

    Otherwise, if the <a>browsing context</a>'s <a>session history</a> contains only
    one <code>Document</code>, and that was the <code>about:blank</code> <code>Document</code>
    created when the <a>browsing context</a> was <a>created</a>, and that <code>Document</code> has
    never had the <a>unload a document</a> algorithm invoked on it (e.g. by a previous call to
    <code>document.open()</code>), then let <var>replace</var> be
    true.

    Otherwise, let <var>replace</var> be false.

   </li>

   <li>

    If the <code>Document</code> has an <a>active parser</a> whose <a>script nesting
    level</a> is greater than zero, then the method does nothing. Abort these steps and return
    the <code>Document</code> object on which the method was invoked.

    <p class="note">
This basically causes <code>document.open()</code> to
    be ignored when it's called in an inline script found during parsing, while still letting it
    have an effect when called from a non-parser task such as a timer callback or event handler.
</p>

   </li>

   <li>

    Similarly, if the <code>Document</code>'s <a>ignore-opens-during-unload counter</a> is
    greater than zero, then the method does nothing. Abort these steps and return the
    <code>Document</code> object on which the method was invoked.

    <p class="note">
This basically causes <code>document.open()</code> to
    be ignored when it's called from a <code>beforeunload</code> <code>pagehide</code>, or <code>unload</code> event
    handler while the <code>Document</code> is being unloaded.
</p>

   </li>

   <li>Release the <a>storage mutex</a>.</li>

   <li>Set the <code>Document</code>'s <i>salvageable</i> state to false.</li>

   <li><a>Prompt to unload</a> the
   <code>Document</code> object. If the user <a>refused to allow the document to be
   unloaded</a>, then abort these steps and return the <code>Document</code> object on which the
   method was invoked.</li>

   <li><a>Unload</a> the <code>Document</code> object, with the
   <var>recycle</var> parameter set to true.</li>

   <li><a>Abort</a> the <code>Document</code>.</li>

   <li>Unregister all event listeners registered on the <code>Document</code> node and its
   descendants.

   <li>Remove any <a>tasks</a> associated with the
   <code>Document</code> in any <a>task source</a>.</li>

   <li>Remove all child nodes of the document, without firing any mutation events.</li>

   <li>

    Replace the <code>Document</code>'s singleton objects with new instances of those objects.
    (This includes in particular the <code>Window</code>, <code>Location</code>,
    <code>History</code>, <code>ApplicationCache</code>, and <code>Navigator</code>, objects, the
    various <code>BarProp</code> objects, the two <code>Storage</code> objects, the various
    <code>HTMLCollection</code> objects, and objects defined by other specifications, like
    <code>Selection</code>. It also includes all the Web
    IDL prototypes in the JavaScript binding, including the <code>Document</code> object's
    prototype.)

    <p class="note">
The new <code>Window</code> object has a new <a>environment settings
    object</a>.
</p>

   </li>

   <li>Set the new <code>Window</code> object's <a>HTTPS
   state</a> to the <a>HTTPS state</a> of the
   <code>Window</code> object of the <a>responsible document</a> specified by the <a>entry
   settings object</a>.</li>

   <li>Change the <a>document's character encoding</a> to UTF-8.</li>

   <li>If the <code>Document</code> is <a>ready for post-load tasks</a>, then set the
   <code>Document</code> object's <a>reload override flag</a> and set the
   <code>Document</code>'s <a>reload override buffer</a> to the empty string.</li>

   <li>Set the <code>Document</code>'s <i>salvageable</i> state back to true.</li>

   <li>Change <a>the document's address</a> to the <a>address</a> of the <a>responsible document</a> specified by the <a>entry
   settings object</a>.</li>

   <li>If the <code>Document</code>'s <a>iframe load in progress</a> flag is set, set the
   <code>Document</code>'s <a>mute iframe load</a> flag.</li>

   <li>Create a new <a>HTML parser</a> and associate it with the document. This is a
   <dfn>script-created parser</dfn> (meaning that it can be closed by the <code>document.open()</code> and <code>document.close()</code> methods, and that the tokenizer will wait for
   an explicit call to <code>document.close()</code> before emitting an
   end-of-file token). The encoding <a>confidence</a> is
   <i>irrelevant</i>.</li>

   <li>Set the <a>current document readiness</a> of the document to "<code>loading</code>".</li>

   <li>

    If <var>type</var> is an <a>ASCII case-insensitive</a> match for the string
    "<code>replace</code>", then, for historical reasons, set it to the string "<code>text/html</code>".

    Otherwise:

    If the <var>type</var> string contains a U+003B SEMICOLON character (;), remove the
    first such character and all characters from it up to the end of the string.

    <a>Strip leading and trailing whitespace</a> from <var>type</var>.

   </li>

   <li>

    If <var>type</var> is <em>not</em> now an <a>ASCII case-insensitive</a> match
    for the string "<code>text/html</code>", then act as if the tokenizer had emitted a start tag
    token with the tag name "pre" followed by a single U+000A LINE FEED (LF) character, then switch the
    <a>HTML parser</a>'s tokenizer to the <a>PLAINTEXT state</a>.

   </li>

   <li>

    Remove all the entries in the <a>browsing context</a>'s <a>session history</a>
    after the <a>current entry</a>. If the <a>current entry</a> is the last entry in the
    session history, then no entries are removed.

    <p class="note">
This <a>doesn't necessarily have to affect</a> the user
    agent's user interface.
</p>

   </li>

   <li>Remove any <a>tasks</a> queued by the <a>history traversal
   task source</a> that are associated with any <code>Document</code> objects in the
   <a>top-level browsing context</a>'s <a>document family</a>.</li>

   <li>Remove any earlier entries that share the same <code>Document</code>.</li>

   <li>If <var>replace</var> is false, then add a new entry, just before the last entry,
   and associate with the new entry the text that was parsed by the previous parser associated with
   the <code>Document</code> object, as well as the state of the document at the start of these
   steps. This allows the user to step backwards in the session history to see the page before it
   was blown away by the <code>document.open()</code> call. This new entry
   does not have a <code>Document</code> object, so a new one will be created if the session history
   is traversed to that entry.</li>

   <li>Finally, set the <a>insertion point</a> to point at just before the end of the
   <a>input stream</a> (which at this point will be empty).</li>

   <li>Return the <code>Document</code> on which the method was invoked.</li>

  </ol>

  <p class="note">
The <code>document.open()</code> method does not affect
  whether a <code>Document</code> is <a>ready for post-load tasks</a> or <a>completely
  loaded</a>.
</p>

  When called with four arguments, the <code>open()</code> method on
  the <code>Document</code> object must call the <code>open()</code> method on the
  <code>Window</code> object of the <code>Document</code> object, with the same arguments as the
  original call to the <code>open()</code> method, and return whatever
  that method returned. If the <code>Document</code> object has no <code>Window</code> object, then
  the method must throw an <code>InvalidAccessError</code> exception.

  </div>

  <h4 id="closing-the-input-stream"><dfn>Closing the input stream</dfn></h4>

  <dl class="domintro">

   <dt><var>document</var> . <code>close</code>()</dt>

   <dd>

    Closes the input stream that was opened by the <code>document.open()</code> method.

    Throws an <code>InvalidStateError</code> exception if the
    <code>Document</code> is an <a>XML
    document</a>.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>close()</code></dfn> method must run the following
  steps:

  <ol>

   <li>If the <code>Document</code> object is not flagged as an <a>HTML
   document</a>, throw an <code>InvalidStateError</code> exception and abort these
   steps.</li>

   <li>If there is no <a>script-created parser</a> associated with the document, then abort
   these steps.</li>

   <li>Insert an <a>explicit "EOF" character</a> at the end of the parser's <a>input
   stream</a>.</li>

   <li>If there is a <a>pending parsing-blocking script</a>, then abort these
   steps.</li>

   <li>Run the tokenizer, processing resulting tokens as they are emitted, and stopping when the
   tokenizer reaches the <a>explicit "EOF" character</a> or <a>spins the event loop</a>.</li>

  </ol>

  </div>

  <h4 id="document.write()"><dfn><code>document.write()</code></dfn></h4>

  <dl class="domintro">

   <dt><var>document</var> . <code>write</code>(<var>text</var>...)</dt>

   <dd>

    In general, adds the given string(s) to the <code>Document</code>'s input stream.

    <p class="warning">This method has very idiosyncratic behavior. In some cases, this method can
    affect the state of the <a>HTML parser</a> while the parser is running, resulting in a DOM
    that does not correspond to the source of the document (e.g. if the string written is the string
    "<code>&lt;plaintext&gt;</code>" or "<code>&lt;!--</code>"). In other cases,
    the call can clear the current page first, as if <code>document.open()</code> had been called. In yet more cases, the method
    is simply ignored, or throws an exception. To make matters worse, the exact behavior of this
    method can in some cases be dependent on network latency, which can lead to failures that are very hard to debug. <strong>For all these reasons, use
    of this method is strongly discouraged.</strong></p>

    This method throws an <code>InvalidStateError</code> exception when invoked on <a>XML
    documents</a>.

   </dd>

  </dl>

  <div class="impl">

  <code>Document</code> objects have an <dfn>ignore-destructive-writes counter</dfn>, which is
  used in conjunction with the processing of <code>script</code> elements to prevent external
  scripts from being able to use <code>document.write()</code> to blow
  away the document by implicitly calling <code>document.open()</code>.
  Initially, the counter must be set to zero.

  The <dfn><code>document.write(...)</code></dfn> method must act as
  follows:

  <ol>

   <li>

    If the method was invoked on an <a>XML document</a>, throw an
    <code>InvalidStateError</code> exception and abort these steps.

   </li>

   <li>If the <code>Document</code> object is not an <a>active document</a>, then abort
   these steps.</li>

   <li>

    If the <a>insertion point</a> is undefined and either the <code>Document</code>'s
    <a>ignore-opens-during-unload counter</a> is greater than zero or the
    <code>Document</code>'s <a>ignore-destructive-writes counter</a> is greater than zero,
    abort these steps.

   </li>

   <li>

    If the <a>insertion point</a> is undefined, call the <code>open()</code> method on the <code>document</code>
    object (with no arguments). If the user <a>refused to allow the document to be
    unloaded</a>, then abort these steps. Otherwise, the <a>insertion point</a> will point
    at just before the end of the (empty) <a>input stream</a>.

   </li>

   <li>

    Insert the string consisting of the concatenation of all the arguments to the method into the
    <a>input stream</a> just before the <a>insertion point</a>.

   </li>

   <li>

    If the <code>Document</code> object's <a>reload override flag</a> is set, then append
    the string consisting of the concatenation of all the arguments to the method to the
    <code>Document</code>'s <a>reload override buffer</a>.

   </li>

   <li>

    If there is no <a>pending parsing-blocking script</a>, have the <a>HTML
    parser</a> process the characters that were inserted, one at a time, processing resulting
    tokens as they are emitted, and stopping when the tokenizer reaches the insertion point or when
    the processing of the tokenizer is aborted by the tree construction stage (this can happen if a
    <code>script</code> end tag token is emitted by the tokenizer).

    <p class="note">
If the <code>document.write()</code> method was
    called from script executing inline (i.e. executing because the parser parsed a set of
    <code>script</code> tags), then this is a <a>reentrant invocation of the
    parser</a>.

   </li>

   <li>

    Finally, return from the method.

   </li>

  </ol>

  </div>

  <h4 id="document.writeln()"><dfn><code>document.writeln()</code></dfn></h4>

  <dl class="domintro">

   <dt><var>document</var> . <code>writeln</code>(<var>text</var>...)</dt>

   <dd>

    Adds the given string(s) to the <code>Document</code>'s input stream, followed by a newline
    character. If necessary, calls the <code>open()</code> method
    implicitly first.

    This method throws an <code>InvalidStateError</code> exception when invoked on <a>XML
    documents</a>.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>document.writeln(...)</code></dfn> method, when
  invoked, must act as if the <code>document.write()</code> method had
  been invoked with the same argument(s), plus an extra argument consisting of a string containing a
  single line feed character (U+000A).

  </div>

  <h3 id="timers"><dfn>Timers</dfn></h3>

  The <code>setTimeout()</code>
  and <code>setInterval()</code>
  methods allow authors to schedule timer-based callbacks.

  <pre class="idl" data-highlight="webidl">
[NoInterfaceObject, Exposed=(Window,Worker)]
interface <dfn>WindowTimers</dfn> {
  long <a>setTimeout</a>(<a>Function</a> handler, optional long timeout = 0, any... arguments);
  long <a>setTimeout</a>(DOMString handler, optional long timeout = 0, any... arguments);
  void <a>clearTimeout</a>(optional long handle = 0);
  long <a>setInterval</a>(<a>Function</a> handler, optional long timeout = 0, any... arguments);
  long <a>setInterval</a>(DOMString handler, optional long timeout = 0, any... arguments);
  void <a>clearInterval</a>(optional long handle = 0);
};
<a>Window</a> implements <a>WindowTimers</a>;
<a>WorkerGlobalScope</a> implements <a>WindowTimers</a>;
</pre>

  <dl class="domintro">

   <dt><var>handle</var> = <var>window</var> . <code>setTimeout</code>( <var>handler</var> [, <var>timeout</var> [, <var>arguments</var>... ] ] )</dt>

   <dd>

    Schedules a timeout to run <var>handler</var> after <var>timeout</var>
    milliseconds. Any <var>arguments</var> are passed straight through to the <var>handler</var>.

   </dd>

   <dt><var>handle</var> = <var>window</var> . <code>setTimeout</code>( <var>code</var> [, <var>timeout</var> ] )</dt>

   <dd>

    Schedules a timeout to compile and run <var>code</var> after <var>timeout</var> milliseconds.

   </dd>

   <dt><var>window</var> . <code>clearTimeout</code>( <var>handle</var> )</dt>

   <dd>

    Cancels the timeout set with <code>setTimeout()</code>
    or <code>setInterval()</code> identified by
    <var>handle</var>.

   </dd>

   <dt><var>handle</var> = <var>window</var> . <code>setInterval</code>( <var>handler</var> [, <var>timeout</var> [, <var>arguments</var>... ] ] )</dt>

   <dd>

    Schedules a timeout to run <var>handler</var> every <var>timeout</var>
    milliseconds. Any <var>arguments</var> are passed straight through to the <var>handler</var>.

   </dd>

   <dt><var>handle</var> = <var>window</var> . <code>setInterval</code>( <var>code</var> [, <var>timeout</var> ] )</dt>

   <dd>

    Schedules a timeout to compile and run <var>code</var> every <var>timeout</var> milliseconds.

   </dd>

   <dt><var>window</var> . <code>clearInterval</code>( <var>handle</var> )</dt>

   <dd>

    Cancels the timeout set with <code>setInterval()
    </code> or <code>setTimeout()</code> identified by <var>
    handle</var>.

   </dd>

  </dl>

  <p class="note">Timers can be nested; after five such nested timers, however, the interval is
  forced to be at least four milliseconds.
</p>

  <p class="note">
This API does not guarantee that timers will run exactly on schedule. Delays due
  to CPU load, other tasks, etc, are to be expected.
</p>

  <div class="impl">

  Each object that implements the <code>WindowTimers</code> interface has a <dfn>list of active
  timers</dfn>. Each entry in this lists is identified by a number, which must be unique within the
  list for the lifetime of the object that implements the <code>WindowTimers</code> interface.

  <hr />

  The <dfn><code>setTimeout()</code></dfn> method must return
  the value returned by the <a>timer initialisation steps</a>, passing them the method's
  arguments, the object on which the method for which the algorithm is running is implemented (a
  <code>Window</code> or <code>WorkerGlobalScope</code> object) as the <var>method
  context</var>, and the <var>repeat</var> flag set to false.

  The <dfn><code>setInterval()</code></dfn> method must
  return the value returned by the <a>timer initialisation steps</a>, passing them the
  method's arguments, the object on which the method for which the algorithm is running is
  implemented (a <code>Window</code> or <code>WorkerGlobalScope</code> object) as the <var>method context</var>, and the <var>repeat</var> flag set to true.

  The <dfn><code>clearTimeout()</code></dfn> and <dfn><code>clearInterval()</code></dfn> methods must clear the
  entry identified as <var>handle</var> from the <a>list of active timers</a> of the
  <code>WindowTimers</code> object on which the method was invoked, if any, where <var>handle</var> is the argument passed to the method. (If <var>handle</var> does
  not identify an entry in the <a>list of active timers</a> of the <code>WindowTimers</code>
  object on which the method was invoked, the method does nothing.)

  <p class="note">
Because <code>clearTimeout()</code> and
  <code>clearInterval()</code> clear entries from the same
  list, either method can be used to clear timers created by
  <code>setTimeout()</code> or
  <code>setInterval()</code>.
</p>

  <hr />

  The <dfn>timer initialisation steps</dfn>, which are invoked with some method arguments, a <var>method context</var>, a <var>repeat</var> flag which can be true or false, and
  optionally (and only if the <var>repeat</var> flag is true) a <var>previous
  handle</var>, are as follows:

  <ol>

   <li>Let <var>method context proxy</var> be <var>method context</var> if that
   is a <code>WorkerGlobalScope</code> object, or else the <code>WindowProxy</code> that corresponds
   to <var>method context</var>.</li>

   <li>If <var>previous handle</var> was provided, let <var>handle</var> be
   <var>previous handle</var>; otherwise, let <var>handle</var> be a
   user-agent-defined integer that is greater than zero that will identify the timeout to be set by
   this call in the <a>list of active timers</a>.</li>

   <li>If <var>previous handle</var> was not provided, add an entry to the <a>list of
   active timers</a> for <var>handle</var>.</li>

   <li>

    Let <var>task</var> be a <a>task</a> that runs the
    following substeps:

    <ol>

     <li>If the entry for <var>handle</var> in the <a>list of active timers</a>
     has been cleared, then abort this <a>task</a>'s substeps.</li>

     <li>

      Run the appropriate set of steps from the following list:

      <dl class="switch">

       <dt>If the first method argument is a <code>Function</code></dt>

       <dd>

        <a>Invoke</a> the <code>Function</code>. Use the third and subsequent method
        arguments (if any) as the arguments for invoking the <code>Function</code>. Use <var>method context proxy</var> as the
        <var>thisArg</var> for invoking the <code>Function</code>. <a>\[ECMA262]</a>

       </dd>

       <dt>Otherwise</dt>

       <dd>

        <ol>

         <li>Let <var>script source</var> be the first method argument.</li>

         <li>Let <var>script language</var> be JavaScript.</li>

         <li>Let <var>settings object</var> be <var>method context</var>'s <a>environment settings
         object</a>.</li>

         <li><a>Create a script</a> using <var>script source</var> as the script source,
         the <a>URL</a> where <var>script source</var> can be found, <var>scripting
         language</var> as the scripting language, and <var>settings object</var> as the
         <a>environment settings object</a>.</li>

        </ol>

       </dd>

      </dl>

     </li>

     <li>If the <var>repeat</var> flag is true, then call <a>timer initialisation
     steps</a> again, passing them the same method arguments, the same <var>method
     context</var>, with the <var>repeat</var> flag still set to true, and with the <var>previous handle</var> set to <var>handler</var>.</li>

    </ol>

   </li>

   <li>Let <var>timeout</var> be the second method argument.</li>

   <li>If the currently running <a>task</a> is a task that was created
   by this algorithm, then let <var>nesting level</var> be the <a>task</a>'s <a>timer nesting level</a>. Otherwise, let <var>nesting level</var> be zero.</li>

   <li>If <var>nesting level</var> is greater than 5, and <var>timeout</var> is
   less than 4, then increase <var>timeout</var> to 4.</li>

   <li>Increment <var>nesting level</var> by one.</li>

   <li>Let <var>task</var>'s <dfn>timer nesting level</dfn> be <var>nesting
   level</var>.</li>

   <li>Return <var>handle</var>, and then continue running this algorithm
   <a>in parallel</a>.</li>

   <li>

    If <var>method context</var> is a <code>Window</code> object, wait until the
    <code>Document</code> associated with <var>method context</var> has been <a>fully
    active</a> for a further <var>timeout</var> milliseconds (not necessarily
    consecutively).

    Otherwise, <var>method context</var> is a <code>WorkerGlobalScope</code> object;
    wait until <var>timeout</var> milliseconds have passed with the worker not suspended
    (not necessarily consecutively).

   </li>

   <li>

    Wait until any invocations of this algorithm that had the same <var>method
    context</var>, that started before this one, and whose <var>timeout</var> is equal to
    or less than this one's, have completed.

    <p class="note">
Argument conversion as defined by Web IDL (for example, invoking <code>toString()</code> methods on objects passed as the first argument) happens in the
    algorithms defined in Web IDL, before this algorithm is invoked.
</p>

    <div class="example">

     So for example, the following rather silly code will result in the log containing "<code>ONE&nbsp;TWO&nbsp;</code>":

     <pre highlight="javascript">var log = '';
function logger(s) { log += s + ' '; }

setTimeout({ toString: function () {
  setTimeout("logger('ONE')", 100);
  return "logger('TWO')";
} }, 100);</pre>

    </div>

   </li>

   <li>

    Optionally, wait a further user-agent defined length of time.

    <p class="note">
This is intended to allow user agents to pad timeouts as needed to optimize the
    power usage of the device. For example, some processors have a low-power mode where the
    granularity of timers is reduced; on such platforms, user agents can slow timers down to fit
    this schedule instead of requiring the processor to use the more accurate mode with its
    associated higher power usage.
</p>

   </li>

   <li>

    <a>Queue</a> the <a>task</a> <var>task</var>.

    <p class="note">
Once the task has been processed, if the <var>repeat</var> flag is
    false, it is safe to remove the entry for <var>handle</var> from the <a>list of
    active timers</a> (there is no way for the entry's existence to be detected past this point,
    so it does not technically matter one way or the other).
</p>

   </li>

  </ol>

  The <a>task source</a> for these <a>tasks</a> is the
  <dfn>timer task source</dfn>.

  </div>

  <div class="example">

   To run tasks of several milliseconds back to back without any delay, while still yielding back
   to the browser to avoid starving the user interface (and to avoid the browser killing the script
   for hogging the CPU), simply queue the next timer before performing work:

   <pre highlight="javascript">function doExpensiveWork() {
  var done = false;
  // ...
  // this part of the function takes up to five milliseconds
  // set done to true if we're done
  // ...
  return done;
}

function rescheduleWork() {
  var handle = setTimeout(rescheduleWork, 0); // preschedule next iteration
  if (doExpensiveWork())
    clearTimeout(handle); // clear the timeout if we don't need it
}

function scheduleWork() {
  setTimeout(rescheduleWork, 0);
}

scheduleWork(); // queues a task to do lots of work</pre>

  </div>

  <h3 id="user-prompts"><dfn>User prompts</dfn></h3>

  <h4 id="simple-dialogs"><dfn>Simple dialogs</dfn></h4>

  <dl class="domintro">

   <dt><var>window</var> . <code>alert</code>(<var>message</var>)</dt>
   <dd>

    Displays a modal alert with the given message, and waits for the user to dismiss it.

    A call to the <code>navigator.yieldForStorageUpdates()</code> method is
    implied when this method is invoked.

   </dd>

   <dt><var>result</var> = <var>window</var> . <code>confirm</code>(<var>message</var>)</dt>
   <dd>

    Displays a modal OK/Cancel prompt with the given message, waits for the user to dismiss it,
    and returns true if the user clicks OK and false if the user clicks Cancel.

    A call to the <code>navigator.yieldForStorageUpdates()</code> method is
    implied when this method is invoked.

   </dd>

   <dt><var>result</var> = <var>window</var> . <code>prompt</code>(<var>message</var> [, <var>default</var>] )</dt>
   <dd>

    Displays a modal text field prompt with the given message, waits for the user to dismiss it,
    and returns the value that the user entered. If the user cancels the prompt, then returns null
    instead. If the second argument is present, then the given value is used as a default.

    A call to the <code>navigator.yieldForStorageUpdates()</code> method is
    implied when this method is invoked.

   </dd>

  </dl>

  <p class="note">
Logic that depends on <a>tasks</a> or <a>microtasks</a>, such as <a>media elements</a>
  loading their <a>media data</a>, are stalled when these methods are invoked.
</p>

  <div class="impl">

  The <dfn><code>alert(<var>message</var>)</code></dfn> method, when
  invoked, must run the following steps:

  <ol>

   <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
   optionally abort these steps.</li>

   <li>Release the <a>storage mutex</a>.</li>

   <li>If the <a>active sandboxing flag set</a> of the <a>active document</a> of
   the <a>responsible browsing context</a> specified by the <a>incumbent settings
   object</a> has the <a>sandboxed modals flag</a> set, then abort these
   steps.</li>

   <li>Optionally, abort these steps. (For example, the user agent might give the user the option
   to ignore all alerts, and would thus abort at this step whenever the method was
   invoked.)</li>

   <li>If the method was invoked with no arguments, then let <var>message</var> be the
   empty string; otherwise, let <var>message</var> be the method's first
   argument.</li>

   <li>Show the given <var>message</var> to the user.</li>

   <li>Optionally, <a>pause</a> while waiting for the user to acknowledge the
   message.</li>

  </ol>

  The <dfn><code>confirm(<var>message</var>)</code></dfn> method,
  when invoked, must run the following steps:

  <ol>

   <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
   optionally abort these steps, returning false.</li>

   <li>Release the <a>storage mutex</a>.</li>

   <li>If the <a>active sandboxing flag set</a> of the <a>active document</a> of
   the <a>responsible browsing context</a> specified by the <a>incumbent settings
   object</a> has the <a>sandboxed modals flag</a> set, then return false and abort these
   steps.</li>

   <li>Optionally, return false and abort these steps. (For example, the user agent might give
   the user the option to ignore all prompts, and would thus abort at this step whenever the method
   was invoked.)</li>

   <li>Show the given <var>message</var> to the user, and ask the user to respond with a
   positive or negative response.</li>

   <li><a>Pause</a> until the user responds either positively or negatively.</li>

   <li>If the user responded positively, return true; otherwise, the user responded negatively:
   return false.</li>

  </ol>

  The <dfn><code>prompt(<var>message</var>, <var>default</var>)</code></dfn> method, when invoked, must run the following steps:

  <ol>

   <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
   optionally abort these steps, returning null.</li>

   <li>Release the <a>storage mutex</a>.</li>

   <li>If the <a>active sandboxing flag set</a> of the <a>active document</a> of
   the <a>responsible browsing context</a> specified by the <a>incumbent settings
   object</a> has the <a>sandboxed modals flag</a> set, then return null and abort these
   steps.</li>

   <li>Optionally, return null and abort these steps. (For example, the user agent might give the
   user the option to ignore all prompts, and would thus abort at this step whenever the method was
   invoked.)</li>

   <li>Show the given <var>message</var> to the user, and ask the user to either respond
   with a string value or abort. The response must be defaulted to the value given by
   <var>default</var>.</li>

   <li><a>Pause</a> while waiting for the user's response.</li>

   <li>If the user aborts, then return null; otherwise, return the string that the user responded
   with.</li>

  </ol>

  </div>

  <h4 id="printing"><dfn>Printing</dfn></h4>

  <dl class="domintro">

   <dt><var>window</var> . <code>print</code>()</dt>

   <dd>

    Prompts the user to print the page.

    A call to the <code>navigator.yieldForStorageUpdates()</code> method is
    implied when this method is invoked.

   </dd>

  </dl>

  <div class="impl">

  When the <dfn><code>print()</code></dfn> method is invoked, if the
  <code>Document</code> is <a>ready for post-load tasks</a>, then the user agent must
  run the <a>printing steps</a> <a>in parallel</a>. Otherwise, the user agent must only set the
  <dfn>print when loaded</dfn> flag on the <code>Document</code>.

  User agents should also run the <a>printing steps</a> whenever the user asks for the
  opportunity to <a>obtain a physical form</a> (e.g. printed copy), or the representation of a
  physical form (e.g. PDF copy), of a document.

  The <dfn>printing steps</dfn> are as follows:

  <ol>

   <li>

    The user agent may display a message to the user or abort these steps (or both).

    <p class="example">
For instance, a kiosk browser could silently ignore any invocations of the
    <code>print()</code> method.
</p>

    <p class="example">
For instance, a browser on a mobile device could detect that there are no
    printers in the vicinity and display a message saying so before continuing to offer a "save to
    PDF" option.
</p>

   </li>

   <li>

     If the <a>active sandboxing flag set</a> of the <a>active document</a> of
     the <a>responsible browsing context</a> specified by the <a>incumbent settings
     object</a> has the <a>sandboxed modals flag</a> set, then abort these
     steps.

     <p class="note">
If the printing dialog is blocked by a <code>Document</code>'s sandbox,
     then neither the <code>beforeprint</code> nor <code>afterprint</code> events will be fired.
</p>

   </li>

   <li>

    The user agent must <a>fire a simple event</a> named <code>beforeprint</code> at the <code>Window</code> object of the
    <code>Document</code> that is being printed, as well as any <a>nested browsing contexts</a> in it.

    <p class="example">
The <code>beforeprint</code> event can be used to
    annotate the printed copy, for instance adding the time at which the document was printed.
</p>

   </li>

   <li>

    The user agent must release the <a>storage mutex</a>.

   </li>

   <li>

    The user agent should offer the user the opportunity to <a>obtain a physical form</a>
    (or the representation of a physical form) of the document. The user agent may wait for the user
    to either accept or decline before returning; if so, the user agent must <a>pause</a>
    while the method is waiting. Even if the user agent doesn't wait at this point, the user agent
    must use the state of the relevant documents as they are at this point in the algorithm if and
    when it eventually creates the alternate form.

   </li>

   <li>

    The user agent must <a>fire a simple event</a> named <code>afterprint</code> at the <code>Window</code> object of the
    <code>Document</code> that is being printed, as well as any <a>nested browsing contexts</a> in it.

    <p class="example">
The <code>afterprint</code> event can be used to
    revert annotations added in the earlier event, as well as showing post-printing UI. For
    instance, if a page is walking the user through the steps of applying for a home loan, the
    script could automatically advance to the next step after having printed a form or other.
</p>

   </li>

  </ol>

  </div>

  <h4 id="dialogs-implemented-using-separate-documents-with-showmodaldialog()"><dfn>Dialogs implemented using separate documents with <code>showModalDialog()</code></dfn></h4>

  <p class="critical">This feature is in the process of being removed from the Web platform. (This
  is a long process that takes many years.) Using the <code>showModalDialog()</code> API at this time is highly discouraged.</p>

  <div class="impl">

  The <dfn><code>showModalDialog(<var>url</var>, <var>argument</var>)</code></dfn> method, when invoked,
  must cause the user agent to run the following steps:

  <ol>

   <li>

    <a>Resolve</a> <var>url</var> relative to the
    <a>API base URL</a> specified by the <a>entry settings object</a>.

    If this fails, then throw a <code>SyntaxError</code> exception and abort these steps.

   </li>

   <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
   optionally abort these steps, returning the empty string.</li>

   <li>

    Release the <a>storage mutex</a>.

   </li>

   <li>

    If the user agent is configured such that this invocation of <code>showModalDialog()</code> is somehow disabled, then return the empty
    string and abort these steps.

    <p class="note">
User agents are expected to disable this method in certain cases to avoid user
    annoyance (e.g. as part of their popup blocker feature). For instance, a user agent could
    require that a site be safelisted before enabling this method, or the user agent could be
    configured to only allow one modal dialog at a time.
</p>

   </li>

   <li>

    If the <a>active sandboxing flag set</a> of the <a>active document</a> of the
    <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> has either the <a>sandboxed auxiliary navigation browsing context flag</a>
    or <a>sandboxed modals flag</a> set, then return the empty string and abort these
    steps.

   </li>

   <li>

    Let <var>incumbent origin</var> be the <a>effective script origin</a>
    specified by the <a>incumbent settings object</a> at the time the <code>showModalDialog()</code> method was called.

   </li>

   <li>

    Let <var>the list of background browsing contexts</var> be a list of all the
    browsing contexts that:

    <ul>

     <li>are part of the same <a>unit of related browsing contexts</a> as the browsing context
     of the <code>Window</code> object on which the <code>showModalDialog()</code> method was called, and that</li>

     <li>have an <a>active document</a> whose <a>origin</a> is the <a>same</a> as <var>incumbent origin</var>,</li>

    </ul>

    ...as well as any browsing contexts that are nested inside any of the browsing contexts
    matching those conditions.

   </li>

   <li>

    Disable the user interface for all the browsing contexts in <var>the list of
    background browsing contexts</var>. This should prevent the user from navigating those browsing
    contexts, causing events to be sent to those browsing context, or editing any content in those
    browsing contexts. However, it does not prevent those browsing contexts from receiving events
    from sources other than the user, from running scripts, from running animations, and so
    forth.

   </li>

   <li>

    <a>Create</a> a new <a>auxiliary browsing context</a>, with the <a>opener browsing
    context</a> being the browsing context of the <code>Window</code> object on which the <code>showModalDialog()</code> method was called. The new auxiliary
    browsing context has no name.

    <p class="note">
This <a>browsing context</a>'s <code>Document</code>s' <code>Window</code>
    objects all implement the <code>WindowModal</code> interface.
</p>

   </li>

   <li>

    Set all the flags in the new browsing context's <a>popup sandboxing flag set</a> that
    are set in the <a>active sandboxing flag set</a> of the <a>active document</a> of
    the <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a>. The <a>responsible browsing context</a> specified by the <a>incumbent
    settings object</a> must be set as the new browsing context's <a>one permitted sandboxed
    navigator</a>.

   </li>

   <li>

    Let the <a>dialog arguments</a> of the new browsing context be set to the value of <var>argument</var>, or the <i>undefined</i> value if the argument was omitted.

   </li>

   <li>

    Let the <a>dialog arguments' origin</a> be <var>incumbent origin</var>.

   </li>

   <li>

    Let the <a>return value</a> of the new browsing context be the <i>undefined</i> value.

   </li>

   <li>

    Let the <a>return value origin</a> be <var>incumbent origin</var>.

   </li>

   <li>

    <a>Navigate</a> the new <a>browsing context</a> to
    the <a>absolute URL</a> that resulted from <a>resolving</a>
    <var>url</var> earlier, with <a>replacement enabled</a>, and with the
    <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> as the <a>source browsing context</a>.

   </li>

   <li>

    <a>Spin the event loop</a> until the new <a>browsing context</a> is <a>closed</a>. The user agent must allow the user to indicate
    that the <a>browsing context</a> is to be closed.

   </li>

   <li>

    Reenable the user interface for all the browsing contexts in <var>the list of
    background browsing contexts</var>.

   </li>

   <li>

    If the <a>auxiliary browsing context</a>'s <a>return value origin</a> at the time
    the browsing context was <a>closed</a> was the <a>same</a> as <var>incumbent origin</var>, then let <var>return value</var> be the <a>auxiliary browsing context</a>'s <a>return
    value</a> as it stood when the browsing context was <a>closed</a>.

    Otherwise, let <var>return value</var> be undefined.

   </li>

   <li>

    Return <var>return value</var>.

   </li>

  </ol>

  The <code>Window</code> objects of <code>Document</code>s hosted by <a>browsing contexts</a> created by the above algorithm must also implement the
  <code>WindowModal</code> interface.

  <p class="note">
When this happens, the members of the <code>WindowModal</code> interface, in
  JavaScript environments, appear to actually be part of the <code>Window</code> interface (e.g.
  they are on the same prototype chain as the <code>window.alert()</code>
  method).
</p>

  </div>

  <pre class="idl" data-highlight="webidl">
[NoInterfaceObject]
interface <dfn>WindowModal</dfn> {
  readonly attribute any <a>dialogArguments</a>;
  attribute any <a>returnValue</a>;
};
</pre>

  <dl class="domintro">

   <dt><var>window</var> . <code>dialogArguments</code></dt>

   <dd>

    Returns the <var>argument</var> argument that was passed to the <code>showModalDialog()</code> method.

   </dd>

   <dt><var>window</var> . <code>returnValue</code> [ = <var>value</var> ]</dt>

   <dd>

    Returns the current return value for the window.

    Can be set, to change the value that will be returned by the <code>showModalDialog()</code> method.

   </dd>

  </dl>

  <div class="impl">

  Such browsing contexts have associated <dfn>dialog arguments</dfn>, which are stored along with
  the <dfn>dialog arguments' origin</dfn>. These values are set by the <code>showModalDialog()</code> method in the algorithm above, when the
  browsing context is created, based on the arguments provided to the method.

  The <dfn><code>dialogArguments</code></dfn> IDL
  attribute, on getting, must check whether its browsing context's <a>active document</a>'s
  <a>effective script origin</a> is the <a>same</a> as the <a>dialog arguments'
  origin</a>. If it is, then the browsing context's <a>dialog arguments</a> must be
  returned unchanged. Otherwise, the IDL attribute must return <i>undefined</i>.

  These browsing contexts also have an associated <dfn>return value</dfn> and <dfn>return value
  origin</dfn>. As with the previous two values, these values are set by the <code>showModalDialog()</code> method in the algorithm above, when the
  browsing context is created.

  The <dfn><code>returnValue</code></dfn> IDL attribute, on
  getting, must check whether its browsing context's <a>active document</a>'s <a>effective
  script origin</a> is the <a>same</a> as the current <a>return
  value origin</a>. If it is, then the browsing context's <a>return value</a> must be
  returned unchanged. Otherwise, the IDL attribute must return <i>undefined</i>. On setting, the
  attribute must set the <a>return value</a> to the given new value, and the <a>return
  value origin</a> to the browsing context's <a>active document</a>'s <a>effective
  script origin</a>.

  </div>

  <p class="note">
The <code>window.close()</code> method can be used to
  close the browsing context.
</p>

  <h3 id="system-state-and-capabilities"><dfn>System state and capabilities</dfn></h3>

  <h4 id="the-navigator-object"><dfn>The <code>Navigator</code> object</dfn></h4>

  <div class="impl">

  The <dfn><code>navigator</code></dfn> attribute of the
  <code>Window</code> interface must return an instance of the <code>Navigator</code> interface,
  which represents the identity and state of the user agent (the client), and allows Web pages to
  register themselves as potential protocol and content handlers:

  </div>

  <pre class="idl" data-highlight="webidl">
interface <dfn>Navigator</dfn> {
  // objects implementing this interface also implement the interfaces given below
};
<a>Navigator</a> implements <a>NavigatorID</a>;
<a>Navigator</a> implements <a>NavigatorLanguage</a>;
<a>Navigator</a> implements <a>NavigatorOnLine</a>;
<a>Navigator</a> implements <a>NavigatorContentUtils</a>;
<a>Navigator</a> implements <a>NavigatorStorageUtils</a>;
<a>Navigator</a> implements <a>NavigatorPlugins</a>;
</pre>

  <div class="impl">

  These interfaces are defined separately so that other specifications can re-use parts of the
  <code>Navigator</code> interface.

  </div>

  <h5 id="client-identification"><dfn>Client identification</dfn></h5>

  <pre class="idl" data-highlight="webidl">
[NoInterfaceObject, Exposed=(Window, Worker)]
interface <dfn>NavigatorID</dfn> {
  [Exposed=Window] readonly attribute DOMString <a>appCodeName</a>; // constant "Mozilla"
  readonly attribute DOMString <a>appName</a>; // constant "Netscape"
  readonly attribute DOMString <a>appVersion</a>;
  readonly attribute DOMString <a>platform</a>;
  [Exposed=Window]readonly attribute DOMString <a>product</a>; // constant "Gecko"
  readonly attribute DOMString <a>userAgent</a>;
};
</pre>

  In certain cases, despite the best efforts of the entire industry, Web browsers have bugs and
  limitations that Web authors are forced to work around.

  This section defines a collection of attributes that can be used to determine, from script, the
  kind of user agent in use, in order to work around these issues.

  Client detection should always be limited to detecting known current versions; future versions
  and unknown versions should always be assumed to be fully compliant.

  <dl class="domintro">

   <dt><var>window</var> . <code>navigator</code> . <code>appCodeName</code></dt>
   <dd>
    Returns the string "<code>Mozilla</code>".
   </dd>

   <dt><var>window</var> . <code>navigator</code> . <code>appName</code></dt>
   <dd>
    Returns the string "<code>Netscape</code>".
   </dd>

   <dt><var>window</var> . <code>navigator</code> . <code>appVersion</code></dt>
   <dd>
    Returns the version of the browser.
   </dd>

   <dt><var>window</var> . <code>navigator</code> . <code>platform</code></dt>
   <dd>
    Returns the name of the platform.
   </dd>

   <dt><var>window</var> . <code>navigator</code> . <code>product</code></dt>
   <dd>
    Returns the string "<code>Gecko</code>".
   </dd>

   <dt><var>window</var> . <code>navigator</code> . <code>taintEnabled</code>()</dt>
   <dd>
    Returns either the string "<code>20030107</code>", or the string "<code>20100101</code>".
   </dd>

   <dt><var>window</var> . <code>navigator</code> . <code>userAgent</code></dt>
   <dd>
    Returns the complete User-Agent header.
   </dd>

  </dl>

  <div class="impl">

  <dl>

   <dt><dfn><code>appCodeName</code></dfn></dt>
   <dd>Must return the string "<code>Mozilla</code>".</dd>

   <dt><dfn><code>appName</code></dfn></dt>
   <dd>Must return the string "<code>Netscape</code>".</dd>

   <dt><dfn><code>appVersion</code></dfn></dt>
   <dd>Must return either the string "<code>4.0</code>" or a string representing the
   version of the browser in detail, e.g. "<code>1.0 (VMS; en-US)
   Mellblomenator/9000</code>".</dd>

   <dt><dfn><code>platform</code></dfn></dt>
   <dd>Must return either the empty string or a string representing the platform on which the
   browser is executing, e.g. "<code>MacIntel</code>", "<code>Win32</code>",
   "<code>FreeBSD i386</code>", "<code>WebTV OS</code>".</dd>

   <dt><dfn><code>product</code></dfn></dt>
   <dd>Must return the string "<code>Gecko</code>".</dd>

   <dt><dfn><code>taintEnabled()</code></dfn></dt>
   <dd>Must return false.</dd>

   <dt><dfn><code>userAgent</code></dfn></dt>
   <dd>Must return the string used for the value of the "<code>User-Agent</code>" header
   in HTTP requests, or the empty string if no such header is ever sent.</dd>

    </dl>

  <p class="warning">Any information in this API that varies from user to user can be used to
  profile the user. In fact, if enough such information is available, a user can actually be
  uniquely identified. For this reason, user agent implementors are strongly urged to include as
  little information in this API as possible.

  </p>

  </div>

  <h5 id="language-preferences"><dfn>Language preferences</dfn></h5>

  <pre class="idl" data-highlight="webidl">
[NoInterfaceObject, Exposed=(Window, Worker)]
interface <dfn>NavigatorLanguage</dfn> {
  readonly attribute DOMString? <a>language</a>;
  readonly attribute DOMString[] <a>languages</a>;
};
</pre>

  <dl class="domintro">

   <dt><var>window</var> . <code>navigator</code> . <code>language</code></dt>
   <dd>
    Returns a language tag representing the user's preferred language.
   </dd>

   <dt><var>window</var> . <code>navigator</code> . <code>languages</code></dt>
   <dd>
    Returns an array of language tags representing the user's preferred languages, with the most preferred language first.
    The most preferred language is the one returned by <code>navigator.language</code>.
   </dd>

  </dl>

  <p class="note">
A <code>languagechange</code> event is fired at the
  <code>Window</code> or <code>WorkerGlobalScope</code> object when the user agent's understanding
  of what the user's preferred languages are changes.
</p>

  <div class="impl">

  <dl>

   <dt><dfn><code>language</code></dfn></dt>
   <dd>Must return a valid BCP 47 language tag representing either <a>a plausible
   language</a> or the user's most preferred language. [[!BCP47]]</dd>

   <dt><dfn><code>languages</code></dfn></dt>
   <dd>

    Must return a <a>read only</a> array of valid BCP 47
    language tags representing either one or more <a>plausible
    languages</a>, or the user's preferred languages, ordered by preference with the most
    preferred language first. The same object must be returned until the user agent needs to return
    different values, or values in a different order. [[!BCP47]]

    Whenever the user agent needs to make the <code>navigator.languages</code> attribute of a <code>Window</code>
    or <code>WorkerGlobalScope</code> object return a new set of language tags, the user agent must
    <a>queue a task</a> to <a>fire a simple event</a> named <code>languagechange</code> at the <code>Window</code> or
    <code>WorkerGlobalScope</code> object and wait until that task begins to be executed before
    actually returning a new value.

    The <a>task source</a> for this <a>task</a> is the
    <a>DOM manipulation task source</a>.

   </dd>

  </dl>

  To determine <dfn>a plausible language</dfn>, the user agent should bear in mind the following:

  <ul>

   <li>Any information in this API that varies from user to user can be used to profile or identify
   the user.

   </li>

   <li>If the user is not using a service that obfuscates the user's point of origin (e.g. the Tor
   anonymity network), then the value that is least likely to distinguish the user from other users
   with similar origins (e.g. from the same IP address block) is the language used by the majority
   of such users. [[!TOR]]</li>

   <li>If the user is using an anonymizing service, then the value "<code>en-US</code>" is
   suggested; if all users of the service use that same value, that reduces the possibility of
   distinguishing the users from each other.</li>

  </ul>

  To avoid introducing any more fingerprinting vectors, user agents should use the same list for
  the APIs defined in this function as for the HTTP <code>Accept-Language</code> header.

  </div>

  <h5 id="custom-scheme-and-content-handlers:-the-registerprotocolhandler()-and-registercontenthandler()-methods"><dfn>Custom scheme and content handlers: the <code>registerProtocolHandler()</code> and <code>registerContentHandler()</code> methods</dfn></h5>

  <pre class="idl" data-highlight="webidl">
[NoInterfaceObject]
interface <dfn>NavigatorContentUtils</dfn> {
  // content handler registration
  void <a>registerProtocolHandler</a>(DOMString scheme, DOMString url, DOMString title);
  void <a>registerContentHandler</a>(DOMString mimeType, DOMString url, DOMString title);
  DOMString <a>isProtocolHandlerRegistered</a>(DOMString scheme, DOMString url);
  DOMString <a>isContentHandlerRegistered</a>(DOMString mimeType, DOMString url);
  void <a>unregisterProtocolHandler</a>(DOMString scheme, DOMString url);
  void <a>unregisterContentHandler</a>(DOMString mimeType, DOMString url);
};
</pre>

  The <dfn><code>registerProtocolHandler()</code></dfn> method
  allows Web sites to register themselves as possible handlers for particular schemes. For example,
  an online telephone messaging service could register itself as a handler of the <code>sms:</code> scheme, so that if the user clicks on such a link, he is given the
  opportunity to use that Web site. Analogously, the <dfn><code>registerContentHandler()</code></dfn> method allows
  Web sites to register themselves as possible handlers for content in a particular <a>MIME
  type</a>. For example, the same online telephone messaging service could register itself as a
  handler for <code>text/vcard</code> files, so that if the user has no native application capable
  of handling vCards, his Web browser can instead suggest he use that site to view contact
  information stored on vCards that he opens. [[!SMS]] [[!RFC6350]]

  <dl class="domintro">

   <dt><var>window</var> . <code>navigator</code> . <code>registerProtocolHandler</code>(<var>scheme</var>, <var>url</var>, <var>title</var>)</dt>
   <dt><var>window</var> . <code>navigator</code> . <code>registerContentHandler</code>(<var>mimeType</var>, <var>url</var>, <var>title</var>)</dt>

   <dd>

    Registers a handler for the given scheme or content type, at the given URL, with the given
    title.

    The string "<code>%s</code>" in the URL is used as a placeholder for where to put
    the URL of the content to be handled.

    Throws a <code>SecurityError</code> exception if the user agent blocks the registration (this
    might happen if trying to register as a handler for "http", for instance).

    Throws a <code>SyntaxError</code> exception if the "<code>%s</code>" string is
    missing in the URL.

   </dd>

  </dl>

  <div class="impl">

  User agents may, within the constraints described in this section, do whatever they like when
  the methods are called. A UA could, for instance, prompt the user and offer the user the
  opportunity to add the site to a shortlist of handlers, or make the handlers his default, or
  cancel the request. UAs could provide such a UI through modal UI or through a non-modal transient
  notification interface. UAs could also simply silently collect the information, providing it only
  when relevant to the user.

  User agents should keep track of which sites have registered handlers (even if the user has
  declined such registrations) so that the user is not repeatedly prompted with the same
  request.

  The arguments to the methods have the following meanings and corresponding implementation
  requirements. The requirements that involve throwing exceptions must be processed in the order
  given below, stopping at the first exception thrown. (So the exceptions for the first argument
  take precedence over the exceptions for the second argument.)

  <dl>

   <dt><var>scheme</var> (<code>registerProtocolHandler()</code> only)</dt>

   <dd>

    A scheme, such as "<code>mailto</code>" or "<code>web+auth</code>". The
    scheme must be compared in an <a>ASCII case-insensitive</a> manner by user agents for the
    purposes of comparing with the scheme part of URLs that they consider against the list of
    registered handlers.

    The <var>scheme</var> value, if it contains a colon (as in "<code>mailto:</code>"),
    will never match anything, since schemes don't contain colons.

    If the <code>registerProtocolHandler()</code>
    method is invoked with a scheme that is neither a <a>safelisted scheme</a> nor a scheme
    whose value starts with the substring "<code>web+</code>" and otherwise contains only
    <a>lowercase ASCII letters</a>, and whose length is at least five characters (including
    the "<code>web+</code>" prefix), the user agent must throw a <code>SecurityError</code>
    exception.

    The following schemes are the <dfn>safelisted schemes</dfn>:

    <ul class="brief">
     <li><code>bitcoin</code></li>
     <li><code>geo</code></li>
     <li><code>im</code></li>
     <li><code>irc</code></li>
     <li><code>ircs</code></li>
     <li><code>magnet</code></li>
     <li><code>mailto</code></li>
     <li><code>mms</code></li>
     <li><code>news</code></li>
     <li><code>nntp</code></li>
     <li><code>openpgp4fpr</code></li>
     <li><code>sip</code></li>
     <li><code>sms</code></li>
     <li><code>smsto</code></li>
     <li><code>ssh</code></li>
     <li><code>tel</code></li>
     <li><code>urn</code></li>
     <li><code>webcal</code></li>
     <li><code>wtai</code></li>
     <li><code>xmpp</code></li>
    </ul>

    <p class="note">
This list can be changed. If there are schemes that should be added, please send
    feedback.
</p>

    <p class="note">
This list excludes any schemes that could reasonably be expected to be supported
    inline, e.g. in an <code>iframe</code>, such as <code>http</code> or (more
    theoretically) <code>gopher</code>. If those were supported, they could potentially be
    used in man-in-the-middle attacks, by replacing pages that have frames with such content with
    content under the control of the protocol handler. If the user agent has native support for the
    schemes, this could further be used for cookie-theft attacks.
</p>

   </dd>

   <dt><var>mimeType</var> (<code>registerContentHandler()</code> only)</dt>

   <dd>

    A <a>MIME type</a>, such as <code>model/vnd.flatland.3dml</code> or <code>application/vnd.google-earth.kml+xml</code>. The <a>MIME type</a> must be
    compared in an <a>ASCII case-insensitive</a> manner by user agents for the purposes of
    comparing with MIME types of documents that they consider against the list of registered
    handlers.

    User agents must compare the given values only to the MIME type/subtype parts of content
    types, not to the complete type including parameters. Thus, if <var>mimeType</var>
    values passed to this method include characters such as commas or whitespace, or include MIME
    parameters, then the handler being registered will never be used.

    <p class="note">
The type is compared to the <a>MIME type</a> used by the user agent
    <em>after</em> the sniffing algorithms have been applied.
</p>

    If the <code>registerContentHandler()</code>
    method is invoked with a <a>MIME type</a> that is in the <a>type blocklist</a> or
    that the user agent has deemed a privileged type, the user agent must throw a
    <code>SecurityError</code> exception.

    The following <a>MIME types</a> are in the <dfn>type
    blocklist</dfn>:

    <ul class="brief">

     <li><code>application/x-www-form-urlencoded</code></li>
     <li><code>application/xhtml+xml</code></li>
     <li><code>application/xml</code></li>
     <li><code>image/gif</code></li>
     <li><code>image/jpeg</code></li>
     <li><code>image/png</code></li>
     <li><code>image/svg+xml</code></li>
     <li><code>multipart/x-mixed-replace</code></li>
     <li><code>text/cache-manifest</code></li>
     <li><code>text/css</code></li>
     <li><code>text/html</code></li>
     <li><code>text/ping</code></li>
     <li><code>text/plain</code></li>
     <li><code>text/vtt</code></li>
     <li><code>text/xml</code></li>
     <li>All types that the user agent supports displaying natively in a <a>browsing context</a> during <a>navigation</a>, except for <code>application/rss+xml</code> and <code>application/atom+xml</code></li>

    </ul>

    <p class="note">
This list can be changed. If there are MIME types that should be added, please
    send feedback.
</p>

   </dd>

   <dt><var>url</var></dt>

   <dd>

    A string used to build the <a>URL</a> of the page that will handle the requests.

    User agents must throw a <code>SyntaxError</code> exception if the <var>url</var>
    argument passed to one of these methods does not contain the exact literal string
    "<code>%s</code>".

    User agents must throw a <code>SyntaxError</code> exception if <a>resolving</a> the <var>url</var> argument relative to the <a>API base
    URL</a> specified by the <a>entry settings object</a> is not successful.

    <p class="note">
The resulting <a>absolute URL</a> would by definition not be a <a>valid
    URL</a> as it would include the string "<code>%s</code>" which is not a valid
    component in a URL.
</p>

    User agents must throw a <code>SecurityError</code> exception if the resulting <a>absolute
    URL</a> has an <a>origin</a> that differs from the <a>origin</a> specified by the
    <a>entry settings object</a>.

    <p class="note">
This is forcibly the case if the <code>%s</code> placeholder is in the
    scheme, host, or port parts of the URL.
</p>

    The resulting <a>absolute URL</a> is the <dfn>proto-URL</dfn>. It identifies the
    handler for the purposes of the methods described below.

    When the user agent uses this handler, it must replace the first occurrence of the exact
    literal string "<code>%s</code>" in the <var>url</var> argument with an
    escaped version of the <a>absolute URL</a> of the content in question (as defined below),
    then <a>resolve</a> the resulting URL, relative to the <a>API
    base URL</a> specified by the <a>entry settings object</a> at the time the <code>registerContentHandler()</code> or <code>registerProtocolHandler()</code> methods were
    invoked, and then <a>navigate</a> an appropriate <a>browsing
    context</a> to the resulting URL.

    To get the escaped version of the <a>absolute URL</a> of the content in question, the
    user agent must replace every character in that <a>absolute URL</a> that is not a
    character in the URL <a>default encode set</a> with the result of <a>UTF-8 percent encoding</a> that character.

    <div class="example">

     If the user had visited a site at <code>http://example.com/</code> that made the
     following call:

     <pre highlight="javascript">navigator.registerContentHandler('application/x-soup', 'soup?url=%s', 'SoupWeb&trade;')</pre>

     ...and then, much later, while visiting <code>http://www.example.net/</code>,
     clicked on a link such as:

     <pre highlight="html">
&lt;a href="chickenk&#xEF;wi.soup">Download our Chicken K&#xEF;wi soup!&lt;/a>
</pre>

     ...then, assuming this <code>chickenk&#xEF;wi.soup</code> file was served with the
     <a>MIME type</a> <code>application/x-soup</code>, the UA might navigate to the
     following URL:

     <pre>http://example.com/soup?url=http://www.example.net/chickenk%C3%AFwi.soup</pre>

     This site could then fetch the <code>chickenk&#xEF;wi.soup</code> file and do
     whatever it is that it does with soup (synthesize it and ship it to the user, or whatever).

    </div>

   </dd>

   <dt><var>title</var></dt>

   <dd>

    A descriptive title of the handler, which the UA might use to remind the user what the site
    in question is.

   </dd>

  </dl>

  This section does not define how the pages registered by these methods are used, beyond the
  requirements on how to process the <var>url</var> value (see above). To some extent, the
  <a>processing model for navigating across documents</a> defines some cases
  where these methods are relevant, but in general UAs may use this information wherever they would
  otherwise consider handing content to native plugins or helper applications.

  UAs must not use registered content handlers to handle content that was returned as part of a
  non-GET transaction (or rather, as part of any non-idempotent transaction), as the remote site
  would not be able to fetch the same data.

  <hr />

  </div>

  In addition to the registration methods, there are also methods for determining if particular
  handlers have been registered, and for unregistering handlers.

  <dl class="domintro">

   <dt><var>state</var> = <var>window</var> . <code>navigator</code> . <code>isProtocolHandlerRegistered</code>(<var>scheme</var>, <var>url</var>)</dt>
   <dt><var>state</var> = <var>window</var> . <code>navigator</code> . <code>isContentHandlerRegistered</code>(<var>mimeType</var>, <var>url</var>)</dt>

   <dd>

    Returns one of the following strings describing the state of the handler given by the
    arguments:

    <dl>

     <dt><code>new</code>

     <dd>Indicates that no attempt has been made to register the given handler (or that the handler
     has been unregistered). It would be appropriate to promote the availability of the handler or
     to just automatically register the handler.

     <dt><code>registered</code>

     <dd>Indicates that the given handler has been registered or that the site is blocked from
     registering the handler. Trying to register the handler again would have no effect.

     <dt><code>declined</code>

     <dd>Indicates that the given handler has been offered but was rejected. Trying to register the
     handler again may prompt the user again.

    </dl>

   </dd>

   <dt><var>window</var> . <code>navigator</code> . <code>unregisterProtocolHandler</code>(<var>scheme</var>, <var>url</var>)</dt>
   <dt><var>window</var> . <code>navigator</code> . <code>unregisterContentHandler</code>(<var>mimeType</var>, <var>url</var>)</dt>

   <dd>

    Unregisters the handler given by the arguments.

   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>isProtocolHandlerRegistered()</code></dfn>
  method must return the <a>handler state string</a> that most closely describes the current
  state of the handler described by the two arguments to the method, where the first argument gives
  the scheme and the second gives the string used to build the <a>URL</a> of the page that
  will handle the requests.

  The first argument must be compared to the schemes for which custom protocol handlers are
  registered in an <a>ASCII case-insensitive</a> manner to find the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The <dfn><code>isContentHandlerRegistered()</code></dfn>
  method must return the <a>handler state string</a> that most closely describes the current
  state of the handler described by the two arguments to the method, where the first argument gives
  the <a>MIME type</a> and the second gives the string used to build the <a>URL</a> of
  the page that will handle the requests.

  The first argument must be compared to the <a>MIME types</a> for which
  custom content handlers are registered in an <a>ASCII case-insensitive</a> manner to find
  the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The <dfn>handler state strings</dfn> are the following strings.
  Each string describes several situations, as given by the following list.

  <dl>

   <dt><code>new</code>

   <dd>The described handler has never been registered for the given scheme or type.

   <dd>The described handler was once registered for the given scheme or type, but the site has
   since unregistered it. If the handler were to be reregistered, the user would be notified
   accordingly.

   <dd>The described handler was once registered for the given scheme or type, but the site has
   since unregistered it, but the user has indicated that the site is to be blocked from registering
   the type again, so the user agent would ignore further registration attempts.

   <dt><code>registered</code>

   <dd>An attempt was made to register the described handler for the given scheme or type, but the
   user has not yet been notified, and the user agent would ignore further registration attempts.
   (Maybe the user agent batches registration requests to display them when the user requests to be
   notified about them, and the user has not yet requested that the user agent notify it of the
   previous registration attempt.)

   <dd>The described handler is registered for the given scheme or type (maybe, or maybe not, as the
   default handler).

   <dd>The described handler is permanently blocked from being (re)registered. (Maybe the user
   marked the registration attempt as spam, or blocked the site for other reasons.)

   <dt><code>declined</code>

   <dd>An attempt was made to register the described handler for the given scheme or type, but the
   user has not yet been notified; however, the user might be notified if another registration
   attempt were to be made. (Maybe the last registration attempt was made while the page was in the
   background and the user closed the page without looking at it, and the user agent requires
   confirmation for this registration attempt.)

   <dd>An attempt was made to register the described handler for the given scheme or type, but the
   user has not yet responded.

   <dd>An attempt was made to register the described handler for the given scheme or type, but the
   user declined the offer. The user has not indicated that the handler is to be permanently
   blocked, however, so another attempt to register the described handler might result in the user
   being prompted again.

   <dd>The described handler was once registered for the given scheme or type, but the user has
   since removed it. The user has not indicated that the handler is to be permanently blocked,
   however, so another attempt to register the described handler might result in the user being
   prompted again.

  </dl>

  <hr />

  The <dfn><code>unregisterProtocolHandler()</code></dfn>
  method must unregister the handler described by the two arguments to the method, where the first
  argument gives the scheme and the second gives the string used to build the <a>URL</a> of
  the page that will handle the requests.

  The first argument must be compared to the schemes for which custom protocol handlers are
  registered in an <a>ASCII case-insensitive</a> manner to find the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The <dfn><code>unregisterContentHandler()</code></dfn>
  method must unregister the handler described by the two arguments to the method, where the first
  argument gives the <a>MIME type</a> and the second gives the string used to build the
  <a>URL</a> of the page that will handle the requests.

  The first argument must be compared to the <a>MIME types</a> for which
  custom content handlers are registered in an <a>ASCII case-insensitive</a> manner to find
  the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The second argument of the four methods described above must be preprocessed as follows:

  <ol>

   <li>If the string does not contain the substring "<code>%s</code>", abort these
   steps. There's no matching handler.</li>

   <li><a>Resolve</a> the string relative to the <a>API base
   URL</a> specified by the <a>entry settings object</a>.</li>

   <li>If this fails, then throw a <code>SyntaxError</code> exception, aborting the
   method.</li>

   <li>If the resulting <a>absolute URL</a>'s <a>origin</a> is not the <a>same
   origin</a> as the <a>origin</a> specified by the <a>entry settings object</a>,
   throw a <code>SecurityError</code> exception, aborting the method.</li>

   <li>Return the resulting <a>absolute URL</a> as the result of preprocessing the
   argument.</li>

  </ol>

  </div>

  <div class="impl">

  <h6 id="security-and-privacy"><dfn>Security and privacy</dfn></h6>

  These mechanisms can introduce a number of concerns, in particular privacy concerns.

  <strong>Hijacking all Web usage.</strong> User agents should not allow schemes that are key to
  its normal operation, such as <code>http</code> or <code>https</code>, to be
  rerouted through third-party sites. This would allow a user's activities to be trivially tracked,
  and would allow user information, even in secure connections, to be collected.

  <strong>Hijacking defaults.</strong> User agents are strongly urged to not automatically change
  any defaults, as this could lead the user to send data to remote hosts that the user is not
  expecting. New handlers registering themselves should never automatically cause those sites to be
  used.

  <strong>Registration spamming.</strong> User agents should consider the possibility that a site
  will attempt to register a large number of handlers, possibly from multiple domains (e.g. by
  redirecting through a series of pages each on a different domain, and each registering a handler
  for <code>video/mpeg</code> &mdash; analogous practices abusing other Web browser features have
  been used by pornography Web sites for many years). User agents should gracefully handle such
  hostile attempts, protecting the user.

  <strong>Misleading titles.</strong> User agents should not rely wholly on the <var>title</var>
  argument to the methods when presenting the registered handlers to the user, since sites could
  easily lie. For example, a site <code>hostile.example.net</code> could claim that it was
  registering the "Cuddly Bear Happy Content Handler". User agents should therefore use the
  handler's domain in any UI along with any title.

  <strong>Hostile handler metadata.</strong> User agents should protect against typical attacks
  against strings embedded in their interface, for example ensuring that markup or escape characters
  in such strings are not executed, that null bytes are properly handled, that over-long strings do
  not cause crashes or buffer overruns, and so forth.

  <strong>Leaking Intranet URLs.</strong> The mechanism described in this section can result in
  secret Intranet URLs being leaked, in the following manner:

  <ol>

   <li>The user registers a third-party content handler as the default handler for a content
   type.</li>

   <li>The user then browses his corporate Intranet site and accesses a document that uses that
   content type.</li>

   <li>The user agent contacts the third party and hands the third party the URL to the Intranet
   content.</li>

  </ol>

  No actual confidential file data is leaked in this manner, but the URLs themselves could
  contain confidential information. For example, the URL could be <code>http://www.corp.example.com/upcoming-aquisitions/the-sample-company.egf</code>, which
  might tell the third party that Example Corporation is intending to merge with The Sample Company.
  Implementors might wish to consider allowing administrators to disable this feature for certain
  subdomains, content types, or schemes.

  <strong>Leaking secure URLs.</strong> User agents should not send HTTPS URLs to third-party
  sites registered as content handlers without the user's informed consent, for the same reason that
  user agents sometimes avoid sending <code>Referer</code> (sic) HTTP
  headers from secure sites to third-party sites.

  <strong>Leaking credentials.</strong> User agents must never send username or password
  information in the URLs that are escaped and included sent to the handler sites. User agents may
  even avoid attempting to pass to Web-based handlers the URLs of resources that are known to
  require authentication to access, as such sites would be unable to access the resources in
  question without prompting the user for credentials themselves (a practice that would require the
  user to know whether to trust the third-party handler, a decision many users are unable to make or
  even understand).

  <strong>Interface interference.</strong> User agents should be prepared to handle intentionally
  long arguments to the methods. For example, if the user interface exposed consists of an "accept"
  button and a "deny" button, with the "accept" binding containing the name of the handler, it's
  important that a long name not cause the "deny" button to be pushed off the screen.

  <strong>Fingerprinting users.</strong> Since a site can detect if it has attempted to register
  a particular handler or not, whether or not the user responds, the mechanism can be used to store
  data. User agents are therefore strongly urged to treat registrations in the same manner as
  cookies: clearing cookies for a site should also clear all registrations for that site, and
  disabling cookies for a site should also disable registrations.

  </div>

  <div class="impl">

  <h6 id="sample-user-interface"><dfn>Sample user interface</dfn></h6>

  <em>This section is non-normative.</em>

  A simple implementation of this feature for a desktop Web browser might work as follows.

  The <code>registerContentHandler()</code> method
  could display a modal dialog box:

  <img src="images/sample-content-handler-registration.png" width="534" height="374" alt="The modal dialog box could have the title 'Content Handler Registration', and could say 'This Web page: Kittens at work http://kittens.example.org/ ...would like permission to handle files of type: application/x-meowmeow using the following Web-based application: Kittens-at-work displayer http://kittens.example.org/?show=%s Do you trust the administrators of the &quot;kittens.example.org&quot; domain?' with two buttons, 'Trust kittens.example.org' and 'Cancel'.">

  In this dialog box, "Kittens at work" is the title of the page that invoked the method,
  "http://kittens.example.org/" is the URL of that page, "application/x-meowmeow" is the string that
  was passed to the <code>registerContentHandler()</code> method as its first
  argument (<var>mimeType</var>), "http://kittens.example.org/?show=%s" was the second
  argument (<var>url</var>), and "Kittens-at-work displayer" was the third argument (<var>title</var>).

  If the user clicks the Cancel button, then nothing further happens. If the user clicks the
  "Trust" button, then the handler is remembered.

  When the user then attempts to fetch a URL that uses the "application/x-meowmeow" <a>MIME
  type</a>, then it might display a dialog as follows:

  <img src="images/sample-content-handler.png" width="577" height="428" alt="The dialog box could have the title 'Unknown File Type' and could say 'You have attempted to access:' followed by a URL, followed by a prompt such as 'How would you like FerretBrowser to handle this resource?' with three radio buttons, one saying 'Contact the FerretBrowser plugin registry to see if there is an official way to handle this resource.', one saying 'Pass this URL to a local application' with an application selector, and one saying 'Pass this URL to the &quot;Kittens-at-work displayer&quot; application at &quot;kittens.example.org&quot;', with a checkbox labeled 'Always do this for resources using the &quot;application/x-meowmeow&quot; type in future.', and with two buttons, 'Ok' and 'Cancel'.">

  In this dialog, the third option is the one that was primed by the site registering itself
  earlier.

  If the user does select that option, then the browser, in accordance with the requirements
  described in the previous two sections, will redirect the user to
  "http://kittens.example.org/?show=data%3Aapplication/x-meowmeow;base64,S2l0dGVucyBhcmUgdGhlIGN1dGVzdCE%253D".

  The <code>registerProtocolHandler()</code> method
  would work equivalently, but for schemes instead of unknown content types.

  </div>

  <h5 id="manually-releasing-the-storage-mutex"><dfn>Manually releasing the storage mutex</dfn></h5>

  <pre class="idl" data-highlight="webidl">
[NoInterfaceObject]
interface <dfn>NavigatorStorageUtils</dfn> {
  readonly attribute boolean <a>cookieEnabled</a>;
  void <a>yieldForStorageUpdates</a>();
};
</pre>

  <dl class="domintro">

   <dt><var>window</var> . <code>navigator</code> . <code>cookieEnabled</code></dt>

   <dd>

    Returns false if setting a cookie will be ignored, and true otherwise.

   </dd>

   <dt><var>window</var> . <code>navigator</code> . <code>yieldForStorageUpdates</code>()</dt>

   <dd>

    If a script uses the <code>document.cookie</code> API, or the
    <code>localStorage</code> API, the browser will block other scripts
    from accessing cookies or storage until the first script finishes.

    [[!WEBSTORAGE]]

    Calling the <code>navigator.yieldForStorageUpdates()</code> method
    tells the user agent to unblock any other scripts that may be blocked, even though the script
    hasn't returned.

    Values of cookies and items in the <code>Storage</code> objects of <code>localStorage</code> attributes can change after calling this method,
    whence its name.

    [[!WEBSTORAGE]]

   </dd>

  </dl>

  <div class="impl">

   The <dfn><code>cookieEnabled</code></dfn> attribute must
   return true if the user agent attempts to handle cookies according to the cookie specification,
   and false if it ignores cookie change requests. [[!COOKIES]]

   The <dfn><code>yieldForStorageUpdates()</code></dfn> method,
   when invoked, must, if the <a>storage mutex</a> is owned by the <a>event loop</a> of
   the <a>task</a> that resulted in the method being called, release the
   <a>storage mutex</a> so that it is once again free. Otherwise, it must do nothing.

  </div>

  <h5 id="plugins"><dfn>Plugins</dfn></h5>

  <pre class="idl" data-highlight="webidl">
[NoInterfaceObject]
interface <dfn>NavigatorPlugins</dfn> {
  [SameObject] readonly attribute <a>PluginArray</a> <a>plugins</a>;
  [SameObject] readonly attribute <a>MimeTypeArray</a> <a>mimeTypes</a>;
  readonly attribute boolean <a>javaEnabled</a>;
};

interface <dfn>PluginArray</dfn> {
  void <a>refresh</a>(optional boolean reload = false);
  readonly attribute unsigned long <a>length</a>;
  getter <a>Plugin</a>? <a>item</a>(unsigned long index);
  getter <a>Plugin</a>? <a>namedItem</a>(DOMString name);
};

interface <dfn>MimeTypeArray</dfn> {
  readonly attribute unsigned long <a>length</a>;
  getter <a>MimeType</a>? <a>item</a>(unsigned long index);
  getter <a>MimeType</a>? <a>namedItem</a>(DOMString name);
};

interface <dfn>Plugin</dfn> {
  readonly attribute DOMString <a>name</a>;
  readonly attribute DOMString <a>description</a>;
  readonly attribute DOMString <a>filename</a>;
  readonly attribute unsigned long <a>length</a>;
  getter <a>MimeType</a>? <a>item</a>(unsigned long index);
  getter <a>MimeType</a>? <a>namedItem</a>(DOMString name);
};

interface <dfn>MimeType</dfn> {
  readonly attribute DOMString <a>type</a>;
  readonly attribute DOMString <a>description</a>;
  readonly attribute DOMString <a>suffixes</a>; // comma-separated
  readonly attribute <a>Plugin</a> <a>enabledPlugin</a>;
};
</pre>

  <dl class="domintro">

   <dt><var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>refresh</code>( [ <var>refresh</var> ] )</dt>
   <dd>
    Updates the lists of supported plugins and MIME types for this page, and reloads the page if the lists have changed.

   </dd>

   <dt><var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>length</code></dt>
   <dd>
    Returns the number of plugins, represented by <code>Plugin</code> objects, that the user agent reports.
   </dd>

   <dt><var>plugin</var> = <var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>item</code>(<var>index</var>)</dt>
   <dt><var>window</var> . <code>navigator</code> . <code>plugins</code>[<var>index</var>]</dt>
   <dd>
    Returns the specified <code>Plugin</code> object.
   </dd>

   <dt><var>plugin</var> = <var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>item</code>(<var>name</var>)</dt>
   <dt><var>window</var> . <code>navigator</code> . <code>plugins</code>[<var>name</var>]</dt>
   <dd>
    Returns the <code>Plugin</code> object for the plugin with the given name.
   </dd>

   <dt><var>window</var> . <code>navigator</code> . <code>mimeTypes</code> . <code>length</code></dt>
   <dd>
    Returns the number of MIME types, represented by <code>MimeType</code> objects, supported by the plugins that the user agent reports.
   </dd>

   <dt><var>mimeType</var> = <var>window</var> . <code>navigator</code> . <code>mimeTypes</code> . <code>item</code>(<var>index</var>)</dt>
   <dt><var>window</var> . <code>navigator</code> . <code>mimeTypes</code>[<var>index</var>]</dt>
   <dd>
    Returns the specified <code>MimeType</code> object.
   </dd>

   <dt><var>mimeType</var> = <var>window</var> . <code>navigator</code> . <code>mimeTypes</code> . <code>item</code>(<var>name</var>)</dt>
   <dt><var>window</var> . <code>navigator</code> . <code>mimeTypes</code>[<var>name</var>]</dt>
   <dd>
    Returns the <code>MimeType</code> object for the given MIME type.
   </dd>

   <dt><var>plugin</var> . <code>name</code>
   <dd>
    Returns the plugin's name.
   </dd>

   <dt><var>plugin</var> . <code>description</code>
   <dd>
    Returns the plugin's description.
   </dd>

   <dt><var>plugin</var> . <code>filename</code>
   <dd>
    Returns the plugin library's filename, if applicable on the current platform.
   </dd>

   <dt><var>plugin</var> . <code>length</code></dt>
   <dd>
    Returns the number of MIME types, represented by <code>MimeType</code> objects, supported by the plugin.
   </dd>

   <dt><var>mimeType</var> = <var>plugin</var> . <code>item</code>(<var>index</var>)</dt>
   <dt><var>plugin</var>[<var>index</var>]</dt>
   <dd>
    Returns the specified <code>MimeType</code> object.
   </dd>

   <dt><var>mimeType</var> = <var>plugin</var> . <code>item</code>(<var>name</var>)</dt>
   <dt><var>plugin</var>[<var>name</var>]</dt>
   <dd>
    Returns the <code>MimeType</code> object for the given MIME type.
   </dd>

   <dt><var>mimeType</var> . <code>type</code>
   <dd>
    Returns the MIME type.
   </dd>

   <dt><var>mimeType</var> . <code>description</code>
   <dd>
    Returns the MIME type's description.
   </dd>

   <dt><var>mimeType</var> . <code>suffixes</code>
   <dd>
    Returns the MIME type's typical file extensions, in a comma-separated list.
   </dd>

   <dt><var>mimeType</var> . <code>enabledPlugin</code>
   <dd>
    Returns the <code>Plugin</code> object that implements this MIME type.
   </dd>

   <dt><var>window</var> . <code>navigator</code> . <code>javaEnabled</code></dt>
   <dd>
    Returns true if there's a plugin that supports the MIME type "<code>application/x-java-vm</code>".
   </dd>

  </dl>

  <div class="impl">

  The <dfn><code>navigator.plugins</code></dfn> attribute must
  return a <code>PluginArray</code> object.

  The <dfn><code>navigator.mimeTypes</code></dfn> attribute must
  return a <code>MimeTypeArray</code> object.

  <hr />

  A <code>PluginArray</code> object represents none, some, or all of the <a>plugins</a> supported by the user agent, each of which is represented by a <code>Plugin</code> object. Each of these <code>Plugin</code>
  objects may be <dfn>hidden plugins</dfn>. A <a>hidden plugin</a> can't
  be enumerated, but can still be inspected by using its name.

  <p class="note">
The fewer <a>plugins</a> are represented by the
  <code>PluginArray</code> object, and of those, the more that are <a>hidden</a>, the more the user's privacy will be protected. Each exposed plugin
  increases the number of bits that can be derived for fingerprinting. Hiding a plugin helps, but
  unless it is an extremely rare plugin, it is likely that a site attempting to derive the list of
  plugins can still determine whether the plugin is supported or not by probing for it by name (the
  names of popular plugins are widely known). Therefore not exposing a plugin at all is preferred.
  Unfortunately, many legacy sites use this feature to determine, for example, which plugin to use
  to play video. Not exposing any plugins at all might therefore not be entirely plausible.
</p>

  The <code>PluginArray</code> objects created by a user agent must not be <a>live</a>. The
  set of plugins represented by the objects must not change once an object is created, except when
  it is updated by the <code>refresh()</code> method.

  Each <a>plugin</a> represented by a <code>PluginArray</code> can support a number of
  <a>MIME types</a>. For each such <a>plugin</a>, the user agent must
  pick one or more of these <a>MIME types</a> to be those that are
  <dfn>explicitly supported</dfn>.

  <p class="note">
The <a>explicitly supported</a> <a>MIME types</a> of
  a <a>plugin</a> are those that are exposed through the <code>Plugin</code> and <code>MimeTypeArray</code> interfaces. As with <a>plugins</a> themselves, any variation between users regarding what is exposed
  allows sites to fingerprint users. User agents are therefore encouraged to expose the same <a>MIME types</a> for all users of a <a>plugin</a>, regardless of the
  actual types supported... at least, within the constraints imposed by compatibility with legacy
  content.
</p>

  The <a>supported property indices</a> of a <code>PluginArray</code> object are the
  numbers from zero to the number of non-<a>hidden</a> <a>plugins</a> represented by the object, if any.

  The <dfn><code>length</code></dfn> attribute must return the
  number of non-<a>hidden</a> <a>plugins</a>
  represented by the object.

  The <dfn><code>item()</code></dfn> method of a
  <code>PluginArray</code> object must return null if the argument is not one of the object's
  <a>supported property indices</a>, and otherwise must return the result of running the
  following steps, using the method's argument as <var>index</var>:

  <ol>

   <li>Let <var>list</var> be the <code>Plugin</code> objects
   representing the non-<a>hidden</a> <a>plugins</a> represented by the <code>PluginArray</code> object.</li>

   <li>Sort <var>list</var> alphabetically by the <code>name</code> of each <code>Plugin</code>.</li>

   <li>Return the <var>index</var>th entry in <var>list</var>.</li>

  </ol>

  <p class="note">
It is important <span class="no-backref">for
  privacy</span> that the order of plugins not leak additional information, e.g. the order in which
  plugins were installed.
</p>

  The <a>supported property names</a> of a <code>PluginArray</code> object are the values
  of the <code>name</code> attributes of all the <code>Plugin</code> objects represented by the <code>PluginArray</code> object. The
  properties exposed in this way must be <a>unenumerable</a>.

  The <dfn><code>namedItem()</code></dfn> method of a
  <code>PluginArray</code> object must return null if the argument is not one of the object's
  <a>supported property names</a>, and otherwise must return the <code>Plugin</code> object, of those represented by the <code>PluginArray</code>
  object, that has a <code>name</code> equal to the method's argument.

  The <dfn><code>refresh()</code></dfn> method of the
  <code>PluginArray</code> object of a <code>Navigator</code> object, when invoked, must check to
  see if any <a>plugins</a> have been installed or reconfigured since the user
  agent created the <code>PluginArray</code> object. If so, and the method's argument is true, then
  the user agent must act as if the <code>location.reload()</code>
  method was called instead. Otherwise, the user agent must update the <code>PluginArray</code>
  object and <code>MimeTypeArray</code> object created for attributes of that <code>Navigator</code>
  object, and the <code>Plugin</code> and <code>MimeType</code> objects created
  for those <code>PluginArray</code> and <code>MimeTypeArray</code> objects, using the same <code>Plugin</code> objects for cases where the <code>name</code> is the same, and the same <code>MimeType</code> objects for
  cases where the <code>type</code> is the same, and creating new objects
  for cases where there were no matching objects immediately prior to the <code>refresh()</code> call. Old <code>Plugin</code>
  and <code>MimeType</code> objects must continue to return the same values that they had prior to
  the update, though naturally now the data is stale and may appear inconsistent (for example, an
  old <code>MimeType</code> entry might list as its <code>enabledPlugin</code> a <code>Plugin</code>
  object that no longer lists that <code>MimeType</code> as a supported <code>MimeType</code>).

  <hr />

  A <code>MimeTypeArray</code> object represents the <a>MIME types</a>
  <a>explicitly supported</a> by <a>plugins</a> supported by the user
  agent, each of which is represented by a <code>MimeType</code> object.

  The <code>MimeTypeArray</code> objects created by a user agent must not be <a>live</a>.
  The set of MIME types represented by the objects must not change once an object is created, except
  when it is updated by the <code>PluginArray</code> object's <code>refresh()</code> method.

  The <a>supported property indices</a> of a <code>MimeTypeArray</code> object are the
  numbers from zero to the number of <a>MIME types</a> <a>explicitly
  supported</a> by non-<a>hidden</a> <a>plugins</a> represented by the corresponding <code>PluginArray</code> object, if
  any.

  The <dfn><code>length</code></dfn> attribute must return the
  number of <a>MIME types</a> <a>explicitly supported</a> by non-<a>hidden</a> <a>plugins</a> represented by the
  corresponding <code>PluginArray</code> object, if any.

  The <dfn><code>item()</code></dfn> method of a
  <code>MimeTypeArray</code> object must return null if the argument is not one of the object's
  <a>supported property indices</a>, and otherwise must return the result of running the
  following steps, using the method's argument as <var>index</var>:

  <ol>

   <li>Let <var>list</var> be the <code>MimeType</code> objects representing the <a>MIME types</a> <a>explicitly supported</a> by non-<a>hidden</a> <a>plugins</a> represented by the corresponding
   <code>PluginArray</code> object, if any.</li>

   <li>Sort <var>list</var> alphabetically by the <code>type</code> of each <code>MimeType</code>.</li>

   <li>Return the <var>index</var>th entry in <var>list</var>.</li>

  </ol>

  <p class="note">
It is important <span class="no-backref">for
  privacy</span> that the order of MIME types not leak additional information, e.g. the order in
  which plugins were installed.
</p>

  The <a>supported property names</a> of a <code>MimeTypeArray</code> object are the values
  of the <code>type</code> attributes of all the <code>MimeType</code>
  objects represented by the <code>MimeTypeArray</code> object. The properties exposed in this way
  must be <a>unenumerable</a>.

  The <dfn><code>namedItem()</code></dfn> method of a
  <code>MimeTypeArray</code> object must return null if the argument is not one of the object's
  <a>supported property names</a>, and otherwise must return the <code>MimeType</code> object
  that has a <code>type</code> equal to the method's argument.

  <hr />

  A <code>Plugin</code> object represents a <a>plugin</a>. It has
  several attributes to provide details about the plugin, and can be enumerated to obtain the list
  of <a>MIME types</a> that it <a>explicitly
  supports</a>.

  The <code>Plugin</code> objects created by a user agent must not be
  <a>live</a>. The set of MIME types represented by the objects, and the values of the
  objects' attributes, must not change once an object is created, except when updated by the
  <code>PluginArray</code> object's <code>refresh()</code>
  method.

  The <dfn>reported MIME types</dfn> for a <code>Plugin</code> object are the
  <a>MIME types</a> <a>explicitly supported</a> by the corresponding
  <a>plugin</a> when this object was last created or updated by <code>PluginArray.refresh()</code>, whichever happened most
  recently.

  The <a>supported property indices</a> of a <code>Plugin</code> object
  are the numbers from zero to the number of <a>reported MIME types</a>.

  The <dfn><code>length</code></dfn> attribute must return the number
  of <a>reported MIME types</a>.

  The <dfn><code>item()</code></dfn> method of a <code>Plugin</code> object must return null if the argument is not one of the
  object's <a>supported property indices</a>, and otherwise must return the result of running
  the following steps, using the method's argument as <var>index</var>:

  <ol>

   <li>Let <var>list</var> be the <code>MimeType</code> objects representing the
   <a>reported MIME types</a>.</li>

   <li>Sort <var>list</var> alphabetically by the <code>type</code> of each <code>MimeType</code>.</li>

   <li>Return the <var>index</var>th entry in <var>list</var>.</li>

  </ol>

  <p class="note">
It is important <span class="no-backref">for
  privacy</span> that the order of MIME types not leak additional information, e.g. the order in
  which plugins were installed.
</p>

  The <a>supported property names</a> of a <code>Plugin</code> object
  are the values of the <code>type</code> attributes of the
  <code>MimeType</code> objects representing the <a>reported MIME types</a>. The properties
  exposed in this way must be <a>unenumerable</a>.

  The <dfn><code>namedItem()</code></dfn> method of a <code>Plugin</code> object must return null if the argument is not one of the
  object's <a>supported property names</a>, and otherwise must return the
  <code>MimeType</code> object that has a <code>type</code> equal to the
  method's argument.

  The <dfn><code>name</code></dfn> attribute must return the
  <a>plugin</a>'s name.

  The <dfn><code>description</code></dfn> and <dfn><code>filename</code></dfn> attributes must return user-agent-defined
  (or, in all likelihood, <a>plugin</a>-defined) strings. In each case, the same string must
  be returned each time, except that the strings returned may change when the <code>PluginArray.refresh()</code> method updates the object.

  <p class="warning">If the values returned by the <code>description</code> or <code>filename</code> attributes vary between versions of a
  <a>plugin</a>, they can be used both as a fingerprinting vector and, even more importantly,
  as a trivial way to determine what security vulnerabilities a <a>plugin</a> (and thus a
  browser) may have. It is thus highly recommended that the <code>description</code> attribute just return the same value as the
  <code>name</code> attribute, and that the <code>filename</code> attribute return the empty string.

  </p>

  <hr />

  A <code>MimeType</code> object represents a <a>MIME type</a> that is, or was,
  <a>explicitly supported</a> by a <a>plugin</a>.

  The <code>MimeType</code> objects created by a user agent must not be <a>live</a>. The
  values of the objects' attributes must not change once an object is created, except when updated
  by the <code>PluginArray</code> object's <code>refresh()</code>
  method.

  The <dfn><code>type</code></dfn> attribute must return the
  <a>valid MIME type with no parameters</a> describing the <a>MIME type</a>.

  The <dfn><code>description</code></dfn> and <dfn><code>suffixes</code></dfn> attributes must return
  user-agent-defined (or, in all likelihood, <a>plugin</a>-defined) strings. In each case, the
  same string must be returned each time, except that the strings returned may change when the <code>PluginArray.refresh()</code> method updates the object.

  <p class="warning">If the values returned by the <code>description</code> or <code>suffxies</code> attributes vary between versions of a
  <a>plugin</a>, they can be used both as a fingerprinting vector and, even more importantly,
  as a trivial way to determine what security vulnerabilities a <a>plugin</a> (and thus a
  browser) may have. It is thus highly recommended that the <code>description</code> attribute just return the same value as the
  <code>type</code> attribute, and that the <code>suffixes</code> attribute return the empty string.

  </p>

  <p class="note">
Commas in the <code>suffixes</code> attribute are
  interpreted as separating subsequent filename extensions, as in "<code>htm,html</code>".
</p>

  The <dfn><code>enabledPlugin</code></dfn> attribute must
  return the <code>Plugin</code> object that represents the <a>plugin</a>
  that <a>explicitly supported</a> the <a>MIME type</a> that this <code>MimeType</code>
  object represents when this object was last created or updated by <code>PluginArray.refresh()</code>, whichever happened most
  recently.

  <hr />

  The <dfn><code>navigator.javaEnabled</code></dfn> attribute
  must return true if the user agent supports a <a>plugin</a> that supports the <a>MIME
  type</a> "<code>application/x-java-vm</code>"; otherwise it must return false.

  </div>

  <h4 id="the-external-interface"><dfn>The <code>External</code> interface</dfn></h4>

  <div class="impl">

  The <dfn><code>external</code></dfn> attribute of the <code>Window</code>
  interface must return an instance of the <code>External</code> interface.

  </div>

  <pre class="idl" data-highlight="webidl">
interface <dfn>External</dfn> {
  void <a>AddSearchProvider</a>(DOMString engineURL);
  unsigned long <a>IsSearchProviderInstalled</a>(DOMString engineURL);
};
</pre>

  <p class="note">
For historical reasons, members on this interface are capitalized.
</p>

  <dl class="domintro">

   <dt><var>window</var> . <code>external</code> . <code>AddSearchProvider</code>( <var>url</var> )</dt>
   <dd>

    Adds the search engine described by the OpenSearch description document at <var>url</var>. [[!OPENSEARCH]]

    The OpenSearch description document has to be on the same server as the script that calls
    this method.

   </dd>

   <dt><var>installed</var> = <var>window</var> . <code>external</code> . <code>IsSearchProviderInstalled</code>( <var>url</var> )</dt>
   <dd>

    Returns a value based on comparing <var>url</var> to the URLs of the results pages
    of the installed search engines.

    <dl>
     <dt>0 <dd>None of the installed search engines match <var>url</var>.
     <dt>1 <dd>One or more installed search engines match <var>url</var>, but none are the user's default search engine.
     <dt>2 <dd>The user's default search engine matches <var>url</var>.
    </dl>

    The <var>url</var> is compared to the URLs of the results pages of the installed
    search engines using a prefix match. Only results pages on the same domain as the script that
    calls this method are checked.

   </dd>

  </dl>

  <p class="note">
Another way of exposing search engines using OpenSearch description documents is
  using a <code>link</code> element with the <code>search</code> link type.
</p>

  <div class="impl">

   The <dfn><code>AddSearchProvider()</code></dfn> method,
   when invoked, must run the following steps:

   <ol>

    <li>Optionally, abort these steps. User agents may implement the method as a stub method that
    never does anything, or may arbitrarily ignore invocations with particular arguments for
    security, privacy, or usability reasons.</li>

    <li><a>Resolve</a> the value of the method's first argument
    relative to the <a>API base URL</a> specified by the <a>entry settings
    object</a>.</li>

    <li>If this fails, abort these steps.</li>

    <li>Process the resulting <a>absolute URL</a> as the <a>URL</a> to an OpenSearch
    description document. [[!OPENSEARCH]]</li>

   </ol>

   The <dfn><code>IsSearchProviderInstalled()</code></dfn>
   method, when invoked, must run the following steps:

   <ol>

    <li>Optionally, return 0 and abort these steps. User agents may implement the method as a
    stub method that never returns a non-zero value, or may arbitrarily ignore invocations with
    particular arguments for security, privacy, or usability reasons.</li>

    <li>If the <a>origin</a> specified by the <a>entry settings object</a> is an
    opaque identifier (i.e. it has no host component), then return 0 and abort these steps.</li>

    <li>Let <var>host1</var> be the host component of the <a>origin</a> specified
    by the <a>entry settings object</a>.</li>

    <li><a>Resolve</a> the <var>scriptURL</var> argument
    relative to the <a>API base URL</a> specified by the <a>entry settings
    object</a>.</li>

    <li>If this fails, return 0 and abort these steps.</li>

    <li>Let <var>host2</var> be the <a>host</a> component
    of the resulting <a>parsed URL</a>.</li>

    <li>

     If the longest suffix in the Public Suffix List that matches the end of <var>host1</var> is different than the longest suffix in the Public Suffix List that
     matches the end of <var>host2</var>, then return 0 and abort these steps. [[!PSL]]

     If the next domain component of <var>host1</var> and <var>host2</var>
     after their common suffix are not the same, then return 0 and abort these steps.

    </li>

    <li>Let <var>search engines</var> be the list of search engines known by the user
    agent and made available to the user by the user agent for which the resulting <a>absolute
    URL</a> is a <a>prefix match</a> of the search engine's <a>URL</a>, if any. For
    search engines registered using OpenSearch description documents, the <a>URL</a> of the
    search engine corresponds to the URL given in a <code>Url</code> element whose <code>rel</code> attribute is "<code>results</code>" (the default). [[!OPENSEARCH]]</li>

    <li>If <var>search engines</var> is empty, return 0 and abort these steps.</li>

    <li>If the user's default search engine (as determined by the user agent) is one of the
    search engines in <var>search engines</var>, then return 2 and abort these
    steps.</li>

    <li>Return 1.</li>

   </ol>

  </div>

  <h3 id="images"><dfn>Images</dfn></h3>

  <pre class="idl" data-highlight="webidl">
[Exposed=(Window, Worker)]
interface <dfn>ImageBitmap</dfn> {
  readonly attribute unsigned long <a>width</a>;
  readonly attribute unsigned long <a>height</a>;
};

typedef (<a>HTMLImageElement</a> or
         <a>HTMLVideoElement</a> or
         <a>HTMLCanvasElement</a> or
         <a>Blob</a> or
         <a>ImageData</a> or
         <a>CanvasRenderingContext2D</a> or
         <a>ImageBitmap</a>) <dfn>ImageBitmapSource</dfn>;

[NoInterfaceObject, Exposed=(Window, Worker)]
interface <dfn>ImageBitmapFactories</dfn> {
  Promise&lt;ImageBitmap&gt; <a>createImageBitmap</a>(<a>ImageBitmapSource</a> image);
  Promise&lt;ImageBitmap&gt; <a>createImageBitmap</a>(<a>ImageBitmapSource</a> image, long sx, long sy, long sw, long sh);
};
<a>Window</a> implements <a>ImageBitmapFactories</a>;
<a>WorkerGlobalScope</a> implements <a>ImageBitmapFactories</a>;
</pre>

  An <code>ImageBitmap</code> object represents a bitmap image that can be painted to a canvas
  without undue latency.

  <p class="note">
The exact judgement of what is undue latency of this is left up to the
  implementer, but in general if making use of the bitmap requires network I/O, or even local disk
  I/O, then the latency is probably undue; whereas if it only requires a blocking read from a GPU or
  system RAM, the latency is probably acceptable.
</p>

  <dl class="domintro">

   <dt><var>promise</var> = <var>Window</var> . <code>createImageBitmap</code>(<var>image</var> [, <var>sx</var>, <var>sy</var>, <var>sw</var>, <var>sh</var> ] )</dt>

   <dd>

    Takes <var>image</var>, which can be an <code>img</code> element,
    <code>video</code>, or <code>canvas</code> element, a <code>Blob</code> object, an
    <code>ImageData</code> object, a <code>CanvasRenderingContext2D</code> object, or another
    <code>ImageBitmap</code> object, and returns a promise that is resolved when a new
    <code>ImageBitmap</code> is created.

    If no <code>ImageBitmap</code> object can be constructed, for example because the provided
    <var>image</var> data is not actually an image, then the promise is rejected instead.

    If <var>sx</var>, <var>sy</var>, <var>sw</var>, and <var>sh</var> arguments are provided, the source image is cropped to the given pixels, with
    any pixels missing in the original replaced by transparent black. These coordinates are in the
    source image's pixel coordinate space, <em>not</em> in CSS pixels.

    Rejects the promise with an <code>InvalidStateError</code> exception if the source image is not in a valid
    state (e.g. an <code>img</code> element that hasn't finished loading, or a
    <code>CanvasRenderingContext2D</code> object whose bitmap data has zero length along one or both
    dimensions, or an <code>ImageData</code> object whose data is <code>data</code> attribute has been <a>neutered</a>). Rejects the promise with a <code>SecurityError</code>
    exception if the script is not allowed to access the image data of the source image (e.g. a
    <code>video</code> that is <a>CORS-cross-origin</a>, or a <code>canvas</code> being drawn
    on by a script in a worker from another <a>origin</a>).

   </dd>

   <dt><var>imageBitmap</var> . <code>width</code></dt>

   <dd>

    Returns the <a>intrinsic width</a> of the image, in CSS pixels.

   </dd>

   <dt><var>imageBitmap</var> . <code>height</code></dt>

   <dd>

    Returns the <a>intrinsic height</a> of the image, in CSS pixels.

   </dd>

  </dl>

  <div class="impl">

  An <code>ImageBitmap</code> object always has associated bitmap data, with a width and a
  height. However, it is possible for this data to be corrupted. If an <code>ImageBitmap</code>
  object's media data can be decoded without errors, it is said to be <dfn>fully decodable</dfn>.

  An <code>ImageBitmap</code> object can be obtained from a variety of different objects, using
  the <dfn><code>createImageBitmap()</code></dfn> method. When invoked, the
  method must act as follows:

  <dl>

   <dt>If <var>image</var> is an <code>img</code> element

   <dd>

    <ol>

     <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
     but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

     <li>If the <code>img</code> element is not <a>completely
     available</a>, then return a promise rejected with an <code>InvalidStateError</code> exception and abort these
     steps.</li>

     <li>If the <a>origin</a> of the <code>img</code> element's image is not the <a>same
     origin</a> as the <a>origin</a> specified by the <a>entry settings object</a>,
     then return a promise rejected with a <code>SecurityError</code> exception and abort these steps.</li>

     <li>If the <code>img</code> element's media data is not a bitmap (e.g. it's a vector
     graphic), then return a promise rejected with an <code>InvalidStateError</code> exception and abort these
     steps.</li>

     <li>Create a new <code>ImageBitmap</code> object.</li>

     <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the <code>img</code>
     element's media data, <a>cropped to the source rectangle</a>. If this is an animated
     image, the <code>ImageBitmap</code> object's bitmap data must only be taken from the default
     image of the animation (the one that the format defines is to be used when animation is not
     supported or is disabled), or, if there is no such image, the first frame of the
     animation.</li>

     <li>Return a new promise, but continue running these steps
     <a>in parallel</a>.</li>

     <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

   </dd>

   <dt>If <var>image</var> is a <code>video</code> element

   <dd>

    <ol>

     <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
     but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

     <li>If the <code>video</code> element's <code>networkState</code> attribute is <code>NETWORK_EMPTY</code>, then return a promise rejected with an
     <code>InvalidStateError</code> exception and abort these steps.</li>

     <li>If the <a>origin</a> of the <code>video</code> element is not the <a>same
     origin</a> as the <a>origin</a> specified by the <a>entry settings object</a>,
     then return a promise rejected with a <code>SecurityError</code> exception and abort these steps.</li>

     <li>If the <code>video</code> element's <code>readyState</code> attribute is either <code>HAVE_NOTHING</code> or <code>HAVE_METADATA</code>, then return a promise rejected with an
     <code>InvalidStateError</code> exception and abort these steps.</li>

     <li>Create a new <code>ImageBitmap</code> object.</li>

     <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the frame at the
     <a>current playback position</a>, at the <a>media resource</a>'s <a>intrinsic width</a> and <a>intrinsic height</a> (i.e. after any aspect-ratio
     correction has been applied), <a>cropped to the source rectangle</a>.

     <li>Return a new promise, but continue running these steps
     <a>in parallel</a>.</li>

     <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

   </dd>

   <dt>If <var>image</var> is a <code>canvas</code> element

   <dd>

    <ol>

     <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
     but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

     <li>If the <code>canvas</code> element's bitmap data does not have its <a>origin-clean</a> flag set, then return a promise rejected with an
     <code>InvalidStateError</code> exception and abort these steps.</li>

     <li>If the <code>canvas</code> element's bitmap has either a horizontal dimension or a
     vertical dimension equal to zero, then return a promise rejected with an <code>InvalidStateError</code> exception and
     abort these steps.</li>

     <li>Create a new <code>ImageBitmap</code> object.</li>

     <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the
     <code>canvas</code> element's bitmap data, <a>cropped to the source
     rectangle</a>.</li>

     <li>Return a new promise, but continue running these steps
     <a>in parallel</a>.</li>

     <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

   </dd>

   <dt>If <var>image</var> is a <code>Blob</code> object

   <dd>

    <ol>

     <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
     but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

     <li>If the <code>Blob</code> object has been disabled through the <code>close()</code> method, then return a promise rejected with an <code>InvalidStateError</code>
     exception and abort these steps.</li>

     <li>Return a new promise, but continue running these steps
     <a>in parallel</a>.</li>

     <li>Read the <code>Blob</code> object's data. If an <a>error
     occurs during reading of the object</a>, then reject the promise with null, and abort these
     steps.</li>

     <li>Apply the <a>image sniffing rules</a> to
     determine the file format of the image data, with MIME type of the <code>Blob</code> (as given
     by the <code>Blob</code> object's <code>type</code> attribute) giving the
     official type.</li>

     <li>If the image data is not in a supported file format (e.g. it's not actually an image at
     all), or if the image data is corrupted in some fatal way such that the image dimensions cannot
     be obtained, then reject the promise with null, and abort these steps.</li>

     <li>Create a new <code>ImageBitmap</code> object.</li>

     <li>Let the <code>ImageBitmap</code> object's bitmap data be the image data read from the
     <code>Blob</code> object, <a>cropped to the source rectangle</a>. If this is an animated
     image, the <code>ImageBitmap</code> object's bitmap data must only be taken from the default
     image of the animation (the one that the format defines is to be used when animation is not
     supported or is disabled), or, if there is no such image, the first frame of the
     animation.</li>

     <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

   </dd>

   <dt>If <var>image</var> is an <code>ImageData</code> object

   <dd>

    <ol>

     <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
     but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

     <li>If the <var>image</var> object's <code>data</code>
     attribute has been <a>neutered</a>, return a promise rejected with an
     <code>InvalidStateError</code> exception and abort these steps.</li>

     <li>Create a new <code>ImageBitmap</code> object.</li>

     <li>Let the <code>ImageBitmap</code> object's bitmap data be the image data given by the
     <code>ImageData</code> object, <a>cropped to the source rectangle</a>.</li>

     <li>Return a new promise, but continue running these steps
     <a>in parallel</a>.</li>

     <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

   </dd>

   <dt>If <var>image</var> is a <code>CanvasRenderingContext2D</code> object

   <dd>

    <ol>

     <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
     but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

     <li>If the <code>CanvasRenderingContext2D</code> object's <a>scratch bitmap</a> does
     not have its <a>origin-clean</a> flag set, then return a promise rejected with
     an <code>InvalidStateError</code> exception and abort these steps.</li>

     <li>If the <code>CanvasRenderingContext2D</code> object's <a>scratch bitmap</a> has
     either a horizontal dimension or a vertical dimension equal to zero, then return a promise rejected with an
     <code>InvalidStateError</code> exception and abort these steps.</li>

     <li>Create a new <code>ImageBitmap</code> object.</li>

     <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the
     <code>CanvasRenderingContext2D</code> object's <a>scratch bitmap</a>, <a>cropped to
     the source rectangle</a>.</li>

     <li>Return a new promise, but continue running these steps
     <a>in parallel</a>.</li>

     <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

   </dd>

   <dt>If <var>image</var> is an <code>ImageBitmap</code> object

   <dd>

    <ol>

     <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
     but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

     <li>Create a new <code>ImageBitmap</code> object.</li>

     <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the <var>image</var> argument's bitmap data, <a>cropped to the source
     rectangle</a>.</li>

     <li>Return a new promise, but continue running these steps
     <a>in parallel</a>.</li>

     <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

   </dd>

  </dl>

  When the steps above require that the user agent <dfn>crop bitmap data to the source rectangle</dfn>, the user agent must run the following
  steps:

  <ol>

   <li>Let <var>input</var> be the image data being cropped.</li>

   <li>If the <var>sx</var>, <var>sy</var>, <var>sw</var>, and <var>sh</var> arguments are omitted, return <var>input</var>.</li>

   <li>Place <var>input</var> on an infinite transparent black grid plane, positioned so
   that it's top left corner is at the origin of the plane, with the <var>x</var>-coordinate increasing to the right, and the <var>y</var>-coordinate
   increasing down, and with each pixel in the <var>input</var> image data occupying a cell
   on the plane's grid.</li>

   <li>

    Let <var>output</var> be the rectangle on the plane denoted by the rectangle whose
    corners are the four points (<var>sx</var>, <var>sy</var>), (<a><var>sx</var>+<var>sw</var></a>, <var>sy</var>), (<a><var>sx</var>+<var>sw</var></a>, <a><var>sy</var>+<var>sh</var></a>), (<var>sx</var>, <a><var>sy</var>+<var>sh</var></a>).

    <p class="note">
If either <var>sw</var> or <var>sh</var> are negative, then
    the top-left corner of this rectangle will be to the left or above the (<var>sx</var>,
    <var>sy</var>) point. If any of the pixels on this rectangle are outside the area where
    the <var>input</var> bitmap was placed, then they will be transparent black in <var>output</var>.
</p>

   </li>

   <li>Return <var>output</var>.</li>

  </ol>

  The <dfn><code>width</code></dfn> attribute must return the
  <code>ImageBitmap</code> object's width, in CSS pixels.

  The <dfn><code>height</code></dfn> attribute must return the
  <code>ImageBitmap</code> object's height, in CSS pixels.

  </div>

  <div class="example">

   Using this API, a sprite sheet can be precut and prepared:

   <pre highlight="javascript">var sprites = {};
function loadMySprites() {
  var image = new Image();
  image.src = 'mysprites.png';
  var resolver;
  var promise = new Promise(function (arg) { resolver = arg });
  image.onload = function () {
    resolver(Promise.all(
      createImageBitmap(image,  0,  0, 40, 40).then(function (image) { sprites.woman = image }),
      createImageBitmap(image, 40,  0, 40, 40).then(function (image) { sprites.man   = image }),
      createImageBitmap(image, 80,  0, 40, 40).then(function (image) { sprites.tree  = image }),
      createImageBitmap(image,  0, 40, 40, 40).then(function (image) { sprites.hut   = image }),
      createImageBitmap(image, 40, 40, 40, 40).then(function (image) { sprites.apple = image }),
      createImageBitmap(image, 80, 40, 40, 40).then(function (image) { sprites.snake = image }),
    ));
  };
  return promise;
}

function runDemo() {
  var canvas = document.querySelector('canvas#demo');
  var context = canvas.getContext('2d');
  context.drawImage(sprites.tree, 30, 10);
  context.drawImage(sprites.snake, 70, 10);
}

loadMySprites().then(runDemo);</pre>

  </div>

  <h2 id="the-html-syntax"><dfn>The HTML syntax</dfn></h2>

  <p class="note">
This section only describes the rules for resources labeled with an <a>HTML
  MIME type</a>. Rules for XML resources are discussed in the section below entitled "<a>The
  XHTML syntax</a>".
</p>

  <h3 id="writing-html-documents"><dfn>Writing HTML documents</dfn></h3>

  <div class="impl">

  <i>This section only applies to documents, authoring tools, and markup generators. In
  particular, it does not apply to conformance checkers; conformance checkers must use the
  requirements given in the next section ("parsing HTML documents").</i>

  </div>

  Documents must consist of the following parts, in the given
  order:

  <ol>

   <li>Optionally, a single U+FEFF BYTE ORDER MARK (BOM) character.</li>

   <li>Any number of <a>comments</a> and <a>space characters</a>.</li>

   <li>A <a>DOCTYPE</a>.

   <li>Any number of <a>comments</a> and <a>space characters</a>.</li>

   <li>The root element, in the form of an <code>html</code> <a>element</a>.</li>

   <li>Any number of <a>comments</a> and <a>space characters</a>.</li>

  </ol>

  The various types of content mentioned above are described in the next few sections.

  In addition, there are some restrictions on how <a>character encoding declarations</a> are to be serialized, as discussed in the
  section on that topic.

  <div class="note">

   Space characters before the root <code>html</code> element, and space characters at the start
   of the <code>html</code> element and before the <code>head</code> element, will be dropped when
   the document is parsed; space characters <em>after</em> the root <code>html</code> element will
   be parsed as if they were at the end of the <code>body</code> element. Thus, space characters
   around the root element do not round-trip.

   It is suggested that newlines be inserted after the DOCTYPE, after any comments that are
   before the root element, after the <code>html</code> element's start tag (if it is not <a>omitted</a>), and after any comments that are inside the
   <code>html</code> element but before the <code>head</code> element.

  </div>

  Many strings in the HTML syntax (e.g. the names of elements and their attributes) are
  case-insensitive, but only for <a>uppercase ASCII letters</a> and <a>lowercase ASCII
  letters</a>. For convenience, in this section this is just referred to as
  "case-insensitive".

  <h4 id="the-doctype"><dfn>The DOCTYPE</dfn></h4>

  A <dfn>DOCTYPE</dfn> is a
  required preamble.

  <p class="note">
DOCTYPEs are required for legacy reasons. When omitted, browsers tend to use a
  different rendering mode that is incompatible with some specifications. Including the DOCTYPE in a
  document ensures that the browser makes a best-effort attempt at following the relevant
  specifications.
</p>

  A DOCTYPE must consist of the following components, in this order:

  <ol class="brief">
   <li>A string that is an <a>ASCII case-insensitive</a> match for the string "<code>&lt;!DOCTYPE</code>".</li>
   <li>One or more <a>space characters</a>.</li>
   <li>A string that is an <a>ASCII case-insensitive</a> match for the string "<code>html</code>".</li>
   <li>Optionally, a <a>DOCTYPE legacy string</a> or an <a>obsolete permitted DOCTYPE string</a> (defined below).</li>
   <li>Zero or more <a>space characters</a>.</li>
   <li>A U+003E GREATER-THAN SIGN character (&gt;).</li>
  </ol>

  <p class="note">
In other words, <code>&lt;!DOCTYPE html></code>, case-insensitively.
</p>

  <hr />

  For the purposes of HTML generators that cannot output HTML markup with the short DOCTYPE
  "<code>&lt;!DOCTYPE html></code>", a <dfn>DOCTYPE legacy string</dfn> may be inserted
  into the DOCTYPE (in the position defined above). This string must consist of:

  <ol class="brief">
   <li>One or more <a>space characters</a>.</li>
   <li>A string that is an <a>ASCII case-insensitive</a> match for the string "<code>SYSTEM</code>".</li>
   <li>One or more <a>space characters</a>.</li>
   <li>A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the <i>quote mark</i>).</li>
   <li>The literal string "<code>about:legacy-compat</code>".</li>
   <li>A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the same character as in the earlier step labeled <i>quote mark</i>).</li>
  </ol>

  <p class="note">
In other words, <code>&lt;!DOCTYPE html SYSTEM "about:legacy-compat"></code> or
  <code>&lt;!DOCTYPE html SYSTEM 'about:legacy-compat'></code>, case-insensitively except for the
  part in single or double quotes.
</p>

  The <a>DOCTYPE legacy string</a> should not be used unless the document is generated from
  a system that cannot output the shorter string.

  <hr />

  To help authors transition from HTML4 and XHTML1, an <dfn>obsolete permitted DOCTYPE
  string</dfn> can be inserted into the DOCTYPE (in the position defined above). This string must
  consist of:

  <ol class="brief">
   <li>One or more <a>space characters</a>.</li>
   <li>A string that is an <a>ASCII case-insensitive</a> match for the string "<code>PUBLIC</code>".</li>
   <li>One or more <a>space characters</a>.</li>
   <li>A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the <i>first quote mark</i>).</li>
   <li>The string from one of the cells in the first column of the table below. The row to which this cell belongs is the <i>selected row</i>.</li>
   <li>A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the same character as in the earlier step labeled <i>first quote mark</i>).</li>

   <li>If a system identifier is used,
      <ol>
        <li>One or more <a>space characters</a>.</li>
        <li>A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the <i>third quote mark</i>).</li>
        <li>The string from the cell in the second column of the <i>selected row</i>.</li>
        <li>A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the same character as in the earlier step labeled <i>third quote mark</i>).</li>
  </ol>
    </li>

  </ol>

  <table>
   <caption>
    Allowed values for public and system identifiers in an <a>obsolete permitted DOCTYPE string</a>.
   </caption>
   <thead>
    <tr>
     <th> Public identifier
     <th> System identifier
     <th> System identifier optional?
   <tbody>
    <tr>
     <td> <code>-//W3C//DTD&nbsp;HTML&nbsp;4.0//EN</code>
     <td> <code>http://www.w3.org/TR/REC-html40/strict.dtd</code>
     <td> Yes
    <tr>
     <td> <code>-//W3C//DTD&nbsp;HTML&nbsp;4.01//EN</code>
     <td> <code>http://www.w3.org/TR/html4/strict.dtd</code>
     <td> Yes
    <tr>
     <td> <code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Strict//EN</code>
     <td> <code>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</code>
     <td> No
    <tr>
     <td> <code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1//EN</code>
     <td> <code>http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</code>
     <td> No
  </table>

  <p class="auth">A <a>DOCTYPE</a> containing an <a>obsolete permitted DOCTYPE
  string</a> is an <dfn>obsolete permitted DOCTYPE</dfn>. Authors should not use <a>obsolete permitted DOCTYPEs</a>, as they are unnecessarily
  long.</p>

  <h4 id="elements"><dfn>Elements</dfn></h4>

  There are five different kinds of <dfn>elements</dfn>: <a>void
  elements</a>, <a>raw text elements</a>, <a>escapable raw text elements</a>,
  <a>foreign elements</a>, and <a>normal elements</a>.

  <dl>

   <dt><dfn>Void elements</dfn></dt>

   <dd><code>area</code>, <code>base</code>, <code>br</code>, <code>col</code>, <code>embed</code>,
   <code>hr</code>, <code>img</code>, <code>input</code>, <code>keygen</code>, <code>link</code>,
   <code>menuitem</code>, <code>meta</code>, <code>param</code>, <code>source</code>,
   <code>track</code>, <code>wbr</code></dd>

   <dt><dfn>Raw text elements</dfn></dt>

   <dd><code>script</code>, <code>style</code></dd>

   <dt><dfn>escapable raw text elements</dfn></dt>

   <dd><code>textarea</code>, <code>title</code></dd>

   <dt><dfn>Foreign elements</dfn></dt>

   <dd>Elements from the <a>MathML namespace</a> and the <a>SVG namespace</a>.</dd>

   <dt><dfn>Normal elements</dfn></dt>

   <dd>All other allowed <a>HTML elements</a> are normal elements.</dd>

  </dl>

  <dfn>Tags</dfn> are used to delimit the start and end of elements in the
  markup. <a>Raw text</a>, <a>escapable raw text</a>, and <a>normal</a> elements have
  a <a>start tag</a> to indicate where they begin, and an <a>end tag</a> to indicate where they end. The start and end tags of
  certain <a>normal elements</a> can be <a>omitted</a>, as
  described below in the section on <a>optional tags</a>. Those
  that cannot be omitted must not be omitted. <a>Void elements</a> only have a start tag; end
  tags must not be specified for <a>void elements</a>. <a>Foreign elements</a> must
  either have a start tag and an end tag, or a start tag that is marked as self-closing, in which
  case they must not have an end tag.

  The <a>contents</a> of the element must be placed between
  just after the start tag (which <a>might be implied, in certain
  cases</a>) and just before the end tag (which again, <a>might be
  implied in certain cases</a>). The exact allowed contents of each individual element depend on
  the <a>content model</a> of that element, as described earlier in
  this specification. Elements must not contain content that their content model disallows. In
  addition to the restrictions placed on the contents by those content models, however, the five
  types of elements have additional <em>syntactic</em> requirements.

  <a>Void elements</a> can't have any contents (since there's no end tag, no content can be
  put between the start tag and the end tag).

  <a>Raw text elements</a> can have <a>text</a>, though it has <a>restrictions</a> described below.

  <a>Escapable raw text elements</a> can have <a>text</a> and
  <a>character references</a>, but the text must not contain an <a>ambiguous ampersand</a>. There are also <a>further restrictions</a> described below.

  <a>Foreign elements</a> whose start tag is marked as self-closing can't have any contents
  (since, again, as there's no end tag, no content can be put between the start tag and the end
  tag). <a>Foreign elements</a> whose start tag is <em>not</em> marked as self-closing can
  have <a>text</a>, <a>character
  references</a>, <a>CDATA sections</a>, other <a>elements</a>, and <a>comments</a>, but
  the text must not contain the character U+003C LESS-THAN SIGN (&lt;) or an <a>ambiguous ampersand</a>.

  <div class="note">

   The HTML syntax does not support namespace declarations, even in <a>foreign
   elements</a>.

   For instance, consider the following HTML fragment:

   <pre highlight="html">
&lt;p>
 &lt;svg>
  &lt;metadata>
   &lt;!-- this is invalid -->
   &lt;cdr:license xmlns:cdr="http://www.example.com/cdr/metadata" name="MIT"/>
  &lt;/metadata>
 &lt;/svg>
&lt;/p>
</pre>

   The innermost element, <code>cdr:license</code>, is actually in the SVG namespace, as
   the "<code>xmlns:cdr</code>" attribute has no effect (unlike in XML). In fact, as the
   comment in the fragment above says, the fragment is actually non-conforming. This is because the
   SVG specification does not define any elements called "<code>cdr:license</code>" in the
   SVG namespace.

  </div>

  <a>Normal elements</a> can have <a>text</a>, <a>character references</a>, other <a>elements</a>, and <a>comments</a>, but
  the text must not contain the character U+003C LESS-THAN SIGN (&lt;) or an <a>ambiguous ampersand</a>. Some <a>normal elements</a>
  also have <a>yet more restrictions</a> on what content they are
  allowed to hold, beyond the restrictions imposed by the content model and those described in this
  paragraph. Those restrictions are described below.

  Tags contain a <dfn>tag name</dfn>, giving the element's name. HTML
  elements all have names that only use <a>alphanumeric ASCII characters</a>. In the HTML
  syntax, tag names, even those for <a>foreign elements</a>, may be written with any mix of
  lower- and uppercase letters that, when converted to all-lowercase, matches the element's tag
  name; tag names are case-insensitive.

  <h5 id="start-tags"><dfn>Start tags</dfn></h5>

  <dfn>Start tags</dfn> must have the following format:

  <ol>

   <li>The first character of a start tag must be a U+003C LESS-THAN SIGN character (&lt;).</li>

   <li>The next few characters of a start tag must be the element's <a>tag name</a>.</li>

   <li>If there are to be any attributes in the next step, there must first be one or more <a>space characters</a>.</li>

   <li>Then, the start tag may have a number of attributes, the <a>syntax for which</a> is described below. Attributes must be
   separated from each other by one or more <a>space
   characters</a>.</li>

   <li>After the attributes, or after the <a>tag name</a> if there are
   no attributes, there may be one or more <a>space characters</a>.
   (Some attributes are required to be followed by a space. See the <a>attributes section</a> below.)</li>

   <li>Then, if the element is one of the <a>void elements</a>, or if the element is a <a>foreign element</a>, then there may be a single U+002F SOLIDUS
   character (/). This character has no effect on <a>void elements</a>, but on <a>foreign
   elements</a> it marks the start tag as self-closing.</li>

   <li>Finally, start tags must be closed by a U+003E GREATER-THAN SIGN character (&gt;).</li>

  </ol>

  <h5 id="end-tags"><dfn>End tags</dfn></h5>

  <dfn>End tags</dfn> must have the following format:

  <ol>

   <li>The first character of an end tag must be a U+003C LESS-THAN SIGN character (&lt;).</li>

   <li>The second character of an end tag must be a U+002F SOLIDUS character (/).</li>

   <li>The next few characters of an end tag must be the element's <a>tag
   name</a>.</li>

   <li>After the tag name, there may be one or more <a>space
   characters</a>.</li>

   <li>Finally, end tags must be closed by a U+003E GREATER-THAN SIGN character (&gt;).</li>

  </ol>

  <h5 id="attributes"><dfn>Attributes</dfn></h5>

  <dfn>Attributes</dfn> for an element are expressed inside the
  element's start tag.

  Attributes have a name and a value. <dfn>Attribute names</dfn>
  must consist of one or more characters other than the <a>space
  characters</a>, U+0000 NULL, U+0022 QUOTATION MARK (&#x22;), U+0027 APOSTROPHE (&#x27;), U+003E
  GREATER-THAN SIGN (&gt;), U+002F SOLIDUS (/), and U+003D EQUALS SIGN (=) characters, the <a>control
  characters</a>, and any characters that are not defined by Unicode. In the HTML syntax, attribute
  names, even those for <a>foreign elements</a>, may be written with any mix of lower- and
  uppercase letters that are an <a>ASCII case-insensitive</a> match for the attribute's
  name.

  <dfn>Attribute values</dfn> are a mixture of <a>text</a> and <a>character references</a>,
  except with the additional restriction that the text cannot contain an <a>ambiguous ampersand</a>.

  Attributes can be specified in four different ways:

  <dl>

   <dt>Empty attribute syntax</dt>

   <dd>

    Just the <a>attribute name</a>. The value is implicitly
    the empty string.

    <div class="example">

     In the following example, the <code>disabled</code> attribute is
     given with the empty attribute syntax:

     <pre highlight="html">
&lt;input <em>disabled</em>&gt;
</pre>

    </div>

    If an attribute using the empty attribute syntax is to be followed by another attribute, then
    there must be a <a>space character</a> separating the two.

   </dd>

   <dt>Unquoted attribute value syntax</dt>

   <dd>

    The <a>attribute name</a>, followed by zero or more <a>space characters</a>, followed by a single U+003D EQUALS SIGN
    character, followed by zero or more <a>space characters</a>,
    followed by the <a>attribute value</a>, which, in addition
    to the requirements given above for attribute values, must not contain any literal <a>space characters</a>, any U+0022 QUOTATION MARK characters (&#x22;),
    U+0027 APOSTROPHE characters (&#x27;), U+003D EQUALS SIGN characters (=), U+003C LESS-THAN SIGN
    characters (&lt;), U+003E GREATER-THAN SIGN characters (&gt;), or U+0060 GRAVE ACCENT characters
    (`), and must not be the empty string.

    <div class="example">

     In the following example, the <code>value</code> attribute is given
     with the unquoted attribute value syntax:

     <pre highlight="html">
&lt;input <em>value=yes</em>&gt;
</pre>

    </div>

    If an attribute using the unquoted attribute syntax is to be followed by another attribute or
    by the optional U+002F SOLIDUS character (/) allowed in step 6 of the <a>start tag</a> syntax above, then there must be a <a>space
    character</a> separating the two.

   </dd>

   <dt>Single-quoted attribute value syntax</dt>

   <dd>

    The <a>attribute name</a>, followed by zero or more <a>space characters</a>, followed by a single U+003D EQUALS SIGN
    character, followed by zero or more <a>space characters</a>,
    followed by a single U+0027 APOSTROPHE character ('), followed by the <a>attribute value</a>, which, in addition to the requirements
    given above for attribute values, must not contain any literal U+0027 APOSTROPHE characters ('),
    and finally followed by a second single U+0027 APOSTROPHE character (').

    <div class="example">

     In the following example, the <code>type</code> attribute is given
     with the single-quoted attribute value syntax:

     <pre highlight="html">
&lt;input <em>type='checkbox'</em>&gt;
</pre>

    </div>

    If an attribute using the single-quoted attribute syntax is to be followed by another
    attribute, then there must be a <a>space character</a> separating the two.

   </dd>

   <dt>Double-quoted attribute value syntax</dt>

   <dd>

    The <a>attribute name</a>, followed by zero or more <a>space characters</a>, followed by a single U+003D EQUALS SIGN
    character, followed by zero or more <a>space characters</a>,
    followed by a single U+0022 QUOTATION MARK character ("), followed by the <a>attribute value</a>, which, in addition to the requirements
    given above for attribute values, must not contain any literal U+0022 QUOTATION MARK characters
    ("), and finally followed by a second single U+0022 QUOTATION MARK character (").

    <div class="example">

     In the following example, the <code>name</code> attribute is given with
     the double-quoted attribute value syntax:

     <pre highlight="html">
&lt;input <em>name="be evil"</em>&gt;
</pre>

    </div>

    If an attribute using the double-quoted attribute syntax is to be followed by another
    attribute, then there must be a <a>space character</a> separating the two.

   </dd>

  </dl>

  There must never be two or more attributes on the same start tag whose names are an <a>ASCII
  case-insensitive</a> match for each other.

  <hr />

  When a <a>foreign element</a> has one of the namespaced
  attributes given by the local name and namespace of the first and second cells of a row from the
  following table, it must be written using the name given by the third cell from the same row.

  <table>
   <thead>
    <tr> <th> Local name <th> Namespace <th> Attribute name
   <tbody>
    <tr> <td> <code>actuate</code> <td> <a>XLink namespace</a> <td> <code>xlink:actuate</code>
    <tr> <td> <code>arcrole</code> <td> <a>XLink namespace</a> <td> <code>xlink:arcrole</code>
    <tr> <td> <code>href</code> <td> <a>XLink namespace</a> <td> <code>xlink:href</code>
    <tr> <td> <code>role</code> <td> <a>XLink namespace</a> <td> <code>xlink:role</code>
    <tr> <td> <code>show</code> <td> <a>XLink namespace</a> <td> <code>xlink:show</code>
    <tr> <td> <code>title</code> <td> <a>XLink namespace</a> <td> <code>xlink:title</code>
    <tr> <td> <code>type</code> <td> <a>XLink namespace</a> <td> <code>xlink:type</code>
    <tr> <td> <code>base</code> <td> <a>XML namespace</a>  <td> <code>xml:base</code>
    <tr> <td> <code>lang</code> <td> <a>XML namespace</a> <td> <code>xml:lang</code>
    <tr> <td> <code>space</code> <td> <a>XML namespace</a> <td> <code>xml:space</code>
    <tr> <td> <code>xmlns</code> <td> <a>XMLNS namespace</a> <td> <code>xmlns</code>
    <tr> <td> <code>xlink</code> <td> <a>XMLNS namespace</a> <td> <code>xmlns:xlink</code>
  </table>

  No other namespaced attribute can be expressed in <a>the HTML syntax</a>.

  <p class="note">
Whether the attributes in the table above are conforming or not is defined by
  other specifications (e.g. the SVG and MathML specifications); this section only describes the
  syntax rules if the attributes are serialized using the HTML syntax.
</p>

  <h5 id="optional-tags"><dfn>Optional tags</dfn></h5>

  Certain tags can be <dfn>omitted</dfn>.

  <p class="note">
Omitting an element's <a>start tag</a> in the
  situations described below does not mean the element is not present; it is implied, but it is
  still there. For example, an HTML document always has a root <code>html</code> element, even if
  the string <code>&lt;html></code> doesn't appear anywhere in the markup.
</p>

  An <code>html</code> element's <a>start tag</a> may be omitted
  if the first thing inside the <code>html</code> element is not a <a>comment</a>.

  <div class="example">

   For example, in the following case it's ok to remove the "<code>&lt;html></code>"
   tag:

   <pre highlight="html">
&lt;!DOCTYPE HTML>
<strong>&lt;html></strong>
  &lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
&lt;/html>
</pre>

   Doing so would make the document look like this:

   <pre highlight="html">
&lt;!DOCTYPE HTML>

  &lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
&lt;/html>
</pre>

   This has the exact same DOM. In particular, note that white space around the root element is
   ignored by the parser. The following example would also have the exact same DOM:

   <pre highlight="html">
&lt;!DOCTYPE HTML>&lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
&lt;/html>
</pre>

   However, in the following example, removing the start tag moves the comment to before the
   <code>html</code> element:

   <pre highlight="html">
&lt;!DOCTYPE HTML>
&lt;html>
  <strong>&lt;!-- where is this comment in the DOM? --></strong>
  &lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
&lt;/html>
</pre>

   With the tag removed, the document actually turns into the same as this:

   <pre highlight="html">
&lt;!DOCTYPE HTML>
&lt;!-- where is this comment in the DOM? -->
<small>&lt;html></small>
  &lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
&lt;/html>
</pre>

   This is why the tag can only be removed if it is not followed by a comment: removing the tag
   when there is a comment there changes the document's resulting parse tree. Of course, if the
   position of the comment does not matter, then the tag can be omitted, as if the comment had been
   moved to before the start tag in the first place.

  </div>

  An <code>html</code> element's <a>end tag</a> may be omitted if
  the <code>html</code> element is not immediately followed by a <a>comment</a>.

  A <code>head</code> element's <a>start tag</a> may be omitted if
  the element is empty, or if the first thing inside the <code>head</code> element is an
  element.

  A <code>head</code> element's <a>end tag</a> may be omitted if the
  <code>head</code> element is not immediately followed by a <a>space character</a> or a <a>comment</a>.

  A <code>body</code> element's <a>start tag</a> may be omitted
  if the element is empty, or if the first thing inside the <code>body</code> element is not a
  <a>space character</a> or a <a>comment</a>, except if the
  first thing inside the <code>body</code> element is a <code>meta</code>, <code>link</code>,
  <code>script</code>, <code>style</code>, or <code>template</code> element.

  A <code>body</code> element's <a>end tag</a> may be omitted if the
  <code>body</code> element is not immediately followed by a <a>comment</a>.

  <div class="example">

   Note that in the example above, the <code>head</code> element start and end tags, and the
   <code>body</code> element start tag, can't be omitted, because they are surrounded by white
   space:

   <pre highlight="html">
&lt;!DOCTYPE HTML>
&lt;html><strong>
  </strong>&lt;head><strong>
    </strong>&lt;title>Hello&lt;/title><strong>
  </strong>&lt;/head><strong>
  </strong>&lt;body><strong>
    </strong>&lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
&lt;/html>
</pre>

   (The <code>body</code> and <code>html</code> element end tags could be omitted without
   trouble; any spaces after those get parsed into the <code>body</code> element anyway.)

   Usually, however, white space isn't an issue. If we first remove the white space we don't care
   about:

   <pre highlight="html">
&lt;!DOCTYPE HTML>&lt;html>&lt;head>&lt;title>Hello&lt;/title>&lt;/head>&lt;body>&lt;p>Welcome to this example.&lt;/p>&lt;/body>&lt;/html>
</pre>

   Then we can omit a number of tags without affecting the DOM:

   <pre highlight="html">
&lt;!DOCTYPE HTML>&lt;title>Hello&lt;/title>&lt;p>Welcome to this example.&lt;/p>
</pre>

   At that point, we can also add some white space back:

   <pre highlight="html">
&lt;!DOCTYPE HTML>
&lt;title>Hello&lt;/title>
&lt;p>Welcome to this example.&lt;/p>
</pre>

   This would be equivalent to this document, with the omitted tags shown in their
   parser-implied positions; the only white space text node that results from this is the newline at
   the end of the <code>head</code> element:

   <pre highlight="html">
&lt;!DOCTYPE HTML>
<small>&lt;html>&lt;head></small>&lt;title>Hello&lt;/title>
<small>&lt;/head>&lt;body></small>&lt;p>Welcome to this example.&lt;/p><small>&lt;/body>&lt;/html></small>
</pre>

  </div>

  An <code>li</code> element's <a>end tag</a> may be omitted if the
  <code>li</code> element is immediately followed by another <code>li</code> element or if there is
  no more content in the parent element.

  A <code>dt</code> element's <a>end tag</a> may be omitted if the
  <code>dt</code> element is immediately followed by another <code>dt</code> element or a
  <code>dd</code> element.

  A <code>dd</code> element's <a>end tag</a> may be omitted if the
  <code>dd</code> element is immediately followed by another <code>dd</code> element or a
  <code>dt</code> element, or if there is no more content in the parent element.

  A <code>p</code> element's <a>end tag</a> may be omitted if the
  <code>p</code> element is immediately followed by an <code>address</code>, <code>article</code>,
  <code>aside</code>, <code>blockquote</code>, <code>details</code>, <code>div</code>, <code>dl</code>,
  <code>fieldset</code>, <code>figcaption</code>, <code>figure</code>, <code>footer</code>, <code>form</code>, <code>h1</code>, <code>h2</code>,
  <code>h3</code>, <code>h4</code>, <code>h5</code>, <code>h6</code>, <code>header</code>,
  <code>hr</code>, <code>main</code>, <code>menu</code>, <code>nav</code>,
  <code>ol</code>, <code>p</code>, <code>pre</code>, <code>section</code>, <code>table</code>, or
  <code>ul</code> element, or if there is no more content in the parent element and the parent
  element is an <a>HTML element</a> that is not an <code>a</code>, <code>audio</code>, <code>del</code>,
  <code>ins</code>, <code>map</code>, <code>noscript</code>, or <code>video</code> element.

  <div class="example">

   We can thus simplify the earlier example further:

   <pre highlight="html">
&lt;!DOCTYPE HTML>&lt;title>Hello&lt;/title>&lt;p>Welcome to this example.<small>&lt;/p></small>
</pre>

  </div>

  <p>An <code>rt</code> element's <a>end tag</a> may be omitted if the
  <code>rt</code> element is immediately followed by an <code>rt</code> or <code>rp</code> element,
  or if there is no more content in the parent element.

  An <code>rp</code> element's <a>end tag</a> may be omitted if the
  <code>rp</code> element is immediately followed by an <code>rt</code> or <code>rp</code> element,
  or if there is no more content in the parent element.

  An <code>optgroup</code> element's <a>end tag</a> may be omitted
  if the <code>optgroup</code> element  is
  immediately followed by another <code>optgroup</code> element, or if  there is no more content in
  the parent element.

  An <code>option</code> element's <a>end tag</a> may be omitted if
  the <code>option</code> element is immediately followed by another <code>option</code> element, or
  if it is immediately followed by an <code>optgroup</code> element, or if there is no more content
  in the parent element.

  A <code>colgroup</code> element's <a>start tag</a> may be
  omitted if the first thing inside the <code>colgroup</code> element is a <code>col</code> element,
  and if the element is not immediately preceded by another <code>colgroup</code> element whose
  <a>end tag</a> has been omitted. (It can't be omitted if the element
  is empty.)

  A <code>colgroup</code> element's <a>end tag</a> may be omitted if
  the <code>colgroup</code> element is not immediately followed by a <a>space character</a> or
  a <a>comment</a>.

  A <code>caption</code> element's <a>end tag</a> may be omitted if
  the <code>caption</code> element is not immediately followed by a <a>space character</a> or
  a <a>comment</a>.

  A <code>thead</code> element's <a>end tag</a> may be omitted if
  the <code>thead</code> element is immediately followed by a <code>tbody</code> or
  <code>tfoot</code> element.

  A <code>tbody</code> element's <a>start tag</a> may be omitted
  if the first thing inside the <code>tbody</code> element is a <code>tr</code> element, and if the
  element is not immediately preceded by a <code>tbody</code>, <code>thead</code>, or
  <code>tfoot</code> element whose <a>end tag</a> has been omitted. (It
  can't be omitted if the element is empty.)

  A <code>tbody</code> element's <a>end tag</a> may be omitted if
  the <code>tbody</code> element is immediately followed by a <code>tbody</code> or
  <code>tfoot</code> element, or if there is no more content in the parent element.

  A <code>tfoot</code> element's <a>end tag</a> may be omitted if
  the <code>tfoot</code> element is immediately followed by a <code>tbody</code> element, or if
  there is no more content in the parent element.

  A <code>tr</code> element's <a>end tag</a> may be omitted if the
  <code>tr</code> element is immediately followed by another <code>tr</code> element, or if there is
  no more content in the parent element.

  A <code>td</code> element's <a>end tag</a> may be omitted if the
  <code>td</code> element is immediately followed by a <code>td</code> or <code>th</code> element,
  or if there is no more content in the parent element.

  A <code>th</code> element's <a>end tag</a> may be omitted if the
  <code>th</code> element is immediately followed by a <code>td</code> or <code>th</code> element,
  or if there is no more content in the parent element.

  <div class="example">

   The ability to omit all these table-related tags makes table markup much terser.

   Take this example:

   <pre highlight="html">
&lt;table>
 &lt;caption>37547 TEE Electric Powered Rail Car Train Functions (Abbreviated)&lt;/caption>
 &lt;colgroup>&lt;col>&lt;col>&lt;col>&lt;/colgroup>
 &lt;thead>
  &lt;tr>
   &lt;th>Function&lt;/th>
   &lt;th>Control Unit&lt;/th>
   &lt;th>Central Station&lt;/th>
  &lt;/tr>
 &lt;/thead>
 &lt;tbody>
  &lt;tr>
   &lt;td>Headlights&lt;/td>
   &lt;td>&#x2714;&lt;/td>
   &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;tr>
   &lt;td>Interior Lights&lt;/td>
   &lt;td>&#x2714;&lt;/td>
   &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;tr>
   &lt;td>Electric locomotive operating sounds&lt;/td>
   &lt;td>&#x2714;&lt;/td>
   &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;tr>
   &lt;td>Engineer's cab lighting&lt;/td>
   &lt;td>&lt;/td>
   &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;tr>
   &lt;td>Station Announcements - Swiss&lt;/td>
   &lt;td>&lt;/td>
   &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
 &lt;/tbody>
&lt;/table>
</pre>

   The exact same table, modulo some white space differences, could be marked up as follows:

   <pre highlight="html">
&lt;table>
 &lt;caption>37547 TEE Electric Powered Rail Car Train Functions (Abbreviated)
 &lt;colgroup>&lt;col>&lt;col>&lt;col>
 &lt;thead>
  &lt;tr>
   &lt;th>Function
   &lt;th>Control Unit
   &lt;th>Central Station
 &lt;tbody>
  &lt;tr>
   &lt;td>Headlights
   &lt;td>&#x2714;
   &lt;td>&#x2714;
  &lt;tr>
   &lt;td>Interior Lights
   &lt;td>&#x2714;
   &lt;td>&#x2714;
  &lt;tr>
   &lt;td>Electric locomotive operating sounds
   &lt;td>&#x2714;
   &lt;td>&#x2714;
  &lt;tr>
   &lt;td>Engineer's cab lighting
   &lt;td>
   &lt;td>&#x2714;
  &lt;tr>
   &lt;td>Station Announcements - Swiss
   &lt;td>
   &lt;td>&#x2714;
&lt;/table>
</pre>

   Since the cells take up much less room this way, this can be made even terser by having each
   row on one line:

   <pre highlight="html">
&lt;table>
 &lt;caption>37547 TEE Electric Powered Rail Car Train Functions (Abbreviated)
 &lt;colgroup>&lt;col>&lt;col>&lt;col>
 &lt;thead>
  &lt;tr> &lt;th>Function                              &lt;th>Control Unit     &lt;th>Central Station
 &lt;tbody>
  &lt;tr> &lt;td>Headlights                            &lt;td>&#x2714;                &lt;td>&#x2714;
  &lt;tr> &lt;td>Interior Lights                       &lt;td>&#x2714;                &lt;td>&#x2714;
  &lt;tr> &lt;td>Electric locomotive operating sounds  &lt;td>&#x2714;                &lt;td>&#x2714;
  &lt;tr> &lt;td>Engineer's cab lighting               &lt;td>                 &lt;td>&#x2714;
  &lt;tr> &lt;td>Station Announcements - Swiss         &lt;td>                 &lt;td>&#x2714;
&lt;/table>
</pre>

   The only differences between these tables, at the DOM level, is with the precise position of
   the (in any case semantically-neutral) white space.

  </div>

  <strong>However</strong>, a <a>start tag</a> must never be
  omitted if it has any attributes.

  <div class="example">

   Returning to the earlier example with all the white space removed and then all the optional
   tags removed:

   <pre highlight="html">
&lt;!DOCTYPE HTML>&lt;title>Hello&lt;/title>&lt;p>Welcome to this example.
</pre>

   If the <code>body</code> element in this example had to have a <code>class</code> attribute and the <code>html</code> element had to have a <code>lang</code> attribute, the markup would have to become:

   <pre highlight="html">
&lt;!DOCTYPE HTML>&lt;html lang="en">&lt;title>Hello&lt;/title>&lt;body class="demo">&lt;p>Welcome to this example.
</pre>

  </div>

  <p class="note">
This section assumes that the document is conforming, in particular, that there
  are no <a>content model</a> violations. Omitting tags in the fashion
  described in this section in a document that does not conform to the <a>content models</a>
  described in this specification is likely to result in unexpected DOM differences (this is, in
  part, what the content models are designed to avoid).
</p>

  <h5 id="restrictions-on-content-models"><dfn>Restrictions on content models</dfn></h5>

  For historical reasons, certain elements have extra restrictions beyond even the restrictions
  given by their content model.

  A <code>table</code> element must not contain <code>tr</code> elements, even though these
  elements are technically allowed inside <code>table</code> elements according to the content
  models described in this specification. (If a <code>tr</code> element is put inside a
  <code>table</code> in the markup, it will in fact imply a <code>tbody</code> start tag before
  it.)

  A single <a>newline</a> may be placed immediately after the <a>start tag</a> of <code>pre</code> and <code>textarea</code> elements.
  This does not affect the processing of the element. The otherwise optional <a>newline</a> <em>must</em> be included if the element's contents
  themselves start with a <a>newline</a> (because otherwise the
  leading newline in the contents would be treated like the optional newline, and ignored).

  <div class="example">
   The following two <code>pre</code> blocks are equivalent:
   <pre highlight="html">
&lt;pre>Hello&lt;/pre>
</pre>
   <pre highlight="html">
&lt;pre><br>Hello&lt;/pre>
</pre>
  </div>

  <h5 id="restrictions-on-the-contents-of-raw-text-and-escapable-raw-text-elements"><dfn>Restrictions on the contents of raw text and escapable raw text elements</dfn></h5>

  The text in <a>raw text</a> and <a>escapable raw text
  elements</a> must not contain any occurrences of the string "<code>&lt;/</code>"
  (U+003C LESS-THAN SIGN, U+002F SOLIDUS) followed by characters that case-insensitively match the
  tag name of the element followed by one of U+0009 CHARACTER TABULATION (tab), U+000A LINE FEED
  (LF), U+000C FORM FEED (FF), U+000D CARRIAGE RETURN (CR), U+0020 SPACE, U+003E GREATER-THAN SIGN
  (>), or U+002F SOLIDUS (/).

  <h4 id="text"><dfn>Text</dfn></h4>

  <dfn>Text</dfn> is allowed inside elements, attribute values, and comments.
  Extra constraints are placed on what is and what is not allowed in text based on where the text is
  to be put, as described in the other sections.

  <h5 id="newlines"><dfn>Newlines</dfn></h5>

  <dfn>Newlines</dfn> in HTML may be represented either as U+000D
  CARRIAGE RETURN (CR) characters, U+000A LINE FEED (LF) characters, or pairs of U+000D CARRIAGE
  RETURN (CR), U+000A LINE FEED (LF) characters in that order.

  Where <a>character references</a> are allowed, a character
  reference of a U+000A LINE FEED (LF) character (but not a U+000D CARRIAGE RETURN (CR) character)
  also represents a <a>newline</a>.

  <h4 id="character-references"><dfn>Character references</dfn></h4>

  In certain cases described in other sections, <a>text</a> may be
  mixed with <dfn>character references</dfn>. These can be used to escape
  characters that couldn't otherwise legally be included in <a>text</a>.

  Character references must start with a U+0026 AMPERSAND character (&amp;). Following this,
  there are three possible kinds of character references:

  <dl>

   <dt>Named character references</dt>

   <dd>The ampersand must be followed by one of the names given in the <a>named character
   references</a> section, using the same case. <span class="impl">The name must be one that is
   terminated by a U+003B SEMICOLON character (;).</span></dd>

   <dt>Decimal numeric character reference</dt>

   <dd>The ampersand must be followed by a U+0023 NUMBER SIGN character (#), followed by one or more
   <a>ASCII digits</a>, representing a base-ten integer that corresponds to a Unicode code
   point that is allowed according to the definition below. The digits must then be followed by a
   U+003B SEMICOLON character (;).</dd>

   <dt>Hexadecimal numeric character reference</dt>

   <dd>The ampersand must be followed by a U+0023 NUMBER SIGN character (#), which must be followed
   by either a U+0078 LATIN SMALL LETTER X character (x) or a U+0058 LATIN CAPITAL LETTER X
   character (X), which must then be followed by one or more <a>ASCII hex digits</a>,
   representing a hexadecimal integer that corresponds to a Unicode code point that is allowed
   according to the definition below. The digits must then be followed by a U+003B SEMICOLON
   character (;).</dd>

  </dl>

  The numeric character reference forms described above are allowed to reference any Unicode code
  point other than U+0000, U+000D, permanently undefined Unicode characters (noncharacters),
  surrogates (U+D800&ndash;U+DFFF), and <a>control characters</a> other than <a>space characters</a>.

  An <dfn>ambiguous ampersand</dfn> is a U+0026 AMPERSAND
  character (&amp;) that is followed by one or more <a>alphanumeric ASCII characters</a>,
  followed by a U+003B SEMICOLON character (;), where these characters do not match any of the names
  given in the <a>named character references</a> section.

  <h4 id="cdata-sections"><dfn>CDATA sections</dfn></h4>

  <dfn>CDATA sections</dfn> must consist of the following components, in
  this order:

  <ol>

   <li>The string "<code>&lt;![CDATA[</code>".</li>

   <li>Optionally, <a>text</a>, with the additional restriction that the
   text must not contain the string "<code>]]></code>".</li>

   <li>The string "<code>]]></code>".</li>

  </ol>

  <div class="example">

   CDATA sections can only be used in foreign content (MathML or SVG). In this example, a CDATA
   section is used to escape the contents of an <code>ms</code> element:

   <pre highlight="html">
&lt;p>You can add a string to a number, but this stringifies the number:&lt;/p>
&lt;math>
 &lt;ms>&lt;![CDATA[x&lt;y]]>&lt;/ms>
 &lt;mo>+&lt;/mo>
 &lt;mn>3&lt;/mn>
 &lt;mo>=&lt;/mo>
 &lt;ms>&lt;![CDATA[x&lt;y3]]>&lt;/ms>
&lt;/math>
</pre>

  </div>

  <h4 id="comments"><dfn>Comments</dfn></h4>

  <dfn>Comments</dfn> must start with the four character sequence U+003C
  LESS-THAN SIGN, U+0021 EXCLAMATION MARK, U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS (<code>&lt;!--</code>). Following this sequence, the comment may have <a>text</a>, with the additional restriction that the text must not start with
  a single U+003E GREATER-THAN SIGN character (&gt;), nor start with a U+002D HYPHEN-MINUS character
  (-) followed by a U+003E GREATER-THAN SIGN (&gt;) character, nor contain two consecutive U+002D
  HYPHEN-MINUS characters (<code>--</code>), nor end with a U+002D HYPHEN-MINUS character
  (-). Finally, the comment must be ended by the three character sequence U+002D HYPHEN-MINUS,
  U+002D HYPHEN-MINUS, U+003E GREATER-THAN SIGN (<code>--&gt;</code>).

  <div class="impl">

  <h3 id="parsing-html-documents"><dfn>Parsing HTML documents</dfn></h3>

  <i>This section only applies to user agents, data mining tools, and conformance
  checkers.</i>

  <p class="note">
The rules for parsing XML documents into DOM trees are covered by the next
  section, entitled "<a>The XHTML syntax</a>".
</p>

  User agents must use the parsing rules described in this section to generate the DOM trees from
  <code>text/html</code> resources. Together, these rules define what is referred to as the
  <dfn>HTML parser</dfn>.

  <div class="note">

   While the HTML syntax described in this specification bears a close resemblance to SGML and
   XML, it is a separate language with its own parsing rules.

   Some earlier versions of HTML (in particular from HTML2 to HTML4) were based on SGML and used
   SGML parsing rules. However, few (if any) web browsers ever implemented true SGML parsing for
   HTML documents; the only user agents to strictly handle HTML as an SGML application have
   historically been validators. The resulting confusion &mdash; with validators claiming documents
   to have one representation while widely deployed Web browsers interoperably implemented a
   different representation &mdash; has wasted decades of productivity. This version of HTML thus
   returns to a non-SGML basis.

   Authors interested in using SGML tools in their authoring pipeline are encouraged to use XML
   tools and the XML serialization of HTML.

  </div>

  This specification defines the parsing rules for HTML documents, whether they are syntactically
  correct or not. Certain points in the parsing algorithm are said to be <dfn>parse errors</dfn>. The error handling for parse errors is well-defined (that's the
  processing rules described throughout this specification), but user agents, while parsing an HTML
  document, may <a>abort the parser</a> at the first <a>parse
  error</a> that they encounter for which they do not wish to apply the rules described in this
  specification.

  Conformance checkers must report at least one parse error condition to the user if one or more
  parse error conditions exist in the document and must not report parse error conditions if none
  exist in the document. Conformance checkers may report more than one parse error condition if more
  than one parse error condition exists in the document.

  <p class="note">
Parse errors are only errors with the <em>syntax</em> of HTML. In addition to
  checking for parse errors, conformance checkers will also verify that the document obeys all the
  other conformance requirements described in this specification.
</p>

  For the purposes of conformance checkers, if a resource is determined to be in <a>the HTML
  syntax</a>, then it is an <a>HTML document</a>.

  <p class="note">
As stated <span class="no-backref">in the terminology
  section</span>, references to <a>element types</a> that do not
  explicitly specify a namespace always refer to elements in the <a>HTML namespace</a>. For
  example, if the spec talks about "a <code>menuitem</code> element", then that is an element with
  the local name "<code>menuitem</code>", the namespace "<code>http://www.w3.org/1999/xhtml</code>", and the interface <code>HTMLMenuItemElement</code>.
  Where possible, references to such elements are hyperlinked to their definition.
</p>

  </div>

  <div class="impl">

  <h4 id="overview-of-the-parsing-model"><dfn>Overview of the parsing model</dfn></h4>

  <p class="overview"><object data="images/parsing-model-overview.svg" width="345" height="535"><img src="images/parsing-model-overview.png" width="345" height="450" alt=""></object></p>

  The input to the HTML parsing process consists of a stream of <a>Unicode code points</a>, which is passed through a <a>tokenization</a> stage
  followed by a <a>tree construction</a> stage. The output is a <code>Document</code>
  object.

  <p class="note">
Implementations that <a>do not support scripting</a> do not
  have to actually create a DOM <code>Document</code> object, but the DOM tree in such cases is
  still used as the model for the rest of the specification.
</p>

  In the common case, the data handled by the tokenization stage comes from the network, but
  <a>it can also come from script</a> running in the user
  agent, e.g. using the <code>document.write()</code> API.

  There is only one set of states for the tokenizer stage and the tree
  construction stage, but the tree construction stage is reentrant, meaning that while the tree
  construction stage is handling one token, the tokenizer might be resumed, causing further tokens
  to be emitted and processed before the first token's processing is complete.

  <div class="example">

   In the following example, the tree construction stage will be called upon to handle a "p"
   start tag token while handling the "script" end tag token:

   <pre highlight="html">
...
&lt;script>
 document.write('&lt;p>');
&lt;/script>
...
</pre>

  </div>

  To handle these cases, parsers have a <dfn>script nesting level</dfn>, which must be initially
  set to zero, and a <dfn>parser pause flag</dfn>, which must be initially set to false.

  </div>

  <div class="impl">

  <h4 id="the-input-byte-stream"><dfn>The <dfn>input byte stream</dfn></dfn></h4>

  The stream of Unicode code points that comprizes the input to the tokenization stage will be
  initially seen by the user agent as a stream of bytes (typically coming over the network or from
  the local file system). The bytes encode the actual characters according to a particular
  <i>character encoding</i>, which the user agent uses to decode the bytes into characters.

  <p class="note">
For XML documents, the algorithm user agents are required to use to determine the
  character encoding is given by the XML specification. This section does not apply to XML
  documents. [[!XML]]
</p>

  Usually, the <a>encoding sniffing algorithm</a> defined below is used to determine the
  character encoding.

  Given a character encoding, the bytes in the <a>input byte stream</a> must be converted
  to Unicode code points for the tokenizer's <a>input stream</a>, as described by the rules
  for that encoding's <a>decoder</a>.

  <p class="note">
Bytes or sequences of bytes in the original byte stream that did not conform to
  the Encoding standard (e.g. invalid UTF-8 byte sequences in a UTF-8 input byte stream) are errors
  that conformance checkers are expected to report. [[!ENCODING]]
</p>

  <p class="note">
Leading Byte Order Marks (BOMs) are not stripped by the decoder algorithms, they
  are stripped by the algorithm below.
</p>

  <p class="warning">The decoder algorithms describe how to handle invalid input; for security
  reasons, it is imperative that those rules be followed precisely. Differences in how invalid byte
  sequences are handled can result in, amongst other problems, script injection vulnerabilities
  ("XSS").</p>

  When the HTML parser is decoding an input byte stream, it uses a character encoding and a <dfn>confidence</dfn>. The confidence is either <i>tentative</i>,
  <i>certain</i>, or <i>irrelevant</i>. The encoding used, and whether the confidence in that
  encoding is <i>tentative</i> or <i>certain</i>, is <a>used
  during the parsing</a> to determine whether to <a>change the encoding</a>. If no encoding is
  necessary, e.g. because the parser is operating on a Unicode stream and doesn't have to use a
  character encoding at all, then the <a>confidence</a> is
  <i>irrelevant</i>.

  <p class="note">
Some algorithms feed the parser by directly adding characters to the <a>input
  stream</a> rather than adding bytes to the <a>input byte stream</a>.
</p>

  <h5 id="parsing-with-a-known-character-encoding"><dfn>Parsing with a known character encoding</dfn></h5>

  When the HTML parser is to operate on an input byte stream that has <dfn>a known definite
  encoding</dfn>, then the character encoding is that encoding and the <a>confidence</a> is <i>certain</i>.

  <h5 id="determining-the-character-encoding"><dfn>Determining the character encoding</dfn></h5>

  In some cases, it might be impractical to unambiguously determine the encoding before parsing
  the document. Because of this, this specification provides for a two-pass mechanism with an
  optional pre-scan. Implementations are allowed, as described below, to apply a simplified parsing
  algorithm to whatever bytes they have available before beginning to parse the document. Then, the
  real parser is started, using a tentative encoding derived from this pre-parse and other
  out-of-band metadata. If, while the document is being loaded, the user agent discovers a character
  encoding declaration that conflicts with this information, then the parser can get reinvoked to
  perform a parse of the document with the real encoding.

  User agents must use the following algorithm, called the <dfn>encoding
  sniffing algorithm</dfn>, to determine the character encoding to use when decoding a document in
  the first pass. This algorithm takes as input any out-of-band metadata available to the user agent
  (e.g. the <a>Content-Type metadata</a> of the document) and all the
  bytes available so far, and returns a character encoding and a <a>confidence</a> that is either <i>tentative</i> or
  <i>certain</i>.

  <ol>

   <li>

    If the user has explicitly instructed the user agent to override the document's character
    encoding with a specific encoding, optionally return that encoding with the <a>confidence</a> <i>certain</i> and abort these steps.

    <p class="note">
Typically, user agents remember such user requests across sessions, and in some
    cases apply them to documents in <code>iframe</code>s as well.
</p>

   </li>

   <li>

    The user agent may wait for more bytes of the resource to be available, either in this step
    or at any later step in this algorithm. For instance, a user agent might wait 500ms or 1024
    bytes, whichever came first. In general preparsing the source to find the encoding improves
    performance, as it reduces the need to throw away the data structures used when parsing upon
    finding the encoding information. However, if the user agent delays too long to obtain data to
    determine the encoding, then the cost of the delay could outweigh any performance improvements
    from the preparse.

    <p class="note">
The authoring conformance requirements for character encoding declarations limit
    them to only appearing <a>in the first 1024 bytes</a>. User agents are
    therefore encouraged to use the prescan algorithm below (as invoked by these steps) on the first
    1024 bytes, but not to stall beyond that.
</p>

   </li>

   <li>

    For each of the rows in the following table, starting with the first one and going down, if
    there are as many or more bytes available than the number of bytes in the first column, and the
    first bytes of the file match the bytes given in the first column, then return the encoding
    given in the cell in the second column of that row, with the <a>confidence</a> <i>certain</i>, and abort these steps:

    <table>
     <thead>
      <tr>
       <th>Bytes in Hexadecimal
       <th>Encoding
     <tbody>

      <tr>
       <td>FE FF
       <td>Big-endian UTF-16
      <tr>
       <td>FF FE
       <td>Little-endian UTF-16
      <tr>
       <td>EF BB BF
       <td>UTF-8

    </table>

    <p class="note">
This step looks for Unicode Byte Order Marks (BOMs).
</p>

    <p class="note">
That this step happens before the next one honoring the HTTP
    <code>Content-Type</code> header is a <a>willful violation</a> of the HTTP specification,
    motivated by a desire to be maximally compatible with legacy content. <a>\[HTTP]</a>
</p>

   </li>

   <li>If the transport layer specifies a character encoding, and it is supported, return that
   encoding with the <a>confidence</a> <i>certain</i>, and
   abort these steps.</li>

   <li>

    Optionally <a>prescan the byte
    stream to determine its encoding</a>. The <var>end condition</var> is that the user
    agent decides that scanning further bytes would not be efficient. User agents are encouraged to
    only prescan the first 1024 bytes. User agents may decide that scanning <em>any</em> bytes is
    not efficient, in which case these substeps are entirely skipped.

    The aforementioned algorithm either aborts unsuccessfully or returns a character encoding. If
    it returns a character encoding, then this algorithm must be aborted, returning the same
    encoding, with <a>confidence</a> <i>tentative</i>.

   </li>

   <li>

    If the <a>HTML parser</a> for which this algorithm is being run is associated with a
    <code>Document</code> that is itself in a <a>nested browsing context</a>, run these
    substeps:

    <ol>

     <li>Let <var>new document</var> be the <code>Document</code> with which the
     <a>HTML parser</a> is associated.</li>

     <li>Let <var>parent document</var> be the <code>Document</code> <a>through which <var>new document</var> is
     nested</a> (the <a>active document</a> of the <a>parent browsing context</a> of
     <var>new document</var>).</li>

     <li>If <var>parent document</var>'s <a>origin</a> is not the <a>same
     origin</a> as <var>new document</var>'s <a>origin</a>, then abort these
     substeps.</li>

     <li>If <var>parent document</var>'s <a>character encoding</a> is not an <a>ASCII-compatible encoding</a>, then
     abort these substeps.</li>

     <li>Return <var>parent document</var>'s <a>character encoding</a>, with the <a>confidence</a> <i>tentative</i>, and abort the
     <a>encoding sniffing algorithm</a>'s steps.</li>

    </ol>

   </li>

   <li>Otherwise, if the user agent has information on the likely encoding for this page, e.g.
   based on the encoding of the page when it was last visited, then return that encoding, with the
   <a>confidence</a> <i>tentative</i>, and abort these
   steps.</li>

   <li>

    The user agent may attempt to autodetect the character encoding from applying frequency
    analysis or other algorithms to the data stream. Such algorithms may use information about the
    resource other than the resource's contents, including the address of the resource. If
    autodetection succeeds in determining a character encoding, and that encoding is a supported
    encoding, then return that encoding, with the <a>confidence</a> <i>tentative</i>, and abort these steps.
    [[!UNIVCHARDET]]

    <p class="note">
User agents are generally discouraged from attempting to autodetect encodings
    for resources obtained over the network, since doing so involves inherently non-interoperable
    heuristics. Attempting to detect encodings based on an HTML document's preamble is especially
    tricky since HTML markup typically uses only ASCII characters, and HTML documents tend to begin
    with a lot of markup rather than with text content.
</p>

    <p class="note">
The UTF-8 encoding has a highly detectable bit pattern. Files from the local
    file system that contain bytes with values greater than 0x7F which match the UTF-8 pattern are
    very likely to be UTF-8, while documents with byte sequences that do not match it are very
    likely not. When a user agent can examine the whole file, rather than just the preamble,
    detecting for UTF-8 specifically can be especially effective. [[!PPUTF8]] <a>\[UTF8DET]</a>
</p>

   </li>

   <li>

    Otherwise, return an implementation-defined or user-specified default character encoding,
    with the <a>confidence</a> <i>tentative</i>.

    In controlled environments or in environments where the encoding of documents can be
    prescribed (for example, for user agents intended for dedicated use in new networks), the
    comprehensive <code>UTF-8</code> encoding is suggested.

    In other environments, the default encoding is typically dependent on the user's locale (an
    approximation of the languages, and thus often encodings, of the pages that the user is likely
    to frequent). The following table gives suggested defaults based on the user's locale, for
    compatibility with legacy content. Locales are identified by BCP 47 language tags. <a>\[BCP47]</a> [[!ENCODING]]

    <table>
     <thead>
      <tr>
       <th colspan=2>Locale language
       <th>Suggested default encoding
     <tbody>

      <tr>
       <td>ar
       <td>Arabic
       <td>windows-1256

      <tr>
       <td>ba
       <td>Bashkir
       <td>windows-1251

      <tr>
       <td>be
       <td>Belarusian
       <td>windows-1251

      <tr>
       <td>bg
       <td>Bulgarian
       <td>windows-1251

      <tr>
       <td>cs
       <td>Czech
       <td>windows-1250

      <tr>
       <td>el
       <td>Greek
       <td>ISO-8859-7

      <tr>
       <td>et
       <td>Estonian
       <td>windows-1257

      <tr>
       <td>fa
       <td>Persian
       <td>windows-1256

      <tr>
       <td>he
       <td>Hebrew
       <td>windows-1255

      <tr>
       <td>hr
       <td>Croatian
       <td>windows-1250

      <tr>
       <td>hu
       <td>Hungarian
       <td>ISO-8859-2

      <tr>
       <td>ja
       <td>Japanese
       <td>Shift_JIS

      <tr>
       <td>kk
       <td>Kazakh
       <td>windows-1251

      <tr>
       <td>ko
       <td>Korean
       <td>euc-kr

      <tr>
       <td>ku
       <td>Kurdish
       <td>windows-1254

      <tr>
       <td>ky
       <td>Kyrgyz
       <td>windows-1251

      <tr>
       <td>lt
       <td>Lithuanian
       <td>windows-1257

      <tr>
       <td>lv
       <td>Latvian
       <td>windows-1257

      <tr>
       <td>mk
       <td>Macedonian
       <td>windows-1251

      <tr>
       <td>pl
       <td>Polish
       <td>ISO-8859-2

      <tr>
       <td>ru
       <td>Russian
       <td>windows-1251

      <tr>
       <td>sah
       <td>Yakut
       <td>windows-1251

      <tr>
       <td>sk
       <td>Slovak
       <td>windows-1250

      <tr>
       <td>sl
       <td>Slovenian
       <td>ISO-8859-2

      <tr>
       <td>sr
       <td>Serbian
       <td>windows-1251

      <tr>
       <td>tg
       <td>Tajik
       <td>windows-1251

      <tr>
       <td>th
       <td>Thai
       <td>windows-874

      <tr>
       <td>tr
       <td>Turkish
       <td>windows-1254

      <tr>
       <td>tt
       <td>Tatar
       <td>windows-1251

      <tr>
       <td>uk
       <td>Ukrainian
       <td>windows-1251

      <tr>
       <td>vi
       <td>Vietnamese
       <td>windows-1258

      <tr>
       <td>zh-CN
       <td>Chinese (People's Republic of China)
       <td>GB18030

      <tr>
       <td>zh-TW
       <td>Chinese (Taiwan)
       <td>Big5

      <tr>
       <td colspan="2">All other locales
       <td>windows-1252

    </table>

    <small>The contents of this table are derived from the intersection of
    Windows, Chrome, and Firefox defaults.</small>

   </li>

  </ol>

  The <a>document's character encoding</a> must immediately be set to the value returned
  from this algorithm, at the same time as the user agent uses the returned value to select the
  decoder to use for the input byte stream.

  <hr />

  When an algorithm requires a user agent to <dfn>prescan a byte stream to determine its
  encoding</dfn>, given some defined <var>end condition</var>, then it must run the
  following steps. These steps either abort unsuccessfully or return a character encoding. If at any
  point during these steps (including during instances of the <a>get an attribute</a> algorithm invoked by this
  one) the user agent either runs out of bytes (meaning the <var>position</var> pointer
  created in the first step below goes beyond the end of the byte stream obtained so far) or reaches
  its <var>end condition</var>, then abort the <a>prescan a byte stream to determine its
  encoding</a> algorithm unsuccessfully.

  <ol>

   <li>

    Let <var>position</var> be a pointer to a byte in the input byte stream, initially
    pointing at the first byte.

   </li>

   <li>

    <i>Loop</i>: If <var>position</var> points to:

    <dl class="switch">

     <dt>A sequence of bytes starting with: 0x3C 0x21 0x2D 0x2D (ASCII '&lt;!--')</dt>
     <dd>

      Advance the <var>position</var> pointer so that it points at the first 0x3E byte
      which is preceded by two 0x2D bytes (i.e. at the end of an ASCII '-->' sequence) and comes
      after the 0x3C byte that was found. (The two 0x2D bytes can be the same as the those in the
      '&lt;!--' sequence.)

     </dd>

     <dt>A sequence of bytes starting with: 0x3C, 0x4D or 0x6D, 0x45 or 0x65, 0x54 or 0x74, 0x41 or 0x61, and one of 0x09, 0x0A, 0x0C, 0x0D, 0x20, 0x2F (case-insensitive ASCII '&lt;meta' followed by a space or slash)</dt>
     <dd>

      <ol>

       <li>Advance the <var>position</var> pointer so that it points at the next 0x09,
       0x0A, 0x0C, 0x0D, 0x20, or 0x2F byte (the one in sequence of characters matched
       above).</li>

       <li>Let <var>attribute list</var> be an empty list of strings.</li>

       <li>Let <var>got pragma</var> be false.</li>

       <li>Let <var>need pragma</var> be null.</li>

       <li>Let <var>charset</var> be the null value (which, for the purposes of this
       algorithm, is distinct from an unrecognized encoding or the empty string).</li>

       <li><i>Attributes</i>: <a>Get an
       attribute</a> and its value. If no attribute was sniffed, then jump to the
       <i>processing</i> step below.</li>

       <li>If the attribute's name is already in <var>attribute list</var>, then return
       to the step labeled <i>attributes</i>.

       <li>Add the attribute's name to <var>attribute list</var>.

       <li>

        Run the appropriate step from the following list, if one applies:

        <dl class="switch">

         <dt>If the attribute's name is "<code>http-equiv</code>"</dt>

         <dd>If the attribute's value is "<code>content-type</code>", then set <var>got pragma</var> to true.</dd>

         <dt>If the attribute's name is "<code>content</code>"</dt>

         <dd>Apply the <a>algorithm for extracting a character encoding from a
         <code>meta</code> element</a>, giving the attribute's value as the string to parse. If a
         character encoding is returned, and if <var>charset</var> is still set to null,
         let <var>charset</var> be the encoding returned, and set <var>need
         pragma</var> to true.</dd>

         <dt>If the attribute's name is "<code>charset</code>"</dt>

         <dd>Let <var>charset</var> be the result of <a>getting an encoding</a>
         from the attribute's value, and set <var>need pragma</var> to false.</dd>

        </dl>

       </li>

       <li>Return to the step labeled <i>attributes</i>.</li>

       <li><i>Processing</i>: If <var>need pragma</var> is null, then jump to the step
       below labeled <i>next byte</i>.</li>

       <li>If <var>need pragma</var> is true but <var>got pragma</var> is
       false, then jump to the step below labeled <i>next byte</i>.</li>

       <li>If <var>charset</var> is a <a>UTF-16 encoding</a>, change the value of
       <var>charset</var> to UTF-8.</li>

       <li>If <var>charset</var> is the x-user-defined encoding, change the value of
       <var>charset</var> to Windows-1252. [[!ENCODING]]</li>

       <li>If <var>charset</var> is not a supported character encoding, then jump to the
       step below labeled <i>next byte</i>.</li>

       <li>Abort the <a>prescan a byte stream to determine its encoding</a> algorithm,
       returning the encoding given by <var>charset</var>.</li>

      </ol>

     </dd>

     <dt>A sequence of bytes starting with a 0x3C byte (ASCII &lt;), optionally a 0x2F byte (ASCII /), and finally a byte in the range 0x41-0x5A or 0x61-0x7A (an ASCII letter)</dt>
     <dd>

      <ol>

       <li>Advance the <var>position</var> pointer so that it points at the next 0x09
       (ASCII TAB), 0x0A (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), 0x20 (ASCII space), or 0x3E
       (ASCII >) byte.</li>

       <li>Repeatedly <a>get an attribute</a>
       until no further attributes can be found, then jump to the step below labeled <i>next
       byte</i>.</li>

      </ol>

     </dd>

     <dt>A sequence of bytes starting with: 0x3C 0x21 (ASCII '&lt;!')</dt>
     <dt>A sequence of bytes starting with: 0x3C 0x2F (ASCII '&lt;/')</dt>
     <dt>A sequence of bytes starting with: 0x3C 0x3F (ASCII '&lt;?')</dt>
     <dd>

      Advance the <var>position</var> pointer so that it points at the first 0x3E byte
      (ASCII >) that comes after the 0x3C byte that was found.

     </dd>

     <dt>Any other byte</dt>
     <dd>

      Do nothing with that byte.

     </dd>

    </dl>

   </li>

   <li><i>Next byte</i>: Move <var>position</var> so it points at the next byte in the
   input byte stream, and return to the step above labeled <i>loop</i>.</li>

  </ol>

  When the <a>prescan a byte stream to determine its encoding</a> algorithm says to <dfn>get an attribute</dfn>, it means doing this:

  <ol>

   <li>If the byte at <var>position</var> is one of 0x09 (ASCII TAB), 0x0A (ASCII LF),
   0x0C (ASCII FF), 0x0D (ASCII CR), 0x20 (ASCII space), or 0x2F (ASCII /) then advance <var>position</var> to the next byte and redo this step.</li>

   <li>If the byte at <var>position</var> is 0x3E (ASCII >), then abort the <a>get an attribute</a> algorithm. There isn't
   one.</li>

   <li>Otherwise, the byte at <var>position</var> is the start of the attribute name.
   Let <var>attribute name</var> and <var>attribute value</var> be the empty
   string.</li>

   <li>Process the byte at <var>position</var> as follows:

    <dl class="switch">

     <dt>If it is 0x3D (ASCII =), and the <var>attribute name</var> is longer than the
     empty string</dt>

     <dd>Advance <var>position</var> to the next byte and jump to the step below labeled
     <i>value</i>.</dd>

     <dt>If it is 0x09 (ASCII TAB), 0x0A (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20
     (ASCII space)</dt>

     <dd>Jump to the step below labeled <i>spaces</i>.</dd>

     <dt>If it is 0x2F (ASCII /) or 0x3E (ASCII >)</dt>

     <dd>Abort the <a>get an attribute</a>
     algorithm. The attribute's name is the value of <var>attribute name</var>, its value
     is the empty string.</dd>

     <dt>If it is in the range 0x41 (ASCII A) to 0x5A (ASCII Z)</dt>

     <dd>Append the Unicode character with code point <a><var>b</var>+0x20</a> to <var>attribute name</var> (where <var>b</var>
     is the value of the byte at <var>position</var>). (This converts the input to
     lowercase.)</dd>

     <dt>Anything else</dt>

     <dd>Append the Unicode character with the same code point as the value of the byte at <var>position</var> to <var>attribute name</var>. (It doesn't actually matter how
     bytes outside the ASCII range are handled here, since only ASCII characters can contribute to
     the detection of a character encoding.)</dd>

    </dl>

   </li>

   <li>Advance <var>position</var> to the next byte and return to the previous
   step.</li>

   <li><i>Spaces</i>: If the byte at <var>position</var> is one of 0x09 (ASCII TAB),
   0x0A (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20 (ASCII space) then advance <var>position</var> to the next byte, then, repeat this step.</li>

   <li>If the byte at <var>position</var> is <em>not</em> 0x3D (ASCII =), abort the
   <a>get an attribute</a> algorithm. The
   attribute's name is the value of <var>attribute name</var>, its value is the empty
   string.</li>

   <li>Advance <var>position</var> past the 0x3D (ASCII =) byte.</li>

   <li><i>Value</i>: If the byte at <var>position</var> is one of 0x09 (ASCII TAB), 0x0A
   (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20 (ASCII space) then advance <var>position</var> to the next byte, then, repeat this step.</li>

   <li>Process the byte at <var>position</var> as follows:

    <dl class="switch">

     <dt>If it is 0x22 (ASCII ") or 0x27 (ASCII ')</dt>

     <dd>

      <ol>

       <li>Let <var>b</var> be the value of the byte at <var>position</var>.</li>

       <li><i>Quote loop</i>: Advance <var>position</var> to the next byte.</li>

       <li>If the value of the byte at <var>position</var> is the value of <var>b</var>, then advance <var>position</var> to the next byte and abort the
       "get an attribute" algorithm. The attribute's name is the value of <var>attribute
       name</var>, and its value is the value of <var>attribute value</var>.</li>

       <li>Otherwise, if the value of the byte at <var>position</var> is in the range 0x41
       (ASCII A) to 0x5A (ASCII Z), then append a Unicode character to <var>attribute
       value</var> whose code point is 0x20 more than the value of the byte at <var>position</var>.</li>

       <li>Otherwise, append a Unicode character to <var>attribute value</var> whose code
       point is the same as the value of the byte at <var>position</var>.</li>

       <li>Return to the step above labeled <i>quote loop</i>.</li>

      </ol>

     </dd>

     <dt>If it is 0x3E (ASCII >)</dt>

     <dd>Abort the <a>get an attribute</a>
     algorithm. The attribute's name is the value of <var>attribute name</var>, its value
     is the empty string.</dd>

     <dt>If it is in the range 0x41 (ASCII A) to 0x5A (ASCII Z)</dt>

     <dd>Append the Unicode character with code point <a><var>b</var>+0x20</a> to <var>attribute value</var> (where <var>b</var> is the value of the byte at <var>position</var>). Advance <var>position</var> to the next byte.</dd>

     <dt>Anything else</dt>

     <dd>Append the Unicode character with the same code point as the value of the byte at <var>position</var> to <var>attribute value</var>. Advance <var>position</var> to the next byte.</dd>

    </dl>

   </li>

   <li>Process the byte at <var>position</var> as
   follows:

    <dl class="switch">

     <dt>If it is 0x09 (ASCII TAB), 0x0A (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), 0x20 (ASCII
     space), or 0x3E (ASCII >)</dt>

     <dd>Abort the <a>get an attribute</a>
     algorithm. The attribute's name is the value of <var>attribute name</var> and its
     value is the value of <var>attribute value</var>.</dd>

     <dt>If it is in the range 0x41 (ASCII A) to 0x5A (ASCII Z)</dt>

     <dd>Append the Unicode character with code point <a><var>b</var>+0x20</a> to <var>attribute value</var> (where <var>b</var> is the value of the byte at <var>position</var>).</dd>

     <dt>Anything else</dt>

     <dd>Append the Unicode character with the same code point as the value of the byte at <var>position</var> to <var>attribute value</var>.</dd>

    </dl>

   </li>

   <li>Advance <var>position</var> to the next byte and return to the previous
   step.</li>

  </ol>

  For the sake of interoperability, user agents should not use a pre-scan algorithm that returns
  different results than the one described above. (But, if you do, please at least let us know, so
  that we can improve this algorithm and benefit everyone...)

  <h5 id="character-encodings"><dfn>Character encodings</dfn></h5>

  User agents must support the encodings defined in the WHATWG Encoding standard. User agents
  must not support other encodings.

  <p class="note">
The above prohibits supporting, for example, CESU-8, UTF-7, BOCU-1, SCSU, EBCDIC,
  and UTF-32. This specification does not make any attempt to support prohibited encodings in its
  algorithms; support and use of prohibited encodings would thus lead to unexpected behavior. <a>\[CESU8]</a> [[!UTF7]] [[!BOCU1]] [[!SCSU]]
</p>

  <h5 id="changing-the-encoding-while-parsing"><dfn>Changing the encoding while parsing</dfn></h5>

  When the parser requires the user agent to <dfn>change the encoding</dfn>, it must run the
  following steps. This might happen if the <a>encoding sniffing algorithm</a> described above
  failed to find a character encoding, or if it found a character encoding that was not the actual
  encoding of the file.

  <ol>

   <li>If the encoding that is already being used to interpret the input stream is a <a>UTF-16
   encoding</a>, then set the <a>confidence</a> to
   <i>certain</i> and abort these steps. The new encoding is ignored; if it was anything but the
   same encoding, then it would be clearly incorrect.</li>

   <li>If the new encoding is a <a>UTF-16 encoding</a>, change it to UTF-8.</li>

   <li>If the new encoding is the x-user-defined encoding, change it to Windows-1252. [[!ENCODING]]</li>

   <li>If the new encoding is identical or equivalent to the encoding that is already being used
   to interpret the input stream, then set the <a>confidence</a> to <i>certain</i> and abort these steps.
   This happens when the encoding information found in the file matches what the <a>encoding
   sniffing algorithm</a> determined to be the encoding, and in the second pass through the
   parser if the first pass found that the encoding sniffing algorithm described in the earlier
   section failed to find the right encoding.</li>

   <li>If all the bytes up to the last byte converted by the current decoder have the same
   Unicode interpretations in both the current encoding and the new encoding, and if the user agent
   supports changing the converter on the fly, then the user agent may change to the new converter
   for the encoding on the fly. Set the <a>document's character encoding</a> and the encoding
   used to convert the input stream to the new encoding, set the <a>confidence</a> to <i>certain</i>, and abort these
   steps.</li>

   <li>Otherwise, <a>navigate</a> to the document again, with
   <a>replacement enabled</a>, and using the same <a>source browsing context</a>, but
   this time skip the <a>encoding sniffing algorithm</a> and instead just set the encoding to
   the new encoding and the <a>confidence</a> to
   <i>certain</i>. Whenever possible, this should be done without actually contacting the network
   layer (the bytes should be re-parsed from memory), even if, e.g., the document is marked as not
   being cacheable. If this is not possible and contacting the network layer would involve repeating
   a request that uses a method other than <code>GET</code>), then instead set the <a>confidence</a> to <i>certain</i> and ignore the new
   encoding. The resource will be misinterpreted. User agents may notify the user of the situation,
   to aid in application development.</li>

  </ol>

  <p class="note">
This algorithm is only invoked when a new encoding is found declared on a
  <code>meta</code> element.
</p>

  <h5 id="preprocessing-the-input-stream"><dfn>Preprocessing the input stream</dfn></h5>

  The <dfn>input stream</dfn> consists of the characters pushed into it as the <a>input byte
  stream</a> is decoded or from the various APIs that directly manipulate the input stream.

  One leading U+FEFF BYTE ORDER MARK character must be ignored if any are present in the
  <a>input stream</a>.

  <p class="note">
The requirement to strip a U+FEFF BYTE ORDER MARK character regardless of whether
  that character was used to determine the byte order is a <a>willful violation</a> of
  Unicode, motivated by a desire to increase the resilience of user agents in the face of na&iuml;ve
  transcoders.
</p>

  Any occurrences of any characters in the ranges U+0001 to U+0008,    U+000E to U+001F,
  U+007F  to U+009F, U+FDD0 to U+FDEF, and
  characters U+000B, U+FFFE, U+FFFF, U+1FFFE, U+1FFFF, U+2FFFE, U+2FFFF, U+3FFFE, U+3FFFF, U+4FFFE,
  U+4FFFF, U+5FFFE, U+5FFFF, U+6FFFE, U+6FFFF, U+7FFFE, U+7FFFF, U+8FFFE, U+8FFFF, U+9FFFE, U+9FFFF,
  U+AFFFE, U+AFFFF, U+BFFFE, U+BFFFF, U+CFFFE, U+CFFFF, U+DFFFE, U+DFFFF, U+EFFFE, U+EFFFF, U+FFFFE,
  U+FFFFF, U+10FFFE, and U+10FFFF are <a>parse errors</a>. These are all
  <a>control characters</a> or permanently undefined Unicode characters (noncharacters).

  Any <a>character</a> that is a not a <a>Unicode character</a>, i.e. any isolated
  surrogate, is a <a>parse error</a>. (These can only find their way into the input stream via
  script APIs such as <code>document.write()</code>.)

  U+000D CARRIAGE RETURN (CR) characters and U+000A LINE FEED (LF) characters are treated
  specially. Any LF character that immediately follows a CR character must be ignored, and all CR
  characters must then be converted to LF characters. Thus, newlines in HTML DOMs are represented by
  LF characters, and there are never any CR characters in the input to the <a>tokenization</a>
  stage.

  The <dfn>next input character</dfn> is the first character in the <a>input stream</a>
  that has not yet been <dfn>consumed</dfn> or explicitly ignored by the requirements in
  this section. Initially, the <i>next input character</i> is the
  first character in the input. The <dfn>current input character</dfn> is the last character to have
  been <i>consumed</i>.

  The <dfn>insertion point</dfn> is the position (just before a character or just before the end
  of the input stream) where content inserted using <code>document.write()</code> is actually inserted. The insertion point is
  relative to the position of the character immediately after it, it is not an absolute offset into
  the input stream. Initially, the insertion point is undefined.

  The "EOF" character in the tables below is a conceptual character representing the end of the
  <a>input stream</a>. If the parser is a <a>script-created parser</a>, then the end of
  the <a>input stream</a> is reached when an <dfn>explicit "EOF" character</dfn> (inserted by
  the <code>document.close()</code> method) is consumed. Otherwise, the
  "EOF" character is not a real character in the stream, but rather the lack of any further
  characters.

  <p class="note">
The handling of U+0000 NULL characters varies based on where the characters are
  found. In general, they are ignored except where doing so could plausibly introduce an attack
  vector. This handling is, by necessity, spread across both the tokenization stage and the tree
  construction stage.
</p>

  </div>

  <div class="impl">

  <h4 id="parse-state"><dfn>Parse state</dfn></h4>

  <h5 id="the-insertion-mode"><dfn>The insertion mode</dfn></h5>

  The <dfn>insertion mode</dfn> is a state variable that controls the primary operation of the
  tree construction stage.

  Initially, the <a>insertion mode</a> is "<a>initial</a>". It can change to "<a>before
  html</a>", "<a>before head</a>", "<a>in head</a>", "<a>in head noscript</a>", "<a>after head</a>",
  "<a>in body</a>", "<a>text</a>", "<a>in table</a>", "<a>in table text</a>", "<a>in caption</a>", "<a>in column
  group</a>", "<a>in table body</a>", "<a>in row</a>", "<a>in
  cell</a>", "<a>in select</a>", "<a>in select in table</a>", "<a>in template</a>", "<a>after body</a>",
  "<a>in frameset</a>", "<a>after frameset</a>", "<a>after
  after body</a>", and "<a>after after
  frameset</a>" during the course of the parsing, as described in the <a>tree
  construction</a> stage. The insertion mode affects how tokens are processed and whether CDATA
  sections are supported.

  Several of these modes, namely "<a>in head</a>", "<a>in body</a>", "<a>in
  table</a>", and "<a>in select</a>", are special, in
  that the other modes defer to them at various times. When the algorithm below says that the user
  agent is to do something "<dfn>using the rules for</dfn> the <var>m</var> insertion
  mode", where <var>m</var> is one of these modes, the user agent must use the rules
  described under the <var>m</var> <a>insertion mode</a>'s section, but must leave
  the <a>insertion mode</a> unchanged unless the rules in <var>m</var> themselves
  switch the <a>insertion mode</a> to a new value.

  When the insertion mode is switched to "<a>text</a>" or
  "<a>in table text</a>", the <dfn>original insertion
  mode</dfn> is also set. This is the insertion mode to which the tree construction stage will
  return.

  Similarly, to parse nested <code>template</code> elements, a <dfn>stack of template insertion
  modes</dfn> is used. It is initially empty. The <dfn>current template insertion mode</dfn> is the
  insertion mode that was most recently added to the <a>stack of template insertion modes</a>.
  The algorithms in the sections below will <i>push</i> insertion modes onto this stack, meaning
  that the specified insertion mode is to be added to the stack, and <i>pop</i> insertion modes from
  the stack, which means that the most recently added insertion mode must be removed from the
  stack.

  <hr />

  When the steps below require the UA to <dfn>reset the insertion mode appropriately</dfn>, it
  means the UA must follow these steps:

  <ol>

   <li>Let <var>last</var> be false.</li>

   <li>Let <var>node</var> be the last node in the <a>stack of open
   elements</a>.</li>

   <li><i>Loop</i>: If <var>node</var> is the first node in the stack of open elements,
   then set <var>last</var> to true, and, if the parser was originally created as part of
   the <a>HTML fragment parsing algorithm</a> (<a>fragment case</a>), set <var>node</var> to the <var>context</var>
   element passed to that algorithm.</li>

   <li>

    If <var>node</var> is a <code>select</code> element, run these substeps:

    <ol>

     <li>If <var>last</var> is true, jump to the step below labeled
     <i>done</i>.</li>

     <li>Let <var>ancestor</var> be <var>node</var>.</li>

     <li><i>Loop</i>: If <var>ancestor</var> is the first node in the <a>stack of
     open elements</a>, jump to the step below labeled <i>done</i>.</li>

     <li>Let <var>ancestor</var> be the node before <var>ancestor</var> in the
     <a>stack of open elements</a>.</li>

     <li>If <var>ancestor</var> is a <code>template</code> node, jump to the step below
     labeled <i>done</i>.</li>

     <li>If <var>ancestor</var> is a <code>table</code> node, switch the <a>insertion
     mode</a> to "<a>in select in table</a>" and
     abort these steps.</li>

     <li>Jump back to the step labeled <i>loop</i>.</li>

     <li><i>Done</i>: Switch the <a>insertion mode</a> to "<a>in select</a>" and abort these steps.</li>

    </ol>

   </li>

   <li>If <var>node</var> is a <code>td</code> or <code>th</code> element and <var>last</var> is false, then switch the <a>insertion mode</a> to "<a>in cell</a>" and abort these steps.</li>

   <li>If <var>node</var> is a <code>tr</code> element, then switch the <a>insertion
   mode</a> to "<a>in row</a>" and abort these
   steps.</li>

   <li>If <var>node</var> is a <code>tbody</code>, <code>thead</code>, or
   <code>tfoot</code> element, then switch the <a>insertion mode</a> to "<a>in table body</a>" and abort these steps.</li>

   <li>If <var>node</var> is a <code>caption</code> element, then switch the
   <a>insertion mode</a> to "<a>in caption</a>" and
   abort these steps.</li>

   <li>If <var>node</var> is a <code>colgroup</code> element, then switch the
   <a>insertion mode</a> to "<a>in column
   group</a>" and abort these steps.</li>

   <li>If <var>node</var> is a <code>table</code> element, then switch the
   <a>insertion mode</a> to "<a>in table</a>" and abort
   these steps.</li>

   <li>If <var>node</var> is a <code>template</code> element, then switch the
   <a>insertion mode</a> to the <a>current template insertion mode</a> and abort these
   steps.</li>

   <li>If <var>node</var> is a <code>head</code> element and <var>last</var> is
   false, then switch the <a>insertion mode</a> to "<a>in
   head</a>" and abort these steps.</li>

   <li>If <var>node</var> is a <code>body</code> element, then switch the
   <a>insertion mode</a> to "<a>in body</a>" and abort
   these steps.</li>

   <li>If <var>node</var> is a <code>frameset</code> element, then switch the
   <a>insertion mode</a> to "<a>in frameset</a>" and
   abort these steps. (<a>fragment case</a>)</li>

   <li>

    If <var>node</var> is an <code>html</code> element, run these substeps:

    <ol>

     <li>If the <a><code>head</code> element pointer</a> is null, switch the
     <a>insertion mode</a> to "<a>before head</a>"
     and abort these steps. (<a>fragment case</a>)</li>

     <li>Otherwise, the <a><code>head</code> element pointer</a> is not null, switch the
     <a>insertion mode</a> to "<a>after head</a>" and
     abort these steps.</li>

    </ol>

   </li>

   <li>If <var>last</var> is true, then switch the <a>insertion mode</a> to "<a>in body</a>" and abort these steps. (<a>fragment
   case</a>)</li>

   <li>Let <var>node</var> now be the node before <var>node</var> in the
   <a>stack of open elements</a>.</li>

   <li>Return to the step labeled <i>loop</i>.</li>

  </ol>

  <h5 id="the-stack-of-open-elements"><dfn>The stack of open elements</dfn></h5>

  Initially, the <dfn>stack of open elements</dfn> is empty. The stack grows downwards; the
  topmost node on the stack is the first one added to the stack, and the bottommost node of the
  stack is the most recently added node in the stack (notwithstanding when the stack is manipulated
  in a random access fashion as part of <a>the handling for misnested
  tags</a>).

  <p class="note">
The "<a>before html</a>" <a>insertion
  mode</a> creates the <code>html</code> root element node, which is then added to the stack.
</p>

  <p class="note">
In the <a>fragment case</a>, the <a>stack of open elements</a> is
  initialized to contain an <code>html</code> element that is created as part of <a>that algorithm</a>. (The <a>fragment case</a> skips the
  "<a>before html</a>" <a>insertion mode</a>.)
</p>

  The <code>html</code> node, however it is created, is the topmost node of the stack. It only
  gets popped off the stack when the parser <a>finishes</a>.

  The <dfn>current node</dfn> is the bottommost node in this <a>stack of open
  elements</a>.

  The <dfn>adjusted current node</dfn> is the <i>context</i>
  element if the parser was created by the <a>HTML fragment parsing algorithm</a> and the
  <a>stack of open elements</a> has only one element in it (<a>fragment case</a>);
  otherwise, the <a>adjusted current node</a> is the <a>current node</a>.

  Elements in the <a>stack of open elements</a> fall into the following categories:

  <dl>

   <dt><dfn>Special</dfn></dt>

   <dd>The following elements have varying levels of special parsing rules: HTML's
   <code>address</code>, <code>applet</code>, <code>area</code>, <code>article</code>,
   <code>aside</code>, <code>base</code>, <code>basefont</code>, <code>bgsound</code>,
   <code>blockquote</code>, <code>body</code>, <code>br</code>, <code>button</code>,
   <code>caption</code>, <code>center</code>, <code>col</code>, <code>colgroup</code>,
   <code>dd</code>, <code>details</code>, <code>dir</code>, <code>div</code>, <code>dl</code>,
   <code>dt</code>, <code>embed</code>, <code>fieldset</code>, <code>figcaption</code>,
   <code>figure</code>, <code>footer</code>, <code>form</code>, <code>frame</code>,
   <code>frameset</code>, <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>,
   <code>h5</code>, <code>h6</code>, <code>head</code>, <code>header</code>,
   <code>hr</code>, <code>html</code>, <code>iframe</code>,
   <code>img</code>, <code>input</code>, <code>isindex</code>, <code>li</code>, <code>link</code>,
   <code>listing</code>, <code>main</code>, <code>marquee</code>, <code>menu</code>,
   <code>menuitem</code>, <code>meta</code>, <code>nav</code>, <code>noembed</code>,
   <code>noframes</code>, <code>noscript</code>, <code>object</code>, <code>ol</code>,
   <code>p</code>, <code>param</code>, <code>plaintext</code>, <code>pre</code>,
   <code>script</code>, <code>section</code>, <code>select</code>, <code>source</code>,
   <code>style</code>, <code>summary</code>, <code>table</code>, <code>tbody</code>,
   <code>td</code>, <code>template</code>, <code>textarea</code>, <code>tfoot</code>,
   <code>th</code>, <code>thead</code>, <code>title</code>, <code>tr</code>, <code>track</code>,
   <code>ul</code>, <code>wbr</code>, and <code>xmp</code>; MathML's <code>mi</code>, <code>mo</code>, <code>mn</code>,
   <code>ms</code>, <code>mtext</code>, and <code>annotation-xml</code>; and SVG's <code>foreignObject</code>, <code>desc</code>, and <code>title</code>.</dd>

   <dt><dfn>Formatting</dfn></dt>
   <dd>The following HTML elements are those that end up in the <a>list of active formatting
   elements</a>: <code>a</code>, <code>b</code>, <code>big</code>, <code>code</code>,
   <code>em</code>, <code>font</code>, <code>i</code>, <code>nobr</code>, <code>s</code>,
   <code>small</code>, <code>strike</code>, <code>strong</code>, <code>tt</code>, and
   <code>u</code>.</dd>

   <dt><dfn>Ordinary</dfn></dt>
   <dd>All other elements found while parsing an HTML document.</dd>

  </dl>

  The <a>stack of open elements</a> is said to <dfn>have an element <var>target node</var> in a specific scope</dfn> consisting of a
  list of element types <var>list</var> when the following algorithm terminates in a match
  state:

  <ol>

   <li>Initialize <var>node</var> to be the <a>current node</a> (the bottommost
   node of the stack).</li>

   <li>If <var>node</var> is the target node, terminate in a match state.</li>

   <li>Otherwise, if <var>node</var> is one of the element types in <var>list</var>, terminate in a failure state.</li>

   <li>Otherwise, set <var>node</var> to the previous entry in the <a>stack of open
   elements</a> and return to step 2. (This will never fail, since the loop will always terminate
   in the previous step if the top of the stack &mdash; an <code>html</code> element &mdash; is
   reached.)</li>

  </ol>

  The <a>stack of open elements</a> is said to <dfn>have a
  particular element in scope</dfn> when it <a>has
  that element in the specific scope</a> consisting of the following element types:

  <ul class="brief">
   <li><code>applet</code> in the <a>HTML namespace</a></li>
   <li><code>caption</code> in the <a>HTML namespace</a></li>
   <li><code>html</code> in the <a>HTML namespace</a></li>
   <li><code>table</code> in the <a>HTML namespace</a></li>
   <li><code>td</code> in the <a>HTML namespace</a></li>
   <li><code>th</code> in the <a>HTML namespace</a></li>
   <li><code>marquee</code> in the <a>HTML namespace</a></li>
   <li><code>object</code> in the <a>HTML namespace</a></li>
   <li><code>template</code> in the <a>HTML namespace</a></li>
   <li><code>mi</code> in the <a>MathML namespace</a></li>
   <li><code>mo</code> in the <a>MathML namespace</a></li>
   <li><code>mn</code> in the <a>MathML namespace</a></li>
   <li><code>ms</code> in the <a>MathML namespace</a></li>
   <li><code>mtext</code> in the <a>MathML namespace</a></li>
   <li><code>annotation-xml</code> in the <a>MathML namespace</a></li>
   <li><code>foreignObject</code> in the <a>SVG namespace</a></li>
   <li><code>desc</code> in the <a>SVG namespace</a></li>
   <li><code>title</code> in the <a>SVG namespace</a></li>
  </ul>

  The <a>stack of open elements</a> is said to <dfn>have a particular element in list item scope</dfn> when it <a>has that element in the specific scope</a> consisting of the following
  element types:

  <ul class="brief">
   <li>All the element types listed above for the <i>has an element in scope</i> algorithm.</li>
   <li><code>ol</code> in the <a>HTML namespace</a></li>
   <li><code>ul</code> in the <a>HTML namespace</a></li>
  </ul>

  The <a>stack of open elements</a> is said to <dfn>have a particular element in button scope</dfn> when it <a>has that element in the specific scope</a> consisting of the following element
  types:

  <ul class="brief">
   <li>All the element types listed above for the <i>has an element in scope</i> algorithm.</li>
   <li><code>button</code> in the <a>HTML namespace</a></li>
  </ul>

  The <a>stack of open elements</a> is said to <dfn>have a particular element in table scope</dfn> when it <a>has that element in the specific scope</a> consisting of the following element
  types:

  <ul class="brief">
   <li><code>html</code> in the <a>HTML namespace</a></li>
   <li><code>table</code> in the <a>HTML namespace</a></li>
   <li><code>template</code> in the <a>HTML namespace</a></li>
  </ul>

  The <a>stack of open elements</a> is said to <dfn>have a particular element in select scope</dfn> when it <a>has that element in the specific scope</a> consisting of all element types
  <em>except</em> the following:

  <ul class="brief">

   <li><code>optgroup</code> in the <a>HTML namespace</a></li>
   <li><code>option</code> in the <a>HTML namespace</a></li>
  </ul>

  Nothing happens if at any time any of the elements in the <a>stack of open elements</a>
  are moved to a new location in, or removed from, the <code>Document</code> tree. In particular,
  the stack is not changed in this situation. This can cause, amongst other strange effects, content
  to be appended to nodes that are no longer in the DOM.

  <p class="note">
In some cases (namely, when <a>closing misnested formatting
  elements</a>), the stack is manipulated in a random-access fashion.
</p>

  <h5 id="the-list-of-active-formatting-elements"><dfn>The list of active formatting elements</dfn></h5>

  Initially, the <dfn>list of active formatting elements</dfn> is empty. It is used to handle
  mis-nested <a>formatting element tags</a>.

  The list contains elements in the <a>formatting</a> category, and <a>markers</a>. The <dfn>markers</dfn> are inserted when entering <code>applet</code>
  elements, buttons, <code>object</code> elements, marquees, table cells, and table captions, and
  are used to prevent formatting from "leaking" <em>into</em> <code>applet</code> elements, buttons,
  <code>object</code> elements, marquees, and tables.

  In addition, each element in the <a>list of active formatting elements</a> is associated
  with the token for which it was created, so that further elements can be created for that token if
  necessary.

  When the steps below require the UA to <dfn>push onto the list of active formatting
  elements</dfn> an element <var>element</var>, the UA must perform the following
  steps:

  <ol>

   <li>If there are already three elements in the <a>list of active formatting elements</a>
   after the last <a>marker</a>, if any, or anywhere in the
   list if there are no <a>markers</a>, that have the same tag
   name, namespace, and attributes as <var>element</var>, then remove the earliest such
   element from the <a>list of active formatting elements</a>. For these purposes, the
   attributes must be compared as they were when the elements were created by the parser; two
   elements have the same attributes if all their parsed attributes can be paired such that the two
   attributes in each pair have identical names, namespaces, and values (the order of the attributes
   does not matter).

   <p class="note">
This is the Noah's Ark clause. But with three per family instead of two.
</p></li>

   <li>Add <var>element</var> to the <a>list of active formatting
   elements</a>.</li>

  </ol>

  When the steps below require the UA to <dfn>reconstruct the active formatting elements</dfn>,
  the UA must perform the following steps:

  <ol>

   <li>If there are no entries in the <a>list of active formatting elements</a>, then there
   is nothing to reconstruct; stop this algorithm.</li>

   <li>If the last (most recently added) entry in the <a>list of active formatting
   elements</a> is a <a>marker</a>, or if it is an element
   that is in the <a>stack of open elements</a>, then there is nothing to reconstruct; stop
   this algorithm.</li>

   <li>Let <var>entry</var> be the last (most recently added) element in the <a>list
   of active formatting elements</a>.</li>

   <li><i>Rewind</i>: If there are no entries before <var>entry</var> in the <a>list
   of active formatting elements</a>, then jump to the step labeled <i>create</i>.</li>

   <li>Let <var>entry</var> be the entry one earlier than <var>entry</var> in
   the <a>list of active formatting elements</a>.</li>

   <li>If <var>entry</var> is neither a <a>marker</a> nor an element that is also in the <a>stack of
   open elements</a>, go to the step labeled <i>rewind</i>.</li>

   <li><i>Advance</i>: Let <var>entry</var> be the element one later than <var>entry</var> in the <a>list of active formatting elements</a>.</li>

   <li><i>Create</i>: <a>Insert an HTML element</a> for the token for which the element
   <var>entry</var> was created, to obtain <var>new element</var>.</li>

   <li>Replace the entry for <var>entry</var> in the list with an entry for <var>new element</var>.</li>

   <li>If the entry for <var>new element</var> in the <a>list of active formatting
   elements</a> is not the last entry in the list, return to the step labeled
   <i>advance</i>.</li>

  </ol>

  This has the effect of reopening all the formatting elements that were opened in the current
  body, cell, or caption (whichever is youngest) that haven't been explicitly closed.

  <p class="note">
The way this specification is written, the <a>list of active formatting
  elements</a> always consists of elements in chronological order with the least recently added
  element first and the most recently added element last (except for while steps 8 to 10 of the
  above algorithm are being executed, of course).
</p>

  When the steps below require the UA to <dfn>clear the list of active formatting elements up to
  the last marker</dfn>, the UA must perform the following steps:

  <ol>

   <li>Let <var>entry</var> be the last (most recently added) entry in the <a>list of
   active formatting elements</a>.</li>

   <li>Remove <var>entry</var> from the <a>list of active formatting
   elements</a>.</li>

   <li>If <var>entry</var> was a <a>marker</a>,
   then stop the algorithm at this point. The list has been cleared up to the last <a>marker</a>.</li>

   <li>Go to step 1.</li>

  </ol>

  <h5 id="the-element-pointers"><dfn>The element pointers</dfn></h5>

  Initially, the <dfn><code>head</code> element pointer</dfn> and the <dfn><code>form</code> element pointer</dfn> are both null.

  Once a <code>head</code> element has been parsed (whether implicitly or explicitly) the
  <a><code>head</code> element pointer</a> gets set to point to this node.

  The <a><code>form</code> element pointer</a> points to the last
  <code>form</code> element that was opened and whose end tag has not yet been seen. It is used to
  make form controls associate with forms in the face of dramatically bad markup, for historical
  reasons. It is ignored inside <code>template</code> elements.

  <h5 id="other-parsing-state-flags"><dfn>Other parsing state flags</dfn></h5>

  The <dfn>scripting flag</dfn> is set to "enabled" if <a>scripting
  was enabled</a> for the <code>Document</code> with which the parser is associated when the
  parser was created, and "disabled" otherwise.

  <p class="note">
The <a>scripting flag</a> can be enabled even when the parser was originally
  created for the <a>HTML fragment parsing algorithm</a>, even though <code>script</code>
  elements don't execute in that case.
</p>

  The <dfn>frameset-ok flag</dfn> is set to "ok" when the parser is created. It is set to "not
  ok" after certain tokens are seen.

  </div>

  <div class="impl">

  <h4 id="tokenization"><dfn><dfn>Tokenization</dfn></dfn></h4>

  Implementations must act as if they used the following state machine to tokenize HTML. The
  state machine must start in the <a>data state</a>. Most states consume a single character,
  which may have various side-effects, and either switches the state machine to a new state to
  <i>reconsume</i> the same character, or switches it to a new state to consume the next character,
  or stays in the same state to consume the next character. Some states have more complicated
  behavior and can consume several characters before switching to another state. In some cases, the
  tokenizer state is also changed by the tree construction stage.

  The exact behavior of certain states depends on the <a>insertion mode</a> and the
  <a>stack of open elements</a>. Certain states also use a <dfn><var>temporary buffer</var></dfn> to track progress.

  The output of the tokenization step is a series of zero or more of the following tokens:
  DOCTYPE, start tag, end tag, comment, character, end-of-file. DOCTYPE tokens have a name, a public
  identifier, a system identifier, and a <dfn><i>force-quirks flag</i></dfn>. When a DOCTYPE token
  is created, its name, public identifier, and system identifier must be marked as missing (which is
  a distinct state from the empty string), and the <i>force-quirks flag</i> must be set to
  <i>off</i> (its other state is <i>on</i>). Start and end tag tokens have a tag name, a <dfn>self-closing flag</dfn>, and a list of attributes, each of which has a
  name and a value. When a start or end tag token is created, its <i>self-closing flag</i> must be unset (its other state is that it be set), and its attributes
  list must be empty. Comment and character tokens have data.

  When a token is emitted, it must immediately be handled by the <a>tree construction</a>
  stage. The tree construction stage can affect the state of the tokenization stage, and can insert
  additional characters into the stream. (For example, the <code>script</code> element can result in
  scripts executing and using the <a>dynamic markup insertion</a> APIs to insert characters
  into the stream being tokenized.)

  <p class="note">
Creating a token and emitting it are distinct actions. It is possible for a token
  to be created but implicitly abandoned (never emitted), e.g. if the file ends unexpectedly while
  processing the characters that are being parsed into a start tag token.
</p>

  When a start tag token is emitted with its <i>self-closing flag</i> set, if the flag is not
  <dfn>acknowledged</dfn> when it is processed by the tree
  construction stage, that is a <a>parse error</a>.

  When an end tag token is emitted with attributes, that is a <a>parse error</a>.

  When an end tag token is emitted with its <i>self-closing flag</i> set, that is a <a>parse
  error</a>.

  An <dfn>appropriate end tag token</dfn> is an end tag token whose tag name matches the tag name
  of the last start tag to have been emitted from this tokenizer, if any. If no start tag has been
  emitted from this tokenizer, then no end tag token is appropriate.

  Before each step of the tokenizer, the user agent must first check the <a>parser pause
  flag</a>. If it is true, then the tokenizer must abort the processing of any nested invocations
  of the tokenizer, yielding control back to the caller.

  The tokenizer state machine consists of the states defined in the following subsections.

  <h5 id="data-state"><dfn><dfn>Data state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0026 AMPERSAND (&amp;)</dt>
   <dd>Switch to the <a>character reference in data state</a>.</dd>

   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dd>Switch to the <a>tag open state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Emit the <a>current input character</a> as a character
   token.</dd>

   <dt>EOF</dt>
   <dd>Emit an end-of-file token.</dd>

   <dt>Anything else</dt>
   <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

  <h5 id="character-reference-in-data-state"><dfn><dfn>Character reference in data state</dfn></dfn></h5>

  Switch to the <a>data state</a>.

  Attempt to <a>consume a character reference</a>, with no <a>additional allowed
  character</a>.

  If nothing is returned, emit a U+0026 AMPERSAND character (&amp;) token.

  Otherwise, emit the character tokens that were returned.

  <h5 id="rcdata-state"><dfn><dfn>RCDATA state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0026 AMPERSAND (&amp;)</dt>
   <dd>Switch to the <a>character reference in RCDATA state</a>.</dd>

   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dd>Switch to the <a>RCDATA less-than sign state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

   <dt>EOF</dt>
   <dd>Emit an end-of-file token.</dd>

   <dt>Anything else</dt>
   <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

  <h5 id="character-reference-in-rcdata-state"><dfn><dfn>Character reference in RCDATA state</dfn></dfn></h5>

  Switch to the <a>RCDATA state</a>.

  Attempt to <a>consume a character reference</a>, with no <a>additional allowed
  character</a>.

  If nothing is returned, emit a U+0026 AMPERSAND character (&amp;) token.

  Otherwise, emit the character tokens that were returned.

  <h5 id="rawtext-state"><dfn><dfn>RAWTEXT state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dd>Switch to the <a>RAWTEXT less-than sign state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

   <dt>EOF</dt>
   <dd>Emit an end-of-file token.</dd>

   <dt>Anything else</dt>
   <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

  <h5 id="script-data-state"><dfn><dfn>Script data state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dd>Switch to the <a>script data less-than sign state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

   <dt>EOF</dt>
   <dd>Emit an end-of-file token.</dd>

   <dt>Anything else</dt>
   <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

  <h5 id="plaintext-state"><dfn><dfn>PLAINTEXT state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

   <dt>EOF</dt>
   <dd>Emit an end-of-file token.</dd>

   <dt>Anything else</dt>
   <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

  <h5 id="tag-open-state"><dfn><dfn>Tag open state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0021 EXCLAMATION MARK (!)</dt>
   <dd>Switch to the <a>markup declaration open state</a>.</dd>

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>Switch to the <a>end tag open state</a>.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Create a new start tag token, set its tag name to the lowercase version of the <a>current
   input character</a> (add 0x0020 to the character's code point), then switch to the <a>tag
   name state</a>. (Don't emit the token yet; further details will be filled in before it is
   emitted.)</dd>

   <dt><a>Lowercase ASCII letter</a></dt>
   <dd>Create a new start tag token, set its tag name to the <a>current input character</a>,
   then switch to the <a>tag name state</a>. (Don't emit the token yet; further details will
   be filled in before it is emitted.)</dd>

   <dt>U+003F QUESTION MARK (?)</dt>
   <dd><a>Parse error</a>. Switch to the <a>bogus comment state</a>.</dd>

   <dt>Anything else</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit a U+003C LESS-THAN SIGN
   character token. Reconsume the <a>current input character</a>.</dd>

  </dl>

  <h5 id="end-tag-open-state"><dfn><dfn>End tag open state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Create a new end tag token, set its tag name to the lowercase version of the <a>current
   input character</a> (add 0x0020 to the character's code point), then switch to the <a>tag
   name state</a>. (Don't emit the token yet; further details will be filled in before it is
   emitted.)</dd>

   <dt><a>Lowercase ASCII letter</a></dt>
   <dd>Create a new end tag token, set its tag name to the <a>current input character</a>,
   then switch to the <a>tag name state</a>. (Don't emit the token yet; further details will
   be filled in before it is emitted.)</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit a U+003C LESS-THAN SIGN
   character token and a U+002F SOLIDUS character token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd><a>Parse error</a>. Switch to the <a>bogus comment state</a>.</dd>

  </dl>

  <h5 id="tag-name-state"><dfn><dfn>Tag name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Switch to the <a>before attribute name state</a>.</dd>

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>Switch to the <a>self-closing start tag state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
   character's code point) to the current tag token's tag name.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current tag
   token's tag name.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Append the <a>current input character</a> to the current tag token's tag name.</dd>

  </dl>

  <h5 id="rcdata-less-than-sign-state"><dfn><dfn>RCDATA less-than sign state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
   the <a>RCDATA end tag open state</a>.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>RCDATA state</a>. Emit a U+003C LESS-THAN SIGN character token.
   Reconsume the <a>current input character</a>.</dd>

  </dl>

  <h5 id="rcdata-end-tag-open-state"><dfn><dfn>RCDATA end tag open state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Create a new end tag token, and set its tag name to the lowercase version of the
   <a>current input character</a> (add 0x0020 to the character's code point). Append the
   <a>current input character</a> to the <var>temporary
   buffer</var>. Finally, switch to the <a>RCDATA end tag name state</a>. (Don't emit the
   token yet; further details will be filled in before it is emitted.)</dd>

   <dt><a>Lowercase ASCII letter</a></dt>
   <dd>Create a new end tag token, and set its tag name to the <a>current input character</a>.
   Append the <a>current input character</a> to the <var>temporary
   buffer</var>. Finally, switch to the <a>RCDATA end tag name state</a>. (Don't emit the
   token yet; further details will be filled in before it is emitted.)</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>RCDATA state</a>. Emit a U+003C LESS-THAN SIGN character token and a
   U+002F SOLIDUS character token. Reconsume the <a>current input character</a>.</dd>

  </dl>

  <h5 id="rcdata-end-tag-name-state"><dfn><dfn>RCDATA end tag name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
   <a>before attribute name state</a>. Otherwise, treat it as per the "anything else" entry
   below.</dd>

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
   <a>self-closing start tag state</a>. Otherwise, treat it as per the "anything else" entry
   below.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
   <a>data state</a> and emit the current tag token. Otherwise, treat it as per the "anything
   else" entry below.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
   character's code point) to the current tag token's tag name. Append the <a>current input
   character</a> to the <var>temporary buffer</var>.</dd>

   <dt><a>Lowercase ASCII letter</a></dt>
   <dd>Append the <a>current input character</a> to the current tag token's tag name. Append
   the <a>current input character</a> to the <var>temporary
   buffer</var>.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>RCDATA state</a>. Emit a U+003C LESS-THAN SIGN character token, a
   U+002F SOLIDUS character token, and a character token for each of the characters in the <var>temporary buffer</var> (in the order they were added to the buffer).
   Reconsume the <a>current input character</a>.</dd>

  </dl>

  <h5 id="rawtext-less-than-sign-state"><dfn><dfn>RAWTEXT less-than sign state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
   the <a>RAWTEXT end tag open state</a>.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>RAWTEXT state</a>. Emit a U+003C LESS-THAN SIGN character token.
   Reconsume the <a>current input character</a>.</dd>

  </dl>

  <h5 id="rawtext-end-tag-open-state"><dfn><dfn>RAWTEXT end tag open state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Create a new end tag token, and set its tag name to the lowercase version of the
   <a>current input character</a> (add 0x0020 to the character's code point). Append the
   <a>current input character</a> to the <var>temporary
   buffer</var>. Finally, switch to the <a>RAWTEXT end tag name state</a>. (Don't emit the
   token yet; further details will be filled in before it is emitted.)</dd>

   <dt><a>Lowercase ASCII letter</a></dt>
   <dd>Create a new end tag token, and set its tag name to the <a>current input character</a>.
   Append the <a>current input character</a> to the <var>temporary
   buffer</var>. Finally, switch to the <a>RAWTEXT end tag name state</a>. (Don't emit the
   token yet; further details will be filled in before it is emitted.)</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>RAWTEXT state</a>. Emit a U+003C LESS-THAN SIGN character token and a
   U+002F SOLIDUS character token. Reconsume the <a>current input character</a>.</dd>

  </dl>

  <h5 id="rawtext-end-tag-name-state"><dfn><dfn>RAWTEXT end tag name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
   <a>before attribute name state</a>. Otherwise, treat it as per the "anything else" entry
   below.</dd>

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
   <a>self-closing start tag state</a>. Otherwise, treat it as per the "anything else" entry
   below.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
   <a>data state</a> and emit the current tag token. Otherwise, treat it as per the "anything
   else" entry below.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
   character's code point) to the current tag token's tag name. Append the <a>current input
   character</a> to the <var>temporary buffer</var>.</dd>

   <dt><a>Lowercase ASCII letter</a></dt>
   <dd>Append the <a>current input character</a> to the current tag token's tag name. Append
   the <a>current input character</a> to the <var>temporary
   buffer</var>.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>RAWTEXT state</a>. Emit a U+003C LESS-THAN SIGN character token, a
   U+002F SOLIDUS character token, and a character token for each of the characters in the <var>temporary buffer</var> (in the order they were added to the buffer).
   Reconsume the <a>current input character</a>.</dd>

  </dl>

  <h5 id="script-data-less-than-sign-state"><dfn><dfn>Script data less-than sign state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
   the <a>script data end tag open state</a>.</dd>

   <dt>U+0021 EXCLAMATION MARK (!)</dt>
   <dd>Switch to the <a>script data escape start state</a>. Emit a U+003C LESS-THAN SIGN
   character token and a U+0021 EXCLAMATION MARK character token.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data state</a>. Emit a U+003C LESS-THAN SIGN character token.
   Reconsume the <a>current input character</a>.</dd>

  </dl>

  <h5 id="script-data-end-tag-open-state"><dfn><dfn>Script data end tag open state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Create a new end tag token, and set its tag name to the lowercase version of the
   <a>current input character</a> (add 0x0020 to the character's code point). Append the
   <a>current input character</a> to the <var>temporary
   buffer</var>. Finally, switch to the <a>script data end tag name state</a>. (Don't emit the
   token yet; further details will be filled in before it is emitted.)</dd>

   <dt><a>Lowercase ASCII letter</a></dt>
   <dd>Create a new end tag token, and set its tag name to the <a>current input character</a>.
   Append the <a>current input character</a> to the <var>temporary
   buffer</var>. Finally, switch to the <a>script data end tag name state</a>. (Don't emit the
   token yet; further details will be filled in before it is emitted.)</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data state</a>. Emit a U+003C LESS-THAN SIGN character token
   and a U+002F SOLIDUS character token. Reconsume the <a>current input character</a>.</dd>

  </dl>

  <h5 id="script-data-end-tag-name-state"><dfn><dfn>Script data end tag name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
   <a>before attribute name state</a>. Otherwise, treat it as per the "anything else" entry
   below.</dd>

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
   <a>self-closing start tag state</a>. Otherwise, treat it as per the "anything else" entry
   below.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
   <a>data state</a> and emit the current tag token. Otherwise, treat it as per the "anything
   else" entry below.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
   character's code point) to the current tag token's tag name. Append the <a>current input
   character</a> to the <var>temporary buffer</var>.</dd>

   <dt><a>Lowercase ASCII letter</a></dt>
   <dd>Append the <a>current input character</a> to the current tag token's tag name. Append
   the <a>current input character</a> to the <var>temporary
   buffer</var>.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data state</a>. Emit a U+003C LESS-THAN SIGN character token, a
   U+002F SOLIDUS character token, and a character token for each of the characters in the <var>temporary buffer</var> (in the order they were added to the buffer).
   Reconsume the <a>current input character</a>.</dd>

  </dl>

  <h5 id="script-data-escape-start-state"><dfn><dfn>Script data escape start state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd>Switch to the <a>script data escape start dash state</a>. Emit a U+002D HYPHEN-MINUS
   character token.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data state</a>. Reconsume the <a>current input
   character</a>.</dd>

  </dl>

  <h5 id="script-data-escape-start-dash-state"><dfn><dfn>Script data escape start dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd>Switch to the <a>script data escaped dash dash state</a>. Emit a U+002D HYPHEN-MINUS
   character token.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data state</a>. Reconsume the <a>current input
   character</a>.</dd>

  </dl>

  <h5 id="script-data-escaped-state"><dfn><dfn>Script data escaped state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd>Switch to the <a>script data escaped dash state</a>. Emit a U+002D HYPHEN-MINUS
   character token.</dd>

   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dd>Switch to the <a>script data escaped less-than sign state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

   <dt>EOF</dt>
   <dd>Switch to the <a>data state</a>. <a>Parse error</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

  <h5 id="script-data-escaped-dash-state"><dfn><dfn>Script data escaped dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd>Switch to the <a>script data escaped dash dash state</a>. Emit a U+002D HYPHEN-MINUS
   character token.</dd>

   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dd>Switch to the <a>script data escaped less-than sign state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Switch to the <a>script data escaped state</a>. Emit a U+FFFD
   REPLACEMENT CHARACTER character token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data escaped state</a>. Emit the <a>current input
   character</a> as a character token.</dd>

  </dl>

  <h5 id="script-data-escaped-dash-dash-state"><dfn><dfn>Script data escaped dash dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd>Emit a U+002D HYPHEN-MINUS character token.</dd>

   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dd>Switch to the <a>script data escaped less-than sign state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>script data state</a>. Emit a U+003E GREATER-THAN SIGN character
   token.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Switch to the <a>script data escaped state</a>. Emit a U+FFFD
   REPLACEMENT CHARACTER character token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data escaped state</a>. Emit the <a>current input
   character</a> as a character token.</dd>

  </dl>

  <h5 id="script-data-escaped-less-than-sign-state"><dfn><dfn>Script data escaped less-than sign state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
   the <a>script data escaped end tag open state</a>.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Set the <var>temporary buffer</var> to the empty string. Append the
   lowercase version of the <a>current input character</a> (add 0x0020 to the character's code
   point) to the <var>temporary buffer</var>. Switch to the <a>script
   data double escape start state</a>. Emit a U+003C LESS-THAN SIGN character token and the
   <a>current input character</a> as a character token.</dd>

   <dt><a>Lowercase ASCII letter</a></dt>
   <dd>Set the <var>temporary buffer</var> to the empty string. Append the
   <a>current input character</a> to the <var>temporary
   buffer</var>. Switch to the <a>script data double escape start state</a>. Emit a U+003C
   LESS-THAN SIGN character token and the <a>current input character</a> as a character
   token.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data escaped state</a>. Emit a U+003C LESS-THAN SIGN character
   token. Reconsume the <a>current input character</a>.</dd>

  </dl>

  <h5 id="script-data-escaped-end-tag-open-state"><dfn><dfn>Script data escaped end tag open state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Create a new end tag token, and set its tag name to the lowercase version of the
   <a>current input character</a> (add 0x0020 to the character's code point). Append the
   <a>current input character</a> to the <var>temporary
   buffer</var>. Finally, switch to the <a>script data escaped end tag name state</a>. (Don't
   emit the token yet; further details will be filled in before it is emitted.)</dd>

   <dt><a>Lowercase ASCII letter</a></dt>
   <dd>Create a new end tag token, and set its tag name to the <a>current input character</a>.
   Append the <a>current input character</a> to the <var>temporary
   buffer</var>. Finally, switch to the <a>script data escaped end tag name state</a>. (Don't
   emit the token yet; further details will be filled in before it is emitted.)</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data escaped state</a>. Emit a U+003C LESS-THAN SIGN character
   token and a U+002F SOLIDUS character token. Reconsume the <a>current input
   character</a>.</dd>

  </dl>

  <h5 id="script-data-escaped-end-tag-name-state"><dfn><dfn>Script data escaped end tag name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
   <a>before attribute name state</a>. Otherwise, treat it as per the "anything else" entry
   below.</dd>

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
   <a>self-closing start tag state</a>. Otherwise, treat it as per the "anything else" entry
   below.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
   <a>data state</a> and emit the current tag token. Otherwise, treat it as per the "anything
   else" entry below.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
   character's code point) to the current tag token's tag name. Append the <a>current input
   character</a> to the <var>temporary buffer</var>.</dd>

   <dt><a>Lowercase ASCII letter</a></dt>
   <dd>Append the <a>current input character</a> to the current tag token's tag name. Append
   the <a>current input character</a> to the <var>temporary
   buffer</var>.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data escaped state</a>. Emit a U+003C LESS-THAN SIGN character
   token, a U+002F SOLIDUS character token, and a character token for each of the characters in the
   <var>temporary buffer</var> (in the order they were added to the
   buffer). Reconsume the <a>current input character</a>.</dd>

  </dl>

  <h5 id="script-data-double-escape-start-state"><dfn><dfn>Script data double escape start state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dt>U+002F SOLIDUS (/)</dt>
   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>If the <var>temporary buffer</var> is the string "<code>script</code>", then switch to the <a>script data double escaped state</a>.
   Otherwise, switch to the <a>script data escaped state</a>. Emit the <a>current input
   character</a> as a character token.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
   character's code point) to the <var>temporary buffer</var>. Emit the
   <a>current input character</a> as a character token.</dd>

   <dt><a>Lowercase ASCII letter</a></dt>
   <dd>Append the <a>current input character</a> to the <var>temporary buffer</var>. Emit the <a>current input character</a> as a character
   token.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data escaped state</a>. Reconsume the <a>current input
   character</a>.</dd>

  </dl>

  <h5 id="script-data-double-escaped-state"><dfn><dfn>Script data double escaped state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd>Switch to the <a>script data double escaped dash state</a>. Emit a U+002D HYPHEN-MINUS
   character token.</dd>

   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dd>Switch to the <a>script data double escaped less-than sign state</a>. Emit a U+003C
   LESS-THAN SIGN character token.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

  <h5 id="script-data-double-escaped-dash-state"><dfn><dfn>Script data double escaped dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd>Switch to the <a>script data double escaped dash dash state</a>. Emit a U+002D
   HYPHEN-MINUS character token.</dd>

   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dd>Switch to the <a>script data double escaped less-than sign state</a>. Emit a U+003C
   LESS-THAN SIGN character token.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Switch to the <a>script data double escaped state</a>. Emit a
   U+FFFD REPLACEMENT CHARACTER character token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data double escaped state</a>. Emit the <a>current input
   character</a> as a character token.</dd>

  </dl>

  <h5 id="script-data-double-escaped-dash-dash-state"><dfn><dfn>Script data double escaped dash dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd>Emit a U+002D HYPHEN-MINUS character token.</dd>

   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dd>Switch to the <a>script data double escaped less-than sign state</a>. Emit a U+003C
   LESS-THAN SIGN character token.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>script data state</a>. Emit a U+003E GREATER-THAN SIGN character
   token.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Switch to the <a>script data double escaped state</a>. Emit a
   U+FFFD REPLACEMENT CHARACTER character token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data double escaped state</a>. Emit the <a>current input
   character</a> as a character token.</dd>

  </dl>

  <h5 id="script-data-double-escaped-less-than-sign-state"><dfn><dfn>Script data double escaped less-than sign state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
   the <a>script data double escape end state</a>. Emit a U+002F SOLIDUS character token.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data double escaped state</a>. Reconsume the <a>current
   input character</a>.</dd>

  </dl>

  <h5 id="script-data-double-escape-end-state"><dfn><dfn>Script data double escape end state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dt>U+002F SOLIDUS (/)</dt>
   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>If the <var>temporary buffer</var> is the string "<code>script</code>", then switch to the <a>script data escaped state</a>. Otherwise,
   switch to the <a>script data double escaped state</a>. Emit the <a>current input
   character</a> as a character token.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
   character's code point) to the <var>temporary buffer</var>. Emit the
   <a>current input character</a> as a character token.</dd>

   <dt><a>Lowercase ASCII letter</a></dt>
   <dd>Append the <a>current input character</a> to the <var>temporary buffer</var>. Emit the <a>current input character</a> as a character
   token.</dd>

   <dt>Anything else</dt>
   <dd>Switch to the <a>script data double escaped state</a>. Reconsume the <a>current
   input character</a>.</dd>

  </dl>

  <h5 id="before-attribute-name-state"><dfn><dfn>Before attribute name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Ignore the character.</dd>

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>Switch to the <a>self-closing start tag state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Start a new attribute in the current tag token. Set that attribute's name to the lowercase
   version of the <a>current input character</a> (add 0x0020 to the character's code point),
   and its value to the empty string. Switch to the <a>attribute name state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Start a new attribute in the current tag token. Set that
   attribute's name to a U+FFFD REPLACEMENT CHARACTER character, and its value to the empty string.
   Switch to the <a>attribute name state</a>.</dd>

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dt>U+0027 APOSTROPHE (')</dt>
   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dt>U+003D EQUALS SIGN (=)</dt>
   <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Start a new attribute in the current tag token. Set that attribute's name to the
   <a>current input character</a>, and its value to the empty string. Switch to the
   <a>attribute name state</a>.</dd>

  </dl>

  <h5 id="attribute-name-state"><dfn><dfn>Attribute name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Switch to the <a>after attribute name state</a>.</dd>

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>Switch to the <a>self-closing start tag state</a>.</dd>

   <dt>U+003D EQUALS SIGN (=)</dt>
   <dd>Switch to the <a>before attribute value state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
   character's code point) to the current attribute's name.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
   attribute's name.</dd>

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dt>U+0027 APOSTROPHE (')</dt>
   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Append the <a>current input character</a> to the current attribute's name.</dd>

  </dl>

  When the user agent leaves the attribute name state (and before emitting the tag token, if
  appropriate), the complete attribute's name must be compared to the other attributes on the same
  token; if there is already an attribute on the token with the exact same name, then this is a
  <a>parse error</a> and the new attribute must be removed from the token.

  <p class="note">
If an attribute is so removed from a token, it, and the value that gets associated
  with it, if any, are never subsequently used by the parser, and are therefore effectively
  discarded. Removing the attribute in this way does not change its status as the "current
  attribute" for the purposes of the tokenizer, however.
</p>

  <h5 id="after-attribute-name-state"><dfn><dfn>After attribute name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Ignore the character.</dd>

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>Switch to the <a>self-closing start tag state</a>.</dd>

   <dt>U+003D EQUALS SIGN (=)</dt>
   <dd>Switch to the <a>before attribute value state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Start a new attribute in the current tag token. Set that attribute's name to the lowercase
   version of the <a>current input character</a> (add 0x0020 to the character's code point),
   and its value to the empty string. Switch to the <a>attribute name state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Start a new attribute in the current tag token. Set that
   attribute's name to a U+FFFD REPLACEMENT CHARACTER character, and its value to the empty string.
   Switch to the <a>attribute name state</a>.</dd>

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dt>U+0027 APOSTROPHE (')</dt>
   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Start a new attribute in the current tag token. Set that attribute's name to the
   <a>current input character</a>, and its value to the empty string. Switch to the
   <a>attribute name state</a>.</dd>

  </dl>

  <h5 id="before-attribute-value-state"><dfn><dfn>Before attribute value state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Ignore the character.</dd>

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dd>Switch to the <a>attribute value (double-quoted) state</a>.</dd>

   <dt>U+0026 AMPERSAND (&amp;)</dt>
   <dd>Switch to the <a>attribute value (unquoted) state</a>. Reconsume the <a>current
   input character</a>.</dd>

   <dt>U+0027 APOSTROPHE (')</dt>
   <dd>Switch to the <a>attribute value (single-quoted) state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
   attribute's value. Switch to the <a>attribute value (unquoted) state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the current tag
   token.</dd>

   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dt>U+003D EQUALS SIGN (=)</dt>
   <dt>U+0060 GRAVE ACCENT (`)</dt>
   <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Append the <a>current input character</a> to the current attribute's value. Switch to
   the <a>attribute value (unquoted) state</a>.</dd>

  </dl>

  <h5 id="attribute-value-(double-quoted)-state"><dfn><dfn>Attribute value (double-quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dd>Switch to the <a>after attribute value (quoted) state</a>.</dd>

   <dt>U+0026 AMPERSAND (&amp;)</dt>
   <dd>Switch to the <a>character reference in attribute value state</a>, with the
   <a>additional allowed character</a> being U+0022 QUOTATION MARK (&quot;).</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
   attribute's value.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Append the <a>current input character</a> to the current attribute's value.</dd>

  </dl>

  <h5 id="attribute-value-(single-quoted)-state"><dfn><dfn>Attribute value (single-quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0027 APOSTROPHE (')</dt>
   <dd>Switch to the <a>after attribute value (quoted) state</a>.</dd>

   <dt>U+0026 AMPERSAND (&amp;)</dt>
   <dd>Switch to the <a>character reference in attribute value state</a>, with the
   <a>additional allowed character</a> being U+0027 APOSTROPHE (').</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
   attribute's value.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Append the <a>current input character</a> to the current attribute's value.</dd>

  </dl>

  <h5 id="attribute-value-(unquoted)-state"><dfn><dfn>Attribute value (unquoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Switch to the <a>before attribute name state</a>.</dd>

   <dt>U+0026 AMPERSAND (&amp;)</dt>
   <dd>Switch to the <a>character reference in attribute value state</a>, with the
   <a>additional allowed character</a> being U+003E GREATER-THAN SIGN (&gt;).</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
   attribute's value.</dd>

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dt>U+0027 APOSTROPHE (')</dt>
   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
   <dt>U+003D EQUALS SIGN (=)</dt>
   <dt>U+0060 GRAVE ACCENT (`)</dt>
   <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Append the <a>current input character</a> to the current attribute's value.</dd>

  </dl>

  <h5 id="character-reference-in-attribute-value-state"><dfn><dfn>Character reference in attribute value state</dfn></dfn></h5>

  Attempt to <a>consume a character reference</a>.

  If nothing is returned, append a U+0026 AMPERSAND character (&amp;) to the current attribute's
  value.

  Otherwise, append the returned character tokens to the current attribute's value.

  Finally, switch back to the attribute value state that switched into this state.

  <h5 id="after-attribute-value-(quoted)-state"><dfn><dfn>After attribute value (quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Switch to the <a>before attribute name state</a>.</dd>

   <dt>U+002F SOLIDUS (/)</dt>
   <dd>Switch to the <a>self-closing start tag state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd><a>Parse error</a>. Switch to the <a>before attribute name state</a>. Reconsume
   the character.</dd>

  </dl>

  <h5 id="self-closing-start-tag-state"><dfn><dfn>Self-closing start tag state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Set the <i>self-closing flag</i> of the current tag token. Switch to the <a>data
   state</a>. Emit the current tag token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd><a>Parse error</a>. Switch to the <a>before attribute name state</a>. Reconsume
   the character.</dd>

  </dl>

  <h5 id="bogus-comment-state"><dfn><dfn>Bogus comment state</dfn></dfn></h5>

  Consume every character up to and including the first U+003E GREATER-THAN SIGN character (&gt;)
  or the end of the file (EOF), whichever comes first.
  If more than one character was consumed, then emit a comment token whose data is the
  concatenation of all the characters starting from and including the character that caused the
  state machine to switch into the bogus comment state, up to and including the character
  immediately before the last consumed character (i.e. up to the character just before the U+003E or
  EOF character), but with any U+0000 NULL characters replaced by U+FFFD REPLACEMENT CHARACTER
  characters. (If the comment was started by the end of the file (EOF), the token is empty.
  Similarly, the token is empty if it was generated by the string "<code>&lt;!></code>".)

  Switch to the <a>data state</a>.

  If the end of the file was reached, reconsume the EOF character.

  <h5 id="markup-declaration-open-state"><dfn><dfn>Markup declaration open state</dfn></dfn></h5>

  If the next two characters are both U+002D HYPHEN-MINUS characters (-), consume those two
  characters, create a comment token whose data is the empty string, and switch to the <a>comment
  start state</a>.

  Otherwise, if the next seven characters are an <a>ASCII case-insensitive</a> match for
  the word "DOCTYPE", then consume those characters and switch to the <a>DOCTYPE
  state</a>.

  Otherwise, if there is an <a>adjusted current node</a> and it is not an element in the
  <a>HTML namespace</a> and the next seven characters are a <a>case-sensitive</a> match
  for the string "[CDATA[" (the five uppercase letters "CDATA" with a U+005B LEFT SQUARE BRACKET
  character before and after), then consume those characters and switch to the <a>CDATA section
  state</a>.

  Otherwise, this is a <a>parse error</a>. Switch to the <a>bogus comment state</a>.
  The next character that is consumed, if any, is the first character that will be in the
  comment.

  <h5 id="comment-start-state"><dfn><dfn>Comment start state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd>Switch to the <a>comment start dash state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the comment
   token's data. Switch to the <a>comment state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
   Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd>Append the <a>current input character</a> to the comment token's data. Switch to the
   <a>comment state</a>.</dd>

  </dl>

  <h5 id="comment-start-dash-state"><dfn><dfn>Comment start dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd>Switch to the <a>comment end state</a></dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+002D HYPHEN-MINUS character (-) and a U+FFFD REPLACEMENT
   CHARACTER character to the comment token's data. Switch to the <a>comment state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
   Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd>Append a U+002D HYPHEN-MINUS character (-) and the <a>current input character</a> to
   the comment token's data. Switch to the <a>comment state</a>.</dd>

  </dl>

  <h5 id="comment-state"><dfn><dfn>Comment state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd>Switch to the <a>comment end dash state</a></dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the comment
   token's data.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
   Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd>Append the <a>current input character</a> to the comment token's data.</dd>

  </dl>

  <h5 id="comment-end-dash-state"><dfn><dfn>Comment end dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd>Switch to the <a>comment end state</a></dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+002D HYPHEN-MINUS character (-) and a U+FFFD REPLACEMENT
   CHARACTER character to the comment token's data. Switch to the <a>comment state</a>.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
   Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd>Append a U+002D HYPHEN-MINUS character (-) and the <a>current input character</a> to
   the comment token's data. Switch to the <a>comment state</a>.</dd>

  </dl>

  <h5 id="comment-end-state"><dfn><dfn>Comment end state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the comment token.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append two U+002D HYPHEN-MINUS characters (-) and a U+FFFD
   REPLACEMENT CHARACTER character to the comment token's data. Switch to the <a>comment
   state</a>.</dd>

   <dt>U+0021 EXCLAMATION MARK (!)</dt>
   <dd><a>Parse error</a>. Switch to the <a>comment end bang state</a>.</dd>

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd><a>Parse error</a>. Append a U+002D HYPHEN-MINUS character (-) to the comment token's
   data.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
   Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd><a>Parse error</a>. Append two U+002D HYPHEN-MINUS characters (-) and the <a>current
   input character</a> to the comment token's data. Switch to the <a>comment
   state</a>.</dd>

  </dl>

  <h5 id="comment-end-bang-state"><dfn><dfn>Comment end bang state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+002D HYPHEN-MINUS (-)</dt>
   <dd>Append two U+002D HYPHEN-MINUS characters (-) and a U+0021 EXCLAMATION MARK character (!) to
   the comment token's data. Switch to the <a>comment end dash state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the comment token.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append two U+002D HYPHEN-MINUS characters (-), a U+0021 EXCLAMATION
   MARK character (!), and a U+FFFD REPLACEMENT CHARACTER character to the comment token's data.
   Switch to the <a>comment state</a>.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
   Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd>Append two U+002D HYPHEN-MINUS characters (-), a U+0021 EXCLAMATION MARK character (!), and
   the <a>current input character</a> to the comment token's data. Switch to the <a>comment
   state</a>.</dd>

  </dl>

  <h5 id="doctype-state"><dfn><dfn>DOCTYPE state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Switch to the <a>before DOCTYPE name state</a>.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Create a new DOCTYPE token.
   Set its <i>force-quirks flag</i> to <i>on</i>. Emit the token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd><a>Parse error</a>. Switch to the <a>before DOCTYPE name state</a>. Reconsume the
   character.</dd>

  </dl>

  <h5 id="before-doctype-name-state"><dfn><dfn>Before DOCTYPE name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Ignore the character.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Create a new DOCTYPE token. Set the token's name to the lowercase version of the
   <a>current input character</a> (add 0x0020 to the character's code point). Switch to the
   <a>DOCTYPE name state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Create a new DOCTYPE token. Set the token's name to a U+FFFD
   REPLACEMENT CHARACTER character. Switch to the <a>DOCTYPE name state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd><a>Parse error</a>. Create a new DOCTYPE token. Set its <i>force-quirks flag</i> to
   <i>on</i>. Switch to the <a>data state</a>. Emit the token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Create a new DOCTYPE token.
   Set its <i>force-quirks flag</i> to <i>on</i>. Emit the token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd>Create a new DOCTYPE token. Set the token's name to the <a>current input character</a>.
   Switch to the <a>DOCTYPE name state</a>.</dd>

  </dl>

  <h5 id="doctype-name-state"><dfn><dfn>DOCTYPE name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Switch to the <a>after DOCTYPE name state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

   <dt><a>Uppercase ASCII letter</a></dt>
   <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
   character's code point) to the current DOCTYPE token's name.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
   DOCTYPE token's name.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd>Append the <a>current input character</a> to the current DOCTYPE token's name.</dd>

  </dl>

  <h5 id="after-doctype-name-state"><dfn><dfn>After DOCTYPE name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Ignore the character.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd>

    If the six characters starting from the <a>current input character</a> are an
    <a>ASCII case-insensitive</a> match for the word "PUBLIC", then consume those characters
    and switch to the <a>after DOCTYPE public keyword state</a>.

    Otherwise, if the six characters starting from the <a>current input character</a> are
    an <a>ASCII case-insensitive</a> match for the word "SYSTEM", then consume those
    characters and switch to the <a>after DOCTYPE system keyword state</a>.

    Otherwise, this is a <a>parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>. Switch to the <a>bogus DOCTYPE state</a>.

   </dd>

  </dl>

  <h5 id="after-doctype-public-keyword-state"><dfn><dfn>After DOCTYPE public keyword state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Switch to the <a>before DOCTYPE public identifier state</a>.</dd>

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's public identifier to the empty string (not
   missing), then switch to the <a>DOCTYPE public identifier (double-quoted) state</a>.</dd>

   <dt>U+0027 APOSTROPHE (')</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's public identifier to the empty string (not
   missing), then switch to the <a>DOCTYPE public identifier (single-quoted) state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

  <h5 id="before-doctype-public-identifier-state"><dfn><dfn>Before DOCTYPE public identifier state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Ignore the character.</dd>

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dd>Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to
   the <a>DOCTYPE public identifier (double-quoted) state</a>.</dd>

   <dt>U+0027 APOSTROPHE (')</dt>
   <dd>Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to
   the <a>DOCTYPE public identifier (single-quoted) state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

  <h5 id="doctype-public-identifier-(double-quoted)-state"><dfn><dfn>DOCTYPE public identifier (double-quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dd>Switch to the <a>after DOCTYPE public identifier state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
   DOCTYPE token's public identifier.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd>Append the <a>current input character</a> to the current DOCTYPE token's public
   identifier.</dd>

  </dl>

  <h5 id="doctype-public-identifier-(single-quoted)-state"><dfn><dfn>DOCTYPE public identifier (single-quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0027 APOSTROPHE (')</dt>
   <dd>Switch to the <a>after DOCTYPE public identifier state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
   DOCTYPE token's public identifier.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd>Append the <a>current input character</a> to the current DOCTYPE token's public
   identifier.</dd>

  </dl>

  <h5 id="after-doctype-public-identifier-state"><dfn><dfn>After DOCTYPE public identifier state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Switch to the <a>between DOCTYPE public and system identifiers state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's system identifier to the empty string (not
   missing), then switch to the <a>DOCTYPE system identifier (double-quoted) state</a>.</dd>

   <dt>U+0027 APOSTROPHE (')</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's system identifier to the empty string (not
   missing), then switch to the <a>DOCTYPE system identifier (single-quoted) state</a>.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

  <h5 id="between-doctype-public-and-system-identifiers-state"><dfn><dfn>Between DOCTYPE public and system identifiers state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Ignore the character.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dd>Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to
   the <a>DOCTYPE system identifier (double-quoted) state</a>.</dd>

   <dt>U+0027 APOSTROPHE (')</dt>
   <dd>Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to
   the <a>DOCTYPE system identifier (single-quoted) state</a>.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

  <h5 id="after-doctype-system-keyword-state"><dfn><dfn>After DOCTYPE system keyword state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Switch to the <a>before DOCTYPE system identifier state</a>.</dd>

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's system identifier to the empty string (not
   missing), then switch to the <a>DOCTYPE system identifier (double-quoted) state</a>.</dd>

   <dt>U+0027 APOSTROPHE (')</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's system identifier to the empty string (not
   missing), then switch to the <a>DOCTYPE system identifier (single-quoted) state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

  <h5 id="before-doctype-system-identifier-state"><dfn><dfn>Before DOCTYPE system identifier state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Ignore the character.</dd>

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dd>Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to
   the <a>DOCTYPE system identifier (double-quoted) state</a>.</dd>

   <dt>U+0027 APOSTROPHE (')</dt>
   <dd>Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to
   the <a>DOCTYPE system identifier (single-quoted) state</a>.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

  <h5 id="doctype-system-identifier-(double-quoted)-state"><dfn><dfn>DOCTYPE system identifier (double-quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
   <dd>Switch to the <a>after DOCTYPE system identifier state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
   DOCTYPE token's system identifier.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd>Append the <a>current input character</a> to the current DOCTYPE token's system
   identifier.</dd>

  </dl>

  <h5 id="doctype-system-identifier-(single-quoted)-state"><dfn><dfn>DOCTYPE system identifier (single-quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0027 APOSTROPHE (')</dt>
   <dd>Switch to the <a>after DOCTYPE system identifier state</a>.</dd>

   <dt>U+0000 NULL</dt>
   <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
   DOCTYPE token's system identifier.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
   Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd>Append the <a>current input character</a> to the current DOCTYPE token's system
   identifier.</dd>

  </dl>

  <h5 id="after-doctype-system-identifier-state"><dfn><dfn>After DOCTYPE system identifier state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dd>Ignore the character.</dd>

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

   <dt>EOF</dt>
   <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

   <dt>Anything else</dt>
   <dd><a>Parse error</a>. Switch to the <a>bogus DOCTYPE state</a>. (This does
   <em>not</em> set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.)</dd>

  </dl>

  <h5 id="bogus-doctype-state"><dfn><dfn>Bogus DOCTYPE state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
   <dd>Switch to the <a>data state</a>. Emit the DOCTYPE token.</dd>

   <dt>EOF</dt>
   <dd>Switch to the <a>data state</a>. Emit the DOCTYPE token. Reconsume the EOF
   character.</dd>

   <dt>Anything else</dt>
   <dd>Ignore the character.</dd>

  </dl>

  <h5 id="cdata-section-state"><dfn><dfn>CDATA section state</dfn></dfn></h5>

  Switch to the <a>data state</a>.

  Consume every character up to the next occurrence of the three character sequence U+005D RIGHT
  SQUARE BRACKET U+005D RIGHT SQUARE BRACKET U+003E GREATER-THAN SIGN (<code>]]></code>),
  or the end of the file (EOF), whichever comes first. Emit a series of character tokens consisting
  of all the characters consumed except the matching three character sequence at the end (if one was
  found before the end of the file).

  If the end of the file was reached, reconsume the EOF character.

  <h5 id="tokenizing-character-references"><dfn>Tokenizing character references</dfn></h5>

  This section defines how to <dfn>consume a character reference</dfn>, optionally with an
  <dfn>additional allowed character</dfn>, which, if specified where the algorithm is invoked, adds
  a character to the list of characters that cause there to not be a character reference.

  This definition is used when parsing character references <a>in text</a> and <a>in
  attributes</a>.

  The behavior depends on the identity of the next character (the one immediately after the
  U+0026 AMPERSAND character), as follows:

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION (tab)</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000C FORM FEED (FF)</dt>

   <dt>U+0020 SPACE</dt>
   <dt>U+003C LESS-THAN SIGN</dt>
   <dt>U+0026 AMPERSAND</dt>
   <dt>EOF</dt>
   <dt>The <a>additional allowed character</a>, if there is one</dt>

   <dd>Not a character reference. No characters are consumed, and nothing is returned. (This is not
   an error, either.)</dd>

   <dt>U+0023 NUMBER SIGN (#)</dt>

   <dd>

    Consume the U+0023 NUMBER SIGN.

    The behavior further depends on the character after the U+0023 NUMBER SIGN:

    <dl class="switch">

     <dt>U+0078 LATIN SMALL LETTER X</dt>
     <dt>U+0058 LATIN CAPITAL LETTER X</dt>

     <dd>

      Consume the X.

      Follow the steps below, but using <a>ASCII hex digits</a>.

      When it comes to interpreting the number, interpret it as a hexadecimal number.

     </dd>

     <dt>Anything else</dt>

     <dd>

      Follow the steps below, but using <a>ASCII digits</a>.

      When it comes to interpreting the number, interpret it as a decimal number.

     </dd>

    </dl>

    Consume as many characters as match the range of characters given above (<a>ASCII hex
    digits</a> or <a>ASCII digits</a>).

    If no characters match the range, then don't consume any characters (and unconsume the U+0023
    NUMBER SIGN character and, if appropriate, the X character). This is a <a>parse error</a>;
    nothing is returned.

    Otherwise, if the next character is a U+003B SEMICOLON, consume that too. If it isn't, there
    is a <a>parse error</a>.

    If one or more characters match the range, then take them all and interpret the string of
    characters as a number (either hexadecimal or decimal as appropriate).

    If that number is one of the numbers in the first column of the following table, then this is
    a <a>parse error</a>. Find the row with that number in the first column, and return a
    character token for the Unicode character given in the second column of that row.

    <table>
     <thead>
      <tr><th>Number <th colspan=2>Unicode character
     <tbody>
      <tr><td>0x00 <td>U+FFFD <td>REPLACEMENT CHARACTER

      <tr><td>0x80 <td>U+20AC <td>EURO SIGN (&#x20AC;)

      <tr><td>0x82 <td>U+201A <td>SINGLE LOW-9 QUOTATION MARK (&#x201A;)
      <tr><td>0x83 <td>U+0192 <td>LATIN SMALL LETTER F WITH HOOK (&#x0192;)
      <tr><td>0x84 <td>U+201E <td>DOUBLE LOW-9 QUOTATION MARK (&#x201E;)
      <tr><td>0x85 <td>U+2026 <td>HORIZONTAL ELLIPSIS (&#x2026;)
      <tr><td>0x86 <td>U+2020 <td>DAGGER (&#x2020;)
      <tr><td>0x87 <td>U+2021 <td>DOUBLE DAGGER (&#x2021;)
      <tr><td>0x88 <td>U+02C6 <td>MODIFIER LETTER CIRCUMFLEX ACCENT (&#x02C6;)
      <tr><td>0x89 <td>U+2030 <td>PER MILLE SIGN (&#x2030;)
      <tr><td>0x8A <td>U+0160 <td>LATIN CAPITAL LETTER S WITH CARON (&#x0160;)
      <tr><td>0x8B <td>U+2039 <td>SINGLE LEFT-POINTING ANGLE QUOTATION MARK (&#x2039;)
      <tr><td>0x8C <td>U+0152 <td>LATIN CAPITAL LIGATURE OE (&#x0152;)

      <tr><td>0x8E <td>U+017D <td>LATIN CAPITAL LETTER Z WITH CARON (&#x017D;)

      <tr><td>0x91 <td>U+2018 <td>LEFT SINGLE QUOTATION MARK (&#x2018;)
      <tr><td>0x92 <td>U+2019 <td>RIGHT SINGLE QUOTATION MARK (&#x2019;)
      <tr><td>0x93 <td>U+201C <td>LEFT DOUBLE QUOTATION MARK (&#x201C;)
      <tr><td>0x94 <td>U+201D <td>RIGHT DOUBLE QUOTATION MARK (&#x201D;)
      <tr><td>0x95 <td>U+2022 <td>BULLET (&#x2022;)
      <tr><td>0x96 <td>U+2013 <td>EN DASH (&#x2013;)
      <tr><td>0x97 <td>U+2014 <td>EM DASH (&#x2014;)
      <tr><td>0x98 <td>U+02DC <td>SMALL TILDE (&#x02DC;)
      <tr><td>0x99 <td>U+2122 <td>TRADE MARK SIGN (&#x2122;)
      <tr><td>0x9A <td>U+0161 <td>LATIN SMALL LETTER S WITH CARON (&#x0161;)
      <tr><td>0x9B <td>U+203A <td>SINGLE RIGHT-POINTING ANGLE QUOTATION MARK (&#x203A;)
      <tr><td>0x9C <td>U+0153 <td>LATIN SMALL LIGATURE OE (&#x0153;)

      <tr><td>0x9E <td>U+017E <td>LATIN SMALL LETTER Z WITH CARON (&#x017E;)
      <tr><td>0x9F <td>U+0178 <td>LATIN CAPITAL LETTER Y WITH DIAERESIS (&#x0178;)
    </table>

    Otherwise, if the number is in the range 0xD800 to 0xDFFF or is greater
    than 0x10FFFF, then this is a <a>parse error</a>. Return a U+FFFD REPLACEMENT CHARACTER
    character token.

    Otherwise, return a character token for the Unicode character whose code point is that
    number.

     Additionally, if the number is in the range 0x0001 to 0x0008,    0x000D to 0x001F,  0x007F  to 0x009F, 0xFDD0 to 0xFDEF, or is
    one of 0x000B, 0xFFFE, 0xFFFF, 0x1FFFE, 0x1FFFF, 0x2FFFE, 0x2FFFF, 0x3FFFE, 0x3FFFF, 0x4FFFE,
    0x4FFFF, 0x5FFFE, 0x5FFFF, 0x6FFFE, 0x6FFFF, 0x7FFFE, 0x7FFFF, 0x8FFFE, 0x8FFFF, 0x9FFFE,
    0x9FFFF, 0xAFFFE, 0xAFFFF, 0xBFFFE, 0xBFFFF, 0xCFFFE, 0xCFFFF, 0xDFFFE, 0xDFFFF, 0xEFFFE,
    0xEFFFF, 0xFFFFE, 0xFFFFF, 0x10FFFE, or 0x10FFFF, then this is a <a>parse error</a>.

   </dd>

   <dt>Anything else</dt>

   <dd>

    Consume the maximum number of characters possible, with the consumed characters matching one
    of the identifiers in the first column of the <a>named character references</a> table (in
    a <a>case-sensitive</a> manner).

    If no match can be made, then no characters are consumed, and nothing is returned. In this
    case, if the characters after the U+0026 AMPERSAND character (&amp;) consist of a sequence of
    one or more <a>alphanumeric ASCII characters</a> followed by a U+003B SEMICOLON character
    (;), then this is a <a>parse error</a>.

    If the character reference is being consumed <a>as part of an attribute</a>, and the last character matched is not a U+003B
    SEMICOLON character (;), and the next character is either a U+003D EQUALS SIGN character (=) or
    an <a>alphanumeric ASCII character</a>, then, for
    historical reasons, all the characters that were matched after the U+0026 AMPERSAND character
    (&amp;) must be unconsumed, and nothing is returned.

    However, if this next character is in fact a U+003D EQUALS SIGN character (=), then this is a
    <a>parse error</a>, because some legacy user agents  will
    misinterpret the markup in those cases.

    Otherwise, a character reference is parsed. If the last character matched is not a U+003B
    SEMICOLON character (;), there is a <a>parse error</a>.

    Return one or two character tokens for the character(s) corresponding to the character
    reference name (as given by the second column of the <a>named character references</a>
    table).

    <div class="example">

     If the markup contains (not in an attribute) the string <code>I'm &amp;notit; I
     tell you</code>, the character reference is parsed as "not", as in, <code>I'm &not;it;
     I tell you</code> (and this is a parse error). But if the markup was <code>I'm
     &amp;notin; I tell you</code>, the character reference would be parsed as "notin;", resulting
     in <code>I'm &notin; I tell you</code> (and no parse error).

    </div>

   </dd>

  </dl>

  </div>

  <div class="impl">

  <h4 id="tree-construction"><dfn><dfn>Tree construction</dfn></dfn></h4>

  The input to the tree construction stage is a sequence of tokens from the
  <a>tokenization</a> stage. The tree construction stage is associated with a DOM
  <code>Document</code> object when a parser is created. The "output" of this stage consists of
  dynamically modifying or extending that document's DOM tree.

  This specification does not define when an interactive user agent has to render the
  <code>Document</code> so that it is available to the user, or when it has to begin accepting user
  input.

  <hr />

  As each token is emitted from the tokenizer, the user agent must follow the appropriate steps
  from the following list, known as the <dfn>tree construction dispatcher</dfn>:

  <dl class="switch">

   <dt>If the <a>stack of open elements</a> is empty</dt>
   <dt>If the <a>adjusted current node</a> is an element in the <a>HTML namespace</a></dt>
   <dt>If the <a>adjusted current node</a> is a <a>MathML text integration point</a> and the token is a start tag whose tag name is neither "mglyph" nor "malignmark"</dt>
   <dt>If the <a>adjusted current node</a> is a <a>MathML text integration point</a> and the token is a character token</dt>
   <dt>If the <a>adjusted current node</a> is an <code>annotation-xml</code> element in the <a>MathML namespace</a> and the token is a start tag whose tag name is "svg"</dt>
   <dt>If the <a>adjusted current node</a> is an <a>HTML integration point</a> and the token is a start tag</dt>
   <dt>If the <a>adjusted current node</a> is an <a>HTML integration point</a> and the token is a character token</dt>
   <dt>If the token is an end-of-file token</dt>

   <dd>Process the token according to the rules given in the section corresponding to the current
   <a>insertion mode</a> in HTML content.</dd>

   <dt>Otherwise</dt>

   <dd>Process the token according to the rules given in the section for parsing tokens <a>in foreign content</a>.</dd>

  </dl>

  The <dfn>next token</dfn> is the token that is about to be processed by the <a>tree
  construction dispatcher</a> (even if the token is subsequently just ignored).

  A node is a <dfn>MathML text integration point</dfn> if it is one of the following
  elements:

  <ul class="brief">
   <li>An <code>mi</code> element in the <a>MathML namespace</a></li>
   <li>An <code>mo</code> element in the <a>MathML namespace</a></li>
   <li>An <code>mn</code> element in the <a>MathML namespace</a></li>
   <li>An <code>ms</code> element in the <a>MathML namespace</a></li>
   <li>An <code>mtext</code> element in the <a>MathML namespace</a></li>
  </ul>

  A node is an <dfn>HTML integration point</dfn> if it is one of the following elements:

  <ul class="brief">
   <li>An <code>annotation-xml</code> element in the <a>MathML
   namespace</a> whose start tag token had an attribute with the name "encoding" whose value was
   an <a>ASCII case-insensitive</a> match for the string "<code>text/html</code>"</li>
   <li>An <code>annotation-xml</code> element in the <a>MathML
   namespace</a> whose start tag token had an attribute with the name "encoding" whose value was
   an <a>ASCII case-insensitive</a> match for the string "<code>application/xhtml+xml</code>"</li>
   <li>A <code>foreignObject</code> element in the <a>SVG namespace</a></li>
   <li>A <code>desc</code> element in the <a>SVG namespace</a></li>
   <li>A <code>title</code> element in the <a>SVG namespace</a></li>
  </ul>

  <p class="note">
If the node in question is the <var>context</var> element passed to the <a>HTML fragment
  parsing algorithm</a>, then the start tag token for that element is the "fake" token created
  during by that <a>HTML fragment parsing algorithm</a>.
</p>

  <hr />

  <p class="note">
Not all of the tag names mentioned below are conformant tag names in this
  specification; many are included to handle legacy content. They still form part of the algorithm
  that implementations are required to implement to claim conformance.
</p>

  <p class="note">
The algorithm described below places no limit on the depth of the DOM tree
  generated, or on the length of tag names, attribute names, attribute values, <code>Text</code>
  nodes, etc. While implementors are encouraged to avoid arbitrary limits, it is recognized that <a>practical concerns</a> will likely force user agents to impose nesting
  depth constraints.
</p>

  <h5 id="creating-and-inserting-nodes"><dfn>Creating and inserting nodes</dfn></h5>

  While the parser is processing a token, it can enable or disable <dfn>foster parenting</dfn>. This affects the following algorithm.

  The <dfn>appropriate place for inserting a node</dfn>, optionally using a particular
  <i>override target</i>, is the position in an element returned by running the following steps:

  <ol>

   <li>

    If there was an <i>override target</i> specified, then let <var>target</var> be the
    <i>override target</i>.

    Otherwise, let <var>target</var> be the <a>current node</a>.

   </li>

   <li>

    Determine the <var>adjusted insertion location</var> using the first matching steps
    from the following list:

    <dl class="switch">

     <dt>If <a>foster parenting</a> is enabled and <var>target</var> is a <code>table</code>, <code>tbody</code>, <code>tfoot</code>,
     <code>thead</code>, or <code>tr</code> element</dt>

     <dd>

      <p class="note">
Foster parenting happens when content is misnested in tables.
</p>

      Run these substeps:

      <ol>

       <li>Let <var>last template</var> be the last <code>template</code> element in the
       <a>stack of open elements</a>, if any.

       <li>Let <var>last table</var> be the last <code>table</code> element in the
       <a>stack of open elements</a>, if any.

       <li>If there is a <var>last template</var> and either there is no <var>last table</var>, or there is one, but <var>last template</var> is lower
       (more recently added) than <var>last table</var> in the <a>stack of open
       elements</a>, then: let <var>adjusted insertion location</var> be inside <var>last template</var>'s <a>template contents</a>, after its last child (if any),
       and abort these substeps.</li>

       <li>If there is no <var>last table</var>,  then let <var>adjusted insertion
       location</var> be inside the first element in the <a>stack of open elements</a> (the
       <code>html</code> element), after its last child (if any), and abort these substeps.
       (<a>fragment case</a>)

       <li>If <var>last table</var> has a parent node, then let <var>adjusted insertion location</var> be inside <var>last table</var>'s parent
       node, immediately before <var>last table</var>, and abort these
       substeps.</li>

       <li>Let <var>previous element</var> be the element immediately above <var>last table</var> in the <a>stack of open elements</a>.</li>

       <li>Let <var>adjusted insertion location</var> be inside <var>previous
       element</var>, after its last child (if any).</li>

      </ol>

      <p class="note">
These steps are involved in part because it's possible for elements, the
      <code>table</code> element in this case in particular, to have been moved by a script around
      in the DOM, or indeed removed from the DOM entirely, after the element was inserted by the
      parser.
</p>

     </dd>

     <dt>Otherwise</dt>

     <dd>

      Let <var>adjusted insertion location</var> be inside <var>target</var>,
      after its last child (if any).

     </dd>

    </dl>

   </li>

   <li>

    If the <var>adjusted insertion location</var> is inside a <code>template</code>
    element, let it instead be inside the <code>template</code> element's <a>template
    contents</a>, after its last child (if any).

   </li>

   <li>

    Return the <var>adjusted insertion location</var>.

   </li>

  </ol>

  <hr />

  When the steps below require the UA to <dfn>create an
  element for a token</dfn> in a particular <var>given namespace</var> and with a
  particular <var>intended parent</var>, the UA must run the following steps:

  <ol>

   <li>

    Create a node implementing the interface appropriate for the element type corresponding to
    the tag name of the token in <var>given namespace</var> (as given in the specification
    that defines that element, e.g. for an <code>a</code> element in the <a>HTML
    namespace</a>, this specification defines it to be the <code>HTMLAnchorElement</code>
    interface), with the tag name being the name of that element, with the node being in the given
    namespace, and with the attributes on the node being those given in the given token.

    The interface appropriate for an element in the <a>HTML namespace</a> that is not
    defined in this specification (or <a>other applicable specifications</a>) is
    <code>HTMLUnknownElement</code>. Elements in other namespaces whose interface is not defined by
    that namespace's specification must use the interface <code>Element</code>.

    The <a>node document</a> of the newly created element
    must be the <a>node document</a> of the <var>intended parent</var>.

   </li>

   <li>If the newly created element has an <code>xmlns</code> attribute <em>in the
   <a>XMLNS namespace</a></em> whose value is not exactly the same as the element's namespace,
   that is a <a>parse error</a>. Similarly, if the newly created element has an <code>xmlns:xlink</code> attribute in the <a>XMLNS namespace</a> whose value is not the
   <a>XLink Namespace</a>, that is a <a>parse error</a>.</li>

   <li>If the newly created element is a <a>resettable element</a>,
   invoke its <a>reset algorithm</a>. (This initializes the
   element's <a>value</a> and <a>checkedness</a> based on the element's attributes.)</li>

   <li>If the element is a <a>form-associated element</a>, and the <a><code>form</code> element pointer</a> is not null, and there is no <code>template</code>
   element on the <a>stack of open elements</a>, and the newly created element is either not
   <a>reassociateable</a> or doesn't have a <code>form</code> attribute, and the <var>intended parent</var> is in
   the same <a>home subtree</a> as the element pointed to by the <a><code>form</code> element pointer</a>, <a>associate</a> the newly created element with the
   <code>form</code> element pointed to by the <a><code>form</code> element
   pointer</a>, and suppress the running of the <a>reset the form owner</a> algorithm when
   the parser subsequently attempts to insert the element.</li>

   <li>Return the newly created element.</li>

  </ol>

  <hr />

  When the steps below require the user agent to <dfn>insert a foreign element</dfn> for a token
  in a given namespace, the user agent must run these steps:

  <ol>

   <li>Let the <var>adjusted insertion location</var> be the <a>appropriate place for
   inserting a node</a>.</li>

   <li><a>Create an element for the token</a> in the given namespace, with the intended
   parent being the element in which the <var>adjusted insertion location</var> finds
   itself.</li>

   <li>

    If it is possible to insert an element at the <var>adjusted insertion
    location</var>, then insert the newly created element at the <var>adjusted insertion
    location</var>.

    <p class="note">
If the <var>adjusted insertion location</var> cannot accept more
    elements, e.g. because it's a <code>Document</code> that already has an element child, then the
    newly created element is dropped on the floor.
</p>

   </li>

   <li>Push the element onto the <a>stack of open elements</a> so that it is the new
   <a>current node</a>.</li>

   <li>Return the newly created element.</li>

  </ol>

  When the steps below require the user agent to <dfn>insert an HTML element</dfn> for a token,
  the user agent must <a>insert a foreign element</a> for the token, in the <a>HTML
  namespace</a>.

  <hr />

  When the steps below require the user agent to <dfn>adjust MathML attributes</dfn> for a token,
  then, if the token has an attribute named <code>definitionurl</code>, change its name to
  <code>definitionURL</code> (note the case difference).

  When the steps below require the user agent to <dfn>adjust SVG attributes</dfn> for a token,
  then, for each attribute on the token whose attribute name is one of the ones in the first column
  of the following table, change the attribute's name to the name given in the corresponding cell in
  the second column. (This fixes the case of SVG attributes that are not all lowercase.)

  <table>
   <thead>
    <tr> <th> Attribute name on token <th> Attribute name on element
   <tbody>
    <tr> <td> <code>attributename</code> <td> <code>attributeName</code>
    <tr> <td> <code>attributetype</code> <td> <code>attributeType</code>
    <tr> <td> <code>basefrequency</code> <td> <code>baseFrequency</code>
    <tr> <td> <code>baseprofile</code> <td> <code>baseProfile</code>
    <tr> <td> <code>calcmode</code> <td> <code>calcMode</code>
    <tr> <td> <code>clippathunits</code> <td> <code>clipPathUnits</code>
    <tr> <td> <code>diffuseconstant</code> <td> <code>diffuseConstant</code>
    <tr> <td> <code>edgemode</code> <td> <code>edgeMode</code>
    <tr> <td> <code>filterunits</code> <td> <code>filterUnits</code>
    <tr> <td> <code>glyphref</code> <td> <code>glyphRef</code>
    <tr> <td> <code>gradienttransform</code> <td> <code>gradientTransform</code>
    <tr> <td> <code>gradientunits</code> <td> <code>gradientUnits</code>
    <tr> <td> <code>kernelmatrix</code> <td> <code>kernelMatrix</code>
    <tr> <td> <code>kernelunitlength</code> <td> <code>kernelUnitLength</code>
    <tr> <td> <code>keypoints</code> <td> <code>keyPoints</code>
    <tr> <td> <code>keysplines</code> <td> <code>keySplines</code>
    <tr> <td> <code>keytimes</code> <td> <code>keyTimes</code>
    <tr> <td> <code>lengthadjust</code> <td> <code>lengthAdjust</code>
    <tr> <td> <code>limitingconeangle</code> <td> <code>limitingConeAngle</code>
    <tr> <td> <code>markerheight</code> <td> <code>markerHeight</code>
    <tr> <td> <code>markerunits</code> <td> <code>markerUnits</code>
    <tr> <td> <code>markerwidth</code> <td> <code>markerWidth</code>
    <tr> <td> <code>maskcontentunits</code> <td> <code>maskContentUnits</code>
    <tr> <td> <code>maskunits</code> <td> <code>maskUnits</code>
    <tr> <td> <code>numoctaves</code> <td> <code>numOctaves</code>
    <tr> <td> <code>pathlength</code> <td> <code>pathLength</code>
    <tr> <td> <code>patterncontentunits</code> <td> <code>patternContentUnits</code>
    <tr> <td> <code>patterntransform</code> <td> <code>patternTransform</code>
    <tr> <td> <code>patternunits</code> <td> <code>patternUnits</code>
    <tr> <td> <code>pointsatx</code> <td> <code>pointsAtX</code>
    <tr> <td> <code>pointsaty</code> <td> <code>pointsAtY</code>
    <tr> <td> <code>pointsatz</code> <td> <code>pointsAtZ</code>
    <tr> <td> <code>preservealpha</code> <td> <code>preserveAlpha</code>
    <tr> <td> <code>preserveaspectratio</code> <td> <code>preserveAspectRatio</code>
    <tr> <td> <code>primitiveunits</code> <td> <code>primitiveUnits</code>
    <tr> <td> <code>refx</code> <td> <code>refX</code>
    <tr> <td> <code>refy</code> <td> <code>refY</code>
    <tr> <td> <code>repeatcount</code> <td> <code>repeatCount</code>
    <tr> <td> <code>repeatdur</code> <td> <code>repeatDur</code>
    <tr> <td> <code>requiredextensions</code> <td> <code>requiredExtensions</code>
    <tr> <td> <code>requiredfeatures</code> <td> <code>requiredFeatures</code>
    <tr> <td> <code>specularconstant</code> <td> <code>specularConstant</code>
    <tr> <td> <code>specularexponent</code> <td> <code>specularExponent</code>
    <tr> <td> <code>spreadmethod</code> <td> <code>spreadMethod</code>
    <tr> <td> <code>startoffset</code> <td> <code>startOffset</code>
    <tr> <td> <code>stddeviation</code> <td> <code>stdDeviation</code>
    <tr> <td> <code>stitchtiles</code> <td> <code>stitchTiles</code>
    <tr> <td> <code>surfacescale</code> <td> <code>surfaceScale</code>
    <tr> <td> <code>systemlanguage</code> <td> <code>systemLanguage</code>
    <tr> <td> <code>tablevalues</code> <td> <code>tableValues</code>
    <tr> <td> <code>targetx</code> <td> <code>targetX</code>
    <tr> <td> <code>targety</code> <td> <code>targetY</code>
    <tr> <td> <code>textlength</code> <td> <code>textLength</code>
    <tr> <td> <code>viewbox</code> <td> <code>viewBox</code>
    <tr> <td> <code>viewtarget</code> <td> <code>viewTarget</code>
    <tr> <td> <code>xchannelselector</code> <td> <code>xChannelSelector</code>
    <tr> <td> <code>ychannelselector</code> <td> <code>yChannelSelector</code>
    <tr> <td> <code>zoomandpan</code> <td> <code>zoomAndPan</code>
  </table>

  When the steps below require the user agent to <dfn>adjust foreign attributes</dfn> for a
  token, then, if any of the attributes on the token match the strings given in the first column of
  the following table, let the attribute be a namespaced attribute, with the prefix being the string
  given in the corresponding cell in the second column, the local name being the string given in the
  corresponding cell in the third column, and the namespace being the namespace given in the
  corresponding cell in the fourth column. (This fixes the use of namespaced attributes, in
  particular <a><code>lang</code> attributes in the <span>XML
  namespace</a></span>.)

  <table>
   <thead>
    <tr> <th> Attribute name <th> Prefix <th> Local name <th> Namespace
   <tbody>
    <tr> <td> <code>xlink:actuate</code> <td> <code>xlink</code> <td> <code>actuate</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:arcrole</code> <td> <code>xlink</code> <td> <code>arcrole</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:href</code> <td> <code>xlink</code> <td> <code>href</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:role</code> <td> <code>xlink</code> <td> <code>role</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:show</code> <td> <code>xlink</code> <td> <code>show</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:title</code> <td> <code>xlink</code> <td> <code>title</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:type</code> <td> <code>xlink</code> <td> <code>type</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xml:lang</code> <td> <code>xml</code> <td> <code>lang</code> <td> <a>XML namespace</a>
    <tr> <td> <code>xml:space</code> <td> <code>xml</code> <td> <code>space</code> <td> <a>XML namespace</a>
    <tr> <td> <code>xmlns</code> <td> (none) <td> <code>xmlns</code> <td> <a>XMLNS namespace</a>
    <tr> <td> <code>xmlns:xlink</code> <td> <code>xmlns</code> <td> <code>xlink</code> <td> <a>XMLNS namespace</a>
  </table>

  <hr />

  When the steps below require the user agent to <dfn>insert a character</dfn> while processing a
  token, the user agent must run the following steps:

  <ol>

   <li>Let <var>data</var> be the characters passed to the algorithm, or, if no
   characters were explicitly specified, the character of the character token being
   processed.</li>

   <li>Let the <var>adjusted insertion location</var> be the <a>appropriate
   place for inserting a node</a>.</li>

   <li>

    If the <var>adjusted insertion location</var> is in a <code>Document</code> node,
    then abort these steps.

    <p class="note">
The DOM will not let <code>Document</code> nodes have <code>Text</code> node
    children, so they are dropped on the floor.

   </li>

   <li>

    If there is a <code>Text</code> node immediately before the <var>adjusted insertion
    location</var>, then append <var>data</var> to that <code>Text</code> node's data.

    Otherwise, create a new <code>Text</code> node whose data is <var>data</var> and
    whose <a>node document</a> is the same as that of the
    element in which the <var>adjusted insertion location</var> finds itself, and insert
    the newly created node at the <var>adjusted insertion location</var>.

   </li>

  </ol>

  <div class="example">

   Here are some sample inputs to the parser and the corresponding number of <code>Text</code>
   nodes that they result in, assuming a user agent that executes scripts.

   <table>
    <thead>
     <tr>
      <th>Input <th>Number of <code>Text</code> nodes
    <tbody>
     <tr>
      <td><pre highlight="html">
A&lt;script>
var&nbsp;script&nbsp;=&nbsp;document.getElementsByTagName('script')[0];
document.body.removeChild(script);
&lt;/script>B
</pre>
      <td>One <code>Text</code> node in the document, containing "AB".
     <tr>
      <td><pre highlight="html">
A&lt;script>
var&nbsp;text&nbsp;=&nbsp;document.createTextNode('B');
document.body.appendChild(text);
&lt;/script>C
</pre>
      <td>Three <code>Text</code> nodes; "A" before the script, the script's contents, and "BC" after the script (the parser appends to the <code>Text</code> node created by the script).
     <tr>
      <td><pre highlight="html">
A&lt;script>
var&nbsp;text&nbsp;=&nbsp;document.getElementsByTagName('script')[0].firstChild;
text.data&nbsp;=&nbsp;'B';
document.body.appendChild(text);
&lt;/script>C
</pre>
      <td>Two adjacent <code>Text</code> nodes in the document, containing "A" and "BC".
     <tr>
      <td><pre highlight="html">
A&lt;table>B&lt;tr>C&lt;/tr>D&lt;/table>
</pre>
      <td>One <code>Text</code> node before the table, containing "ABCD". (This is caused by <a>foster parenting</a>.)
     <tr>
      <td><pre highlight="html">
A&lt;table>&lt;tr>&nbsp;B&lt;/tr>&nbsp;C&lt;/table>
</pre>
      <td>One <code>Text</code> node before the table, containing "A&nbsp;B&nbsp;C" (A-space-B-space-C). (This is caused by <a>foster parenting</a>.)
     <tr>
      <td><pre highlight="html">
A&lt;table>&lt;tr>&nbsp;B&lt;/tr>&nbsp;&lt;/em>C&lt;/table>
</pre>
      <td>One <code>Text</code> node before the table, containing "A&nbsp;BC" (A-space-B-C), and one <code>Text</code> node inside the table (as a child of a <code>tbody</code>) with a single space character. (Space characters separated from non-space characters by non-character tokens are not affected by <a>foster parenting</a>, even if those other tokens then get ignored.)
   </table>

  </div>

  <hr />

  When the steps below require the user agent to <dfn>insert a comment</dfn> while processing a
  comment token, optionally with an explicitly insertion position <var>position</var>, the
  user agent must run the following steps:

  <ol>

   <li>Let <var>data</var> be the data given in the comment token being
   processed.</li>

   <li>If <var>position</var> was specified, then let the <var>adjusted
   insertion location</var> be <var>position</var>. Otherwise, let <var>adjusted
   insertion location</var> be the <a>appropriate place for inserting a node</a>.</li>

   <li>Create a <code>Comment</code> node whose <code>data</code> attribute is set to
   <var>data</var> and whose <a>node document</a> is
   the same as that of the node in which the <var>adjusted insertion location</var> finds
   itself.

   <li>Insert the newly created node at the <var>adjusted insertion
   location</var>.</li>

  </ol>

  <hr />

  DOM mutation events must not fire for changes caused by the UA
  parsing the document. This includes the parsing of any content inserted using <code>document.write()</code> and <code>document.writeln()</code> calls. [[!UIEVENTS]]

  However, <a>mutation observers</a> <em>do</em> fire, as required by the DOM specification.

  <h5 id="parsing-elements-that-contain-only-text"><dfn>Parsing elements that contain only text</dfn></h5>

  The <dfn>generic raw text element parsing algorithm</dfn> and the <dfn>generic RCDATA element
  parsing algorithm</dfn> consist of the following steps. These algorithms are always invoked in
  response to a start tag token.

  <ol>

   <li><a>Insert an HTML element</a> for the token.</li>

   <li>If the algorithm that was invoked is the <a>generic raw text element parsing
   algorithm</a>, switch the tokenizer to the <a>RAWTEXT state</a>; otherwise the algorithm
   invoked was the <a>generic RCDATA element parsing algorithm</a>, switch the tokenizer to
   the <a>RCDATA state</a>.</li>

   <li>Let the <a>original insertion mode</a> be the current <a>insertion
   mode</a>.

   <li>Then, switch the <a>insertion mode</a> to "<a>text</a>".</li>

  </ol>

  <h5 id="closing-elements-that-have-implied-end-tags"><dfn>Closing elements that have implied end tags</dfn></h5>

  When the steps below require the UA to <dfn>generate implied end
  tags</dfn>, then, while the <a>current node</a> is a
  <code>dd</code> element, a <code>dt</code> element, an
  <code>li</code> element, an <code>option</code> element, an
  <code>optgroup</code> element, a <code>p</code> element, an
  <code>rb</code> element, an <code>rp</code> element, an <code>rt</code>
  element, or an <code>rtc</code> element, the UA must
  pop the <a>current node</a> off the <a>stack of open
  elements</a>.

  If a step requires the UA to generate implied end tags but lists
  an element to exclude from the process, then the UA must perform the
  above steps as if that element was not in the above list.

  When the steps below require the UA to <dfn>generate all implied end tags thoroughly</dfn>,
  then, while the <a>current node</a> is a <code>caption</code> element, a
  <code>colgroup</code> element, a <code>dd</code> element, a <code>dt</code> element, an
  <code>li</code> element, an <code>optgroup</code> element, an <code>option</code> element, a
  <code>p</code> element, an <code>rb</code> element, an <code>rp</code> element, an <code>rt</code>
  element, an <code>rtc</code> element, a <code>tbody</code> element, a <code>td</code> element, a
  <code>tfoot</code> element, a <code>th</code> element, a <code>thead</code> element, or a
  <code>tr</code> element, the UA must pop the <a>current node</a> off the
  <a>stack of open elements</a>.

  <h5 id="the-rules-for-parsing-tokens-in-html-content"><dfn>The rules for parsing tokens in HTML content</dfn></h5>

  <h6 id="the-"initial"-insertion-mode"><dfn>The "<dfn>initial</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>initial</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

   <dt>A character token that is one of U+0009 CHARACTER
   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
   <dd>
    Ignore the token.
   </dd>

   <dt>A comment token</dt>
   <dd>
    <a>Insert a comment</a> as the last child of the <code>Document</code> object.
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>

    If the DOCTYPE token's name is not a <a>case-sensitive</a> match for the string "<code>html</code>", or the token's public identifier is not missing, or the token's system
    identifier is neither missing nor a <a>case-sensitive</a> match for the string
    "<code>about:legacy-compat</code>", and none of the sets of conditions in the following list are
    matched, then there is a <a>parse error</a>.

    <ul>

     <li>The DOCTYPE token's name is a <a>case-sensitive</a> match for the string "<code>html</code>", the token's public identifier is the <a>case-sensitive</a> string
     "<code>-//W3C//DTD&nbsp;HTML&nbsp;4.0//EN</code>", and the token's system identifier
     is either missing or the <a>case-sensitive</a> string "<code>http://www.w3.org/TR/REC-html40/strict.dtd</code>".</li>

     <li>The DOCTYPE token's name is a <a>case-sensitive</a> match for the string "<code>html</code>", the token's public identifier is the <a>case-sensitive</a> string
     "<code>-//W3C//DTD&nbsp;HTML&nbsp;4.01//EN</code>", and the token's system identifier
     is either missing or the <a>case-sensitive</a> string "<code>http://www.w3.org/TR/html4/strict.dtd</code>".</li>

     <li>The DOCTYPE token's name is a <a>case-sensitive</a> match for the string "<code>html</code>", the token's public identifier is the <a>case-sensitive</a> string
     "<code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Strict//EN</code>", and the token's system
     identifier is the <a>case-sensitive</a> string "<code>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</code>".</li>

     <li>The DOCTYPE token's name is a <a>case-sensitive</a> match for the string "<code>html</code>", the token's public identifier is the <a>case-sensitive</a> string
     "<code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1//EN</code>", and the token's system identifier
     is the <a>case-sensitive</a> string "<code>http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</code>".</li>

    </ul>

    Conformance checkers may, based on the values (including presence or lack thereof) of the
    DOCTYPE token's name, public identifier, or system identifier, switch to a conformance checking
    mode for another language (e.g. based on the DOCTYPE token a conformance checker could recognize
    that the document is an HTML4-era document, and defer to an HTML4 conformance checker.)

    Append a <code>DocumentType</code> node to the <code>Document</code> node, with the <code>name</code> attribute set to the name given in the DOCTYPE token, or the empty string
    if the name was missing; the <code>publicId</code> attribute set to the public
    identifier given in the DOCTYPE token, or the empty string if the public identifier was missing;
    the <code>systemId</code> attribute set to the system identifier given in the DOCTYPE
    token, or the empty string if the system identifier was missing; and the other attributes
    specific to <code>DocumentType</code> objects set to null and empty lists as appropriate.
    Associate the <code>DocumentType</code> node with the <code>Document</code> object so that it is
    returned as the value of the <code>doctype</code> attribute of the
    <code>Document</code> object.

    Then, if the document is <em>not</em> <a>an <code>iframe</code>
    <code>srcdoc</code> document</a>, and the DOCTYPE token matches
    one of the conditions in the following list, then set the <code>Document</code> to <a>quirks
    mode</a>:

    <ul class="brief">
     <li> The <i>force-quirks flag</i> is set to <i>on</i>. </li>
     <li> The name is set to anything other than "<code>html</code>" (compared <a>case-sensitively</a>). </li>
     <li> The public identifier is set to: "<code>-//W3O//DTD W3 HTML Strict 3.0//EN//</code>" </li>
     <li> The public identifier is set to: "<code>-/W3C/DTD HTML 4.0 Transitional/EN</code>" </li>
     <li> The public identifier is set to: "<code>HTML</code>" </li>
     <li> The system identifier is set to: "<code>http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd</code>" </li>
     <li> The public identifier starts with: "<code>+//Silmaril//dtd html Pro v0r11 19970101//</code>" </li>
     <li> The public identifier starts with: "<code>-//AS//DTD HTML 3.0 asWedit + extensions//</code>" </li>
     <li> The public identifier starts with: "<code>-//AdvaSoft Ltd//DTD HTML 3.0 asWedit + extensions//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Level 1//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Level 2//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Strict Level 1//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Strict Level 2//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Strict//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.1E//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML 3.0//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML 3.2 Final//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML 3.2//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML 3//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML Level 0//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML Level 1//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML Level 2//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML Level 3//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict Level 0//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict Level 1//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict Level 2//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict Level 3//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict//</code>" </li>
     <li> The public identifier starts with: "<code>-//IETF//DTD HTML//</code>" </li>
     <li> The public identifier starts with: "<code>-//Metrius//DTD Metrius Presentational//</code>" </li>
     <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 2.0 HTML Strict//</code>" </li>
     <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 2.0 HTML//</code>" </li>
     <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 2.0 Tables//</code>" </li>
     <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 3.0 HTML Strict//</code>" </li>
     <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 3.0 HTML//</code>" </li>
     <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 3.0 Tables//</code>" </li>
     <li> The public identifier starts with: "<code>-//Netscape Comm. Corp.//DTD HTML//</code>" </li>
     <li> The public identifier starts with: "<code>-//Netscape Comm. Corp.//DTD Strict HTML//</code>" </li>
     <li> The public identifier starts with: "<code>-//O'Reilly and Associates//DTD HTML 2.0//</code>" </li>
     <li> The public identifier starts with: "<code>-//O'Reilly and Associates//DTD HTML Extended 1.0//</code>" </li>
     <li> The public identifier starts with: "<code>-//O'Reilly and Associates//DTD HTML Extended Relaxed 1.0//</code>" </li>
     <li> The public identifier starts with: "<code>-//SQ//DTD HTML 2.0 HoTMetaL + extensions//</code>" </li>
     <li> The public identifier starts with: "<code>-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::extensions to HTML 4.0//</code>" </li>
     <li> The public identifier starts with: "<code>-//SoftQuad//DTD HoTMetaL PRO 4.0::19971010::extensions to HTML 4.0//</code>" </li>
     <li> The public identifier starts with: "<code>-//Spyglass//DTD HTML 2.0 Extended//</code>" </li>
     <li> The public identifier starts with: "<code>-//Sun Microsystems Corp.//DTD HotJava HTML//</code>" </li>
     <li> The public identifier starts with: "<code>-//Sun Microsystems Corp.//DTD HotJava Strict HTML//</code>" </li>
     <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3 1995-03-24//</code>" </li>
     <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3.2 Draft//</code>" </li>
     <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3.2 Final//</code>" </li>
     <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3.2//</code>" </li>
     <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3.2S Draft//</code>" </li>
     <li> The public identifier starts with: "<code>-//W3C//DTD HTML 4.0 Frameset//</code>" </li>
     <li> The public identifier starts with: "<code>-//W3C//DTD HTML 4.0 Transitional//</code>" </li>
     <li> The public identifier starts with: "<code>-//W3C//DTD HTML Experimental 19960712//</code>" </li>
     <li> The public identifier starts with: "<code>-//W3C//DTD HTML Experimental 970421//</code>" </li>
     <li> The public identifier starts with: "<code>-//W3C//DTD W3 HTML//</code>" </li>
     <li> The public identifier starts with: "<code>-//W3O//DTD W3 HTML 3.0//</code>" </li>
     <li> The public identifier starts with: "<code>-//WebTechs//DTD Mozilla HTML 2.0//</code>" </li>
     <li> The public identifier starts with: "<code>-//WebTechs//DTD Mozilla HTML//</code>" </li>
     <li> The system identifier is missing and the public identifier starts with: "<code>-//W3C//DTD HTML 4.01 Frameset//</code>" </li>
     <li> The system identifier is missing and the public identifier starts with: "<code>-//W3C//DTD HTML 4.01 Transitional//</code>" </li>
    </ul>

    Otherwise, if the document is <em>not</em> <a>an <code>iframe</code> <code>srcdoc</code> document</a>, and the DOCTYPE token matches one of
    the conditions in the following list, then set the <code>Document</code> to <a>limited-quirks
    mode</a>:

    <ul class="brief">
     <li> The public identifier starts with: "<code>-//W3C//DTD XHTML 1.0 Frameset//</code>" </li>
     <li> The public identifier starts with: "<code>-//W3C//DTD XHTML 1.0 Transitional//</code>" </li>
     <li> The system identifier is not missing and the public identifier starts with: "<code>-//W3C//DTD HTML 4.01 Frameset//</code>" </li>
     <li> The system identifier is not missing and the public identifier starts with: "<code>-//W3C//DTD HTML 4.01 Transitional//</code>" </li>
    </ul>

    The system identifier and public identifier strings must be compared to the values given in
    the lists above in an <a>ASCII case-insensitive</a> manner. A system identifier whose
    value is the empty string is not considered missing for the purposes of the conditions
    above.

    Then, switch the <a>insertion mode</a> to "<a>before html</a>".

   </dd>

   <dt>Anything else</dt>
   <dd>

    If the document is <em>not</em> <a>an <code>iframe</code> <code>srcdoc</code> document</a>, then this is a <a>parse
    error</a>; set the <code>Document</code> to <a>quirks mode</a>.

    In any case, switch the <a>insertion mode</a> to "<a>before html</a>", then reprocess the token.

   </dd>

  </dl>

  <h6 id="the-"before-html"-insertion-mode"><dfn>The "<dfn>before html</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>before html</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

   <dt>A DOCTYPE token</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A comment token</dt>
   <dd>
    <a>Insert a comment</a> as the last child of the <code>Document</code> object.
   </dd>

   <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
   FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
   <dd>
    Ignore the token.
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>

    <a>Create an element for the token</a> in the <a>HTML namespace</a>, with the
    <code>Document</code> as the intended parent. Append it to the <code>Document</code> object. Put
    this element in the <a>stack of open elements</a>.

    If the <code>Document</code> is being loaded as part of <a>navigation</a> of a <a>browsing context</a>, run these steps:

    <ol>

     <li>If the result of running <a>match service worker
     registration</a> for <a>the <code>Document</code>'s address</a> is non-null, run the
     <a>application cache selection algorithm</a> passing the
     <code>Document</code> object with no manifest.</li>

     <li>

      Otherwise, run these substeps:

      <ol>

       <li>If the newly created element has a <code>manifest</code>
       attribute whose value is not the empty string, then <a>resolve</a> the value of that attribute to an <a>absolute URL</a>, relative to
       the newly created element, and if that is  successful, run the <a>application cache selection algorithm</a> passing the
       <code>Document</code> object with the result of applying the <a>URL serializer</a> algorithm to the resulting <a>parsed
       URL</a> with the <i>exclude fragment flag</i> set.</li>

       <li>Otherwise, run the <a>application cache selection
       algorithm</a> passing the <code>Document</code> object with no manifest.</li>

      </ol>

     </li>

    </ol>

    Switch the <a>insertion mode</a> to "<a>before
    head</a>".

   </dd>

   <dt>An end tag whose tag name is one of: "head", "body", "html", "br"</dt>
   <dd>
    Act as described in the "anything else" entry below.
   </dd>

   <dt>Any other end tag</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>Anything else</dt>
   <dd>

    Create an <code>html</code> element whose <a>node document</a> is the <code>Document</code> object. Append
    it to the <code>Document</code> object. Put this element in the <a>stack of open
    elements</a>.

    If the <code>Document</code> is being loaded as part of <a>navigation</a> of a <a>browsing context</a>, then: run the <a>application cache selection algorithm</a> with no manifest,
    passing it the <code>Document</code> object.

    Switch the <a>insertion mode</a> to "<a>before
    head</a>", then reprocess the token.

   </dd>

  </dl>

  The root element can end up being removed from the <code>Document</code> object, e.g. by
  scripts; nothing in particular happens in such cases, content continues being appended to the
  nodes as described in the next section.

  <h6 id="the-"before-head"-insertion-mode"><dfn>The "<dfn>before head</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>before head</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

   <dt>A character token that is one of U+0009 CHARACTER
   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
   <dd>
    Ignore the token.
   </dd>

   <dt>A comment token</dt>
   <dd>
    <a>Insert a comment</a>.
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>
    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.
   </dd>

   <dt>A start tag whose tag name is "head"</dt>
   <dd>

    <a>Insert an HTML element</a> for the token.

    Set the <a><code>head</code> element pointer</a> to the newly created
    <code>head</code> element.

    Switch the <a>insertion mode</a> to "<a>in
    head</a>".

   </dd>

   <dt>An end tag whose tag name is one of: "head", "body", "html", "br"</dt>
   <dd>

    Act as described in the "anything else" entry below.

   </dd>

   <dt>Any other end tag</dt>
   <dd>

    <a>Parse error</a>. Ignore the token.

   </dd>

   <dt>Anything else</dt>
   <dd>

    <a>Insert an HTML element</a> for a "head" start tag token with no attributes.

    Set the <a><code>head</code> element pointer</a> to the newly created
    <code>head</code> element.

    Switch the <a>insertion mode</a> to "<a>in
    head</a>".

    Reprocess the current token.

   </dd>

  </dl>

  <h6 id="the-"in-head"-insertion-mode"><dfn>The "<dfn>in head</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  head</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

   <dt>A character token that is one of U+0009 CHARACTER
   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
   <dd>
    <a>Insert the character</a>.
   </dd>

   <dt>A comment token</dt>
   <dd>
    <a>Insert a comment</a>.
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>
    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.
   </dd>

   <dt>A start tag whose tag name is one of: "base", "basefont",
   "bgsound", "link"</dt>
   <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

   </dd>

   <dt>A start tag whose tag name is "meta"</dt>
   <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    If the element has a <code>charset</code> attribute, and <a>getting an encoding</a> from
    its value results in an <a>encoding</a>, and the
    <a>confidence</a> is currently <i>tentative</i>, then
    <a>change the encoding</a> to the resulting encoding.

    Otherwise, if the element has an <code>http-equiv</code>
    attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>Content-Type</code>", and the element has a <code>content</code> attribute, and applying the <a>algorithm for
    extracting a character encoding from a <code>meta</code> element</a> to that attribute's
    value returns an <a>encoding</a>, and the
    <a>confidence</a> is currently <i>tentative</i>, then
    <a>change the encoding</a> to the extracted encoding.

   </dd>

   <dt>A start tag whose tag name is "title"</dt>
   <dd>
    Follow the <a>generic RCDATA element parsing algorithm</a>.
   </dd>

   <dt>A start tag whose tag name is "noscript", if the <a>scripting flag</a> is enabled</dt>
   <dt>A start tag whose tag name is one of: "noframes", "style"</dt>
   <dd>
    Follow the <a>generic raw text element parsing algorithm</a>.
   </dd>

   <dt>A start tag whose tag name is "noscript", if the <a>scripting flag</a> is disabled</dt>
   <dd>

    <a>Insert an HTML element</a> for the token.

    Switch the <a>insertion mode</a> to "<a>in
    head noscript</a>".

   </dd>

   <dt>A start tag whose tag name is "script"</dt>
   <dd>

    Run these steps:

    <ol>

     <li>Let the <var>adjusted insertion location</var> be the <a>appropriate place
     for inserting a node</a>.</li>

     <li><a>Create an element for the token</a> in the <a>HTML namespace</a>, with
     the intended parent being the element in which the <var>adjusted insertion
     location</var> finds itself.</li>

     <li>

      Mark the element as being <a>"parser-inserted"</a> and unset the element's
      <a>"non-blocking"</a> flag.

      <p class="note">This ensures that, if the script is external, any <code>document.write()</code> calls in the script will execute in-line,
      instead of blowing the document away, as would happen in most other cases. It also prevents
      the script from executing until the end tag is seen.
</p>

     </li>

     <li>If the parser was originally created for the <a>HTML fragment parsing
     algorithm</a>, then mark the <code>script</code> element as <a>"already started"</a>.
     (<a>fragment case</a>)</li>

     <li>Insert the newly created element at the <var>adjusted insertion
     location</var>.</li>

     <li>Push the element onto the <a>stack of open elements</a> so that it is the new
     <a>current node</a>.</li>

     <li>Switch the tokenizer to the <a>script data state</a>.</li>

     <li>Let the <a>original insertion mode</a> be the current <a>insertion
     mode</a>.

     <li>Switch the <a>insertion mode</a> to "<a>text</a>".</li>

    </ol>

   </dd>

   <dt>An end tag whose tag name is "head"</dt>
   <dd>

    Pop the <a>current node</a> (which will be the <code>head</code> element) off the
    <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to "<a>after
    head</a>".

   </dd>

   <dt>An end tag whose tag name is one of: "body", "html", "br"</dt>
   <dd>
    Act as described in the "anything else" entry below.
   </dd>

   <dt>A start tag whose tag name is "template"</dt>
   <dd>

    <a>Insert an HTML element</a> for the token.

    Insert a <a>marker</a> at the end of the <a>list of
    active formatting elements</a>.

    Set the <a>frameset-ok flag</a> to "not ok".

    Switch the <a>insertion mode</a> to "<a>in
    template</a>".

    Push "<a>in template</a>" onto the <a>stack of
    template insertion modes</a> so that it is the new <a>current template insertion
    mode</a>.

   </dd>

   <dt>An end tag whose tag name is "template"</dt>
   <dd>

    If there is no <code>template</code> element on the <a>stack of open elements</a>, then
    this is a <a>parse error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

     <li><a>Generate all implied end tags thoroughly</a>.</li>

     <li>If the <a>current node</a> is not a <code>template</code> element, then this is a
     <a>parse error</a>.</li>

     <li>Pop elements from the <a>stack of open elements</a> until a <code>template</code>
     element has been popped from the stack.</li>

     <li><a>Clear the list of active formatting elements up to the last marker</a>.</li>

     <li>Pop the <a>current template insertion mode</a> off the <a>stack of template
     insertion modes</a>.

     <li><a>Reset the insertion mode appropriately</a>.</li>

    </ol>

   </dd>

   <dt>A start tag whose tag name is "head"</dt>
   <dt>Any other end tag</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>Anything else</dt>
   <dd>

    Pop the <a>current node</a> (which will be the <code>head</code> element) off the
    <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to "<a>after
    head</a>".

    Reprocess the token.

   </dd>

  </dl>

  <h6 id="the-"in-head-noscript"-insertion-mode"><dfn>The "<dfn>in head noscript</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in head noscript</a>" <a>insertion mode</a>, the user agent must handle the
  token as follows:

  <dl class="switch">

   <dt>A DOCTYPE token</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>An end tag whose tag name is "noscript"</dt>
   <dd>

    Pop the <a>current node</a> (which will be a <code>noscript</code> element) from the
    <a>stack of open elements</a>; the new <a>current node</a> will be a
    <code>head</code> element.

    Switch the <a>insertion mode</a> to "<a>in
    head</a>".

   </dd>

   <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
   FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
   <dt>A comment token</dt>
   <dt>A start tag whose tag name is one of: "basefont", "bgsound", "link", "meta", "noframes",
   "style"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

   </dd>

   <dt>An end tag whose tag name is "br"</dt>
   <dd>
    Act as described in the "anything else" entry below.
   </dd>

   <dt>A start tag whose tag name is one of: "head", "noscript"</dt>
   <dt>Any other end tag</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>Anything else</dt>
   <dd>

    <a>Parse error</a>.

    Pop the <a>current node</a> (which will be a <code>noscript</code> element) from the
    <a>stack of open elements</a>; the new <a>current node</a> will be a
    <code>head</code> element.

    Switch the <a>insertion mode</a> to "<a>in
    head</a>".

    Reprocess the token.

   </dd>

  </dl>

  <h6 id="the-"after-head"-insertion-mode"><dfn>The "<dfn>after head</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after head</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

   <dt>A character token that is one of U+0009 CHARACTER
   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
   <dd>
    <a>Insert the character</a>.
   </dd>

   <dt>A comment token</dt>
   <dd>
    <a>Insert a comment</a>.
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>A start tag whose tag name is "body"</dt>
   <dd>

    <a>Insert an HTML element</a> for the token.

    Set the <a>frameset-ok flag</a> to "not ok".

    Switch the <a>insertion mode</a> to "<a>in
    body</a>".

   </dd>

   <dt>A start tag whose tag name is "frameset"</dt>
   <dd>

    <a>Insert an HTML element</a> for the token.

    Switch the <a>insertion mode</a> to "<a>in
    frameset</a>".

   </dd>

   <dt>A start tag whose tag name is one of: "base", "basefont", "bgsound", "link", "meta",
   "noframes", "script", "style", "template", "title"</dt>
   <dd>

    <a>Parse error</a>.

    Push the node pointed to by the <a><code>head</code> element pointer</a> onto
    the <a>stack of open elements</a>.

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    Remove the node pointed to by the <a><code>head</code> element pointer</a>
    from the <a>stack of open elements</a>. (It might not be the <a>current node</a> at
    this point.)

    <p class="note">
The <a><code>head</code> element pointer</a> cannot be null at
    this point.
</p>

   </dd>

   <dt>An end tag whose tag name is "template"</dt>
   <dd>
    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.
   </dd>

   <dt>An end tag whose tag name is one of: "body", "html", "br"</dt>
   <dd>
    Act as described in the "anything else" entry below.
   </dd>

   <dt>A start tag whose tag name is "head"</dt>
   <dt>Any other end tag</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>Anything else</dt>
   <dd>

    <a>Insert an HTML element</a> for a "body" start tag token with no attributes.

    Switch the <a>insertion mode</a> to "<a>in
    body</a>".

    Reprocess the current token.

   </dd>

  </dl>

  <h6 id="the-"in-body"-insertion-mode"><dfn>The "<dfn>in body</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  body</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

   <dt>A character token that is U+0000 NULL</dt>
   <dd>

    <a>Parse error</a>. Ignore the token.

   </dd>

   <dt>A character token that is one of U+0009 CHARACTER TABULATION,
   U+000A LINE FEED (LF), U+000C FORM FEED (FF), U+000D CARRIAGE
   RETURN (CR), or U+0020 SPACE</dt>
   <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert the token's character</a>.

   </dd>

   <dt>Any other character token</dt>
   <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert the token's character</a>.

    Set the <a>frameset-ok flag</a> to "not ok".

   </dd>

   <dt>A comment token</dt>
   <dd>
    <a>Insert a comment</a>.
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>

    <a>Parse error</a>.

    If there is a <code>template</code> element on the <a>stack of open elements</a>, then
    ignore the token.

    Otherwise, for each attribute on the token, check to see if the attribute is already present
    on the top element of the <a>stack of open elements</a>. If it is not, add the attribute
    and its corresponding value to that element.

   </dd>

   <dt>A start tag whose tag name is one of: "base", "basefont", "bgsound", "link", "meta",
   "noframes", "script", "style", "template", "title"</dt>
   <dt>An end tag whose tag name is "template"</dt>
   <dd>
    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.
   </dd>

   <dt>A start tag whose tag name is "body"</dt>
   <dd>

    <a>Parse error</a>.

    If the second element on the <a>stack of open elements</a> is not a <code>body</code>
    element, if the <a>stack of open elements</a> has only one node on it, or if there is a
    <code>template</code> element on the <a>stack of open elements</a>, then ignore the token.
    (<a>fragment case</a>)

    Otherwise, set the <a>frameset-ok flag</a> to "not ok"; then, for each attribute on the
    token, check to see if the attribute is already present on the <code>body</code> element (the
    second element) on the <a>stack of open elements</a>, and if it is not, add the attribute
    and its corresponding value to that element.

   </dd>

   <dt>A start tag whose tag name is "frameset"</dt>
   <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> has only one node on it, or if the second element
    on the <a>stack of open elements</a> is not a <code>body</code> element, then ignore the
    token. (<a>fragment case</a>)

    If the <a>frameset-ok flag</a> is set to "not ok", ignore the token.

    Otherwise, run the following steps:

    <ol>

     <li>Remove the second element on the <a>stack of open elements</a> from its parent
     node, if it has one.</li>

     <li>Pop all the nodes from the bottom of the <a>stack of open elements</a>, from the
     <a>current node</a> up to, but not including, the root <code>html</code> element.

     <li><a>Insert an HTML element</a> for the token.</li>

     <li>Switch the <a>insertion mode</a> to "<a>in
     frameset</a>".

    </ol>

   </dd>

   <dt>An end-of-file token</dt>
   <dd>

    If the <a>stack of template insertion modes</a> is not empty, then process the token
    <a>using the rules for</a> the "<a>in
    template</a>" <a>insertion mode</a>.

    Otherwise, follow these steps:

    <ol>

     <li>If there is a node in the <a>stack of open elements</a> that is not either a
     <code>dd</code> element, a <code>dt</code> element, an <code>li</code> element, an
     <code>optgroup</code> element, an <code>option</code> element, a <code>p</code> element, an
     <code>rb</code> element, an <code>rp</code> element, an <code>rt</code> element, an
     <code>rtc</code> element, a <code>tbody</code> element, a <code>td</code> element, a
     <code>tfoot</code> element, a <code>th</code> element, a <code>thead</code> element, a
     <code>tr</code> element, the <code>body</code> element, or the <code>html</code> element, then
     this is a <a>parse error</a>.</li>

     <li><a>Stop parsing</a>.</li>

    </ol>

   </dd>

   <dt>An end tag whose tag name is "body"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>body</code> element in scope</a>, this is a <a>parse error</a>;
    ignore the token.

    Otherwise, if there is a node in the <a>stack of open elements</a> that is not either a
    <code>dd</code> element, a <code>dt</code> element, an <code>li</code> element, an
    <code>optgroup</code> element, an <code>option</code> element, a <code>p</code> element, an
    <code>rb</code> element, an <code>rp</code> element, an <code>rt</code> element, an
    <code>rtc</code> element, a <code>tbody</code> element, a <code>td</code> element, a
    <code>tfoot</code> element, a <code>th</code> element, a <code>thead</code> element, a
    <code>tr</code> element, the <code>body</code> element, or the <code>html</code> element, then
    this is a <a>parse error</a>.

    Switch the <a>insertion mode</a> to "<a>after
    body</a>".

   </dd>

   <dt>An end tag whose tag name is "html"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>body</code> element in scope</a>, this is a <a>parse error</a>;
    ignore the token.

    Otherwise, if there is a node in the <a>stack of open elements</a> that is not either a
    <code>dd</code> element, a <code>dt</code> element, an <code>li</code> element, an
    <code>optgroup</code> element, an <code>option</code> element, a <code>p</code> element, an
    <code>rb</code> element, an <code>rp</code> element, an <code>rt</code> element, an
    <code>rtc</code> element, a <code>tbody</code> element, a <code>td</code> element, a
    <code>tfoot</code> element, a <code>th</code> element, a <code>thead</code> element, a
    <code>tr</code> element, the <code>body</code> element, or the <code>html</code> element, then
    this is a <a>parse error</a>.

    Switch the <a>insertion mode</a> to "<a>after
    body</a>".

    Reprocess the token.

   </dd>

   <dt>A start tag whose tag name is one of: "address", "article", "aside", "blockquote", "center",
   "details", "dialog", "dir", "div", "dl", "fieldset", "figcaption", "figure", "footer", "header",
   "main", "menu", "nav", "ol", "p", "section", "summary", "ul"</dt>
   <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token.

   </dd>

   <dt>A start tag whose tag name is one of: "h1", "h2", "h3", "h4",
   "h5", "h6"</dt>
   <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    If the <a>current node</a> is an <a>HTML element</a> whose
    tag name is one of "h1", "h2", "h3", "h4", "h5", or "h6", then this is a <a>parse
    error</a>; pop the <a>current node</a> off the <a>stack of open elements</a>.

    <a>Insert an HTML element</a> for the token.

   </dd>

   <dt>A start tag whose tag name is one of: "pre", "listing"</dt>
   <dd>

    If the <a>stack of open elements</a> <a>has
    a <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token.

    If the <a>next token</a> is a U+000A LINE FEED (LF) character token, then ignore that
    token and move on to the next one. (Newlines at the start of <code>pre</code> blocks are ignored
    as an authoring convenience.)

    Set the <a>frameset-ok flag</a> to "not ok".

   </dd>

   <dt>A start tag whose tag name is "form"</dt>
   <dd>

    If the <a><code>form</code> element pointer</a> is not null, and there is
    no <code>template</code> element on the <a>stack of open elements</a>, then this is a
    <a>parse error</a>; ignore the token.

    Otherwise:

    If the <a>stack of open elements</a> <a>has
    a <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token, and, if there is no <code>template</code>
    element on the <a>stack of open elements</a>, set the <a><code>form</code> element pointer</a> to point to the element created.

   </dd>

   <dt>A start tag whose tag name is "li"</dt>
   <dd>

    Run these steps:

    <ol>

     <li>Set the <a>frameset-ok flag</a> to "not ok".</li>

     <li>Initialize <var>node</var> to be the <a>current
     node</a> (the bottommost node of the stack).</li>

     <li>

      <i>Loop</i>: If <var>node</var> is an <code>li</code> element, then run these
      substeps:

      <ol>

       <li><a>Generate implied end tags</a>, except for <code>li</code> elements.</li>

       <li>If the <a>current node</a> is not an <code>li</code> element, then this is a
       <a>parse error</a>.</li>

       <li>Pop elements from the <a>stack of open elements</a> until an <code>li</code>
       element has been popped from the stack.</li>

       <li>Jump to the step labeled <i>done</i> below.</li>

      </ol>

     </li>

     <li>If <var>node</var> is in the <a>special</a> category, but is not an
     <code>address</code>, <code>div</code>, or <code>p</code> element, then jump to the step
     labeled <i>done</i> below.</li>

     <li>Otherwise, set <var>node</var> to the previous entry in the <a>stack of open
     elements</a> and return to the step labeled <i>loop</i>.</li>

     <li><i>Done</i>: If the <a>stack of open elements</a> <a>has a <code>p</code> element in button scope</a>, then <a>close a
     <code>p</code> element</a>.</li>

     <li>Finally, <a>insert an HTML element</a> for the token.</li>

    </ol>

   </dd>

   <dt>A start tag whose tag name is one of: "dd", "dt"</dt>
   <dd>

    Run these steps:

    <ol>

     <li>Set the <a>frameset-ok flag</a> to "not ok".</li>

     <li>Initialize <var>node</var> to be the <a>current
     node</a> (the bottommost node of the stack).</li>

     <li>

      <i>Loop</i>: If <var>node</var> is a <code>dd</code> element, then run these
      substeps:

      <ol>

       <li><a>Generate implied end tags</a>, except for <code>dd</code> elements.</li>

       <li>If the <a>current node</a> is not a <code>dd</code> element, then this is a
       <a>parse error</a>.</li>

       <li>Pop elements from the <a>stack of open elements</a> until a <code>dd</code>
       element has been popped from the stack.</li>

       <li>Jump to the step labeled <i>done</i> below.</li>

      </ol>

     </li>

     <li>

      If <var>node</var> is a <code>dt</code> element, then run these substeps:

      <ol>

       <li><a>Generate implied end tags</a>, except for <code>dt</code> elements.</li>

       <li>If the <a>current node</a> is not a <code>dt</code> element, then this is a
       <a>parse error</a>.</li>

       <li>Pop elements from the <a>stack of open elements</a> until a <code>dt</code>
       element has been popped from the stack.</li>

       <li>Jump to the step labeled <i>done</i> below.</li>

      </ol>

     </li>

     <li>If <var>node</var> is in the <a>special</a> category, but is not an
     <code>address</code>, <code>div</code>, or <code>p</code> element, then jump to the step
     labeled <i>done</i> below.</li>

     <li>Otherwise, set <var>node</var> to the previous entry in the <a>stack of open
     elements</a> and return to the step labeled <i>loop</i>.</li>

     <li><i>Done</i>: If the <a>stack of open elements</a> <a>has a <code>p</code> element in button scope</a>, then <a>close a
     <code>p</code> element</a>.</li>

     <li>Finally, <a>insert an HTML element</a> for the token.</li>

    </ol>

   </dd>

   <dt>A start tag whose tag name is "plaintext"</dt>
   <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token.

    Switch the tokenizer to the <a>PLAINTEXT state</a>.

    <p class="note">
Once a start tag with the tag name "plaintext" has been seen, that will be the
    last token ever seen other than character tokens (and the end-of-file token), because there is
    no way to switch out of the <a>PLAINTEXT state</a>.
</p>

   </dd>

   <dt>A start tag whose tag name is "button"</dt>
   <dd>

    <ol>

     <li>

      If the <a>stack of open elements</a> <a>has a
      <code>button</code> element in scope</a>, then run these substeps:

      <ol>

       <li><a>Parse error</a>.</li>

       <li><a>Generate implied end tags</a>.</li>

       <li>Pop elements from the <a>stack of open elements</a> until a <code>button</code>
       element has been popped from the stack.</li>

      </ol>

     </li>

     <li><a>Reconstruct the active formatting elements</a>, if any.</li>

     <li><a>Insert an HTML element</a> for the token.</li>

     <li>Set the <a>frameset-ok flag</a> to "not ok".</li>

    </ol>

   </dd>

   <dt>An end tag whose tag name is one of: "address", "article", "aside", "blockquote", "button",
   "center", "details", "dialog", "dir", "div", "dl", "fieldset", "figcaption", "figure", "footer",
   "header", "listing", "main", "menu", "nav", "ol", "pre", "section", "summary",
   "ul"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have an element in scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

     <li><a>Generate implied end tags</a>.</li>

     <li>If the <a>current node</a> is not an <a>HTML element</a> with
     the same tag name as that of the token, then this is a
     <a>parse error</a>.</li>

     <li>Pop elements from the <a>stack of open elements</a> until an <a>HTML element</a> with the same tag name as the token has been popped from the
     stack.</li>

    </ol>

   </dd>

   <dt>An end tag whose tag name is "form"</dt>
   <dd>

    If there is no <code>template</code> element on the <a>stack of open elements</a>, then
    run these substeps:

    <ol>

     <li>Let <var>node</var> be the element that the <a><code>form</code>
     element pointer</a> is set to, or null if it is not set to an element.</li>

     <li>Set the <a><code>form</code> element pointer</a> to null.</li>

     <li>If <var>node</var> is null or if the <a>stack of open elements</a> does
     not <a>have <var>node</var> in scope</a>, then
     this is a <a>parse error</a>; abort these steps and ignore the token.</li>

     <li><a>Generate implied end tags</a>.</li>

     <li>If the <a>current node</a> is not <var>node</var>, then this is a
     <a>parse error</a>.</li>

     <li>Remove <var>node</var> from the <a>stack of open elements</a>.</li>

    </ol>

    If there <em>is</em> a <code>template</code> element on the <a>stack of open
    elements</a>, then run these substeps instead:

    <ol>

     <li>If the <a>stack of open elements</a> does not <a>have a <code>form</code> element in scope</a>, then this is a <a>parse
     error</a>; abort these steps and ignore the token.</li>

     <li><a>Generate implied end tags</a>.</li>

     <li>If the <a>current node</a> is not a <code>form</code> element, then this is a
     <a>parse error</a>.</li>

     <li>Pop elements from the <a>stack of open elements</a> until a <code>form</code>
     element has been popped from the stack.</li>

    </ol>

   </dd>

   <dt>An end tag whose tag name is "p"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>p</code> element in button scope</a>, then this is a <a>parse
    error</a>; <a>insert an HTML element</a> for a "p" start tag token with no
    attributes.

    <a>Close a <code>p</code> element</a>.

   </dd>

   <dt>An end tag whose tag name is "li"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have an <code>li</code> element in list item scope</a>, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

     <li><a>Generate implied end tags</a>, except for <code>li</code> elements.</li>

     <li>If the <a>current node</a> is not an <code>li</code> element, then this is a
     <a>parse error</a>.</li>

     <li>Pop elements from the <a>stack of open elements</a> until an <code>li</code>
     element has been popped from the stack.</li>

    </ol>

   </dd>

   <dt>An end tag whose tag name is one of: "dd", "dt"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have an element in scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

     <li><a>Generate implied end tags</a>, except for <a>HTML elements</a> with the
     same tag name as the token.</li>

     <li>If the <a>current node</a> is not an <a>HTML
     element</a> with the same tag name as that of the token, then this is a <a>parse
     error</a>.</li>

     <li>Pop elements from the <a>stack of open elements</a> until an <a>HTML element</a> with the same tag name as the token has been popped from the
     stack.</li>

    </ol>

   </dd>

   <dt>An end tag whose tag name is one of: "h1", "h2", "h3", "h4", "h5", "h6"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have an element in scope</a> that is an <a>HTML
    element</a> and whose tag name is one of "h1", "h2", "h3", "h4", "h5", or "h6", then this is
    a <a>parse error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

     <li><a>Generate implied end tags</a>.</li>

     <li>If the <a>current node</a> is not an <a>HTML
     element</a> with the same tag name as that of the token, then this is a <a>parse
     error</a>.</li>

     <li>Pop elements from the <a>stack of open elements</a> until an <a>HTML element</a> whose tag name is one of "h1", "h2", "h3", "h4", "h5", or "h6"
     has been popped from the stack.</li>

    </ol>

   </dd>

   <dt>An end tag whose tag name is "sarcasm"</dt>
   <dd>
    Take a deep breath, then act as described in the "any other end
    tag" entry below.
   </dd>

   <dt>A start tag whose tag name is "a"</dt>
   <dd>

    If the <a>list of active formatting elements</a> contains an <code>a</code> element
    between the end of the list and the last <a>marker</a> on
    the list (or the start of the list if there is no <a>marker</a> on the list), then this is a <a>parse
    error</a>; run the <a>adoption agency algorithm</a> for the tag name "a", then remove
    that element from the <a>list of active formatting elements</a> and the <a>stack of
    open elements</a> if the <a>adoption agency algorithm</a> didn't already remove it (it
    might not have if the element is not <a>in table
    scope</a>).

    <p class="example">
In the non-conforming stream
    <code>&lt;a&nbsp;href="a">a&lt;table>&lt;a&nbsp;href="b">b&lt;/table>x</code>, the first
    <code>a</code> element would be closed upon seeing the second one, and the "x" character would
    be inside a link to "b", not to "a". This is despite the fact that the outer <code>a</code>
    element is not in table scope (meaning that a regular <code>&lt;/a></code> end tag at the start
    of the table wouldn't close the outer <code>a</code> element). The result is that the two
    <code>a</code> elements are indirectly nested inside each other &mdash; non-conforming markup
    will often result in non-conforming DOMs when parsed.
</p>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. <a>Push onto the list of active
    formatting elements</a> that element.

   </dd>

   <dt>A start tag whose tag name is one of: "b", "big", "code", "em",
   "font", "i", "s", "small", "strike", "strong", "tt", "u"</dt>
   <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. <a>Push onto the list of active
    formatting elements</a> that element.

   </dd>

   <dt>A start tag whose tag name is "nobr"</dt>
   <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    If the <a>stack of open elements</a> <a>has a
    <code>nobr</code> element in scope</a>, then this is a <a>parse error</a>; run the
    <a>adoption agency algorithm</a> for the tag name "nobr", then once again
    <a>reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. <a>Push onto the list of active
    formatting elements</a> that element.

   </dd>

   <dt>An end tag whose tag name is one of: "a",
   "b", "big", "code", "em", "font", "i", "nobr", "s", "small",
   "strike", "strong", "tt", "u"</dt>
   <dd>

    Run the <a>adoption agency algorithm</a> for the token's tag name.

   </dd>

   <dt>A start tag whose tag name is one of: "applet", "marquee", "object"</dt>
   <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token.

    Insert a <a>marker</a> at the end of the <a>list of
    active formatting elements</a>.

    Set the <a>frameset-ok flag</a> to "not ok".

   </dd>

   <dt>An end tag token whose tag name is one of: "applet", "marquee", "object"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have an element in scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

     <li><a>Generate implied end tags</a>.</li>

     <li>If the <a>current node</a> is not an <a>HTML
     element</a> with the same tag name as that of the token, then this is a <a>parse
     error</a>.</li>

     <li>Pop elements from the <a>stack of open elements</a> until an <a>HTML element</a> with the same tag name as the token has been popped from the
     stack.</li>

     <li><a>Clear the list of active formatting elements up to the last marker</a>.</li>

    </ol>

   </dd>

   <dt>A start tag whose tag name is "table"</dt>
   <dd>

    If the <code>Document</code> is <em>not</em> set to <a>quirks mode</a>, and the
    <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token.

    Set the <a>frameset-ok flag</a> to "not ok".

    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

   </dd>

   <dt>An end tag whose tag name is "br"</dt>
   <dd>

    <a>Parse error</a>. Drop the attributes from the token, and act as described in the
    next entry; i.e. act as if this was a "br" start tag token with no attributes, rather than the
    end tag token that it actually is.

   </dd>

   <dt>A start tag whose tag name is one of: "area", "br", "embed",
   "img", "keygen", "wbr"</dt>
   <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    Set the <a>frameset-ok flag</a> to "not ok".

   </dd>

   <dt>A start tag whose tag name is "input"</dt>
   <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    If the token does not have an attribute with the name "type", or if it does, but that
    attribute's value is not an <a>ASCII case-insensitive</a> match for the string "<code>hidden</code>", then: set the <a>frameset-ok flag</a> to "not ok".

   </dd>

   <dt>A start tag whose tag name is one of: "menuitem", "param", "source", "track"</dt>
   <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

   </dd>

   <dt>A start tag whose tag name is "hr"</dt>
   <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    Set the <a>frameset-ok flag</a> to "not ok".

   </dd>

   <dt>A start tag whose tag name is "image"</dt>
   <dd>

    <a>Parse error</a>. Change the token's tag name to "img" and reprocess it. (Don't
    ask.)
   </dd>

   <dt>A start tag whose tag name is "isindex"</dt>
   <dd>

    <a>Parse error</a>.

    If there is no <code>template</code> element on the <a>stack of open elements</a> and
    the <a><code>form</code> element pointer</a> is not null, then ignore the
    token.

    Otherwise:

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    Set the <a>frameset-ok flag</a> to "not ok".

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for a "form" start tag token with no attributes, and, if
    there is no <code>template</code> element on the <a>stack of open elements</a>, set the
    <a><code>form</code> element pointer</a> to point to the element
    created.

    If the token has an attribute called "action", set the <code>action</code> attribute on the resulting <code>form</code> element to the
    value of the "action" attribute of the token.

    <a>Insert an HTML element</a> for an "hr" start tag token with no attributes.
    Immediately pop the <a>current node</a> off the <a>stack of open elements</a>.

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for a "label" start tag token with no attributes.

    <a>Insert characters</a> (see below for <a>what they should say</a>).

    <a>Insert an HTML element</a> for an "input" start tag token with all the attributes
    from the "isindex" token except "name", "action", and "prompt", and with an attribute named
    "name" with the value "isindex". (This creates an <code>input</code> element with the <code>name</code> attribute set to the magic value "<code>isindex</code>".) Immediately pop the <a>current node</a> off
    the <a>stack of open elements</a>.

    <a>Insert more characters</a> (see below for <a>what they should say</a>).

    Pop the <a>current node</a> (which will be the <code>label</code> element created
    earlier) off the <a>stack of open elements</a>.

    <a>Insert an HTML element</a> for an "hr" start tag token with no attributes.
    Immediately pop the <a>current node</a> off the <a>stack of open elements</a>.

    Pop the <a>current node</a> (which will be the <code>form</code> element created
    earlier) off the <a>stack of open elements</a>, and, if there is no <code>template</code>
    element on the <a>stack of open elements</a>, set the <a><code>form</code> element pointer</a> back to null.

    <dfn><strong>Prompt</strong></dfn>: If the token has an attribute
    with the name "prompt", then the first stream of characters must be the same string as given in
    that attribute, and the second stream of characters must be empty. Otherwise, the two streams of
    character tokens together should, together with the <code>input</code> element, express the
    equivalent of "This is a searchable index. Enter search keywords: (input field)" in the user's
    preferred language.

   </dd>

   <dt>A start tag whose tag name is "textarea"</dt>
   <dd>

    Run these steps:

    <ol>

     <li><a>Insert an HTML element</a> for the token.</li>

     <li>If the <a>next token</a> is a U+000A LINE FEED (LF) character token, then ignore
     that token and move on to the next one. (Newlines at the start of <code>textarea</code>
     elements are ignored as an authoring convenience.)</li>

     <li>Switch the tokenizer to the <a>RCDATA state</a>.</li>

     <li>Let the <a>original insertion mode</a> be the current <a>insertion
     mode</a>.

     <li>Set the <a>frameset-ok flag</a> to "not ok".</li>

     <li>Switch the <a>insertion mode</a> to "<a>text</a>".</li>

    </ol>

   </dd>

   <dt>A start tag whose tag name is "xmp"</dt>
   <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Reconstruct the active formatting elements</a>, if any.

    Set the <a>frameset-ok flag</a> to "not ok".

    Follow the <a>generic raw text element parsing algorithm</a>.

   </dd>

   <dt>A start tag whose tag name is "iframe"</dt>
   <dd>

    Set the <a>frameset-ok flag</a> to "not ok".

    Follow the <a>generic raw text element parsing algorithm</a>.

   </dd>

   <dt>A start tag whose tag name is "noembed"</dt>
   <dt>A start tag whose tag name is "noscript", if the <a>scripting flag</a> is enabled</dt>
   <dd>

    Follow the <a>generic raw text element parsing algorithm</a>.

   </dd>

   <dt>A start tag whose tag name is "select"</dt>
   <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token.

    Set the <a>frameset-ok flag</a> to "not ok".

    If the <a>insertion mode</a> is one of "<a>in
    table</a>", "<a>in caption</a>", "<a>in table body</a>", "<a>in row</a>", or "<a>in cell</a>", then switch the
    <a>insertion mode</a> to "<a>in select in
    table</a>". Otherwise, switch the <a>insertion mode</a> to "<a>in select</a>".

   </dd>

   <dt>A start tag whose tag name is one of: "optgroup", "option"</dt>
   <dd>

    If the <a>current node</a> is an <code>option</code> element, then pop the
    <a>current node</a> off the <a>stack of open elements</a>.

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token.

   </dd>

   <dt>A start tag whose tag name is one of: "rb", "rtc"</dt>
   <dd>
    If the <a>stack of open elements</a> <a>has a
    <code>ruby</code> element in scope</a>, then <a>generate implied end tags</a>. If the
    <a>current node</a> is not now a <code>ruby</code> element, this is a
    <a>parse error</a>.

    <a>Insert an HTML element</a> for the token.

   </dd>

   <dt>A start tag whose tag name is one of: "rp", "rt"</dt>
   <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>ruby</code> element in scope</a>, then <a>generate implied end tags</a>, except
    for <code>rtc</code> elements. If the <a>current node</a> is not then a <code>ruby</code>
    element or an <code>rtc</code> element, this is a <a>parse error</a>.

    <a>Insert an HTML element</a> for the token.
   </dd>

   <dt>A start tag whose tag name is "math"</dt>
   <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Adjust MathML attributes</a> for the token. (This fixes the case of MathML
    attributes that are not all lowercase.)

    <a>Adjust foreign attributes</a> for the token. (This fixes the use of namespaced
    attributes, in particular XLink.)

    <a>Insert a foreign element</a> for the token, in the <a>MathML
    namespace</a>.

    If the token has its <i>self-closing flag</i> set, pop the <a>current node</a> off the
    <a>stack of open elements</a> and <a>acknowledge
    the token's <i>self-closing flag</i></a>.

   </dd>

   <dt>A start tag whose tag name is "svg"</dt>
   <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Adjust SVG attributes</a> for the token. (This fixes the case of SVG attributes that
    are not all lowercase.)

    <a>Adjust foreign attributes</a> for the token. (This fixes the use of namespaced
    attributes, in particular XLink in SVG.)

    <a>Insert a foreign element</a> for the token, in the <a>SVG namespace</a>.

    If the token has its <i>self-closing flag</i> set, pop the <a>current node</a> off the
    <a>stack of open elements</a> and <a>acknowledge
    the token's <i>self-closing flag</i></a>.

   </dd>

   <dt>A start  tag whose tag name is one of: "caption", "col", "colgroup", "frame",
   "head", "tbody", "td", "tfoot", "th", "thead", "tr"</dt>

   <dd>

    <a>Parse error</a>. Ignore the token.

   </dd>

   <dt>Any other start tag</dt>
   <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token.

    <p class="note">
This element will be an <a>ordinary</a>
    element.
</p>

   </dd>

   <dt>Any other end tag</dt>
   <dd>

    Run these steps:

    <ol>

     <li>Initialize <var>node</var> to be the <a>current node</a> (the bottommost
     node of the stack).</li>

     <li><i>Loop</i>: If <var>node</var> is an <a>HTML
     element</a> with the same tag name as the token, then:

      <ol>

       <li><a>Generate implied end tags</a>, except for <a>HTML elements</a> with the
       same tag name as the token.</li>

       <li>If <var>node</var> is not the <a>current node</a>, then this is a
       <a>parse error</a>.</li>

       <li>Pop all the nodes from the <a>current node</a> up to <var>node</var>,
       including <var>node</var>, then stop these steps.</li>

      </ol>

     </li>

     <li>Otherwise, if <var>node</var> is in the <a>special</a> category, then
     this is a <a>parse error</a>; ignore the token, and abort these steps.</li>

     <li>Set <var>node</var> to the previous entry in the <a>stack of open
     elements</a>.</li>

     <li>Return to the step labeled <i>loop</i>.</li>

    </ol>

   </dd>

  </dl>

  When the steps above say the user agent is to <dfn>close a <code>p</code> element</dfn>, it
  means that the user agent must run the following steps:

  <ol>

   <li><a>Generate implied end tags</a>, except for <code>p</code> elements.</li>

   <li>If the <a>current node</a> is not a <code>p</code> element, then this is a
   <a>parse error</a>.</li>

   <li>Pop elements from the <a>stack of open elements</a> until a <code>p</code> element
   has been popped from the stack.</li>

  </ol>

  The <dfn>adoption agency algorithm</dfn>, which takes as its only argument
  a tag name <var>subject</var> for which the algorithm is being run, consists of the
  following steps:

  <ol>

   <li>If the <a>current node</a> is an <a>HTML element</a>
   whose tag name is <var>subject</var>, and the <a>current node</a> is not in the
   <a>list of active formatting elements</a>, then pop the <a>current node</a> off the
   <a>stack of open elements</a>, and abort these steps.</li>

   <li>Let <var>outer loop counter</var> be zero.</li>

   <li><i>Outer loop</i>: If <var>outer loop counter</var> is greater than or equal to
   eight, then abort these steps.</li>

   <li>Increment <var>outer loop counter</var> by one.</li>

   <li>

    Let <var>formatting element</var> be the last element in the <a>list of active
    formatting elements</a> that:

    <ul>

     <li>is between the end of the list and the last <a>marker</a> in the list, if any, or the start of the list
     otherwise, and</li>

     <li>has the tag name <var>subject</var>.</li>

    </ul>

    If there is no such element, then abort these steps and instead act as described in the "any
    other end tag" entry above.

   </li>

   <li>If <var>formatting element</var> is not in the <a>stack of open
   elements</a>, then this is a <a>parse error</a>; remove the element from the list, and
   abort these steps.</li>

   <li>If <var>formatting element</var> is in the <a>stack of open elements</a>,
   but the element is not <a>in scope</a>, then this is a
   <a>parse error</a>; abort these steps.</li>

   <li>If <var>formatting element</var> is not the <a>current node</a>, this is a
   <a>parse error</a>. (But do not abort these steps.)</li>

   <li>Let <var>furthest block</var> be the topmost node in the <a>stack of open
   elements</a> that is lower in the stack than <var>formatting element</var>, and is an
   element in the <a>special</a> category. There might not be one.</li>

   <li>If there is no <var>furthest block</var>, then the UA must first pop all the
   nodes from the bottom of the <a>stack of open elements</a>, from the <a>current
   node</a> up to and including <var>formatting element</var>, then remove <var>formatting element</var> from the <a>list of active formatting elements</a>, and
   finally abort these steps.</li>

   <li>Let <var>common ancestor</var> be the element immediately above <var>formatting element</var> in the <a>stack of open elements</a>.</li>

   <li>Let a bookmark note the position of <var>formatting element</var> in the
   <a>list of active formatting elements</a> relative to the elements on either side of it in
   the list.</li>

   <li>

    Let <var>node</var> and <var>last node</var> be <var>furthest
    block</var>. Follow these steps:

    <ol>

     <li>Let <var>inner loop counter</var> be zero.</li>

     <li><i>Inner loop</i>: Increment <var>inner loop counter</var> by one.</li>

     <li>Let <var>node</var> be the element immediately above <var>node</var>
     in the <a>stack of open elements</a>, or if <var>node</var> is no longer in the
     <a>stack of open elements</a> (e.g. because it got removed by this algorithm), the element that was immediately above <var>node</var> in the <a>stack of open elements</a> before <var>node</var>
     was removed.</li>

     <li>If <var>node</var> is <var>formatting element</var>, then go to the
     next step in the overall algorithm.</li>

     <li>If <var>inner loop counter</var> is greater than three and <var>node</var> is in the <a>list of active formatting elements</a>, then remove <var>node</var> from the <a>list of active formatting elements</a>.</li>

     <li>If <var>node</var> is not in the <a>list of active
     formatting elements</a>, then remove <var>node</var> from the <a>stack of open
     elements</a> and then go back to the step labeled <i>inner loop</i>.</li>

     <li><a>Create an element for the token</a> for which the element <var>node</var> was created, in the <a>HTML namespace</a>, with <var>common
     ancestor</var> as the intended parent; replace the entry for <var>node</var> in the
     <a>list of active formatting elements</a> with an entry for the new element, replace the
     entry for <var>node</var> in the <a>stack of open elements</a> with an entry for
     the new element, and let <var>node</var> be the new element.</li>

     <li>If <var>last node</var> is <var>furthest block</var>, then move the
     aforementioned bookmark to be immediately after the new <var>node</var> in the
     <a>list of active formatting elements</a>.</li>

     <li>Insert <var>last node</var> into <var>node</var>, first removing it
     from its previous parent node if any.</li>

     <li>Let <var>last node</var> be <var>node</var>.</li>

     <li>Return to the step labeled <i>inner loop</i>.</li>

    </ol>

   </li>

   <li>Insert whatever <var>last node</var> ended up being in the previous step at the
   <a>appropriate place for inserting a node</a>, but using <var>common
   ancestor</var> as the <i>override target</i>.</li>

   <li><a>Create an element for the token</a> for which <var>formatting
   element</var> was created, in the <a>HTML namespace</a>, with <var>furthest
   block</var> as the intended parent.</li>

   <li>Take all of the child nodes of <var>furthest block</var> and append them to the
   element created in the last step.</li>

   <li>Append that new element to <var>furthest block</var>.</li>

   <li>Remove <var>formatting element</var> from the <a>list of active formatting
   elements</a>, and insert the new element into the <a>list of active formatting
   elements</a> at the position of the aforementioned bookmark.</li>

   <li>Remove <var>formatting element</var> from the <a>stack of open
   elements</a>, and insert the new element into the <a>stack of open elements</a>
   immediately below the position of <var>furthest block</var> in that stack.</li>

   <li>Jump back to the step labeled <i>outer loop</i>.</li>

  </ol>

  <p class="note">
This algorithm's name, the "adoption agency algorithm", comes from the way it
  causes elements to change parents, and is in contrast with other possible algorithms for dealing
  with misnested content, which included the "incest algorithm", the "secret affair algorithm", and
  the "Heizenberg algorithm".
</p>

  <h6 id="the-"text"-insertion-mode"><dfn>The "<dfn>text</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>text</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

   <dt>A character token</dt>
   <dd>

    <a>Insert the token's character</a>.

    <p class="note">
This can never be a U+0000 NULL character; the tokenizer converts those to
    U+FFFD REPLACEMENT CHARACTER characters.
</p>

   </dd>

   <dt>An end-of-file token</dt>
   <dd>

    <a>Parse error</a>.

    If the <a>current node</a> is a <code>script</code> element, mark the
    <code>script</code> element as <a>"already started"</a>.

    Pop the <a>current node</a> off the <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to the <a>original insertion mode</a> and
    reprocess the token.

   </dd>

   <dt>An end tag whose tag name is "script"</dt>
   <dd>

    If the <a>stack of script settings objects</a> is empty, <a>perform a microtask checkpoint</a>.

    Let <var>script</var> be the <a>current node</a> (which will be a
    <code>script</code> element).

    Pop the <a>current node</a> off the <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to the <a>original insertion mode</a>.

    Let the <var>old insertion point</var> have the same value as the current
    <a>insertion point</a>. Let the <a>insertion point</a> be just before the <a>next
    input character</a>.

    Increment the parser's <a>script nesting level</a> by one.

    <a>Prepare</a> the <var>script</var>. This might
    cause some script to execute, which might cause <a>new characters
    to be inserted into the tokenizer</a>, and might cause the tokenizer to output more tokens,
    resulting in a <a>reentrant invocation of the parser</a>.

    Decrement the parser's <a>script nesting level</a> by one. If the parser's <a>script
    nesting level</a> is zero, then set the <a>parser pause flag</a> to false.

    Let the <a>insertion point</a> have the value of the <var>old insertion
    point</var>. (In other words, restore the <a>insertion point</a> to its previous value.
    This value might be the "undefined" value.)

    At this stage, if there is a <a>pending parsing-blocking
    script</a>, then:

    <dl class="switch">

     <dt>If the <a>script nesting level</a> is not zero:</dt>

     <dd>

      Set the <a>parser pause flag</a> to true, and abort the processing of any nested
      invocations of the tokenizer, yielding control back to the caller. (Tokenization will resume
      when the caller returns to the "outer" tree construction stage.)

      <p class="note">
The tree construction stage of this particular parser is <a>being called reentrantly</a>, say from a call to <code>document.write()</code>.
</p>

     </dd>

     <dt>Otherwise:</dt>

     <dd>

      Run these steps:

      <ol>

       <li>Let <var>the script</var> be the <a>pending parsing-blocking
       script</a>. There is no longer a <a>pending parsing-blocking script</a>.</li>

       <li>Block the <a>tokenizer</a> for this instance of the
       <a>HTML parser</a>, such that the <a>event loop</a> will not run <a>tasks</a> that invoke the <a>tokenizer</a>.</li>

       <li>If the parser's <code>Document</code> <a>has a style sheet that is blocking
       scripts</a> or <var>the script</var>'s <a>"ready to be parser-executed"</a>
       flag is not set: <a>spin the event loop</a> until the parser's <code>Document</code>
       <a>has no style sheet that is blocking scripts</a> and <var>the script</var>'s
       <a>"ready to be parser-executed"</a> flag is set.</li>

       <li>

        If this <a>parser has been aborted</a> in the meantime,
        abort these steps.

        <p class="note">
This could happen if, e.g., while the <a>spin the event loop</a>
        algorithm is running, the <a>browsing context</a> gets closed, or the <code>document.open()</code> method gets invoked on the
        <code>Document</code>.
</p>

       </li>

       <li>Unblock the <a>tokenizer</a> for this instance of the
       <a>HTML parser</a>, such that <a>tasks</a> that invoke the
       <a>tokenizer</a> can again be run.</li>

       <li>Let the <a>insertion point</a> be just before the <a>next input
       character</a>.</li>

       <li>Increment the parser's <a>script nesting level</a> by one (it should be zero
       before this step, so this sets it to one).</li>

       <li><a>Execute</a> <var>the
       script</var>.</li>

       <li>Decrement the parser's <a>script nesting level</a> by one. If the parser's
       <a>script nesting level</a> is zero (which it always should be at this point), then set
       the <a>parser pause flag</a> to false.

       <li>Let the <a>insertion point</a> be undefined again.</li>

       <li>If there is once again a <a>pending parsing-blocking script</a>, then repeat
       these steps from step 1.</li>

      </ol>

     </dd>

    </dl>

   </dd>

   <dt>Any other end tag</dt>
   <dd>

    Pop the <a>current node</a> off the <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to the <a>original insertion mode</a>.

   </dd>

  </dl>

  <h6 id="the-"in-table"-insertion-mode"><dfn>The "<dfn>in table</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  table</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

   <dt>A character token, if the <a>current node</a> is <code>table</code>, <code>tbody</code>, <code>tfoot</code>, <code>thead</code>, or <code>tr</code> element</dt>
   <dd>

     Let the <dfn><var>pending table character
     tokens</var></dfn> be an empty list of tokens.

     Let the <a>original insertion mode</a> be the current <a>insertion mode</a>.

     Switch the <a>insertion mode</a> to "<a>in
     table text</a>" and reprocess the token.

   </dd>

   <dt>A comment token</dt>
   <dd>
    <a>Insert a comment</a>.
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is "caption"</dt>
   <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    Insert a <a>marker</a> at the end of the <a>list of
    active formatting elements</a>.

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in caption</a>".

   </dd>

   <dt>A start tag whose tag name is "colgroup"</dt>
   <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in column group</a>".

   </dd>

   <dt>A start tag whose tag name is "col"</dt>
   <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    <a>Insert an HTML element</a> for a "colgroup" start tag token with no attributes, then
    switch the <a>insertion mode</a> to "<a>in
    column group</a>".

    Reprocess the current token.

   </dd>

   <dt>A start tag whose tag name is one of: "tbody", "tfoot", "thead"</dt>
   <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in table body</a>".

   </dd>

   <dt>A start tag whose tag name is one of: "td", "th", "tr"</dt>
   <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    <a>Insert an HTML element</a> for a "tbody" start tag token with no attributes, then
    switch the <a>insertion mode</a> to "<a>in table
    body</a>".

    Reprocess the current token.

   </dd>

   <dt>A start tag whose tag name is "table"</dt>
   <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> does not <a>have a <code>table</code> element in table scope</a>, ignore the token.

    Otherwise:

    Pop elements from this stack until a <code>table</code> element has been popped from the
    stack.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

   </dd>

   <dt>An end tag whose tag name is "table"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>table</code> element in table scope</a>, this is a <a>parse
    error</a>; ignore the token.

    Otherwise:

    Pop elements from this stack until a <code>table</code> element has been popped from the
    stack.

    <a>Reset the insertion mode appropriately</a>.

   </dd>

   <dt>An end tag whose tag name is one of: "body", "caption", "col", "colgroup", "html", "tbody",
   "td", "tfoot", "th", "thead", "tr"</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is one of: "style", "script", "template"</dt>
   <dt>An end tag whose tag name is "template"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion
    mode</a>.

   </dd>

   <dt>A start tag whose tag name is "input"</dt>
   <dd>

    If the token does not have an attribute with the name "type", or if it does, but that
    attribute's value is not an <a>ASCII case-insensitive</a> match for the string "<code>hidden</code>", then: act as described in the "anything else" entry below.

    Otherwise:

    <a>Parse error</a>.

    <a>Insert an HTML element</a> for the token.

    Pop that <code>input</code> element off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

   </dd>

   <dt>A start tag whose tag name is "form"</dt>
   <dd>

    <a>Parse error</a>.

    If there is a <code>template</code> element on the <a>stack of open elements</a>, or if
    the <a><code>form</code> element pointer</a> is not null, ignore the
    token.

    Otherwise:

    <a>Insert an HTML element</a> for the token, and set the <a><code>form</code> element pointer</a> to point to the element created.

    Pop that <code>form</code> element off the <a>stack of open elements</a>.

   </dd>

   <dt>An end-of-file token</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>Anything else</dt>
   <dd>

    <a>Parse error</a>. Enable <a>foster parenting</a>, process
    the token <a>using the rules for</a> the "<a>in
    body</a>" <a>insertion mode</a>, and then disable <a>foster
    parenting</a>.

   </dd>

  </dl>

  When the steps above require the UA to <dfn>clear the stack back to a table context</dfn>, it
  means that the UA must, while the <a>current node</a> is not a <code>table</code>,
  <code>template</code>, or <code>html</code> element, pop elements from the <a>stack of open
  elements</a>.

  <p class="note">
This is the same list of elements as used in the <i>has an element in table scope</i> steps.
</p>

  <p class="note">
The <a>current node</a> being an <code>html</code> element after this
  process is a <a>fragment case</a>.
</p>

  <h6 id="the-"in-table-text"-insertion-mode"><dfn>The "<dfn>in table text</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in table text</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

   <dt>A character token that is U+0000 NULL</dt>
   <dd>

    <a>Parse error</a>. Ignore the token.

   </dd>

   <dt>Any other character token</dt>
   <dd>

    Append the character token to the <var>pending
    table character tokens</var> list.

   </dd>

   <dt>Anything else</dt>
   <dd>

    If any of the tokens in the <var>pending table
    character tokens</var> list are character tokens that are not <a>space characters</a>, then this is a <a>parse error</a>: reprocess the
    character tokens in the <var>pending table character
    tokens</var> list using the rules given in the "anything else" entry in the "<a>in table</a>" insertion mode.

    Otherwise, <a>insert the characters</a> given by the <var>pending table character tokens</var> list.

    Switch the <a>insertion mode</a> to the <a>original insertion mode</a> and
    reprocess the token.

   </dd>

  </dl>

  <h6 id="the-"in-caption"-insertion-mode"><dfn>The "<dfn>in caption</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  caption</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

   <dt>An end tag whose tag name is "caption"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>caption</code> element in table scope</a>, this is a <a>parse
    error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise:

    <a>Generate implied end tags</a>.

    Now, if the <a>current node</a> is not a <code>caption</code> element, then this is a
    <a>parse error</a>.

    Pop elements from this stack until a <code>caption</code> element has been popped from the
    stack.

    <a>Clear the list of active formatting elements up to the last marker</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

   </dd>

   <dt>A start tag whose tag name is one of: "caption", "col", "colgroup", "tbody", "td", "tfoot",
   "th", "thead", "tr"</dt> <dt>An end tag whose tag name is "table"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>caption</code> element in table scope</a>, this is a <a>parse
    error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise:

    <a>Generate implied end tags</a>.

    Now, if the <a>current node</a> is not a <code>caption</code> element, then this is a
    <a>parse error</a>.

    Pop elements from this stack until a <code>caption</code> element has been popped from the
    stack.

    <a>Clear the list of active formatting elements up to the last marker</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

    Reprocess the token.

   </dd>

   <dt>An end tag whose tag name is one of: "body", "col", "colgroup", "html", "tbody", "td",
   "tfoot", "th", "thead", "tr"</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>Anything else</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

  </dl>

  <h6 id="the-"in-column-group"-insertion-mode"><dfn>The "<dfn>in column group</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in column group</a>" <a>insertion mode</a>, the user agent must handle the token
  as follows:

  <dl class="switch">

   <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
   FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
   <dd>
    <a>Insert the character</a>.
   </dd>

   <dt>A comment token</dt>
   <dd>
    <a>Insert a comment</a>.
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>A start tag whose tag name is "col"</dt>
   <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.
   </dd>

   <dt>An end tag whose tag name is "colgroup"</dt>
   <dd>

    If the <a>current node</a> is not a <code>colgroup</code> element, then this is a
    <a>parse error</a>; ignore the token.

    Otherwise, pop the <a>current node</a> from the <a>stack of open elements</a>.
    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

   </dd>

   <dt>An end tag whose tag name is "col"</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is "template"</dt>
   <dt>An end tag whose tag name is "template"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

   </dd>

   <dt>An end-of-file token</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>Anything else</dt>
   <dd>

    If the <a>current node</a> is not a <code>colgroup</code> element, then this is a
    <a>parse error</a>; ignore the token.

    Otherwise, pop the <a>current node</a> from the <a>stack of open
    elements</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

    Reprocess the token.

   </dd>

  </dl>

  <h6 id="the-"in-table-body"-insertion-mode"><dfn>The "<dfn>in table body</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in table body</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

   <dt>A start tag whose tag name is "tr"</dt>
   <dd>

    <a>Clear the stack back to a table body context</a>. (See below.)

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in row</a>".

   </dd>

   <dt>A start tag whose tag name is one of: "th", "td"</dt>
   <dd>

    <a>Parse error</a>.

    <a>Clear the stack back to a table body context</a>. (See below.)

    <a>Insert an HTML element</a> for a "tr" start tag token with no attributes, then
    switch the <a>insertion mode</a> to "<a>in
    row</a>".

    Reprocess the current token.

   </dd>

   <dt>An end tag whose tag name is one of: "tbody", "tfoot",
   "thead"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as the token, this is a <a>parse error</a>;
    ignore the token.

    Otherwise:

    <a>Clear the stack back to a table body context</a>. (See below.)

    Pop the <a>current node</a> from the <a>stack of open elements</a>. Switch the
    <a>insertion mode</a> to "<a>in table</a>".

   </dd>

   <dt>A start tag whose tag name is one of: "caption", "col",
   "colgroup", "tbody", "tfoot", "thead"</dt>
   <dt>An end tag whose tag name is "table"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>tbody</code>, <code>thead</code>, or <code>tfoot</code> element in table
    scope</a>, this is a <a>parse error</a>; ignore the token.

    Otherwise:

    <a>Clear the stack back to a table body context</a>. (See below.)

    Pop the <a>current node</a> from the <a>stack of open elements</a>. Switch the
    <a>insertion mode</a> to "<a>in table</a>".

    Reprocess the token.

   </dd>

   <dt>An end tag whose tag name is one of: "body", "caption", "col", "colgroup", "html", "td",
   "th", "tr"</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>Anything else</dt>
   <dd>
    Process the token <a>using the rules for</a> the "<a>in table</a>" <a>insertion mode</a>.
   </dd>

  </dl>

  When the steps above require the UA to <dfn>clear the stack back to a table body context</dfn>,
  it means that the UA must, while the <a>current node</a> is not a <code>tbody</code>,
  <code>tfoot</code>, <code>thead</code>, <code>template</code>, or <code>html</code> element, pop
  elements from the <a>stack of open elements</a>.

  <p class="note">
The <a>current node</a> being an <code>html</code> element after this
  process is a <a>fragment case</a>.
</p>

  <h6 id="the-"in-row"-insertion-mode"><dfn>The "<dfn>in row</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  row</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

   <dt>A start tag whose tag name is one of: "th", "td"</dt>
   <dd>

    <a>Clear the stack back to a table row context</a>. (See below.)

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in cell</a>".

    Insert a <a>marker</a> at the end of the <a>list of
    active formatting elements</a>.

   </dd>

   <dt>An end tag whose tag name is "tr"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>tr</code> element in table scope</a>, this is a <a>parse error</a>;
    ignore the token.

    Otherwise:

    <a>Clear the stack back to a table row context</a>. (See below.)

    Pop the <a>current node</a> (which will be a <code>tr</code> element) from the
    <a>stack of open elements</a>. Switch the <a>insertion mode</a> to "<a>in table body</a>".

   </dd>

   <dt>A start tag whose tag name is one of: "caption", "col", "colgroup", "tbody", "tfoot",
   "thead", "tr"</dt>
   <dt>An end tag whose tag name is "table"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>tr</code> element in table scope</a>, this is a <a>parse error</a>;
    ignore the token.

    Otherwise:

    <a>Clear the stack back to a table row context</a>. (See below.)

    Pop the <a>current node</a> (which will be a <code>tr</code> element) from the
    <a>stack of open elements</a>. Switch the <a>insertion mode</a> to "<a>in table body</a>".

    Reprocess the token.

   </dd>

   <dt>An end tag whose tag name is one of: "tbody", "tfoot", "thead"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as the token, this is a <a>parse error</a>;
    ignore the token.

    If the <a>stack of open elements</a> does not <a>have a <code>tr</code> element in table scope</a>, ignore the token.

    Otherwise:

    <a>Clear the stack back to a table row context</a>. (See below.)

    Pop the <a>current node</a> (which will be a <code>tr</code> element) from the
    <a>stack of open elements</a>. Switch the <a>insertion mode</a> to "<a>in table body</a>".

    Reprocess the token.

   </dd>

   <dt>An end tag whose tag name is one of: "body", "caption", "col", "colgroup", "html", "td",
   "th"</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>Anything else</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in table</a>" <a>insertion mode</a>.

   </dd>

  </dl>

  When the steps above require the UA to <dfn>clear the stack back to a table row context</dfn>,
  it means that the UA must, while the <a>current node</a> is not a <code>tr</code>,
  <code>template</code>, or <code>html</code> element, pop elements from the <a>stack of open
  elements</a>.

  <p class="note">
The <a>current node</a> being an <code>html</code> element after this
  process is a <a>fragment case</a>.
</p>

  <h6 id="the-"in-cell"-insertion-mode"><dfn>The "<dfn>in cell</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in cell</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

   <dt>An end tag whose tag name is one of: "td", "th"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise:

    <a>Generate implied end tags</a>.

    Now, if the <a>current node</a> is not an <a>HTML
    element</a> with the same tag name as the token, then this is a <a>parse error</a>.

    Pop elements from the <a>stack of open elements</a> stack until an <a>HTML element</a> with the same tag name as the token has been popped from the
    stack.

    <a>Clear the list of active formatting elements up to the last marker</a>.

    Switch the <a>insertion mode</a> to "<a>in
    row</a>".

   </dd>

   <dt>A start tag whose tag name is one of: "caption", "col",
   "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"</dt>
   <dd>

    If the <a>stack of open elements</a> does <em>not</em> <a>have a <code>td</code> or <code>th</code> element in table scope</a>, then this
    is a <a>parse error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise, <a>close the cell</a> (see below) and reprocess the token.

   </dd>

   <dt>An end tag whose tag name is one of: "body", "caption",
   "col", "colgroup", "html"</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>An end tag whose tag name is one of: "table", "tbody",
   "tfoot", "thead", "tr"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, <a>close the cell</a> (see below) and reprocess the token.

   </dd>

   <dt>Anything else</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

  </dl>

  Where the steps above say to <dfn>close the cell</dfn>, they mean to run the following
  algorithm:

  <ol>

   <li><a>Generate implied end tags</a>.</li>

   <li>If the <a>current node</a> is not now a <code>td</code> element or a <code>th</code>
   element, then this is a <a>parse error</a>.</li>

   <li>Pop elements from the <a>stack of open elements</a> stack until a <code>td</code>
   element or a <code>th</code> element has been popped from the stack.</li>

   <li><a>Clear the list of active formatting elements up to the last marker</a>.</li>

   <li>Switch the <a>insertion mode</a> to "<a>in
   row</a>".</li>

  </ol>

  <p class="note">
The <a>stack of open elements</a> cannot have both a <code>td</code> and a
  <code>th</code> element <a>in table scope</a> at the
  same time, nor can it have neither when the <a>close the cell</a> algorithm is invoked.
</p>

  <h6 id="the-"in-select"-insertion-mode"><dfn>The "<dfn>in select</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  select</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

   <dt>A character token that is U+0000 NULL</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>Any other character token</dt>
   <dd>

    <a>Insert the token's character</a>.

   </dd>

   <dt>A comment token</dt>
   <dd>
    <a>Insert a comment</a>.
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>A start tag whose tag name is "option"</dt>
   <dd>

    If the <a>current node</a> is an <code>option</code> element, pop that node from the
    <a>stack of open elements</a>.

    <a>Insert an HTML element</a> for the token.

   </dd>

   <dt>A start tag whose tag name is "optgroup"</dt>
   <dd>

    If the <a>current node</a> is an <code>option</code> element, pop that node from the
    <a>stack of open elements</a>.

    If the <a>current node</a> is an <code>optgroup</code> element, pop that node from the
    <a>stack of open elements</a>.

    <a>Insert an HTML element</a> for the token.

   </dd>

   <dt>An end tag whose tag name is "optgroup"</dt>
   <dd>

    First, if the <a>current node</a> is an <code>option</code> element, and the node
    immediately before it in the <a>stack of open elements</a> is an <code>optgroup</code>
    element, then pop the <a>current node</a> from the <a>stack of open
    elements</a>.

    If the <a>current node</a> is an <code>optgroup</code> element, then pop that node from
    the <a>stack of open elements</a>. Otherwise, this is a <a>parse error</a>; ignore
    the token.

   </dd>

   <dt>An end tag whose tag name is "option"</dt>
   <dd>

    If the <a>current node</a> is an <code>option</code> element, then pop that node from
    the <a>stack of open elements</a>. Otherwise, this is a <a>parse error</a>; ignore
    the token.

   </dd>

   <dt>An end tag whose tag name is "select"</dt>
   <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>select</code> element in select scope</a>, this is a <a>parse
    error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise:

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

   </dd>

   <dt>A start tag whose tag name is "select"</dt>
   <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> does not <a>have a <code>select</code> element in select scope</a>, ignore the token.
    (<a>fragment case</a>)

    Otherwise:

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    <p class="note">
It just gets treated like an end tag.
</p>

   </dd>

   <dt>A start tag whose tag name is one of: "input", "keygen", "textarea"</dt>
   <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> does not <a>have a <code>select</code> element in select scope</a>, ignore the token.
    (<a>fragment case</a>)

    Otherwise:

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

   </dd>

   <dt>A start tag whose tag name is one of: "script", "template"</dt>
   <dt>An end tag whose tag name is "template"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

   </dd>

   <dt>An end-of-file token</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>Anything else</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

  </dl>

  <h6 id="the-"in-select-in-table"-insertion-mode"><dfn>The "<dfn>in select in table</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in select in table</a>" <a>insertion mode</a>, the user agent must handle the
  token as follows:

  <dl class="switch">

   <dt>A start tag whose tag name is one of: "caption", "table", "tbody", "tfoot", "thead", "tr",
   "td", "th"</dt>
   <dd>

    <a>Parse error</a>.

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

   </dd>

   <dt>An end tag whose tag name is one of: "caption", "table", "tbody", "tfoot", "thead", "tr",
   "td", "th"</dt>
   <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then ignore the token.

    Otherwise:

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

   </dd>

   <dt>Anything else</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in select</a>" <a>insertion mode</a>.

   </dd>

  </dl>

  <h6 id="the-"in-template"-insertion-mode"><dfn>The "<dfn>in template</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  template</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

   <dt>A character token</dt>
   <dt>A comment token</dt>
   <dt>A DOCTYPE token</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>A start tag whose tag name is one of: "base", "basefont", "bgsound", "link", "meta", "noframes", "script", "style", "template", "title"</dt>
   <dt>An end tag whose tag name is "template"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

   </dd>

   <dt>A start tag whose tag name is one of: "caption", "colgroup", "tbody", "tfoot", "thead"</dt>
   <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in table</a>" onto the <a>stack of
    template insertion modes</a> so that it is the new <a>current template insertion
    mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table</a>", and reprocess the token.

   </dd>

   <dt>A start tag whose tag name is "col"</dt>
   <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in column group</a>" onto the
    <a>stack of template insertion modes</a> so that it is the new <a>current template
    insertion mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    column group</a>", and reprocess the token.

   </dd>

   <dt>A start tag whose tag name is "tr"</dt>
   <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in table body</a>" onto the <a>stack
    of template insertion modes</a> so that it is the new <a>current template insertion
    mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table body</a>", and reprocess the token.

   </dd>

   <dt>A start tag whose tag name is one of: "td", "th"</dt>
   <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in row</a>" onto the <a>stack of template
    insertion modes</a> so that it is the new <a>current template insertion mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    row</a>", and reprocess the token.

   </dd>

   <dt>Any other start tag</dt>
   <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in body</a>" onto the <a>stack of template
    insertion modes</a> so that it is the new <a>current template insertion mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    body</a>", and reprocess the token.

   </dd>

   <dt>Any other end tag</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>An end-of-file token</dt>
   <dd>

    If there is no <code>template</code> element on the <a>stack of open elements</a>, then
    <a>stop parsing</a>. (<a>fragment case</a>)

    Otherwise, this is a <a>parse error</a>.

    Pop elements from the <a>stack of open elements</a> until a <code>template</code>
    element has been popped from the stack.

    <a>Clear the list of active formatting elements up to the last marker</a>.

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

   </dd>

  </dl>

  <h6 id="the-"after-body"-insertion-mode"><dfn>The "<dfn>after body</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after body</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

   <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
   FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>A comment token</dt>
   <dd>

    <a>Insert a comment</a> as the last child of the first element in the <a>stack of
    open elements</a> (the <code>html</code> element).

   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>An end tag whose tag name is "html"</dt>
   <dd>

    If the parser was originally created as part of the <a>HTML fragment parsing
    algorithm</a>, this is a <a>parse error</a>; ignore the token. (<a>fragment
    case</a>)

    Otherwise, switch the <a>insertion mode</a> to "<a>after after body</a>".

   </dd>

   <dt>An end-of-file token</dt>
   <dd>
    <a>Stop parsing</a>.
   </dd>

   <dt>Anything else</dt>
   <dd>

    <a>Parse error</a>. Switch the <a>insertion mode</a> to "<a>in body</a>" and reprocess the token.

   </dd>

  </dl>

  <h6 id="the-"in-frameset"-insertion-mode"><dfn>The "<dfn>in frameset</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  frameset</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

   <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
   FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
   <dd>
    <a>Insert the character</a>.
   </dd>

   <dt>A comment token</dt>
   <dd>
    <a>Insert a comment</a>.
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>A start tag whose tag name is "frameset"</dt>
   <dd>
    <a>Insert an HTML element</a> for the token.
   </dd>

   <dt>An end tag whose tag name is "frameset"</dt>
   <dd>

    If the <a>current node</a> is the root <code>html</code> element, then this is a
    <a>parse error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise, pop the <a>current node</a> from the <a>stack of open
    elements</a>.

    If the parser was <em>not</em> originally created as part of the <a>HTML fragment parsing
    algorithm</a> (<a>fragment case</a>), and the <a>current node</a> is no longer a
    <code>frameset</code> element, then switch the <a>insertion mode</a> to "<a>after frameset</a>".

   </dd>

   <dt>A start tag whose tag name is "frame"</dt>
   <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

   </dd>

   <dt>A start tag whose tag name is "noframes"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

   </dd>

   <dt>An end-of-file token</dt>
   <dd>

    If the <a>current node</a> is not the root <code>html</code> element, then this is a
    <a>parse error</a>.

    <p class="note">
The <a>current node</a> can only be the root
    <code>html</code> element in the <a>fragment case</a>.
</p>

    <a>Stop parsing</a>.

   </dd>

   <dt>Anything else</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

  </dl>

  <h6 id="the-"after-frameset"-insertion-mode"><dfn>The "<dfn>after frameset</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after frameset</a>" <a>insertion mode</a>, the user agent must handle the token
  as follows:

  <dl class="switch">

   <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
   FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
   <dd>
    <a>Insert the character</a>.
   </dd>

   <dt>A comment token</dt>
   <dd>
    <a>Insert a comment</a>.
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>An end tag whose tag name is "html"</dt>
   <dd>

    Switch the <a>insertion mode</a> to "<a>after after frameset</a>".

   </dd>

   <dt>A start tag whose tag name is "noframes"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

   </dd>

   <dt>An end-of-file token</dt>
   <dd>
    <a>Stop parsing</a>.
   </dd>

   <dt>Anything else</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

  </dl>

  <h6 id="the-"after-after-body"-insertion-mode"><dfn>The "<dfn>after after body</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after after body</a>" <a>insertion mode</a>, the user agent must handle the token
  as follows:

  <dl class="switch">

   <dt>A comment token</dt>
   <dd>
    <a>Insert a comment</a> as the last child of the <code>Document</code> object.
   </dd>

   <dt>A DOCTYPE token</dt>
   <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
   FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
   <dt>A start tag whose tag name is "html"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>An end-of-file token</dt>
   <dd>
    <a>Stop parsing</a>.
   </dd>

   <dt>Anything else</dt>
   <dd>

    <a>Parse error</a>. Switch the <a>insertion mode</a> to "<a>in body</a>" and reprocess the token.

   </dd>

  </dl>

  <h6 id="the-"after-after-frameset"-insertion-mode"><dfn>The "<dfn>after after frameset</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after after frameset</a>" <a>insertion mode</a>, the user agent must handle the
  token as follows:

  <dl class="switch">

   <dt>A comment token</dt>
   <dd>
    <a>Insert a comment</a> as the last child of the <code>Document</code> object.
   </dd>

   <dt>A DOCTYPE token</dt>
   <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
   FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
   <dt>A start tag whose tag name is "html"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

   </dd>

   <dt>An end-of-file token</dt>
   <dd>
    <a>Stop parsing</a>.
   </dd>

   <dt>A start tag whose tag name is "noframes"</dt>
   <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

   </dd>

   <dt>Anything else</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

  </dl>

  <h5 id="the-rules-for-parsing-tokens-in-foreign-content"><dfn>The rules for parsing tokens <dfn>in foreign content</dfn></dfn></h5>

  When the user agent is to apply the rules for parsing tokens in foreign content, the user agent
  must handle the token as follows:

  <dl class="switch">

   <dt>A character token that is U+0000 NULL</dt>
   <dd>

    <a>Parse error</a>. <a>Insert a U+FFFD REPLACEMENT
    CHARACTER character</a>.

   </dd>

   <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
   FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
   <dd>

    <a>Insert the token's character</a>.

   </dd>

   <dt>Any other character token</dt>
   <dd>

    <a>Insert the token's character</a>.

    Set the <a>frameset-ok flag</a> to "not ok".

   </dd>

   <dt>A comment token</dt>
   <dd>

    <a>Insert a comment</a>.

   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <a>Parse error</a>. Ignore the token.
   </dd>

   <dt>A start tag whose tag name is one of:  "b", "big", "blockquote", "body", "br", "center", "code", "dd", "div", "dl", "dt", "em", "embed", "h1", "h2", "h3", "h4", "h5", "h6", "head", "hr", "i", "img",
   "li", "listing",
   "menu", "meta", "nobr", "ol", "p", "pre", "ruby", "s",  "small", "span", "strong", "strike",  "sub",
   "sup", "table", "tt", "u", "ul", "var"</dt>
   <dt>A start tag whose tag name is "font", if the token has any attributes named "color", "face",
   or "size"</dt>

   <dd>

    <a>Parse error</a>.

    If the parser was originally created for the <a>HTML fragment parsing algorithm</a>,
    then act as described in the "any other start tag" entry below. (<a>fragment case</a>)

    Otherwise:

    Pop an element from the <a>stack of open elements</a>, and then keep popping more
    elements from the <a>stack of open elements</a> until the <a>current node</a> is a
    <a>MathML text integration point</a>, an <a>HTML integration point</a>, or an
    element in the <a>HTML namespace</a>.

    Then, reprocess the token.

   </dd>

   <dt>Any other start tag</dt>
   <dd>

    If the <a>adjusted current node</a> is an element in the <a>MathML namespace</a>,
    <a>adjust MathML attributes</a> for the token. (This fixes the case of MathML attributes
    that are not all lowercase.)

    If the <a>adjusted current node</a> is an element in the <a>SVG namespace</a>, and the
    token's tag name is one of the ones in the first column of the following table, change the tag
    name to the name given in the corresponding cell in the second column. (This fixes the case of
    SVG elements that are not all lowercase.)

    <table>
     <thead>
      <tr> <th> Tag name <th> Element name
     <tbody>
      <tr> <td> <code>altglyph</code> <td> <code>altGlyph</code>
      <tr> <td> <code>altglyphdef</code> <td> <code>altGlyphDef</code>
      <tr> <td> <code>altglyphitem</code> <td> <code>altGlyphItem</code>
      <tr> <td> <code>animatecolor</code> <td> <code>animateColor</code>
      <tr> <td> <code>animatemotion</code> <td> <code>animateMotion</code>
      <tr> <td> <code>animatetransform</code> <td> <code>animateTransform</code>
      <tr> <td> <code>clippath</code> <td> <code>clipPath</code>
      <tr> <td> <code>feblend</code> <td> <code>feBlend</code>
      <tr> <td> <code>fecolormatrix</code> <td> <code>feColorMatrix</code>
      <tr> <td> <code>fecomponenttransfer</code> <td> <code>feComponentTransfer</code>
      <tr> <td> <code>fecomposite</code> <td> <code>feComposite</code>
      <tr> <td> <code>feconvolvematrix</code> <td> <code>feConvolveMatrix</code>
      <tr> <td> <code>fediffuselighting</code> <td> <code>feDiffuseLighting</code>
      <tr> <td> <code>fedisplacementmap</code> <td> <code>feDisplacementMap</code>
      <tr> <td> <code>fedistantlight</code> <td> <code>feDistantLight</code>
      <tr> <td> <code>fedropshadow</code> <td> <code>feDropShadow</code>
      <tr> <td> <code>feflood</code> <td> <code>feFlood</code>
      <tr> <td> <code>fefunca</code> <td> <code>feFuncA</code>
      <tr> <td> <code>fefuncb</code> <td> <code>feFuncB</code>
      <tr> <td> <code>fefuncg</code> <td> <code>feFuncG</code>
      <tr> <td> <code>fefuncr</code> <td> <code>feFuncR</code>
      <tr> <td> <code>fegaussianblur</code> <td> <code>feGaussianBlur</code>
      <tr> <td> <code>feimage</code> <td> <code>feImage</code>
      <tr> <td> <code>femerge</code> <td> <code>feMerge</code>
      <tr> <td> <code>femergenode</code> <td> <code>feMergeNode</code>
      <tr> <td> <code>femorphology</code> <td> <code>feMorphology</code>
      <tr> <td> <code>feoffset</code> <td> <code>feOffset</code>
      <tr> <td> <code>fepointlight</code> <td> <code>fePointLight</code>
      <tr> <td> <code>fespecularlighting</code> <td> <code>feSpecularLighting</code>
      <tr> <td> <code>fespotlight</code> <td> <code>feSpotLight</code>
      <tr> <td> <code>fetile</code> <td> <code>feTile</code>
      <tr> <td> <code>feturbulence</code> <td> <code>feTurbulence</code>
      <tr> <td> <code>foreignobject</code> <td> <code>foreignObject</code>
      <tr> <td> <code>glyphref</code> <td> <code>glyphRef</code>
      <tr> <td> <code>lineargradient</code> <td> <code>linearGradient</code>
      <tr> <td> <code>radialgradient</code> <td> <code>radialGradient</code>

      <tr> <td> <code>textpath</code> <td> <code>textPath</code>
    </table>

    If the <a>adjusted current node</a> is an element in the <a>SVG namespace</a>,
    <a>adjust SVG attributes</a> for the token. (This fixes the case of SVG attributes that
    are not all lowercase.)

    <a>Adjust foreign attributes</a> for the token. (This fixes the use of namespaced
    attributes, in particular XLink in SVG.)

    <a>Insert a foreign element</a> for the token, in the same namespace as the
    <a>adjusted current node</a>.

    If the token has its <i>self-closing flag</i> set, then run the appropriate steps from the
    following list:

    <dl class="switch">

     <dt>If the token's tag name is "script", and the new <a>current node</a> is in the <a>SVG namespace</a></dt>

     <dd>

      <a>Acknowledge the token's <i>self-closing
      flag</i></a>, and then act as described in the steps for a "script" end tag below.

     </dd>

     <dt>Otherwise</dt>

     <dd>

      Pop the <a>current node</a> off the <a>stack of open elements</a> and <a>acknowledge the token's <i>self-closing
      flag</i></a>.

     </dd>

    </dl>

   </dd>

   <dt>An end tag whose tag name is "script", if the <a>current node</a> is a <code>script</code> element in the <a>SVG namespace</a></dt>
   <dd>

    Pop the <a>current node</a> off the <a>stack of open elements</a>.

    Let the <var>old insertion point</var> have the same value as the current
    <a>insertion point</a>. Let the <a>insertion point</a> be just before the <a>next
    input character</a>.

    Increment the parser's <a>script nesting level</a> by one. Set the <a>parser pause
    flag</a> to true.

    <a>Process the
    <code>script</code> element</a> according to the SVG rules, if the user agent supports
    SVG. [[!SVG]]

    <p class="note">
Even if this causes <a>new characters to be
    inserted into the tokenizer</a>, the parser will not be executed reentrantly, since the
    <a>parser pause flag</a> is true.
</p>

    Decrement the parser's <a>script nesting level</a> by one. If the parser's <a>script
    nesting level</a> is zero, then set the <a>parser pause flag</a> to false.

    Let the <a>insertion point</a> have the value of the <var>old insertion
    point</var>. (In other words, restore the <a>insertion point</a> to its previous value.
    This value might be the "undefined" value.)

   </dd>

   <dt>Any other end tag</dt>

   <dd>

    Run these steps:

    <ol>

     <li>Initialize <var>node</var> to be the <a>current node</a> (the bottommost
     node of the stack).</li>

     <li>If <var>node</var>'s tag name, <a>converted to ASCII lowercase</a>, is
     not the same as the tag name of the token, then this is a <a>parse error</a>.</li>

     <li><i>Loop</i>: If <var>node</var> is the topmost element in the <a>stack of
     open elements</a>, abort these steps. (<a>fragment case</a>)</li>

     <li>If <var>node</var>'s tag name, <a>converted to ASCII lowercase</a>, is
     the same as the tag name of the token, pop elements from the <a>stack of open
     elements</a> until <var>node</var> has been popped from the stack, and then abort
     these steps.</li>

     <li>Set <var>node</var> to the previous entry in the <a>stack of open
     elements</a>.</li>

     <li>If <var>node</var> is not an element in the <a>HTML namespace</a>, return
     to the step labeled <i>loop</i>.</li>

     <li>Otherwise, process the token according to the rules given in the section corresponding
     to the current <a>insertion mode</a> in HTML content.</li>

    </ol>

   </dd>

  </dl>

  </div>

  <div class="impl">

  <h4 id="the-end"><dfn>The end</dfn></h4>

  <p>Once the user agent <dfn>stops parsing</dfn> the document, the user agent
  must run the following steps:

  <ol>

   <li>Set the <a>current document readiness</a> to "<code>interactive</code>"
    and the <a>insertion point</a> to
   undefined.</li>

   <li>Pop <em>all</em> the nodes off the <a>stack of open elements</a>.</li>

   <li>If the <a>list of scripts that will execute when the document has finished
   parsing</a> is not empty, run these substeps:

    <ol>

     <li><a>Spin the event loop</a> until the first <code>script</code> in the <a>list
     of scripts that will execute when the document has finished parsing</a> has its <a>"ready
     to be parser-executed"</a> flag set <em>and</em> the parser's <code>Document</code>
     <a>has no style sheet that is blocking scripts</a>.</li>

     <li><a>Execute</a> the first <code>script</code> in
     the <a>list of scripts that will execute when the document has finished
     parsing</a>.</li>

     <li>Remove the first <code>script</code> element from the <a>list of scripts that will
     execute when the document has finished parsing</a> (i.e. shift out the first entry in the
     list).</li>

     <li>If the <a>list of scripts that will execute when the document has finished
     parsing</a> is still not empty, repeat these substeps again from substep 1.

    </ol>

   </li>

   <li><a>Queue a task</a> to <a>fire a simple event</a> that bubbles named <code>DOMContentLoaded</code> at the <code>Document</code>.</li>

   <li><a>Spin the event loop</a> until the <a>set of scripts that will execute as soon
   as possible</a> and the <a>list of scripts that will execute in order as soon as
   possible</a> are empty.</li>

   <li><a>Spin the event loop</a> until there is nothing that <dfn>delays the load event</dfn> in the <code>Document</code>.</li>

   <li>

    <a>Queue a task</a> to run the following substeps:

    <ol>

     <li>Set the <a>current document readiness</a> to "<code>complete</code>".</li>

     <li><i>Load event</i>: If the <code>Document</code> is in a <a>browsing context</a>,
     <a>fire a simple event</a> named <code>load</code> at the
     <code>Document</code>'s <code>Window</code> object, with <i>target override</i> set to the <code>Document</code>
     object.</li>

    </ol>

   </li>

   <li>

    If the <code>Document</code> is in a <a>browsing context</a>, then <a>queue a
    task</a> to run the following substeps:

    <ol>

     <li>If the <code>Document</code>'s <a>page showing</a> flag is true, then abort this
     task (i.e. don't fire the event below).</li>

     <li>Set the <code>Document</code>'s <a>page showing</a> flag to true.</li>

     <li><a>Fire</a> a <a>trusted</a> event with the name <code>pageshow</code> at the <code>Window</code> object of the
     <code>Document</code>, with <i>target override</i> set to the <code>Document</code>
     object,
     using the <code>PageTransitionEvent</code> interface, with the <code>persisted</code> attribute initialized to false. This
     event must not bubble, must not be cancelable, and has no default action.</li>

    </ol>

   </li>

   <li>If the <code>Document</code> has any <a>pending application cache download process
   tasks</a>, then <a>queue</a> each such <a>task</a> in the order they were added to the list of <a>pending
   application cache download process tasks</a>, and then empty the list of <a>pending
   application cache download process tasks</a>. The <a>task source</a> for these <a>tasks</a> is the <a>networking task source</a>.</li>

   <li>If the <code>Document</code>'s <a>print when loaded</a> flag is set, then run the
   <a>printing steps</a>.</li>

   <li>The <code>Document</code> is now <dfn>ready for post-load tasks</dfn>.</li>

   <li><a>Queue a task</a> to mark the <code>Document</code> as <dfn>completely
   loaded</dfn>.</li>

  </ol>

  When the user agent is to <dfn>abort a parser</dfn>, it must run the following steps:

  <ol>

   <li>Throw away any pending content in the <a>input stream</a>, and discard any future
   content that would have been added to it.</li>

   <li>Set the <a>current document readiness</a> to "<code>interactive</code>".</li>

   <li>Pop <em>all</em> the nodes off the <a>stack of open elements</a>.</li>

   <li>Set the <a>current document readiness</a> to "<code>complete</code>".</li>

  </ol>

  Except where otherwise specified, the <a>task source</a> for the <a>tasks</a> mentioned in this section is the <a>DOM manipulation task
  source</a>.

  </div>

  <div class="impl">

  <h4 id="coercing-an-html-dom-into-an-infoset"><dfn>Coercing an HTML DOM into an infoset</dfn></h4>

  When an application uses an <a>HTML parser</a> in conjunction with an XML pipeline, it is
  possible that the constructed DOM is not compatible with the XML tool chain in certain subtle
  ways. For example, an XML toolchain might not be able to represent attributes with the name <code>xmlns</code>, since they conflict with the Namespaces in XML syntax. There is also some
  data that the <a>HTML parser</a> generates that isn't included in the DOM itself. This
  section specifies some rules for handling these issues.

  If the XML API being used doesn't support DOCTYPEs, the tool may drop DOCTYPEs altogether.

  If the XML API doesn't support attributes in no namespace that are named "<code>xmlns</code>", attributes whose names start with "<code>xmlns:</code>", or
  attributes in the <a>XMLNS namespace</a>, then the tool may drop such attributes.

  The tool may annotate the output with any namespace declarations required for proper
  operation.

  If the XML API being used restricts the allowable characters in the local names of elements and
  attributes, then the tool may map all element and attribute local names that the API wouldn't
  support to a set of names that <em>are</em> allowed, by replacing any character that isn't
  supported with the uppercase letter U and the six digits of the character's Unicode code point
  when expressed in hexadecimal, using digits 0-9 and capital letters A-F as the symbols, in
  increasing numeric order.

  <p class="example">
For example, the element name <code>foo&lt;bar</code>, which can be
  output by the <a>HTML parser</a>, though it is neither a legal HTML element name nor a
  well-formed XML element name, would be converted into <code>fooU00003Cbar</code>, which
  <em>is</em> a well-formed XML element name (though it's still not legal in HTML by any means).
</p>

  <p class="example">
As another example, consider the attribute <code>xlink:href</code>.
  Used on a MathML element, it becomes, after being <a>adjusted</a>, an attribute with a prefix "<code>xlink</code>" and a local
  name "<code>href</code>". However, used on an HTML element, it becomes an attribute with
  no prefix and the local name "<code>xlink:href</code>", which is not a valid NCName, and
  thus might not be accepted by an XML API. It could thus get converted, becoming "<code>xlinkU00003Ahref</code>".
</p>

  <p class="note">
The resulting names from this conversion conveniently can't clash with any
  attribute generated by the <a>HTML parser</a>, since those are all either lowercase or those
  listed in the <a>adjust foreign attributes</a> algorithm's table.
</p>

  If the XML API restricts comments from having two consecutive U+002D HYPHEN-MINUS characters
  (--), the tool may insert a single U+0020 SPACE character between any such offending
  characters.

  If the XML API restricts comments from ending in a U+002D HYPHEN-MINUS character (-), the tool
  may insert a single U+0020 SPACE character at the end of such comments.

  If the XML API restricts allowed characters in character data, attribute values, or comments,
  the tool may replace any U+000C FORM FEED (FF) character with a U+0020 SPACE character, and any
  other literal non-XML character with a U+FFFD REPLACEMENT CHARACTER.

  If the tool has no way to convey out-of-band information, then the tool may drop the following
  information:

  <ul>

   <li>Whether the document is set to <i>no-quirks mode</i>, <i>limited-quirks mode</i>, or
   <i>quirks mode</i></li>

   <li>The association between form controls and forms that aren't their nearest <code>form</code>
   element ancestor (use of the <a><code>form</code> element pointer</a> in the parser)</li>

   <li>The <a>template contents</a> of any <code>template</code> elements.</li>

  </ul>

  <p class="note">
The mutations allowed by this section apply <em>after</em> the <a>HTML
  parser</a>'s rules have been applied. For example, a <code>&lt;a::></code> start tag
  will be closed by a <code>&lt;/a::></code> end tag, and never by a <code>&lt;/aU00003AU00003A></code> end tag, even if the user agent is using the rules above to
  then generate an actual element in the DOM with the name <code>aU00003AU00003A</code> for
  that start tag.
</p>

  </div>

  <div class="impl">

  <h4 id="an-introduction-to-error-handling-and-strange-cases-in-the-parser"><dfn>An introduction to error handling and strange cases in the parser</dfn></h4>

  <em>This section is non-normative.</em>

  This section examines some erroneous markup and discusses how the <a>HTML parser</a>
  handles these cases.

  <h5 id="misnested-tags:-&lt;b>&lt;i>&lt;/b>&lt;/i>"><dfn>Misnested tags: &lt;b>&lt;i>&lt;/b>&lt;/i></dfn></h5>

  <em>This section is non-normative.</em>

  The most-often discussed example of erroneous markup is as follows:

  <pre highlight="html">
&lt;p>1&lt;b>2&lt;i>3&lt;/b>4&lt;/i>5&lt;/p>
</pre>

  The parsing of this markup is straightforward up to the "3". At this point, the DOM looks like
  this:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>1</a></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <a>3</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>

  Here, the <a>stack of open elements</a> has five elements on it: <code>html</code>,
  <code>body</code>, <code>p</code>, <code>b</code>, and <code>i</code>. The <a>list of active
  formatting elements</a> just has two: <code>b</code> and <code>i</code>. The <a>insertion
  mode</a> is "<a>in body</a>".

  Upon receiving the end tag token with the tag name "b", the "<a>adoption
  agency algorithm</a>" is invoked. This is a simple case, in that the <var>formatting
  element</var> is the <code>b</code> element, and there is no <var>furthest block</var>.
  Thus, the <a>stack of open elements</a> ends up with just three elements: <code>html</code>,
  <code>body</code>, and <code>p</code>, while the <a>list of active formatting elements</a>
  has just one: <code>i</code>. The DOM tree is unmodified at this point.

  The next token is a character ("4"), triggers the <a>reconstruction of the active formatting elements</a>, in this case just
  the <code>i</code> element. A new <code>i</code> element is thus created for the "4"
  <code>Text</code> node. After the end tag token for the "i" is also received, and the "5"
  <code>Text</code> node is inserted, the DOM looks as follows:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>1</a></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <a>3</a></li></ul></li></ul></li><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <a>4</a></li></ul></li><li class="t3"><code>#text</code>: <a>5</a></li></ul></li></ul></li></ul></li></ul>

  <h5 id="misnested-tags:-&lt;b>&lt;p>&lt;/b>&lt;/p>"><dfn>Misnested tags: &lt;b>&lt;p>&lt;/b>&lt;/p></dfn></h5>

  <em>This section is non-normative.</em>

  A case similar to the previous one is the following:

  <pre highlight="html">
&lt;b>1&lt;p>2&lt;/b>3&lt;/p>
</pre>

  Up to the "2" the parsing here is straightforward:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li></ul></li></ul></li></ul></li></ul>

  The interesting part is when the end tag token with the tag name "b" is parsed.

  Before that token is seen, the <a>stack of open elements</a> has four elements on it:
  <code>html</code>, <code>body</code>, <code>b</code>, and <code>p</code>. The <a>list of active
  formatting elements</a> just has the one: <code>b</code>. The <a>insertion mode</a> is
  "<a>in body</a>".

  Upon receiving the end tag token with the tag name "b", the "<a>adoption
  agency algorithm</a>" is invoked, as in the previous example. However, in this case, there
  <em>is</em> a <var>furthest block</var>, namely the <code>p</code> element. Thus, this
  time the adoption agency algorithm isn't skipped over.

  The <var>common ancestor</var> is the <code>body</code> element. A conceptual
  "bookmark" marks the position of the <code>b</code> in the <a>list of active formatting
  elements</a>, but since that list has only one element in it, the bookmark won't have much
  effect.

  As the algorithm progresses, <var>node</var> ends up set to the formatting element
  (<code>b</code>), and <var>last node</var> ends up set to the <var>furthest
  block</var> (<code>p</code>).

  The <var>last node</var> gets appended (moved) to the <var>common
  ancestor</var>, so that the DOM looks like:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li></ul></li><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li></ul></li></ul></li></ul>

  A new <code>b</code> element is created, and the children of the <code>p</code> element are
  moved to it:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li></ul></li><li class="t1"><code>p</code></li></ul></li></ul></li></ul>
  <ul class="domTree"><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li></ul>

  Finally, the new <code>b</code> element is appended to the <code>p</code> element, so that the
  DOM looks like:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li></ul></li></ul></li></ul></li></ul>

  The <code>b</code> element is removed from the <a>list of active formatting elements</a>
  and the <a>stack of open elements</a>, so that when the "3" is parsed, it is appended to the
  <code>p</code> element:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li><li class="t3"><code>#text</code>: <a>3</a></li></ul></li></ul></li></ul></li></ul>

  <h5 id="unexpected-markup-in-tables"><dfn>Unexpected markup in tables</dfn></h5>

  <em>This section is non-normative.</em>

  Error handling in tables is, for historical reasons, especially strange. For example, consider
  the following markup:

  <pre highlight="html">
&lt;table><strong>&lt;b></strong>&lt;tr>&lt;td>aaa&lt;/td>&lt;/tr><strong>bbb</strong>&lt;/table>ccc
</pre>

  The highlighted <code>b</code> element start tag is not allowed directly inside a table like
  that, and the parser handles this case by placing the element <em>before</em> the table. (This is
  called <i>foster parenting</i>.) This can be seen by examining the DOM tree
  as it stands just after the <code>table</code> element's start tag has been seen:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>table</code></li></ul></li></ul></li></ul>

  ...and then immediately after the <code>b</code> element start tag has been seen:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code></li></ul></li></ul></li></ul>

  At this point, the <a>stack of open elements</a> has on it the elements
  <code>html</code>, <code>body</code>, <code>table</code>, and <code>b</code> (in that order,
  despite the resulting DOM tree); the <a>list of active formatting elements</a> just has the
  <code>b</code> element in it; and the <a>insertion mode</a> is "<a>in table</a>".

  The <code>tr</code> start tag causes the <code>b</code> element to be popped off the stack and
  a <code>tbody</code> start tag to be implied; the <code>tbody</code> and <code>tr</code> elements
  are then handled in a rather straight-forward manner, taking the parser through the "<a>in table body</a>" and "<a>in row</a>" insertion modes, after which the DOM looks as follows:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code></li></ul></li></ul></li></ul></li></ul></li></ul>

  Here, the <a>stack of open elements</a> has on it the elements <code>html</code>,
  <code>body</code>, <code>table</code>, <code>tbody</code>, and <code>tr</code>; the <a>list of
  active formatting elements</a> still has the <code>b</code> element in it; and the
  <a>insertion mode</a> is "<a>in row</a>".

  The <code>td</code> element start tag token, after putting a <code>td</code> element on the
  tree, puts a <a>marker</a> on the <a>list of active
  formatting elements</a> (it also switches to the "<a>in
  cell</a>" <a>insertion mode</a>).

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>

  The <a>marker</a> means that when the "aaa" character
  tokens are seen, no <code>b</code> element is created to hold the resulting <code>Text</code>
  node:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code><ul><li class="t3"><code>#text</code>: <a>aaa</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>

  The end tags are handled in a straight-forward manner; after handling them, the <a>stack of
  open elements</a> has on it the elements <code>html</code>, <code>body</code>,
  <code>table</code>, and <code>tbody</code>; the <a>list of active formatting elements</a>
  still has the <code>b</code> element in it (the <a>marker</a>
  having been removed by the "td" end tag token); and the <a>insertion mode</a> is "<a>in table body</a>".

  Thus it is that the "bbb" character tokens are found. These trigger the "<a>in table text</a>" insertion mode to be used (with the <a>original
  insertion mode</a> set to "<a>in table body</a>").
  The character tokens are collected, and when the next token (the <code>table</code> element end
  tag) is seen, they are processed as a group. Since they are not all spaces, they are handled as
  per the "anything else" rules in the "<a>in table</a>"
  insertion mode, which defer to the "<a>in body</a>"
  insertion mode but with <a>foster parenting</a>.

  When <a>the active formatting elements
  are reconstructed</a>, a <code>b</code> element is created and <a>foster parented</a>, and then the "bbb" <code>Text</code> node is appended to it:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>bbb</a></li></ul></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code><ul><li class="t3"><code>#text</code>: <a>aaa</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>

  The <a>stack of open elements</a> has on it the elements <code>html</code>,
  <code>body</code>, <code>table</code>, <code>tbody</code>, and the new <code>b</code> (again, note
  that this doesn't match the resulting tree!); the <a>list of active formatting elements</a>
  has the new <code>b</code> element in it; and the <a>insertion mode</a> is still "<a>in table body</a>".

  Had the character tokens been only <a>space characters</a>
  instead of "bbb", then those <a>space characters</a> would just be
  appended to the <code>tbody</code> element.

  Finally, the <code>table</code> is closed by a "table" end tag. This pops all the nodes from
  the <a>stack of open elements</a> up to and including the <code>table</code> element, but it
  doesn't affect the <a>list of active formatting elements</a>, so the "ccc" character tokens
  after the table result in yet another <code>b</code> element being created, this time after the
  table:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>bbb</a></li></ul></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code><ul><li class="t3"><code>#text</code>: <a>aaa</a></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>ccc</a></li></ul></li></ul></li></ul></li></ul>

  <h5 id="scripts-that-modify-the-page-as-it-is-being-parsed"><dfn>Scripts that modify the page as it is being parsed</dfn></h5>

  <em>This section is non-normative.</em>

  Consider the following markup, which for this example we will assume is the document with
  <a>URL</a> <code>http://example.com/inner</code>, being rendered as the content of
  an <code>iframe</code> in another document with the <a>URL</a> <code>http://example.com/outer</code>:

  <pre highlight="html">
&lt;div id=a>
 &lt;script>
  var div = document.getElementById('a');
  parent.document.body.appendChild(div);
 &lt;/script>
 &lt;script>
  alert(document.URL);
 &lt;/script>
&lt;/div>
&lt;script>
 alert(document.URL);
&lt;/script>
</pre>

  Up to the first "script" end tag, before the script is parsed, the result is relatively
  straightforward:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>div</code> <span class="t2"><code class="attribute name">id</code>="<code class="attribute value">a</code>"</span><ul><li class="t3"><code>#text</code>: <a>
 </a></li><li class="t1"><code>script</code><ul><li class="t3"><code>#text</code>: <a>var div = document.getElementById('a'); &#x23CE; parent.document.body.appendChild(div);</a></li></ul></li></ul></li></ul></li></ul></li></ul>

  After the script is parsed, though, the <code>div</code> element and its child
  <code>script</code> element are gone:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code></li></ul></li></ul>

  They are, at this point, in the <code>Document</code> of the aforementioned outer
  <a>browsing context</a>. However, the <a>stack of open elements</a> <em>still contains
  the <code>div</code> element</em>.

  Thus, when the second <code>script</code> element is parsed, it is inserted <em>into the outer
  <code>Document</code> object</em>.

  Those parsed into different <code>Document</code>s than the one the parser was created for do
  not execute, so the first alert does not show.

  Once the <code>div</code> element's end tag is parsed, the <code>div</code> element is popped
  off the stack, and so the next <code>script</code> element is in the inner
  <code>Document</code>:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>script</code><ul><li class="t3"><code>#text</code>: <a>alert(document.URL);</a></li></ul></li></ul></li></ul></li></ul>

  This script does execute, resulting in an alert that says "http://example.com/inner".

  <h5 id="the-execution-of-scripts-that-are-moving-across-multiple-documents"><dfn>The execution of scripts that are moving across multiple documents</dfn></h5>

  <em>This section is non-normative.</em>

  Elaborating on the example in the previous section, consider the case where the second
  <code>script</code> element is an external script (i.e. one with a <code>src</code> attribute). Since the element was not in the parser's
  <code>Document</code> when it was created, that external script is not even downloaded.

  In a case where a <code>script</code> element with a <code>src</code>
  attribute is parsed normally into its parser's <code>Document</code>, but while the external
  script is being downloaded, the element is moved to another document, the script continues to
  download, but does not execute.

  <p class="note">
In general, moving <code>script</code> elements between <code>Document</code>s is
  considered a bad practice.
</p>

  <h5 id="unclosed-formatting-elements"><dfn>Unclosed formatting elements</dfn></h5>

  <em>This section is non-normative.</em>

  The following markup shows how nested formatting elements (such as <code>b</code>) get
  collected and continue to be applied even as the elements they are contained in are closed, but
  that excessive duplicates are thrown away.

  <pre highlight="html">
&lt;!DOCTYPE html>
&lt;p>&lt;b class=x>&lt;b class=x>&lt;b>&lt;b class=x>&lt;b class=x>&lt;b>X
&lt;p>X
&lt;p>&lt;b>&lt;b class=x>&lt;b>X
&lt;p>&lt;/b>&lt;/b>&lt;/b>&lt;/b>&lt;/b>&lt;/b>X
</pre>

  The resulting DOM tree is as follows:

  <ul class="domTree"><li class="t10">DOCTYPE: <code>html</code></li><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>p</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>X&#X23CE;</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>X&#X23CE;</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>X&#X23CE;</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>X&#X23CE;</a></li></ul></li></ul></li></ul></li></ul>

  Note how the second <code>p</code> element in the markup has no explicit <code>b</code>
  elements, but in the resulting DOM, up to three of each kind of formatting element (in this case
  three <code>b</code> elements with the class attribute, and two unadorned <code>b</code> elements)
  get reconstructed before the element's "X".

  Also note how this means that in the final paragraph only six <code>b</code> end tags are
  needed to completely clear the <a>list of active formatting elements</a>, even though nine <code>b</code> start
  tags have been seen up to this point.

  <h3 id="serializing-html-fragments"><dfn>Serializing HTML fragments</dfn></h3>

  The following steps form the <dfn>HTML fragment serialization algorithm</dfn>. The algorithm
  takes as input a DOM <code>Element</code>, <code>Document</code>, or <code>DocumentFragment</code>
  referred to as <var>the node</var>, and either returns a string or throws an
  exception.

  <p class="note">
This algorithm serializes the <em>children</em> of the node being serialized, not
  the node itself.
</p>

  <ol>

   <li>Let <var>s</var> be a string, and initialize it to the empty string.</li>

   <li>If <var>the node</var> is a <code>template</code> element, then let <var>the node</var> instead be the <code>template</code> element's <a>template
   contents</a> (a <code>DocumentFragment</code> node).</li>

   <li>

    For each child node of <var>the node</var>, in <a>tree order</a>, run the
    following steps:

    <ol>

     <li><p>Let <var>current node</var> be the child node being processed.</li>

     <li>

      Append the appropriate string from the following list to <var>s</var>:

      <dl class="switch">

       <dt>If <var>current node</var> is an <code>Element</code></dt>

       <dd>

        If <var>current node</var> is an element in the <a>HTML namespace</a>, the
        <a>MathML namespace</a>, or the <a>SVG namespace</a>, then let <var>tagname</var> be <var>current node</var>'s local name. Otherwise, let <var>tagname</var> be <var>current node</var>'s qualified name.

        Append a U+003C LESS-THAN SIGN character (&lt;), followed by <var>tagname</var>.

        <p class="note">
For <a>HTML elements</a> created by the <a>HTML parser</a> or
        <code>Document.createElement()</code>, <var>tagname</var> will be
        lowercase.
</p>

        For each attribute that the element has, append a U+0020 SPACE character, the <a>attribute's serialized name as described below</a>, a
        U+003D EQUALS SIGN character (=), a U+0022 QUOTATION MARK character (&quot;), the
        attribute's value, <a>escaped as described below</a> in
        <i>attribute mode</i>, and a second U+0022 QUOTATION MARK character (&quot;).

        An <dfn>attribute's serialized name</dfn> for the purposes of the previous paragraph must
        be determined as follows:

        <dl class="switch">

         <dt>If the attribute has no namespace</dt>

         <dd>

          The attribute's serialized name is the attribute's local name.

          <p class="note">
For attributes on <a>HTML elements</a> set by the <a>HTML
          parser</a> or by <code>Element.setAttribute()</code>, the local name will be
          lowercase.
</p>

         </dd>

         <dt>If the attribute is in the <a>XML namespace</a></dt>

         <dd>The attribute's serialized name is the string "<code>xml:</code>" followed
         by the attribute's local name.</dd>

         <dt>If the attribute is in the <a>XMLNS namespace</a> and the attribute's local name
         is <code>xmlns</code></dt>

         <dd>The attribute's serialized name is the string "<code>xmlns</code>".</dd>

         <dt>If the attribute is in the <a>XMLNS namespace</a> and the attribute's local name
         is not <code>xmlns</code></dt>

         <dd>The attribute's serialized name is the string "<code>xmlns:</code>"
         followed by the attribute's local name.</dd>

         <dt>If the attribute is in the <a>XLink namespace</a></dt>

         <dd>The attribute's serialized name is the string "<code>xlink:</code>"
         followed by the attribute's local name.</dd>

         <dt>If the attribute is in some other namespace</dt>

         <dd>The attribute's serialized name is the attribute's qualified name.</dd>

        </dl>

        While the exact order of attributes is UA-defined, and may depend on factors such as the
        order that the attributes were given in the original markup, the sort order must be stable,
        such that consecutive invocations of this algorithm serialize an element's attributes in the
        same order.

        Append a U+003E GREATER-THAN SIGN character (&gt;).

        If <var>current node</var> is an <code>area</code>, <code>base</code>,
        <code>basefont</code>, <code>bgsound</code>, <code>br</code>, <code>col</code>,
        <code>embed</code>, <code>frame</code>, <code>hr</code>, <code>img</code>,
        <code>input</code>, <code>keygen</code>, <code>link</code>, <code>menuitem</code>,
        <code>meta</code>, <code>param</code>, <code>source</code>, <code>track</code> or
        <code>wbr</code> element, then continue on to the next child node at this point.

        If <var>current node</var> is a <code>pre</code>, <code>textarea</code>, or
        <code>listing</code> element, and the first child node of the element, if any, is a
        <code>Text</code> node whose character data has as its first character a U+000A LINE FEED
        (LF) character, then append a U+000A LINE FEED (LF) character.

        Append the value of running the <a>HTML fragment serialization algorithm</a> on the
        <var>current node</var> element (thus recursing into this algorithm for that
        element), followed by a U+003C LESS-THAN SIGN character (&lt;), a U+002F SOLIDUS character
        (/), <var>tagname</var> again, and finally a U+003E GREATER-THAN SIGN character
        (&gt;).

       </dd>

       <dt>If <var>current node</var> is a <code>Text</code> node</dt>

       <dd>

        If the parent of <var>current node</var> is a <code>style</code>,
        <code>script</code>, <code>xmp</code>, <code>iframe</code>, <code>noembed</code>,
        <code>noframes</code>, or <code>plaintext</code> element, or if the parent of <var>current node</var> is a <code>noscript</code> element and <a>scripting is enabled</a> for the node, then append the value of
        <var>current node</var>'s <code>data</code> IDL attribute literally.

        Otherwise, append the value of <var>current node</var>'s <code>data</code> IDL attribute, <a>escaped as described
        below</a>.

       </dd>

       <dt>If <var>current node</var> is a <code>Comment</code></dt>

       <dd>

        Append the literal string "<code>&lt;!--</code>" (U+003C LESS-THAN SIGN, U+0021
        EXCLAMATION MARK, U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS), followed by the value of <var>current node</var>'s <code>data</code> IDL attribute, followed by the
        literal string "<code>--&gt;</code>" (U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS,
        U+003E GREATER-THAN SIGN).

       </dd>

       <dt>If <var>current node</var> is a <code>ProcessingInstruction</code></dt>

       <dd>

        Append the literal string "<code>&lt;?</code>" (U+003C LESS-THAN SIGN, U+003F
        QUESTION MARK), followed by the value of <var>current node</var>'s <code>target</code> IDL attribute, followed by a single U+0020 SPACE character, followed
        by the value of <var>current node</var>'s <code>data</code> IDL
        attribute, followed by a single U+003E GREATER-THAN SIGN character (>).

       </dd>

       <dt>If <var>current node</var> is a <code>DocumentType</code></dt>

       <dd>

        Append the literal string "<code>&lt;!DOCTYPE</code>" (U+003C LESS-THAN SIGN, U+0021
        EXCLAMATION MARK, U+0044 LATIN CAPITAL LETTER D, U+004F LATIN CAPITAL LETTER O, U+0043 LATIN
        CAPITAL LETTER C, U+0054 LATIN CAPITAL LETTER T, U+0059 LATIN CAPITAL LETTER Y, U+0050 LATIN
        CAPITAL LETTER P, U+0045 LATIN CAPITAL LETTER E), followed by a space (U+0020 SPACE),
        followed by the value of <var>current node</var>'s <code>name</code> IDL
        attribute, followed by the literal string "<code>&gt;</code>" (U+003E GREATER-THAN SIGN).

       </dd>

      </dl>

     </li>

    </ol>

   </li>

   <li>The result of the algorithm is the string <var>s</var>.</li>

  </ol>

  <p class="warning">It is possible that the output of this algorithm, if parsed with an <a>HTML
  parser</a>, will not return the original tree structure.</p>

  <div class="example">

   For instance, if a <code>textarea</code> element to which a <code>Comment</code> node
   has been appended is serialized and the output is then reparsed, the comment will end up being
   displayed in the text field. Similarly, if, as a result of DOM manipulation, an element contains
   a comment that contains the literal string "<code>--&gt;</code>", then when the result
   of serializing the element is parsed, the comment will be truncated at that point and the rest of
   the comment will be interpreted as markup. More examples would be making a <code>script</code>
   element contain a <code>Text</code> node with the text string "<code>&lt;/script></code>", or
   having a <code>p</code> element that contains a <code>ul</code> element (as the <code>ul</code>
   element's <a>start tag</a> would imply the end tag for the
   <code>p</code>).

   This can enable cross-site scripting attacks. An example of this would be a page that lets the
   user enter some font family names that are then inserted into a CSS <code>style</code> block via
   the DOM and which then uses the <code>innerHTML</code> IDL attribute to get
   the HTML serialization of that <code>style</code> element: if the user enters
   "<code>&lt;/style>&lt;script>attack&lt;/script></code>" as a font family name, <code>innerHTML</code> will return markup that, if parsed in a different context,
   would contain a <code>script</code> node, even though no <code>script</code> node existed in the
   original DOM.

  </div>

  <dfn>Escaping a string</dfn> (for the purposes of the algorithm above)
  consists of running the following steps:

  <ol>

   <li>Replace any occurrence of the "<code>&amp;</code>" character by the string "<code>&amp;amp;</code>".</li>

   <li>Replace any occurrences of the U+00A0 NO-BREAK SPACE character by the string "<code>&amp;nbsp;</code>".</li>

   <li>If the algorithm was invoked in the <i>attribute mode</i>, replace any occurrences of the
   "<code>&quot;</code>" character by the string "<code>&amp;quot;</code>".</li>

   <li>If the algorithm was <em>not</em> invoked in the <i>attribute mode</i>, replace any
   occurrences of the "<code>&lt;</code>" character by the string "<code>&amp;lt;</code>", and any occurrences of the "<code>&gt;</code>" character by
   the string "<code>&amp;gt;</code>".</li>

  </ol>

  <h3 id="parsing-html-fragments"><dfn>Parsing HTML fragments</dfn></h3>

  The following steps form the <dfn>HTML fragment parsing algorithm</dfn>. The algorithm
  takes as input an <code>Element</code> node, referred to as the <dfn><var>context</var></dfn> element, which gives the context for
  the parser, as well as <var>input</var>, a string to parse, and returns a list of zero or
  more nodes.

  <p class="note">
Parts marked <dfn>fragment case</dfn> in algorithms in the parser section are
  parts that only occur if the parser was created for the purposes of this algorithm. The algorithms have been annotated
  with such markings for informational purposes only; such markings have no normative weight. If it
  is possible for a condition described as a <a>fragment case</a> to occur even when the
  parser wasn't created for the purposes of handling this algorithm, then that is an error in the
  specification.
</p>

  <ol>

   <li>

    Create a new <code>Document</code> node, and mark it as being an <a>HTML document</a>.

   </li>

   <li>

    If the
    <a>node document</a> of the <var>context</var> element is in
    <a>quirks mode</a>, then let the <code>Document</code> be in <a>quirks mode</a>.
    Otherwise, the
    <a>node document</a> of the <var>context</var> element is in
    <a>limited-quirks mode</a>, then let the <code>Document</code> be in <a>limited-quirks
    mode</a>. Otherwise, leave the <code>Document</code> in <a>no-quirks mode</a>.

   </li>

   <li>

    Create a new <a>HTML parser</a>, and associate it with the just created
    <code>Document</code> node.

   </li>

   <li>

    Set the state of the <a>HTML parser</a>'s <a>tokenization</a> stage as
    follows:

    <dl class="switch">

     <dt>If it is a <code>title</code> or <code>textarea</code> element</dt>

     <dd>Switch the tokenizer to the <a>RCDATA state</a>.</dd>

     <dt>If it is a <code>style</code>, <code>xmp</code>, <code>iframe</code>,
     <code>noembed</code>, or <code>noframes</code> element</dt>

     <dd>Switch the tokenizer to the <a>RAWTEXT state</a>.</dd>

     <dt>If it is a <code>script</code> element</dt>

     <dd>Switch the tokenizer to the <a>script data state</a>.</dd>

     <dt>If it is a <code>noscript</code> element</dt>

     <dd>If the <a>scripting flag</a> is enabled, switch the tokenizer to the <a>RAWTEXT
     state</a>. Otherwise, leave the tokenizer in the <a>data state</a>.</dd>

     <dt>If it is a <code>plaintext</code> element</dt>

     <dd>Switch the tokenizer to the <a>PLAINTEXT state</a>.</dd>

     <dt>Otherwise</dt>

     <dd>Leave the tokenizer in the <a>data state</a>.</dd>

    </dl>

    <p class="note">
For performance reasons, an implementation that does not report errors and
    that uses the actual state machine described in this specification directly could use the
    PLAINTEXT state instead of the RAWTEXT and script data states where those are mentioned in the
    list above. Except for rules regarding parse errors, they are equivalent, since there is no
    <a>appropriate end tag token</a> in the fragment case, yet they involve far fewer state
    transitions.
</p>

   </li>

   <li>

    Let <var>root</var> be a new <code>html</code> element with no attributes.

   </li>

   <li>

    Append the element <var>root</var> to the <code>Document</code> node created
    above.

   </li>

   <li>

    Set up the parser's <a>stack of open elements</a> so that it contains just the single
    element <var>root</var>.

   </li>

   <li>

    If the <var>context</var> element is a
    <code>template</code> element, push "<a>in
    template</a>" onto the <a>stack of template insertion modes</a> so that it is the new
    <a>current template insertion mode</a>.

   </li>

   <li>

    Create a start tag token whose name is the local name of <var>context</var> and whose attributes are the attributes of
    <var>context</var>.

    Let this start tag token be the start tag token of the <var>context</var> node, e.g. for the purposes of determining
    if it is an <a>HTML integration point</a>.

   </li>

   <li>

    <a>Reset the parser's insertion mode
    appropriately</a>.

    <p class="note">
The parser will reference the <var>context</var> element as part of that algorithm.
</p>

   </li>

   <li>

    Set the parser's <a><code>form</code> element pointer</a> to the nearest node to the
    <var>context</var> element that is a <code>form</code>
    element (going straight up the ancestor chain, and including the element itself, if it is a
    <code>form</code> element), if any. (If there is no such <code>form</code> element, the
    <a><code>form</code> element pointer</a> keeps its initial value, null.)

   </li>

   <li>

    Place the <var>input</var> into the <a>input stream</a> for the <a>HTML
    parser</a> just created. The encoding <a>confidence</a> is <i>irrelevant</i>.

   </li>

   <li>

    Start the parser and let it run until it has consumed all the characters just inserted into
    the input stream.

   </li>

   <li>

    Return the child
    nodes of <var>root</var>, in <a>tree order</a>.

   </li>

  </ol>

  </div>

  <h3 id="named-character-references"><dfn><dfn>Named character references</dfn></dfn></h3>

  This table lists the character reference names that are supported by HTML, and the code points
  to which they refer. It is referenced by the previous sections.

  <div>
   <table>
    <thead>
     <tr> <th> Name </th> <th> Character(s) </th> <th> Glyph </th> </tr>
    </thead>

   </table>

  </div>

  This data is also available <a>as a JSON file</a>.

  <i>The glyphs displayed above are non-normative. Refer to the Unicode specifications for formal
  definitions of the characters listed above.</i>

  <h2 id="the-xhtml-syntax"><dfn>The XHTML syntax</dfn></h2>

  <p class="note">
This section only describes the rules for XML resources. Rules for
  <code>text/html</code> resources are discussed in the section above entitled "<a>The HTML
  syntax</a>".
</p>

  <div class="impl">

  <h3 id="writing-xhtml-documents"><dfn>Writing XHTML documents</dfn></h3>

  </div>

  The syntax for using HTML with XML, whether in XHTML documents or embedded in other XML
  documents, is defined in the XML and Namespaces in XML specifications. <a>\[XML]</a> [[!XMLNS]]

  This specification does not define any syntax-level requirements beyond those defined for XML
  proper.

  XML documents may contain a <code>DOCTYPE</code> if desired, but this is not required
  to conform to this specification. This specification does not define a public or system
  identifier, nor provide a formal DTD.

  <p class="note">
According to the XML specification, XML processors are not guaranteed to process
  the external DTD subset referenced in the DOCTYPE. This means, for example, that using <a>entity references</a> for characters in XHTML documents
  is unsafe if they are defined in an external file (except for <code>&amp;lt;</code>,
  <code>&amp;gt;</code>, <code>&amp;amp;</code>, <code>&amp;quot;</code>
  and <code>&amp;apos;</code>).
</p>

  <div class="impl">

  <h3 id="parsing-xhtml-documents"><dfn>Parsing XHTML documents</dfn></h3>

  This section describes the relationship between XML and the DOM, with a particular emphasis on
  how this interacts with HTML.

  An <dfn>XML parser</dfn>, for the purposes of this specification, is a construct that follows
  the rules given in the XML specification to map a string of bytes or characters into a
  <code>Document</code> object.

  <p class="note">
At the time of writing, no such rules actually exist.
</p>

  An <a>XML parser</a> is either associated with a <code>Document</code> object when it is
  created, or creates one implicitly.

  This <code>Document</code> must then be populated with DOM nodes that represent the tree
  structure of the input passed to the parser, as defined by the XML specification, the Namespaces
  in XML specification, and the DOM specification. DOM mutation events must not fire for the
  operations that the <a>XML parser</a> performs on the <code>Document</code>'s tree, but the
  user agent must act as if elements and attributes were individually appended and set respectively
  so as to trigger rules in this specification regarding what happens when an element is inserted
  into a document or has its attributes set, and the DOM specification's requirements regarding
  mutation observers mean that mutation observers <em>are</em> fired (unlike mutation events). <a>\[XML]</a> [[!XMLNS]] [[!DOM]] <a>\[UIEVENTS]</a>

  Between the time an element's start tag is parsed and the time either the element's end tag is
  parsed or the parser detects a well-formedness error, the user agent must act as if the element
  was in a <a>stack of open elements</a>.

  <p class="note">
This is used, e.g. by the <code>object</code> element to avoid instantiating plugins
  before the <code>param</code> element children have been parsed.
</p>

  This specification provides the following additional information that user agents should use
  when retrieving an external entity: the public identifiers given in the following list all
  correspond to <a>">the URL given by this link</a>. (This
  URL is a DTD containing the <a>entity
  declarations</a> for the names listed in the <a>named character references</a> section.) <a>\[XML]</a>

  <ul class="brief">
   <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Transitional//EN</code></li>
   <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1//EN</code></li>
   <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Strict//EN</code></li>
   <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Frameset//EN</code></li>
   <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;Basic&nbsp;1.0//EN</code></li>
   <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1&nbsp;plus&nbsp;MathML&nbsp;2.0//EN</code></li>
   <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1&nbsp;plus&nbsp;MathML&nbsp;2.0&nbsp;plus&nbsp;SVG&nbsp;1.1//EN</code></li>
   <li><code>-//W3C//DTD&nbsp;MathML&nbsp;2.0//EN</code></li>
   <li><code>-//WAPFORUM//DTD&nbsp;XHTML&nbsp;Mobile&nbsp;1.0//EN</code></li>
  </ul>

  Furthermore, user agents should attempt to retrieve the above external entity's content when
  one of the above public identifiers is used, and should not attempt to retrieve any other external
  entity's content.

  <p class="note">
This is not strictly a <a>violation</a> of the XML
  specification, but it does contradict the spirit of the XML specification's requirements. This is
  motivated by a desire for user agents to all handle entities in an interoperable fashion without
  requiring any network access for handling external subsets. [[!XML]]
</p>

  XML parsers can be invoked with <dfn>XML scripting support enabled</dfn> or <dfn>disabled</dfn>. Except where otherwise specified, XML parsers are
  invoked with <a>XML scripting support enabled</a>.

  When an <a>XML parser</a> with <a>XML scripting support enabled</a>
  creates a <code>script</code> element, it
  must be marked as being <a>"parser-inserted"</a> and its <a>"non-blocking"</a> flag
  must be unset. If the parser was originally created for the <a>XML fragment parsing
  algorithm</a>, then the element must be marked as <a>"already started"</a> also. When the
  element's end tag is subsequently parsed, the user agent must <a>perform a microtask checkpoint</a>, and
  then <a>prepare</a> the <code>script</code> element. If this
  causes there to be a <a>pending parsing-blocking script</a>, then the user agent must run
  the following steps:

  <ol>

   <li>Block this instance of the <a>XML parser</a>, such that the <a>event loop</a>
   will not run <a>tasks</a> that invoke it.</li>

   <li><a>Spin the event loop</a> until the parser's <code>Document</code> <a>has no
   style sheet that is blocking scripts</a> and the <a>pending parsing-blocking
   script</a>'s <a>"ready to be parser-executed"</a> flag is set.</li>

   <li>Unblock this instance of the <a>XML parser</a>, such that <a>tasks</a> that invoke it can again be run.</li>

   <li><a>Execute</a> the <a>pending parsing-blocking
   script</a>.</li>

   <li>There is no longer a <a>pending parsing-blocking script</a>.</li>

  </ol>

  <p class="note">
Since the <code>document.write()</code> API is not
  available for <a>XML documents</a>, much of the complexity in the <a>HTML parser</a>
  is not needed in the <a>XML parser</a>.
</p>

  <p class="note">
When the <a>XML parser</a> has <a>XML scripting support disabled</a>,
  none of this happens.
</p>

  When an <a>XML parser</a> would append a node to a
  <code>template</code> element, it must instead append it to the <code>template</code> element's
  <a>template contents</a> (a <code>DocumentFragment</code> node).

  <p class="note">
This is a <a>willful violation</a> of the XML specification; unfortunately,
  XML is not formally extensible in the manner that is needed for <code>template</code> processing.
  [[!XML]]
</p>

  When an <a>XML parser</a> creates a <code>Node</code> object, its <a>node document</a>
  must be set to the <a>node document</a> of
  the node into which the newly created node is to be inserted.

  Certain algorithms in this specification <dfn>spoon-feed the
  parser</dfn> characters one string at a time. In such cases, the <a>XML parser</a> must act
  as it would have if faced with a single string consisting of the concatenation of all those
  characters.

  When an <a>XML parser</a> reaches the end of its input, it must <a>stop
  parsing</a>, following the same rules as the <a>HTML parser</a>. An <a>XML
  parser</a> can also be <a>aborted</a>, which must again be done in
  the same way as for an <a>HTML parser</a>.

  For the purposes of conformance checkers, if a resource is determined to be in <a>the XHTML
  syntax</a>, then it is an <a>XML document</a>.

  <h3 id="serializing-xhtml-fragments"><dfn>Serializing XHTML fragments</dfn></h3>

  The <dfn>XML fragment serialization algorithm</dfn> for a <code>Document</code> or
  <code>Element</code> node either returns a fragment of XML that represents that node or throws an
  exception.

  For <code>Document</code>s, the algorithm must return a string in the form of a <a>document entity</a>, if none of the error cases
  below apply.

  For <code>Element</code>s, the algorithm must return a string in the form of an <a>internal general parsed entity</a>, if none of the
  error cases below apply.

  In both cases, the string returned must be XML namespace-well-formed and must be an isomorphic
  serialization of all of that node's <a>relevant child nodes</a>, in <a>tree order</a>.
  User agents may adjust prefixes and namespace declarations in the serialization (and indeed might
  be forced to do so in some cases to obtain namespace-well-formed XML). User agents may use a
  combination of regular text and character references to represent <code>Text</code> nodes in the
  DOM.

  A node's <dfn>relevant child nodes</dfn> are those that apply given the following rules:

  <dl>

   <dt>For <code>template</code> elements</dt>

   <dd>The <a>relevant child nodes</a> are the child nodes of the <code>template</code>
   element's <a>template contents</a>, if any.</dd>

   <dt>For all other nodes</dt>

   <dd>The <a>relevant child nodes</a> are the child nodes of node itself, if any.</dd>

  </dl>

  For <code>Element</code>s, if any of the elements in the serialization are in no namespace, the
  default namespace in scope for those elements must be explicitly declared as the empty string. (This doesn't apply in the <code>Document</code> case.) [[!XML]]
  [[!XMLNS]]

  For the purposes of this section, an internal general parsed entity is considered XML
  namespace-well-formed if a document consisting of an element with no namespace declarations whose
  contents are the internal general parsed entity would itself be XML namespace-well-formed.

  If any of the following error cases are found in the DOM subtree being serialized, then the
  algorithm must throw an <code>InvalidStateError</code> exception instead of returning a
  string:

  <ul>

   <li>A <code>Document</code> node with no child element nodes.</li>

   <li>A <code>DocumentType</code> node that has an external subset public identifier that contains
   characters that are not matched by the XML <code>PubidChar</code> production. [[!XML]]</li>

   <li>A <code>DocumentType</code> node that has an external subset system identifier that contains
   both a U+0022 QUOTATION MARK (") and a U+0027 APOSTROPHE (') or that contains characters that are
   not matched by the XML <code>Char</code> production. [[!XML]]</li>

   <li>A node with a  local name containing a U+003A COLON (:).</li>

   <li>A node with a  local name that does not match the XML <code>Name</code> production. [[!XML]]</li>

   <li>An <code>Attr</code> node with no namespace whose local name is the lowercase string "<code>xmlns</code>". [[!XMLNS]]</li>

   <li>An <code>Element</code> node with two or more attributes with the same local name and
   namespace.</li>

   <li>An <code>Attr</code> node, <code>Text</code> node, <code>Comment</code> node, or
   <code>ProcessingInstruction</code> node whose data contains characters that are not matched by
   the XML <code>Char</code> production. [[!XML]]</li>

   <li>A <code>Comment</code> node whose data contains two adjacent U+002D HYPHEN-MINUS characters
   (-) or ends with such a character.</li>

   <li>A <code>ProcessingInstruction</code> node whose target name is an <a>ASCII
   case-insensitive</a> match for the string "<code>xml</code>".</li>

   <li>A <code>ProcessingInstruction</code> node whose target name contains a U+003A COLON (:).</li>

   <li>A <code>ProcessingInstruction</code> node whose data contains the string "<code>?></code>".</li>

  </ul>

  <p class="note">
These are the only ways to make a DOM unserialisable. The DOM enforces all the
  other XML constraints; for example, trying to append two elements to a <code>Document</code> node
  will throw a <code>HierarchyRequestError</code> exception.
</p>

  <h3 id="parsing-xhtml-fragments"><dfn>Parsing XHTML fragments</dfn></h3>

  The <dfn>XML fragment parsing algorithm</dfn> either returns a <code>Document</code> or throws
  a <code>SyntaxError</code> exception. Given a string <var>input</var> and a
  context element <var>context</var>, the algorithm is as
  follows:

  <ol>

   <li>

    Create a new <a>XML parser</a>.

   </li>

   <li>

    <a>Feed the
    parser</a> just created the string corresponding to the start tag of the <var>context</var> element, declaring
    all the namespace prefixes that are in scope on that element in the DOM, as well as declaring
    the default namespace (if any) that is in scope on that element in the DOM.

    A namespace prefix is in scope if the DOM <code>lookupNamespaceURI()</code> method
    on the element would return a non-null value for that prefix.

    The default namespace is the namespace for which the DOM <code>isDefaultNamespace()</code> method on the element would return true.

    <p class="note">
No
    <code>DOCTYPE</code> is passed to the parser, and therefore no external subset is
    referenced, and therefore no entities will be recognized.
</p>

   </li>

   <li>

    <a>Feed the parser</a> just created the string <var>input</var>.

   </li>

   <li>

    <a>Feed the parser</a> just created the string corresponding to the end tag of the <var>context</var> element.

   </li>

   <li>

    If there is an XML well-formedness or XML namespace well-formedness error, then throw a
    <code>SyntaxError</code> exception and abort these steps.

   </li>

   <li>

    If the root
    element of the resulting <code>Document</code> has any sibling nodes, then throw a
    <code>SyntaxError</code> exception and abort these steps.

   </li>

   <li>

    Return the
    child nodes of the root element of the resulting <code>Document</code>, in <a>tree
    order</a>.

   </li>

  </ol>

  </div>

  <div class="impl">

  <h2 id="rendering"><dfn>Rendering</dfn></h2>

  <i>User agents are not required to present HTML documents in any particular way. However, this
  section provides a set of suggestions for rendering HTML documents that, if followed, are likely
  to lead to a user experience that closely resembles the experience intended by the documents'
  authors. So as to avoid confusion regarding the normativity of this section, RFC2119 terms have
  not been used. Instead, the term "expected" is used to indicate behavior that will lead to this
  experience. For the purposes of conformance for user agents designated as <a>supporting the suggested default rendering</a>, the term "expected" in this
  section has the same conformance implications as the RFC2119-defined term "must".</i>

  <h3 id="introduction"><dfn>Introduction</dfn></h3>

  In general, user agents are expected to support CSS, and many of the suggestions in this
  section are expressed in CSS terms. User agents that use other presentation mechanisms can derive
  their expected behavior by translating from the CSS rules given in this section.

  In the absence of style-layer rules to the contrary (e.g. author style sheets), user agents are
  expected to render an element so that it conveys to the user the meaning that the element
  <a>represents</a>, as described by this specification.

  The suggestions in this section generally assume a visual output medium with a resolution of
  96dpi or greater, but HTML is intended to apply to multiple media (it is a
  <i>media-independent</i> language). User agent implementors are encouraged to adapt the
  suggestions in this section to their target media.

  <hr />

  An element is <dfn>being rendered</dfn> if it has any associated CSS layout boxes, SVG layout
  boxes, or some equivalent in other styling languages.

  <p class="note">
Just being off-screen does not mean the element is not <a>being
  rendered</a>. The presence of the <code>hidden</code> attribute normally
  means the element is not <a>being rendered</a>, though this might be overridden by the style
  sheets.
</p>

  <hr />

  User agents that do not honor author-level CSS style sheets are nonetheless expected to act as
  if they applied the CSS rules given in these sections in a manner consistent with this
  specification and the relevant CSS and Unicode specifications. [[!CSS]] [[!UNICODE]] [[!BIDI]]

  <p class="note">
This is especially important for issues relating to the 'display', 'unicode-bidi',
  and 'direction' properties.
</p>

  <h3 id="the-css-user-agent-style-sheet-and-presentational-hints"><dfn>The CSS user agent style sheet and presentational hints</dfn></h3>

  The CSS rules given in these subsections are, except where otherwise specified, expected to be
  used as part of the user-agent level style sheet defaults for all documents that contain
  <a>HTML elements</a>.

  Some rules are intended for the author-level zero-specificity presentational hints part of the
  CSS cascade; these are explicitly called out as <dfn>presentational hints</dfn>.

  Some of the rules regarding left and right margins are given here as appropriate for elements
  whose 'direction' property is 'ltr', and are expected to be flipped around on elements whose
  'direction' property is 'rtl'. These are marked "<dfn>LTR-specific</dfn>".

  <p class="note">
These markings only affect the handling of attribute <em>values</em>, not
  attribute names or element names.
</p>

  <hr />

  When the text below says that an attribute <var>attribute</var> on an element
  <var>element</var> <dfn>maps to the pixel length property</dfn> (or properties)
  <var>properties</var>, it means that if <var>element</var> has an attribute <var>attribute</var>
  set, and parsing that attribute's value using the <a>rules for parsing non-negative
  integers</a> doesn't generate an error, then the user agent is expected to use the parsed value
  as a pixel length for a <a>presentational hint</a> for
  <var>properties</var>.

  When the text below says that an attribute <var>attribute</var> on an element
  <var>element</var> <dfn>maps to the dimension property</dfn> (or properties)
  <var>properties</var>, it means that if <var>element</var> has an attribute <var>attribute</var>
  set, and parsing that attribute's value using the <a>rules for parsing dimension values</a>
  doesn't generate an error, then the user agent is expected to use the parsed dimension as the
  value for a <a>presentational hint</a> for
  <var>properties</var>, with the value given as a pixel length if the dimension was a length, and
  with the value given as a percentage if the dimension was a percentage.

  When the text below says that an attribute <var>attribute</var> on an element
  <var>element</var> <dfn>maps to the dimension property (ignoring zero)</dfn> (or properties)
  <var>properties</var>, it means that if <var>element</var> has an attribute <var>attribute</var>
  set, and parsing that attribute's value using the <a>rules for parsing non-zero dimension
  values</a> doesn't generate an error, then the user agent is expected to use the parsed
  dimension as the value for a <a>presentational hint</a> for
  <var>properties</var>, with the value given as a pixel length if the dimension was a length, and
  with the value given as a percentage if the dimension was a percentage.

  When a user agent is to <dfn>align descendants</dfn> of a node, the user agent is expected to
  align only those descendants that have both their 'margin-left' and 'margin-right' properties
  computing to a value other than 'auto', that are over-constrained and that have one of those two
  margins with a used value forced to a greater value, and that do not themselves have an applicable
  <code>align</code> attribute. When multiple elements are to <a>align</a> a particular descendant, the most deeply nested such
  element is expected to override the others. Aligned elements are expected to be aligned by having
  the used values of their left and right margins be set accordingly.

  <h3 id="non-replaced-elements"><dfn>Non-replaced elements</dfn></h3>

  <h4 id="hidden-elements"><dfn>Hidden elements</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

<a>[hidden]</a>, area, base, basefont, datalist, head, link, menu[type=context i], meta,
noembed, noframes, param, rp, script, source, style, template, track, title {
  display: none;
}

embed[hidden] { display: inline; height: 0; width: 0; }

input[type=hidden i] { display none ! important; }

@media (scripting) {
  noscript { display: none !important; }
}</pre>

  <h4 id="the-page"><dfn>The page</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

html, body { display: block; }</pre>

  For each property in the table below, given a <code>body</code> element, the first attribute
  that exists <a>maps to the pixel length property</a> on the <code>body</code> element. If
  none of the attributes for a property are found, or if the value of the attribute that was found
  cannot be parsed successfully, then, if the <code>body</code> element's <a>node document</a>'s
  <a>browsing context</a> does not have its <a>seamless browsing context flag</a> set, a
  default value of 8px is expected to be used for that property instead.

  <table>
   <thead>
    <tr>
     <th>Property
     <th>Source
   <tbody>
    <tr>
     <td rowspan="3">'margin-top'
     <td><code>body</code> element's <code>marginheight</code> attribute
    <tr>
     <td>The <code>body</code> element's <a>container frame element</a>'s <code>marginheight</code> attribute
    <tr>
     <td><code>body</code> element's <code>topmargin</code> attribute
   <tbody>
    <tr>
     <td rowspan="3">'margin-right'
     <td><code>body</code> element's <code>marginwidth</code> attribute
    <tr>
     <td>The <code>body</code> element's <a>container frame element</a>'s <code>marginwidth</code> attribute
    <tr>
     <td><code>body</code> element's <code>rightmargin</code> attribute
   <tbody>
    <tr>
     <td rowspan="3">'margin-bottom'
     <td><code>body</code> element's <code>marginheight</code> attribute
    <tr>
     <td>The <code>body</code> element's <a>container frame element</a>'s <code>marginheight</code> attribute
    <tr>
     <td><code>body</code> element's <code>bottommargin</code> attribute
   <tbody>
    <tr>
     <td rowspan="3">'margin-left'
     <td><code>body</code> element's <code>marginwidth</code> attribute
    <tr>
     <td>The <code>body</code> element's <a>container frame element</a>'s <code>marginwidth</code> attribute
    <tr>
     <td><code>body</code> element's <code>leftmargin</code> attribute
  </table>

  If the <code>body</code> element's <a>node document</a>'s <a>browsing context</a> is a
  <a>nested browsing context</a>, and the <a>browsing context container</a> of that
  <a>nested browsing context</a> is a <code>frame</code> or <code>iframe</code> element, then
  the <dfn>container frame element</dfn> of the <code>body</code> element is that <code>frame</code>
  or <code>iframe</code> element. Otherwise, there is no <a>container frame element</a>.

  <p class="warning">The above requirements imply that a page can change the margins of another page
  (including one from another <a>origin</a>) using, for example, an <code>iframe</code>. This
  is potentially a security risk, as it might in some cases allow an attack to contrive a situation
  in which a page is rendered not as the author intended, possibly for the purposes of phishing or
  otherwise misleading the user.</p>

  <hr />

  If a <code>Document</code> is in a <a>nested browsing context</a>, it is expected to be
  positioned and sized to fit inside the content box of its <a>browsing context container</a>.
  If a <a>browsing context</a> is not <a>being rendered</a>, it is expected to have a
  viewport with zero width and zero height.

  If the <code>Document</code> is in a <a>nested browsing context</a>, and the
  <a>browsing context container</a> of that <a>nested browsing context</a> is a
  <code>frame</code> or <code>iframe</code> element, and that element has a <code>scrolling</code> attribute, and that attribute's value is an <a>ASCII
  case-insensitive</a> match for the string "<code>off</code>", "<code>noscroll</code>", or "<code>no</code>", then the user agent is expected to
  prevent any scroll bars from being shown for the viewport of the <a>nested browsing
  context</a>, regardless of the 'overflow' property that applies to that viewport.

  <hr />

  When a <code>body</code> element has a <code>background</code>
  attribute set to a non-empty value, the new value is expected to be <a>resolved</a> relative to the element, and if this is successful, the user agent is
  expected to treat the attribute as a <a>presentational hint</a>
  setting the element's 'background-image' property to the resulting <a>absolute URL</a>.

  When a <code>body</code> element has a <code>bgcolor</code> attribute
  set, the new value is expected to be parsed using the <a>rules for parsing a legacy color
  value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the element's
  'background-color' property to the resulting color.

  When a <code>body</code> element has a <code>text</code> attribute, its
  value is expected to be parsed using the <a>rules for parsing a legacy color value</a>, and
  if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'color' property to
  the resulting color.

  When a <code>body</code> element has a <code>link</code> attribute, its
  value is expected to be parsed using the <a>rules for parsing a legacy color value</a>, and
  if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the 'color' property of any
  element in the <code>Document</code> matching the ':link' pseudo-class to the resulting color.

  When a <code>body</code> element has a <code>vlink</code> attribute,
  its value is expected to be parsed using the <a>rules for parsing a legacy color value</a>,
  and if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the 'color' property of any
  element in the <code>Document</code> matching the ':visited' pseudo-class to the resulting
  color.

  When a <code>body</code> element has an <code>alink</code> attribute,
  its value is expected to be parsed using the <a>rules for parsing a legacy color value</a>,
  and if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the 'color' property of any
  element in the <code>Document</code> matching the ':active' pseudo-class and either the ':link'
  pseudo-class or the ':visited' pseudo-class to the resulting color.

  <h4 id="flow-content"><dfn>Flow content</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

address, blockquote, center, div, figure, figcaption, footer, form, header, hr,
legend, listing, main, p, plaintext, pre, summary, xmp {
  display: block;
}

blockquote, figure, listing, p, plaintext, pre, xmp {
  margin-top: 1em; margin-bottom: 1em;
}

blockquote, figure { margin-left: 40px; margin-right: 40px; }

address { font-style: italic; }
listing, plaintext, pre, xmp {
  font-family: monospace; white-space: pre;
}

dialog:not([open]) { display: none; }
dialog {
  position: absolute;
  left: 0; right: 0;
  width: fit-content;
  height: fit-content;
  margin: auto;
  border: solid;
  padding: 1em;
  background: white;
  color: black;
}
dialog::backdrop {
  position: fixed;
  top: 0; right: 0; bottom: 0; left: 0;
  background: rgba(0,0,0,0.1);
}

/* for small devices, modal dialogs go full-screen */
@media screen and (max-width: 540px) {
  dialog:modal {
    top: 0;
    width: auto;
    margin: 1em;
  }
}
</pre>

  The following rules are also expected to apply, as <a>presentational hints</a>:

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

pre[wrap] { white-space: pre-wrap; }</pre>

  In <a>quirks mode</a>, the following rules are also expected to apply:

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

form { margin-bottom: 1em; }</pre>

  <hr />

  The <code>center</code> element, and the <code>div</code> element when it has an <code>align</code> attribute whose value is an <a>ASCII
  case-insensitive</a> match for either the string "<code>center</code>" or the string
  "<code>middle</code>", are expected to center text within themselves, as if they had
  their 'text-align' property set to 'center' in a <a>presentational hint</a>, and to <a>align descendants</a> to the center.

  The <code>div</code> element, when it has an <code>align</code>
  attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>left</code>", is expected to left-align text within itself, as if it had its
  'text-align' property set to 'left' in a <a>presentational
  hint</a>, and to <a>align descendants</a> to the left.

  The <code>div</code> element, when it has an <code>align</code>
  attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>right</code>", is expected to right-align text within itself, as if it had its
  'text-align' property set to 'right' in a <a>presentational
  hint</a>, and to <a>align descendants</a> to the right.

  The <code>div</code> element, when it has an <code>align</code>
  attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>justify</code>", is expected to full-justify text within itself, as if it had its
  'text-align' property set to 'justify' in a <a>presentational
  hint</a>, and to <a>align descendants</a> to the left.

  <h4 id="phrasing-content"><dfn>Phrasing content</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

cite, dfn, em, i, var { font-style: italic; }
b, strong { font-weight: bolder; }
code, kbd, samp, tt { font-family: monospace; }
big { font-size: larger; }
small { font-size: smaller; }

sub { vertical-align: sub; }
sup { vertical-align: super; }
sub, sup { line-height: normal; font-size: smaller; }

ruby { display: ruby; }
rb   { display: ruby-base; white-space: nowrap; }
rt   {
    display: ruby-text;
    white-space: nowrap;
    font-size: 50%;
    font-variant-east-asian: ruby;
    text-emphasis: none;
}
rbc  { display: ruby-base-container; }
rtc  { display: ruby-text-container; }
ruby, rb, rt, rbc, rtc { unicode-bidi: isolate; }

:link { color: #0000EE; }
:visited { color: #551A8B; }
:link:active, :visited:active { color: #FF0000; }
:link, :visited { text-decoration: underline; cursor: pointer; }
a:link[rel~=help], a:visited[rel~=help],
area:link[rel~=help], area:visited[rel~=help] { cursor: help; }

:focus { outline: auto; }

mark { background: yellow; color: black; } /* this color is just a suggestion and can be changed based on implementation feedback */

abbr[title], acronym[title] { text-decoration: dotted underline; }
ins, u { text-decoration: underline; }
del, s, strike { text-decoration: line-through; }
blink { text-decoration: blink; }

q::before { content: open-quote; }
q::after { content: close-quote; }

<a>br { display-outside: newline; } /* <a>this also has bidi implications</a> */
nobr { white-space: nowrap; }
wbr { display-outside: break-opportunity; } /* <a>this also has bidi implications</a> */
nobr wbr { white-space: normal; }</a></pre>

  The following rules are also expected to apply, as
  <a>presentational hints</a>:

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

br[clear=left i] { clear: left; }
br[clear=right i] { clear: right; }
br[clear=all i], br[clear=both i] { clear: both; }</pre>

  User agents that do not support correct ruby rendering are expected to render parentheses
  around the text of <code>rt</code> elements in the absence of <code>rp</code> elements.
  [[!CSSRUBY]]

  <hr />

  User agents are expected to support the 'clear' property on inline elements (in order to render
  <code>br</code> elements with <code>clear</code> attributes) in the manner
  described in the non-normative note to this effect in CSS2.1.

  The initial value for the 'color' property is expected to be black. The initial value for the
  'background-color' property is expected to be 'transparent'. The canvas' background is expected to
  be white.

  <hr />

  When a <code>font</code> element has a <code>color</code>
  attribute, its value is expected to be parsed using the <a>rules for parsing a legacy color
  value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the
  element's 'color' property to the resulting color.

  The <code>font</code> element is expected to
  override the color of any text decoration that spans the text of the element to the used value of
  the element's 'color' property.

  When a <code>font</code> element has a <code>face</code>
  attribute, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'font-family' property to the attribute's
  value.

  When a <code>font</code> element has a <code>size</code>
  attribute, the user agent is expected to use the following steps, known as the <dfn>rules for
  parsing a legacy font size</dfn>, to treat the attribute as a <a>presentational hint</a> setting the element's 'font-size' property:

  <ol>

   <li>Let <var>input</var> be the attribute's value.</li>

   <li>Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the
   start of the string.</li>

   <li><a>Skip whitespace</a>.</li>

   <li>If <var>position</var> is past the end of <var>input</var>, there is no <a>presentational hint</a>. Abort these steps.</li>

   <li>If the character at <var>position</var> is a U+002B PLUS SIGN character (+), then let
   <var>mode</var> be <i>relative-plus</i>, and advance <var>position</var> to the next character.
   Otherwise, if the character at <var>position</var> is a U+002D HYPHEN-MINUS character (-), then
   let <var>mode</var> be <i>relative-minus</i>, and advance <var>position</var> to the next
   character. Otherwise, let <var>mode</var> be <i>absolute</i>.</li>

   <li><a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and let
   the resulting sequence be <var>digits</var>.</li>

   <li>If <var>digits</var> is the empty string, there is no <a>presentational hint</a>. Abort these steps.</li>

   <li>Interpret <var>digits</var> as a base-ten integer. Let <var>value</var> be the resulting
   number.</li>

   <li>

    If <var>mode</var> is <i>relative-plus</i>, then increment <var>value</var> by 3. If
    <var>mode</var> is <i>relative-minus</i>, then let <var>value</var> be the result of subtracting
    <var>value</var> from 3.

   </li>

   <li>If <var>value</var> is greater than 7, let it be 7.</li>

   <li>If <var>value</var> is less than 1, let it be 1.</li>

   <li>

    Set 'font-size' to the keyword corresponding to the value of <var>value</var> according to
    the following table:

    <table>
     <thead>
      <tr>
       <th><var>value</var>
       <th>'font-size' keyword
       <th>Notes
     <tbody>
      <tr>
       <td>1
       <td>x-small
       <td>
      <tr>
       <td>2
       <td>small
       <td>
      <tr>
       <td>3
       <td>medium
       <td>
      <tr>
       <td>4
       <td>large
       <td>
      <tr>
       <td>5
       <td>x-large
       <td>
      <tr>
       <td>6
       <td>xx-large
       <td>
      <tr>
       <td>7
       <td>xxx-large
       <td><i>see below</i>
    </table>

    <p class="tablenote"><small>The 'xxx-large' value is a non-CSS value used here to
    indicate a font size 50% larger than 'xx-large'.</small></p>

   </li>

  </ol>

  <h4 id="bidirectional-text"><dfn>Bidirectional text</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

[dir]:dir(ltr), bdi:dir(ltr), input[type=tel i]:dir(ltr) { direction: ltr; }
[dir]:dir(rtl), bdi:dir(rtl) { direction: rtl; }

address, blockquote, center, div, figure, figcaption, footer, form, header, hr,
legend, listing, main, p, plaintext, pre, summary, xmp, article, aside, h1, h2,
h3, h4, h5, h6, nav, section, table, caption, colgroup, col, thead,
tbody, tfoot, tr, td, th, dir, dd, dl, dt, menu, ol, ul, li, bdi, output,
[dir=ltr i], [dir=rtl i], [dir=auto i] {
  unicode-bidi: isolate;
}

bdo, bdo[dir] { unicode-bidi: isolate-override; }

input[dir=auto i]:matches([type=search i], [type=tel i], [type=url i],
[type=email i]), textarea[dir=auto i], pre[dir=auto i] {
  unicode-bidi: plaintext;
}
/* see prose for input elements whose type attribute is in the Text state */

/* the <a>rules setting the 'content' property</a> on <code>br</code> and <code>wbr</code> elements also has bidi implications */</pre>

  When an <code>input</code> element's <code>dir</code> attribute is in the
  <a>auto</a> state and its <code>type</code>
  attribute is in the <a>Text</a> state, then the user agent is
  expected to act as if it had a user-agent-level style sheet rule setting the 'unicode-bidi'
  property to 'plaintext'.

  Input fields (i.e. <code>textarea</code> elements, and <code>input</code> elements when their
  <code>type</code> attribute is in the <a>Text</a>, <a>Search</a>,
  <a>Telephone</a>, <a>URL</a>,
  or <a>E-mail</a> state) are expected to present an editing
  user interface with a directionality that matches the element's 'direction' property.

  When the document's character encoding is ISO-8859-8, the following rules are additionally
  expected to apply, following those above: [[!ENCODING]]

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

address, blockquote, center, div, figure, figcaption, footer, form, header, hr,
legend, listing, main, p, plaintext, pre, summary, xmp, article, aside, h1, h2,
h3, h4, h5, h6, nav, section, table, caption, colgroup, col, thead,
tbody, tfoot, tr, td, th, dir, dd, dl, dt, menu, ol, ul, li, [dir=ltr i],
[dir=rtl i], [dir=auto i], *|* {
  unicode-bidi: bidi-override;
}
input:not([type=submit i]):not([type=reset i]):not([type=button i]),
textarea, keygen {
  unicode-bidi: normal;
}</pre>

  <h4 id="quotes"><dfn>Quotes</dfn></h4>

  This block is automatically generated from the Unicode Common Locale Data Repository. <a>\[CLDR]</a>

  User agents are expected to use either the block below (which will be regularly updated) or to
  automatically generate their own copy directly from the source material. The language codes are
  derived from the CLDR file names. The quotes are derived from the <code>delimiter</code>
  blocks, with fallback handled as specified in the CLDR documentation.

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

</pre>

  <h4 id="sections-and-headings"><dfn>Sections and headings</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

article, aside, h1, h2, h3, h4, h5, h6, nav, section {
  display: block;
}

h1 { margin-top: 0.67em; margin-bottom: 0.67em; font-size: 2.00em; font-weight: bold; }
h2 { margin-top: 0.83em; margin-bottom: 0.83em; font-size: 1.50em; font-weight: bold; }
h3 { margin-top: 1.00em; margin-bottom: 1.00em; font-size: 1.17em; font-weight: bold; }
h4 { margin-top: 1.33em; margin-bottom: 1.33em; font-size: 1.00em; font-weight: bold; }
h5 { margin-top: 1.67em; margin-bottom: 1.67em; font-size: 0.83em; font-weight: bold; }
h6 { margin-top: 2.33em; margin-bottom: 2.33em; font-size: 0.67em; font-weight: bold; }</pre>

  In the following CSS block, <var>x</var> is shorthand for the following selector:
  <code>:matches(article, aside, nav, section)</code>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

<var>x</var> h1 { margin-top: 0.83em; margin-bottom: 0.83em; font-size: 1.50em; }
<var>x</var> <var>x</var> h1 { margin-top: 1.00em; margin-bottom: 1.00em; font-size: 1.17em; }
<var>x</var> <var>x</var> <var>x</var> h1 { margin-top: 1.33em; margin-bottom: 1.33em; font-size: 1.00em; }
<var>x</var> <var>x</var> <var>x</var> <var>x</var> h1 { margin-top: 1.67em; margin-bottom: 1.67em; font-size: 0.83em; }
<var>x</var> <var>x</var> <var>x</var> <var>x</var> <var>x</var> h1 { margin-top: 2.33em; margin-bottom: 2.33em; font-size: 0.67em; }</pre>

  <p class="note">
The shorthand is used to keep this block at least mildly readable.
</p>

  <h4 id="lists"><dfn>Lists</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

dir, dd, dl, dt, menu, ol, ul { display: block; }
li { display: list-item; }

dir, dl, menu, ol, ul { margin-top: 1em; margin-bottom: 1em; }

:matches(dir, dl, menu, ol, ul) :matches(dir, dl, menu, ol, ul) {
  margin-top: 0; margin-bottom: 0;
}

dd { margin-left: 40px; } /* <a>LTR-specific</a>: use 'margin-right' for rtl elements */
dir, menu, ol, ul { padding-left: 40px; } /* <a>LTR-specific</a>: use 'padding-right' for rtl elements */

ol { list-style-type: decimal; }

dir, menu, ul {
  list-style-type: disc;
}
:matches(dir, menu, ol, ul) :matches(dir, menu, ul) {
  list-style-type: circle;
}
:matches(dir, menu, ol, ul) :matches(dir, menu, ol, ul) :matches(dir, menu, ul) {
  list-style-type: square;
}</pre>

  The following rules are also expected to apply, as <a>presentational
  hints</a>:

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

ol[type=1], li[type=1] { list-style-type: decimal; }
ol[type=a], li[type=a] { list-style-type: lower-alpha; }
ol[type=A], li[type=A] { list-style-type: upper-alpha; }
ol[type=i], li[type=i] { list-style-type: lower-roman; }
ol[type=I], li[type=I] { list-style-type: upper-roman; }
ul[type=none i], li[type=none i] { list-style-type: none; }
ul[type=disc i], li[type=disc i] { list-style-type: disc; }
ul[type=circle i], li[type=circle i] { list-style-type: circle; }
ul[type=square i], li[type=square i] { list-style-type: square; }</pre>

  In the above stylesheet, the attribute selectors for the
  <code>ol</code> and <code>li</code> elements are expected to be treated as
  <a>case-sensitive</a>.

  When rendering <code>li</code> elements, non-CSS user agents are expected to use the
  <a>ordinal value</a> of the <code>li</code> element to render the counter in the list item
  marker.

  <p class="critical">This specification does not yet define the
  CSS-specific rules for rendering <code>li</code> elements, because CSS doesn't yet provide
  sufficient hooks for this purpose.</p>

  <h4 id="tables"><dfn>Tables</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

table { display: table; }
caption { display: table-caption; }
colgroup, colgroup[hidden] { display: table-column-group; }
col, col[hidden] { display: table-column; }
thead, thead[hidden] { display: table-header-group; }
tbody, tbody[hidden] { display: table-row-group; }
tfoot, tfoot[hidden] { display: table-footer-group; }
tr, tr[hidden] { display: table-row; }
td, th, td[hidden], th[hidden] { display: table-cell; }

colgroup[hidden], col[hidden], thead[hidden], tbody[hidden],
tfoot[hidden], tr[hidden], td[hidden], th[hidden] {
  visibility: collapse;
}

table {
  box-sizing: border-box;
  border-spacing: 2px;
  border-collapse: separate;
  text-indent: initial;
}
td, th { padding: 1px; }
th { font-weight: bold; }

thead, tbody, tfoot, table > tr { vertical-align: middle; }
tr, td, th { vertical-align: inherit; }

table, td, th { border-color: gray; }
thead, tbody, tfoot, tr { border-color: inherit; }
table[rules=none i], table[rules=groups i], table[rules=rows i],
table[rules=cols i], table[rules=all i], table[frame=void i],
table[frame=above i], table[frame=below i], table[frame=hsides i],
table[frame=lhs i], table[frame=rhs i], table[frame=vsides i],
table[frame=box i], table[frame=border i],
table[rules=none i] > tr > td, table[rules=none i] > tr > th,
table[rules=groups i] > tr > td, table[rules=groups i] > tr > th,
table[rules=rows i] > tr > td, table[rules=rows i] > tr > th,
table[rules=cols i] > tr > td, table[rules=cols i] > tr > th,
table[rules=all i] > tr > td, table[rules=all i] > tr > th,
table[rules=none i] > thead > tr > td, table[rules=none i] > thead > tr > th,
table[rules=groups i] > thead > tr > td, table[rules=groups i] > thead > tr > th,
table[rules=rows i] > thead > tr > td, table[rules=rows i] > thead > tr > th,
table[rules=cols i] > thead > tr > td, table[rules=cols i] > thead > tr > th,
table[rules=all i] > thead > tr > td, table[rules=all i] > thead > tr > th,
table[rules=none i] > tbody > tr > td, table[rules=none i] > tbody > tr > th,
table[rules=groups i] > tbody > tr > td, table[rules=groups i] > tbody > tr > th,
table[rules=rows i] > tbody > tr > td, table[rules=rows i] > tbody > tr > th,
table[rules=cols i] > tbody > tr > td, table[rules=cols i] > tbody > tr > th,
table[rules=all i] > tbody > tr > td, table[rules=all i] > tbody > tr > th,
table[rules=none i] > tfoot > tr > td, table[rules=none i] > tfoot > tr > th,
table[rules=groups i] > tfoot > tr > td, table[rules=groups i] > tfoot > tr > th,
table[rules=rows i] > tfoot > tr > td, table[rules=rows i] > tfoot > tr > th,
table[rules=cols i] > tfoot > tr > td, table[rules=cols i] > tfoot > tr > th,
table[rules=all i] > tfoot > tr > td, table[rules=all i] > tfoot > tr > th {
  border-color: black;
}</pre>

  The following rules are also expected to apply, as <a>presentational hints</a>:

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

table[align=left i] { float: left; }
table[align=right i] { float: right; }
table[align=center i] { margin-left: auto; margin-right: auto; }
thead[align=absmiddle i], tbody[align=absmiddle i], tfoot[align=absmiddle i],
tr[align=absmiddle i], td[align=absmiddle i], th[align=absmiddle i] {
  text-align: center;
}

caption[align=bottom i] { caption-side: bottom; }
p[align=left i], h1[align=left i], h2[align=left i], h3[align=left i],
h4[align=left i], h5[align=left i], h6[align=left i] {
  text-align: left;
}
p[align=right i], h1[align=right i], h2[align=right i], h3[align=right i],
h4[align=right i], h5[align=right i], h6[align=right i] {
  text-align: right;
}
p[align=center i], h1[align=center i], h2[align=center i], h3[align=center i],
h4[align=center i], h5[align=center i], h6[align=center i] {
  text-align: center;
}
p[align=justify i], h1[align=justify i], h2[align=justify i], h3[align=justify i],
h4[align=justify i], h5[align=justify i], h6[align=justify i] {
  text-align: justify;
}
thead[valign=top i], tbody[valign=top i], tfoot[valign=top i],
tr[valign=top i], td[valign=top i], th[valign=top i] {
  vertical-align: top;
}
thead[valign=middle i], tbody[valign=middle i], tfoot[valign=middle i],
tr[valign=middle i], td[valign=middle i], th[valign=middle i] {
  vertical-align: middle;
}
thead[valign=bottom i], tbody[valign=bottom i], tfoot[valign=bottom i],
tr[valign=bottom i], td[valign=bottom i], th[valign=bottom i] {
  vertical-align: bottom;
}
thead[valign=baseline i], tbody[valign=baseline i], tfoot[valign=baseline i],
tr[valign=baseline i], td[valign=baseline i], th[valign=baseline i] {
  vertical-align: baseline;
}

td[nowrap], th[nowrap] { white-space: nowrap; }

table[rules=none i], table[rules=groups i], table[rules=rows i],
table[rules=cols i], table[rules=all i] {
  border-style: hidden;
  border-collapse: collapse;
}
table[border] { border-style: outset; } /* <a>only if border is not equivalent to zero</a> */
table[frame=void i] { border-style: hidden; }
table[frame=above i] { border-style: outset hidden hidden hidden; }
table[frame=below i] { border-style: hidden hidden outset hidden; }
table[frame=hsides i] { border-style: outset hidden outset hidden; }
table[frame=lhs i] { border-style: hidden hidden hidden outset; }
table[frame=rhs i] { border-style: hidden outset hidden hidden; }
table[frame=vsides i] { border-style: hidden outset; }
table[frame=box i], table[frame=border i] { border-style: outset; }

table[border] > tr > td, table[border] > tr > th,
table[border] > thead > tr > td, table[border] > thead > tr > th,
table[border] > tbody > tr > td, table[border] > tbody > tr > th,
table[border] > tfoot > tr > td, table[border] > tfoot > tr > th {
  /* <a>only if border is not equivalent to zero</a> */
  border-width: 1px;
  border-style: inset;
}
table[rules=none i] > tr > td, table[rules=none i] > tr > th,
table[rules=none i] > thead > tr > td, table[rules=none i] > thead > tr > th,
table[rules=none i] > tbody > tr > td, table[rules=none i] > tbody > tr > th,
table[rules=none i] > tfoot > tr > td, table[rules=none i] > tfoot > tr > th,
table[rules=groups i] > tr > td, table[rules=groups i] > tr > th,
table[rules=groups i] > thead > tr > td, table[rules=groups i] > thead > tr > th,
table[rules=groups i] > tbody > tr > td, table[rules=groups i] > tbody > tr > th,
table[rules=groups i] > tfoot > tr > td, table[rules=groups i] > tfoot > tr > th,
table[rules=rows i] > tr > td, table[rules=rows i] > tr > th,
table[rules=rows i] > thead > tr > td, table[rules=rows i] > thead > tr > th,
table[rules=rows i] > tbody > tr > td, table[rules=rows i] > tbody > tr > th,
table[rules=rows i] > tfoot > tr > td, table[rules=rows i] > tfoot > tr > th {
  border-width: 1px;
  border-style: none;
}
table[rules=cols i] > tr > td, table[rules=cols i] > tr > th,
table[rules=cols i] > thead > tr > td, table[rules=cols i] > thead > tr > th,
table[rules=cols i] > tbody > tr > td, table[rules=cols i] > tbody > tr > th,
table[rules=cols i] > tfoot > tr > td, table[rules=cols i] > tfoot > tr > th {
  border-width: 1px;
  border-style: none solid;
}
table[rules=all i] > tr > td, table[rules=all i] > tr > th,
table[rules=all i] > thead > tr > td, table[rules=all i] > thead > tr > th,
table[rules=all i] > tbody > tr > td, table[rules=all i] > tbody > tr > th,
table[rules=all i] > tfoot > tr > td, table[rules=all i] > tfoot > tr > th {
  border-width: 1px;
  border-style: solid;
}

table[rules=groups i] > colgroup {
  border-left-width: 1px;
  border-left-style: solid;
  border-right-width: 1px;
  border-right-style: solid;
}
table[rules=groups i] > thead,
table[rules=groups i] > tbody,
table[rules=groups i] > tfoot {
  border-top-width: 1px;
  border-top-style: solid;
  border-bottom-width: 1px;
  border-bottom-style: solid;
}

table[rules=rows i] > tr, table[rules=rows i] > thead > tr,
table[rules=rows i] > tbody > tr, table[rules=rows i] > tfoot > tr {
  border-top-width: 1px;
  border-top-style: solid;
  border-bottom-width: 1px;
  border-bottom-style: solid;
}</pre>

  In <a>quirks mode</a>, the following rules are also expected to apply:

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

table {
  font-weight: initial;
  font-style: initial;
  font-variant: initial;
  font-size: initial;
  line-height: initial;
  white-space: initial;
  text-align: initial;
}</pre>

  <hr />

  For the purposes of the CSS table model, the <code>col</code> element is expected to be treated
  as if it was present as many times as its <code>span</code> attribute <a>specifies</a>.

  For the purposes of the CSS table model, the <code>colgroup</code> element, if it contains no
  <code>col</code> element, is expected to be treated as if it had as many such children as its
  <code>span</code> attribute <a>specifies</a>.

  For the purposes of the CSS table model, the <code>colspan</code> and
  <code>rowspan</code> attributes on <code>td</code> and <code>th</code>
  elements are expected to <a>provide</a> the
  <i>special knowledge</i> regarding cells spanning rows and columns.

  In <a>HTML documents</a>, the following rules are also expected to apply:

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

:matches(table, thead, tbody, tfoot, tr) > form {  display: none !important; }</pre>

  <hr />

  The <code>table</code> element's <code>cellspacing</code>
  attribute <a>maps to the pixel length property</a> 'border-spacing' on the element.

  The <code>table</code> element's <code>cellpadding</code>
  attribute <a>maps to the pixel length
  properties</a> 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' of any
  <code>td</code> and <code>th</code> elements that have corresponding <a>cells</a> in the <a>table</a> corresponding to
  the <code>table</code> element.

  The <code>table</code> element's <code>hspace</code> attribute <a>maps to the dimension properties</a> 'margin-left' and
  'margin-right' on the <code>table</code> element.

  The <code>table</code> element's <code>vspace</code> attribute <a>maps to the dimension properties</a> 'margin-top' and
  'margin-bottom' on the <code>table</code> element.

  The <code>table</code> element's <code>height</code> attribute
  <a>maps to the dimension property (ignoring zero)</a> 'height' on the <code>table</code>
  element.

  The <code>table</code> element's <code>width</code> attribute
  <a>maps to the dimension property (ignoring zero)</a> 'width' on the <code>table</code>
  element.

  The <code>col</code> element's <code>width</code> attribute <a>maps
  to the dimension property (ignoring zero)</a> 'width' on the <code>col</code> element.

  The <code>tr</code> element's <code>height</code> attribute <a>maps
  to the dimension property (ignoring zero)</a> 'height' on the <code>tr</code> element.

  The <code>td</code> and <code>th</code> elements' <code>height</code>
  attributes <a>map to the dimension
  property (ignoring zero)</a> 'height' on the element.

  The <code>td</code> and <code>th</code> elements' <code>width</code>
  attributes <a>map to the dimension
  property (ignoring zero)</a> 'width' on the element.

  <hr />

  The <code>caption</code> element unless specified otherwise below, and the <code>thead</code>,
  <code>tbody</code>, <code>tfoot</code>, <code>tr</code>, <code>td</code>, and <code>th</code>
  elements when they have an <code>align</code> attribute whose value is an <a>ASCII
  case-insensitive</a> match for either the string "<code>center</code>" or the string
  "<code>middle</code>", are expected to center text within themselves, as if they had
  their 'text-align' property set to 'center' in a <a>presentational hint</a>, and to <a>align descendants</a> to the center.

  The <code>caption</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, and <code>th</code> elements, when they have an <code>align</code> attribute whose value is an <a>ASCII case-insensitive</a> match for
  the string "<code>left</code>", are expected to left-align text within themselves, as if
  they had their 'text-align' property set to 'left' in a <a>presentational hint</a>, and to <a>align descendants</a> to the left.

  The <code>caption</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, and <code>th</code> elements, when they have an <code>align</code> attribute whose value is an <a>ASCII case-insensitive</a> match for
  the string "<code>right</code>", are expected to right-align text within themselves, as
  if they had their 'text-align' property set to 'right' in a <a>presentational hint</a>, and to <a>align descendants</a> to the right.

  The <code>caption</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, and <code>th</code> elements, when they have an <code>align</code> attribute whose value is an <a>ASCII case-insensitive</a> match for
  the string "<code>justify</code>", are expected to full-justify text within themselves,
  as if they had their 'text-align' property set to 'justify' in a <a>presentational hint</a>, and to <a>align descendants</a> to the left.

  User agents are expected to have a rule in their user agent stylesheet that matches
  <code>th</code> elements that have a parent node whose computed value for the 'text-align'
  property is its initial value, whose declaration block consists of just a single declaration that
  sets the 'text-align' property to the value 'center'.

  <hr />

  When a <code>table</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, or <code>th</code> element has a <code>background</code> attribute set to a non-empty value, the new value is
  expected to be <a>resolved</a> relative to the element, and if this is
  successful, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'background-image' property to the
  resulting <a>absolute URL</a>.

  When a <code>table</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, or <code>th</code> element has a <code>bgcolor</code>
  attribute set, the new value is expected to be parsed using the <a>rules for parsing a legacy
  color value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the element's
  'background-color' property to the resulting color.

  When a <code>table</code> element has a <code>bordercolor</code>
  attribute, its value is expected to be parsed using the <a>rules for parsing a legacy color
  value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the element's
  'border-top-color', 'border-right-color', 'border-bottom-color', and 'border-left-color'
  properties to the resulting color.

  <hr />

  The <code>table</code> element's <code>border</code> attribute <a>maps to the pixel length properties</a>
  'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width' on the
  element. If the attribute is present but parsing the attribute's value using the <a>rules for
  parsing non-negative integers</a> generates an error, a default value of 1px is expected to be
  used for that property instead.

  Rules marked "<dfn>only if border is not equivalent to zero</dfn>"
  in the CSS block above is expected to only be applied if the <code>border</code> attribute mentioned in the selectors for the rule is not
  only present but, when parsed using the <a>rules for parsing non-negative integers</a>, is
  also found to have a value other than zero or to generate an error.

  <hr />

  In <a>quirks mode</a>, a <code>td</code> element or a <code>th</code> element that has a
  <code>nowrap</code> attribute but also has a <code>width</code> attribute whose value, when parsed using the <a>rules for
  parsing non-zero dimension values</a>, is found to be a length (not an error or a number
  classified as a percentage), is expected to have a <a>presentational hint</a> setting the element's 'white-space' property to 'normal',
  overriding the rule in the CSS block above that sets it to 'nowrap'.

  <hr />

  User agents are expected to render <a>sorting interface <code>th</code> elements</a> in such a manner as to indicate that
  activating the elements will cause the table to be sorted.

  <h4 id="margin-collapsing-quirks"><dfn>Margin collapsing quirks</dfn></h4>

  A node is <dfn>substantial</dfn> if it is a text node
  that is not <a>inter-element whitespace</a>, or if it is an element node.

  A node is <dfn>blank</dfn> if it is an element that contains no
  <a>substantial</a> nodes.

  The <dfn>elements with default margins</dfn>
  are the following elements: <code>blockquote</code>, <code>dir</code>, <code>dl</code>,
  <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>,
  <code>h6</code>, <code>listing</code>, <code>menu</code>, <code>ol</code>,
  <code>p</code>, <code>plaintext</code>, <code>pre</code>, <code>ul</code>, <code>xmp</code>

  In <a>quirks mode</a>, any <a>element
  with default margins</a> that is the child of a <code>body</code>, <code>td</code>, or
  <code>th</code> element and has no <a>substantial</a>
  previous siblings is expected to have a user-agent level style sheet rule that sets its
  'margin-top' property to zero.

  In <a>quirks mode</a>, any <a>element
  with default margins</a> that is the child of a <code>body</code>, <code>td</code>, or
  <code>th</code> element, has no <a>substantial</a>
  previous siblings, and is <a>blank</a>, is expected to have
  a user-agent level style sheet rule that sets its 'margin-bottom' property to zero also.

  In <a>quirks mode</a>, any <a>element
  with default margins</a> that is the child of a <code>td</code> or <code>th</code> element, has
  no <a>substantial</a> following siblings, and is <a>blank</a>, is expected to have a user-agent level style sheet
  rule that sets its 'margin-top' property to zero.

  In <a>quirks mode</a>, any <code>p</code> element that is the child of a <code>td</code>
  or <code>th</code> element and has no <a>substantial</a> following siblings, is expected to have a
  user-agent level style sheet rule that sets its 'margin-bottom' property to zero.

  <h4 id="form-controls"><dfn>Form controls</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

input, select, option, optgroup, button, textarea, keygen {
  text-indent: initial;
}

input:matches([type=radio i], [type=checkbox i], [type=reset i], [type=button i],
[type=submit i], [type=search i]), select, button {
  box-sizing: border-box;
}</pre>

  In <a>quirks mode</a>, the following rules are also expected to apply:

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

input:not([type=image i]), textarea { box-sizing: border-box; }</pre>

  Each kind of form control is also given a specific default binding, as described in subsequent
  sections, which implements the look and feel of the control.

  <h4 id="the-hr-element"><dfn>The <code>hr</code> element</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

hr { color: gray; border-style: inset; border-width: 1px; margin: 0.5em auto; }</pre>

  The following rules are also expected to apply, as <a>presentational hints</a>:

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

hr[align=left] { margin-left: 0; margin-right: auto; }
hr[align=right] { margin-left: auto; margin-right: 0; }
hr[align=center] { margin-left: auto; margin-right: auto; }
hr[color], hr[noshade] { border-style: solid; }</pre>

  If an <code>hr</code> element has either a <code>color</code> attribute
  or a <code>noshade</code> attribute, and furthermore also has a <code>size</code> attribute, and parsing that attribute's value using the
  <a>rules for parsing non-negative integers</a> doesn't generate an error, then the user
  agent is expected to use the parsed value divided by two as a pixel length for
  <a>presentational hints</a> for the properties 'border-top-width', 'border-right-width',
  'border-bottom-width', and 'border-left-width' on the element.

  Otherwise, if an <code>hr</code> element has neither a <code>color</code>
  attribute nor a <code>noshade</code> attribute, but does have a <code>size</code> attribute, and parsing that attribute's value using the
  <a>rules for parsing non-negative integers</a> doesn't generate an error, then: if the
  parsed value is one, then the user agent is expected to use the attribute as a <a>presentational hint</a> setting the element's
  'border-bottom-width' to 0; otherwise, if the parsed value is greater than one, then the user
  agent is expected to use the parsed value minus two as a pixel length for <a>presentational
  hints</a> for the 'height' property on the element.

  The <code>width</code> attribute on an <code>hr</code> element <a>maps
  to the dimension property</a> 'width' on the element.

  When an <code>hr</code> element has a <code>color</code> attribute, its
  value is expected to be parsed using the <a>rules for parsing a legacy color value</a>, and
  if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'color' property to
  the resulting color.

  <h4 id="the-fieldset-and-legend-elements"><dfn>The <code>fieldset</code> and <code>legend</code> elements</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

fieldset {
  display: block;
  margin-left: 2px; margin-right: 2px;
  border: groove 2px ThreeDFace;
  padding: 0.35em 0.625em 0.75em;
  min-width: min-content;
}

legend {
  padding-left: 2px; padding-right: 2px;
}</pre>

  The <code>fieldset</code> element is expected to establish a new block formatting context.

  If the <code>fieldset</code> element has a child that matches the conditions in the list below,
  then the first such child is the <code>fieldset</code> element's <dfn>rendered legend</dfn>:

  <ul class="brief">

   <li>The child is a <code>legend</code> element.</li>

   <li>The child is not out-of-flow (e.g. not absolutely positioned or floated).</li>

   <li>The child is generating a box (e.g. it is not 'display:none').</li>

  </ul>

  A <code>fieldset</code> element's <a>rendered legend</a>, if any, is expected to be
  rendered over the top border edge of the <code>fieldset</code> element as a 'block' box
  (overriding any explicit 'display' value). In the absence of an explicit width, the box should
  shrink-wrap. If the <code>legend</code> element in question has an <code>align</code> attribute, and its value is an <a>ASCII
  case-insensitive</a> match for one of the strings in the first column of the following table,
  then the <code>legend</code> is expected to be rendered horizontally aligned over the border edge
  in the position given in the corresponding cell on the same row in the second column. If the
  attribute is absent or has a value that doesn't match any of the cases in the table, then the
  position is expected to be on the right if the 'direction' property on this element has a computed
  value of 'rtl', and on the left otherwise.

  <table>
   <thead>
    <tr>
     <th>Attribute value
     <th>Alignment position
   <tbody>
    <tr>
     <td><code>left</code>
     <td>On the left
    <tr>
     <td><code>right</code>
     <td>On the right
    <tr>
     <td><code>center</code>
     <td>In the middle
  </table>

  <h3 id="replaced-elements"><dfn>Replaced elements</dfn></h3>

  <h4 id="embedded-content"><dfn>Embedded content</dfn></h4>

  The <code>embed</code>, <code>iframe</code>, and <code>video</code> elements are expected to be
  treated as <a>replaced elements</a>.

  A <code>canvas</code> element that <a>represents</a> <a>embedded content</a> is
  expected to be treated as a <a>replaced element</a>; the contents of such elements are the
  element's bitmap, if any, or else a transparent black bitmap with the same <a>intrinsic
  dimensions</a> as the element. Other <code>canvas</code> elements are expected to be treated
  as ordinary elements in the rendering model.

  An <code>object</code> element that <a>represents</a> an image, plugin, or <a>nested
  browsing context</a> is expected to be treated as a <a>replaced element</a>. Other
  <code>object</code> elements are expected to be treated as ordinary elements in the rendering
  model.

  An <code>applet</code> element that <a>represents</a> a <a>plugin</a> is expected
  to be treated as a <a>replaced element</a>. Other <code>applet</code> elements are expected
  to be treated as ordinary elements in the rendering model.

  The <code>audio</code> element, when it is <a>exposing a user interface</a>, is expected to be treated as a
  <a>replaced element</a> about one line high, as wide as is necessary to expose the user
  agent's user interface features. When an <code>audio</code> element is not <a>exposing a user interface</a>, the user agent is expected to force
  its 'display' property to compute to 'none', irrespective of CSS rules.

  Whether a <code>video</code> element is <a>exposing a user interface</a> is not expected to affect the size of the rendering;
  controls are expected to be overlaid above the page content without causing any layout changes,
  and are expected to disappear when the user does not need them.

  When a <code>video</code> element represents a poster frame or frame of video, the poster frame
  or frame of video is expected to be rendered at the largest size that maintains the aspect ratio
  of that poster frame or frame of video without being taller or wider than the <code>video</code>
  element itself, and is expected to be centered in the <code>video</code> element.

  Any subtitles or captions are expected to be overlayed directly on top of their
  <code>video</code> element, as defined by the relevant rendering rules; for WebVTT, those are the
  <a>rules for updating the display of WebVTT text tracks</a>. [[!WEBVTT]]

  When the user agent starts <a>exposing a user
  interface</a> for a <code>video</code> element, the user agent should run the <a>rules for
  updating the text track rendering</a> of each of the <a>text
  tracks</a> in the <code>video</code> element's <a>list of text tracks</a> that are <a>showing</a> and whose <a>text track kind</a> is one of <code>subtitles</code> or <code>captions</code> (e.g., for <a>text
  tracks</a> based on <a>WebVTT</a>, the <a>rules for updating the display of WebVTT
  text tracks</a>). [[!WEBVTT]]

  <p class="note">
Resizing <code>video</code> and <code>canvas</code> elements does not interrupt
  video playback or clear the canvas.
</p>

  <hr />

  The following CSS rules are expected to apply:

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

iframe:not([seamless]) { border: 2px inset; }
iframe[seamless] { display: block; }
<a>video { object-fit: contain; }</a></pre>

  <h4 id="images"><dfn>Images</dfn></h4>

  User agents are expected to render <code>img</code> elements and <code>input</code> elements
  whose <code>type</code> attributes are in the <a>Image Button</a> state, according to the first applicable rules
  from the following list:

  <dl class="switch">

   <dt>If the element <a>represents</a> an image</dt>

   <dd>The user agent is expected to treat the element as a <a>replaced element</a> and
   render the image according to the rules for doing so defined in CSS.</dd>

   <dt>

    If the element does not <a>represent</a> an image, but the element
    already has <a>intrinsic dimensions</a> (e.g. from the <a>dimension attributes</a>
    or CSS rules), and either:

    <ul>

     <li>the user agent has reason to believe that the image will become <i>available</i> and be rendered in due
     course, or

     <li>the element has no <code>alt</code> attribute, or

     <li>the <code>Document</code> is in <a>quirks mode</a>

    </ul>

   </dt>

   <dd>The user agent is expected to treat the element as a <a>replaced element</a> whose
   content is the text that the element represents, if any, optionally alongside an icon indicating
   that the image is being obtained (if applicable). For <code>input</code> elements, the element
   is expected to appear button-like to indicate that the element is a <a>button</a>.</dd>

   <dt>If the element is an <code>img</code> element that <a>represents</a> some text and the
   user agent does not expect this to change</dt>

   <dd>The user agent is expected to treat the element as a non-replaced phrasing element whose
   content is the text, optionally with an icon indicating that an image is missing, so that the
   user can request the image be displayed or investigate why it is not rendering. In non-graphical
   contexts, such an icon should be omitted.</dd>

   <dt>If the element is an <code>img</code> element that <a>represents</a> nothing and the
   user agent does not expect this to change</dt>

   <dd>The user agent is expected to treat the element as an empty inline element. (In the absence
   of further styles, this will cause the element to essentially not be rendered.)</dd>

   <dt>If the element is an <code>input</code> element that does not <a>represent</a> an image and the user agent does not expect this to change</dt>

   <dd>The user agent is expected to treat the element as a <a>replaced element</a>
   consisting of a button whose content is the element's alternative text. The <a>intrinsic
   dimensions</a> of the button are expected to be about one line in height and whatever width
   is necessary to render the text on one line.</dd>

  </dl>

  The icons mentioned above are expected to be relatively small so as not to disrupt most text
  but be easily clickable. In a visual environment, for instance, icons could be 16 pixels by 16
  pixels square, or 1em by 1em if the images are scalable. In an audio environment, the icon could
  be a short bleep. The icons are intended to indicate to the user that they can be used to get to
  whatever options the UA provides for images, and, where appropriate, are expected to provide
  access to the context menu that would have come up if the user interacted with the actual
  image.

  <hr />

  All animated images with the same <a>absolute URL</a> and the same image data are
  expected to be rendered synchronized to the same timeline as a group, with the timeline starting
  at the time of the least recent addition to the group.

  <p class="note">
In other words, when a second image with the same <a>absolute URL</a> and
  animated image data is inserted into a document, it jumps to the point in the animation cycle that
  is currently being displayed by the first image.
</p>

  When a user agent is to <dfn>restart the animation</dfn> for an <code>img</code> element
  showing an animated image, all animated images with the same <a>absolute URL</a> and the
  same image data in that <code>img</code> element's <a>node document</a> are expected to restart
  their animation from the beginning.

  <hr />

  The following CSS rules are expected to apply when the <code>Document</code> is in <a>quirks
  mode</a>:

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

img[align=left i] { margin-right: 3px; }
img[align=right i] { margin-left: 3px; }</pre>

  </div>

  <div class="impl">

  <h4 id="attributes-for-embedded-content-and-images"><dfn>Attributes for embedded content and images</dfn></h4>

  The following CSS rules are expected to apply as <a>presentational hints</a>:

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

iframe[frameborder=0], iframe[frameborder=no i] { border: none; }

applet[align=left i], embed[align=left i], iframe[align=left i],
img[align=left i], input[type=image i][align=left i], object[align=left i] {
  float: left;
}

applet[align=right i], embed[align=right i], iframe[align=right i],
img[align=right i], input[type=image i][align=right i], object[align=right i] {
  float: right;
}

applet[align=top i], embed[align=top i], iframe[align=top i],
img[align=top i], input[type=image i][align=top i], object[align=top i] {
  vertical-align: top;
}

applet[align=baseline i], embed[align=baseline i], iframe[align=baseline i],
img[align=baseline i], input[type=image i][align=baseline i], object[align=baseline i] {
  vertical-align: baseline;
}

applet[align=texttop i], embed[align=texttop i], iframe[align=texttop i],
img[align=texttop i], input[type=image i][align=texttop i], object[align=texttop i] {
  vertical-align: text-top;
}

applet[align=absmiddle i], embed[align=absmiddle i], iframe[align=absmiddle i],
img[align=absmiddle i], input[type=image i][align=absmiddle i], object[align=absmiddle i],
applet[align=abscenter i], embed[align=abscenter i], iframe[align=abscenter i],
img[align=abscenter i], input[type=image i][align=abscenter i], object[align=abscenter i] {
  vertical-align: middle;
}

applet[align=bottom i], embed[align=bottom i], iframe[align=bottom i],
img[align=bottom i], input[type=image i][align=bottom i],
object[align=bottom i] {
  vertical-align: bottom;
}</pre>

  When an <code>applet</code>, <code>embed</code>, <code>iframe</code>, <code>img</code>, or
  <code>object</code> element, or an <code>input</code> element whose <code>type</code> attribute is in the <a>Image Button</a> state, has an <code>align</code>
  attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>center</code>" or the string "<code>middle</code>", the user agent is expected
  to act as if the element's 'vertical-align' property was set to a value that aligns the vertical
  middle of the element with the parent element's baseline.

  The <code>hspace</code> attribute of <code>applet</code>, <code>embed</code>,
  <code>iframe</code>, <code>img</code>, or <code>object</code> elements, and <code>input</code>
  elements with a <code>type</code> attribute in the <a>Image Button</a> state, <a>maps to the dimension properties</a> 'margin-left' and 'margin-right' on the
  element.

  The <code>vspace</code> attribute of <code>applet</code>, <code>embed</code>,
  <code>iframe</code>, <code>img</code>, or <code>object</code> elements, and <code>input</code>
  elements with a <code>type</code> attribute in the <a>Image Button</a> state, <a>maps to the dimension properties</a> 'margin-top' and 'margin-bottom' on the
  element.

  When an <code>img</code> element, <code>object</code> element, or <code>input</code> element
  with a <code>type</code> attribute in the <a>Image Button</a> state has a <code>border</code> attribute whose value, when parsed using the <a>rules for
  parsing non-negative integers</a>, is found to be a number greater than zero, the user agent is
  expected to use the parsed value for eight <a>presentational hints</a>: four setting the
  parsed value as a pixel length for the element's 'border-top-width', 'border-right-width',
  'border-bottom-width', and 'border-left-width' properties, and four setting the element's
  'border-top-style', 'border-right-style', 'border-bottom-style', and 'border-left-style'
  properties to the value 'solid'.

  The <code>width</code> and <code>height</code> attributes on <code>applet</code>, <code>embed</code>,
  <code>iframe</code>, <code>img</code>, <code>object</code> or <code>video</code> elements, and
  <code>input</code> elements with a <code>type</code> attribute in the
  <a>Image Button</a> state and that either represents an image
  or that the user expects will eventually represent an image, <a>map to the dimension properties</a> 'width' and 'height' on the element
  respectively.

  </div>

  <div class="impl">

  <h4 id="image-maps"><dfn>Image maps</dfn></h4>

  Shapes on an <a>image map</a> are expected to act, for the purpose of the CSS cascade, as
  elements independent of the original <code>area</code> element that happen to match the same style
  rules but inherit from the <code>img</code> or <code>object</code> element.

  For the purposes of the rendering, only the 'cursor' property is expected to have any effect on
  the shape.

  <p class="example">
Thus, for example, if an <code>area</code> element has a <code>style</code> attribute that sets the 'cursor' property to 'help', then when the
  user designates that shape, the cursor would change to a Help cursor.
</p>

  <p class="example">
Similarly, if an <code>area</code> element had a CSS rule that set its 'cursor'
  property to 'inherit' (or if no rule setting the 'cursor' property matched the element at all),
  the shape's cursor would be inherited from the <code>img</code> or <code>object</code> element of
  the <a>image map</a>, not from the parent of the <code>area</code> element.
</p>

  </div>

  <div class="impl">

  <h3 id="bindings"><dfn>Bindings</dfn></h3>

  <h4 id="introduction"><dfn>Introduction</dfn></h4>

  A number of elements have their rendering defined in terms of the 'binding' property. <a>\[BECSS]</a>

  The CSS snippets below set the 'binding' property to a user-agent-defined value, represented
  below by keywords like <code><i>button</i></code>. The rules then described for
  these bindings are only expected to apply if the element's 'binding' property has not been
  overridden (e.g. by the author) to have another value.

  Exactly how the bindings are implemented is not specified by this specification. User agents
  are encouraged to make their bindings set the 'appearance' CSS property appropriately to achieve
  platform-native appearances for widgets, and are expected to implement any relevant animations,
  etc, that are appropriate for the platform. [[!CSSUI]]

  </div>

  <div class="impl">

  <h4 id="the-button-element"><dfn>The <code>button</code> element</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

button { binding: <i>button</i>; }</pre>

  When the <i>button</i> binding applies to a <code>button</code> element, the element
  is expected to render as an 'inline-block' box rendered as a button whose contents are the
  contents of the element.

  When the <code>button</code> element's <code>type</code> attribute is
  in the <a>Menu</a> state, the user agent is expected to
  indicate that activating the element will display a menu, e.g. by displaying a down-pointing
  triangle after the button's label.

  </div>

  <div class="impl">

  <h4 id="the-details-element"><dfn>The <code>details</code> element</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

details { binding: <i>details</i>; }</pre>

  When the <i>details</i> binding applies to a <code>details</code> element, the element
  is expected to render as a 'block' box with its 'padding-left' property set to '40px' for
  left-to-right elements (<a>LTR-specific</a>) and with its 'padding-right' property set to
  '40px' for right-to-left elements. The element's shadow tree is expected to take the element's
  first child <code>summary</code> element, if any, and place it in a first 'block' box container,
  and then take the element's remaining descendants, if any, and place them in a second 'block' box
  container.

  The first container is expected to contain at least one line box, and that line box is expected
  to contain a disclosure widget (typically a triangle), horizontally positioned within the left
  padding of the <code>details</code> element. That widget is expected to allow the user to request
  that the details be shown or hidden.

  The second container is expected to have its 'overflow' property set to 'hidden'. When the
  <code>details</code> element does not have an <code>open</code>
  attribute, this second container is expected to be removed from the rendering.

  </div>

  <div class="impl">

  <h4 id="the-input-element-as-a-text-entry-widget"><dfn>The <code>input</code> element as a text entry widget</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

input { binding: <i>input-textfield</i>; }
input[type=password i] { binding: <i>input-password</i>; }
/* later rules override this for other values of type="" */</pre>

  When the <i>input-textfield</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Text</a>, <a>Search</a>,
  <a>Telephone</a>, <a>URL</a>,
  or <a>E-mail</a> state, the element is expected to render as
  an 'inline-block' box rendered as a text field.

  When the <i>input-password</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Password</a> state, the element is expected to render as an
  'inline-block' box rendered as a text field whose contents are obscured.

  If these text fields provide a text selection, then, when the user changes the currect
  selection in such a binding, the user agent is expected to <a>queue a task</a> to <a>fire
  a simple event</a> that bubbles named <code>select</code> at the element,
  using the <a>user interaction task source</a> as the task source.

  If an <code>input</code> element whose <code>type</code> attribute is
  in one of the above states has a <code>size</code> attribute, and parsing
  that attribute's value using the <a>rules for parsing non-negative integers</a> doesn't
  generate an error, then the user agent is expected to use the attribute as a <a>presentational hint</a> for the 'width' property on the element,
  with the value obtained from applying the <a>converting a character width to pixels</a>
  algorithm to the value of the attribute.

  If an <code>input</code> element whose <code>type</code> attribute is
  in one of the above states does <em>not</em> have a <code>size</code>
  attribute, then the user agent is expected to act as if it had a user-agent-level style sheet rule
  setting the 'width' property on the element to the value obtained from applying the
  <a>converting a character width to pixels</a> algorithm to the number 20.

  The <dfn>converting a character width to pixels</dfn> algorithm returns <a>(<var>size</var>-1)&times;<var>avg</var>&nbsp;+&nbsp;<var>max</var></a>,
  where <var>size</var> is the character width to convert, <var>avg</var> is the
  average character width of the primary font for the element for which the algorithm is being run,
  in pixels, and <var>max</var> is the maximum character width of that same font, also in
  pixels. (The element's 'letter-spacing' property does not affect the result.)

  When the <i>input-textfield</i> binding applies to an element, the 'line-height'
  property, if it has a computed value equivalent to a value that is less than 1.0, must have a used
  value of 1.0.

  </div>

  <div class="impl">

  <h4 id="the-input-element-as-domain-specific-widgets"><dfn>The <code>input</code> element as domain-specific widgets</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

input[type=datetime i] { binding: <i>input-datetime</i>; }
input[type=date i] { binding: <i>input-date</i>; }
input[type=month i] { binding: <i>input-month</i>; }
input[type=week i] { binding: <i>input-week</i>; }
input[type=time i] { binding: <i>input-time</i>; }
input[type=datetime-local i] { binding: <i>input-datetime-local</i>; }
input[type=number i] { binding: <i>input-number</i>; }</pre>

  When the <i>input-datetime</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Date and Time</a> state, the element is expected to render as
  an 'inline-block' box depicting a Date and Time control.

  When the <i>input-date</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Date</a> state, the element is expected to render as an
  'inline-block' box depicting a Date control.

  When the <i>input-month</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Month</a> state, the element is expected to render as an
  'inline-block' box depicting a Month control.

  When the <i>input-week</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Week</a> state, the element is expected to render as an
  'inline-block' box depicting a Week control.

  When the <i>input-time</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Time</a> state, the element is expected to render as an
  'inline-block' box depicting a Time control.

  When the <i>input-datetime-local</i> binding applies to an <code>input</code> element
  whose <code>type</code> attribute is in the <a>Local Date and Time</a> state, the element is expected
  to render as an 'inline-block' box depicting a Local Date and Time control.

  When the <i>input-number</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Number</a> state, the element is expected to render as an
  'inline-block' box depicting a Number control.

  These controls are all expected to be about one line high, and about as wide as necessary to
  show the widest possible value.

  </div>

  <div class="impl">

  <h4 id="the-input-element-as-a-range-control"><dfn>The <code>input</code> element as a range control</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

input[type=range i] { binding: <i>input-range</i>; }</pre>

  When the <i>input-range</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Range</a> state, the element is expected to render as an
  'inline-block' box depicting a slider control.

  When the control is wider than it is tall (or square), the control is expected to be a
  horizontal slider, with the lowest value on the right if the 'direction' property on this element
  has a computed value of 'rtl', and on the left otherwise. When the control is taller than it is
  wide, it is expected to be a vertical slider, with the lowest value on the bottom.

  Predefined suggested values (provided by the <code>list</code>
  attribute) are expected to be shown as tick marks on the slider, which the slider can snap to.

  User agents are expected to use the used value of the 'direction' property on the element to
  determine the direction in which the slider operates. Typically, a left-to-right ('ltr')
  horizontal control would have the lowest value on the left and the highest value on the right, and
  vice versa.

  </div>

  <div class="impl">

  <h4 id="the-input-element-as-a-color-well"><dfn>The <code>input</code> element as a color well</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

input[type=color i] { binding: <i>input-color</i>; }</pre>

  When the <i>input-color</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Color</a> state, the element is expected to render as an
  'inline-block' box depicting a color well, which, when activated, provides the user with a color
  picker (e.g. a color wheel or color palette) from which the color can be changed.

  Predefined suggested values (provided by the <code>list</code>
  attribute) are expected to be shown in the color picker interface, not on the color well
  itself.

  </div>

  <div class="impl">

  <h4 id="the-input-element-as-a-checkbox-and-radio-button-widgets"><dfn>The <code>input</code> element as a checkbox and radio button widgets</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

input[type=checkbox i] { binding: <i>input-checkbox</i>; }
input[type=radio i] { binding: <i>input-radio</i>; }</pre>

  When the <i>input-checkbox</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Checkbox</a> state, the element is expected to render as an
  'inline-block' box containing a single checkbox control, with no label.

  When the <i>input-radio</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Radio Button</a> state, the element is expected to render as an
  'inline-block' box containing a single radio button control, with no label.

  </div>

  <div class="impl">

  <h4 id="the-input-element-as-a-file-upload-control"><dfn>The <code>input</code> element as a file upload control</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

input[type=file i] { binding: <i>input-file</i>; }</pre>

  When the <i>input-file</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>File Upload</a> state, the element is expected to render as an
  'inline-block' box containing a span of text giving the file name(s) of the <a>selected files</a>, if any, followed by a button that,
  when activated, provides the user with a file picker from which the selection can be changed.

  </div>

  <div class="impl">

  <h4 id="the-input-element-as-a-button"><dfn>The <code>input</code> element as a button</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

input[type=submit i], input[type=reset i], input[type=button i] {
  binding: <i>input-button</i>;
}</pre>

  When the <i>input-button</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Submit Button</a>, <a>Reset
  Button</a>, or <a>Button</a> state, the element is
  expected to render as an 'inline-block' box rendered as a button, about one line high, containing
  the contents of the element's <code>value</code> attribute, if any, or
  text derived from the element's <code>type</code> attribute in a
  user-agent-defined (and probably locale-specific) fashion, if not.

  </div>

  <div class="impl">

  <h4 id="the-marquee-element"><dfn>The <code>marquee</code> element</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

marquee { binding: <i>marquee</i>; }</pre>

  When the <i>marquee</i> binding applies to a <code>marquee</code> element, while the
  element is <a>turned on</a>, the element is expected to render in
  an animated fashion according to its attributes as follows:

  <dl>

   <dt>If the element's <code>behavior</code> attribute is in the
   <a>scroll</a> state</dt>

   <dd>

    Slide the contents of the element in the direction described by the <code>direction</code> attribute as defined below, such that it begins
    off the start side of the <code>marquee</code>, and ends flush with the inner end side.

    <p class="example">
For example, if the <code>direction</code>
    attribute is <a>left</a> (the default), then the
    contents would start such that their left edge are off the side of the right edge of the
    <code>marquee</code>'s content area, and the contents would then slide up to the point where the
    left edge of the contents are flush with the left inner edge of the <code>marquee</code>'s
    content area.
</p>

    Once the animation has ended, the user agent is expected to <a>increment the marquee
    current loop index</a>. If the element is still <a>turned
    on</a> after this, then the user agent is expected to restart the animation.

   </dd>

   <dt>If the element's <code>behavior</code> attribute is in the
   <a>slide</a> state</dt>

   <dd>

    Slide the contents of the element in the direction described by the <code>direction</code> attribute as defined below, such that it begins
    off the start side of the <code>marquee</code>, and ends off the end side of the
    <code>marquee</code>.

    <p class="example">
For example, if the <code>direction</code>
    attribute is <a>left</a> (the default), then the
    contents would start such that their left edge are off the side of the right edge of the
    <code>marquee</code>'s content area, and the contents would then slide up to the point where the
    <em>right</em> edge of the contents are flush with the left inner edge of the
    <code>marquee</code>'s content area.
</p>

    Once the animation has ended, the user agent is expected to <a>increment the marquee
    current loop index</a>. If the element is still <a>turned
    on</a> after this, then the user agent is expected to restart the animation.

   </dd>

   <dt>If the element's <code>behavior</code> attribute is in the
   <a>alternate</a> state</dt>

   <dd>

    When the <a>marquee current loop index</a> is even (or zero), slide the contents of the
    element in the direction described by the <code>direction</code>
    attribute as defined below, such that it begins flush with the start side of the
    <code>marquee</code>, and ends flush with the end side of the <code>marquee</code>.

    When the <a>marquee current loop index</a> is odd, slide the contents of the element in
    the opposite direction than that described by the <code>direction</code> attribute as defined below, such that it begins
    flush with the end side of the <code>marquee</code>, and ends flush with the start side of the
    <code>marquee</code>.

    <p class="example">
For example, if the <code>direction</code>
    attribute is <a>left</a> (the default), then the
    contents would with their right edge flush with the right inner edge of the
    <code>marquee</code>'s content area, and the contents would then slide up to the point where the
    <em>left</em> edge of the contents are flush with the left inner edge of the
    <code>marquee</code>'s content area.
</p>

    Once the animation has ended, the user agent is expected to <a>increment the marquee
    current loop index</a>. If the element is still <a>turned
    on</a> after this, then the user agent is expected to continue the animation.

   </dd>

  </dl>

  The <code>direction</code> attribute has the meanings described
  in the following table:

  <table>
   <thead>
    <tr>
     <th><code>direction</code> attribute state
     <th>Direction of animation
     <th>Start edge
     <th>End edge
     <th>Opposite direction
   <tbody>
    <tr>
     <td><a>left</a>
     <td>&larr; Right to left
     <td>Right
     <td>Left
     <td>&rarr; Left to Right
    <tr>
     <td><a>right</a>
     <td>&rarr; Left to Right
     <td>Left
     <td>Right
     <td>&larr; Right to left
    <tr>
     <td><a>up</a>
     <td>&uarr; Up (Bottom to Top)
     <td>Bottom
     <td>Top
     <td>&darr; Down (Top to Bottom)
    <tr>
     <td><a>down</a>
     <td>&darr; Down (Top to Bottom)
     <td>Top
     <td>Bottom
     <td>&uarr; Up (Bottom to Top)
  </table>

  In any case, the animation should proceed such that there is a delay given by the <a>marquee
  scroll interval</a> between each frame, and such that the content moves at most the distance
  given by the <a>marquee scroll distance</a> with each frame.

  When a <code>marquee</code> element has a <code undefined>bgcolor</code>
  attribute set, the value is expected to be parsed using the <a>rules for parsing a legacy color
  value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the element's
  'background-color' property to the resulting color.

  The <code undefined>width</code> and <code
  undefined>height</code> attributes on a <code>marquee</code> element <a>map to the dimension properties</a> 'width' and 'height'
  on the element respectively.

  The <a>intrinsic height</a> of a <code>marquee</code> element with its <code>direction</code> attribute in the <a>up</a> or <a>down</a> states is 200 CSS pixels.

  The <code undefined>vspace</code> attribute of a <code>marquee</code> element
  <a>maps to the dimension properties</a> 'margin-top'
  and 'margin-bottom' on the element. The <code undefined>hspace</code> attribute
  of a <code>marquee</code> element <a>maps to the
  dimension properties</a> 'margin-left' and 'margin-right' on the element.

  The 'overflow' property on the <code>marquee</code> element is expected to be ignored; overflow
  is expected to always be hidden.

  </div>

  <div class="impl">

  <h4 id="the-meter-element"><dfn>The <code>meter</code> element</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

meter { binding: <i>meter</i>; }</pre>

  When the <i>meter</i> binding applies to a <code>meter</code> element, the element is
  expected to render as an 'inline-block' box with a 'height' of '1em' and a 'width' of '5em', a
  'vertical-align' of '-0.2em', and with its contents depicting a gauge.

  When the element is wider than it is tall (or square), the depiction is expected to be of a
  horizontal gauge, with the minimum value on the right if the 'direction' property on this element
  has a computed value of 'rtl', and on the left otherwise. When the element is taller than it is
  wide, it is expected to depict a vertical gauge, with the minimum value on the bottom.

  User agents are expected to use a presentation consistent with platform conventions for gauges,
  if any.

  <p class="note">
Requirements for what must be depicted in the gauge are included in the definition
  of the <code>meter</code> element.
</p>

  </div>

  <div class="impl">

  <h4 id="the-progress-element"><dfn>The <code>progress</code> element</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

progress { binding: <i>progress</i>; }</pre>

  When the <i>progress</i> binding applies to a <code>progress</code> element, the
  element is expected to render as an 'inline-block' box with a 'height' of '1em' and a 'width' of
  '10em', and a 'vertical-align' of '-0.2em'.

   <img class="extra" src="images/sample-progress.png" alt="" width=157 height=103> When the
  element is wider than it is tall, the element is expected to be depicted as a horizontal progress
  bar, with the start on the right and the end on the left if the 'direction' property on this
  element has a computed value of 'rtl', and with the start on the left and the end on the right
  otherwise. When the element is taller than it is wide, it is expected to depicted as a vertical
  progress bar, with the lowest value on the bottom. When the element is square, it is expected to
  be depicted as a direction-independent progress widget (e.g. a circular progress ring).

  User agents are expected to use a presentation consistent with platform conventions for
  progress bars. In particular, user agents are expected to use different presentations for
  determinate and indeterminate progress bars. User agents are also expected to vary the
  presentation based on the dimensions of the element.

  <p class="example">
For example, on some platforms for showing indeterminate progress there is a
  "spinner" progress indicator with square dimensions, which could be used when the element is
  square, and an indeterminate progress bar, which could be used when the element is wide.
</p>

  <p class="note">
Requirements for how to determine if the progress bar is determinate or
  indeterminate, and what progress a determinate progress bar is to show, are included in the
  definition of the <code>progress</code> element.
</p>

  </div>

  <div class="impl">

  <h4 id="the-select-element"><dfn>The <code>select</code> element</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

select { binding: <i>select</i>; }</pre>

  When the <i>select</i> binding applies to a <code>select</code> element whose <code>multiple</code> attribute is present, the element is expected to
  render as a multi-select list box.

  When the <i>select</i> binding applies to a <code>select</code> element whose <code>multiple</code> attribute is absent, and the element's <a>display size</a> is greater than 1, the element is expected to
  render as a single-select list box.

  When the element renders as a list box, it is expected to render as an 'inline-block' box whose
  'height' is the height necessary to contain as many rows for items as given by the element's <a>display size</a>, or four rows if the attribute is absent, and
  whose 'width' is the <a>width of the <code>select</code>'s labels</a> plus the width of a
  scrollbar.

  When the <i>select</i> binding applies to a <code>select</code> element whose <code>multiple</code> attribute is absent, and the element's <a>display size</a> is 1, the element is expected to render as a
  one-line drop down box whose width is the <a>width of the <code>select</code>'s
  labels</a>.

  In either case (list box or drop-down box), the element's items are expected to be the
  element's <a>list of options</a>, with the element's
  <code>optgroup</code> element children providing headers for groups of options where
  applicable.

  An <code>optgroup</code> element is expected to be rendered by displaying the element's <code>label</code> attribute.

  An <code>option</code> element is expected to be rendered by displaying the element's <a>label</a>, indented under its <code>optgroup</code> element if it
  has one.

  The <dfn>width of the <code>select</code>'s labels</dfn> is the wider of the width necessary to
  render the widest <code>optgroup</code>, and the width necessary to render the widest
  <code>option</code> element in the element's <a>list of
  options</a> (including its indent, if any).

  If a <code>select</code> element contains a <a>placeholder label option</a>, the user
  agent is expected to render that <code>option</code> in a manner that conveys that it is a label,
  rather than a valid option of the control. This can include preventing the <a>placeholder label
  option</a> from being explicitly selected by the user. When the <a>placeholder label
  option</a>'s <a>selectedness</a> is true, the control
  is expected to be displayed in a fashion that indicates that no valid option is currently
  selected.

  User agents are expected to render the labels in a <code>select</code> in such a manner that
  any alignment remains consistent whether the label is being displayed as part of the page or in a
  menu control.

  </div>

  <div class="impl">

  <h4 id="the-textarea-element"><dfn>The <code>textarea</code> element</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

textarea { binding: <i>textarea</i>; white-space: pre-wrap; }</pre>

  When the <i>textarea</i> binding applies to a <code>textarea</code> element, the
  element is expected to render as an 'inline-block' box rendered as a multiline text field. If this
  text field provides a selection, then, when the user changes the currect selection in such a
  binding, the user agent is expected to <a>queue a task</a> to <a>fire a simple
  event</a> that bubbles named <code>select</code> at the element, using
  the <a>user interaction task source</a> as the task source.

  If the element has a <code>cols</code> attribute, and parsing that
  attribute's value using the <a>rules for parsing non-negative integers</a> doesn't generate
  an error, then the user agent is expected to use the attribute as a <a>presentational hint</a> for the 'width' property on the element, with the value being
  the <a>textarea effective width</a> (as defined below). Otherwise, the user agent is
  expected to act as if it had a user-agent-level style sheet rule setting the 'width' property on
  the element to the <a>textarea effective width</a>.

  The <dfn>textarea effective width</dfn> of a <code>textarea</code> element is <a><var>size</var>&times;<var>avg</var>&nbsp;+&nbsp;<var>sbw</var></a>, where <var>size</var> is the element's <a>character width</a>, <var>avg</var> is the average
  character width of the primary font of the element, in CSS pixels, and <var>sbw</var> is
  the width of a scroll bar, in CSS pixels. (The element's 'letter-spacing' property does not affect
  the result.)

  If the element has a <code>rows</code> attribute, and parsing that
  attribute's value using the <a>rules for parsing non-negative integers</a> doesn't generate
  an error, then the user agent is expected to use the attribute as a <a>presentational hint</a> for the 'height' property on the element, with the value being
  the <a>textarea effective height</a> (as defined below). Otherwise, the user agent is
  expected to act as if it had a user-agent-level style sheet rule setting the 'height' property on
  the element to the <a>textarea effective height</a>.

  The <dfn>textarea effective height</dfn> of a <code>textarea</code> element is the height in
  CSS pixels of the number of lines specified the element's <a>character height</a>, plus the height of a scrollbar in CSS
  pixels.

  User agents are expected to apply the 'white-space' CSS property to <code>textarea</code>
  elements. For historical reasons, if the element has a <code>wrap</code> attribute whose value is an <a>ASCII
  case-insensitive</a> match for the string "<code>off</code>", then the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'white-space'
  property to 'pre'.

  </div>

  <div class="impl">

  <h4 id="the-keygen-element"><dfn>The <code>keygen</code> element</dfn></h4>

  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);

keygen { binding: <i>keygen</i>; }</pre>

  When the <i>keygen</i> binding applies to a <code>keygen</code> element, the element
  is expected to render as an 'inline-block' box containing a user interface to configure the key
  pair to be generated.

  </div>

  <div class="impl">

  <h3 id="frames-and-framesets"><dfn>Frames and framesets</dfn></h3>

  User agent are expected to render <code>frameset</code> elements as a box with the height and
  width of the viewport, with a surface rendered according to the following layout algorithm:

  <ol>

   <li>

    The <var>cols</var> and <var>rows</var> variables are lists of zero or more pairs consisting
    of a number and a unit, the unit being one of <i>percentage</i>, <i>relative</i>, and
    <i>absolute</i>.

    Use the <a>rules for parsing a list of dimensions</a> to parse the value of the
    element's <code undefined>cols</code> attribute, if there is one.
    Let <var>cols</var> be the result, or an empty list if there is no such attribute.

    Use the <a>rules for parsing a list of dimensions</a> to parse the value of the
    element's <code undefined>rows</code> attribute, if there is one.
    Let <var>rows</var> be the result, or an empty list if there is no such attribute.

   </li>

   <li>

    For any of the entries in <var>cols</var> or <var>rows</var> that have the number zero and
    the unit <i>relative</i>, change the entry's number to one.

   </li>

   <li>

    If <var>cols</var> has no entries, then add a single entry consisting of the value 1 and the
    unit <i>relative</i> to <var>cols</var>.

    If <var>rows</var> has no entries, then add a single entry consisting of the value 1 and the
    unit <i>relative</i> to <var>rows</var>.

   </li>

   <li>

    Invoke the algorithm defined below to <a>convert a list of dimensions to a list of pixel
    values</a> using <var>cols</var> as the input list, and the width of the surface that the
    <code>frameset</code> is being rendered into, in CSS pixels, as the input dimension. Let
    <var>sized cols</var> be the resulting list.

    Invoke the algorithm defined below to <a>convert a list of dimensions to a list of pixel
    values</a> using <var>rows</var> as the input list, and the height of the surface that the
    <code>frameset</code> is being rendered into, in CSS pixels, as the input dimension. Let
    <var>sized rows</var> be the resulting list.

   </li>

   <li>

    Split the surface into a grid of <a><var>w</var>&times;<var>h</var></a>
    rectangles, where <var>w</var> is the number of entries in <var>sized cols</var> and
    <var>h</var> is the number of entries in <var>sized rows</var>.

    Size the columns so that each column in the grid is as many CSS pixels wide as the
    corresponding entry in the <var>sized cols</var> list.

    Size the rows so that each row in the grid is as many CSS pixels high as the corresponding
    entry in the <var>sized rows</var> list.

   </li>

   <li>

    Let <var>children</var> be the list of <code>frame</code> and <code>frameset</code> elements
    that are children of the <code>frameset</code> element for which the algorithm was invoked.

   </li>

   <li>

    For each row of the grid of rectangles created in the previous step, from top to bottom, run
    these substeps:

    <ol>

     <li>

      For each rectangle in the row, from left to right, run these substeps:

      <ol>

       <li>

        If there are any elements left in <var>children</var>, take the first element in the
        list, and assign it to the rectangle.

        If this is a <code>frameset</code> element, then recurse the entire <code>frameset</code>
        layout algorithm for that <code>frameset</code> element, with the rectangle as the
        surface.

        Otherwise, it is a <code>frame</code> element; render its <a>nested browsing
        context</a>, positoned and sized to fit the rectangle.

       </li>

       <li>

        If there are any elements left in <var>children</var>, remove the first element from
        <var>children</var>.

       </li>

      </ol>

     </li>

    </ol>

   </li>

   <li>

    If the <code>frameset</code> element <a>has a border</a>, draw an outer set of borders
    around the rectangles, using the element's <a>frame border color</a>.

    For each rectangle, if there is an element assigned to that rectangle, and that element
    <a>has a border</a>, draw an inner set of borders around that rectangle, using the
    element's <a>frame border color</a>.

    For each (visible) border that does not abut a rectangle that is assigned a
    <code>frame</code> element with a <code undefined>noresize</code>
    attribute (including rectangles in further nested <code>frameset</code> elements), the user
    agent is expected to allow the user to move the border, resizing the rectangles within, keeping
    the proportions of any nested <code>frameset</code> grids.

    A <code>frameset</code> or <code>frame</code> element <dfn>has a border</dfn> if the
    following algorithm returns true:

    <ol>

     <li>If the element has a <code>frameborder</code> attribute whose value is not the
     empty string and whose first character is either a U+0031 DIGIT ONE (1) character, a U+0079
     LATIN SMALL LETTER Y character (y), or a U+0059 LATIN CAPITAL LETTER Y character (Y), then
     return true.</li>

     <li>Otherwise, if the element has a <code>frameborder</code> attribute, return
     false.</li>

     <li>Otherwise, if the element has a parent element that is a <code>frameset</code> element,
     then return true if <em>that</em> element <a>has a border</a>, and false if it does
     not.</li>

     <li>Otherwise, return true.</li>

    </ol>

    The <dfn>frame border color</dfn> of a <code>frameset</code> or <code>frame</code> element
    is the color obtained from the following algorithm:

    <ol>

     <li>If the element has a <code>bordercolor</code> attribute, and applying the
     <a>rules for parsing a legacy color value</a> to that attribute's value does not result
     in an error, then return the color so obtained.</li>

     <li>Otherwise, if the element has a parent element that is a <code>frameset</code> element,
     then return the <a>frame border color</a> of that element.

     <li>Otherwise, return gray.</li>

    </ol>

   </li>

  </ol>

  The algorithm to <dfn>convert a list of dimensions to a list of pixel values</dfn> consists of
  the following steps:

  <ol>

   <li>

    Let <var>input list</var> be the list of numbers and units passed to the algorithm.

    Let <var>output list</var> be a list of numbers the same length as <var>input list</var>, all
    zero.

    Entries in <var>output list</var> correspond to the entries in <var>input list</var> that
    have the same position.

   </li>

   <li>Let <var>input dimension</var> be the size passed to the algorithm.

   <li>

    Let <var>count percentage</var> be the number of entries in <var>input list</var> whose unit
    is <i>percentage</i>.

    Let <var>total percentage</var> be the sum of all the numbers in <var>input list</var> whose
    unit is <i>percentage</i>.

    Let <var>count relative</var> be the number of entries in <var>input list</var> whose unit is
    <i>relative</i>.

    Let <var>total relative</var> be the sum of all the numbers in <var>input list</var> whose
    unit is <i>relative</i>.

    Let <var>count absolute</var> be the number of entries in <var>input list</var> whose unit is
    <i>absolute</i>.

    Let <var>total absolute</var> be the sum of all the numbers in <var>input list</var> whose
    unit is <i>absolute</i>.

    Let <var>remaining space</var> be the value of <var>input dimension</var>.

   </li>

   <li>

    If <var>total absolute</var> is greater than <var>remaining space</var>, then for each entry
    in <var>input list</var> whose unit is <i>absolute</i>, set the corresponding value in
    <var>output list</var> to the number of the entry in <var>input list</var> multiplied by
    <var>remaining space</var> and divided by <var>total absolute</var>. Then, set <var>remaining
    space</var> to zero.

    Otherwise, for each entry in <var>input list</var> whose unit is <i>absolute</i>, set the
    corresponding value in <var>output list</var> to the number of the entry in <var>input
    list</var>. Then, decrement <var>remaining space</var> by <var>total absolute</var>.

   </li>

   <li>

    If <var>total percentage</var> multiplied by the <var>input dimension</var> and divided by
    100 is greater than <var>remaining space</var>, then for each entry in <var>input list</var>
    whose unit is <i>percentage</i>, set the corresponding value in <var>output list</var> to the
    number of the entry in <var>input list</var> multiplied by <var>remaining space</var> and
    divided by <var>total percentage</var>. Then, set <var>remaining space</var> to zero.

    Otherwise, for each entry in <var>input list</var> whose unit is <i>percentage</i>, set the
    corresponding value in <var>output list</var> to the number of the entry in <var>input
    list</var> multiplied by the <var>input dimension</var> and divided by 100. Then, decrement
    <var>remaining space</var> by <var>total percentage</var> multiplied by the <var>input
    dimension</var> and divided by 100.

   </li>

   <li>

    For each entry in <var>input list</var> whose unit is <i>relative</i>, set the corresponding
    value in <var>output list</var> to the number of the entry in <var>input list</var> multiplied
    by <var>remaining space</var> and divided by <var>total relative</var>.

   </li>

   <li>Return <var>output list</var>.</li>

  </ol>

  User agents working with integer values for frame widths (as opposed to user agents that can
  lay frames out with subpixel accuracy) are expected to distribute the remainder first to the last
  entry whose unit is <i>relative</i>, then equally (not proportionally) to each entry whose unit is
  <i>percentage</i>, then equally (not proportionally) to each entry whose unit is <i>absolute</i>,
  and finally, failing all else, to the last entry.

  <hr />

  The contents of a <code>frame</code> element that does not have a <code>frameset</code> parent
  are expected to be rendered as transparent black; the user agent is expected to not render the
  <a>nested browsing context</a> in this case, and that <a>nested browsing context</a>
  is expected to have a viewport with zero width and zero height.

  </div>

  <div class="impl">

  <h3 id="interactive-media"><dfn>Interactive media</dfn></h3>

  <h4 id="links,-forms,-and-navigation"><dfn>Links, forms, and navigation</dfn></h4>

  User agents are expected to allow the user to control aspects of <a>hyperlink</a>
  activation and <a>form submission</a>, such as which <a>browsing context</a> is to be
  used for the subsequent <a>navigation</a>.

  User agents are expected to allow users to discover the destination of <a>hyperlinks</a> and of <a>forms</a> before triggering their
  <a>navigation</a>.

  User agents may allow users to <a>navigate</a> <a>browsing contexts</a> to the URLs <a>indicated</a> by the
  <code>cite</code> attributes on <code>q</code>, <code>blockquote</code>,
  <code>ins</code>, and <code>del</code> elements.

  User agents may surface <a>hyperlinks</a> created by <code>link</code>
  elements in their user interface.

  <p class="note">
While <code>link</code> elements that create <a>hyperlinks</a> will match the ':link' or ':visited' pseudo-classes, will
  react to clicks if visible, and so forth, this does not extend to any browser interface constructs
  that expose those same links. Activating a link through the browser's interface, rather than in
  the page itself, does not trigger <code>click</code> events and the like.
</p>

  <h4 id="the-title-attribute"><dfn>The <code>title</code> attribute</dfn></h4>

  User agents are expected to expose the <a>advisory information</a> of elements upon user
  request, and to make the user aware of the presence of such information.

  On interactive graphical systems where the user can use a pointing device, this could take the
  form of a tooltip. When the user is unable to use a pointing device, then the user agent is
  expected to make the content available in some other fashion, e.g. by making the element a
  <i>focusable area</i> and always displaying the <a>advisory information</a> of the currently
  <a>focused</a> element, or by showing the <a>advisory information</a> of the elements
  under the user's finger on a touch device as the user pans around the screen.

  U+000A LINE FEED (LF) characters are expected to cause line breaks in the tooltip; U+0009
  CHARACTER TABULATION (tab) characters are expected to render as a non-zero horizontal shift that
  lines up the next glyph with the next tab stop, with tab stops occurring at points that are
  multiples of 8 times the width of a U+0020 SPACE character.

  <div class="example">

   For example, a visual user agent could make elements with a <code>title</code> attribute <a>focusable</a>, and could make any <a>focused</a> element with a
   <code>title</code> attribute show its tooltip under the element while the
   element has focus. This would allow a user to tab around the document to find all the advisory
   text.

  </div>

  <div class="example">

   As another example, a screen reader could provide an audio cue when reading an element with a
   tooltip, with an associated key to read the last tooltip for which a cue was played.

  </div>

  <h4 id="editing-hosts"><dfn>Editing hosts</dfn></h4>

  The current text editing caret (i.e. the <a>active range</a>, if it is empty and in an
  <a>editing host</a>), if any, is expected to act like an inline
  <a>replaced element</a> with the vertical dimensions of the caret and with zero width for
  the purposes of the CSS rendering model.

  <p class="note">
This means that even an empty block can have the caret inside it, and that when
  the caret is in such an element, it prevents margins from collapsing through the element.
</p>

  <h4 id="text-rendered-in-native-user-interfaces"><dfn>Text rendered in native user interfaces</dfn></h4>

  User agents are expected to honor the Unicode semantics of text that is exposed in user
  interfaces, for example supporting the bidirectional algorithm in text shown in dialogs, title
  bars, pop-up menus, and tooltips. Text from the contents of elements is expected to be rendered in
  a manner that honors <a>the directionality</a> of the element from which the text was
  obtained. Text from attributes is expected to be rendered in a manner that honours the
  <a>directionality of the attribute</a>.

  <div class="example">

   Consider the following markup, which has Hebrew text asking for a programming language, the
   languages being text for which a left-to-right direction is important given the punctuation in
   some of their names:

   <pre highlight="html">
&lt;p dir="rtl" lang="he">
 &lt;label>
  <span dir="rtl" lang="he">&#x5d1;&#x5d7;&#x5e8; &#x5e9;&#x5e4;&#x5ea; &#x5ea;&#x5db;&#x5e0;&#x5d5;&#x5ea;:</span>
  &lt;select>
   &lt;option dir="ltr">C++&lt;/option>
   &lt;option dir="ltr">C#&lt;/option>
   &lt;option dir="ltr">FreePascal&lt;/option>
   &lt;option dir="ltr">F#&lt;/option>
  &lt;/select>
 &lt;/label>
&lt;/p>
</pre>

   If the <code>select</code> element was rendered as a drop down box, a correct rendering would
   ensure that the punctuation was the same both in the drop down, and in the box showing the
   current selection.

   <img src="images/bidizelect.png" width="206" height="105" alt="">

  </div>

  <div class="example">

   The directionality of attributes depends on the attribute and on the element's <code>dir</code> attribute, as the following example demonstrates. Consider this
   markup:

   <pre highlight="html">
<bdo dir=ltr>&lt;table>
 &lt;tr>
  &lt;th abbr="(&#x05D0;" dir=ltr>A
  &lt;th abbr="(&#x05D0;" dir=rtl>A
  &lt;th abbr="(&#x05D0;" dir=auto>A
&lt;/table></bdo>
</pre>

   If the <code>abbr</code> attributes are rendered, e.g. in a tooltip or
   other user interface, the first will have a left parenthesis (because the direction is 'ltr'),
   the second will have a right parenthesis (because the direction is 'rtl'), and the third will
   have a right parenthesis (because the direction is determined <em>from the attribute value</em>
   to be 'rtl').

   However, if instead the attribute was not a <a>directionality-capable attribute</a>, the
   results would be different:

   <pre highlight="html">
<bdo dir=ltr>&lt;table>
 &lt;tr>
  &lt;th>A
  &lt;th>A
  &lt;th>A
&lt;/table></bdo>
</pre>

   In this case, if the user agent were to expose the <code>data-abbr</code> attribute
   in the user interface (e.g. in a debugging environment), the last case would be rendered with a
   <em>left</em> parenthesis, because the direction would be determined from the element's
   contents.

  </div>

  A string provided by a script (e.g. the argument to <code>window.alert()</code>) is expected to be treated as an independent set of one or
  more bidirectional algorithm paragraphs when displayed, as defined by the bidirectional algorithm,
  including, for instance, supporting the paragraph-breaking behavior of U+000A LINE FEED (LF)
  characters. For the purposes of determining the paragraph level of such text in the bidirectional
  algorithm, this specification does <em>not</em> provide a higher-level override of rules P2 and
  P3. [[!BIDI]]

  When necessary, authors can enforce a particular direction for a given paragraph by starting it
  with the Unicode U+200E LEFT-TO-RIGHT MARK or U+200F RIGHT-TO-LEFT MARK characters.

  <div class="example">

   Thus, the following script:

   <pre highlight="javascript">alert('\u05DC\u05DE\u05D3 HTML \u05D4\u05D9\u05D5\u05DD!')</pre>

   ...would always result in a message reading
        "<bdo lang="" dir=rtl>&#x05DC;&#x05DE;&#x05D3;&nbsp;LMTH&nbsp;&#x05D4;&#x05D9;&#x05D5;&#x05DD;!</bdo>"
   (not "<bdo lang="" dir=ltr>&#x05D3;&#x05DE;&#x05DC;&nbsp;HTML&nbsp;&#x05DD;&#x05D5;&#x05D9;&#x05D4;!</bdo>"),
   regardless of the language of the user agent interface or the
   direction of the page or any of its elements.

  </div>

  <div class="example">

   For a more complex example, consider the following script:

   <pre class="bad">/* Warning: this script does not handle right-to-left scripts correctly */
var s;
if (s = prompt('What is your name?')) {
  alert(s + '! Ok, Fred, ' + s + ', and Wilma will get the car.');
}</pre>

   When the user enters "<kbd>Kitty</kbd>", the user agent would alert "<samp>Kitty! Ok, Fred,
   Kitty, and Wilma will get the car.</samp>". However, if the user enters "<kbd dir="rtl"
   lang="ar">&#x644;&#x627;&nbsp;&#x623;&#x641;&#x647;&#x645;</kbd>", then the bidirectional
   algorithm will determine that the direction of the paragraph is right-to-left, and so the output
   will be the following unintended mess: "<samp lang=""><bdo
   dir="rtl">&#x644;&#x627;&nbsp;&#x623;&#x641;&#x647;&#x645;!&nbsp;derF&nbsp;,kO,&nbsp;&#x644;&#x627;&nbsp;&#x623;&#x641;&#x647;&#x645;,&nbsp;rac&nbsp;eht&nbsp;teg&nbsp;lliw&nbsp;amliW&nbsp;dna.</bdo></samp>"

   To force an alert that starts with user-provided text (or other text of unknown
   directionality) to render left-to-right, the string can be prefixed with a U+200E LEFT-TO-RIGHT
   MARK character:

   <pre highlight="javascript">var s;
if (s = prompt('What is your name?')) {
  alert('<strong>\u200E</strong>' + s + '! Ok, Fred, ' + s + ', and Wilma will get the car.');
}</pre>

  </div>

  <h3 id="print-media"><dfn>Print media</dfn></h3>

  User agents are expected to allow the user to request the opportunity to <dfn>obtain a physical
  form</dfn> (or a representation of a physical form) of a <code>Document</code>. For example,
  selecting the option to print a page or convert it to PDF format. [[!PDF]]

  When the user actually <a>obtains a physical form</a> (or
  a representation of a physical form) of a <code>Document</code>, the user agent is expected to
  create a new rendering of the <code>Document</code> for the print media.

  <h3 id="unstyled-xml-documents"><dfn>Unstyled XML documents</dfn></h3>

  HTML user agents may, in certain circumstances, find themselves rendering non-HTML documents
  that use vocabularies for which they lack any built-in knowledge. This section provides for a way
  for user agents to handle such documents in a somewhat useful manner.

  While a <code>Document</code> is an <a>unstyled document</a>, the user agent is expected
  to render <a>an unstyled document view</a>.

  A <code>Document</code> is an <dfn>unstyled document</dfn> while it matches the following
  conditions:

  <ul>
   <li>The <code>Document</code> has no author style sheets (whether referenced by HTTP headers, processing instructions, elements like <code>link</code>, inline elements like <code>style</code>, or any other mechanism).
   <li>None of the elements in the <code>Document</code> have any <a>presentational hints</a>.
   <li>None of the elements in the <code>Document</code> have any <a>CSS styling attributes</a>.
   <li>None of the elements in the <code>Document</code> are in any of the following namespaces: <a>HTML namespace</a>, <a>SVG namespace</a>, <a>MathML namespace</a>
   <li>The <code>Document</code> has no <i>focusable area</i> (e.g. from XLink) other than the viewport.
   <li>The <code>Document</code> has no <a>hyperlinks</a> (e.g. from XLink).
   <li>There exists no <a>script</a> whose <a>settings object</a> specifies this <code>Document</code> as the <a>responsible document</a>.
   <li>None of the elements in the <code>Document</code> have any registered event listeners.
  </ul>

  <dfn>An unstyled document view</dfn> is one where the DOM is not rendered according to CSS
  (which would, since there are no applicable styles in this context, just result in a wall of
  text), but is instead rendered in a manner that is useful for a developer. This could consist of
  just showing the <code>Document</code> object's source, maybe with syntax highlighting, or it
  could consist of displaying just the DOM tree, or simply a message saying that the page is not a
  styled document.

  <p class="note">
If a <code>Document</code> stops being an <a>unstyled document</a>, then the
  conditions above stop applying, and thus a user agent following these requirements will switch to
  using the regular CSS rendering.
</p>
