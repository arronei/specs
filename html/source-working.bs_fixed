<h2 id="web-application-apis"><dfn>Web application APIs</dfn></h2>

<h3 id="scripting"><dfn>Scripting</dfn></h3>

<h4 id="introduction"><dfn>Introduction</dfn></h4>

  Various mechanisms can cause author-provided executable code to run in the context of a
  document. These mechanisms include, but are probably not limited to:

  <ul>

    <li>Processing of <code>script</code> elements.</li>

    <li>Navigating to <a><code>javascript:</code> URLs</a>.</li>

    <li>Event handlers, whether registered through the DOM using <code>addEventListener()</code>, by explicit <a>event handler content attributes</a>, by
    <a>event handler IDL attributes</a>, or otherwise.</li>

    <li>Processing of technologies like SVG that have their own scripting features.</li>

  </ul>

  <div class="impl">

<h4 id="enabling-and-disabling-scripting"><dfn>Enabling and disabling scripting</dfn></h4>

  <dfn>Scripting is enabled</dfn> in a <em><a>browsing
  context</a></em> when all of the following conditions are true:

  <ul>

    <li>The user agent supports scripting.</li>

    <li>The user has not disabled scripting for this <a>browsing context</a> at this time.
    (User agents may provide users with the option to disable scripting globally, or in a
    finer-grained manner, e.g. on a per-origin basis.)

    </li>

    <li>The <a>browsing context</a>'s <a>active document</a>'s
    <a>active sandboxing flag set</a> does not have its <a>sandboxed scripts browsing
    context flag</a> set.</li>

  </ul>

  <dfn>Scripting is disabled</dfn> in a <a>browsing context</a>
  when any of the above conditions are false (i.e. when scripting is not <a>enabled</a>).

  <hr />

  <dfn>Scripting is enabled</dfn> for a <em>node</em> if the
  <code>Document</code> object of the node (the node itself, if it is itself a <code>Document</code>
  object) has an associated <a>browsing context</a>, and <a>scripting is enabled</a> in that <a>browsing context</a>.

  <dfn>Scripting is disabled</dfn> for a node if there is no such
  <a>browsing context</a>, or if <a>scripting is
  disabled</a> in that <a>browsing context</a>.

  </div>

  <div class="impl">

<h4 id="processing-model"><dfn>Processing model</dfn></h4>

<h5 id="definitions"><dfn>Definitions</dfn></h5>

  This specification describes three kinds of <a>JavaScript global environments</a>: the <dfn>document environment</dfn>, the
  <dfn>dedicated worker environment</dfn>, and the <dfn>shared worker environment</dfn>. The
  <a>dedicated worker environment</a> and the <a>shared worker environment</a> are both
  types of <dfn>worker environments</dfn>.

  Except where otherwise specified, a <a>JavaScript global environment</a> is a
  <a>document environment</a>.

  <hr />

  A <dfn>script</dfn> has:

  <dl>

    <dt>A <dfn>code entry-point</dfn></dt>

    <dd>

    A code entry-point represents a block of executable code that the script exposes to other
    scripts and to the user agent. Typically, the code corresponding to the code entry-point is
    executed immediately after the script is parsed, but for event handlers, it is called each time
    the handler is invoked.

    <p class="example">
  In JavaScript <code>script</code> blocks, this corresponds to the execution
    context of the global code.
  </p>

    </dd>

    <dt>Optionally, a <dfn>muted errors</dfn> flag</dt>

    <dd>

    A flag which, if set, means that error information will not be provided for errors in this
    script (used to mute errors for cross-origin scripts, since that can leak private
    information).

    </dd>

    <dt>A <dfn>settings object</dfn></dt>

    <dd>

    An <a>environment settings object</a>, various settings that are shared with other scripts in
    the same context.

    </dd>

  </dl>

  <hr />

  An <dfn>environment settings object</dfn> specifies algorithms for obtaining the following:

  <dl>

    <dt>A <dfn>script execution environment</dfn> for each language supported by the user agent</dt>

    <dd>

    The characteristics of the script execution environment depend on the language, and are not
    defined by this specification.

    <p class="example">
  In JavaScript, the script execution environment consists of the interpreter,
    the stack of <i>execution contexts</i>, the <i>global code</i> and <i>function code</i> and the
    <code>Function</code> objects resulting, and so forth.
  </p>

    </dd>

    <dt>A <dfn>global object</dfn></dt>
    <dd>

    An object that provides the APIs that can be called by the code in scripts that use this
    <a>settings object</a>.

    <p class="note">
  This is typically a <code>Window</code> object or a
    <code>WorkerGlobalScope</code> object. When a <a>global object</a> is an empty object, it
    can't do anything that interacts with the environment.
  </p>

    If the <a>global object</a> is a <code>Window</code> object, then, in JavaScript, the
    ThisBinding of the global execution context for this script must be the <code>Window</code>
    object's <code>WindowProxy</code> object, rather than the global object. <a>\[ECMA262]</a>

    <p class="note">
  This is a <a>willful violation</a> of the JavaScript specification current
    at the time of writing (ECMAScript edition 5, as defined in section 10.4.1.1 Initial Global
    Execution Context, step 3). The JavaScript specification requires that the <code>this</code> keyword in the global scope return the global object, but this is not
    compatible with the security design prevalent in implementations as specified herein. <a>\[ECMA262]</a>
  </p>

    </dd>

    <dt>A <dfn>responsible browsing context</dfn></dt>

    <dd>

    A <a>browsing context</a> that is assigned responsibility for actions taken by the
    scripts that use this <a>environment settings object</a>.

    <p class="example">
  When a script creates and <a>navigates</a> a new
    <a>top-level browsing context</a>, the <code>opener</code> attribute
    of the new <a>browsing context</a>'s <code>Window</code> object will be set to the
    <a>responsible browsing context</a>'s <code>WindowProxy</code> object.
  </p>

    </dd>

    <dt>A <dfn>responsible event loop</dfn></dt>

    <dd>

    An <a>event loop</a> that is used when it would not be immediately clear what event
    loop to use.

    </dd>

    <dt>A <dfn>responsible document</dfn></dt>

    <dd>

    A <code>Document</code> that is assigned responsibility for actions taken by the scripts that
    use this <a>environment settings object</a>.

    <p class="example">
  For example, the <a>address</a> of the
    <a>responsible document</a> is used to set the <a>address</a> of the <code>Document</code> after it has been reset using <code>document.open()</code>.
  </p>

    If the <a>responsible event loop</a> is not a <a>browsing context</a> <a>event loop</a>,
    then the <a>environment settings object</a> has no <a>responsible document</a>.

    </dd>

    <dt>An <dfn>API URL character encoding</dfn></dt>

    <dd>

    A character encoding used to encode URLs by APIs called by scripts that use this <a>environment
    settings object</a>.

    </dd>

    <dt>An <dfn>API base URL</dfn></dt>

    <dd>

    An <a>absolute URL</a> used by APIs called by scripts that use this <a>environment
    settings object</a> to resolve <a>relative URLs</a>.

    </dd>

    <dt>An <a>origin</a> and an <a>effective script origin</a></dt>

    <dd>

    An instrument used in security checks.

    </dd>

    <dt>A <dfn>creation URL</dfn></dt>

    <dd>
    An <a>absolute URL</a> representing the location of the resource with which the
    <a>environment settings object</a> is associated. Note that this URL might be distinct
    from the resource's current URL, due to mechanisms such as <code>history.pushState()</code>.
    </dd>

    <dt>An <dfn>HTTPS state</dfn></dt>

    <dd>
    A value representing the security properties of the network channel used to deliver the
    resource with which the <a>environment settings object</a> is associated. The value will
    be one of "<code>modern</code>", "<code>deprecated</code>", or
    "<code>none</code>".

    <p class="note">
  Resources delivered over HTTPS will generally have an <a>HTTPS state</a>
    of "<code>modern</code>". A user agent can use "<code>deprecated</code>"
    during transitional periods where rejecting the response entirely would be inappropriate (e.g.,
    while removing support for a hash function or cypher suite).
  </p>
    </dd>

  </dl>

  The <dfn>relevant settings object for a global object</dfn> <var>o</var> is the
  <a>environment settings object</a> whose <a>global object</a> is <var>o</var>.
  (There is always a 1:1 mapping of global objects to environment settings objects.)

  The <dfn>relevant settings object for a script</dfn> <var>s</var> is the
  <a>settings object</a> of <var>s</var>.

<h5 id="script-settings-for-browsing-contexts"><dfn>Script settings for browsing contexts</dfn></h5>

  Whenever a new <code>Window</code> object is created, the user agent must:

  <ol>
    <li>Let <var>url</var> be a copy of the <a>address</a>
    of the <code>Document</code> with which the <code>Window</code> is associated.</li>

    <li>
    Create an <a>environment settings object</a> whose algorithms are defined as
    follows:

    <dl>

      <dt>The <a>script execution environments</a></dt>
      <dd>

      When the <a>environment settings object</a> is created, for each language supported by the
      user agent, create an appropriate execution environment as defined by the relevant
      specification.

      When a <a>script execution environment</a> is needed, return the appropriate one from
      those created when the <a>environment settings object</a> was created.

      </dd>

      <dt>The <a>global object</a></dt>
      <dd>

      Return the <code>Window</code> object itself.

      </dd>

      <dt>The <a>responsible browsing context</a></dt>
      <dd>

      Return the <a>browsing context</a> with which the <code>Window</code> object is
      associated.

      </dd>

      <dt>The <a>responsible event loop</a></dt>
      <dd>

      Return the <a>event loop</a> that is associated with the <a>unit of related
      similar-origin browsing contexts</a> to which the <code>Window</code> object's <a>browsing
      context</a> belongs.

      </dd>

      <dt>The <a>responsible document</a></dt>
      <dd>

      Return the <code>Document</code> with which the <code>Window</code> is currently
      associated.

      </dd>

      <dt>The <a>API URL character encoding</a></dt>
      <dd>

      Return the current <a>character encoding</a> of
      the <code>Document</code> with which the <code>Window</code> is currently associated.

      </dd>

      <dt>The <a>API base URL</a></dt>
      <dd>

      Return the current <a>base URL</a> of the
      <code>Document</code> with which the <code>Window</code> is currently associated.

      </dd>

      <dt>The <a>origin</a></dt>
      <dd>

      Return the <a>origin</a> of the <code>Document</code> with which the
      <code>Window</code> is currently associated.

      </dd>

      <dt>The <a>effective script origin</a></dt>
      <dd>

      Return the <a>effective script origin</a> of the <code>Document</code> with which the
      <code>Window</code> is currently associated.

      </dd>

      <dt>The <a>creation URL</a></dt>
      <dd>

      Return <var>url</var>.

      </dd>

      <dt>The <a>HTTPS state</a></dt>
      <dd>

      Return the <a>HTTPS state</a> of the
      <code>Window</code> object.

      </dd>

    </dl>
    </li>
  </ol>

<h5 id="calling-scripts"><dfn>Calling scripts</dfn></h5>

  Each <a>unit of related similar-origin browsing contexts</a> has a <dfn>stack of script
  settings objects</dfn>, which must be initially empty. When a new <a>environment settings
  object</a> is <i>pushed</i> onto this stack, the specified <a>environment settings object</a>
  is to be added to the stack; when the <a>environment settings object</a> on this stack that was
  most recently pushed onto it is to be <i>popped</i> from the stack, it must be removed. Entries on
  this stack can be labeled as <dfn>candidate entry
  settings objects</dfn>.

  When a user agent is to <dfn>jump to a code entry-point</dfn> for a <a>script</a> <var>s</var>, the user agent must run the
  following steps:

  <ol>

    <li>Let <var>context</var> be the <a>settings object</a> of <var>s</var>.</li>

    <li><a>Prepare to run a callback</a> with <var>context</var> as the
    <a>environment settings object</a>. If this returns "do not run" then abort these
    steps.</li>

    <li>Make the appropriate <a>script execution environment</a> specified by <var>context</var> execute the <var>s</var>'s <a>code
    entry-point</a>.</li>

    <li><a>Clean up after running a callback</a>.</li>

  </ol>

  The steps to <dfn>prepare to run a callback</dfn> with an <a>environment settings object</a>
  <var>o</var> are as follows. They return either "run" or "do not run".

  <ol>

    <li>If the <a>global object</a> specified by <var>o</var> is a
    <code>Window</code> object whose <code>Document</code> object is not <a>fully active</a>,
    then return "do not run" and abort these steps.

    <li>If <a>scripting is disabled</a> for the
    <a>responsible browsing context</a> specified by <var>o</var>, then return "do
    not run" and abort these steps.

    <li>Push <var>o</var> onto the <a>stack of script settings objects</a>, and
    label it as a <a>candidate entry settings object</a>.</li>

    <li>Return "run".</li>

  </ol>

  The steps to <dfn>clean up after running a callback</dfn> are as follows:

  <ol>

    <li>Pop the current <a>incumbent settings object</a> from the <a>stack of script
    settings objects</a>.</li>

    <li>If the <a>stack of script settings objects</a> is now empty, <a>run the global
    script clean-up jobs</a>. (These cannot run scripts.)</li>

    <li>If the <a>stack of script settings objects</a> is now empty, <a>perform a
    microtask checkpoint</a>. (If this runs scripts, these algorithms will be invoked
    reentrantly.)</li>

  </ol>

  <p class="note">
  These algorithms are not invoked by one script directly calling another, but they
  can be invoked reentrantly in an indirect manner, e.g. if a script dispatches an event which has
  event listeners registered.
  </p>

  When a JavaScript <i>SourceElements</i> production is to be evaluated, the <a>settings
  object</a> of the <a>script</a> corresponding to that
  <i>SourceElements</i> must be pushed onto the <a>stack of script settings objects</a> before
  the evaluation begins, and popped when the evaluation ends (regardless of whether it's an abrupt
  completion or not).

  The <dfn>entry settings object</dfn> is the most-recently added <a>environment settings
  object</a> in the <a>stack of script settings objects</a> that is labeled as a
  <a>candidate entry settings object</a>. If the stack is empty, or has no entries labeled as
  such, then there is no <a>entry settings object</a>. It is used to obtain, amongst other
  things, the <a>API base URL</a> to <a>resolve</a> relative
  <a>URLs</a> used in scripts running in that <a>unit of related
  similar-origin browsing contexts</a>.

  The <dfn>incumbent settings object</dfn> is the <a>environment settings object</a> in the
  <a>stack of script settings objects</a> that was most-recently added (i.e. the last one on
  the stack). If the stack is empty, then there is no <a>incumbent settings object</a>. It is
  used in some security checks.

  <p class="note">
  The Web IDL specification also uses these algorithms. [[!WEBIDL]]
  </p>

  <div class="example">
    Consider the following two pages, with the first being loaded in a browser window and the
    second being loaded in the <code>iframe</code> of the first:

    <pre highlight="html">
  &lt;!-- a/a.html -->
  &lt;!DOCTYPE HTML>
  &lt;title>Outer page&lt;/title>
  &lt;iframe src="../b/b.html">&lt;/iframe>
  &lt;input type=button onclick="frames[0].hello()" value="Hello">
  </pre>

    <pre highlight="html">
  &lt;!-- b/b.html -->
  &lt;!DOCTYPE HTML>
  &lt;title>Inner page&lt;/title>
  &lt;script>
  function hello() {
    location.assign('c.html');
  }
  &lt;/script>
  </pre>

    When the button is pressed in the inner frame, the outer page runs script in the inner page.
    While the <code>hello()</code> function is running, the <a>entry settings
    object</a> is that of the outer file (<code>a/a.html</code>), and the
    <a>incumbent settings object</a> is that of the inner file (<code>b/b.html</code>). The <code>assign()</code> method uses
    the <a>entry settings object</a> to resolve the URL, so we end up loading <code>a/c.html</code>, but it uses the <a>incumbent settings object</a> to establish
    the <a>source browsing context</a>, from which the referrer is established, so the <code>Referer</code> header sent with the request for <code>a/c.html</code> specifies the inner file's URL (the one ending with <code>b/b.html</code>).
  </div>

  <hr />

  Each <a>unit of related similar-origin browsing contexts</a> has a <dfn>global script
  clean-up jobs list</dfn>, which must initially be empty. A global script clean-up job cannot run
  scripts, and cannot be sensitive to the order in which other clean-up jobs are executed. The File
  API uses this to release <code>blob:</code> URLs. [[!FILEAPI]]

  When the user agent is to <dfn>run the global script clean-up jobs</dfn>, the user agent must
  perform each of the jobs in the <a>global script clean-up jobs list</a> and then empty the
  list.

  </div>

  <div class="impl">

<h5 id="creating-scripts"><dfn>Creating scripts</dfn></h5>

  When the specification says that a <a>script</a> is to be <dfn>created</dfn>, given some script source, a script source URL, its
  scripting language, an <a>environment settings object</a>, and optionally a <var>muted
  errors</var> flag, the user agent must run the following steps:

  <ol>

    <li>Let <var>script</var> be a new <a>script</a> that
    this algorithm will subsequently initialize.</li>

    <li>If <a>scripting is disabled</a> for <a>browsing
    context</a> passed to this algorithm, then abort these steps, as if the script source
    described a program that did nothing but return void.

    <li>Obtain the appropriate <a>script execution environment</a> for the given scripting
    language from the <a>environment settings object</a> provided.</li>

    <li>Parse/compile/initialize the source of the script using the <a>script execution
    environment</a>, as appropriate for the scripting language, and thus obtain <var>script</var>'s <a>code entry-point</a>.</li>

    <li>Let <var>script</var>'s <a>settings object</a> be the <a>environment
    settings object</a> provided.</li>

    <li>If the <var>muted errors</var> flag was set, then set <var>script</var>'s <a>muted errors</a> flag.</li>

    <li>

    If all the steps above succeeded (in particular, if the script was compiled successfully),
    <a>Jump</a> to <var>script</var>'s <a>code
    entry-point</a>.

    Otherwise, <a>report the error</a> for <var>script</var>, with the
    problematic position (line number and column number), using the <a>global object</a>
    specified by the <a>environment settings object</a> as the target. If the error is still <i>not handled</i> after this, then the error may be reported to
    the user.

    </li>

  </ol>

  </div>

  <div class="impl">

<h5 id="killing-scripts"><dfn>Killing scripts</dfn></h5>

  User agents may impose resource limitations on scripts, for example CPU quotas, memory limits,
  total execution time limits, or bandwidth limitations. When a script exceeds a limit, the user
  agent may either throw a <code>QuotaExceededError</code> exception, abort the script without an
  exception, prompt the user, or throttle script execution.

  <div class="example">
    For example, the following script never terminates. A user agent could, after waiting for a
    few seconds, prompt the user to either terminate the script or let it continue.

    <pre highlight="html">
  &lt;script>
  while (true) { /* loop */ }
  &lt;/script>
  </pre>
  </div>

  User agents are encouraged to allow users to disable scripting whenever the user is prompted
  either by a script (e.g. using the <code>window.alert()</code> API) or because
  of a script's actions (e.g. because it has exceeded a time limit).

  If scripting is disabled while a script is executing, the script should be terminated
  immediately.

  User agents may allow users to specifically disable scripts just for the purposes of closing a
  <a>browsing context</a>.

  <p class="example">
  For example, the prompt mentioned in the example above could also offer the
  user with a mechanism to just close the page entirely, without running any <code>unload</code> event handlers.
  </p>

  </div>

<h5 id="runtime-script-errors"><dfn>Runtime script errors</dfn></h5>

  <div class="impl">

  When the user agent is required to <dfn>report an error</dfn> for a
  particular <a>script</a> <var>script</var> with a particular
  position <var>line</var>:<var>col</var>, using a particular target <var>target</var>, it must run these steps, after which the error is either <dfn><i>handled</i></dfn> or <dfn><i>not
  handled</i></dfn>:

  <ol>

    <li>If <var>target</var> is <a>in error reporting mode</a>, then abort these
    steps; the error is <i>not handled</i>.</li>

    <li>Let <var>target</var> be <dfn>in error reporting mode</dfn>.</li>

    <li>Let <var>message</var> be a user-agent-defined string describing the error in a
    helpful manner.

    </li>

    <li>Let <var>error object</var> be the object that represents the error: in the case of an
    uncaught exception, that would be the object that was thrown; in the case of a JavaScript error
    that would be an <code>Error</code> object. If there is no corresponding
    object, then the null value must be used instead.</li>

    <li>

    Let <var>location</var> be an <a>absolute URL</a> that corresponds to the
    resource from which <var>script</var> was obtained.

    <p class="note">
  The resource containing the script will typically be the file from which the
    <code>Document</code> was parsed, e.g. for inline <code>script</code> elements or <a>event
    handler content attributes</a>; or the JavaScript file that the script was in, for external
    scripts. Even for dynamically-generated scripts, user agents are strongly encouraged to attempt
    to keep track of the original source of a script. For example, if an external script uses the
    <code>document.write()</code> API to insert an inline
    <code>script</code> element during parsing, the URL of the resource containing the script would
    ideally be reported as being the external script, and the line number might ideally be reported
    as the line with the <code>document.write()</code> call or where the
    string passed to that call was first constructed. Naturally, implementing this can be somewhat
    non-trivial.
  </p>

    <p class="note">
  User agents are similarly encouraged to keep careful track of the original line
    numbers, even in the face of <code>document.write()</code> calls
    mutating the document as it is parsed, or <a>event handler content attributes</a> spanning
    multiple lines.
  </p>

    </li>

    <li>If <var>script</var> has <a>muted errors</a>, then set <var>message</var> to "<code>Script error.</code>", set <var>location</var>
    to the empty string, set <var>line</var> and <var>col</var> to 0, and set <var>error object</var> to null.</li>

    <li>Let <var>event</var> be a new <a>trusted</a>
    <code>ErrorEvent</code> object that does not bubble but is cancelable, and which has the event
    name <code>error</code>.</li>

    <li>Initialize <var>event</var>'s <code>message</code>
    attribute to <var>message</var>.</li>

    <li>Initialize <var>event</var>'s <code>filename</code> attribute to <var>location</var>.</li>

    <li>Initialize <var>event</var>'s <code>lineno</code>
    attribute to <var>line</var>.</li>

    <li>Initialize <var>event</var>'s <code>colno</code>
    attribute to <var>col</var>.</li>

    <li>Initialize <var>event</var>'s <code>error</code>
    attribute to <var>error object</var>.</li>

    <li><a>Dispatch</a> <var>event</var> at <var>target</var>.</li>

    <li>Let <var>target</var> no longer be <a>in error reporting mode</a>.</li>

    <li>If <var>event</var> was canceled, then the error is <i>handled</i>. Otherwise, the error is <i>not handled</i>.

  </ol>

<h6 id="runtime-script-errors-in-documents"><dfn>Runtime script errors in documents</dfn></h6>

  When the user agent is to <dfn>report an exception</dfn>
  <var>E</var>, the user agent must <a>report the error</a> for the relevant <a>script</a>, with the problematic position (line number and column
  number) in the resource containing the script, using the <a>global object</a> specified by
  the script's <a>settings object</a> as the target. If the error is still <i>not handled</i> after this, then the error may be reported to
  the user.

  When an exception is thrown during the execution of one of the scripts associated with a
  <code>Document</code>, and the exception is not caught, the user agent must <a>report the
  exception</a>.

<h6 id="the-errorevent-interface"><dfn>The <code>ErrorEvent</code> interface</dfn></h6>

  </div>

  <pre class="idl" data-highlight="webidl">
  [Constructor(DOMString type, optional <a>ErrorEventInit</a> eventInitDict), Exposed=(Window, Worker)]
  interface <dfn>ErrorEvent</dfn> : <a>Event</a> {
  readonly attribute DOMString <a>message</a>;
  readonly attribute DOMString <a>filename</a>;
  readonly attribute unsigned long <a>lineno</a>;
  readonly attribute unsigned long <a>colno</a>;
  readonly attribute any <a>error</a>;
  };

  dictionary <dfn>ErrorEventInit</dfn> : <a>EventInit</a> {
  DOMString message;
  DOMString filename;
  unsigned long lineno;
  unsigned long colno;
  any error;
  };
  </pre>

  The <dfn><code>message</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to the
  empty string. It represents the error message.

  The <dfn><code>filename</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to the
  empty string. It represents the <a>absolute URL</a> of the script in which the error
  originally occurred.

  The <dfn><code>lineno</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to
  zero. It represents the line number where the error occurred in the script.

  The <dfn><code>colno</code></dfn> attribute must return the value
  it was initialized to. When the object is created, this attribute must be initialized to zero. It
  represents the column number where the error occurred in the script.

  The <dfn><code>error</code></dfn> attribute must return the value
  it was initialized to. When the object is created, this attribute must be initialized to null.
  Where appropriate, it is set to the object representing the error (e.g. the exception object in
  the case of an uncaught DOM exception).

  <div class="impl">

<h4 id="event-loops"><dfn>Event loops</dfn></h4>

<h5 id="definitions"><dfn>Definitions</dfn></h5>

  To coordinate events, user interaction, scripts, rendering, networking, and so forth, user
  agents must use <dfn>event loops</dfn> as described in this section. There are
  two kinds of event loops: those for <a>browsing contexts</a>, and
  those for <a>workers</a>.

  There must be at least one <a>browsing context</a> <a>event loop</a> per user
  agent, and at most one per <a>unit of related similar-origin browsing contexts</a>.

  <p class="note">
  When there is more than one <a>event loop</a> for a <a>unit of related
  browsing contexts</a>, complications arise when a <a>browsing context</a> in that group
  is <a>navigated</a> such that it switches from one <a>unit of related
  similar-origin browsing contexts</a> to another. This specification does not currently describe
  how to handle these complications.
  </p>

  A <a>browsing context</a> <a>event loop</a> always has at least one <a>browsing
  context</a>. If such an <a>event loop</a>'s <a>browsing
  contexts</a> all go away, then the <a>event loop</a> goes away as well. A <a>browsing
  context</a> always has an <a>event loop</a> coordinating its activities.

  <a>Worker event loops</a> are simpler: each worker has one
  <a>event loop</a>, and the <a>worker processing model</a>
  manages the <a>event loop</a>'s lifetime.

  <hr />

  An <a>event loop</a> has one or more <dfn>task queues</dfn>. A
  <a>task queue</a> is an ordered list of <dfn>tasks</dfn>, which are
  algorithms that are responsible for such work as:

  <dl>

    <dt>Events</dt>

    <dd>

    Dispatching an <code>Event</code> object at a particular
    <code>EventTarget</code> object is often done by a dedicated task.

    <p class="note">
  Not all events are dispatched using the <a>task queue</a>, many are
    dispatched during other tasks.
  </p>

    </dd>

    <dt>Parsing</dt>

    <dd>The <a>HTML parser</a> tokenizing one or more bytes, and then processing any
    resulting tokens, is typically a task.</dd>

    <dt>Callbacks</dt>

    <dd>Calling a callback is often done by a dedicated task.</dd>

    <dt>Using a resource</dt>

    <dd>When an algorithm <a>fetches</a> a resource, if the fetching
    occurs in a non-blocking fashion then the processing of the resource once some or all of the
    resource is available is performed by a task.</dd>

    <dt>Reacting to DOM manipulation</dt>

    <dd>Some elements have tasks that trigger in response to DOM manipulation, e.g. when that
    element is <a>inserted into the document</a>.

  </dl>

  Each <a>task</a> in a <a>browsing context</a> <a>event
  loop</a> is associated with a <code>Document</code>; if the task was queued in the context of
  an element, then it is the element's <a>node document</a>; if the task was queued in the context
  of a <a>browsing context</a>, then it is the <a>browsing context</a>'s <a>active
  document</a> at the time the task was queued; if the task was queued by or for a <a>script</a> then the document is the <a>responsible document</a>
  specified by the script's <a>settings object</a>.

  A <a>task</a> is intended for a specific <a>event loop</a>:
  the <a>event loop</a> that is handling <a>tasks</a> for the
  <a>task</a>'s associated <code>Document</code> or <span
  title="workers">worker</span>.

  When a user agent is to <dfn>queue a task</dfn>, it must add the given task to one of the <a>task queues</a> of the relevant <a>event loop</a>.

  Each <a>task</a> is defined as coming from a specific <dfn>task
  source</dfn>. All the tasks from one particular <a>task source</a> and destined to a
  particular <a>event loop</a> (e.g. the callbacks generated by timers of a
  <code>Document</code>, the events fired for mouse movements over that <code>Document</code>, the
  tasks queued for the parser of that <code>Document</code>) must always be added to the same
  <a>task queue</a>, but <a>tasks</a> from different <a>task sources</a> may be placed in different <a>task
  queues</a>.

  <p class="example">
  For example, a user agent could have one <a>task queue</a> for mouse and
  key events (the <a>user interaction task source</a>), and another for everything else. The
  user agent could then give keyboard and mouse events preference over other tasks three quarters of
  the time, keeping the interface responsive but not starving other task queues, and never
  processing events from any one <a>task source</a> out of order.
  </p>

  Each <a>event loop</a> has a <dfn>currently running task</dfn>. Initially, this is null.
  It is used to handle reentrancy. Each <a>event loop</a> also has a <dfn>performing a
  microtask checkpoint</dfn> flag, which must initially be false. It is used to prevent reentrant
  invocation of the <a>perform a microtask checkpoint</a> algorithm.

  <hr />

  A user agent may have one <dfn>storage mutex</dfn>. This mutex is used to control access to
  shared state like cookies. At any one point, the <a>storage mutex</a> is either free, or
  owned by a particular <a>event loop</a> or instance of the <a>fetching</a> algorithm.

  If a user agent does not implement a <a>storage mutex</a>, it is exempt from implementing
  the requirements that require it to acquire or release it.

  <p class="note">
  User agent implementors have to make a choice between two evils. On the one hand,
  not implementing the storage mutex means that there is a risk of data corruption: a site could,
  for instance, try to read a cookie, increment its value, then write it back out, using the new
  value of the cookie as a unique identifier for the session; if the site does this twice in two
  different browser windows at the same time, it might end up using the same "unique" identifier for
  both sessions, with potentially disastrous effects. On the other hand, implementing the storage
  mutex has potentially serious performance implications: whenever a site uses Web Storage or
  cookies, all other sites that try to use Web Storage or cookies are blocked until the first site
  finishes.
  </p>

  <p class="warning">So far, all browsers faced with this decision have opted to not implement the
  <a>storage mutex</a>.</p>

  Whenever a <a>script</a> calls into a <a>plugin</a>, and
  whenever a <a>plugin</a> calls into a <a>script</a>, the user
  agent must release the <a>storage mutex</a>.

<h5 id="processing-model"><dfn>Processing model</dfn></h5>

  An <a>event loop</a> must continually run through the following steps for as long as it
  exists:

  <ol>

    <li>

    Select the oldest <a>task</a> on one of the <a>event
    loop</a>'s <a>task queues</a>, if any, ignoring, in the case of a
    <a>browsing context</a> <a>event loop</a>, tasks whose associated
    <code>Document</code>s are not <a>fully active</a>. The user agent may pick any <a>task
    queue</a>. If there is no task to select, then jump to the <i>microtasks</i> step below.

    </li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> to the <a>task</a> selected in the previous step.</li>

    <li><i>Run</i>: Run the selected <a>task</a>.</li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> back to
    null.</li>

    <li>If the <a>storage mutex</a> is now owned by the <a>event loop</a>, release it
    so that it is once again free.</li>

    <li>Remove the task that was run in the <i>run</i> step above from its <a>task
    queue</a>.</li>

    <li><i>Microtasks</i>: <a>Perform a microtask checkpoint</a>.</li>

    <li>

    <i>Update the rendering</i>: If this <a>event loop</a> is a <a>browsing
    context</a> <a>event loop</a> (as opposed to a <span title='workers'>worker</span>
    <a>event loop</a>), then run the following substeps.

    <ol>

      <li>Let <var>now</var> be the value that would be returned by the <code>Performance</code>
      object's <code>now()</code> method. [[!HRT]]

      <li>

      Let <var>docs</var> be the list of <code>Document</code> objects associated with the
      <a>event loop</a> in question, sorted arbitrarily except that the following conditions
      must be met:

      <ul>

        <li>Any <code>Document</code> <var>B</var> that is <a>nested through</a> a
        <code>Document</code> <var>A</var> must be listed after <var>A</var> in the list.</li>

        <li>If there are two documents <var>A</var> and <var>B</var> whose <a>browsing contexts</a> are both <a>nested
        browsing contexts</a> and their <a>browsing context
        containers</a> are both elements in the same <code>Document</code> <var>C</var>, then the
        order of <var>A</var> and <var>B</var> in the list must match the relative <a>tree
        order</a> of their respective <a>browsing context
        containers</a> in <var>C</var>.</li>

      </ul>

      In the steps below that iterate over <var>docs</var>, each <code>Document</code> must be
      processed in the order it is found in the list.

      </li>

      <li>

      If there is a <a>top-level browsing context</a> <var>B</var> that the user agent
      believes would not benefit from having its rendering updated at this time, then remove from
      <var>docs</var> all <code>Document</code> objects whose <a>browsing context</a>'s
      <a>top-level browsing context</a> is <var>B</var>.

      <p class="note">
  Whether a <a>top-level browsing context</a> would benefit from having
      its rendering updated depends on various factors, such as the update frequency. For example,
      if the browser is attempting to achieve a 60 Hz refresh rate, then these steps are only
      necessary every 60th of a second (about 16.7ms). If the browser finds that a <a>top-level
      browsing context</a> is not able to sustain this rate, it might drop to a more sustainable
      30Hz for that set of <code>Document</code>s, rather than occasionally dropping frames. (This
      specification does not mandate any particular model for when to update the rendering.)
      Similarly, if a <a>top-level browsing context</a> is in the background, the user agent
      might decide to drop that page to a much slower 4Hz, or even less.
  </p>

      </li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run the resize steps</dfn> for
      that <code>Document</code>, passing in <var>now</var> as the timestamp. <a>\[CSSOMVIEW]</a></li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run the scroll steps</dfn> for
      that <code>Document</code>, passing in <var>now</var> as the timestamp. <a>\[CSSOMVIEW]</a></li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>evaluate media queries and
      report changes</dfn> for that <code>Document</code>, passing in <var>now</var> as the
      timestamp. [[!CSSOMVIEW]]</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run CSS animations and send
      events</dfn> for that <code>Document</code>, passing in <var>now</var> as the timestamp. <a>\[CSSANIMATIONS]</a></li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run the fullscreen rendering
      steps</dfn> for that <code>Document</code>, passing in <var>now</var> as the timestamp. <a>\[FULLSCREEN]</a></li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <a>run the animation frame
      callbacks</a> for that <code>Document</code>, passing in <var>now</var> as the
      timestamp.</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, update the rendering or user
      interface of that <code>Document</code> and its <a>browsing context</a> to reflect the
      current state.</li>

    </ol>

    </li>

    <li>If this is a <span title='workers'>worker</span> <a>event loop</a> (i.e. one running for a
    <code>WorkerGlobalScope</code>), but there are no <a>tasks</a> in the
    <a>event loop</a>'s <a>task queues</a> and the
    <code>WorkerGlobalScope</code> object's <a>closing</a> flag is true, then destroy the <a>event
    loop</a>, aborting these steps, resuming the <a>run a worker</a> steps described in the
    <span title='workers'>Web Worker</span> section below.</li>

    <li>Return to the <a>first step</a> of the <a>event loop</a>.</li>

  </ol>

  <hr />

  Each <a>event loop</a> has a <dfn>microtask queue</dfn>. A <dfn>microtask</dfn> is a
  <a>task</a> that is originally to be queued on the <a>microtask
  queue</a> rather than a <a>task queue</a>. There are two kinds of <a>microtasks</a>: <dfn>solitary callback
  microtasks</dfn>, and <dfn>compound microtasks</dfn>.

  <p class="note">
  This specification only has <a>solitary
  callback microtasks</a>. Specifications that use <a>compound
  microtasks</a> have to take extra care to <a>wrap callbacks</a> to handle <a>spinning the event
  loop</a>.
  </p>

  When an algorithm requires a <a>microtask</a> to be <dfn>queued</dfn>, it must be appended to the relevant <a>event loop</a>'s
  <a>microtask queue</a>; the <a>task source</a> of such a <a>microtask</a> is the
  <dfn>microtask task source</dfn>.

  <p class="note">
  It is possible for a <a>microtask</a> to be moved to a regular <a>task
  queue</a>, if, during its initial execution, it <a>spins the
  event loop</a>. In that case, the <a>microtask task source</a> is the <a>task
  source</a> used. Normally, the <a>task source</a> of a <a>microtask</a> is
  irrelevant.
  </p>

  When a user agent is to <dfn>perform a microtask checkpoint</dfn>, if the <a>performing a
  microtask checkpoint</a> flag is false, then the user agent must run the following steps:

  <ol>

    <li>Let the <a>performing a microtask checkpoint</a> flag be true.</li>

    <li><i>Microtask queue handling</i>: If the <a>event loop</a>'s <a>microtask
    queue</a> is empty, jump to the <i>done</i> step below.</li>

    <li>Select the oldest <a>microtask</a> on the <a>event loop</a>'s <a>microtask
    queue</a>.</li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> to the <a>task</a> selected in the previous step.</li>

    <li>

    <i>Run</i>: Run the selected <a>task</a>.

    <p class="note">
  This might involve invoking scripted callbacks, which eventually calls the
    <a>clean up after running a callback</a> steps, which call this <a>perform a microtask
    checkpoint</a> algorithm again, which is why we use the <a>performing a microtask
    checkpoint</a> flag to avoid reentrancy.
  </p>

    </li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> back to
    null.</li>

    <li>If the <a>storage mutex</a> is now owned by the <a>event loop</a>, release it
    so that it is once again free.</li>

    <li>Remove the <a>microtask</a> run in the step above from the <a>microtask
    queue</a>, and return to the <i>microtask queue handling</i> step.</li>

    <li><i>Done</i>: Let the <a>performing a microtask checkpoint</a> flag be
    false.</li>

  </ol>

  If, while a <a>compound microtask</a> is running, the user agent is required to
  <dfn>execute a compound microtask subtask</dfn> to run a series of steps, the user agent must run
  the following steps:

  <ol>

    <li>Let <var>parent</var> be the <a>event loop</a>'s <a>currently running
    task</a> (the currently running <a>compound microtask</a>).</li>

    <li>Let <var>subtask</var> be a new <a>task</a> that
    consists of running the given series of steps. The <a>task source</a> of such a
    <a>microtask</a> is the <a>microtask task source</a>. This is a <dfn>compound
    microtask subtask</dfn>.</li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> to <var>subtask</var>.</li>

    <li>Run <var>subtask</var>.</li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> back to <var>parent</var>.</li>

  </ol>

  <hr />

  When an algorithm running <a>in parallel</a> is to <dfn>await a stable state</dfn>, the
  user agent must <a>queue a microtask</a> that runs the following steps, and must then stop
  executing (execution of the algorithm resumes when the microtask is run, as described in the
  following steps):

  <ol>

    <li>Run the algorithm's <dfn>synchronous section</dfn>.</li>

    <li>Resumes execution of the algorithm <a>in parallel</a>, if appropriate, as described
    in the algorithm's steps.</li>

  </ol>

  <p class="note">
  Steps in <a>synchronous sections</a> are marked
  with &#x231B;.
  </p>

  <hr />

  When an algorithm says to <dfn>spin the event loop</dfn> until a condition <var>goal</var> is met, the user agent must run the following steps:

  <ol>

    <li>

    Let <var>task</var> be the <a>event loop</a>'s <a>currently running
    task</a>.

    <p class="note">
  This might be a <a>microtask</a>, in which case it is a <a>solitary
    callback microtask</a>. It could also be a <a>compound microtask subtask</a>, or a
    regular <a>task</a> that is not a <a>microtask</a>. It will
    <em>not</em> be a <a>compound microtask</a>.
  </p>

    </li>

    <li>Let <var>task source</var> be <var>task</var>'s <a>task
    source</a>.</li>

    <li>Let <var>old stack of script settings objects</var> be a copy of the <a>stack
    of script settings objects</a>.</li>

    <li>Empty the <a>stack of script settings objects</a>.</li>

    <li><a>Run the global script clean-up jobs</a>.</li>

    <li><a>Perform a microtask checkpoint</a>.</li>

    <li>

    Stop <var>task</var>, allowing whatever algorithm that invoked it to resume, but
    continue these steps <a>in parallel</a>.

    <p class="note">
  This causes one of the following algorithms to continue: the <a>event
    loop</a>'s main set of steps, the <a>perform a microtask checkpoint</a> algorithm, or
    the <a>execute a compound microtask subtask</a> algorithm to continue.
  </p>

    </li>

    <li>Wait until the condition <var>goal</var> is met.</li>

    <li><a>Queue a task</a> to continue running these steps, using the <a>task
    source</a> <var>task source</var>. Wait until this new task runs before continuing
    these steps.</li>

    <li>Replace the <a>stack of script settings objects</a> with the <var>old
    stack of script settings objects</var>.</li>

    <li>Return to the caller.</li>

  </ol>

  <hr />

  Some of the algorithms in this specification, for historical reasons, require the user agent to
  <dfn>pause</dfn> while running a <a>task</a> until a condition <var>goal</var> is met. This means running the following steps:

  <ol>

    <li>If necessary, update the rendering or user interface of any <code>Document</code> or
    <a>browsing context</a> to reflect the current state.</li>

    <li>Wait until the condition <var>goal</var> is met. While a user agent has a paused
    <a>task</a>, the corresponding <a>event loop</a> must not run
    further <a>tasks</a>, and any script in the currently running <a>task</a> must block. User agents should remain responsive to user input
    while paused, however, albeit in a reduced capacity since the <a>event loop</a> will not be
    doing anything.</li>

  </ol>

  <hr />

  When a user agent is to <dfn>obtain the storage mutex</dfn> as part of running a <a>task</a>, it must run through the following steps:

  <ol>

    <li>If the <a>storage mutex</a> is already owned by this <a>task</a>'s <a>event loop</a>, then abort these steps.</li>

    <li>Otherwise, <a>pause</a> until the <a>storage mutex</a> can be taken by the
    <a>event loop</a>.</li>

    <li>Take ownership of the <a>storage mutex</a>.</li>

  </ol>

  </div>

  <div class="impl">

<h5 id="generic-task-sources"><dfn>Generic task sources</dfn></h5>

  The following <a>task sources</a> are used by a number of mostly
  unrelated features in this and other specifications.

  <dl>

    <dt>The <dfn>DOM manipulation task source</dfn></dt>

    <dd>

    This <a>task source</a> is used for features that react to DOM manipulations, such as
    things that happen in a non-blocking fashion when an element is <a>inserted into the document</a>.

    </dd>

    <dt>The <dfn>user interaction task source</dfn></dt>

    <dd>

    This <a>task source</a> is used for features that react to user interaction, for
    example keyboard or mouse input.

    Events sent in response to user input (e.g. <code>click</code> events) must be fired using <a>tasks</a> <a>queued</a> with the <a>user
    interaction task source</a>. [[!UIEVENTS]]

    </dd>

    <dt>The <dfn>networking task source</dfn></dt>

    <dd>

    This <a>task source</a> is used for features that trigger in response to network
    activity.

    </dd>

    <dt>The <dfn>history traversal task source</dfn></dt>

    <dd>

    This <a>task source</a> is used to queue calls to <code>history.back()</code> and similar APIs.

    </dd>

  </dl>

  </div>

<h4 id="events"><dfn>Events</dfn></h4>

<h5 id="event-handlers"><dfn>Event handlers</dfn></h5>

  Many objects can have <dfn>event handlers</dfn> specified. These act as non-capture event
  listeners for the object on which they are specified. [[!DOM]]

  An <a>event handler</a> has a name, which always starts with
  "<code>on</code>" and is followed by the name of the event for which it is intended.

  An <a>event handler</a> can either have the value null, or be set
  to a callback object<span class="impl">, or be set to an <a>internal raw uncompiled
  handler</a></span>. The <code>EventHandler</code> callback function type describes how this is
  exposed to scripts. <span class="impl">Initially, event handlers must be set to null.</span>

  Event handlers are exposed in one of two ways.

  The first way, common to all event handlers, is as an <a>event handler IDL attribute</a>.

  The second way is as an <a>event handler content
  attribute</a>. Event handlers on <a>HTML elements</a> and some of the event handlers on
  <code>Window</code> objects are exposed in this way.

  <div class="impl">

  <hr />

  An <dfn>event handler IDL attribute</dfn> is an IDL
  attribute for a specific <a>event handler</a>. The name of the IDL
  attribute is the same as the name of the <a>event handler</a>.

  <a>Event handler IDL attributes</a>, on setting, must set the corresponding <a>event handler</a> to their new value, and on getting, must return the
  result of <a>getting the current value of the event handler</a> in question (this can throw
  an exception, in which case the getting propagates it to the caller, it does not catch it).

  If an <a>event handler IDL attribute</a> exposes an
  <a>event handler</a> of an object that doesn't exist, it must always
  return null on getting and must do nothing on setting.

  <p class="note">
  This can happen in particular for <a>event
  handler IDL attribute</a> on <code>body</code> elements that do not have corresponding
  <code>Window</code> objects.
  </p>

  <p class="note">
  Certain event handler IDL attributes have additional requirements, in particular
  the <code>onmessage</code> attribute of
  <code>MessagePort</code> objects.
  </p>

  <hr />

  </div>

  An <dfn>event handler content attribute</dfn> is a
  content attribute for a specific <a>event handler</a>. The name of
  the content attribute is the same as the name of the <a>event
  handler</a>.

  <a>Event handler content attributes</a>, when specified, must contain valid JavaScript
  code which, when parsed, would match the <code>FunctionBody</code> production after
  automatic semicolon insertion. [[!ECMA262]]

  <div class="impl">

  When an <a>event handler content attribute</a>
  is set, the user agent must set the corresponding <a>event
  handler</a> to an <a>internal raw uncompiled handler</a> consisting of the attribute's
  new value and the script location where the attribute was set to this value

  When an event handler content attribute is removed, the user agent must set the corresponding
  <a>event handler</a> to null.

  <hr />

  When an <a>event handler</a> <var>H</var> of an element
  or object <var>T</var> implementing the <code>EventTarget</code> interface is first set
  to a non-null value, the user agent must append an <a>event
  listener</a> to the list of <a>event listeners</a>
  associated with <var>T</var> with <i>type</i> set to the <dfn>event handler event
  type</dfn> corresponding to <var>H</var>, <i>capture</i> set to false, and
  <i>listener</i> set to <a>the event handler processing algorithm</a> defined below. [[!DOM]]

  <p class="note">
  The <i>listener</i> is emphatically <em>not</em> the <a>event handler</a> itself. Every event handler ends up registering the same
  <i>listener</i>, the algorithm defined below, which takes care of invoking the right callback, and
  processing the callback's return value.
  </p>

  <p class="note">
  This only happens the first time the <a>event
  handler</a>'s value is set. Since listeners are called in the order they were registered, the
  order of event listeners for a particular event type will always be first the event listeners
  registered with <code>addEventListener()</code> before
  the first time the <a>event handler</a> was set to a non-null value,
  then the callback to which it is currently set, if any, and finally the event listeners registered
  with <code>addEventListener()</code> <em>after</em> the
  first time the <a>event handler</a> was set to a non-null value.
  </p>

  </div>

  <div class="example">
    This example demonstrates the order in which event listeners are invoked. If the button in
    this example is clicked by the user, the page will show four alerts, with the text "ONE", "TWO",
    "THREE", and "FOUR" respectively.

    <pre highlight="html">
  &lt;button>Start Demo&lt;/button>
  &lt;script>
  var button = document.getElementById('test');
  button.addEventListener('click', function () { alert('ONE') }, false);
  button.setAttribute('onclick', "alert('NOT CALLED')"); // event handler listener is registered here
  button.addEventListener('click', function () { alert('THREE') }, false);
  button.onclick = function () { alert('TWO'); };
  button.addEventListener('click', function () { alert('FOUR') }, false);
  &lt;/script>
  </pre>
  </div>

  <div class="impl">

  <p class="note">
  The interfaces implemented by the event object do not influence whether an <a>event handler</a> is triggered or not.
  </p>

  <dfn>The event handler processing algorithm</dfn> for an <a>event
  handler</a> <var>H</var> and an <code>Event</code> object <var>E</var> is as
  follows:

  <ol>

    <li>

    Let <var>callback</var> be the result of <a>getting the current value of the
    event handler</a> <var>H</var>.

    </li>

    <li>If <var>callback</var> is null, then abort these steps.</li>

    <li>

    Process the <code>Event</code> object <var>E</var> as follows:

    <dl class="switch">

      <dt>If <var>E</var> is an <code>ErrorEvent</code> object and the <a>event handler IDL attribute</a>'s type is
      <code>OnErrorEventHandler</code></dt>

      <dd>

      <a>Invoke</a> <var>callback</var> with five
      arguments, the first one having the value of <var>E</var>'s <code>message</code> attribute, the second having the value of
      <var>E</var>'s <code>filename</code> attribute, the third
      having the value of <var>E</var>'s <code>lineno</code>
      attribute, the fourth having the value of <var>E</var>'s <code>colno</code> attribute, the fifth having the value of
      <var>E</var>'s <code>error</code> attribute, and with the <i>callback this value</i> set to <var>E</var>'s <code>currentTarget</code>. Let <var>return value</var> be the
      callback's return value. [[!WEBIDL]]

      </dd>

      <dt>Otherwise</dt>

      <dd>

      <a>Invoke</a> <var>callback</var>
      with one argument, the value of which is the <code>Event</code> object <var>E</var>,
      with the <i>callback this value</i> set to <var>E</var>'s <code>currentTarget</code>. Let <var>return value</var> be the callback's return value. [[!WEBIDL]]

      </dd>

    </dl>

    In this step, <dfn>invoke</dfn> means to <a>invoke the Web IDL callback function</a>.

    If an exception gets thrown by the callback, end these steps and allow the exception to
    propagate. (It will propagate to the <a>DOM event dispatch
    logic</a>, which will then <a>report the exception</a>.)

    </li>

    <li>

    Process <var>return value</var> as follows:

    <dl class="switch">

      <dt>If the event type is <code>mouseover</code></dt>
      <dt>If the event type is <code>error</code> and <var>E</var> is an <code>ErrorEvent</code> object</dt>

      <dd>If <var>return value</var> is a Web IDL boolean true value, then cancel the event.</dd>

      <dt>If the event type is <code>beforeunload</code></dt>

      <dd>

      <p class="note">
  The <a>event handler IDL
      attribute</a>'s type is <code>OnBeforeUnloadEventHandler</code>, and the <var>return value</var> will therefore have been coerced into either the value null or a
      DOMString.
  </p>

      If the <var>return value</var> is null, then cancel the event.

      Otherwise, If the <code>Event</code> object <var>E</var> is a
      <code>BeforeUnloadEvent</code> object, and the <code>Event</code> object <var>E</var>'s <code>returnValue</code>
      attribute's value is the empty string, then set the <code>returnValue</code> attribute's value to <var>return value</var>.

      </dd>

      <dt>Otherwise</dt>

      <dd>If <var>return value</var> is a Web IDL boolean false value, then cancel the
      event.</dd>

    </dl>

    </li>

  </ol>

  </div>

  <hr />

  The <code>EventHandler</code> callback function type represents a callback used for event
  handlers. It is represented in Web IDL as follows:

  <pre class="idl" data-highlight="webidl">
  [TreatNonObjectAsNull]
  callback <dfn>EventHandlerNonNull</dfn> = any (<a>Event</a> event);
  typedef <a>EventHandlerNonNull</a>? <dfn>EventHandler</dfn>;
  </pre>

  <p class="note">
  In JavaScript, any <code>Function</code> object implements
  this interface.
  </p>

  <div class="example">
    For example, the following document fragment:

    <pre highlight="javascript">&lt;body onload="alert(this)" onclick="alert(this)"></pre>

    ...leads to an alert saying "<code>[object&nbsp;Window]</code>" when the document is
    loaded, and an alert saying "<code>[object&nbsp;HTMLBodyElement]</code>" whenever the
    user clicks something in the page.
  </div>

  <p class="note">
  The return value of the function affects whether the event is canceled or not:
  <span class="impl">as described above,</span> if the return value is false, the event is canceled
  (except for <code>mouseover</code> events, where the return value has to
  be true to cancel the event). With <code>beforeunload</code> events,
  the value is instead used to determine the message to show the user.
  </p>

  For historical reasons, the <code>onerror</code> handler has different
  arguments:

  <pre class="idl" data-highlight="webidl">
  [TreatNonObjectAsNull]
  callback <dfn>OnErrorEventHandlerNonNull</dfn> = any ((<a>Event</a> or DOMString) event, optional DOMString source, optional unsigned long lineno, optional unsigned long column, optional any error);
  typedef <a>OnErrorEventHandlerNonNull</a>? <dfn>OnErrorEventHandler</dfn>;
  </pre>

  Similarly, the <code>onbeforeunload</code> handler has a
  different return value:

  <pre class="idl" data-highlight="webidl">
  [TreatNonObjectAsNull]
  callback <dfn>OnBeforeUnloadEventHandlerNonNull</dfn> = DOMString? (<a>Event</a> event);
  typedef <a>OnBeforeUnloadEventHandlerNonNull</a>? <dfn>OnBeforeUnloadEventHandler</dfn>;
  </pre>

  <div class="impl">

  <hr />

  An <dfn>internal raw uncompiled handler</dfn> is a tuple with the following information:

  <ul class="brief">

    <li>An uncompiled script body

    <li>A location where the script body originated, in case an error needs to be reported

  </ul>

  When the user agent is to <dfn>get the
  current value of the event handler</dfn> <var>H</var>, it must run these steps:

  <ol>

    <li>

    If <var>H</var>'s value is an <a>internal raw uncompiled handler</a>, run these
    substeps:

    <ol>

      <li>

      If <var>H</var> is an element's <a>event
      handler</a>, then let <var>element</var> be the element, and <var>document</var> be the element's <a>node document</a>.

      Otherwise, <var>H</var> is a <code>Window</code> object's <a>event handler</a>: let <var>element</var> be null, and let <var>document</var> be the <code>Document</code> most recently associated with that
      <code>Window</code> object.

      </li>

      <li>If  <var>document</var> is
      not in a <a>browsing context</a>, or if <a>scripting is
      enabled</a> for <var>document</var>'s <a>browsing context</a>, then return
      null and abort the algorithm for <a>getting the current value of the event
      handler</a>.</li>

      <li>Let <var>body</var> be the uncompiled script body in the <a>internal raw
      uncompiled handler</a>.</li>

      <li>Let <var>location</var> be the location where the script body originated, as
      given by the <a>internal raw uncompiled handler</a>.</li>

      <li>If <var>element</var> is not null and <var>element</var> has a
      <a>form owner</a>, let <var>form owner</var> be that <a>form owner</a>.
      Otherwise, let <var>form owner</var> be null.</li>

      <li>Let <var>script settings</var> be the <a>environment settings object</a>
      created for the <code>Window</code> object with which <var>document</var> is
      currently associated.</li>

      <li>Obtain the <a>script execution environment</a> for JavaScript from <var>script settings</var>.</li>

      <li>

      If <var>body</var> is not parsable as <i>FunctionBody</i> or if parsing detects
      an <i>early error</i>, then follow these substeps:

      <ol>

        <li>Set <var>H</var>'s value to null.</li>

        <li><a>Report the error</a> for the appropriate <a>script</a> and with the appropriate position (line number and
        column number) given by <var>location</var>, using the <a>global object</a>
        specified by <var>script settings</var> as the target. If the error is still <i>not handled</i> after this, then the error may be reported
        to the user.</li>

        <li>Jump to the step labeled <i>end</i> below.</li>

      </ol>

      <p class="note">
  <i>FunctionBody</i> is defined in ECMAScript edition 5 section 13 Function
      Definition. <i>Early error</i> is defined in ECMAScript edition 5 section 16 Errors. [[!ECMA262]]
  </p>

      </li>

      <li>

      If <var>body</var> begins with a Directive Prolog that contains a Use Strict
      Directive then let <var>strict</var> be true, otherwise let <var>strict</var> be false.

      <p class="note">
  The terms "Directive Prolog" and "Use Strict Directive" are defined in
      ECMAScript edition 5 section 14.1 Directive Prologs and the Use Strict Directive. [[!ECMA262]]
  </p>

      </li>

      <li>

      Using the <a>script execution environment</a> obtained above, create a function
      object (as defined in ECMAScript edition 5 section 13.2 Creating Function Objects), with:

      <dl>

        <dt>Parameter list <var>FormalParameterList</var></dt>

        <dd>

        <dl class="switch">

          <dt>If <var>H</var> is an <code>onerror</code> <a>event handler</a> of a <code>Window</code> object</dt>

          <dd>Let the function have five arguments, named <code>event</code>, <code>source</code>, <code>lineno</code>, <code>colno</code>, and
          <code>error</code>.</dd>

          <dt>Otherwise</dt>

          <dd>Let the function have a single argument called <code>event</code>.</dd>

        </dl>

        </dd>

        <dt>Function body <var>FunctionBody</var></dt>

        <dd>The result of parsing <var>body</var> above.</dd>

        <dt>Lexical Environment <var>Scope</var></dt>

        <dd>

        <ol>

          <li>

          If <var>H</var> is an element's <a>event
          handler</a>, then let <var>Scope</var> be the result of
          NewObjectEnvironment(<var>document</var>, the <var>global
          environment</var>).

          Otherwise, <var>H</var> is a <code>Window</code> object's <a>event handler</a>: let <var>Scope</var> be the <var>global environment</var>.

          </li>

          <li>If <var>form owner</var> is not null, let <var>Scope</var> be
          the result of NewObjectEnvironment(<var>form owner</var>, <var>Scope</var>).</li>

          <li>If <var>element</var> is not null, let <var>Scope</var> be the
          result of NewObjectEnvironment(<var>element</var>, <var>Scope</var>).</li>

        </ol>

        <p class="note">
  NewObjectEnvironment() is defined in ECMAScript edition 5 section 10.2.2.3
        NewObjectEnvironment (O, E). [[!ECMA262]]
  </p>

        </dd>

        <dt>Boolean flag <var>Strict</var></dt>

        <dd>The value of <var>strict</var>.</dd>

      </dl>

      Let <var>function</var> be this new function.

      </li>

      <li>Let <var>script</var> be a new <a>script</a>.</li>

      <li>Let <var>script</var>'s <a>code entry-point</a> be <var>function</var>.</li>

      <li>Let <var>script</var>'s <a>settings object</a> be <var>script
      settings</var>.</li>

      <li>Set <var>H</var> to <var>function</var>.</li>

    </ol>

    </li>

    <li><i>End</i>: Return <var>H</var>'s value.</li>

  </ol>

  </div>

<h5 id="event-handlers-on-elements,-document-objects,-and-window-objects"><dfn>Event handlers on elements, <code>Document</code> objects, and <code>Window</code> objects</dfn></h5>

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported by all <a>HTML elements</a>, as both <a>event handler content attributes</a>
  and <a>event handler IDL attributes</a>; and <span class="impl">that must be</span>
  supported by all <code>Document</code> and <code>Window</code> objects, as <a>event handler IDL
  attributes</a>:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn><code>onabort</code></dfn> <td> <code>abort</code>
    <tr><td><dfn><code>onautocomplete</code></dfn> <td> <code>autocomplete</code>
    <tr><td><dfn><code>onautocompleteerror</code></dfn> <td> <code>autocompleteerror</code>
    <tr><td><dfn><code>oncancel</code></dfn> <td> <code>cancel</code>
    <tr><td><dfn><code>oncanplay</code></dfn> <td> <code>canplay</code>
    <tr><td><dfn><code>oncanplaythrough</code></dfn> <td> <code>canplaythrough</code>
    <tr><td><dfn><code>onchange</code></dfn> <td> <code>change</code>
    <tr><td><dfn><code>onclick</code></dfn> <td> <code>click</code>
    <tr><td><dfn><code>onclose</code></dfn> <td> <code>close</code>
    <tr><td><dfn><code>oncontextmenu</code></dfn> <td> <code>contextmenu</code>
    <tr><td><dfn><code>oncuechange</code></dfn> <td> <code>cuechange</code>
    <tr><td><dfn><code>ondblclick</code></dfn> <td> <code>dblclick</code>
    <tr><td><dfn><code>ondrag</code></dfn> <td> <code>drag</code>
    <tr><td><dfn><code>ondragend</code></dfn> <td> <code>dragend</code>
    <tr><td><dfn><code>ondragenter</code></dfn> <td> <code>dragenter</code>
    <tr><td><dfn><code>ondragexit</code></dfn> <td> <code>dragexit</code>
    <tr><td><dfn><code>ondragleave</code></dfn> <td> <code>dragleave</code>
    <tr><td><dfn><code>ondragover</code></dfn> <td> <code>dragover</code>
    <tr><td><dfn><code>ondragstart</code></dfn> <td> <code>dragstart</code>
    <tr><td><dfn><code>ondrop</code></dfn> <td> <code>drop</code>
    <tr><td><dfn><code>ondurationchange</code></dfn> <td> <code>durationchange</code>
    <tr><td><dfn><code>onemptied</code></dfn> <td> <code>emptied</code>
    <tr><td><dfn><code>onended</code></dfn> <td> <code>ended</code>
    <tr><td><dfn><code>oninput</code></dfn> <td> <code>input</code>
    <tr><td><dfn><code>oninvalid</code></dfn> <td> <code>invalid</code>
    <tr><td><dfn><code>onkeydown</code></dfn> <td> <code>keydown</code>
    <tr><td><dfn><code>onkeypress</code></dfn> <td> <code>keypress</code>
    <tr><td><dfn><code>onkeyup</code></dfn> <td> <code>keyup</code>
    <tr><td><dfn><code>onloadeddata</code></dfn> <td> <code>loadeddata</code>
    <tr><td><dfn><code>onloadedmetadata</code></dfn> <td> <code>loadedmetadata</code>
    <tr><td><dfn><code>onloadstart</code></dfn> <td> <code>loadstart</code>
    <tr><td><dfn><code>onmousedown</code></dfn> <td> <code>mousedown</code>
    <tr><td><dfn><code>onmouseenter</code></dfn> <td> <code>mouseenter</code>
    <tr><td><dfn><code>onmouseleave</code></dfn> <td> <code>mouseleave</code>
    <tr><td><dfn><code>onmousemove</code></dfn> <td> <code>mousemove</code>
    <tr><td><dfn><code>onmouseout</code></dfn> <td> <code>mouseout</code>
    <tr><td><dfn><code>onmouseover</code></dfn> <td> <code>mouseover</code>
    <tr><td><dfn><code>onmouseup</code></dfn> <td> <code>mouseup</code>
    <tr><td><dfn><code>onmousewheel</code></dfn> <td> <code>mousewheel</code>
    <tr><td><dfn><code>onpause</code></dfn> <td> <code>pause</code>
    <tr><td><dfn><code>onplay</code></dfn> <td> <code>play</code>
    <tr><td><dfn><code>onplaying</code></dfn> <td> <code>playing</code>
    <tr><td><dfn><code>onprogress</code></dfn> <td> <code>progress</code>
    <tr><td><dfn><code>onratechange</code></dfn> <td> <code>ratechange</code>
    <tr><td><dfn><code>onreset</code></dfn> <td> <code>reset</code>
    <tr><td><dfn><code>onseeked</code></dfn> <td> <code>seeked</code>
    <tr><td><dfn><code>onseeking</code></dfn> <td> <code>seeking</code>
    <tr><td><dfn><code>onselect</code></dfn> <td> <code>select</code>
    <tr><td><dfn><code>onshow</code></dfn> <td> <code>show</code>
    <tr><td><dfn><code>onsort</code></dfn> <td> <code>sort</code>
    <tr><td><dfn><code>onstalled</code></dfn> <td> <code>stalled</code>
    <tr><td><dfn><code>onsubmit</code></dfn> <td> <code>submit</code>
    <tr><td><dfn><code>onsuspend</code></dfn> <td> <code>suspend</code>
    <tr><td><dfn><code>ontimeupdate</code></dfn> <td> <code>timeupdate</code>
    <tr><td><dfn><code>ontoggle</code></dfn> <td> <code>toggle</code>
    <tr><td><dfn><code>onvolumechange</code></dfn> <td> <code>volumechange</code>
    <tr><td><dfn><code>onwaiting</code></dfn> <td> <code>waiting</code>

  </table>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported by all <a>HTML elements</a> other than <code>body</code> and <code>frameset</code>
  elements, as both <a>event handler content attributes</a> and <a>event handler IDL
  attributes</a>; <span class="impl">that must be</span> supported by all <code>Document</code>
  objects, as <a>event handler IDL attributes</a>; and <span class="impl">that must be</span>
  supported by all <code>Window</code> objects, as <a>event handler IDL attributes</a> on the
  <code>Window</code> objects themselves, and with corresponding <a>event handler content
  attributes</a> and <a>event handler IDL attributes</a> exposed on all <code>body</code>
  and <code>frameset</code> elements that are owned by <a>that
  <code>Window</code> object's <code>Document</code>s</a>:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn><code>onblur</code></dfn> <td> <code>blur</code>
    <tr><td><dfn><code>onerror</code></dfn> <td> <code>error</code>
    <tr><td><dfn><code>onfocus</code></dfn> <td> <code>focus</code>
    <tr><td><dfn><code>onload</code></dfn> <td> <code>load</code>
    <tr><td><dfn><code>onresize</code></dfn> <td> <code>resize</code>
    <tr><td><dfn><code>onscroll</code></dfn> <td> <code>scroll</code>
  </table>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported by <code>Window</code> objects, as <a>event handler IDL attributes</a> on the
  <code>Window</code> objects themselves, and with corresponding <a>event handler content
  attributes</a> and <a>event handler IDL attributes</a> exposed on all <code>body</code>
  and <code>frameset</code> elements that are owned by <a>that
  <code>Window</code> object's <code>Document</code>s</a>:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn><code>onafterprint</code></dfn> <td> <code>afterprint</code>
    <tr><td><dfn><code>onbeforeprint</code></dfn> <td> <code>beforeprint</code>
    <tr><td><dfn><code>onbeforeunload</code></dfn> <td> <code>beforeunload</code>
    <tr><td><dfn><code>onhashchange</code></dfn> <td> <code>hashchange</code>
    <tr><td><dfn><code>onlanguagechange</code></dfn> <td> <code>languagechange</code>
    <tr><td><dfn><code>onmessage</code></dfn> <td> <code>message</code>
    <tr><td><dfn><code>onoffline</code></dfn> <td> <code>offline</code>
    <tr><td><dfn><code>ononline</code></dfn> <td> <code>online</code>
    <tr><td><dfn><code>onpagehide</code></dfn> <td> <code>pagehide</code>
    <tr><td><dfn><code>onpageshow</code></dfn> <td> <code>pageshow</code>
    <tr><td><dfn><code>onpopstate</code></dfn> <td> <code>popstate</code>
    <tr><td><dfn><code>onstorage</code></dfn> <td> <code>storage</code>
    <tr><td><dfn><code>onunload</code></dfn> <td> <code>unload</code>
  </table>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported on <code>Document</code> objects as <a>event handler IDL attributes</a>:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn><code>onreadystatechange</code></dfn> <td> <code>readystatechange</code>
  </table>

<h6 id="idl-definitions"><dfn>IDL definitions</dfn></h6>

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject]
  interface <dfn>GlobalEventHandlers</dfn> {
  attribute <a>EventHandler</a> <a>onabort</a>;
  attribute <a>EventHandler</a> <a>onautocomplete</a>;
  attribute <a>EventHandler</a> <a>onautocompleteerror</a>;
  attribute <a>EventHandler</a> <a>onblur</a>;
  attribute <a>EventHandler</a> <a>oncancel</a>;
  attribute <a>EventHandler</a> <a>oncanplay</a>;
  attribute <a>EventHandler</a> <a>oncanplaythrough</a>;
  attribute <a>EventHandler</a> <a>onchange</a>;
  attribute <a>EventHandler</a> <a>onclick</a>;
  attribute <a>EventHandler</a> <a>onclose</a>;
  attribute <a>EventHandler</a> <a>oncontextmenu</a>;
  attribute <a>EventHandler</a> <a>oncuechange</a>;
  attribute <a>EventHandler</a> <a>ondblclick</a>;
  attribute <a>EventHandler</a> <a>ondrag</a>;
  attribute <a>EventHandler</a> <a>ondragend</a>;
  attribute <a>EventHandler</a> <a>ondragenter</a>;
  attribute <a>EventHandler</a> <a>ondragexit</a>;
  attribute <a>EventHandler</a> <a>ondragleave</a>;
  attribute <a>EventHandler</a> <a>ondragover</a>;
  attribute <a>EventHandler</a> <a>ondragstart</a>;
  attribute <a>EventHandler</a> <a>ondrop</a>;
  attribute <a>EventHandler</a> <a>ondurationchange</a>;
  attribute <a>EventHandler</a> <a>onemptied</a>;
  attribute <a>EventHandler</a> <a>onended</a>;
  attribute <a>OnErrorEventHandler</a> <a>onerror</a>;
  attribute <a>EventHandler</a> <a>onfocus</a>;
  attribute <a>EventHandler</a> <a>oninput</a>;
  attribute <a>EventHandler</a> <a>oninvalid</a>;
  attribute <a>EventHandler</a> <a>onkeydown</a>;
  attribute <a>EventHandler</a> <a>onkeypress</a>;
  attribute <a>EventHandler</a> <a>onkeyup</a>;
  attribute <a>EventHandler</a> <a>onload</a>;
  attribute <a>EventHandler</a> <a>onloadeddata</a>;
  attribute <a>EventHandler</a> <a>onloadedmetadata</a>;
  attribute <a>EventHandler</a> <a>onloadstart</a>;
  attribute <a>EventHandler</a> <a>onmousedown</a>;
  [LenientThis] attribute <a>EventHandler</a> <a>onmouseenter</a>;
  [LenientThis] attribute <a>EventHandler</a> <a>onmouseleave</a>;
  attribute <a>EventHandler</a> <a>onmousemove</a>;
  attribute <a>EventHandler</a> <a>onmouseout</a>;
  attribute <a>EventHandler</a> <a>onmouseover</a>;
  attribute <a>EventHandler</a> <a>onmouseup</a>;
  attribute <a>EventHandler</a> <a>onmousewheel</a>;
  attribute <a>EventHandler</a> <a>onpause</a>;
  attribute <a>EventHandler</a> <a>onplay</a>;
  attribute <a>EventHandler</a> <a>onplaying</a>;
  attribute <a>EventHandler</a> <a>onprogress</a>;
  attribute <a>EventHandler</a> <a>onratechange</a>;
  attribute <a>EventHandler</a> <a>onreset</a>;
  attribute <a>EventHandler</a> <a>onresize</a>;
  attribute <a>EventHandler</a> <a>onscroll</a>;
  attribute <a>EventHandler</a> <a>onseeked</a>;
  attribute <a>EventHandler</a> <a>onseeking</a>;
  attribute <a>EventHandler</a> <a>onselect</a>;
  attribute <a>EventHandler</a> <a>onshow</a>;
  attribute <a>EventHandler</a> <a>onsort</a>;
  attribute <a>EventHandler</a> <a>onstalled</a>;
  attribute <a>EventHandler</a> <a>onsubmit</a>;
  attribute <a>EventHandler</a> <a>onsuspend</a>;
  attribute <a>EventHandler</a> <a>ontimeupdate</a>;
  attribute <a>EventHandler</a> <a>ontoggle</a>;
  attribute <a>EventHandler</a> <a>onvolumechange</a>;
  attribute <a>EventHandler</a> <a>onwaiting</a>;
  };

  [NoInterfaceObject]
  interface <dfn>WindowEventHandlers</dfn> {
  attribute <a>EventHandler</a> <a>onafterprint</a>;
  attribute <a>EventHandler</a> <a>onbeforeprint</a>;
  attribute <a>OnBeforeUnloadEventHandler</a> <a>onbeforeunload</a>;
  attribute <a>EventHandler</a> <a>onhashchange</a>;
  attribute <a>EventHandler</a> <a>onlanguagechange</a>;
  attribute <a>EventHandler</a> <a>onmessage</a>;
  attribute <a>EventHandler</a> <a>onoffline</a>;
  attribute <a>EventHandler</a> <a>ononline</a>;
  attribute <a>EventHandler</a> <a>onpagehide</a>;
  attribute <a>EventHandler</a> <a>onpageshow</a>;
  attribute <a>EventHandler</a> <a>onpopstate</a>;
  attribute <a>EventHandler</a> <a>onstorage</a>;
  attribute <a>EventHandler</a> <a>onunload</a>;
  };
  </pre>

  <div class="impl">

<h5 id="event-firing"><dfn>Event firing</dfn></h5>

  Certain operations and methods are defined as firing events on elements. For example, the <code>click()</code> method on the <code>HTMLElement</code> interface is defined as
  firing a <code>click</code> event on the element. [[!UIEVENTS]]

  <dfn>Firing a simple event named <var>e</var></dfn>
  means that a <a>trusted</a> event with the name <var>e</var>, which does not bubble (except where otherwise stated) and is not cancelable
  (except where otherwise stated), and which uses the <code>Event</code> interface, must be created
  and <a>dispatched</a> at the given target.

  <dfn>Firing a synthetic mouse event named <var>e</var></dfn> means that an event with the name <var>e</var>, which is <a>trusted</a> (except where otherwise stated), does not bubble
  (except where otherwise stated), is not cancelable (except where otherwise stated), and which uses
  the <code>MouseEvent</code> interface, must be created and dispatched at the given target. The
  event object must have its <code>screenX</code>, <code>screenY</code>, <code>clientX</code>, <code>clientY</code>, and <code>button</code>
  attributes initialized to 0, its <code>ctrlKey</code>, <code>shiftKey</code>,
  <code>altKey</code>, and <code>metaKey</code> attributes initialized according
  to the current state of the key input device, if any (false for any keys that are not available),
  its <code>detail</code> attribute initialized to 1, its <code>relatedTarget</code> attribute initialized to null (except
  where otherwise stated), and its <code>view</code> attribute initialized to the <code>Window</code> object of the <code>Document</code> object of the given target node, if any, or else null. The <code>getModifierState()</code> method on the object must
  return values appropriately describing the state of the key input device at the time the event is
  created.

  <dfn>Firing a <code>click</code> event</dfn>
  means <a>firing a synthetic mouse event named <code>click</code></a>, which bubbles and is cancelable.

  The default action of these events is to do nothing except where otherwise stated.

  </div>

  <div class="impl">

<h5 id="events-and-the-window-object"><dfn>Events and the <code>Window</code> object</dfn></h5>

  When an event is dispatched at a DOM node in a <code>Document</code> in a <a>browsing
  context</a>, if the event is not a <code>load</code> event, the user agent
  must act as if, for the purposes of <a>event dispatching</a>,
  the <code>Window</code> object is the parent of the <code>Document</code> object. [[!DOM]]

  </div>

<h3 id="base64-utility-methods"><dfn>Base64 utility methods</dfn></h3>

  The <code>atob()</code> and <code>btoa()</code> methods allow authors to transform content to and from
  the base64 encoding.

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject, Exposed=(Window, Worker)]
  interface <dfn>WindowBase64</dfn> {
  DOMString <a>btoa</a>(DOMString btoa);
  DOMString <a>atob</a>(DOMString atob);
  };
  <a>Window</a> implements <a>WindowBase64</a>;
  <a>WorkerGlobalScope</a> implements <a>WindowBase64</a>;
  </pre>

  <p class="note">
  In these APIs, for mnemonic purposes, the "b" can be considered to stand for
  "binary", and the "a" for "ASCII". In practice, though, for primarily historical reasons, both the
  input and output of these functions are Unicode strings.
  </p>

  <dl class="domintro">

    <dt><var>result</var> = <var>window</var> . <code>btoa</code>( <var>data</var> )</dt>

    <dd>

    Takes the input data, in the form of a Unicode string containing only characters in the range
    U+0000 to U+00FF, each representing a binary byte with values 0x00 to 0xFF respectively, and
    converts it to its base64 representation, which it returns.

    Throws an <code>InvalidCharacterError</code> exception if the input string contains any
    out-of-range characters.

    </dd>

    <dt><var>result</var> = <var>window</var> . <code>atob</code>( <var>data</var> )</dt>

    <dd>

    Takes the input data, in the form of a Unicode string containing base64-encoded binary data,
    decodes it, and returns a string consisting of characters in the range U+0000 to U+00FF, each
    representing a binary byte with values 0x00 to 0xFF respectively, corresponding to that binary
    data.

    Throws an <code>InvalidCharacterError</code> exception if the input string is not valid
    base64 data.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>btoa()</code></dfn> method must throw an
  <code>InvalidCharacterError</code> exception if the method's first argument contains any character
  whose code point is greater than U+00FF. Otherwise, the user agent must convert that argument to a
  sequence of octets whose <var>n</var>th octet is the eight-bit representation of the code
  point of the <var>n</var>th character of the argument, and then must apply the base64
  algorithm to that sequence of octets, and return the result. [[!RFC4648]]

  The <dfn><code>atob()</code></dfn> method must run the following
  steps to parse the string passed in the method's first argument:

  <ol>

    <li>Let <var>input</var> be the string being parsed.</li>

    <li>Let <var>position</var> be a pointer into <var>input</var>, initially
    pointing at the start of the string.</li>

    <li>Remove all <a>space characters</a> from <var>input</var>.</li>

    <li>If the length of <var>input</var> divides by 4 leaving no remainder, then: if
    <var>input</var> ends with one or two U+003D EQUALS SIGN (=) characters, remove them
    from <var>input</var>.</li>

    <li>If the length of <var>input</var> divides by 4 leaving a remainder of 1, throw an
    <code>InvalidCharacterError</code> exception and abort these steps.

    <li>

    If <var>input</var> contains a character that is not in the following list of
    characters and character ranges, throw an <code>InvalidCharacterError</code> exception and abort
    these steps:

    <ul class="brief">
      <li>U+002B PLUS SIGN (+)
      <li>U+002F SOLIDUS (/)
      <li><a>Alphanumeric ASCII characters</a>
    </ul>

    </li>

    <li>Let <var>output</var> be a string, initially empty.</li>

    <li>Let <var>buffer</var> be a buffer that can have bits appended to it, initially
    empty.</li>

    <li>

    While <var>position</var> does not point past the end of <var>input</var>,
    run these substeps:

    <ol>

      <li>

      Find the character pointed to by <var>position</var> in the first column of the
      following table. Let <var>n</var> be the number given in the second cell of the same
      row.

      <div>
        <table>
        <thead>
          <tr>
          <th>Character
          <th>Number
        <tbody>
          <tr><td>A<td>0
          <tr><td>B<td>1
          <tr><td>C<td>2
          <tr><td>D<td>3
          <tr><td>E<td>4
          <tr><td>F<td>5
          <tr><td>G<td>6
          <tr><td>H<td>7
          <tr><td>I<td>8
          <tr><td>J<td>9
          <tr><td>K<td>10
          <tr><td>L<td>11
          <tr><td>M<td>12
          <tr><td>N<td>13
          <tr><td>O<td>14
          <tr><td>P<td>15
          <tr><td>Q<td>16
          <tr><td>R<td>17
          <tr><td>S<td>18
          <tr><td>T<td>19
          <tr><td>U<td>20
          <tr><td>V<td>21
          <tr><td>W<td>22
          <tr><td>X<td>23
          <tr><td>Y<td>24
          <tr><td>Z<td>25
          <tr><td>a<td>26
          <tr><td>b<td>27
          <tr><td>c<td>28
          <tr><td>d<td>29
          <tr><td>e<td>30
          <tr><td>f<td>31
          <tr><td>g<td>32
          <tr><td>h<td>33
          <tr><td>i<td>34
          <tr><td>j<td>35
          <tr><td>k<td>36
          <tr><td>l<td>37
          <tr><td>m<td>38
          <tr><td>n<td>39
          <tr><td>o<td>40
          <tr><td>p<td>41
          <tr><td>q<td>42
          <tr><td>r<td>43
          <tr><td>s<td>44
          <tr><td>t<td>45
          <tr><td>u<td>46
          <tr><td>v<td>47
          <tr><td>w<td>48
          <tr><td>x<td>49
          <tr><td>y<td>50
          <tr><td>z<td>51
          <tr><td>0<td>52
          <tr><td>1<td>53
          <tr><td>2<td>54
          <tr><td>3<td>55
          <tr><td>4<td>56
          <tr><td>5<td>57
          <tr><td>6<td>58
          <tr><td>7<td>59
          <tr><td>8<td>60
          <tr><td>9<td>61
          <tr><td>+<td>62
          <tr><td>/<td>63
        </table>
      </div>

      </li>

      <li>Append to <var>buffer</var> the six bits corresponding to <var>number</var>, most significant bit first.</li>

      <li>If <var>buffer</var> has accumulated 24 bits, interpret them as three 8-bit
      big-endian numbers. Append the three characters with code points equal to those numbers to <var>output</var>, in the same order, and then empty <var>buffer</var>.</li>

      <li>Advance <var>position</var> by one character.</li>

    </ol>

    </li>

    <li>

    If <var>buffer</var> is not empty, it contains either 12 or 18 bits. If it contains
    12 bits, discard the last four and interpret the remaining eight as an 8-bit big-endian number.
    If it contains 18 bits, discard the last two and interpret the remaining 16 as two 8-bit
    big-endian numbers. Append the one or two characters with code points equal to those one or two
    numbers to <var>output</var>, in the same order.

    <p class="note">
  The discarded bits mean that, for instance, <code>atob("YQ")</code> and
    <code>atob("YR")</code> both return "<code>a</code>".
  </p>

    </li>

    <li>Return <var>output</var>.</li>

  </ol>

  </div>

<h3 id="dynamic-markup-insertion"><dfn><dfn>Dynamic markup insertion</dfn></dfn></h3>

  <p class="note">
  APIs for dynamically inserting markup into the document interact with the parser,
  and thus their behavior varies depending on whether they are used with <a>HTML documents</a>
  (and the <a>HTML parser</a>) or XHTML in <a>XML documents</a> (and the <a>XML
  parser</a>).
  </p>

<h4 id="opening-the-input-stream"><dfn>Opening the input stream</dfn></h4>

  The <dfn><code>open()</code></dfn> method comes in several variants
  with different numbers of arguments.

  <dl class="domintro">

    <dt><var>document</var> = <var>document</var> . <code>open</code>( [ <var>type</var> [, <var>replace</var> ] ] )</dt>

    <dd>

    Causes the <code>Document</code> to be replaced in-place, as if it was a new
    <code>Document</code> object, but reusing the previous object, which is then returned.

    If the <var>type</var> argument is omitted or has the value
    "<code>text/html</code>", then the resulting <code>Document</code> has an HTML parser associated
    with it, which can be given data to parse using <code>document.write()</code>. Otherwise, all content passed to <code>document.write()</code> will be parsed as plain text.

    If the <var>replace</var> argument is present and has the value "<code>replace</code>", the existing entries in the session history for the
    <code>Document</code> object are removed.

    The method has no effect if the <code>Document</code> is still being parsed.

    Throws an <code>InvalidStateError</code> exception if the <code>Document</code> is an <a>XML document</a>.

    </dd>

    <dt><var>window</var> = <var>document</var> . <code>open</code>( <var>url</var>, <var>name</var>, <var>features</var> [, <var>replace</var> ] )</dt>

    <dd>

    Works like the <code>window.open()</code> method.

    </dd>

  </dl>

  <div class="impl">

  <code>Document</code> objects have an <dfn>ignore-opens-during-unload counter</dfn>, which is
  used to prevent scripts from invoking the <code>document.open()</code>
  method (directly or indirectly) while the document is <a>being
  unloaded</a>. Initially, the counter must be set to zero.

  When called with two arguments (or fewer), the <code>document.open()</code>
  method must act as follows:

  <ol>

    <li>If the <code>Document</code> object is not flagged as an <a>HTML
    document</a>, throw an <code>InvalidStateError</code> exception and abort these steps.</li>

    <li>If the <code>Document</code> object is not an <a>active document</a>, then abort
    these steps.</li>

    <li>Let <var>type</var> be the value of the first argument.</li>

    <li>

    If the second argument is an <a>ASCII case-insensitive</a> match for the value
    "replace", then let <var>replace</var> be true.

    Otherwise, if the <a>browsing context</a>'s <a>session history</a> contains only
    one <code>Document</code>, and that was the <code>about:blank</code> <code>Document</code>
    created when the <a>browsing context</a> was <a>created</a>, and that <code>Document</code> has
    never had the <a>unload a document</a> algorithm invoked on it (e.g. by a previous call to
    <code>document.open()</code>), then let <var>replace</var> be
    true.

    Otherwise, let <var>replace</var> be false.

    </li>

    <li>

    If the <code>Document</code> has an <a>active parser</a> whose <a>script nesting
    level</a> is greater than zero, then the method does nothing. Abort these steps and return
    the <code>Document</code> object on which the method was invoked.

    <p class="note">
  This basically causes <code>document.open()</code> to
    be ignored when it's called in an inline script found during parsing, while still letting it
    have an effect when called from a non-parser task such as a timer callback or event handler.
  </p>

    </li>

    <li>

    Similarly, if the <code>Document</code>'s <a>ignore-opens-during-unload counter</a> is
    greater than zero, then the method does nothing. Abort these steps and return the
    <code>Document</code> object on which the method was invoked.

    <p class="note">
  This basically causes <code>document.open()</code> to
    be ignored when it's called from a <code>beforeunload</code> <code>pagehide</code>, or <code>unload</code> event
    handler while the <code>Document</code> is being unloaded.
  </p>

    </li>

    <li>Release the <a>storage mutex</a>.</li>

    <li>Set the <code>Document</code>'s <i>salvageable</i> state to false.</li>

    <li><a>Prompt to unload</a> the
    <code>Document</code> object. If the user <a>refused to allow the document to be
    unloaded</a>, then abort these steps and return the <code>Document</code> object on which the
    method was invoked.</li>

    <li><a>Unload</a> the <code>Document</code> object, with the
    <var>recycle</var> parameter set to true.</li>

    <li><a>Abort</a> the <code>Document</code>.</li>

    <li>Unregister all event listeners registered on the <code>Document</code> node and its
    descendants.

    <li>Remove any <a>tasks</a> associated with the
    <code>Document</code> in any <a>task source</a>.</li>

    <li>Remove all child nodes of the document, without firing any mutation events.</li>

    <li>

    Replace the <code>Document</code>'s singleton objects with new instances of those objects.
    (This includes in particular the <code>Window</code>, <code>Location</code>,
    <code>History</code>, <code>ApplicationCache</code>, and <code>Navigator</code>, objects, the
    various <code>BarProp</code> objects, the two <code>Storage</code> objects, the various
    <code>HTMLCollection</code> objects, and objects defined by other specifications, like
    <code>Selection</code>. It also includes all the Web
    IDL prototypes in the JavaScript binding, including the <code>Document</code> object's
    prototype.)

    <p class="note">
  The new <code>Window</code> object has a new <a>environment settings
    object</a>.
  </p>

    </li>

    <li>Set the new <code>Window</code> object's <a>HTTPS
    state</a> to the <a>HTTPS state</a> of the
    <code>Window</code> object of the <a>responsible document</a> specified by the <a>entry
    settings object</a>.</li>

    <li>Change the <a>document's character encoding</a> to UTF-8.</li>

    <li>If the <code>Document</code> is <a>ready for post-load tasks</a>, then set the
    <code>Document</code> object's <a>reload override flag</a> and set the
    <code>Document</code>'s <a>reload override buffer</a> to the empty string.</li>

    <li>Set the <code>Document</code>'s <i>salvageable</i> state back to true.</li>

    <li>Change <a>the document's address</a> to the <a>address</a> of the <a>responsible document</a> specified by the <a>entry
    settings object</a>.</li>

    <li>If the <code>Document</code>'s <a>iframe load in progress</a> flag is set, set the
    <code>Document</code>'s <a>mute iframe load</a> flag.</li>

    <li>Create a new <a>HTML parser</a> and associate it with the document. This is a
    <dfn>script-created parser</dfn> (meaning that it can be closed by the <code>document.open()</code> and <code>document.close()</code> methods, and that the tokenizer will wait for
    an explicit call to <code>document.close()</code> before emitting an
    end-of-file token). The encoding <a>confidence</a> is
    <i>irrelevant</i>.</li>

    <li>Set the <a>current document readiness</a> of the document to "<code>loading</code>".</li>

    <li>

    If <var>type</var> is an <a>ASCII case-insensitive</a> match for the string
    "<code>replace</code>", then, for historical reasons, set it to the string "<code>text/html</code>".

    Otherwise:

    If the <var>type</var> string contains a U+003B SEMICOLON character (;), remove the
    first such character and all characters from it up to the end of the string.

    <a>Strip leading and trailing whitespace</a> from <var>type</var>.

    </li>

    <li>

    If <var>type</var> is <em>not</em> now an <a>ASCII case-insensitive</a> match
    for the string "<code>text/html</code>", then act as if the tokenizer had emitted a start tag
    token with the tag name "pre" followed by a single U+000A LINE FEED (LF) character, then switch the
    <a>HTML parser</a>'s tokenizer to the <a>PLAINTEXT state</a>.

    </li>

    <li>

    Remove all the entries in the <a>browsing context</a>'s <a>session history</a>
    after the <a>current entry</a>. If the <a>current entry</a> is the last entry in the
    session history, then no entries are removed.

    <p class="note">
  This <a>doesn't necessarily have to affect</a> the user
    agent's user interface.
  </p>

    </li>

    <li>Remove any <a>tasks</a> queued by the <a>history traversal
    task source</a> that are associated with any <code>Document</code> objects in the
    <a>top-level browsing context</a>'s <a>document family</a>.</li>

    <li>Remove any earlier entries that share the same <code>Document</code>.</li>

    <li>If <var>replace</var> is false, then add a new entry, just before the last entry,
    and associate with the new entry the text that was parsed by the previous parser associated with
    the <code>Document</code> object, as well as the state of the document at the start of these
    steps. This allows the user to step backwards in the session history to see the page before it
    was blown away by the <code>document.open()</code> call. This new entry
    does not have a <code>Document</code> object, so a new one will be created if the session history
    is traversed to that entry.</li>

    <li>Finally, set the <a>insertion point</a> to point at just before the end of the
    <a>input stream</a> (which at this point will be empty).</li>

    <li>Return the <code>Document</code> on which the method was invoked.</li>

  </ol>

  <p class="note">
  The <code>document.open()</code> method does not affect
  whether a <code>Document</code> is <a>ready for post-load tasks</a> or <a>completely
  loaded</a>.
  </p>

  When called with four arguments, the <code>open()</code> method on
  the <code>Document</code> object must call the <code>open()</code> method on the
  <code>Window</code> object of the <code>Document</code> object, with the same arguments as the
  original call to the <code>open()</code> method, and return whatever
  that method returned. If the <code>Document</code> object has no <code>Window</code> object, then
  the method must throw an <code>InvalidAccessError</code> exception.

  </div>

<h4 id="closing-the-input-stream"><dfn>Closing the input stream</dfn></h4>

  <dl class="domintro">

    <dt><var>document</var> . <code>close</code>()</dt>

    <dd>

    Closes the input stream that was opened by the <code>document.open()</code> method.

    Throws an <code>InvalidStateError</code> exception if the
    <code>Document</code> is an <a>XML
    document</a>.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>close()</code></dfn> method must run the following
  steps:

  <ol>

    <li>If the <code>Document</code> object is not flagged as an <a>HTML
    document</a>, throw an <code>InvalidStateError</code> exception and abort these
    steps.</li>

    <li>If there is no <a>script-created parser</a> associated with the document, then abort
    these steps.</li>

    <li>Insert an <a>explicit "EOF" character</a> at the end of the parser's <a>input
    stream</a>.</li>

    <li>If there is a <a>pending parsing-blocking script</a>, then abort these
    steps.</li>

    <li>Run the tokenizer, processing resulting tokens as they are emitted, and stopping when the
    tokenizer reaches the <a>explicit "EOF" character</a> or <a>spins the event loop</a>.</li>

  </ol>

  </div>

<h4 id="document.write()"><dfn><code>document.write()</code></dfn></h4>

  <dl class="domintro">

    <dt><var>document</var> . <code>write</code>(<var>text</var>...)</dt>

    <dd>

    In general, adds the given string(s) to the <code>Document</code>'s input stream.

    <p class="warning">This method has very idiosyncratic behavior. In some cases, this method can
    affect the state of the <a>HTML parser</a> while the parser is running, resulting in a DOM
    that does not correspond to the source of the document (e.g. if the string written is the string
    "<code>&lt;plaintext&gt;</code>" or "<code>&lt;!--</code>"). In other cases,
    the call can clear the current page first, as if <code>document.open()</code> had been called. In yet more cases, the method
    is simply ignored, or throws an exception. To make matters worse, the exact behavior of this
    method can in some cases be dependent on network latency, which can lead to failures that are very hard to debug. <strong>For all these reasons, use
    of this method is strongly discouraged.</strong></p>

    This method throws an <code>InvalidStateError</code> exception when invoked on <a>XML
    documents</a>.

    </dd>

  </dl>

  <div class="impl">

  <code>Document</code> objects have an <dfn>ignore-destructive-writes counter</dfn>, which is
  used in conjunction with the processing of <code>script</code> elements to prevent external
  scripts from being able to use <code>document.write()</code> to blow
  away the document by implicitly calling <code>document.open()</code>.
  Initially, the counter must be set to zero.

  The <dfn><code>document.write(...)</code></dfn> method must act as
  follows:

  <ol>

    <li>

    If the method was invoked on an <a>XML document</a>, throw an
    <code>InvalidStateError</code> exception and abort these steps.

    </li>

    <li>If the <code>Document</code> object is not an <a>active document</a>, then abort
    these steps.</li>

    <li>

    If the <a>insertion point</a> is undefined and either the <code>Document</code>'s
    <a>ignore-opens-during-unload counter</a> is greater than zero or the
    <code>Document</code>'s <a>ignore-destructive-writes counter</a> is greater than zero,
    abort these steps.

    </li>

    <li>

    If the <a>insertion point</a> is undefined, call the <code>open()</code> method on the <code>document</code>
    object (with no arguments). If the user <a>refused to allow the document to be
    unloaded</a>, then abort these steps. Otherwise, the <a>insertion point</a> will point
    at just before the end of the (empty) <a>input stream</a>.

    </li>

    <li>

    Insert the string consisting of the concatenation of all the arguments to the method into the
    <a>input stream</a> just before the <a>insertion point</a>.

    </li>

    <li>

    If the <code>Document</code> object's <a>reload override flag</a> is set, then append
    the string consisting of the concatenation of all the arguments to the method to the
    <code>Document</code>'s <a>reload override buffer</a>.

    </li>

    <li>

    If there is no <a>pending parsing-blocking script</a>, have the <a>HTML
    parser</a> process the characters that were inserted, one at a time, processing resulting
    tokens as they are emitted, and stopping when the tokenizer reaches the insertion point or when
    the processing of the tokenizer is aborted by the tree construction stage (this can happen if a
    <code>script</code> end tag token is emitted by the tokenizer).

    <p class="note">
  If the <code>document.write()</code> method was
    called from script executing inline (i.e. executing because the parser parsed a set of
    <code>script</code> tags), then this is a <a>reentrant invocation of the
    parser</a>.

    </li>

    <li>

    Finally, return from the method.

    </li>

  </ol>

  </div>

<h4 id="document.writeln()"><dfn><code>document.writeln()</code></dfn></h4>

  <dl class="domintro">

    <dt><var>document</var> . <code>writeln</code>(<var>text</var>...)</dt>

    <dd>

    Adds the given string(s) to the <code>Document</code>'s input stream, followed by a newline
    character. If necessary, calls the <code>open()</code> method
    implicitly first.

    This method throws an <code>InvalidStateError</code> exception when invoked on <a>XML
    documents</a>.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>document.writeln(...)</code></dfn> method, when
  invoked, must act as if the <code>document.write()</code> method had
  been invoked with the same argument(s), plus an extra argument consisting of a string containing a
  single line feed character (U+000A).

  </div>

<h3 id="timers"><dfn>Timers</dfn></h3>

  The <code>setTimeout()</code>
  and <code>setInterval()</code>
  methods allow authors to schedule timer-based callbacks.

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject, Exposed=(Window,Worker)]
  interface <dfn>WindowTimers</dfn> {
  long <a>setTimeout</a>(<a>Function</a> handler, optional long timeout = 0, any... arguments);
  long <a>setTimeout</a>(DOMString handler, optional long timeout = 0, any... arguments);
  void <a>clearTimeout</a>(optional long handle = 0);
  long <a>setInterval</a>(<a>Function</a> handler, optional long timeout = 0, any... arguments);
  long <a>setInterval</a>(DOMString handler, optional long timeout = 0, any... arguments);
  void <a>clearInterval</a>(optional long handle = 0);
  };
  <a>Window</a> implements <a>WindowTimers</a>;
  <a>WorkerGlobalScope</a> implements <a>WindowTimers</a>;
  </pre>

  <dl class="domintro">

    <dt><var>handle</var> = <var>window</var> . <code>setTimeout</code>( <var>handler</var> [, <var>timeout</var> [, <var>arguments</var>... ] ] )</dt>

    <dd>

    Schedules a timeout to run <var>handler</var> after <var>timeout</var>
    milliseconds. Any <var>arguments</var> are passed straight through to the <var>handler</var>.

    </dd>

    <dt><var>handle</var> = <var>window</var> . <code>setTimeout</code>( <var>code</var> [, <var>timeout</var> ] )</dt>

    <dd>

    Schedules a timeout to compile and run <var>code</var> after <var>timeout</var> milliseconds.

    </dd>

    <dt><var>window</var> . <code>clearTimeout</code>( <var>handle</var> )</dt>

    <dd>

    Cancels the timeout set with <code>setTimeout()</code>
    or <code>setInterval()</code> identified by
    <var>handle</var>.

    </dd>

    <dt><var>handle</var> = <var>window</var> . <code>setInterval</code>( <var>handler</var> [, <var>timeout</var> [, <var>arguments</var>... ] ] )</dt>

    <dd>

    Schedules a timeout to run <var>handler</var> every <var>timeout</var>
    milliseconds. Any <var>arguments</var> are passed straight through to the <var>handler</var>.

    </dd>

    <dt><var>handle</var> = <var>window</var> . <code>setInterval</code>( <var>code</var> [, <var>timeout</var> ] )</dt>

    <dd>

    Schedules a timeout to compile and run <var>code</var> every <var>timeout</var> milliseconds.

    </dd>

    <dt><var>window</var> . <code>clearInterval</code>( <var>handle</var> )</dt>

    <dd>

    Cancels the timeout set with <code>setInterval()
    </code> or <code>setTimeout()</code> identified by <var>
    handle</var>.

    </dd>

  </dl>

  <p class="note">Timers can be nested; after five such nested timers, however, the interval is
  forced to be at least four milliseconds.
  </p>

  <p class="note">
  This API does not guarantee that timers will run exactly on schedule. Delays due
  to CPU load, other tasks, etc, are to be expected.
  </p>

  <div class="impl">

  Each object that implements the <code>WindowTimers</code> interface has a <dfn>list of active
  timers</dfn>. Each entry in this lists is identified by a number, which must be unique within the
  list for the lifetime of the object that implements the <code>WindowTimers</code> interface.

  <hr />

  The <dfn><code>setTimeout()</code></dfn> method must return
  the value returned by the <a>timer initialisation steps</a>, passing them the method's
  arguments, the object on which the method for which the algorithm is running is implemented (a
  <code>Window</code> or <code>WorkerGlobalScope</code> object) as the <var>method
  context</var>, and the <var>repeat</var> flag set to false.

  The <dfn><code>setInterval()</code></dfn> method must
  return the value returned by the <a>timer initialisation steps</a>, passing them the
  method's arguments, the object on which the method for which the algorithm is running is
  implemented (a <code>Window</code> or <code>WorkerGlobalScope</code> object) as the <var>method context</var>, and the <var>repeat</var> flag set to true.

  The <dfn><code>clearTimeout()</code></dfn> and <dfn><code>clearInterval()</code></dfn> methods must clear the
  entry identified as <var>handle</var> from the <a>list of active timers</a> of the
  <code>WindowTimers</code> object on which the method was invoked, if any, where <var>handle</var> is the argument passed to the method. (If <var>handle</var> does
  not identify an entry in the <a>list of active timers</a> of the <code>WindowTimers</code>
  object on which the method was invoked, the method does nothing.)

  <p class="note">
  Because <code>clearTimeout()</code> and
  <code>clearInterval()</code> clear entries from the same
  list, either method can be used to clear timers created by
  <code>setTimeout()</code> or
  <code>setInterval()</code>.
  </p>

  <hr />

  The <dfn>timer initialisation steps</dfn>, which are invoked with some method arguments, a <var>method context</var>, a <var>repeat</var> flag which can be true or false, and
  optionally (and only if the <var>repeat</var> flag is true) a <var>previous
  handle</var>, are as follows:

  <ol>

    <li>Let <var>method context proxy</var> be <var>method context</var> if that
    is a <code>WorkerGlobalScope</code> object, or else the <code>WindowProxy</code> that corresponds
    to <var>method context</var>.</li>

    <li>If <var>previous handle</var> was provided, let <var>handle</var> be
    <var>previous handle</var>; otherwise, let <var>handle</var> be a
    user-agent-defined integer that is greater than zero that will identify the timeout to be set by
    this call in the <a>list of active timers</a>.</li>

    <li>If <var>previous handle</var> was not provided, add an entry to the <a>list of
    active timers</a> for <var>handle</var>.</li>

    <li>

    Let <var>task</var> be a <a>task</a> that runs the
    following substeps:

    <ol>

      <li>If the entry for <var>handle</var> in the <a>list of active timers</a>
      has been cleared, then abort this <a>task</a>'s substeps.</li>

      <li>

      Run the appropriate set of steps from the following list:

      <dl class="switch">

        <dt>If the first method argument is a <code>Function</code></dt>

        <dd>

        <a>Invoke</a> the <code>Function</code>. Use the third and subsequent method
        arguments (if any) as the arguments for invoking the <code>Function</code>. Use <var>method context proxy</var> as the
        <var>thisArg</var> for invoking the <code>Function</code>. <a>\[ECMA262]</a>

        </dd>

        <dt>Otherwise</dt>

        <dd>

        <ol>

          <li>Let <var>script source</var> be the first method argument.</li>

          <li>Let <var>script language</var> be JavaScript.</li>

          <li>Let <var>settings object</var> be <var>method context</var>'s <a>environment settings
          object</a>.</li>

          <li><a>Create a script</a> using <var>script source</var> as the script source,
          the <a>URL</a> where <var>script source</var> can be found, <var>scripting
          language</var> as the scripting language, and <var>settings object</var> as the
          <a>environment settings object</a>.</li>

        </ol>

        </dd>

      </dl>

      </li>

      <li>If the <var>repeat</var> flag is true, then call <a>timer initialisation
      steps</a> again, passing them the same method arguments, the same <var>method
      context</var>, with the <var>repeat</var> flag still set to true, and with the <var>previous handle</var> set to <var>handler</var>.</li>

    </ol>

    </li>

    <li>Let <var>timeout</var> be the second method argument.</li>

    <li>If the currently running <a>task</a> is a task that was created
    by this algorithm, then let <var>nesting level</var> be the <a>task</a>'s <a>timer nesting level</a>. Otherwise, let <var>nesting level</var> be zero.</li>

    <li>If <var>nesting level</var> is greater than 5, and <var>timeout</var> is
    less than 4, then increase <var>timeout</var> to 4.</li>

    <li>Increment <var>nesting level</var> by one.</li>

    <li>Let <var>task</var>'s <dfn>timer nesting level</dfn> be <var>nesting
    level</var>.</li>

    <li>Return <var>handle</var>, and then continue running this algorithm
    <a>in parallel</a>.</li>

    <li>

    If <var>method context</var> is a <code>Window</code> object, wait until the
    <code>Document</code> associated with <var>method context</var> has been <a>fully
    active</a> for a further <var>timeout</var> milliseconds (not necessarily
    consecutively).

    Otherwise, <var>method context</var> is a <code>WorkerGlobalScope</code> object;
    wait until <var>timeout</var> milliseconds have passed with the worker not suspended
    (not necessarily consecutively).

    </li>

    <li>

    Wait until any invocations of this algorithm that had the same <var>method
    context</var>, that started before this one, and whose <var>timeout</var> is equal to
    or less than this one's, have completed.

    <p class="note">
  Argument conversion as defined by Web IDL (for example, invoking <code>toString()</code> methods on objects passed as the first argument) happens in the
    algorithms defined in Web IDL, before this algorithm is invoked.
  </p>

    <div class="example">
      So for example, the following rather silly code will result in the log containing "<code>ONE&nbsp;TWO&nbsp;</code>":

      <pre highlight="javascript">var log = '';
  function logger(s) { log += s + ' '; }

  setTimeout({ toString: function () {
  setTimeout("logger('ONE')", 100);
  return "logger('TWO')";
  } }, 100);</pre>
    </div>

    </li>

    <li>

    Optionally, wait a further user-agent defined length of time.

    <p class="note">
  This is intended to allow user agents to pad timeouts as needed to optimize the
    power usage of the device. For example, some processors have a low-power mode where the
    granularity of timers is reduced; on such platforms, user agents can slow timers down to fit
    this schedule instead of requiring the processor to use the more accurate mode with its
    associated higher power usage.
  </p>

    </li>

    <li>

    <a>Queue</a> the <a>task</a> <var>task</var>.

    <p class="note">
  Once the task has been processed, if the <var>repeat</var> flag is
    false, it is safe to remove the entry for <var>handle</var> from the <a>list of
    active timers</a> (there is no way for the entry's existence to be detected past this point,
    so it does not technically matter one way or the other).
  </p>

    </li>

  </ol>

  The <a>task source</a> for these <a>tasks</a> is the
  <dfn>timer task source</dfn>.

  </div>

  <div class="example">
    To run tasks of several milliseconds back to back without any delay, while still yielding back
    to the browser to avoid starving the user interface (and to avoid the browser killing the script
    for hogging the CPU), simply queue the next timer before performing work:

    <pre highlight="javascript">function doExpensiveWork() {
  var done = false;
  // ...
  // this part of the function takes up to five milliseconds
  // set done to true if we're done
  // ...
  return done;
  }

  function rescheduleWork() {
  var handle = setTimeout(rescheduleWork, 0); // preschedule next iteration
  if (doExpensiveWork())
    clearTimeout(handle); // clear the timeout if we don't need it
  }

  function scheduleWork() {
  setTimeout(rescheduleWork, 0);
  }

  scheduleWork(); // queues a task to do lots of work</pre>
  </div>

<h3 id="user-prompts"><dfn>User prompts</dfn></h3>

<h4 id="simple-dialogs"><dfn>Simple dialogs</dfn></h4>

  <dl class="domintro">

    <dt><var>window</var> . <code>alert</code>(<var>message</var>)</dt>
    <dd>

    Displays a modal alert with the given message, and waits for the user to dismiss it.

    A call to the <code>navigator.yieldForStorageUpdates()</code> method is
    implied when this method is invoked.

    </dd>

    <dt><var>result</var> = <var>window</var> . <code>confirm</code>(<var>message</var>)</dt>
    <dd>

    Displays a modal OK/Cancel prompt with the given message, waits for the user to dismiss it,
    and returns true if the user clicks OK and false if the user clicks Cancel.

    A call to the <code>navigator.yieldForStorageUpdates()</code> method is
    implied when this method is invoked.

    </dd>

    <dt><var>result</var> = <var>window</var> . <code>prompt</code>(<var>message</var> [, <var>default</var>] )</dt>
    <dd>

    Displays a modal text field prompt with the given message, waits for the user to dismiss it,
    and returns the value that the user entered. If the user cancels the prompt, then returns null
    instead. If the second argument is present, then the given value is used as a default.

    A call to the <code>navigator.yieldForStorageUpdates()</code> method is
    implied when this method is invoked.

    </dd>

  </dl>

  <p class="note">
  Logic that depends on <a>tasks</a> or <a>microtasks</a>, such as <a>media elements</a>
  loading their <a>media data</a>, are stalled when these methods are invoked.
  </p>

  <div class="impl">

  The <dfn><code>alert(<var>message</var>)</code></dfn> method, when
  invoked, must run the following steps:

  <ol>

    <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
    optionally abort these steps.</li>

    <li>Release the <a>storage mutex</a>.</li>

    <li>If the <a>active sandboxing flag set</a> of the <a>active document</a> of
    the <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> has the <a>sandboxed modals flag</a> set, then abort these
    steps.</li>

    <li>Optionally, abort these steps. (For example, the user agent might give the user the option
    to ignore all alerts, and would thus abort at this step whenever the method was
    invoked.)</li>

    <li>If the method was invoked with no arguments, then let <var>message</var> be the
    empty string; otherwise, let <var>message</var> be the method's first
    argument.</li>

    <li>Show the given <var>message</var> to the user.</li>

    <li>Optionally, <a>pause</a> while waiting for the user to acknowledge the
    message.</li>

  </ol>

  The <dfn><code>confirm(<var>message</var>)</code></dfn> method,
  when invoked, must run the following steps:

  <ol>

    <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
    optionally abort these steps, returning false.</li>

    <li>Release the <a>storage mutex</a>.</li>

    <li>If the <a>active sandboxing flag set</a> of the <a>active document</a> of
    the <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> has the <a>sandboxed modals flag</a> set, then return false and abort these
    steps.</li>

    <li>Optionally, return false and abort these steps. (For example, the user agent might give
    the user the option to ignore all prompts, and would thus abort at this step whenever the method
    was invoked.)</li>

    <li>Show the given <var>message</var> to the user, and ask the user to respond with a
    positive or negative response.</li>

    <li><a>Pause</a> until the user responds either positively or negatively.</li>

    <li>If the user responded positively, return true; otherwise, the user responded negatively:
    return false.</li>

  </ol>

  The <dfn><code>prompt(<var>message</var>, <var>default</var>)</code></dfn> method, when invoked, must run the following steps:

  <ol>

    <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
    optionally abort these steps, returning null.</li>

    <li>Release the <a>storage mutex</a>.</li>

    <li>If the <a>active sandboxing flag set</a> of the <a>active document</a> of
    the <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> has the <a>sandboxed modals flag</a> set, then return null and abort these
    steps.</li>

    <li>Optionally, return null and abort these steps. (For example, the user agent might give the
    user the option to ignore all prompts, and would thus abort at this step whenever the method was
    invoked.)</li>

    <li>Show the given <var>message</var> to the user, and ask the user to either respond
    with a string value or abort. The response must be defaulted to the value given by
    <var>default</var>.</li>

    <li><a>Pause</a> while waiting for the user's response.</li>

    <li>If the user aborts, then return null; otherwise, return the string that the user responded
    with.</li>

  </ol>

  </div>

<h4 id="printing"><dfn>Printing</dfn></h4>

  <dl class="domintro">

    <dt><var>window</var> . <code>print</code>()</dt>

    <dd>

    Prompts the user to print the page.

    A call to the <code>navigator.yieldForStorageUpdates()</code> method is
    implied when this method is invoked.

    </dd>

  </dl>

  <div class="impl">

  When the <dfn><code>print()</code></dfn> method is invoked, if the
  <code>Document</code> is <a>ready for post-load tasks</a>, then the user agent must
  run the <a>printing steps</a> <a>in parallel</a>. Otherwise, the user agent must only set the
  <dfn>print when loaded</dfn> flag on the <code>Document</code>.

  User agents should also run the <a>printing steps</a> whenever the user asks for the
  opportunity to <a>obtain a physical form</a> (e.g. printed copy), or the representation of a
  physical form (e.g. PDF copy), of a document.

  The <dfn>printing steps</dfn> are as follows:

  <ol>

    <li>

    The user agent may display a message to the user or abort these steps (or both).

    <p class="example">
  For instance, a kiosk browser could silently ignore any invocations of the
    <code>print()</code> method.
  </p>

    <p class="example">
  For instance, a browser on a mobile device could detect that there are no
    printers in the vicinity and display a message saying so before continuing to offer a "save to
    PDF" option.
  </p>

    </li>

    <li>

      If the <a>active sandboxing flag set</a> of the <a>active document</a> of
      the <a>responsible browsing context</a> specified by the <a>incumbent settings
      object</a> has the <a>sandboxed modals flag</a> set, then abort these
      steps.

      <p class="note">
  If the printing dialog is blocked by a <code>Document</code>'s sandbox,
      then neither the <code>beforeprint</code> nor <code>afterprint</code> events will be fired.
  </p>

    </li>

    <li>

    The user agent must <a>fire a simple event</a> named <code>beforeprint</code> at the <code>Window</code> object of the
    <code>Document</code> that is being printed, as well as any <a>nested browsing contexts</a> in it.

    <p class="example">
  The <code>beforeprint</code> event can be used to
    annotate the printed copy, for instance adding the time at which the document was printed.
  </p>

    </li>

    <li>

    The user agent must release the <a>storage mutex</a>.

    </li>

    <li>

    The user agent should offer the user the opportunity to <a>obtain a physical form</a>
    (or the representation of a physical form) of the document. The user agent may wait for the user
    to either accept or decline before returning; if so, the user agent must <a>pause</a>
    while the method is waiting. Even if the user agent doesn't wait at this point, the user agent
    must use the state of the relevant documents as they are at this point in the algorithm if and
    when it eventually creates the alternate form.

    </li>

    <li>

    The user agent must <a>fire a simple event</a> named <code>afterprint</code> at the <code>Window</code> object of the
    <code>Document</code> that is being printed, as well as any <a>nested browsing contexts</a> in it.

    <p class="example">
  The <code>afterprint</code> event can be used to
    revert annotations added in the earlier event, as well as showing post-printing UI. For
    instance, if a page is walking the user through the steps of applying for a home loan, the
    script could automatically advance to the next step after having printed a form or other.
  </p>

    </li>

  </ol>

  </div>

<h4 id="dialogs-implemented-using-separate-documents-with-showmodaldialog()"><dfn>Dialogs implemented using separate documents with <code>showModalDialog()</code></dfn></h4>

  <p class="critical">This feature is in the process of being removed from the Web platform. (This
  is a long process that takes many years.) Using the <code>showModalDialog()</code> API at this time is highly discouraged.

  <div class="impl">

  The <dfn><code>showModalDialog(<var>url</var>, <var>argument</var>)</code></dfn> method, when invoked,
  must cause the user agent to run the following steps:

  <ol>

    <li>

    <a>Resolve</a> <var>url</var> relative to the
    <a>API base URL</a> specified by the <a>entry settings object</a>.

    If this fails, then throw a <code>SyntaxError</code> exception and abort these steps.

    </li>

    <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
    optionally abort these steps, returning the empty string.</li>

    <li>

    Release the <a>storage mutex</a>.

    </li>

    <li>

    If the user agent is configured such that this invocation of <code>showModalDialog()</code> is somehow disabled, then return the empty
    string and abort these steps.

    <p class="note">
  User agents are expected to disable this method in certain cases to avoid user
    annoyance (e.g. as part of their popup blocker feature). For instance, a user agent could
    require that a site be safelisted before enabling this method, or the user agent could be
    configured to only allow one modal dialog at a time.
  </p>

    </li>

    <li>

    If the <a>active sandboxing flag set</a> of the <a>active document</a> of the
    <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> has either the <a>sandboxed auxiliary navigation browsing context flag</a>
    or <a>sandboxed modals flag</a> set, then return the empty string and abort these
    steps.

    </li>

    <li>

    Let <var>incumbent origin</var> be the <a>effective script origin</a>
    specified by the <a>incumbent settings object</a> at the time the <code>showModalDialog()</code> method was called.

    </li>

    <li>

    Let <var>the list of background browsing contexts</var> be a list of all the
    browsing contexts that:

    <ul>

      <li>are part of the same <a>unit of related browsing contexts</a> as the browsing context
      of the <code>Window</code> object on which the <code>showModalDialog()</code> method was called, and that</li>

      <li>have an <a>active document</a> whose <a>origin</a> is the <a>same</a> as <var>incumbent origin</var>,</li>

    </ul>

    ...as well as any browsing contexts that are nested inside any of the browsing contexts
    matching those conditions.

    </li>

    <li>

    Disable the user interface for all the browsing contexts in <var>the list of
    background browsing contexts</var>. This should prevent the user from navigating those browsing
    contexts, causing events to be sent to those browsing context, or editing any content in those
    browsing contexts. However, it does not prevent those browsing contexts from receiving events
    from sources other than the user, from running scripts, from running animations, and so
    forth.

    </li>

    <li>

    <a>Create</a> a new <a>auxiliary browsing context</a>, with the <a>opener browsing
    context</a> being the browsing context of the <code>Window</code> object on which the <code>showModalDialog()</code> method was called. The new auxiliary
    browsing context has no name.

    <p class="note">
  This <a>browsing context</a>'s <code>Document</code>s' <code>Window</code>
    objects all implement the <code>WindowModal</code> interface.
  </p>

    </li>

    <li>

    Set all the flags in the new browsing context's <a>popup sandboxing flag set</a> that
    are set in the <a>active sandboxing flag set</a> of the <a>active document</a> of
    the <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a>. The <a>responsible browsing context</a> specified by the <a>incumbent
    settings object</a> must be set as the new browsing context's <a>one permitted sandboxed
    navigator</a>.

    </li>

    <li>

    Let the <a>dialog arguments</a> of the new browsing context be set to the value of <var>argument</var>, or the <i>undefined</i> value if the argument was omitted.

    </li>

    <li>

    Let the <a>dialog arguments' origin</a> be <var>incumbent origin</var>.

    </li>

    <li>

    Let the <a>return value</a> of the new browsing context be the <i>undefined</i> value.

    </li>

    <li>

    Let the <a>return value origin</a> be <var>incumbent origin</var>.

    </li>

    <li>

    <a>Navigate</a> the new <a>browsing context</a> to
    the <a>absolute URL</a> that resulted from <a>resolving</a>
    <var>url</var> earlier, with <a>replacement enabled</a>, and with the
    <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> as the <a>source browsing context</a>.

    </li>

    <li>

    <a>Spin the event loop</a> until the new <a>browsing context</a> is <a>closed</a>. The user agent must allow the user to indicate
    that the <a>browsing context</a> is to be closed.

    </li>

    <li>

    Reenable the user interface for all the browsing contexts in <var>the list of
    background browsing contexts</var>.

    </li>

    <li>

    If the <a>auxiliary browsing context</a>'s <a>return value origin</a> at the time
    the browsing context was <a>closed</a> was the <a>same</a> as <var>incumbent origin</var>, then let <var>return value</var> be the <a>auxiliary browsing context</a>'s <a>return
    value</a> as it stood when the browsing context was <a>closed</a>.

    Otherwise, let <var>return value</var> be undefined.

    </li>

    <li>

    Return <var>return value</var>.

    </li>

  </ol>

  The <code>Window</code> objects of <code>Document</code>s hosted by <a>browsing contexts</a> created by the above algorithm must also implement the
  <code>WindowModal</code> interface.

  <p class="note">
  When this happens, the members of the <code>WindowModal</code> interface, in
  JavaScript environments, appear to actually be part of the <code>Window</code> interface (e.g.
  they are on the same prototype chain as the <code>window.alert()</code>
  method).
  </p>

  </div>

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject]
  interface <dfn>WindowModal</dfn> {
  readonly attribute any <a>dialogArguments</a>;
  attribute any <a>returnValue</a>;
  };
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>dialogArguments</code></dt>

    <dd>

    Returns the <var>argument</var> argument that was passed to the <code>showModalDialog()</code> method.

    </dd>

    <dt><var>window</var> . <code>returnValue</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the current return value for the window.

    Can be set, to change the value that will be returned by the <code>showModalDialog()</code> method.

    </dd>

  </dl>

  <div class="impl">

  Such browsing contexts have associated <dfn>dialog arguments</dfn>, which are stored along with
  the <dfn>dialog arguments' origin</dfn>. These values are set by the <code>showModalDialog()</code> method in the algorithm above, when the
  browsing context is created, based on the arguments provided to the method.

  The <dfn><code>dialogArguments</code></dfn> IDL
  attribute, on getting, must check whether its browsing context's <a>active document</a>'s
  <a>effective script origin</a> is the <a>same</a> as the <a>dialog arguments'
  origin</a>. If it is, then the browsing context's <a>dialog arguments</a> must be
  returned unchanged. Otherwise, the IDL attribute must return <i>undefined</i>.

  These browsing contexts also have an associated <dfn>return value</dfn> and <dfn>return value
  origin</dfn>. As with the previous two values, these values are set by the <code>showModalDialog()</code> method in the algorithm above, when the
  browsing context is created.

  The <dfn><code>returnValue</code></dfn> IDL attribute, on
  getting, must check whether its browsing context's <a>active document</a>'s <a>effective
  script origin</a> is the <a>same</a> as the current <a>return
  value origin</a>. If it is, then the browsing context's <a>return value</a> must be
  returned unchanged. Otherwise, the IDL attribute must return <i>undefined</i>. On setting, the
  attribute must set the <a>return value</a> to the given new value, and the <a>return
  value origin</a> to the browsing context's <a>active document</a>'s <a>effective
  script origin</a>.

  </div>

  <p class="note">
  The <code>window.close()</code> method can be used to
  close the browsing context.
  </p>

<h3 id="system-state-and-capabilities"><dfn>System state and capabilities</dfn></h3>

<h4 id="the-navigator-object"><dfn>The <code>Navigator</code> object</dfn></h4>

  <div class="impl">

  The <dfn><code>navigator</code></dfn> attribute of the
  <code>Window</code> interface must return an instance of the <code>Navigator</code> interface,
  which represents the identity and state of the user agent (the client), and allows Web pages to
  register themselves as potential protocol and content handlers:

  </div>

  <pre class="idl" data-highlight="webidl">
  interface <dfn>Navigator</dfn> {
  // objects implementing this interface also implement the interfaces given below
  };
  <a>Navigator</a> implements <a>NavigatorID</a>;
  <a>Navigator</a> implements <a>NavigatorLanguage</a>;
  <a>Navigator</a> implements <a>NavigatorOnLine</a>;
  <a>Navigator</a> implements <a>NavigatorContentUtils</a>;
  <a>Navigator</a> implements <a>NavigatorStorageUtils</a>;
  <a>Navigator</a> implements <a>NavigatorPlugins</a>;
  </pre>

  <div class="impl">

  These interfaces are defined separately so that other specifications can re-use parts of the
  <code>Navigator</code> interface.

  </div>

<h5 id="client-identification"><dfn>Client identification</dfn></h5>

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject, Exposed=(Window, Worker)]
  interface <dfn>NavigatorID</dfn> {
  [Exposed=Window] readonly attribute DOMString <a>appCodeName</a>; // constant "Mozilla"
  readonly attribute DOMString <a>appName</a>; // constant "Netscape"
  readonly attribute DOMString <a>appVersion</a>;
  readonly attribute DOMString <a>platform</a>;
  [Exposed=Window]readonly attribute DOMString <a>product</a>; // constant "Gecko"
  readonly attribute DOMString <a>userAgent</a>;
  };
  </pre>

  In certain cases, despite the best efforts of the entire industry, Web browsers have bugs and
  limitations that Web authors are forced to work around.

  This section defines a collection of attributes that can be used to determine, from script, the
  kind of user agent in use, in order to work around these issues.

  Client detection should always be limited to detecting known current versions; future versions
  and unknown versions should always be assumed to be fully compliant.

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>appCodeName</code></dt>
    <dd>
    Returns the string "<code>Mozilla</code>".
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>appName</code></dt>
    <dd>
    Returns the string "<code>Netscape</code>".
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>appVersion</code></dt>
    <dd>
    Returns the version of the browser.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>platform</code></dt>
    <dd>
    Returns the name of the platform.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>product</code></dt>
    <dd>
    Returns the string "<code>Gecko</code>".
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>taintEnabled</code>()</dt>
    <dd>
    Returns either the string "<code>20030107</code>", or the string "<code>20100101</code>".
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>userAgent</code></dt>
    <dd>
    Returns the complete User-Agent header.
    </dd>

  </dl>

  <div class="impl">

  <dl>

    <dt><dfn><code>appCodeName</code></dfn></dt>
    <dd>Must return the string "<code>Mozilla</code>".</dd>

    <dt><dfn><code>appName</code></dfn></dt>
    <dd>Must return the string "<code>Netscape</code>".</dd>

    <dt><dfn><code>appVersion</code></dfn></dt>
    <dd>Must return either the string "<code>4.0</code>" or a string representing the
    version of the browser in detail, e.g. "<code>1.0 (VMS; en-US)
    Mellblomenator/9000</code>".</dd>

    <dt><dfn><code>platform</code></dfn></dt>
    <dd>Must return either the empty string or a string representing the platform on which the
    browser is executing, e.g. "<code>MacIntel</code>", "<code>Win32</code>",
    "<code>FreeBSD i386</code>", "<code>WebTV OS</code>".</dd>

    <dt><dfn><code>product</code></dfn></dt>
    <dd>Must return the string "<code>Gecko</code>".</dd>

    <dt><dfn><code>taintEnabled()</code></dfn></dt>
    <dd>Must return false.</dd>

    <dt><dfn><code>userAgent</code></dfn></dt>
    <dd>Must return the string used for the value of the "<code>User-Agent</code>" header
    in HTTP requests, or the empty string if no such header is ever sent.</dd>

    </dl>

  <p class="warning">Any information in this API that varies from user to user can be used to
  profile the user. In fact, if enough such information is available, a user can actually be
  uniquely identified. For this reason, user agent implementors are strongly urged to include as
  little information in this API as possible.
  </p>


  </div>

<h5 id="language-preferences"><dfn>Language preferences</dfn></h5>

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject, Exposed=(Window, Worker)]
  interface <dfn>NavigatorLanguage</dfn> {
  readonly attribute DOMString? <a>language</a>;
  readonly attribute DOMString[] <a>languages</a>;
  };
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>language</code></dt>
    <dd>
    Returns a language tag representing the user's preferred language.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>languages</code></dt>
    <dd>
    Returns an array of language tags representing the user's preferred languages, with the most preferred language first.
    The most preferred language is the one returned by <code>navigator.language</code>.
    </dd>

  </dl>

  <p class="note">
  A <code>languagechange</code> event is fired at the
  <code>Window</code> or <code>WorkerGlobalScope</code> object when the user agent's understanding
  of what the user's preferred languages are changes.
  </p>

  <div class="impl">

  <dl>

    <dt><dfn><code>language</code></dfn></dt>
    <dd>Must return a valid BCP 47 language tag representing either <a>a plausible
    language</a> or the user's most preferred language. [[!BCP47]]</dd>

    <dt><dfn><code>languages</code></dfn></dt>
    <dd>

    Must return a <a>read only</a> array of valid BCP 47
    language tags representing either one or more <a>plausible
    languages</a>, or the user's preferred languages, ordered by preference with the most
    preferred language first. The same object must be returned until the user agent needs to return
    different values, or values in a different order. [[!BCP47]]

    Whenever the user agent needs to make the <code>navigator.languages</code> attribute of a <code>Window</code>
    or <code>WorkerGlobalScope</code> object return a new set of language tags, the user agent must
    <a>queue a task</a> to <a>fire a simple event</a> named <code>languagechange</code> at the <code>Window</code> or
    <code>WorkerGlobalScope</code> object and wait until that task begins to be executed before
    actually returning a new value.

    The <a>task source</a> for this <a>task</a> is the
    <a>DOM manipulation task source</a>.

    </dd>

  </dl>

  To determine <dfn>a plausible language</dfn>, the user agent should bear in mind the following:

  <ul>

    <li>Any information in this API that varies from user to user can be used to profile or identify
    the user.

    </li>

    <li>If the user is not using a service that obfuscates the user's point of origin (e.g. the Tor
    anonymity network), then the value that is least likely to distinguish the user from other users
    with similar origins (e.g. from the same IP address block) is the language used by the majority
    of such users. [[!TOR]]</li>

    <li>If the user is using an anonymizing service, then the value "<code>en-US</code>" is
    suggested; if all users of the service use that same value, that reduces the possibility of
    distinguishing the users from each other.</li>

  </ul>

  To avoid introducing any more fingerprinting vectors, user agents should use the same list for
  the APIs defined in this function as for the HTTP <code>Accept-Language</code> header.

  </div>

<h5 id="custom-scheme-and-content-handlers:-the-registerprotocolhandler()-and-registercontenthandler()-methods"><dfn>Custom scheme and content handlers: the <code>registerProtocolHandler()</code> and <code>registerContentHandler()</code> methods</dfn></h5>

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject]
  interface <dfn>NavigatorContentUtils</dfn> {
  // content handler registration
  void <a>registerProtocolHandler</a>(DOMString scheme, DOMString url, DOMString title);
  void <a>registerContentHandler</a>(DOMString mimeType, DOMString url, DOMString title);
  DOMString <a>isProtocolHandlerRegistered</a>(DOMString scheme, DOMString url);
  DOMString <a>isContentHandlerRegistered</a>(DOMString mimeType, DOMString url);
  void <a>unregisterProtocolHandler</a>(DOMString scheme, DOMString url);
  void <a>unregisterContentHandler</a>(DOMString mimeType, DOMString url);
  };
  </pre>

  The <dfn><code>registerProtocolHandler()</code></dfn> method
  allows Web sites to register themselves as possible handlers for particular schemes. For example,
  an online telephone messaging service could register itself as a handler of the <code>sms:</code> scheme, so that if the user clicks on such a link, he is given the
  opportunity to use that Web site. Analogously, the <dfn><code>registerContentHandler()</code></dfn> method allows
  Web sites to register themselves as possible handlers for content in a particular <a>MIME
  type</a>. For example, the same online telephone messaging service could register itself as a
  handler for <code>text/vcard</code> files, so that if the user has no native application capable
  of handling vCards, his Web browser can instead suggest he use that site to view contact
  information stored on vCards that he opens. [[!SMS]] [[!RFC6350]]

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>registerProtocolHandler</code>(<var>scheme</var>, <var>url</var>, <var>title</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>registerContentHandler</code>(<var>mimeType</var>, <var>url</var>, <var>title</var>)</dt>

    <dd>

    Registers a handler for the given scheme or content type, at the given URL, with the given
    title.

    The string "<code>%s</code>" in the URL is used as a placeholder for where to put
    the URL of the content to be handled.

    Throws a <code>SecurityError</code> exception if the user agent blocks the registration (this
    might happen if trying to register as a handler for "http", for instance).

    Throws a <code>SyntaxError</code> exception if the "<code>%s</code>" string is
    missing in the URL.

    </dd>

  </dl>

  <div class="impl">

  User agents may, within the constraints described in this section, do whatever they like when
  the methods are called. A UA could, for instance, prompt the user and offer the user the
  opportunity to add the site to a shortlist of handlers, or make the handlers his default, or
  cancel the request. UAs could provide such a UI through modal UI or through a non-modal transient
  notification interface. UAs could also simply silently collect the information, providing it only
  when relevant to the user.

  User agents should keep track of which sites have registered handlers (even if the user has
  declined such registrations) so that the user is not repeatedly prompted with the same
  request.

  The arguments to the methods have the following meanings and corresponding implementation
  requirements. The requirements that involve throwing exceptions must be processed in the order
  given below, stopping at the first exception thrown. (So the exceptions for the first argument
  take precedence over the exceptions for the second argument.)

  <dl>

    <dt><var>scheme</var> (<code>registerProtocolHandler()</code> only)</dt>

    <dd>

    A scheme, such as "<code>mailto</code>" or "<code>web+auth</code>". The
    scheme must be compared in an <a>ASCII case-insensitive</a> manner by user agents for the
    purposes of comparing with the scheme part of URLs that they consider against the list of
    registered handlers.

    The <var>scheme</var> value, if it contains a colon (as in "<code>mailto:</code>"),
    will never match anything, since schemes don't contain colons.

    If the <code>registerProtocolHandler()</code>
    method is invoked with a scheme that is neither a <a>safelisted scheme</a> nor a scheme
    whose value starts with the substring "<code>web+</code>" and otherwise contains only
    <a>lowercase ASCII letters</a>, and whose length is at least five characters (including
    the "<code>web+</code>" prefix), the user agent must throw a <code>SecurityError</code>
    exception.

    The following schemes are the <dfn>safelisted schemes</dfn>:

    <ul class="brief">
      <li><code>bitcoin</code></li>
      <li><code>geo</code></li>
      <li><code>im</code></li>
      <li><code>irc</code></li>
      <li><code>ircs</code></li>
      <li><code>magnet</code></li>
      <li><code>mailto</code></li>
      <li><code>mms</code></li>
      <li><code>news</code></li>
      <li><code>nntp</code></li>
      <li><code>openpgp4fpr</code></li>
      <li><code>sip</code></li>
      <li><code>sms</code></li>
      <li><code>smsto</code></li>
      <li><code>ssh</code></li>
      <li><code>tel</code></li>
      <li><code>urn</code></li>
      <li><code>webcal</code></li>
      <li><code>wtai</code></li>
      <li><code>xmpp</code></li>
    </ul>

    <p class="note">
  This list can be changed. If there are schemes that should be added, please send
    feedback.
  </p>

    <p class="note">
  This list excludes any schemes that could reasonably be expected to be supported
    inline, e.g. in an <code>iframe</code>, such as <code>http</code> or (more
    theoretically) <code>gopher</code>. If those were supported, they could potentially be
    used in man-in-the-middle attacks, by replacing pages that have frames with such content with
    content under the control of the protocol handler. If the user agent has native support for the
    schemes, this could further be used for cookie-theft attacks.
  </p>

    </dd>

    <dt><var>mimeType</var> (<code>registerContentHandler()</code> only)</dt>

    <dd>

    A <a>MIME type</a>, such as <code>model/vnd.flatland.3dml</code> or <code>application/vnd.google-earth.kml+xml</code>. The <a>MIME type</a> must be
    compared in an <a>ASCII case-insensitive</a> manner by user agents for the purposes of
    comparing with MIME types of documents that they consider against the list of registered
    handlers.

    User agents must compare the given values only to the MIME type/subtype parts of content
    types, not to the complete type including parameters. Thus, if <var>mimeType</var>
    values passed to this method include characters such as commas or whitespace, or include MIME
    parameters, then the handler being registered will never be used.

    <p class="note">
  The type is compared to the <a>MIME type</a> used by the user agent
    <em>after</em> the sniffing algorithms have been applied.
  </p>

    If the <code>registerContentHandler()</code>
    method is invoked with a <a>MIME type</a> that is in the <a>type blocklist</a> or
    that the user agent has deemed a privileged type, the user agent must throw a
    <code>SecurityError</code> exception.

    The following <a>MIME types</a> are in the <dfn>type
    blocklist</dfn>:

    <ul class="brief">

      <li><code>application/x-www-form-urlencoded</code></li>
      <li><code>application/xhtml+xml</code></li>
      <li><code>application/xml</code></li>
      <li><code>image/gif</code></li>
      <li><code>image/jpeg</code></li>
      <li><code>image/png</code></li>
      <li><code>image/svg+xml</code></li>
      <li><code>multipart/x-mixed-replace</code></li>
      <li><code>text/cache-manifest</code></li>
      <li><code>text/css</code></li>
      <li><code>text/html</code></li>
      <li><code>text/ping</code></li>
      <li><code>text/plain</code></li>
      <li><code>text/vtt</code></li>
      <li><code>text/xml</code></li>
      <li>All types that the user agent supports displaying natively in a <a>browsing context</a> during <a>navigation</a>, except for <code>application/rss+xml</code> and <code>application/atom+xml</code></li>

    </ul>

    <p class="note">
  This list can be changed. If there are MIME types that should be added, please
    send feedback.
  </p>

    </dd>

    <dt><var>url</var></dt>

    <dd>

    A string used to build the <a>URL</a> of the page that will handle the requests.

    User agents must throw a <code>SyntaxError</code> exception if the <var>url</var>
    argument passed to one of these methods does not contain the exact literal string
    "<code>%s</code>".

    User agents must throw a <code>SyntaxError</code> exception if <a>resolving</a> the <var>url</var> argument relative to the <a>API base
    URL</a> specified by the <a>entry settings object</a> is not successful.

    <p class="note">
  The resulting <a>absolute URL</a> would by definition not be a <a>valid
    URL</a> as it would include the string "<code>%s</code>" which is not a valid
    component in a URL.
  </p>

    User agents must throw a <code>SecurityError</code> exception if the resulting <a>absolute
    URL</a> has an <a>origin</a> that differs from the <a>origin</a> specified by the
    <a>entry settings object</a>.

    <p class="note">
  This is forcibly the case if the <code>%s</code> placeholder is in the
    scheme, host, or port parts of the URL.
  </p>

    The resulting <a>absolute URL</a> is the <dfn>proto-URL</dfn>. It identifies the
    handler for the purposes of the methods described below.

    When the user agent uses this handler, it must replace the first occurrence of the exact
    literal string "<code>%s</code>" in the <var>url</var> argument with an
    escaped version of the <a>absolute URL</a> of the content in question (as defined below),
    then <a>resolve</a> the resulting URL, relative to the <a>API
    base URL</a> specified by the <a>entry settings object</a> at the time the <code>registerContentHandler()</code> or <code>registerProtocolHandler()</code> methods were
    invoked, and then <a>navigate</a> an appropriate <a>browsing
    context</a> to the resulting URL.

    To get the escaped version of the <a>absolute URL</a> of the content in question, the
    user agent must replace every character in that <a>absolute URL</a> that is not a
    character in the URL <a>default encode set</a> with the result of <a>UTF-8 percent encoding</a> that character.

    <div class="example">
      If the user had visited a site at <code>http://example.com/</code> that made the
      following call:

      <pre highlight="javascript">navigator.registerContentHandler('application/x-soup', 'soup?url=%s', 'SoupWeb&trade;')</pre>

      ...and then, much later, while visiting <code>http://www.example.net/</code>,
      clicked on a link such as:

      <pre highlight="html">
  &lt;a href="chickenk&#xEF;wi.soup">Download our Chicken K&#xEF;wi soup!&lt;/a>
  </pre>

      ...then, assuming this <code>chickenk&#xEF;wi.soup</code> file was served with the
      <a>MIME type</a> <code>application/x-soup</code>, the UA might navigate to the
      following URL:

      <pre>http://example.com/soup?url=http://www.example.net/chickenk%C3%AFwi.soup</pre>

      This site could then fetch the <code>chickenk&#xEF;wi.soup</code> file and do
      whatever it is that it does with soup (synthesize it and ship it to the user, or whatever).
    </div>

    </dd>

    <dt><var>title</var></dt>

    <dd>

    A descriptive title of the handler, which the UA might use to remind the user what the site
    in question is.

    </dd>

  </dl>

  This section does not define how the pages registered by these methods are used, beyond the
  requirements on how to process the <var>url</var> value (see above). To some extent, the
  <a>processing model for navigating across documents</a> defines some cases
  where these methods are relevant, but in general UAs may use this information wherever they would
  otherwise consider handing content to native plugins or helper applications.

  UAs must not use registered content handlers to handle content that was returned as part of a
  non-GET transaction (or rather, as part of any non-idempotent transaction), as the remote site
  would not be able to fetch the same data.

  <hr />

  </div>

  In addition to the registration methods, there are also methods for determining if particular
  handlers have been registered, and for unregistering handlers.

  <dl class="domintro">

    <dt><var>state</var> = <var>window</var> . <code>navigator</code> . <code>isProtocolHandlerRegistered</code>(<var>scheme</var>, <var>url</var>)</dt>
    <dt><var>state</var> = <var>window</var> . <code>navigator</code> . <code>isContentHandlerRegistered</code>(<var>mimeType</var>, <var>url</var>)</dt>

    <dd>

    Returns one of the following strings describing the state of the handler given by the
    arguments:

    <dl>

      <dt><code>new</code>

      <dd>Indicates that no attempt has been made to register the given handler (or that the handler
      has been unregistered). It would be appropriate to promote the availability of the handler or
      to just automatically register the handler.

      <dt><code>registered</code>

      <dd>Indicates that the given handler has been registered or that the site is blocked from
      registering the handler. Trying to register the handler again would have no effect.

      <dt><code>declined</code>

      <dd>Indicates that the given handler has been offered but was rejected. Trying to register the
      handler again may prompt the user again.

    </dl>

    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>unregisterProtocolHandler</code>(<var>scheme</var>, <var>url</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>unregisterContentHandler</code>(<var>mimeType</var>, <var>url</var>)</dt>

    <dd>

    Unregisters the handler given by the arguments.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>isProtocolHandlerRegistered()</code></dfn>
  method must return the <a>handler state string</a> that most closely describes the current
  state of the handler described by the two arguments to the method, where the first argument gives
  the scheme and the second gives the string used to build the <a>URL</a> of the page that
  will handle the requests.

  The first argument must be compared to the schemes for which custom protocol handlers are
  registered in an <a>ASCII case-insensitive</a> manner to find the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The <dfn><code>isContentHandlerRegistered()</code></dfn>
  method must return the <a>handler state string</a> that most closely describes the current
  state of the handler described by the two arguments to the method, where the first argument gives
  the <a>MIME type</a> and the second gives the string used to build the <a>URL</a> of
  the page that will handle the requests.

  The first argument must be compared to the <a>MIME types</a> for which
  custom content handlers are registered in an <a>ASCII case-insensitive</a> manner to find
  the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The <dfn>handler state strings</dfn> are the following strings.
  Each string describes several situations, as given by the following list.

  <dl>

    <dt><code>new</code>

    <dd>The described handler has never been registered for the given scheme or type.

    <dd>The described handler was once registered for the given scheme or type, but the site has
    since unregistered it. If the handler were to be reregistered, the user would be notified
    accordingly.

    <dd>The described handler was once registered for the given scheme or type, but the site has
    since unregistered it, but the user has indicated that the site is to be blocked from registering
    the type again, so the user agent would ignore further registration attempts.

    <dt><code>registered</code>

    <dd>An attempt was made to register the described handler for the given scheme or type, but the
    user has not yet been notified, and the user agent would ignore further registration attempts.
    (Maybe the user agent batches registration requests to display them when the user requests to be
    notified about them, and the user has not yet requested that the user agent notify it of the
    previous registration attempt.)

    <dd>The described handler is registered for the given scheme or type (maybe, or maybe not, as the
    default handler).

    <dd>The described handler is permanently blocked from being (re)registered. (Maybe the user
    marked the registration attempt as spam, or blocked the site for other reasons.)

    <dt><code>declined</code>

    <dd>An attempt was made to register the described handler for the given scheme or type, but the
    user has not yet been notified; however, the user might be notified if another registration
    attempt were to be made. (Maybe the last registration attempt was made while the page was in the
    background and the user closed the page without looking at it, and the user agent requires
    confirmation for this registration attempt.)

    <dd>An attempt was made to register the described handler for the given scheme or type, but the
    user has not yet responded.

    <dd>An attempt was made to register the described handler for the given scheme or type, but the
    user declined the offer. The user has not indicated that the handler is to be permanently
    blocked, however, so another attempt to register the described handler might result in the user
    being prompted again.

    <dd>The described handler was once registered for the given scheme or type, but the user has
    since removed it. The user has not indicated that the handler is to be permanently blocked,
    however, so another attempt to register the described handler might result in the user being
    prompted again.

  </dl>

  <hr />

  The <dfn><code>unregisterProtocolHandler()</code></dfn>
  method must unregister the handler described by the two arguments to the method, where the first
  argument gives the scheme and the second gives the string used to build the <a>URL</a> of
  the page that will handle the requests.

  The first argument must be compared to the schemes for which custom protocol handlers are
  registered in an <a>ASCII case-insensitive</a> manner to find the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The <dfn><code>unregisterContentHandler()</code></dfn>
  method must unregister the handler described by the two arguments to the method, where the first
  argument gives the <a>MIME type</a> and the second gives the string used to build the
  <a>URL</a> of the page that will handle the requests.

  The first argument must be compared to the <a>MIME types</a> for which
  custom content handlers are registered in an <a>ASCII case-insensitive</a> manner to find
  the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The second argument of the four methods described above must be preprocessed as follows:

  <ol>

    <li>If the string does not contain the substring "<code>%s</code>", abort these
    steps. There's no matching handler.</li>

    <li><a>Resolve</a> the string relative to the <a>API base
    URL</a> specified by the <a>entry settings object</a>.</li>

    <li>If this fails, then throw a <code>SyntaxError</code> exception, aborting the
    method.</li>

    <li>If the resulting <a>absolute URL</a>'s <a>origin</a> is not the <a>same
    origin</a> as the <a>origin</a> specified by the <a>entry settings object</a>,
    throw a <code>SecurityError</code> exception, aborting the method.</li>

    <li>Return the resulting <a>absolute URL</a> as the result of preprocessing the
    argument.</li>

  </ol>

  </div>

  <div class="impl">

<h6 id="security-and-privacy"><dfn>Security and privacy</dfn></h6>

  These mechanisms can introduce a number of concerns, in particular privacy concerns.

  <strong>Hijacking all Web usage.</strong> User agents should not allow schemes that are key to
  its normal operation, such as <code>http</code> or <code>https</code>, to be
  rerouted through third-party sites. This would allow a user's activities to be trivially tracked,
  and would allow user information, even in secure connections, to be collected.

  <strong>Hijacking defaults.</strong> User agents are strongly urged to not automatically change
  any defaults, as this could lead the user to send data to remote hosts that the user is not
  expecting. New handlers registering themselves should never automatically cause those sites to be
  used.

  <strong>Registration spamming.</strong> User agents should consider the possibility that a site
  will attempt to register a large number of handlers, possibly from multiple domains (e.g. by
  redirecting through a series of pages each on a different domain, and each registering a handler
  for <code>video/mpeg</code> &mdash; analogous practices abusing other Web browser features have
  been used by pornography Web sites for many years). User agents should gracefully handle such
  hostile attempts, protecting the user.

  <strong>Misleading titles.</strong> User agents should not rely wholly on the <var>title</var>
  argument to the methods when presenting the registered handlers to the user, since sites could
  easily lie. For example, a site <code>hostile.example.net</code> could claim that it was
  registering the "Cuddly Bear Happy Content Handler". User agents should therefore use the
  handler's domain in any UI along with any title.

  <strong>Hostile handler metadata.</strong> User agents should protect against typical attacks
  against strings embedded in their interface, for example ensuring that markup or escape characters
  in such strings are not executed, that null bytes are properly handled, that over-long strings do
  not cause crashes or buffer overruns, and so forth.

  <strong>Leaking Intranet URLs.</strong> The mechanism described in this section can result in
  secret Intranet URLs being leaked, in the following manner:

  <ol>

    <li>The user registers a third-party content handler as the default handler for a content
    type.</li>

    <li>The user then browses his corporate Intranet site and accesses a document that uses that
    content type.</li>

    <li>The user agent contacts the third party and hands the third party the URL to the Intranet
    content.</li>

  </ol>

  No actual confidential file data is leaked in this manner, but the URLs themselves could
  contain confidential information. For example, the URL could be <code>http://www.corp.example.com/upcoming-aquisitions/the-sample-company.egf</code>, which
  might tell the third party that Example Corporation is intending to merge with The Sample Company.
  Implementors might wish to consider allowing administrators to disable this feature for certain
  subdomains, content types, or schemes.

  <strong>Leaking secure URLs.</strong> User agents should not send HTTPS URLs to third-party
  sites registered as content handlers without the user's informed consent, for the same reason that
  user agents sometimes avoid sending <code>Referer</code> (sic) HTTP
  headers from secure sites to third-party sites.

  <strong>Leaking credentials.</strong> User agents must never send username or password
  information in the URLs that are escaped and included sent to the handler sites. User agents may
  even avoid attempting to pass to Web-based handlers the URLs of resources that are known to
  require authentication to access, as such sites would be unable to access the resources in
  question without prompting the user for credentials themselves (a practice that would require the
  user to know whether to trust the third-party handler, a decision many users are unable to make or
  even understand).

  <strong>Interface interference.</strong> User agents should be prepared to handle intentionally
  long arguments to the methods. For example, if the user interface exposed consists of an "accept"
  button and a "deny" button, with the "accept" binding containing the name of the handler, it's
  important that a long name not cause the "deny" button to be pushed off the screen.

  <strong>Fingerprinting users.</strong> Since a site can detect if it has attempted to register
  a particular handler or not, whether or not the user responds, the mechanism can be used to store
  data. User agents are therefore strongly urged to treat registrations in the same manner as
  cookies: clearing cookies for a site should also clear all registrations for that site, and
  disabling cookies for a site should also disable registrations.

  </div>

  <div class="impl">

<h6 id="sample-user-interface"><dfn>Sample user interface</dfn></h6>

  <em>This section is non-normative.</em>

  A simple implementation of this feature for a desktop Web browser might work as follows.

  The <code>registerContentHandler()</code> method
  could display a modal dialog box:

  <img src="images/sample-content-handler-registration.png" width="534" height="374" alt="The modal dialog box could have the title 'Content Handler Registration', and could say 'This Web page: Kittens at work http://kittens.example.org/ ...would like permission to handle files of type: application/x-meowmeow using the following Web-based application: Kittens-at-work displayer http://kittens.example.org/?show=%s Do you trust the administrators of the &quot;kittens.example.org&quot; domain?' with two buttons, 'Trust kittens.example.org' and 'Cancel'." />

  In this dialog box, "Kittens at work" is the title of the page that invoked the method,
  "http://kittens.example.org/" is the URL of that page, "application/x-meowmeow" is the string that
  was passed to the <code>registerContentHandler()</code> method as its first
  argument (<var>mimeType</var>), "http://kittens.example.org/?show=%s" was the second
  argument (<var>url</var>), and "Kittens-at-work displayer" was the third argument (<var>title</var>).

  If the user clicks the Cancel button, then nothing further happens. If the user clicks the
  "Trust" button, then the handler is remembered.

  When the user then attempts to fetch a URL that uses the "application/x-meowmeow" <a>MIME
  type</a>, then it might display a dialog as follows:

  <img src="images/sample-content-handler.png" width="577" height="428" alt="The dialog box could have the title 'Unknown File Type' and could say 'You have attempted to access:' followed by a URL, followed by a prompt such as 'How would you like FerretBrowser to handle this resource?' with three radio buttons, one saying 'Contact the FerretBrowser plugin registry to see if there is an official way to handle this resource.', one saying 'Pass this URL to a local application' with an application selector, and one saying 'Pass this URL to the &quot;Kittens-at-work displayer&quot; application at &quot;kittens.example.org&quot;', with a checkbox labeled 'Always do this for resources using the &quot;application/x-meowmeow&quot; type in future.', and with two buttons, 'Ok' and 'Cancel'." />

  In this dialog, the third option is the one that was primed by the site registering itself
  earlier.

  If the user does select that option, then the browser, in accordance with the requirements
  described in the previous two sections, will redirect the user to
  "http://kittens.example.org/?show=data%3Aapplication/x-meowmeow;base64,S2l0dGVucyBhcmUgdGhlIGN1dGVzdCE%253D".

  The <code>registerProtocolHandler()</code> method
  would work equivalently, but for schemes instead of unknown content types.

  </div>

<h5 id="manually-releasing-the-storage-mutex"><dfn>Manually releasing the storage mutex</dfn></h5>

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject]
  interface <dfn>NavigatorStorageUtils</dfn> {
  readonly attribute boolean <a>cookieEnabled</a>;
  void <a>yieldForStorageUpdates</a>();
  };
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>cookieEnabled</code></dt>

    <dd>

    Returns false if setting a cookie will be ignored, and true otherwise.

    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>yieldForStorageUpdates</code>()</dt>

    <dd>

    If a script uses the <code>document.cookie</code> API, or the
    <code>localStorage</code> API, the browser will block other scripts
    from accessing cookies or storage until the first script finishes.

    [[!WEBSTORAGE]]

    Calling the <code>navigator.yieldForStorageUpdates()</code> method
    tells the user agent to unblock any other scripts that may be blocked, even though the script
    hasn't returned.

    Values of cookies and items in the <code>Storage</code> objects of <code>localStorage</code> attributes can change after calling this method,
    whence its name.

    [[!WEBSTORAGE]]

    </dd>

  </dl>

  <div class="impl">

    The <dfn><code>cookieEnabled</code></dfn> attribute must
    return true if the user agent attempts to handle cookies according to the cookie specification,
    and false if it ignores cookie change requests. [[!COOKIES]]

    The <dfn><code>yieldForStorageUpdates()</code></dfn> method,
    when invoked, must, if the <a>storage mutex</a> is owned by the <a>event loop</a> of
    the <a>task</a> that resulted in the method being called, release the
    <a>storage mutex</a> so that it is once again free. Otherwise, it must do nothing.

  </div>

<h5 id="plugins"><dfn>Plugins</dfn></h5>

  <pre class="idl" data-highlight="webidl">
  [NoInterfaceObject]
  interface <dfn>NavigatorPlugins</dfn> {
  [SameObject] readonly attribute <a>PluginArray</a> <a>plugins</a>;
  [SameObject] readonly attribute <a>MimeTypeArray</a> <a>mimeTypes</a>;
  readonly attribute boolean <a>javaEnabled</a>;
  };

  interface <dfn>PluginArray</dfn> {
  void <a>refresh</a>(optional boolean reload = false);
  readonly attribute unsigned long <a>length</a>;
  getter <a>Plugin</a>? <a>item</a>(unsigned long index);
  getter <a>Plugin</a>? <a>namedItem</a>(DOMString name);
  };

  interface <dfn>MimeTypeArray</dfn> {
  readonly attribute unsigned long <a>length</a>;
  getter <a>MimeType</a>? <a>item</a>(unsigned long index);
  getter <a>MimeType</a>? <a>namedItem</a>(DOMString name);
  };

  interface <dfn>Plugin</dfn> {
  readonly attribute DOMString <a>name</a>;
  readonly attribute DOMString <a>description</a>;
  readonly attribute DOMString <a>filename</a>;
  readonly attribute unsigned long <a>length</a>;
  getter <a>MimeType</a>? <a>item</a>(unsigned long index);
  getter <a>MimeType</a>? <a>namedItem</a>(DOMString name);
  };

  interface <dfn>MimeType</dfn> {
  readonly attribute DOMString <a>type</a>;
  readonly attribute DOMString <a>description</a>;
  readonly attribute DOMString <a>suffixes</a>; // comma-separated
  readonly attribute <a>Plugin</a> <a>enabledPlugin</a>;
  };
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>refresh</code>( [ <var>refresh</var> ] )</dt>
    <dd>
    Updates the lists of supported plugins and MIME types for this page, and reloads the page if the lists have changed.

    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>length</code></dt>
    <dd>
    Returns the number of plugins, represented by <code>Plugin</code> objects, that the user agent reports.
    </dd>

    <dt><var>plugin</var> = <var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>plugins</code>[<var>index</var>]</dt>
    <dd>
    Returns the specified <code>Plugin</code> object.
    </dd>

    <dt><var>plugin</var> = <var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>item</code>(<var>name</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>plugins</code>[<var>name</var>]</dt>
    <dd>
    Returns the <code>Plugin</code> object for the plugin with the given name.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>mimeTypes</code> . <code>length</code></dt>
    <dd>
    Returns the number of MIME types, represented by <code>MimeType</code> objects, supported by the plugins that the user agent reports.
    </dd>

    <dt><var>mimeType</var> = <var>window</var> . <code>navigator</code> . <code>mimeTypes</code> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>mimeTypes</code>[<var>index</var>]</dt>
    <dd>
    Returns the specified <code>MimeType</code> object.
    </dd>

    <dt><var>mimeType</var> = <var>window</var> . <code>navigator</code> . <code>mimeTypes</code> . <code>item</code>(<var>name</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>mimeTypes</code>[<var>name</var>]</dt>
    <dd>
    Returns the <code>MimeType</code> object for the given MIME type.
    </dd>

    <dt><var>plugin</var> . <code>name</code>
    <dd>
    Returns the plugin's name.
    </dd>

    <dt><var>plugin</var> . <code>description</code>
    <dd>
    Returns the plugin's description.
    </dd>

    <dt><var>plugin</var> . <code>filename</code>
    <dd>
    Returns the plugin library's filename, if applicable on the current platform.
    </dd>

    <dt><var>plugin</var> . <code>length</code></dt>
    <dd>
    Returns the number of MIME types, represented by <code>MimeType</code> objects, supported by the plugin.
    </dd>

    <dt><var>mimeType</var> = <var>plugin</var> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>plugin</var>[<var>index</var>]</dt>
    <dd>
    Returns the specified <code>MimeType</code> object.
    </dd>

    <dt><var>mimeType</var> = <var>plugin</var> . <code>item</code>(<var>name</var>)</dt>
    <dt><var>plugin</var>[<var>name</var>]</dt>
    <dd>
    Returns the <code>MimeType</code> object for the given MIME type.
    </dd>

    <dt><var>mimeType</var> . <code>type</code>
    <dd>
    Returns the MIME type.
    </dd>

    <dt><var>mimeType</var> . <code>description</code>
    <dd>
    Returns the MIME type's description.
    </dd>

    <dt><var>mimeType</var> . <code>suffixes</code>
    <dd>
    Returns the MIME type's typical file extensions, in a comma-separated list.
    </dd>

    <dt><var>mimeType</var> . <code>enabledPlugin</code>
    <dd>
    Returns the <code>Plugin</code> object that implements this MIME type.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>javaEnabled</code></dt>
    <dd>
    Returns true if there's a plugin that supports the MIME type "<code>application/x-java-vm</code>".
    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>navigator.plugins</code></dfn> attribute must
  return a <code>PluginArray</code> object.

  The <dfn><code>navigator.mimeTypes</code></dfn> attribute must
  return a <code>MimeTypeArray</code> object.

  <hr />

  A <code>PluginArray</code> object represents none, some, or all of the <a>plugins</a> supported by the user agent, each of which is represented by a <code>Plugin</code> object. Each of these <code>Plugin</code>
  objects may be <dfn>hidden plugins</dfn>. A <a>hidden plugin</a> can't
  be enumerated, but can still be inspected by using its name.

  <p class="note">
  The fewer <a>plugins</a> are represented by the
  <code>PluginArray</code> object, and of those, the more that are <a>hidden</a>, the more the user's privacy will be protected. Each exposed plugin
  increases the number of bits that can be derived for fingerprinting. Hiding a plugin helps, but
  unless it is an extremely rare plugin, it is likely that a site attempting to derive the list of
  plugins can still determine whether the plugin is supported or not by probing for it by name (the
  names of popular plugins are widely known). Therefore not exposing a plugin at all is preferred.
  Unfortunately, many legacy sites use this feature to determine, for example, which plugin to use
  to play video. Not exposing any plugins at all might therefore not be entirely plausible.
  </p>

  The <code>PluginArray</code> objects created by a user agent must not be <a>live</a>. The
  set of plugins represented by the objects must not change once an object is created, except when
  it is updated by the <code>refresh()</code> method.

  Each <a>plugin</a> represented by a <code>PluginArray</code> can support a number of
  <a>MIME types</a>. For each such <a>plugin</a>, the user agent must
  pick one or more of these <a>MIME types</a> to be those that are
  <dfn>explicitly supported</dfn>.

  <p class="note">
  The <a>explicitly supported</a> <a>MIME types</a> of
  a <a>plugin</a> are those that are exposed through the <code>Plugin</code> and <code>MimeTypeArray</code> interfaces. As with <a>plugins</a> themselves, any variation between users regarding what is exposed
  allows sites to fingerprint users. User agents are therefore encouraged to expose the same <a>MIME types</a> for all users of a <a>plugin</a>, regardless of the
  actual types supported... at least, within the constraints imposed by compatibility with legacy
  content.
  </p>

  The <a>supported property indices</a> of a <code>PluginArray</code> object are the
  numbers from zero to the number of non-<a>hidden</a> <a>plugins</a> represented by the object, if any.

  The <dfn><code>length</code></dfn> attribute must return the
  number of non-<a>hidden</a> <a>plugins</a>
  represented by the object.

  The <dfn><code>item()</code></dfn> method of a
  <code>PluginArray</code> object must return null if the argument is not one of the object's
  <a>supported property indices</a>, and otherwise must return the result of running the
  following steps, using the method's argument as <var>index</var>:

  <ol>

    <li>Let <var>list</var> be the <code>Plugin</code> objects
    representing the non-<a>hidden</a> <a>plugins</a> represented by the <code>PluginArray</code> object.</li>

    <li>Sort <var>list</var> alphabetically by the <code>name</code> of each <code>Plugin</code>.</li>

    <li>Return the <var>index</var>th entry in <var>list</var>.</li>

  </ol>

  <p class="note">
  It is important <span class="no-backref">for
  privacy</span> that the order of plugins not leak additional information, e.g. the order in which
  plugins were installed.
  </p>

  The <a>supported property names</a> of a <code>PluginArray</code> object are the values
  of the <code>name</code> attributes of all the <code>Plugin</code> objects represented by the <code>PluginArray</code> object. The
  properties exposed in this way must be <a>unenumerable</a>.

  The <dfn><code>namedItem()</code></dfn> method of a
  <code>PluginArray</code> object must return null if the argument is not one of the object's
  <a>supported property names</a>, and otherwise must return the <code>Plugin</code> object, of those represented by the <code>PluginArray</code>
  object, that has a <code>name</code> equal to the method's argument.

  The <dfn><code>refresh()</code></dfn> method of the
  <code>PluginArray</code> object of a <code>Navigator</code> object, when invoked, must check to
  see if any <a>plugins</a> have been installed or reconfigured since the user
  agent created the <code>PluginArray</code> object. If so, and the method's argument is true, then
  the user agent must act as if the <code>location.reload()</code>
  method was called instead. Otherwise, the user agent must update the <code>PluginArray</code>
  object and <code>MimeTypeArray</code> object created for attributes of that <code>Navigator</code>
  object, and the <code>Plugin</code> and <code>MimeType</code> objects created
  for those <code>PluginArray</code> and <code>MimeTypeArray</code> objects, using the same <code>Plugin</code> objects for cases where the <code>name</code> is the same, and the same <code>MimeType</code> objects for
  cases where the <code>type</code> is the same, and creating new objects
  for cases where there were no matching objects immediately prior to the <code>refresh()</code> call. Old <code>Plugin</code>
  and <code>MimeType</code> objects must continue to return the same values that they had prior to
  the update, though naturally now the data is stale and may appear inconsistent (for example, an
  old <code>MimeType</code> entry might list as its <code>enabledPlugin</code> a <code>Plugin</code>
  object that no longer lists that <code>MimeType</code> as a supported <code>MimeType</code>).

  <hr />

  A <code>MimeTypeArray</code> object represents the <a>MIME types</a>
  <a>explicitly supported</a> by <a>plugins</a> supported by the user
  agent, each of which is represented by a <code>MimeType</code> object.

  The <code>MimeTypeArray</code> objects created by a user agent must not be <a>live</a>.
  The set of MIME types represented by the objects must not change once an object is created, except
  when it is updated by the <code>PluginArray</code> object's <code>refresh()</code> method.

  The <a>supported property indices</a> of a <code>MimeTypeArray</code> object are the
  numbers from zero to the number of <a>MIME types</a> <a>explicitly
  supported</a> by non-<a>hidden</a> <a>plugins</a> represented by the corresponding <code>PluginArray</code> object, if
  any.

  The <dfn><code>length</code></dfn> attribute must return the
  number of <a>MIME types</a> <a>explicitly supported</a> by non-<a>hidden</a> <a>plugins</a> represented by the
  corresponding <code>PluginArray</code> object, if any.

  The <dfn><code>item()</code></dfn> method of a
  <code>MimeTypeArray</code> object must return null if the argument is not one of the object's
  <a>supported property indices</a>, and otherwise must return the result of running the
  following steps, using the method's argument as <var>index</var>:

  <ol>

    <li>Let <var>list</var> be the <code>MimeType</code> objects representing the <a>MIME types</a> <a>explicitly supported</a> by non-<a>hidden</a> <a>plugins</a> represented by the corresponding
    <code>PluginArray</code> object, if any.</li>

    <li>Sort <var>list</var> alphabetically by the <code>type</code> of each <code>MimeType</code>.</li>

    <li>Return the <var>index</var>th entry in <var>list</var>.</li>

  </ol>

  <p class="note">
  It is important <span class="no-backref">for
  privacy</span> that the order of MIME types not leak additional information, e.g. the order in
  which plugins were installed.
  </p>

  The <a>supported property names</a> of a <code>MimeTypeArray</code> object are the values
  of the <code>type</code> attributes of all the <code>MimeType</code>
  objects represented by the <code>MimeTypeArray</code> object. The properties exposed in this way
  must be <a>unenumerable</a>.

  The <dfn><code>namedItem()</code></dfn> method of a
  <code>MimeTypeArray</code> object must return null if the argument is not one of the object's
  <a>supported property names</a>, and otherwise must return the <code>MimeType</code> object
  that has a <code>type</code> equal to the method's argument.

  <hr />

  A <code>Plugin</code> object represents a <a>plugin</a>. It has
  several attributes to provide details about the plugin, and can be enumerated to obtain the list
  of <a>MIME types</a> that it <a>explicitly
  supports</a>.

  The <code>Plugin</code> objects created by a user agent must not be
  <a>live</a>. The set of MIME types represented by the objects, and the values of the
  objects' attributes, must not change once an object is created, except when updated by the
  <code>PluginArray</code> object's <code>refresh()</code>
  method.

  The <dfn>reported MIME types</dfn> for a <code>Plugin</code> object are the
  <a>MIME types</a> <a>explicitly supported</a> by the corresponding
  <a>plugin</a> when this object was last created or updated by <code>PluginArray.refresh()</code>, whichever happened most
  recently.

  The <a>supported property indices</a> of a <code>Plugin</code> object
  are the numbers from zero to the number of <a>reported MIME types</a>.

  The <dfn><code>length</code></dfn> attribute must return the number
  of <a>reported MIME types</a>.

  The <dfn><code>item()</code></dfn> method of a <code>Plugin</code> object must return null if the argument is not one of the
  object's <a>supported property indices</a>, and otherwise must return the result of running
  the following steps, using the method's argument as <var>index</var>:

  <ol>

    <li>Let <var>list</var> be the <code>MimeType</code> objects representing the
    <a>reported MIME types</a>.</li>

    <li>Sort <var>list</var> alphabetically by the <code>type</code> of each <code>MimeType</code>.</li>

    <li>Return the <var>index</var>th entry in <var>list</var>.</li>

  </ol>

  <p class="note">
  It is important <span class="no-backref">for
  privacy</span> that the order of MIME types not leak additional information, e.g. the order in
  which plugins were installed.
  </p>

  The <a>supported property names</a> of a <code>Plugin</code> object
  are the values of the <code>type</code> attributes of the
  <code>MimeType</code> objects representing the <a>reported MIME types</a>. The properties
  exposed in this way must be <a>unenumerable</a>.

  The <dfn><code>namedItem()</code></dfn> method of a <code>Plugin</code> object must return null if the argument is not one of the
  object's <a>supported property names</a>, and otherwise must return the
  <code>MimeType</code> object that has a <code>type</code> equal to the
  method's argument.

  The <dfn><code>name</code></dfn> attribute must return the
  <a>plugin</a>'s name.

  The <dfn><code>description</code></dfn> and <dfn><code>filename</code></dfn> attributes must return user-agent-defined
  (or, in all likelihood, <a>plugin</a>-defined) strings. In each case, the same string must
  be returned each time, except that the strings returned may change when the <code>PluginArray.refresh()</code> method updates the object.

  <p class="warning">If the values returned by the <code>description</code> or <code>filename</code> attributes vary between versions of a
  <a>plugin</a>, they can be used both as a fingerprinting vector and, even more importantly,
  as a trivial way to determine what security vulnerabilities a <a>plugin</a> (and thus a
  browser) may have. It is thus highly recommended that the <code>description</code> attribute just return the same value as the
  <code>name</code> attribute, and that the <code>filename</code> attribute return the empty string.
  </p>


  <hr />

  A <code>MimeType</code> object represents a <a>MIME type</a> that is, or was,
  <a>explicitly supported</a> by a <a>plugin</a>.

  The <code>MimeType</code> objects created by a user agent must not be <a>live</a>. The
  values of the objects' attributes must not change once an object is created, except when updated
  by the <code>PluginArray</code> object's <code>refresh()</code>
  method.

  The <dfn><code>type</code></dfn> attribute must return the
  <a>valid MIME type with no parameters</a> describing the <a>MIME type</a>.

  The <dfn><code>description</code></dfn> and <dfn><code>suffixes</code></dfn> attributes must return
  user-agent-defined (or, in all likelihood, <a>plugin</a>-defined) strings. In each case, the
  same string must be returned each time, except that the strings returned may change when the <code>PluginArray.refresh()</code> method updates the object.

  <p class="warning">If the values returned by the <code>description</code> or <code>suffxies</code> attributes vary between versions of a
  <a>plugin</a>, they can be used both as a fingerprinting vector and, even more importantly,
  as a trivial way to determine what security vulnerabilities a <a>plugin</a> (and thus a
  browser) may have. It is thus highly recommended that the <code>description</code> attribute just return the same value as the
  <code>type</code> attribute, and that the <code>suffixes</code> attribute return the empty string.
  </p>


  <p class="note">
  Commas in the <code>suffixes</code> attribute are
  interpreted as separating subsequent filename extensions, as in "<code>htm,html</code>".
  </p>

  The <dfn><code>enabledPlugin</code></dfn> attribute must
  return the <code>Plugin</code> object that represents the <a>plugin</a>
  that <a>explicitly supported</a> the <a>MIME type</a> that this <code>MimeType</code>
  object represents when this object was last created or updated by <code>PluginArray.refresh()</code>, whichever happened most
  recently.

  <hr />

  The <dfn><code>navigator.javaEnabled</code></dfn> attribute
  must return true if the user agent supports a <a>plugin</a> that supports the <a>MIME
  type</a> "<code>application/x-java-vm</code>"; otherwise it must return false.

  </div>

<h4 id="the-external-interface"><dfn>The <code>External</code> interface</dfn></h4>

  <div class="impl">

  The <dfn><code>external</code></dfn> attribute of the <code>Window</code>
  interface must return an instance of the <code>External</code> interface.

  </div>

  <pre class="idl" data-highlight="webidl">
  interface <dfn>External</dfn> {
  void <a>AddSearchProvider</a>(DOMString engineURL);
  unsigned long <a>IsSearchProviderInstalled</a>(DOMString engineURL);
  };
  </pre>

  <p class="note">
  For historical reasons, members on this interface are capitalized.
  </p>

  <dl class="domintro">

    <dt><var>window</var> . <code>external</code> . <code>AddSearchProvider</code>( <var>url</var> )</dt>
    <dd>

    Adds the search engine described by the OpenSearch description document at <var>url</var>. [[!OPENSEARCH]]

    The OpenSearch description document has to be on the same server as the script that calls
    this method.

    </dd>

    <dt><var>installed</var> = <var>window</var> . <code>external</code> . <code>IsSearchProviderInstalled</code>( <var>url</var> )</dt>
    <dd>

    Returns a value based on comparing <var>url</var> to the URLs of the results pages
    of the installed search engines.

    <dl>
      <dt>0 <dd>None of the installed search engines match <var>url</var>.
      <dt>1 <dd>One or more installed search engines match <var>url</var>, but none are the user's default search engine.
      <dt>2 <dd>The user's default search engine matches <var>url</var>.
    </dl>

    The <var>url</var> is compared to the URLs of the results pages of the installed
    search engines using a prefix match. Only results pages on the same domain as the script that
    calls this method are checked.

    </dd>

  </dl>

  <p class="note">
  Another way of exposing search engines using OpenSearch description documents is
  using a <code>link</code> element with the <code>search</code> link type.
  </p>

  <div class="impl">

    The <dfn><code>AddSearchProvider()</code></dfn> method,
    when invoked, must run the following steps:

    <ol>

    <li>Optionally, abort these steps. User agents may implement the method as a stub method that
    never does anything, or may arbitrarily ignore invocations with particular arguments for
    security, privacy, or usability reasons.</li>

    <li><a>Resolve</a> the value of the method's first argument
    relative to the <a>API base URL</a> specified by the <a>entry settings
    object</a>.</li>

    <li>If this fails, abort these steps.</li>

    <li>Process the resulting <a>absolute URL</a> as the <a>URL</a> to an OpenSearch
    description document. [[!OPENSEARCH]]</li>

    </ol>

    The <dfn><code>IsSearchProviderInstalled()</code></dfn>
    method, when invoked, must run the following steps:

    <ol>

    <li>Optionally, return 0 and abort these steps. User agents may implement the method as a
    stub method that never returns a non-zero value, or may arbitrarily ignore invocations with
    particular arguments for security, privacy, or usability reasons.</li>

    <li>If the <a>origin</a> specified by the <a>entry settings object</a> is an
    opaque identifier (i.e. it has no host component), then return 0 and abort these steps.</li>

    <li>Let <var>host1</var> be the host component of the <a>origin</a> specified
    by the <a>entry settings object</a>.</li>

    <li><a>Resolve</a> the <var>scriptURL</var> argument
    relative to the <a>API base URL</a> specified by the <a>entry settings
    object</a>.</li>

    <li>If this fails, return 0 and abort these steps.</li>

    <li>Let <var>host2</var> be the <a>host</a> component
    of the resulting <a>parsed URL</a>.</li>

    <li>

      If the longest suffix in the Public Suffix List that matches the end of <var>host1</var> is different than the longest suffix in the Public Suffix List that
      matches the end of <var>host2</var>, then return 0 and abort these steps. [[!PSL]]

      If the next domain component of <var>host1</var> and <var>host2</var>
      after their common suffix are not the same, then return 0 and abort these steps.

    </li>

    <li>Let <var>search engines</var> be the list of search engines known by the user
    agent and made available to the user by the user agent for which the resulting <a>absolute
    URL</a> is a <a>prefix match</a> of the search engine's <a>URL</a>, if any. For
    search engines registered using OpenSearch description documents, the <a>URL</a> of the
    search engine corresponds to the URL given in a <code>Url</code> element whose <code>rel</code> attribute is "<code>results</code>" (the default). [[!OPENSEARCH]]</li>

    <li>If <var>search engines</var> is empty, return 0 and abort these steps.</li>

    <li>If the user's default search engine (as determined by the user agent) is one of the
    search engines in <var>search engines</var>, then return 2 and abort these
    steps.</li>

    <li>Return 1.</li>

    </ol>

  </div>

<h3 id="images"><dfn>Images</dfn></h3>

  <pre class="idl" data-highlight="webidl">
  [Exposed=(Window, Worker)]
  interface <dfn>ImageBitmap</dfn> {
  readonly attribute unsigned long <a>width</a>;
  readonly attribute unsigned long <a>height</a>;
  };

  typedef (<a>HTMLImageElement</a> or
          <a>HTMLVideoElement</a> or
          <a>HTMLCanvasElement</a> or
          <a>Blob</a> or
          <a>ImageData</a> or
          <a>CanvasRenderingContext2D</a> or
          <a>ImageBitmap</a>) <dfn>ImageBitmapSource</dfn>;

  [NoInterfaceObject, Exposed=(Window, Worker)]
  interface <dfn>ImageBitmapFactories</dfn> {
  Promise&lt;ImageBitmap&gt; <a>createImageBitmap</a>(<a>ImageBitmapSource</a> image);
  Promise&lt;ImageBitmap&gt; <a>createImageBitmap</a>(<a>ImageBitmapSource</a> image, long sx, long sy, long sw, long sh);
  };
  <a>Window</a> implements <a>ImageBitmapFactories</a>;
  <a>WorkerGlobalScope</a> implements <a>ImageBitmapFactories</a>;
  </pre>

  An <code>ImageBitmap</code> object represents a bitmap image that can be painted to a canvas
  without undue latency.

  <p class="note">
  The exact judgement of what is undue latency of this is left up to the
  implementer, but in general if making use of the bitmap requires network I/O, or even local disk
  I/O, then the latency is probably undue; whereas if it only requires a blocking read from a GPU or
  system RAM, the latency is probably acceptable.
  </p>

  <dl class="domintro">

    <dt><var>promise</var> = <var>Window</var> . <code>createImageBitmap</code>(<var>image</var> [, <var>sx</var>, <var>sy</var>, <var>sw</var>, <var>sh</var> ] )</dt>

    <dd>

    Takes <var>image</var>, which can be an <code>img</code> element,
    <code>video</code>, or <code>canvas</code> element, a <code>Blob</code> object, an
    <code>ImageData</code> object, a <code>CanvasRenderingContext2D</code> object, or another
    <code>ImageBitmap</code> object, and returns a promise that is resolved when a new
    <code>ImageBitmap</code> is created.

    If no <code>ImageBitmap</code> object can be constructed, for example because the provided
    <var>image</var> data is not actually an image, then the promise is rejected instead.

    If <var>sx</var>, <var>sy</var>, <var>sw</var>, and <var>sh</var> arguments are provided, the source image is cropped to the given pixels, with
    any pixels missing in the original replaced by transparent black. These coordinates are in the
    source image's pixel coordinate space, <em>not</em> in CSS pixels.

    Rejects the promise with an <code>InvalidStateError</code> exception if the source image is not in a valid
    state (e.g. an <code>img</code> element that hasn't finished loading, or a
    <code>CanvasRenderingContext2D</code> object whose bitmap data has zero length along one or both
    dimensions, or an <code>ImageData</code> object whose data is <code>data</code> attribute has been <a>neutered</a>). Rejects the promise with a <code>SecurityError</code>
    exception if the script is not allowed to access the image data of the source image (e.g. a
    <code>video</code> that is <a>CORS-cross-origin</a>, or a <code>canvas</code> being drawn
    on by a script in a worker from another <a>origin</a>).

    </dd>

    <dt><var>imageBitmap</var> . <code>width</code></dt>

    <dd>

    Returns the <a>intrinsic width</a> of the image, in CSS pixels.

    </dd>

    <dt><var>imageBitmap</var> . <code>height</code></dt>

    <dd>

    Returns the <a>intrinsic height</a> of the image, in CSS pixels.

    </dd>

  </dl>

  <div class="impl">

  An <code>ImageBitmap</code> object always has associated bitmap data, with a width and a
  height. However, it is possible for this data to be corrupted. If an <code>ImageBitmap</code>
  object's media data can be decoded without errors, it is said to be <dfn>fully decodable</dfn>.

  An <code>ImageBitmap</code> object can be obtained from a variety of different objects, using
  the <dfn><code>createImageBitmap()</code></dfn> method. When invoked, the
  method must act as follows:

  <dl>

    <dt>If <var>image</var> is an <code>img</code> element

    <dd>

    <ol>

      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <code>img</code> element is not <a>completely
      available</a>, then return a promise rejected with an <code>InvalidStateError</code> exception and abort these
      steps.</li>

      <li>If the <a>origin</a> of the <code>img</code> element's image is not the <a>same
      origin</a> as the <a>origin</a> specified by the <a>entry settings object</a>,
      then return a promise rejected with a <code>SecurityError</code> exception and abort these steps.</li>

      <li>If the <code>img</code> element's media data is not a bitmap (e.g. it's a vector
      graphic), then return a promise rejected with an <code>InvalidStateError</code> exception and abort these
      steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the <code>img</code>
      element's media data, <a>cropped to the source rectangle</a>. If this is an animated
      image, the <code>ImageBitmap</code> object's bitmap data must only be taken from the default
      image of the animation (the one that the format defines is to be used when animation is not
      supported or is disabled), or, if there is no such image, the first frame of the
      animation.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

    </dd>

    <dt>If <var>image</var> is a <code>video</code> element

    <dd>

    <ol>

      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <code>video</code> element's <code>networkState</code> attribute is <code>NETWORK_EMPTY</code>, then return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>If the <a>origin</a> of the <code>video</code> element is not the <a>same
      origin</a> as the <a>origin</a> specified by the <a>entry settings object</a>,
      then return a promise rejected with a <code>SecurityError</code> exception and abort these steps.</li>

      <li>If the <code>video</code> element's <code>readyState</code> attribute is either <code>HAVE_NOTHING</code> or <code>HAVE_METADATA</code>, then return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the frame at the
      <a>current playback position</a>, at the <a>media resource</a>'s <a>intrinsic width</a> and <a>intrinsic height</a> (i.e. after any aspect-ratio
      correction has been applied), <a>cropped to the source rectangle</a>.

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

    </dd>

    <dt>If <var>image</var> is a <code>canvas</code> element

    <dd>

    <ol>

      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <code>canvas</code> element's bitmap data does not have its <a>origin-clean</a> flag set, then return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>If the <code>canvas</code> element's bitmap has either a horizontal dimension or a
      vertical dimension equal to zero, then return a promise rejected with an <code>InvalidStateError</code> exception and
      abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the
      <code>canvas</code> element's bitmap data, <a>cropped to the source
      rectangle</a>.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

    </dd>

    <dt>If <var>image</var> is a <code>Blob</code> object

    <dd>

    <ol>

      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <code>Blob</code> object has been disabled through the <code>close()</code> method, then return a promise rejected with an <code>InvalidStateError</code>
      exception and abort these steps.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Read the <code>Blob</code> object's data. If an <a>error
      occurs during reading of the object</a>, then reject the promise with null, and abort these
      steps.</li>

      <li>Apply the <a>image sniffing rules</a> to
      determine the file format of the image data, with MIME type of the <code>Blob</code> (as given
      by the <code>Blob</code> object's <code>type</code> attribute) giving the
      official type.</li>

      <li>If the image data is not in a supported file format (e.g. it's not actually an image at
      all), or if the image data is corrupted in some fatal way such that the image dimensions cannot
      be obtained, then reject the promise with null, and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be the image data read from the
      <code>Blob</code> object, <a>cropped to the source rectangle</a>. If this is an animated
      image, the <code>ImageBitmap</code> object's bitmap data must only be taken from the default
      image of the animation (the one that the format defines is to be used when animation is not
      supported or is disabled), or, if there is no such image, the first frame of the
      animation.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

    </dd>

    <dt>If <var>image</var> is an <code>ImageData</code> object

    <dd>

    <ol>

      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <var>image</var> object's <code>data</code>
      attribute has been <a>neutered</a>, return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be the image data given by the
      <code>ImageData</code> object, <a>cropped to the source rectangle</a>.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

    </dd>

    <dt>If <var>image</var> is a <code>CanvasRenderingContext2D</code> object

    <dd>

    <ol>

      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <code>CanvasRenderingContext2D</code> object's <a>scratch bitmap</a> does
      not have its <a>origin-clean</a> flag set, then return a promise rejected with
      an <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>If the <code>CanvasRenderingContext2D</code> object's <a>scratch bitmap</a> has
      either a horizontal dimension or a vertical dimension equal to zero, then return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the
      <code>CanvasRenderingContext2D</code> object's <a>scratch bitmap</a>, <a>cropped to
      the source rectangle</a>.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

    </dd>

    <dt>If <var>image</var> is an <code>ImageBitmap</code> object

    <dd>

    <ol>

      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the <var>image</var> argument's bitmap data, <a>cropped to the source
      rectangle</a>.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>

    </ol>

    </dd>

  </dl>

  When the steps above require that the user agent <dfn>crop bitmap data to the source rectangle</dfn>, the user agent must run the following
  steps:

  <ol>

    <li>Let <var>input</var> be the image data being cropped.</li>

    <li>If the <var>sx</var>, <var>sy</var>, <var>sw</var>, and <var>sh</var> arguments are omitted, return <var>input</var>.</li>

    <li>Place <var>input</var> on an infinite transparent black grid plane, positioned so
    that it's top left corner is at the origin of the plane, with the <var>x</var>-coordinate increasing to the right, and the <var>y</var>-coordinate
    increasing down, and with each pixel in the <var>input</var> image data occupying a cell
    on the plane's grid.</li>

    <li>

    Let <var>output</var> be the rectangle on the plane denoted by the rectangle whose
    corners are the four points (<var>sx</var>, <var>sy</var>), (<a><var>sx</var>+<var>sw</var></a>, <var>sy</var>), (<a><var>sx</var>+<var>sw</var></a>, <a><var>sy</var>+<var>sh</var></a>), (<var>sx</var>, <a><var>sy</var>+<var>sh</var></a>).

    <p class="note">
  If either <var>sw</var> or <var>sh</var> are negative, then
    the top-left corner of this rectangle will be to the left or above the (<var>sx</var>,
    <var>sy</var>) point. If any of the pixels on this rectangle are outside the area where
    the <var>input</var> bitmap was placed, then they will be transparent black in <var>output</var>.
  </p>

    </li>

    <li>Return <var>output</var>.</li>

  </ol>

  The <dfn><code>width</code></dfn> attribute must return the
  <code>ImageBitmap</code> object's width, in CSS pixels.

  The <dfn><code>height</code></dfn> attribute must return the
  <code>ImageBitmap</code> object's height, in CSS pixels.

  </div>

  <div class="example">
    Using this API, a sprite sheet can be precut and prepared:

    <pre highlight="javascript">var sprites = {};
  function loadMySprites() {
  var image = new Image();
  image.src = 'mysprites.png';
  var resolver;
  var promise = new Promise(function (arg) { resolver = arg });
  image.onload = function () {
    resolver(Promise.all(
      createImageBitmap(image,  0,  0, 40, 40).then(function (image) { sprites.woman = image }),
      createImageBitmap(image, 40,  0, 40, 40).then(function (image) { sprites.man   = image }),
      createImageBitmap(image, 80,  0, 40, 40).then(function (image) { sprites.tree  = image }),
      createImageBitmap(image,  0, 40, 40, 40).then(function (image) { sprites.hut   = image }),
      createImageBitmap(image, 40, 40, 40, 40).then(function (image) { sprites.apple = image }),
      createImageBitmap(image, 80, 40, 40, 40).then(function (image) { sprites.snake = image }),
    ));
  };
  return promise;
  }

  function runDemo() {
  var canvas = document.querySelector('canvas#demo');
  var context = canvas.getContext('2d');
  context.drawImage(sprites.tree, 30, 10);
  context.drawImage(sprites.snake, 70, 10);
  }

  loadMySprites().then(runDemo);</pre>
  </div>

<h2 id="the-html-syntax"><dfn>The HTML syntax</dfn></h2>

  <p class="note">
  This section only describes the rules for resources labeled with an <a>HTML
  MIME type</a>. Rules for XML resources are discussed in the section below entitled "<a>The
  XHTML syntax</a>".
  </p>

<h3 id="writing-html-documents"><dfn>Writing HTML documents</dfn></h3>

  <div class="impl">

  <i>This section only applies to documents, authoring tools, and markup generators. In
  particular, it does not apply to conformance checkers; conformance checkers must use the
  requirements given in the next section ("parsing HTML documents").</i>

  </div>

  Documents must consist of the following parts, in the given
  order:

  <ol>

    <li>Optionally, a single U+FEFF BYTE ORDER MARK (BOM) character.</li>

    <li>Any number of <a>comments</a> and <a>space characters</a>.</li>

    <li>A <a>DOCTYPE</a>.

    <li>Any number of <a>comments</a> and <a>space characters</a>.</li>

    <li>The root element, in the form of an <code>html</code> <a>element</a>.</li>

    <li>Any number of <a>comments</a> and <a>space characters</a>.</li>

  </ol>

  The various types of content mentioned above are described in the next few sections.

  In addition, there are some restrictions on how <a>character encoding declarations</a> are to be serialized, as discussed in the
  section on that topic.

  <div class="note">

    Space characters before the root <code>html</code> element, and space characters at the start
    of the <code>html</code> element and before the <code>head</code> element, will be dropped when
    the document is parsed; space characters <em>after</em> the root <code>html</code> element will
    be parsed as if they were at the end of the <code>body</code> element. Thus, space characters
    around the root element do not round-trip.

    It is suggested that newlines be inserted after the DOCTYPE, after any comments that are
    before the root element, after the <code>html</code> element's start tag (if it is not <a>omitted</a>), and after any comments that are inside the
    <code>html</code> element but before the <code>head</code> element.

  </div>

  Many strings in the HTML syntax (e.g. the names of elements and their attributes) are
  case-insensitive, but only for <a>uppercase ASCII letters</a> and <a>lowercase ASCII
  letters</a>. For convenience, in this section this is just referred to as
  "case-insensitive".

<h4 id="the-doctype"><dfn>The DOCTYPE</dfn></h4>

  A <dfn>DOCTYPE</dfn> is a
  required preamble.

  <p class="note">
  DOCTYPEs are required for legacy reasons. When omitted, browsers tend to use a
  different rendering mode that is incompatible with some specifications. Including the DOCTYPE in a
  document ensures that the browser makes a best-effort attempt at following the relevant
  specifications.
  </p>

  A DOCTYPE must consist of the following components, in this order:

  <ol class="brief">
    <li>A string that is an <a>ASCII case-insensitive</a> match for the string "<code>&lt;!DOCTYPE</code>".</li>
    <li>One or more <a>space characters</a>.</li>
    <li>A string that is an <a>ASCII case-insensitive</a> match for the string "<code>html</code>".</li>
    <li>Optionally, a <a>DOCTYPE legacy string</a> or an <a>obsolete permitted DOCTYPE string</a> (defined below).</li>
    <li>Zero or more <a>space characters</a>.</li>
    <li>A U+003E GREATER-THAN SIGN character (&gt;).</li>
  </ol>

  <p class="note">
  In other words, <code>&lt;!DOCTYPE html></code>, case-insensitively.
  </p>

  <hr />

  For the purposes of HTML generators that cannot output HTML markup with the short DOCTYPE
  "<code>&lt;!DOCTYPE html></code>", a <dfn>DOCTYPE legacy string</dfn> may be inserted
  into the DOCTYPE (in the position defined above). This string must consist of:

  <ol class="brief">
    <li>One or more <a>space characters</a>.</li>
    <li>A string that is an <a>ASCII case-insensitive</a> match for the string "<code>SYSTEM</code>".</li>
    <li>One or more <a>space characters</a>.</li>
    <li>A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the <i>quote mark</i>).</li>
    <li>The literal string "<code>about:legacy-compat</code>".</li>
    <li>A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the same character as in the earlier step labeled <i>quote mark</i>).</li>
  </ol>

  <p class="note">
  In other words, <code>&lt;!DOCTYPE html SYSTEM "about:legacy-compat"></code> or
  <code>&lt;!DOCTYPE html SYSTEM 'about:legacy-compat'></code>, case-insensitively except for the
  part in single or double quotes.
  </p>

  The <a>DOCTYPE legacy string</a> should not be used unless the document is generated from
  a system that cannot output the shorter string.

  <hr />

  To help authors transition from HTML4 and XHTML1, an <dfn>obsolete permitted DOCTYPE
  string</dfn> can be inserted into the DOCTYPE (in the position defined above). This string must
  consist of:

  <ol class="brief">
    <li>One or more <a>space characters</a>.</li>
    <li>A string that is an <a>ASCII case-insensitive</a> match for the string "<code>PUBLIC</code>".</li>
    <li>One or more <a>space characters</a>.</li>
    <li>A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the <i>first quote mark</i>).</li>
    <li>The string from one of the cells in the first column of the table below. The row to which this cell belongs is the <i>selected row</i>.</li>
    <li>A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the same character as in the earlier step labeled <i>first quote mark</i>).</li>

    <li>If a system identifier is used,
      <ol>
        <li>One or more <a>space characters</a>.</li>
        <li>A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the <i>third quote mark</i>).</li>
        <li>The string from the cell in the second column of the <i>selected row</i>.</li>
        <li>A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the same character as in the earlier step labeled <i>third quote mark</i>).</li>
  </ol>
    </li>

  </ol>

  <table>
    <caption>
    Allowed values for public and system identifiers in an <a>obsolete permitted DOCTYPE string</a>.
    </caption>
    <thead>
    <tr>
      <th> Public identifier
      <th> System identifier
      <th> System identifier optional?
    <tbody>
    <tr>
      <td> <code>-//W3C//DTD&nbsp;HTML&nbsp;4.0//EN</code>
      <td> <code>http://www.w3.org/TR/REC-html40/strict.dtd</code>
      <td> Yes
    <tr>
      <td> <code>-//W3C//DTD&nbsp;HTML&nbsp;4.01//EN</code>
      <td> <code>http://www.w3.org/TR/html4/strict.dtd</code>
      <td> Yes
    <tr>
      <td> <code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Strict//EN</code>
      <td> <code>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</code>
      <td> No
    <tr>
      <td> <code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1//EN</code>
      <td> <code>http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</code>
      <td> No
  </table>

  A <a>DOCTYPE</a> containing an <a>obsolete permitted DOCTYPE
  string</a> is an <dfn>obsolete permitted DOCTYPE</dfn>. Authors should not use <a>obsolete permitted DOCTYPEs</a>, as they are unnecessarily
  long.

<h4 id="elements"><dfn>Elements</dfn></h4>

  There are five different kinds of <dfn>elements</dfn>: <a>void
  elements</a>, <a>raw text elements</a>, <a>escapable raw text elements</a>,
  <a>foreign elements</a>, and <a>normal elements</a>.

  <dl>

    <dt><dfn>Void elements</dfn></dt>

    <dd><code>area</code>, <code>base</code>, <code>br</code>, <code>col</code>, <code>embed</code>,
    <code>hr</code>, <code>img</code>, <code>input</code>, <code>keygen</code>, <code>link</code>,
    <code>menuitem</code>, <code>meta</code>, <code>param</code>, <code>source</code>,
    <code>track</code>, <code>wbr</code></dd>

    <dt><dfn>Raw text elements</dfn></dt>

    <dd><code>script</code>, <code>style</code></dd>

    <dt><dfn>escapable raw text elements</dfn></dt>

    <dd><code>textarea</code>, <code>title</code></dd>

    <dt><dfn>Foreign elements</dfn></dt>

    <dd>Elements from the <a>MathML namespace</a> and the <a>SVG namespace</a>.</dd>

    <dt><dfn>Normal elements</dfn></dt>

    <dd>All other allowed <a>HTML elements</a> are normal elements.</dd>

  </dl>

  <dfn>Tags</dfn> are used to delimit the start and end of elements in the
  markup. <a>Raw text</a>, <a>escapable raw text</a>, and <a>normal</a> elements have
  a <a>start tag</a> to indicate where they begin, and an <a>end tag</a> to indicate where they end. The start and end tags of
  certain <a>normal elements</a> can be <a>omitted</a>, as
  described below in the section on <a>optional tags</a>. Those
  that cannot be omitted must not be omitted. <a>Void elements</a> only have a start tag; end
  tags must not be specified for <a>void elements</a>. <a>Foreign elements</a> must
  either have a start tag and an end tag, or a start tag that is marked as self-closing, in which
  case they must not have an end tag.

  The <a>contents</a> of the element must be placed between
  just after the start tag (which <a>might be implied, in certain
  cases</a>) and just before the end tag (which again, <a>might be
  implied in certain cases</a>). The exact allowed contents of each individual element depend on
  the <a>content model</a> of that element, as described earlier in
  this specification. Elements must not contain content that their content model disallows. In
  addition to the restrictions placed on the contents by those content models, however, the five
  types of elements have additional <em>syntactic</em> requirements.

  <a>Void elements</a> can't have any contents (since there's no end tag, no content can be
  put between the start tag and the end tag).

  <a>Raw text elements</a> can have <a>text</a>, though it has <a>restrictions</a> described below.

  <a>Escapable raw text elements</a> can have <a>text</a> and
  <a>character references</a>, but the text must not contain an <a>ambiguous ampersand</a>. There are also <a>further restrictions</a> described below.

  <a>Foreign elements</a> whose start tag is marked as self-closing can't have any contents
  (since, again, as there's no end tag, no content can be put between the start tag and the end
  tag). <a>Foreign elements</a> whose start tag is <em>not</em> marked as self-closing can
  have <a>text</a>, <a>character
  references</a>, <a>CDATA sections</a>, other <a>elements</a>, and <a>comments</a>, but
  the text must not contain the character U+003C LESS-THAN SIGN (&lt;) or an <a>ambiguous ampersand</a>.

  <div class="note">

    The HTML syntax does not support namespace declarations, even in <a>foreign
    elements</a>.

    For instance, consider the following HTML fragment:

    <pre highlight="html">
  &lt;p>
  &lt;svg>
  &lt;metadata>
    &lt;!-- this is invalid -->
    &lt;cdr:license xmlns:cdr="http://www.example.com/cdr/metadata" name="MIT"/>
  &lt;/metadata>
  &lt;/svg>
  &lt;/p>
  </pre>

    The innermost element, <code>cdr:license</code>, is actually in the SVG namespace, as
    the "<code>xmlns:cdr</code>" attribute has no effect (unlike in XML). In fact, as the
    comment in the fragment above says, the fragment is actually non-conforming. This is because the
    SVG specification does not define any elements called "<code>cdr:license</code>" in the
    SVG namespace.

  </div>

  <a>Normal elements</a> can have <a>text</a>, <a>character references</a>, other <a>elements</a>, and <a>comments</a>, but
  the text must not contain the character U+003C LESS-THAN SIGN (&lt;) or an <a>ambiguous ampersand</a>. Some <a>normal elements</a>
  also have <a>yet more restrictions</a> on what content they are
  allowed to hold, beyond the restrictions imposed by the content model and those described in this
  paragraph. Those restrictions are described below.

  Tags contain a <dfn>tag name</dfn>, giving the element's name. HTML
  elements all have names that only use <a>alphanumeric ASCII characters</a>. In the HTML
  syntax, tag names, even those for <a>foreign elements</a>, may be written with any mix of
  lower- and uppercase letters that, when converted to all-lowercase, matches the element's tag
  name; tag names are case-insensitive.

<h5 id="start-tags"><dfn>Start tags</dfn></h5>

  <dfn>Start tags</dfn> must have the following format:

  <ol>

    <li>The first character of a start tag must be a U+003C LESS-THAN SIGN character (&lt;).</li>

    <li>The next few characters of a start tag must be the element's <a>tag name</a>.</li>

    <li>If there are to be any attributes in the next step, there must first be one or more <a>space characters</a>.</li>

    <li>Then, the start tag may have a number of attributes, the <a>syntax for which</a> is described below. Attributes must be
    separated from each other by one or more <a>space
    characters</a>.</li>

    <li>After the attributes, or after the <a>tag name</a> if there are
    no attributes, there may be one or more <a>space characters</a>.
    (Some attributes are required to be followed by a space. See the <a>attributes section</a> below.)</li>

    <li>Then, if the element is one of the <a>void elements</a>, or if the element is a <a>foreign element</a>, then there may be a single U+002F SOLIDUS
    character (/). This character has no effect on <a>void elements</a>, but on <a>foreign
    elements</a> it marks the start tag as self-closing.</li>

    <li>Finally, start tags must be closed by a U+003E GREATER-THAN SIGN character (&gt;).</li>

  </ol>

<h5 id="end-tags"><dfn>End tags</dfn></h5>

  <dfn>End tags</dfn> must have the following format:

  <ol>

    <li>The first character of an end tag must be a U+003C LESS-THAN SIGN character (&lt;).</li>

    <li>The second character of an end tag must be a U+002F SOLIDUS character (/).</li>

    <li>The next few characters of an end tag must be the element's <a>tag
    name</a>.</li>

    <li>After the tag name, there may be one or more <a>space
    characters</a>.</li>

    <li>Finally, end tags must be closed by a U+003E GREATER-THAN SIGN character (&gt;).</li>

  </ol>

<h5 id="attributes"><dfn>Attributes</dfn></h5>

  <dfn>Attributes</dfn> for an element are expressed inside the
  element's start tag.

  Attributes have a name and a value. <dfn>Attribute names</dfn>
  must consist of one or more characters other than the <a>space
  characters</a>, U+0000 NULL, U+0022 QUOTATION MARK (&#x22;), U+0027 APOSTROPHE (&#x27;), U+003E
  GREATER-THAN SIGN (&gt;), U+002F SOLIDUS (/), and U+003D EQUALS SIGN (=) characters, the <a>control
  characters</a>, and any characters that are not defined by Unicode. In the HTML syntax, attribute
  names, even those for <a>foreign elements</a>, may be written with any mix of lower- and
  uppercase letters that are an <a>ASCII case-insensitive</a> match for the attribute's
  name.

  <dfn>Attribute values</dfn> are a mixture of <a>text</a> and <a>character references</a>,
  except with the additional restriction that the text cannot contain an <a>ambiguous ampersand</a>.

  Attributes can be specified in four different ways:

  <dl>

    <dt>Empty attribute syntax</dt>

    <dd>

    Just the <a>attribute name</a>. The value is implicitly
    the empty string.

    <div class="example">
      In the following example, the <code>disabled</code> attribute is
      given with the empty attribute syntax:

      <pre highlight="html">
  &lt;input <em>disabled</em>&gt;
  </pre>
    </div>

    If an attribute using the empty attribute syntax is to be followed by another attribute, then
    there must be a <a>space character</a> separating the two.

    </dd>

    <dt>Unquoted attribute value syntax</dt>

    <dd>

    The <a>attribute name</a>, followed by zero or more <a>space characters</a>, followed by a single U+003D EQUALS SIGN
    character, followed by zero or more <a>space characters</a>,
    followed by the <a>attribute value</a>, which, in addition
    to the requirements given above for attribute values, must not contain any literal <a>space characters</a>, any U+0022 QUOTATION MARK characters (&#x22;),
    U+0027 APOSTROPHE characters (&#x27;), U+003D EQUALS SIGN characters (=), U+003C LESS-THAN SIGN
    characters (&lt;), U+003E GREATER-THAN SIGN characters (&gt;), or U+0060 GRAVE ACCENT characters
    (`), and must not be the empty string.

    <div class="example">
      In the following example, the <code>value</code> attribute is given
      with the unquoted attribute value syntax:

      <pre highlight="html">
  &lt;input <em>value=yes</em>&gt;
  </pre>
    </div>

    If an attribute using the unquoted attribute syntax is to be followed by another attribute or
    by the optional U+002F SOLIDUS character (/) allowed in step 6 of the <a>start tag</a> syntax above, then there must be a <a>space
    character</a> separating the two.

    </dd>

    <dt>Single-quoted attribute value syntax</dt>

    <dd>

    The <a>attribute name</a>, followed by zero or more <a>space characters</a>, followed by a single U+003D EQUALS SIGN
    character, followed by zero or more <a>space characters</a>,
    followed by a single U+0027 APOSTROPHE character ('), followed by the <a>attribute value</a>, which, in addition to the requirements
    given above for attribute values, must not contain any literal U+0027 APOSTROPHE characters ('),
    and finally followed by a second single U+0027 APOSTROPHE character (').

    <div class="example">
      In the following example, the <code>type</code> attribute is given
      with the single-quoted attribute value syntax:

      <pre highlight="html">
  &lt;input <em>type='checkbox'</em>&gt;
  </pre>
    </div>

    If an attribute using the single-quoted attribute syntax is to be followed by another
    attribute, then there must be a <a>space character</a> separating the two.

    </dd>

    <dt>Double-quoted attribute value syntax</dt>

    <dd>

    The <a>attribute name</a>, followed by zero or more <a>space characters</a>, followed by a single U+003D EQUALS SIGN
    character, followed by zero or more <a>space characters</a>,
    followed by a single U+0022 QUOTATION MARK character ("), followed by the <a>attribute value</a>, which, in addition to the requirements
    given above for attribute values, must not contain any literal U+0022 QUOTATION MARK characters
    ("), and finally followed by a second single U+0022 QUOTATION MARK character (").

    <div class="example">
      In the following example, the <code>name</code> attribute is given with
      the double-quoted attribute value syntax:

      <pre highlight="html">
  &lt;input <em>name="be evil"</em>&gt;
  </pre>
    </div>

    If an attribute using the double-quoted attribute syntax is to be followed by another
    attribute, then there must be a <a>space character</a> separating the two.

    </dd>

  </dl>

  There must never be two or more attributes on the same start tag whose names are an <a>ASCII
  case-insensitive</a> match for each other.

  <hr />

  When a <a>foreign element</a> has one of the namespaced
  attributes given by the local name and namespace of the first and second cells of a row from the
  following table, it must be written using the name given by the third cell from the same row.

  <table>
    <thead>
    <tr> <th> Local name <th> Namespace <th> Attribute name
    <tbody>
    <tr> <td> <code>actuate</code> <td> <a>XLink namespace</a> <td> <code>xlink:actuate</code>
    <tr> <td> <code>arcrole</code> <td> <a>XLink namespace</a> <td> <code>xlink:arcrole</code>
    <tr> <td> <code>href</code> <td> <a>XLink namespace</a> <td> <code>xlink:href</code>
    <tr> <td> <code>role</code> <td> <a>XLink namespace</a> <td> <code>xlink:role</code>
    <tr> <td> <code>show</code> <td> <a>XLink namespace</a> <td> <code>xlink:show</code>
    <tr> <td> <code>title</code> <td> <a>XLink namespace</a> <td> <code>xlink:title</code>
    <tr> <td> <code>type</code> <td> <a>XLink namespace</a> <td> <code>xlink:type</code>
    <tr> <td> <code>base</code> <td> <a>XML namespace</a>  <td> <code>xml:base</code>
    <tr> <td> <code>lang</code> <td> <a>XML namespace</a> <td> <code>xml:lang</code>
    <tr> <td> <code>space</code> <td> <a>XML namespace</a> <td> <code>xml:space</code>
    <tr> <td> <code>xmlns</code> <td> <a>XMLNS namespace</a> <td> <code>xmlns</code>
    <tr> <td> <code>xlink</code> <td> <a>XMLNS namespace</a> <td> <code>xmlns:xlink</code>
  </table>

  No other namespaced attribute can be expressed in <a>the HTML syntax</a>.

  <p class="note">
  Whether the attributes in the table above are conforming or not is defined by
  other specifications (e.g. the SVG and MathML specifications); this section only describes the
  syntax rules if the attributes are serialized using the HTML syntax.
  </p>

<h5 id="optional-tags"><dfn>Optional tags</dfn></h5>

  Certain tags can be <dfn>omitted</dfn>.

  <p class="note">
  Omitting an element's <a>start tag</a> in the
  situations described below does not mean the element is not present; it is implied, but it is
  still there. For example, an HTML document always has a root <code>html</code> element, even if
  the string <code>&lt;html></code> doesn't appear anywhere in the markup.
  </p>

  An <code>html</code> element's <a>start tag</a> may be omitted
  if the first thing inside the <code>html</code> element is not a <a>comment</a>.

  <div class="example">
    For example, in the following case it's ok to remove the "<code>&lt;html></code>"
    tag:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  <strong>&lt;html></strong>
  &lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
  &lt;/html>
  </pre>

    Doing so would make the document look like this:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>

  &lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
  &lt;/html>
  </pre>

    This has the exact same DOM. In particular, note that white space around the root element is
    ignored by the parser. The following example would also have the exact same DOM:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>&lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
  &lt;/html>
  </pre>

    However, in the following example, removing the start tag moves the comment to before the
    <code>html</code> element:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  &lt;html>
  <strong>&lt;!-- where is this comment in the DOM? --></strong>
  &lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
  &lt;/html>
  </pre>

    With the tag removed, the document actually turns into the same as this:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  &lt;!-- where is this comment in the DOM? -->
  <small>&lt;html></small>
  &lt;head>
    &lt;title>Hello&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
  &lt;/html>
  </pre>

    This is why the tag can only be removed if it is not followed by a comment: removing the tag
    when there is a comment there changes the document's resulting parse tree. Of course, if the
    position of the comment does not matter, then the tag can be omitted, as if the comment had been
    moved to before the start tag in the first place.
  </div>

  An <code>html</code> element's <a>end tag</a> may be omitted if
  the <code>html</code> element is not immediately followed by a <a>comment</a>.

  A <code>head</code> element's <a>start tag</a> may be omitted if
  the element is empty, or if the first thing inside the <code>head</code> element is an
  element.

  A <code>head</code> element's <a>end tag</a> may be omitted if the
  <code>head</code> element is not immediately followed by a <a>space character</a> or a <a>comment</a>.

  A <code>body</code> element's <a>start tag</a> may be omitted
  if the element is empty, or if the first thing inside the <code>body</code> element is not a
  <a>space character</a> or a <a>comment</a>, except if the
  first thing inside the <code>body</code> element is a <code>meta</code>, <code>link</code>,
  <code>script</code>, <code>style</code>, or <code>template</code> element.

  A <code>body</code> element's <a>end tag</a> may be omitted if the
  <code>body</code> element is not immediately followed by a <a>comment</a>.

  <div class="example">
    Note that in the example above, the <code>head</code> element start and end tags, and the
    <code>body</code> element start tag, can't be omitted, because they are surrounded by white
    space:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  &lt;html><strong>
  </strong>&lt;head><strong>
    </strong>&lt;title>Hello&lt;/title><strong>
  </strong>&lt;/head><strong>
  </strong>&lt;body><strong>
    </strong>&lt;p>Welcome to this example.&lt;/p>
  &lt;/body>
  &lt;/html>
  </pre>

    (The <code>body</code> and <code>html</code> element end tags could be omitted without
    trouble; any spaces after those get parsed into the <code>body</code> element anyway.)

    Usually, however, white space isn't an issue. If we first remove the white space we don't care
    about:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>&lt;html>&lt;head>&lt;title>Hello&lt;/title>&lt;/head>&lt;body>&lt;p>Welcome to this example.&lt;/p>&lt;/body>&lt;/html>
  </pre>

    Then we can omit a number of tags without affecting the DOM:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>&lt;title>Hello&lt;/title>&lt;p>Welcome to this example.&lt;/p>
  </pre>

    At that point, we can also add some white space back:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  &lt;title>Hello&lt;/title>
  &lt;p>Welcome to this example.&lt;/p>
  </pre>

    This would be equivalent to this document, with the omitted tags shown in their
    parser-implied positions; the only white space text node that results from this is the newline at
    the end of the <code>head</code> element:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>
  <small>&lt;html>&lt;head></small>&lt;title>Hello&lt;/title>
  <small>&lt;/head>&lt;body></small>&lt;p>Welcome to this example.&lt;/p><small>&lt;/body>&lt;/html></small>
  </pre>
  </div>

  An <code>li</code> element's <a>end tag</a> may be omitted if the
  <code>li</code> element is immediately followed by another <code>li</code> element or if there is
  no more content in the parent element.

  A <code>dt</code> element's <a>end tag</a> may be omitted if the
  <code>dt</code> element is immediately followed by another <code>dt</code> element or a
  <code>dd</code> element.

  A <code>dd</code> element's <a>end tag</a> may be omitted if the
  <code>dd</code> element is immediately followed by another <code>dd</code> element or a
  <code>dt</code> element, or if there is no more content in the parent element.

  A <code>p</code> element's <a>end tag</a> may be omitted if the
  <code>p</code> element is immediately followed by an <code>address</code>, <code>article</code>,
  <code>aside</code>, <code>blockquote</code>, <code>details</code>, <code>div</code>, <code>dl</code>,
  <code>fieldset</code>, <code>figcaption</code>, <code>figure</code>, <code>footer</code>, <code>form</code>, <code>h1</code>, <code>h2</code>,
  <code>h3</code>, <code>h4</code>, <code>h5</code>, <code>h6</code>, <code>header</code>,
  <code>hr</code>, <code>main</code>, <code>menu</code>, <code>nav</code>,
  <code>ol</code>, <code>p</code>, <code>pre</code>, <code>section</code>, <code>table</code>, or
  <code>ul</code> element, or if there is no more content in the parent element and the parent
  element is an <a>HTML element</a> that is not an <code>a</code>, <code>audio</code>, <code>del</code>,
  <code>ins</code>, <code>map</code>, <code>noscript</code>, or <code>video</code> element.

  <div class="example">
    We can thus simplify the earlier example further:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>&lt;title>Hello&lt;/title>&lt;p>Welcome to this example.<small>&lt;/p></small>
  </pre>
  </div>

  An <code>rt</code> element's <a>end tag</a> may be omitted if the
  <code>rt</code> element is immediately followed by an <code>rt</code> or <code>rp</code> element,
  or if there is no more content in the parent element.

  An <code>rp</code> element's <a>end tag</a> may be omitted if the
  <code>rp</code> element is immediately followed by an <code>rt</code> or <code>rp</code> element,
  or if there is no more content in the parent element.

  An <code>optgroup</code> element's <a>end tag</a> may be omitted
  if the <code>optgroup</code> element  is
  immediately followed by another <code>optgroup</code> element, or if  there is no more content in
  the parent element.

  An <code>option</code> element's <a>end tag</a> may be omitted if
  the <code>option</code> element is immediately followed by another <code>option</code> element, or
  if it is immediately followed by an <code>optgroup</code> element, or if there is no more content
  in the parent element.

  A <code>colgroup</code> element's <a>start tag</a> may be
  omitted if the first thing inside the <code>colgroup</code> element is a <code>col</code> element,
  and if the element is not immediately preceded by another <code>colgroup</code> element whose
  <a>end tag</a> has been omitted. (It can't be omitted if the element
  is empty.)

  A <code>colgroup</code> element's <a>end tag</a> may be omitted if
  the <code>colgroup</code> element is not immediately followed by a <a>space character</a> or
  a <a>comment</a>.

  A <code>caption</code> element's <a>end tag</a> may be omitted if
  the <code>caption</code> element is not immediately followed by a <a>space character</a> or
  a <a>comment</a>.

  A <code>thead</code> element's <a>end tag</a> may be omitted if
  the <code>thead</code> element is immediately followed by a <code>tbody</code> or
  <code>tfoot</code> element.

  A <code>tbody</code> element's <a>start tag</a> may be omitted
  if the first thing inside the <code>tbody</code> element is a <code>tr</code> element, and if the
  element is not immediately preceded by a <code>tbody</code>, <code>thead</code>, or
  <code>tfoot</code> element whose <a>end tag</a> has been omitted. (It
  can't be omitted if the element is empty.)

  A <code>tbody</code> element's <a>end tag</a> may be omitted if
  the <code>tbody</code> element is immediately followed by a <code>tbody</code> or
  <code>tfoot</code> element, or if there is no more content in the parent element.

  A <code>tfoot</code> element's <a>end tag</a> may be omitted if
  the <code>tfoot</code> element is immediately followed by a <code>tbody</code> element, or if
  there is no more content in the parent element.

  A <code>tr</code> element's <a>end tag</a> may be omitted if the
  <code>tr</code> element is immediately followed by another <code>tr</code> element, or if there is
  no more content in the parent element.

  A <code>td</code> element's <a>end tag</a> may be omitted if the
  <code>td</code> element is immediately followed by a <code>td</code> or <code>th</code> element,
  or if there is no more content in the parent element.

  A <code>th</code> element's <a>end tag</a> may be omitted if the
  <code>th</code> element is immediately followed by a <code>td</code> or <code>th</code> element,
  or if there is no more content in the parent element.

  <div class="example">
    The ability to omit all these table-related tags makes table markup much terser.

    Take this example:

    <pre highlight="html">
  &lt;table>
  &lt;caption>37547 TEE Electric Powered Rail Car Train Functions (Abbreviated)&lt;/caption>
  &lt;colgroup>&lt;col>&lt;col>&lt;col>&lt;/colgroup>
  &lt;thead>
  &lt;tr>
    &lt;th>Function&lt;/th>
    &lt;th>Control Unit&lt;/th>
    &lt;th>Central Station&lt;/th>
  &lt;/tr>
  &lt;/thead>
  &lt;tbody>
  &lt;tr>
    &lt;td>Headlights&lt;/td>
    &lt;td>&#x2714;&lt;/td>
    &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;tr>
    &lt;td>Interior Lights&lt;/td>
    &lt;td>&#x2714;&lt;/td>
    &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;tr>
    &lt;td>Electric locomotive operating sounds&lt;/td>
    &lt;td>&#x2714;&lt;/td>
    &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;tr>
    &lt;td>Engineer's cab lighting&lt;/td>
    &lt;td>&lt;/td>
    &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;tr>
    &lt;td>Station Announcements - Swiss&lt;/td>
    &lt;td>&lt;/td>
    &lt;td>&#x2714;&lt;/td>
  &lt;/tr>
  &lt;/tbody>
  &lt;/table>
  </pre>

    The exact same table, modulo some white space differences, could be marked up as follows:

    <pre highlight="html">
  &lt;table>
  &lt;caption>37547 TEE Electric Powered Rail Car Train Functions (Abbreviated)
  &lt;colgroup>&lt;col>&lt;col>&lt;col>
  &lt;thead>
  &lt;tr>
    &lt;th>Function
    &lt;th>Control Unit
    &lt;th>Central Station
  &lt;tbody>
  &lt;tr>
    &lt;td>Headlights
    &lt;td>&#x2714;
    &lt;td>&#x2714;
  &lt;tr>
    &lt;td>Interior Lights
    &lt;td>&#x2714;
    &lt;td>&#x2714;
  &lt;tr>
    &lt;td>Electric locomotive operating sounds
    &lt;td>&#x2714;
    &lt;td>&#x2714;
  &lt;tr>
    &lt;td>Engineer's cab lighting
    &lt;td>
    &lt;td>&#x2714;
  &lt;tr>
    &lt;td>Station Announcements - Swiss
    &lt;td>
    &lt;td>&#x2714;
  &lt;/table>
  </pre>

    Since the cells take up much less room this way, this can be made even terser by having each
    row on one line:

    <pre highlight="html">
  &lt;table>
  &lt;caption>37547 TEE Electric Powered Rail Car Train Functions (Abbreviated)
  &lt;colgroup>&lt;col>&lt;col>&lt;col>
  &lt;thead>
  &lt;tr> &lt;th>Function                              &lt;th>Control Unit     &lt;th>Central Station
  &lt;tbody>
  &lt;tr> &lt;td>Headlights                            &lt;td>&#x2714;                &lt;td>&#x2714;
  &lt;tr> &lt;td>Interior Lights                       &lt;td>&#x2714;                &lt;td>&#x2714;
  &lt;tr> &lt;td>Electric locomotive operating sounds  &lt;td>&#x2714;                &lt;td>&#x2714;
  &lt;tr> &lt;td>Engineer's cab lighting               &lt;td>                 &lt;td>&#x2714;
  &lt;tr> &lt;td>Station Announcements - Swiss         &lt;td>                 &lt;td>&#x2714;
  &lt;/table>
  </pre>

    The only differences between these tables, at the DOM level, is with the precise position of
    the (in any case semantically-neutral) white space.
  </div>

  <strong>However</strong>, a <a>start tag</a> must never be
  omitted if it has any attributes.

  <div class="example">
    Returning to the earlier example with all the white space removed and then all the optional
    tags removed:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>&lt;title>Hello&lt;/title>&lt;p>Welcome to this example.
  </pre>

    If the <code>body</code> element in this example had to have a <code>class</code> attribute and the <code>html</code> element had to have a <code>lang</code> attribute, the markup would have to become:

    <pre highlight="html">
  &lt;!DOCTYPE HTML>&lt;html lang="en">&lt;title>Hello&lt;/title>&lt;body class="demo">&lt;p>Welcome to this example.
  </pre>
  </div>

  <p class="note">
  This section assumes that the document is conforming, in particular, that there
  are no <a>content model</a> violations. Omitting tags in the fashion
  described in this section in a document that does not conform to the <a>content models</a>
  described in this specification is likely to result in unexpected DOM differences (this is, in
  part, what the content models are designed to avoid).
  </p>

<h5 id="restrictions-on-content-models"><dfn>Restrictions on content models</dfn></h5>

  For historical reasons, certain elements have extra restrictions beyond even the restrictions
  given by their content model.

  A <code>table</code> element must not contain <code>tr</code> elements, even though these
  elements are technically allowed inside <code>table</code> elements according to the content
  models described in this specification. (If a <code>tr</code> element is put inside a
  <code>table</code> in the markup, it will in fact imply a <code>tbody</code> start tag before
  it.)

  A single <a>newline</a> may be placed immediately after the <a>start tag</a> of <code>pre</code> and <code>textarea</code> elements.
  This does not affect the processing of the element. The otherwise optional <a>newline</a> <em>must</em> be included if the element's contents
  themselves start with a <a>newline</a> (because otherwise the
  leading newline in the contents would be treated like the optional newline, and ignored).

  <div class="example">
    The following two <code>pre</code> blocks are equivalent:
    <pre highlight="html">
  &lt;pre>Hello&lt;/pre>
  </pre>
    <pre highlight="html">
  &lt;pre><br>Hello&lt;/pre>
  </pre>
  </div>

<h5 id="restrictions-on-the-contents-of-raw-text-and-escapable-raw-text-elements"><dfn>Restrictions on the contents of raw text and escapable raw text elements</dfn></h5>

  The text in <a>raw text</a> and <a>escapable raw text
  elements</a> must not contain any occurrences of the string "<code>&lt;/</code>"
  (U+003C LESS-THAN SIGN, U+002F SOLIDUS) followed by characters that case-insensitively match the
  tag name of the element followed by one of U+0009 CHARACTER TABULATION (tab), U+000A LINE FEED
  (LF), U+000C FORM FEED (FF), U+000D CARRIAGE RETURN (CR), U+0020 SPACE, U+003E GREATER-THAN SIGN
  (>), or U+002F SOLIDUS (/).

<h4 id="text"><dfn>Text</dfn></h4>

  <dfn>Text</dfn> is allowed inside elements, attribute values, and comments.
  Extra constraints are placed on what is and what is not allowed in text based on where the text is
  to be put, as described in the other sections.

<h5 id="newlines"><dfn>Newlines</dfn></h5>

  <dfn>Newlines</dfn> in HTML may be represented either as U+000D
  CARRIAGE RETURN (CR) characters, U+000A LINE FEED (LF) characters, or pairs of U+000D CARRIAGE
  RETURN (CR), U+000A LINE FEED (LF) characters in that order.

  Where <a>character references</a> are allowed, a character
  reference of a U+000A LINE FEED (LF) character (but not a U+000D CARRIAGE RETURN (CR) character)
  also represents a <a>newline</a>.

<h4 id="character-references"><dfn>Character references</dfn></h4>

  In certain cases described in other sections, <a>text</a> may be
  mixed with <dfn>character references</dfn>. These can be used to escape
  characters that couldn't otherwise legally be included in <a>text</a>.

  Character references must start with a U+0026 AMPERSAND character (&amp;). Following this,
  there are three possible kinds of character references:

  <dl>

    <dt>Named character references</dt>

    <dd>The ampersand must be followed by one of the names given in the <a>named character
    references</a> section, using the same case. <span class="impl">The name must be one that is
    terminated by a U+003B SEMICOLON character (;).</span></dd>

    <dt>Decimal numeric character reference</dt>

    <dd>The ampersand must be followed by a U+0023 NUMBER SIGN character (#), followed by one or more
    <a>ASCII digits</a>, representing a base-ten integer that corresponds to a Unicode code
    point that is allowed according to the definition below. The digits must then be followed by a
    U+003B SEMICOLON character (;).</dd>

    <dt>Hexadecimal numeric character reference</dt>

    <dd>The ampersand must be followed by a U+0023 NUMBER SIGN character (#), which must be followed
    by either a U+0078 LATIN SMALL LETTER X character (x) or a U+0058 LATIN CAPITAL LETTER X
    character (X), which must then be followed by one or more <a>ASCII hex digits</a>,
    representing a hexadecimal integer that corresponds to a Unicode code point that is allowed
    according to the definition below. The digits must then be followed by a U+003B SEMICOLON
    character (;).</dd>

  </dl>

  The numeric character reference forms described above are allowed to reference any Unicode code
  point other than U+0000, U+000D, permanently undefined Unicode characters (noncharacters),
  surrogates (U+D800&ndash;U+DFFF), and <a>control characters</a> other than <a>space characters</a>.

  An <dfn>ambiguous ampersand</dfn> is a U+0026 AMPERSAND
  character (&amp;) that is followed by one or more <a>alphanumeric ASCII characters</a>,
  followed by a U+003B SEMICOLON character (;), where these characters do not match any of the names
  given in the <a>named character references</a> section.

<h4 id="cdata-sections"><dfn>CDATA sections</dfn></h4>

  <dfn>CDATA sections</dfn> must consist of the following components, in
  this order:

  <ol>

    <li>The string "<code>&lt;![CDATA[</code>".</li>

    <li>Optionally, <a>text</a>, with the additional restriction that the
    text must not contain the string "<code>]]></code>".</li>

    <li>The string "<code>]]></code>".</li>

  </ol>

  <div class="example">
    CDATA sections can only be used in foreign content (MathML or SVG). In this example, a CDATA
    section is used to escape the contents of an <code>ms</code> element:

    <pre highlight="html">
  &lt;p>You can add a string to a number, but this stringifies the number:&lt;/p>
  &lt;math>
  &lt;ms>&lt;![CDATA[x&lt;y]]>&lt;/ms>
  &lt;mo>+&lt;/mo>
  &lt;mn>3&lt;/mn>
  &lt;mo>=&lt;/mo>
  &lt;ms>&lt;![CDATA[x&lt;y3]]>&lt;/ms>
  &lt;/math>
  </pre>
  </div>

<h4 id="comments"><dfn>Comments</dfn></h4>

  <dfn>Comments</dfn> must start with the four character sequence U+003C
  LESS-THAN SIGN, U+0021 EXCLAMATION MARK, U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS (<code>&lt;!--</code>). Following this sequence, the comment may have <a>text</a>, with the additional restriction that the text must not start with
  a single U+003E GREATER-THAN SIGN character (&gt;), nor start with a U+002D HYPHEN-MINUS character
  (-) followed by a U+003E GREATER-THAN SIGN (&gt;) character, nor contain two consecutive U+002D
  HYPHEN-MINUS characters (<code>--</code>), nor end with a U+002D HYPHEN-MINUS character
  (-). Finally, the comment must be ended by the three character sequence U+002D HYPHEN-MINUS,
  U+002D HYPHEN-MINUS, U+003E GREATER-THAN SIGN (<code>--&gt;</code>).

  <div class="impl">

<h3 id="parsing-html-documents"><dfn>Parsing HTML documents</dfn></h3>

  <i>This section only applies to user agents, data mining tools, and conformance
  checkers.</i>

  <p class="note">
  The rules for parsing XML documents into DOM trees are covered by the next
  section, entitled "<a>The XHTML syntax</a>".
  </p>

  User agents must use the parsing rules described in this section to generate the DOM trees from
  <code>text/html</code> resources. Together, these rules define what is referred to as the
  <dfn>HTML parser</dfn>.

  <div class="note">

    While the HTML syntax described in this specification bears a close resemblance to SGML and
    XML, it is a separate language with its own parsing rules.

    Some earlier versions of HTML (in particular from HTML2 to HTML4) were based on SGML and used
    SGML parsing rules. However, few (if any) web browsers ever implemented true SGML parsing for
    HTML documents; the only user agents to strictly handle HTML as an SGML application have
    historically been validators. The resulting confusion &mdash; with validators claiming documents
    to have one representation while widely deployed Web browsers interoperably implemented a
    different representation &mdash; has wasted decades of productivity. This version of HTML thus
    returns to a non-SGML basis.

    Authors interested in using SGML tools in their authoring pipeline are encouraged to use XML
    tools and the XML serialization of HTML.

  </div>

  This specification defines the parsing rules for HTML documents, whether they are syntactically
  correct or not. Certain points in the parsing algorithm are said to be <dfn>parse errors</dfn>. The error handling for parse errors is well-defined (that's the
  processing rules described throughout this specification), but user agents, while parsing an HTML
  document, may <a>abort the parser</a> at the first <a>parse
  error</a> that they encounter for which they do not wish to apply the rules described in this
  specification.

  Conformance checkers must report at least one parse error condition to the user if one or more
  parse error conditions exist in the document and must not report parse error conditions if none
  exist in the document. Conformance checkers may report more than one parse error condition if more
  than one parse error condition exists in the document.

  <p class="note">
  Parse errors are only errors with the <em>syntax</em> of HTML. In addition to
  checking for parse errors, conformance checkers will also verify that the document obeys all the
  other conformance requirements described in this specification.
  </p>

  For the purposes of conformance checkers, if a resource is determined to be in <a>the HTML
  syntax</a>, then it is an <a>HTML document</a>.

  <p class="note">
  As stated <span class="no-backref">in the terminology
  section</span>, references to <a>element types</a> that do not
  explicitly specify a namespace always refer to elements in the <a>HTML namespace</a>. For
  example, if the spec talks about "a <code>menuitem</code> element", then that is an element with
  the local name "<code>menuitem</code>", the namespace "<code>http://www.w3.org/1999/xhtml</code>", and the interface <code>HTMLMenuItemElement</code>.
  Where possible, references to such elements are hyperlinked to their definition.
  </p>

  </div>

  <div class="impl">

<h4 id="overview-of-the-parsing-model"><dfn>Overview of the parsing model</dfn></h4>

  <object data="images/parsing-model-overview.svg" width="345" height="535"><img src="images/parsing-model-overview.png" width="345" height="450" alt="" /></object>

  The input to the HTML parsing process consists of a stream of <a>Unicode code points</a>, which is passed through a <a>tokenization</a> stage
  followed by a <a>tree construction</a> stage. The output is a <code>Document</code>
  object.

  <p class="note">
  Implementations that <a>do not support scripting</a> do not
  have to actually create a DOM <code>Document</code> object, but the DOM tree in such cases is
  still used as the model for the rest of the specification.
  </p>

  In the common case, the data handled by the tokenization stage comes from the network, but
  <a>it can also come from script</a> running in the user
  agent, e.g. using the <code>document.write()</code> API.

  There is only one set of states for the tokenizer stage and the tree
  construction stage, but the tree construction stage is reentrant, meaning that while the tree
  construction stage is handling one token, the tokenizer might be resumed, causing further tokens
  to be emitted and processed before the first token's processing is complete.

  <div class="example">
    In the following example, the tree construction stage will be called upon to handle a "p"
    start tag token while handling the "script" end tag token:

    <pre highlight="html">
  ...
  &lt;script>
  document.write('&lt;p>');
  &lt;/script>
  ...
  </pre>
  </div>

  To handle these cases, parsers have a <dfn>script nesting level</dfn>, which must be initially
  set to zero, and a <dfn>parser pause flag</dfn>, which must be initially set to false.

  </div>

  <div class="impl">

<h4 id="the-input-byte-stream"><dfn>The <dfn>input byte stream</dfn></dfn></h4>

  The stream of Unicode code points that comprizes the input to the tokenization stage will be
  initially seen by the user agent as a stream of bytes (typically coming over the network or from
  the local file system). The bytes encode the actual characters according to a particular
  <i>character encoding</i>, which the user agent uses to decode the bytes into characters.

  <p class="note">
  For XML documents, the algorithm user agents are required to use to determine the
  character encoding is given by the XML specification. This section does not apply to XML
  documents. [[!XML]]
  </p>

  Usually, the <a>encoding sniffing algorithm</a> defined below is used to determine the
  character encoding.

  Given a character encoding, the bytes in the <a>input byte stream</a> must be converted
  to Unicode code points for the tokenizer's <a>input stream</a>, as described by the rules
  for that encoding's <a>decoder</a>.

  <p class="note">
  Bytes or sequences of bytes in the original byte stream that did not conform to
  the Encoding standard (e.g. invalid UTF-8 byte sequences in a UTF-8 input byte stream) are errors
  that conformance checkers are expected to report. [[!ENCODING]]
  </p>

  <p class="note">
  Leading Byte Order Marks (BOMs) are not stripped by the decoder algorithms, they
  are stripped by the algorithm below.
  </p>

  <p class="warning">The decoder algorithms describe how to handle invalid input; for security
  reasons, it is imperative that those rules be followed precisely. Differences in how invalid byte
  sequences are handled can result in, amongst other problems, script injection vulnerabilities
  ("XSS").</p>

  When the HTML parser is decoding an input byte stream, it uses a character encoding and a <dfn>confidence</dfn>. The confidence is either <i>tentative</i>,
  <i>certain</i>, or <i>irrelevant</i>. The encoding used, and whether the confidence in that
  encoding is <i>tentative</i> or <i>certain</i>, is <a>used
  during the parsing</a> to determine whether to <a>change the encoding</a>. If no encoding is
  necessary, e.g. because the parser is operating on a Unicode stream and doesn't have to use a
  character encoding at all, then the <a>confidence</a> is
  <i>irrelevant</i>.

  <p class="note">
  Some algorithms feed the parser by directly adding characters to the <a>input
  stream</a> rather than adding bytes to the <a>input byte stream</a>.
  </p>

<h5 id="parsing-with-a-known-character-encoding"><dfn>Parsing with a known character encoding</dfn></h5>

  When the HTML parser is to operate on an input byte stream that has <dfn>a known definite
  encoding</dfn>, then the character encoding is that encoding and the <a>confidence</a> is <i>certain</i>.

<h5 id="determining-the-character-encoding"><dfn>Determining the character encoding</dfn></h5>

  In some cases, it might be impractical to unambiguously determine the encoding before parsing
  the document. Because of this, this specification provides for a two-pass mechanism with an
  optional pre-scan. Implementations are allowed, as described below, to apply a simplified parsing
  algorithm to whatever bytes they have available before beginning to parse the document. Then, the
  real parser is started, using a tentative encoding derived from this pre-parse and other
  out-of-band metadata. If, while the document is being loaded, the user agent discovers a character
  encoding declaration that conflicts with this information, then the parser can get reinvoked to
  perform a parse of the document with the real encoding.

  User agents must use the following algorithm, called the <dfn>encoding
  sniffing algorithm</dfn>, to determine the character encoding to use when decoding a document in
  the first pass. This algorithm takes as input any out-of-band metadata available to the user agent
  (e.g. the <a>Content-Type metadata</a> of the document) and all the
  bytes available so far, and returns a character encoding and a <a>confidence</a> that is either <i>tentative</i> or
  <i>certain</i>.

  <ol>

    <li>

    If the user has explicitly instructed the user agent to override the document's character
    encoding with a specific encoding, optionally return that encoding with the <a>confidence</a> <i>certain</i> and abort these steps.

    <p class="note">
  Typically, user agents remember such user requests across sessions, and in some
    cases apply them to documents in <code>iframe</code>s as well.
  </p>

    </li>

    <li>

    The user agent may wait for more bytes of the resource to be available, either in this step
    or at any later step in this algorithm. For instance, a user agent might wait 500ms or 1024
    bytes, whichever came first. In general preparsing the source to find the encoding improves
    performance, as it reduces the need to throw away the data structures used when parsing upon
    finding the encoding information. However, if the user agent delays too long to obtain data to
    determine the encoding, then the cost of the delay could outweigh any performance improvements
    from the preparse.

    <p class="note">
  The authoring conformance requirements for character encoding declarations limit
    them to only appearing <a>in the first 1024 bytes</a>. User agents are
    therefore encouraged to use the prescan algorithm below (as invoked by these steps) on the first
    1024 bytes, but not to stall beyond that.
  </p>

    </li>

    <li>

    For each of the rows in the following table, starting with the first one and going down, if
    there are as many or more bytes available than the number of bytes in the first column, and the
    first bytes of the file match the bytes given in the first column, then return the encoding
    given in the cell in the second column of that row, with the <a>confidence</a> <i>certain</i>, and abort these steps:

    <table>
      <thead>
      <tr>
        <th>Bytes in Hexadecimal
        <th>Encoding
      <tbody>

      <tr>
        <td>FE FF
        <td>Big-endian UTF-16
      <tr>
        <td>FF FE
        <td>Little-endian UTF-16
      <tr>
        <td>EF BB BF
        <td>UTF-8

    </table>

    <p class="note">
  This step looks for Unicode Byte Order Marks (BOMs).
  </p>

    <p class="note">
  That this step happens before the next one honoring the HTTP
    <code>Content-Type</code> header is a <a>willful violation</a> of the HTTP specification,
    motivated by a desire to be maximally compatible with legacy content. <a>\[HTTP]</a>
  </p>

    </li>

    <li>If the transport layer specifies a character encoding, and it is supported, return that
    encoding with the <a>confidence</a> <i>certain</i>, and
    abort these steps.</li>

    <li>

    Optionally <a>prescan the byte
    stream to determine its encoding</a>. The <var>end condition</var> is that the user
    agent decides that scanning further bytes would not be efficient. User agents are encouraged to
    only prescan the first 1024 bytes. User agents may decide that scanning <em>any</em> bytes is
    not efficient, in which case these substeps are entirely skipped.

    The aforementioned algorithm either aborts unsuccessfully or returns a character encoding. If
    it returns a character encoding, then this algorithm must be aborted, returning the same
    encoding, with <a>confidence</a> <i>tentative</i>.

    </li>

    <li>

    If the <a>HTML parser</a> for which this algorithm is being run is associated with a
    <code>Document</code> that is itself in a <a>nested browsing context</a>, run these
    substeps:

    <ol>

      <li>Let <var>new document</var> be the <code>Document</code> with which the
      <a>HTML parser</a> is associated.</li>

      <li>Let <var>parent document</var> be the <code>Document</code> <a>through which <var>new document</var> is
      nested</a> (the <a>active document</a> of the <a>parent browsing context</a> of
      <var>new document</var>).</li>

      <li>If <var>parent document</var>'s <a>origin</a> is not the <a>same
      origin</a> as <var>new document</var>'s <a>origin</a>, then abort these
      substeps.</li>

      <li>If <var>parent document</var>'s <a>character encoding</a> is not an <a>ASCII-compatible encoding</a>, then
      abort these substeps.</li>

      <li>Return <var>parent document</var>'s <a>character encoding</a>, with the <a>confidence</a> <i>tentative</i>, and abort the
      <a>encoding sniffing algorithm</a>'s steps.</li>

    </ol>

    </li>

    <li>Otherwise, if the user agent has information on the likely encoding for this page, e.g.
    based on the encoding of the page when it was last visited, then return that encoding, with the
    <a>confidence</a> <i>tentative</i>, and abort these
    steps.</li>

    <li>

    The user agent may attempt to autodetect the character encoding from applying frequency
    analysis or other algorithms to the data stream. Such algorithms may use information about the
    resource other than the resource's contents, including the address of the resource. If
    autodetection succeeds in determining a character encoding, and that encoding is a supported
    encoding, then return that encoding, with the <a>confidence</a> <i>tentative</i>, and abort these steps.
    [[!UNIVCHARDET]]

    <p class="note">
  User agents are generally discouraged from attempting to autodetect encodings
    for resources obtained over the network, since doing so involves inherently non-interoperable
    heuristics. Attempting to detect encodings based on an HTML document's preamble is especially
    tricky since HTML markup typically uses only ASCII characters, and HTML documents tend to begin
    with a lot of markup rather than with text content.
  </p>

    <p class="note">
  The UTF-8 encoding has a highly detectable bit pattern. Files from the local
    file system that contain bytes with values greater than 0x7F which match the UTF-8 pattern are
    very likely to be UTF-8, while documents with byte sequences that do not match it are very
    likely not. When a user agent can examine the whole file, rather than just the preamble,
    detecting for UTF-8 specifically can be especially effective. [[!PPUTF8]] <a>\[UTF8DET]</a>
  </p>

    </li>

    <li>

    Otherwise, return an implementation-defined or user-specified default character encoding,
    with the <a>confidence</a> <i>tentative</i>.

    In controlled environments or in environments where the encoding of documents can be
    prescribed (for example, for user agents intended for dedicated use in new networks), the
    comprehensive <code>UTF-8</code> encoding is suggested.

    In other environments, the default encoding is typically dependent on the user's locale (an
    approximation of the languages, and thus often encodings, of the pages that the user is likely
    to frequent). The following table gives suggested defaults based on the user's locale, for
    compatibility with legacy content. Locales are identified by BCP 47 language tags. <a>\[BCP47]</a> [[!ENCODING]]

    <table>
      <thead>
      <tr>
        <th colspan=2>Locale language
        <th>Suggested default encoding
      <tbody>

      <tr>
        <td>ar
        <td>Arabic
        <td>windows-1256

      <tr>
        <td>ba
        <td>Bashkir
        <td>windows-1251

      <tr>
        <td>be
        <td>Belarusian
        <td>windows-1251

      <tr>
        <td>bg
        <td>Bulgarian
        <td>windows-1251

      <tr>
        <td>cs
        <td>Czech
        <td>windows-1250

      <tr>
        <td>el
        <td>Greek
        <td>ISO-8859-7

      <tr>
        <td>et
        <td>Estonian
        <td>windows-1257

      <tr>
        <td>fa
        <td>Persian
        <td>windows-1256

      <tr>
        <td>he
        <td>Hebrew
        <td>windows-1255

      <tr>
        <td>hr
        <td>Croatian
        <td>windows-1250

      <tr>
        <td>hu
        <td>Hungarian
        <td>ISO-8859-2

      <tr>
        <td>ja
        <td>Japanese
        <td>Shift_JIS

      <tr>
        <td>kk
        <td>Kazakh
        <td>windows-1251

      <tr>
        <td>ko
        <td>Korean
        <td>euc-kr

      <tr>
        <td>ku
        <td>Kurdish
        <td>windows-1254

      <tr>
        <td>ky
        <td>Kyrgyz
        <td>windows-1251

      <tr>
        <td>lt
        <td>Lithuanian
        <td>windows-1257

      <tr>
        <td>lv
        <td>Latvian
        <td>windows-1257

      <tr>
        <td>mk
        <td>Macedonian
        <td>windows-1251

      <tr>
        <td>pl
        <td>Polish
        <td>ISO-8859-2

      <tr>
        <td>ru
        <td>Russian
        <td>windows-1251

      <tr>
        <td>sah
        <td>Yakut
        <td>windows-1251

      <tr>
        <td>sk
        <td>Slovak
        <td>windows-1250

      <tr>
        <td>sl
        <td>Slovenian
        <td>ISO-8859-2

      <tr>
        <td>sr
        <td>Serbian
        <td>windows-1251

      <tr>
        <td>tg
        <td>Tajik
        <td>windows-1251

      <tr>
        <td>th
        <td>Thai
        <td>windows-874

      <tr>
        <td>tr
        <td>Turkish
        <td>windows-1254

      <tr>
        <td>tt
        <td>Tatar
        <td>windows-1251

      <tr>
        <td>uk
        <td>Ukrainian
        <td>windows-1251

      <tr>
        <td>vi
        <td>Vietnamese
        <td>windows-1258

      <tr>
        <td>zh-CN
        <td>Chinese (People's Republic of China)
        <td>GB18030

      <tr>
        <td>zh-TW
        <td>Chinese (Taiwan)
        <td>Big5

      <tr>
        <td colspan="2">All other locales
        <td>windows-1252

    </table>

    <small>The contents of this table are derived from the intersection of
    Windows, Chrome, and Firefox defaults.</small>

    </li>

  </ol>

  The <a>document's character encoding</a> must immediately be set to the value returned
  from this algorithm, at the same time as the user agent uses the returned value to select the
  decoder to use for the input byte stream.

  <hr />

  When an algorithm requires a user agent to <dfn>prescan a byte stream to determine its
  encoding</dfn>, given some defined <var>end condition</var>, then it must run the
  following steps. These steps either abort unsuccessfully or return a character encoding. If at any
  point during these steps (including during instances of the <a>get an attribute</a> algorithm invoked by this
  one) the user agent either runs out of bytes (meaning the <var>position</var> pointer
  created in the first step below goes beyond the end of the byte stream obtained so far) or reaches
  its <var>end condition</var>, then abort the <a>prescan a byte stream to determine its
  encoding</a> algorithm unsuccessfully.

  <ol>

    <li>

    Let <var>position</var> be a pointer to a byte in the input byte stream, initially
    pointing at the first byte.

    </li>

    <li>

    <i>Loop</i>: If <var>position</var> points to:

    <dl class="switch">

      <dt>A sequence of bytes starting with: 0x3C 0x21 0x2D 0x2D (ASCII '&lt;!--')</dt>
      <dd>

      Advance the <var>position</var> pointer so that it points at the first 0x3E byte
      which is preceded by two 0x2D bytes (i.e. at the end of an ASCII '-->' sequence) and comes
      after the 0x3C byte that was found. (The two 0x2D bytes can be the same as the those in the
      '&lt;!--' sequence.)

      </dd>

      <dt>A sequence of bytes starting with: 0x3C, 0x4D or 0x6D, 0x45 or 0x65, 0x54 or 0x74, 0x41 or 0x61, and one of 0x09, 0x0A, 0x0C, 0x0D, 0x20, 0x2F (case-insensitive ASCII '&lt;meta' followed by a space or slash)</dt>
      <dd>

      <ol>

        <li>Advance the <var>position</var> pointer so that it points at the next 0x09,
        0x0A, 0x0C, 0x0D, 0x20, or 0x2F byte (the one in sequence of characters matched
        above).</li>

        <li>Let <var>attribute list</var> be an empty list of strings.</li>

        <li>Let <var>got pragma</var> be false.</li>

        <li>Let <var>need pragma</var> be null.</li>

        <li>Let <var>charset</var> be the null value (which, for the purposes of this
        algorithm, is distinct from an unrecognized encoding or the empty string).</li>

        <li><i>Attributes</i>: <a>Get an
        attribute</a> and its value. If no attribute was sniffed, then jump to the
        <i>processing</i> step below.</li>

        <li>If the attribute's name is already in <var>attribute list</var>, then return
        to the step labeled <i>attributes</i>.

        <li>Add the attribute's name to <var>attribute list</var>.

        <li>

        Run the appropriate step from the following list, if one applies:

        <dl class="switch">

          <dt>If the attribute's name is "<code>http-equiv</code>"</dt>

          <dd>If the attribute's value is "<code>content-type</code>", then set <var>got pragma</var> to true.</dd>

          <dt>If the attribute's name is "<code>content</code>"</dt>

          <dd>Apply the <a>algorithm for extracting a character encoding from a
          <code>meta</code> element</a>, giving the attribute's value as the string to parse. If a
          character encoding is returned, and if <var>charset</var> is still set to null,
          let <var>charset</var> be the encoding returned, and set <var>need
          pragma</var> to true.</dd>

          <dt>If the attribute's name is "<code>charset</code>"</dt>

          <dd>Let <var>charset</var> be the result of <a>getting an encoding</a>
          from the attribute's value, and set <var>need pragma</var> to false.</dd>

        </dl>

        </li>

        <li>Return to the step labeled <i>attributes</i>.</li>

        <li><i>Processing</i>: If <var>need pragma</var> is null, then jump to the step
        below labeled <i>next byte</i>.</li>

        <li>If <var>need pragma</var> is true but <var>got pragma</var> is
        false, then jump to the step below labeled <i>next byte</i>.</li>

        <li>If <var>charset</var> is a <a>UTF-16 encoding</a>, change the value of
        <var>charset</var> to UTF-8.</li>

        <li>If <var>charset</var> is the x-user-defined encoding, change the value of
        <var>charset</var> to Windows-1252. [[!ENCODING]]</li>

        <li>If <var>charset</var> is not a supported character encoding, then jump to the
        step below labeled <i>next byte</i>.</li>

        <li>Abort the <a>prescan a byte stream to determine its encoding</a> algorithm,
        returning the encoding given by <var>charset</var>.</li>

      </ol>

      </dd>

      <dt>A sequence of bytes starting with a 0x3C byte (ASCII &lt;), optionally a 0x2F byte (ASCII /), and finally a byte in the range 0x41-0x5A or 0x61-0x7A (an ASCII letter)</dt>
      <dd>

      <ol>

        <li>Advance the <var>position</var> pointer so that it points at the next 0x09
        (ASCII TAB), 0x0A (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), 0x20 (ASCII space), or 0x3E
        (ASCII >) byte.</li>

        <li>Repeatedly <a>get an attribute</a>
        until no further attributes can be found, then jump to the step below labeled <i>next
        byte</i>.</li>

      </ol>

      </dd>

      <dt>A sequence of bytes starting with: 0x3C 0x21 (ASCII '&lt;!')</dt>
      <dt>A sequence of bytes starting with: 0x3C 0x2F (ASCII '&lt;/')</dt>
      <dt>A sequence of bytes starting with: 0x3C 0x3F (ASCII '&lt;?')</dt>
      <dd>

      Advance the <var>position</var> pointer so that it points at the first 0x3E byte
      (ASCII >) that comes after the 0x3C byte that was found.

      </dd>

      <dt>Any other byte</dt>
      <dd>

      Do nothing with that byte.

      </dd>

    </dl>

    </li>

    <li><i>Next byte</i>: Move <var>position</var> so it points at the next byte in the
    input byte stream, and return to the step above labeled <i>loop</i>.</li>

  </ol>

  When the <a>prescan a byte stream to determine its encoding</a> algorithm says to <dfn>get an attribute</dfn>, it means doing this:

  <ol>

    <li>If the byte at <var>position</var> is one of 0x09 (ASCII TAB), 0x0A (ASCII LF),
    0x0C (ASCII FF), 0x0D (ASCII CR), 0x20 (ASCII space), or 0x2F (ASCII /) then advance <var>position</var> to the next byte and redo this step.</li>

    <li>If the byte at <var>position</var> is 0x3E (ASCII >), then abort the <a>get an attribute</a> algorithm. There isn't
    one.</li>

    <li>Otherwise, the byte at <var>position</var> is the start of the attribute name.
    Let <var>attribute name</var> and <var>attribute value</var> be the empty
    string.</li>

    <li>Process the byte at <var>position</var> as follows:

    <dl class="switch">

      <dt>If it is 0x3D (ASCII =), and the <var>attribute name</var> is longer than the
      empty string</dt>

      <dd>Advance <var>position</var> to the next byte and jump to the step below labeled
      <i>value</i>.</dd>

      <dt>If it is 0x09 (ASCII TAB), 0x0A (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20
      (ASCII space)</dt>

      <dd>Jump to the step below labeled <i>spaces</i>.</dd>

      <dt>If it is 0x2F (ASCII /) or 0x3E (ASCII >)</dt>

      <dd>Abort the <a>get an attribute</a>
      algorithm. The attribute's name is the value of <var>attribute name</var>, its value
      is the empty string.</dd>

      <dt>If it is in the range 0x41 (ASCII A) to 0x5A (ASCII Z)</dt>

      <dd>Append the Unicode character with code point <a><var>b</var>+0x20</a> to <var>attribute name</var> (where <var>b</var>
      is the value of the byte at <var>position</var>). (This converts the input to
      lowercase.)</dd>

      <dt>Anything else</dt>

      <dd>Append the Unicode character with the same code point as the value of the byte at <var>position</var> to <var>attribute name</var>. (It doesn't actually matter how
      bytes outside the ASCII range are handled here, since only ASCII characters can contribute to
      the detection of a character encoding.)</dd>

    </dl>

    </li>

    <li>Advance <var>position</var> to the next byte and return to the previous
    step.</li>

    <li><i>Spaces</i>: If the byte at <var>position</var> is one of 0x09 (ASCII TAB),
    0x0A (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20 (ASCII space) then advance <var>position</var> to the next byte, then, repeat this step.</li>

    <li>If the byte at <var>position</var> is <em>not</em> 0x3D (ASCII =), abort the
    <a>get an attribute</a> algorithm. The
    attribute's name is the value of <var>attribute name</var>, its value is the empty
    string.</li>

    <li>Advance <var>position</var> past the 0x3D (ASCII =) byte.</li>

    <li><i>Value</i>: If the byte at <var>position</var> is one of 0x09 (ASCII TAB), 0x0A
    (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20 (ASCII space) then advance <var>position</var> to the next byte, then, repeat this step.</li>

    <li>Process the byte at <var>position</var> as follows:

    <dl class="switch">

      <dt>If it is 0x22 (ASCII ") or 0x27 (ASCII ')</dt>

      <dd>

      <ol>

        <li>Let <var>b</var> be the value of the byte at <var>position</var>.</li>

        <li><i>Quote loop</i>: Advance <var>position</var> to the next byte.</li>

        <li>If the value of the byte at <var>position</var> is the value of <var>b</var>, then advance <var>position</var> to the next byte and abort the
        "get an attribute" algorithm. The attribute's name is the value of <var>attribute
        name</var>, and its value is the value of <var>attribute value</var>.</li>

        <li>Otherwise, if the value of the byte at <var>position</var> is in the range 0x41
        (ASCII A) to 0x5A (ASCII Z), then append a Unicode character to <var>attribute
        value</var> whose code point is 0x20 more than the value of the byte at <var>position</var>.</li>

        <li>Otherwise, append a Unicode character to <var>attribute value</var> whose code
        point is the same as the value of the byte at <var>position</var>.</li>

        <li>Return to the step above labeled <i>quote loop</i>.</li>

      </ol>

      </dd>

      <dt>If it is 0x3E (ASCII >)</dt>

      <dd>Abort the <a>get an attribute</a>
      algorithm. The attribute's name is the value of <var>attribute name</var>, its value
      is the empty string.</dd>

      <dt>If it is in the range 0x41 (ASCII A) to 0x5A (ASCII Z)</dt>

      <dd>Append the Unicode character with code point <a><var>b</var>+0x20</a> to <var>attribute value</var> (where <var>b</var> is the value of the byte at <var>position</var>). Advance <var>position</var> to the next byte.</dd>

      <dt>Anything else</dt>

      <dd>Append the Unicode character with the same code point as the value of the byte at <var>position</var> to <var>attribute value</var>. Advance <var>position</var> to the next byte.</dd>

    </dl>

    </li>

    <li>Process the byte at <var>position</var> as
    follows:

    <dl class="switch">

      <dt>If it is 0x09 (ASCII TAB), 0x0A (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR), 0x20 (ASCII
      space), or 0x3E (ASCII >)</dt>

      <dd>Abort the <a>get an attribute</a>
      algorithm. The attribute's name is the value of <var>attribute name</var> and its
      value is the value of <var>attribute value</var>.</dd>

      <dt>If it is in the range 0x41 (ASCII A) to 0x5A (ASCII Z)</dt>

      <dd>Append the Unicode character with code point <a><var>b</var>+0x20</a> to <var>attribute value</var> (where <var>b</var> is the value of the byte at <var>position</var>).</dd>

      <dt>Anything else</dt>

      <dd>Append the Unicode character with the same code point as the value of the byte at <var>position</var> to <var>attribute value</var>.</dd>

    </dl>

    </li>

    <li>Advance <var>position</var> to the next byte and return to the previous
    step.</li>

  </ol>

  For the sake of interoperability, user agents should not use a pre-scan algorithm that returns
  different results than the one described above. (But, if you do, please at least let us know, so
  that we can improve this algorithm and benefit everyone...)

<h5 id="character-encodings"><dfn>Character encodings</dfn></h5>

  User agents must support the encodings defined in the WHATWG Encoding standard. User agents
  must not support other encodings.

  <p class="note">
  The above prohibits supporting, for example, CESU-8, UTF-7, BOCU-1, SCSU, EBCDIC,
  and UTF-32. This specification does not make any attempt to support prohibited encodings in its
  algorithms; support and use of prohibited encodings would thus lead to unexpected behavior. <a>\[CESU8]</a> [[!UTF7]] [[!BOCU1]] [[!SCSU]]
  </p>

<h5 id="changing-the-encoding-while-parsing"><dfn>Changing the encoding while parsing</dfn></h5>

  When the parser requires the user agent to <dfn>change the encoding</dfn>, it must run the
  following steps. This might happen if the <a>encoding sniffing algorithm</a> described above
  failed to find a character encoding, or if it found a character encoding that was not the actual
  encoding of the file.

  <ol>

    <li>If the encoding that is already being used to interpret the input stream is a <a>UTF-16
    encoding</a>, then set the <a>confidence</a> to
    <i>certain</i> and abort these steps. The new encoding is ignored; if it was anything but the
    same encoding, then it would be clearly incorrect.</li>

    <li>If the new encoding is a <a>UTF-16 encoding</a>, change it to UTF-8.</li>

    <li>If the new encoding is the x-user-defined encoding, change it to Windows-1252. [[!ENCODING]]</li>

    <li>If the new encoding is identical or equivalent to the encoding that is already being used
    to interpret the input stream, then set the <a>confidence</a> to <i>certain</i> and abort these steps.
    This happens when the encoding information found in the file matches what the <a>encoding
    sniffing algorithm</a> determined to be the encoding, and in the second pass through the
    parser if the first pass found that the encoding sniffing algorithm described in the earlier
    section failed to find the right encoding.</li>

    <li>If all the bytes up to the last byte converted by the current decoder have the same
    Unicode interpretations in both the current encoding and the new encoding, and if the user agent
    supports changing the converter on the fly, then the user agent may change to the new converter
    for the encoding on the fly. Set the <a>document's character encoding</a> and the encoding
    used to convert the input stream to the new encoding, set the <a>confidence</a> to <i>certain</i>, and abort these
    steps.</li>

    <li>Otherwise, <a>navigate</a> to the document again, with
    <a>replacement enabled</a>, and using the same <a>source browsing context</a>, but
    this time skip the <a>encoding sniffing algorithm</a> and instead just set the encoding to
    the new encoding and the <a>confidence</a> to
    <i>certain</i>. Whenever possible, this should be done without actually contacting the network
    layer (the bytes should be re-parsed from memory), even if, e.g., the document is marked as not
    being cacheable. If this is not possible and contacting the network layer would involve repeating
    a request that uses a method other than <code>GET</code>), then instead set the <a>confidence</a> to <i>certain</i> and ignore the new
    encoding. The resource will be misinterpreted. User agents may notify the user of the situation,
    to aid in application development.</li>

  </ol>

  <p class="note">
  This algorithm is only invoked when a new encoding is found declared on a
  <code>meta</code> element.
  </p>

<h5 id="preprocessing-the-input-stream"><dfn>Preprocessing the input stream</dfn></h5>

  The <dfn>input stream</dfn> consists of the characters pushed into it as the <a>input byte
  stream</a> is decoded or from the various APIs that directly manipulate the input stream.

  One leading U+FEFF BYTE ORDER MARK character must be ignored if any are present in the
  <a>input stream</a>.

  <p class="note">
  The requirement to strip a U+FEFF BYTE ORDER MARK character regardless of whether
  that character was used to determine the byte order is a <a>willful violation</a> of
  Unicode, motivated by a desire to increase the resilience of user agents in the face of na&iuml;ve
  transcoders.
  </p>

  Any occurrences of any characters in the ranges U+0001 to U+0008,    U+000E to U+001F,
  U+007F  to U+009F, U+FDD0 to U+FDEF, and
  characters U+000B, U+FFFE, U+FFFF, U+1FFFE, U+1FFFF, U+2FFFE, U+2FFFF, U+3FFFE, U+3FFFF, U+4FFFE,
  U+4FFFF, U+5FFFE, U+5FFFF, U+6FFFE, U+6FFFF, U+7FFFE, U+7FFFF, U+8FFFE, U+8FFFF, U+9FFFE, U+9FFFF,
  U+AFFFE, U+AFFFF, U+BFFFE, U+BFFFF, U+CFFFE, U+CFFFF, U+DFFFE, U+DFFFF, U+EFFFE, U+EFFFF, U+FFFFE,
  U+FFFFF, U+10FFFE, and U+10FFFF are <a>parse errors</a>. These are all
  <a>control characters</a> or permanently undefined Unicode characters (noncharacters).

  Any <a>character</a> that is a not a <a>Unicode character</a>, i.e. any isolated
  surrogate, is a <a>parse error</a>. (These can only find their way into the input stream via
  script APIs such as <code>document.write()</code>.)

  U+000D CARRIAGE RETURN (CR) characters and U+000A LINE FEED (LF) characters are treated
  specially. Any LF character that immediately follows a CR character must be ignored, and all CR
  characters must then be converted to LF characters. Thus, newlines in HTML DOMs are represented by
  LF characters, and there are never any CR characters in the input to the <a>tokenization</a>
  stage.

  The <dfn>next input character</dfn> is the first character in the <a>input stream</a>
  that has not yet been <dfn>consumed</dfn> or explicitly ignored by the requirements in
  this section. Initially, the <i>next input character</i> is the
  first character in the input. The <dfn>current input character</dfn> is the last character to have
  been <i>consumed</i>.

  The <dfn>insertion point</dfn> is the position (just before a character or just before the end
  of the input stream) where content inserted using <code>document.write()</code> is actually inserted. The insertion point is
  relative to the position of the character immediately after it, it is not an absolute offset into
  the input stream. Initially, the insertion point is undefined.

  The "EOF" character in the tables below is a conceptual character representing the end of the
  <a>input stream</a>. If the parser is a <a>script-created parser</a>, then the end of
  the <a>input stream</a> is reached when an <dfn>explicit "EOF" character</dfn> (inserted by
  the <code>document.close()</code> method) is consumed. Otherwise, the
  "EOF" character is not a real character in the stream, but rather the lack of any further
  characters.

  <p class="note">
  The handling of U+0000 NULL characters varies based on where the characters are
  found. In general, they are ignored except where doing so could plausibly introduce an attack
  vector. This handling is, by necessity, spread across both the tokenization stage and the tree
  construction stage.
  </p>

  </div>

  <div class="impl">

<h4 id="parse-state"><dfn>Parse state</dfn></h4>

<h5 id="the-insertion-mode"><dfn>The insertion mode</dfn></h5>

  The <dfn>insertion mode</dfn> is a state variable that controls the primary operation of the
  tree construction stage.

  Initially, the <a>insertion mode</a> is "<a>initial</a>". It can change to "<a>before
  html</a>", "<a>before head</a>", "<a>in head</a>", "<a>in head noscript</a>", "<a>after head</a>",
  "<a>in body</a>", "<a>text</a>", "<a>in table</a>", "<a>in table text</a>", "<a>in caption</a>", "<a>in column
  group</a>", "<a>in table body</a>", "<a>in row</a>", "<a>in
  cell</a>", "<a>in select</a>", "<a>in select in table</a>", "<a>in template</a>", "<a>after body</a>",
  "<a>in frameset</a>", "<a>after frameset</a>", "<a>after
  after body</a>", and "<a>after after
  frameset</a>" during the course of the parsing, as described in the <a>tree
  construction</a> stage. The insertion mode affects how tokens are processed and whether CDATA
  sections are supported.

  Several of these modes, namely "<a>in head</a>", "<a>in body</a>", "<a>in
  table</a>", and "<a>in select</a>", are special, in
  that the other modes defer to them at various times. When the algorithm below says that the user
  agent is to do something "<dfn>using the rules for</dfn> the <var>m</var> insertion
  mode", where <var>m</var> is one of these modes, the user agent must use the rules
  described under the <var>m</var> <a>insertion mode</a>'s section, but must leave
  the <a>insertion mode</a> unchanged unless the rules in <var>m</var> themselves
  switch the <a>insertion mode</a> to a new value.

  When the insertion mode is switched to "<a>text</a>" or
  "<a>in table text</a>", the <dfn>original insertion
  mode</dfn> is also set. This is the insertion mode to which the tree construction stage will
  return.

  Similarly, to parse nested <code>template</code> elements, a <dfn>stack of template insertion
  modes</dfn> is used. It is initially empty. The <dfn>current template insertion mode</dfn> is the
  insertion mode that was most recently added to the <a>stack of template insertion modes</a>.
  The algorithms in the sections below will <i>push</i> insertion modes onto this stack, meaning
  that the specified insertion mode is to be added to the stack, and <i>pop</i> insertion modes from
  the stack, which means that the most recently added insertion mode must be removed from the
  stack.

  <hr />

  When the steps below require the UA to <dfn>reset the insertion mode appropriately</dfn>, it
  means the UA must follow these steps:

  <ol>

    <li>Let <var>last</var> be false.</li>

    <li>Let <var>node</var> be the last node in the <a>stack of open
    elements</a>.</li>

    <li><i>Loop</i>: If <var>node</var> is the first node in the stack of open elements,
    then set <var>last</var> to true, and, if the parser was originally created as part of
    the <a>HTML fragment parsing algorithm</a> (<a>fragment case</a>), set <var>node</var> to the <var>context</var>
    element passed to that algorithm.</li>

    <li>

    If <var>node</var> is a <code>select</code> element, run these substeps:

    <ol>

      <li>If <var>last</var> is true, jump to the step below labeled
      <i>done</i>.</li>

      <li>Let <var>ancestor</var> be <var>node</var>.</li>

      <li><i>Loop</i>: If <var>ancestor</var> is the first node in the <a>stack of
      open elements</a>, jump to the step below labeled <i>done</i>.</li>

      <li>Let <var>ancestor</var> be the node before <var>ancestor</var> in the
      <a>stack of open elements</a>.</li>

      <li>If <var>ancestor</var> is a <code>template</code> node, jump to the step below
      labeled <i>done</i>.</li>

      <li>If <var>ancestor</var> is a <code>table</code> node, switch the <a>insertion
      mode</a> to "<a>in select in table</a>" and
      abort these steps.</li>

      <li>Jump back to the step labeled <i>loop</i>.</li>

      <li><i>Done</i>: Switch the <a>insertion mode</a> to "<a>in select</a>" and abort these steps.</li>

    </ol>

    </li>

    <li>If <var>node</var> is a <code>td</code> or <code>th</code> element and <var>last</var> is false, then switch the <a>insertion mode</a> to "<a>in cell</a>" and abort these steps.</li>

    <li>If <var>node</var> is a <code>tr</code> element, then switch the <a>insertion
    mode</a> to "<a>in row</a>" and abort these
    steps.</li>

    <li>If <var>node</var> is a <code>tbody</code>, <code>thead</code>, or
    <code>tfoot</code> element, then switch the <a>insertion mode</a> to "<a>in table body</a>" and abort these steps.</li>

    <li>If <var>node</var> is a <code>caption</code> element, then switch the
    <a>insertion mode</a> to "<a>in caption</a>" and
    abort these steps.</li>

    <li>If <var>node</var> is a <code>colgroup</code> element, then switch the
    <a>insertion mode</a> to "<a>in column
    group</a>" and abort these steps.</li>

    <li>If <var>node</var> is a <code>table</code> element, then switch the
    <a>insertion mode</a> to "<a>in table</a>" and abort
    these steps.</li>

    <li>If <var>node</var> is a <code>template</code> element, then switch the
    <a>insertion mode</a> to the <a>current template insertion mode</a> and abort these
    steps.</li>

    <li>If <var>node</var> is a <code>head</code> element and <var>last</var> is
    false, then switch the <a>insertion mode</a> to "<a>in
    head</a>" and abort these steps.</li>

    <li>If <var>node</var> is a <code>body</code> element, then switch the
    <a>insertion mode</a> to "<a>in body</a>" and abort
    these steps.</li>

    <li>If <var>node</var> is a <code>frameset</code> element, then switch the
    <a>insertion mode</a> to "<a>in frameset</a>" and
    abort these steps. (<a>fragment case</a>)</li>

    <li>

    If <var>node</var> is an <code>html</code> element, run these substeps:

    <ol>

      <li>If the <a><code>head</code> element pointer</a> is null, switch the
      <a>insertion mode</a> to "<a>before head</a>"
      and abort these steps. (<a>fragment case</a>)</li>

      <li>Otherwise, the <a><code>head</code> element pointer</a> is not null, switch the
      <a>insertion mode</a> to "<a>after head</a>" and
      abort these steps.</li>

    </ol>

    </li>

    <li>If <var>last</var> is true, then switch the <a>insertion mode</a> to "<a>in body</a>" and abort these steps. (<a>fragment
    case</a>)</li>

    <li>Let <var>node</var> now be the node before <var>node</var> in the
    <a>stack of open elements</a>.</li>

    <li>Return to the step labeled <i>loop</i>.</li>

  </ol>

<h5 id="the-stack-of-open-elements"><dfn>The stack of open elements</dfn></h5>

  Initially, the <dfn>stack of open elements</dfn> is empty. The stack grows downwards; the
  topmost node on the stack is the first one added to the stack, and the bottommost node of the
  stack is the most recently added node in the stack (notwithstanding when the stack is manipulated
  in a random access fashion as part of <a>the handling for misnested
  tags</a>).

  <p class="note">
  The "<a>before html</a>" <a>insertion
  mode</a> creates the <code>html</code> root element node, which is then added to the stack.
  </p>

  <p class="note">
  In the <a>fragment case</a>, the <a>stack of open elements</a> is
  initialized to contain an <code>html</code> element that is created as part of <a>that algorithm</a>. (The <a>fragment case</a> skips the
  "<a>before html</a>" <a>insertion mode</a>.)
  </p>

  The <code>html</code> node, however it is created, is the topmost node of the stack. It only
  gets popped off the stack when the parser <a>finishes</a>.

  The <dfn>current node</dfn> is the bottommost node in this <a>stack of open
  elements</a>.

  The <dfn>adjusted current node</dfn> is the <i>context</i>
  element if the parser was created by the <a>HTML fragment parsing algorithm</a> and the
  <a>stack of open elements</a> has only one element in it (<a>fragment case</a>);
  otherwise, the <a>adjusted current node</a> is the <a>current node</a>.

  Elements in the <a>stack of open elements</a> fall into the following categories:

  <dl>

    <dt><dfn>Special</dfn></dt>

    <dd>The following elements have varying levels of special parsing rules: HTML's
    <code>address</code>, <code>applet</code>, <code>area</code>, <code>article</code>,
    <code>aside</code>, <code>base</code>, <code>basefont</code>, <code>bgsound</code>,
    <code>blockquote</code>, <code>body</code>, <code>br</code>, <code>button</code>,
    <code>caption</code>, <code>center</code>, <code>col</code>, <code>colgroup</code>,
    <code>dd</code>, <code>details</code>, <code>dir</code>, <code>div</code>, <code>dl</code>,
    <code>dt</code>, <code>embed</code>, <code>fieldset</code>, <code>figcaption</code>,
    <code>figure</code>, <code>footer</code>, <code>form</code>, <code>frame</code>,
    <code>frameset</code>, <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>,
    <code>h5</code>, <code>h6</code>, <code>head</code>, <code>header</code>,
    <code>hr</code>, <code>html</code>, <code>iframe</code>,
    <code>img</code>, <code>input</code>, <code>isindex</code>, <code>li</code>, <code>link</code>,
    <code>listing</code>, <code>main</code>, <code>marquee</code>, <code>menu</code>,
    <code>menuitem</code>, <code>meta</code>, <code>nav</code>, <code>noembed</code>,
    <code>noframes</code>, <code>noscript</code>, <code>object</code>, <code>ol</code>,
    <code>p</code>, <code>param</code>, <code>plaintext</code>, <code>pre</code>,
    <code>script</code>, <code>section</code>, <code>select</code>, <code>source</code>,
    <code>style</code>, <code>summary</code>, <code>table</code>, <code>tbody</code>,
    <code>td</code>, <code>template</code>, <code>textarea</code>, <code>tfoot</code>,
    <code>th</code>, <code>thead</code>, <code>title</code>, <code>tr</code>, <code>track</code>,
    <code>ul</code>, <code>wbr</code>, and <code>xmp</code>; MathML's <code>mi</code>, <code>mo</code>, <code>mn</code>,
    <code>ms</code>, <code>mtext</code>, and <code>annotation-xml</code>; and SVG's <code>foreignObject</code>, <code>desc</code>, and <code>title</code>.</dd>

    <dt><dfn>Formatting</dfn></dt>
    <dd>The following HTML elements are those that end up in the <a>list of active formatting
    elements</a>: <code>a</code>, <code>b</code>, <code>big</code>, <code>code</code>,
    <code>em</code>, <code>font</code>, <code>i</code>, <code>nobr</code>, <code>s</code>,
    <code>small</code>, <code>strike</code>, <code>strong</code>, <code>tt</code>, and
    <code>u</code>.</dd>

    <dt><dfn>Ordinary</dfn></dt>
    <dd>All other elements found while parsing an HTML document.</dd>

  </dl>

  The <a>stack of open elements</a> is said to <dfn>have an element <var>target node</var> in a specific scope</dfn> consisting of a
  list of element types <var>list</var> when the following algorithm terminates in a match
  state:

  <ol>

    <li>Initialize <var>node</var> to be the <a>current node</a> (the bottommost
    node of the stack).</li>

    <li>If <var>node</var> is the target node, terminate in a match state.</li>

    <li>Otherwise, if <var>node</var> is one of the element types in <var>list</var>, terminate in a failure state.</li>

    <li>Otherwise, set <var>node</var> to the previous entry in the <a>stack of open
    elements</a> and return to step 2. (This will never fail, since the loop will always terminate
    in the previous step if the top of the stack &mdash; an <code>html</code> element &mdash; is
    reached.)</li>

  </ol>

  The <a>stack of open elements</a> is said to <dfn>have a
  particular element in scope</dfn> when it <a>has
  that element in the specific scope</a> consisting of the following element types:

  <ul class="brief">
    <li><code>applet</code> in the <a>HTML namespace</a></li>
    <li><code>caption</code> in the <a>HTML namespace</a></li>
    <li><code>html</code> in the <a>HTML namespace</a></li>
    <li><code>table</code> in the <a>HTML namespace</a></li>
    <li><code>td</code> in the <a>HTML namespace</a></li>
    <li><code>th</code> in the <a>HTML namespace</a></li>
    <li><code>marquee</code> in the <a>HTML namespace</a></li>
    <li><code>object</code> in the <a>HTML namespace</a></li>
    <li><code>template</code> in the <a>HTML namespace</a></li>
    <li><code>mi</code> in the <a>MathML namespace</a></li>
    <li><code>mo</code> in the <a>MathML namespace</a></li>
    <li><code>mn</code> in the <a>MathML namespace</a></li>
    <li><code>ms</code> in the <a>MathML namespace</a></li>
    <li><code>mtext</code> in the <a>MathML namespace</a></li>
    <li><code>annotation-xml</code> in the <a>MathML namespace</a></li>
    <li><code>foreignObject</code> in the <a>SVG namespace</a></li>
    <li><code>desc</code> in the <a>SVG namespace</a></li>
    <li><code>title</code> in the <a>SVG namespace</a></li>
  </ul>

  The <a>stack of open elements</a> is said to <dfn>have a particular element in list item scope</dfn> when it <a>has that element in the specific scope</a> consisting of the following
  element types:

  <ul class="brief">
    <li>All the element types listed above for the <i>has an element in scope</i> algorithm.</li>
    <li><code>ol</code> in the <a>HTML namespace</a></li>
    <li><code>ul</code> in the <a>HTML namespace</a></li>
  </ul>

  The <a>stack of open elements</a> is said to <dfn>have a particular element in button scope</dfn> when it <a>has that element in the specific scope</a> consisting of the following element
  types:

  <ul class="brief">
    <li>All the element types listed above for the <i>has an element in scope</i> algorithm.</li>
    <li><code>button</code> in the <a>HTML namespace</a></li>
  </ul>

  The <a>stack of open elements</a> is said to <dfn>have a particular element in table scope</dfn> when it <a>has that element in the specific scope</a> consisting of the following element
  types:

  <ul class="brief">
    <li><code>html</code> in the <a>HTML namespace</a></li>
    <li><code>table</code> in the <a>HTML namespace</a></li>
    <li><code>template</code> in the <a>HTML namespace</a></li>
  </ul>

  The <a>stack of open elements</a> is said to <dfn>have a particular element in select scope</dfn> when it <a>has that element in the specific scope</a> consisting of all element types
  <em>except</em> the following:

  <ul class="brief">

    <li><code>optgroup</code> in the <a>HTML namespace</a></li>
    <li><code>option</code> in the <a>HTML namespace</a></li>
  </ul>

  Nothing happens if at any time any of the elements in the <a>stack of open elements</a>
  are moved to a new location in, or removed from, the <code>Document</code> tree. In particular,
  the stack is not changed in this situation. This can cause, amongst other strange effects, content
  to be appended to nodes that are no longer in the DOM.

  <p class="note">
  In some cases (namely, when <a>closing misnested formatting
  elements</a>), the stack is manipulated in a random-access fashion.
  </p>

<h5 id="the-list-of-active-formatting-elements"><dfn>The list of active formatting elements</dfn></h5>

  Initially, the <dfn>list of active formatting elements</dfn> is empty. It is used to handle
  mis-nested <a>formatting element tags</a>.

  The list contains elements in the <a>formatting</a> category, and <a>markers</a>. The <dfn>markers</dfn> are inserted when entering <code>applet</code>
  elements, buttons, <code>object</code> elements, marquees, table cells, and table captions, and
  are used to prevent formatting from "leaking" <em>into</em> <code>applet</code> elements, buttons,
  <code>object</code> elements, marquees, and tables.

  In addition, each element in the <a>list of active formatting elements</a> is associated
  with the token for which it was created, so that further elements can be created for that token if
  necessary.

  When the steps below require the UA to <dfn>push onto the list of active formatting
  elements</dfn> an element <var>element</var>, the UA must perform the following
  steps:

  <ol>

    <li>If there are already three elements in the <a>list of active formatting elements</a>
    after the last <a>marker</a>, if any, or anywhere in the
    list if there are no <a>markers</a>, that have the same tag
    name, namespace, and attributes as <var>element</var>, then remove the earliest such
    element from the <a>list of active formatting elements</a>. For these purposes, the
    attributes must be compared as they were when the elements were created by the parser; two
    elements have the same attributes if all their parsed attributes can be paired such that the two
    attributes in each pair have identical names, namespaces, and values (the order of the attributes
    does not matter).

    <p class="note">
  This is the Noah's Ark clause. But with three per family instead of two.
  </p></li>

    <li>Add <var>element</var> to the <a>list of active formatting
    elements</a>.</li>

  </ol>

  When the steps below require the UA to <dfn>reconstruct the active formatting elements</dfn>,
  the UA must perform the following steps:

  <ol>

    <li>If there are no entries in the <a>list of active formatting elements</a>, then there
    is nothing to reconstruct; stop this algorithm.</li>

    <li>If the last (most recently added) entry in the <a>list of active formatting
    elements</a> is a <a>marker</a>, or if it is an element
    that is in the <a>stack of open elements</a>, then there is nothing to reconstruct; stop
    this algorithm.</li>

    <li>Let <var>entry</var> be the last (most recently added) element in the <a>list
    of active formatting elements</a>.</li>

    <li><i>Rewind</i>: If there are no entries before <var>entry</var> in the <a>list
    of active formatting elements</a>, then jump to the step labeled <i>create</i>.</li>

    <li>Let <var>entry</var> be the entry one earlier than <var>entry</var> in
    the <a>list of active formatting elements</a>.</li>

    <li>If <var>entry</var> is neither a <a>marker</a> nor an element that is also in the <a>stack of
    open elements</a>, go to the step labeled <i>rewind</i>.</li>

    <li><i>Advance</i>: Let <var>entry</var> be the element one later than <var>entry</var> in the <a>list of active formatting elements</a>.</li>

    <li><i>Create</i>: <a>Insert an HTML element</a> for the token for which the element
    <var>entry</var> was created, to obtain <var>new element</var>.</li>

    <li>Replace the entry for <var>entry</var> in the list with an entry for <var>new element</var>.</li>

    <li>If the entry for <var>new element</var> in the <a>list of active formatting
    elements</a> is not the last entry in the list, return to the step labeled
    <i>advance</i>.</li>

  </ol>

  This has the effect of reopening all the formatting elements that were opened in the current
  body, cell, or caption (whichever is youngest) that haven't been explicitly closed.

  <p class="note">
  The way this specification is written, the <a>list of active formatting
  elements</a> always consists of elements in chronological order with the least recently added
  element first and the most recently added element last (except for while steps 8 to 10 of the
  above algorithm are being executed, of course).
  </p>

  When the steps below require the UA to <dfn>clear the list of active formatting elements up to
  the last marker</dfn>, the UA must perform the following steps:

  <ol>

    <li>Let <var>entry</var> be the last (most recently added) entry in the <a>list of
    active formatting elements</a>.</li>

    <li>Remove <var>entry</var> from the <a>list of active formatting
    elements</a>.</li>

    <li>If <var>entry</var> was a <a>marker</a>,
    then stop the algorithm at this point. The list has been cleared up to the last <a>marker</a>.</li>

    <li>Go to step 1.</li>

  </ol>

<h5 id="the-element-pointers"><dfn>The element pointers</dfn></h5>

  Initially, the <dfn><code>head</code> element pointer</dfn> and the <dfn><code>form</code> element pointer</dfn> are both null.

  Once a <code>head</code> element has been parsed (whether implicitly or explicitly) the
  <a><code>head</code> element pointer</a> gets set to point to this node.

  The <a><code>form</code> element pointer</a> points to the last
  <code>form</code> element that was opened and whose end tag has not yet been seen. It is used to
  make form controls associate with forms in the face of dramatically bad markup, for historical
  reasons. It is ignored inside <code>template</code> elements.

<h5 id="other-parsing-state-flags"><dfn>Other parsing state flags</dfn></h5>

  The <dfn>scripting flag</dfn> is set to "enabled" if <a>scripting
  was enabled</a> for the <code>Document</code> with which the parser is associated when the
  parser was created, and "disabled" otherwise.

  <p class="note">
  The <a>scripting flag</a> can be enabled even when the parser was originally
  created for the <a>HTML fragment parsing algorithm</a>, even though <code>script</code>
  elements don't execute in that case.
  </p>

  The <dfn>frameset-ok flag</dfn> is set to "ok" when the parser is created. It is set to "not
  ok" after certain tokens are seen.

  </div>

  <div class="impl">

<h4 id="tokenization"><dfn><dfn>Tokenization</dfn></dfn></h4>

  Implementations must act as if they used the following state machine to tokenize HTML. The
  state machine must start in the <a>data state</a>. Most states consume a single character,
  which may have various side-effects, and either switches the state machine to a new state to
  <i>reconsume</i> the same character, or switches it to a new state to consume the next character,
  or stays in the same state to consume the next character. Some states have more complicated
  behavior and can consume several characters before switching to another state. In some cases, the
  tokenizer state is also changed by the tree construction stage.

  The exact behavior of certain states depends on the <a>insertion mode</a> and the
  <a>stack of open elements</a>. Certain states also use a <dfn><var>temporary buffer</var></dfn> to track progress.

  The output of the tokenization step is a series of zero or more of the following tokens:
  DOCTYPE, start tag, end tag, comment, character, end-of-file. DOCTYPE tokens have a name, a public
  identifier, a system identifier, and a <dfn><i>force-quirks flag</i></dfn>. When a DOCTYPE token
  is created, its name, public identifier, and system identifier must be marked as missing (which is
  a distinct state from the empty string), and the <i>force-quirks flag</i> must be set to
  <i>off</i> (its other state is <i>on</i>). Start and end tag tokens have a tag name, a <dfn>self-closing flag</dfn>, and a list of attributes, each of which has a
  name and a value. When a start or end tag token is created, its <i>self-closing flag</i> must be unset (its other state is that it be set), and its attributes
  list must be empty. Comment and character tokens have data.

  When a token is emitted, it must immediately be handled by the <a>tree construction</a>
  stage. The tree construction stage can affect the state of the tokenization stage, and can insert
  additional characters into the stream. (For example, the <code>script</code> element can result in
  scripts executing and using the <a>dynamic markup insertion</a> APIs to insert characters
  into the stream being tokenized.)

  <p class="note">
  Creating a token and emitting it are distinct actions. It is possible for a token
  to be created but implicitly abandoned (never emitted), e.g. if the file ends unexpectedly while
  processing the characters that are being parsed into a start tag token.
  </p>

  When a start tag token is emitted with its <i>self-closing flag</i> set, if the flag is not
  <dfn>acknowledged</dfn> when it is processed by the tree
  construction stage, that is a <a>parse error</a>.

  When an end tag token is emitted with attributes, that is a <a>parse error</a>.

  When an end tag token is emitted with its <i>self-closing flag</i> set, that is a <a>parse
  error</a>.

  An <dfn>appropriate end tag token</dfn> is an end tag token whose tag name matches the tag name
  of the last start tag to have been emitted from this tokenizer, if any. If no start tag has been
  emitted from this tokenizer, then no end tag token is appropriate.

  Before each step of the tokenizer, the user agent must first check the <a>parser pause
  flag</a>. If it is true, then the tokenizer must abort the processing of any nested invocations
  of the tokenizer, yielding control back to the caller.

  The tokenizer state machine consists of the states defined in the following subsections.

<h5 id="data-state"><dfn><dfn>Data state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0026 AMPERSAND (&amp;)</dt>
    <dd>Switch to the <a>character reference in data state</a>.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>tag open state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit the <a>current input character</a> as a character
    token.</dd>

    <dt>EOF</dt>
    <dd>Emit an end-of-file token.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="character-reference-in-data-state"><dfn><dfn>Character reference in data state</dfn></dfn></h5>

  Switch to the <a>data state</a>.

  Attempt to <a>consume a character reference</a>, with no <a>additional allowed
  character</a>.

  If nothing is returned, emit a U+0026 AMPERSAND character (&amp;) token.

  Otherwise, emit the character tokens that were returned.

<h5 id="rcdata-state"><dfn><dfn>RCDATA state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0026 AMPERSAND (&amp;)</dt>
    <dd>Switch to the <a>character reference in RCDATA state</a>.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>RCDATA less-than sign state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd>Emit an end-of-file token.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="character-reference-in-rcdata-state"><dfn><dfn>Character reference in RCDATA state</dfn></dfn></h5>

  Switch to the <a>RCDATA state</a>.

  Attempt to <a>consume a character reference</a>, with no <a>additional allowed
  character</a>.

  If nothing is returned, emit a U+0026 AMPERSAND character (&amp;) token.

  Otherwise, emit the character tokens that were returned.

<h5 id="rawtext-state"><dfn><dfn>RAWTEXT state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>RAWTEXT less-than sign state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd>Emit an end-of-file token.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-state"><dfn><dfn>Script data state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data less-than sign state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd>Emit an end-of-file token.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="plaintext-state"><dfn><dfn>PLAINTEXT state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd>Emit an end-of-file token.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="tag-open-state"><dfn><dfn>Tag open state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0021 EXCLAMATION MARK (!)</dt>
    <dd>Switch to the <a>markup declaration open state</a>.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Switch to the <a>end tag open state</a>.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new start tag token, set its tag name to the lowercase version of the <a>current
    input character</a> (add 0x0020 to the character's code point), then switch to the <a>tag
    name state</a>. (Don't emit the token yet; further details will be filled in before it is
    emitted.)</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Create a new start tag token, set its tag name to the <a>current input character</a>,
    then switch to the <a>tag name state</a>. (Don't emit the token yet; further details will
    be filled in before it is emitted.)</dd>

    <dt>U+003F QUESTION MARK (?)</dt>
    <dd><a>Parse error</a>. Switch to the <a>bogus comment state</a>.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit a U+003C LESS-THAN SIGN
    character token. Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="end-tag-open-state"><dfn><dfn>End tag open state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new end tag token, set its tag name to the lowercase version of the <a>current
    input character</a> (add 0x0020 to the character's code point), then switch to the <a>tag
    name state</a>. (Don't emit the token yet; further details will be filled in before it is
    emitted.)</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Create a new end tag token, set its tag name to the <a>current input character</a>,
    then switch to the <a>tag name state</a>. (Don't emit the token yet; further details will
    be filled in before it is emitted.)</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit a U+003C LESS-THAN SIGN
    character token and a U+002F SOLIDUS character token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Switch to the <a>bogus comment state</a>.</dd>

  </dl>

<h5 id="tag-name-state"><dfn><dfn>Tag name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>before attribute name state</a>.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Switch to the <a>self-closing start tag state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current tag token's tag name.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current tag
    token's tag name.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current tag token's tag name.</dd>

  </dl>

<h5 id="rcdata-less-than-sign-state"><dfn><dfn>RCDATA less-than sign state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
    the <a>RCDATA end tag open state</a>.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>RCDATA state</a>. Emit a U+003C LESS-THAN SIGN character token.
    Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="rcdata-end-tag-open-state"><dfn><dfn>RCDATA end tag open state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the lowercase version of the
    <a>current input character</a> (add 0x0020 to the character's code point). Append the
    <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>RCDATA end tag name state</a>. (Don't emit the
    token yet; further details will be filled in before it is emitted.)</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the <a>current input character</a>.
    Append the <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>RCDATA end tag name state</a>. (Don't emit the
    token yet; further details will be filled in before it is emitted.)</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>RCDATA state</a>. Emit a U+003C LESS-THAN SIGN character token and a
    U+002F SOLIDUS character token. Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="rcdata-end-tag-name-state"><dfn><dfn>RCDATA end tag name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>before attribute name state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>self-closing start tag state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>data state</a> and emit the current tag token. Otherwise, treat it as per the "anything
    else" entry below.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current tag token's tag name. Append the <a>current input
    character</a> to the <var>temporary buffer</var>.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Append the <a>current input character</a> to the current tag token's tag name. Append
    the <a>current input character</a> to the <var>temporary
    buffer</var>.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>RCDATA state</a>. Emit a U+003C LESS-THAN SIGN character token, a
    U+002F SOLIDUS character token, and a character token for each of the characters in the <var>temporary buffer</var> (in the order they were added to the buffer).
    Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="rawtext-less-than-sign-state"><dfn><dfn>RAWTEXT less-than sign state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
    the <a>RAWTEXT end tag open state</a>.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>RAWTEXT state</a>. Emit a U+003C LESS-THAN SIGN character token.
    Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="rawtext-end-tag-open-state"><dfn><dfn>RAWTEXT end tag open state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the lowercase version of the
    <a>current input character</a> (add 0x0020 to the character's code point). Append the
    <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>RAWTEXT end tag name state</a>. (Don't emit the
    token yet; further details will be filled in before it is emitted.)</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the <a>current input character</a>.
    Append the <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>RAWTEXT end tag name state</a>. (Don't emit the
    token yet; further details will be filled in before it is emitted.)</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>RAWTEXT state</a>. Emit a U+003C LESS-THAN SIGN character token and a
    U+002F SOLIDUS character token. Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="rawtext-end-tag-name-state"><dfn><dfn>RAWTEXT end tag name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>before attribute name state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>self-closing start tag state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>data state</a> and emit the current tag token. Otherwise, treat it as per the "anything
    else" entry below.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current tag token's tag name. Append the <a>current input
    character</a> to the <var>temporary buffer</var>.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Append the <a>current input character</a> to the current tag token's tag name. Append
    the <a>current input character</a> to the <var>temporary
    buffer</var>.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>RAWTEXT state</a>. Emit a U+003C LESS-THAN SIGN character token, a
    U+002F SOLIDUS character token, and a character token for each of the characters in the <var>temporary buffer</var> (in the order they were added to the buffer).
    Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="script-data-less-than-sign-state"><dfn><dfn>Script data less-than sign state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
    the <a>script data end tag open state</a>.</dd>

    <dt>U+0021 EXCLAMATION MARK (!)</dt>
    <dd>Switch to the <a>script data escape start state</a>. Emit a U+003C LESS-THAN SIGN
    character token and a U+0021 EXCLAMATION MARK character token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data state</a>. Emit a U+003C LESS-THAN SIGN character token.
    Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="script-data-end-tag-open-state"><dfn><dfn>Script data end tag open state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the lowercase version of the
    <a>current input character</a> (add 0x0020 to the character's code point). Append the
    <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>script data end tag name state</a>. (Don't emit the
    token yet; further details will be filled in before it is emitted.)</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the <a>current input character</a>.
    Append the <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>script data end tag name state</a>. (Don't emit the
    token yet; further details will be filled in before it is emitted.)</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data state</a>. Emit a U+003C LESS-THAN SIGN character token
    and a U+002F SOLIDUS character token. Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="script-data-end-tag-name-state"><dfn><dfn>Script data end tag name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>before attribute name state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>self-closing start tag state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>data state</a> and emit the current tag token. Otherwise, treat it as per the "anything
    else" entry below.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current tag token's tag name. Append the <a>current input
    character</a> to the <var>temporary buffer</var>.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Append the <a>current input character</a> to the current tag token's tag name. Append
    the <a>current input character</a> to the <var>temporary
    buffer</var>.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data state</a>. Emit a U+003C LESS-THAN SIGN character token, a
    U+002F SOLIDUS character token, and a character token for each of the characters in the <var>temporary buffer</var> (in the order they were added to the buffer).
    Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="script-data-escape-start-state"><dfn><dfn>Script data escape start state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>script data escape start dash state</a>. Emit a U+002D HYPHEN-MINUS
    character token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data state</a>. Reconsume the <a>current input
    character</a>.</dd>

  </dl>

<h5 id="script-data-escape-start-dash-state"><dfn><dfn>Script data escape start dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>script data escaped dash dash state</a>. Emit a U+002D HYPHEN-MINUS
    character token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data state</a>. Reconsume the <a>current input
    character</a>.</dd>

  </dl>

<h5 id="script-data-escaped-state"><dfn><dfn>Script data escaped state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>script data escaped dash state</a>. Emit a U+002D HYPHEN-MINUS
    character token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data escaped less-than sign state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd>Switch to the <a>data state</a>. <a>Parse error</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-escaped-dash-state"><dfn><dfn>Script data escaped dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>script data escaped dash dash state</a>. Emit a U+002D HYPHEN-MINUS
    character token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data escaped less-than sign state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Switch to the <a>script data escaped state</a>. Emit a U+FFFD
    REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data escaped state</a>. Emit the <a>current input
    character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-escaped-dash-dash-state"><dfn><dfn>Script data escaped dash dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Emit a U+002D HYPHEN-MINUS character token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data escaped less-than sign state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>script data state</a>. Emit a U+003E GREATER-THAN SIGN character
    token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Switch to the <a>script data escaped state</a>. Emit a U+FFFD
    REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data escaped state</a>. Emit the <a>current input
    character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-escaped-less-than-sign-state"><dfn><dfn>Script data escaped less-than sign state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
    the <a>script data escaped end tag open state</a>.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Append the
    lowercase version of the <a>current input character</a> (add 0x0020 to the character's code
    point) to the <var>temporary buffer</var>. Switch to the <a>script
    data double escape start state</a>. Emit a U+003C LESS-THAN SIGN character token and the
    <a>current input character</a> as a character token.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Append the
    <a>current input character</a> to the <var>temporary
    buffer</var>. Switch to the <a>script data double escape start state</a>. Emit a U+003C
    LESS-THAN SIGN character token and the <a>current input character</a> as a character
    token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data escaped state</a>. Emit a U+003C LESS-THAN SIGN character
    token. Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="script-data-escaped-end-tag-open-state"><dfn><dfn>Script data escaped end tag open state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the lowercase version of the
    <a>current input character</a> (add 0x0020 to the character's code point). Append the
    <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>script data escaped end tag name state</a>. (Don't
    emit the token yet; further details will be filled in before it is emitted.)</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Create a new end tag token, and set its tag name to the <a>current input character</a>.
    Append the <a>current input character</a> to the <var>temporary
    buffer</var>. Finally, switch to the <a>script data escaped end tag name state</a>. (Don't
    emit the token yet; further details will be filled in before it is emitted.)</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data escaped state</a>. Emit a U+003C LESS-THAN SIGN character
    token and a U+002F SOLIDUS character token. Reconsume the <a>current input
    character</a>.</dd>

  </dl>

<h5 id="script-data-escaped-end-tag-name-state"><dfn><dfn>Script data escaped end tag name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>before attribute name state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>self-closing start tag state</a>. Otherwise, treat it as per the "anything else" entry
    below.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>If the current end tag token is an <a>appropriate end tag token</a>, then switch to the
    <a>data state</a> and emit the current tag token. Otherwise, treat it as per the "anything
    else" entry below.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current tag token's tag name. Append the <a>current input
    character</a> to the <var>temporary buffer</var>.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Append the <a>current input character</a> to the current tag token's tag name. Append
    the <a>current input character</a> to the <var>temporary
    buffer</var>.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data escaped state</a>. Emit a U+003C LESS-THAN SIGN character
    token, a U+002F SOLIDUS character token, and a character token for each of the characters in the
    <var>temporary buffer</var> (in the order they were added to the
    buffer). Reconsume the <a>current input character</a>.</dd>

  </dl>

<h5 id="script-data-double-escape-start-state"><dfn><dfn>Script data double escape start state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dt>U+002F SOLIDUS (/)</dt>
    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>If the <var>temporary buffer</var> is the string "<code>script</code>", then switch to the <a>script data double escaped state</a>.
    Otherwise, switch to the <a>script data escaped state</a>. Emit the <a>current input
    character</a> as a character token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the <var>temporary buffer</var>. Emit the
    <a>current input character</a> as a character token.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Append the <a>current input character</a> to the <var>temporary buffer</var>. Emit the <a>current input character</a> as a character
    token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data escaped state</a>. Reconsume the <a>current input
    character</a>.</dd>

  </dl>

<h5 id="script-data-double-escaped-state"><dfn><dfn>Script data double escaped state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>script data double escaped dash state</a>. Emit a U+002D HYPHEN-MINUS
    character token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data double escaped less-than sign state</a>. Emit a U+003C
    LESS-THAN SIGN character token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Emit a U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Emit the <a>current input character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-double-escaped-dash-state"><dfn><dfn>Script data double escaped dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>script data double escaped dash dash state</a>. Emit a U+002D
    HYPHEN-MINUS character token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data double escaped less-than sign state</a>. Emit a U+003C
    LESS-THAN SIGN character token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Switch to the <a>script data double escaped state</a>. Emit a
    U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data double escaped state</a>. Emit the <a>current input
    character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-double-escaped-dash-dash-state"><dfn><dfn>Script data double escaped dash dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Emit a U+002D HYPHEN-MINUS character token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd>Switch to the <a>script data double escaped less-than sign state</a>. Emit a U+003C
    LESS-THAN SIGN character token.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>script data state</a>. Emit a U+003E GREATER-THAN SIGN character
    token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Switch to the <a>script data double escaped state</a>. Emit a
    U+FFFD REPLACEMENT CHARACTER character token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data double escaped state</a>. Emit the <a>current input
    character</a> as a character token.</dd>

  </dl>

<h5 id="script-data-double-escaped-less-than-sign-state"><dfn><dfn>Script data double escaped less-than sign state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Set the <var>temporary buffer</var> to the empty string. Switch to
    the <a>script data double escape end state</a>. Emit a U+002F SOLIDUS character token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data double escaped state</a>. Reconsume the <a>current
    input character</a>.</dd>

  </dl>

<h5 id="script-data-double-escape-end-state"><dfn><dfn>Script data double escape end state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dt>U+002F SOLIDUS (/)</dt>
    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>If the <var>temporary buffer</var> is the string "<code>script</code>", then switch to the <a>script data escaped state</a>. Otherwise,
    switch to the <a>script data double escaped state</a>. Emit the <a>current input
    character</a> as a character token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the <var>temporary buffer</var>. Emit the
    <a>current input character</a> as a character token.</dd>

    <dt><a>Lowercase ASCII letter</a></dt>
    <dd>Append the <a>current input character</a> to the <var>temporary buffer</var>. Emit the <a>current input character</a> as a character
    token.</dd>

    <dt>Anything else</dt>
    <dd>Switch to the <a>script data double escaped state</a>. Reconsume the <a>current
    input character</a>.</dd>

  </dl>

<h5 id="before-attribute-name-state"><dfn><dfn>Before attribute name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Switch to the <a>self-closing start tag state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Start a new attribute in the current tag token. Set that attribute's name to the lowercase
    version of the <a>current input character</a> (add 0x0020 to the character's code point),
    and its value to the empty string. Switch to the <a>attribute name state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Start a new attribute in the current tag token. Set that
    attribute's name to a U+FFFD REPLACEMENT CHARACTER character, and its value to the empty string.
    Switch to the <a>attribute name state</a>.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dt>U+0027 APOSTROPHE (')</dt>
    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dt>U+003D EQUALS SIGN (=)</dt>
    <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Start a new attribute in the current tag token. Set that attribute's name to the
    <a>current input character</a>, and its value to the empty string. Switch to the
    <a>attribute name state</a>.</dd>

  </dl>

<h5 id="attribute-name-state"><dfn><dfn>Attribute name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>after attribute name state</a>.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Switch to the <a>self-closing start tag state</a>.</dd>

    <dt>U+003D EQUALS SIGN (=)</dt>
    <dd>Switch to the <a>before attribute value state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current attribute's name.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    attribute's name.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dt>U+0027 APOSTROPHE (')</dt>
    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current attribute's name.</dd>

  </dl>

  When the user agent leaves the attribute name state (and before emitting the tag token, if
  appropriate), the complete attribute's name must be compared to the other attributes on the same
  token; if there is already an attribute on the token with the exact same name, then this is a
  <a>parse error</a> and the new attribute must be removed from the token.

  <p class="note">
  If an attribute is so removed from a token, it, and the value that gets associated
  with it, if any, are never subsequently used by the parser, and are therefore effectively
  discarded. Removing the attribute in this way does not change its status as the "current
  attribute" for the purposes of the tokenizer, however.
  </p>

<h5 id="after-attribute-name-state"><dfn><dfn>After attribute name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Switch to the <a>self-closing start tag state</a>.</dd>

    <dt>U+003D EQUALS SIGN (=)</dt>
    <dd>Switch to the <a>before attribute value state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Start a new attribute in the current tag token. Set that attribute's name to the lowercase
    version of the <a>current input character</a> (add 0x0020 to the character's code point),
    and its value to the empty string. Switch to the <a>attribute name state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Start a new attribute in the current tag token. Set that
    attribute's name to a U+FFFD REPLACEMENT CHARACTER character, and its value to the empty string.
    Switch to the <a>attribute name state</a>.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dt>U+0027 APOSTROPHE (')</dt>
    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Start a new attribute in the current tag token. Set that attribute's name to the
    <a>current input character</a>, and its value to the empty string. Switch to the
    <a>attribute name state</a>.</dd>

  </dl>

<h5 id="before-attribute-value-state"><dfn><dfn>Before attribute value state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Switch to the <a>attribute value (double-quoted) state</a>.</dd>

    <dt>U+0026 AMPERSAND (&amp;)</dt>
    <dd>Switch to the <a>attribute value (unquoted) state</a>. Reconsume the <a>current
    input character</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Switch to the <a>attribute value (single-quoted) state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    attribute's value. Switch to the <a>attribute value (unquoted) state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the current tag
    token.</dd>

    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dt>U+003D EQUALS SIGN (=)</dt>
    <dt>U+0060 GRAVE ACCENT (`)</dt>
    <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current attribute's value. Switch to
    the <a>attribute value (unquoted) state</a>.</dd>

  </dl>

<h5 id="attribute-value-(double-quoted)-state"><dfn><dfn>Attribute value (double-quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Switch to the <a>after attribute value (quoted) state</a>.</dd>

    <dt>U+0026 AMPERSAND (&amp;)</dt>
    <dd>Switch to the <a>character reference in attribute value state</a>, with the
    <a>additional allowed character</a> being U+0022 QUOTATION MARK (&quot;).</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    attribute's value.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current attribute's value.</dd>

  </dl>

<h5 id="attribute-value-(single-quoted)-state"><dfn><dfn>Attribute value (single-quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Switch to the <a>after attribute value (quoted) state</a>.</dd>

    <dt>U+0026 AMPERSAND (&amp;)</dt>
    <dd>Switch to the <a>character reference in attribute value state</a>, with the
    <a>additional allowed character</a> being U+0027 APOSTROPHE (').</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    attribute's value.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current attribute's value.</dd>

  </dl>

<h5 id="attribute-value-(unquoted)-state"><dfn><dfn>Attribute value (unquoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>before attribute name state</a>.</dd>

    <dt>U+0026 AMPERSAND (&amp;)</dt>
    <dd>Switch to the <a>character reference in attribute value state</a>, with the
    <a>additional allowed character</a> being U+003E GREATER-THAN SIGN (&gt;).</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    attribute's value.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dt>U+0027 APOSTROPHE (')</dt>
    <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
    <dt>U+003D EQUALS SIGN (=)</dt>
    <dt>U+0060 GRAVE ACCENT (`)</dt>
    <dd><a>Parse error</a>. Treat it as per the "anything else" entry below.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current attribute's value.</dd>

  </dl>

<h5 id="character-reference-in-attribute-value-state"><dfn><dfn>Character reference in attribute value state</dfn></dfn></h5>

  Attempt to <a>consume a character reference</a>.

  If nothing is returned, append a U+0026 AMPERSAND character (&amp;) to the current attribute's
  value.

  Otherwise, append the returned character tokens to the current attribute's value.

  Finally, switch back to the attribute value state that switched into this state.

<h5 id="after-attribute-value-(quoted)-state"><dfn><dfn>After attribute value (quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>before attribute name state</a>.</dd>

    <dt>U+002F SOLIDUS (/)</dt>
    <dd>Switch to the <a>self-closing start tag state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current tag token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Switch to the <a>before attribute name state</a>. Reconsume
    the character.</dd>

  </dl>

<h5 id="self-closing-start-tag-state"><dfn><dfn>Self-closing start tag state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Set the <i>self-closing flag</i> of the current tag token. Switch to the <a>data
    state</a>. Emit the current tag token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Switch to the <a>before attribute name state</a>. Reconsume
    the character.</dd>

  </dl>

<h5 id="bogus-comment-state"><dfn><dfn>Bogus comment state</dfn></dfn></h5>

  Consume every character up to and including the first U+003E GREATER-THAN SIGN character (&gt;)
  or the end of the file (EOF), whichever comes first.
  If more than one character was consumed, then emit a comment token whose data is the
  concatenation of all the characters starting from and including the character that caused the
  state machine to switch into the bogus comment state, up to and including the character
  immediately before the last consumed character (i.e. up to the character just before the U+003E or
  EOF character), but with any U+0000 NULL characters replaced by U+FFFD REPLACEMENT CHARACTER
  characters. (If the comment was started by the end of the file (EOF), the token is empty.
  Similarly, the token is empty if it was generated by the string "<code>&lt;!></code>".)

  Switch to the <a>data state</a>.

  If the end of the file was reached, reconsume the EOF character.

<h5 id="markup-declaration-open-state"><dfn><dfn>Markup declaration open state</dfn></dfn></h5>

  If the next two characters are both U+002D HYPHEN-MINUS characters (-), consume those two
  characters, create a comment token whose data is the empty string, and switch to the <a>comment
  start state</a>.

  Otherwise, if the next seven characters are an <a>ASCII case-insensitive</a> match for
  the word "DOCTYPE", then consume those characters and switch to the <a>DOCTYPE
  state</a>.

  Otherwise, if there is an <a>adjusted current node</a> and it is not an element in the
  <a>HTML namespace</a> and the next seven characters are a <a>case-sensitive</a> match
  for the string "[CDATA[" (the five uppercase letters "CDATA" with a U+005B LEFT SQUARE BRACKET
  character before and after), then consume those characters and switch to the <a>CDATA section
  state</a>.

  Otherwise, this is a <a>parse error</a>. Switch to the <a>bogus comment state</a>.
  The next character that is consumed, if any, is the first character that will be in the
  comment.

<h5 id="comment-start-state"><dfn><dfn>Comment start state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>comment start dash state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the comment
    token's data. Switch to the <a>comment state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
    Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the comment token's data. Switch to the
    <a>comment state</a>.</dd>

  </dl>

<h5 id="comment-start-dash-state"><dfn><dfn>Comment start dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>comment end state</a></dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+002D HYPHEN-MINUS character (-) and a U+FFFD REPLACEMENT
    CHARACTER character to the comment token's data. Switch to the <a>comment state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
    Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append a U+002D HYPHEN-MINUS character (-) and the <a>current input character</a> to
    the comment token's data. Switch to the <a>comment state</a>.</dd>

  </dl>

<h5 id="comment-state"><dfn><dfn>Comment state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>comment end dash state</a></dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the comment
    token's data.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
    Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the comment token's data.</dd>

  </dl>

<h5 id="comment-end-dash-state"><dfn><dfn>Comment end dash state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Switch to the <a>comment end state</a></dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+002D HYPHEN-MINUS character (-) and a U+FFFD REPLACEMENT
    CHARACTER character to the comment token's data. Switch to the <a>comment state</a>.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
    Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append a U+002D HYPHEN-MINUS character (-) and the <a>current input character</a> to
    the comment token's data. Switch to the <a>comment state</a>.</dd>

  </dl>

<h5 id="comment-end-state"><dfn><dfn>Comment end state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the comment token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append two U+002D HYPHEN-MINUS characters (-) and a U+FFFD
    REPLACEMENT CHARACTER character to the comment token's data. Switch to the <a>comment
    state</a>.</dd>

    <dt>U+0021 EXCLAMATION MARK (!)</dt>
    <dd><a>Parse error</a>. Switch to the <a>comment end bang state</a>.</dd>

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd><a>Parse error</a>. Append a U+002D HYPHEN-MINUS character (-) to the comment token's
    data.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
    Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Append two U+002D HYPHEN-MINUS characters (-) and the <a>current
    input character</a> to the comment token's data. Switch to the <a>comment
    state</a>.</dd>

  </dl>

<h5 id="comment-end-bang-state"><dfn><dfn>Comment end bang state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+002D HYPHEN-MINUS (-)</dt>
    <dd>Append two U+002D HYPHEN-MINUS characters (-) and a U+0021 EXCLAMATION MARK character (!) to
    the comment token's data. Switch to the <a>comment end dash state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the comment token.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append two U+002D HYPHEN-MINUS characters (-), a U+0021 EXCLAMATION
    MARK character (!), and a U+FFFD REPLACEMENT CHARACTER character to the comment token's data.
    Switch to the <a>comment state</a>.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Emit the comment token.
    Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append two U+002D HYPHEN-MINUS characters (-), a U+0021 EXCLAMATION MARK character (!), and
    the <a>current input character</a> to the comment token's data. Switch to the <a>comment
    state</a>.</dd>

  </dl>

<h5 id="doctype-state"><dfn><dfn>DOCTYPE state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>before DOCTYPE name state</a>.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Create a new DOCTYPE token.
    Set its <i>force-quirks flag</i> to <i>on</i>. Emit the token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Switch to the <a>before DOCTYPE name state</a>. Reconsume the
    character.</dd>

  </dl>

<h5 id="before-doctype-name-state"><dfn><dfn>Before DOCTYPE name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Create a new DOCTYPE token. Set the token's name to the lowercase version of the
    <a>current input character</a> (add 0x0020 to the character's code point). Switch to the
    <a>DOCTYPE name state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Create a new DOCTYPE token. Set the token's name to a U+FFFD
    REPLACEMENT CHARACTER character. Switch to the <a>DOCTYPE name state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Create a new DOCTYPE token. Set its <i>force-quirks flag</i> to
    <i>on</i>. Switch to the <a>data state</a>. Emit the token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Create a new DOCTYPE token.
    Set its <i>force-quirks flag</i> to <i>on</i>. Emit the token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Create a new DOCTYPE token. Set the token's name to the <a>current input character</a>.
    Switch to the <a>DOCTYPE name state</a>.</dd>

  </dl>

<h5 id="doctype-name-state"><dfn><dfn>DOCTYPE name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>after DOCTYPE name state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

    <dt><a>Uppercase ASCII letter</a></dt>
    <dd>Append the lowercase version of the <a>current input character</a> (add 0x0020 to the
    character's code point) to the current DOCTYPE token's name.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    DOCTYPE token's name.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current DOCTYPE token's name.</dd>

  </dl>

<h5 id="after-doctype-name-state"><dfn><dfn>After DOCTYPE name state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>

    If the six characters starting from the <a>current input character</a> are an
    <a>ASCII case-insensitive</a> match for the word "PUBLIC", then consume those characters
    and switch to the <a>after DOCTYPE public keyword state</a>.

    Otherwise, if the six characters starting from the <a>current input character</a> are
    an <a>ASCII case-insensitive</a> match for the word "SYSTEM", then consume those
    characters and switch to the <a>after DOCTYPE system keyword state</a>.

    Otherwise, this is a <a>parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>. Switch to the <a>bogus DOCTYPE state</a>.

    </dd>

  </dl>

<h5 id="after-doctype-public-keyword-state"><dfn><dfn>After DOCTYPE public keyword state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>before DOCTYPE public identifier state</a>.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's public identifier to the empty string (not
    missing), then switch to the <a>DOCTYPE public identifier (double-quoted) state</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's public identifier to the empty string (not
    missing), then switch to the <a>DOCTYPE public identifier (single-quoted) state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

<h5 id="before-doctype-public-identifier-state"><dfn><dfn>Before DOCTYPE public identifier state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to
    the <a>DOCTYPE public identifier (double-quoted) state</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to
    the <a>DOCTYPE public identifier (single-quoted) state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

<h5 id="doctype-public-identifier-(double-quoted)-state"><dfn><dfn>DOCTYPE public identifier (double-quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Switch to the <a>after DOCTYPE public identifier state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    DOCTYPE token's public identifier.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current DOCTYPE token's public
    identifier.</dd>

  </dl>

<h5 id="doctype-public-identifier-(single-quoted)-state"><dfn><dfn>DOCTYPE public identifier (single-quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Switch to the <a>after DOCTYPE public identifier state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    DOCTYPE token's public identifier.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current DOCTYPE token's public
    identifier.</dd>

  </dl>

<h5 id="after-doctype-public-identifier-state"><dfn><dfn>After DOCTYPE public identifier state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>between DOCTYPE public and system identifiers state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's system identifier to the empty string (not
    missing), then switch to the <a>DOCTYPE system identifier (double-quoted) state</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's system identifier to the empty string (not
    missing), then switch to the <a>DOCTYPE system identifier (single-quoted) state</a>.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

<h5 id="between-doctype-public-and-system-identifiers-state"><dfn><dfn>Between DOCTYPE public and system identifiers state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to
    the <a>DOCTYPE system identifier (double-quoted) state</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to
    the <a>DOCTYPE system identifier (single-quoted) state</a>.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

<h5 id="after-doctype-system-keyword-state"><dfn><dfn>After DOCTYPE system keyword state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Switch to the <a>before DOCTYPE system identifier state</a>.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's system identifier to the empty string (not
    missing), then switch to the <a>DOCTYPE system identifier (double-quoted) state</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's system identifier to the empty string (not
    missing), then switch to the <a>DOCTYPE system identifier (single-quoted) state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

<h5 id="before-doctype-system-identifier-state"><dfn><dfn>Before DOCTYPE system identifier state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to
    the <a>DOCTYPE system identifier (double-quoted) state</a>.</dd>

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to
    the <a>DOCTYPE system identifier (single-quoted) state</a>.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>bogus DOCTYPE state</a>.</dd>

  </dl>

<h5 id="doctype-system-identifier-(double-quoted)-state"><dfn><dfn>DOCTYPE system identifier (double-quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0022 QUOTATION MARK (&quot;)</dt>
    <dd>Switch to the <a>after DOCTYPE system identifier state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    DOCTYPE token's system identifier.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current DOCTYPE token's system
    identifier.</dd>

  </dl>

<h5 id="doctype-system-identifier-(single-quoted)-state"><dfn><dfn>DOCTYPE system identifier (single-quoted) state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0027 APOSTROPHE (')</dt>
    <dd>Switch to the <a>after DOCTYPE system identifier state</a>.</dd>

    <dt>U+0000 NULL</dt>
    <dd><a>Parse error</a>. Append a U+FFFD REPLACEMENT CHARACTER character to the current
    DOCTYPE token's system identifier.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd><a>Parse error</a>. Set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.
    Switch to the <a>data state</a>. Emit that DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd>Append the <a>current input character</a> to the current DOCTYPE token's system
    identifier.</dd>

  </dl>

<h5 id="after-doctype-system-identifier-state"><dfn><dfn>After DOCTYPE system identifier state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dd>Ignore the character.</dd>

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the current DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd><a>Parse error</a>. Switch to the <a>data state</a>. Set the DOCTYPE token's
    <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token. Reconsume the EOF character.</dd>

    <dt>Anything else</dt>
    <dd><a>Parse error</a>. Switch to the <a>bogus DOCTYPE state</a>. (This does
    <em>not</em> set the DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>.)</dd>

  </dl>

<h5 id="bogus-doctype-state"><dfn><dfn>Bogus DOCTYPE state</dfn></dfn></h5>

  Consume the <a>next input character</a>:

  <dl class="switch">

    <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
    <dd>Switch to the <a>data state</a>. Emit the DOCTYPE token.</dd>

    <dt>EOF</dt>
    <dd>Switch to the <a>data state</a>. Emit the DOCTYPE token. Reconsume the EOF
    character.</dd>

    <dt>Anything else</dt>
    <dd>Ignore the character.</dd>

  </dl>

<h5 id="cdata-section-state"><dfn><dfn>CDATA section state</dfn></dfn></h5>

  Switch to the <a>data state</a>.

  Consume every character up to the next occurrence of the three character sequence U+005D RIGHT
  SQUARE BRACKET U+005D RIGHT SQUARE BRACKET U+003E GREATER-THAN SIGN (<code>]]></code>),
  or the end of the file (EOF), whichever comes first. Emit a series of character tokens consisting
  of all the characters consumed except the matching three character sequence at the end (if one was
  found before the end of the file).

  If the end of the file was reached, reconsume the EOF character.

<h5 id="tokenizing-character-references"><dfn>Tokenizing character references</dfn></h5>

  This section defines how to <dfn>consume a character reference</dfn>, optionally with an
  <dfn>additional allowed character</dfn>, which, if specified where the algorithm is invoked, adds
  a character to the list of characters that cause there to not be a character reference.

  This definition is used when parsing character references <a>in text</a> and <a>in
  attributes</a>.

  The behavior depends on the identity of the next character (the one immediately after the
  U+0026 AMPERSAND character), as follows:

  <dl class="switch">

    <dt>U+0009 CHARACTER TABULATION (tab)</dt>
    <dt>U+000A LINE FEED (LF)</dt>
    <dt>U+000C FORM FEED (FF)</dt>

    <dt>U+0020 SPACE</dt>
    <dt>U+003C LESS-THAN SIGN</dt>
    <dt>U+0026 AMPERSAND</dt>
    <dt>EOF</dt>
    <dt>The <a>additional allowed character</a>, if there is one</dt>

    <dd>Not a character reference. No characters are consumed, and nothing is returned. (This is not
    an error, either.)</dd>

    <dt>U+0023 NUMBER SIGN (#)</dt>

    <dd>

    Consume the U+0023 NUMBER SIGN.

    The behavior further depends on the character after the U+0023 NUMBER SIGN:

    <dl class="switch">

      <dt>U+0078 LATIN SMALL LETTER X</dt>
      <dt>U+0058 LATIN CAPITAL LETTER X</dt>

      <dd>

      Consume the X.

      Follow the steps below, but using <a>ASCII hex digits</a>.

      When it comes to interpreting the number, interpret it as a hexadecimal number.

      </dd>

      <dt>Anything else</dt>

      <dd>

      Follow the steps below, but using <a>ASCII digits</a>.

      When it comes to interpreting the number, interpret it as a decimal number.

      </dd>

    </dl>

    Consume as many characters as match the range of characters given above (<a>ASCII hex
    digits</a> or <a>ASCII digits</a>).

    If no characters match the range, then don't consume any characters (and unconsume the U+0023
    NUMBER SIGN character and, if appropriate, the X character). This is a <a>parse error</a>;
    nothing is returned.

    Otherwise, if the next character is a U+003B SEMICOLON, consume that too. If it isn't, there
    is a <a>parse error</a>.

    If one or more characters match the range, then take them all and interpret the string of
    characters as a number (either hexadecimal or decimal as appropriate).

    If that number is one of the numbers in the first column of the following table, then this is
    a <a>parse error</a>. Find the row with that number in the first column, and return a
    character token for the Unicode character given in the second column of that row.

    <table>
      <thead>
      <tr><th>Number <th colspan=2>Unicode character
      <tbody>
      <tr><td>0x00 <td>U+FFFD <td>REPLACEMENT CHARACTER

      <tr><td>0x80 <td>U+20AC <td>EURO SIGN (&#x20AC;)

      <tr><td>0x82 <td>U+201A <td>SINGLE LOW-9 QUOTATION MARK (&#x201A;)
      <tr><td>0x83 <td>U+0192 <td>LATIN SMALL LETTER F WITH HOOK (&#x0192;)
      <tr><td>0x84 <td>U+201E <td>DOUBLE LOW-9 QUOTATION MARK (&#x201E;)
      <tr><td>0x85 <td>U+2026 <td>HORIZONTAL ELLIPSIS (&#x2026;)
      <tr><td>0x86 <td>U+2020 <td>DAGGER (&#x2020;)
      <tr><td>0x87 <td>U+2021 <td>DOUBLE DAGGER (&#x2021;)
      <tr><td>0x88 <td>U+02C6 <td>MODIFIER LETTER CIRCUMFLEX ACCENT (&#x02C6;)
      <tr><td>0x89 <td>U+2030 <td>PER MILLE SIGN (&#x2030;)
      <tr><td>0x8A <td>U+0160 <td>LATIN CAPITAL LETTER S WITH CARON (&#x0160;)
      <tr><td>0x8B <td>U+2039 <td>SINGLE LEFT-POINTING ANGLE QUOTATION MARK (&#x2039;)
      <tr><td>0x8C <td>U+0152 <td>LATIN CAPITAL LIGATURE OE (&#x0152;)

      <tr><td>0x8E <td>U+017D <td>LATIN CAPITAL LETTER Z WITH CARON (&#x017D;)

      <tr><td>0x91 <td>U+2018 <td>LEFT SINGLE QUOTATION MARK (&#x2018;)
      <tr><td>0x92 <td>U+2019 <td>RIGHT SINGLE QUOTATION MARK (&#x2019;)
      <tr><td>0x93 <td>U+201C <td>LEFT DOUBLE QUOTATION MARK (&#x201C;)
      <tr><td>0x94 <td>U+201D <td>RIGHT DOUBLE QUOTATION MARK (&#x201D;)
      <tr><td>0x95 <td>U+2022 <td>BULLET (&#x2022;)
      <tr><td>0x96 <td>U+2013 <td>EN DASH (&#x2013;)
      <tr><td>0x97 <td>U+2014 <td>EM DASH (&#x2014;)
      <tr><td>0x98 <td>U+02DC <td>SMALL TILDE (&#x02DC;)
      <tr><td>0x99 <td>U+2122 <td>TRADE MARK SIGN (&#x2122;)
      <tr><td>0x9A <td>U+0161 <td>LATIN SMALL LETTER S WITH CARON (&#x0161;)
      <tr><td>0x9B <td>U+203A <td>SINGLE RIGHT-POINTING ANGLE QUOTATION MARK (&#x203A;)
      <tr><td>0x9C <td>U+0153 <td>LATIN SMALL LIGATURE OE (&#x0153;)

      <tr><td>0x9E <td>U+017E <td>LATIN SMALL LETTER Z WITH CARON (&#x017E;)
      <tr><td>0x9F <td>U+0178 <td>LATIN CAPITAL LETTER Y WITH DIAERESIS (&#x0178;)
    </table>

    Otherwise, if the number is in the range 0xD800 to 0xDFFF or is greater
    than 0x10FFFF, then this is a <a>parse error</a>. Return a U+FFFD REPLACEMENT CHARACTER
    character token.

    Otherwise, return a character token for the Unicode character whose code point is that
    number.

      Additionally, if the number is in the range 0x0001 to 0x0008,    0x000D to 0x001F,  0x007F  to 0x009F, 0xFDD0 to 0xFDEF, or is
    one of 0x000B, 0xFFFE, 0xFFFF, 0x1FFFE, 0x1FFFF, 0x2FFFE, 0x2FFFF, 0x3FFFE, 0x3FFFF, 0x4FFFE,
    0x4FFFF, 0x5FFFE, 0x5FFFF, 0x6FFFE, 0x6FFFF, 0x7FFFE, 0x7FFFF, 0x8FFFE, 0x8FFFF, 0x9FFFE,
    0x9FFFF, 0xAFFFE, 0xAFFFF, 0xBFFFE, 0xBFFFF, 0xCFFFE, 0xCFFFF, 0xDFFFE, 0xDFFFF, 0xEFFFE,
    0xEFFFF, 0xFFFFE, 0xFFFFF, 0x10FFFE, or 0x10FFFF, then this is a <a>parse error</a>.

    </dd>

    <dt>Anything else</dt>

    <dd>

    Consume the maximum number of characters possible, with the consumed characters matching one
    of the identifiers in the first column of the <a>named character references</a> table (in
    a <a>case-sensitive</a> manner).

    If no match can be made, then no characters are consumed, and nothing is returned. In this
    case, if the characters after the U+0026 AMPERSAND character (&amp;) consist of a sequence of
    one or more <a>alphanumeric ASCII characters</a> followed by a U+003B SEMICOLON character
    (;), then this is a <a>parse error</a>.

    If the character reference is being consumed <a>as part of an attribute</a>, and the last character matched is not a U+003B
    SEMICOLON character (;), and the next character is either a U+003D EQUALS SIGN character (=) or
    an <a>alphanumeric ASCII character</a>, then, for
    historical reasons, all the characters that were matched after the U+0026 AMPERSAND character
    (&amp;) must be unconsumed, and nothing is returned.

    However, if this next character is in fact a U+003D EQUALS SIGN character (=), then this is a
    <a>parse error</a>, because some legacy user agents  will
    misinterpret the markup in those cases.

    Otherwise, a character reference is parsed. If the last character matched is not a U+003B
    SEMICOLON character (;), there is a <a>parse error</a>.

    Return one or two character tokens for the character(s) corresponding to the character
    reference name (as given by the second column of the <a>named character references</a>
    table).

    <div class="example">
      If the markup contains (not in an attribute) the string <code>I'm &amp;notit; I
      tell you</code>, the character reference is parsed as "not", as in, <code>I'm &not;it;
      I tell you</code> (and this is a parse error). But if the markup was <code>I'm
      &amp;notin; I tell you</code>, the character reference would be parsed as "notin;", resulting
      in <code>I'm &notin; I tell you</code> (and no parse error).
    </div>

    </dd>

  </dl>

  </div>

  <div class="impl">

<h4 id="tree-construction"><dfn><dfn>Tree construction</dfn></dfn></h4>

  The input to the tree construction stage is a sequence of tokens from the
  <a>tokenization</a> stage. The tree construction stage is associated with a DOM
  <code>Document</code> object when a parser is created. The "output" of this stage consists of
  dynamically modifying or extending that document's DOM tree.

  This specification does not define when an interactive user agent has to render the
  <code>Document</code> so that it is available to the user, or when it has to begin accepting user
  input.

  <hr />

  As each token is emitted from the tokenizer, the user agent must follow the appropriate steps
  from the following list, known as the <dfn>tree construction dispatcher</dfn>:

  <dl class="switch">

    <dt>If the <a>stack of open elements</a> is empty</dt>
    <dt>If the <a>adjusted current node</a> is an element in the <a>HTML namespace</a></dt>
    <dt>If the <a>adjusted current node</a> is a <a>MathML text integration point</a> and the token is a start tag whose tag name is neither "mglyph" nor "malignmark"</dt>
    <dt>If the <a>adjusted current node</a> is a <a>MathML text integration point</a> and the token is a character token</dt>
    <dt>If the <a>adjusted current node</a> is an <code>annotation-xml</code> element in the <a>MathML namespace</a> and the token is a start tag whose tag name is "svg"</dt>
    <dt>If the <a>adjusted current node</a> is an <a>HTML integration point</a> and the token is a start tag</dt>
    <dt>If the <a>adjusted current node</a> is an <a>HTML integration point</a> and the token is a character token</dt>
    <dt>If the token is an end-of-file token</dt>

    <dd>Process the token according to the rules given in the section corresponding to the current
    <a>insertion mode</a> in HTML content.</dd>

    <dt>Otherwise</dt>

    <dd>Process the token according to the rules given in the section for parsing tokens <a>in foreign content</a>.</dd>

  </dl>

  The <dfn>next token</dfn> is the token that is about to be processed by the <a>tree
  construction dispatcher</a> (even if the token is subsequently just ignored).

  A node is a <dfn>MathML text integration point</dfn> if it is one of the following
  elements:

  <ul class="brief">
    <li>An <code>mi</code> element in the <a>MathML namespace</a></li>
    <li>An <code>mo</code> element in the <a>MathML namespace</a></li>
    <li>An <code>mn</code> element in the <a>MathML namespace</a></li>
    <li>An <code>ms</code> element in the <a>MathML namespace</a></li>
    <li>An <code>mtext</code> element in the <a>MathML namespace</a></li>
  </ul>

  A node is an <dfn>HTML integration point</dfn> if it is one of the following elements:

  <ul class="brief">
    <li>An <code>annotation-xml</code> element in the <a>MathML
    namespace</a> whose start tag token had an attribute with the name "encoding" whose value was
    an <a>ASCII case-insensitive</a> match for the string "<code>text/html</code>"</li>
    <li>An <code>annotation-xml</code> element in the <a>MathML
    namespace</a> whose start tag token had an attribute with the name "encoding" whose value was
    an <a>ASCII case-insensitive</a> match for the string "<code>application/xhtml+xml</code>"</li>
    <li>A <code>foreignObject</code> element in the <a>SVG namespace</a></li>
    <li>A <code>desc</code> element in the <a>SVG namespace</a></li>
    <li>A <code>title</code> element in the <a>SVG namespace</a></li>
  </ul>

  <p class="note">
  If the node in question is the <var>context</var> element passed to the <a>HTML fragment
  parsing algorithm</a>, then the start tag token for that element is the "fake" token created
  during by that <a>HTML fragment parsing algorithm</a>.
  </p>

  <hr />

  <p class="note">
  Not all of the tag names mentioned below are conformant tag names in this
  specification; many are included to handle legacy content. They still form part of the algorithm
  that implementations are required to implement to claim conformance.
  </p>

  <p class="note">
  The algorithm described below places no limit on the depth of the DOM tree
  generated, or on the length of tag names, attribute names, attribute values, <code>Text</code>
  nodes, etc. While implementors are encouraged to avoid arbitrary limits, it is recognized that <a>practical concerns</a> will likely force user agents to impose nesting
  depth constraints.
  </p>

<h5 id="creating-and-inserting-nodes"><dfn>Creating and inserting nodes</dfn></h5>

  While the parser is processing a token, it can enable or disable <dfn>foster parenting</dfn>. This affects the following algorithm.

  The <dfn>appropriate place for inserting a node</dfn>, optionally using a particular
  <i>override target</i>, is the position in an element returned by running the following steps:

  <ol>

    <li>

    If there was an <i>override target</i> specified, then let <var>target</var> be the
    <i>override target</i>.

    Otherwise, let <var>target</var> be the <a>current node</a>.

    </li>

    <li>

    Determine the <var>adjusted insertion location</var> using the first matching steps
    from the following list:

    <dl class="switch">

      <dt>If <a>foster parenting</a> is enabled and <var>target</var> is a <code>table</code>, <code>tbody</code>, <code>tfoot</code>,
      <code>thead</code>, or <code>tr</code> element</dt>

      <dd>

      <p class="note">
  Foster parenting happens when content is misnested in tables.
  </p>

      Run these substeps:

      <ol>

        <li>Let <var>last template</var> be the last <code>template</code> element in the
        <a>stack of open elements</a>, if any.

        <li>Let <var>last table</var> be the last <code>table</code> element in the
        <a>stack of open elements</a>, if any.

        <li>If there is a <var>last template</var> and either there is no <var>last table</var>, or there is one, but <var>last template</var> is lower
        (more recently added) than <var>last table</var> in the <a>stack of open
        elements</a>, then: let <var>adjusted insertion location</var> be inside <var>last template</var>'s <a>template contents</a>, after its last child (if any),
        and abort these substeps.</li>

        <li>If there is no <var>last table</var>,  then let <var>adjusted insertion
        location</var> be inside the first element in the <a>stack of open elements</a> (the
        <code>html</code> element), after its last child (if any), and abort these substeps.
        (<a>fragment case</a>)

        <li>If <var>last table</var> has a parent node, then let <var>adjusted insertion location</var> be inside <var>last table</var>'s parent
        node, immediately before <var>last table</var>, and abort these
        substeps.</li>

        <li>Let <var>previous element</var> be the element immediately above <var>last table</var> in the <a>stack of open elements</a>.</li>

        <li>Let <var>adjusted insertion location</var> be inside <var>previous
        element</var>, after its last child (if any).</li>

      </ol>

      <p class="note">
  These steps are involved in part because it's possible for elements, the
      <code>table</code> element in this case in particular, to have been moved by a script around
      in the DOM, or indeed removed from the DOM entirely, after the element was inserted by the
      parser.
  </p>

      </dd>

      <dt>Otherwise</dt>

      <dd>

      Let <var>adjusted insertion location</var> be inside <var>target</var>,
      after its last child (if any).

      </dd>

    </dl>

    </li>

    <li>

    If the <var>adjusted insertion location</var> is inside a <code>template</code>
    element, let it instead be inside the <code>template</code> element's <a>template
    contents</a>, after its last child (if any).

    </li>

    <li>

    Return the <var>adjusted insertion location</var>.

    </li>

  </ol>

  <hr />

  When the steps below require the UA to <dfn>create an
  element for a token</dfn> in a particular <var>given namespace</var> and with a
  particular <var>intended parent</var>, the UA must run the following steps:

  <ol>

    <li>

    Create a node implementing the interface appropriate for the element type corresponding to
    the tag name of the token in <var>given namespace</var> (as given in the specification
    that defines that element, e.g. for an <code>a</code> element in the <a>HTML
    namespace</a>, this specification defines it to be the <code>HTMLAnchorElement</code>
    interface), with the tag name being the name of that element, with the node being in the given
    namespace, and with the attributes on the node being those given in the given token.

    The interface appropriate for an element in the <a>HTML namespace</a> that is not
    defined in this specification (or <a>other applicable specifications</a>) is
    <code>HTMLUnknownElement</code>. Elements in other namespaces whose interface is not defined by
    that namespace's specification must use the interface <code>Element</code>.

    The <a>node document</a> of the newly created element
    must be the <a>node document</a> of the <var>intended parent</var>.

    </li>

    <li>If the newly created element has an <code>xmlns</code> attribute <em>in the
    <a>XMLNS namespace</a></em> whose value is not exactly the same as the element's namespace,
    that is a <a>parse error</a>. Similarly, if the newly created element has an <code>xmlns:xlink</code> attribute in the <a>XMLNS namespace</a> whose value is not the
    <a>XLink Namespace</a>, that is a <a>parse error</a>.</li>

    <li>If the newly created element is a <a>resettable element</a>,
    invoke its <a>reset algorithm</a>. (This initializes the
    element's <a>value</a> and <a>checkedness</a> based on the element's attributes.)</li>

    <li>If the element is a <a>form-associated element</a>, and the <a><code>form</code> element pointer</a> is not null, and there is no <code>template</code>
    element on the <a>stack of open elements</a>, and the newly created element is either not
    <a>reassociateable</a> or doesn't have a <code>form</code> attribute, and the <var>intended parent</var> is in
    the same <a>home subtree</a> as the element pointed to by the <a><code>form</code> element pointer</a>, <a>associate</a> the newly created element with the
    <code>form</code> element pointed to by the <a><code>form</code> element
    pointer</a>, and suppress the running of the <a>reset the form owner</a> algorithm when
    the parser subsequently attempts to insert the element.</li>

    <li>Return the newly created element.</li>

  </ol>

  <hr />

  When the steps below require the user agent to <dfn>insert a foreign element</dfn> for a token
  in a given namespace, the user agent must run these steps:

  <ol>

    <li>Let the <var>adjusted insertion location</var> be the <a>appropriate place for
    inserting a node</a>.</li>

    <li><a>Create an element for the token</a> in the given namespace, with the intended
    parent being the element in which the <var>adjusted insertion location</var> finds
    itself.</li>

    <li>

    If it is possible to insert an element at the <var>adjusted insertion
    location</var>, then insert the newly created element at the <var>adjusted insertion
    location</var>.

    <p class="note">
  If the <var>adjusted insertion location</var> cannot accept more
    elements, e.g. because it's a <code>Document</code> that already has an element child, then the
    newly created element is dropped on the floor.
  </p>

    </li>

    <li>Push the element onto the <a>stack of open elements</a> so that it is the new
    <a>current node</a>.</li>

    <li>Return the newly created element.</li>

  </ol>

  When the steps below require the user agent to <dfn>insert an HTML element</dfn> for a token,
  the user agent must <a>insert a foreign element</a> for the token, in the <a>HTML
  namespace</a>.

  <hr />

  When the steps below require the user agent to <dfn>adjust MathML attributes</dfn> for a token,
  then, if the token has an attribute named <code>definitionurl</code>, change its name to
  <code>definitionURL</code> (note the case difference).

  When the steps below require the user agent to <dfn>adjust SVG attributes</dfn> for a token,
  then, for each attribute on the token whose attribute name is one of the ones in the first column
  of the following table, change the attribute's name to the name given in the corresponding cell in
  the second column. (This fixes the case of SVG attributes that are not all lowercase.)

  <table>
    <thead>
    <tr> <th> Attribute name on token <th> Attribute name on element
    <tbody>
    <tr> <td> <code>attributename</code> <td> <code>attributeName</code>
    <tr> <td> <code>attributetype</code> <td> <code>attributeType</code>
    <tr> <td> <code>basefrequency</code> <td> <code>baseFrequency</code>
    <tr> <td> <code>baseprofile</code> <td> <code>baseProfile</code>
    <tr> <td> <code>calcmode</code> <td> <code>calcMode</code>
    <tr> <td> <code>clippathunits</code> <td> <code>clipPathUnits</code>
    <tr> <td> <code>diffuseconstant</code> <td> <code>diffuseConstant</code>
    <tr> <td> <code>edgemode</code> <td> <code>edgeMode</code>
    <tr> <td> <code>filterunits</code> <td> <code>filterUnits</code>
    <tr> <td> <code>glyphref</code> <td> <code>glyphRef</code>
    <tr> <td> <code>gradienttransform</code> <td> <code>gradientTransform</code>
    <tr> <td> <code>gradientunits</code> <td> <code>gradientUnits</code>
    <tr> <td> <code>kernelmatrix</code> <td> <code>kernelMatrix</code>
    <tr> <td> <code>kernelunitlength</code> <td> <code>kernelUnitLength</code>
    <tr> <td> <code>keypoints</code> <td> <code>keyPoints</code>
    <tr> <td> <code>keysplines</code> <td> <code>keySplines</code>
    <tr> <td> <code>keytimes</code> <td> <code>keyTimes</code>
    <tr> <td> <code>lengthadjust</code> <td> <code>lengthAdjust</code>
    <tr> <td> <code>limitingconeangle</code> <td> <code>limitingConeAngle</code>
    <tr> <td> <code>markerheight</code> <td> <code>markerHeight</code>
    <tr> <td> <code>markerunits</code> <td> <code>markerUnits</code>
    <tr> <td> <code>markerwidth</code> <td> <code>markerWidth</code>
    <tr> <td> <code>maskcontentunits</code> <td> <code>maskContentUnits</code>
    <tr> <td> <code>maskunits</code> <td> <code>maskUnits</code>
    <tr> <td> <code>numoctaves</code> <td> <code>numOctaves</code>
    <tr> <td> <code>pathlength</code> <td> <code>pathLength</code>
    <tr> <td> <code>patterncontentunits</code> <td> <code>patternContentUnits</code>
    <tr> <td> <code>patterntransform</code> <td> <code>patternTransform</code>
    <tr> <td> <code>patternunits</code> <td> <code>patternUnits</code>
    <tr> <td> <code>pointsatx</code> <td> <code>pointsAtX</code>
    <tr> <td> <code>pointsaty</code> <td> <code>pointsAtY</code>
    <tr> <td> <code>pointsatz</code> <td> <code>pointsAtZ</code>
    <tr> <td> <code>preservealpha</code> <td> <code>preserveAlpha</code>
    <tr> <td> <code>preserveaspectratio</code> <td> <code>preserveAspectRatio</code>
    <tr> <td> <code>primitiveunits</code> <td> <code>primitiveUnits</code>
    <tr> <td> <code>refx</code> <td> <code>refX</code>
    <tr> <td> <code>refy</code> <td> <code>refY</code>
    <tr> <td> <code>repeatcount</code> <td> <code>repeatCount</code>
    <tr> <td> <code>repeatdur</code> <td> <code>repeatDur</code>
    <tr> <td> <code>requiredextensions</code> <td> <code>requiredExtensions</code>
    <tr> <td> <code>requiredfeatures</code> <td> <code>requiredFeatures</code>
    <tr> <td> <code>specularconstant</code> <td> <code>specularConstant</code>
    <tr> <td> <code>specularexponent</code> <td> <code>specularExponent</code>
    <tr> <td> <code>spreadmethod</code> <td> <code>spreadMethod</code>
    <tr> <td> <code>startoffset</code> <td> <code>startOffset</code>
    <tr> <td> <code>stddeviation</code> <td> <code>stdDeviation</code>
    <tr> <td> <code>stitchtiles</code> <td> <code>stitchTiles</code>
    <tr> <td> <code>surfacescale</code> <td> <code>surfaceScale</code>
    <tr> <td> <code>systemlanguage</code> <td> <code>systemLanguage</code>
    <tr> <td> <code>tablevalues</code> <td> <code>tableValues</code>
    <tr> <td> <code>targetx</code> <td> <code>targetX</code>
    <tr> <td> <code>targety</code> <td> <code>targetY</code>
    <tr> <td> <code>textlength</code> <td> <code>textLength</code>
    <tr> <td> <code>viewbox</code> <td> <code>viewBox</code>
    <tr> <td> <code>viewtarget</code> <td> <code>viewTarget</code>
    <tr> <td> <code>xchannelselector</code> <td> <code>xChannelSelector</code>
    <tr> <td> <code>ychannelselector</code> <td> <code>yChannelSelector</code>
    <tr> <td> <code>zoomandpan</code> <td> <code>zoomAndPan</code>
  </table>

  When the steps below require the user agent to <dfn>adjust foreign attributes</dfn> for a
  token, then, if any of the attributes on the token match the strings given in the first column of
  the following table, let the attribute be a namespaced attribute, with the prefix being the string
  given in the corresponding cell in the second column, the local name being the string given in the
  corresponding cell in the third column, and the namespace being the namespace given in the
  corresponding cell in the fourth column. (This fixes the use of namespaced attributes, in
  particular <a><code>lang</code> attributes in the <span>XML
  namespace</a></span>.)

  <table>
    <thead>
    <tr> <th> Attribute name <th> Prefix <th> Local name <th> Namespace
    <tbody>
    <tr> <td> <code>xlink:actuate</code> <td> <code>xlink</code> <td> <code>actuate</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:arcrole</code> <td> <code>xlink</code> <td> <code>arcrole</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:href</code> <td> <code>xlink</code> <td> <code>href</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:role</code> <td> <code>xlink</code> <td> <code>role</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:show</code> <td> <code>xlink</code> <td> <code>show</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:title</code> <td> <code>xlink</code> <td> <code>title</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xlink:type</code> <td> <code>xlink</code> <td> <code>type</code> <td> <a>XLink namespace</a>
    <tr> <td> <code>xml:lang</code> <td> <code>xml</code> <td> <code>lang</code> <td> <a>XML namespace</a>
    <tr> <td> <code>xml:space</code> <td> <code>xml</code> <td> <code>space</code> <td> <a>XML namespace</a>
    <tr> <td> <code>xmlns</code> <td> (none) <td> <code>xmlns</code> <td> <a>XMLNS namespace</a>
    <tr> <td> <code>xmlns:xlink</code> <td> <code>xmlns</code> <td> <code>xlink</code> <td> <a>XMLNS namespace</a>
  </table>

  <hr />

  When the steps below require the user agent to <dfn>insert a character</dfn> while processing a
  token, the user agent must run the following steps:

  <ol>

    <li>Let <var>data</var> be the characters passed to the algorithm, or, if no
    characters were explicitly specified, the character of the character token being
    processed.</li>

    <li>Let the <var>adjusted insertion location</var> be the <a>appropriate
    place for inserting a node</a>.</li>

    <li>

    If the <var>adjusted insertion location</var> is in a <code>Document</code> node,
    then abort these steps.

    <p class="note">
  The DOM will not let <code>Document</code> nodes have <code>Text</code> node
    children, so they are dropped on the floor.

    </li>

    <li>

    If there is a <code>Text</code> node immediately before the <var>adjusted insertion
    location</var>, then append <var>data</var> to that <code>Text</code> node's data.

    Otherwise, create a new <code>Text</code> node whose data is <var>data</var> and
    whose <a>node document</a> is the same as that of the
    element in which the <var>adjusted insertion location</var> finds itself, and insert
    the newly created node at the <var>adjusted insertion location</var>.

    </li>

  </ol>

  <div class="example">
    Here are some sample inputs to the parser and the corresponding number of <code>Text</code>
    nodes that they result in, assuming a user agent that executes scripts.

    <table>
    <thead>
      <tr>
      <th>Input <th>Number of <code>Text</code> nodes
    <tbody>
      <tr>
      <td><pre highlight="html">
  A&lt;script>
  var&nbsp;script&nbsp;=&nbsp;document.getElementsByTagName('script')[0];
  document.body.removeChild(script);
  &lt;/script>B
  </pre>
      <td>One <code>Text</code> node in the document, containing "AB".
      <tr>
      <td><pre highlight="html">
  A&lt;script>
  var&nbsp;text&nbsp;=&nbsp;document.createTextNode('B');
  document.body.appendChild(text);
  &lt;/script>C
  </pre>
      <td>Three <code>Text</code> nodes; "A" before the script, the script's contents, and "BC" after the script (the parser appends to the <code>Text</code> node created by the script).
      <tr>
      <td><pre highlight="html">
  A&lt;script>
  var&nbsp;text&nbsp;=&nbsp;document.getElementsByTagName('script')[0].firstChild;
  text.data&nbsp;=&nbsp;'B';
  document.body.appendChild(text);
  &lt;/script>C
  </pre>
      <td>Two adjacent <code>Text</code> nodes in the document, containing "A" and "BC".
      <tr>
      <td><pre highlight="html">
  A&lt;table>B&lt;tr>C&lt;/tr>D&lt;/table>
  </pre>
      <td>One <code>Text</code> node before the table, containing "ABCD". (This is caused by <a>foster parenting</a>.)
      <tr>
      <td><pre highlight="html">
  A&lt;table>&lt;tr>&nbsp;B&lt;/tr>&nbsp;C&lt;/table>
  </pre>
      <td>One <code>Text</code> node before the table, containing "A&nbsp;B&nbsp;C" (A-space-B-space-C). (This is caused by <a>foster parenting</a>.)
      <tr>
      <td><pre highlight="html">
  A&lt;table>&lt;tr>&nbsp;B&lt;/tr>&nbsp;&lt;/em>C&lt;/table>
  </pre>
      <td>One <code>Text</code> node before the table, containing "A&nbsp;BC" (A-space-B-C), and one <code>Text</code> node inside the table (as a child of a <code>tbody</code>) with a single space character. (Space characters separated from non-space characters by non-character tokens are not affected by <a>foster parenting</a>, even if those other tokens then get ignored.)
    </table>
  </div>

  <hr />

  When the steps below require the user agent to <dfn>insert a comment</dfn> while processing a
  comment token, optionally with an explicitly insertion position <var>position</var>, the
  user agent must run the following steps:

  <ol>

    <li>Let <var>data</var> be the data given in the comment token being
    processed.</li>

    <li>If <var>position</var> was specified, then let the <var>adjusted
    insertion location</var> be <var>position</var>. Otherwise, let <var>adjusted
    insertion location</var> be the <a>appropriate place for inserting a node</a>.</li>

    <li>Create a <code>Comment</code> node whose <code>data</code> attribute is set to
    <var>data</var> and whose <a>node document</a> is
    the same as that of the node in which the <var>adjusted insertion location</var> finds
    itself.

    <li>Insert the newly created node at the <var>adjusted insertion
    location</var>.</li>

  </ol>

  <hr />

  DOM mutation events must not fire for changes caused by the UA
  parsing the document. This includes the parsing of any content inserted using <code>document.write()</code> and <code>document.writeln()</code> calls. [[!UIEVENTS]]

  However, <a>mutation observers</a> <em>do</em> fire, as required by the DOM specification.

<h5 id="parsing-elements-that-contain-only-text"><dfn>Parsing elements that contain only text</dfn></h5>

  The <dfn>generic raw text element parsing algorithm</dfn> and the <dfn>generic RCDATA element
  parsing algorithm</dfn> consist of the following steps. These algorithms are always invoked in
  response to a start tag token.

  <ol>

    <li><a>Insert an HTML element</a> for the token.</li>

    <li>If the algorithm that was invoked is the <a>generic raw text element parsing
    algorithm</a>, switch the tokenizer to the <a>RAWTEXT state</a>; otherwise the algorithm
    invoked was the <a>generic RCDATA element parsing algorithm</a>, switch the tokenizer to
    the <a>RCDATA state</a>.</li>

    <li>Let the <a>original insertion mode</a> be the current <a>insertion
    mode</a>.

    <li>Then, switch the <a>insertion mode</a> to "<a>text</a>".</li>

  </ol>

<h5 id="closing-elements-that-have-implied-end-tags"><dfn>Closing elements that have implied end tags</dfn></h5>

  When the steps below require the UA to <dfn>generate implied end
  tags</dfn>, then, while the <a>current node</a> is a
  <code>dd</code> element, a <code>dt</code> element, an
  <code>li</code> element, an <code>option</code> element, an
  <code>optgroup</code> element, a <code>p</code> element, an
  <code>rb</code> element, an <code>rp</code> element, an <code>rt</code>
  element, or an <code>rtc</code> element, the UA must
  pop the <a>current node</a> off the <a>stack of open
  elements</a>.

  If a step requires the UA to generate implied end tags but lists
  an element to exclude from the process, then the UA must perform the
  above steps as if that element was not in the above list.

  When the steps below require the UA to <dfn>generate all implied end tags thoroughly</dfn>,
  then, while the <a>current node</a> is a <code>caption</code> element, a
  <code>colgroup</code> element, a <code>dd</code> element, a <code>dt</code> element, an
  <code>li</code> element, an <code>optgroup</code> element, an <code>option</code> element, a
  <code>p</code> element, an <code>rb</code> element, an <code>rp</code> element, an <code>rt</code>
  element, an <code>rtc</code> element, a <code>tbody</code> element, a <code>td</code> element, a
  <code>tfoot</code> element, a <code>th</code> element, a <code>thead</code> element, or a
  <code>tr</code> element, the UA must pop the <a>current node</a> off the
  <a>stack of open elements</a>.

<h5 id="the-rules-for-parsing-tokens-in-html-content"><dfn>The rules for parsing tokens in HTML content</dfn></h5>

<h6 id="the-"initial"-insertion-mode"><dfn>The "<dfn>initial</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>initial</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER
    TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
    U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    Ignore the token.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a> as the last child of the <code>Document</code> object.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>

    If the DOCTYPE token's name is not a <a>case-sensitive</a> match for the string "<code>html</code>", or the token's public identifier is not missing, or the token's system
    identifier is neither missing nor a <a>case-sensitive</a> match for the string
    "<code>about:legacy-compat</code>", and none of the sets of conditions in the following list are
    matched, then there is a <a>parse error</a>.

    <ul>

      <li>The DOCTYPE token's name is a <a>case-sensitive</a> match for the string "<code>html</code>", the token's public identifier is the <a>case-sensitive</a> string
      "<code>-//W3C//DTD&nbsp;HTML&nbsp;4.0//EN</code>", and the token's system identifier
      is either missing or the <a>case-sensitive</a> string "<code>http://www.w3.org/TR/REC-html40/strict.dtd</code>".</li>

      <li>The DOCTYPE token's name is a <a>case-sensitive</a> match for the string "<code>html</code>", the token's public identifier is the <a>case-sensitive</a> string
      "<code>-//W3C//DTD&nbsp;HTML&nbsp;4.01//EN</code>", and the token's system identifier
      is either missing or the <a>case-sensitive</a> string "<code>http://www.w3.org/TR/html4/strict.dtd</code>".</li>

      <li>The DOCTYPE token's name is a <a>case-sensitive</a> match for the string "<code>html</code>", the token's public identifier is the <a>case-sensitive</a> string
      "<code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Strict//EN</code>", and the token's system
      identifier is the <a>case-sensitive</a> string "<code>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</code>".</li>

      <li>The DOCTYPE token's name is a <a>case-sensitive</a> match for the string "<code>html</code>", the token's public identifier is the <a>case-sensitive</a> string
      "<code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1//EN</code>", and the token's system identifier
      is the <a>case-sensitive</a> string "<code>http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</code>".</li>

    </ul>

    Conformance checkers may, based on the values (including presence or lack thereof) of the
    DOCTYPE token's name, public identifier, or system identifier, switch to a conformance checking
    mode for another language (e.g. based on the DOCTYPE token a conformance checker could recognize
    that the document is an HTML4-era document, and defer to an HTML4 conformance checker.)

    Append a <code>DocumentType</code> node to the <code>Document</code> node, with the <code>name</code> attribute set to the name given in the DOCTYPE token, or the empty string
    if the name was missing; the <code>publicId</code> attribute set to the public
    identifier given in the DOCTYPE token, or the empty string if the public identifier was missing;
    the <code>systemId</code> attribute set to the system identifier given in the DOCTYPE
    token, or the empty string if the system identifier was missing; and the other attributes
    specific to <code>DocumentType</code> objects set to null and empty lists as appropriate.
    Associate the <code>DocumentType</code> node with the <code>Document</code> object so that it is
    returned as the value of the <code>doctype</code> attribute of the
    <code>Document</code> object.

    Then, if the document is <em>not</em> <a>an <code>iframe</code>
    <code>srcdoc</code> document</a>, and the DOCTYPE token matches
    one of the conditions in the following list, then set the <code>Document</code> to <a>quirks
    mode</a>:

    <ul class="brief">
      <li> The <i>force-quirks flag</i> is set to <i>on</i>. </li>
      <li> The name is set to anything other than "<code>html</code>" (compared <a>case-sensitively</a>). </li>
      <li> The public identifier is set to: "<code>-//W3O//DTD W3 HTML Strict 3.0//EN//</code>" </li>
      <li> The public identifier is set to: "<code>-/W3C/DTD HTML 4.0 Transitional/EN</code>" </li>
      <li> The public identifier is set to: "<code>HTML</code>" </li>
      <li> The system identifier is set to: "<code>http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd</code>" </li>
      <li> The public identifier starts with: "<code>+//Silmaril//dtd html Pro v0r11 19970101//</code>" </li>
      <li> The public identifier starts with: "<code>-//AS//DTD HTML 3.0 asWedit + extensions//</code>" </li>
      <li> The public identifier starts with: "<code>-//AdvaSoft Ltd//DTD HTML 3.0 asWedit + extensions//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Level 1//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Level 2//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Strict Level 1//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Strict Level 2//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0 Strict//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 2.1E//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 3.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 3.2 Final//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 3.2//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML 3//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Level 0//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Level 1//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Level 2//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Level 3//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict Level 0//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict Level 1//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict Level 2//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict Level 3//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML Strict//</code>" </li>
      <li> The public identifier starts with: "<code>-//IETF//DTD HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//Metrius//DTD Metrius Presentational//</code>" </li>
      <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 2.0 HTML Strict//</code>" </li>
      <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 2.0 HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 2.0 Tables//</code>" </li>
      <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 3.0 HTML Strict//</code>" </li>
      <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 3.0 HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//Microsoft//DTD Internet Explorer 3.0 Tables//</code>" </li>
      <li> The public identifier starts with: "<code>-//Netscape Comm. Corp.//DTD HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//Netscape Comm. Corp.//DTD Strict HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//O'Reilly and Associates//DTD HTML 2.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//O'Reilly and Associates//DTD HTML Extended 1.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//O'Reilly and Associates//DTD HTML Extended Relaxed 1.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//SQ//DTD HTML 2.0 HoTMetaL + extensions//</code>" </li>
      <li> The public identifier starts with: "<code>-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::extensions to HTML 4.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//SoftQuad//DTD HoTMetaL PRO 4.0::19971010::extensions to HTML 4.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//Spyglass//DTD HTML 2.0 Extended//</code>" </li>
      <li> The public identifier starts with: "<code>-//Sun Microsystems Corp.//DTD HotJava HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//Sun Microsystems Corp.//DTD HotJava Strict HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3 1995-03-24//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3.2 Draft//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3.2 Final//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3.2//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 3.2S Draft//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 4.0 Frameset//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML 4.0 Transitional//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML Experimental 19960712//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD HTML Experimental 970421//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD W3 HTML//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3O//DTD W3 HTML 3.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//WebTechs//DTD Mozilla HTML 2.0//</code>" </li>
      <li> The public identifier starts with: "<code>-//WebTechs//DTD Mozilla HTML//</code>" </li>
      <li> The system identifier is missing and the public identifier starts with: "<code>-//W3C//DTD HTML 4.01 Frameset//</code>" </li>
      <li> The system identifier is missing and the public identifier starts with: "<code>-//W3C//DTD HTML 4.01 Transitional//</code>" </li>
    </ul>

    Otherwise, if the document is <em>not</em> <a>an <code>iframe</code> <code>srcdoc</code> document</a>, and the DOCTYPE token matches one of
    the conditions in the following list, then set the <code>Document</code> to <a>limited-quirks
    mode</a>:

    <ul class="brief">
      <li> The public identifier starts with: "<code>-//W3C//DTD XHTML 1.0 Frameset//</code>" </li>
      <li> The public identifier starts with: "<code>-//W3C//DTD XHTML 1.0 Transitional//</code>" </li>
      <li> The system identifier is not missing and the public identifier starts with: "<code>-//W3C//DTD HTML 4.01 Frameset//</code>" </li>
      <li> The system identifier is not missing and the public identifier starts with: "<code>-//W3C//DTD HTML 4.01 Transitional//</code>" </li>
    </ul>

    The system identifier and public identifier strings must be compared to the values given in
    the lists above in an <a>ASCII case-insensitive</a> manner. A system identifier whose
    value is the empty string is not considered missing for the purposes of the conditions
    above.

    Then, switch the <a>insertion mode</a> to "<a>before html</a>".

    </dd>

    <dt>Anything else</dt>
    <dd>

    If the document is <em>not</em> <a>an <code>iframe</code> <code>srcdoc</code> document</a>, then this is a <a>parse
    error</a>; set the <code>Document</code> to <a>quirks mode</a>.

    In any case, switch the <a>insertion mode</a> to "<a>before html</a>", then reprocess the token.

    </dd>

  </dl>

<h6 id="the-"before-html"-insertion-mode"><dfn>The "<dfn>before html</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>before html</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a> as the last child of the <code>Document</code> object.
    </dd>

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    <a>Create an element for the token</a> in the <a>HTML namespace</a>, with the
    <code>Document</code> as the intended parent. Append it to the <code>Document</code> object. Put
    this element in the <a>stack of open elements</a>.

    If the <code>Document</code> is being loaded as part of <a>navigation</a> of a <a>browsing context</a>, run these steps:

    <ol>

      <li>If the result of running <a>match service worker
      registration</a> for <a>the <code>Document</code>'s address</a> is non-null, run the
      <a>application cache selection algorithm</a> passing the
      <code>Document</code> object with no manifest.</li>

      <li>

      Otherwise, run these substeps:

      <ol>

        <li>If the newly created element has a <code>manifest</code>
        attribute whose value is not the empty string, then <a>resolve</a> the value of that attribute to an <a>absolute URL</a>, relative to
        the newly created element, and if that is  successful, run the <a>application cache selection algorithm</a> passing the
        <code>Document</code> object with the result of applying the <a>URL serializer</a> algorithm to the resulting <a>parsed
        URL</a> with the <i>exclude fragment flag</i> set.</li>

        <li>Otherwise, run the <a>application cache selection
        algorithm</a> passing the <code>Document</code> object with no manifest.</li>

      </ol>

      </li>

    </ol>

    Switch the <a>insertion mode</a> to "<a>before
    head</a>".

    </dd>

    <dt>An end tag whose tag name is one of: "head", "body", "html", "br"</dt>
    <dd>
    Act as described in the "anything else" entry below.
    </dd>

    <dt>Any other end tag</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>

    Create an <code>html</code> element whose <a>node document</a> is the <code>Document</code> object. Append
    it to the <code>Document</code> object. Put this element in the <a>stack of open
    elements</a>.

    If the <code>Document</code> is being loaded as part of <a>navigation</a> of a <a>browsing context</a>, then: run the <a>application cache selection algorithm</a> with no manifest,
    passing it the <code>Document</code> object.

    Switch the <a>insertion mode</a> to "<a>before
    head</a>", then reprocess the token.

    </dd>

  </dl>

  The root element can end up being removed from the <code>Document</code> object, e.g. by
  scripts; nothing in particular happens in such cases, content continues being appended to the
  nodes as described in the next section.

<h6 id="the-"before-head"-insertion-mode"><dfn>The "<dfn>before head</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>before head</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER
    TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
    U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    Ignore the token.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>
    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.
    </dd>

    <dt>A start tag whose tag name is "head"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token.

    Set the <a><code>head</code> element pointer</a> to the newly created
    <code>head</code> element.

    Switch the <a>insertion mode</a> to "<a>in
    head</a>".

    </dd>

    <dt>An end tag whose tag name is one of: "head", "body", "html", "br"</dt>
    <dd>

    Act as described in the "anything else" entry below.

    </dd>

    <dt>Any other end tag</dt>
    <dd>

    <a>Parse error</a>. Ignore the token.

    </dd>

    <dt>Anything else</dt>
    <dd>

    <a>Insert an HTML element</a> for a "head" start tag token with no attributes.

    Set the <a><code>head</code> element pointer</a> to the newly created
    <code>head</code> element.

    Switch the <a>insertion mode</a> to "<a>in
    head</a>".

    Reprocess the current token.

    </dd>

  </dl>

<h6 id="the-"in-head"-insertion-mode"><dfn>The "<dfn>in head</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  head</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER
    TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
    U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    <a>Insert the character</a>.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>
    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.
    </dd>

    <dt>A start tag whose tag name is one of: "base", "basefont",
    "bgsound", "link"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    </dd>

    <dt>A start tag whose tag name is "meta"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    If the element has a <code>charset</code> attribute, and <a>getting an encoding</a> from
    its value results in an <a>encoding</a>, and the
    <a>confidence</a> is currently <i>tentative</i>, then
    <a>change the encoding</a> to the resulting encoding.

    Otherwise, if the element has an <code>http-equiv</code>
    attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>Content-Type</code>", and the element has a <code>content</code> attribute, and applying the <a>algorithm for
    extracting a character encoding from a <code>meta</code> element</a> to that attribute's
    value returns an <a>encoding</a>, and the
    <a>confidence</a> is currently <i>tentative</i>, then
    <a>change the encoding</a> to the extracted encoding.

    </dd>

    <dt>A start tag whose tag name is "title"</dt>
    <dd>
    Follow the <a>generic RCDATA element parsing algorithm</a>.
    </dd>

    <dt>A start tag whose tag name is "noscript", if the <a>scripting flag</a> is enabled</dt>
    <dt>A start tag whose tag name is one of: "noframes", "style"</dt>
    <dd>
    Follow the <a>generic raw text element parsing algorithm</a>.
    </dd>

    <dt>A start tag whose tag name is "noscript", if the <a>scripting flag</a> is disabled</dt>
    <dd>

    <a>Insert an HTML element</a> for the token.

    Switch the <a>insertion mode</a> to "<a>in
    head noscript</a>".

    </dd>

    <dt>A start tag whose tag name is "script"</dt>
    <dd>

    Run these steps:

    <ol>

      <li>Let the <var>adjusted insertion location</var> be the <a>appropriate place
      for inserting a node</a>.</li>

      <li><a>Create an element for the token</a> in the <a>HTML namespace</a>, with
      the intended parent being the element in which the <var>adjusted insertion
      location</var> finds itself.</li>

      <li>

      Mark the element as being <a>"parser-inserted"</a> and unset the element's
      <a>"non-blocking"</a> flag.

      <p class="note">This ensures that, if the script is external, any <code>document.write()</code> calls in the script will execute in-line,
      instead of blowing the document away, as would happen in most other cases. It also prevents
      the script from executing until the end tag is seen.
  </p>

      </li>

      <li>If the parser was originally created for the <a>HTML fragment parsing
      algorithm</a>, then mark the <code>script</code> element as <a>"already started"</a>.
      (<a>fragment case</a>)</li>

      <li>Insert the newly created element at the <var>adjusted insertion
      location</var>.</li>

      <li>Push the element onto the <a>stack of open elements</a> so that it is the new
      <a>current node</a>.</li>

      <li>Switch the tokenizer to the <a>script data state</a>.</li>

      <li>Let the <a>original insertion mode</a> be the current <a>insertion
      mode</a>.

      <li>Switch the <a>insertion mode</a> to "<a>text</a>".</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is "head"</dt>
    <dd>

    Pop the <a>current node</a> (which will be the <code>head</code> element) off the
    <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to "<a>after
    head</a>".

    </dd>

    <dt>An end tag whose tag name is one of: "body", "html", "br"</dt>
    <dd>
    Act as described in the "anything else" entry below.
    </dd>

    <dt>A start tag whose tag name is "template"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token.

    Insert a <a>marker</a> at the end of the <a>list of
    active formatting elements</a>.

    Set the <a>frameset-ok flag</a> to "not ok".

    Switch the <a>insertion mode</a> to "<a>in
    template</a>".

    Push "<a>in template</a>" onto the <a>stack of
    template insertion modes</a> so that it is the new <a>current template insertion
    mode</a>.

    </dd>

    <dt>An end tag whose tag name is "template"</dt>
    <dd>

    If there is no <code>template</code> element on the <a>stack of open elements</a>, then
    this is a <a>parse error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

      <li><a>Generate all implied end tags thoroughly</a>.</li>

      <li>If the <a>current node</a> is not a <code>template</code> element, then this is a
      <a>parse error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until a <code>template</code>
      element has been popped from the stack.</li>

      <li><a>Clear the list of active formatting elements up to the last marker</a>.</li>

      <li>Pop the <a>current template insertion mode</a> off the <a>stack of template
      insertion modes</a>.

      <li><a>Reset the insertion mode appropriately</a>.</li>

    </ol>

    </dd>

    <dt>A start tag whose tag name is "head"</dt>
    <dt>Any other end tag</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>

    Pop the <a>current node</a> (which will be the <code>head</code> element) off the
    <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to "<a>after
    head</a>".

    Reprocess the token.

    </dd>

  </dl>

<h6 id="the-"in-head-noscript"-insertion-mode"><dfn>The "<dfn>in head noscript</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in head noscript</a>" <a>insertion mode</a>, the user agent must handle the
  token as follows:

  <dl class="switch">

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end tag whose tag name is "noscript"</dt>
    <dd>

    Pop the <a>current node</a> (which will be a <code>noscript</code> element) from the
    <a>stack of open elements</a>; the new <a>current node</a> will be a
    <code>head</code> element.

    Switch the <a>insertion mode</a> to "<a>in
    head</a>".

    </dd>

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dt>A comment token</dt>
    <dt>A start tag whose tag name is one of: "basefont", "bgsound", "link", "meta", "noframes",
    "style"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end tag whose tag name is "br"</dt>
    <dd>
    Act as described in the "anything else" entry below.
    </dd>

    <dt>A start tag whose tag name is one of: "head", "noscript"</dt>
    <dt>Any other end tag</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>

    <a>Parse error</a>.

    Pop the <a>current node</a> (which will be a <code>noscript</code> element) from the
    <a>stack of open elements</a>; the new <a>current node</a> will be a
    <code>head</code> element.

    Switch the <a>insertion mode</a> to "<a>in
    head</a>".

    Reprocess the token.

    </dd>

  </dl>

<h6 id="the-"after-head"-insertion-mode"><dfn>The "<dfn>after head</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after head</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER
    TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
    U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    <a>Insert the character</a>.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>A start tag whose tag name is "body"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token.

    Set the <a>frameset-ok flag</a> to "not ok".

    Switch the <a>insertion mode</a> to "<a>in
    body</a>".

    </dd>

    <dt>A start tag whose tag name is "frameset"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token.

    Switch the <a>insertion mode</a> to "<a>in
    frameset</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "base", "basefont", "bgsound", "link", "meta",
    "noframes", "script", "style", "template", "title"</dt>
    <dd>

    <a>Parse error</a>.

    Push the node pointed to by the <a><code>head</code> element pointer</a> onto
    the <a>stack of open elements</a>.

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    Remove the node pointed to by the <a><code>head</code> element pointer</a>
    from the <a>stack of open elements</a>. (It might not be the <a>current node</a> at
    this point.)

    <p class="note">
  The <a><code>head</code> element pointer</a> cannot be null at
    this point.
  </p>

    </dd>

    <dt>An end tag whose tag name is "template"</dt>
    <dd>
    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.
    </dd>

    <dt>An end tag whose tag name is one of: "body", "html", "br"</dt>
    <dd>
    Act as described in the "anything else" entry below.
    </dd>

    <dt>A start tag whose tag name is "head"</dt>
    <dt>Any other end tag</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>

    <a>Insert an HTML element</a> for a "body" start tag token with no attributes.

    Switch the <a>insertion mode</a> to "<a>in
    body</a>".

    Reprocess the current token.

    </dd>

  </dl>

<h6 id="the-"in-body"-insertion-mode"><dfn>The "<dfn>in body</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  body</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token that is U+0000 NULL</dt>
    <dd>

    <a>Parse error</a>. Ignore the token.

    </dd>

    <dt>A character token that is one of U+0009 CHARACTER TABULATION,
    U+000A LINE FEED (LF), U+000C FORM FEED (FF), U+000D CARRIAGE
    RETURN (CR), or U+0020 SPACE</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert the token's character</a>.

    </dd>

    <dt>Any other character token</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert the token's character</a>.

    Set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    <a>Parse error</a>.

    If there is a <code>template</code> element on the <a>stack of open elements</a>, then
    ignore the token.

    Otherwise, for each attribute on the token, check to see if the attribute is already present
    on the top element of the <a>stack of open elements</a>. If it is not, add the attribute
    and its corresponding value to that element.

    </dd>

    <dt>A start tag whose tag name is one of: "base", "basefont", "bgsound", "link", "meta",
    "noframes", "script", "style", "template", "title"</dt>
    <dt>An end tag whose tag name is "template"</dt>
    <dd>
    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.
    </dd>

    <dt>A start tag whose tag name is "body"</dt>
    <dd>

    <a>Parse error</a>.

    If the second element on the <a>stack of open elements</a> is not a <code>body</code>
    element, if the <a>stack of open elements</a> has only one node on it, or if there is a
    <code>template</code> element on the <a>stack of open elements</a>, then ignore the token.
    (<a>fragment case</a>)

    Otherwise, set the <a>frameset-ok flag</a> to "not ok"; then, for each attribute on the
    token, check to see if the attribute is already present on the <code>body</code> element (the
    second element) on the <a>stack of open elements</a>, and if it is not, add the attribute
    and its corresponding value to that element.

    </dd>

    <dt>A start tag whose tag name is "frameset"</dt>
    <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> has only one node on it, or if the second element
    on the <a>stack of open elements</a> is not a <code>body</code> element, then ignore the
    token. (<a>fragment case</a>)

    If the <a>frameset-ok flag</a> is set to "not ok", ignore the token.

    Otherwise, run the following steps:

    <ol>

      <li>Remove the second element on the <a>stack of open elements</a> from its parent
      node, if it has one.</li>

      <li>Pop all the nodes from the bottom of the <a>stack of open elements</a>, from the
      <a>current node</a> up to, but not including, the root <code>html</code> element.

      <li><a>Insert an HTML element</a> for the token.</li>

      <li>Switch the <a>insertion mode</a> to "<a>in
      frameset</a>".

    </ol>

    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    If the <a>stack of template insertion modes</a> is not empty, then process the token
    <a>using the rules for</a> the "<a>in
    template</a>" <a>insertion mode</a>.

    Otherwise, follow these steps:

    <ol>

      <li>If there is a node in the <a>stack of open elements</a> that is not either a
      <code>dd</code> element, a <code>dt</code> element, an <code>li</code> element, an
      <code>optgroup</code> element, an <code>option</code> element, a <code>p</code> element, an
      <code>rb</code> element, an <code>rp</code> element, an <code>rt</code> element, an
      <code>rtc</code> element, a <code>tbody</code> element, a <code>td</code> element, a
      <code>tfoot</code> element, a <code>th</code> element, a <code>thead</code> element, a
      <code>tr</code> element, the <code>body</code> element, or the <code>html</code> element, then
      this is a <a>parse error</a>.</li>

      <li><a>Stop parsing</a>.</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is "body"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>body</code> element in scope</a>, this is a <a>parse error</a>;
    ignore the token.

    Otherwise, if there is a node in the <a>stack of open elements</a> that is not either a
    <code>dd</code> element, a <code>dt</code> element, an <code>li</code> element, an
    <code>optgroup</code> element, an <code>option</code> element, a <code>p</code> element, an
    <code>rb</code> element, an <code>rp</code> element, an <code>rt</code> element, an
    <code>rtc</code> element, a <code>tbody</code> element, a <code>td</code> element, a
    <code>tfoot</code> element, a <code>th</code> element, a <code>thead</code> element, a
    <code>tr</code> element, the <code>body</code> element, or the <code>html</code> element, then
    this is a <a>parse error</a>.

    Switch the <a>insertion mode</a> to "<a>after
    body</a>".

    </dd>

    <dt>An end tag whose tag name is "html"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>body</code> element in scope</a>, this is a <a>parse error</a>;
    ignore the token.

    Otherwise, if there is a node in the <a>stack of open elements</a> that is not either a
    <code>dd</code> element, a <code>dt</code> element, an <code>li</code> element, an
    <code>optgroup</code> element, an <code>option</code> element, a <code>p</code> element, an
    <code>rb</code> element, an <code>rp</code> element, an <code>rt</code> element, an
    <code>rtc</code> element, a <code>tbody</code> element, a <code>td</code> element, a
    <code>tfoot</code> element, a <code>th</code> element, a <code>thead</code> element, a
    <code>tr</code> element, the <code>body</code> element, or the <code>html</code> element, then
    this is a <a>parse error</a>.

    Switch the <a>insertion mode</a> to "<a>after
    body</a>".

    Reprocess the token.

    </dd>

    <dt>A start tag whose tag name is one of: "address", "article", "aside", "blockquote", "center",
    "details", "dialog", "dir", "div", "dl", "fieldset", "figcaption", "figure", "footer", "header",
    "main", "menu", "nav", "ol", "p", "section", "summary", "ul"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token.

    </dd>

    <dt>A start tag whose tag name is one of: "h1", "h2", "h3", "h4",
    "h5", "h6"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    If the <a>current node</a> is an <a>HTML element</a> whose
    tag name is one of "h1", "h2", "h3", "h4", "h5", or "h6", then this is a <a>parse
    error</a>; pop the <a>current node</a> off the <a>stack of open elements</a>.

    <a>Insert an HTML element</a> for the token.

    </dd>

    <dt>A start tag whose tag name is one of: "pre", "listing"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has
    a <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token.

    If the <a>next token</a> is a U+000A LINE FEED (LF) character token, then ignore that
    token and move on to the next one. (Newlines at the start of <code>pre</code> blocks are ignored
    as an authoring convenience.)

    Set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>A start tag whose tag name is "form"</dt>
    <dd>

    If the <a><code>form</code> element pointer</a> is not null, and there is
    no <code>template</code> element on the <a>stack of open elements</a>, then this is a
    <a>parse error</a>; ignore the token.

    Otherwise:

    If the <a>stack of open elements</a> <a>has
    a <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token, and, if there is no <code>template</code>
    element on the <a>stack of open elements</a>, set the <a><code>form</code> element pointer</a> to point to the element created.

    </dd>

    <dt>A start tag whose tag name is "li"</dt>
    <dd>

    Run these steps:

    <ol>

      <li>Set the <a>frameset-ok flag</a> to "not ok".</li>

      <li>Initialize <var>node</var> to be the <a>current
      node</a> (the bottommost node of the stack).</li>

      <li>

      <i>Loop</i>: If <var>node</var> is an <code>li</code> element, then run these
      substeps:

      <ol>

        <li><a>Generate implied end tags</a>, except for <code>li</code> elements.</li>

        <li>If the <a>current node</a> is not an <code>li</code> element, then this is a
        <a>parse error</a>.</li>

        <li>Pop elements from the <a>stack of open elements</a> until an <code>li</code>
        element has been popped from the stack.</li>

        <li>Jump to the step labeled <i>done</i> below.</li>

      </ol>

      </li>

      <li>If <var>node</var> is in the <a>special</a> category, but is not an
      <code>address</code>, <code>div</code>, or <code>p</code> element, then jump to the step
      labeled <i>done</i> below.</li>

      <li>Otherwise, set <var>node</var> to the previous entry in the <a>stack of open
      elements</a> and return to the step labeled <i>loop</i>.</li>

      <li><i>Done</i>: If the <a>stack of open elements</a> <a>has a <code>p</code> element in button scope</a>, then <a>close a
      <code>p</code> element</a>.</li>

      <li>Finally, <a>insert an HTML element</a> for the token.</li>

    </ol>

    </dd>

    <dt>A start tag whose tag name is one of: "dd", "dt"</dt>
    <dd>

    Run these steps:

    <ol>

      <li>Set the <a>frameset-ok flag</a> to "not ok".</li>

      <li>Initialize <var>node</var> to be the <a>current
      node</a> (the bottommost node of the stack).</li>

      <li>

      <i>Loop</i>: If <var>node</var> is a <code>dd</code> element, then run these
      substeps:

      <ol>

        <li><a>Generate implied end tags</a>, except for <code>dd</code> elements.</li>

        <li>If the <a>current node</a> is not a <code>dd</code> element, then this is a
        <a>parse error</a>.</li>

        <li>Pop elements from the <a>stack of open elements</a> until a <code>dd</code>
        element has been popped from the stack.</li>

        <li>Jump to the step labeled <i>done</i> below.</li>

      </ol>

      </li>

      <li>

      If <var>node</var> is a <code>dt</code> element, then run these substeps:

      <ol>

        <li><a>Generate implied end tags</a>, except for <code>dt</code> elements.</li>

        <li>If the <a>current node</a> is not a <code>dt</code> element, then this is a
        <a>parse error</a>.</li>

        <li>Pop elements from the <a>stack of open elements</a> until a <code>dt</code>
        element has been popped from the stack.</li>

        <li>Jump to the step labeled <i>done</i> below.</li>

      </ol>

      </li>

      <li>If <var>node</var> is in the <a>special</a> category, but is not an
      <code>address</code>, <code>div</code>, or <code>p</code> element, then jump to the step
      labeled <i>done</i> below.</li>

      <li>Otherwise, set <var>node</var> to the previous entry in the <a>stack of open
      elements</a> and return to the step labeled <i>loop</i>.</li>

      <li><i>Done</i>: If the <a>stack of open elements</a> <a>has a <code>p</code> element in button scope</a>, then <a>close a
      <code>p</code> element</a>.</li>

      <li>Finally, <a>insert an HTML element</a> for the token.</li>

    </ol>

    </dd>

    <dt>A start tag whose tag name is "plaintext"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token.

    Switch the tokenizer to the <a>PLAINTEXT state</a>.

    <p class="note">
  Once a start tag with the tag name "plaintext" has been seen, that will be the
    last token ever seen other than character tokens (and the end-of-file token), because there is
    no way to switch out of the <a>PLAINTEXT state</a>.
  </p>

    </dd>

    <dt>A start tag whose tag name is "button"</dt>
    <dd>

    <ol>

      <li>

      If the <a>stack of open elements</a> <a>has a
      <code>button</code> element in scope</a>, then run these substeps:

      <ol>

        <li><a>Parse error</a>.</li>

        <li><a>Generate implied end tags</a>.</li>

        <li>Pop elements from the <a>stack of open elements</a> until a <code>button</code>
        element has been popped from the stack.</li>

      </ol>

      </li>

      <li><a>Reconstruct the active formatting elements</a>, if any.</li>

      <li><a>Insert an HTML element</a> for the token.</li>

      <li>Set the <a>frameset-ok flag</a> to "not ok".</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is one of: "address", "article", "aside", "blockquote", "button",
    "center", "details", "dialog", "dir", "div", "dl", "fieldset", "figcaption", "figure", "footer",
    "header", "listing", "main", "menu", "nav", "ol", "pre", "section", "summary",
    "ul"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

      <li><a>Generate implied end tags</a>.</li>

      <li>If the <a>current node</a> is not an <a>HTML element</a> with
      the same tag name as that of the token, then this is a
      <a>parse error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until an <a>HTML element</a> with the same tag name as the token has been popped from the
      stack.</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is "form"</dt>
    <dd>

    If there is no <code>template</code> element on the <a>stack of open elements</a>, then
    run these substeps:

    <ol>

      <li>Let <var>node</var> be the element that the <a><code>form</code>
      element pointer</a> is set to, or null if it is not set to an element.</li>

      <li>Set the <a><code>form</code> element pointer</a> to null.</li>

      <li>If <var>node</var> is null or if the <a>stack of open elements</a> does
      not <a>have <var>node</var> in scope</a>, then
      this is a <a>parse error</a>; abort these steps and ignore the token.</li>

      <li><a>Generate implied end tags</a>.</li>

      <li>If the <a>current node</a> is not <var>node</var>, then this is a
      <a>parse error</a>.</li>

      <li>Remove <var>node</var> from the <a>stack of open elements</a>.</li>

    </ol>

    If there <em>is</em> a <code>template</code> element on the <a>stack of open
    elements</a>, then run these substeps instead:

    <ol>

      <li>If the <a>stack of open elements</a> does not <a>have a <code>form</code> element in scope</a>, then this is a <a>parse
      error</a>; abort these steps and ignore the token.</li>

      <li><a>Generate implied end tags</a>.</li>

      <li>If the <a>current node</a> is not a <code>form</code> element, then this is a
      <a>parse error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until a <code>form</code>
      element has been popped from the stack.</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is "p"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>p</code> element in button scope</a>, then this is a <a>parse
    error</a>; <a>insert an HTML element</a> for a "p" start tag token with no
    attributes.

    <a>Close a <code>p</code> element</a>.

    </dd>

    <dt>An end tag whose tag name is "li"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an <code>li</code> element in list item scope</a>, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

      <li><a>Generate implied end tags</a>, except for <code>li</code> elements.</li>

      <li>If the <a>current node</a> is not an <code>li</code> element, then this is a
      <a>parse error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until an <code>li</code>
      element has been popped from the stack.</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is one of: "dd", "dt"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

      <li><a>Generate implied end tags</a>, except for <a>HTML elements</a> with the
      same tag name as the token.</li>

      <li>If the <a>current node</a> is not an <a>HTML
      element</a> with the same tag name as that of the token, then this is a <a>parse
      error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until an <a>HTML element</a> with the same tag name as the token has been popped from the
      stack.</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is one of: "h1", "h2", "h3", "h4", "h5", "h6"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in scope</a> that is an <a>HTML
    element</a> and whose tag name is one of "h1", "h2", "h3", "h4", "h5", or "h6", then this is
    a <a>parse error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

      <li><a>Generate implied end tags</a>.</li>

      <li>If the <a>current node</a> is not an <a>HTML
      element</a> with the same tag name as that of the token, then this is a <a>parse
      error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until an <a>HTML element</a> whose tag name is one of "h1", "h2", "h3", "h4", "h5", or "h6"
      has been popped from the stack.</li>

    </ol>

    </dd>

    <dt>An end tag whose tag name is "sarcasm"</dt>
    <dd>
    Take a deep breath, then act as described in the "any other end
    tag" entry below.
    </dd>

    <dt>A start tag whose tag name is "a"</dt>
    <dd>

    If the <a>list of active formatting elements</a> contains an <code>a</code> element
    between the end of the list and the last <a>marker</a> on
    the list (or the start of the list if there is no <a>marker</a> on the list), then this is a <a>parse
    error</a>; run the <a>adoption agency algorithm</a> for the tag name "a", then remove
    that element from the <a>list of active formatting elements</a> and the <a>stack of
    open elements</a> if the <a>adoption agency algorithm</a> didn't already remove it (it
    might not have if the element is not <a>in table
    scope</a>).

    <p class="example">
  In the non-conforming stream
    <code>&lt;a&nbsp;href="a">a&lt;table>&lt;a&nbsp;href="b">b&lt;/table>x</code>, the first
    <code>a</code> element would be closed upon seeing the second one, and the "x" character would
    be inside a link to "b", not to "a". This is despite the fact that the outer <code>a</code>
    element is not in table scope (meaning that a regular <code>&lt;/a></code> end tag at the start
    of the table wouldn't close the outer <code>a</code> element). The result is that the two
    <code>a</code> elements are indirectly nested inside each other &mdash; non-conforming markup
    will often result in non-conforming DOMs when parsed.
  </p>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. <a>Push onto the list of active
    formatting elements</a> that element.

    </dd>

    <dt>A start tag whose tag name is one of: "b", "big", "code", "em",
    "font", "i", "s", "small", "strike", "strong", "tt", "u"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. <a>Push onto the list of active
    formatting elements</a> that element.

    </dd>

    <dt>A start tag whose tag name is "nobr"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    If the <a>stack of open elements</a> <a>has a
    <code>nobr</code> element in scope</a>, then this is a <a>parse error</a>; run the
    <a>adoption agency algorithm</a> for the tag name "nobr", then once again
    <a>reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. <a>Push onto the list of active
    formatting elements</a> that element.

    </dd>

    <dt>An end tag whose tag name is one of: "a",
    "b", "big", "code", "em", "font", "i", "nobr", "s", "small",
    "strike", "strong", "tt", "u"</dt>
    <dd>

    Run the <a>adoption agency algorithm</a> for the token's tag name.

    </dd>

    <dt>A start tag whose tag name is one of: "applet", "marquee", "object"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token.

    Insert a <a>marker</a> at the end of the <a>list of
    active formatting elements</a>.

    Set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>An end tag token whose tag name is one of: "applet", "marquee", "object"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, run these steps:

    <ol>

      <li><a>Generate implied end tags</a>.</li>

      <li>If the <a>current node</a> is not an <a>HTML
      element</a> with the same tag name as that of the token, then this is a <a>parse
      error</a>.</li>

      <li>Pop elements from the <a>stack of open elements</a> until an <a>HTML element</a> with the same tag name as the token has been popped from the
      stack.</li>

      <li><a>Clear the list of active formatting elements up to the last marker</a>.</li>

    </ol>

    </dd>

    <dt>A start tag whose tag name is "table"</dt>
    <dd>

    If the <code>Document</code> is <em>not</em> set to <a>quirks mode</a>, and the
    <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token.

    Set the <a>frameset-ok flag</a> to "not ok".

    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

    </dd>

    <dt>An end tag whose tag name is "br"</dt>
    <dd>

    <a>Parse error</a>. Drop the attributes from the token, and act as described in the
    next entry; i.e. act as if this was a "br" start tag token with no attributes, rather than the
    end tag token that it actually is.

    </dd>

    <dt>A start tag whose tag name is one of: "area", "br", "embed",
    "img", "keygen", "wbr"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    Set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>A start tag whose tag name is "input"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    If the token does not have an attribute with the name "type", or if it does, but that
    attribute's value is not an <a>ASCII case-insensitive</a> match for the string "<code>hidden</code>", then: set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>A start tag whose tag name is one of: "menuitem", "param", "source", "track"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    </dd>

    <dt>A start tag whose tag name is "hr"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    Set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>A start tag whose tag name is "image"</dt>
    <dd>

    <a>Parse error</a>. Change the token's tag name to "img" and reprocess it. (Don't
    ask.)
    </dd>

    <dt>A start tag whose tag name is "isindex"</dt>
    <dd>

    <a>Parse error</a>.

    If there is no <code>template</code> element on the <a>stack of open elements</a> and
    the <a><code>form</code> element pointer</a> is not null, then ignore the
    token.

    Otherwise:

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    Set the <a>frameset-ok flag</a> to "not ok".

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Insert an HTML element</a> for a "form" start tag token with no attributes, and, if
    there is no <code>template</code> element on the <a>stack of open elements</a>, set the
    <a><code>form</code> element pointer</a> to point to the element
    created.

    If the token has an attribute called "action", set the <code>action</code> attribute on the resulting <code>form</code> element to the
    value of the "action" attribute of the token.

    <a>Insert an HTML element</a> for an "hr" start tag token with no attributes.
    Immediately pop the <a>current node</a> off the <a>stack of open elements</a>.

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for a "label" start tag token with no attributes.

    <a>Insert characters</a> (see below for <a>what they should say</a>).

    <a>Insert an HTML element</a> for an "input" start tag token with all the attributes
    from the "isindex" token except "name", "action", and "prompt", and with an attribute named
    "name" with the value "isindex". (This creates an <code>input</code> element with the <code>name</code> attribute set to the magic value "<code>isindex</code>".) Immediately pop the <a>current node</a> off
    the <a>stack of open elements</a>.

    <a>Insert more characters</a> (see below for <a>what they should say</a>).

    Pop the <a>current node</a> (which will be the <code>label</code> element created
    earlier) off the <a>stack of open elements</a>.

    <a>Insert an HTML element</a> for an "hr" start tag token with no attributes.
    Immediately pop the <a>current node</a> off the <a>stack of open elements</a>.

    Pop the <a>current node</a> (which will be the <code>form</code> element created
    earlier) off the <a>stack of open elements</a>, and, if there is no <code>template</code>
    element on the <a>stack of open elements</a>, set the <a><code>form</code> element pointer</a> back to null.

    <dfn><strong>Prompt</strong></dfn>: If the token has an attribute
    with the name "prompt", then the first stream of characters must be the same string as given in
    that attribute, and the second stream of characters must be empty. Otherwise, the two streams of
    character tokens together should, together with the <code>input</code> element, express the
    equivalent of "This is a searchable index. Enter search keywords: (input field)" in the user's
    preferred language.

    </dd>

    <dt>A start tag whose tag name is "textarea"</dt>
    <dd>

    Run these steps:

    <ol>

      <li><a>Insert an HTML element</a> for the token.</li>

      <li>If the <a>next token</a> is a U+000A LINE FEED (LF) character token, then ignore
      that token and move on to the next one. (Newlines at the start of <code>textarea</code>
      elements are ignored as an authoring convenience.)</li>

      <li>Switch the tokenizer to the <a>RCDATA state</a>.</li>

      <li>Let the <a>original insertion mode</a> be the current <a>insertion
      mode</a>.

      <li>Set the <a>frameset-ok flag</a> to "not ok".</li>

      <li>Switch the <a>insertion mode</a> to "<a>text</a>".</li>

    </ol>

    </dd>

    <dt>A start tag whose tag name is "xmp"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>p</code> element in button scope</a>, then <a>close a <code>p</code>
    element</a>.

    <a>Reconstruct the active formatting elements</a>, if any.

    Set the <a>frameset-ok flag</a> to "not ok".

    Follow the <a>generic raw text element parsing algorithm</a>.

    </dd>

    <dt>A start tag whose tag name is "iframe"</dt>
    <dd>

    Set the <a>frameset-ok flag</a> to "not ok".

    Follow the <a>generic raw text element parsing algorithm</a>.

    </dd>

    <dt>A start tag whose tag name is "noembed"</dt>
    <dt>A start tag whose tag name is "noscript", if the <a>scripting flag</a> is enabled</dt>
    <dd>

    Follow the <a>generic raw text element parsing algorithm</a>.

    </dd>

    <dt>A start tag whose tag name is "select"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token.

    Set the <a>frameset-ok flag</a> to "not ok".

    If the <a>insertion mode</a> is one of "<a>in
    table</a>", "<a>in caption</a>", "<a>in table body</a>", "<a>in row</a>", or "<a>in cell</a>", then switch the
    <a>insertion mode</a> to "<a>in select in
    table</a>". Otherwise, switch the <a>insertion mode</a> to "<a>in select</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "optgroup", "option"</dt>
    <dd>

    If the <a>current node</a> is an <code>option</code> element, then pop the
    <a>current node</a> off the <a>stack of open elements</a>.

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token.

    </dd>

    <dt>A start tag whose tag name is one of: "rb", "rtc"</dt>
    <dd>
    If the <a>stack of open elements</a> <a>has a
    <code>ruby</code> element in scope</a>, then <a>generate implied end tags</a>. If the
    <a>current node</a> is not now a <code>ruby</code> element, this is a
    <a>parse error</a>.

    <a>Insert an HTML element</a> for the token.

    </dd>

    <dt>A start tag whose tag name is one of: "rp", "rt"</dt>
    <dd>

    If the <a>stack of open elements</a> <a>has a
    <code>ruby</code> element in scope</a>, then <a>generate implied end tags</a>, except
    for <code>rtc</code> elements. If the <a>current node</a> is not then a <code>ruby</code>
    element or an <code>rtc</code> element, this is a <a>parse error</a>.

    <a>Insert an HTML element</a> for the token.
    </dd>

    <dt>A start tag whose tag name is "math"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Adjust MathML attributes</a> for the token. (This fixes the case of MathML
    attributes that are not all lowercase.)

    <a>Adjust foreign attributes</a> for the token. (This fixes the use of namespaced
    attributes, in particular XLink.)

    <a>Insert a foreign element</a> for the token, in the <a>MathML
    namespace</a>.

    If the token has its <i>self-closing flag</i> set, pop the <a>current node</a> off the
    <a>stack of open elements</a> and <a>acknowledge
    the token's <i>self-closing flag</i></a>.

    </dd>

    <dt>A start tag whose tag name is "svg"</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Adjust SVG attributes</a> for the token. (This fixes the case of SVG attributes that
    are not all lowercase.)

    <a>Adjust foreign attributes</a> for the token. (This fixes the use of namespaced
    attributes, in particular XLink in SVG.)

    <a>Insert a foreign element</a> for the token, in the <a>SVG namespace</a>.

    If the token has its <i>self-closing flag</i> set, pop the <a>current node</a> off the
    <a>stack of open elements</a> and <a>acknowledge
    the token's <i>self-closing flag</i></a>.

    </dd>

    <dt>A start  tag whose tag name is one of: "caption", "col", "colgroup", "frame",
    "head", "tbody", "td", "tfoot", "th", "thead", "tr"</dt>

    <dd>

    <a>Parse error</a>. Ignore the token.

    </dd>

    <dt>Any other start tag</dt>
    <dd>

    <a>Reconstruct the active formatting elements</a>, if any.

    <a>Insert an HTML element</a> for the token.

    <p class="note">
  This element will be an <a>ordinary</a>
    element.
  </p>

    </dd>

    <dt>Any other end tag</dt>
    <dd>

    Run these steps:

    <ol>

      <li>Initialize <var>node</var> to be the <a>current node</a> (the bottommost
      node of the stack).</li>

      <li><i>Loop</i>: If <var>node</var> is an <a>HTML
      element</a> with the same tag name as the token, then:

      <ol>

        <li><a>Generate implied end tags</a>, except for <a>HTML elements</a> with the
        same tag name as the token.</li>

        <li>If <var>node</var> is not the <a>current node</a>, then this is a
        <a>parse error</a>.</li>

        <li>Pop all the nodes from the <a>current node</a> up to <var>node</var>,
        including <var>node</var>, then stop these steps.</li>

      </ol>

      </li>

      <li>Otherwise, if <var>node</var> is in the <a>special</a> category, then
      this is a <a>parse error</a>; ignore the token, and abort these steps.</li>

      <li>Set <var>node</var> to the previous entry in the <a>stack of open
      elements</a>.</li>

      <li>Return to the step labeled <i>loop</i>.</li>

    </ol>

    </dd>

  </dl>

  When the steps above say the user agent is to <dfn>close a <code>p</code> element</dfn>, it
  means that the user agent must run the following steps:

  <ol>

    <li><a>Generate implied end tags</a>, except for <code>p</code> elements.</li>

    <li>If the <a>current node</a> is not a <code>p</code> element, then this is a
    <a>parse error</a>.</li>

    <li>Pop elements from the <a>stack of open elements</a> until a <code>p</code> element
    has been popped from the stack.</li>

  </ol>

  The <dfn>adoption agency algorithm</dfn>, which takes as its only argument
  a tag name <var>subject</var> for which the algorithm is being run, consists of the
  following steps:

  <ol>

    <li>If the <a>current node</a> is an <a>HTML element</a>
    whose tag name is <var>subject</var>, and the <a>current node</a> is not in the
    <a>list of active formatting elements</a>, then pop the <a>current node</a> off the
    <a>stack of open elements</a>, and abort these steps.</li>

    <li>Let <var>outer loop counter</var> be zero.</li>

    <li><i>Outer loop</i>: If <var>outer loop counter</var> is greater than or equal to
    eight, then abort these steps.</li>

    <li>Increment <var>outer loop counter</var> by one.</li>

    <li>

    Let <var>formatting element</var> be the last element in the <a>list of active
    formatting elements</a> that:

    <ul>

      <li>is between the end of the list and the last <a>marker</a> in the list, if any, or the start of the list
      otherwise, and</li>

      <li>has the tag name <var>subject</var>.</li>

    </ul>

    If there is no such element, then abort these steps and instead act as described in the "any
    other end tag" entry above.

    </li>

    <li>If <var>formatting element</var> is not in the <a>stack of open
    elements</a>, then this is a <a>parse error</a>; remove the element from the list, and
    abort these steps.</li>

    <li>If <var>formatting element</var> is in the <a>stack of open elements</a>,
    but the element is not <a>in scope</a>, then this is a
    <a>parse error</a>; abort these steps.</li>

    <li>If <var>formatting element</var> is not the <a>current node</a>, this is a
    <a>parse error</a>. (But do not abort these steps.)</li>

    <li>Let <var>furthest block</var> be the topmost node in the <a>stack of open
    elements</a> that is lower in the stack than <var>formatting element</var>, and is an
    element in the <a>special</a> category. There might not be one.</li>

    <li>If there is no <var>furthest block</var>, then the UA must first pop all the
    nodes from the bottom of the <a>stack of open elements</a>, from the <a>current
    node</a> up to and including <var>formatting element</var>, then remove <var>formatting element</var> from the <a>list of active formatting elements</a>, and
    finally abort these steps.</li>

    <li>Let <var>common ancestor</var> be the element immediately above <var>formatting element</var> in the <a>stack of open elements</a>.</li>

    <li>Let a bookmark note the position of <var>formatting element</var> in the
    <a>list of active formatting elements</a> relative to the elements on either side of it in
    the list.</li>

    <li>

    Let <var>node</var> and <var>last node</var> be <var>furthest
    block</var>. Follow these steps:

    <ol>

      <li>Let <var>inner loop counter</var> be zero.</li>

      <li><i>Inner loop</i>: Increment <var>inner loop counter</var> by one.</li>

      <li>Let <var>node</var> be the element immediately above <var>node</var>
      in the <a>stack of open elements</a>, or if <var>node</var> is no longer in the
      <a>stack of open elements</a> (e.g. because it got removed by this algorithm), the element that was immediately above <var>node</var> in the <a>stack of open elements</a> before <var>node</var>
      was removed.</li>

      <li>If <var>node</var> is <var>formatting element</var>, then go to the
      next step in the overall algorithm.</li>

      <li>If <var>inner loop counter</var> is greater than three and <var>node</var> is in the <a>list of active formatting elements</a>, then remove <var>node</var> from the <a>list of active formatting elements</a>.</li>

      <li>If <var>node</var> is not in the <a>list of active
      formatting elements</a>, then remove <var>node</var> from the <a>stack of open
      elements</a> and then go back to the step labeled <i>inner loop</i>.</li>

      <li><a>Create an element for the token</a> for which the element <var>node</var> was created, in the <a>HTML namespace</a>, with <var>common
      ancestor</var> as the intended parent; replace the entry for <var>node</var> in the
      <a>list of active formatting elements</a> with an entry for the new element, replace the
      entry for <var>node</var> in the <a>stack of open elements</a> with an entry for
      the new element, and let <var>node</var> be the new element.</li>

      <li>If <var>last node</var> is <var>furthest block</var>, then move the
      aforementioned bookmark to be immediately after the new <var>node</var> in the
      <a>list of active formatting elements</a>.</li>

      <li>Insert <var>last node</var> into <var>node</var>, first removing it
      from its previous parent node if any.</li>

      <li>Let <var>last node</var> be <var>node</var>.</li>

      <li>Return to the step labeled <i>inner loop</i>.</li>

    </ol>

    </li>

    <li>Insert whatever <var>last node</var> ended up being in the previous step at the
    <a>appropriate place for inserting a node</a>, but using <var>common
    ancestor</var> as the <i>override target</i>.</li>

    <li><a>Create an element for the token</a> for which <var>formatting
    element</var> was created, in the <a>HTML namespace</a>, with <var>furthest
    block</var> as the intended parent.</li>

    <li>Take all of the child nodes of <var>furthest block</var> and append them to the
    element created in the last step.</li>

    <li>Append that new element to <var>furthest block</var>.</li>

    <li>Remove <var>formatting element</var> from the <a>list of active formatting
    elements</a>, and insert the new element into the <a>list of active formatting
    elements</a> at the position of the aforementioned bookmark.</li>

    <li>Remove <var>formatting element</var> from the <a>stack of open
    elements</a>, and insert the new element into the <a>stack of open elements</a>
    immediately below the position of <var>furthest block</var> in that stack.</li>

    <li>Jump back to the step labeled <i>outer loop</i>.</li>

  </ol>

  <p class="note">
  This algorithm's name, the "adoption agency algorithm", comes from the way it
  causes elements to change parents, and is in contrast with other possible algorithms for dealing
  with misnested content, which included the "incest algorithm", the "secret affair algorithm", and
  the "Heizenberg algorithm".
  </p>

<h6 id="the-"text"-insertion-mode"><dfn>The "<dfn>text</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>text</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A character token</dt>
    <dd>

    <a>Insert the token's character</a>.

    <p class="note">
  This can never be a U+0000 NULL character; the tokenizer converts those to
    U+FFFD REPLACEMENT CHARACTER characters.
  </p>

    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    <a>Parse error</a>.

    If the <a>current node</a> is a <code>script</code> element, mark the
    <code>script</code> element as <a>"already started"</a>.

    Pop the <a>current node</a> off the <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to the <a>original insertion mode</a> and
    reprocess the token.

    </dd>

    <dt>An end tag whose tag name is "script"</dt>
    <dd>

    If the <a>stack of script settings objects</a> is empty, <a>perform a microtask checkpoint</a>.

    Let <var>script</var> be the <a>current node</a> (which will be a
    <code>script</code> element).

    Pop the <a>current node</a> off the <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to the <a>original insertion mode</a>.

    Let the <var>old insertion point</var> have the same value as the current
    <a>insertion point</a>. Let the <a>insertion point</a> be just before the <a>next
    input character</a>.

    Increment the parser's <a>script nesting level</a> by one.

    <a>Prepare</a> the <var>script</var>. This might
    cause some script to execute, which might cause <a>new characters
    to be inserted into the tokenizer</a>, and might cause the tokenizer to output more tokens,
    resulting in a <a>reentrant invocation of the parser</a>.

    Decrement the parser's <a>script nesting level</a> by one. If the parser's <a>script
    nesting level</a> is zero, then set the <a>parser pause flag</a> to false.

    Let the <a>insertion point</a> have the value of the <var>old insertion
    point</var>. (In other words, restore the <a>insertion point</a> to its previous value.
    This value might be the "undefined" value.)

    At this stage, if there is a <a>pending parsing-blocking
    script</a>, then:

    <dl class="switch">

      <dt>If the <a>script nesting level</a> is not zero:</dt>

      <dd>

      Set the <a>parser pause flag</a> to true, and abort the processing of any nested
      invocations of the tokenizer, yielding control back to the caller. (Tokenization will resume
      when the caller returns to the "outer" tree construction stage.)

      <p class="note">
  The tree construction stage of this particular parser is <a>being called reentrantly</a>, say from a call to <code>document.write()</code>.
  </p>

      </dd>

      <dt>Otherwise:</dt>

      <dd>

      Run these steps:

      <ol>

        <li>Let <var>the script</var> be the <a>pending parsing-blocking
        script</a>. There is no longer a <a>pending parsing-blocking script</a>.</li>

        <li>Block the <a>tokenizer</a> for this instance of the
        <a>HTML parser</a>, such that the <a>event loop</a> will not run <a>tasks</a> that invoke the <a>tokenizer</a>.</li>

        <li>If the parser's <code>Document</code> <a>has a style sheet that is blocking
        scripts</a> or <var>the script</var>'s <a>"ready to be parser-executed"</a>
        flag is not set: <a>spin the event loop</a> until the parser's <code>Document</code>
        <a>has no style sheet that is blocking scripts</a> and <var>the script</var>'s
        <a>"ready to be parser-executed"</a> flag is set.</li>

        <li>

        If this <a>parser has been aborted</a> in the meantime,
        abort these steps.

        <p class="note">
  This could happen if, e.g., while the <a>spin the event loop</a>
        algorithm is running, the <a>browsing context</a> gets closed, or the <code>document.open()</code> method gets invoked on the
        <code>Document</code>.
  </p>

        </li>

        <li>Unblock the <a>tokenizer</a> for this instance of the
        <a>HTML parser</a>, such that <a>tasks</a> that invoke the
        <a>tokenizer</a> can again be run.</li>

        <li>Let the <a>insertion point</a> be just before the <a>next input
        character</a>.</li>

        <li>Increment the parser's <a>script nesting level</a> by one (it should be zero
        before this step, so this sets it to one).</li>

        <li><a>Execute</a> <var>the
        script</var>.</li>

        <li>Decrement the parser's <a>script nesting level</a> by one. If the parser's
        <a>script nesting level</a> is zero (which it always should be at this point), then set
        the <a>parser pause flag</a> to false.

        <li>Let the <a>insertion point</a> be undefined again.</li>

        <li>If there is once again a <a>pending parsing-blocking script</a>, then repeat
        these steps from step 1.</li>

      </ol>

      </dd>

    </dl>

    </dd>

    <dt>Any other end tag</dt>
    <dd>

    Pop the <a>current node</a> off the <a>stack of open elements</a>.

    Switch the <a>insertion mode</a> to the <a>original insertion mode</a>.

    </dd>

  </dl>

<h6 id="the-"in-table"-insertion-mode"><dfn>The "<dfn>in table</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  table</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token, if the <a>current node</a> is <code>table</code>, <code>tbody</code>, <code>tfoot</code>, <code>thead</code>, or <code>tr</code> element</dt>
    <dd>

      Let the <dfn><var>pending table character
      tokens</var></dfn> be an empty list of tokens.

      Let the <a>original insertion mode</a> be the current <a>insertion mode</a>.

      Switch the <a>insertion mode</a> to "<a>in
      table text</a>" and reprocess the token.

    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "caption"</dt>
    <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    Insert a <a>marker</a> at the end of the <a>list of
    active formatting elements</a>.

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in caption</a>".

    </dd>

    <dt>A start tag whose tag name is "colgroup"</dt>
    <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in column group</a>".

    </dd>

    <dt>A start tag whose tag name is "col"</dt>
    <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    <a>Insert an HTML element</a> for a "colgroup" start tag token with no attributes, then
    switch the <a>insertion mode</a> to "<a>in
    column group</a>".

    Reprocess the current token.

    </dd>

    <dt>A start tag whose tag name is one of: "tbody", "tfoot", "thead"</dt>
    <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in table body</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "td", "th", "tr"</dt>
    <dd>

    <a>Clear the stack back to a table context</a>. (See below.)

    <a>Insert an HTML element</a> for a "tbody" start tag token with no attributes, then
    switch the <a>insertion mode</a> to "<a>in table
    body</a>".

    Reprocess the current token.

    </dd>

    <dt>A start tag whose tag name is "table"</dt>
    <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> does not <a>have a <code>table</code> element in table scope</a>, ignore the token.

    Otherwise:

    Pop elements from this stack until a <code>table</code> element has been popped from the
    stack.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

    </dd>

    <dt>An end tag whose tag name is "table"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>table</code> element in table scope</a>, this is a <a>parse
    error</a>; ignore the token.

    Otherwise:

    Pop elements from this stack until a <code>table</code> element has been popped from the
    stack.

    <a>Reset the insertion mode appropriately</a>.

    </dd>

    <dt>An end tag whose tag name is one of: "body", "caption", "col", "colgroup", "html", "tbody",
    "td", "tfoot", "th", "thead", "tr"</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is one of: "style", "script", "template"</dt>
    <dt>An end tag whose tag name is "template"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion
    mode</a>.

    </dd>

    <dt>A start tag whose tag name is "input"</dt>
    <dd>

    If the token does not have an attribute with the name "type", or if it does, but that
    attribute's value is not an <a>ASCII case-insensitive</a> match for the string "<code>hidden</code>", then: act as described in the "anything else" entry below.

    Otherwise:

    <a>Parse error</a>.

    <a>Insert an HTML element</a> for the token.

    Pop that <code>input</code> element off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    </dd>

    <dt>A start tag whose tag name is "form"</dt>
    <dd>

    <a>Parse error</a>.

    If there is a <code>template</code> element on the <a>stack of open elements</a>, or if
    the <a><code>form</code> element pointer</a> is not null, ignore the
    token.

    Otherwise:

    <a>Insert an HTML element</a> for the token, and set the <a><code>form</code> element pointer</a> to point to the element created.

    Pop that <code>form</code> element off the <a>stack of open elements</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>Anything else</dt>
    <dd>

    <a>Parse error</a>. Enable <a>foster parenting</a>, process
    the token <a>using the rules for</a> the "<a>in
    body</a>" <a>insertion mode</a>, and then disable <a>foster
    parenting</a>.

    </dd>

  </dl>

  When the steps above require the UA to <dfn>clear the stack back to a table context</dfn>, it
  means that the UA must, while the <a>current node</a> is not a <code>table</code>,
  <code>template</code>, or <code>html</code> element, pop elements from the <a>stack of open
  elements</a>.

  <p class="note">
  This is the same list of elements as used in the <i>has an element in table scope</i> steps.
  </p>

  <p class="note">
  The <a>current node</a> being an <code>html</code> element after this
  process is a <a>fragment case</a>.
  </p>

<h6 id="the-"in-table-text"-insertion-mode"><dfn>The "<dfn>in table text</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in table text</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A character token that is U+0000 NULL</dt>
    <dd>

    <a>Parse error</a>. Ignore the token.

    </dd>

    <dt>Any other character token</dt>
    <dd>

    Append the character token to the <var>pending
    table character tokens</var> list.

    </dd>

    <dt>Anything else</dt>
    <dd>

    If any of the tokens in the <var>pending table
    character tokens</var> list are character tokens that are not <a>space characters</a>, then this is a <a>parse error</a>: reprocess the
    character tokens in the <var>pending table character
    tokens</var> list using the rules given in the "anything else" entry in the "<a>in table</a>" insertion mode.

    Otherwise, <a>insert the characters</a> given by the <var>pending table character tokens</var> list.

    Switch the <a>insertion mode</a> to the <a>original insertion mode</a> and
    reprocess the token.

    </dd>

  </dl>

<h6 id="the-"in-caption"-insertion-mode"><dfn>The "<dfn>in caption</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  caption</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>An end tag whose tag name is "caption"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>caption</code> element in table scope</a>, this is a <a>parse
    error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise:

    <a>Generate implied end tags</a>.

    Now, if the <a>current node</a> is not a <code>caption</code> element, then this is a
    <a>parse error</a>.

    Pop elements from this stack until a <code>caption</code> element has been popped from the
    stack.

    <a>Clear the list of active formatting elements up to the last marker</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "caption", "col", "colgroup", "tbody", "td", "tfoot",
    "th", "thead", "tr"</dt> <dt>An end tag whose tag name is "table"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>caption</code> element in table scope</a>, this is a <a>parse
    error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise:

    <a>Generate implied end tags</a>.

    Now, if the <a>current node</a> is not a <code>caption</code> element, then this is a
    <a>parse error</a>.

    Pop elements from this stack until a <code>caption</code> element has been popped from the
    stack.

    <a>Clear the list of active formatting elements up to the last marker</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

    Reprocess the token.

    </dd>

    <dt>An end tag whose tag name is one of: "body", "col", "colgroup", "html", "tbody", "td",
    "tfoot", "th", "thead", "tr"</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

  </dl>

<h6 id="the-"in-column-group"-insertion-mode"><dfn>The "<dfn>in column group</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in column group</a>" <a>insertion mode</a>, the user agent must handle the token
  as follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    <a>Insert the character</a>.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>A start tag whose tag name is "col"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.
    </dd>

    <dt>An end tag whose tag name is "colgroup"</dt>
    <dd>

    If the <a>current node</a> is not a <code>colgroup</code> element, then this is a
    <a>parse error</a>; ignore the token.

    Otherwise, pop the <a>current node</a> from the <a>stack of open elements</a>.
    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

    </dd>

    <dt>An end tag whose tag name is "col"</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "template"</dt>
    <dt>An end tag whose tag name is "template"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>Anything else</dt>
    <dd>

    If the <a>current node</a> is not a <code>colgroup</code> element, then this is a
    <a>parse error</a>; ignore the token.

    Otherwise, pop the <a>current node</a> from the <a>stack of open
    elements</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table</a>".

    Reprocess the token.

    </dd>

  </dl>

<h6 id="the-"in-table-body"-insertion-mode"><dfn>The "<dfn>in table body</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in table body</a>" <a>insertion mode</a>, the user agent must handle the token as
  follows:

  <dl class="switch">

    <dt>A start tag whose tag name is "tr"</dt>
    <dd>

    <a>Clear the stack back to a table body context</a>. (See below.)

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in row</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "th", "td"</dt>
    <dd>

    <a>Parse error</a>.

    <a>Clear the stack back to a table body context</a>. (See below.)

    <a>Insert an HTML element</a> for a "tr" start tag token with no attributes, then
    switch the <a>insertion mode</a> to "<a>in
    row</a>".

    Reprocess the current token.

    </dd>

    <dt>An end tag whose tag name is one of: "tbody", "tfoot",
    "thead"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as the token, this is a <a>parse error</a>;
    ignore the token.

    Otherwise:

    <a>Clear the stack back to a table body context</a>. (See below.)

    Pop the <a>current node</a> from the <a>stack of open elements</a>. Switch the
    <a>insertion mode</a> to "<a>in table</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "caption", "col",
    "colgroup", "tbody", "tfoot", "thead"</dt>
    <dt>An end tag whose tag name is "table"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>tbody</code>, <code>thead</code>, or <code>tfoot</code> element in table
    scope</a>, this is a <a>parse error</a>; ignore the token.

    Otherwise:

    <a>Clear the stack back to a table body context</a>. (See below.)

    Pop the <a>current node</a> from the <a>stack of open elements</a>. Switch the
    <a>insertion mode</a> to "<a>in table</a>".

    Reprocess the token.

    </dd>

    <dt>An end tag whose tag name is one of: "body", "caption", "col", "colgroup", "html", "td",
    "th", "tr"</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>
    Process the token <a>using the rules for</a> the "<a>in table</a>" <a>insertion mode</a>.
    </dd>

  </dl>

  When the steps above require the UA to <dfn>clear the stack back to a table body context</dfn>,
  it means that the UA must, while the <a>current node</a> is not a <code>tbody</code>,
  <code>tfoot</code>, <code>thead</code>, <code>template</code>, or <code>html</code> element, pop
  elements from the <a>stack of open elements</a>.

  <p class="note">
  The <a>current node</a> being an <code>html</code> element after this
  process is a <a>fragment case</a>.
  </p>

<h6 id="the-"in-row"-insertion-mode"><dfn>The "<dfn>in row</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  row</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A start tag whose tag name is one of: "th", "td"</dt>
    <dd>

    <a>Clear the stack back to a table row context</a>. (See below.)

    <a>Insert an HTML element</a> for the token, then switch the <a>insertion
    mode</a> to "<a>in cell</a>".

    Insert a <a>marker</a> at the end of the <a>list of
    active formatting elements</a>.

    </dd>

    <dt>An end tag whose tag name is "tr"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>tr</code> element in table scope</a>, this is a <a>parse error</a>;
    ignore the token.

    Otherwise:

    <a>Clear the stack back to a table row context</a>. (See below.)

    Pop the <a>current node</a> (which will be a <code>tr</code> element) from the
    <a>stack of open elements</a>. Switch the <a>insertion mode</a> to "<a>in table body</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "caption", "col", "colgroup", "tbody", "tfoot",
    "thead", "tr"</dt>
    <dt>An end tag whose tag name is "table"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>tr</code> element in table scope</a>, this is a <a>parse error</a>;
    ignore the token.

    Otherwise:

    <a>Clear the stack back to a table row context</a>. (See below.)

    Pop the <a>current node</a> (which will be a <code>tr</code> element) from the
    <a>stack of open elements</a>. Switch the <a>insertion mode</a> to "<a>in table body</a>".

    Reprocess the token.

    </dd>

    <dt>An end tag whose tag name is one of: "tbody", "tfoot", "thead"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as the token, this is a <a>parse error</a>;
    ignore the token.

    If the <a>stack of open elements</a> does not <a>have a <code>tr</code> element in table scope</a>, ignore the token.

    Otherwise:

    <a>Clear the stack back to a table row context</a>. (See below.)

    Pop the <a>current node</a> (which will be a <code>tr</code> element) from the
    <a>stack of open elements</a>. Switch the <a>insertion mode</a> to "<a>in table body</a>".

    Reprocess the token.

    </dd>

    <dt>An end tag whose tag name is one of: "body", "caption", "col", "colgroup", "html", "td",
    "th"</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Anything else</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in table</a>" <a>insertion mode</a>.

    </dd>

  </dl>

  When the steps above require the UA to <dfn>clear the stack back to a table row context</dfn>,
  it means that the UA must, while the <a>current node</a> is not a <code>tr</code>,
  <code>template</code>, or <code>html</code> element, pop elements from the <a>stack of open
  elements</a>.

  <p class="note">
  The <a>current node</a> being an <code>html</code> element after this
  process is a <a>fragment case</a>.
  </p>

<h6 id="the-"in-cell"-insertion-mode"><dfn>The "<dfn>in cell</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in cell</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>An end tag whose tag name is one of: "td", "th"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise:

    <a>Generate implied end tags</a>.

    Now, if the <a>current node</a> is not an <a>HTML
    element</a> with the same tag name as the token, then this is a <a>parse error</a>.

    Pop elements from the <a>stack of open elements</a> stack until an <a>HTML element</a> with the same tag name as the token has been popped from the
    stack.

    <a>Clear the list of active formatting elements up to the last marker</a>.

    Switch the <a>insertion mode</a> to "<a>in
    row</a>".

    </dd>

    <dt>A start tag whose tag name is one of: "caption", "col",
    "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"</dt>
    <dd>

    If the <a>stack of open elements</a> does <em>not</em> <a>have a <code>td</code> or <code>th</code> element in table scope</a>, then this
    is a <a>parse error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise, <a>close the cell</a> (see below) and reprocess the token.

    </dd>

    <dt>An end tag whose tag name is one of: "body", "caption",
    "col", "colgroup", "html"</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>An end tag whose tag name is one of: "table", "tbody",
    "tfoot", "thead", "tr"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then this is a <a>parse
    error</a>; ignore the token.

    Otherwise, <a>close the cell</a> (see below) and reprocess the token.

    </dd>

    <dt>Anything else</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

  </dl>

  Where the steps above say to <dfn>close the cell</dfn>, they mean to run the following
  algorithm:

  <ol>

    <li><a>Generate implied end tags</a>.</li>

    <li>If the <a>current node</a> is not now a <code>td</code> element or a <code>th</code>
    element, then this is a <a>parse error</a>.</li>

    <li>Pop elements from the <a>stack of open elements</a> stack until a <code>td</code>
    element or a <code>th</code> element has been popped from the stack.</li>

    <li><a>Clear the list of active formatting elements up to the last marker</a>.</li>

    <li>Switch the <a>insertion mode</a> to "<a>in
    row</a>".</li>

  </ol>

  <p class="note">
  The <a>stack of open elements</a> cannot have both a <code>td</code> and a
  <code>th</code> element <a>in table scope</a> at the
  same time, nor can it have neither when the <a>close the cell</a> algorithm is invoked.
  </p>

<h6 id="the-"in-select"-insertion-mode"><dfn>The "<dfn>in select</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  select</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token that is U+0000 NULL</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>Any other character token</dt>
    <dd>

    <a>Insert the token's character</a>.

    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>A start tag whose tag name is "option"</dt>
    <dd>

    If the <a>current node</a> is an <code>option</code> element, pop that node from the
    <a>stack of open elements</a>.

    <a>Insert an HTML element</a> for the token.

    </dd>

    <dt>A start tag whose tag name is "optgroup"</dt>
    <dd>

    If the <a>current node</a> is an <code>option</code> element, pop that node from the
    <a>stack of open elements</a>.

    If the <a>current node</a> is an <code>optgroup</code> element, pop that node from the
    <a>stack of open elements</a>.

    <a>Insert an HTML element</a> for the token.

    </dd>

    <dt>An end tag whose tag name is "optgroup"</dt>
    <dd>

    First, if the <a>current node</a> is an <code>option</code> element, and the node
    immediately before it in the <a>stack of open elements</a> is an <code>optgroup</code>
    element, then pop the <a>current node</a> from the <a>stack of open
    elements</a>.

    If the <a>current node</a> is an <code>optgroup</code> element, then pop that node from
    the <a>stack of open elements</a>. Otherwise, this is a <a>parse error</a>; ignore
    the token.

    </dd>

    <dt>An end tag whose tag name is "option"</dt>
    <dd>

    If the <a>current node</a> is an <code>option</code> element, then pop that node from
    the <a>stack of open elements</a>. Otherwise, this is a <a>parse error</a>; ignore
    the token.

    </dd>

    <dt>An end tag whose tag name is "select"</dt>
    <dd>

    If the <a>stack of open elements</a> does not <a>have a <code>select</code> element in select scope</a>, this is a <a>parse
    error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise:

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    </dd>

    <dt>A start tag whose tag name is "select"</dt>
    <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> does not <a>have a <code>select</code> element in select scope</a>, ignore the token.
    (<a>fragment case</a>)

    Otherwise:

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    <p class="note">
  It just gets treated like an end tag.
  </p>

    </dd>

    <dt>A start tag whose tag name is one of: "input", "keygen", "textarea"</dt>
    <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> does not <a>have a <code>select</code> element in select scope</a>, ignore the token.
    (<a>fragment case</a>)

    Otherwise:

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

    </dd>

    <dt>A start tag whose tag name is one of: "script", "template"</dt>
    <dt>An end tag whose tag name is "template"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>Anything else</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

  </dl>

<h6 id="the-"in-select-in-table"-insertion-mode"><dfn>The "<dfn>in select in table</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in select in table</a>" <a>insertion mode</a>, the user agent must handle the
  token as follows:

  <dl class="switch">

    <dt>A start tag whose tag name is one of: "caption", "table", "tbody", "tfoot", "thead", "tr",
    "td", "th"</dt>
    <dd>

    <a>Parse error</a>.

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

    </dd>

    <dt>An end tag whose tag name is one of: "caption", "table", "tbody", "tfoot", "thead", "tr",
    "td", "th"</dt>
    <dd>

    <a>Parse error</a>.

    If the <a>stack of open elements</a> does not <a>have an element in table scope</a> that is an <a>HTML
    element</a> with the same tag name as that of the token, then ignore the token.

    Otherwise:

    Pop elements from the <a>stack of open elements</a> until a <code>select</code> element
    has been popped from the stack.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

    </dd>

    <dt>Anything else</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in select</a>" <a>insertion mode</a>.

    </dd>

  </dl>

<h6 id="the-"in-template"-insertion-mode"><dfn>The "<dfn>in template</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  template</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token</dt>
    <dt>A comment token</dt>
    <dt>A DOCTYPE token</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>A start tag whose tag name is one of: "base", "basefont", "bgsound", "link", "meta", "noframes", "script", "style", "template", "title"</dt>
    <dt>An end tag whose tag name is "template"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>A start tag whose tag name is one of: "caption", "colgroup", "tbody", "tfoot", "thead"</dt>
    <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in table</a>" onto the <a>stack of
    template insertion modes</a> so that it is the new <a>current template insertion
    mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table</a>", and reprocess the token.

    </dd>

    <dt>A start tag whose tag name is "col"</dt>
    <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in column group</a>" onto the
    <a>stack of template insertion modes</a> so that it is the new <a>current template
    insertion mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    column group</a>", and reprocess the token.

    </dd>

    <dt>A start tag whose tag name is "tr"</dt>
    <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in table body</a>" onto the <a>stack
    of template insertion modes</a> so that it is the new <a>current template insertion
    mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    table body</a>", and reprocess the token.

    </dd>

    <dt>A start tag whose tag name is one of: "td", "th"</dt>
    <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in row</a>" onto the <a>stack of template
    insertion modes</a> so that it is the new <a>current template insertion mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    row</a>", and reprocess the token.

    </dd>

    <dt>Any other start tag</dt>
    <dd>

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    Push "<a>in body</a>" onto the <a>stack of template
    insertion modes</a> so that it is the new <a>current template insertion mode</a>.

    Switch the <a>insertion mode</a> to "<a>in
    body</a>", and reprocess the token.

    </dd>

    <dt>Any other end tag</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    If there is no <code>template</code> element on the <a>stack of open elements</a>, then
    <a>stop parsing</a>. (<a>fragment case</a>)

    Otherwise, this is a <a>parse error</a>.

    Pop elements from the <a>stack of open elements</a> until a <code>template</code>
    element has been popped from the stack.

    <a>Clear the list of active formatting elements up to the last marker</a>.

    Pop the <a>current template insertion mode</a> off the <a>stack of template
    insertion modes</a>.

    <a>Reset the insertion mode appropriately</a>.

    Reprocess the token.

    </dd>

  </dl>

<h6 id="the-"after-body"-insertion-mode"><dfn>The "<dfn>after body</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after body</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>A comment token</dt>
    <dd>

    <a>Insert a comment</a> as the last child of the first element in the <a>stack of
    open elements</a> (the <code>html</code> element).

    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end tag whose tag name is "html"</dt>
    <dd>

    If the parser was originally created as part of the <a>HTML fragment parsing
    algorithm</a>, this is a <a>parse error</a>; ignore the token. (<a>fragment
    case</a>)

    Otherwise, switch the <a>insertion mode</a> to "<a>after after body</a>".

    </dd>

    <dt>An end-of-file token</dt>
    <dd>
    <a>Stop parsing</a>.
    </dd>

    <dt>Anything else</dt>
    <dd>

    <a>Parse error</a>. Switch the <a>insertion mode</a> to "<a>in body</a>" and reprocess the token.

    </dd>

  </dl>

<h6 id="the-"in-frameset"-insertion-mode"><dfn>The "<dfn>in frameset</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>in
  frameset</a>" <a>insertion mode</a>, the user agent must handle the token as follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    <a>Insert the character</a>.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>A start tag whose tag name is "frameset"</dt>
    <dd>
    <a>Insert an HTML element</a> for the token.
    </dd>

    <dt>An end tag whose tag name is "frameset"</dt>
    <dd>

    If the <a>current node</a> is the root <code>html</code> element, then this is a
    <a>parse error</a>; ignore the token. (<a>fragment case</a>)

    Otherwise, pop the <a>current node</a> from the <a>stack of open
    elements</a>.

    If the parser was <em>not</em> originally created as part of the <a>HTML fragment parsing
    algorithm</a> (<a>fragment case</a>), and the <a>current node</a> is no longer a
    <code>frameset</code> element, then switch the <a>insertion mode</a> to "<a>after frameset</a>".

    </dd>

    <dt>A start tag whose tag name is "frame"</dt>
    <dd>

    <a>Insert an HTML element</a> for the token. Immediately pop the <a>current
    node</a> off the <a>stack of open elements</a>.

    <a>Acknowledge the token's <i>self-closing
    flag</i></a>, if it is set.

    </dd>

    <dt>A start tag whose tag name is "noframes"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>

    If the <a>current node</a> is not the root <code>html</code> element, then this is a
    <a>parse error</a>.

    <p class="note">
  The <a>current node</a> can only be the root
    <code>html</code> element in the <a>fragment case</a>.
  </p>

    <a>Stop parsing</a>.

    </dd>

    <dt>Anything else</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

  </dl>

<h6 id="the-"after-frameset"-insertion-mode"><dfn>The "<dfn>after frameset</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after frameset</a>" <a>insertion mode</a>, the user agent must handle the token
  as follows:

  <dl class="switch">

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>
    <a>Insert the character</a>.
    </dd>

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a>.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end tag whose tag name is "html"</dt>
    <dd>

    Switch the <a>insertion mode</a> to "<a>after after frameset</a>".

    </dd>

    <dt>A start tag whose tag name is "noframes"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>
    <a>Stop parsing</a>.
    </dd>

    <dt>Anything else</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

  </dl>

<h6 id="the-"after-after-body"-insertion-mode"><dfn>The "<dfn>after after body</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after after body</a>" <a>insertion mode</a>, the user agent must handle the token
  as follows:

  <dl class="switch">

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a> as the last child of the <code>Document</code> object.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>
    <a>Stop parsing</a>.
    </dd>

    <dt>Anything else</dt>
    <dd>

    <a>Parse error</a>. Switch the <a>insertion mode</a> to "<a>in body</a>" and reprocess the token.

    </dd>

  </dl>

<h6 id="the-"after-after-frameset"-insertion-mode"><dfn>The "<dfn>after after frameset</dfn>" insertion mode</dfn></h6>

  When the user agent is to apply the rules for the "<a>after after frameset</a>" <a>insertion mode</a>, the user agent must handle the
  token as follows:

  <dl class="switch">

    <dt>A comment token</dt>
    <dd>
    <a>Insert a comment</a> as the last child of the <code>Document</code> object.
    </dd>

    <dt>A DOCTYPE token</dt>
    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dt>A start tag whose tag name is "html"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in body</a>" <a>insertion mode</a>.

    </dd>

    <dt>An end-of-file token</dt>
    <dd>
    <a>Stop parsing</a>.
    </dd>

    <dt>A start tag whose tag name is "noframes"</dt>
    <dd>

    Process the token <a>using the rules for</a> the "<a>in head</a>" <a>insertion mode</a>.

    </dd>

    <dt>Anything else</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

  </dl>

<h5 id="the-rules-for-parsing-tokens-in-foreign-content"><dfn>The rules for parsing tokens <dfn>in foreign content</dfn></dfn></h5>

  When the user agent is to apply the rules for parsing tokens in foreign content, the user agent
  must handle the token as follows:

  <dl class="switch">

    <dt>A character token that is U+0000 NULL</dt>
    <dd>

    <a>Parse error</a>. <a>Insert a U+FFFD REPLACEMENT
    CHARACTER character</a>.

    </dd>

    <dt>A character token that is one of U+0009 CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C
    FORM FEED (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
    <dd>

    <a>Insert the token's character</a>.

    </dd>

    <dt>Any other character token</dt>
    <dd>

    <a>Insert the token's character</a>.

    Set the <a>frameset-ok flag</a> to "not ok".

    </dd>

    <dt>A comment token</dt>
    <dd>

    <a>Insert a comment</a>.

    </dd>

    <dt>A DOCTYPE token</dt>
    <dd>
    <a>Parse error</a>. Ignore the token.
    </dd>

    <dt>A start tag whose tag name is one of:  "b", "big", "blockquote", "body", "br", "center", "code", "dd", "div", "dl", "dt", "em", "embed", "h1", "h2", "h3", "h4", "h5", "h6", "head", "hr", "i", "img",
    "li", "listing",
    "menu", "meta", "nobr", "ol", "p", "pre", "ruby", "s",  "small", "span", "strong", "strike",  "sub",
    "sup", "table", "tt", "u", "ul", "var"</dt>
    <dt>A start tag whose tag name is "font", if the token has any attributes named "color", "face",
    or "size"</dt>

    <dd>

    <a>Parse error</a>.

    If the parser was originally created for the <a>HTML fragment parsing algorithm</a>,
    then act as described in the "any other start tag" entry below. (<a>fragment case</a>)

    Otherwise:

    Pop an element from the <a>stack of open elements</a>, and then keep popping more
    elements from the <a>stack of open elements</a> until the <a>current node</a> is a
    <a>MathML text integration point</a>, an <a>HTML integration point</a>, or an
    element in the <a>HTML namespace</a>.

    Then, reprocess the token.

    </dd>

    <dt>Any other start tag</dt>
    <dd>

    If the <a>adjusted current node</a> is an element in the <a>MathML namespace</a>,
    <a>adjust MathML attributes</a> for the token. (This fixes the case of MathML attributes
    that are not all lowercase.)

    If the <a>adjusted current node</a> is an element in the <a>SVG namespace</a>, and the
    token's tag name is one of the ones in the first column of the following table, change the tag
    name to the name given in the corresponding cell in the second column. (This fixes the case of
    SVG elements that are not all lowercase.)

    <table>
      <thead>
      <tr> <th> Tag name <th> Element name
      <tbody>
      <tr> <td> <code>altglyph</code> <td> <code>altGlyph</code>
      <tr> <td> <code>altglyphdef</code> <td> <code>altGlyphDef</code>
      <tr> <td> <code>altglyphitem</code> <td> <code>altGlyphItem</code>
      <tr> <td> <code>animatecolor</code> <td> <code>animateColor</code>
      <tr> <td> <code>animatemotion</code> <td> <code>animateMotion</code>
      <tr> <td> <code>animatetransform</code> <td> <code>animateTransform</code>
      <tr> <td> <code>clippath</code> <td> <code>clipPath</code>
      <tr> <td> <code>feblend</code> <td> <code>feBlend</code>
      <tr> <td> <code>fecolormatrix</code> <td> <code>feColorMatrix</code>
      <tr> <td> <code>fecomponenttransfer</code> <td> <code>feComponentTransfer</code>
      <tr> <td> <code>fecomposite</code> <td> <code>feComposite</code>
      <tr> <td> <code>feconvolvematrix</code> <td> <code>feConvolveMatrix</code>
      <tr> <td> <code>fediffuselighting</code> <td> <code>feDiffuseLighting</code>
      <tr> <td> <code>fedisplacementmap</code> <td> <code>feDisplacementMap</code>
      <tr> <td> <code>fedistantlight</code> <td> <code>feDistantLight</code>
      <tr> <td> <code>fedropshadow</code> <td> <code>feDropShadow</code>
      <tr> <td> <code>feflood</code> <td> <code>feFlood</code>
      <tr> <td> <code>fefunca</code> <td> <code>feFuncA</code>
      <tr> <td> <code>fefuncb</code> <td> <code>feFuncB</code>
      <tr> <td> <code>fefuncg</code> <td> <code>feFuncG</code>
      <tr> <td> <code>fefuncr</code> <td> <code>feFuncR</code>
      <tr> <td> <code>fegaussianblur</code> <td> <code>feGaussianBlur</code>
      <tr> <td> <code>feimage</code> <td> <code>feImage</code>
      <tr> <td> <code>femerge</code> <td> <code>feMerge</code>
      <tr> <td> <code>femergenode</code> <td> <code>feMergeNode</code>
      <tr> <td> <code>femorphology</code> <td> <code>feMorphology</code>
      <tr> <td> <code>feoffset</code> <td> <code>feOffset</code>
      <tr> <td> <code>fepointlight</code> <td> <code>fePointLight</code>
      <tr> <td> <code>fespecularlighting</code> <td> <code>feSpecularLighting</code>
      <tr> <td> <code>fespotlight</code> <td> <code>feSpotLight</code>
      <tr> <td> <code>fetile</code> <td> <code>feTile</code>
      <tr> <td> <code>feturbulence</code> <td> <code>feTurbulence</code>
      <tr> <td> <code>foreignobject</code> <td> <code>foreignObject</code>
      <tr> <td> <code>glyphref</code> <td> <code>glyphRef</code>
      <tr> <td> <code>lineargradient</code> <td> <code>linearGradient</code>
      <tr> <td> <code>radialgradient</code> <td> <code>radialGradient</code>

      <tr> <td> <code>textpath</code> <td> <code>textPath</code>
    </table>

    If the <a>adjusted current node</a> is an element in the <a>SVG namespace</a>,
    <a>adjust SVG attributes</a> for the token. (This fixes the case of SVG attributes that
    are not all lowercase.)

    <a>Adjust foreign attributes</a> for the token. (This fixes the use of namespaced
    attributes, in particular XLink in SVG.)

    <a>Insert a foreign element</a> for the token, in the same namespace as the
    <a>adjusted current node</a>.

    If the token has its <i>self-closing flag</i> set, then run the appropriate steps from the
    following list:

    <dl class="switch">

      <dt>If the token's tag name is "script", and the new <a>current node</a> is in the <a>SVG namespace</a></dt>

      <dd>

      <a>Acknowledge the token's <i>self-closing
      flag</i></a>, and then act as described in the steps for a "script" end tag below.

      </dd>

      <dt>Otherwise</dt>

      <dd>

      Pop the <a>current node</a> off the <a>stack of open elements</a> and <a>acknowledge the token's <i>self-closing
      flag</i></a>.

      </dd>

    </dl>

    </dd>

    <dt>An end tag whose tag name is "script", if the <a>current node</a> is a <code>script</code> element in the <a>SVG namespace</a></dt>
    <dd>

    Pop the <a>current node</a> off the <a>stack of open elements</a>.

    Let the <var>old insertion point</var> have the same value as the current
    <a>insertion point</a>. Let the <a>insertion point</a> be just before the <a>next
    input character</a>.

    Increment the parser's <a>script nesting level</a> by one. Set the <a>parser pause
    flag</a> to true.

    <a>Process the
    <code>script</code> element</a> according to the SVG rules, if the user agent supports
    SVG. [[!SVG]]

    <p class="note">
  Even if this causes <a>new characters to be
    inserted into the tokenizer</a>, the parser will not be executed reentrantly, since the
    <a>parser pause flag</a> is true.
  </p>

    Decrement the parser's <a>script nesting level</a> by one. If the parser's <a>script
    nesting level</a> is zero, then set the <a>parser pause flag</a> to false.

    Let the <a>insertion point</a> have the value of the <var>old insertion
    point</var>. (In other words, restore the <a>insertion point</a> to its previous value.
    This value might be the "undefined" value.)

    </dd>

    <dt>Any other end tag</dt>

    <dd>

    Run these steps:

    <ol>

      <li>Initialize <var>node</var> to be the <a>current node</a> (the bottommost
      node of the stack).</li>

      <li>If <var>node</var>'s tag name, <a>converted to ASCII lowercase</a>, is
      not the same as the tag name of the token, then this is a <a>parse error</a>.</li>

      <li><i>Loop</i>: If <var>node</var> is the topmost element in the <a>stack of
      open elements</a>, abort these steps. (<a>fragment case</a>)</li>

      <li>If <var>node</var>'s tag name, <a>converted to ASCII lowercase</a>, is
      the same as the tag name of the token, pop elements from the <a>stack of open
      elements</a> until <var>node</var> has been popped from the stack, and then abort
      these steps.</li>

      <li>Set <var>node</var> to the previous entry in the <a>stack of open
      elements</a>.</li>

      <li>If <var>node</var> is not an element in the <a>HTML namespace</a>, return
      to the step labeled <i>loop</i>.</li>

      <li>Otherwise, process the token according to the rules given in the section corresponding
      to the current <a>insertion mode</a> in HTML content.</li>

    </ol>

    </dd>

  </dl>

  </div>

  <div class="impl">

<h4 id="the-end"><dfn>The end</dfn></h4>

  Once the user agent <dfn>stops parsing</dfn> the document, the user agent
  must run the following steps:

  <ol>

    <li>Set the <a>current document readiness</a> to "<code>interactive</code>"
    and the <a>insertion point</a> to
    undefined.</li>

    <li>Pop <em>all</em> the nodes off the <a>stack of open elements</a>.</li>

    <li>If the <a>list of scripts that will execute when the document has finished
    parsing</a> is not empty, run these substeps:

    <ol>

      <li><a>Spin the event loop</a> until the first <code>script</code> in the <a>list
      of scripts that will execute when the document has finished parsing</a> has its <a>"ready
      to be parser-executed"</a> flag set <em>and</em> the parser's <code>Document</code>
      <a>has no style sheet that is blocking scripts</a>.</li>

      <li><a>Execute</a> the first <code>script</code> in
      the <a>list of scripts that will execute when the document has finished
      parsing</a>.</li>

      <li>Remove the first <code>script</code> element from the <a>list of scripts that will
      execute when the document has finished parsing</a> (i.e. shift out the first entry in the
      list).</li>

      <li>If the <a>list of scripts that will execute when the document has finished
      parsing</a> is still not empty, repeat these substeps again from substep 1.

    </ol>

    </li>

    <li><a>Queue a task</a> to <a>fire a simple event</a> that bubbles named <code>DOMContentLoaded</code> at the <code>Document</code>.</li>

    <li><a>Spin the event loop</a> until the <a>set of scripts that will execute as soon
    as possible</a> and the <a>list of scripts that will execute in order as soon as
    possible</a> are empty.</li>

    <li><a>Spin the event loop</a> until there is nothing that <dfn>delays the load event</dfn> in the <code>Document</code>.</li>

    <li>

    <a>Queue a task</a> to run the following substeps:

    <ol>

      <li>Set the <a>current document readiness</a> to "<code>complete</code>".</li>

      <li><i>Load event</i>: If the <code>Document</code> is in a <a>browsing context</a>,
      <a>fire a simple event</a> named <code>load</code> at the
      <code>Document</code>'s <code>Window</code> object, with <i>target override</i> set to the <code>Document</code>
      object.</li>

    </ol>

    </li>

    <li>

    If the <code>Document</code> is in a <a>browsing context</a>, then <a>queue a
    task</a> to run the following substeps:

    <ol>

      <li>If the <code>Document</code>'s <a>page showing</a> flag is true, then abort this
      task (i.e. don't fire the event below).</li>

      <li>Set the <code>Document</code>'s <a>page showing</a> flag to true.</li>

      <li><a>Fire</a> a <a>trusted</a> event with the name <code>pageshow</code> at the <code>Window</code> object of the
      <code>Document</code>, with <i>target override</i> set to the <code>Document</code>
      object,
      using the <code>PageTransitionEvent</code> interface, with the <code>persisted</code> attribute initialized to false. This
      event must not bubble, must not be cancelable, and has no default action.</li>

    </ol>

    </li>

    <li>If the <code>Document</code> has any <a>pending application cache download process
    tasks</a>, then <a>queue</a> each such <a>task</a> in the order they were added to the list of <a>pending
    application cache download process tasks</a>, and then empty the list of <a>pending
    application cache download process tasks</a>. The <a>task source</a> for these <a>tasks</a> is the <a>networking task source</a>.</li>

    <li>If the <code>Document</code>'s <a>print when loaded</a> flag is set, then run the
    <a>printing steps</a>.</li>

    <li>The <code>Document</code> is now <dfn>ready for post-load tasks</dfn>.</li>

    <li><a>Queue a task</a> to mark the <code>Document</code> as <dfn>completely
    loaded</dfn>.</li>

  </ol>

  When the user agent is to <dfn>abort a parser</dfn>, it must run the following steps:

  <ol>

    <li>Throw away any pending content in the <a>input stream</a>, and discard any future
    content that would have been added to it.</li>

    <li>Set the <a>current document readiness</a> to "<code>interactive</code>".</li>

    <li>Pop <em>all</em> the nodes off the <a>stack of open elements</a>.</li>

    <li>Set the <a>current document readiness</a> to "<code>complete</code>".</li>

  </ol>

  Except where otherwise specified, the <a>task source</a> for the <a>tasks</a> mentioned in this section is the <a>DOM manipulation task
  source</a>.

  </div>

  <div class="impl">

<h4 id="coercing-an-html-dom-into-an-infoset"><dfn>Coercing an HTML DOM into an infoset</dfn></h4>

  When an application uses an <a>HTML parser</a> in conjunction with an XML pipeline, it is
  possible that the constructed DOM is not compatible with the XML tool chain in certain subtle
  ways. For example, an XML toolchain might not be able to represent attributes with the name <code>xmlns</code>, since they conflict with the Namespaces in XML syntax. There is also some
  data that the <a>HTML parser</a> generates that isn't included in the DOM itself. This
  section specifies some rules for handling these issues.

  If the XML API being used doesn't support DOCTYPEs, the tool may drop DOCTYPEs altogether.

  If the XML API doesn't support attributes in no namespace that are named "<code>xmlns</code>", attributes whose names start with "<code>xmlns:</code>", or
  attributes in the <a>XMLNS namespace</a>, then the tool may drop such attributes.

  The tool may annotate the output with any namespace declarations required for proper
  operation.

  If the XML API being used restricts the allowable characters in the local names of elements and
  attributes, then the tool may map all element and attribute local names that the API wouldn't
  support to a set of names that <em>are</em> allowed, by replacing any character that isn't
  supported with the uppercase letter U and the six digits of the character's Unicode code point
  when expressed in hexadecimal, using digits 0-9 and capital letters A-F as the symbols, in
  increasing numeric order.

  <p class="example">
  For example, the element name <code>foo&lt;bar</code>, which can be
  output by the <a>HTML parser</a>, though it is neither a legal HTML element name nor a
  well-formed XML element name, would be converted into <code>fooU00003Cbar</code>, which
  <em>is</em> a well-formed XML element name (though it's still not legal in HTML by any means).
  </p>

  <p class="example">
  As another example, consider the attribute <code>xlink:href</code>.
  Used on a MathML element, it becomes, after being <a>adjusted</a>, an attribute with a prefix "<code>xlink</code>" and a local
  name "<code>href</code>". However, used on an HTML element, it becomes an attribute with
  no prefix and the local name "<code>xlink:href</code>", which is not a valid NCName, and
  thus might not be accepted by an XML API. It could thus get converted, becoming "<code>xlinkU00003Ahref</code>".
  </p>

  <p class="note">
  The resulting names from this conversion conveniently can't clash with any
  attribute generated by the <a>HTML parser</a>, since those are all either lowercase or those
  listed in the <a>adjust foreign attributes</a> algorithm's table.
  </p>

  If the XML API restricts comments from having two consecutive U+002D HYPHEN-MINUS characters
  (--), the tool may insert a single U+0020 SPACE character between any such offending
  characters.

  If the XML API restricts comments from ending in a U+002D HYPHEN-MINUS character (-), the tool
  may insert a single U+0020 SPACE character at the end of such comments.

  If the XML API restricts allowed characters in character data, attribute values, or comments,
  the tool may replace any U+000C FORM FEED (FF) character with a U+0020 SPACE character, and any
  other literal non-XML character with a U+FFFD REPLACEMENT CHARACTER.

  If the tool has no way to convey out-of-band information, then the tool may drop the following
  information:

  <ul>

    <li>Whether the document is set to <i>no-quirks mode</i>, <i>limited-quirks mode</i>, or
    <i>quirks mode</i></li>

    <li>The association between form controls and forms that aren't their nearest <code>form</code>
    element ancestor (use of the <a><code>form</code> element pointer</a> in the parser)</li>

    <li>The <a>template contents</a> of any <code>template</code> elements.</li>

  </ul>

  <p class="note">
  The mutations allowed by this section apply <em>after</em> the <a>HTML
  parser</a>'s rules have been applied. For example, a <code>&lt;a::></code> start tag
  will be closed by a <code>&lt;/a::></code> end tag, and never by a <code>&lt;/aU00003AU00003A></code> end tag, even if the user agent is using the rules above to
  then generate an actual element in the DOM with the name <code>aU00003AU00003A</code> for
  that start tag.
  </p>

  </div>

  <div class="impl">

<h4 id="an-introduction-to-error-handling-and-strange-cases-in-the-parser"><dfn>An introduction to error handling and strange cases in the parser</dfn></h4>

  <em>This section is non-normative.</em>

  This section examines some erroneous markup and discusses how the <a>HTML parser</a>
  handles these cases.

<h5 id="misnested-tags:-&lt;b>&lt;i>&lt;/b>&lt;/i>"><dfn>Misnested tags: &lt;b>&lt;i>&lt;/b>&lt;/i></dfn></h5>

  <em>This section is non-normative.</em>

  The most-often discussed example of erroneous markup is as follows:

  <pre highlight="html">
  &lt;p>1&lt;b>2&lt;i>3&lt;/b>4&lt;/i>5&lt;/p>
  </pre>

  The parsing of this markup is straightforward up to the "3". At this point, the DOM looks like
  this:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>1</a></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <a>3</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>

  Here, the <a>stack of open elements</a> has five elements on it: <code>html</code>,
  <code>body</code>, <code>p</code>, <code>b</code>, and <code>i</code>. The <a>list of active
  formatting elements</a> just has two: <code>b</code> and <code>i</code>. The <a>insertion
  mode</a> is "<a>in body</a>".

  Upon receiving the end tag token with the tag name "b", the "<a>adoption
  agency algorithm</a>" is invoked. This is a simple case, in that the <var>formatting
  element</var> is the <code>b</code> element, and there is no <var>furthest block</var>.
  Thus, the <a>stack of open elements</a> ends up with just three elements: <code>html</code>,
  <code>body</code>, and <code>p</code>, while the <a>list of active formatting elements</a>
  has just one: <code>i</code>. The DOM tree is unmodified at this point.

  The next token is a character ("4"), triggers the <a>reconstruction of the active formatting elements</a>, in this case just
  the <code>i</code> element. A new <code>i</code> element is thus created for the "4"
  <code>Text</code> node. After the end tag token for the "i" is also received, and the "5"
  <code>Text</code> node is inserted, the DOM looks as follows:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>1</a></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <a>3</a></li></ul></li></ul></li><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <a>4</a></li></ul></li><li class="t3"><code>#text</code>: <a>5</a></li></ul></li></ul></li></ul></li></ul>

<h5 id="misnested-tags:-&lt;b>&lt;p>&lt;/b>&lt;/p>"><dfn>Misnested tags: &lt;b>&lt;p>&lt;/b>&lt;/p></dfn></h5>

  <em>This section is non-normative.</em>

  A case similar to the previous one is the following:

  <pre highlight="html">
  &lt;b>1&lt;p>2&lt;/b>3&lt;/p>
  </pre>

  Up to the "2" the parsing here is straightforward:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li></ul></li></ul></li></ul></li></ul>

  The interesting part is when the end tag token with the tag name "b" is parsed.

  Before that token is seen, the <a>stack of open elements</a> has four elements on it:
  <code>html</code>, <code>body</code>, <code>b</code>, and <code>p</code>. The <a>list of active
  formatting elements</a> just has the one: <code>b</code>. The <a>insertion mode</a> is
  "<a>in body</a>".

  Upon receiving the end tag token with the tag name "b", the "<a>adoption
  agency algorithm</a>" is invoked, as in the previous example. However, in this case, there
  <em>is</em> a <var>furthest block</var>, namely the <code>p</code> element. Thus, this
  time the adoption agency algorithm isn't skipped over.

  The <var>common ancestor</var> is the <code>body</code> element. A conceptual
  "bookmark" marks the position of the <code>b</code> in the <a>list of active formatting
  elements</a>, but since that list has only one element in it, the bookmark won't have much
  effect.

  As the algorithm progresses, <var>node</var> ends up set to the formatting element
  (<code>b</code>), and <var>last node</var> ends up set to the <var>furthest
  block</var> (<code>p</code>).

  The <var>last node</var> gets appended (moved) to the <var>common
  ancestor</var>, so that the DOM looks like:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li></ul></li><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li></ul></li></ul></li></ul>

  A new <code>b</code> element is created, and the children of the <code>p</code> element are
  moved to it:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li></ul></li><li class="t1"><code>p</code></li></ul></li></ul></li></ul>
  <ul class="domTree"><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li></ul>

  Finally, the new <code>b</code> element is appended to the <code>p</code> element, so that the
  DOM looks like:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li></ul></li></ul></li></ul></li></ul>

  The <code>b</code> element is removed from the <a>list of active formatting elements</a>
  and the <a>stack of open elements</a>, so that when the "3" is parsed, it is appended to the
  <code>p</code> element:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>1</a></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>2</a></li></ul></li><li class="t3"><code>#text</code>: <a>3</a></li></ul></li></ul></li></ul></li></ul>

<h5 id="unexpected-markup-in-tables"><dfn>Unexpected markup in tables</dfn></h5>

  <em>This section is non-normative.</em>

  Error handling in tables is, for historical reasons, especially strange. For example, consider
  the following markup:

  <pre highlight="html">
  &lt;table><strong>&lt;b></strong>&lt;tr>&lt;td>aaa&lt;/td>&lt;/tr><strong>bbb</strong>&lt;/table>ccc
  </pre>

  The highlighted <code>b</code> element start tag is not allowed directly inside a table like
  that, and the parser handles this case by placing the element <em>before</em> the table. (This is
  called <i>foster parenting</i>.) This can be seen by examining the DOM tree
  as it stands just after the <code>table</code> element's start tag has been seen:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>table</code></li></ul></li></ul></li></ul>

  ...and then immediately after the <code>b</code> element start tag has been seen:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code></li></ul></li></ul></li></ul>

  At this point, the <a>stack of open elements</a> has on it the elements
  <code>html</code>, <code>body</code>, <code>table</code>, and <code>b</code> (in that order,
  despite the resulting DOM tree); the <a>list of active formatting elements</a> just has the
  <code>b</code> element in it; and the <a>insertion mode</a> is "<a>in table</a>".

  The <code>tr</code> start tag causes the <code>b</code> element to be popped off the stack and
  a <code>tbody</code> start tag to be implied; the <code>tbody</code> and <code>tr</code> elements
  are then handled in a rather straight-forward manner, taking the parser through the "<a>in table body</a>" and "<a>in row</a>" insertion modes, after which the DOM looks as follows:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code></li></ul></li></ul></li></ul></li></ul></li></ul>

  Here, the <a>stack of open elements</a> has on it the elements <code>html</code>,
  <code>body</code>, <code>table</code>, <code>tbody</code>, and <code>tr</code>; the <a>list of
  active formatting elements</a> still has the <code>b</code> element in it; and the
  <a>insertion mode</a> is "<a>in row</a>".

  The <code>td</code> element start tag token, after putting a <code>td</code> element on the
  tree, puts a <a>marker</a> on the <a>list of active
  formatting elements</a> (it also switches to the "<a>in
  cell</a>" <a>insertion mode</a>).

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>

  The <a>marker</a> means that when the "aaa" character
  tokens are seen, no <code>b</code> element is created to hold the resulting <code>Text</code>
  node:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code><ul><li class="t3"><code>#text</code>: <a>aaa</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>

  The end tags are handled in a straight-forward manner; after handling them, the <a>stack of
  open elements</a> has on it the elements <code>html</code>, <code>body</code>,
  <code>table</code>, and <code>tbody</code>; the <a>list of active formatting elements</a>
  still has the <code>b</code> element in it (the <a>marker</a>
  having been removed by the "td" end tag token); and the <a>insertion mode</a> is "<a>in table body</a>".

  Thus it is that the "bbb" character tokens are found. These trigger the "<a>in table text</a>" insertion mode to be used (with the <a>original
  insertion mode</a> set to "<a>in table body</a>").
  The character tokens are collected, and when the next token (the <code>table</code> element end
  tag) is seen, they are processed as a group. Since they are not all spaces, they are handled as
  per the "anything else" rules in the "<a>in table</a>"
  insertion mode, which defer to the "<a>in body</a>"
  insertion mode but with <a>foster parenting</a>.

  When <a>the active formatting elements
  are reconstructed</a>, a <code>b</code> element is created and <a>foster parented</a>, and then the "bbb" <code>Text</code> node is appended to it:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>bbb</a></li></ul></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code><ul><li class="t3"><code>#text</code>: <a>aaa</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>

  The <a>stack of open elements</a> has on it the elements <code>html</code>,
  <code>body</code>, <code>table</code>, <code>tbody</code>, and the new <code>b</code> (again, note
  that this doesn't match the resulting tree!); the <a>list of active formatting elements</a>
  has the new <code>b</code> element in it; and the <a>insertion mode</a> is still "<a>in table body</a>".

  Had the character tokens been only <a>space characters</a>
  instead of "bbb", then those <a>space characters</a> would just be
  appended to the <code>tbody</code> element.

  Finally, the <code>table</code> is closed by a "table" end tag. This pops all the nodes from
  the <a>stack of open elements</a> up to and including the <code>table</code> element, but it
  doesn't affect the <a>list of active formatting elements</a>, so the "ccc" character tokens
  after the table result in yet another <code>b</code> element being created, this time after the
  table:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>bbb</a></li></ul></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code><ul><li class="t3"><code>#text</code>: <a>aaa</a></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>ccc</a></li></ul></li></ul></li></ul></li></ul>

<h5 id="scripts-that-modify-the-page-as-it-is-being-parsed"><dfn>Scripts that modify the page as it is being parsed</dfn></h5>

  <em>This section is non-normative.</em>

  Consider the following markup, which for this example we will assume is the document with
  <a>URL</a> <code>http://example.com/inner</code>, being rendered as the content of
  an <code>iframe</code> in another document with the <a>URL</a> <code>http://example.com/outer</code>:

  <pre highlight="html">
  &lt;div id=a>
  &lt;script>
  var div = document.getElementById('a');
  parent.document.body.appendChild(div);
  &lt;/script>
  &lt;script>
  alert(document.URL);
  &lt;/script>
  &lt;/div>
  &lt;script>
  alert(document.URL);
  &lt;/script>
  </pre>

  Up to the first "script" end tag, before the script is parsed, the result is relatively
  straightforward:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>div</code> <span class="t2"><code class="attribute name">id</code>="<code class="attribute value">a</code>"</span><ul><li class="t3"><code>#text</code>: <a>
  </a></li><li class="t1"><code>script</code><ul><li class="t3"><code>#text</code>: <a>var div = document.getElementById('a'); &#x23CE; parent.document.body.appendChild(div);</a></li></ul></li></ul></li></ul></li></ul></li></ul>

  After the script is parsed, though, the <code>div</code> element and its child
  <code>script</code> element are gone:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code></li></ul></li></ul>

  They are, at this point, in the <code>Document</code> of the aforementioned outer
  <a>browsing context</a>. However, the <a>stack of open elements</a> <em>still contains
  the <code>div</code> element</em>.

  Thus, when the second <code>script</code> element is parsed, it is inserted <em>into the outer
  <code>Document</code> object</em>.

  Those parsed into different <code>Document</code>s than the one the parser was created for do
  not execute, so the first alert does not show.

  Once the <code>div</code> element's end tag is parsed, the <code>div</code> element is popped
  off the stack, and so the next <code>script</code> element is in the inner
  <code>Document</code>:

  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>script</code><ul><li class="t3"><code>#text</code>: <a>alert(document.URL);</a></li></ul></li></ul></li></ul></li></ul>

  This script does execute, resulting in an alert that says "http://example.com/inner".

<h5 id="the-execution-of-scripts-that-are-moving-across-multiple-documents"><dfn>The execution of scripts that are moving across multiple documents</dfn></h5>

  <em>This section is non-normative.</em>

  Elaborating on the example in the previous section, consider the case where the second
  <code>script</code> element is an external script (i.e. one with a <code>src</code> attribute). Since the element was not in the parser's
  <code>Document</code> when it was created, that external script is not even downloaded.

  In a case where a <code>script</code> element with a <code>src</code>
  attribute is parsed normally into its parser's <code>Document</code>, but while the external
  script is being downloaded, the element is moved to another document, the script continues to
  download, but does not execute.

  <p class="note">
  In general, moving <code>script</code> elements between <code>Document</code>s is
  considered a bad practice.
  </p>

<h5 id="unclosed-formatting-elements"><dfn>Unclosed formatting elements</dfn></h5>

  <em>This section is non-normative.</em>

  The following markup shows how nested formatting elements (such as <code>b</code>) get
  collected and continue to be applied even as the elements they are contained in are closed, but
  that excessive duplicates are thrown away.

  <pre highlight="html">
  &lt;!DOCTYPE html>
  &lt;p>&lt;b class=x>&lt;b class=x>&lt;b>&lt;b class=x>&lt;b class=x>&lt;b>X
  &lt;p>X
  &lt;p>&lt;b>&lt;b class=x>&lt;b>X
  &lt;p>&lt;/b>&lt;/b>&lt;/b>&lt;/b>&lt;/b>&lt;/b>X
  </pre>

  The resulting DOM tree is as follows:

  <ul class="domTree"><li class="t10">DOCTYPE: <code>html</code></li><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>p</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>X&#X23CE;</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>X&#X23CE;</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code><ul><li class="t1"><code>b</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">x</code>"</span><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <a>X&#X23CE;</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <a>X&#X23CE;</a></li></ul></li></ul></li></ul></li></ul>

  Note how the second <code>p</code> element in the markup has no explicit <code>b</code>
  elements, but in the resulting DOM, up to three of each kind of formatting element (in this case
  three <code>b</code> elements with the class attribute, and two unadorned <code>b</code> elements)
  get reconstructed before the element's "X".

  Also note how this means that in the final paragraph only six <code>b</code> end tags are
  needed to completely clear the <a>list of active formatting elements</a>, even though nine <code>b</code> start
  tags have been seen up to this point.

<h3 id="serializing-html-fragments"><dfn>Serializing HTML fragments</dfn></h3>

  The following steps form the <dfn>HTML fragment serialization algorithm</dfn>. The algorithm
  takes as input a DOM <code>Element</code>, <code>Document</code>, or <code>DocumentFragment</code>
  referred to as <var>the node</var>, and either returns a string or throws an
  exception.

  <p class="note">
  This algorithm serializes the <em>children</em> of the node being serialized, not
  the node itself.
  </p>

  <ol>

    <li>Let <var>s</var> be a string, and initialize it to the empty string.</li>

    <li>If <var>the node</var> is a <code>template</code> element, then let <var>the node</var> instead be the <code>template</code> element's <a>template
    contents</a> (a <code>DocumentFragment</code> node).</li>

    <li>

    For each child node of <var>the node</var>, in <a>tree order</a>, run the
    following steps:

    <ol>

      <li>Let <var>current node</var> be the child node being processed.</li>

      <li>

      Append the appropriate string from the following list to <var>s</var>:

      <dl class="switch">

        <dt>If <var>current node</var> is an <code>Element</code></dt>

        <dd>

        If <var>current node</var> is an element in the <a>HTML namespace</a>, the
        <a>MathML namespace</a>, or the <a>SVG namespace</a>, then let <var>tagname</var> be <var>current node</var>'s local name. Otherwise, let <var>tagname</var> be <var>current node</var>'s qualified name.

        Append a U+003C LESS-THAN SIGN character (&lt;), followed by <var>tagname</var>.

        <p class="note">
  For <a>HTML elements</a> created by the <a>HTML parser</a> or
        <code>Document.createElement()</code>, <var>tagname</var> will be
        lowercase.
  </p>

        For each attribute that the element has, append a U+0020 SPACE character, the <a>attribute's serialized name as described below</a>, a
        U+003D EQUALS SIGN character (=), a U+0022 QUOTATION MARK character (&quot;), the
        attribute's value, <a>escaped as described below</a> in
        <i>attribute mode</i>, and a second U+0022 QUOTATION MARK character (&quot;).

        An <dfn>attribute's serialized name</dfn> for the purposes of the previous paragraph must
        be determined as follows:

        <dl class="switch">

          <dt>If the attribute has no namespace</dt>

          <dd>

          The attribute's serialized name is the attribute's local name.

          <p class="note">
  For attributes on <a>HTML elements</a> set by the <a>HTML
          parser</a> or by <code>Element.setAttribute()</code>, the local name will be
          lowercase.
  </p>

          </dd>

          <dt>If the attribute is in the <a>XML namespace</a></dt>

          <dd>The attribute's serialized name is the string "<code>xml:</code>" followed
          by the attribute's local name.</dd>

          <dt>If the attribute is in the <a>XMLNS namespace</a> and the attribute's local name
          is <code>xmlns</code></dt>

          <dd>The attribute's serialized name is the string "<code>xmlns</code>".</dd>

          <dt>If the attribute is in the <a>XMLNS namespace</a> and the attribute's local name
          is not <code>xmlns</code></dt>

          <dd>The attribute's serialized name is the string "<code>xmlns:</code>"
          followed by the attribute's local name.</dd>

          <dt>If the attribute is in the <a>XLink namespace</a></dt>

          <dd>The attribute's serialized name is the string "<code>xlink:</code>"
          followed by the attribute's local name.</dd>

          <dt>If the attribute is in some other namespace</dt>

          <dd>The attribute's serialized name is the attribute's qualified name.</dd>

        </dl>

        While the exact order of attributes is UA-defined, and may depend on factors such as the
        order that the attributes were given in the original markup, the sort order must be stable,
        such that consecutive invocations of this algorithm serialize an element's attributes in the
        same order.

        Append a U+003E GREATER-THAN SIGN character (&gt;).

        If <var>current node</var> is an <code>area</code>, <code>base</code>,
        <code>basefont</code>, <code>bgsound</code>, <code>br</code>, <code>col</code>,
        <code>embed</code>, <code>frame</code>, <code>hr</code>, <code>img</code>,
        <code>input</code>, <code>keygen</code>, <code>link</code>, <code>menuitem</code>,
        <code>meta</code>, <code>param</code>, <code>source</code>, <code>track</code> or
        <code>wbr</code> element, then continue on to the next child node at this point.

        If <var>current node</var> is a <code>pre</code>, <code>textarea</code>, or
        <code>listing</code> element, and the first child node of the element, if any, is a
        <code>Text</code> node whose character data has as its first character a U+000A LINE FEED
        (LF) character, then append a U+000A LINE FEED (LF) character.

        Append the value of running the <a>HTML fragment serialization algorithm</a> on the
        <var>current node</var> element (thus recursing into this algorithm for that
        element), followed by a U+003C LESS-THAN SIGN character (&lt;), a U+002F SOLIDUS character
        (/), <var>tagname</var> again, and finally a U+003E GREATER-THAN SIGN character
        (&gt;).

        </dd>

        <dt>If <var>current node</var> is a <code>Text</code> node</dt>

        <dd>

        If the parent of <var>current node</var> is a <code>style</code>,
        <code>script</code>, <code>xmp</code>, <code>iframe</code>, <code>noembed</code>,
        <code>noframes</code>, or <code>plaintext</code> element, or if the parent of <var>current node</var> is a <code>noscript</code> element and <a>scripting is enabled</a> for the node, then append the value of
        <var>current node</var>'s <code>data</code> IDL attribute literally.

        Otherwise, append the value of <var>current node</var>'s <code>data</code> IDL attribute, <a>escaped as described
        below</a>.

        </dd>

        <dt>If <var>current node</var> is a <code>Comment</code></dt>

        <dd>

        Append the literal string "<code>&lt;!--</code>" (U+003C LESS-THAN SIGN, U+0021
        EXCLAMATION MARK, U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS), followed by the value of <var>current node</var>'s <code>data</code> IDL attribute, followed by the
        literal string "<code>--&gt;</code>" (U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS,
        U+003E GREATER-THAN SIGN).

        </dd>

        <dt>If <var>current node</var> is a <code>ProcessingInstruction</code></dt>

        <dd>

        Append the literal string "<code>&lt;?</code>" (U+003C LESS-THAN SIGN, U+003F
        QUESTION MARK), followed by the value of <var>current node</var>'s <code>target</code> IDL attribute, followed by a single U+0020 SPACE character, followed
        by the value of <var>current node</var>'s <code>data</code> IDL
        attribute, followed by a single U+003E GREATER-THAN SIGN character (>).

        </dd>

        <dt>If <var>current node</var> is a <code>DocumentType</code></dt>

        <dd>

        Append the literal string "<code>&lt;!DOCTYPE</code>" (U+003C LESS-THAN SIGN, U+0021
        EXCLAMATION MARK, U+0044 LATIN CAPITAL LETTER D, U+004F LATIN CAPITAL LETTER O, U+0043 LATIN
        CAPITAL LETTER C, U+0054 LATIN CAPITAL LETTER T, U+0059 LATIN CAPITAL LETTER Y, U+0050 LATIN
        CAPITAL LETTER P, U+0045 LATIN CAPITAL LETTER E), followed by a space (U+0020 SPACE),
        followed by the value of <var>current node</var>'s <code>name</code> IDL
        attribute, followed by the literal string "<code>&gt;</code>" (U+003E GREATER-THAN SIGN).

        </dd>

      </dl>

      </li>

    </ol>

    </li>

    <li>The result of the algorithm is the string <var>s</var>.</li>

  </ol>

  <p class="warning">It is possible that the output of this algorithm, if parsed with an <a>HTML
  parser</a>, will not return the original tree structure.</p>

  <div class="example">
    For instance, if a <code>textarea</code> element to which a <code>Comment</code> node
    has been appended is serialized and the output is then reparsed, the comment will end up being
    displayed in the text field. Similarly, if, as a result of DOM manipulation, an element contains
    a comment that contains the literal string "<code>--&gt;</code>", then when the result
    of serializing the element is parsed, the comment will be truncated at that point and the rest of
    the comment will be interpreted as markup. More examples would be making a <code>script</code>
    element contain a <code>Text</code> node with the text string "<code>&lt;/script></code>", or
    having a <code>p</code> element that contains a <code>ul</code> element (as the <code>ul</code>
    element's <a>start tag</a> would imply the end tag for the
    <code>p</code>).

    This can enable cross-site scripting attacks. An example of this would be a page that lets the
    user enter some font family names that are then inserted into a CSS <code>style</code> block via
    the DOM and which then uses the <code>innerHTML</code> IDL attribute to get
    the HTML serialization of that <code>style</code> element: if the user enters
    "<code>&lt;/style>&lt;script>attack&lt;/script></code>" as a font family name, <code>innerHTML</code> will return markup that, if parsed in a different context,
    would contain a <code>script</code> node, even though no <code>script</code> node existed in the
    original DOM.
  </div>

  <dfn>Escaping a string</dfn> (for the purposes of the algorithm above)
  consists of running the following steps:

  <ol>

    <li>Replace any occurrence of the "<code>&amp;</code>" character by the string "<code>&amp;amp;</code>".</li>

    <li>Replace any occurrences of the U+00A0 NO-BREAK SPACE character by the string "<code>&amp;nbsp;</code>".</li>

    <li>If the algorithm was invoked in the <i>attribute mode</i>, replace any occurrences of the
    "<code>&quot;</code>" character by the string "<code>&amp;quot;</code>".</li>

    <li>If the algorithm was <em>not</em> invoked in the <i>attribute mode</i>, replace any
    occurrences of the "<code>&lt;</code>" character by the string "<code>&amp;lt;</code>", and any occurrences of the "<code>&gt;</code>" character by
    the string "<code>&amp;gt;</code>".</li>

  </ol>

<h3 id="parsing-html-fragments"><dfn>Parsing HTML fragments</dfn></h3>

  The following steps form the <dfn>HTML fragment parsing algorithm</dfn>. The algorithm
  takes as input an <code>Element</code> node, referred to as the <dfn><var>context</var></dfn> element, which gives the context for
  the parser, as well as <var>input</var>, a string to parse, and returns a list of zero or
  more nodes.

  <p class="note">
  Parts marked <dfn>fragment case</dfn> in algorithms in the parser section are
  parts that only occur if the parser was created for the purposes of this algorithm. The algorithms have been annotated
  with such markings for informational purposes only; such markings have no normative weight. If it
  is possible for a condition described as a <a>fragment case</a> to occur even when the
  parser wasn't created for the purposes of handling this algorithm, then that is an error in the
  specification.
  </p>

  <ol>

    <li>

    Create a new <code>Document</code> node, and mark it as being an <a>HTML document</a>.

    </li>

    <li>

    If the
    <a>node document</a> of the <var>context</var> element is in
    <a>quirks mode</a>, then let the <code>Document</code> be in <a>quirks mode</a>.
    Otherwise, the
    <a>node document</a> of the <var>context</var> element is in
    <a>limited-quirks mode</a>, then let the <code>Document</code> be in <a>limited-quirks
    mode</a>. Otherwise, leave the <code>Document</code> in <a>no-quirks mode</a>.

    </li>

    <li>

    Create a new <a>HTML parser</a>, and associate it with the just created
    <code>Document</code> node.

    </li>

    <li>

    Set the state of the <a>HTML parser</a>'s <a>tokenization</a> stage as
    follows:

    <dl class="switch">

      <dt>If it is a <code>title</code> or <code>textarea</code> element</dt>

      <dd>Switch the tokenizer to the <a>RCDATA state</a>.</dd>

      <dt>If it is a <code>style</code>, <code>xmp</code>, <code>iframe</code>,
      <code>noembed</code>, or <code>noframes</code> element</dt>

      <dd>Switch the tokenizer to the <a>RAWTEXT state</a>.</dd>

      <dt>If it is a <code>script</code> element</dt>

      <dd>Switch the tokenizer to the <a>script data state</a>.</dd>

      <dt>If it is a <code>noscript</code> element</dt>

      <dd>If the <a>scripting flag</a> is enabled, switch the tokenizer to the <a>RAWTEXT
      state</a>. Otherwise, leave the tokenizer in the <a>data state</a>.</dd>

      <dt>If it is a <code>plaintext</code> element</dt>

      <dd>Switch the tokenizer to the <a>PLAINTEXT state</a>.</dd>

      <dt>Otherwise</dt>

      <dd>Leave the tokenizer in the <a>data state</a>.</dd>

    </dl>

    <p class="note">
  For performance reasons, an implementation that does not report errors and
    that uses the actual state machine described in this specification directly could use the
    PLAINTEXT state instead of the RAWTEXT and script data states where those are mentioned in the
    list above. Except for rules regarding parse errors, they are equivalent, since there is no
    <a>appropriate end tag token</a> in the fragment case, yet they involve far fewer state
    transitions.
  </p>

    </li>

    <li>

    Let <var>root</var> be a new <code>html</code> element with no attributes.

    </li>

    <li>

    Append the element <var>root</var> to the <code>Document</code> node created
    above.

    </li>

    <li>

    Set up the parser's <a>stack of open elements</a> so that it contains just the single
    element <var>root</var>.

    </li>

    <li>

    If the <var>context</var> element is a
    <code>template</code> element, push "<a>in
    template</a>" onto the <a>stack of template insertion modes</a> so that it is the new
    <a>current template insertion mode</a>.

    </li>

    <li>

    Create a start tag token whose name is the local name of <var>context</var> and whose attributes are the attributes of
    <var>context</var>.

    Let this start tag token be the start tag token of the <var>context</var> node, e.g. for the purposes of determining
    if it is an <a>HTML integration point</a>.

    </li>

    <li>

    <a>Reset the parser's insertion mode
    appropriately</a>.

    <p class="note">
  The parser will reference the <var>context</var> element as part of that algorithm.
  </p>

    </li>

    <li>

    Set the parser's <a><code>form</code> element pointer</a> to the nearest node to the
    <var>context</var> element that is a <code>form</code>
    element (going straight up the ancestor chain, and including the element itself, if it is a
    <code>form</code> element), if any. (If there is no such <code>form</code> element, the
    <a><code>form</code> element pointer</a> keeps its initial value, null.)

    </li>

    <li>

    Place the <var>input</var> into the <a>input stream</a> for the <a>HTML
    parser</a> just created. The encoding <a>confidence</a> is <i>irrelevant</i>.

    </li>

    <li>

    Start the parser and let it run until it has consumed all the characters just inserted into
    the input stream.

    </li>

    <li>

    Return the child
    nodes of <var>root</var>, in <a>tree order</a>.

    </li>

  </ol>

  </div>

<h3 id="named-character-references"><dfn><dfn>Named character references</dfn></dfn></h3>

  This table lists the character reference names that are supported by HTML, and the code points
  to which they refer. It is referenced by the previous sections.

  <div>
    <table>
    <thead>
      <tr> <th> Name </th> <th> Character(s) </th> <th> Glyph </th> </tr>
    </thead>

    </table>

  </div>

  This data is also available <a>as a JSON file</a>.

  <i>The glyphs displayed above are non-normative. Refer to the Unicode specifications for formal
  definitions of the characters listed above.</i>

<h2 id="the-xhtml-syntax"><dfn>The XHTML syntax</dfn></h2>

  <p class="note">
  This section only describes the rules for XML resources. Rules for
  <code>text/html</code> resources are discussed in the section above entitled "<a>The HTML
  syntax</a>".
  </p>

  <div class="impl">

<h3 id="writing-xhtml-documents"><dfn>Writing XHTML documents</dfn></h3>

  </div>

  The syntax for using HTML with XML, whether in XHTML documents or embedded in other XML
  documents, is defined in the XML and Namespaces in XML specifications. <a>\[XML]</a> [[!XMLNS]]

  This specification does not define any syntax-level requirements beyond those defined for XML
  proper.

  XML documents may contain a <code>DOCTYPE</code> if desired, but this is not required
  to conform to this specification. This specification does not define a public or system
  identifier, nor provide a formal DTD.

  <p class="note">
  According to the XML specification, XML processors are not guaranteed to process
  the external DTD subset referenced in the DOCTYPE. This means, for example, that using <a>entity references</a> for characters in XHTML documents
  is unsafe if they are defined in an external file (except for <code>&amp;lt;</code>,
  <code>&amp;gt;</code>, <code>&amp;amp;</code>, <code>&amp;quot;</code>
  and <code>&amp;apos;</code>).
  </p>

  <div class="impl">

<h3 id="parsing-xhtml-documents"><dfn>Parsing XHTML documents</dfn></h3>

  This section describes the relationship between XML and the DOM, with a particular emphasis on
  how this interacts with HTML.

  An <dfn>XML parser</dfn>, for the purposes of this specification, is a construct that follows
  the rules given in the XML specification to map a string of bytes or characters into a
  <code>Document</code> object.

  <p class="note">
  At the time of writing, no such rules actually exist.
  </p>

  An <a>XML parser</a> is either associated with a <code>Document</code> object when it is
  created, or creates one implicitly.

  This <code>Document</code> must then be populated with DOM nodes that represent the tree
  structure of the input passed to the parser, as defined by the XML specification, the Namespaces
  in XML specification, and the DOM specification. DOM mutation events must not fire for the
  operations that the <a>XML parser</a> performs on the <code>Document</code>'s tree, but the
  user agent must act as if elements and attributes were individually appended and set respectively
  so as to trigger rules in this specification regarding what happens when an element is inserted
  into a document or has its attributes set, and the DOM specification's requirements regarding
  mutation observers mean that mutation observers <em>are</em> fired (unlike mutation events). <a>\[XML]</a> [[!XMLNS]] [[!DOM]] <a>\[UIEVENTS]</a>

  Between the time an element's start tag is parsed and the time either the element's end tag is
  parsed or the parser detects a well-formedness error, the user agent must act as if the element
  was in a <a>stack of open elements</a>.

  <p class="note">
  This is used, e.g. by the <code>object</code> element to avoid instantiating plugins
  before the <code>param</code> element children have been parsed.
  </p>

  This specification provides the following additional information that user agents should use
  when retrieving an external entity: the public identifiers given in the following list all
  correspond to <a>">the URL given by this link</a>. (This
  URL is a DTD containing the <a>entity
  declarations</a> for the names listed in the <a>named character references</a> section.) <a>\[XML]</a>

  <ul class="brief">
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Transitional//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Strict//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Frameset//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;Basic&nbsp;1.0//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1&nbsp;plus&nbsp;MathML&nbsp;2.0//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;XHTML&nbsp;1.1&nbsp;plus&nbsp;MathML&nbsp;2.0&nbsp;plus&nbsp;SVG&nbsp;1.1//EN</code></li>
    <li><code>-//W3C//DTD&nbsp;MathML&nbsp;2.0//EN</code></li>
    <li><code>-//WAPFORUM//DTD&nbsp;XHTML&nbsp;Mobile&nbsp;1.0//EN</code></li>
  </ul>

  Furthermore, user agents should attempt to retrieve the above external entity's content when
  one of the above public identifiers is used, and should not attempt to retrieve any other external
  entity's content.

  <p class="note">
  This is not strictly a <a>violation</a> of the XML
  specification, but it does contradict the spirit of the XML specification's requirements. This is
  motivated by a desire for user agents to all handle entities in an interoperable fashion without
  requiring any network access for handling external subsets. [[!XML]]
  </p>

  XML parsers can be invoked with <dfn>XML scripting support enabled</dfn> or <dfn>disabled</dfn>. Except where otherwise specified, XML parsers are
  invoked with <a>XML scripting support enabled</a>.

  When an <a>XML parser</a> with <a>XML scripting support enabled</a>
  creates a <code>script</code> element, it
  must be marked as being <a>"parser-inserted"</a> and its <a>"non-blocking"</a> flag
  must be unset. If the parser was originally created for the <a>XML fragment parsing
  algorithm</a>, then the element must be marked as <a>"already started"</a> also. When the
  element's end tag is subsequently parsed, the user agent must <a>perform a microtask checkpoint</a>, and
  then <a>prepare</a> the <code>script</code> element. If this
  causes there to be a <a>pending parsing-blocking script</a>, then the user agent must run
  the following steps:

  <ol>

    <li>Block this instance of the <a>XML parser</a>, such that the <a>event loop</a>
    will not run <a>tasks</a> that invoke it.</li>

    <li><a>Spin the event loop</a> until the parser's <code>Document</code> <a>has no
    style sheet that is blocking scripts</a> and the <a>pending parsing-blocking
    script</a>'s <a>"ready to be parser-executed"</a> flag is set.</li>

    <li>Unblock this instance of the <a>XML parser</a>, such that <a>tasks</a> that invoke it can again be run.</li>

    <li><a>Execute</a> the <a>pending parsing-blocking
    script</a>.</li>

    <li>There is no longer a <a>pending parsing-blocking script</a>.</li>

  </ol>

  <p class="note">
  Since the <code>document.write()</code> API is not
  available for <a>XML documents</a>, much of the complexity in the <a>HTML parser</a>
  is not needed in the <a>XML parser</a>.
  </p>

  <p class="note">
  When the <a>XML parser</a> has <a>XML scripting support disabled</a>,
  none of this happens.
  </p>

  When an <a>XML parser</a> would append a node to a
  <code>template</code> element, it must instead append it to the <code>template</code> element's
  <a>template contents</a> (a <code>DocumentFragment</code> node).

  <p class="note">
  This is a <a>willful violation</a> of the XML specification; unfortunately,
  XML is not formally extensible in the manner that is needed for <code>template</code> processing.
  [[!XML]]
  </p>

  When an <a>XML parser</a> creates a <code>Node</code> object, its <a>node document</a>
  must be set to the <a>node document</a> of
  the node into which the newly created node is to be inserted.

  Certain algorithms in this specification <dfn>spoon-feed the
  parser</dfn> characters one string at a time. In such cases, the <a>XML parser</a> must act
  as it would have if faced with a single string consisting of the concatenation of all those
  characters.

  When an <a>XML parser</a> reaches the end of its input, it must <a>stop
  parsing</a>, following the same rules as the <a>HTML parser</a>. An <a>XML
  parser</a> can also be <a>aborted</a>, which must again be done in
  the same way as for an <a>HTML parser</a>.

  For the purposes of conformance checkers, if a resource is determined to be in <a>the XHTML
  syntax</a>, then it is an <a>XML document</a>.

<h3 id="serializing-xhtml-fragments"><dfn>Serializing XHTML fragments</dfn></h3>

  The <dfn>XML fragment serialization algorithm</dfn> for a <code>Document</code> or
  <code>Element</code> node either returns a fragment of XML that represents that node or throws an
  exception.

  For <code>Document</code>s, the algorithm must return a string in the form of a <a>document entity</a>, if none of the error cases
  below apply.

  For <code>Element</code>s, the algorithm must return a string in the form of an <a>internal general parsed entity</a>, if none of the
  error cases below apply.

  In both cases, the string returned must be XML namespace-well-formed and must be an isomorphic
  serialization of all of that node's <a>relevant child nodes</a>, in <a>tree order</a>.
  User agents may adjust prefixes and namespace declarations in the serialization (and indeed might
  be forced to do so in some cases to obtain namespace-well-formed XML). User agents may use a
  combination of regular text and character references to represent <code>Text</code> nodes in the
  DOM.

  A node's <dfn>relevant child nodes</dfn> are those that apply given the following rules:

  <dl>

    <dt>For <code>template</code> elements</dt>

    <dd>The <a>relevant child nodes</a> are the child nodes of the <code>template</code>
    element's <a>template contents</a>, if any.</dd>

    <dt>For all other nodes</dt>

    <dd>The <a>relevant child nodes</a> are the child nodes of node itself, if any.</dd>

  </dl>

  For <code>Element</code>s, if any of the elements in the serialization are in no namespace, the
  default namespace in scope for those elements must be explicitly declared as the empty string. (This doesn't apply in the <code>Document</code> case.) [[!XML]]
  [[!XMLNS]]

  For the purposes of this section, an internal general parsed entity is considered XML
  namespace-well-formed if a document consisting of an element with no namespace declarations whose
  contents are the internal general parsed entity would itself be XML namespace-well-formed.

  If any of the following error cases are found in the DOM subtree being serialized, then the
  algorithm must throw an <code>InvalidStateError</code> exception instead of returning a
  string:

  <ul>

    <li>A <code>Document</code> node with no child element nodes.</li>

    <li>A <code>DocumentType</code> node that has an external subset public identifier that contains
    characters that are not matched by the XML <code>PubidChar</code> production. [[!XML]]</li>

    <li>A <code>DocumentType</code> node that has an external subset system identifier that contains
    both a U+0022 QUOTATION MARK (") and a U+0027 APOSTROPHE (') or that contains characters that are
    not matched by the XML <code>Char</code> production. [[!XML]]</li>

    <li>A node with a  local name containing a U+003A COLON (:).</li>

    <li>A node with a  local name that does not match the XML <code>Name</code> production. [[!XML]]</li>

    <li>An <code>Attr</code> node with no namespace whose local name is the lowercase string "<code>xmlns</code>". [[!XMLNS]]</li>

    <li>An <code>Element</code> node with two or more attributes with the same local name and
    namespace.</li>

    <li>An <code>Attr</code> node, <code>Text</code> node, <code>Comment</code> node, or
    <code>ProcessingInstruction</code> node whose data contains characters that are not matched by
    the XML <code>Char</code> production. [[!XML]]</li>

    <li>A <code>Comment</code> node whose data contains two adjacent U+002D HYPHEN-MINUS characters
    (-) or ends with such a character.</li>

    <li>A <code>ProcessingInstruction</code> node whose target name is an <a>ASCII
    case-insensitive</a> match for the string "<code>xml</code>".</li>

    <li>A <code>ProcessingInstruction</code> node whose target name contains a U+003A COLON (:).</li>

    <li>A <code>ProcessingInstruction</code> node whose data contains the string "<code>?></code>".</li>

  </ul>

  <p class="note">
  These are the only ways to make a DOM unserialisable. The DOM enforces all the
  other XML constraints; for example, trying to append two elements to a <code>Document</code> node
  will throw a <code>HierarchyRequestError</code> exception.
  </p>

<h3 id="parsing-xhtml-fragments"><dfn>Parsing XHTML fragments</dfn></h3>

  The <dfn>XML fragment parsing algorithm</dfn> either returns a <code>Document</code> or throws
  a <code>SyntaxError</code> exception. Given a string <var>input</var> and a
  context element <var>context</var>, the algorithm is as
  follows:

  <ol>

    <li>

    Create a new <a>XML parser</a>.

    </li>

    <li>

    <a>Feed the
    parser</a> just created the string corresponding to the start tag of the <var>context</var> element, declaring
    all the namespace prefixes that are in scope on that element in the DOM, as well as declaring
    the default namespace (if any) that is in scope on that element in the DOM.

    A namespace prefix is in scope if the DOM <code>lookupNamespaceURI()</code> method
    on the element would return a non-null value for that prefix.

    The default namespace is the namespace for which the DOM <code>isDefaultNamespace()</code> method on the element would return true.

    <p class="note">
  No
    <code>DOCTYPE</code> is passed to the parser, and therefore no external subset is
    referenced, and therefore no entities will be recognized.
  </p>

    </li>

    <li>

    <a>Feed the parser</a> just created the string <var>input</var>.

    </li>

    <li>

    <a>Feed the parser</a> just created the string corresponding to the end tag of the <var>context</var> element.

    </li>

    <li>

    If there is an XML well-formedness or XML namespace well-formedness error, then throw a
    <code>SyntaxError</code> exception and abort these steps.

    </li>

    <li>

    If the root
    element of the resulting <code>Document</code> has any sibling nodes, then throw a
    <code>SyntaxError</code> exception and abort these steps.

    </li>

    <li>

    Return the
    child nodes of the root element of the resulting <code>Document</code>, in <a>tree
    order</a>.

    </li>

  </ol>

  </div>

  <div class="impl">

<h2 id="rendering"><dfn>Rendering</dfn></h2>

  <i>User agents are not required to present HTML documents in any particular way. However, this
  section provides a set of suggestions for rendering HTML documents that, if followed, are likely
  to lead to a user experience that closely resembles the experience intended by the documents'
  authors. So as to avoid confusion regarding the normativity of this section, RFC2119 terms have
  not been used. Instead, the term "expected" is used to indicate behavior that will lead to this
  experience. For the purposes of conformance for user agents designated as <a>supporting the suggested default rendering</a>, the term "expected" in this
  section has the same conformance implications as the RFC2119-defined term "must".</i>

<h3 id="introduction"><dfn>Introduction</dfn></h3>

  In general, user agents are expected to support CSS, and many of the suggestions in this
  section are expressed in CSS terms. User agents that use other presentation mechanisms can derive
  their expected behavior by translating from the CSS rules given in this section.

  In the absence of style-layer rules to the contrary (e.g. author style sheets), user agents are
  expected to render an element so that it conveys to the user the meaning that the element
  <a>represents</a>, as described by this specification.

  The suggestions in this section generally assume a visual output medium with a resolution of
  96dpi or greater, but HTML is intended to apply to multiple media (it is a
  <i>media-independent</i> language). User agent implementors are encouraged to adapt the
  suggestions in this section to their target media.

  <hr />

  An element is <dfn>being rendered</dfn> if it has any associated CSS layout boxes, SVG layout
  boxes, or some equivalent in other styling languages.

  <p class="note">
  Just being off-screen does not mean the element is not <a>being
  rendered</a>. The presence of the <code>hidden</code> attribute normally
  means the element is not <a>being rendered</a>, though this might be overridden by the style
  sheets.
  </p>

  <hr />

  User agents that do not honor author-level CSS style sheets are nonetheless expected to act as
  if they applied the CSS rules given in these sections in a manner consistent with this
  specification and the relevant CSS and Unicode specifications. [[!CSS-2015]] [[!UNICODE]] [[!BIDI]]

  <p class="note">
  This is especially important for issues relating to the 'display', 'unicode-bidi',
  and 'direction' properties.
  </p>

<h3 id="the-css-user-agent-style-sheet-and-presentational-hints"><dfn>The CSS user agent style sheet and presentational hints</dfn></h3>

  The CSS rules given in these subsections are, except where otherwise specified, expected to be
  used as part of the user-agent level style sheet defaults for all documents that contain
  <a>HTML elements</a>.

  Some rules are intended for the author-level zero-specificity presentational hints part of the
  CSS cascade; these are explicitly called out as <dfn>presentational hints</dfn>.

  Some of the rules regarding left and right margins are given here as appropriate for elements
  whose 'direction' property is 'ltr', and are expected to be flipped around on elements whose
  'direction' property is 'rtl'. These are marked "<dfn>LTR-specific</dfn>".

  <p class="note">
  These markings only affect the handling of attribute <em>values</em>, not
  attribute names or element names.
  </p>

  <hr />

  When the text below says that an attribute <var>attribute</var> on an element
  <var>element</var> <dfn>maps to the pixel length property</dfn> (or properties)
  <var>properties</var>, it means that if <var>element</var> has an attribute <var>attribute</var>
  set, and parsing that attribute's value using the <a>rules for parsing non-negative
  integers</a> doesn't generate an error, then the user agent is expected to use the parsed value
  as a pixel length for a <a>presentational hint</a> for
  <var>properties</var>.

  When the text below says that an attribute <var>attribute</var> on an element
  <var>element</var> <dfn>maps to the dimension property</dfn> (or properties)
  <var>properties</var>, it means that if <var>element</var> has an attribute <var>attribute</var>
  set, and parsing that attribute's value using the <a>rules for parsing dimension values</a>
  doesn't generate an error, then the user agent is expected to use the parsed dimension as the
  value for a <a>presentational hint</a> for
  <var>properties</var>, with the value given as a pixel length if the dimension was a length, and
  with the value given as a percentage if the dimension was a percentage.

  When the text below says that an attribute <var>attribute</var> on an element
  <var>element</var> <dfn>maps to the dimension property (ignoring zero)</dfn> (or properties)
  <var>properties</var>, it means that if <var>element</var> has an attribute <var>attribute</var>
  set, and parsing that attribute's value using the <a>rules for parsing non-zero dimension
  values</a> doesn't generate an error, then the user agent is expected to use the parsed
  dimension as the value for a <a>presentational hint</a> for
  <var>properties</var>, with the value given as a pixel length if the dimension was a length, and
  with the value given as a percentage if the dimension was a percentage.

  When a user agent is to <dfn>align descendants</dfn> of a node, the user agent is expected to
  align only those descendants that have both their 'margin-left' and 'margin-right' properties
  computing to a value other than 'auto', that are over-constrained and that have one of those two
  margins with a used value forced to a greater value, and that do not themselves have an applicable
  <code>align</code> attribute. When multiple elements are to <a>align</a> a particular descendant, the most deeply nested such
  element is expected to override the others. Aligned elements are expected to be aligned by having
  the used values of their left and right margins be set accordingly.

<h3 id="non-replaced-elements"><dfn>Non-replaced elements</dfn></h3>

<h4 id="hidden-elements"><dfn>Hidden elements</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  <a>[hidden]</a>, area, base, basefont, datalist, head, link, menu[type=context i], meta,
  noembed, noframes, param, rp, script, source, style, template, track, title {
  display: none;
  }

  embed[hidden] { display: inline; height: 0; width: 0; }

  input[type=hidden i] { display none ! important; }

  @media (scripting) {
  noscript { display: none !important; }
  }
  </pre>

<h4 id="the-page"><dfn>The page</dfn></h4>

  <pre highlight="css">

    @namespace url(http://www.w3.org/1999/xhtml);

    html, body { display: block; }

  </pre>

  For each property in the table below, given a <code>body</code> element, the first attribute
  that exists <a>maps to the pixel length property</a> on the <code>body</code> element. If
  none of the attributes for a property are found, or if the value of the attribute that was found
  cannot be parsed successfully, then, if the <code>body</code> element's <a>node document</a>'s
  <a>browsing context</a> does not have its <a>seamless browsing context flag</a> set, a
  default value of 8px is expected to be used for that property instead.

  <table>
    <thead>
    <tr>
      <th>Property
      <th>Source
    <tbody>
    <tr>
      <td rowspan="3">'margin-top'
      <td><code>body</code> element's <code>marginheight</code> attribute
    <tr>
      <td>The <code>body</code> element's <a>container frame element</a>'s <code>marginheight</code> attribute
    <tr>
      <td><code>body</code> element's <code>topmargin</code> attribute
    <tbody>
    <tr>
      <td rowspan="3">'margin-right'
      <td><code>body</code> element's <code>marginwidth</code> attribute
    <tr>
      <td>The <code>body</code> element's <a>container frame element</a>'s <code>marginwidth</code> attribute
    <tr>
      <td><code>body</code> element's <code>rightmargin</code> attribute
    <tbody>
    <tr>
      <td rowspan="3">'margin-bottom'
      <td><code>body</code> element's <code>marginheight</code> attribute
    <tr>
      <td>The <code>body</code> element's <a>container frame element</a>'s <code>marginheight</code> attribute
    <tr>
      <td><code>body</code> element's <code>bottommargin</code> attribute
    <tbody>
    <tr>
      <td rowspan="3">'margin-left'
      <td><code>body</code> element's <code>marginwidth</code> attribute
    <tr>
      <td>The <code>body</code> element's <a>container frame element</a>'s <code>marginwidth</code> attribute
    <tr>
      <td><code>body</code> element's <code>leftmargin</code> attribute
  </table>

  If the <code>body</code> element's <a>node document</a>'s <a>browsing context</a> is a
  <a>nested browsing context</a>, and the <a>browsing context container</a> of that
  <a>nested browsing context</a> is a <code>frame</code> or <code>iframe</code> element, then
  the <dfn>container frame element</dfn> of the <code>body</code> element is that <code>frame</code>
  or <code>iframe</code> element. Otherwise, there is no <a>container frame element</a>.

  <p class="warning">The above requirements imply that a page can change the margins of another page
  (including one from another <a>origin</a>) using, for example, an <code>iframe</code>. This
  is potentially a security risk, as it might in some cases allow an attack to contrive a situation
  in which a page is rendered not as the author intended, possibly for the purposes of phishing or
  otherwise misleading the user.</p>

  <hr />

  If a <code>Document</code> is in a <a>nested browsing context</a>, it is expected to be
  positioned and sized to fit inside the content box of its <a>browsing context container</a>.
  If a <a>browsing context</a> is not <a>being rendered</a>, it is expected to have a
  viewport with zero width and zero height.

  If the <code>Document</code> is in a <a>nested browsing context</a>, and the
  <a>browsing context container</a> of that <a>nested browsing context</a> is a
  <code>frame</code> or <code>iframe</code> element, and that element has a <code>scrolling</code> attribute, and that attribute's value is an <a>ASCII
  case-insensitive</a> match for the string "<code>off</code>", "<code>noscroll</code>", or "<code>no</code>", then the user agent is expected to
  prevent any scroll bars from being shown for the viewport of the <a>nested browsing
  context</a>, regardless of the 'overflow' property that applies to that viewport.

  <hr />

  When a <code>body</code> element has a <code>background</code>
  attribute set to a non-empty value, the new value is expected to be <a>resolved</a> relative to the element, and if this is successful, the user agent is
  expected to treat the attribute as a <a>presentational hint</a>
  setting the element's 'background-image' property to the resulting <a>absolute URL</a>.

  When a <code>body</code> element has a <code>bgcolor</code> attribute
  set, the new value is expected to be parsed using the <a>rules for parsing a legacy color
  value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the element's
  'background-color' property to the resulting color.

  When a <code>body</code> element has a <code>text</code> attribute, its
  value is expected to be parsed using the <a>rules for parsing a legacy color value</a>, and
  if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'color' property to
  the resulting color.

  When a <code>body</code> element has a <code>link</code> attribute, its
  value is expected to be parsed using the <a>rules for parsing a legacy color value</a>, and
  if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the 'color' property of any
  element in the <code>Document</code> matching the ':link' pseudo-class to the resulting color.

  When a <code>body</code> element has a <code>vlink</code> attribute,
  its value is expected to be parsed using the <a>rules for parsing a legacy color value</a>,
  and if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the 'color' property of any
  element in the <code>Document</code> matching the ':visited' pseudo-class to the resulting
  color.

  When a <code>body</code> element has an <code>alink</code> attribute,
  its value is expected to be parsed using the <a>rules for parsing a legacy color value</a>,
  and if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the 'color' property of any
  element in the <code>Document</code> matching the ':active' pseudo-class and either the ':link'
  pseudo-class or the ':visited' pseudo-class to the resulting color.

<h4 id="flow-content"><dfn>Flow content</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  address, blockquote, center, div, figure, figcaption, footer, form, header, hr,
  legend, listing, main, p, plaintext, pre, summary, xmp {
  display: block;
  }

  blockquote, figure, listing, p, plaintext, pre, xmp {
  margin-top: 1em; margin-bottom: 1em;
  }

  blockquote, figure { margin-left: 40px; margin-right: 40px; }

  address { font-style: italic; }
  listing, plaintext, pre, xmp {
  font-family: monospace; white-space: pre;
  }

  dialog:not([open]) { display: none; }
  dialog {
  position: absolute;
  left: 0; right: 0;
  width: fit-content;
  height: fit-content;
  margin: auto;
  border: solid;
  padding: 1em;
  background: white;
  color: black;
  }
  dialog::backdrop {
  position: fixed;
  top: 0; right: 0; bottom: 0; left: 0;
  background: rgba(0,0,0,0.1);
  }

  /* for small devices, modal dialogs go full-screen */
  @media screen and (max-width: 540px) {
  dialog:modal {
    top: 0;
    width: auto;
    margin: 1em;
  }
  }
  </pre>

  The following rules are also expected to apply, as <a>presentational hints</a>:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  pre[wrap] { white-space: pre-wrap; }
  </pre>

  In <a>quirks mode</a>, the following rules are also expected to apply:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  form { margin-bottom: 1em; }
  </pre>

  <hr />

  The <code>center</code> element, and the <code>div</code> element when it has an <code>align</code> attribute whose value is an <a>ASCII
  case-insensitive</a> match for either the string "<code>center</code>" or the string
  "<code>middle</code>", are expected to center text within themselves, as if they had
  their 'text-align' property set to 'center' in a <a>presentational hint</a>, and to <a>align descendants</a> to the center.

  The <code>div</code> element, when it has an <code>align</code>
  attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>left</code>", is expected to left-align text within itself, as if it had its
  'text-align' property set to 'left' in a <a>presentational
  hint</a>, and to <a>align descendants</a> to the left.

  The <code>div</code> element, when it has an <code>align</code>
  attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>right</code>", is expected to right-align text within itself, as if it had its
  'text-align' property set to 'right' in a <a>presentational
  hint</a>, and to <a>align descendants</a> to the right.

  The <code>div</code> element, when it has an <code>align</code>
  attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>justify</code>", is expected to full-justify text within itself, as if it had its
  'text-align' property set to 'justify' in a <a>presentational
  hint</a>, and to <a>align descendants</a> to the left.

<h4 id="phrasing-content"><dfn>Phrasing content</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  cite, dfn, em, i, var { font-style: italic; }
  b, strong { font-weight: bolder; }
  code, kbd, samp, tt { font-family: monospace; }
  big { font-size: larger; }
  small { font-size: smaller; }

  sub { vertical-align: sub; }
  sup { vertical-align: super; }
  sub, sup { line-height: normal; font-size: smaller; }

  ruby { display: ruby; }
  rb   { display: ruby-base; white-space: nowrap; }
  rt   {
    display: ruby-text;
    white-space: nowrap;
    font-size: 50%;
    font-variant-east-asian: ruby;
    text-emphasis: none;
  }
  rbc  { display: ruby-base-container; }
  rtc  { display: ruby-text-container; }
  ruby, rb, rt, rbc, rtc { unicode-bidi: isolate; }

  :link { color: #0000EE; }
  :visited { color: #551A8B; }
  :link:active, :visited:active { color: #FF0000; }
  :link, :visited { text-decoration: underline; cursor: pointer; }
  a:link[rel~=help], a:visited[rel~=help],
  area:link[rel~=help], area:visited[rel~=help] { cursor: help; }

  :focus { outline: auto; }

  mark { background: yellow; color: black; } /* this color is just a suggestion and can be changed based on implementation feedback */

  abbr[title], acronym[title] { text-decoration: dotted underline; }
  ins, u { text-decoration: underline; }
  del, s, strike { text-decoration: line-through; }
  blink { text-decoration: blink; }

  q::before { content: open-quote; }
  q::after { content: close-quote; }

  <a>br { display-outside: newline; } /* <a>this also has bidi implications</a> */
  nobr { white-space: nowrap; }
  wbr { display-outside: break-opportunity; } /* <a>this also has bidi implications</a> */
  nobr wbr { white-space: normal; }</a>
  </pre>

  The following rules are also expected to apply, as
  <a>presentational hints</a>:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  br[clear=left i] { clear: left; }
  br[clear=right i] { clear: right; }
  br[clear=all i], br[clear=both i] { clear: both; }
  </pre>

  User agents that do not support correct ruby rendering are expected to render parentheses
  around the text of <code>rt</code> elements in the absence of <code>rp</code> elements.
  [[!CSSRUBY]]

  <hr />

  User agents are expected to support the 'clear' property on inline elements (in order to render
  <code>br</code> elements with <code>clear</code> attributes) in the manner
  described in the non-normative note to this effect in CSS2.1.

  The initial value for the 'color' property is expected to be black. The initial value for the
  'background-color' property is expected to be 'transparent'. The canvas' background is expected to
  be white.

  <hr />

  When a <code>font</code> element has a <code>color</code>
  attribute, its value is expected to be parsed using the <a>rules for parsing a legacy color
  value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the
  element's 'color' property to the resulting color.

  The <code>font</code> element is expected to
  override the color of any text decoration that spans the text of the element to the used value of
  the element's 'color' property.

  When a <code>font</code> element has a <code>face</code>
  attribute, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'font-family' property to the attribute's
  value.

  When a <code>font</code> element has a <code>size</code>
  attribute, the user agent is expected to use the following steps, known as the <dfn>rules for
  parsing a legacy font size</dfn>, to treat the attribute as a <a>presentational hint</a> setting the element's 'font-size' property:

  <ol>

    <li>Let <var>input</var> be the attribute's value.</li>

    <li>Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the
    start of the string.</li>

    <li><a>Skip whitespace</a>.</li>

    <li>If <var>position</var> is past the end of <var>input</var>, there is no <a>presentational hint</a>. Abort these steps.</li>

    <li>If the character at <var>position</var> is a U+002B PLUS SIGN character (+), then let
    <var>mode</var> be <i>relative-plus</i>, and advance <var>position</var> to the next character.
    Otherwise, if the character at <var>position</var> is a U+002D HYPHEN-MINUS character (-), then
    let <var>mode</var> be <i>relative-minus</i>, and advance <var>position</var> to the next
    character. Otherwise, let <var>mode</var> be <i>absolute</i>.</li>

    <li><a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and let
    the resulting sequence be <var>digits</var>.</li>

    <li>If <var>digits</var> is the empty string, there is no <a>presentational hint</a>. Abort these steps.</li>

    <li>Interpret <var>digits</var> as a base-ten integer. Let <var>value</var> be the resulting
    number.</li>

    <li>

    If <var>mode</var> is <i>relative-plus</i>, then increment <var>value</var> by 3. If
    <var>mode</var> is <i>relative-minus</i>, then let <var>value</var> be the result of subtracting
    <var>value</var> from 3.

    </li>

    <li>If <var>value</var> is greater than 7, let it be 7.</li>

    <li>If <var>value</var> is less than 1, let it be 1.</li>

    <li>

    Set 'font-size' to the keyword corresponding to the value of <var>value</var> according to
    the following table:

    <table>
      <thead>
      <tr>
        <th><var>value</var>
        <th>'font-size' keyword
        <th>Notes
      <tbody>
      <tr>
        <td>1
        <td>x-small
        <td>
      <tr>
        <td>2
        <td>small
        <td>
      <tr>
        <td>3
        <td>medium
        <td>
      <tr>
        <td>4
        <td>large
        <td>
      <tr>
        <td>5
        <td>x-large
        <td>
      <tr>
        <td>6
        <td>xx-large
        <td>
      <tr>
        <td>7
        <td>xxx-large
        <td><i>see below</i>
    </table>

    <small>The 'xxx-large' value is a non-CSS value used here to
    indicate a font size 50% larger than 'xx-large'.</small>

    </li>

  </ol>

<h4 id="bidirectional-text"><dfn>Bidirectional text</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  [dir]:dir(ltr), bdi:dir(ltr), input[type=tel i]:dir(ltr) { direction: ltr; }
  [dir]:dir(rtl), bdi:dir(rtl) { direction: rtl; }

  address, blockquote, center, div, figure, figcaption, footer, form, header, hr,
  legend, listing, main, p, plaintext, pre, summary, xmp, article, aside, h1, h2,
  h3, h4, h5, h6, nav, section, table, caption, colgroup, col, thead,
  tbody, tfoot, tr, td, th, dir, dd, dl, dt, menu, ol, ul, li, bdi, output,
  [dir=ltr i], [dir=rtl i], [dir=auto i] {
  unicode-bidi: isolate;
  }

  bdo, bdo[dir] { unicode-bidi: isolate-override; }

  input[dir=auto i]:matches([type=search i], [type=tel i], [type=url i],
  [type=email i]), textarea[dir=auto i], pre[dir=auto i] {
  unicode-bidi: plaintext;
  }
  /* see prose for input elements whose type attribute is in the Text state */

  /* the <a>rules setting the 'content' property</a> on <code>br</code> and <code>wbr</code> elements also has bidi implications */
  </pre>

  When an <code>input</code> element's <code>dir</code> attribute is in the
  <a>auto</a> state and its <code>type</code>
  attribute is in the <a>Text</a> state, then the user agent is
  expected to act as if it had a user-agent-level style sheet rule setting the 'unicode-bidi'
  property to 'plaintext'.

  Input fields (i.e. <code>textarea</code> elements, and <code>input</code> elements when their
  <code>type</code> attribute is in the <a>Text</a>, <a>Search</a>,
  <a>Telephone</a>, <a>URL</a>,
  or <a>E-mail</a> state) are expected to present an editing
  user interface with a directionality that matches the element's 'direction' property.

  When the document's character encoding is ISO-8859-8, the following rules are additionally
  expected to apply, following those above: [[!ENCODING]]

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  address, blockquote, center, div, figure, figcaption, footer, form, header, hr,
  legend, listing, main, p, plaintext, pre, summary, xmp, article, aside, h1, h2,
  h3, h4, h5, h6, nav, section, table, caption, colgroup, col, thead,
  tbody, tfoot, tr, td, th, dir, dd, dl, dt, menu, ol, ul, li, [dir=ltr i],
  [dir=rtl i], [dir=auto i], *|* {
  unicode-bidi: bidi-override;
  }
  input:not([type=submit i]):not([type=reset i]):not([type=button i]),
  textarea, keygen {
  unicode-bidi: normal;
  }
  </pre>

<h4 id="quotes"><dfn>Quotes</dfn></h4>

  This block is automatically generated from the Unicode Common Locale Data Repository. <a>\[CLDR]</a>

  User agents are expected to use either the block below (which will be regularly updated) or to
  automatically generate their own copy directly from the source material. The language codes are
  derived from the CLDR file names. The quotes are derived from the <code>delimiter</code>
  blocks, with fallback handled as specified in the CLDR documentation.

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);


  </pre>

<h4 id="sections-and-headings"><dfn>Sections and headings</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  article, aside, h1, h2, h3, h4, h5, h6, nav, section {
  display: block;
  }

  h1 { margin-top: 0.67em; margin-bottom: 0.67em; font-size: 2.00em; font-weight: bold; }
  h2 { margin-top: 0.83em; margin-bottom: 0.83em; font-size: 1.50em; font-weight: bold; }
  h3 { margin-top: 1.00em; margin-bottom: 1.00em; font-size: 1.17em; font-weight: bold; }
  h4 { margin-top: 1.33em; margin-bottom: 1.33em; font-size: 1.00em; font-weight: bold; }
  h5 { margin-top: 1.67em; margin-bottom: 1.67em; font-size: 0.83em; font-weight: bold; }
  h6 { margin-top: 2.33em; margin-bottom: 2.33em; font-size: 0.67em; font-weight: bold; }
  </pre>

  In the following CSS block, <var>x</var> is shorthand for the following selector:
  <code>:matches(article, aside, nav, section)</code>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  <var>x</var> h1 { margin-top: 0.83em; margin-bottom: 0.83em; font-size: 1.50em; }
  <var>x</var> <var>x</var> h1 { margin-top: 1.00em; margin-bottom: 1.00em; font-size: 1.17em; }
  <var>x</var> <var>x</var> <var>x</var> h1 { margin-top: 1.33em; margin-bottom: 1.33em; font-size: 1.00em; }
  <var>x</var> <var>x</var> <var>x</var> <var>x</var> h1 { margin-top: 1.67em; margin-bottom: 1.67em; font-size: 0.83em; }
  <var>x</var> <var>x</var> <var>x</var> <var>x</var> <var>x</var> h1 { margin-top: 2.33em; margin-bottom: 2.33em; font-size: 0.67em; }
  </pre>

  <p class="note">
  The shorthand is used to keep this block at least mildly readable.
  </p>

<h4 id="lists"><dfn>Lists</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  dir, dd, dl, dt, menu, ol, ul { display: block; }
  li { display: list-item; }

  dir, dl, menu, ol, ul { margin-top: 1em; margin-bottom: 1em; }

  :matches(dir, dl, menu, ol, ul) :matches(dir, dl, menu, ol, ul) {
  margin-top: 0; margin-bottom: 0;
  }

  dd { margin-left: 40px; } /* <a>LTR-specific</a>: use 'margin-right' for rtl elements */
  dir, menu, ol, ul { padding-left: 40px; } /* <a>LTR-specific</a>: use 'padding-right' for rtl elements */

  ol { list-style-type: decimal; }

  dir, menu, ul {
  list-style-type: disc;
  }
  :matches(dir, menu, ol, ul) :matches(dir, menu, ul) {
  list-style-type: circle;
  }
  :matches(dir, menu, ol, ul) :matches(dir, menu, ol, ul) :matches(dir, menu, ul) {
  list-style-type: square;
  }
  </pre>

  The following rules are also expected to apply, as <a>presentational
  hints</a>:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  ol[type=1], li[type=1] { list-style-type: decimal; }
  ol[type=a], li[type=a] { list-style-type: lower-alpha; }
  ol[type=A], li[type=A] { list-style-type: upper-alpha; }
  ol[type=i], li[type=i] { list-style-type: lower-roman; }
  ol[type=I], li[type=I] { list-style-type: upper-roman; }
  ul[type=none i], li[type=none i] { list-style-type: none; }
  ul[type=disc i], li[type=disc i] { list-style-type: disc; }
  ul[type=circle i], li[type=circle i] { list-style-type: circle; }
  ul[type=square i], li[type=square i] { list-style-type: square; }
  </pre>

  In the above stylesheet, the attribute selectors for the
  <code>ol</code> and <code>li</code> elements are expected to be treated as
  <a>case-sensitive</a>.

  When rendering <code>li</code> elements, non-CSS user agents are expected to use the
  <a>ordinal value</a> of the <code>li</code> element to render the counter in the list item
  marker.

  <p class="critical">This specification does not yet define the
  CSS-specific rules for rendering <code>li</code> elements, because CSS doesn't yet provide
  sufficient hooks for this purpose.

<h4 id="tables"><dfn>Tables</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  table { display: table; }
  caption { display: table-caption; }
  colgroup, colgroup[hidden] { display: table-column-group; }
  col, col[hidden] { display: table-column; }
  thead, thead[hidden] { display: table-header-group; }
  tbody, tbody[hidden] { display: table-row-group; }
  tfoot, tfoot[hidden] { display: table-footer-group; }
  tr, tr[hidden] { display: table-row; }
  td, th, td[hidden], th[hidden] { display: table-cell; }

  colgroup[hidden], col[hidden], thead[hidden], tbody[hidden],
  tfoot[hidden], tr[hidden], td[hidden], th[hidden] {
  visibility: collapse;
  }

  table {
  box-sizing: border-box;
  border-spacing: 2px;
  border-collapse: separate;
  text-indent: initial;
  }
  td, th { padding: 1px; }
  th { font-weight: bold; }

  thead, tbody, tfoot, table > tr { vertical-align: middle; }
  tr, td, th { vertical-align: inherit; }

  table, td, th { border-color: gray; }
  thead, tbody, tfoot, tr { border-color: inherit; }
  table[rules=none i], table[rules=groups i], table[rules=rows i],
  table[rules=cols i], table[rules=all i], table[frame=void i],
  table[frame=above i], table[frame=below i], table[frame=hsides i],
  table[frame=lhs i], table[frame=rhs i], table[frame=vsides i],
  table[frame=box i], table[frame=border i],
  table[rules=none i] > tr > td, table[rules=none i] > tr > th,
  table[rules=groups i] > tr > td, table[rules=groups i] > tr > th,
  table[rules=rows i] > tr > td, table[rules=rows i] > tr > th,
  table[rules=cols i] > tr > td, table[rules=cols i] > tr > th,
  table[rules=all i] > tr > td, table[rules=all i] > tr > th,
  table[rules=none i] > thead > tr > td, table[rules=none i] > thead > tr > th,
  table[rules=groups i] > thead > tr > td, table[rules=groups i] > thead > tr > th,
  table[rules=rows i] > thead > tr > td, table[rules=rows i] > thead > tr > th,
  table[rules=cols i] > thead > tr > td, table[rules=cols i] > thead > tr > th,
  table[rules=all i] > thead > tr > td, table[rules=all i] > thead > tr > th,
  table[rules=none i] > tbody > tr > td, table[rules=none i] > tbody > tr > th,
  table[rules=groups i] > tbody > tr > td, table[rules=groups i] > tbody > tr > th,
  table[rules=rows i] > tbody > tr > td, table[rules=rows i] > tbody > tr > th,
  table[rules=cols i] > tbody > tr > td, table[rules=cols i] > tbody > tr > th,
  table[rules=all i] > tbody > tr > td, table[rules=all i] > tbody > tr > th,
  table[rules=none i] > tfoot > tr > td, table[rules=none i] > tfoot > tr > th,
  table[rules=groups i] > tfoot > tr > td, table[rules=groups i] > tfoot > tr > th,
  table[rules=rows i] > tfoot > tr > td, table[rules=rows i] > tfoot > tr > th,
  table[rules=cols i] > tfoot > tr > td, table[rules=cols i] > tfoot > tr > th,
  table[rules=all i] > tfoot > tr > td, table[rules=all i] > tfoot > tr > th {
  border-color: black;
  }
  </pre>

  The following rules are also expected to apply, as <a>presentational hints</a>:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  table[align=left i] { float: left; }
  table[align=right i] { float: right; }
  table[align=center i] { margin-left: auto; margin-right: auto; }
  thead[align=absmiddle i], tbody[align=absmiddle i], tfoot[align=absmiddle i],
  tr[align=absmiddle i], td[align=absmiddle i], th[align=absmiddle i] {
  text-align: center;
  }

  caption[align=bottom i] { caption-side: bottom; }
  p[align=left i], h1[align=left i], h2[align=left i], h3[align=left i],
  h4[align=left i], h5[align=left i], h6[align=left i] {
  text-align: left;
  }
  p[align=right i], h1[align=right i], h2[align=right i], h3[align=right i],
  h4[align=right i], h5[align=right i], h6[align=right i] {
  text-align: right;
  }
  p[align=center i], h1[align=center i], h2[align=center i], h3[align=center i],
  h4[align=center i], h5[align=center i], h6[align=center i] {
  text-align: center;
  }
  p[align=justify i], h1[align=justify i], h2[align=justify i], h3[align=justify i],
  h4[align=justify i], h5[align=justify i], h6[align=justify i] {
  text-align: justify;
  }
  thead[valign=top i], tbody[valign=top i], tfoot[valign=top i],
  tr[valign=top i], td[valign=top i], th[valign=top i] {
  vertical-align: top;
  }
  thead[valign=middle i], tbody[valign=middle i], tfoot[valign=middle i],
  tr[valign=middle i], td[valign=middle i], th[valign=middle i] {
  vertical-align: middle;
  }
  thead[valign=bottom i], tbody[valign=bottom i], tfoot[valign=bottom i],
  tr[valign=bottom i], td[valign=bottom i], th[valign=bottom i] {
  vertical-align: bottom;
  }
  thead[valign=baseline i], tbody[valign=baseline i], tfoot[valign=baseline i],
  tr[valign=baseline i], td[valign=baseline i], th[valign=baseline i] {
  vertical-align: baseline;
  }

  td[nowrap], th[nowrap] { white-space: nowrap; }

  table[rules=none i], table[rules=groups i], table[rules=rows i],
  table[rules=cols i], table[rules=all i] {
  border-style: hidden;
  border-collapse: collapse;
  }
  table[border] { border-style: outset; } /* <a>only if border is not equivalent to zero</a> */
  table[frame=void i] { border-style: hidden; }
  table[frame=above i] { border-style: outset hidden hidden hidden; }
  table[frame=below i] { border-style: hidden hidden outset hidden; }
  table[frame=hsides i] { border-style: outset hidden outset hidden; }
  table[frame=lhs i] { border-style: hidden hidden hidden outset; }
  table[frame=rhs i] { border-style: hidden outset hidden hidden; }
  table[frame=vsides i] { border-style: hidden outset; }
  table[frame=box i], table[frame=border i] { border-style: outset; }

  table[border] > tr > td, table[border] > tr > th,
  table[border] > thead > tr > td, table[border] > thead > tr > th,
  table[border] > tbody > tr > td, table[border] > tbody > tr > th,
  table[border] > tfoot > tr > td, table[border] > tfoot > tr > th {
  /* <a>only if border is not equivalent to zero</a> */
  border-width: 1px;
  border-style: inset;
  }
  table[rules=none i] > tr > td, table[rules=none i] > tr > th,
  table[rules=none i] > thead > tr > td, table[rules=none i] > thead > tr > th,
  table[rules=none i] > tbody > tr > td, table[rules=none i] > tbody > tr > th,
  table[rules=none i] > tfoot > tr > td, table[rules=none i] > tfoot > tr > th,
  table[rules=groups i] > tr > td, table[rules=groups i] > tr > th,
  table[rules=groups i] > thead > tr > td, table[rules=groups i] > thead > tr > th,
  table[rules=groups i] > tbody > tr > td, table[rules=groups i] > tbody > tr > th,
  table[rules=groups i] > tfoot > tr > td, table[rules=groups i] > tfoot > tr > th,
  table[rules=rows i] > tr > td, table[rules=rows i] > tr > th,
  table[rules=rows i] > thead > tr > td, table[rules=rows i] > thead > tr > th,
  table[rules=rows i] > tbody > tr > td, table[rules=rows i] > tbody > tr > th,
  table[rules=rows i] > tfoot > tr > td, table[rules=rows i] > tfoot > tr > th {
  border-width: 1px;
  border-style: none;
  }
  table[rules=cols i] > tr > td, table[rules=cols i] > tr > th,
  table[rules=cols i] > thead > tr > td, table[rules=cols i] > thead > tr > th,
  table[rules=cols i] > tbody > tr > td, table[rules=cols i] > tbody > tr > th,
  table[rules=cols i] > tfoot > tr > td, table[rules=cols i] > tfoot > tr > th {
  border-width: 1px;
  border-style: none solid;
  }
  table[rules=all i] > tr > td, table[rules=all i] > tr > th,
  table[rules=all i] > thead > tr > td, table[rules=all i] > thead > tr > th,
  table[rules=all i] > tbody > tr > td, table[rules=all i] > tbody > tr > th,
  table[rules=all i] > tfoot > tr > td, table[rules=all i] > tfoot > tr > th {
  border-width: 1px;
  border-style: solid;
  }

  table[rules=groups i] > colgroup {
  border-left-width: 1px;
  border-left-style: solid;
  border-right-width: 1px;
  border-right-style: solid;
  }
  table[rules=groups i] > thead,
  table[rules=groups i] > tbody,
  table[rules=groups i] > tfoot {
  border-top-width: 1px;
  border-top-style: solid;
  border-bottom-width: 1px;
  border-bottom-style: solid;
  }

  table[rules=rows i] > tr, table[rules=rows i] > thead > tr,
  table[rules=rows i] > tbody > tr, table[rules=rows i] > tfoot > tr {
  border-top-width: 1px;
  border-top-style: solid;
  border-bottom-width: 1px;
  border-bottom-style: solid;
  }
  </pre>

  In <a>quirks mode</a>, the following rules are also expected to apply:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  table {
  font-weight: initial;
  font-style: initial;
  font-variant: initial;
  font-size: initial;
  line-height: initial;
  white-space: initial;
  text-align: initial;
  }
  </pre>

  <hr />

  For the purposes of the CSS table model, the <code>col</code> element is expected to be treated
  as if it was present as many times as its <code>span</code> attribute <a>specifies</a>.

  For the purposes of the CSS table model, the <code>colgroup</code> element, if it contains no
  <code>col</code> element, is expected to be treated as if it had as many such children as its
  <code>span</code> attribute <a>specifies</a>.

  For the purposes of the CSS table model, the <code>colspan</code> and
  <code>rowspan</code> attributes on <code>td</code> and <code>th</code>
  elements are expected to <a>provide</a> the
  <i>special knowledge</i> regarding cells spanning rows and columns.

  In <a>HTML documents</a>, the following rules are also expected to apply:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  :matches(table, thead, tbody, tfoot, tr) > form {  display: none !important; }
  </pre>

  <hr />

  The <code>table</code> element's <code>cellspacing</code>
  attribute <a>maps to the pixel length property</a> 'border-spacing' on the element.

  The <code>table</code> element's <code>cellpadding</code>
  attribute <a>maps to the pixel length
  properties</a> 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' of any
  <code>td</code> and <code>th</code> elements that have corresponding <a>cells</a> in the <a>table</a> corresponding to
  the <code>table</code> element.

  The <code>table</code> element's <code>hspace</code> attribute <a>maps to the dimension properties</a> 'margin-left' and
  'margin-right' on the <code>table</code> element.

  The <code>table</code> element's <code>vspace</code> attribute <a>maps to the dimension properties</a> 'margin-top' and
  'margin-bottom' on the <code>table</code> element.

  The <code>table</code> element's <code>height</code> attribute
  <a>maps to the dimension property (ignoring zero)</a> 'height' on the <code>table</code>
  element.

  The <code>table</code> element's <code>width</code> attribute
  <a>maps to the dimension property (ignoring zero)</a> 'width' on the <code>table</code>
  element.

  The <code>col</code> element's <code>width</code> attribute <a>maps
  to the dimension property (ignoring zero)</a> 'width' on the <code>col</code> element.

  The <code>tr</code> element's <code>height</code> attribute <a>maps
  to the dimension property (ignoring zero)</a> 'height' on the <code>tr</code> element.

  The <code>td</code> and <code>th</code> elements' <code>height</code>
  attributes <a>map to the dimension
  property (ignoring zero)</a> 'height' on the element.

  The <code>td</code> and <code>th</code> elements' <code>width</code>
  attributes <a>map to the dimension
  property (ignoring zero)</a> 'width' on the element.

  <hr />

  The <code>caption</code> element unless specified otherwise below, and the <code>thead</code>,
  <code>tbody</code>, <code>tfoot</code>, <code>tr</code>, <code>td</code>, and <code>th</code>
  elements when they have an <code>align</code> attribute whose value is an <a>ASCII
  case-insensitive</a> match for either the string "<code>center</code>" or the string
  "<code>middle</code>", are expected to center text within themselves, as if they had
  their 'text-align' property set to 'center' in a <a>presentational hint</a>, and to <a>align descendants</a> to the center.

  The <code>caption</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, and <code>th</code> elements, when they have an <code>align</code> attribute whose value is an <a>ASCII case-insensitive</a> match for
  the string "<code>left</code>", are expected to left-align text within themselves, as if
  they had their 'text-align' property set to 'left' in a <a>presentational hint</a>, and to <a>align descendants</a> to the left.

  The <code>caption</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, and <code>th</code> elements, when they have an <code>align</code> attribute whose value is an <a>ASCII case-insensitive</a> match for
  the string "<code>right</code>", are expected to right-align text within themselves, as
  if they had their 'text-align' property set to 'right' in a <a>presentational hint</a>, and to <a>align descendants</a> to the right.

  The <code>caption</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, and <code>th</code> elements, when they have an <code>align</code> attribute whose value is an <a>ASCII case-insensitive</a> match for
  the string "<code>justify</code>", are expected to full-justify text within themselves,
  as if they had their 'text-align' property set to 'justify' in a <a>presentational hint</a>, and to <a>align descendants</a> to the left.

  User agents are expected to have a rule in their user agent stylesheet that matches
  <code>th</code> elements that have a parent node whose computed value for the 'text-align'
  property is its initial value, whose declaration block consists of just a single declaration that
  sets the 'text-align' property to the value 'center'.

  <hr />

  When a <code>table</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, or <code>th</code> element has a <code>background</code> attribute set to a non-empty value, the new value is
  expected to be <a>resolved</a> relative to the element, and if this is
  successful, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'background-image' property to the
  resulting <a>absolute URL</a>.

  When a <code>table</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
  <code>tr</code>, <code>td</code>, or <code>th</code> element has a <code>bgcolor</code>
  attribute set, the new value is expected to be parsed using the <a>rules for parsing a legacy
  color value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the element's
  'background-color' property to the resulting color.

  When a <code>table</code> element has a <code>bordercolor</code>
  attribute, its value is expected to be parsed using the <a>rules for parsing a legacy color
  value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the element's
  'border-top-color', 'border-right-color', 'border-bottom-color', and 'border-left-color'
  properties to the resulting color.

  <hr />

  The <code>table</code> element's <code>border</code> attribute <a>maps to the pixel length properties</a>
  'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width' on the
  element. If the attribute is present but parsing the attribute's value using the <a>rules for
  parsing non-negative integers</a> generates an error, a default value of 1px is expected to be
  used for that property instead.

  Rules marked "<dfn>only if border is not equivalent to zero</dfn>"
  in the CSS block above is expected to only be applied if the <code>border</code> attribute mentioned in the selectors for the rule is not
  only present but, when parsed using the <a>rules for parsing non-negative integers</a>, is
  also found to have a value other than zero or to generate an error.

  <hr />

  In <a>quirks mode</a>, a <code>td</code> element or a <code>th</code> element that has a
  <code>nowrap</code> attribute but also has a <code>width</code> attribute whose value, when parsed using the <a>rules for
  parsing non-zero dimension values</a>, is found to be a length (not an error or a number
  classified as a percentage), is expected to have a <a>presentational hint</a> setting the element's 'white-space' property to 'normal',
  overriding the rule in the CSS block above that sets it to 'nowrap'.

  <hr />

  User agents are expected to render <a>sorting interface <code>th</code> elements</a> in such a manner as to indicate that
  activating the elements will cause the table to be sorted.

<h4 id="margin-collapsing-quirks"><dfn>Margin collapsing quirks</dfn></h4>

  A node is <dfn>substantial</dfn> if it is a text node
  that is not <a>inter-element whitespace</a>, or if it is an element node.

  A node is <dfn>blank</dfn> if it is an element that contains no
  <a>substantial</a> nodes.

  The <dfn>elements with default margins</dfn>
  are the following elements: <code>blockquote</code>, <code>dir</code>, <code>dl</code>,
  <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>,
  <code>h6</code>, <code>listing</code>, <code>menu</code>, <code>ol</code>,
  <code>p</code>, <code>plaintext</code>, <code>pre</code>, <code>ul</code>, <code>xmp</code>

  In <a>quirks mode</a>, any <a>element
  with default margins</a> that is the child of a <code>body</code>, <code>td</code>, or
  <code>th</code> element and has no <a>substantial</a>
  previous siblings is expected to have a user-agent level style sheet rule that sets its
  'margin-top' property to zero.

  In <a>quirks mode</a>, any <a>element
  with default margins</a> that is the child of a <code>body</code>, <code>td</code>, or
  <code>th</code> element, has no <a>substantial</a>
  previous siblings, and is <a>blank</a>, is expected to have
  a user-agent level style sheet rule that sets its 'margin-bottom' property to zero also.

  In <a>quirks mode</a>, any <a>element
  with default margins</a> that is the child of a <code>td</code> or <code>th</code> element, has
  no <a>substantial</a> following siblings, and is <a>blank</a>, is expected to have a user-agent level style sheet
  rule that sets its 'margin-top' property to zero.

  In <a>quirks mode</a>, any <code>p</code> element that is the child of a <code>td</code>
  or <code>th</code> element and has no <a>substantial</a> following siblings, is expected to have a
  user-agent level style sheet rule that sets its 'margin-bottom' property to zero.

<h4 id="form-controls"><dfn>Form controls</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  input, select, option, optgroup, button, textarea, keygen {
  text-indent: initial;
  }

  input:matches([type=radio i], [type=checkbox i], [type=reset i], [type=button i],
  [type=submit i], [type=search i]), select, button {
  box-sizing: border-box;
  }
  </pre>

  In <a>quirks mode</a>, the following rules are also expected to apply:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  input:not([type=image i]), textarea { box-sizing: border-box; }
  </pre>

  Each kind of form control is also given a specific default binding, as described in subsequent
  sections, which implements the look and feel of the control.

<h4 id="the-hr-element"><dfn>The <code>hr</code> element</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  hr { color: gray; border-style: inset; border-width: 1px; margin: 0.5em auto; }
  </pre>

  The following rules are also expected to apply, as <a>presentational hints</a>:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  hr[align=left] { margin-left: 0; margin-right: auto; }
  hr[align=right] { margin-left: auto; margin-right: 0; }
  hr[align=center] { margin-left: auto; margin-right: auto; }
  hr[color], hr[noshade] { border-style: solid; }
  </pre>

  If an <code>hr</code> element has either a <code>color</code> attribute
  or a <code>noshade</code> attribute, and furthermore also has a <code>size</code> attribute, and parsing that attribute's value using the
  <a>rules for parsing non-negative integers</a> doesn't generate an error, then the user
  agent is expected to use the parsed value divided by two as a pixel length for
  <a>presentational hints</a> for the properties 'border-top-width', 'border-right-width',
  'border-bottom-width', and 'border-left-width' on the element.

  Otherwise, if an <code>hr</code> element has neither a <code>color</code>
  attribute nor a <code>noshade</code> attribute, but does have a <code>size</code> attribute, and parsing that attribute's value using the
  <a>rules for parsing non-negative integers</a> doesn't generate an error, then: if the
  parsed value is one, then the user agent is expected to use the attribute as a <a>presentational hint</a> setting the element's
  'border-bottom-width' to 0; otherwise, if the parsed value is greater than one, then the user
  agent is expected to use the parsed value minus two as a pixel length for <a>presentational
  hints</a> for the 'height' property on the element.

  The <code>width</code> attribute on an <code>hr</code> element <a>maps
  to the dimension property</a> 'width' on the element.

  When an <code>hr</code> element has a <code>color</code> attribute, its
  value is expected to be parsed using the <a>rules for parsing a legacy color value</a>, and
  if that does not return an error, the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'color' property to
  the resulting color.

<h4 id="the-fieldset-and-legend-elements"><dfn>The <code>fieldset</code> and <code>legend</code> elements</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  fieldset {
  display: block;
  margin-left: 2px; margin-right: 2px;
  border: groove 2px ThreeDFace;
  padding: 0.35em 0.625em 0.75em;
  min-width: min-content;
  }

  legend {
  padding-left: 2px; padding-right: 2px;
  }
  </pre>

  The <code>fieldset</code> element is expected to establish a new block formatting context.

  If the <code>fieldset</code> element has a child that matches the conditions in the list below,
  then the first such child is the <code>fieldset</code> element's <dfn>rendered legend</dfn>:

  <ul class="brief">

    <li>The child is a <code>legend</code> element.</li>

    <li>The child is not out-of-flow (e.g. not absolutely positioned or floated).</li>

    <li>The child is generating a box (e.g. it is not 'display:none').</li>

  </ul>

  A <code>fieldset</code> element's <a>rendered legend</a>, if any, is expected to be
  rendered over the top border edge of the <code>fieldset</code> element as a 'block' box
  (overriding any explicit 'display' value). In the absence of an explicit width, the box should
  shrink-wrap. If the <code>legend</code> element in question has an <code>align</code> attribute, and its value is an <a>ASCII
  case-insensitive</a> match for one of the strings in the first column of the following table,
  then the <code>legend</code> is expected to be rendered horizontally aligned over the border edge
  in the position given in the corresponding cell on the same row in the second column. If the
  attribute is absent or has a value that doesn't match any of the cases in the table, then the
  position is expected to be on the right if the 'direction' property on this element has a computed
  value of 'rtl', and on the left otherwise.

  <table>
    <thead>
    <tr>
      <th>Attribute value
      <th>Alignment position
    <tbody>
    <tr>
      <td><code>left</code>
      <td>On the left
    <tr>
      <td><code>right</code>
      <td>On the right
    <tr>
      <td><code>center</code>
      <td>In the middle
  </table>

<h3 id="replaced-elements"><dfn>Replaced elements</dfn></h3>

<h4 id="embedded-content"><dfn>Embedded content</dfn></h4>

  The <code>embed</code>, <code>iframe</code>, and <code>video</code> elements are expected to be
  treated as <a>replaced elements</a>.

  A <code>canvas</code> element that <a>represents</a> <a>embedded content</a> is
  expected to be treated as a <a>replaced element</a>; the contents of such elements are the
  element's bitmap, if any, or else a transparent black bitmap with the same <a>intrinsic
  dimensions</a> as the element. Other <code>canvas</code> elements are expected to be treated
  as ordinary elements in the rendering model.

  An <code>object</code> element that <a>represents</a> an image, plugin, or <a>nested
  browsing context</a> is expected to be treated as a <a>replaced element</a>. Other
  <code>object</code> elements are expected to be treated as ordinary elements in the rendering
  model.

  An <code>applet</code> element that <a>represents</a> a <a>plugin</a> is expected
  to be treated as a <a>replaced element</a>. Other <code>applet</code> elements are expected
  to be treated as ordinary elements in the rendering model.

  The <code>audio</code> element, when it is <a>exposing a user interface</a>, is expected to be treated as a
  <a>replaced element</a> about one line high, as wide as is necessary to expose the user
  agent's user interface features. When an <code>audio</code> element is not <a>exposing a user interface</a>, the user agent is expected to force
  its 'display' property to compute to 'none', irrespective of CSS rules.

  Whether a <code>video</code> element is <a>exposing a user interface</a> is not expected to affect the size of the rendering;
  controls are expected to be overlaid above the page content without causing any layout changes,
  and are expected to disappear when the user does not need them.

  When a <code>video</code> element represents a poster frame or frame of video, the poster frame
  or frame of video is expected to be rendered at the largest size that maintains the aspect ratio
  of that poster frame or frame of video without being taller or wider than the <code>video</code>
  element itself, and is expected to be centered in the <code>video</code> element.

  Any subtitles or captions are expected to be overlayed directly on top of their
  <code>video</code> element, as defined by the relevant rendering rules; for WebVTT, those are the
  <a>rules for updating the display of WebVTT text tracks</a>. [[!WEBVTT]]

  When the user agent starts <a>exposing a user
  interface</a> for a <code>video</code> element, the user agent should run the <a>rules for
  updating the text track rendering</a> of each of the <a>text
  tracks</a> in the <code>video</code> element's <a>list of text tracks</a> that are <a>showing</a> and whose <a>text track kind</a> is one of <code>subtitles</code> or <code>captions</code> (e.g., for <a>text
  tracks</a> based on <a>WebVTT</a>, the <a>rules for updating the display of WebVTT
  text tracks</a>). [[!WEBVTT]]

  <p class="note">
  Resizing <code>video</code> and <code>canvas</code> elements does not interrupt
  video playback or clear the canvas.
  </p>

  <hr />

  The following CSS rules are expected to apply:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  iframe:not([seamless]) { border: 2px inset; }
  iframe[seamless] { display: block; }
  <a>video { object-fit: contain; }</a>
  </pre>

<h4 id="images"><dfn>Images</dfn></h4>

  User agents are expected to render <code>img</code> elements and <code>input</code> elements
  whose <code>type</code> attributes are in the <a>Image Button</a> state, according to the first applicable rules
  from the following list:

  <dl class="switch">

    <dt>If the element <a>represents</a> an image</dt>

    <dd>The user agent is expected to treat the element as a <a>replaced element</a> and
    render the image according to the rules for doing so defined in CSS.</dd>

    <dt>

    If the element does not <a>represent</a> an image, but the element
    already has <a>intrinsic dimensions</a> (e.g. from the <a>dimension attributes</a>
    or CSS rules), and either:

    <ul>

      <li>the user agent has reason to believe that the image will become <i>available</i> and be rendered in due
      course, or

      <li>the element has no <code>alt</code> attribute, or

      <li>the <code>Document</code> is in <a>quirks mode</a>

    </ul>

    </dt>

    <dd>The user agent is expected to treat the element as a <a>replaced element</a> whose
    content is the text that the element represents, if any, optionally alongside an icon indicating
    that the image is being obtained (if applicable). For <code>input</code> elements, the element
    is expected to appear button-like to indicate that the element is a <a>button</a>.</dd>

    <dt>If the element is an <code>img</code> element that <a>represents</a> some text and the
    user agent does not expect this to change</dt>

    <dd>The user agent is expected to treat the element as a non-replaced phrasing element whose
    content is the text, optionally with an icon indicating that an image is missing, so that the
    user can request the image be displayed or investigate why it is not rendering. In non-graphical
    contexts, such an icon should be omitted.</dd>

    <dt>If the element is an <code>img</code> element that <a>represents</a> nothing and the
    user agent does not expect this to change</dt>

    <dd>The user agent is expected to treat the element as an empty inline element. (In the absence
    of further styles, this will cause the element to essentially not be rendered.)</dd>

    <dt>If the element is an <code>input</code> element that does not <a>represent</a> an image and the user agent does not expect this to change</dt>

    <dd>The user agent is expected to treat the element as a <a>replaced element</a>
    consisting of a button whose content is the element's alternative text. The <a>intrinsic
    dimensions</a> of the button are expected to be about one line in height and whatever width
    is necessary to render the text on one line.</dd>

  </dl>

  The icons mentioned above are expected to be relatively small so as not to disrupt most text
  but be easily clickable. In a visual environment, for instance, icons could be 16 pixels by 16
  pixels square, or 1em by 1em if the images are scalable. In an audio environment, the icon could
  be a short bleep. The icons are intended to indicate to the user that they can be used to get to
  whatever options the UA provides for images, and, where appropriate, are expected to provide
  access to the context menu that would have come up if the user interacted with the actual
  image.

  <hr />

  All animated images with the same <a>absolute URL</a> and the same image data are
  expected to be rendered synchronized to the same timeline as a group, with the timeline starting
  at the time of the least recent addition to the group.

  <p class="note">
  In other words, when a second image with the same <a>absolute URL</a> and
  animated image data is inserted into a document, it jumps to the point in the animation cycle that
  is currently being displayed by the first image.
  </p>

  When a user agent is to <dfn>restart the animation</dfn> for an <code>img</code> element
  showing an animated image, all animated images with the same <a>absolute URL</a> and the
  same image data in that <code>img</code> element's <a>node document</a> are expected to restart
  their animation from the beginning.

  <hr />

  The following CSS rules are expected to apply when the <code>Document</code> is in <a>quirks
  mode</a>:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  img[align=left i] { margin-right: 3px; }
  img[align=right i] { margin-left: 3px; }
  </pre>

  </div>

  <div class="impl">

<h4 id="attributes-for-embedded-content-and-images"><dfn>Attributes for embedded content and images</dfn></h4>

  The following CSS rules are expected to apply as <a>presentational hints</a>:

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  iframe[frameborder=0], iframe[frameborder=no i] { border: none; }

  applet[align=left i], embed[align=left i], iframe[align=left i],
  img[align=left i], input[type=image i][align=left i], object[align=left i] {
  float: left;
  }

  applet[align=right i], embed[align=right i], iframe[align=right i],
  img[align=right i], input[type=image i][align=right i], object[align=right i] {
  float: right;
  }

  applet[align=top i], embed[align=top i], iframe[align=top i],
  img[align=top i], input[type=image i][align=top i], object[align=top i] {
  vertical-align: top;
  }

  applet[align=baseline i], embed[align=baseline i], iframe[align=baseline i],
  img[align=baseline i], input[type=image i][align=baseline i], object[align=baseline i] {
  vertical-align: baseline;
  }

  applet[align=texttop i], embed[align=texttop i], iframe[align=texttop i],
  img[align=texttop i], input[type=image i][align=texttop i], object[align=texttop i] {
  vertical-align: text-top;
  }

  applet[align=absmiddle i], embed[align=absmiddle i], iframe[align=absmiddle i],
  img[align=absmiddle i], input[type=image i][align=absmiddle i], object[align=absmiddle i],
  applet[align=abscenter i], embed[align=abscenter i], iframe[align=abscenter i],
  img[align=abscenter i], input[type=image i][align=abscenter i], object[align=abscenter i] {
  vertical-align: middle;
  }

  applet[align=bottom i], embed[align=bottom i], iframe[align=bottom i],
  img[align=bottom i], input[type=image i][align=bottom i],
  object[align=bottom i] {
  vertical-align: bottom;
  }
  </pre>

  When an <code>applet</code>, <code>embed</code>, <code>iframe</code>, <code>img</code>, or
  <code>object</code> element, or an <code>input</code> element whose <code>type</code> attribute is in the <a>Image Button</a> state, has an <code>align</code>
  attribute whose value is an <a>ASCII case-insensitive</a> match for the string "<code>center</code>" or the string "<code>middle</code>", the user agent is expected
  to act as if the element's 'vertical-align' property was set to a value that aligns the vertical
  middle of the element with the parent element's baseline.

  The <code>hspace</code> attribute of <code>applet</code>, <code>embed</code>,
  <code>iframe</code>, <code>img</code>, or <code>object</code> elements, and <code>input</code>
  elements with a <code>type</code> attribute in the <a>Image Button</a> state, <a>maps to the dimension properties</a> 'margin-left' and 'margin-right' on the
  element.

  The <code>vspace</code> attribute of <code>applet</code>, <code>embed</code>,
  <code>iframe</code>, <code>img</code>, or <code>object</code> elements, and <code>input</code>
  elements with a <code>type</code> attribute in the <a>Image Button</a> state, <a>maps to the dimension properties</a> 'margin-top' and 'margin-bottom' on the
  element.

  When an <code>img</code> element, <code>object</code> element, or <code>input</code> element
  with a <code>type</code> attribute in the <a>Image Button</a> state has a <code>border</code> attribute whose value, when parsed using the <a>rules for
  parsing non-negative integers</a>, is found to be a number greater than zero, the user agent is
  expected to use the parsed value for eight <a>presentational hints</a>: four setting the
  parsed value as a pixel length for the element's 'border-top-width', 'border-right-width',
  'border-bottom-width', and 'border-left-width' properties, and four setting the element's
  'border-top-style', 'border-right-style', 'border-bottom-style', and 'border-left-style'
  properties to the value 'solid'.

  The <code>width</code> and <code>height</code> attributes on <code>applet</code>, <code>embed</code>,
  <code>iframe</code>, <code>img</code>, <code>object</code> or <code>video</code> elements, and
  <code>input</code> elements with a <code>type</code> attribute in the
  <a>Image Button</a> state and that either represents an image
  or that the user expects will eventually represent an image, <a>map to the dimension properties</a> 'width' and 'height' on the element
  respectively.

  </div>

  <div class="impl">

<h4 id="image-maps"><dfn>Image maps</dfn></h4>

  Shapes on an <a>image map</a> are expected to act, for the purpose of the CSS cascade, as
  elements independent of the original <code>area</code> element that happen to match the same style
  rules but inherit from the <code>img</code> or <code>object</code> element.

  For the purposes of the rendering, only the 'cursor' property is expected to have any effect on
  the shape.

  <p class="example">
  Thus, for example, if an <code>area</code> element has a <code>style</code> attribute that sets the 'cursor' property to 'help', then when the
  user designates that shape, the cursor would change to a Help cursor.
  </p>

  <p class="example">
  Similarly, if an <code>area</code> element had a CSS rule that set its 'cursor'
  property to 'inherit' (or if no rule setting the 'cursor' property matched the element at all),
  the shape's cursor would be inherited from the <code>img</code> or <code>object</code> element of
  the <a>image map</a>, not from the parent of the <code>area</code> element.
  </p>

  </div>

  <div class="impl">

<h3 id="bindings"><dfn>Bindings</dfn></h3>

<h4 id="introduction"><dfn>Introduction</dfn></h4>

  A number of elements have their rendering defined in terms of the 'binding' property. <a>\[BECSS]</a>

  The CSS snippets below set the 'binding' property to a user-agent-defined value, represented
  below by keywords like <code><i>button</i></code>. The rules then described for
  these bindings are only expected to apply if the element's 'binding' property has not been
  overridden (e.g. by the author) to have another value.

  Exactly how the bindings are implemented is not specified by this specification. User agents
  are encouraged to make their bindings set the 'appearance' CSS property appropriately to achieve
  platform-native appearances for widgets, and are expected to implement any relevant animations,
  etc, that are appropriate for the platform. [[!CSSUI]]

  </div>

  <div class="impl">

<h4 id="the-button-element"><dfn>The <code>button</code> element</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  button { binding: <i>button</i>; }
  </pre>

  When the <i>button</i> binding applies to a <code>button</code> element, the element
  is expected to render as an 'inline-block' box rendered as a button whose contents are the
  contents of the element.

  When the <code>button</code> element's <code>type</code> attribute is
  in the <a>Menu</a> state, the user agent is expected to
  indicate that activating the element will display a menu, e.g. by displaying a down-pointing
  triangle after the button's label.

  </div>

  <div class="impl">

<h4 id="the-details-element"><dfn>The <code>details</code> element</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  details { binding: <i>details</i>; }
  </pre>

  When the <i>details</i> binding applies to a <code>details</code> element, the element
  is expected to render as a 'block' box with its 'padding-left' property set to '40px' for
  left-to-right elements (<a>LTR-specific</a>) and with its 'padding-right' property set to
  '40px' for right-to-left elements. The element's shadow tree is expected to take the element's
  first child <code>summary</code> element, if any, and place it in a first 'block' box container,
  and then take the element's remaining descendants, if any, and place them in a second 'block' box
  container.

  The first container is expected to contain at least one line box, and that line box is expected
  to contain a disclosure widget (typically a triangle), horizontally positioned within the left
  padding of the <code>details</code> element. That widget is expected to allow the user to request
  that the details be shown or hidden.

  The second container is expected to have its 'overflow' property set to 'hidden'. When the
  <code>details</code> element does not have an <code>open</code>
  attribute, this second container is expected to be removed from the rendering.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-a-text-entry-widget"><dfn>The <code>input</code> element as a text entry widget</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  input { binding: <i>input-textfield</i>; }
  input[type=password i] { binding: <i>input-password</i>; }
  /* later rules override this for other values of type="" */
  </pre>

  When the <i>input-textfield</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Text</a>, <a>Search</a>,
  <a>Telephone</a>, <a>URL</a>,
  or <a>E-mail</a> state, the element is expected to render as
  an 'inline-block' box rendered as a text field.

  When the <i>input-password</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Password</a> state, the element is expected to render as an
  'inline-block' box rendered as a text field whose contents are obscured.

  If these text fields provide a text selection, then, when the user changes the currect
  selection in such a binding, the user agent is expected to <a>queue a task</a> to <a>fire
  a simple event</a> that bubbles named <code>select</code> at the element,
  using the <a>user interaction task source</a> as the task source.

  If an <code>input</code> element whose <code>type</code> attribute is
  in one of the above states has a <code>size</code> attribute, and parsing
  that attribute's value using the <a>rules for parsing non-negative integers</a> doesn't
  generate an error, then the user agent is expected to use the attribute as a <a>presentational hint</a> for the 'width' property on the element,
  with the value obtained from applying the <a>converting a character width to pixels</a>
  algorithm to the value of the attribute.

  If an <code>input</code> element whose <code>type</code> attribute is
  in one of the above states does <em>not</em> have a <code>size</code>
  attribute, then the user agent is expected to act as if it had a user-agent-level style sheet rule
  setting the 'width' property on the element to the value obtained from applying the
  <a>converting a character width to pixels</a> algorithm to the number 20.

  The <dfn>converting a character width to pixels</dfn> algorithm returns <a>(<var>size</var>-1)&times;<var>avg</var>&nbsp;+&nbsp;<var>max</var></a>,
  where <var>size</var> is the character width to convert, <var>avg</var> is the
  average character width of the primary font for the element for which the algorithm is being run,
  in pixels, and <var>max</var> is the maximum character width of that same font, also in
  pixels. (The element's 'letter-spacing' property does not affect the result.)

  When the <i>input-textfield</i> binding applies to an element, the 'line-height'
  property, if it has a computed value equivalent to a value that is less than 1.0, must have a used
  value of 1.0.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-domain-specific-widgets"><dfn>The <code>input</code> element as domain-specific widgets</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  input[type=datetime i] { binding: <i>input-datetime</i>; }
  input[type=date i] { binding: <i>input-date</i>; }
  input[type=month i] { binding: <i>input-month</i>; }
  input[type=week i] { binding: <i>input-week</i>; }
  input[type=time i] { binding: <i>input-time</i>; }
  input[type=datetime-local i] { binding: <i>input-datetime-local</i>; }
  input[type=number i] { binding: <i>input-number</i>; }
  </pre>

  When the <i>input-datetime</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Date and Time</a> state, the element is expected to render as
  an 'inline-block' box depicting a Date and Time control.

  When the <i>input-date</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Date</a> state, the element is expected to render as an
  'inline-block' box depicting a Date control.

  When the <i>input-month</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Month</a> state, the element is expected to render as an
  'inline-block' box depicting a Month control.

  When the <i>input-week</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Week</a> state, the element is expected to render as an
  'inline-block' box depicting a Week control.

  When the <i>input-time</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Time</a> state, the element is expected to render as an
  'inline-block' box depicting a Time control.

  When the <i>input-datetime-local</i> binding applies to an <code>input</code> element
  whose <code>type</code> attribute is in the <a>Local Date and Time</a> state, the element is expected
  to render as an 'inline-block' box depicting a Local Date and Time control.

  When the <i>input-number</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Number</a> state, the element is expected to render as an
  'inline-block' box depicting a Number control.

  These controls are all expected to be about one line high, and about as wide as necessary to
  show the widest possible value.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-a-range-control"><dfn>The <code>input</code> element as a range control</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  input[type=range i] { binding: <i>input-range</i>; }
  </pre>

  When the <i>input-range</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Range</a> state, the element is expected to render as an
  'inline-block' box depicting a slider control.

  When the control is wider than it is tall (or square), the control is expected to be a
  horizontal slider, with the lowest value on the right if the 'direction' property on this element
  has a computed value of 'rtl', and on the left otherwise. When the control is taller than it is
  wide, it is expected to be a vertical slider, with the lowest value on the bottom.

  Predefined suggested values (provided by the <code>list</code>
  attribute) are expected to be shown as tick marks on the slider, which the slider can snap to.

  User agents are expected to use the used value of the 'direction' property on the element to
  determine the direction in which the slider operates. Typically, a left-to-right ('ltr')
  horizontal control would have the lowest value on the left and the highest value on the right, and
  vice versa.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-a-color-well"><dfn>The <code>input</code> element as a color well</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  input[type=color i] { binding: <i>input-color</i>; }
  </pre>

  When the <i>input-color</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Color</a> state, the element is expected to render as an
  'inline-block' box depicting a color well, which, when activated, provides the user with a color
  picker (e.g. a color wheel or color palette) from which the color can be changed.

  Predefined suggested values (provided by the <code>list</code>
  attribute) are expected to be shown in the color picker interface, not on the color well
  itself.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-a-checkbox-and-radio-button-widgets"><dfn>The <code>input</code> element as a checkbox and radio button widgets</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  input[type=checkbox i] { binding: <i>input-checkbox</i>; }
  input[type=radio i] { binding: <i>input-radio</i>; }
  </pre>

  When the <i>input-checkbox</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Checkbox</a> state, the element is expected to render as an
  'inline-block' box containing a single checkbox control, with no label.

  When the <i>input-radio</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Radio Button</a> state, the element is expected to render as an
  'inline-block' box containing a single radio button control, with no label.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-a-file-upload-control"><dfn>The <code>input</code> element as a file upload control</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  input[type=file i] { binding: <i>input-file</i>; }
  </pre>

  When the <i>input-file</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>File Upload</a> state, the element is expected to render as an
  'inline-block' box containing a span of text giving the file name(s) of the <a>selected files</a>, if any, followed by a button that,
  when activated, provides the user with a file picker from which the selection can be changed.

  </div>

  <div class="impl">

<h4 id="the-input-element-as-a-button"><dfn>The <code>input</code> element as a button</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  input[type=submit i], input[type=reset i], input[type=button i] {
  binding: <i>input-button</i>;
  }
  </pre>

  When the <i>input-button</i> binding applies to an <code>input</code> element whose
  <code>type</code> attribute is in the <a>Submit Button</a>, <a>Reset
  Button</a>, or <a>Button</a> state, the element is
  expected to render as an 'inline-block' box rendered as a button, about one line high, containing
  the contents of the element's <code>value</code> attribute, if any, or
  text derived from the element's <code>type</code> attribute in a
  user-agent-defined (and probably locale-specific) fashion, if not.

  </div>

  <div class="impl">

<h4 id="the-marquee-element"><dfn>The <code>marquee</code> element</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  marquee { binding: <i>marquee</i>; }
  </pre>

  When the <i>marquee</i> binding applies to a <code>marquee</code> element, while the
  element is <a>turned on</a>, the element is expected to render in
  an animated fashion according to its attributes as follows:

  <dl>

    <dt>If the element's <code>behavior</code> attribute is in the
    <a>scroll</a> state</dt>

    <dd>

    Slide the contents of the element in the direction described by the <code>direction</code> attribute as defined below, such that it begins
    off the start side of the <code>marquee</code>, and ends flush with the inner end side.

    <p class="example">
  For example, if the <code>direction</code>
    attribute is <a>left</a> (the default), then the
    contents would start such that their left edge are off the side of the right edge of the
    <code>marquee</code>'s content area, and the contents would then slide up to the point where the
    left edge of the contents are flush with the left inner edge of the <code>marquee</code>'s
    content area.
  </p>

    Once the animation has ended, the user agent is expected to <a>increment the marquee
    current loop index</a>. If the element is still <a>turned
    on</a> after this, then the user agent is expected to restart the animation.

    </dd>

    <dt>If the element's <code>behavior</code> attribute is in the
    <a>slide</a> state</dt>

    <dd>

    Slide the contents of the element in the direction described by the <code>direction</code> attribute as defined below, such that it begins
    off the start side of the <code>marquee</code>, and ends off the end side of the
    <code>marquee</code>.

    <p class="example">
  For example, if the <code>direction</code>
    attribute is <a>left</a> (the default), then the
    contents would start such that their left edge are off the side of the right edge of the
    <code>marquee</code>'s content area, and the contents would then slide up to the point where the
    <em>right</em> edge of the contents are flush with the left inner edge of the
    <code>marquee</code>'s content area.
  </p>

    Once the animation has ended, the user agent is expected to <a>increment the marquee
    current loop index</a>. If the element is still <a>turned
    on</a> after this, then the user agent is expected to restart the animation.

    </dd>

    <dt>If the element's <code>behavior</code> attribute is in the
    <a>alternate</a> state</dt>

    <dd>

    When the <a>marquee current loop index</a> is even (or zero), slide the contents of the
    element in the direction described by the <code>direction</code>
    attribute as defined below, such that it begins flush with the start side of the
    <code>marquee</code>, and ends flush with the end side of the <code>marquee</code>.

    When the <a>marquee current loop index</a> is odd, slide the contents of the element in
    the opposite direction than that described by the <code>direction</code> attribute as defined below, such that it begins
    flush with the end side of the <code>marquee</code>, and ends flush with the start side of the
    <code>marquee</code>.

    <p class="example">
  For example, if the <code>direction</code>
    attribute is <a>left</a> (the default), then the
    contents would with their right edge flush with the right inner edge of the
    <code>marquee</code>'s content area, and the contents would then slide up to the point where the
    <em>left</em> edge of the contents are flush with the left inner edge of the
    <code>marquee</code>'s content area.
  </p>

    Once the animation has ended, the user agent is expected to <a>increment the marquee
    current loop index</a>. If the element is still <a>turned
    on</a> after this, then the user agent is expected to continue the animation.

    </dd>

  </dl>

  The <code>direction</code> attribute has the meanings described
  in the following table:

  <table>
    <thead>
    <tr>
      <th><code>direction</code> attribute state
      <th>Direction of animation
      <th>Start edge
      <th>End edge
      <th>Opposite direction
    <tbody>
    <tr>
      <td><a>left</a>
      <td>&larr; Right to left
      <td>Right
      <td>Left
      <td>&rarr; Left to Right
    <tr>
      <td><a>right</a>
      <td>&rarr; Left to Right
      <td>Left
      <td>Right
      <td>&larr; Right to left
    <tr>
      <td><a>up</a>
      <td>&uarr; Up (Bottom to Top)
      <td>Bottom
      <td>Top
      <td>&darr; Down (Top to Bottom)
    <tr>
      <td><a>down</a>
      <td>&darr; Down (Top to Bottom)
      <td>Top
      <td>Bottom
      <td>&uarr; Up (Bottom to Top)
  </table>

  In any case, the animation should proceed such that there is a delay given by the <a>marquee
  scroll interval</a> between each frame, and such that the content moves at most the distance
  given by the <a>marquee scroll distance</a> with each frame.

  When a <code>marquee</code> element has a <code undefined>bgcolor</code>
  attribute set, the value is expected to be parsed using the <a>rules for parsing a legacy color
  value</a>, and if that does not return an error, the user agent is expected to treat the
  attribute as a <a>presentational hint</a> setting the element's
  'background-color' property to the resulting color.

  The <code undefined>width</code> and <code
  undefined>height</code> attributes on a <code>marquee</code> element <a>map to the dimension properties</a> 'width' and 'height'
  on the element respectively.

  The <a>intrinsic height</a> of a <code>marquee</code> element with its <code>direction</code> attribute in the <a>up</a> or <a>down</a> states is 200 CSS pixels.

  The <code undefined>vspace</code> attribute of a <code>marquee</code> element
  <a>maps to the dimension properties</a> 'margin-top'
  and 'margin-bottom' on the element. The <code undefined>hspace</code> attribute
  of a <code>marquee</code> element <a>maps to the
  dimension properties</a> 'margin-left' and 'margin-right' on the element.

  The 'overflow' property on the <code>marquee</code> element is expected to be ignored; overflow
  is expected to always be hidden.

  </div>

  <div class="impl">

<h4 id="the-meter-element"><dfn>The <code>meter</code> element</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  meter { binding: <i>meter</i>; }
  </pre>

  When the <i>meter</i> binding applies to a <code>meter</code> element, the element is
  expected to render as an 'inline-block' box with a 'height' of '1em' and a 'width' of '5em', a
  'vertical-align' of '-0.2em', and with its contents depicting a gauge.

  When the element is wider than it is tall (or square), the depiction is expected to be of a
  horizontal gauge, with the minimum value on the right if the 'direction' property on this element
  has a computed value of 'rtl', and on the left otherwise. When the element is taller than it is
  wide, it is expected to depict a vertical gauge, with the minimum value on the bottom.

  User agents are expected to use a presentation consistent with platform conventions for gauges,
  if any.

  <p class="note">
  Requirements for what must be depicted in the gauge are included in the definition
  of the <code>meter</code> element.
  </p>

  </div>

  <div class="impl">

<h4 id="the-progress-element"><dfn>The <code>progress</code> element</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  progress { binding: <i>progress</i>; }
  </pre>

  When the <i>progress</i> binding applies to a <code>progress</code> element, the
  element is expected to render as an 'inline-block' box with a 'height' of '1em' and a 'width' of
  '10em', and a 'vertical-align' of '-0.2em'.

    <img class="extra" src="images/sample-progress.png" alt="" width=157 height=103 /> When the
  element is wider than it is tall, the element is expected to be depicted as a horizontal progress
  bar, with the start on the right and the end on the left if the 'direction' property on this
  element has a computed value of 'rtl', and with the start on the left and the end on the right
  otherwise. When the element is taller than it is wide, it is expected to depicted as a vertical
  progress bar, with the lowest value on the bottom. When the element is square, it is expected to
  be depicted as a direction-independent progress widget (e.g. a circular progress ring).

  User agents are expected to use a presentation consistent with platform conventions for
  progress bars. In particular, user agents are expected to use different presentations for
  determinate and indeterminate progress bars. User agents are also expected to vary the
  presentation based on the dimensions of the element.

  <p class="example">
  For example, on some platforms for showing indeterminate progress there is a
  "spinner" progress indicator with square dimensions, which could be used when the element is
  square, and an indeterminate progress bar, which could be used when the element is wide.
  </p>

  <p class="note">
  Requirements for how to determine if the progress bar is determinate or
  indeterminate, and what progress a determinate progress bar is to show, are included in the
  definition of the <code>progress</code> element.
  </p>

  </div>

  <div class="impl">

<h4 id="the-select-element"><dfn>The <code>select</code> element</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  select { binding: <i>select</i>; }
  </pre>

  When the <i>select</i> binding applies to a <code>select</code> element whose <code>multiple</code> attribute is present, the element is expected to
  render as a multi-select list box.

  When the <i>select</i> binding applies to a <code>select</code> element whose <code>multiple</code> attribute is absent, and the element's <a>display size</a> is greater than 1, the element is expected to
  render as a single-select list box.

  When the element renders as a list box, it is expected to render as an 'inline-block' box whose
  'height' is the height necessary to contain as many rows for items as given by the element's <a>display size</a>, or four rows if the attribute is absent, and
  whose 'width' is the <a>width of the <code>select</code>'s labels</a> plus the width of a
  scrollbar.

  When the <i>select</i> binding applies to a <code>select</code> element whose <code>multiple</code> attribute is absent, and the element's <a>display size</a> is 1, the element is expected to render as a
  one-line drop down box whose width is the <a>width of the <code>select</code>'s
  labels</a>.

  In either case (list box or drop-down box), the element's items are expected to be the
  element's <a>list of options</a>, with the element's
  <code>optgroup</code> element children providing headers for groups of options where
  applicable.

  An <code>optgroup</code> element is expected to be rendered by displaying the element's <code>label</code> attribute.

  An <code>option</code> element is expected to be rendered by displaying the element's <a>label</a>, indented under its <code>optgroup</code> element if it
  has one.

  The <dfn>width of the <code>select</code>'s labels</dfn> is the wider of the width necessary to
  render the widest <code>optgroup</code>, and the width necessary to render the widest
  <code>option</code> element in the element's <a>list of
  options</a> (including its indent, if any).

  If a <code>select</code> element contains a <a>placeholder label option</a>, the user
  agent is expected to render that <code>option</code> in a manner that conveys that it is a label,
  rather than a valid option of the control. This can include preventing the <a>placeholder label
  option</a> from being explicitly selected by the user. When the <a>placeholder label
  option</a>'s <a>selectedness</a> is true, the control
  is expected to be displayed in a fashion that indicates that no valid option is currently
  selected.

  User agents are expected to render the labels in a <code>select</code> in such a manner that
  any alignment remains consistent whether the label is being displayed as part of the page or in a
  menu control.

  </div>

  <div class="impl">

<h4 id="the-textarea-element"><dfn>The <code>textarea</code> element</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  textarea { binding: <i>textarea</i>; white-space: pre-wrap; }
  </pre>

  When the <i>textarea</i> binding applies to a <code>textarea</code> element, the
  element is expected to render as an 'inline-block' box rendered as a multiline text field. If this
  text field provides a selection, then, when the user changes the currect selection in such a
  binding, the user agent is expected to <a>queue a task</a> to <a>fire a simple
  event</a> that bubbles named <code>select</code> at the element, using
  the <a>user interaction task source</a> as the task source.

  If the element has a <code>cols</code> attribute, and parsing that
  attribute's value using the <a>rules for parsing non-negative integers</a> doesn't generate
  an error, then the user agent is expected to use the attribute as a <a>presentational hint</a> for the 'width' property on the element, with the value being
  the <a>textarea effective width</a> (as defined below). Otherwise, the user agent is
  expected to act as if it had a user-agent-level style sheet rule setting the 'width' property on
  the element to the <a>textarea effective width</a>.

  The <dfn>textarea effective width</dfn> of a <code>textarea</code> element is <a><var>size</var>&times;<var>avg</var>&nbsp;+&nbsp;<var>sbw</var></a>, where <var>size</var> is the element's <a>character width</a>, <var>avg</var> is the average
  character width of the primary font of the element, in CSS pixels, and <var>sbw</var> is
  the width of a scroll bar, in CSS pixels. (The element's 'letter-spacing' property does not affect
  the result.)

  If the element has a <code>rows</code> attribute, and parsing that
  attribute's value using the <a>rules for parsing non-negative integers</a> doesn't generate
  an error, then the user agent is expected to use the attribute as a <a>presentational hint</a> for the 'height' property on the element, with the value being
  the <a>textarea effective height</a> (as defined below). Otherwise, the user agent is
  expected to act as if it had a user-agent-level style sheet rule setting the 'height' property on
  the element to the <a>textarea effective height</a>.

  The <dfn>textarea effective height</dfn> of a <code>textarea</code> element is the height in
  CSS pixels of the number of lines specified the element's <a>character height</a>, plus the height of a scrollbar in CSS
  pixels.

  User agents are expected to apply the 'white-space' CSS property to <code>textarea</code>
  elements. For historical reasons, if the element has a <code>wrap</code> attribute whose value is an <a>ASCII
  case-insensitive</a> match for the string "<code>off</code>", then the user agent is expected to treat the attribute as a <a>presentational hint</a> setting the element's 'white-space'
  property to 'pre'.

  </div>

  <div class="impl">

<h4 id="the-keygen-element"><dfn>The <code>keygen</code> element</dfn></h4>

  <pre highlight="css">
@namespace url(http://www.w3.org/1999/xhtml);

  keygen { binding: <i>keygen</i>; }
  </pre>

  When the <i>keygen</i> binding applies to a <code>keygen</code> element, the element
  is expected to render as an 'inline-block' box containing a user interface to configure the key
  pair to be generated.

  </div>

  <div class="impl">

<h3 id="frames-and-framesets"><dfn>Frames and framesets</dfn></h3>

  User agent are expected to render <code>frameset</code> elements as a box with the height and
  width of the viewport, with a surface rendered according to the following layout algorithm:

  <ol>

    <li>

    The <var>cols</var> and <var>rows</var> variables are lists of zero or more pairs consisting
    of a number and a unit, the unit being one of <i>percentage</i>, <i>relative</i>, and
    <i>absolute</i>.

    Use the <a>rules for parsing a list of dimensions</a> to parse the value of the
    element's <code undefined>cols</code> attribute, if there is one.
    Let <var>cols</var> be the result, or an empty list if there is no such attribute.

    Use the <a>rules for parsing a list of dimensions</a> to parse the value of the
    element's <code undefined>rows</code> attribute, if there is one.
    Let <var>rows</var> be the result, or an empty list if there is no such attribute.

    </li>

    <li>

    For any of the entries in <var>cols</var> or <var>rows</var> that have the number zero and
    the unit <i>relative</i>, change the entry's number to one.

    </li>

    <li>

    If <var>cols</var> has no entries, then add a single entry consisting of the value 1 and the
    unit <i>relative</i> to <var>cols</var>.

    If <var>rows</var> has no entries, then add a single entry consisting of the value 1 and the
    unit <i>relative</i> to <var>rows</var>.

    </li>

    <li>

    Invoke the algorithm defined below to <a>convert a list of dimensions to a list of pixel
    values</a> using <var>cols</var> as the input list, and the width of the surface that the
    <code>frameset</code> is being rendered into, in CSS pixels, as the input dimension. Let
    <var>sized cols</var> be the resulting list.

    Invoke the algorithm defined below to <a>convert a list of dimensions to a list of pixel
    values</a> using <var>rows</var> as the input list, and the height of the surface that the
    <code>frameset</code> is being rendered into, in CSS pixels, as the input dimension. Let
    <var>sized rows</var> be the resulting list.

    </li>

    <li>

    Split the surface into a grid of <a><var>w</var>&times;<var>h</var></a>
    rectangles, where <var>w</var> is the number of entries in <var>sized cols</var> and
    <var>h</var> is the number of entries in <var>sized rows</var>.

    Size the columns so that each column in the grid is as many CSS pixels wide as the
    corresponding entry in the <var>sized cols</var> list.

    Size the rows so that each row in the grid is as many CSS pixels high as the corresponding
    entry in the <var>sized rows</var> list.

    </li>

    <li>

    Let <var>children</var> be the list of <code>frame</code> and <code>frameset</code> elements
    that are children of the <code>frameset</code> element for which the algorithm was invoked.

    </li>

    <li>

    For each row of the grid of rectangles created in the previous step, from top to bottom, run
    these substeps:

    <ol>

      <li>

      For each rectangle in the row, from left to right, run these substeps:

      <ol>

        <li>

        If there are any elements left in <var>children</var>, take the first element in the
        list, and assign it to the rectangle.

        If this is a <code>frameset</code> element, then recurse the entire <code>frameset</code>
        layout algorithm for that <code>frameset</code> element, with the rectangle as the
        surface.

        Otherwise, it is a <code>frame</code> element; render its <a>nested browsing
        context</a>, positoned and sized to fit the rectangle.

        </li>

        <li>

        If there are any elements left in <var>children</var>, remove the first element from
        <var>children</var>.

        </li>

      </ol>

      </li>

    </ol>

    </li>

    <li>

    If the <code>frameset</code> element <a>has a border</a>, draw an outer set of borders
    around the rectangles, using the element's <a>frame border color</a>.

    For each rectangle, if there is an element assigned to that rectangle, and that element
    <a>has a border</a>, draw an inner set of borders around that rectangle, using the
    element's <a>frame border color</a>.

    For each (visible) border that does not abut a rectangle that is assigned a
    <code>frame</code> element with a <code undefined>noresize</code>
    attribute (including rectangles in further nested <code>frameset</code> elements), the user
    agent is expected to allow the user to move the border, resizing the rectangles within, keeping
    the proportions of any nested <code>frameset</code> grids.

    A <code>frameset</code> or <code>frame</code> element <dfn>has a border</dfn> if the
    following algorithm returns true:

    <ol>

      <li>If the element has a <code>frameborder</code> attribute whose value is not the
      empty string and whose first character is either a U+0031 DIGIT ONE (1) character, a U+0079
      LATIN SMALL LETTER Y character (y), or a U+0059 LATIN CAPITAL LETTER Y character (Y), then
      return true.</li>

      <li>Otherwise, if the element has a <code>frameborder</code> attribute, return
      false.</li>

      <li>Otherwise, if the element has a parent element that is a <code>frameset</code> element,
      then return true if <em>that</em> element <a>has a border</a>, and false if it does
      not.</li>

      <li>Otherwise, return true.</li>

    </ol>

    The <dfn>frame border color</dfn> of a <code>frameset</code> or <code>frame</code> element
    is the color obtained from the following algorithm:

    <ol>

      <li>If the element has a <code>bordercolor</code> attribute, and applying the
      <a>rules for parsing a legacy color value</a> to that attribute's value does not result
      in an error, then return the color so obtained.</li>

      <li>Otherwise, if the element has a parent element that is a <code>frameset</code> element,
      then return the <a>frame border color</a> of that element.

      <li>Otherwise, return gray.</li>

    </ol>

    </li>

  </ol>

  The algorithm to <dfn>convert a list of dimensions to a list of pixel values</dfn> consists of
  the following steps:

  <ol>

    <li>

    Let <var>input list</var> be the list of numbers and units passed to the algorithm.

    Let <var>output list</var> be a list of numbers the same length as <var>input list</var>, all
    zero.

    Entries in <var>output list</var> correspond to the entries in <var>input list</var> that
    have the same position.

    </li>

    <li>Let <var>input dimension</var> be the size passed to the algorithm.

    <li>

    Let <var>count percentage</var> be the number of entries in <var>input list</var> whose unit
    is <i>percentage</i>.

    Let <var>total percentage</var> be the sum of all the numbers in <var>input list</var> whose
    unit is <i>percentage</i>.

    Let <var>count relative</var> be the number of entries in <var>input list</var> whose unit is
    <i>relative</i>.

    Let <var>total relative</var> be the sum of all the numbers in <var>input list</var> whose
    unit is <i>relative</i>.

    Let <var>count absolute</var> be the number of entries in <var>input list</var> whose unit is
    <i>absolute</i>.

    Let <var>total absolute</var> be the sum of all the numbers in <var>input list</var> whose
    unit is <i>absolute</i>.

    Let <var>remaining space</var> be the value of <var>input dimension</var>.

    </li>

    <li>

    If <var>total absolute</var> is greater than <var>remaining space</var>, then for each entry
    in <var>input list</var> whose unit is <i>absolute</i>, set the corresponding value in
    <var>output list</var> to the number of the entry in <var>input list</var> multiplied by
    <var>remaining space</var> and divided by <var>total absolute</var>. Then, set <var>remaining
    space</var> to zero.

    Otherwise, for each entry in <var>input list</var> whose unit is <i>absolute</i>, set the
    corresponding value in <var>output list</var> to the number of the entry in <var>input
    list</var>. Then, decrement <var>remaining space</var> by <var>total absolute</var>.

    </li>

    <li>

    If <var>total percentage</var> multiplied by the <var>input dimension</var> and divided by
    100 is greater than <var>remaining space</var>, then for each entry in <var>input list</var>
    whose unit is <i>percentage</i>, set the corresponding value in <var>output list</var> to the
    number of the entry in <var>input list</var> multiplied by <var>remaining space</var> and
    divided by <var>total percentage</var>. Then, set <var>remaining space</var> to zero.

    Otherwise, for each entry in <var>input list</var> whose unit is <i>percentage</i>, set the
    corresponding value in <var>output list</var> to the number of the entry in <var>input
    list</var> multiplied by the <var>input dimension</var> and divided by 100. Then, decrement
    <var>remaining space</var> by <var>total percentage</var> multiplied by the <var>input
    dimension</var> and divided by 100.

    </li>

    <li>

    For each entry in <var>input list</var> whose unit is <i>relative</i>, set the corresponding
    value in <var>output list</var> to the number of the entry in <var>input list</var> multiplied
    by <var>remaining space</var> and divided by <var>total relative</var>.

    </li>

    <li>Return <var>output list</var>.</li>

  </ol>

  User agents working with integer values for frame widths (as opposed to user agents that can
  lay frames out with subpixel accuracy) are expected to distribute the remainder first to the last
  entry whose unit is <i>relative</i>, then equally (not proportionally) to each entry whose unit is
  <i>percentage</i>, then equally (not proportionally) to each entry whose unit is <i>absolute</i>,
  and finally, failing all else, to the last entry.

  <hr />

  The contents of a <code>frame</code> element that does not have a <code>frameset</code> parent
  are expected to be rendered as transparent black; the user agent is expected to not render the
  <a>nested browsing context</a> in this case, and that <a>nested browsing context</a>
  is expected to have a viewport with zero width and zero height.

  </div>

  <div class="impl">

<h3 id="interactive-media"><dfn>Interactive media</dfn></h3>

<h4 id="links,-forms,-and-navigation"><dfn>Links, forms, and navigation</dfn></h4>

  User agents are expected to allow the user to control aspects of <a>hyperlink</a>
  activation and <a>form submission</a>, such as which <a>browsing context</a> is to be
  used for the subsequent <a>navigation</a>.

  User agents are expected to allow users to discover the destination of <a>hyperlinks</a> and of <a>forms</a> before triggering their
  <a>navigation</a>.

  User agents may allow users to <a>navigate</a> <a>browsing contexts</a> to the URLs <a>indicated</a> by the
  <code>cite</code> attributes on <code>q</code>, <code>blockquote</code>,
  <code>ins</code>, and <code>del</code> elements.

  User agents may surface <a>hyperlinks</a> created by <code>link</code>
  elements in their user interface.

  <p class="note">
  While <code>link</code> elements that create <a>hyperlinks</a> will match the ':link' or ':visited' pseudo-classes, will
  react to clicks if visible, and so forth, this does not extend to any browser interface constructs
  that expose those same links. Activating a link through the browser's interface, rather than in
  the page itself, does not trigger <code>click</code> events and the like.
  </p>

<h4 id="the-title-attribute"><dfn>The <code>title</code> attribute</dfn></h4>

  User agents are expected to expose the <a>advisory information</a> of elements upon user
  request, and to make the user aware of the presence of such information.

  On interactive graphical systems where the user can use a pointing device, this could take the
  form of a tooltip. When the user is unable to use a pointing device, then the user agent is
  expected to make the content available in some other fashion, e.g. by making the element a
  <i>focusable area</i> and always displaying the <a>advisory information</a> of the currently
  <a>focused</a> element, or by showing the <a>advisory information</a> of the elements
  under the user's finger on a touch device as the user pans around the screen.

  U+000A LINE FEED (LF) characters are expected to cause line breaks in the tooltip; U+0009
  CHARACTER TABULATION (tab) characters are expected to render as a non-zero horizontal shift that
  lines up the next glyph with the next tab stop, with tab stops occurring at points that are
  multiples of 8 times the width of a U+0020 SPACE character.

  <div class="example">
    For example, a visual user agent could make elements with a <code>title</code> attribute <a>focusable</a>, and could make any <a>focused</a> element with a
    <code>title</code> attribute show its tooltip under the element while the
    element has focus. This would allow a user to tab around the document to find all the advisory
    text.
  </div>

  <div class="example">
    As another example, a screen reader could provide an audio cue when reading an element with a
    tooltip, with an associated key to read the last tooltip for which a cue was played.
  </div>

<h4 id="editing-hosts"><dfn>Editing hosts</dfn></h4>

  The current text editing caret (i.e. the <a>active range</a>, if it is empty and in an
  <a>editing host</a>), if any, is expected to act like an inline
  <a>replaced element</a> with the vertical dimensions of the caret and with zero width for
  the purposes of the CSS rendering model.

  <p class="note">
  This means that even an empty block can have the caret inside it, and that when
  the caret is in such an element, it prevents margins from collapsing through the element.
  </p>

<h4 id="text-rendered-in-native-user-interfaces"><dfn>Text rendered in native user interfaces</dfn></h4>

  User agents are expected to honor the Unicode semantics of text that is exposed in user
  interfaces, for example supporting the bidirectional algorithm in text shown in dialogs, title
  bars, pop-up menus, and tooltips. Text from the contents of elements is expected to be rendered in
  a manner that honors <a>the directionality</a> of the element from which the text was
  obtained. Text from attributes is expected to be rendered in a manner that honours the
  <a>directionality of the attribute</a>.

  <div class="example">
    Consider the following markup, which has Hebrew text asking for a programming language, the
    languages being text for which a left-to-right direction is important given the punctuation in
    some of their names:

    <pre highlight="html">
  &lt;p dir="rtl" lang="he">
  &lt;label>
  <span dir="rtl" lang="he">&#x5d1;&#x5d7;&#x5e8; &#x5e9;&#x5e4;&#x5ea; &#x5ea;&#x5db;&#x5e0;&#x5d5;&#x5ea;:</span>
  &lt;select>
    &lt;option dir="ltr">C++&lt;/option>
    &lt;option dir="ltr">C#&lt;/option>
    &lt;option dir="ltr">FreePascal&lt;/option>
    &lt;option dir="ltr">F#&lt;/option>
  &lt;/select>
  &lt;/label>
  &lt;/p>
  </pre>

    If the <code>select</code> element was rendered as a drop down box, a correct rendering would
    ensure that the punctuation was the same both in the drop down, and in the box showing the
    current selection.

    <img src="images/bidizelect.png" width="206" height="105" alt="" />
  </div>

  <div class="example">
    The directionality of attributes depends on the attribute and on the element's <code>dir</code> attribute, as the following example demonstrates. Consider this
    markup:

    <pre highlight="html">
  <bdo dir=ltr>&lt;table>
  &lt;tr>
  &lt;th abbr="(&#x05D0;" dir=ltr>A
  &lt;th abbr="(&#x05D0;" dir=rtl>A
  &lt;th abbr="(&#x05D0;" dir=auto>A
  &lt;/table></bdo>
  </pre>

    If the <code>abbr</code> attributes are rendered, e.g. in a tooltip or
    other user interface, the first will have a left parenthesis (because the direction is 'ltr'),
    the second will have a right parenthesis (because the direction is 'rtl'), and the third will
    have a right parenthesis (because the direction is determined <em>from the attribute value</em>
    to be 'rtl').

    However, if instead the attribute was not a <a>directionality-capable attribute</a>, the
    results would be different:

    <pre highlight="html">
  <bdo dir=ltr>&lt;table>
  &lt;tr>
  &lt;th>A
  &lt;th>A
  &lt;th>A
  &lt;/table></bdo>
  </pre>

    In this case, if the user agent were to expose the <code>data-abbr</code> attribute
    in the user interface (e.g. in a debugging environment), the last case would be rendered with a
    <em>left</em> parenthesis, because the direction would be determined from the element's
    contents.
  </div>

  A string provided by a script (e.g. the argument to <code>window.alert()</code>) is expected to be treated as an independent set of one or
  more bidirectional algorithm paragraphs when displayed, as defined by the bidirectional algorithm,
  including, for instance, supporting the paragraph-breaking behavior of U+000A LINE FEED (LF)
  characters. For the purposes of determining the paragraph level of such text in the bidirectional
  algorithm, this specification does <em>not</em> provide a higher-level override of rules P2 and
  P3. [[!BIDI]]

  When necessary, authors can enforce a particular direction for a given paragraph by starting it
  with the Unicode U+200E LEFT-TO-RIGHT MARK or U+200F RIGHT-TO-LEFT MARK characters.

  <div class="example">
    Thus, the following script:

    <pre highlight="javascript">alert('\u05DC\u05DE\u05D3 HTML \u05D4\u05D9\u05D5\u05DD!')</pre>

    ...would always result in a message reading
        "<bdo lang="" dir=rtl>&#x05DC;&#x05DE;&#x05D3;&nbsp;LMTH&nbsp;&#x05D4;&#x05D9;&#x05D5;&#x05DD;!</bdo>"
    (not "<bdo lang="" dir=ltr>&#x05D3;&#x05DE;&#x05DC;&nbsp;HTML&nbsp;&#x05DD;&#x05D5;&#x05D9;&#x05D4;!</bdo>"),
    regardless of the language of the user agent interface or the
    direction of the page or any of its elements.
  </div>

  <div class="example">
    For a more complex example, consider the following script:

    <pre class="bad">/* Warning: this script does not handle right-to-left scripts correctly */
  var s;
  if (s = prompt('What is your name?')) {
  alert(s + '! Ok, Fred, ' + s + ', and Wilma will get the car.');
  }</pre>

    When the user enters "<kbd>Kitty</kbd>", the user agent would alert "<samp>Kitty! Ok, Fred,
    Kitty, and Wilma will get the car.</samp>". However, if the user enters "<kbd dir="rtl"
    lang="ar">&#x644;&#x627;&nbsp;&#x623;&#x641;&#x647;&#x645;</kbd>", then the bidirectional
    algorithm will determine that the direction of the paragraph is right-to-left, and so the output
    will be the following unintended mess: "<samp lang=""><bdo
    dir="rtl">&#x644;&#x627;&nbsp;&#x623;&#x641;&#x647;&#x645;!&nbsp;derF&nbsp;,kO,&nbsp;&#x644;&#x627;&nbsp;&#x623;&#x641;&#x647;&#x645;,&nbsp;rac&nbsp;eht&nbsp;teg&nbsp;lliw&nbsp;amliW&nbsp;dna.</bdo></samp>"

    To force an alert that starts with user-provided text (or other text of unknown
    directionality) to render left-to-right, the string can be prefixed with a U+200E LEFT-TO-RIGHT
    MARK character:

    <pre highlight="javascript">var s;
  if (s = prompt('What is your name?')) {
  alert('<strong>\u200E</strong>' + s + '! Ok, Fred, ' + s + ', and Wilma will get the car.');
  }</pre>
  </div>

<h3 id="print-media"><dfn>Print media</dfn></h3>

  User agents are expected to allow the user to request the opportunity to <dfn>obtain a physical
  form</dfn> (or a representation of a physical form) of a <code>Document</code>. For example,
  selecting the option to print a page or convert it to PDF format. [[!PDF]]

  When the user actually <a>obtains a physical form</a> (or
  a representation of a physical form) of a <code>Document</code>, the user agent is expected to
  create a new rendering of the <code>Document</code> for the print media.

<h3 id="unstyled-xml-documents"><dfn>Unstyled XML documents</dfn></h3>

  HTML user agents may, in certain circumstances, find themselves rendering non-HTML documents
  that use vocabularies for which they lack any built-in knowledge. This section provides for a way
  for user agents to handle such documents in a somewhat useful manner.

  While a <code>Document</code> is an <a>unstyled document</a>, the user agent is expected
  to render <a>an unstyled document view</a>.

  A <code>Document</code> is an <dfn>unstyled document</dfn> while it matches the following
  conditions:

  <ul>
    <li>The <code>Document</code> has no author style sheets (whether referenced by HTTP headers, processing instructions, elements like <code>link</code>, inline elements like <code>style</code>, or any other mechanism).
    <li>None of the elements in the <code>Document</code> have any <a>presentational hints</a>.
    <li>None of the elements in the <code>Document</code> have any <a>CSS styling attributes</a>.
    <li>None of the elements in the <code>Document</code> are in any of the following namespaces: <a>HTML namespace</a>, <a>SVG namespace</a>, <a>MathML namespace</a>
    <li>The <code>Document</code> has no <i>focusable area</i> (e.g. from XLink) other than the viewport.
    <li>The <code>Document</code> has no <a>hyperlinks</a> (e.g. from XLink).
    <li>There exists no <a>script</a> whose <a>settings object</a> specifies this <code>Document</code> as the <a>responsible document</a>.
    <li>None of the elements in the <code>Document</code> have any registered event listeners.
  </ul>

  <dfn>An unstyled document view</dfn> is one where the DOM is not rendered according to CSS
  (which would, since there are no applicable styles in this context, just result in a wall of
  text), but is instead rendered in a manner that is useful for a developer. This could consist of
  just showing the <code>Document</code> object's source, maybe with syntax highlighting, or it
  could consist of displaying just the DOM tree, or simply a message saying that the page is not a
  styled document.

  <p class="note">
  If a <code>Document</code> stops being an <a>unstyled document</a>, then the
  conditions above stop applying, and thus a user agent following these requirements will switch to
  using the regular CSS rendering.
  </p>
